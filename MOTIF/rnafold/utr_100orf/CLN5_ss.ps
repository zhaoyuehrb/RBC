%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:57:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCGCGGGCCGGGCGCGGGGAGGUGUCAUGCGCCGGAACCUGCGCUUGGGGCCAAGCUCUGGAGCUGACGCGCAGGGGCAAGGCGCCCCGCGUCCCGGACUGGCGGCUCCGCGCAUGCUCCUCCCAC\
) } def
/len { sequence length } bind def

/coor [
[171.43295288 274.33132935]
[177.51693726 268.05776978]
[170.82124329 254.63511658]
[164.12554932 241.21246338]
[157.42985535 227.78981018]
[150.73417664 214.36715698]
[138.12930298 206.43200684]
[138.89286804 190.62922668]
[132.19717407 177.20657349]
[125.33853912 163.86643982]
[118.31797791 150.61080933]
[111.29741669 137.35517883]
[104.27685547 124.09955597]
[97.25629425 110.84392548]
[90.07484436 97.67475891]
[82.73358154 84.59402466]
[75.39231110 71.51328278]
[68.05104065 58.43253708]
[60.70977402 45.35179901]
[53.36850739 32.27105713]
[50.57210159 47.00808716]
[40.90406418 58.47670364]
[26.85238838 63.72554779]
[12.03314877 61.40388107]
[0.25995034 52.10916138]
[-5.43747473 38.23330688]
[-3.59294295 23.34714890]
[5.31887102 11.28151226]
[19.00458908 5.14138651]
[33.94230652 6.50687933]
[46.28622818 15.02461243]
[42.31579971 0.55963016]
[38.34537506 -13.90535164]
[34.37494659 -28.37033463]
[30.40452194 -42.83531570]
[14.40899849 -46.82439041]
[2.65384412 -58.24851227]
[-1.73993909 -73.94345856]
[2.32815123 -89.62934875]
[13.66433144 -101.07769775]
[9.34284496 -115.44171143]
[5.02135801 -129.80572510]
[0.69987166 -144.16972351]
[-3.62161493 -158.53373718]
[-7.94310141 -172.89775085]
[-12.26458740 -187.26174927]
[-16.76065636 -201.57208252]
[-21.43063927 -215.82659912]
[-26.10062218 -230.08111572]
[-30.77060699 -244.33563232]
[-44.58981323 -251.52362061]
[-49.12277985 -266.04626465]
[-42.18495941 -279.17645264]
[-46.85494232 -293.43096924]
[-51.52492905 -307.68548584]
[-65.12982941 -316.18762207]
[-66.82190704 -332.14120483]
[-55.30313110 -343.30798340]
[-39.40973282 -341.12182617]
[-31.33375931 -327.25970459]
[-37.27040863 -312.35546875]
[-32.60042572 -298.10095215]
[-27.93044281 -283.84643555]
[-14.56817150 -277.36685181]
[-9.62908363 -262.97726440]
[-16.51608849 -249.00561523]
[-11.84610558 -234.75109863]
[-7.17612219 -220.49658203]
[-2.50613904 -206.24206543]
[2.61890697 -200.80905151]
[2.09942126 -191.58323669]
[6.42090750 -177.21923828]
[10.74239445 -162.85522461]
[15.06388092 -148.49121094]
[19.38536644 -134.12719727]
[23.70685387 -119.76319885]
[28.02833939 -105.39918518]
[41.55175400 -103.13164520]
[52.82017899 -95.20248413]
[59.58583069 -83.12322998]
[60.46887970 -69.23997498]
[55.23850632 -56.27776718]
[44.86950302 -46.80574417]
[48.83993149 -32.34075928]
[52.81035614 -17.87577820]
[56.78078461 -3.41079664]
[60.75120926 11.05418587]
[66.44924927 24.92978859]
[73.79051971 38.01052856]
[81.13178253 51.09127045]
[88.47305298 64.17201233]
[95.81431580 77.25275421]
[103.15558624 90.33349609]
[109.59920502 95.32501984]
[110.51192474 103.82336426]
[117.53248596 117.07899475]
[124.55304718 130.33462524]
[131.57360840 143.59025574]
[138.59416199 156.84588623]
[145.44752502 163.04402161]
[145.61982727 170.51087952]
[152.31552124 183.93353271]
[165.39930725 192.82876587]
[164.15682983 207.67146301]
[170.85252380 221.09411621]
[177.54820251 234.51676941]
[184.24389648 247.93942261]
[190.93959045 261.36209106]
[213.23483276 262.93194580]
[230.21792603 277.27322388]
[235.44195557 298.75329590]
[227.03526306 319.06649780]
[236.20286560 330.93893433]
[251.57002258 336.66455078]
[254.02787781 352.87847900]
[241.04801941 362.90118408]
[225.98298645 356.42221069]
[224.33041382 340.10653687]
[215.16281128 328.23410034]
[207.06013489 331.00805664]
[198.51237488 331.75405884]
[190.02027893 330.42071533]
[182.08316040 327.07870483]
[175.16955566 321.91702271]
[169.68957520 315.23233032]
[165.97059631 307.41186523]
[164.23764038 298.91113281]
[164.59985352 290.22723389]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 108]
[3 107]
[4 106]
[5 105]
[6 104]
[8 102]
[9 101]
[10 99]
[11 98]
[12 97]
[13 96]
[14 95]
[15 93]
[16 92]
[17 91]
[18 90]
[19 89]
[20 88]
[31 87]
[32 86]
[33 85]
[34 84]
[35 83]
[40 77]
[41 76]
[42 75]
[43 74]
[44 73]
[45 72]
[46 71]
[47 69]
[48 68]
[49 67]
[50 66]
[53 63]
[54 62]
[55 61]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
