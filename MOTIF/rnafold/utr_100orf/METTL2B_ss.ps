%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUUACGGAAAGUGAAGUGUUUCCGGCUCCGGUGUCAUGGCCGGCUCCUACCCUGAAGGUGCACCUGCAAUCCUCGCCGAUAAGAGGCAGCAGUUCGGAAGCCGGUUCCUGAGCGAUCCGGCGCGCGUCUUCCACC\
) } def
/len { sequence length } bind def

/coor [
[163.05897522 512.94030762]
[159.67362976 498.32730103]
[156.28826904 483.71429443]
[152.90290833 469.10131836]
[140.16902161 461.46041870]
[136.52761841 446.68899536]
[144.62844849 433.38430786]
[141.24308777 418.77133179]
[137.85772705 404.15835571]
[134.47238159 389.54534912]
[121.73847961 381.90444946]
[118.09707642 367.13302612]
[126.19789886 353.82836914]
[122.81254578 339.21536255]
[110.07865143 331.57446289]
[106.43724823 316.80303955]
[114.53807068 303.49838257]
[111.15271759 288.88537598]
[99.30567169 285.82369995]
[89.85051727 277.94296265]
[84.64369965 266.70971680]
[84.74192810 254.25631714]
[90.18833160 242.97602844]
[99.99227905 235.06321716]
[97.27553558 220.31129456]
[94.55879211 205.55935669]
[91.84204865 190.80743408]
[89.12530518 176.05551147]
[86.40856171 161.30358887]
[83.52408600 146.58354187]
[80.47224426 131.89727783]
[69.50970459 121.65898132]
[54.64941406 119.61647797]
[39.78912354 117.57398224]
[27.34921074 127.32201385]
[11.67024708 125.33565521]
[2.05428290 112.79337311]
[4.20629978 97.13628387]
[16.84954453 87.65346527]
[32.48300552 89.97089386]
[41.83162308 102.71369171]
[56.69191360 104.75619507]
[71.55220032 106.79869080]
[73.57061768 95.45463562]
[79.53847504 86.73364258]
[70.07215118 75.09797668]
[55.36112213 69.27593994]
[53.33100510 54.52033615]
[43.86468506 42.88466644]
[34.39836502 31.24899673]
[18.76088333 31.19260597]
[6.85156345 21.05840111]
[4.29362154 5.63144493]
[12.29483986 -7.80412388]
[27.07728767 -12.90444183]
[41.66114426 -7.26129532]
[49.16036224 6.46079540]
[46.03403473 21.78267860]
[55.50035477 33.41834641]
[64.96667480 45.05401611]
[79.00061035 50.04378891]
[81.70782471 65.63165283]
[91.17414093 77.26732635]
[95.53465271 76.02645111]
[100.04949951 75.61418915]
[104.56263733 76.04477692]
[111.76499176 62.88703918]
[118.96734619 49.72930145]
[126.16970062 36.57155991]
[120.91460419 24.11414337]
[123.77935028 11.10036755]
[133.49119568 2.26390028]
[146.32963562 0.68527687]
[153.82963562 -12.30510426]
[161.32963562 -25.29548454]
[168.82963562 -38.28586578]
[162.39547729 -52.40611267]
[165.52279663 -67.60478210]
[177.00907898 -78.03767395]
[192.43759155 -79.69312286]
[205.87577820 -71.93458557]
[212.15635681 -57.74537277]
[208.86434937 -42.58152771]
[197.26557922 -32.27385330]
[181.82000732 -30.78586578]
[174.32000732 -17.79548454]
[166.82000732 -4.80510426]
[159.32000732 8.18527699]
[164.37567139 24.18440819]
[156.17097473 39.20521164]
[139.32743835 43.77391434]
[132.12509155 56.93165588]
[124.92272949 70.08939362]
[117.72037506 83.24713135]
[125.37303162 96.58641815]
[123.66345215 112.61798859]
[112.37776947 125.15251160]
[95.15850067 128.84544373]
[98.21034241 143.53169250]
[103.05895996 151.37692261]
[101.16048431 158.58683777]
[103.87722778 173.33877563]
[106.59397125 188.09069824]
[109.31071472 202.84262085]
[112.02745819 217.59454346]
[114.74420166 232.34646606]
[131.27757263 239.61364746]
[140.11991882 255.18164062]
[137.93218994 272.79403687]
[125.76570129 285.50003052]
[129.15106201 300.11300659]
[142.27716064 308.50009155]
[145.50222778 323.36798096]
[137.42553711 335.83001709]
[140.81088257 350.44299316]
[153.93699646 358.83007812]
[157.16204834 373.69796753]
[149.08535767 386.16000366]
[152.47071838 400.77297974]
[155.85607910 415.38598633]
[159.24142456 429.99896240]
[172.36752319 438.38604736]
[175.59259033 453.25390625]
[167.51589966 465.71597290]
[170.90126038 480.32894897]
[174.28660583 494.94192505]
[177.67196655 509.55493164]
[192.49595642 513.36383057]
[203.84407043 523.63415527]
[209.10859680 538.00573730]
[207.07978821 553.17620850]
[198.22384644 565.65942383]
[184.57579041 572.58685303]
[169.27188110 572.36663818]
[155.82879639 565.04937744]
[147.33569336 552.31652832]
[145.74421692 537.09399414]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 127]
[2 126]
[3 125]
[4 124]
[7 121]
[8 120]
[9 119]
[10 118]
[13 115]
[14 114]
[17 111]
[18 110]
[24 106]
[25 105]
[26 104]
[27 103]
[28 102]
[29 101]
[30 99]
[31 98]
[32 43]
[33 42]
[34 41]
[45 63]
[46 62]
[48 60]
[49 59]
[50 58]
[66 94]
[67 93]
[68 92]
[69 91]
[73 88]
[74 87]
[75 86]
[76 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
