%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:27:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUGUAGAAAUUCAGGACACACCUGGAAAGAUAAGUAUCUCUAAAAGGUCCAUCCUUUCAGGAACUGUUGAGAAUAUAGAUUACCCACACUAUUGUG\
) } def
/len { sequence length } bind def

/coor [
[144.90515137 301.84872437]
[146.18154907 295.06713867]
[142.03703308 280.65106201]
[137.89250183 266.23498535]
[134.06712341 263.11132812]
[132.27299500 257.48187256]
[133.96853638 250.79275513]
[130.72827148 236.14691162]
[127.48800659 221.50106812]
[124.24773407 206.85522461]
[107.14276886 197.86117554]
[101.81710052 178.97444153]
[112.00817108 161.85751343]
[107.41731262 147.57731628]
[102.82645416 133.29711914]
[98.23559570 119.01691437]
[85.39414215 112.30548859]
[80.95951843 98.51127625]
[87.48420715 85.57394409]
[82.89334869 71.29374695]
[78.30249023 57.01354980]
[73.71163177 42.73335266]
[58.06081390 35.11134338]
[52.78363800 18.87465477]
[60.64775085 4.09984064]
[55.61499786 -10.03067303]
[50.58224869 -24.16118813]
[45.54949951 -38.29170227]
[40.51674652 -52.42221451]
[35.48399734 -66.55272675]
[30.45124817 -80.68324280]
[18.53225708 -91.08748627]
[21.55084801 -105.67300415]
[16.51809692 -119.80352020]
[11.48534679 -133.93403625]
[-0.24015945 -136.91737366]
[-8.92298794 -145.16860962]
[-12.42817593 -156.49572754]
[-9.97393608 -167.97230530]
[-2.30242562 -176.69338989]
[-6.44695139 -191.10945129]
[-10.59147739 -205.52552795]
[-14.73600388 -219.94158936]
[-28.02023125 -228.93652344]
[-29.12658882 -244.94137573]
[-17.20637321 -255.67860413]
[-1.40375400 -252.91151428]
[6.15885210 -238.76278687]
[-0.31993940 -224.08610535]
[3.82458663 -209.67004395]
[7.96911240 -195.25398254]
[12.11363888 -180.83792114]
[28.56812286 -173.11817932]
[34.42464828 -155.58032227]
[25.61585999 -138.96678162]
[30.64861107 -124.83626556]
[35.68136215 -110.70575714]
[47.24037552 -101.31222534]
[44.58176041 -85.71599579]
[49.61451340 -71.58547974]
[54.64726257 -57.45496750]
[59.68001175 -43.32445145]
[64.71276093 -29.19393730]
[69.74551392 -15.06342411]
[74.77826691 -0.93290979]
[87.16750336 2.96436667]
[95.12433624 13.47587204]
[95.52391815 26.84901810]
[87.99182892 38.14249420]
[92.58268738 52.42269135]
[97.17354584 66.70288849]
[101.76440430 80.98308563]
[114.60585785 87.69451141]
[119.04048157 101.48872375]
[112.51579285 114.42605591]
[117.10665131 128.70625305]
[121.69750977 142.98645020]
[126.28836823 157.26664734]
[136.99218750 159.70199585]
[145.59469604 166.38865662]
[150.52131653 176.01510620]
[150.90751648 186.74029541]
[146.74986267 196.54565430]
[138.89358521 203.61495972]
[142.13385010 218.26080322]
[145.37411499 232.90664673]
[148.61437988 247.55249023]
[152.30856323 262.09048462]
[156.45309448 276.50653076]
[160.59761047 290.92260742]
[165.18847656 305.20278931]
[170.22122192 319.33331299]
[175.25398254 333.46383667]
[188.08714294 343.67370605]
[185.39443970 359.85028076]
[169.94587708 365.35247803]
[157.63362122 354.52008057]
[161.12345886 338.49658203]
[156.09071350 324.36605835]
[151.05796814 310.23553467]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 90]
[3 89]
[4 88]
[7 87]
[8 86]
[9 85]
[10 84]
[13 78]
[14 77]
[15 76]
[16 75]
[19 72]
[20 71]
[21 70]
[22 69]
[25 65]
[26 64]
[27 63]
[28 62]
[29 61]
[30 60]
[31 59]
[33 57]
[34 56]
[35 55]
[40 52]
[41 51]
[42 50]
[43 49]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
