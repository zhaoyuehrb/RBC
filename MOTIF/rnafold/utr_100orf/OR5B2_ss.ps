%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:07:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGCUUUAUUUCUCAUUGCUACAGGUCAUCUUAAGUUUCUCAGAUAAUACUGAUGGAGAAUUGUACGGAAGUGACAAAGUUCAUUCUUCUAGGACUAACCAGUGUCCCAGAACUACAGAUCCCCCUCUUUAUCUUGUUCACCUUCAUCUACC\
) } def
/len { sequence length } bind def

/coor [
[-24.66794014 232.84609985]
[-34.42562866 235.63038635]
[-44.55431366 235.79612732]
[-54.36467361 233.34092712]
[-63.19135284 228.44039917]
[-70.43806458 221.43572998]
[-83.72540283 228.39608765]
[-97.01274872 235.35644531]
[-110.30008698 242.31680298]
[-123.58742523 249.27716064]
[-136.87477112 256.23751831]
[-135.86160278 270.36691284]
[-140.30780029 283.77105713]
[-149.50784302 294.42819214]
[-162.04185486 300.74432373]
[-175.99473572 301.79150391]
[-189.24864197 297.44403076]
[-199.80455017 288.39245605]
[-213.23199463 295.07852173]
[-226.65943909 301.76461792]
[-231.76928711 316.47946167]
[-245.48187256 323.06881714]
[-259.47875977 318.10668945]
[-272.90621948 324.79275513]
[-279.34738159 339.48599243]
[-294.88742065 343.47177124]
[-307.60537720 333.69253540]
[-307.74508667 317.65008545]
[-295.19940186 307.65081787]
[-279.59228516 311.36532593]
[-266.16482544 304.67922974]
[-261.68969727 290.51913452]
[-248.16760254 283.54721069]
[-233.34552002 288.33715820]
[-219.91807556 281.65109253]
[-206.49061584 274.96499634]
[-207.01498413 259.02233887]
[-200.52421570 244.38780212]
[-188.26634216 234.00000000]
[-172.65286255 229.96878052]
[-156.78445435 233.14688110]
[-143.83512878 242.95018005]
[-130.54779053 235.98982239]
[-117.26044464 229.02946472]
[-103.97309875 222.06910706]
[-90.68576050 215.10874939]
[-77.39842224 208.14839172]
[-78.01895142 188.03887939]
[-68.41935730 170.27227783]
[-51.13077164 159.69175720]
[-30.79180145 159.22456360]
[-12.90407562 169.07249451]
[-0.57279211 160.53204346]
[11.75849152 151.99157715]
[24.08977509 143.45112610]
[36.42105865 134.91065979]
[48.75234222 126.37020874]
[61.08362579 117.82975006]
[58.20484543 109.24926758]
[57.19440842 100.25531769]
[58.09748459 91.24996185]
[60.87370682 82.63574982]
[65.39897156 74.79776001]
[71.47098541 68.08638000]
[78.81831360 62.80160904]
[87.11251831 59.17969894]
[95.98282623 57.38255692]
[97.21343994 42.43312454]
[98.44405365 27.48369026]
[99.67466736 12.53425503]
[100.90528107 -2.41517949]
[101.82868958 -17.38673019]
[102.44451904 -32.37408447]
[103.06034088 -47.36143494]
[92.17024231 -58.81487656]
[92.65209961 -74.61181641]
[104.22003937 -85.38021851]
[120.01100159 -84.73136902]
[130.65649414 -73.05023193]
[129.84072876 -57.26700974]
[118.04769897 -46.74560928]
[117.43186951 -31.75825691]
[116.81604767 -16.77090454]
[119.37821960 -12.67401791]
[119.35121155 -6.91318893]
[115.85471344 -1.18456709]
[114.62409973 13.76486778]
[113.39348602 28.71430206]
[112.16287231 43.66373825]
[110.93226624 58.61317062]
[121.02145386 62.71082687]
[129.75024414 69.22164917]
[141.90357971 60.42980957]
[154.05691528 51.63796616]
[166.21025085 42.84612656]
[166.10743713 27.32938957]
[175.17213440 14.73529911]
[189.91874695 9.90653610]
[204.67691040 14.69985867]
[213.77183533 27.27213860]
[213.70629883 42.78907394]
[204.50552368 55.28409195]
[189.70739746 59.95259857]
[175.00209045 54.99945831]
[162.84875488 63.79130173]
[150.69541931 72.58314514]
[138.54209900 81.37498474]
[141.72415161 90.43551636]
[142.80635071 99.97740173]
[141.73422241 109.52042389]
[155.54780579 115.36721039]
[169.36138916 121.21399689]
[183.17497253 127.06079102]
[193.07566833 122.37252808]
[203.69915771 123.91055298]
[211.53504944 130.92060852]
[214.13040161 140.88160706]
[227.69229126 147.29057312]
[241.25419617 153.69955444]
[254.81608582 160.10853577]
[267.39654541 151.29788208]
[282.69827271 149.97387695]
[296.60516357 156.49263000]
[305.37631226 169.10064697]
[306.65237427 184.40644836]
[300.09005737 198.29281616]
[287.45458984 207.02442932]
[272.14486694 208.25248718]
[258.27914429 201.64668274]
[249.58718872 188.98391724]
[248.40711975 173.67042542]
[234.84521484 167.26144409]
[221.28332520 160.85247803]
[207.72142029 154.44349670]
[188.66390991 157.49450684]
[177.32818604 140.87437439]
[163.51460266 135.02758789]
[149.70101929 129.18080139]
[135.88743591 123.33400726]
[116.66449738 139.42941284]
[91.72495270 141.99890137]
[69.62408447 130.16102600]
[57.29280090 138.70149231]
[44.96151733 147.24194336]
[32.63023376 155.78240967]
[20.29895020 164.32286072]
[7.96766663 172.86332703]
[-4.36361694 181.40377808]
[-1.56339049 191.26370239]
[-1.40865207 201.49525452]
[-3.90107965 211.40214539]
[-8.86250114 220.31245422]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 47]
[7 46]
[8 45]
[9 44]
[10 43]
[11 42]
[18 36]
[19 35]
[20 34]
[23 31]
[24 30]
[52 148]
[53 147]
[54 146]
[55 145]
[56 144]
[57 143]
[58 142]
[67 90]
[68 89]
[69 88]
[70 87]
[71 86]
[72 83]
[73 82]
[74 81]
[92 107]
[93 106]
[94 105]
[95 104]
[110 139]
[111 138]
[112 137]
[113 136]
[117 134]
[118 133]
[119 132]
[120 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
