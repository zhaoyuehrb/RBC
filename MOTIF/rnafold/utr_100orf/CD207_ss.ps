%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:15:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGCCAGAAGCACCUGUGCUCCCAGGAUAAGGGUGAGCACUCAGGAUGACUGUGGAGAAGGAGGCCCCUGAUGCGCACUUCACUGUGGACAAACAGAACAUCUCCCUCUGGCCCCGAGAGCCUCCUCCCAAGUCCGGUCCAUCUC\
) } def
/len { sequence length } bind def

/coor [
[94.65988159 135.39216614]
[89.36371613 149.42607117]
[93.96296692 161.52478027]
[89.21103668 173.13133240]
[78.17751312 178.19477844]
[72.58466339 192.11311340]
[77.53319550 207.37390137]
[68.56733704 220.67776489]
[52.56493759 221.81913757]
[41.80166245 209.92243958]
[44.53417587 194.11380005]
[58.66632843 186.52026367]
[64.25917053 172.60192871]
[60.82523727 155.42231750]
[75.32980347 144.12991333]
[80.62596893 130.09600830]
[73.89779663 124.49076080]
[68.73207855 117.41950989]
[54.38957977 121.81185150]
[40.04707718 126.20419312]
[25.70457649 130.59654236]
[11.36207485 134.98887634]
[-2.98042583 139.38122559]
[-17.27550125 143.92553711]
[-31.52154350 148.62130737]
[-36.12545776 163.43966675]
[-48.58022690 172.69485474]
[-64.09672546 172.82806396]
[-76.70855713 163.78807068]
[-81.56620789 149.05094910]
[-76.80181122 134.28340149]
[-64.24737549 125.16387939]
[-48.73033905 125.19900513]
[-36.21731949 134.37527466]
[-21.97127914 129.67948914]
[-16.56583595 124.56298065]
[-7.37276745 125.03871918]
[6.96973372 120.64637756]
[21.31223488 116.25403595]
[35.65473557 111.86169434]
[49.99723816 107.46935272]
[64.33973694 103.07701111]
[68.37915802 83.22965240]
[82.54404449 68.75241089]
[102.29859924 64.28111267]
[121.31710052 71.24755096]
[132.57717896 61.33742523]
[143.83726501 51.42730713]
[155.09735107 41.51718521]
[166.14456177 31.37029648]
[176.97389221 20.99121475]
[187.80323792 10.61213112]
[198.63258362 0.23304799]
[202.70066833 -8.02464676]
[209.80366516 -10.24837589]
[220.85086060 -20.39526367]
[231.89807129 -30.54215240]
[236.14050293 -38.71163940]
[243.28910828 -40.78410339]
[254.54919434 -50.69422531]
[258.96408081 -58.77182388]
[266.15505981 -60.69208908]
[277.62295532 -70.36097717]
[289.09085083 -80.02986908]
[300.55874634 -89.69875336]
[312.02664185 -99.36764526]
[323.49450684 -109.03652954]
[315.34780884 -117.97797394]
[312.72650146 -132.51063538]
[318.59777832 -149.12622070]
[324.77630615 -162.79464722]
[330.95483398 -176.46308899]
[328.68347168 -194.70429993]
[343.25946045 -204.42395020]
[349.14645386 -218.22044373]
[343.49542236 -232.73606873]
[349.66223145 -246.64381409]
[363.53546143 -251.94177246]
[369.42248535 -265.73825073]
[375.30947876 -279.53475952]
[369.18493652 -294.10409546]
[375.23358154 -308.70510864]
[389.86685181 -314.67526245]
[404.40310669 -308.47259521]
[410.21823120 -293.77703857]
[403.86221313 -279.30715942]
[389.10598755 -273.64773560]
[383.21896362 -259.85125732]
[377.33197021 -246.05476379]
[383.10650635 -232.37301636]
[377.33279419 -218.29754639]
[362.94296265 -212.33343506]
[357.05593872 -198.53694153]
[361.27743530 -187.15466309]
[356.43048096 -175.58747864]
[344.62326050 -170.28456116]
[338.44473267 -156.61613464]
[332.26620483 -142.94770813]
[336.19851685 -136.56123352]
[348.97158813 -144.42564392]
[356.83575439 -131.65243530]
[344.06311035 -123.78829956]
[347.99542236 -117.40183258]
[362.98190308 -116.76521301]
[377.96838379 -116.12860107]
[392.95489502 -115.49198151]
[400.58123779 -128.76214600]
[413.50720215 -136.95834351]
[428.76251221 -138.19717407]
[442.84155273 -132.19393921]
[452.50912476 -120.32815552]
[455.54364014 -105.32647705]
[451.24780273 -90.63619232]
[440.60879517 -79.63301849]
[426.07135010 -74.84539795]
[410.97607422 -77.37349701]
[398.79174805 -86.63637543]
[392.31826782 -100.50549316]
[377.33178711 -101.14211273]
[362.34530640 -101.77873230]
[347.35882568 -102.41535187]
[333.16342163 -97.56864166]
[321.69552612 -87.89974976]
[310.22763062 -78.23086548]
[298.75973511 -68.56197357]
[287.29183960 -58.89308548]
[275.82394409 -49.22419739]
[264.45932007 -39.43413925]
[253.19921875 -29.52401924]
[242.04495239 -19.49494934]
[230.99775696 -9.34806156]
[219.95054626 0.79882586]
[209.01165771 11.06238937]
[198.18232727 21.44147301]
[187.35298157 31.82055473]
[176.52363586 42.19963837]
[175.53253174 46.93610001]
[171.51232910 51.07574844]
[165.00747681 52.77727127]
[153.74739075 62.68738937]
[142.48730469 72.59751129]
[131.22721863 82.50762939]
[135.13591003 93.17430878]
[135.50512695 104.52857971]
[132.29768372 115.42665863]
[125.83668518 124.77071381]
[116.77297974 131.61944580]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[5 13]
[6 12]
[18 42]
[19 41]
[20 40]
[21 39]
[22 38]
[23 37]
[24 35]
[25 34]
[46 142]
[47 141]
[48 140]
[49 139]
[50 136]
[51 135]
[52 134]
[53 133]
[55 132]
[56 131]
[57 130]
[59 129]
[60 128]
[62 127]
[63 126]
[64 125]
[65 124]
[66 123]
[67 122]
[70 98]
[71 97]
[72 96]
[74 93]
[75 92]
[78 89]
[79 88]
[80 87]
[103 121]
[104 120]
[105 119]
[106 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
