%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:08:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGCUCGGCUCGCGGACGGUGGCCGACAGGCUGCGCCCGCCCGCGCCCGGGGUGAUGCAGUUGCCCCCCGCGCUGUGCGCCCGCCUCGCUGCGGGGCCCGGGGCGGCGGAGCCGCUGCCUGUAGAGCGGGAUCCCGCGGCUGGGGCCGCGCCCU\
) } def
/len { sequence length } bind def

/coor [
[68.73336029 284.60949707]
[65.37448120 268.92199707]
[75.65625000 256.60678101]
[75.65625000 241.60678101]
[75.65625000 226.60678101]
[67.91894531 213.87950134]
[75.65625000 200.07933044]
[75.65625000 185.07933044]
[75.65625000 170.07933044]
[75.65625000 155.07933044]
[75.65625000 140.07933044]
[75.65625000 125.07933044]
[67.38558960 112.56549072]
[53.58589935 106.68598938]
[39.78620911 100.80648804]
[25.98651695 94.92699432]
[24.85101318 99.54057312]
[22.31444931 104.10054016]
[18.37539482 108.23236084]
[13.12529278 111.56293488]
[-0.29422697 118.26491547]
[-13.71374607 124.96688843]
[-27.13326645 131.66886902]
[-40.55278397 138.37084961]
[-53.97230530 145.07281494]
[-62.55809402 159.04479980]
[-78.94142914 158.32487488]
[-86.26854706 143.65362549]
[-77.00193024 130.12358093]
[-60.67428207 131.65330505]
[-47.25476074 124.95132446]
[-33.83524323 118.24935150]
[-20.41572380 111.54737091]
[-6.99620390 104.84539032]
[6.42331553 98.14341736]
[8.82948494 83.33766174]
[-1.77711689 72.73106384]
[-17.00641060 68.44396210]
[-20.53485298 53.97332382]
[-31.14145470 43.36672211]
[-41.74805450 32.76012039]
[-54.65952682 31.96969986]
[-63.27793121 22.86886024]
[-63.35823441 10.73666096]
[-73.74909973 -0.08137554]
[-84.13996124 -10.89941216]
[-94.53083038 -21.71744919]
[-110.10019684 -22.19976425]
[-120.48390198 -33.31881332]
[-119.92813873 -48.15885162]
[-130.31900024 -58.97688675]
[-140.70986938 -69.79492188]
[-151.10073853 -80.61296082]
[-161.49160767 -91.43099976]
[-171.88246155 -102.24903107]
[-182.27333069 -113.06707001]
[-192.66419983 -123.88510895]
[-207.99697876 -131.11988831]
[-205.28948975 -147.85624695]
[-188.45767212 -149.88763428]
[-181.84616089 -134.27597046]
[-171.45529175 -123.45793915]
[-161.06443787 -112.63990021]
[-150.67356873 -101.82186127]
[-140.28269958 -91.00382233]
[-129.89183044 -80.18579102]
[-119.50096893 -69.36775208]
[-109.11010742 -58.54971695]
[-94.25971985 -58.50748062]
[-83.56780243 -47.68447495]
[-83.71279144 -32.10831451]
[-73.32192993 -21.29027748]
[-62.93106079 -10.47224045]
[-52.54019547 0.34579587]
[-35.46321487 4.28100634]
[-31.14145470 22.15352058]
[-20.53485298 32.76012039]
[-9.92825127 43.36672211]
[4.54238701 46.89516830]
[8.82948494 62.12445831]
[19.43608665 72.73106384]
[31.86601639 81.12730408]
[45.66570663 87.00679779]
[59.46540070 92.88629913]
[73.26509094 98.76580048]
[80.69989777 83.36712646]
[95.32839203 76.26200104]
[110.39238739 79.58461761]
[119.61164093 90.89238739]
[134.56300354 89.68538666]
[149.51435852 88.47838593]
[164.46571350 87.27139282]
[179.41708374 86.06439209]
[194.36843872 84.85739136]
[209.31979370 83.65039062]
[224.27114868 82.44339752]
[239.22251892 81.23639679]
[254.16096497 79.87891388]
[269.08499146 78.37108612]
[284.00900269 76.86325073]
[298.93304443 75.35542297]
[313.73876953 72.94925690]
[328.37225342 69.65352631]
[343.00570679 66.35779572]
[357.63916016 63.06206894]
[372.27261353 59.76634216]
[386.90609741 56.47061157]
[401.53955078 53.17488480]
[416.17300415 49.87915421]
[427.85302734 38.36788559]
[443.58801270 42.98768997]
[447.19113159 58.98611069]
[434.95584106 69.90534210]
[419.46875000 64.51261902]
[404.83526611 67.80834198]
[390.20181274 71.10407257]
[375.56835938 74.39980316]
[360.93490601 77.69553375]
[346.30142212 80.99125671]
[331.66796875 84.28698730]
[317.03451538 87.58271790]
[328.87020874 96.79772186]
[330.90795898 111.65866852]
[321.98962402 123.71949005]
[307.18386841 126.12556458]
[294.90533447 117.50942230]
[292.13241577 102.76794434]
[300.44085693 90.27944946]
[285.51684570 91.78727722]
[270.59280396 93.29510498]
[255.66879272 94.80294037]
[249.29338074 98.62625885]
[240.42951965 96.18775940]
[225.47814941 97.39475250]
[210.52679443 98.60175323]
[195.57543945 99.80875397]
[180.62406921 101.01575470]
[165.67271423 102.22274780]
[150.72135925 103.42974854]
[135.76998901 104.63674927]
[120.81863403 105.84374237]
[115.83669281 117.14051819]
[104.84457397 124.57707977]
[90.65625000 125.07933044]
[90.65625000 140.07933044]
[90.65625000 155.07933044]
[90.65625000 170.07933044]
[90.65625000 185.07933044]
[90.65625000 200.07933044]
[98.39354706 213.87950134]
[90.65625000 226.60678101]
[90.65625000 241.60678101]
[90.65625000 256.60678101]
[100.93801880 268.92199707]
[97.57913208 284.60949707]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 153]
[4 152]
[5 151]
[7 149]
[8 148]
[9 147]
[10 146]
[11 145]
[12 144]
[13 85]
[14 84]
[15 83]
[16 82]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[25 30]
[36 81]
[37 80]
[39 78]
[40 77]
[41 76]
[44 74]
[45 73]
[46 72]
[47 71]
[50 68]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
[57 61]
[89 141]
[90 140]
[91 139]
[92 138]
[93 137]
[94 136]
[95 135]
[96 134]
[97 133]
[98 131]
[99 130]
[100 129]
[101 128]
[102 121]
[103 120]
[104 119]
[105 118]
[106 117]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
