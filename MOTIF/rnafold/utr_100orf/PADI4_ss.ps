%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:26:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGCCAGAGGGACGAGCUAGCCCGACGAUGGCCCAGGGGACAUUGAUCCGUGUGACCCCAGAGCAGCCCACCCAUGCCGUGUGUGUGCUGGGCACCUUGACUCAGCUUGACAUCUGCAGCUCUGCCC\
) } def
/len { sequence length } bind def

/coor [
[93.52636719 289.64059448]
[90.23388672 304.64242554]
[79.86975098 315.97732544]
[65.22185516 320.59628296]
[50.23041153 317.25680542]
[38.92804337 306.85717773]
[34.35503006 292.19488525]
[37.74148941 277.21395874]
[48.17648315 265.94424438]
[62.85305023 261.41723633]
[66.11450195 246.77609253]
[69.37595367 232.13494873]
[61.19398880 219.74176025]
[64.29299927 204.84710693]
[77.34757996 196.34913635]
[80.60903931 181.70800781]
[83.87049103 167.06686401]
[87.13194275 152.42572021]
[90.39339447 137.78459167]
[77.65367126 128.32331848]
[70.63880157 115.42809296]
[56.12654495 119.22209167]
[41.61428833 123.01609039]
[35.08335495 137.22457886]
[20.92530823 143.86413574]
[5.82514429 139.79977417]
[-3.08730125 126.95055389]
[-1.60384357 111.38349152]
[9.57507420 100.44887543]
[25.17110825 99.30970001]
[37.82028961 108.50383759]
[52.33254242 104.70983887]
[66.84480286 100.91584015]
[67.07121277 96.02492523]
[68.01518250 91.22063446]
[69.65612030 86.60765076]
[71.95828247 82.28649902]
[61.41645050 71.61551666]
[50.87462234 60.94453812]
[40.33279419 50.27355576]
[25.12988472 45.89381790]
[21.68960953 31.40196609]
[11.14778042 20.73098373]
[0.60595173 10.06000233]
[-14.71374321 12.52709866]
[-28.54252052 5.48830938]
[-35.56293106 -8.34980583]
[-33.07548904 -23.66621017]
[-22.03665924 -34.57143402]
[-6.69110298 -36.87219620]
[7.06050348 -29.68380547]
[13.93038559 -15.77034569]
[11.27693367 -0.48182636]
[21.81876183 10.18915558]
[32.36059189 20.86013603]
[46.80947876 24.47661591]
[51.00377655 39.73172760]
[61.54560471 50.40270996]
[72.08743286 61.07369232]
[82.62926483 71.74467468]
[102.01812744 66.89360809]
[120.67419434 74.06385040]
[132.43412781 64.75235748]
[144.19407654 55.44087219]
[155.83975220 45.98687744]
[167.36946106 36.39178085]
[178.41833496 26.24671173]
[188.96015930 15.57573032]
[199.50198364 4.90474844]
[210.04382324 -5.76623297]
[220.58564758 -16.43721390]
[221.30534363 -29.38290787]
[230.39227295 -38.05863571]
[242.55300903 -38.17004395]
[253.35156250 -48.58115768]
[264.15011597 -58.99227142]
[274.94866943 -69.40338135]
[285.74722290 -79.81449890]
[287.47668457 -95.76406097]
[301.10147095 -104.23427582]
[316.16983032 -98.72751617]
[321.12258911 -83.46810150]
[312.16043091 -70.16174316]
[296.15832520 -69.01594543]
[285.35977173 -58.60483170]
[274.56121826 -48.19371796]
[263.76266479 -37.78260803]
[252.96412659 -27.37149429]
[249.08641052 -10.30162811]
[231.25663757 -5.89538574]
[220.71479797 4.77559566]
[210.17297363 15.44657707]
[199.63114929 26.11755943]
[189.08930969 36.78853989]
[189.02897644 39.69005585]
[187.75492859 42.73935318]
[185.20594788 45.45056534]
[181.50640869 47.32549667]
[176.96455383 47.92148972]
[165.43484497 57.51658249]
[162.27331543 64.28329468]
[153.50555420 67.20080566]
[141.74562073 76.51229858]
[129.98568726 85.82379150]
[135.74569702 104.88005066]
[129.48992920 125.50109863]
[140.53880310 135.64616394]
[155.43374634 131.62818909]
[170.12951660 136.32263184]
[179.93675232 148.23152161]
[181.72599792 163.55477905]
[174.92630005 177.40280151]
[161.70744324 185.35673523]
[146.28749084 184.87852478]
[133.58689880 176.12074280]
[127.65839386 161.87797546]
[130.39372253 146.69503784]
[119.34485626 136.54997253]
[105.03453064 141.04603577]
[101.77307892 155.68717957]
[98.51162720 170.32830811]
[95.25017548 184.96945190]
[91.98872375 199.61059570]
[100.20195770 212.84617615]
[96.68580627 227.64790344]
[84.01708984 235.39640808]
[80.75563812 250.03753662]
[77.49418640 264.67868042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 128]
[11 127]
[12 126]
[15 123]
[16 122]
[17 121]
[18 120]
[19 119]
[21 33]
[22 32]
[23 31]
[37 60]
[38 59]
[39 58]
[40 57]
[42 55]
[43 54]
[44 53]
[62 104]
[63 103]
[64 102]
[65 100]
[66 99]
[67 94]
[68 93]
[69 92]
[70 91]
[71 90]
[74 88]
[75 87]
[76 86]
[77 85]
[78 84]
[106 118]
[107 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
