%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUCCGCCAGAGCUGUUUCCGUUCCUCUGCCCGCCAUGCCGUUCCUAGAGCUGCACACGAAUUUCCCCGCCAACCGAGUGCCCGCGGGGCUGGAGAAACGGCUGUGCGCCGUCGCUGCCUCCAUCUUGGGCAAAC\
) } def
/len { sequence length } bind def

/coor [
[236.44738770 521.00616455]
[229.66331482 511.40628052]
[225.40808105 500.43563843]
[223.94163513 488.74838257]
[225.35740662 477.04287720]
[229.57647705 466.01998901]
[236.35188293 456.34115601]
[245.28306580 448.58862305]
[238.99542236 434.97003174]
[232.55316162 421.42391968]
[225.95713806 407.95199585]
[213.41143799 399.92364502]
[214.29209900 384.12698364]
[207.69609070 370.65505981]
[201.10006714 357.18313599]
[194.50404358 343.71121216]
[187.90802002 330.23931885]
[181.31199646 316.76739502]
[174.71598816 303.29547119]
[168.11996460 289.82354736]
[161.52394104 276.35165405]
[158.23501587 274.86929321]
[155.52976990 271.67306519]
[154.22760010 267.06912231]
[154.97299194 261.72766113]
[149.31170654 247.83702087]
[143.65040588 233.94638062]
[130.40089417 231.95579529]
[119.79363251 223.59411621]
[114.68293762 210.97444153]
[116.51163483 197.37303162]
[124.90570068 186.37879944]
[119.56207275 172.36289978]
[114.21845245 158.34698486]
[108.87482452 144.33108521]
[103.53119659 130.31517029]
[94.61574554 130.04145813]
[86.16017914 127.20181274]
[78.88671112 122.03878784]
[73.41658020 114.99337006]
[70.21701813 106.66732788]
[69.56130219 97.77180481]
[71.50543976 89.06660461]
[59.25088882 80.41639709]
[46.99633789 71.76619720]
[34.74179077 63.11598969]
[18.31489182 58.92155075]
[17.79799080 41.97548676]
[33.93870544 36.78764725]
[43.39199448 50.86144257]
[55.64654541 59.51164627]
[67.90109253 68.16184998]
[80.15563965 76.81205750]
[85.95874786 72.90161133]
[92.50000000 70.41572571]
[92.50000000 55.41572571]
[92.50000000 40.41572571]
[92.50000000 25.41572571]
[84.76270294 11.61555386]
[92.50000000 -1.11171854]
[92.50000000 -16.11171913]
[78.33658600 -21.56719398]
[67.10297394 -31.77358246]
[60.31841660 -45.35055542]
[58.90046310 -60.46193695]
[63.04088593 -75.06403351]
[72.17972565 -87.18204498]
[85.08103180 -95.17709351]
[100.00000000 -97.96791840]
[114.91896820 -95.17709351]
[127.82027435 -87.18204498]
[136.95912170 -75.06403351]
[141.09953308 -60.46193695]
[139.68157959 -45.35055542]
[132.89701843 -31.77358246]
[121.66341400 -21.56719398]
[107.50000000 -16.11171913]
[107.50000000 -1.11171854]
[115.23729706 11.61555386]
[107.50000000 25.41572571]
[107.50000000 40.41572571]
[107.50000000 55.41572571]
[107.50000000 70.41572571]
[125.82176971 83.72991943]
[129.92378235 106.00386810]
[117.54710388 124.97154999]
[122.89073181 138.98745728]
[128.23435974 153.00337219]
[133.57798767 167.01927185]
[138.92161560 181.03518677]
[155.27267456 185.20031738]
[165.83926392 198.14210510]
[166.63357544 214.66494751]
[157.54104614 228.28509521]
[163.20233154 242.17573547]
[168.86363220 256.06637573]
[174.99584961 269.75561523]
[181.59187317 283.22753906]
[188.18789673 296.69946289]
[194.78392029 310.17135620]
[201.37994385 323.64328003]
[207.97595215 337.11520386]
[214.57197571 350.58712769]
[221.16799927 364.05902100]
[227.76402283 377.53094482]
[240.78152466 386.52291870]
[239.42906189 401.35598755]
[246.02508545 414.82791138]
[252.66658020 421.22689819]
[252.61398315 428.68240356]
[258.90164185 442.30096436]
[277.47253418 440.83840942]
[295.18679810 446.49734497]
[309.42105103 458.41406250]
[318.07690430 474.80014038]
[319.89041138 493.21066284]
[314.61645508 510.90896606]
[303.06161499 525.27362061]
[310.85537720 538.08990479]
[318.64913940 550.90618896]
[326.44290161 563.72247314]
[334.23666382 576.53875732]
[349.72079468 578.72393799]
[360.13925171 590.38543701]
[360.57275391 606.01696777]
[350.81655884 618.23791504]
[335.47732544 621.27783203]
[321.79769897 613.70141602]
[316.23681641 599.08599854]
[321.42034912 584.33251953]
[313.62658691 571.51623535]
[305.83285522 558.69995117]
[298.03909302 545.88366699]
[290.24533081 533.06738281]
[278.97463989 536.19073486]
[267.27096558 536.48516846]
[255.83422852 533.92724609]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 111]
[9 110]
[10 108]
[11 107]
[13 105]
[14 104]
[15 103]
[16 102]
[17 101]
[18 100]
[19 99]
[20 98]
[21 97]
[25 96]
[26 95]
[27 94]
[32 90]
[33 89]
[34 88]
[35 87]
[36 86]
[43 53]
[44 52]
[45 51]
[46 50]
[55 83]
[56 82]
[57 81]
[58 80]
[60 78]
[61 77]
[118 134]
[119 133]
[120 132]
[121 131]
[122 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
