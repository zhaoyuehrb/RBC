%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:27:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGAAUAGGAAUAACAUGACAGAGUUUGUUUUGCUGGGGCUUACAGAGAAUCCAAAGAUGCAGAAAAUCAUAUUUGUUGUGUUUUUUGUCAUCUAUA\
) } def
/len { sequence length } bind def

/coor [
[92.96130371 474.13577271]
[92.49480438 459.14303589]
[92.02831268 444.15026855]
[91.56181335 429.15753174]
[91.09531403 414.16479492]
[80.09873199 404.18426514]
[79.41205597 388.98614502]
[89.95510101 377.51959229]
[89.48860168 362.52685547]
[89.02210236 347.53408813]
[88.55561066 332.54135132]
[88.08911133 317.54861450]
[87.62261200 302.55587769]
[87.15611267 287.56311035]
[84.21785736 283.59356689]
[83.86540985 277.69564819]
[87.15611267 271.63012695]
[87.62261200 256.63739014]
[88.08911133 241.64463806]
[88.55561066 226.65190125]
[89.02210236 211.65914917]
[89.48860168 196.66641235]
[89.95510101 181.67366028]
[90.42160034 166.68092346]
[90.88809967 151.68817139]
[91.35459900 136.69543457]
[76.35746765 129.36543274]
[65.99541473 116.27838898]
[62.29990005 100.00000000]
[65.99541473 83.72161102]
[76.35746765 70.63457489]
[91.35459900 63.30456924]
[90.88809967 48.31182480]
[90.42160034 33.31908035]
[89.95510101 18.32633781]
[89.48860168 3.33359385]
[89.02210236 -11.65915012]
[87.39232635 -26.57034874]
[84.60910797 -41.30987549]
[81.82588959 -56.04940414]
[79.04267120 -70.78893280]
[66.71504974 -84.35642242]
[72.94433594 -100.68117523]
[69.70407104 -115.32701874]
[66.46379852 -129.97285461]
[57.13868332 -144.13189697]
[68.16294098 -157.01220703]
[83.59169006 -149.98440552]
[81.10964203 -133.21311951]
[84.34990692 -118.56728363]
[87.59017944 -103.92144012]
[97.69166565 -97.06739807]
[100.43245697 -84.75834656]
[93.78220367 -73.57215118]
[96.56542206 -58.83262253]
[99.34863281 -44.09309387]
[102.13185120 -29.35356522]
[104.26609039 -28.04159546]
[106.03949738 -25.84287643]
[107.13207245 -22.88096237]
[107.27039337 -19.38537788]
[106.26058197 -15.67399788]
[104.01484680 -12.12564850]
[104.48134613 2.86709571]
[104.94784546 17.85984039]
[105.41434479 32.85258484]
[105.88084412 47.84532928]
[106.34733582 62.83807373]
[118.71856689 67.27519989]
[128.81486511 75.68948364]
[135.40917969 87.05831909]
[137.70010376 100.00000000]
[135.40917969 112.94168091]
[128.81486511 124.31051636]
[118.71856689 132.72480774]
[106.34733582 137.16192627]
[105.88084412 152.15467834]
[105.41434479 167.14741516]
[104.94784546 182.14016724]
[104.48134613 197.13290405]
[104.01484680 212.12564087]
[103.54835510 227.11839294]
[103.08185577 242.11112976]
[102.61535645 257.10388184]
[102.14885712 272.09661865]
[102.14885712 287.09661865]
[102.61535645 302.08935547]
[103.08185577 317.08212280]
[103.54835510 332.07485962]
[104.01484680 347.06759644]
[104.48134613 362.06033325]
[104.94784546 377.05310059]
[116.18336487 387.84201050]
[116.44288635 403.05343628]
[106.08805847 413.69830322]
[106.55455780 428.69104004]
[107.02105713 443.68377686]
[107.48754883 458.67651367]
[107.95404816 473.66928101]
[110.74273682 492.84930420]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 99]
[2 98]
[3 97]
[4 96]
[5 95]
[8 92]
[9 91]
[10 90]
[11 89]
[12 88]
[13 87]
[14 86]
[17 85]
[18 84]
[19 83]
[20 82]
[21 81]
[22 80]
[23 79]
[24 78]
[25 77]
[26 76]
[32 68]
[33 67]
[34 66]
[35 65]
[36 64]
[37 63]
[38 57]
[39 56]
[40 55]
[41 54]
[43 51]
[44 50]
[45 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
