%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:13:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCACCUGCUCCUCUACCUGCUCCACCCUCAAUCCACCAGAACCAUGGGCUGCUGUGGCUGCUCCAGAGGCUGUGGCUCCGGCUGUGGGGGCUGUGGCUCCAGCUGUGGGGGUUGUGGCUCUGGCUGUGGGGGCUGUGGCUCCG\
) } def
/len { sequence length } bind def

/coor [
[127.51488495 550.13757324]
[138.70610046 539.21551514]
[137.40776062 524.27178955]
[136.10942078 509.32809448]
[134.81106567 494.38439941]
[125.72801971 486.32534790]
[124.56369019 473.83477783]
[132.49205017 463.59985352]
[131.51774597 448.63153076]
[130.54345703 433.66320801]
[129.56916809 418.69488525]
[128.59487915 403.72656250]
[127.62059021 388.75823975]
[119.07295990 376.56039429]
[125.89756012 362.28680420]
[124.92327118 347.31848145]
[123.78688812 332.36157227]
[122.48854828 317.41787720]
[110.24425507 302.50842285]
[118.85411835 284.33517456]
[116.90965271 269.46173096]
[114.96518707 254.58831787]
[105.64331818 242.97142029]
[111.52640533 228.28469849]
[109.58193207 213.41127014]
[107.47646332 198.55976868]
[105.21022797 183.73194885]
[102.94399261 168.90412903]
[100.67775726 154.07630920]
[98.41152191 139.24848938]
[96.14528656 124.42067719]
[88.73434448 123.16600800]
[81.75956726 119.63076019]
[75.92880249 113.97531891]
[71.88891602 106.58041382]
[70.15737152 98.02368164]
[71.06275940 89.03512573]
[56.60951233 85.02220154]
[42.15626144 81.00927734]
[28.52364922 89.00473785]
[13.25157547 84.93788147]
[5.40069103 71.22150421]
[9.62878609 55.99327850]
[23.42740631 48.28784943]
[38.61007690 52.67671204]
[46.16918564 66.55603027]
[60.62243652 70.56895447]
[75.07568359 74.58187866]
[87.75798798 66.57193756]
[90.34492493 51.79669571]
[92.93186951 37.02145386]
[95.51880646 22.24621201]
[86.70755005 9.40100193]
[89.54154968 -5.54634142]
[101.84179688 -13.86737156]
[104.42873383 -28.64261246]
[99.18738556 -43.57040024]
[109.00373077 -54.77257156]
[111.59066772 -69.54781342]
[106.34931946 -84.47560120]
[116.16566467 -95.67777252]
[118.75260162 -110.45301056]
[121.33954620 -125.22824860]
[123.92648315 -140.00349426]
[126.51342010 -154.77873230]
[115.89390564 -165.93812561]
[113.90489197 -181.03439331]
[121.10137939 -194.25083923]
[134.53945923 -200.61920166]
[137.12638855 -215.39443970]
[139.71333313 -230.16967773]
[142.30027771 -244.94493103]
[144.88720703 -259.72015381]
[135.60267639 -272.50973511]
[138.16358948 -288.10516357]
[151.05059814 -297.25396729]
[166.61807251 -294.52828979]
[175.63011169 -281.54528809]
[172.74002075 -266.00750732]
[159.66246033 -257.13323975]
[157.07551575 -242.35798645]
[154.48857117 -227.58274841]
[151.90164185 -212.80751038]
[149.31469727 -198.03225708]
[159.78968811 -187.47705078]
[162.06770325 -172.60174561]
[155.06794739 -159.07928467]
[141.28866577 -152.19178772]
[138.70172119 -137.41654968]
[136.11479187 -122.64131165]
[133.52784729 -107.86607361]
[130.94090271 -93.09082794]
[136.36729431 -79.21987152]
[126.36591339 -66.96086884]
[123.77896881 -52.18563080]
[129.20535278 -38.31466675]
[119.20397949 -26.05567360]
[116.61703491 -11.28043175]
[125.35845184 0.72470194]
[122.94540405 15.74574947]
[110.29405212 24.83315277]
[107.70710754 39.60839462]
[105.12017059 54.38363266]
[102.53322601 69.15887451]
[123.45957947 83.17195892]
[126.00113678 106.48235321]
[110.97310638 122.15444183]
[113.23934174 136.98225403]
[115.50557709 151.81007385]
[117.77181244 166.63789368]
[120.03804016 181.46571350]
[122.30427551 196.29353333]
[126.72388458 204.37416077]
[124.45536804 211.46679688]
[126.39983368 226.34022522]
[135.86077881 239.02096558]
[129.83862305 252.64384460]
[131.78308105 267.51727295]
[133.72755432 282.39071655]
[142.79232788 288.56927490]
[146.83796692 298.52859497]
[144.73742676 308.84609985]
[137.43225098 316.11953735]
[138.73059082 331.06323242]
[142.61601257 339.41387939]
[139.89160156 346.34417725]
[140.86589050 361.31250000]
[149.48320007 374.58099365]
[142.58891296 387.78393555]
[143.56320190 402.75225830]
[144.53749084 417.72058105]
[145.51179504 432.68890381]
[146.48608398 447.65722656]
[147.46037292 462.62554932]
[158.04267883 477.65332031]
[149.75477600 493.08605957]
[151.05311584 508.02975464]
[152.35145569 522.97344971]
[153.64979553 537.91717529]
[166.55697632 546.74548340]
[170.71989441 561.81878662]
[164.17298889 576.01989746]
[150.00747681 582.64349365]
[134.91189575 578.56219482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 139]
[3 138]
[4 137]
[5 136]
[8 134]
[9 133]
[10 132]
[11 131]
[12 130]
[13 129]
[15 127]
[16 126]
[17 124]
[18 123]
[20 119]
[21 118]
[22 117]
[24 115]
[25 114]
[26 112]
[27 111]
[28 110]
[29 109]
[30 108]
[31 107]
[37 48]
[38 47]
[39 46]
[49 104]
[50 103]
[51 102]
[52 101]
[55 98]
[56 97]
[58 95]
[59 94]
[61 92]
[62 91]
[63 90]
[64 89]
[65 88]
[69 84]
[70 83]
[71 82]
[72 81]
[73 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
