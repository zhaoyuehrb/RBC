%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:11:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGAUGCUGGGAAGGAGGUAAAAUGGCCACCGGCGGCGGCGCGGAGGAAGAGAGGAAACGGGGGCGGCCGCAGCUUCUGCCCCCCGCGCGGCCCGCGGCCCGGGGCGAGGAGGCCGACGGCG\
) } def
/len { sequence length } bind def

/coor [
[37.44706726 214.98794556]
[35.41159439 200.12669373]
[38.46877289 185.44154358]
[46.26579285 172.62724304]
[57.90283585 163.16261292]
[72.03693390 158.13992310]
[87.03693390 158.13882446]
[101.17176056 163.15943909]
[112.80812073 172.61999512]
[108.71384430 158.18957520]
[104.61956787 143.75917053]
[100.52528381 129.32875061]
[96.43100739 114.89833832]
[89.76998138 111.45148468]
[87.33039856 126.25177002]
[72.50061798 128.50511169]
[65.77493286 115.09745789]
[76.44793701 104.55779266]
[69.78691101 101.11093903]
[55.64205551 106.10323334]
[41.49719620 111.09552765]
[34.90530396 125.45945740]
[20.05845261 130.87670898]
[5.76501942 124.13331604]
[0.50504321 109.23001862]
[7.39917469 95.00868225]
[22.35724831 89.90656281]
[36.50490570 96.95066833]
[50.64976120 91.95837402]
[64.79461670 86.96607971]
[81.94737244 85.92150879]
[95.33929443 93.19765472]
[97.96463776 78.42919159]
[100.58998108 63.66072845]
[91.81214905 50.79265213]
[94.68500519 35.85272598]
[107.00684357 27.56370544]
[109.63218689 12.79523945]
[112.25753784 -1.97322559]
[107.05501556 -16.91458893]
[116.90045166 -28.09120178]
[119.52579498 -42.85966492]
[122.15113831 -57.62813187]
[124.77648926 -72.39659882]
[127.40183258 -87.16506195]
[130.02717590 -101.93352509]
[128.43994141 -111.04548645]
[132.90853882 -117.03813934]
[135.90419006 -131.73596191]
[125.59819031 -143.18553162]
[124.02854919 -158.33114624]
[131.58874512 -171.34295654]
[145.19824219 -177.33625793]
[148.19389343 -192.03407288]
[151.18954468 -206.73190308]
[154.18519592 -221.42973328]
[157.18084717 -236.12754822]
[146.87484741 -247.57711792]
[145.30520630 -262.72274780]
[152.86540222 -275.73455811]
[166.47491455 -281.72784424]
[169.47055054 -296.42565918]
[172.46620178 -311.12350464]
[163.53988647 -324.16558838]
[166.53225708 -339.68402100]
[179.66799927 -348.47195435]
[195.15391541 -345.31567383]
[203.80247498 -332.08773804]
[200.48265076 -316.63607788]
[187.16403198 -308.12783813]
[184.16838074 -293.43002319]
[181.17272949 -278.73217773]
[191.35101318 -267.89056396]
[193.21566772 -252.95782471]
[185.84364319 -239.63465881]
[171.87867737 -233.13189697]
[168.88302612 -218.43408203]
[165.88737488 -203.73625183]
[162.89172363 -189.03842163]
[159.89607239 -174.34060669]
[170.07435608 -163.49899292]
[171.93901062 -148.56623840]
[164.56698608 -135.24307251]
[150.60202026 -128.74031067]
[147.60636902 -114.04248810]
[144.79563904 -99.30818176]
[142.17030334 -84.53971863]
[139.54495239 -69.77124786]
[136.91960144 -55.00278473]
[134.29426575 -40.23432159]
[131.66891479 -25.46585464]
[137.05921936 -11.58083153]
[127.02600098 0.65212035]
[124.40065765 15.42058563]
[121.77530670 30.18905067]
[130.48548889 42.21686935]
[128.03338623 57.23159409]
[115.35845184 66.28607178]
[112.73310089 81.05453491]
[110.10775757 95.82300568]
[110.86141968 110.80405426]
[114.95570374 125.23447418]
[119.04998016 139.66488647]
[123.14425659 154.09530640]
[127.23854065 168.52571106]
[134.13223267 181.84776306]
[143.54760742 193.52470398]
[152.96298218 205.20162964]
[168.70193481 206.63713074]
[178.75167847 218.83460999]
[177.14985657 234.55751038]
[164.84681702 244.47772217]
[149.14172363 242.70976257]
[139.35214233 230.30252075]
[141.28604126 214.61700439]
[131.87066650 202.94006348]
[122.45529938 191.26313782]
[123.45715332 206.22964478]
[119.39076233 220.66793823]
[110.72540283 232.91177368]
[98.46110535 241.54815674]
[84.01322937 245.58038330]
[69.04913330 244.54313660]
[55.29575348 238.55610657]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 105]
[10 104]
[11 103]
[12 102]
[13 101]
[19 30]
[20 29]
[21 28]
[32 100]
[33 99]
[34 98]
[37 95]
[38 94]
[39 93]
[41 91]
[42 90]
[43 89]
[44 88]
[45 87]
[46 86]
[48 85]
[49 84]
[53 80]
[54 79]
[55 78]
[56 77]
[57 76]
[61 72]
[62 71]
[63 70]
[106 117]
[107 116]
[108 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
