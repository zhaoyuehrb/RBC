%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCUGGCGGAAGAGGCACGUGCGCUGCUGAAUGGAGCUGGUCGCUGGUUGCUACGAGCAGGUCCUCUUUGGGUUCGCUGUACACCCGGAGCCCGAGGCUUGCGGCGACCACGAGCAAUGGACUCUUGUGG\
) } def
/len { sequence length } bind def

/coor [
[112.84494781 268.49078369]
[101.20819855 278.61944580]
[85.93949127 280.82629395]
[71.91101837 274.40713501]
[63.59921265 261.41030884]
[63.65633774 245.98306274]
[72.06417084 233.04814148]
[86.13980103 226.73306274]
[88.27452087 211.88574219]
[82.42725372 198.18688965]
[92.04976654 185.62831116]
[94.18449402 170.78099060]
[96.31921387 155.93367004]
[98.45393372 141.08634949]
[100.58866119 126.23902893]
[87.68844604 118.58497620]
[75.68032837 127.57414246]
[69.72571564 142.85401917]
[53.47688293 145.06930542]
[43.64923859 131.94111633]
[50.35261917 116.97459412]
[66.69116211 115.56602478]
[78.69927979 106.57685852]
[76.24626923 99.48934937]
[61.51733398 96.65061188]
[71.34025574 85.31433868]
[68.88724518 78.22682953]
[53.89149094 78.58380127]
[38.89573669 78.94076538]
[28.17229271 90.55038452]
[12.37734032 91.09351349]
[0.88174355 80.24792480]
[0.50563788 64.44811249]
[11.47215939 53.06782150]
[27.27506638 52.85878372]
[38.53877258 63.94501114]
[53.53452301 63.58804703]
[68.53027344 63.23107910]
[81.60898590 55.88619232]
[89.71859741 43.26739120]
[90.67050171 27.47484589]
[104.06041718 20.95108414]
[112.17002869 8.33228111]
[120.27964020 -4.28652239]
[122.31860352 -13.29281902]
[128.73539734 -17.10593224]
[137.14302063 -29.52817154]
[145.55062866 -41.95040894]
[153.95825195 -54.37265015]
[162.36585999 -66.79489136]
[170.77346802 -79.21712494]
[179.18109131 -91.63936615]
[187.58869934 -104.06160736]
[187.73327637 -108.62586975]
[189.22637939 -112.48240662]
[191.66142273 -115.28326416]
[194.55900574 -116.85609436]
[197.43330383 -117.21246338]
[206.98365784 -128.77926636]
[216.53401184 -140.34605408]
[226.08436584 -151.91285706]
[235.63471985 -163.47964478]
[238.72848511 -172.18019104]
[245.55259705 -175.20452881]
[255.37550354 -186.54077148]
[265.19842529 -197.87702942]
[275.02133179 -209.21327209]
[276.03417969 -214.53401184]
[278.76184082 -218.48782349]
[282.36917114 -220.64315796]
[285.97222900 -220.97537231]
[296.57882690 -231.58197021]
[307.18542480 -242.18858337]
[317.79205322 -252.79518127]
[328.39865112 -263.40179443]
[339.00524902 -274.00839233]
[333.91555786 -288.39788818]
[335.58181763 -303.56979370]
[343.67318726 -316.51165771]
[356.58309937 -324.65393066]
[371.74832153 -326.37994385]
[386.15774536 -321.34695435]
[396.95040894 -310.55429077]
[401.98339844 -296.14486694]
[400.25741577 -280.97964478]
[392.11514282 -268.06970215]
[379.17324829 -259.97836304]
[364.00134277 -258.31210327]
[349.61184692 -263.40179443]
[339.00524902 -252.79518127]
[328.39865112 -242.18858337]
[317.79205322 -231.58197021]
[307.18542480 -220.97537231]
[296.57882690 -210.36877441]
[286.35757446 -199.39035034]
[276.53466797 -188.05410767]
[266.71173096 -176.71786499]
[256.88882446 -165.38162231]
[247.20152283 -153.92929077]
[237.65116882 -142.36250305]
[228.10081482 -130.79570007]
[218.55046082 -119.22890472]
[209.00010681 -107.66210938]
[200.01094055 -95.65399170]
[191.60333252 -83.23175049]
[183.19570923 -70.80951691]
[174.78810120 -58.38727570]
[166.38047791 -45.96503448]
[157.97286987 -33.54279709]
[149.56526184 -21.12055779]
[141.15763855 -8.69831753]
[132.89843750 3.82308984]
[124.78883362 16.44189262]
[116.67922211 29.06069565]
[116.30736542 43.95065689]
[102.33740234 51.37700272]
[94.22779083 63.99580383]
[110.84672546 65.91410828]
[124.54685974 74.94419098]
[132.54267883 88.90400696]
[133.36614990 104.64920044]
[127.12875366 118.77967072]
[115.43598175 128.37374878]
[113.30126190 143.22106934]
[111.16653442 158.06838989]
[109.03181458 172.91571045]
[106.89709473 187.76303101]
[112.59166718 202.52388000]
[103.12184143 214.02046204]
[100.98712158 228.86778259]
[112.71342468 238.89262390]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 130]
[9 129]
[11 127]
[12 126]
[13 125]
[14 124]
[15 123]
[16 23]
[17 22]
[27 38]
[28 37]
[29 36]
[39 117]
[40 116]
[42 114]
[43 113]
[44 112]
[46 111]
[47 110]
[48 109]
[49 108]
[50 107]
[51 106]
[52 105]
[53 104]
[58 103]
[59 102]
[60 101]
[61 100]
[62 99]
[64 98]
[65 97]
[66 96]
[67 95]
[71 94]
[72 93]
[73 92]
[74 91]
[75 90]
[76 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
