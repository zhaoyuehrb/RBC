%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUGAGCGGCGGGCGGGGAUGGCGGAGCAAUGGGAGCUGGACGAGGAAGGCAUUCGCCGCCUGGGGGCGCUGACGCUGGAGCAGCCGGAACUGGUGGAGUCUCUUUCAUUGCAGGGAU\
) } def
/len { sequence length } bind def

/coor [
[72.26792908 111.14353943]
[70.21380615 102.45541382]
[70.81745911 93.54820251]
[57.45236206 86.73834229]
[41.64365768 87.36717987]
[33.81623459 74.69513702]
[20.45113754 67.88527679]
[7.08603954 61.07542038]
[-6.27905846 54.26556015]
[-27.46488380 56.88075256]
[-38.33767700 39.41868591]
[-52.19586945 33.67843628]
[-66.05406189 27.93818474]
[-79.91225433 22.19793320]
[-93.77044678 16.45768166]
[-107.62863922 10.71743011]
[-121.48683167 4.97717857]
[-137.19746399 6.84441471]
[-145.99499512 -5.17443466]
[-159.85319519 -10.91468620]
[-174.30801392 -5.10989380]
[-188.28042603 -11.12874031]
[-193.72532654 -24.94498634]
[-207.58352661 -30.68523788]
[-228.45782471 -18.73310471]
[-251.32450867 -25.38125038]
[-262.31265259 -46.23674393]
[-277.12796021 -48.58325958]
[-291.94329834 -50.92977524]
[-303.62564087 -40.53473663]
[-319.25805664 -40.13261414]
[-331.45938110 -49.91328049]
[-334.46853638 -65.25860596]
[-326.86468506 -78.92298889]
[-312.23815918 -84.45453644]
[-297.49511719 -79.24141693]
[-289.59677124 -65.74510193]
[-274.78146362 -63.39858627]
[-259.96612549 -61.05206680]
[-256.39749146 -67.29865265]
[-251.43360901 -72.53125763]
[-245.35269165 -76.44390106]
[-238.49861145 -78.80492401]
[-231.26142883 -79.47071075]
[-224.05520630 -78.39436340]
[-217.29434204 -75.62893677]
[-211.36973572 -71.32485962]
[-206.62612915 -65.72178650]
[-203.34217834 -59.13525391]
[-201.71392822 -51.93893433]
[-201.84327698 -44.54343033]
[-187.98507690 -38.80317688]
[-174.36538696 -44.72261047]
[-160.22943115 -39.09859467]
[-154.11293030 -24.77287865]
[-140.25474548 -19.03262711]
[-125.53533936 -21.31044579]
[-115.74658203 -8.88101387]
[-101.88838959 -3.14076281]
[-88.03019714 2.59948874]
[-74.17200470 8.33973980]
[-60.31380844 14.07999134]
[-46.45561600 19.82024384]
[-32.59742355 25.56049538]
[-24.86748314 20.77102470]
[-15.65690231 20.13841629]
[-7.09089136 23.93854523]
[-1.20664048 31.40943527]
[0.53079927 40.90046310]
[13.89589691 47.71032333]
[27.26099586 54.52017975]
[40.62609100 61.33003616]
[55.47883606 60.21411133]
[64.26222229 73.37324524]
[77.62731934 80.18309784]
[101.56417847 70.15373230]
[124.32155609 82.63024139]
[138.32525635 77.25472260]
[152.32896423 71.87920380]
[166.33267212 66.50368500]
[174.14526367 52.49144363]
[189.99452209 50.00533676]
[201.72224426 60.95249176]
[200.33192444 76.93518829]
[186.89010620 85.69287109]
[171.70819092 80.50739288]
[157.70448303 85.88291168]
[143.70077515 91.25843048]
[129.69706726 96.63394928]
[129.80134583 102.26402283]
[128.84773254 107.81372833]
[126.87007904 113.08606720]
[138.27616882 122.82778931]
[149.68226624 132.56950378]
[161.33944702 142.00930786]
[173.23974609 151.14073181]
[185.14004517 160.27215576]
[197.04034424 169.40357971]
[208.94064331 178.53500366]
[220.84095764 187.66642761]
[237.16157532 189.26931763]
[243.68638611 204.31454468]
[233.70321655 217.32485962]
[217.48190308 214.91636658]
[211.70953369 199.56672668]
[199.80923462 190.43530273]
[187.90893555 181.30387878]
[176.00863647 172.17245483]
[164.10832214 163.04103088]
[152.20802307 153.90960693]
[147.32563782 153.65902710]
[142.58084106 150.25524902]
[139.94053650 143.97560120]
[128.53445435 134.23387146]
[117.12836456 124.49215698]
[109.13017273 128.45849609]
[100.31731415 129.88554382]
[91.47615051 128.64595032]
[83.39554596 124.85031891]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 75]
[4 74]
[6 72]
[7 71]
[8 70]
[9 69]
[11 64]
[12 63]
[13 62]
[14 61]
[15 60]
[16 59]
[17 58]
[19 56]
[20 55]
[23 52]
[24 51]
[27 39]
[28 38]
[29 37]
[77 89]
[78 88]
[79 87]
[80 86]
[92 115]
[93 114]
[94 113]
[95 110]
[96 109]
[97 108]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
