%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:15:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUGUAAAGGACCGGCGACACCGCUCUUUGACCAGAGGACGCUGUGGCAAAGAGUGUCGCUACACAAGCUCCUCUCUGGACAGUGAGGACUGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[155.45281982 210.35198975]
[154.53373718 196.36474609]
[159.79153442 183.29904175]
[149.95260620 171.97669983]
[140.11366272 160.65435791]
[133.22901917 157.61676025]
[130.15150452 148.82348633]
[120.66945648 137.20063782]
[108.05982971 141.78698730]
[94.64900208 142.21942139]
[81.77010345 138.45495605]
[70.70338440 130.86781311]
[62.54895020 120.21217346]
[58.11740875 107.54730988]
[57.84929276 94.13219452]
[61.77124786 81.30037689]
[69.49340820 70.32743073]
[60.75229263 58.13756561]
[52.01117706 45.94769669]
[43.27006149 33.75782776]
[34.52894592 21.56795883]
[25.78783226 9.37808990]
[20.69451332 7.09654474]
[17.42674446 3.39423442]
[16.22094154 -0.74106407]
[16.86331177 -4.38007498]
[9.29606915 -17.33139992]
[1.72882617 -30.28272629]
[-5.83841705 -43.23405075]
[-13.40565968 -56.18537903]
[-20.97290230 -69.13670349]
[-28.54014587 -82.08802795]
[-36.10738754 -95.03935242]
[-43.26654434 -101.00082397]
[-43.70137405 -108.51324463]
[-50.86217499 -121.69364166]
[-58.02297211 -134.87403870]
[-71.40970612 -143.30648804]
[-70.68681335 -158.18353271]
[-77.84761810 -171.36393738]
[-92.10739136 -179.46275330]
[-91.95290375 -195.86117554]
[-77.54308319 -203.68991089]
[-63.70151138 -194.89541626]
[-64.66721344 -178.52473450]
[-57.50641632 -165.34432983]
[-44.63187408 -157.85464478]
[-44.84257126 -142.03483582]
[-37.68177414 -128.85444641]
[-30.52097511 -115.67404175]
[-23.15606308 -102.60659790]
[-15.58882046 -89.65527344]
[-8.02157688 -76.70394897]
[-0.45433423 -63.75262070]
[7.11290884 -50.80129623]
[14.68015194 -37.84996796]
[22.24739456 -24.89864349]
[29.81463814 -11.94731808]
[37.97769928 0.63697410]
[46.71881485 12.82684326]
[55.45993042 25.01671219]
[64.20104980 37.20658112]
[72.94216156 49.39645004]
[81.68328094 61.58631897]
[97.63317871 57.50868988]
[113.93727112 59.78973007]
[128.15570068 68.08808899]
[138.16072083 81.16194916]
[142.45513916 97.05485535]
[140.39630127 113.38848877]
[132.29231262 127.71858215]
[141.77435303 139.34144592]
[151.43601990 150.81542969]
[161.27494812 162.13777161]
[171.11387634 173.46011353]
[187.22344971 170.13015747]
[202.74191284 175.29972839]
[213.51271057 187.48554993]
[216.70050049 203.33853149]
[211.53709412 218.56384277]
[221.72338867 229.57472229]
[231.90966797 240.58560181]
[240.18757629 244.85981750]
[242.23497009 252.10092163]
[252.07389832 263.42327881]
[261.91281128 274.74560547]
[271.75173950 286.06796265]
[287.42434692 290.89520264]
[290.81585693 306.93981934]
[278.43740845 317.69647217]
[263.02285767 312.09967041]
[260.42941284 295.90689087]
[250.59048462 284.58453369]
[240.75154114 273.26220703]
[230.91261292 261.93984985]
[220.89880371 250.77189636]
[210.71250916 239.76101685]
[200.52621460 228.75013733]
[187.33975220 232.65093994]
[173.69967651 230.44154358]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 75]
[4 74]
[5 73]
[7 72]
[8 71]
[17 64]
[18 63]
[19 62]
[20 61]
[21 60]
[22 59]
[26 58]
[27 57]
[28 56]
[29 55]
[30 54]
[31 53]
[32 52]
[33 51]
[35 50]
[36 49]
[37 48]
[39 46]
[40 45]
[80 98]
[81 97]
[82 96]
[84 95]
[85 94]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
