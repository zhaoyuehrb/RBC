%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUCUCUCUGUUUUGCCAAAUAACAACCAUCCUGACAAAUUCCUGCAGCUUGACGUAAAGUCUUUAACGAGGAGCUCAGCCCUCCUUCAGGCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[86.05603790 162.16508484]
[95.55228424 149.23446655]
[94.61974335 134.26348877]
[93.68719482 119.29250336]
[87.45928955 115.11360931]
[81.10019684 128.69897461]
[75.14098358 142.46443176]
[60.14130402 142.36566162]
[54.36386108 128.52293396]
[64.84276581 117.79032898]
[75.00346375 106.75582886]
[68.77555847 102.57693481]
[54.56848526 107.38932037]
[40.36141205 112.20171356]
[26.15433693 117.01409912]
[22.51820755 132.00683594]
[11.33785915 142.63713074]
[-3.81910086 145.51290894]
[-18.11614037 139.71652222]
[-26.99112892 127.09756470]
[-27.61208534 111.68270111]
[-19.78086853 98.39076233]
[-5.99639034 91.46315765]
[9.34277344 93.11045837]
[21.34194946 102.80702209]
[35.54902267 97.99463654]
[49.75609589 93.18225098]
[63.96316910 88.36986542]
[73.19293213 80.95452118]
[83.16948700 77.74728394]
[92.31398773 78.40975189]
[99.34613037 82.07755280]
[103.44290161 87.51480103]
[104.33068085 93.31159210]
[115.49864960 83.29776764]
[126.66661072 73.28395081]
[137.83456421 63.27012634]
[149.00253296 53.25630188]
[143.41056824 39.18664551]
[142.97050476 24.08107376]
[147.71617126 9.76329136]
[157.05647278 -2.04470873]
[169.84895325 -9.92975044]
[184.53952026 -12.95659065]
[199.35121155 -10.77881241]
[212.49917603 -3.67835617]
[223.66712952 -13.69217873]
[234.83509827 -23.70600128]
[239.23753357 -31.91643333]
[246.50961304 -33.85095596]
[257.98358154 -43.51261139]
[269.45758057 -53.17426682]
[280.93157959 -62.83592606]
[292.40554810 -72.49758148]
[293.90435791 -88.00214386]
[305.67825317 -97.63698578]
[320.45022583 -96.11256409]
[331.92422485 -105.77421570]
[343.39822388 -115.43587494]
[340.62606812 -130.54252625]
[345.79376221 -145.00593567]
[357.51123047 -154.93554688]
[372.62649536 -157.66030884]
[387.07363892 -152.44729614]
[396.96646118 -140.69877625]
[399.64382935 -125.57505035]
[394.38555908 -111.14431763]
[382.60610962 -101.28836823]
[367.47406006 -98.65840912]
[353.05987549 -103.96188354]
[341.58587646 -94.30023193]
[330.11187744 -84.63857269]
[329.09921265 -69.82270050]
[317.60058594 -59.86095428]
[302.06723022 -61.02359390]
[290.59323120 -51.36193466]
[279.11923218 -41.70027924]
[267.64526367 -32.03862381]
[256.17126465 -22.37696838]
[244.84892273 -12.53803921]
[233.68095398 -2.52421665]
[222.51300049 7.48960543]
[228.14286804 21.33120537]
[228.69842529 36.29183578]
[224.09333801 50.56655884]
[214.86505127 62.42658234]
[202.11210632 70.42861938]
[187.36346436 73.59053040]
[172.39514160 71.51182556]
[159.01635742 64.42426300]
[147.84838867 74.43808746]
[136.68043518 84.45191193]
[125.51246643 94.46572876]
[114.34450531 104.47955322]
[108.65818024 118.35996246]
[109.59072876 133.33094788]
[110.52326965 148.30192566]
[121.55078125 159.95411682]
[119.17368317 175.82008362]
[105.21547699 183.72882080]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 97]
[3 96]
[4 95]
[12 28]
[13 27]
[14 26]
[15 25]
[34 94]
[35 93]
[36 92]
[37 91]
[38 90]
[46 82]
[47 81]
[48 80]
[50 79]
[51 78]
[52 77]
[53 76]
[54 75]
[57 72]
[58 71]
[59 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
