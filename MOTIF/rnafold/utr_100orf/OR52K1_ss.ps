%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:41:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAAGGAGAUUUCCAGGAGCCAUGCUUCCCUCUAAUAUCACCUCAACACAUCCAGCUGUCUUUUUGUUGGUAGGAAUUCCUGGUUUGGAACACCUGCAUGCCUGGAUCUCCAUCCCCUUCU\
) } def
/len { sequence length } bind def

/coor [
[80.91418457 402.33285522]
[76.41400909 387.85791016]
[77.13905334 372.71688843]
[83.00177002 358.73818970]
[93.29419708 347.60977173]
[106.77347565 340.67544556]
[104.86307526 325.79760742]
[102.95267487 310.91973877]
[101.04226685 296.04190063]
[99.13186646 281.16406250]
[95.87393188 277.52764893]
[94.94281006 271.77197266]
[97.52391052 265.48010254]
[96.37567139 250.52412415]
[95.22743225 235.56813049]
[94.07919312 220.61215210]
[92.93095398 205.65615845]
[91.78271484 190.70016479]
[89.24476624 188.09564209]
[87.90296173 184.08714294]
[88.42387390 179.27998352]
[91.16416168 174.56294250]
[91.16416168 159.56294250]
[91.16416168 144.56294250]
[91.16416168 129.56294250]
[91.16416168 114.56294250]
[83.97277832 127.72667694]
[79.01322937 141.88305664]
[71.23059082 154.70610046]
[60.96202850 165.64028931]
[48.65240097 174.21194458]
[34.83499908 180.04969788]
[20.10842323 182.90065002]
[5.11066580 182.64129639]
[-9.50853252 179.28286743]
[-23.11582947 172.97085571]
[-35.12172318 163.97871399]
[-45.00608826 152.69601440]
[-52.34070969 139.61155701]
[-56.80783081 125.29216766]
[-58.21392822 110.35821533]
[-56.49808121 95.45667267]
[-51.73462677 81.23311615]
[-44.12993240 68.30374908]
[-34.01345062 57.22869492]
[-21.82345200 48.48776245]
[-8.08803940 42.45962143]
[6.59773397 39.40543747]
[21.59764290 39.45751572]
[36.26185608 42.61360168]
[49.95507812 48.73697281]
[62.08907700 57.56683731]
[68.94193268 70.90993500]
[69.32501221 55.91482925]
[69.70809174 40.91972351]
[70.09117126 25.92461586]
[70.47425079 10.92950821]
[57.65566635 2.34536672]
[51.53389359 -11.81540489]
[54.06236649 -27.03415489]
[64.43425751 -38.45463562]
[79.33993530 -42.43261719]
[94.02304840 -37.69873428]
[103.79827881 -25.76355362]
[105.54637146 -10.43554974]
[98.70952606 3.39416814]
[85.46935272 11.31258774]
[85.08627319 26.30769539]
[84.70319366 41.30280304]
[84.32011414 56.29790878]
[83.93703461 71.29301453]
[90.12610626 75.52921295]
[108.69332886 88.23781586]
[122.53312683 82.45334625]
[136.37292480 76.66887665]
[142.44364929 62.32370758]
[156.56156921 56.65458679]
[170.20008850 62.53050995]
[184.03988647 56.74604034]
[197.87968445 50.96157455]
[211.71948242 45.17710876]
[217.48825073 30.46327972]
[232.00488281 24.21482658]
[246.65689087 30.13884354]
[252.75152588 44.72071838]
[246.67292786 59.30928421]
[232.02743530 65.24939728]
[217.50395203 59.01690292]
[203.66415405 64.80136871]
[189.82435608 70.58583832]
[175.98455811 76.37030029]
[170.58380127 90.20386505]
[156.63067627 96.26728821]
[142.15737915 90.50867462]
[128.31759644 96.29314423]
[114.47779846 102.07760620]
[106.16416168 114.56294250]
[106.16416168 129.56294250]
[106.16416168 144.56294250]
[106.16416168 159.56294250]
[106.16416168 174.56294250]
[106.73870087 189.55192566]
[107.88694000 204.50791931]
[109.03517914 219.46391296]
[110.18341827 234.41989136]
[111.33165741 249.37588501]
[112.47989655 264.33187866]
[114.00971985 279.25366211]
[115.92012024 294.13150024]
[117.83052063 309.00933838]
[119.74092102 323.88720703]
[121.65132904 338.76504517]
[136.44525146 342.06890869]
[149.21533203 350.23596191]
[158.41952515 362.27999878]
[162.94636536 376.74664307]
[162.24922180 391.88897705]
[156.41227722 405.87844849]
[146.14036560 417.02581787]
[132.67388916 423.98495483]
[117.63897705 425.91552734]
[102.85116577 422.58441162]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 112]
[7 111]
[8 110]
[9 109]
[10 108]
[13 107]
[14 106]
[15 105]
[16 104]
[17 103]
[18 102]
[22 101]
[23 100]
[24 99]
[25 98]
[26 97]
[53 71]
[54 70]
[55 69]
[56 68]
[57 67]
[73 96]
[74 95]
[75 94]
[78 91]
[79 90]
[80 89]
[81 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
