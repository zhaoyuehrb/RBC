%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAUCCCGUCUUGCUCUGCGGCGCAGGGGCAAGAUGGCUGCUGAGAAGCAGGUCCCAGGCGGCGGCGGCGGCGGCGGCAGUGGCGGCGGCGGUGGCAGUGGCGGCGGCGGUAGCGGCGGUGGACGUGGUGCCG\
) } def
/len { sequence length } bind def

/coor [
[113.69894409 149.73126221]
[105.12490082 162.03923035]
[91.11665344 167.40289307]
[76.51506042 163.96873474]
[66.36602783 152.92350769]
[64.17678833 138.08412170]
[70.70388031 124.57867432]
[83.69205475 117.07419586]
[70.42262268 124.06863403]
[57.15319061 131.06306458]
[43.88375854 138.05751038]
[30.61432648 145.05194092]
[17.34489441 152.04638672]
[4.07546091 159.04081726]
[-9.19397163 166.03526306]
[-22.46340370 173.02969360]
[-35.73283768 180.02412415]
[-49.00226974 187.01856995]
[-62.19003296 194.16580200]
[-75.29437256 201.46485901]
[-88.39870453 208.76393127]
[-99.29395294 221.75354004]
[-114.79202271 214.87997437]
[-112.47737122 198.08477783]
[-95.69776917 195.65959167]
[-82.59343719 188.36053467]
[-69.48909760 181.06146240]
[-65.13731384 175.00419617]
[-55.99670792 173.74913025]
[-42.72727585 166.75469971]
[-29.45784187 159.76025391]
[-16.18840981 152.76582336]
[-2.91897631 145.77139282]
[10.35045624 138.77694702]
[23.61989021 131.78251648]
[36.88932037 124.78807068]
[50.15875626 117.79364014]
[63.42818832 110.79920197]
[76.69762421 103.80476379]
[77.39037323 88.82077026]
[64.82290649 80.63182068]
[52.25544739 72.44287109]
[39.68798447 64.25392151]
[27.12052155 56.06497192]
[10.72495651 55.72226715]
[3.06214356 41.22352982]
[12.01492882 27.48381996]
[28.37345505 28.63737106]
[35.30947113 43.49750900]
[47.87693405 51.68645859]
[60.44439697 59.87540817]
[73.01185608 68.06435394]
[85.57932281 76.25330353]
[100.25631714 73.15722656]
[108.44526672 60.58976746]
[116.63421631 48.02230453]
[124.67747498 35.36109924]
[132.57395935 22.60784149]
[140.47042847 9.85458469]
[140.57156372 -8.51769447]
[156.26531982 -16.28489876]
[163.86511230 -29.21714592]
[164.18630981 -45.03509140]
[177.30534363 -52.08777618]
[184.90513611 -65.02001953]
[185.22633362 -80.83796692]
[198.34536743 -87.89065552]
[205.94515991 -100.82289886]
[206.26635742 -116.64084625]
[219.38539124 -123.69352722]
[226.98518372 -136.62577820]
[227.30638123 -152.44372559]
[240.42541504 -159.49639893]
[248.02520752 -172.42864990]
[248.34640503 -188.24659729]
[261.46542358 -195.29928589]
[269.06524658 -208.23153687]
[268.65036011 -224.62542725]
[282.77975464 -232.94966125]
[296.91827393 -224.64097595]
[296.52142334 -208.24664307]
[281.99749756 -200.63172913]
[274.39767456 -187.69947815]
[274.62008667 -172.80653381]
[260.95745850 -164.82885742]
[253.35765076 -151.89660645]
[253.58004761 -137.00366211]
[239.91743469 -129.02597046]
[232.31762695 -116.09372711]
[232.54002380 -101.20078278]
[218.87741089 -93.22309875]
[211.27760315 -80.29084778]
[211.50000000 -65.39790344]
[197.83738708 -57.42021942]
[190.23757935 -44.48797226]
[190.45997620 -29.59502792]
[176.79736328 -21.61734390]
[169.19755554 -8.68509674]
[171.93107605 3.15618610]
[165.63018799 14.01527309]
[153.22369385 17.75106812]
[145.32720947 30.50432396]
[137.43072510 43.25757980]
[136.57640076 50.66695023]
[129.20167542 56.21125412]
[121.01273346 68.77871704]
[112.82378387 81.34617615]
[120.47676086 90.62012482]
[122.27510834 102.44754791]
[117.77027130 113.46495819]
[126.53089142 125.64082336]
[135.29151917 137.81668091]
[144.05213928 149.99253845]
[152.81275940 162.16839600]
[167.15318298 168.85142517]
[168.30587769 183.70135498]
[177.06649780 195.87721252]
[184.68940735 201.07501221]
[185.88500977 208.43702698]
[194.36206055 220.81198120]
[209.80427551 225.16140747]
[215.89877319 240.00178528]
[207.97038269 253.94882202]
[192.10108948 256.30358887]
[180.46444702 245.25965881]
[181.98709106 229.28903198]
[173.51004028 216.91406250]
[164.89064026 204.63783264]
[156.13002014 192.46197510]
[142.41621399 186.64985657]
[140.63690186 170.92901611]
[131.87628174 158.75315857]
[123.11565399 146.57730103]
[114.35503387 134.40144348]
[105.59441376 122.22557831]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 39]
[9 38]
[10 37]
[11 36]
[12 35]
[13 34]
[14 33]
[15 32]
[16 31]
[17 30]
[18 29]
[19 27]
[20 26]
[21 25]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
[54 107]
[55 106]
[56 105]
[57 103]
[58 102]
[59 101]
[61 98]
[62 97]
[64 95]
[65 94]
[67 92]
[68 91]
[70 89]
[71 88]
[73 86]
[74 85]
[76 83]
[77 82]
[110 135]
[111 134]
[112 133]
[113 132]
[114 131]
[116 129]
[117 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
