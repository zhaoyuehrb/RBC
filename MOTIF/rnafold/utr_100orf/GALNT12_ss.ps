%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:49:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGGGGGCGCACGGCGCGGCGGCGCUGCCCGCGGGAACUGCGGCGCGGCCGGGAGGCGCUGUUGGUGCUCCUGGCGCUACUGGCGUUGGCCGGGCUGG\
) } def
/len { sequence length } bind def

/coor [
[5.06520367 326.57095337]
[1.66266418 328.01239014]
[-5.08476162 341.40911865]
[-11.83218670 354.80584717]
[-18.57961273 368.20257568]
[-17.10525131 384.53530884]
[-30.66662025 393.75601196]
[-45.31294632 386.37921143]
[-45.97734070 369.99353027]
[-31.97633743 361.45513916]
[-25.22891235 348.05841064]
[-18.48148727 334.66168213]
[-11.73406124 321.26495361]
[-5.61880684 307.56811523]
[-0.14903389 293.60095215]
[5.32073879 279.63378906]
[10.79051208 265.66662598]
[8.22698975 250.99429321]
[20.46378517 240.96575928]
[25.93355751 226.99861145]
[31.40332985 213.03144836]
[36.87310410 199.06428528]
[42.12500000 185.01374817]
[47.15774918 170.88322449]
[52.19050217 156.75271606]
[57.22325134 142.62220764]
[62.25600052 128.49168396]
[67.28874969 114.36117554]
[64.27664948 99.66670990]
[54.09035110 88.65583801]
[43.73405075 77.80470276]
[33.21025085 67.11594391]
[22.68644714 56.42718506]
[12.16264439 45.73842621]
[1.63884187 35.04966736]
[-8.88496113 24.36090660]
[-24.30601311 17.31622696]
[-21.80561256 0.54767555]
[-5.00020361 -1.69163942]
[1.80379879 13.83710480]
[12.32760143 24.52586365]
[22.85140419 35.21462250]
[33.37520599 45.90338135]
[43.89900970 56.59214401]
[54.42281342 67.28089905]
[61.48299408 69.88461304]
[65.10122681 78.46954346]
[75.28752136 89.48042297]
[91.53868103 77.03145599]
[109.85786438 80.22409058]
[120.70899200 69.86779022]
[131.56011963 59.51148987]
[142.41125488 49.15518951]
[153.26239014 38.79888916]
[164.11351013 28.44258881]
[174.96464539 18.08628845]
[185.81578064 7.72998857]
[189.96073914 -0.61338866]
[197.16912842 -2.77313495]
[208.33709717 -12.78695679]
[219.50506592 -22.80077934]
[230.67301941 -32.81460190]
[238.42927551 -47.89030457]
[255.06295776 -44.61053467]
[256.51602173 -27.71897125]
[240.68684387 -21.64663887]
[229.51887512 -11.63281727]
[218.35092163 -1.61899543]
[207.18295288 8.39482689]
[196.17207336 18.58111954]
[185.32095337 28.93741989]
[174.46981812 39.29372025]
[163.61868286 49.65002060]
[152.76756287 60.00632095]
[141.91642761 70.36261749]
[131.06529236 80.71891785]
[120.21416473 91.07521820]
[122.77098846 99.47991943]
[121.86888885 108.48467255]
[117.44505310 116.68182373]
[110.00217438 122.71277618]
[100.55799103 125.49172974]
[90.50796509 124.39656830]
[81.41926575 119.39392853]
[76.38651276 133.52444458]
[71.35376740 147.65495300]
[66.32101440 161.78546143]
[61.28826523 175.91598511]
[56.25551605 190.04649353]
[56.30667877 199.36260986]
[50.84026337 204.53405762]
[45.37049103 218.50122070]
[39.90071869 232.46838379]
[34.43094635 246.43553162]
[36.60323334 262.10690308]
[24.75767326 271.13641357]
[19.28789902 285.10357666]
[13.81812668 299.07073975]
[8.34835434 313.03790283]
[9.20605087 318.55258179]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[5 10]
[14 99]
[15 98]
[16 97]
[17 96]
[19 94]
[20 93]
[21 92]
[22 91]
[23 89]
[24 88]
[25 87]
[26 86]
[27 85]
[28 84]
[29 48]
[30 47]
[31 45]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[50 77]
[51 76]
[52 75]
[53 74]
[54 73]
[55 72]
[56 71]
[57 70]
[59 69]
[60 68]
[61 67]
[62 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
