%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:04:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGUGGAAAGUUGGAGCUGAGGUGUGUGGCAGGCAGAUGAGGGAGCAGAGAACUGCUGAACAGAGUGAGACUCAGAGGACGUGGUUGAGCAUGGCUGCGACCCUGCAGUUCCUGGUUUGCCUGGUGGUAGCCAUUUGUCUCCUCUCUGGUGUGACUACAACCCAGCCCCAUGCAGGGCAGCCCAUGGACA\
) } def
/len { sequence length } bind def

/coor [
[154.25064087 569.57977295]
[150.13180542 555.15637207]
[146.01296997 540.73291016]
[140.14776611 554.53869629]
[127.81584167 563.07824707]
[112.82923126 563.71179199]
[99.82055664 556.24359131]
[92.81104279 542.98211670]
[93.96744537 528.02673340]
[102.93230438 516.00048828]
[116.93442535 510.62081909]
[131.64549255 513.55072021]
[142.51811218 523.88464355]
[140.56022644 509.01296997]
[138.60232544 494.14129639]
[129.26997375 482.53283691]
[135.13980103 467.84078979]
[133.18191528 452.96911621]
[131.22401428 438.09744263]
[129.26612854 423.22576904]
[125.26959229 416.99447632]
[127.39991760 408.09500122]
[125.68561554 393.19326782]
[123.97131348 378.29156494]
[120.07727051 371.99569702]
[122.35292053 363.13226318]
[120.88266754 348.20449829]
[119.41240692 333.27673340]
[117.94215393 318.34896851]
[116.47189331 303.42117310]
[114.87956238 288.50595093]
[113.16525269 273.60421753]
[104.02409363 261.84460449]
[110.13351440 247.25059509]
[108.41921234 232.34887695]
[106.58305359 217.46168518]
[104.62516022 202.59001160]
[102.66726685 187.71833801]
[98.67073822 181.48704529]
[100.80106354 172.58755493]
[99.08675385 157.68583679]
[97.37245178 142.78411865]
[95.65814972 127.88240814]
[93.94384003 112.98069000]
[85.76990509 101.63703918]
[91.15444183 88.73361206]
[89.44013977 73.83189392]
[87.72583008 58.93017960]
[86.01152802 44.02846146]
[84.29722595 29.12674522]
[70.94644928 21.44150543]
[64.75334167 7.53111887]
[67.90145874 -7.18463230]
[78.97856140 -17.10611534]
[77.26425934 -32.00783157]
[75.54994965 -46.90954971]
[73.83564758 -61.81126404]
[72.12134552 -76.71298218]
[60.67029572 -83.82267761]
[55.48528671 -96.05294800]
[58.25505066 -108.84582520]
[67.74792480 -117.57254028]
[66.27767181 -132.50030518]
[64.80741119 -147.42808533]
[60.84631729 -155.67724609]
[63.43727493 -162.61181641]
[62.21145630 -177.56164551]
[58.38586426 -185.87452698]
[61.08993530 -192.76577759]
[60.10888672 -207.73365784]
[59.12784195 -222.70153809]
[58.14679337 -237.66943359]
[54.45772552 -246.04379272]
[57.27418518 -252.88987732]
[56.53816986 -267.87179565]
[55.80215454 -282.85372925]
[52.25059891 -291.28732300]
[55.17869568 -298.08642578]
[54.68791199 -313.07836914]
[54.19712448 -328.07034302]
[53.70633698 -343.06231689]
[53.09291840 -358.04977417]
[52.35690308 -373.03170776]
[51.37585449 -387.99960327]
[50.15003967 -402.94940186]
[48.92422485 -417.89923096]
[47.69840622 -432.84906006]
[46.47259140 -447.79888916]
[45.12450790 -462.73818970]
[43.65425110 -477.66598511]
[42.18399429 -492.59375000]
[34.61426163 -507.76394653]
[47.09611130 -519.23742676]
[61.57648468 -510.41949463]
[57.11176682 -494.06399536]
[58.58202362 -479.13623047]
[60.05228043 -464.20846558]
[63.84278488 -457.84973145]
[61.42242050 -449.02471924]
[62.64823532 -434.07489014]
[63.87405014 -419.12506104]
[65.09986877 -404.17523193]
[66.32568359 -389.22540283]
[69.33556366 -385.49853516]
[70.02557373 -379.83709717]
[67.33883667 -373.76773071]
[68.07485199 -358.78579712]
[71.54878235 -352.24871826]
[68.69831085 -343.55310059]
[69.18909454 -328.56112671]
[69.67987823 -313.56918335]
[70.17066956 -298.57720947]
[70.78408813 -283.58975220]
[71.52010345 -268.60781860]
[72.25611877 -253.62588501]
[73.11467743 -238.65048218]
[74.09572601 -223.68258667]
[75.07677460 -208.71470642]
[76.05781555 -193.74682617]
[77.16128540 -178.78746033]
[78.38710022 -163.83763123]
[79.73518372 -148.89834595]
[81.20544434 -133.97056580]
[82.67569733 -119.04280090]
[96.11713409 -108.94712067]
[98.14571381 -91.91938782]
[87.02305603 -78.42728424]
[88.73736572 -63.52556992]
[90.45166779 -48.62385178]
[92.16596985 -33.72213745]
[93.88027954 -18.82041931]
[106.92094421 -11.67346287]
[113.32842255 1.94300568]
[110.45581818 16.89631844]
[99.19893646 27.41244125]
[100.91324615 42.31415939]
[102.62754822 57.21587372]
[104.34185028 72.11759186]
[106.05615997 87.01931000]
[114.23009491 98.36296082]
[108.84555817 111.26638794]
[110.55986023 126.16810608]
[112.27416992 141.06982422]
[113.98847198 155.97154236]
[115.70277405 170.87326050]
[117.53894043 185.76045227]
[119.49683380 200.63212585]
[121.45471954 215.50379944]
[125.68360138 223.61894226]
[123.32093048 230.63456726]
[125.03523254 245.53628540]
[134.29901123 258.36175537]
[128.06697083 271.88992310]
[129.78128052 286.79162598]
[133.87681580 294.97488403]
[131.39965820 301.95092773]
[132.86991882 316.87869263]
[134.34017944 331.80645752]
[135.81044006 346.73425293]
[137.28070068 361.66201782]
[138.87303162 376.57723999]
[140.58732605 391.47897339]
[142.30163574 406.38067627]
[144.13780212 421.26788330]
[146.09568787 436.13955688]
[148.05358887 451.01123047]
[150.01147461 465.88290405]
[159.48387146 478.55508423]
[153.47399902 492.18341064]
[155.43190002 507.05508423]
[157.38978577 521.92675781]
[160.43640137 536.61407471]
[164.55523682 551.03753662]
[168.67405701 565.46093750]
[187.88845825 580.52459717]
[181.83355713 603.44787598]
[187.57380676 617.30609131]
[193.31405640 631.16430664]
[204.96151733 643.48388672]
[196.34770203 658.08660889]
[179.93115234 653.85180664]
[179.45587158 636.90454102]
[173.71560669 623.04632568]
[167.97535706 609.18817139]
[161.96194458 608.66583252]
[156.29847717 606.46392822]
[151.44738770 602.73797607]
[147.81153870 597.76885986]
[145.70082092 591.94171143]
[145.30578613 585.71618652]
[146.68072510 579.59014893]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 174]
[2 173]
[3 172]
[13 171]
[14 170]
[15 169]
[17 167]
[18 166]
[19 165]
[20 164]
[22 163]
[23 162]
[24 161]
[26 160]
[27 159]
[28 158]
[29 157]
[30 156]
[31 154]
[32 153]
[34 151]
[35 150]
[36 148]
[37 147]
[38 146]
[40 145]
[41 144]
[42 143]
[43 142]
[44 141]
[46 139]
[47 138]
[48 137]
[49 136]
[50 135]
[54 131]
[55 130]
[56 129]
[57 128]
[58 127]
[62 124]
[63 123]
[64 122]
[66 121]
[67 120]
[69 119]
[70 118]
[71 117]
[72 116]
[74 115]
[75 114]
[76 113]
[78 112]
[79 111]
[80 110]
[81 109]
[82 107]
[83 106]
[84 103]
[85 102]
[86 101]
[87 100]
[88 99]
[89 97]
[90 96]
[91 95]
[176 184]
[177 183]
[178 182]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
