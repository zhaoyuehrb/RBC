%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:16:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAACCCGCGAGCCCCGGGAGCCGUCGGUCUGAGGAGGGGCCGCUUCGCCAUGUCGCCCCGCACCUGCUGAGCCCGGAGCGUCCGAGGAUGUCCGCGCUGAGGAAGGUUUUGCCUGGCAUUCUGCAGAAGCAUUGCUGUAUCUUACCAGACAGGAAUACAGAGUCGCAGUGCACGCUCUGCGGGGAGC\
) } def
/len { sequence length } bind def

/coor [
[88.28321075 316.67861938]
[75.11907196 308.76657104]
[67.68866730 295.32464600]
[67.99074554 279.96871948]
[75.94404602 266.82946777]
[89.40917206 259.44122314]
[89.65718079 244.44328308]
[89.90518951 229.44532776]
[90.15319824 214.44737244]
[90.40120697 199.44943237]
[90.52521515 184.44993591]
[90.52521515 169.44993591]
[90.52521515 154.44993591]
[90.52521515 139.44993591]
[76.83889771 133.31115723]
[65.63658142 143.28651428]
[64.56726837 158.82661438]
[53.06441498 168.78346252]
[38.25590897 167.66827393]
[27.05358505 177.64364624]
[15.85126400 187.61901855]
[11.51305389 195.67843628]
[4.38027334 197.66482544]
[-6.98544979 207.45361328]
[-15.04124069 222.37141418]
[-31.60610580 218.76010132]
[-32.72153854 201.84288025]
[-16.77423668 196.08789062]
[-5.40851307 186.29910278]
[5.87589502 176.41668701]
[17.07821655 166.44131470]
[28.28053856 156.46595764]
[28.88296318 141.62773132]
[40.10160828 131.35171509]
[55.66120911 132.08419800]
[66.86353302 122.10882568]
[58.96805191 98.64778900]
[66.45611572 74.27348328]
[51.48891068 73.28211975]
[36.52170563 72.29076385]
[21.55450058 71.29940796]
[6.58729696 70.30804443]
[-7.69406557 77.11637115]
[-19.88214874 68.55483246]
[-34.84935379 67.56347656]
[-44.67594147 79.57254028]
[-59.69308472 83.47959137]
[-74.12638855 77.78227234]
[-82.42594910 64.67132568]
[-81.40041351 49.18817139]
[-71.44412994 37.28640747]
[-56.38548279 33.54249954]
[-42.01483536 39.39605713]
[-33.85799408 52.59626770]
[-18.89078903 53.58762741]
[-5.67998123 46.70839691]
[7.57865572 55.34084320]
[22.54586029 56.33219910]
[37.51306534 57.32355881]
[52.48027039 58.31491852]
[67.44747162 59.30627823]
[77.14196014 47.86001587]
[73.70059967 33.26011658]
[69.89823151 18.75005150]
[65.73719025 4.33874655]
[61.57614517 -10.07255840]
[57.41510010 -24.48386383]
[43.85377502 -36.92838669]
[48.70764542 -53.78479767]
[44.30889511 -68.12533569]
[32.86485672 -79.04982758]
[36.52972031 -93.48651886]
[32.13097000 -107.82705688]
[27.73221970 -122.16759491]
[16.28818130 -133.09208679]
[19.95304489 -147.52877808]
[15.55429459 -161.86930847]
[11.15554333 -176.20985413]
[6.75679302 -190.55038452]
[1.23881185 -197.85287476]
[2.40598154 -205.16450500]
[-1.75506222 -219.57580566]
[-5.91610575 -233.98712158]
[-10.07714939 -248.39842224]
[-22.26333618 -259.37243652]
[-18.58846283 -275.35452271]
[-2.83292103 -279.90368652]
[8.79533672 -268.34014893]
[4.33415556 -252.55946350]
[8.49519920 -238.14816284]
[12.65624332 -223.73686218]
[16.81728745 -209.32554626]
[21.09733009 -194.94914246]
[25.49608040 -180.60859680]
[29.89483070 -166.26806641]
[34.29358292 -151.92753601]
[45.42298889 -142.02876282]
[42.07275391 -126.56634521]
[46.47150803 -112.22580719]
[50.87025833 -97.88526917]
[61.99966431 -87.98650360]
[58.64942932 -72.52408600]
[63.04817963 -58.18354797]
[73.59172821 -52.23099518]
[77.36699677 -40.30543900]
[71.82640839 -28.64490700]
[75.98744965 -14.23360252]
[80.14849091 0.17770302]
[84.30953979 14.58900833]
[87.22154999 16.60701752]
[89.29325867 20.14420891]
[89.81752777 24.78667831]
[88.30049896 29.81875801]
[91.74185944 44.41865540]
[105.96890259 49.17169189]
[117.49491882 39.57216263]
[129.02093506 29.97263718]
[127.86106873 14.49897003]
[136.04653931 1.31648874]
[150.42984009 -4.50587511]
[165.48033142 -0.72930402]
[175.41076660 11.19403362]
[176.40270996 26.67937088]
[168.07472229 39.77228165]
[153.62908936 45.43827057]
[138.62046814 41.49865341]
[127.09444427 51.09818268]
[115.56842804 60.69770813]
[128.42073059 72.67340851]
[134.51170349 87.87307739]
[133.59735107 103.03047180]
[147.86320496 107.66572571]
[162.12904358 112.30098724]
[176.39489746 116.93624115]
[190.66073608 121.57149506]
[204.92658997 126.20674896]
[219.19244385 130.84201050]
[233.63764954 134.88375854]
[248.23754883 138.32511902]
[262.83746338 141.76647949]
[277.43734741 145.20783997]
[292.03723145 148.64920044]
[306.66510010 151.96974182]
[321.31988525 155.16923523]
[335.97470093 158.36872864]
[348.23873901 148.66677856]
[363.86822510 149.16949463]
[375.48342896 159.63951111]
[377.60000610 175.13319397]
[369.21853638 188.33489990]
[354.29653931 193.01119995]
[339.87969971 186.95408630]
[332.77520752 173.02352905]
[318.12039185 169.82403564]
[303.46560669 166.62454224]
[296.24710083 168.27238464]
[288.59588623 163.24909973]
[273.99600220 159.80773926]
[259.39608765 156.36637878]
[244.79618835 152.92501831]
[230.19628906 149.48365784]
[235.64974976 163.45719910]
[228.27241516 176.51762390]
[213.48950195 179.06040955]
[202.17227173 169.21559143]
[202.64332581 154.22299194]
[214.55718994 145.10784912]
[200.29133606 140.47259521]
[186.02548218 135.83734131]
[171.75964355 131.20208740]
[157.49378967 126.56683350]
[143.22795105 121.93157959]
[128.96209717 117.29632568]
[123.97654724 126.54125977]
[115.99536133 134.25028992]
[105.52521515 139.44993591]
[105.52521515 154.44993591]
[105.52521515 169.44993591]
[105.52521515 184.44993591]
[108.65914917 193.04953003]
[105.39915466 199.69743347]
[105.15114594 214.69538879]
[104.90313721 229.69332886]
[104.65512848 244.69128418]
[104.40711975 259.68923950]
[117.62060547 267.51861572]
[125.13513184 280.91369629]
[124.92932129 296.27120972]
[117.05854797 309.46008301]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 185]
[7 184]
[8 183]
[9 182]
[10 181]
[11 179]
[12 178]
[13 177]
[14 176]
[15 36]
[16 35]
[19 32]
[20 31]
[21 30]
[23 29]
[24 28]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[44 55]
[45 54]
[62 114]
[63 113]
[64 109]
[65 108]
[66 107]
[67 106]
[69 103]
[70 102]
[72 100]
[73 99]
[74 98]
[76 96]
[77 95]
[78 94]
[79 93]
[81 92]
[82 91]
[83 90]
[84 89]
[115 128]
[116 127]
[117 126]
[131 173]
[132 172]
[133 171]
[134 170]
[135 169]
[136 168]
[137 167]
[138 161]
[139 160]
[140 159]
[141 158]
[142 157]
[143 155]
[144 154]
[145 153]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
