%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:08:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGGCCAAGGUCCGCCCGAGCCGGCGCUCGCGCGCGCAGCGGGACCGUGGCCGGCGCCGGGAGGCCGCCCGCGACGCCCGCGCCCAGAGUCCGUCGU\
) } def
/len { sequence length } bind def

/coor [
[112.05870056 220.37747192]
[110.66101074 205.44273376]
[109.26332855 190.50799561]
[107.86563873 175.57324219]
[106.46794891 160.63850403]
[103.91429138 145.85748291]
[100.22010803 131.31948853]
[96.52592468 116.78150940]
[91.17941284 130.79631042]
[76.65784454 134.55451965]
[65.18383026 124.89289093]
[66.41489410 109.94348907]
[79.31494141 102.28902435]
[64.36027527 101.12376404]
[50.00074387 107.76563263]
[37.91299438 99.06301117]
[22.95832443 97.89775848]
[8.00365353 96.73249817]
[-6.35587883 103.37436676]
[-18.44362640 94.67174530]
[-33.39829636 93.50648499]
[-48.35296631 92.34122467]
[-63.30764008 91.17597198]
[-78.26230621 90.01071167]
[-92.81706238 97.56658173]
[-106.49049377 88.51288605]
[-105.21654510 72.16329956]
[-90.30574799 65.33686829]
[-77.09705353 75.05604553]
[-62.14237976 76.22129822]
[-47.18770981 77.38655853]
[-32.23303986 78.55181122]
[-17.27836800 79.71707153]
[-3.98849463 72.99185944]
[9.16891098 81.77782440]
[24.12358093 82.94308472]
[39.07825089 84.10834503]
[52.36812592 77.38312531]
[65.52552795 86.16909790]
[80.48020172 87.33435059]
[94.26919556 82.97115326]
[104.29498291 88.08474731]
[114.81878662 77.39598846]
[125.34258270 66.70722961]
[135.86639404 56.01846695]
[146.39019775 45.32970810]
[148.50607300 38.76143646]
[153.01602173 34.94435501]
[157.91625977 34.32925034]
[169.08422852 24.31542778]
[180.25218201 14.30160522]
[185.36151123 -0.67188412]
[200.00268555 -3.40780163]
[211.17063904 -13.42162418]
[216.27996826 -28.39511299]
[230.92114258 -31.13103104]
[242.08909607 -41.14485168]
[253.25706482 -51.15867615]
[264.42501831 -61.17249680]
[275.43591309 -71.35878754]
[286.28704834 -81.71508789]
[290.37805176 -97.59576416]
[306.24700928 -101.73191071]
[317.56930542 -89.86862183]
[312.69754028 -74.20983124]
[296.64334106 -70.86396027]
[285.79220581 -60.50765991]
[283.07901001 -53.48882294]
[274.43884277 -50.00453568]
[263.27087402 -39.99071503]
[252.10292053 -29.97689056]
[240.93496704 -19.96306992]
[236.62445068 -5.70583534]
[221.18446350 -2.25366211]
[210.01651001 7.76015997]
[205.70599365 22.01739311]
[190.26600647 25.46956635]
[179.09803772 35.48339081]
[167.93008423 45.49721146]
[157.07894897 55.85351181]
[146.55514526 66.54227448]
[136.03134155 77.23103333]
[125.50754547 87.91979218]
[114.98374176 98.60855103]
[111.06391144 113.08732605]
[114.75809479 127.62531281]
[118.45227814 142.16329956]
[121.59100342 144.95300293]
[123.58696747 148.24089050]
[124.41986847 151.63862610]
[124.18820190 154.78710938]
[123.09133911 157.39022827]
[121.40268707 159.24081421]
[122.80037689 174.17556763]
[124.19806671 189.11030579]
[125.59575653 204.04504395]
[126.99344635 218.97978210]
[136.91687012 232.03573608]
[130.32315063 247.05088806]
[113.99534607 248.57894897]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 97]
[2 96]
[3 95]
[4 94]
[5 93]
[6 87]
[7 86]
[8 85]
[13 40]
[14 39]
[16 37]
[17 36]
[18 35]
[20 33]
[21 32]
[22 31]
[23 30]
[24 29]
[42 84]
[43 83]
[44 82]
[45 81]
[46 80]
[49 79]
[50 78]
[51 77]
[53 75]
[54 74]
[56 72]
[57 71]
[58 70]
[59 69]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
