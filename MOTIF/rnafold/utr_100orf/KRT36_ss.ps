%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCACCCAGACCUGCACCCCUACCUUCUCCACUGGGUCUAUCAAGGGCCUCUGUGGCACAGCAGGCGGCAUCUCUCGGGUGUCCUCCAUCCGUUCUG\
) } def
/len { sequence length } bind def

/coor [
[154.60229492 341.49758911]
[162.29075623 328.43377686]
[173.98562622 318.78982544]
[168.95286560 304.65930176]
[157.39385986 295.26577759]
[160.05247498 279.66952515]
[155.01971436 265.53903198]
[149.98696899 251.40850830]
[144.95422363 237.27799988]
[139.92146301 223.14747620]
[134.66957092 209.09693909]
[129.19979858 195.12979126]
[123.73002625 181.16262817]
[110.02223969 175.45016479]
[104.27614594 161.36340332]
[110.36083221 147.02413940]
[104.89105988 133.05699158]
[99.42128754 119.08982086]
[86.18742371 113.18972778]
[80.90379333 99.69789886]
[86.61155701 86.37995148]
[81.14178467 72.41278839]
[69.32916260 69.79554749]
[60.39392471 61.81834793]
[56.53815842 50.60571289]
[58.63429260 39.05836105]
[66.03086853 30.10290909]
[61.44001007 15.82271194]
[46.84564972 10.89211178]
[38.05574417 -1.54135108]
[38.27003479 -16.58854675]
[47.19678116 -28.48187256]
[42.60592270 -42.76206970]
[38.01506424 -57.04226685]
[33.42420578 -71.32246399]
[19.50816917 -83.25523376]
[23.66341782 -100.22683716]
[18.63066673 -114.35734558]
[13.59791660 -128.48786926]
[8.56516647 -142.61837769]
[3.53241634 -156.74888611]
[-1.50033379 -170.87940979]
[-15.31807613 -179.03106689]
[-17.41731071 -194.93618774]
[-6.18768263 -206.39370728]
[9.75639725 -204.61442566]
[18.18399620 -190.96322632]
[12.63018036 -175.91215515]
[17.66292953 -161.78164673]
[22.69568062 -147.65112305]
[27.72843170 -133.52061462]
[32.76118088 -119.39009857]
[37.79393005 -105.25958252]
[48.66791153 -99.71210480]
[52.91505051 -87.83833313]
[47.70440292 -75.91332245]
[52.29526138 -61.63312531]
[56.88611984 -47.35292816]
[61.47697830 -33.07273102]
[75.66209412 -28.60950661]
[84.60485840 -16.50616074]
[84.70716858 -1.27977097]
[75.72020721 11.23185253]
[80.31106567 25.51204872]
[96.99767303 32.71632385]
[103.39678955 50.06356430]
[95.10894012 66.94301605]
[100.57871246 80.91017914]
[113.81257629 86.81027222]
[119.09620667 100.30210114]
[113.38844299 113.62004852]
[118.85821533 127.58721161]
[124.32799530 141.55436707]
[138.53210449 147.94819641]
[143.88026428 162.19081116]
[137.69718933 175.69285583]
[143.16696167 189.66001892]
[148.63673401 203.62716675]
[154.78605652 210.62562561]
[154.05198669 218.11473083]
[159.08473206 232.24523926]
[164.11747742 246.37576294]
[169.15023804 260.50628662]
[174.18298340 274.63677979]
[186.10197449 285.04101562]
[183.08338928 299.62655640]
[188.11613464 313.75704956]
[203.27427673 313.83700562]
[217.48986816 319.09942627]
[229.04626465 328.90887451]
[236.54801941 342.08081055]
[239.08923340 357.02462769]
[236.36305237 371.93582153]
[228.69866943 385.01379395]
[217.02159119 394.67929077]
[202.74191284 399.76516724]
[187.58393860 399.65728760]
[173.37808228 394.36868286]
[161.83976746 384.53796387]
[154.36230469 371.35223389]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 87]
[4 86]
[6 84]
[7 83]
[8 82]
[9 81]
[10 80]
[11 78]
[12 77]
[13 76]
[16 73]
[17 72]
[18 71]
[21 68]
[22 67]
[27 64]
[28 63]
[32 59]
[33 58]
[34 57]
[35 56]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
