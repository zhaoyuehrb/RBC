%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:14:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGGCCGGCCGGCGCGGGCACCAAGCUGCCCUGUCCCCGAGACUCUGCGCUCCGGCGGGCGGCUUUCUCUGGGAACCUCACGGCCCUGCCCUCUCACC\
) } def
/len { sequence length } bind def

/coor [
[100.40355682 358.36532593]
[96.96660614 343.52929688]
[99.86751556 328.57922363]
[108.60369110 316.10528564]
[121.66152954 308.26867676]
[119.80004883 293.38461304]
[117.93856812 278.50057983]
[106.59314728 265.21212769]
[113.65406799 248.29496765]
[111.33059692 233.47601318]
[109.00712585 218.65705872]
[106.68364716 203.83810425]
[104.36017609 189.01914978]
[91.87815857 184.01358032]
[83.46741486 173.38084412]
[81.43762970 159.86647034]
[86.43269348 147.02925110]
[97.23210144 138.30413818]
[95.37062073 123.42008972]
[82.53273773 116.27349091]
[76.31130219 102.96263885]
[79.06292725 88.52957153]
[89.74533081 78.44139099]
[87.88385010 63.55734634]
[86.02236938 48.67329788]
[83.01026917 33.97883606]
[78.86573792 19.56277275]
[74.72121429 5.14670753]
[70.57669067 -9.26935673]
[66.43215942 -23.68542099]
[62.28763580 -38.10148621]
[58.14310837 -52.51754761]
[53.99858475 -66.93361664]
[48.52812195 -74.47461700]
[49.95683289 -81.86273193]
[46.26264954 -96.40071869]
[42.56846619 -110.93869781]
[32.72517776 -116.06857300]
[27.52613258 -125.62371826]
[28.52397537 -136.23307800]
[35.13274002 -144.30775452]
[32.34952545 -159.04728699]
[29.56630898 -173.78681946]
[15.48135662 -180.29786682]
[7.94289970 -193.86073303]
[9.84962749 -209.26020813]
[20.46836472 -220.57489014]
[35.71598816 -223.45405579]
[49.72948074 -216.79058838]
[57.12036133 -203.14674377]
[55.04669189 -187.76885986]
[44.30583572 -176.57003784]
[47.08905411 -161.83050537]
[49.87226868 -147.09097290]
[63.57596207 -133.59942627]
[57.10645294 -114.63288116]
[60.80063629 -100.09490204]
[64.49481964 -85.55691528]
[68.41464996 -71.07814026]
[72.55917358 -56.66207504]
[76.70369720 -42.24600983]
[80.84822845 -27.82994652]
[84.99275208 -13.41388226]
[89.13727570 1.00218177]
[93.28180695 15.41824627]
[97.42633057 29.83431053]
[99.67353058 30.94170380]
[101.64409637 32.96561050]
[103.00791168 35.81283569]
[103.47134399 39.28032303]
[102.81175232 43.06964874]
[100.90641785 46.81181717]
[102.76789856 61.69586563]
[104.62937927 76.57991028]
[117.46726227 83.72650909]
[123.68869781 97.03736115]
[120.93707275 111.47042847]
[110.25466919 121.55860901]
[112.11614990 136.44265747]
[126.97984314 144.33546448]
[134.19816589 159.35522461]
[131.13635254 175.56784058]
[119.17913055 186.69566345]
[121.50260925 201.51463318]
[123.82608032 216.33358765]
[126.14955139 231.15254211]
[128.47302246 245.97149658]
[138.49095154 254.27801514]
[140.03890991 266.79312134]
[132.82261658 276.63909912]
[134.68409729 291.52313232]
[136.54557800 306.40719604]
[151.13122559 310.78656006]
[162.67037964 320.72476196]
[169.16383362 334.49993896]
[169.48652649 349.72543335]
[163.58258057 363.76333618]
[152.47488403 374.18154907]
[138.08789062 379.17498779]
[122.91426086 377.87854004]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 92]
[6 91]
[7 90]
[9 87]
[10 86]
[11 85]
[12 84]
[13 83]
[18 79]
[19 78]
[23 74]
[24 73]
[25 72]
[26 66]
[27 65]
[28 64]
[29 63]
[30 62]
[31 61]
[32 60]
[33 59]
[35 58]
[36 57]
[37 56]
[41 54]
[42 53]
[43 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
