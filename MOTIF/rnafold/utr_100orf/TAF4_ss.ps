%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGGCGGGCUCGGAUCUGCUGGACGAGGUCUUCUUCAACAGCGAGGUGGACGAGAAAGUGGUGAGCGACCUGGUGGGCUCGCUGGAGUCGCAGCUGG\
) } def
/len { sequence length } bind def

/coor [
[164.13992310 172.60614014]
[161.50227356 165.13739014]
[160.89010620 157.21792603]
[162.35681152 149.38876343]
[149.77252197 141.22569275]
[134.88426208 140.79069519]
[127.51724243 126.78935242]
[114.93295288 118.62628937]
[101.19727325 123.84320068]
[87.00807953 120.02852631]
[77.74011230 108.62722015]
[76.90398407 93.95800781]
[64.31969452 85.79494476]
[51.73540115 77.63188171]
[39.15110779 69.46881866]
[19.11157990 69.51138306]
[10.72972298 52.20365524]
[-2.33772087 44.83874512]
[-15.40516472 37.47383499]
[-28.47260857 30.10892105]
[-41.65300751 22.94812393]
[-54.94318008 15.99317074]
[-68.23335266 9.03821754]
[-81.52352142 2.08326483]
[-93.93442535 7.58276176]
[-107.04431915 4.91232347]
[-116.04778290 -4.71787691]
[-117.77897644 -17.58974266]
[-130.84642029 -24.95465279]
[-143.91386414 -32.31956482]
[-156.98130798 -39.68447495]
[-173.36503601 -38.97348404]
[-181.94319153 -52.95015335]
[-173.89131165 -67.23648071]
[-157.49247742 -67.13591766]
[-149.61639404 -52.75191879]
[-136.54895020 -45.38700867]
[-123.48150635 -38.02209854]
[-110.41406250 -30.65718651]
[-94.51612091 -35.89118195]
[-79.41486359 -27.92684746]
[-74.56856537 -11.20690536]
[-61.27839661 -4.25195265]
[-47.98822784 2.70300055]
[-34.69805527 9.65795326]
[-27.17978477 9.97590160]
[-21.10769653 17.04147911]
[-8.04025364 24.40638924]
[5.02719021 31.77130127]
[18.09463310 39.13621140]
[27.86273384 35.46736145]
[38.23139954 37.92602539]
[45.61345291 45.91577530]
[47.31417084 56.88452530]
[59.89846420 65.04758453]
[72.48275757 73.21064758]
[85.06704712 81.37371063]
[98.80272675 76.15679932]
[112.99192047 79.97147369]
[122.25988770 91.37277985]
[123.09601593 106.04199219]
[135.68031311 114.20505524]
[151.46867371 115.22393799]
[157.93557739 128.64140320]
[170.51986694 136.80447388]
[192.71562195 129.03611755]
[213.57687378 139.35525513]
[220.72128296 161.25112915]
[234.92835999 166.06352234]
[249.13543701 170.87590027]
[263.34249878 175.68829346]
[277.54959106 180.50067139]
[291.82977295 185.09153748]
[306.17965698 189.45974731]
[320.52951050 193.82797241]
[334.87936401 198.19619751]
[349.22924805 202.56442261]
[363.57910156 206.93263245]
[379.42242432 202.69924927]
[390.81726074 214.49288940]
[386.04156494 230.18125916]
[370.00820923 233.62551880]
[359.21087646 221.28250122]
[344.86102295 216.91427612]
[330.51113892 212.54606628]
[316.16128540 208.17784119]
[301.81143188 203.80961609]
[287.46154785 199.44140625]
[280.01483154 200.52397156]
[272.73718262 194.70774841]
[258.53012085 189.89535522]
[244.32304382 185.08297729]
[230.11596680 180.27058411]
[215.90890503 175.45820618]
[210.90086365 181.36312866]
[204.51446533 185.77990723]
[197.18014526 188.39680481]
[189.39588928 189.02386475]
[181.69345093 187.60667419]
[174.60195923 184.23085022]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 65]
[5 64]
[7 62]
[8 61]
[12 57]
[13 56]
[14 55]
[15 54]
[17 50]
[18 49]
[19 48]
[20 47]
[21 45]
[22 44]
[23 43]
[24 42]
[28 39]
[29 38]
[30 37]
[31 36]
[68 94]
[69 93]
[70 92]
[71 91]
[72 90]
[73 88]
[74 87]
[75 86]
[76 85]
[77 84]
[78 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
