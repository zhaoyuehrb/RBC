%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:46:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGACGCGGCCGGCGGGGCGGACGGGAGCGGGCCGCGCGUGGCGGCGGCGAUGGGCGAGGGCGGGCUGCCCCCGGCCUUCCAGCUGCUGCUGCGCGCGUGUGACCAGGGCGACACGGAGACGGCGCGGCGGCUGCUGGAGCCGGGGGCGG\
) } def
/len { sequence length } bind def

/coor [
[154.15754700 94.02219391]
[139.61653137 97.70447540]
[125.07553101 101.38675690]
[117.44597626 121.28958130]
[95.74684906 129.63183594]
[73.28848267 118.24229431]
[59.81261444 124.83024597]
[46.33675003 131.41819763]
[37.33699417 144.43029785]
[22.50473404 143.06895447]
[9.02886868 149.65690613]
[-4.44699574 156.24485779]
[-17.92286110 162.83280945]
[-31.32992554 169.55966187]
[-44.66675949 176.42471313]
[-58.00359344 183.28974915]
[-66.73250580 196.48507690]
[-81.58973694 195.43055725]
[-94.92656708 202.29560852]
[-108.26340485 209.16065979]
[-111.00370026 219.76890564]
[-118.99031830 226.94369507]
[-129.39450073 228.47119141]
[-138.70755005 224.08239746]
[-152.31668091 230.39044189]
[-161.30601501 244.10626221]
[-177.66142273 242.90916443]
[-184.55784607 228.03060913]
[-174.90084839 214.77638245]
[-158.62472534 216.78129578]
[-145.01557922 210.47326660]
[-135.15167236 193.88510132]
[-115.12844849 195.82382202]
[-101.79161835 188.95877075]
[-88.45478058 182.09371948]
[-80.67980957 169.38943481]
[-64.86863708 169.95291138]
[-51.53180695 163.08787537]
[-38.19497299 156.22282410]
[-33.65852737 150.32795715]
[-24.51080894 149.35693359]
[-11.03494453 142.76899719]
[2.44092035 136.18104553]
[15.91678524 129.59309387]
[23.95265579 117.05220032]
[39.74880219 117.94232941]
[53.22466660 111.35437775]
[66.70053101 104.76643372]
[67.93922424 89.81766510]
[55.73149109 81.10150909]
[39.73426056 82.31322479]
[28.91878510 70.46396637]
[31.58176613 54.64346695]
[45.68039322 46.98786926]
[60.39941025 53.36988449]
[64.44763947 68.89378357]
[76.65537262 77.60993195]
[89.53358459 71.31137085]
[103.05742645 71.43304443]
[114.37042236 77.23415375]
[121.39324951 86.84574890]
[135.93424988 83.16346741]
[150.47526550 79.48118591]
[155.53613281 69.76358032]
[164.93440247 64.57359314]
[175.41514587 65.43049622]
[183.49931335 71.80549622]
[198.18006897 68.72726440]
[212.86082458 65.64903259]
[227.54158020 62.57080460]
[242.22232056 59.49257278]
[256.90307617 56.41434097]
[271.58383179 53.33611298]
[286.26458740 50.25788116]
[300.94534302 47.17965317]
[315.62609863 44.10142136]
[330.30685425 41.02319336]
[335.55859375 36.84061813]
[341.27343750 36.09888840]
[345.65737915 38.13435745]
[360.45281982 35.66543961]
[375.24822998 33.19652176]
[390.04364014 30.72760201]
[404.83908081 28.25868225]
[419.63449097 25.78976440]
[431.97293091 15.88655663]
[445.80014038 21.42349052]
[460.59555054 18.95457077]
[475.39096069 16.48565292]
[490.18640137 14.01673317]
[504.98181152 11.54781437]
[519.77722168 9.07889557]
[534.57263184 6.60997677]
[549.36804199 4.14105797]
[564.16351318 1.67213917]
[578.95892334 -0.79677963]
[586.96801758 -5.32204533]
[594.08532715 -3.16053557]
[608.92864990 -5.32315159]
[623.77191162 -7.48576784]
[628.92675781 -18.28198433]
[638.57208252 -25.15472412]
[650.22064209 -26.47487450]
[660.93719482 -22.02711868]
[668.07800293 -13.03493023]
[682.99798584 -14.58230114]
[689.19097900 -28.63727188]
[701.59124756 -37.69977570]
[716.86315918 -39.33204651]
[730.89868164 -33.09501266]
[739.92224121 -20.66640091]
[741.50665283 -5.38944864]
[735.22564697 8.62642193]
[722.76879883 17.61101151]
[707.48699951 19.14751053]
[693.49084473 12.82260895]
[684.54534912 0.33767372]
[669.62536621 1.88504398]
[659.02313232 16.75212479]
[640.61456299 19.25464058]
[625.93450928 7.35751677]
[611.09124756 9.52013302]
[596.24798584 11.68274879]
[581.42779541 13.99864006]
[566.63238525 16.46755791]
[551.83697510 18.93647766]
[537.04156494 21.40539551]
[522.24615479 23.87431526]
[507.45071411 26.34323502]
[492.65530396 28.81215286]
[477.85989380 31.28107262]
[463.06445312 33.74999237]
[448.26904297 36.21891022]
[436.98889160 45.94552231]
[422.10339355 40.58518219]
[407.30798340 43.05410385]
[392.51257324 45.52302170]
[377.71713257 47.99193954]
[362.92172241 50.46085739]
[348.12631226 52.92977905]
[333.38507080 55.70394516]
[318.70431519 58.78217316]
[304.02355957 61.86040497]
[289.34280396 64.93863678]
[274.66204834 68.01686859]
[259.98132324 71.09509277]
[245.30055237 74.17332458]
[230.61979675 77.25155640]
[215.93905640 80.32978821]
[201.25830078 83.40801239]
[186.57754517 86.48624420]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[6 48]
[7 47]
[8 46]
[10 44]
[11 43]
[12 42]
[13 41]
[14 39]
[15 38]
[16 37]
[18 35]
[19 34]
[20 33]
[24 31]
[25 30]
[49 57]
[50 56]
[67 151]
[68 150]
[69 149]
[70 148]
[71 147]
[72 146]
[73 145]
[74 144]
[75 143]
[76 142]
[77 141]
[80 140]
[81 139]
[82 138]
[83 137]
[84 136]
[85 135]
[87 133]
[88 132]
[89 131]
[90 130]
[91 129]
[92 128]
[93 127]
[94 126]
[95 125]
[96 124]
[98 123]
[99 122]
[100 121]
[105 118]
[106 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
