%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGACAGCUGGGCCACUGGCAGUGAGGGAGAGUGAGGAUGGCAGAGACCAGUGCCCUGCCCACUGGCUUCGGGGAGCUCGAGGUGCUGGCUGUGGGGAUGGUGCUACUGGUGGAAGCUCUCUCCGGUCUCAGCCUCA\
) } def
/len { sequence length } bind def

/coor [
[35.69302750 315.43579102]
[27.37741852 327.91983032]
[12.71234035 331.07186890]
[0.00156769 323.10717773]
[-3.55755353 308.53457642]
[-12.70017815 320.42626953]
[-14.97752285 336.08270264]
[-28.86887550 341.45669556]
[-38.01149750 353.34838867]
[-47.15412140 365.24008179]
[-56.29674530 377.13177490]
[-65.43936920 389.02346802]
[-67.05764008 405.34255981]
[-82.10900116 411.85321045]
[-95.10991669 401.85778809]
[-92.68614960 385.63876343]
[-77.33106995 379.88082886]
[-68.18844604 367.98913574]
[-59.04581833 356.09744263]
[-49.90319443 344.20574951]
[-40.76057053 332.31405640]
[-39.13716888 317.50817871]
[-24.59187317 311.28363037]
[-15.44924927 299.39193726]
[-7.13332176 286.90814209]
[0.31769171 273.88958740]
[7.76870537 260.87106323]
[15.21971893 247.85252380]
[22.37461662 234.66891479]
[29.22974586 221.32698059]
[36.08487320 207.98504639]
[42.94000244 194.64311218]
[41.87443924 179.78666687]
[55.06327438 171.04795837]
[61.91840363 157.70602417]
[60.85283661 142.84957886]
[74.04167175 134.11085510]
[80.89679718 120.76892090]
[87.75193024 107.42698669]
[87.25939178 93.45383453]
[98.90613556 85.71788025]
[105.76126862 72.37594604]
[112.61639404 59.03401566]
[104.41598511 46.12276077]
[103.78337097 30.94064522]
[110.78839874 17.56918335]
[123.46106720 9.55299187]
[138.34442139 8.96030521]
[145.19955444 -4.38162851]
[152.05468750 -17.72356224]
[158.90982056 -31.06549644]
[165.76493835 -44.40743256]
[172.62007141 -57.74936676]
[179.32398987 -71.16791534]
[185.87585449 -84.66136169]
[192.27481079 -98.22798920]
[198.52005005 -111.86605835]
[192.11714172 -128.10215759]
[199.25871277 -143.65748596]
[215.10931396 -149.16363525]
[221.04473877 -162.93936157]
[226.98016357 -176.71508789]
[232.91560364 -190.49081421]
[238.85102844 -204.26654053]
[229.17095947 -223.72734070]
[236.72106934 -243.81221008]
[256.30889893 -251.86561584]
[260.65304565 -266.22280884]
[264.99716187 -280.57998657]
[269.34130859 -294.93716431]
[273.68542480 -309.29434204]
[278.02954102 -323.65151978]
[282.37368774 -338.00869751]
[286.71780396 -352.36587524]
[285.51773071 -369.27728271]
[301.43603516 -375.11199951]
[311.44937134 -361.43099976]
[301.07498169 -348.02172852]
[296.73086548 -333.66455078]
[292.38671875 -319.30737305]
[288.04260254 -304.95019531]
[283.69845581 -290.59301758]
[279.35433960 -276.23583984]
[275.01022339 -261.87866211]
[270.66607666 -247.52149963]
[277.21966553 -241.58770752]
[281.46987915 -233.78573608]
[282.91546631 -224.97526550]
[281.36618042 -216.13801575]
[276.96701050 -208.26837158]
[270.18527222 -202.26145935]
[261.76113892 -198.81138611]
[252.62675476 -198.33111572]
[246.69132996 -184.55538940]
[240.75588989 -170.77966309]
[234.82046509 -157.00393677]
[228.88504028 -143.22821045]
[235.28976440 -131.99121094]
[234.00773621 -118.92476654]
[225.28576660 -108.85182953]
[212.15811157 -105.62081909]
[205.91287231 -91.98274994]
[205.98860168 -84.52880859]
[199.36929321 -78.10950470]
[192.81744385 -64.61605835]
[192.72470093 -57.16230392]
[185.96200562 -50.89423752]
[179.10687256 -37.55230331]
[172.25175476 -24.21036911]
[165.39662170 -10.86843395]
[158.54148865 2.47350001]
[151.68635559 15.81543446]
[159.87089539 28.26047516]
[160.73298645 43.23087311]
[153.94113159 56.71186447]
[141.22994995 65.03789520]
[125.95832825 65.88914490]
[119.10320282 79.23107910]
[112.24806976 92.57301331]
[112.74060822 106.54616547]
[101.09386444 114.28211975]
[94.23873138 127.62405396]
[87.38360596 140.96598816]
[87.95884705 156.77673340]
[75.26033783 164.56114197]
[68.40520477 177.90307617]
[68.98044586 193.71382141]
[56.28193665 201.49824524]
[49.42680740 214.84017944]
[42.57168198 228.18211365]
[35.71655273 241.52404785]
[35.65755463 248.27197266]
[32.60834885 253.19351196]
[28.23825836 255.30352783]
[20.78724670 268.32208252]
[13.33623219 281.34060669]
[5.88521862 294.35916138]
[20.70305443 292.02853394]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 24]
[6 23]
[8 21]
[9 20]
[10 19]
[11 18]
[12 17]
[25 137]
[26 136]
[27 135]
[28 134]
[29 131]
[30 130]
[31 129]
[32 128]
[34 126]
[35 125]
[37 123]
[38 122]
[39 121]
[41 119]
[42 118]
[43 117]
[48 112]
[49 111]
[50 110]
[51 109]
[52 108]
[53 107]
[54 105]
[55 104]
[56 102]
[57 101]
[60 97]
[61 96]
[62 95]
[63 94]
[64 93]
[67 85]
[68 84]
[69 83]
[70 82]
[71 81]
[72 80]
[73 79]
[74 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
