%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:21:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUCCGGGUCACUGUAGAUGCGAUGGCGCCGAUUCCAAAGACUGUGGGGCGGAUCAAGCUAGACUGCUCUCUACGGCCCAGCUGCCCACUGGAGGUCGCUGCUGCACCCAAACUUUGCAAGG\
) } def
/len { sequence length } bind def

/coor [
[-24.86100578 273.40240479]
[-34.23036194 276.55194092]
[-44.07011032 277.32876587]
[-53.78962326 275.69314575]
[-62.80716705 271.74996948]
[-70.58473206 265.74203491]
[-82.89617920 274.31106567]
[-95.20763397 282.88009644]
[-107.40955353 291.60437012]
[-119.49997711 300.48251343]
[-131.59039307 309.36068726]
[-143.68081665 318.23883057]
[-150.22462463 332.64334106]
[-165.06269836 333.93981934]
[-177.15312195 342.81799316]
[-189.24354553 351.69613647]
[-195.33866882 366.92050171]
[-211.60722351 368.98599243]
[-221.31350708 355.76782227]
[-214.47251892 340.86370850]
[-198.12168884 339.60571289]
[-186.03126526 330.72756958]
[-173.94084167 321.84939575]
[-168.26184082 308.07992554]
[-152.55897522 306.14840698]
[-140.46855164 297.27026367]
[-128.37812805 288.39208984]
[-116.28770447 279.51394653]
[-112.71791077 272.94415283]
[-103.77665710 270.56863403]
[-91.46520233 261.99960327]
[-79.15375519 253.43058777]
[-82.58271027 233.13021851]
[-75.48050690 213.73020935]
[-59.64619446 200.35015869]
[-39.19303131 196.55819702]
[-19.48008156 203.41969299]
[-8.87347984 192.81309509]
[1.73312187 182.20648193]
[12.33972359 171.59988403]
[22.94632530 160.99328613]
[20.46260452 149.72177124]
[23.81309509 138.55090332]
[32.26308060 130.33874512]
[43.75793457 127.24572754]
[55.42195892 130.16716003]
[66.55216217 120.11138916]
[77.68236542 110.05561829]
[88.81256866 99.99984741]
[99.81449890 89.80388641]
[110.68639374 79.46938324]
[121.55828094 69.13488007]
[132.43017578 58.80037689]
[134.72773743 52.40345764]
[139.27172852 48.75468445]
[144.12429810 48.23512268]
[155.50566101 38.46453476]
[160.04652405 30.40414810]
[167.30134583 28.59504128]
[178.92658997 19.11591148]
[181.70326233 12.91192150]
[186.51118469 9.61872101]
[191.38919067 9.46913242]
[203.47961426 0.59097683]
[215.57003784 -8.28717899]
[217.25004578 -12.57598782]
[219.97856140 -15.72806549]
[223.24432373 -17.54856491]
[226.52668762 -18.03814507]
[229.36334229 -17.37772560]
[242.28991699 -24.98716164]
[255.21650696 -32.59659958]
[268.14306641 -40.20603561]
[281.06967163 -47.81547165]
[290.06295776 -65.77190399]
[309.32788086 -65.37907410]
[321.85244751 -73.63346863]
[334.37704468 -81.88785553]
[337.31250000 -97.41713715]
[350.41595459 -106.25315094]
[365.91333008 -103.15365601]
[374.61032104 -89.95751953]
[371.34713745 -74.49378204]
[358.05981445 -65.93679810]
[342.63143921 -69.36328125]
[330.10684204 -61.10889053]
[317.58227539 -52.85449982]
[316.39883423 -42.56477737]
[309.55700684 -34.49660492]
[299.17404175 -31.52591515]
[288.67910767 -34.88889313]
[275.75250244 -27.27945709]
[262.82592773 -19.67001915]
[249.89935303 -12.06058216]
[236.97277832 -4.45114565]
[224.44819641 3.80324507]
[212.35777283 12.68140125]
[200.26734924 21.55955696]
[188.40571594 30.74114609]
[176.78048706 40.22027588]
[165.27626038 49.84590912]
[153.89488220 59.61649704]
[142.76467896 69.67227173]
[131.89279175 80.00677490]
[121.02089691 90.34127808]
[110.14900208 100.67578125]
[106.89205933 108.15783691]
[98.86833954 111.13005066]
[87.73813629 121.18582153]
[76.60793304 131.24159241]
[65.47772980 141.29736328]
[65.31634521 160.15179443]
[51.73771667 172.77363586]
[33.55292511 171.59988403]
[22.94632530 182.20648193]
[12.33972359 192.81309509]
[1.73312187 203.41969299]
[-8.87347984 214.02629089]
[-4.33402872 222.91847229]
[-2.09507418 232.63349915]
[-2.28416491 242.58718872]
[-4.88306618 252.18278503]
[-9.72926617 260.84661865]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 32]
[7 31]
[8 30]
[9 28]
[10 27]
[11 26]
[12 25]
[14 23]
[15 22]
[16 21]
[37 118]
[38 117]
[39 116]
[40 115]
[41 114]
[46 111]
[47 110]
[48 109]
[49 108]
[50 106]
[51 105]
[52 104]
[53 103]
[56 102]
[57 101]
[59 100]
[60 99]
[63 98]
[64 97]
[65 96]
[70 95]
[71 94]
[72 93]
[73 92]
[74 91]
[76 87]
[77 86]
[78 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
