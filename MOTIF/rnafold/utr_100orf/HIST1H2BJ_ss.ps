%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACGCUGUUUUUCCUUUUCGUUGGCGCUUUAUAGCUACACAGUGCUAUGCCAGAGCCAGCGAAGUCUGCUCCCGCCCCGAAAAAGGGCUCCAAGAAGGCGGUGACUAAGGCGCAGAAGAAAGACGGCAAGAAGCGCAAGCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[124.47166443 276.40203857]
[127.55797577 264.29461670]
[134.24671936 253.71211243]
[143.89637756 245.69783020]
[138.86662292 231.56625366]
[133.83686829 217.43467712]
[128.80709839 203.30310059]
[123.77734375 189.17152405]
[118.74758148 175.03994751]
[113.71781921 160.90837097]
[108.68806458 146.77679443]
[103.65830231 132.64520264]
[98.62854004 118.51363373]
[86.09663391 114.71536255]
[78.26200104 102.85686493]
[79.90585327 87.61328125]
[65.05034637 85.53627014]
[50.19484329 83.45925903]
[35.33934021 81.38224030]
[20.48383522 79.30522919]
[5.62832975 77.22821045]
[-9.22717476 75.15119934]
[-24.08267975 73.07418060]
[-38.93818283 70.99716949]
[-53.79368591 68.92015839]
[-68.53228760 74.67204285]
[-80.06558990 65.24696350]
[-94.92109680 63.16994858]
[-111.78237915 70.48919678]
[-125.21576691 59.24414825]
[-140.11225891 57.48506927]
[-155.00875854 55.72598648]
[-169.90525818 53.96690369]
[-184.80175781 52.20782471]
[-199.69825745 50.44874191]
[-210.12890625 61.93704987]
[-225.32696533 65.06733704]
[-239.44845581 58.63594055]
[-247.06340027 45.11587143]
[-245.24368286 29.70586586]
[-234.68902588 18.33138847]
[-219.45790100 15.36615658]
[-205.40699768 21.95036316]
[-197.93917847 35.55224609]
[-183.04267883 37.31132507]
[-168.14617920 39.07040787]
[-153.24967957 40.82949066]
[-138.35317993 42.58856964]
[-123.45668793 44.34765244]
[-113.72507477 37.08837891]
[-101.25976562 38.47906494]
[-92.84408569 48.31444550]
[-77.98857880 50.39146042]
[-64.31254578 44.49100876]
[-51.71667480 54.06465149]
[-36.86116791 56.14166641]
[-22.00566483 58.21868134]
[-7.15016031 60.29569244]
[7.70534420 62.37270737]
[22.56084824 64.44972229]
[37.41635132 66.52673340]
[52.27185822 68.60375214]
[67.12736511 70.68076324]
[81.98286438 72.75778198]
[96.05989075 67.57730103]
[106.02517700 56.36600876]
[115.99046326 45.15471649]
[125.95574188 33.94342041]
[135.92103577 22.73212814]
[139.30619812 7.27731562]
[153.54460144 2.90499640]
[163.50988770 -8.30629730]
[172.86222839 -20.03376961]
[181.57495117 -32.24394989]
[190.28767395 -44.45413208]
[199.00038147 -56.66431427]
[207.58213806 -68.96689606]
[216.03193665 -81.36048126]
[208.48797607 -93.35597229]
[206.10614014 -107.28083801]
[209.21505737 -121.01710510]
[217.31077576 -132.48832703]
[229.13809204 -139.97348022]
[242.88508606 -142.36508179]
[256.46066284 -139.33300781]
[265.17340088 -151.54318237]
[269.45172119 -167.94844055]
[286.40020752 -168.37872314]
[291.50549316 -152.21171570]
[277.38357544 -142.83047485]
[268.67083740 -130.62028503]
[276.62207031 -116.79685974]
[277.77005005 -100.83296967]
[271.83560181 -85.90623474]
[259.95443726 -75.00988770]
[244.46002197 -70.35254669]
[228.42552185 -72.91067505]
[219.97572327 -60.51709747]
[218.79815674 -53.16667557]
[211.21057129 -47.95159531]
[202.49784851 -35.74141312]
[193.78512573 -23.53123283]
[185.07240295 -11.32105064]
[200.06240845 -10.77343369]
[209.15553284 1.15615821]
[205.71086121 15.75527668]
[192.24412537 22.36186028]
[178.59037781 16.15097237]
[174.72117615 1.65898657]
[164.75588989 12.87028027]
[162.08351135 27.52318573]
[147.13232422 32.69741058]
[137.16703796 43.90870667]
[127.20175171 55.11999893]
[117.23647308 66.33129120]
[107.27118683 77.54258728]
[120.56570435 95.35031128]
[112.76011658 113.48387146]
[117.78987885 127.61544800]
[122.81964111 141.74702454]
[127.84940338 155.87860107]
[132.87916565 170.01017761]
[137.90892029 184.14176941]
[142.93867493 198.27334595]
[147.96844482 212.40492249]
[152.99819946 226.53649902]
[158.02795410 240.66807556]
[175.85028076 242.04779053]
[191.25532532 251.01152039]
[201.20254517 265.73724365]
[203.75164795 283.27096558]
[198.44090271 300.11932373]
[186.36997986 312.94549561]
[192.29481506 326.72576904]
[198.21965027 340.50607300]
[211.67863464 349.87561035]
[210.02444458 366.19110107]
[194.95877075 372.66857910]
[181.97990417 362.64456177]
[184.43937683 346.43090820]
[178.51452637 332.65063477]
[172.58969116 318.87033081]
[160.26774597 319.65972900]
[148.28083801 316.59790039]
[137.80537415 309.96966553]
[129.87423706 300.41058350]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 127]
[5 126]
[6 125]
[7 124]
[8 123]
[9 122]
[10 121]
[11 120]
[12 119]
[13 118]
[16 64]
[17 63]
[18 62]
[19 61]
[20 60]
[21 59]
[22 58]
[23 57]
[24 56]
[25 55]
[27 53]
[28 52]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[65 116]
[66 115]
[67 114]
[68 113]
[69 112]
[71 110]
[72 109]
[73 103]
[74 102]
[75 101]
[76 100]
[77 98]
[78 97]
[85 91]
[86 90]
[133 142]
[134 141]
[135 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
