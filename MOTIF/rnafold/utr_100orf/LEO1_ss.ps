%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:06:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUAAAGAGAGGCCGGGAGCUGCCCCUAACCGAGGCAGCAGCGGACGUGAGCGAUAAUGGCGGAUAUGGAGGAUCUCUUCGGGAGCGACGCCGACAGCGAAGCUGAGCGUAAAGAUUCUGAUUCUGGAUCUGACUCAGAUUCUGAUCAAGAGAAUG\
) } def
/len { sequence length } bind def

/coor [
[115.18504333 268.73480225]
[100.26012421 267.23587036]
[86.31242371 261.71667480]
[74.40306091 252.59707642]
[65.43807983 240.57089233]
[60.09953308 226.55303955]
[58.79356003 211.61000061]
[61.61951828 196.87861633]
[68.36241913 183.47961426]
[78.50926208 172.43237305]
[91.28369904 164.57926941]
[100.24858856 152.55302429]
[109.21347809 140.52676392]
[95.58035278 146.78280640]
[81.94723511 153.03883362]
[78.73384094 166.15339661]
[68.68852234 174.88166809]
[55.64167404 176.19337463]
[44.39928055 169.83135986]
[30.64371109 175.81335449]
[16.88814163 181.79536438]
[3.13257313 187.77735901]
[-10.62299538 193.75935364]
[-24.37856483 199.74136353]
[-26.74995804 214.98538208]
[-37.00352478 226.51220703]
[-51.86738586 230.64369202]
[-66.59854126 226.06149292]
[-76.49633026 214.22775269]
[-78.40240479 198.91859436]
[-71.70854187 185.01910400]
[-58.55073166 176.96455383]
[-43.12758255 177.32514954]
[-30.36056519 185.98579407]
[-16.60499573 180.00379944]
[-2.84942770 174.02178955]
[10.90614128 168.03979492]
[24.66170883 162.05778503]
[38.41727829 156.07579041]
[43.88191605 140.19726562]
[59.43447495 133.01806641]
[75.69119263 139.40571594]
[89.32431793 133.14967346]
[102.95744324 126.89364624]
[80.45502472 115.06086731]
[79.19310760 91.99564362]
[67.82119751 82.21404266]
[56.44929123 72.43244171]
[45.07738495 62.65083694]
[25.14932060 59.86645126]
[19.43443871 41.42824173]
[7.68028069 32.10945511]
[-7.60094547 35.42881775]
[-21.41654587 28.10329819]
[-27.24321556 13.59178829]
[-22.32978058 -1.25382316]
[-8.99621296 -9.42389107]
[6.46178246 -7.06076002]
[16.74541473 4.71977186]
[16.99906540 20.35529709]
[28.75322342 29.67408371]
[38.82608032 27.58811951]
[48.57723999 31.50076485]
[54.66483307 40.33323669]
[54.85898972 51.27893066]
[66.23089600 61.06053162]
[77.60279846 70.84213257]
[88.97470856 80.62374115]
[115.03028107 80.43149567]
[126.17076874 106.86333466]
[135.13261414 94.83480835]
[144.09445190 82.80628204]
[153.05627441 70.77774811]
[162.01811218 58.74922180]
[170.97994995 46.72069550]
[179.94178772 34.69216919]
[175.48336792 19.94670486]
[180.50375366 5.57140779]
[192.87979126 -2.98999500]
[207.74606323 -2.62657094]
[216.70790100 -14.65509892]
[213.85128784 -31.88654709]
[224.11630249 -45.59976196]
[240.78536987 -47.63253784]
[249.50474548 -59.83797073]
[258.22412109 -72.04340363]
[255.83084106 -87.43528748]
[264.84738159 -99.68912506]
[279.53594971 -101.87588501]
[288.25531006 -114.08132172]
[296.97467041 -126.28675079]
[295.76718140 -142.28430176]
[307.61929321 -153.09666443]
[323.43908691 -150.42950439]
[331.09097290 -136.32887268]
[324.70507812 -121.61153412]
[309.18011475 -117.56739044]
[300.46075439 -105.36195374]
[291.74139404 -93.15651703]
[294.43478394 -78.55236816]
[285.76599121 -66.05010986]
[270.42953491 -63.32403946]
[261.71017456 -51.11860657]
[252.99081421 -38.91316986]
[256.86816406 -26.59112167]
[252.86419678 -14.10476303]
[242.23277283 -6.10075903]
[228.73641968 -5.69326210]
[219.77459717 6.33526564]
[224.37596130 20.47617722]
[219.71310425 34.78427887]
[207.37496948 43.70749283]
[191.97032166 43.65400314]
[183.00848389 55.68253326]
[174.04664612 67.71105957]
[165.08480835 79.73958588]
[156.12297058 91.76811218]
[147.16113281 103.79664612]
[138.19929504 115.82517242]
[140.44200134 130.65657043]
[152.55958557 139.49760437]
[164.67716980 148.33865356]
[176.79476929 157.17970276]
[189.67243958 155.96626282]
[199.59288025 163.62554932]
[201.54728699 175.59866333]
[213.48554993 184.68040466]
[225.42381287 193.76213074]
[237.36207581 202.84387207]
[249.30033875 211.92559814]
[261.23858643 221.00733948]
[273.17684937 230.08906555]
[289.44372559 234.86666870]
[289.35595703 251.82038879]
[273.04049683 256.42929077]
[264.09512329 242.02732849]
[252.15687561 232.94560242]
[240.21859741 223.86386108]
[228.28033447 214.78213501]
[216.34207153 205.70039368]
[204.40380859 196.61866760]
[192.46554565 187.53692627]
[174.98497009 186.28816223]
[167.95372009 169.29728699]
[155.83613586 160.45623779]
[143.71853638 151.61520386]
[131.60095215 142.77415466]
[137.99652100 156.34237671]
[144.39207458 169.91061401]
[155.35369873 180.14988708]
[163.10110474 192.99426270]
[167.04486084 207.46653748]
[166.88497925 222.46568298]
[162.63357544 236.85058594]
[154.61412048 249.52688599]
[143.43672180 259.53015137]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 44]
[14 43]
[15 42]
[19 39]
[20 38]
[21 37]
[22 36]
[23 35]
[24 34]
[46 68]
[47 67]
[48 66]
[49 65]
[51 61]
[52 60]
[70 119]
[71 118]
[72 117]
[73 116]
[74 115]
[75 114]
[76 113]
[80 109]
[81 108]
[84 104]
[85 103]
[86 102]
[89 99]
[90 98]
[91 97]
[120 147]
[121 146]
[122 145]
[123 144]
[126 142]
[127 141]
[128 140]
[129 139]
[130 138]
[131 137]
[132 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
