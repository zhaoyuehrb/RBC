%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:30:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCAGCGCUCCAGGGCGGGCGCGGACGAGGCGGCCCUACUCCUGGCCGGGCUGGCCCUGCGGGAGCUGGAGCCCGGGUGCGGCUCUCCCGGUCGGGGGC\
) } def
/len { sequence length } bind def

/coor [
[85.67795563 111.45497894]
[87.02014923 106.37151337]
[89.71907043 102.49433136]
[93.30227661 100.13204956]
[81.82829285 90.47039795]
[70.35430145 80.80873871]
[58.88031387 71.14707947]
[43.34043884 68.17675781]
[38.58860779 54.06047821]
[27.11462212 44.39882278]
[15.64063358 34.73716736]
[4.01777697 25.25512123]
[-7.75113678 15.95497799]
[-19.52005005 6.65483427]
[-31.28896523 -2.64530873]
[-43.05788040 -11.94545174]
[-54.82679367 -21.24559593]
[-70.45153046 -23.73119164]
[-75.64007568 -37.69286346]
[-87.40898895 -46.99300766]
[-99.17790222 -56.29315186]
[-114.80263519 -58.77874756]
[-119.99118042 -72.74041748]
[-131.76010132 -82.04056549]
[-143.52900696 -91.34070587]
[-162.09040833 -88.32761383]
[-176.82226562 -99.50115204]
[-178.85490417 -117.56251526]
[-191.17924500 -126.11299896]
[-203.50357056 -134.66348267]
[-217.71481323 -128.65979004]
[-232.91198730 -131.31484985]
[-244.24574280 -141.78144836]
[-248.09951782 -156.71972656]
[-243.24357605 -171.36293030]
[-231.22744751 -181.03846741]
[-215.88542175 -182.65892029]
[-202.11308289 -175.70719910]
[-194.30514526 -162.40156555]
[-194.95309448 -146.98782349]
[-182.62875366 -138.43733215]
[-170.30441284 -129.88685608]
[-159.58312988 -134.35488892]
[-147.92584229 -132.99740601]
[-138.32203674 -126.04347229]
[-133.29266357 -115.17243195]
[-134.22886658 -103.10961914]
[-122.45995331 -93.80947876]
[-110.69104004 -84.50933075]
[-95.90809631 -82.68894196]
[-89.87776184 -68.06206512]
[-78.10884094 -58.76192093]
[-66.33992767 -49.46177673]
[-51.55698395 -47.64138794]
[-45.52664948 -33.01450729]
[-33.75773621 -23.71436501]
[-21.98882103 -14.41422272]
[-10.21990776 -5.11407948]
[1.54900634 4.18606377]
[13.31792068 13.48620701]
[20.64664459 15.19363213]
[25.30228996 23.26317978]
[36.77627945 32.92483521]
[48.25026703 42.58649063]
[62.96944427 44.86574554]
[68.54196930 59.67309570]
[80.01596069 69.33474731]
[91.48994446 78.99640656]
[102.96393585 88.65806580]
[116.66078186 94.77331543]
[131.51408386 96.86605072]
[146.36738586 98.95877838]
[161.22067261 101.05150604]
[170.33676147 99.13064575]
[176.50056458 103.44725037]
[191.28158569 106.00090027]
[206.47706604 99.83410645]
[219.24739075 110.12249756]
[216.45555115 126.28224945]
[200.97354126 131.68960571]
[188.72793579 120.78192902]
[173.94689941 118.22827911]
[159.12794495 115.90480804]
[144.27465820 113.81207275]
[129.42135620 111.71934509]
[114.56805420 109.62661743]
[106.01757050 121.95095062]
[113.17836761 135.13134766]
[120.33916473 148.31175232]
[127.49996185 161.49215698]
[142.41360474 167.40509033]
[146.95118713 182.79306030]
[137.63183594 195.85176086]
[121.60459137 196.56364441]
[111.16416168 184.38264465]
[114.31956482 168.65295410]
[107.15876770 155.47254944]
[99.99796295 142.29214478]
[92.83716583 129.11175537]
[88.42334747 123.39192963]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 69]
[5 68]
[6 67]
[7 66]
[9 64]
[10 63]
[11 62]
[12 60]
[13 59]
[14 58]
[15 57]
[16 56]
[17 55]
[19 53]
[20 52]
[21 51]
[23 49]
[24 48]
[25 47]
[28 42]
[29 41]
[30 40]
[70 86]
[71 85]
[72 84]
[73 83]
[75 82]
[76 81]
[87 99]
[88 98]
[89 97]
[90 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
