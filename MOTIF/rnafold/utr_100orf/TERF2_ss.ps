%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAACGCUGUUUCUAUCAUGGCCGCGGGAGCCGGGACGGCGGGCCCCGCUUCCGGCCCGGGCGUCGUGCGUGACCCAGCGGCGUCACAGCCGAGGAAGCGGCCCGGCCGGGAGGGCG\
) } def
/len { sequence length } bind def

/coor [
[-61.29051971 176.62661743]
[-75.40102386 181.71519470]
[-82.17810059 195.74049377]
[-96.56064606 200.70002747]
[-109.88986206 194.15269470]
[-124.00036621 199.24127197]
[-138.11087036 204.32984924]
[-152.22137451 209.41844177]
[-166.33187866 214.50701904]
[-180.44238281 219.59561157]
[-194.55288696 224.68418884]
[-208.66339111 229.77276611]
[-222.77389526 234.86135864]
[-210.13142395 242.93402100]
[-206.66069031 257.52697754]
[-214.31510925 270.42697144]
[-228.78659058 274.37362671]
[-241.93029785 267.14566040]
[-246.34863281 252.81115723]
[-239.55465698 239.43765259]
[-254.29492188 242.21697998]
[-269.03518677 244.99630737]
[-276.53491211 258.71810913]
[-291.11898804 264.36071777]
[-305.90124512 259.25982666]
[-313.90194702 245.82394409]
[-311.34341431 230.39709473]
[-299.43371582 220.26333618]
[-283.79623413 220.20755005]
[-271.81451416 230.25605774]
[-257.07424927 227.47671509]
[-242.33398438 224.69738770]
[-227.86247253 220.75085449]
[-213.75196838 215.66226196]
[-199.64146423 210.57368469]
[-185.53096008 205.48510742]
[-171.42045593 200.39651489]
[-157.30995178 195.30793762]
[-143.19944763 190.21934509]
[-129.08894348 185.13076782]
[-114.97843933 180.04219055]
[-108.89596558 166.49452209]
[-94.65839386 161.13296509]
[-80.48960876 167.60469055]
[-66.37910461 162.51611328]
[-52.48300934 156.86822510]
[-38.82348633 150.67004395]
[-33.97063446 144.96781921]
[-24.71684837 144.49407959]
[-10.89716911 138.66171265]
[2.92251062 132.82934570]
[16.74218941 126.99698639]
[30.56187057 121.16462708]
[44.38154984 115.33226013]
[58.20122910 109.49990082]
[72.02091217 103.66754150]
[85.84059143 97.83517456]
[94.43050385 86.80317688]
[108.32704926 88.34514618]
[122.14672852 82.51277924]
[131.85253906 70.01847076]
[146.58677673 72.19827271]
[160.40646362 66.36590576]
[174.22613525 60.53354645]
[187.62730408 53.79494858]
[200.55061340 46.17996216]
[206.44955444 39.03436279]
[213.92088318 38.53954315]
[227.04232788 31.27128029]
[240.06585693 23.82899475]
[252.98916626 16.21400833]
[265.91247559 8.59902096]
[278.83578491 0.98403436]
[291.75909424 -6.63095284]
[304.57989502 -14.41729259]
[317.29592896 -22.37360573]
[327.51617432 -35.90070343]
[343.34390259 -29.82451630]
[341.88671875 -12.93330669]
[325.25222778 -9.65758991]
[312.53622437 -1.70127642]
[308.48312378 4.59459686]
[299.37408447 6.29235840]
[286.45077515 13.90734577]
[273.52746582 21.52233315]
[260.60415649 29.13731956]
[247.68084717 36.75230789]
[243.46159363 42.93805313]
[234.31059265 44.39272690]
[221.18913269 51.66098785]
[208.16560364 59.10327530]
[195.24229431 66.71826172]
[208.56732178 73.60619354]
[211.75688171 88.26316071]
[202.49911499 100.06542969]
[187.50425720 100.45843506]
[177.64097595 89.15731049]
[180.05850220 74.35322571]
[166.23881531 80.18558502]
[152.41914368 86.01795197]
[143.70179749 98.09508514]
[127.97908783 96.33245850]
[114.15940857 102.16482544]
[105.56949615 113.19682312]
[91.67295074 111.65485382]
[77.85327148 117.48722076]
[64.03359222 123.31958008]
[50.21391296 129.15194702]
[36.39423370 134.98429871]
[22.57455254 140.81666565]
[8.75487328 146.64903259]
[-5.06480646 152.48139954]
[-18.88448524 158.31375122]
[-32.62530518 164.32955933]
[-46.28482437 170.52774048]
[-49.46100998 174.99287415]
[-53.64376450 177.45812988]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[10 36]
[11 35]
[12 34]
[13 33]
[20 32]
[21 31]
[22 30]
[46 115]
[47 114]
[49 113]
[50 112]
[51 111]
[52 110]
[53 109]
[54 108]
[55 107]
[56 106]
[57 105]
[59 103]
[60 102]
[62 100]
[63 99]
[64 98]
[65 92]
[66 91]
[68 90]
[69 89]
[70 87]
[71 86]
[72 85]
[73 84]
[74 83]
[75 81]
[76 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
