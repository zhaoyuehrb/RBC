%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUUUGCGCACGCGCACGAACGCACGGCCGCGCAGCAUCUGUCUUGCUGGAAGCUUUUUCCUAGAGGUUGAGCGGUUUGCACAAUGUCGGAAAUGGCUGAGUUGUCCGAGCUGUAUGAAGAGAGCAGUGACCUGCAGAUGGAUGUGAUGCCUGGCGAGGGUGACCUUCCGCAGAUGGAGGUAG\
) } def
/len { sequence length } bind def

/coor [
[141.64401245 228.82659912]
[136.16955566 214.86126709]
[130.69508362 200.89595032]
[125.22061157 186.93063354]
[119.74613953 172.96531677]
[114.27167511 158.99998474]
[108.79720306 145.03466797]
[103.32273102 131.06935120]
[88.46093750 129.03782654]
[79.43936920 141.02160645]
[76.76905823 149.78147888]
[70.16144562 153.13055420]
[60.93767929 164.95942688]
[58.55327606 180.59992981]
[44.62548447 185.87873840]
[35.40171432 197.70761108]
[37.59106445 213.35951233]
[28.00503731 225.92469788]
[12.33085442 227.94844055]
[-0.13226952 218.23010254]
[-1.99018383 202.53540039]
[7.85937881 190.17572021]
[23.57284737 188.48384094]
[32.79661560 176.65496826]
[34.52127457 161.86054993]
[49.10881042 155.73565674]
[58.33257675 143.90679932]
[67.45557404 132.00003052]
[76.47714996 120.01624298]
[73.82982635 93.55518341]
[91.40158081 78.64868164]
[90.63773346 63.66814041]
[89.87389374 48.68759918]
[78.42655182 38.12369919]
[77.86531067 22.92042160]
[88.00691986 12.07222748]
[87.24308014 -2.90831161]
[86.47924042 -17.88885117]
[85.71540070 -32.86938858]
[84.95155334 -47.84992981]
[84.18771362 -62.83046722]
[83.42387390 -77.81100464]
[82.66003418 -92.79154205]
[81.89619446 -107.77208710]
[81.13235474 -122.75262451]
[77.56309509 -131.18626404]
[80.48492432 -137.99359131]
[79.97557831 -152.98495483]
[71.77413177 -166.51443481]
[79.07479095 -179.49710083]
[78.56544495 -194.48844910]
[67.29912567 -205.24520874]
[66.99613190 -220.45582581]
[77.32049561 -231.13023376]
[76.81114197 -246.12159729]
[76.30179596 -261.11294556]
[75.66517639 -276.09942627]
[74.90133667 -291.07995605]
[74.13749695 -306.06051636]
[73.37365723 -321.04104614]
[72.60980988 -336.02157593]
[62.02758789 -340.52969360]
[53.93618393 -348.63253784]
[49.48318481 -359.12649536]
[49.27973938 -370.47296143]
[53.31694794 -381.02383423]
[60.97274399 -389.26095581]
[71.10741425 -394.01452637]
[71.10741425 -409.01452637]
[68.47103882 -413.57257080]
[67.91782379 -418.21972656]
[69.12938690 -422.14242554]
[71.50891876 -424.77349854]
[72.27275848 -439.75405884]
[73.03660583 -454.73458862]
[73.80044556 -469.71511841]
[74.56428528 -484.69567871]
[75.32812500 -499.67620850]
[76.09196472 -514.65673828]
[76.85580444 -529.63726807]
[69.83128357 -543.81353760]
[78.20665741 -556.13031006]
[78.97049713 -571.11083984]
[79.73433685 -586.09136963]
[80.49817657 -601.07189941]
[81.26201630 -616.05249023]
[78.56908417 -624.80541992]
[82.16815948 -631.28027344]
[83.18627167 -646.24566650]
[84.20437622 -661.21105957]
[85.22248840 -676.17645264]
[74.64392090 -687.91827393]
[75.54985809 -703.69653320]
[87.40282440 -714.15039062]
[103.17066193 -713.07769775]
[113.49860382 -701.11486816]
[112.25925446 -685.35925293]
[100.18789673 -675.15838623]
[99.16978455 -660.19293213]
[98.15167999 -645.22753906]
[97.13356781 -630.26214600]
[96.24255371 -615.28863525]
[95.47871399 -600.30810547]
[94.71487427 -585.32757568]
[93.95103455 -570.34698486]
[93.18719482 -555.36645508]
[100.26634979 -542.26171875]
[91.83634186 -528.87341309]
[91.07250214 -513.89288330]
[90.30866241 -498.91235352]
[89.54482269 -483.93182373]
[88.78098297 -468.95129395]
[88.01714325 -453.97073364]
[87.25330353 -438.99020386]
[86.48946381 -424.00967407]
[86.10741425 -409.01452637]
[86.10741425 -394.01452637]
[101.82855988 -383.95053101]
[108.38516998 -366.31362915]
[102.97045135 -348.13708496]
[87.59035492 -336.78543091]
[88.35419464 -321.80487061]
[89.11803436 -306.82434082]
[89.88187408 -291.84381104]
[90.64571381 -276.86325073]
[94.13432312 -270.32824707]
[91.29314423 -261.62228394]
[91.80249023 -246.63093567]
[92.31184387 -231.63958740]
[103.33690643 -221.69055176]
[104.06701660 -206.49444580]
[93.55679321 -194.99778748]
[94.06613922 -180.00643921]
[102.23115540 -167.54924011]
[94.96692657 -153.49429321]
[95.47627258 -138.50294495]
[96.11289215 -123.51646423]
[96.87673187 -108.53592682]
[97.64057159 -93.55538940]
[98.40441132 -78.57484436]
[99.16825867 -63.59430695]
[99.93209839 -48.61376953]
[100.69593811 -33.63323212]
[101.45977783 -18.65269089]
[102.22361755 -3.67215228]
[102.98745728 11.30838680]
[114.17987823 21.06878281]
[115.16792297 36.25029755]
[104.85443115 47.92375946]
[105.61827850 62.90429688]
[106.38211823 77.88483429]
[118.73096466 83.46537018]
[126.62245178 95.79778290]
[126.52140045 111.52993774]
[117.28805542 125.59487915]
[122.76251984 139.56019592]
[128.23699951 153.52551270]
[133.71145630 167.49084473]
[139.18592834 181.45616150]
[144.66040039 195.42147827]
[150.13487244 209.38679504]
[155.60934448 223.35212708]
[171.91764832 235.17578125]
[168.25854492 254.14909363]
[174.20408630 267.92047119]
[180.14961243 281.69183350]
[186.09513855 295.46319580]
[192.38403320 302.12020874]
[192.02249146 309.51925659]
[197.73330688 323.38961792]
[212.41627502 329.23651123]
[218.58747864 343.78616333]
[212.58566284 358.40646362]
[197.97160339 364.42349243]
[183.41554260 358.26745605]
[177.55335999 343.59057617]
[183.86296082 329.10043335]
[178.15214539 315.23010254]
[172.32376099 301.40872192]
[166.37823486 287.63735962]
[160.43270874 273.86599731]
[154.48718262 260.09460449]
[144.66342163 257.18286133]
[137.93226624 249.16854858]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 162]
[2 161]
[3 160]
[4 159]
[5 158]
[6 157]
[7 156]
[8 155]
[9 29]
[10 28]
[12 27]
[13 26]
[15 24]
[16 23]
[31 151]
[32 150]
[33 149]
[36 146]
[37 145]
[38 144]
[39 143]
[40 142]
[41 141]
[42 140]
[43 139]
[44 138]
[45 137]
[47 136]
[48 135]
[50 133]
[51 132]
[54 129]
[55 128]
[56 127]
[57 125]
[58 124]
[59 123]
[60 122]
[61 121]
[68 117]
[69 116]
[73 115]
[74 114]
[75 113]
[76 112]
[77 111]
[78 110]
[79 109]
[80 108]
[82 106]
[83 105]
[84 104]
[85 103]
[86 102]
[88 101]
[89 100]
[90 99]
[91 98]
[164 182]
[165 181]
[166 180]
[167 179]
[169 178]
[170 177]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
