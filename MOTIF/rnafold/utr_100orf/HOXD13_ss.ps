%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:10:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAAAGGAGAGGAGGGAGGAGGCGCGCCGCGCCAUGGUGUCCUGCGCGGGGCCAGGGCCAGGGCCGGGGCCGGGCCAGGCCGGGCCAUGAGCCGCGCCGGGAGCUGGGACAUGGACGGGCUGCGGGCAGACGGCGGGGGCGCCGGUGGCGCCCCGGCCUCUUCCUCCUCCUCAUCGGUGGCGGCGG\
) } def
/len { sequence length } bind def

/coor [
[80.74177551 401.77133179]
[72.33116150 389.21136475]
[67.99791718 374.72982788]
[68.12735748 359.61447144]
[72.70796204 345.20925903]
[81.33244324 332.79516602]
[93.23390198 323.47601318]
[107.35408020 318.08047485]
[106.35218811 303.11395264]
[105.22528839 288.15634155]
[103.97344971 273.20867920]
[102.72161102 258.26101685]
[101.46977234 243.31333923]
[100.21793365 228.36566162]
[98.96610260 213.41798401]
[97.71426392 198.47032166]
[94.01562500 192.05441284]
[96.56852722 183.26275635]
[95.56663513 168.29626465]
[94.56475067 153.32975769]
[93.56285858 138.36325073]
[92.56097412 123.39675140]
[91.55908203 108.43024445]
[86.28510284 94.38797760]
[77.18686676 82.46229553]
[68.08862305 70.53660583]
[58.89105606 58.68735504]
[49.59480667 46.91536713]
[40.29855728 35.14337540]
[32.50788879 30.33547783]
[30.94729614 23.09611702]
[21.84905434 11.17043209]
[12.65148735 -0.67882013]
[3.35523915 -12.45081043]
[-5.94100904 -24.22280121]
[-15.23725796 -35.99479294]
[-24.53350639 -47.76678467]
[-44.41490555 -45.88996887]
[-61.28847504 -56.29924393]
[-68.42733002 -74.64117432]
[-63.10844803 -93.44170380]
[-73.17021942 -104.56648254]
[-83.23198700 -115.69126892]
[-93.29376221 -126.81604767]
[-103.35552979 -137.94082642]
[-111.44993591 -142.21763611]
[-113.49057770 -149.33659363]
[-123.36505127 -160.62794495]
[-133.23953247 -171.91931152]
[-148.14846802 -177.21403503]
[-150.70249939 -191.88803101]
[-160.57696533 -203.17939758]
[-170.45144653 -214.47074890]
[-180.41990662 -225.67921448]
[-190.48167419 -236.80398560]
[-205.47700500 -241.84886169]
[-208.27587891 -256.47811890]
[-218.33766174 -267.60290527]
[-228.39942932 -278.72769165]
[-238.46119690 -289.85247803]
[-251.29309082 -291.28118896]
[-259.44458008 -300.77093506]
[-258.95275879 -312.86996460]
[-268.82720947 -324.16131592]
[-278.70169067 -335.45266724]
[-288.57617188 -346.74401855]
[-301.38238525 -348.38696289]
[-309.37417603 -358.01159668]
[-308.68023682 -370.10070801]
[-318.36465454 -381.55548096]
[-328.04907227 -393.01028442]
[-342.89254761 -401.20217896]
[-339.12988281 -417.73330688]
[-322.20318604 -418.69396973]
[-316.59429932 -402.69470215]
[-306.90988159 -391.23989868]
[-297.22546387 -379.78512573]
[-280.42190552 -374.75415039]
[-277.28482056 -356.61849976]
[-267.41033936 -345.32714844]
[-257.53585815 -334.03579712]
[-247.66139221 -322.74441528]
[-230.77612305 -317.99493408]
[-227.33641052 -299.91424561]
[-217.27464294 -288.78945923]
[-207.21287537 -277.66467285]
[-197.15110779 -266.53988647]
[-182.87545776 -262.29074097]
[-179.35690308 -246.86576843]
[-169.29513550 -235.74098206]
[-162.46298218 -232.88345337]
[-159.16007996 -224.34523010]
[-149.28561401 -213.05386353]
[-139.41113281 -201.76251221]
[-125.20848846 -197.27540588]
[-121.94816589 -181.79377747]
[-112.07369232 -170.50242615]
[-102.19921875 -159.21105957]
[-92.23075104 -148.00259399]
[-82.16898346 -136.87782288]
[-72.10720825 -125.75303650]
[-62.04543686 -114.62825775]
[-51.98366547 -103.50347137]
[-42.15335083 -106.85459137]
[-31.72995186 -106.73361969]
[-21.90817642 -103.12886047]
[-13.82229519 -96.42940521]
[-8.41515350 -87.38327789]
[-6.32827568 -77.01394653]
[-7.82583427 -66.50457764]
[-12.76151562 -57.06303024]
[-3.46526670 -45.29104233]
[5.83098173 -33.51905060]
[15.12722969 -21.74705887]
[24.42347908 -9.97506809]
[31.04950905 -6.66757679]
[33.77473831 2.07218933]
[42.87298203 13.99787521]
[52.07054901 25.84712791]
[61.36679840 37.61911774]
[70.66304779 49.39110947]
[77.28907776 52.69860077]
[80.01430511 61.43836594]
[89.11254883 73.36405182]
[98.21079254 85.28974152]
[95.35197449 70.56468201]
[102.10497284 57.17076874]
[115.64376068 50.71311951]
[130.30258179 53.89416504]
[139.94694519 65.38268280]
[140.54086304 80.37092590]
[131.83576965 92.58654022]
[117.47335052 96.91745758]
[132.26440430 99.41239929]
[147.05545044 101.90734100]
[161.95033264 96.57319641]
[173.21337891 106.31963348]
[188.00444031 108.81457520]
[202.79548645 111.30951691]
[217.58654785 113.80445862]
[232.37759399 116.29939270]
[247.16865540 118.79433441]
[261.95971680 121.28927612]
[276.75076294 123.78421783]
[293.37493896 120.45661163]
[301.17453003 135.50994873]
[288.86862183 147.17190552]
[274.25582886 138.57527161]
[259.46475220 136.08032227]
[244.67370605 133.58538818]
[229.88265991 131.09045410]
[215.09159851 128.59550476]
[200.30055237 126.10057068]
[185.50949097 123.60562897]
[170.71844482 121.11068726]
[156.88151550 126.62329102]
[144.56051636 116.69839478]
[129.76945496 114.20345306]
[114.97840881 111.70851135]
[110.50596619 109.92044830]
[106.52558136 107.42835236]
[107.52747345 122.39485931]
[108.52936554 137.36135864]
[109.53125000 152.32786560]
[110.53314209 167.29437256]
[111.53503418 182.26086426]
[112.66193390 197.21847534]
[113.91377258 212.16615295]
[115.16561127 227.11383057]
[116.41744232 242.06149292]
[117.66928101 257.00915527]
[118.92111969 271.95684814]
[120.17295837 286.90451050]
[124.01428986 295.21441650]
[121.31869507 302.11206055]
[122.32057953 317.07858276]
[137.03392029 320.54394531]
[150.07131958 328.19366455]
[160.27348328 339.34744263]
[166.73324585 353.01358032]
[168.87620544 367.97683716]
[166.51182556 382.90670776]
[159.85034180 396.47564697]
[149.48406982 407.47708130]
[136.33479309 414.93283081]
[121.57173157 418.17987061]
[106.50759888 416.92950439]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 176]
[9 175]
[10 173]
[11 172]
[12 171]
[13 170]
[14 169]
[15 168]
[16 167]
[18 166]
[19 165]
[20 164]
[21 163]
[22 162]
[23 161]
[24 125]
[25 124]
[26 123]
[27 121]
[28 120]
[29 119]
[31 118]
[32 117]
[33 115]
[34 114]
[35 113]
[36 112]
[37 111]
[41 103]
[42 102]
[43 101]
[44 100]
[45 99]
[47 98]
[48 97]
[49 96]
[51 94]
[52 93]
[53 92]
[54 90]
[55 89]
[57 87]
[58 86]
[59 85]
[60 84]
[63 82]
[64 81]
[65 80]
[66 79]
[69 77]
[70 76]
[71 75]
[133 159]
[134 158]
[135 157]
[137 155]
[138 154]
[139 153]
[140 152]
[141 151]
[142 150]
[143 149]
[144 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
