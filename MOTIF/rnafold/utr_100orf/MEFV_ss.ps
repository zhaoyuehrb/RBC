%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGCCAGACAGCUGGCUCGAGCCUCUCCUGCUCAGCACCAUGGCUAAGACCCCUAGUGACCAUCUGCUGUCCACCCUGGAGGAGCUGGUGCCCUAUGACUUCGAGAAGUUCAAGUUCAAGCUGCAGAACACCAGUGUGC\
) } def
/len { sequence length } bind def

/coor [
[100.28141022 116.81168365]
[93.81620789 130.34686279]
[92.92476654 139.52084351]
[87.05322266 144.10913086]
[80.28807068 157.49690247]
[73.52291870 170.88468933]
[66.75776672 184.27247620]
[59.99261093 197.66026306]
[61.44535446 213.99493408]
[47.87179184 223.19767761]
[33.23524475 215.80149841]
[32.59253693 199.41494751]
[46.60482788 190.89511108]
[53.36997986 177.50732422]
[60.13513184 164.11953735]
[66.90028381 150.73175049]
[73.66543579 137.34397888]
[80.28102875 123.88166046]
[86.74623108 110.34648132]
[88.57980347 95.45896912]
[85.59201050 80.75953674]
[82.60422516 66.06011200]
[79.61643219 51.36069107]
[69.28536987 39.37821198]
[74.33253479 25.36480904]
[71.34474945 10.66538429]
[68.35695648 -4.03404140]
[65.36917114 -18.73346710]
[50.89806747 -23.68669701]
[40.91512680 -35.14260101]
[38.02589417 -49.95876694]
[42.90802765 -64.13694763]
[54.15567398 -73.90198517]
[51.16788483 -88.60140991]
[48.18009186 -103.30083466]
[44.54045486 -117.85257721]
[40.25619888 -132.22773743]
[35.97193909 -146.60289001]
[31.68768311 -160.97804260]
[27.40342522 -175.35319519]
[23.11916733 -189.72836304]
[18.49600601 -194.63624573]
[17.29002190 -200.29426575]
[18.97965622 -204.84001160]
[15.34001923 -219.39175415]
[11.70038223 -233.94349670]
[8.42821598 -237.07283020]
[6.56157255 -240.72612000]
[6.08915520 -244.37998962]
[6.82527924 -247.57173157]
[8.44639874 -249.95254517]
[6.11638832 -264.77047729]
[-3.67063308 -277.20126343]
[1.99577320 -290.97592163]
[-0.33423749 -305.79385376]
[-2.66424823 -320.61178589]
[-4.99425888 -335.42971802]
[-19.51348305 -351.11810303]
[-11.59209919 -370.12869263]
[-14.90663528 -384.75790405]
[-18.22117233 -399.38711548]
[-32.53241730 -405.38442993]
[-40.55652237 -418.66574097]
[-39.20805359 -434.12411499]
[-29.00552559 -445.81549072]
[-13.87201977 -449.24429321]
[0.37332314 -443.09207153]
[8.25287819 -429.72448730]
[6.73679590 -414.28164673]
[-3.59195948 -402.70162964]
[-0.27742341 -388.07241821]
[3.03711271 -373.44320679]
[11.34430504 -369.93072510]
[17.15500641 -362.85272217]
[19.03842735 -353.74948120]
[16.43717003 -344.68075562]
[9.82367134 -337.75973511]
[12.15368176 -322.94180298]
[14.48369217 -308.12387085]
[16.81370354 -293.30593872]
[26.43406677 -281.93502808]
[20.93431854 -267.10049438]
[23.26432991 -252.28254700]
[26.25211906 -237.58312988]
[29.89175606 -223.03138733]
[33.53139114 -208.47966003]
[37.49432373 -194.01261902]
[41.77857971 -179.63746643]
[46.06283951 -165.26229858]
[50.34709549 -150.88714600]
[54.63135529 -136.51199341]
[58.91561127 -122.13683319]
[61.40458298 -120.68724823]
[63.44450760 -118.12447357]
[64.59309387 -114.62380219]
[64.48335266 -110.52272034]
[62.87952042 -106.28862762]
[65.86730957 -91.58920288]
[68.85509491 -76.88977814]
[83.02240753 -72.29055023]
[93.05215454 -61.14334488]
[96.17625427 -46.37491989]
[91.45772552 -31.93081093]
[80.06859589 -21.72125626]
[83.05638123 -7.02183104]
[86.04417419 7.67759466]
[89.03195953 22.37701988]
[99.14931488 33.30809784]
[94.31585693 48.37289810]
[97.30364990 63.07232666]
[100.29143524 77.77175140]
[103.27922821 92.47117615]
[113.45860291 86.89527893]
[127.21807861 88.99802399]
[139.93008423 100.15198517]
[150.94209290 110.33705902]
[161.95408630 120.52214050]
[172.96609497 130.70721436]
[188.15904236 127.55225372]
[202.29096985 133.96070862]
[209.92785645 147.46839905]
[208.13316345 162.88133240]
[197.59700012 174.27293396]
[182.37071228 177.26289368]
[168.30912781 170.70152283]
[160.81922913 157.11178589]
[162.78100586 141.71922302]
[151.76901245 131.53414917]
[140.75700378 121.34906006]
[129.74501038 111.16398621]
[122.37911224 112.57591248]
[127.16006470 126.79359436]
[131.94102478 141.01127625]
[141.40063477 152.65238953]
[139.26094055 167.49899292]
[126.89913177 175.99522400]
[112.27176666 172.67253113]
[104.79360962 159.66957092]
[109.27803040 145.35540771]
[108.46266937 130.37757874]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[4 17]
[5 16]
[6 15]
[7 14]
[8 13]
[20 112]
[21 111]
[22 110]
[23 109]
[25 107]
[26 106]
[27 105]
[28 104]
[33 99]
[34 98]
[35 97]
[36 92]
[37 91]
[38 90]
[39 89]
[40 88]
[41 87]
[44 86]
[45 85]
[46 84]
[51 83]
[52 82]
[54 80]
[55 79]
[56 78]
[57 77]
[59 72]
[60 71]
[61 70]
[115 130]
[116 129]
[117 128]
[118 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
