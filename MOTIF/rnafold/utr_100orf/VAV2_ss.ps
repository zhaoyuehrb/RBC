%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:12:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUGGCUCGAGCACUGCCCUGAGCCGGUCGGGCCCGCGGGCGCCAUGGAGCAGUGGCGGCAGUGCGGCCGCUGGCUCAUCGAUUGCAAGGUCCUGCCGCCCAACCACCGGGUGGUGUGGCCCUCGGCCGUGGUCUUCGACCUGG\
) } def
/len { sequence length } bind def

/coor [
[20.71577835 369.50234985]
[9.06361675 378.94836426]
[-5.82821894 380.74649048]
[-19.39384270 374.34539795]
[-27.47398567 361.70770264]
[-27.59092712 346.70700073]
[-37.31435394 358.12869263]
[-47.03778076 369.55038452]
[-56.76120377 380.97207642]
[-66.48463440 392.39376831]
[-76.20805359 403.81546021]
[-79.07846069 421.97131348]
[-95.77547455 427.27380371]
[-105.25260162 438.90069580]
[-110.57323456 454.99810791]
[-127.51446533 454.34161377]
[-131.57344055 437.88073730]
[-116.87947083 429.42355347]
[-107.40234375 417.79669189]
[-108.30674744 405.68954468]
[-100.44493866 395.91659546]
[-87.62974548 394.09201050]
[-77.90631866 382.67031860]
[-68.18289185 371.24865723]
[-58.45946884 359.82696533]
[-48.73604202 348.40527344]
[-39.01261520 336.98358154]
[-30.43086624 324.68099976]
[-23.07010269 311.61120605]
[-15.70934010 298.54144287]
[-8.34857655 285.47164917]
[-0.98781359 272.40185547]
[6.23287249 259.25418091]
[13.31265736 246.03009033]
[12.49849415 231.15774536]
[25.83322906 222.64332581]
[32.91301346 209.41923523]
[39.99279785 196.19514465]
[47.07258224 182.97105408]
[54.15236664 169.74694824]
[61.23215103 156.52285767]
[60.41798782 141.65052795]
[73.75272369 133.13609314]
[80.83251190 119.91200256]
[73.82477570 111.92789459]
[70.14709473 101.51516724]
[70.61743927 90.06172943]
[75.47747040 79.21780396]
[84.31543732 70.65827942]
[96.08602905 65.82620239]
[90.45702362 51.92245102]
[84.82801819 38.01869965]
[79.19901276 24.11494637]
[73.42176056 10.27213764]
[67.49691772 -3.50814795]
[61.57208252 -17.28843307]
[55.64724350 -31.06871986]
[49.72240448 -44.84900665]
[43.79756165 -58.62929153]
[31.23849487 -68.25115967]
[33.31950760 -82.99967957]
[27.39466667 -96.77996063]
[15.58369350 -108.94290924]
[24.00170326 -123.65933990]
[40.47335052 -119.64422607]
[41.17495346 -102.70480347]
[47.09979248 -88.92451477]
[59.23507690 -80.28829956]
[57.57785034 -64.55413055]
[63.50268936 -50.77384567]
[69.42752838 -36.99356079]
[75.35236359 -23.21327400]
[81.27720642 -9.43298721]
[87.20204926 4.34729862]
[92.77302551 9.28486061]
[93.10276031 18.48594093]
[98.73176575 32.38969421]
[104.36077118 46.29344559]
[109.98977661 60.19719696]
[111.71567535 45.29681778]
[108.99270630 30.54603958]
[113.76035309 16.32388878]
[124.82376099 6.19467211]
[139.41026306 2.69693685]
[153.86422729 6.70727348]
[164.56326294 17.22062683]
[168.82601929 31.60217476]
[165.58416748 46.24766541]
[155.65017700 57.48669815]
[141.51651001 62.50233459]
[129.47535706 71.44719696]
[144.33085632 69.37017822]
[159.18635559 67.29316711]
[174.04187012 65.21615601]
[186.63772583 55.64250946]
[200.31376648 61.54296112]
[215.16926575 59.46594620]
[230.02478027 57.38893127]
[244.88027954 55.31191635]
[259.73577881 53.23490524]
[274.59127808 51.15789032]
[289.44680786 49.08087540]
[304.30230713 47.00386047]
[312.44448853 33.65324402]
[327.27978516 28.70878410]
[341.80343628 34.50510406]
[349.15783691 48.30535889]
[345.87042236 63.59349060]
[333.49343872 73.15090942]
[317.87091064 72.46489716]
[306.37930298 61.85936356]
[291.52380371 63.93637848]
[276.66830444 66.01339722]
[261.81280518 68.09040833]
[246.95729065 70.16741943]
[232.10179138 72.24443817]
[217.24629211 74.32144928]
[202.39077759 76.39846802]
[190.85748291 85.82354736]
[176.11888123 80.07165527]
[161.26336670 82.14867401]
[146.40786743 84.22568512]
[131.55236816 86.30270386]
[130.48403931 110.19692993]
[114.73892975 126.00491333]
[94.05660248 126.99179077]
[86.97681427 140.21588135]
[87.28458405 156.03410339]
[74.45624542 163.60264587]
[67.37645721 176.82673645]
[60.29667664 190.05082703]
[53.21689224 203.27491760]
[46.13710785 216.49902344]
[39.05732346 229.72311401]
[39.36509323 245.54132080]
[26.53675079 253.10987854]
[19.45696640 266.33395386]
[18.14778137 275.44738770]
[12.08196735 279.76263428]
[4.72120380 292.83242798]
[-2.63955951 305.90219116]
[-10.00032330 318.97198486]
[-17.36108589 332.04174805]
[-3.24421692 326.97085571]
[11.40660191 330.18853760]
[22.09938049 340.70825195]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 27]
[7 26]
[8 25]
[9 24]
[10 23]
[11 22]
[13 19]
[14 18]
[28 143]
[29 142]
[30 141]
[31 140]
[32 139]
[33 137]
[34 136]
[36 134]
[37 133]
[38 132]
[39 131]
[40 130]
[41 129]
[43 127]
[44 126]
[50 79]
[51 78]
[52 77]
[53 76]
[54 74]
[55 73]
[56 72]
[57 71]
[58 70]
[59 69]
[61 67]
[62 66]
[91 123]
[92 122]
[93 121]
[94 120]
[96 118]
[97 117]
[98 116]
[99 115]
[100 114]
[101 113]
[102 112]
[103 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
