%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:39:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUCGAGAGGCGGUGCACACCCGUCGCGCAUGCGCAAACACAGCUGUCGGAAGGUGGCGAGCCUGAGGCGAACAAUGGCGGAGCUGGGCGAAGCCGAUGAAGCGGAGUUGCAGCGCCUGGUGGCCGCCG\
) } def
/len { sequence length } bind def

/coor [
[166.72442627 146.05792236]
[153.20191956 133.78263855]
[147.66732788 116.29018402]
[132.90930176 113.60677338]
[118.15127563 110.92336273]
[108.61120605 119.35551453]
[95.96054840 120.79595184]
[84.76905060 114.72435760]
[79.07935333 103.33395386]
[64.38991547 100.29743195]
[49.70048141 97.26090240]
[35.01104736 94.22438049]
[23.76130104 100.66514587]
[11.53956413 97.76609802]
[4.82613468 87.62882233]
[-9.78626251 84.24092865]
[-24.39866066 80.85302734]
[-33.56770325 81.96524048]
[-39.31880569 77.20472717]
[-53.84576416 73.46741486]
[-68.37271881 69.73009491]
[-82.89967346 65.99277496]
[-96.39613342 73.76988983]
[-111.07528687 69.77278137]
[-118.40640259 56.85804367]
[-132.93336487 53.12072754]
[-147.46031189 49.38341141]
[-156.65339661 50.27543640]
[-162.28869629 45.37838364]
[-176.72184753 41.29379654]
[-191.15501404 37.20920563]
[-200.36683655 37.88052750]
[-205.88308716 32.84975433]
[-220.21414185 28.42024422]
[-231.94886780 38.43522644]
[-247.23831177 40.49345016]
[-261.20367432 33.93814468]
[-269.38867188 20.86108589]
[-269.18148804 5.43511438]
[-260.64822388 -7.41739893]
[-246.51184082 -13.59526348]
[-231.28318787 -11.12714481]
[-219.82167053 -0.80061126]
[-215.78463745 14.08917904]
[-201.45356750 18.51869011]
[-187.07041931 22.77604485]
[-172.63726807 26.86063385]
[-158.20410156 30.94522285]
[-143.72300720 34.85645676]
[-129.19604492 38.59377289]
[-114.66909027 42.33108902]
[-102.01560211 34.55774689]
[-87.22996521 38.14097595]
[-79.16236115 51.46582031]
[-64.63540649 55.20314026]
[-50.10844803 58.94045639]
[-35.58148956 62.67777252]
[-21.01076508 66.24063110]
[-6.39836788 69.62852478]
[8.21403027 73.01642609]
[24.64500809 66.97480774]
[38.04757309 79.53494263]
[52.73700714 82.57147217]
[67.42644501 85.60799408]
[82.11587524 88.64452362]
[95.64347839 79.26815796]
[111.80089569 82.40660858]
[120.83468628 96.16533661]
[135.59271240 98.84874725]
[150.35073853 101.53215790]
[156.98606873 91.31459808]
[166.67678833 83.98874664]
[178.24987793 80.41159058]
[190.31459045 80.98817444]
[201.42950439 85.62584686]
[210.27476501 93.74818420]
[215.80880737 104.36653900]
[217.39102173 116.20032501]
[231.91796875 119.93764496]
[246.44493103 123.67495728]
[260.97189331 127.41227722]
[275.49884033 131.14959717]
[293.06106567 125.76866150]
[305.15707397 138.42428589]
[319.76947021 141.81217957]
[334.38186646 145.20007324]
[348.99426270 148.58796692]
[363.60665894 151.97586060]
[378.21905518 155.36375427]
[392.83145142 158.75164795]
[407.44384766 162.13954163]
[420.74993896 154.04103088]
[435.52072144 157.68499756]
[443.15942383 170.42022705]
[457.77182007 173.80812073]
[466.94085693 172.69590759]
[472.69195557 177.45642090]
[487.21890259 181.19374084]
[501.74588013 184.93106079]
[513.62048340 174.94241333]
[529.10076904 173.87472534]
[542.23425293 182.13856506]
[547.97088623 196.55630493]
[544.10473633 211.58403015]
[532.12243652 221.44326782]
[516.63146973 222.34295654]
[503.58840942 213.93713379]
[498.00854492 199.45800781]
[483.48159790 195.72070312]
[468.95465088 191.98338318]
[454.38391113 188.42051697]
[439.77151489 185.03262329]
[427.30807495 193.10714722]
[412.44076538 189.87950134]
[404.05596924 176.75193787]
[389.44354248 173.36404419]
[374.83114624 169.97615051]
[360.21875000 166.58825684]
[345.60635376 163.20036316]
[330.99395752 159.81246948]
[316.38156128 156.42457581]
[301.76916504 153.03668213]
[291.27981567 159.18547058]
[279.02926636 156.41061401]
[271.76153564 145.67654419]
[257.23455811 141.93923950]
[242.70761108 138.20191956]
[228.18064880 134.46459961]
[213.65370178 130.72727966]
[201.69566345 144.19580078]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 70]
[4 69]
[5 68]
[9 65]
[10 64]
[11 63]
[12 62]
[15 60]
[16 59]
[17 58]
[19 57]
[20 56]
[21 55]
[22 54]
[25 51]
[26 50]
[27 49]
[29 48]
[30 47]
[31 46]
[33 45]
[34 44]
[78 129]
[79 128]
[80 127]
[81 126]
[82 125]
[84 122]
[85 121]
[86 120]
[87 119]
[88 118]
[89 117]
[90 116]
[91 115]
[94 112]
[95 111]
[97 110]
[98 109]
[99 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
