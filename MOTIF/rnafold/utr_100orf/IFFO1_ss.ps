%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:06:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUUCCAUCCCUGCUCCUGCACCGGUCUGCAUCUCCCAGCAGAAGGCGCAGCCAUGAAUCCGUUAUUCGGCCCCAACCUCUUCCUCCUGCAGCAGGAGCAGCAGGGCCUGGCCGGGCCACUGGGGGACUCACUGGGAGGCGACCACUUCGCCG\
) } def
/len { sequence length } bind def

/coor [
[290.49102783 413.52020264]
[286.58425903 399.03790283]
[282.67752075 384.55557251]
[278.77075195 370.07327271]
[274.86401367 355.59097290]
[270.95727539 341.10867310]
[267.05050659 326.62634277]
[263.14376831 312.14404297]
[258.50851440 297.87820435]
[253.15664673 283.86541748]
[247.80477905 269.85266113]
[242.45292664 255.83988953]
[237.10105896 241.82713318]
[228.65724182 229.42947388]
[217.57814026 219.31742859]
[206.49903870 209.20538330]
[195.41992188 199.09335327]
[184.34082031 188.98130798]
[173.26170349 178.86926270]
[162.18260193 168.75721741]
[151.10350037 158.64518738]
[136.28242493 159.57862854]
[124.90258026 149.48141479]
[124.02398682 133.92936707]
[112.94487762 123.81732941]
[101.86576843 113.70529175]
[87.55368042 109.21484375]
[72.68366241 111.18529510]
[57.81365204 113.15574646]
[42.94363785 115.12619781]
[28.07362366 117.09664917]
[20.79971313 130.80320740]
[6.84372997 137.58628845]
[-8.42796421 134.83766174]
[-19.14309120 123.61421967]
[-21.18146706 108.23160553]
[-13.75929546 94.60475922]
[0.26944900 87.97347260]
[15.51042652 90.88761902]
[26.10317230 102.22663879]
[40.97318649 100.25618744]
[55.84320068 98.28573608]
[70.71321106 96.31528473]
[85.58322906 94.34483337]
[88.00488281 79.54092407]
[90.42634583 64.73834229]
[76.95927429 58.13242722]
[63.49220657 51.52651596]
[46.60898972 49.97948456]
[43.42182159 33.32781219]
[58.54044724 25.65555573]
[70.09812164 38.05944824]
[83.56518555 44.66535950]
[97.03225708 51.27127075]
[102.30861664 45.94116592]
[91.64840698 35.38844681]
[80.98835754 24.83555984]
[91.54141235 14.17567635]
[102.20112610 24.72823715]
[112.86133575 35.28095627]
[118.13769531 29.95085335]
[111.39564514 16.55142021]
[104.65360260 3.15198827]
[89.93361664 -3.22780156]
[85.88304138 -18.75108528]
[95.60911560 -31.50972939]
[111.65084076 -31.71639252]
[121.70236969 -19.21254158]
[118.05303192 -3.59006000]
[124.79508209 9.80937195]
[131.53712463 23.20880508]
[132.04444885 8.21738625]
[146.45019531 4.03713560]
[161.44949341 3.89207625]
[175.93339539 7.79293346]
[188.83105469 15.45130253]
[199.18887329 26.30097198]
[206.24110413 39.53978729]
[209.46630859 54.18894958]
[208.62606812 69.16539764]
[203.78248596 83.36186218]
[195.29365540 95.72875214]
[183.78721619 105.35173798]
[170.11387634 111.51935577]
[155.28453064 113.77560425]
[140.39558411 111.95367432]
[126.54861450 106.18872833]
[111.97780609 102.62618256]
[123.05691528 112.73822784]
[134.13603210 122.85026550]
[149.70344543 122.30870819]
[160.79518127 132.72158813]
[161.21553040 147.56607056]
[172.29464722 157.67811584]
[183.37374878 167.79016113]
[194.45285034 177.90220642]
[205.53196716 188.01423645]
[216.61106873 198.12628174]
[227.69018555 208.23832703]
[238.76928711 218.35035706]
[242.84927368 213.60752869]
[249.01722717 210.14083862]
[256.81820679 208.71739197]
[271.68823242 206.74694824]
[286.55825806 204.77648926]
[301.40753174 202.65545654]
[316.23455811 200.38403320]
[331.06158447 198.11262512]
[345.88861084 195.84120178]
[360.71563721 193.56977844]
[373.16693115 182.89753723]
[388.54306030 188.59904480]
[391.02633667 204.80908203]
[378.06219482 214.85215759]
[362.98706055 208.39680481]
[348.16003418 210.66822815]
[333.33300781 212.93965149]
[318.50598145 215.21105957]
[303.67895508 217.48248291]
[297.50717163 221.62843323]
[288.52868652 219.64651489]
[273.65869141 221.61695862]
[258.78866577 223.58741760]
[251.11383057 236.47526550]
[256.46569824 250.48803711]
[261.81753540 264.50079346]
[267.16940308 278.51358032]
[272.52127075 292.52633667]
[281.21337891 280.30148315]
[296.17770386 279.26776123]
[306.46817017 290.18136597]
[304.55746460 305.05917358]
[291.84323120 313.01837158]
[277.62606812 308.23727417]
[281.53280640 322.71960449]
[285.43957520 337.20190430]
[289.34631348 351.68420410]
[293.25308228 366.16653442]
[297.15982056 380.64883423]
[301.06658936 395.13113403]
[304.97332764 409.61346436]
[320.05203247 411.53741455]
[333.24417114 419.08959961]
[342.53805542 431.11840820]
[346.51644897 445.78948975]
[344.57266235 460.86566162]
[337.00311279 474.04785156]
[324.96209717 483.32589722]
[310.28576660 487.28500366]
[295.21218872 485.32138062]
[282.03997803 477.73449707]
[272.77777100 465.68127441]
[268.83798218 450.99975586]
[270.82144165 435.92880249]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 141]
[2 140]
[3 139]
[4 138]
[5 137]
[6 136]
[7 135]
[8 134]
[9 128]
[10 127]
[11 126]
[12 125]
[13 124]
[14 100]
[15 99]
[16 98]
[17 97]
[18 96]
[19 95]
[20 94]
[21 93]
[24 90]
[25 89]
[26 88]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
[46 54]
[47 53]
[48 52]
[61 71]
[62 70]
[63 69]
[103 123]
[104 122]
[105 121]
[106 119]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
