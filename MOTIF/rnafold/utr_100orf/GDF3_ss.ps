%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:31:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUCUGAAUUGUUGGGCAGUCUGGCAGUGGAGCUCUCCCCGGUCUGACAGCCACUCCAGAGGCCAUGCUUCGUUUCUUGCCAGAUUUGGCUUUCAGCUUCCUGUUAAUUCUGGCUUUGGGCCAGGCAGUCCAAUUUCAAGAAUAUGUCUUUCUCCAAUUUCUGG\
) } def
/len { sequence length } bind def

/coor [
[149.83413696 400.88882446]
[142.99943542 387.53643799]
[145.17395020 372.69488525]
[155.55180359 361.86437988]
[170.28706360 359.05862427]
[183.91772461 365.31631470]
[178.11196899 351.48544312]
[172.30621338 337.65454102]
[166.50047302 323.82366943]
[162.45715332 321.20721436]
[160.03883362 316.00299072]
[160.74769592 309.35784912]
[155.46948242 295.31719971]
[150.19126892 281.27651978]
[144.91305542 267.23583984]
[139.63484192 253.19517517]
[134.35661316 239.15451050]
[129.07839966 225.11383057]
[117.35746002 215.92314148]
[119.74390411 200.28295898]
[114.46568298 186.24229431]
[109.18746948 172.20161438]
[103.90925598 158.16094971]
[98.63104248 144.12026978]
[93.35282135 130.07960510]
[88.07460785 116.03893280]
[75.74227142 107.50000000]
[60.74226761 107.50000000]
[45.74226761 107.50000000]
[30.74226952 107.50000000]
[15.74226952 107.50000000]
[6.58156347 119.88497925]
[-7.94546938 124.44773102]
[-22.20501137 119.63842010]
[-30.79551888 107.50000000]
[-45.79551697 107.50000000]
[-53.40537262 120.84112549]
[-66.67435455 128.57609558]
[-82.03316498 128.62423706]
[-95.35037994 120.97260284]
[-103.04371643 107.67944336]
[-103.04371643 92.32055664]
[-95.35037994 79.02739716]
[-82.03316498 71.37576294]
[-66.67435455 71.42390442]
[-53.40537262 79.15887451]
[-45.79551697 92.50000000]
[-30.79551888 92.50000000]
[-22.20501137 80.36157990]
[-7.94546938 75.55226898]
[6.58156347 80.11502075]
[15.74226952 92.50000000]
[30.74226952 92.50000000]
[45.74226761 92.50000000]
[60.74226761 92.50000000]
[75.74227142 92.50000000]
[79.09651184 85.79187012]
[70.83190155 73.27403259]
[85.80500031 72.37560272]
[89.15924835 65.66746521]
[80.15975189 53.66708755]
[71.16026306 41.66670609]
[62.16077042 29.66632462]
[53.16127777 17.66594315]
[38.82110977 8.62183380]
[43.54201889 -7.66157389]
[60.49594498 -7.63285589]
[65.16165924 8.66645145]
[74.16115570 20.66683388]
[83.16064453 32.66721344]
[92.16013336 44.66759491]
[101.15962982 56.66797638]
[108.65123749 56.31325912]
[106.50672913 41.46735001]
[102.38520813 27.04469109]
[114.34537506 17.99182892]
[127.10716248 25.87452126]
[124.36664581 40.62170792]
[123.63444519 55.60382843]
[131.12605286 55.24911118]
[138.95143127 42.45209885]
[146.77679443 29.65508652]
[154.60217285 16.85807228]
[162.42755127 4.06105995]
[170.25291443 -8.73595333]
[170.85139465 -24.54583549]
[184.09205627 -31.36742210]
[191.91743469 -44.16443634]
[199.74281311 -56.96144867]
[207.56817627 -69.75846100]
[215.39355469 -82.55547333]
[207.07321167 -95.35136414]
[205.13729858 -110.49121094]
[209.97018433 -124.96898651]
[220.61227417 -135.91012573]
[234.95060730 -141.14224243]
[250.13827515 -139.62651062]
[263.15975952 -131.66387939]
[271.42965698 -118.83531952]
[273.30593872 -103.68796539]
[268.41607666 -89.22933197]
[257.73095703 -78.33018494]
[243.37214661 -73.15457153]
[228.19056702 -74.73010254]
[220.36518860 -61.93309021]
[212.53982544 -49.13607788]
[204.71444702 -36.33906174]
[196.88906860 -23.54205132]
[196.85032654 -8.64749527]
[183.04992676 -0.91058040]
[175.22456360 11.88643265]
[167.39918518 24.68344498]
[159.57380676 37.48045731]
[151.74844360 50.27747345]
[143.92306519 63.07448578]
[146.58340454 82.83177948]
[141.90936279 99.70066071]
[132.23161316 111.35864258]
[120.47823334 116.72238922]
[109.61663055 116.04080963]
[102.11528015 110.76071930]
[107.39349365 124.80139160]
[112.67171478 138.84205627]
[117.94992828 152.88273621]
[123.22814178 166.92340088]
[128.50636292 180.96408081]
[133.78457642 195.00474548]
[145.88305664 205.19970703]
[143.11907959 219.83561707]
[148.39729309 233.87629700]
[153.67550659 247.91696167]
[158.95372009 261.95764160]
[164.23193359 275.99829102]
[169.51014709 290.03897095]
[174.78836060 304.07965088]
[180.33134460 318.01791382]
[186.13710022 331.84878540]
[191.94285583 345.67968750]
[197.74861145 359.51055908]
[204.58374023 372.86273193]
[212.40911865 385.65975952]
[220.23449707 398.45675659]
[228.05986023 411.25378418]
[243.16244507 415.06823730]
[250.91618347 428.15768433]
[247.18661499 442.53219604]
[255.01197815 455.32919312]
[270.49017334 456.42700195]
[282.34533691 466.43875122]
[286.01889038 481.51470947]
[280.09829712 495.85787964]
[266.86016846 503.95300293]
[251.39479065 502.68734741]
[239.64894104 492.54757690]
[236.13912964 477.43267822]
[242.21496582 463.15457153]
[234.38960266 450.35757446]
[219.89472961 447.12731934]
[211.77639771 434.26080322]
[215.26284790 419.07916260]
[207.43748474 406.28213501]
[199.61210632 393.48513794]
[191.78672791 380.68811035]
[188.89231873 395.40621948]
[177.99952698 405.71868896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 139]
[7 138]
[8 137]
[9 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[20 127]
[21 126]
[22 125]
[23 124]
[24 123]
[25 122]
[26 121]
[27 56]
[28 55]
[29 54]
[30 53]
[31 52]
[35 48]
[36 47]
[60 72]
[61 71]
[62 70]
[63 69]
[64 68]
[80 115]
[81 114]
[82 113]
[83 112]
[84 111]
[85 110]
[87 108]
[88 107]
[89 106]
[90 105]
[91 104]
[140 163]
[141 162]
[142 161]
[143 160]
[146 157]
[147 156]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
