%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:57:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGUCUCCUGGCAACCAGAUGCAGGGGCCAUGGCACUCUUAACACCCCAGGGAGUGAAAGAAGUCUUCCAACUUCAGAGACCACAAGGUCGGGAGCGCCUGCGGAGGCUUCUGAACUGGGAGGAGUUUG\
) } def
/len { sequence length } bind def

/coor [
[76.32465363 120.96510315]
[65.34062195 131.18034363]
[54.35659409 141.39558411]
[43.37256241 151.61082458]
[32.63858032 162.08848572]
[22.16090775 172.82247925]
[11.68323803 183.55645752]
[1.20556760 194.29045105]
[-9.27210331 205.02442932]
[-19.74977303 215.75840759]
[-23.55725861 224.17564392]
[-30.61268997 226.62132263]
[-41.34667206 237.09899902]
[-41.28699493 252.90316772]
[-52.47917938 264.06161499]
[-68.28310394 263.95419312]
[-79.32257843 252.64465332]
[-79.04808044 236.84275818]
[-67.62246704 225.92346191]
[-51.82434464 226.36502075]
[-41.09035873 215.88734436]
[-30.48375702 205.28074646]
[-20.00608826 194.54675293]
[-9.52841663 183.81277466]
[0.94925362 173.07879639]
[11.42692375 162.34480286]
[21.90459442 151.61082458]
[22.73433113 146.81350708]
[26.65122414 142.52053833]
[33.15732574 140.62678528]
[44.14135742 130.41154480]
[55.12538528 120.19631195]
[66.10941315 109.98107910]
[65.02289581 95.02047729]
[52.67813492 86.49951172]
[40.33337784 77.97853851]
[27.98861885 69.45756531]
[15.64386177 60.93659592]
[3.29910350 52.41562271]
[-9.04565430 43.89465332]
[-23.24248505 49.93232727]
[-38.44597244 47.31363297]
[-49.80473709 36.87418747]
[-53.69423676 21.94517899]
[-48.87335205 7.29039860]
[-36.88040161 -2.41386580]
[-21.54229927 -4.07101870]
[-7.75337505 2.84773159]
[0.08637559 16.13463783]
[-0.52468324 31.54989433]
[11.82007504 40.07086563]
[24.16483307 48.59183502]
[36.50959015 57.11280823]
[48.85434723 65.63378143]
[61.19910812 74.15474701]
[73.54386139 82.67572021]
[86.44982147 73.23369598]
[101.52536774 71.66329956]
[114.57672882 77.56486511]
[122.38150787 88.56874847]
[137.16738892 86.04338837]
[151.95329285 83.51803589]
[164.25384521 73.56781769]
[178.10208130 79.05195618]
[192.88796997 76.52659607]
[207.67385864 74.00124359]
[222.45974731 71.47588348]
[237.24565125 68.95053101]
[252.03153992 66.42517853]
[258.97637939 52.67471313]
[272.52789307 45.73136139]
[287.39358521 48.07133102]
[297.90505981 58.59020996]
[312.69094849 56.06485748]
[327.47683716 53.53950119]
[342.26272583 51.01414490]
[357.04861450 48.48878860]
[371.83450317 45.96343231]
[385.65777588 40.13956451]
[397.79302979 31.32278442]
[409.92828369 22.50600433]
[422.06353760 13.68922615]
[428.23571777 -1.50406229]
[444.51452637 -3.48710370]
[454.15371704 9.78008556]
[447.23730469 24.64935875]
[430.88031006 25.82448196]
[418.74505615 34.64126205]
[406.60980225 43.45803833]
[394.47454834 52.27481842]
[395.91549683 59.63509369]
[410.63604736 56.75319290]
[425.35662842 53.87152100]
[428.23809814 68.59216309]
[413.51794434 71.47374725]
[398.79739380 74.35564423]
[400.23834229 81.71591949]
[414.80245972 85.30565643]
[429.36660767 88.89539337]
[443.93072510 92.48512268]
[459.52328491 87.40535736]
[471.53622437 98.56875610]
[467.61163330 114.49137878]
[451.78683472 118.79338837]
[440.34100342 107.04925537]
[425.77685547 103.45951843]
[411.21273804 99.86978149]
[396.64862061 96.28005219]
[376.29431152 80.21334076]
[374.35986328 60.74932480]
[359.57397461 63.27468109]
[344.78808594 65.80003357]
[330.00219727 68.32539368]
[315.21630859 70.85074615]
[300.43038940 73.37610626]
[294.00610352 86.78752899]
[280.75979614 93.92888641]
[265.67193604 91.87699127]
[254.55688477 81.21106720]
[239.77099609 83.73641968]
[224.98510742 86.26177979]
[210.19921875 88.78713226]
[195.41333008 91.31249237]
[180.62744141 93.83784485]
[169.38446045 103.60742950]
[154.47863770 98.30392456]
[139.69274902 100.82928467]
[124.90686035 103.35463715]
[117.07686615 121.29408264]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[3 31]
[4 30]
[5 27]
[6 26]
[7 25]
[8 24]
[9 23]
[10 22]
[12 21]
[13 20]
[34 56]
[35 55]
[36 54]
[37 53]
[38 52]
[39 51]
[40 50]
[60 128]
[61 127]
[62 126]
[64 124]
[65 123]
[66 122]
[67 121]
[68 120]
[69 119]
[73 115]
[74 114]
[75 113]
[76 112]
[77 111]
[78 110]
[79 90]
[80 89]
[81 88]
[82 87]
[97 108]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
