%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCUCUUCCUGGCCUCCCCACAGUGCUGGCCUCUGCCUCCAUCUCAGUCACACAUGUCUAGCCUCCAGGCGCUGUGCUCUGGCCUGCCCCUGCGGCCCCUCCCAGAGAACCGGGGACGCCAGGCUGGGGUGCCCCAUGCCCCUGUCAGGACCC\
) } def
/len { sequence length } bind def

/coor [
[172.63896179 395.37200928]
[181.01869202 381.27548218]
[180.71469116 366.27856445]
[180.41067505 351.28164673]
[180.10667419 336.28472900]
[167.23680115 322.56066895]
[163.09770203 305.67532349]
[167.42755127 290.31469727]
[177.78271484 280.11141968]
[171.31361389 266.57809448]
[164.84451294 253.04476929]
[158.37541199 239.51144409]
[151.90631104 225.97813416]
[145.43722534 212.44480896]
[132.96752930 204.29887390]
[133.99664307 188.51118469]
[127.52754211 174.97785950]
[121.05844879 161.44453430]
[114.58934784 147.91122437]
[108.12025452 134.37789917]
[90.23640442 137.08810425]
[71.89167786 130.36759949]
[58.05604553 114.58497620]
[53.13140488 92.69003296]
[38.46981049 95.85825348]
[23.80821609 99.02647400]
[15.22734737 112.02672577]
[0.31327280 115.03089142]
[-12.02759647 106.77022552]
[-26.68919182 109.93844604]
[-41.35078812 113.10666656]
[-53.13056183 124.51583099]
[-68.82472992 119.75922394]
[-72.28846741 103.73004913]
[-59.95858765 92.91773987]
[-44.51900864 98.44507599]
[-29.85741234 95.27685547]
[-15.19581699 92.10863495]
[-7.36686373 79.48947906]
[7.45694637 76.06758881]
[20.63999367 84.36487579]
[35.30158997 81.19665527]
[49.96318436 78.02843475]
[52.99054718 71.16658020]
[38.60486221 66.91780853]
[23.60574150 67.08036041]
[15.34696865 54.55867767]
[21.40173149 40.83498001]
[36.21789169 38.49373245]
[46.20919037 49.68174362]
[59.04527283 57.44286728]
[62.07263565 50.58100891]
[54.52879715 37.61603928]
[46.98495483 24.65106583]
[39.44111633 11.68609524]
[31.76627731 -1.20176160]
[23.96122742 -14.01117992]
[16.15617752 -26.82059669]
[8.35112667 -39.63001633]
[0.54607624 -52.43943405]
[-14.93999767 -54.61095810]
[-25.36872673 -66.26323700]
[-25.81598091 -81.89442444]
[-16.07058334 -94.12394714]
[-0.73401147 -97.17739868]
[12.95227432 -89.61303711]
[18.52602768 -75.00251770]
[13.35549450 -60.24448395]
[21.16054535 -47.43506622]
[28.96559525 -34.62564850]
[36.77064514 -21.81623077]
[44.57569504 -9.00681210]
[50.77829742 -4.90713692]
[52.40608978 4.14225578]
[59.94992828 17.10722733]
[67.49376678 30.07219887]
[75.03760529 43.03717041]
[90.01835632 43.79690933]
[98.83513641 31.66165352]
[107.65190887 19.52639771]
[116.46868896 7.39114332]
[125.28546906 -4.74411201]
[134.10224915 -16.87936592]
[127.97786713 -33.89355087]
[133.20321655 -51.04146957]
[147.52285767 -61.56369781]
[165.13577271 -61.42990112]
[173.45352173 -73.91249084]
[181.77127075 -86.39508057]
[180.04405212 -102.34488678]
[191.53819275 -113.53704071]
[207.43637085 -111.38587189]
[215.54286194 -97.54158020]
[209.63905334 -82.62432098]
[194.25386047 -78.07733917]
[185.93611145 -65.59474182]
[177.61836243 -53.11215210]
[183.49998474 -42.41698837]
[184.25759888 -30.16223717]
[179.68450928 -18.68953514]
[170.59854126 -10.21752739]
[158.69651794 -6.41286469]
[146.23750305 -8.06258774]
[137.42073059 4.07266712]
[128.60394287 16.20792198]
[119.78716278 28.34317589]
[110.97039032 40.47843170]
[102.15361023 52.61368561]
[122.85960388 61.22365189]
[136.29066467 77.70751953]
[140.08726501 97.44757843]
[134.40875244 115.51808929]
[121.65357208 127.90879822]
[128.12266541 141.44212341]
[134.59176636 154.97543335]
[141.06086731 168.50875854]
[147.52996826 182.04208374]
[160.46237183 191.15600586]
[158.97053528 205.97570801]
[165.43963623 219.50903320]
[171.90873718 233.04235840]
[178.37783813 246.57566833]
[184.84692383 260.10897827]
[191.31602478 273.64230347]
[211.38967896 273.48110962]
[228.71350098 288.08999634]
[232.88552856 312.99938965]
[243.75741577 323.33389282]
[254.62930298 333.66839600]
[265.50119019 344.00289917]
[276.37310791 354.33740234]
[291.89028931 352.40063477]
[304.99392700 360.93460083]
[309.49688721 375.90982056]
[303.27301025 390.25546265]
[289.26101685 397.19793701]
[274.07693481 393.45922852]
[264.89022827 380.80465698]
[266.03857422 365.20928955]
[255.16670227 354.87478638]
[244.29479980 344.54028320]
[233.42291260 334.20578003]
[222.55102539 323.87127686]
[215.68916321 326.89865112]
[225.68827820 338.07977295]
[218.14410400 351.04455566]
[203.48263550 347.87579346]
[201.96545410 332.95336914]
[195.10359192 335.98071289]
[195.40759277 350.97766113]
[195.71160889 365.97457886]
[196.01560974 380.97149658]
[204.95973206 394.71682739]
[197.28776550 409.21075439]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[4 150]
[5 149]
[9 124]
[10 123]
[11 122]
[12 121]
[13 120]
[14 119]
[16 117]
[17 116]
[18 115]
[19 114]
[20 113]
[24 43]
[25 42]
[26 41]
[29 38]
[30 37]
[31 36]
[52 77]
[53 76]
[54 75]
[55 74]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
[78 108]
[79 107]
[80 106]
[81 105]
[82 104]
[83 103]
[87 97]
[88 96]
[89 95]
[127 143]
[128 142]
[129 141]
[130 140]
[131 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
