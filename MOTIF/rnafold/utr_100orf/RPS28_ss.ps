%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:48:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCCGCCAGACCGCCGCCGCGCCGCCAUCAUGGACACCAGCCGUGUGCAGCCUAUCAAGCUGGCCAGGGUCACCAAGGUCCUGGGCAGGACCGGUUCUCAGGGACAGUGCACGCAGGUGCGCGUGGAAU\
) } def
/len { sequence length } bind def

/coor [
[91.83929443 244.75981140]
[80.99370575 233.26422119]
[81.53683472 217.46925354]
[93.14645386 206.74581909]
[93.50341797 191.75006104]
[93.86038208 176.75431824]
[94.21735382 161.75856018]
[94.57431793 146.76280212]
[71.35854340 135.17008972]
[58.56960297 113.70301056]
[59.36942291 89.68972778]
[45.72494507 83.45850372]
[32.08046341 77.22727966]
[18.43598366 70.99605560]
[4.95820761 78.45632935]
[-10.15148163 76.57200623]
[-21.12455750 66.27367401]
[-23.89627647 51.66355896]
[-37.54075623 45.43233490]
[-51.18523788 39.20110703]
[-64.82971954 32.96988297]
[-74.03451538 32.23340607]
[-78.72202301 26.42458153]
[-92.21434784 19.87041283]
[-103.09728241 31.28773689]
[-116.95134735 38.78758621]
[-132.42308044 41.65084839]
[-148.00517273 39.61070251]
[-162.18328857 32.87746048]
[-173.58325195 22.11693382]
[-181.10420227 8.38462734]
[-184.02494812 -6.97779465]
[-182.07308960 -22.47358894]
[-195.71757507 -28.70481491]
[-211.48483276 -27.39951706]
[-219.84777832 -39.72471237]
[-233.49226379 -45.95594025]
[-247.13673401 -52.18716431]
[-260.78121948 -58.41838837]
[-276.25473022 -54.18169403]
[-289.12927246 -63.75386047]
[-289.52853394 -79.79194641]
[-277.14630127 -89.99289703]
[-261.48110962 -86.53142548]
[-254.55000305 -72.06286621]
[-240.90551758 -65.83164215]
[-227.26103210 -59.60041809]
[-213.61656189 -53.36919403]
[-198.82522583 -55.12018967]
[-189.48634338 -42.34929657]
[-175.84185791 -36.11806870]
[-166.42959595 -46.88692856]
[-154.34332275 -54.56403351]
[-140.56434631 -58.51536560]
[-126.21443176 -58.40985870]
[-112.46448517 -54.24709320]
[-100.43901062 -46.35807419]
[-91.12414551 -35.37894058]
[-85.28678894 -22.19966316]
[-83.41148376 -7.89191151]
[-85.66017914 6.37808657]
[-72.16785431 12.93225384]
[-58.59849167 19.32540321]
[-44.95401001 25.55662918]
[-31.30953217 31.78785324]
[-17.66505241 38.01907730]
[-4.80837059 30.54621124]
[10.16042423 32.09513474]
[21.47924423 42.28030777]
[24.66720963 57.35157394]
[38.31168747 63.58279800]
[51.95616913 69.81402588]
[65.60064697 76.04524994]
[73.98773193 67.12892914]
[84.59306335 61.01575089]
[96.51225281 58.22703171]
[108.72885895 59.00057983]
[120.20110321 63.27043533]
[129.95065308 70.67247772]
[142.37289429 62.26486206]
[154.79513550 53.85724640]
[167.21737671 45.44963074]
[179.63961792 37.04201889]
[192.06184387 28.63440514]
[198.73677063 13.65516758]
[215.07260132 12.21553516]
[224.26445007 25.79647827]
[216.85652161 40.42708588]
[200.46946716 41.05664444]
[188.04722595 49.46425629]
[175.62498474 57.87187195]
[163.20274353 66.27948761]
[150.78050232 74.68710327]
[138.35826111 83.09471130]
[140.73670959 90.11737823]
[141.84063721 97.44924164]
[156.73455811 99.23002625]
[171.62847900 101.01081085]
[186.52239990 102.79160309]
[201.37626648 95.84218597]
[214.66482544 105.45188141]
[212.71794128 121.73505402]
[197.53839111 127.94097137]
[184.74160767 117.68551636]
[169.84768677 115.90473175]
[154.95376587 114.12394714]
[140.05986023 112.34316254]
[138.61375427 122.11328888]
[134.72358704 131.78790283]
[144.81349182 142.88717651]
[154.90339661 153.98645020]
[164.99330139 165.08572388]
[175.08320618 176.18498230]
[185.17311096 187.28425598]
[200.94982910 191.75946045]
[204.69963074 207.72413635]
[192.56506348 218.75520325]
[177.02911377 213.50483704]
[174.07383728 197.37416077]
[163.98393250 186.27488708]
[153.89402771 175.17562866]
[143.80412292 164.07635498]
[133.71421814 152.97708130]
[123.62431335 141.87780762]
[109.57006836 147.11976624]
[109.21310425 162.11552429]
[108.85614014 177.11128235]
[108.49916840 192.10702515]
[108.14220428 207.10278320]
[119.22843170 218.36648560]
[119.01939392 234.16938782]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 129]
[5 128]
[6 127]
[7 126]
[8 125]
[11 73]
[12 72]
[13 71]
[14 70]
[18 66]
[19 65]
[20 64]
[21 63]
[23 62]
[24 61]
[33 51]
[34 50]
[36 48]
[37 47]
[38 46]
[39 45]
[79 94]
[80 93]
[81 92]
[82 91]
[83 90]
[84 89]
[96 107]
[97 106]
[98 105]
[99 104]
[109 124]
[110 123]
[111 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
