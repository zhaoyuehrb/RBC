%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:45:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGUGGCGCGAGUUGGACUGUGAAGAAACAUGGCGGCCGCGACGUUGACUUCGAAAUUGUACUCCCUGCUGUUCCGCAGGACCUCCACCUUCGCCCUCACCAUCAUCGUGGGCGUCAUGUUCUUCGAGC\
) } def
/len { sequence length } bind def

/coor [
[-11.73678493 367.31246948]
[-15.64801788 381.79357910]
[-19.55925179 396.27465820]
[-14.82587242 411.97586060]
[-26.25244331 423.73873901]
[-42.08428955 419.46267700]
[-46.03496552 403.54650879]
[-34.04035187 392.36343384]
[-30.12911797 377.88232422]
[-26.21788406 363.40124512]
[-32.67774200 358.17211914]
[-37.29148102 351.21844482]
[-39.61762238 343.16870117]
[-39.42255783 334.75787354]
[-36.70383453 326.76019287]
[-31.69227791 319.91809082]
[-24.83250618 314.87307739]
[-16.74355507 312.10577393]
[-8.16302681 311.89007568]
[-2.21571422 298.11947632]
[-2.45415568 290.65753174]
[4.04286003 284.09268188]
[10.31867218 270.46865845]
[16.59448433 256.84463501]
[22.87029648 243.22059631]
[29.14610863 229.59657288]
[35.42192078 215.97253418]
[41.69773483 202.34851074]
[41.63829422 194.88298035]
[48.29086304 188.47581482]
[54.89156342 175.00619507]
[61.49226761 161.53657532]
[68.09297180 148.06695557]
[74.69367218 134.59733582]
[81.29437256 121.12770844]
[87.89508057 107.65808105]
[87.13745880 93.69679260]
[98.63529968 85.74121094]
[105.23600006 72.27159119]
[111.83670807 58.80196762]
[118.43740845 45.33234787]
[125.03810883 31.86272430]
[131.63880920 18.39310265]
[121.96100616 2.00439739]
[123.98104095 -16.77193642]
[136.72186279 -30.50977516]
[155.00170898 -33.88228226]
[160.61709595 -47.79153824]
[166.23249817 -61.70079041]
[158.17750549 -74.83179474]
[159.38487244 -90.01058960]
[169.18266296 -101.43281555]
[183.65435791 -104.85452271]
[189.26974487 -118.76377106]
[194.88514709 -132.67303467]
[200.50053406 -146.58229065]
[194.56597900 -160.98432922]
[200.45893860 -175.01029968]
[214.22566223 -180.57922363]
[219.84104919 -194.48847961]
[209.65559387 -205.80297852]
[205.41000366 -220.35845947]
[207.89494324 -235.25292969]
[216.56471252 -247.54096985]
[229.65594482 -254.81620789]
[244.54605103 -255.68244934]
[250.16143799 -269.59170532]
[255.77682495 -283.50094604]
[261.39221191 -297.41021729]
[267.00762939 -311.31945801]
[260.59860229 -325.76593018]
[266.35983276 -340.48269653]
[280.87322998 -346.73861694]
[295.52828979 -340.82214355]
[301.63040161 -326.24340820]
[295.55932617 -311.65170288]
[280.91687012 -305.70407104]
[275.30148315 -291.79479980]
[269.68609619 -277.88555908]
[264.07070923 -263.97631836]
[258.45529175 -250.06704712]
[268.57043457 -239.10578918]
[272.94131470 -224.78080750]
[270.64978027 -209.91778564]
[262.09735107 -197.47285461]
[248.93624878 -189.94473267]
[233.75030518 -188.87309265]
[228.13490295 -174.96383667]
[234.17658997 -161.39793396]
[228.67991638 -147.21197510]
[214.40979004 -140.96688843]
[208.79440308 -127.05764008]
[203.17900085 -113.14838409]
[197.56361389 -99.23912811]
[205.60342407 -86.72915649]
[204.72482300 -71.70610809]
[195.05552673 -59.94353485]
[180.14175415 -56.08539963]
[174.52635193 -42.17614365]
[168.91096497 -28.26688957]
[176.60832214 -19.96370316]
[180.62512207 -9.32273865]
[180.33197021 2.09902453]
[175.73321533 12.61459732]
[167.47200012 20.65615082]
[156.74060059 25.00874901]
[145.10842896 24.99380493]
[138.50773621 38.46342850]
[131.90702820 51.93304825]
[125.30632782 65.40267181]
[118.70562744 78.87229156]
[112.10491943 92.34191895]
[112.86254120 106.30320740]
[101.36470032 114.25878906]
[94.76399994 127.72840881]
[88.16329193 141.19802856]
[81.56259155 154.66764832]
[74.96189117 168.13726807]
[68.36118317 181.60690308]
[61.76048279 195.07652283]
[55.32176208 208.62431335]
[49.04595184 222.24835205]
[42.77013779 235.87237549]
[36.49432755 249.49641418]
[30.21851349 263.12045288]
[23.94270134 276.74447632]
[17.66688919 290.36849976]
[11.55488777 304.06680298]
[5.60757494 317.83740234]
[15.81410694 337.78466797]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[19 129]
[20 128]
[22 127]
[23 126]
[24 125]
[25 124]
[26 123]
[27 122]
[28 121]
[30 120]
[31 119]
[32 118]
[33 117]
[34 116]
[35 115]
[36 114]
[38 112]
[39 111]
[40 110]
[41 109]
[42 108]
[43 107]
[47 100]
[48 99]
[49 98]
[53 94]
[54 93]
[55 92]
[56 91]
[59 88]
[60 87]
[66 81]
[67 80]
[68 79]
[69 78]
[70 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
