%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAUCGCGCGCGGCCCCGCGGCCAGCCUGGGUAGGGGCAAGGCGCAGCCAAUGGGAAGGGUCGGAGGCAUGGCACAGCCAAUGGGAAGGGCCGGGGCACCAAAGCCAAUGGGAAGGGCCGGGAGCGCGCGGCGCGGGAGAUUUAAAGGCU\
) } def
/len { sequence length } bind def

/coor [
[136.95912170 474.82656860]
[139.48712158 459.92352295]
[146.29705811 446.42846680]
[156.78338623 435.54141235]
[170.01365662 428.23034668]
[166.93542480 413.54959106]
[163.85719299 398.86886597]
[160.77896118 384.18811035]
[157.70072937 369.50735474]
[154.62249756 354.82659912]
[151.39273071 340.17843628]
[148.01174927 325.56442261]
[144.63076782 310.95043945]
[141.09895325 296.37216187]
[137.41667175 281.83114624]
[126.79177094 271.39273071]
[130.90457153 256.11544800]
[127.22228241 241.57443237]
[122.50161743 235.82603455]
[123.61746979 226.69485474]
[120.23648834 212.08085632]
[116.85551453 197.46685791]
[113.47453308 182.85285950]
[110.09355927 168.23884583]
[94.02922821 159.55699158]
[89.26892090 141.59927368]
[99.25887299 125.56043243]
[95.27686310 111.09863281]
[90.99681854 96.72222137]
[86.42057037 82.43733215]
[81.84432983 68.15245056]
[66.91860199 64.81027985]
[55.74355316 54.51391983]
[51.25252151 40.10222244]
[54.55602646 25.47543716]
[64.66918945 14.53973866]
[60.09294128 0.25485185]
[55.36932373 -13.98198128]
[50.49882889 -28.16923904]
[34.66477966 -35.53438187]
[29.13508224 -51.74334335]
[36.85670090 -66.65164185]
[31.69404411 -80.73520660]
[26.53138542 -94.81877899]
[10.24106121 -97.46971893]
[-2.42882442 -107.90009308]
[-8.09453011 -123.20214081]
[-5.30453587 -139.18402100]
[5.08995104 -151.51806641]
[-0.36266851 -165.49192810]
[-5.81528807 -179.46578979]
[-18.03976059 -189.50933838]
[-15.45822525 -204.17852783]
[-20.91084480 -218.15238953]
[-26.36346436 -232.12625122]
[-40.31558609 -233.52680969]
[-52.23907089 -240.77932739]
[-59.82663345 -252.41339111]
[-61.63903427 -266.11743164]
[-57.37777328 -279.19790649]
[-47.93249512 -289.10873413]
[-53.09515381 -303.19229126]
[-58.25781250 -317.27587891]
[-63.42047119 -331.35943604]
[-77.86291504 -337.77746582]
[-83.45897675 -352.55786133]
[-76.88859558 -366.93164062]
[-62.04987717 -372.37112427]
[-47.74636078 -365.64913940]
[-42.46407318 -350.75375366]
[-49.33689880 -336.52209473]
[-44.17424011 -322.43853760]
[-39.01158142 -308.35494995]
[-33.84892273 -294.27139282]
[-17.89329720 -291.90667725]
[-5.22310305 -281.77401733]
[0.65899986 -266.55383301]
[-1.93369508 -250.34899902]
[-12.38959789 -237.57887268]
[-6.93697882 -223.60501099]
[-1.48435915 -209.63114929]
[10.35010529 -200.58709717]
[8.15857792 -184.91841125]
[13.61119747 -170.94454956]
[19.06381798 -156.97067261]
[32.70394516 -155.79402161]
[44.55641556 -148.81002808]
[52.26904297 -137.33828735]
[54.28263474 -123.59535980]
[50.14588928 -110.26659393]
[40.61495590 -99.98143768]
[45.77761459 -85.89786530]
[50.94027328 -71.81430054]
[63.30641937 -68.06558990]
[71.36015320 -57.71238708]
[71.96946716 -44.41452408]
[64.68608856 -33.03973007]
[69.55657959 -18.85247231]
[74.73582458 -13.51353550]
[74.37783051 -4.32139349]
[78.95407104 9.96349335]
[93.53913879 12.98697281]
[104.72698212 22.97137260]
[109.44625854 37.30994797]
[106.33443451 52.18319321]
[96.12921143 63.57620239]
[100.70545959 77.86109161]
[105.28170013 92.14597321]
[109.33697510 95.57966614]
[111.14624023 101.05597687]
[109.73865509 107.11662292]
[113.72067261 121.57841492]
[125.07158661 125.35823059]
[133.08460999 134.07937622]
[135.83546448 145.47523499]
[132.74742126 156.65963745]
[124.70755768 164.85787964]
[128.08853149 179.47187805]
[131.46951294 194.08587646]
[134.85049438 208.69987488]
[138.23147583 223.31387329]
[141.76329041 237.89215088]
[145.44557190 252.43315125]
[156.33384705 263.91165161]
[151.95767212 278.14886475]
[155.63995361 292.68988037]
[160.81115723 300.29791260]
[159.24476624 307.56945801]
[162.62574768 322.18347168]
[166.00672913 336.79745483]
[171.01957703 344.51074219]
[169.30325317 351.74835205]
[172.38148499 366.42910767]
[175.45971680 381.10986328]
[178.53794861 395.79061890]
[181.61618042 410.47137451]
[184.69441223 425.15213013]
[199.74714661 426.53283691]
[213.72352600 432.29061890]
[225.38078308 441.91351318]
[233.68235779 454.54583740]
[237.89007568 469.06433105]
[237.62977600 484.17800903]
[232.92463684 498.54299927]
[224.19302368 510.88195801]
[212.21133423 520.09771729]
[198.04496765 525.37084961]
[182.95361328 526.23242188]
[168.27915955 522.60589600]
[155.32647705 514.81359863]
[145.24726868 503.54858398]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 137]
[6 136]
[7 135]
[8 134]
[9 133]
[10 132]
[11 130]
[12 129]
[13 128]
[14 126]
[15 125]
[17 123]
[18 122]
[20 121]
[21 120]
[22 119]
[23 118]
[24 117]
[27 112]
[28 111]
[29 108]
[30 107]
[31 106]
[36 101]
[37 100]
[38 98]
[39 97]
[42 93]
[43 92]
[44 91]
[49 85]
[50 84]
[51 83]
[53 81]
[54 80]
[55 79]
[61 74]
[62 73]
[63 72]
[64 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
