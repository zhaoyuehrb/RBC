%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:34:03 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (FBRS)
} def

/sequence { (\
AUGGAGACGGCAGCGGCCGCGGCCCCGGGUCCGGGCUGGGCAGCAGAGGGGGAGCGCCGACGGCGGCGCUGCUCGCGCCGAGACCGAGACCGGGAGCAGC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
2 9 0.011503098 ubox
2 12 0.008847398 ubox
2 19 0.020506632 ubox
2 21 0.051345723 ubox
2 98 0.010948702 ubox
3 8 0.164542082 ubox
3 11 0.009815992 ubox
3 14 0.003511657 ubox
3 18 0.083666416 ubox
3 20 0.072285643 ubox
3 24 0.105243035 ubox
3 97 0.010537006 ubox
4 17 0.083513311 ubox
4 23 0.107908642 ubox
4 24 0.003403863 ubox
8 15 0.090874697 ubox
8 19 0.776143283 ubox
8 21 0.017606003 ubox
9 14 0.091257132 ubox
9 18 0.993662391 ubox
9 20 0.008787708 ubox
9 24 0.041869645 ubox
10 17 0.994121979 ubox
10 20 0.008763955 ubox
10 23 0.042570647 ubox
10 97 0.005008399 ubox
10 100 0.011595905 ubox
11 16 0.992434764 ubox
11 19 0.009127776 ubox
11 22 0.042413769 ubox
11 96 0.005009216 ubox
11 99 0.011713617 ubox
13 20 0.043410155 ubox
13 97 0.012231753 ubox
14 19 0.043507184 ubox
14 21 0.009899811 ubox
14 96 0.012233230 ubox
15 20 0.010028177 ubox
15 24 0.014742200 ubox
16 23 0.015066727 ubox
16 100 0.008955581 ubox
17 22 0.015058986 ubox
17 99 0.009050386 ubox
19 97 0.037660644 ubox
19 100 0.606424033 ubox
20 96 0.038550327 ubox
20 99 0.703987335 ubox
22 97 0.986771739 ubox
22 100 0.017570177 ubox
23 94 0.021678811 ubox
23 96 0.989078637 ubox
23 99 0.017728665 ubox
24 93 0.021201032 ubox
24 94 0.908871477 ubox
25 92 0.020493750 ubox
25 93 0.909111012 ubox
25 94 0.415288316 ubox
26 92 0.908022397 ubox
26 93 0.415744747 ubox
27 91 0.750968229 ubox
28 90 0.550904578 ubox
28 91 0.659983099 ubox
29 90 0.834469906 ubox
30 87 0.038276424 ubox
30 89 0.978029873 ubox
31 86 0.028406568 ubox
31 88 0.984012537 ubox
32 86 0.956046832 ubox
33 85 0.956010952 ubox
34 84 0.948502698 ubox
34 85 0.293157174 ubox
35 84 0.296640856 ubox
36 82 0.966534111 ubox
37 80 0.006651544 ubox
37 81 0.994948892 ubox
38 79 0.009863786 ubox
39 78 0.008612625 ubox
39 79 0.999821200 ubox
40 76 0.006342916 ubox
40 78 0.999943374 ubox
41 75 0.006371438 ubox
41 77 0.996722423 ubox
42 73 0.006134450 ubox
43 72 0.006213168 ubox
43 76 0.994192396 ubox
44 71 0.006212351 ubox
44 75 0.993963739 ubox
44 77 0.004239244 ubox
45 70 0.004632477 ubox
45 73 0.007782825 ubox
46 72 0.004519392 ubox
46 74 0.226213540 ubox
47 73 0.208997361 ubox
48 72 0.176565983 ubox
48 73 0.018931199 ubox
48 74 0.127253200 ubox
49 70 0.004659244 ubox
49 72 0.025429121 ubox
49 73 0.112017384 ubox
49 74 0.958492736 ubox
50 70 0.129846274 ubox
50 72 0.094241972 ubox
50 73 0.967119075 ubox
50 74 0.076111507 ubox
51 69 0.073268968 ubox
51 70 0.016594122 ubox
51 72 0.976224398 ubox
51 73 0.072485293 ubox
52 69 0.009880534 ubox
52 72 0.073024078 ubox
53 70 0.985817775 ubox
54 67 0.017712746 ubox
54 69 0.997228716 ubox
55 65 0.045381519 ubox
55 66 0.012556651 ubox
55 68 0.998855502 ubox
56 64 0.047127125 ubox
56 67 0.998869436 ubox
57 63 0.047138521 ubox
57 66 0.998883578 ubox
58 62 0.046796517 ubox
58 65 0.998833811 ubox
59 64 0.979945343 ubox
8 19 0.9500000 lbox
9 18 0.9500000 lbox
10 17 0.9500000 lbox
11 16 0.9500000 lbox
22 97 0.9500000 lbox
23 96 0.9500000 lbox
24 94 0.9500000 lbox
25 93 0.9500000 lbox
26 92 0.9500000 lbox
27 91 0.9500000 lbox
28 90 0.9500000 lbox
30 89 0.9500000 lbox
31 88 0.9500000 lbox
32 86 0.9500000 lbox
33 85 0.9500000 lbox
34 84 0.9500000 lbox
36 82 0.9500000 lbox
37 81 0.9500000 lbox
39 79 0.9500000 lbox
40 78 0.9500000 lbox
41 77 0.9500000 lbox
43 76 0.9500000 lbox
44 75 0.9500000 lbox
49 74 0.9500000 lbox
50 73 0.9500000 lbox
51 72 0.9500000 lbox
53 70 0.9500000 lbox
54 69 0.9500000 lbox
55 68 0.9500000 lbox
56 67 0.9500000 lbox
57 66 0.9500000 lbox
58 65 0.9500000 lbox
59 64 0.9500000 lbox
showpage
end
%%EOF
