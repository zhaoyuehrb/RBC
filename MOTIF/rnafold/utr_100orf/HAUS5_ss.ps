%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCACACUUGAAGAGGCUGAGGGAGGCGGUGUCGCCGCCGCGGCGCUGUCAUGGAGCUAGCGCAGGAAGCGCGGGAACUGGGUUGCUGGGCGGUCGAAGAGAUGGGGGUGCCCGUGGCGGCCCGGGCCCCGGAAUCGACGCUGCGCAGGC\
) } def
/len { sequence length } bind def

/coor [
[85.68691254 181.51957703]
[88.27528381 162.31150818]
[88.58528900 147.31471252]
[88.89529419 132.31791687]
[83.59198761 127.01461029]
[76.13008881 140.02691650]
[75.27832794 155.00271606]
[65.45786285 166.34107971]
[50.75699997 169.32179260]
[37.29577637 162.70397949]
[30.67816544 149.24264526]
[33.65910339 134.54183960]
[44.99761581 124.72154236]
[59.97308731 123.86991119]
[72.98538971 116.40801239]
[67.68209076 111.10470581]
[52.68529129 111.41471100]
[37.68849564 111.72471619]
[22.69169998 112.03472137]
[17.53582001 123.95107269]
[8.27403641 132.98362732]
[-3.68082380 137.80422974]
[-16.52388382 137.72349548]
[-28.33069992 132.78913879]
[-37.34561920 123.77344513]
[-42.24283600 112.05270386]
[-57.23963165 111.74269867]
[-72.23642731 111.43269348]
[-87.23322296 111.12269592]
[-102.23001862 110.81269073]
[-117.22681427 110.50268555]
[-132.22361755 110.19268036]
[-147.22041321 109.88268280]
[-162.21720886 109.57267761]
[-177.21400452 109.26267242]
[-192.21080017 108.95266724]
[-206.31068420 117.32675934]
[-220.47845459 109.06806183]
[-220.13954163 92.67241669]
[-205.64256287 85.00625610]
[-191.90078735 93.95587158]
[-176.90399170 94.26587677]
[-161.90719604 94.57588196]
[-146.91040039 94.88587952]
[-131.91360474 95.19588470]
[-116.91680908 95.50588989]
[-101.92001343 95.81589508]
[-86.92321777 96.12590027]
[-71.92642212 96.43589783]
[-56.92962646 96.74590302]
[-41.93283081 97.05590820]
[-33.60448837 82.04639435]
[-18.76454926 73.24451447]
[-1.42240691 73.13228607]
[13.68379498 81.82978821]
[22.38169479 97.03792572]
[37.37849045 96.72792053]
[52.37528992 96.41791534]
[67.37208557 96.10791016]
[91.22451019 74.90060425]
[114.28119659 85.54589081]
[128.01779175 79.52045441]
[141.75439453 73.49502563]
[155.49099731 67.46959686]
[169.22760010 61.44416046]
[182.96418762 55.41873169]
[184.90539551 41.73634720]
[193.30029297 30.89588737]
[205.86134338 25.67594147]
[219.25152588 27.34698296]
[229.97071838 35.36399841]
[243.82891846 29.62374878]
[257.43804932 23.31571007]
[270.77490234 16.45066452]
[284.11172485 9.58561802]
[297.44854736 2.72057223]
[302.36117554 -12.06131172]
[315.98440552 -18.83345604]
[330.04638672 -14.05894566]
[343.38323975 -20.92399216]
[356.72006226 -27.78903770]
[370.05688477 -34.65408325]
[383.39373779 -41.51913071]
[396.73056030 -48.38417816]
[410.06741333 -55.24922180]
[423.40423584 -62.11426926]
[436.74105835 -68.97931671]
[450.07791138 -75.84436035]
[463.27001953 -82.98357391]
[476.31173706 -90.39389801]
[489.35348511 -97.80422211]
[502.39523315 -105.21454620]
[515.43695068 -112.62487793]
[523.61315918 -126.16965485]
[538.50128174 -125.73001099]
[551.54296875 -133.14033508]
[551.56860352 -148.49920654]
[559.28405762 -161.77954102]
[572.61395264 -169.40898132]
[587.97271729 -169.33526611]
[601.22875977 -161.57821655]
[608.81640625 -148.22442627]
[608.69451904 -132.86601257]
[600.89599609 -119.63431549]
[587.51849365 -112.08858490]
[572.16052246 -112.25859070]
[558.95330811 -120.09859467]
[545.91156006 -112.68826294]
[538.66827393 -99.67352295]
[522.84729004 -99.58312988]
[509.80557251 -92.17280579]
[496.76382446 -84.76248169]
[483.72207642 -77.35215759]
[470.68032837 -69.94182587]
[468.56030273 -65.59812927]
[463.65643311 -62.57134247]
[456.94293213 -62.50752640]
[443.60610962 -55.64247894]
[430.26928711 -48.77743530]
[416.93243408 -41.91238785]
[403.59561157 -35.04734421]
[390.25878906 -28.18229675]
[376.92193604 -21.31724930]
[363.58511353 -14.45220375]
[350.24826050 -7.58715773]
[336.91143799 -0.72211182]
[332.62606812 13.49658012]
[319.19842529 20.64870071]
[304.31359863 16.05740547]
[290.97677612 22.92245293]
[277.63992310 29.78749847]
[264.30310059 36.65254593]
[263.33386230 39.34692383]
[261.20495605 41.80645752]
[258.00527954 43.57457733]
[253.99180603 44.23731232]
[249.56916809 43.48194122]
[235.71098328 49.22219086]
[232.41117859 65.27333832]
[220.08613586 76.32241821]
[203.44104004 77.88647461]
[188.98962402 69.15532684]
[175.25302124 75.18076324]
[161.51643372 81.20619202]
[147.77983093 87.23162079]
[134.04322815 93.25705719]
[120.30662537 99.28248596]
[120.19241333 117.29900360]
[103.89208984 132.62791443]
[103.58208466 147.62471008]
[103.27207947 162.62150574]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 151]
[3 150]
[4 149]
[16 59]
[17 58]
[18 57]
[19 56]
[26 51]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
[36 41]
[61 147]
[62 146]
[63 145]
[64 144]
[65 143]
[66 142]
[71 138]
[72 137]
[73 132]
[74 131]
[75 130]
[76 129]
[79 126]
[80 125]
[81 124]
[82 123]
[83 122]
[84 121]
[85 120]
[86 119]
[87 118]
[88 117]
[89 114]
[90 113]
[91 112]
[92 111]
[93 110]
[95 108]
[96 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
