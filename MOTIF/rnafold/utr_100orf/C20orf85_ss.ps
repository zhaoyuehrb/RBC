%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCAGAGCUUGCGGGGCGCACAGAGCCCCCAGGCCUCAUGGCGCAGAAACCUCUCAGCACCGCGGCGGCUGAACGCAUGAACCUUGUGGGUCAGGAUGAGAUCUGGAAAUACCGUCUGAAGGCUGAAUCGGAAGCAC\
) } def
/len { sequence length } bind def

/coor [
[76.89012146 138.90678406]
[65.98590088 129.84701538]
[53.22739410 137.73503113]
[40.46889114 145.62303162]
[27.71038818 153.51103210]
[15.04183769 161.54270935]
[2.46485782 169.71702576]
[-10.11212254 177.89135742]
[-22.59592628 186.20727539]
[-34.98495865 194.66375732]
[-47.37399292 203.12022400]
[-59.76302338 211.57669067]
[-65.14423370 219.06436157]
[-72.52897644 220.08056641]
[-85.10595703 228.25488281]
[-97.68292999 236.42921448]
[-110.25991058 244.60353088]
[-122.83689117 252.77786255]
[-124.55706787 268.32055664]
[-135.90109253 279.08377075]
[-151.51264954 279.98550415]
[-164.02046204 270.59991455]
[-167.51870728 255.35865784]
[-160.35562134 241.45814514]
[-145.91340637 235.46179199]
[-131.01121521 240.20088196]
[-118.43423462 232.02655029]
[-105.85725403 223.85223389]
[-93.28027344 215.67790222]
[-80.70330048 207.50358582]
[-68.21949005 199.18765259]
[-55.83045959 190.73118591]
[-43.44142914 182.27471924]
[-31.05239487 173.81825256]
[-27.26936913 167.39518738]
[-18.28644562 165.31437683]
[-5.70946598 157.14004517]
[6.86751413 148.96572876]
[10.79473114 142.62979126]
[19.82238579 140.75253296]
[32.58089066 132.86451721]
[45.33939362 124.97652435]
[58.09789658 117.08851624]
[54.78171158 101.76358032]
[56.89424515 86.22691345]
[64.18187714 72.34378815]
[75.76968384 61.78095245]
[90.26647949 55.80653381]
[105.93183899 55.13779831]
[120.88504791 59.85503006]
[133.33088684 69.39189911]
[145.90786743 61.21757507]
[149.19369507 44.07665253]
[163.55427551 34.76300812]
[179.88946533 38.59980011]
[192.27850342 30.14332962]
[204.66752625 21.68686104]
[217.05656433 13.23039150]
[229.44560242 4.77392244]
[227.24920654 -10.29051495]
[231.79277039 -24.75574875]
[242.12400818 -35.76873779]
[256.15469360 -41.18176651]
[271.08264160 -39.97116470]
[283.95132446 -32.43043137]
[296.34036255 -40.88689804]
[308.72937012 -49.34336853]
[321.11840820 -57.79983902]
[333.50744629 -66.25630951]
[344.05395508 -76.92266846]
[352.36987305 -89.40647125]
[360.68582153 -101.89027405]
[369.00173950 -114.37408447]
[369.71575928 -132.73530579]
[385.66363525 -139.97204590]
[393.69531250 -152.64059448]
[401.72698975 -165.30914307]
[409.75866699 -177.97769165]
[404.85147095 -192.82536316]
[410.68423462 -207.33442688]
[424.50292969 -214.65412903]
[439.78274536 -211.32835388]
[449.30905151 -198.92739868]
[448.58383179 -183.30664062]
[437.94946289 -171.84172058]
[422.42721558 -169.94601440]
[414.39553833 -157.27746582]
[406.36386108 -144.60891724]
[398.33218384 -131.94036865]
[400.66503906 -120.01714325]
[394.00607300 -109.37797546]
[381.48553467 -106.05815125]
[373.16961670 -93.57434845]
[364.85366821 -81.09054565]
[356.53775024 -68.60674286]
[370.32916260 -74.50568390]
[385.28106689 -75.70582581]
[399.83679199 -72.08221436]
[412.48089600 -64.01211548]
[421.89697266 -52.33574677]
[427.10464478 -38.26876068]
[427.56176758 -23.27572823]
[423.22070312 -8.91762161]
[414.53344727 3.31068683]
[402.40444946 12.13606644]
[388.09649658 16.63967514]
[373.09924316 16.35263062]
[358.97412109 11.30481243]
[347.19171143 2.02177048]
[338.97872925 -10.53000736]
[335.19027710 -25.04371262]
[336.22076416 -40.00827408]
[341.96392822 -53.86727524]
[329.57489014 -45.41080475]
[317.18585205 -36.95433426]
[304.79681396 -28.49786758]
[292.40777588 -20.04139900]
[294.74166870 -5.30984974]
[290.43020630 9.03312492]
[280.27731323 20.12725258]
[266.25723267 25.73591614]
[251.13084412 24.69693565]
[237.90206909 17.16295433]
[225.51303101 25.61942482]
[213.12399292 34.07589340]
[200.73497009 42.53236389]
[188.34593201 50.98883057]
[187.73838806 63.90863800]
[179.65925598 74.25771332]
[166.89942932 78.09487915]
[154.08218384 73.79455566]
[141.50521851 81.96887970]
[145.04751587 95.69598389]
[144.16865540 109.84549713]
[138.95486450 123.02873230]
[129.91786194 133.95181274]
[117.94456482 141.54270935]
[104.21011353 145.05639648]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 43]
[3 42]
[4 41]
[5 40]
[6 38]
[7 37]
[8 36]
[9 34]
[10 33]
[11 32]
[12 31]
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[51 132]
[52 131]
[55 127]
[56 126]
[57 125]
[58 124]
[59 123]
[65 117]
[66 116]
[67 115]
[68 114]
[69 113]
[70 95]
[71 94]
[72 93]
[73 92]
[75 89]
[76 88]
[77 87]
[78 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
