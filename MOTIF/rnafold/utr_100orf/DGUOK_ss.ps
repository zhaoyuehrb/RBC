%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:03:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGGUGCGCUGGAGCGAGUGAGCAGCGAUACCUAGGGCGGAAGUGCUCUCGGCGGAAGUGAUCGCUGUGUGAAUCGUGGGUGGGAUGGCCGCGGGCCGCCUCUUUCUAAGUCGGCUUCGAGCACCCUUCAGUUCCAUGGCCAAGAGCCCACUCGAGGGCGUUUCCUCCUCCAGAGGCCUGCACG\
) } def
/len { sequence length } bind def

/coor [
[76.32941437 586.66357422]
[78.65106201 571.19927979]
[90.40396881 560.88409424]
[89.89735413 545.89263916]
[89.39073944 530.90118408]
[86.01517487 524.30792236]
[89.00433350 515.65270996]
[88.75099182 500.65487671]
[78.92001343 486.12930298]
[87.96119690 470.09912109]
[87.45458984 455.10766602]
[86.94797516 440.11624146]
[86.44136047 425.12478638]
[85.93475342 410.13336182]
[85.42813873 395.14190674]
[82.05257416 388.54864502]
[85.04173279 379.89346313]
[84.78839111 364.89559937]
[84.53504944 349.89773560]
[76.58389282 337.30294800]
[84.08701324 323.37408447]
[83.83367157 308.37622070]
[83.58032990 293.37835693]
[83.32698822 278.38049316]
[80.06325531 271.73114014]
[83.19816589 263.12768555]
[83.19816589 248.12768555]
[81.29050446 246.04542542]
[80.10203552 243.07389832]
[79.97870636 239.48661804]
[81.15985107 235.67825317]
[83.73899841 232.12359619]
[84.75164795 217.15782166]
[85.76429749 202.19203186]
[78.90386200 188.97145081]
[87.55515289 175.72511292]
[88.56780243 160.75933838]
[89.58044434 145.79354858]
[82.72001648 132.57296753]
[91.37130737 119.32662964]
[92.38395691 104.36084747]
[90.55986786 101.88886261]
[89.60350037 98.69301605]
[89.78664398 95.09663391]
[91.25662994 91.51955414]
[94.00398254 88.42978668]
[96.02465820 73.56651306]
[98.04533386 58.70323944]
[100.06600189 43.83996582]
[102.08667755 28.97669220]
[96.27893829 14.26000690]
[105.66022491 2.69104862]
[107.68089294 -12.17222404]
[109.70156860 -27.03549767]
[111.34506226 -41.94519043]
[112.61032867 -56.89173126]
[113.87559509 -71.83827209]
[115.14086151 -86.78481293]
[108.59519958 -101.18845367]
[117.37847900 -113.21772003]
[118.64374542 -128.16426086]
[119.90901184 -143.11079407]
[107.41410065 -151.93261719]
[101.05447388 -165.73304749]
[102.44714355 -180.76391602]
[111.11837769 -192.99771118]
[124.65769196 -199.20677185]
[125.92295837 -214.15332031]
[127.18822479 -229.09985352]
[120.64255524 -243.50349426]
[129.42584229 -255.53276062]
[130.69110107 -270.47930908]
[131.95637512 -285.42584229]
[133.22163391 -300.37237549]
[134.36064148 -315.32907104]
[135.37327576 -330.29486084]
[136.38592529 -345.26062012]
[137.01911926 -360.24725342]
[137.27247620 -375.24511719]
[137.52581787 -390.24298096]
[137.77915955 -405.24084473]
[127.19948578 -422.38311768]
[137.80746460 -438.53451538]
[137.55412292 -453.53237915]
[137.30078125 -468.53024292]
[134.02101135 -477.07952881]
[137.17196655 -483.78305054]
[137.17196655 -498.78305054]
[137.17196655 -513.78308105]
[137.17196655 -528.78308105]
[137.17196655 -543.78308105]
[131.12562561 -559.62219238]
[144.67196655 -569.81695557]
[158.21830750 -559.62219238]
[152.17196655 -543.78308105]
[152.17196655 -528.78308105]
[152.17196655 -513.78308105]
[152.17196655 -498.78305054]
[152.17196655 -483.78305054]
[152.29864502 -468.78359985]
[152.55198669 -453.78573608]
[152.80532837 -438.78787231]
[160.77926636 -432.35546875]
[163.95167542 -422.38311768]
[161.04028320 -412.10275269]
[152.77700806 -404.98748779]
[152.52366638 -389.98965454]
[152.27032471 -374.99179077]
[152.01698303 -359.99392700]
[154.21179199 -357.20806885]
[155.15447998 -353.21356201]
[154.28857422 -348.61602783]
[151.35171509 -344.24798584]
[150.33906555 -329.28219604]
[149.32641602 -314.31643677]
[152.01763916 -307.41546631]
[148.16818237 -299.10711670]
[146.90290833 -284.16058350]
[145.63764954 -269.21401978]
[144.37239075 -254.26748657]
[151.00854492 -240.93292236]
[142.13476562 -227.83459473]
[140.86950684 -212.88804626]
[139.60423279 -197.94151306]
[151.90713501 -189.54483032]
[158.39846802 -176.02748108]
[157.24461365 -160.97639465]
[148.65560913 -148.44140625]
[134.85556030 -141.84553528]
[133.59028625 -126.89899445]
[132.32502747 -111.95245361]
[138.96118164 -98.61788940]
[130.08740234 -85.51954651]
[128.82214355 -70.57300568]
[127.55686951 -55.62646484]
[126.29160309 -40.67992401]
[128.29331970 -37.75224304]
[128.96418762 -33.70321655]
[127.78990173 -29.17463875]
[124.56484222 -25.01482582]
[122.54416656 -10.15155220]
[120.52349854 4.71172047]
[126.47576141 18.36528397]
[116.94994354 30.99736404]
[114.92927551 45.86063766]
[112.90859985 60.72391129]
[110.88793182 75.58718109]
[108.86725616 90.45045471]
[107.34973145 105.37349701]
[106.33708954 120.33927155]
[113.12509155 134.63031006]
[104.54622650 146.80619812]
[103.53358459 161.77197266]
[102.52093506 176.73776245]
[109.30893707 191.02879333]
[100.73007202 203.20468140]
[99.71743011 218.17045593]
[98.70478058 233.13624573]
[98.19816589 248.12768555]
[98.19816589 263.12768555]
[98.32484436 278.12713623]
[98.57818604 293.12500000]
[98.83152771 308.12286377]
[99.08486938 323.12072754]
[107.05414581 336.78826904]
[99.53290558 349.64437866]
[99.78624725 364.64224243]
[100.03958893 379.64010620]
[100.41957855 394.63528442]
[100.92619324 409.62673950]
[101.43280792 424.61819458]
[101.93941498 439.60961914]
[102.44602966 454.60107422]
[102.95264435 469.59249878]
[111.83338928 478.96609497]
[111.93489075 491.47702026]
[103.74884796 500.40155029]
[104.00218964 515.39941406]
[104.38218689 530.39459229]
[104.88879395 545.38604736]
[105.39540863 560.37744141]
[117.81787109 569.87567139]
[121.17821503 585.14794922]
[113.88978577 598.98315430]
[99.39396667 604.84875488]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 181]
[4 180]
[5 179]
[7 178]
[8 177]
[10 174]
[11 173]
[12 172]
[13 171]
[14 170]
[15 169]
[17 168]
[18 167]
[19 166]
[21 164]
[22 163]
[23 162]
[24 161]
[26 160]
[27 159]
[32 158]
[33 157]
[34 156]
[36 154]
[37 153]
[38 152]
[40 150]
[41 149]
[46 148]
[47 147]
[48 146]
[49 145]
[50 144]
[52 142]
[53 141]
[54 140]
[55 136]
[56 135]
[57 134]
[58 133]
[60 131]
[61 130]
[62 129]
[67 124]
[68 123]
[69 122]
[71 120]
[72 119]
[73 118]
[74 117]
[75 115]
[76 114]
[77 113]
[78 109]
[79 108]
[80 107]
[81 106]
[83 102]
[84 101]
[85 100]
[87 99]
[88 98]
[89 97]
[90 96]
[91 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
