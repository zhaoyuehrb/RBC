%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:50:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGGGUUUCAGUUUCUGGCGCGAACUUCCGCCGUUCCGAAGUUGCACGGUGAAUUGGCGCUAUGUCUGGGGACAGCAGCGGCCGCGGGCCAGAGGGCCGGGGCCGGGGCCGCGACCCGCAUCGGGAUCGCACCCGCUCCCGCUCCCGCUCGCGGUCCCCUU\
) } def
/len { sequence length } bind def

/coor [
[86.72000122 201.76937866]
[79.03192139 187.28401184]
[87.96074677 173.52871704]
[88.24806976 158.53147888]
[88.53539276 143.53422546]
[88.82271576 128.53697205]
[89.11003876 113.53972626]
[87.14644623 114.08869171]
[85.07683563 114.44099426]
[82.91835785 114.58585358]
[68.38107300 118.28279114]
[53.84379196 121.97973633]
[39.30650711 125.67667389]
[24.76922226 129.37361145]
[10.23193836 133.07055664]
[-4.30534601 136.76750183]
[-18.80655479 140.60350037]
[-33.27035522 144.57823181]
[-47.73415756 148.55294800]
[-54.80035400 159.37969971]
[-66.96419525 162.37489319]
[-77.54824829 156.45782471]
[-92.08553314 160.15476990]
[-99.67338562 165.32553101]
[-106.93669891 163.78045654]
[-121.54212952 167.19825745]
[-136.14756775 170.61605835]
[-150.75299072 174.03385925]
[-165.35842896 177.45166016]
[-179.96385193 180.86946106]
[-185.03096008 195.44094849]
[-197.18568420 204.94178772]
[-212.54953003 206.34030151]
[-226.21994019 199.19021606]
[-233.83473206 185.77311707]
[-232.96405029 170.37034607]
[-223.88572693 157.89686584]
[-209.49664307 152.33291626]
[-194.38827515 155.45394897]
[-183.38165283 166.26403809]
[-168.77622986 162.84623718]
[-154.17079163 159.42842102]
[-139.56536865 156.01062012]
[-124.95993042 152.59281921]
[-110.35449982 149.17501831]
[-95.78247833 145.61749268]
[-81.24519348 141.92054749]
[-69.38667297 129.01141357]
[-51.70888138 134.08914185]
[-37.24507904 130.11442566]
[-22.78127670 126.13970184]
[-17.13848305 121.31249237]
[-8.00228691 122.23020935]
[6.53499699 118.53327179]
[21.07228088 114.83633423]
[35.60956573 111.13938904]
[50.14685059 107.44245148]
[64.68413544 103.74550629]
[79.22142029 100.04856873]
[85.74816132 86.54295349]
[79.61212921 72.85540009]
[73.47609711 59.16784286]
[67.34007263 45.48028946]
[52.17529678 35.07273483]
[54.58965683 17.71067810]
[48.19256973 4.14317083]
[41.79548264 -9.42433739]
[35.39839554 -22.99184608]
[21.62395096 -31.89110184]
[22.71384239 -48.25399017]
[37.54687881 -55.24777603]
[50.86410522 -45.67784882]
[48.96590042 -29.38893318]
[55.36298752 -15.82142448]
[61.76007462 -2.25391650]
[68.15716553 11.31359196]
[79.45613861 15.71438885]
[84.88452911 27.00433159]
[81.02762604 39.34426117]
[87.16365814 53.03181458]
[93.29968262 66.71936798]
[99.43571472 80.40692139]
[112.47371674 87.82382202]
[127.37474823 86.10356903]
[142.27578735 84.38331604]
[157.17681885 82.66307068]
[172.07785034 80.94281769]
[186.97888184 79.22256470]
[201.87991333 77.50231171]
[216.78094482 75.78205872]
[231.68197632 74.06181335]
[235.15190125 71.27814484]
[238.94868469 69.91093445]
[242.57765198 69.88591003]
[245.62118530 70.97291565]
[247.78366089 72.82560730]
[262.77267456 72.25106812]
[277.76165771 71.67652893]
[293.08352661 61.50168228]
[308.28436279 70.23123932]
[323.25958252 69.36969757]
[338.23483276 68.50814819]
[353.21008301 67.64659882]
[368.18530273 66.78504944]
[381.51828003 58.26788712]
[394.66894531 65.26140594]
[409.64419556 64.39985657]
[424.61944580 63.53831100]
[439.59466553 62.67676163]
[446.39019775 54.10881042]
[456.57839966 50.78876114]
[466.69281006 53.59066772]
[473.43139648 61.34766388]
[488.42864990 61.06034088]
[503.42590332 60.77301788]
[518.42315674 60.48569489]
[533.41693115 60.05474091]
[548.40594482 59.48020172]
[563.39495850 58.90565872]
[578.38391113 58.33111954]
[593.97985840 51.68253326]
[604.68597412 64.82844543]
[595.01757812 78.75533295]
[578.95849609 73.32011414]
[563.96948242 73.89465332]
[548.98046875 74.46919250]
[533.99151611 75.04373169]
[527.39721680 78.45822906]
[518.71044922 75.48294067]
[503.71322632 75.77026367]
[488.71597290 76.05758667]
[473.71871948 76.34490967]
[457.98715210 87.54119110]
[440.45620728 77.65200043]
[425.48098755 78.51354980]
[410.50573730 79.37509155]
[395.53051758 80.23664093]
[383.26864624 88.69218445]
[369.04684448 81.76028442]
[354.07162476 82.62183380]
[339.09637451 83.48338318]
[324.12115479 84.34493256]
[309.14590454 85.20648193]
[300.84039307 94.04121399]
[288.33972168 94.85569000]
[278.33618164 86.66551971]
[263.34719849 87.24005890]
[248.35821533 87.81460571]
[233.40222168 88.96284485]
[218.50119019 90.68309021]
[203.60015869 92.40334320]
[188.69912720 94.12359619]
[173.79809570 95.84384918]
[158.89706421 97.56410217]
[143.99603271 99.28434753]
[129.09500122 101.00460052]
[114.19396973 102.72485352]
[104.10728455 113.82704926]
[103.81996155 128.82429504]
[103.53263855 143.82154846]
[103.24531555 158.81880188]
[102.95799255 173.81604004]
[111.35340118 187.90324402]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 162]
[4 161]
[5 160]
[6 159]
[7 158]
[10 59]
[11 58]
[12 57]
[13 56]
[14 55]
[15 54]
[16 53]
[17 51]
[18 50]
[19 49]
[22 47]
[23 46]
[25 45]
[26 44]
[27 43]
[28 42]
[29 41]
[30 40]
[60 82]
[61 81]
[62 80]
[63 79]
[65 76]
[66 75]
[67 74]
[68 73]
[83 157]
[84 156]
[85 155]
[86 154]
[87 153]
[88 152]
[89 151]
[90 150]
[91 149]
[96 148]
[97 147]
[98 146]
[100 143]
[101 142]
[102 141]
[103 140]
[104 139]
[106 137]
[107 136]
[108 135]
[109 134]
[113 132]
[114 131]
[115 130]
[116 129]
[117 127]
[118 126]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
