%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:45:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCGGCGGCGCUCUCCCGCGUCACAGCGCCGGGCGGCGGCGGGGAGAUGCGGCUGCUGGCACUGGCGGCGGCCGCGCUGCUGGCGCGGGCUCCGGCUCCGGAGGUCUGUGCGGCCCUCAAUGUCACUGUGUCCCCGGGGCCCGUGG\
) } def
/len { sequence length } bind def

/coor [
[224.27754211 137.12199402]
[216.70568848 133.69085693]
[211.07423401 127.44808197]
[208.37884521 119.38469696]
[193.94635010 115.29777527]
[179.51385498 111.21084595]
[165.08134460 107.12391663]
[150.64884949 103.03699493]
[136.21635437 98.95006561]
[121.78385162 94.86313629]
[116.53163147 112.72673798]
[100.52336884 119.33759308]
[86.48345184 111.62245941]
[72.05094910 115.70938873]
[57.61845016 119.79631805]
[43.18595123 123.88323975]
[28.75345230 127.97016907]
[14.32095337 132.05709839]
[6.85483503 137.44187927]
[-0.46136418 136.07411194]
[-14.97735882 139.85377502]
[-29.49335289 143.63345337]
[-44.00934601 147.41313171]
[-49.75371933 161.70677185]
[-62.66229630 169.78279114]
[-77.67356873 168.72175598]
[-89.04549408 159.13963318]
[-103.56149292 162.91929626]
[-112.88855743 175.97247314]
[-128.91622925 176.67486572]
[-139.34944153 164.48768616]
[-136.18473816 148.75987244]
[-121.84979248 141.55645752]
[-107.34116364 148.40330505]
[-92.82516479 144.62362671]
[-87.57046509 130.71226501]
[-74.98287964 122.46504211]
[-59.77487564 123.22007751]
[-47.78901672 132.89712524]
[-33.27302170 129.11746216]
[-18.75702858 125.33779144]
[-4.24103498 121.55812073]
[10.23402691 117.62459564]
[24.66652489 113.53766632]
[39.09902573 109.45074463]
[53.53152466 105.36381531]
[67.96401978 101.27688599]
[82.39652252 97.18996429]
[87.26555634 84.44371033]
[100.90702820 77.63706207]
[94.15396881 64.24317169]
[87.40091705 50.84928894]
[80.64785767 37.45539856]
[73.89479828 24.06151199]
[67.14174652 10.66762352]
[60.38869095 -2.72626424]
[53.63563156 -16.12015152]
[46.88257599 -29.51403999]
[40.12952042 -42.90792847]
[24.86736870 -46.31391525]
[15.40631676 -58.76471710]
[16.21358299 -74.38144684]
[26.90800285 -85.79036713]
[42.43999863 -87.60453033]
[55.47583389 -78.96733856]
[59.86038589 -63.95702362]
[53.52340698 -49.66098404]
[60.27646637 -36.26709747]
[67.02951813 -22.87320900]
[73.78257751 -9.47932053]
[80.53563690 3.91456747]
[87.28868866 17.30845451]
[94.04174805 30.70234299]
[100.79479980 44.09622955]
[107.54785919 57.49011993]
[114.30091095 70.88401031]
[125.87078094 80.43064117]
[140.30328369 84.51756287]
[154.73577881 88.60449219]
[169.16827393 92.69142151]
[183.60078430 96.77834320]
[198.03327942 100.86527252]
[212.46577454 104.95220184]
[233.64425659 97.73872375]
[248.37867737 113.55879974]
[263.10577393 116.40704346]
[277.83288574 119.25528717]
[292.55996704 122.10353088]
[307.28707886 124.95177460]
[322.01419067 127.80001068]
[336.74127197 130.64825439]
[351.46838379 133.49650574]
[366.19549561 136.34474182]
[380.92257690 139.19297791]
[395.64968872 142.04122925]
[410.37680054 144.88946533]
[414.57128906 143.25735474]
[418.64825439 143.10482788]
[422.14501953 144.20449829]
[424.72470093 146.19892883]
[426.20843506 148.65478516]
[440.64093018 152.74171448]
[455.07342529 156.82862854]
[464.61392212 146.54785156]
[477.59689331 141.41918945]
[491.45553589 142.39506531]
[503.47634888 149.22700500]
[511.33059692 160.52558899]
[513.52514648 174.04264832]
[527.86761475 178.43498230]
[542.21014404 182.82733154]
[556.59844971 187.06719971]
[571.03094482 191.15412903]
[583.14324951 181.45506287]
[598.64477539 180.76139832]
[611.57495117 189.33988953]
[616.96179199 203.89190674]
[612.73400879 218.82192993]
[600.51721191 228.38902283]
[585.00903320 228.91447449]
[572.17266846 220.19622803]
[566.94403076 205.58662415]
[552.51153564 201.49969482]
[545.16790771 202.71186829]
[537.81781006 197.16983032]
[523.47528076 192.77748108]
[509.13278198 188.38514709]
[497.61334229 199.67166138]
[481.88830566 203.65103149]
[466.20687866 199.15072632]
[454.85559082 187.30284119]
[450.98648071 171.26113892]
[436.55398560 167.17420959]
[422.12149048 163.08728027]
[407.52853394 159.61656189]
[392.80145264 156.76832581]
[378.07434082 153.92008972]
[363.34722900 151.07183838]
[348.62014771 148.22360229]
[333.89303589 145.37535095]
[319.16592407 142.52711487]
[304.43884277 139.67887878]
[289.71173096 136.83062744]
[274.98461914 133.98239136]
[260.25753784 131.13414001]
[245.53042603 128.28590393]
[239.98646545 134.09434509]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 83]
[5 82]
[6 81]
[7 80]
[8 79]
[9 78]
[10 77]
[13 48]
[14 47]
[15 46]
[16 45]
[17 44]
[18 43]
[20 42]
[21 41]
[22 40]
[23 39]
[27 35]
[28 34]
[50 76]
[51 75]
[52 74]
[53 73]
[54 72]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
[85 146]
[86 145]
[87 144]
[88 143]
[89 142]
[90 141]
[91 140]
[92 139]
[93 138]
[94 137]
[95 136]
[96 135]
[101 134]
[102 133]
[103 132]
[109 127]
[110 126]
[111 125]
[112 123]
[113 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
