%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:45:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGGGAGUGAAAGCGAAAGCCCGGGCGACUAGCCGGGAGACCAGAGAUCUAGCGACUGAAGCAGCAUGGCCAAGCCGUGUGGGGUGCGCCUGAGCGGGGAAGCCCGCAAACAGGUGGAGGUCUUCAGACAGAAUCUUUUCCAGGAGGCUGAGGAAUUCCUCUACA\
) } def
/len { sequence length } bind def

/coor [
[114.23235321 235.14543152]
[124.94119263 223.52233887]
[124.09001160 208.54650879]
[123.23883057 193.57067871]
[122.38764954 178.59484863]
[121.53647614 163.61901855]
[120.68529510 148.64318848]
[119.83411407 133.66735840]
[112.63429260 131.56674194]
[108.43283081 145.96632385]
[94.03332520 141.76461792]
[98.23464966 127.36552429]
[91.03482819 125.26491547]
[82.26404572 137.43345642]
[81.15084076 153.79476929]
[66.30785370 160.76741028]
[53.00427628 151.17852783]
[54.92568588 134.89233398]
[70.09550476 128.66267395]
[78.86628723 116.49413300]
[69.09222412 105.11573792]
[55.74003983 111.95088196]
[46.98157501 125.12660980]
[32.12674713 124.03879547]
[18.77456284 130.87393188]
[5.42237616 137.70907593]
[-0.85481459 152.47309875]
[-16.34953308 156.63162231]
[-29.17555618 146.99456787]
[-29.49385643 130.95468140]
[-17.06026268 120.81636810]
[-1.41276300 124.35688782]
[11.93942356 117.52175140]
[25.29160881 110.68661499]
[33.09503555 97.99977875]
[48.90489960 98.59869385]
[62.25708771 91.76355743]
[69.46846008 78.61075592]
[68.05118561 63.67786407]
[66.63391113 48.74496841]
[65.21662903 33.81207657]
[63.79935455 18.87918091]
[56.53914642 17.41977692]
[49.68886185 14.64186192]
[43.48519516 10.64676285]
[38.14150238 5.57776976]
[33.84046555 -0.38499865]
[30.72784424 -7.03099585]
[28.90755081 -14.12667942]
[28.43817711 -21.42371559]
[29.33112526 -28.66767120]
[31.55038261 -35.60688782]
[19.05865860 -43.91091537]
[4.10823774 -39.32627487]
[-10.27116203 -45.47175217]
[-17.29002571 -59.44564056]
[-13.63426304 -74.64989471]
[-1.03001225 -83.90553284]
[14.57138538 -82.84233093]
[25.80342674 -71.96228790]
[27.36268425 -56.40263748]
[39.85440826 -48.09861374]
[41.87822342 -55.67033768]
[45.65465546 -63.19758606]
[39.58820343 -76.91612244]
[33.52175140 -90.63465118]
[27.45530128 -104.35318756]
[21.38884926 -118.07171631]
[15.32239628 -131.79025269]
[9.25594425 -145.50878906]
[-2.67967248 -157.54943848]
[5.58632231 -172.35179138]
[22.09844971 -168.50653076]
[22.97447777 -151.57524109]
[29.04092979 -137.85670471]
[35.10738373 -124.13816833]
[41.17383575 -110.41963959]
[47.24028778 -96.70110321]
[53.30673981 -82.98257446]
[59.37319183 -69.26403809]
[66.79776764 -68.20306396]
[61.21076584 -82.12374878]
[70.47286224 -93.92263031]
[85.32205200 -91.80095673]
[90.90930939 -77.88037109]
[81.64691925 -66.08111572]
[89.07149506 -65.02014160]
[98.73744965 -76.49050903]
[108.40340424 -87.96086884]
[118.06935883 -99.43123627]
[127.73531342 -110.90160370]
[137.40127563 -122.37197113]
[139.99653625 -142.33346558]
[158.39149475 -148.20898438]
[167.61647034 -160.03691101]
[176.84144592 -171.86483765]
[186.06642151 -183.69276428]
[195.29139709 -195.52069092]
[197.02293396 -211.82817078]
[212.11915588 -218.23413086]
[225.05033875 -208.14868164]
[222.51400757 -191.94685364]
[207.11932373 -186.29571533]
[197.89434814 -174.46778870]
[188.66937256 -162.63986206]
[179.44439697 -150.81193542]
[170.21942139 -138.98400879]
[172.38438416 -128.94264221]
[168.56274414 -119.17114258]
[159.79992676 -113.00934601]
[148.87164307 -112.70601654]
[139.20568848 -101.23564911]
[129.53973389 -89.76528168]
[119.87377167 -78.29491425]
[110.20781708 -66.82454681]
[100.54186249 -55.35418320]
[112.44115448 -25.70322418]
[102.90605927 2.84545469]
[78.73224640 17.46190453]
[80.14952087 32.39479828]
[81.56680298 47.32769012]
[82.98407745 62.26058578]
[84.40135193 77.19348145]
[92.26606750 66.36142731]
[106.10123444 59.05033875]
[124.06818390 58.13862228]
[143.06994629 65.51804352]
[159.26406860 81.58836365]
[168.76170349 105.00594330]
[181.40834045 113.07209015]
[194.05497742 121.13822937]
[209.29988098 117.93969727]
[222.01045227 126.30006409]
[224.96582031 140.85346985]
[237.61245728 148.91961670]
[250.25909424 156.98574829]
[262.90573120 165.05189514]
[279.30386353 165.23487854]
[287.10751343 179.65827942]
[278.28900146 193.48455811]
[261.92001343 192.49040222]
[254.83958435 177.69853210]
[242.19294739 169.63238525]
[229.54631042 161.56623840]
[216.89967346 153.50009155]
[202.45718384 156.95697021]
[189.51679993 148.95690918]
[185.98883057 133.78486633]
[173.34219360 125.71871948]
[160.69557190 117.65257263]
[154.22416687 121.44347382]
[161.80575562 134.38639832]
[148.86271667 141.96780396]
[141.28135681 129.02526855]
[134.80995178 132.81617737]
[135.66111755 147.79200745]
[136.51229858 162.76783752]
[137.36347961 177.74366760]
[138.21466064 192.71949768]
[139.06584167 207.69532776]
[139.91702271 222.67115784]
[151.87387085 233.00599670]
[152.93746948 248.77445984]
[142.47679138 260.62139893]
[126.69795990 261.51821899]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 161]
[3 160]
[4 159]
[5 158]
[6 157]
[7 156]
[8 155]
[13 20]
[14 19]
[21 37]
[22 36]
[24 34]
[25 33]
[26 32]
[38 123]
[39 122]
[40 121]
[41 120]
[42 119]
[52 62]
[53 61]
[64 80]
[65 79]
[66 78]
[67 77]
[68 76]
[69 75]
[70 74]
[87 116]
[88 115]
[89 114]
[90 113]
[91 112]
[92 111]
[94 107]
[95 106]
[96 105]
[97 104]
[98 103]
[129 150]
[130 149]
[131 148]
[134 145]
[135 144]
[136 143]
[137 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
