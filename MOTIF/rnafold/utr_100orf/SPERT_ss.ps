%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:45:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCUUCCUGCCUGUCAGAUGCCUCAUUCCCACCUGUGAUGCUCAGAGAGAAACCAUGAGCCCUGAAAAACACCAUAUUGUUUUGUGAUGUCACCUCUGGAAUGUUCUGAGUGUUUUGGUGACCAACUUCUGCAUAGGACCUAUACCUGGCAACUCACAUUGCACUCAAGGCCAAAUUAUACAAGAA\
) } def
/len { sequence length } bind def

/coor [
[75.92961884 424.40451050]
[67.12847900 412.17190552]
[61.38615799 398.23910522]
[59.01234436 383.35751343]
[60.13505173 368.32968140]
[64.69373322 353.96600342]
[72.44254303 341.04110718]
[82.96359253 330.25204468]
[95.68950653 322.18063354]
[109.93399048 317.26214600]
[108.43255615 302.33746338]
[106.93111420 287.41281128]
[105.42967987 272.48812866]
[94.40110779 265.80249023]
[89.16442871 253.80395508]
[91.83998871 240.78993225]
[101.66929626 231.56385803]
[100.41745758 216.61618042]
[96.71881866 210.20027161]
[99.27172089 201.40863037]
[98.26983643 186.44212341]
[97.26794434 171.47561646]
[78.55401611 168.23707581]
[61.35205078 160.18774414]
[46.87480545 147.89511108]
[36.14294052 132.22583008]
[29.91306496 114.28459167]
[28.62438965 95.33628082]
[32.36776733 76.71675873]
[40.87928772 59.73873520]
[53.55887604 45.59917068]
[45.06967163 33.23254776]
[36.58046341 20.86592293]
[28.09125900 8.49930000]
[14.64204502 7.57499647]
[4.33528280 -0.80917388]
[0.79782605 -13.41369438]
[5.10710335 -25.56924438]
[-3.17427373 -38.07599258]
[-11.45565128 -50.58274460]
[-19.73702812 -63.08949280]
[-28.01840591 -75.59624481]
[-36.29978180 -88.10299683]
[-44.58115768 -100.60974121]
[-52.86253738 -113.11649323]
[-61.14391327 -125.62324524]
[-69.42529297 -138.12998962]
[-77.70666504 -150.63674927]
[-91.61605835 -149.05734253]
[-104.78470612 -153.60739136]
[-114.65785217 -163.34376526]
[-119.34615326 -176.32313538]
[-117.98711395 -189.98968506]
[-110.90311432 -201.67831421]
[-118.97434998 -214.32170105]
[-127.04558563 -226.96508789]
[-134.31587219 -232.52865601]
[-135.14401245 -239.88786316]
[-143.00283813 -252.66435242]
[-150.86167908 -265.44082642]
[-161.59472656 -267.35299683]
[-169.33651733 -274.71331787]
[-171.68896484 -284.90780640]
[-168.10848999 -294.50418091]
[-175.53601074 -307.53613281]
[-182.96353149 -320.56808472]
[-186.82893372 -322.64340210]
[-189.54835510 -325.55432129]
[-190.99948120 -328.83386230]
[-191.22567749 -332.02374268]
[-190.41845703 -334.72796631]
[-196.95895386 -348.22692871]
[-209.93931580 -357.27239990]
[-208.52580261 -372.09979248]
[-215.06629944 -385.59875488]
[-221.60681152 -399.09771729]
[-228.14730835 -412.59667969]
[-243.15747070 -417.54345703]
[-250.19865417 -431.69256592]
[-245.09344482 -446.64956665]
[-230.87068176 -453.54077148]
[-215.96847534 -448.27774048]
[-209.22802734 -433.98291016]
[-214.64834595 -419.13717651]
[-208.10784912 -405.63821411]
[-201.56735229 -392.13925171]
[-195.02684021 -378.64028931]
[-182.51429749 -370.56036377]
[-183.45999146 -354.76742554]
[-176.91949463 -341.26849365]
[-169.93157959 -327.99560547]
[-162.50405884 -314.96365356]
[-155.07653809 -301.93170166]
[-137.71673584 -293.44174194]
[-138.08518982 -273.29968262]
[-130.22636414 -260.52319336]
[-122.36751556 -247.74670410]
[-114.40219879 -235.03631592]
[-106.33096313 -222.39292908]
[-98.25972748 -209.74955750]
[-82.14857483 -210.86648560]
[-67.58616638 -203.66976929]
[-58.58381653 -190.03631592]
[-57.67428589 -173.63018799]
[-65.19992065 -158.91812134]
[-56.91854095 -146.41137695]
[-48.63716507 -133.90461731]
[-40.35578537 -121.39787292]
[-32.07440948 -108.89112091]
[-23.79303169 -96.38436890]
[-15.51165485 -83.87762451]
[-7.23027802 -71.37087250]
[1.05109894 -58.86412048]
[9.33247566 -46.35737228]
[17.61385345 -33.85062027]
[34.21482468 -31.21528244]
[43.97335434 -17.11673164]
[40.45788193 0.01009358]
[48.94708633 12.37671661]
[57.43629456 24.74333954]
[65.92549896 37.10996246]
[78.95539093 31.63807487]
[92.80679321 28.83479881]
[106.93899536 28.80956078]
[120.80031586 31.56335068]
[133.84967041 36.98867035]
[145.57765198 44.87372971]
[155.52644348 54.91072464]
[163.30766296 66.70784760]
[168.61758423 79.80458069]
[171.24891663 93.68967438]
[186.24682617 93.94032288]
[201.24472046 94.19097137]
[209.89739990 91.20072174]
[216.49058533 94.57320404]
[231.48220825 95.07442474]
[246.47384644 95.57565308]
[261.46545410 96.07687378]
[271.77642822 84.32026672]
[287.23986816 81.99305725]
[300.55444336 90.19408417]
[305.43334961 105.05107117]
[299.57299805 119.54900360]
[285.74041748 126.84240723]
[270.46691895 123.48754883]
[260.96423340 111.06849670]
[245.97261047 110.56727600]
[230.98098755 110.06604767]
[215.98936462 109.56482697]
[200.99407959 109.18887329]
[185.99617004 108.93823242]
[170.99827576 108.68758392]
[169.31350708 117.65972900]
[166.49969482 126.34421539]
[162.60269165 134.59959412]
[157.68594360 142.29136658]
[151.82955933 149.29426575]
[145.12892151 155.49421692]
[137.69319153 160.79022217]
[129.64347839 165.09602356]
[121.11090088 168.34147644]
[112.23444366 170.47372437]
[113.23633575 185.44023132]
[114.23822784 200.40673828]
[115.36512756 215.36434937]
[116.61696625 230.31201172]
[130.17657471 241.34939575]
[131.54145813 258.44134521]
[120.35434723 270.98669434]
[121.85578156 285.91137695]
[123.35722351 300.83602905]
[124.85865784 315.76071167]
[139.79739380 317.74331665]
[153.87602234 323.11819458]
[166.33528137 331.59542847]
[176.50326538 342.71786499]
[183.83164978 355.88568115]
[187.92518616 370.38876343]
[188.56314087 385.44500732]
[185.71112061 400.24237061]
[179.52288818 413.98294067]
[170.33221436 425.92562866]
[158.63470459 435.42642212]
[145.06121826 441.97296143]
[130.34373474 445.21215820]
[115.27596283 444.96939087]
[100.67048645 441.25769043]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 172]
[11 171]
[12 170]
[13 169]
[17 166]
[18 165]
[20 164]
[21 163]
[22 162]
[31 121]
[32 120]
[33 119]
[34 118]
[38 115]
[39 114]
[40 113]
[41 112]
[42 111]
[43 110]
[44 109]
[45 108]
[46 107]
[47 106]
[48 105]
[54 100]
[55 99]
[56 98]
[58 97]
[59 96]
[60 95]
[64 93]
[65 92]
[66 91]
[71 90]
[72 89]
[74 87]
[75 86]
[76 85]
[77 84]
[131 152]
[132 151]
[133 150]
[135 149]
[136 148]
[137 147]
[138 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
