%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUGGCCCUUGGGGCCUGUGGCCUCCUGCUGCUCCUGGCUGUGCCCGGUGUGUCCCUCAGGACUUUGCAGCCAGGGUGUGGCCGGCCGCAGGUUUCGGAUG\
) } def
/len { sequence length } bind def

/coor [
[50.81443787 471.53164673]
[37.07490540 478.10015869]
[21.85139656 478.50592041]
[7.78147364 472.67861938]
[-2.69716334 461.62792969]
[-7.76902723 447.26840210]
[-6.55538750 432.08792114]
[0.73348665 418.71661377]
[12.83475304 409.47109985]
[27.65179443 405.95324707]
[30.38157845 391.20373535]
[33.11136246 376.45422363]
[35.84114456 361.70471191]
[38.57093048 346.95520020]
[41.30071259 332.20565796]
[44.03049850 317.45614624]
[46.76028061 302.70663452]
[49.49006653 287.95712280]
[52.21984863 273.20761108]
[54.94963455 258.45806885]
[57.67941666 243.70855713]
[60.40920258 228.95904541]
[63.13898468 214.20953369]
[65.86876678 199.46000671]
[59.52228928 192.83302307]
[56.99633789 183.86698914]
[59.00926590 174.62939453]
[65.21677399 167.31468201]
[74.26276398 163.72294617]
[78.32886505 149.28456116]
[82.39496613 134.84619141]
[86.46106720 120.40780640]
[90.52716827 105.96942902]
[94.37261963 91.47071838]
[97.99651337 76.91505432]
[101.62040710 62.35939026]
[105.24430084 47.80372620]
[108.86820221 33.24805832]
[112.49209595 18.69239426]
[116.11598969 4.13672972]
[119.73989105 -10.41893482]
[123.36378479 -24.97459984]
[126.98767853 -39.53026581]
[118.96295929 -45.21736526]
[112.89781189 -52.93006897]
[109.28077698 -62.02526474]
[108.39698792 -71.74942780]
[110.30572510 -81.30102539]
[114.83666229 -89.89661407]
[121.60494232 -96.83506775]
[130.04386902 -101.55477905]
[139.45233154 -103.67910004]
[149.05300903 -103.04637146]
[155.26530457 -116.69947815]
[161.47760010 -130.35258484]
[167.68991089 -144.00569153]
[165.57073975 -160.26733398]
[178.75682068 -170.01718140]
[193.68344116 -163.22541809]
[194.99537659 -146.87882996]
[181.34301758 -137.79339600]
[175.13070679 -124.14028168]
[168.91841125 -110.48717499]
[162.70611572 -96.83407593]
[174.65788269 -79.85726166]
[174.34916687 -58.96953583]
[161.74729919 -42.14830399]
[141.54335022 -35.90636826]
[137.91944885 -21.35070419]
[134.29554749 -6.79503918]
[130.67166138 7.76062584]
[127.04776001 22.31628990]
[123.42386627 36.87195587]
[119.79997253 51.42761993]
[116.17607117 65.98328400]
[112.55217743 80.53894806]
[108.92828369 95.09461212]
[110.20021820 103.20522308]
[104.96555328 110.03553009]
[100.89945221 124.47390747]
[96.83334351 138.91229248]
[92.76724243 153.35066223]
[88.70114136 167.78904724]
[95.47047424 187.99848938]
[80.61828613 202.18978882]
[77.88850403 216.93931580]
[75.15872192 231.68882751]
[72.42893219 246.43835449]
[69.69915009 261.18786621]
[66.96936798 275.93737793]
[64.23958588 290.68688965]
[61.50979996 305.43643188]
[58.78001404 320.18594360]
[56.05023193 334.93545532]
[53.32044601 349.68496704]
[50.59066391 364.43447876]
[47.86087799 379.18402100]
[45.13109589 393.93353271]
[42.40130997 408.68304443]
[54.97789764 417.27078247]
[62.96870422 430.23486328]
[64.98927307 445.32913208]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 99]
[11 98]
[12 97]
[13 96]
[14 95]
[15 94]
[16 93]
[17 92]
[18 91]
[19 90]
[20 89]
[21 88]
[22 87]
[23 86]
[24 85]
[29 83]
[30 82]
[31 81]
[32 80]
[33 79]
[34 77]
[35 76]
[36 75]
[37 74]
[38 73]
[39 72]
[40 71]
[41 70]
[42 69]
[43 68]
[53 64]
[54 63]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
