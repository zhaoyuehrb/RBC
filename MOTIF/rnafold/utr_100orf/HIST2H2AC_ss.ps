%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:26:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCUGGUCGUGGCAAACAAGGAGGCAAGGCCCGCGCCAAGGCCAAGUCGCGCUCGUCCCGCGCUGGCCUCCAGUUCCCGGUAGGGCGAGUGCACCGCU\
) } def
/len { sequence length } bind def

/coor [
[88.78733063 140.23577881]
[79.79898834 136.55900574]
[71.90263367 130.90597534]
[65.52512360 123.58228302]
[61.01119995 114.98381805]
[58.60487366 105.57538605]
[43.62119675 104.87577820]
[28.63751984 104.17617035]
[13.65384293 103.47656250]
[-1.32983291 102.77696228]
[-15.47585773 109.86219025]
[-27.82840919 101.53971100]
[-42.81208420 100.84010315]
[-57.79576111 100.14049530]
[-72.77943420 99.44088745]
[-76.79137421 108.44433594]
[-83.18194580 115.91760254]
[-91.41345215 121.25273895]
[-100.79923248 124.02081299]
[-110.56087494 124.00635529]
[-119.89279175 121.22410583]
[-128.02871704 115.91663361]
[-134.30462646 108.53328705]
[-138.21287537 99.69215393]
[-139.44332886 90.12834930]
[-154.03700256 86.66070557]
[-168.63067627 83.19306183]
[-185.43852234 85.41398621]
[-192.22554016 69.87780762]
[-179.17533875 59.05519485]
[-165.16304016 68.59938049]
[-150.56935120 72.06703186]
[-135.97567749 75.53467560]
[-121.63256836 60.53622818]
[-101.09062958 56.79065704]
[-82.14643860 65.87211609]
[-72.07983398 84.45721436]
[-57.09615326 85.15682220]
[-42.11248016 85.85643005]
[-27.12880325 86.55603027]
[-14.05451012 79.42076111]
[-0.63022703 87.79328156]
[14.35344887 88.49288940]
[29.33712578 89.19249725]
[44.32080078 89.89209747]
[59.30447769 90.59170532]
[68.97343445 72.03585052]
[86.42833710 60.49744797]
[107.28898621 58.87200165]
[126.32049561 67.56740570]
[138.74702454 84.40159607]
[153.44148254 81.38948822]
[168.13594055 78.37738800]
[182.83039856 75.36528015]
[197.52487183 72.35317230]
[212.21932983 69.34106445]
[226.91378784 66.32896423]
[241.60824585 63.31685638]
[256.30270386 60.30474854]
[270.99716187 57.29264450]
[282.96255493 46.94177246]
[296.98428345 51.96574402]
[311.67874146 48.95363998]
[326.09481812 44.80911255]
[340.14535522 39.55721664]
[354.19589233 34.30532074]
[368.24642944 29.05342293]
[382.29693604 23.80152512]
[395.01651001 12.59220505]
[409.30889893 21.71164131]
[404.50238037 37.96998596]
[387.54885864 37.85206223]
[373.49832153 43.10395813]
[359.44778442 48.35585403]
[345.39724731 53.60775375]
[331.34671021 58.85964966]
[330.41723633 61.18608475]
[328.55252075 63.30792236]
[325.81985474 64.88880157]
[322.39883423 65.62020111]
[318.56973267 65.25696564]
[314.69085693 63.64810181]
[299.99639893 66.66020966]
[289.08206177 76.79563141]
[274.00927734 71.98710632]
[259.31481934 74.99921417]
[244.62036133 78.01131439]
[229.92590332 81.02342224]
[215.23143005 84.03553009]
[200.53697205 87.04763794]
[185.84251404 90.05973816]
[171.14804077 93.07184601]
[156.45358276 96.08395386]
[141.75912476 99.09606171]
[140.83918762 108.76367950]
[137.71163940 117.95755768]
[132.54553223 126.18072510]
[125.62011719 132.98864746]
[117.30978394 138.01332092]
[108.06373596 140.98313904]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 46]
[7 45]
[8 44]
[9 43]
[10 42]
[12 40]
[13 39]
[14 38]
[15 37]
[25 33]
[26 32]
[27 31]
[51 94]
[52 93]
[53 92]
[54 91]
[55 90]
[56 89]
[57 88]
[58 87]
[59 86]
[60 85]
[62 83]
[63 82]
[64 76]
[65 75]
[66 74]
[67 73]
[68 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
