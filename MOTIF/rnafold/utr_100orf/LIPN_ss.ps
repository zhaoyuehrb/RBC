%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:52:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUGUGGCUGCUUUUAACAACAACUUGUUUGAUCUGUGGAACUUUAAAUGCUGGUGGAUUCCUUGAUUUGGAAAAUGAAGUGAAUCCUGAGGUGUGGA\
) } def
/len { sequence length } bind def

/coor [
[86.51510620 114.43729401]
[81.84241486 107.78332520]
[66.84423065 108.01660156]
[51.84604645 108.24987793]
[38.16786957 116.20085907]
[25.32180977 108.66242981]
[10.32362270 108.89570618]
[0.70069611 117.65676117]
[-11.90799522 117.44354248]
[-20.65088081 108.92415619]
[-35.64906693 108.69087982]
[-50.64725113 108.45760345]
[-65.64543915 108.22432709]
[-74.18082428 123.41075897]
[-89.10157013 132.23121643]
[-106.34596252 132.38682556]
[-121.27069855 123.92367554]
[-129.90115356 109.19672394]
[-144.88482666 109.89633179]
[-159.86851501 110.59593964]
[-174.85218811 111.29553986]
[-189.83586121 111.99514771]
[-203.34043884 121.29883575]
[-218.03172302 114.01198578]
[-218.79658508 97.63068390]
[-204.84819031 89.00660706]
[-190.53546143 97.01147461]
[-175.55178833 96.31186676]
[-160.56811523 95.61225891]
[-145.58444214 94.91265869]
[-130.60076904 94.21305084]
[-125.95053101 82.25968933]
[-117.04750061 72.96154785]
[-105.22086334 67.75898743]
[-92.25640869 67.47701263]
[-80.12685394 72.19461823]
[-70.69170380 81.22730255]
[-65.41216278 93.22614288]
[-50.41397476 93.45941925]
[-35.41579056 93.69269562]
[-20.41760254 93.92597198]
[-5.67625809 84.54544830]
[10.09034634 93.89752197]
[25.08853149 93.66424561]
[37.69393539 85.72994232]
[51.61276627 93.25169373]
[66.61095428 93.01841736]
[81.60913849 92.78514099]
[98.46531677 80.30424500]
[117.05132294 90.02350616]
[131.90461731 87.93077850]
[146.75791931 85.83805084]
[161.61122131 83.74531555]
[176.46452332 81.65258789]
[183.80773926 68.11067963]
[197.55612183 61.56580734]
[212.34716797 64.33865356]
[222.54716492 75.15985107]
[237.40045166 73.06712341]
[252.25375366 70.97439575]
[267.10705566 68.88166046]
[281.96035767 66.78893280]
[296.81365967 64.69620514]
[311.63259888 62.37273026]
[326.41363525 59.81907654]
[341.19467163 57.26542282]
[353.47616577 47.29167938]
[367.33486938 52.74929810]
[382.11590576 50.19564438]
[396.89694214 47.64199066]
[411.67794800 45.08833694]
[426.25653076 36.43375015]
[438.60864258 48.04674911]
[430.86886597 63.13093185]
[414.23159790 59.86936569]
[399.45059204 62.42301941]
[384.66955566 64.97667694]
[369.88851929 67.53032684]
[358.66427612 77.32141113]
[343.74832153 72.04645538]
[328.96728516 74.60010529]
[314.18624878 77.15376282]
[308.02246094 81.47035980]
[298.90637207 79.54949951]
[284.05307007 81.64222717]
[269.19979858 83.73496246]
[254.34648132 85.82769012]
[239.49319458 87.92041779]
[224.63989258 90.01315308]
[217.82688904 103.23136139]
[204.37779236 109.98306274]
[189.35624695 107.49167633]
[178.55725098 96.50588989]
[163.70394897 98.59861755]
[148.85064697 100.69134521]
[133.99734497 102.78407288]
[119.14405060 104.87680817]
[115.55844879 112.17425537]
[109.33739471 117.40950775]
[101.53468323 119.69575500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 48]
[3 47]
[4 46]
[6 44]
[7 43]
[10 41]
[11 40]
[12 39]
[13 38]
[18 31]
[19 30]
[20 29]
[21 28]
[22 27]
[50 97]
[51 96]
[52 95]
[53 94]
[54 93]
[58 89]
[59 88]
[60 87]
[61 86]
[62 85]
[63 84]
[64 82]
[65 81]
[66 80]
[68 78]
[69 77]
[70 76]
[71 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
