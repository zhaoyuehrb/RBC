%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:02:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGCCCGGAGCGCAGGCCGGAGGCUCCCGGCCCGCCGGCCCCGGAGCGGAGCGGAGCGGAGGAUGCAGCAGCCGCAGCCGCAGGGGCAGCAGCAGCCGGGGCCGGGGCAGCAGCUGGGGGGCCAGGGGGCGGCGCCGGGGGCCGGGGGCGGCCCAGGGGGGG\
) } def
/len { sequence length } bind def

/coor [
[-143.33023071 629.66357422]
[-154.87977600 632.25860596]
[-166.59271240 630.80462646]
[-173.87916565 643.91601562]
[-173.81968689 659.73706055]
[-186.76522827 667.10339355]
[-194.05168152 680.21472168]
[-193.99220276 696.03582764]
[-206.93774414 703.40209961]
[-214.22418213 716.51348877]
[-214.16470337 732.33453369]
[-227.11024475 739.70086670]
[-234.39669800 752.81219482]
[-233.58750916 769.19140625]
[-247.51251221 777.85314941]
[-261.84686279 769.88708496]
[-261.84457397 753.48791504]
[-247.50805664 745.52575684]
[-240.22160339 732.41442871]
[-240.80226135 717.53112793]
[-227.33554077 709.22698975]
[-220.04908752 696.11566162]
[-220.62974548 681.23236084]
[-207.16302490 672.92828369]
[-199.87658691 659.81689453]
[-200.45722961 644.93365479]
[-186.99052429 636.62951660]
[-179.70407104 623.51818848]
[-189.72306824 608.43994141]
[-190.72071838 590.27893066]
[-182.33567810 574.04296875]
[-166.80572510 564.25280762]
[-148.37127686 563.68334961]
[-141.73695374 550.23028564]
[-135.10261536 536.77716064]
[-128.57856750 523.27026367]
[-122.16524506 509.71041870]
[-122.14743805 502.30764771]
[-115.53445435 495.98248291]
[-108.90012360 482.52941895]
[-113.09696960 474.67337036]
[-113.20047760 465.62948608]
[-109.06044769 457.43353271]
[-101.49618530 451.98895264]
[-92.13735199 450.62506104]
[-84.85089874 437.51370239]
[-77.56444550 424.40234375]
[-84.00156403 410.99707031]
[-81.27857208 396.19674683]
[-70.23361969 385.71524048]
[-54.95809555 383.72412109]
[-47.67164230 370.61276245]
[-40.38519287 357.50140381]
[-33.09873962 344.39004517]
[-25.81229019 331.27868652]
[-18.52583885 318.16732788]
[-11.23938847 305.05596924]
[-3.95293760 291.94461060]
[3.33351350 278.83328247]
[10.61996460 265.72192383]
[17.79890633 252.55139160]
[24.86985588 239.32257080]
[31.94080734 226.09375000]
[39.01175690 212.86492920]
[46.08271027 199.63610840]
[52.71704102 186.18301392]
[58.90764618 172.52006531]
[65.09825134 158.85710144]
[71.28885651 145.19415283]
[77.47946167 131.53118896]
[83.67006683 117.86823273]
[74.07751465 108.42141724]
[70.31094360 93.91608429]
[74.88677979 78.04679871]
[87.98960876 65.63237000]
[86.27530670 50.73065567]
[84.56100464 35.82893753]
[82.84669495 20.92722130]
[71.53623199 6.40547466]
[79.11972046 -9.41278553]
[77.16182709 -24.28445816]
[75.20394135 -39.15613174]
[73.24604797 -54.02780533]
[61.69949341 -68.36254883]
[69.02315521 -84.30277252]
[66.82219696 -99.14041901]
[52.50886917 -104.71035767]
[42.91065598 -116.70075989]
[40.60942459 -131.88627625]
[46.22420120 -146.18208313]
[58.24463654 -155.74266052]
[73.43729401 -157.99627686]
[87.71542358 -152.33671570]
[97.23828125 -140.28637695]
[99.44425964 -125.08673096]
[93.73997498 -110.82641602]
[81.65984344 -101.34137726]
[83.86080170 -86.50373077]
[93.39299011 -79.03993988]
[95.34017944 -66.68478394]
[88.11771393 -55.98569870]
[90.07560730 -41.11402512]
[92.03350067 -26.24235153]
[93.99139404 -11.37067890]
[103.40018463 -3.75192857]
[105.14496613 8.63343334]
[97.74841309 19.21291542]
[99.46272278 34.11463165]
[101.17702484 49.01634979]
[102.89132690 63.91806793]
[109.44700623 67.56129456]
[112.32522583 52.84001923]
[127.21540833 51.02827072]
[133.53977966 64.62982178]
[122.55836487 74.84774017]
[129.11404419 78.49096680]
[142.67387390 72.07764435]
[156.23371887 65.66431427]
[169.79356384 59.25098801]
[178.96064758 46.35621643]
[193.77407837 47.90904617]
[207.33392334 41.49571991]
[216.50100708 28.60094833]
[231.31445312 30.15377426]
[244.87428284 23.74044800]
[258.43411255 17.32712173]
[261.17935181 2.05481720]
[272.40042114 -8.66280556]
[287.78259277 -10.70460129]
[301.41107178 -3.28545856]
[308.04547119 10.74181080]
[305.13473511 25.98343658]
[293.79806519 36.57870102]
[278.39465332 38.45351028]
[264.84744263 30.88696098]
[251.28761292 37.30028915]
[237.72776794 43.71361542]
[229.53057861 56.14966202]
[213.74725342 55.05555725]
[200.18740845 61.46888351]
[191.99021912 73.90493011]
[176.20687866 72.81082916]
[162.64704895 79.22415161]
[149.08720398 85.63748169]
[135.52735901 92.05080414]
[122.57239532 120.22229004]
[97.33302307 124.05883789]
[91.14241791 137.72180176]
[84.95181274 151.38475037]
[78.76120758 165.04771423]
[72.57060242 178.71066284]
[66.37999725 192.37362671]
[66.96695709 196.71273804]
[66.20949554 200.61610413]
[64.41216278 203.71244812]
[61.96924210 205.76866150]
[59.31152725 206.70706177]
[52.24057770 219.93588257]
[45.16962814 233.16470337]
[38.09867477 246.39352417]
[31.02772522 259.62234497]
[29.73826027 268.68194580]
[23.73131943 273.00836182]
[16.44486809 286.11972046]
[9.15841770 299.23107910]
[1.87196672 312.34243774]
[-5.41448402 325.45379639]
[-12.70093536 338.56515503]
[-19.98738670 351.67648315]
[-27.27383614 364.78784180]
[-34.56028748 377.89920044]
[-41.84673691 391.01055908]
[-35.47108459 405.03402710]
[-38.53953171 419.94836426]
[-49.67006302 430.07632446]
[-64.45309448 431.68878174]
[-71.73954010 444.80014038]
[-79.02599335 457.91149902]
[-77.34680939 479.26446533]
[-95.44702911 489.16372681]
[-102.08135986 502.61682129]
[-108.60540771 516.12371826]
[-115.01873779 529.68359375]
[-115.86211395 538.79553223]
[-121.64952850 543.41149902]
[-128.28385925 556.86462402]
[-134.91819763 570.31768799]
[-126.99974823 579.39453125]
[-122.62487793 590.58013916]
[-122.28595734 602.55139160]
[-125.99942017 613.90075684]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 28]
[4 27]
[6 25]
[7 24]
[9 22]
[10 21]
[12 19]
[13 18]
[33 187]
[34 186]
[35 185]
[36 183]
[37 182]
[39 181]
[40 180]
[45 178]
[46 177]
[47 176]
[51 172]
[52 171]
[53 170]
[54 169]
[55 168]
[56 167]
[57 166]
[58 165]
[59 164]
[60 163]
[61 161]
[62 160]
[63 159]
[64 158]
[65 157]
[66 152]
[67 151]
[68 150]
[69 149]
[70 148]
[71 147]
[75 110]
[76 109]
[77 108]
[78 107]
[80 104]
[81 103]
[82 102]
[83 101]
[85 98]
[86 97]
[116 145]
[117 144]
[118 143]
[119 142]
[121 140]
[122 139]
[124 137]
[125 136]
[126 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
