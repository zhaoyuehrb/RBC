%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACAGCCUCAUCCCUCCAGGUACAAACAAGAACAGGCCAUGGUUAACCAAAGCUCCACACCGGGCUUCCUCCUUCUGGGCUUCUCUGAACACCCAGGGCUGGAAAGGACUCUCUUCGUGGUUGUCCUCACUUCCUACC\
) } def
/len { sequence length } bind def

/coor [
[183.39291382 386.73504639]
[195.59455872 377.70819092]
[191.60400391 363.24874878]
[187.61344910 348.78930664]
[183.62289429 334.32986450]
[179.63235474 319.87042236]
[175.64179993 305.41098022]
[171.65124512 290.95153809]
[150.91198730 285.40460205]
[137.45808411 268.51202393]
[136.68322754 246.80305481]
[149.04246521 228.78434753]
[142.83908081 215.12719727]
[136.63571167 201.47003174]
[121.84107971 192.09715271]
[123.67429352 173.81291199]
[117.16603851 160.29837036]
[110.65777588 146.78384399]
[104.14952087 133.26930237]
[97.64126587 119.75477600]
[96.92687225 134.73774719]
[90.96928406 148.50390625]
[80.53562164 159.28067017]
[66.96935272 165.68038940]
[52.01731873 166.87901306]
[37.60478973 162.72219849]
[25.58757591 153.74520874]
[17.51304817 141.10391235]
[14.42091084 126.42608643]
[16.70931625 111.60167694]
[24.08360291 98.53952026]
[35.59423447 88.92155457]
[49.75906372 83.98620605]
[64.75418091 84.36897278]
[78.64711761 90.01953125]
[71.53909302 76.81060028]
[64.43106079 63.60166550]
[57.32303238 50.39273071]
[50.21500015 37.18379974]
[35.34566879 32.54260635]
[28.32528114 19.04561424]
[32.84158325 4.89857817]
[25.73355293 -8.31035519]
[11.56866550 -6.46127033]
[-2.34445119 -9.56511116]
[-14.32991028 -17.22701073]
[-22.95121002 -28.50434113]
[-27.18339920 -42.02264023]
[-26.53489304 -56.14312363]
[-21.10448647 -69.16132355]
[-11.56694889 -79.51287842]
[-18.37680626 -92.87797546]
[-25.18666267 -106.24307251]
[-31.99652100 -119.60816956]
[-38.80637741 -132.97326660]
[-45.61623764 -146.33836365]
[-60.72256851 -150.98318481]
[-68.04604340 -164.98826599]
[-63.24177551 -180.04463196]
[-49.16005325 -187.21963501]
[-34.15530777 -182.25645447]
[-27.12959290 -168.09965515]
[-32.25113678 -153.14822388]
[-25.44128036 -139.78312683]
[-18.63142395 -126.41802979]
[-11.82156563 -113.05293274]
[-5.01170826 -99.68783569]
[1.79814947 -86.32273102]
[17.53658867 -87.81465149]
[32.68425751 -83.15753174]
[44.92538452 -73.03256989]
[52.37678909 -58.95922089]
[53.87755203 -43.06722641]
[49.16981125 -27.77431488]
[38.94248581 -15.41838455]
[46.05051804 -2.20945168]
[60.34527206 1.81492186]
[67.74198914 15.10940170]
[63.42393494 30.07576942]
[70.53196716 43.28470230]
[77.63999176 56.49363327]
[84.74802399 69.70256805]
[91.85605621 82.91149902]
[106.44160461 86.41318512]
[118.77163696 77.87091064]
[131.10166931 69.32864380]
[143.43170166 60.78638077]
[155.76173401 52.24411011]
[158.33673096 36.65100861]
[171.23200989 27.51386261]
[186.79701233 30.25358391]
[195.79731750 43.24474335]
[192.89318848 58.77991486]
[179.80760193 67.64235687]
[164.30400085 64.57414246]
[151.97396851 73.11640930]
[139.64393616 81.65867615]
[127.31390381 90.20094299]
[114.98387146 98.74320984]
[111.15579987 113.24652100]
[117.66405487 126.76105499]
[124.17230988 140.27558899]
[130.68057251 153.79011536]
[137.18882751 167.30465698]
[149.12849426 172.32460022]
[154.25141907 183.78150940]
[150.29286194 195.26664734]
[156.49624634 208.92381287]
[162.69963074 222.58097839]
[171.74511719 221.92645264]
[180.63577271 223.61714172]
[188.77507019 227.52955627]
[195.61955261 233.39151001]
[200.71498108 240.80102539]
[203.72659302 249.25382996]
[204.46096802 258.17776489]
[202.87854004 266.97146606]
[199.09550476 275.04483032]
[193.37538147 281.85873413]
[186.11068726 286.96096802]
[190.10124207 301.42041016]
[194.09179688 315.87985229]
[198.08235168 330.33929443]
[202.07289124 344.79873657]
[206.06344604 359.25817871]
[210.05400085 373.71762085]
[225.15835571 375.20852661]
[238.70242310 382.05853271]
[248.85446167 393.34130859]
[254.24150085 407.53088379]
[254.13497925 422.70828247]
[248.54931641 436.82083130]
[238.23991394 447.95999146]
[224.60104370 454.61926270]
[209.47724915 455.89797974]
[194.91389465 451.62329102]
[182.88055420 442.37322998]
[175.00463867 429.39886475]
[172.35131836 414.45483398]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 126]
[3 125]
[4 124]
[5 123]
[6 122]
[7 121]
[8 120]
[12 109]
[13 108]
[14 107]
[16 104]
[17 103]
[18 102]
[19 101]
[20 100]
[35 83]
[36 82]
[37 81]
[38 80]
[39 79]
[42 76]
[43 75]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[84 99]
[85 98]
[86 97]
[87 96]
[88 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
