%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:23:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACGAGGGGCAACGUAUAUAAAUGCGCGCAGGCGUAGUUAAGAGAGCGCAUUUUGACUUCGAGGCACCGCCGACGUUACUGUGUCGCCAUGGGGCGCCGUCCAGCUCGCUGUUACCGGUAUUGUAAGAACAAGCCGUACCCAAAAUCUCGUUUCUGCCGAGGGGUUCCUGAUGCCAAGAUCCGCAUCU\
) } def
/len { sequence length } bind def

/coor [
[51.12483978 100.25642395]
[36.29062271 98.03247070]
[21.45640373 95.80851746]
[6.62218618 93.58456421]
[0.31257290 95.65464020]
[-5.25405645 94.40268707]
[-8.66248608 91.03399658]
[-23.41506195 88.32079315]
[-38.38713074 93.43428040]
[-49.50494003 83.52249146]
[-64.25751495 80.80928802]
[-77.17761230 89.51036835]
[-92.10017395 86.54862976]
[-100.31570435 74.17767334]
[-115.06827545 71.46446228]
[-129.82084656 68.75125885]
[-133.84979248 73.67927551]
[-139.06597900 77.25649261]
[-145.03776550 79.21436310]
[-151.27859497 79.41722107]
[-157.28666687 77.87142181]
[-162.58517456 74.72303009]
[-166.76025391 70.24430847]
[-169.49324036 64.81035614]
[-170.58489990 58.86767960]
[-184.92543030 54.46892929]
[-199.26597595 50.07017899]
[-213.64237976 45.79013443]
[-228.05368042 41.62909317]
[-242.46499634 37.46804810]
[-256.87631226 33.30700302]
[-271.28759766 29.14595985]
[-285.76574707 25.22376060]
[-300.30673218 21.54147911]
[-314.84774780 17.85919762]
[-329.38876343 14.17691422]
[-344.25772095 12.19853210]
[-359.25564575 11.95052242]
[-374.25360107 11.70251369]
[-389.25155640 11.45450401]
[-404.24951172 11.20649529]
[-419.24746704 10.95848560]
[-434.24539185 10.71047688]
[-449.24334717 10.46246719]
[-459.35433960 22.39150620]
[-474.77627563 24.97949409]
[-488.22741699 17.00446320]
[-493.35650635 2.23197794]
[-487.74179077 -12.36284447]
[-474.03433228 -19.88877678]
[-458.70639038 -16.79230118]
[-448.99536133 -4.53548193]
[-433.99740601 -4.28747272]
[-418.99945068 -4.03946352]
[-404.00149536 -3.79145455]
[-389.00354004 -3.54344535]
[-374.00558472 -3.29543614]
[-359.00765991 -3.04742694]
[-344.00970459 -2.79941773]
[-341.45748901 -9.85181332]
[-355.56219482 -14.95644474]
[-350.45733643 -29.06106567]
[-336.35311890 -23.95660400]
[-333.80090332 -31.00899887]
[-345.48406982 -40.41664505]
[-357.16723633 -49.82429123]
[-373.29608154 -55.04886246]
[-372.74060059 -71.99370575]
[-356.30419922 -76.15073395]
[-347.75958252 -61.50745010]
[-336.07641602 -52.09980392]
[-324.39324951 -42.69215775]
[-316.94247437 -18.31196594]
[-325.70645142 -0.36408964]
[-311.16546631 3.31819272]
[-296.62445068 7.00047493]
[-282.08346558 10.68275738]
[-277.58117676 9.04117393]
[-271.99926758 10.22320652]
[-267.12655640 14.73465538]
[-252.71525574 18.89569855]
[-238.30395508 23.05674171]
[-223.89263916 27.21778679]
[-209.48133850 31.37882996]
[-202.16970825 30.21166039]
[-194.86721802 35.72964096]
[-180.52668762 40.12839127]
[-166.18614197 44.52714157]
[-143.94284058 36.31442642]
[-127.10764313 53.99868011]
[-112.35507202 56.71188736]
[-97.60249329 59.42509842]
[-85.52304077 50.78667450]
[-70.52317810 53.32809448]
[-61.54430771 66.05670929]
[-46.79172897 68.76992035]
[-32.87486649 63.46236038]
[-20.70185471 73.56821442]
[-5.94927835 76.28142548]
[8.84614086 78.75034332]
[23.68035889 80.97429657]
[38.51457596 83.19824982]
[53.34879684 85.42220306]
[56.16181564 78.38842010]
[60.02795792 71.87380219]
[64.85434723 66.03486633]
[70.52504730 61.01187515]
[76.90381622 56.92549133]
[83.83742523 53.87388611]
[91.15931702 51.93037033]
[98.69358063 51.14163208]
[106.25922394 51.52661514]
[113.67450714 53.07607651]
[120.76129150 55.75278854]
[127.34931946 59.49245071]
[133.28034973 64.20523071]
[138.41186523 69.77790070]
[151.48413086 62.42154694]
[164.55639648 55.06519699]
[177.62866211 47.70884323]
[183.58610535 40.76023102]
[190.97843933 40.34096909]
[204.17054749 33.20175934]
[217.36264038 26.06254959]
[230.55474854 18.92333794]
[238.67691040 4.67684126]
[255.07505798 4.85817099]
[262.88018799 19.28079033]
[254.06304932 33.10794449]
[237.69396973 32.11544418]
[224.50186157 39.25465393]
[211.30975342 46.39386749]
[198.11764526 53.53307724]
[184.98501587 60.78110504]
[171.91275024 68.13745880]
[158.84048462 75.49381256]
[145.76821899 82.85016632]
[148.67385864 95.56131744]
[148.11535645 108.58837128]
[162.30261230 113.45886230]
[176.48986816 118.32935333]
[190.67712402 123.19984436]
[186.63449097 108.75487518]
[195.26913452 96.48935699]
[210.23120117 95.42326355]
[220.51770020 106.34059143]
[218.56401062 121.21281433]
[205.80592346 129.10311890]
[219.54252625 135.12855530]
[233.27912903 141.15399170]
[247.01573181 147.17941284]
[260.95156860 140.08528137]
[276.17532349 143.65896606]
[285.49880981 156.21310425]
[284.51977539 171.82002258]
[273.70046997 183.11058044]
[258.14947510 184.75375366]
[245.20944214 175.97366333]
[240.99029541 160.91601562]
[227.25369263 154.89059448]
[213.51710510 148.86515808]
[199.78050232 142.83972168]
[185.80664062 137.38710022]
[171.61936951 132.51661682]
[157.43211365 127.64611816]
[143.24485779 122.77562714]
[140.29188538 127.66606903]
[136.78843689 132.17852783]
[132.78239441 136.25137329]
[128.32847595 139.82894897]
[123.48752594 142.86238098]
[128.59191895 156.96716309]
[133.69631958 171.07196045]
[138.80072021 185.17674255]
[143.90512085 199.28153992]
[158.84999084 203.45648193]
[168.46028137 215.63934326]
[169.04061890 231.14555359]
[160.36785889 244.01268005]
[145.77685547 249.29302979]
[130.87814331 244.95622253]
[121.40058136 232.66981506]
[120.98848724 217.15821838]
[129.80032349 204.38594055]
[124.69592285 190.28114319]
[119.59152985 176.17636108]
[114.48712921 162.07156372]
[109.38273621 147.96676636]
[81.27928162 145.14843750]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 103]
[2 102]
[3 101]
[4 100]
[7 99]
[8 98]
[10 96]
[11 95]
[14 92]
[15 91]
[16 90]
[25 88]
[26 87]
[27 86]
[28 84]
[29 83]
[30 82]
[31 81]
[32 80]
[33 77]
[34 76]
[35 75]
[36 74]
[37 59]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
[64 72]
[65 71]
[66 70]
[117 137]
[118 136]
[119 135]
[120 134]
[122 133]
[123 132]
[124 131]
[125 130]
[139 166]
[140 165]
[141 164]
[142 163]
[148 162]
[149 161]
[150 160]
[151 159]
[171 188]
[172 187]
[173 186]
[174 185]
[175 184]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
