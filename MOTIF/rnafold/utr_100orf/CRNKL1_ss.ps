%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:03:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUCCGACACUCUUUGGGAAGAGAAUCUCUAAUGACGGCAACAGUGGAGAACCUAACGUUCCAGAAGGACACUUUGGGAAAUGCUGUUGACAAAAACACAUCCAGAUUGGAGCUCCGUUCUUACUCCCUUG\
) } def
/len { sequence length } bind def

/coor [
[49.28015900 342.98168945]
[41.52592468 355.82192993]
[33.77168655 368.66217041]
[26.01745224 381.50244141]
[18.26321602 394.34268188]
[10.50898170 407.18292236]
[2.75474620 420.02316284]
[-4.99948931 432.86340332]
[-0.96745896 448.14471436]
[-8.99398041 461.75906372]
[-24.31706047 465.62930298]
[-37.84578705 457.45928955]
[-41.55380630 442.09613037]
[-33.24121857 428.65454102]
[-17.83973122 425.10916138]
[-10.08549690 412.26892090]
[-2.33126116 399.42868042]
[5.42297411 386.58843994]
[13.17720985 373.74819946]
[20.93144417 360.90795898]
[28.68568039 348.06771851]
[36.43991470 335.22747803]
[42.46534729 321.49087524]
[46.66041946 307.08941650]
[50.85549164 292.68798828]
[55.05056381 278.28656006]
[59.24563980 263.88513184]
[62.75593185 249.30163574]
[65.57360840 234.56866455]
[68.39128876 219.83567810]
[71.20896912 205.10270691]
[74.02664948 190.36972046]
[76.84432983 175.63674927]
[79.66201019 160.90376282]
[70.97674561 151.31088257]
[69.40859985 138.26910400]
[75.75808716 126.54748535]
[87.88858032 120.56372833]
[91.05345154 105.90140533]
[92.11550140 90.93905640]
[91.05345154 75.97669983]
[89.99139404 61.01434708]
[88.92933655 46.05199051]
[87.86727905 31.08963776]
[86.80522919 16.12728310]
[85.74317169 1.16492903]
[84.68111420 -13.79742527]
[73.19948578 -19.00993919]
[65.09996033 -28.57923889]
[61.89347458 -40.62409973]
[64.13697052 -52.81113815]
[71.33774567 -62.80680084]
[82.05999756 -68.72421265]
[81.70571136 -83.72003174]
[81.35143280 -98.71584320]
[80.99714661 -113.71166229]
[80.64286804 -128.70747375]
[72.58177948 -142.32106018]
[80.01631927 -155.22752380]
[79.66204071 -170.22334290]
[79.13067627 -185.21392822]
[78.42230988 -200.19718933]
[77.71394348 -215.18045044]
[68.40236664 -228.67958069]
[75.68062592 -243.37512207]
[92.06147766 -244.14956665]
[100.69370270 -230.20622253]
[92.69721222 -215.88882446]
[93.40557861 -200.90554810]
[94.11394501 -185.92228699]
[97.60543060 -179.32664490]
[94.65785217 -170.57762146]
[95.01213837 -155.58180237]
[103.04788208 -143.04083252]
[95.63867950 -129.06175232]
[95.99296570 -114.06594086]
[96.34724426 -99.07012939]
[96.70153046 -84.07431030]
[97.05580902 -69.07849884]
[111.99542999 -59.80435944]
[118.50166321 -43.30037689]
[113.82818604 -26.02523232]
[99.64347076 -14.85948086]
[100.70552826 0.10287356]
[101.76757812 15.06522751]
[102.82963562 30.02758217]
[103.89169312 44.98993683]
[104.95375061 59.95228958]
[106.01580048 74.91464233]
[107.07785797 89.87699890]
[115.22529602 77.28258514]
[127.95886230 69.35439301]
[142.85600281 67.60076141]
[157.08253479 72.35532379]
[167.93185425 82.71351624]
[173.33988953 96.70470428]
[172.27774048 111.66705322]
[164.94750977 124.75397491]
[152.74374390 133.47569275]
[137.98823547 136.17288208]
[123.48820496 132.33241272]
[112.00228882 122.68494415]
[105.71576691 109.06627655]
[102.55089569 123.72859955]
[112.29652405 138.20075989]
[108.67826843 154.92500305]
[94.39498901 163.72145081]
[91.57730865 178.45442200]
[88.75962830 193.18740845]
[85.94194794 207.92037964]
[83.12426758 222.65336609]
[80.30658722 237.38633728]
[77.48891449 252.11932373]
[79.15677643 256.36544800]
[79.30894470 260.49426270]
[78.18081665 264.02664185]
[76.14365387 266.61569214]
[73.64707184 268.08020020]
[69.45200348 282.48162842]
[65.25692749 296.88305664]
[61.06185532 311.28451538]
[56.86678314 325.68594360]
[69.06841278 316.96124268]
[83.90636444 314.76232910]
[98.11392212 319.57327271]
[108.56317139 330.33493042]
[112.95362091 344.67800903]
[110.31866455 359.44476318]
[101.23841095 371.38415527]
[87.71197510 377.86761475]
[72.71730042 377.46777344]
[59.55561447 370.27264404]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[23 122]
[24 121]
[25 120]
[26 119]
[27 118]
[28 113]
[29 112]
[30 111]
[31 110]
[32 109]
[33 108]
[34 107]
[38 104]
[39 103]
[40 90]
[41 89]
[42 88]
[43 87]
[44 86]
[45 85]
[46 84]
[47 83]
[53 79]
[54 78]
[55 77]
[56 76]
[57 75]
[59 73]
[60 72]
[61 70]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
