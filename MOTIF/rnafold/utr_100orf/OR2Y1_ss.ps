%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:33:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGAAGUUUCAACACCAGUUUUGAAGAUGGCUUCAUUUUGGUGGGAUUCUCAGAUUGGCCGCAACUGGAGCCCAUCCUGUUUGUCUUUAUUUUUAUUU\
) } def
/len { sequence length } bind def

/coor [
[55.29590607 108.66397858]
[54.46479416 99.74419403]
[39.68376541 97.19053650]
[24.90273476 94.63688660]
[10.12170410 92.08322906]
[-4.65932655 89.52957916]
[-19.44035721 86.97592163]
[-24.67047501 88.92353821]
[-29.59652710 88.57795715]
[-33.35703278 86.47718048]
[-35.45237350 83.43340302]
[-49.93114853 79.51357269]
[-61.60015869 85.27474213]
[-73.65909576 81.58601379]
[-79.70770264 70.98261261]
[-94.05757141 66.61438751]
[-108.40744019 62.24616623]
[-122.75730133 57.87794876]
[-137.10716248 53.50972748]
[-151.45703125 49.14150620]
[-162.63200378 56.84832001]
[-176.00975037 56.65676498]
[-186.64372253 48.86436462]
[-190.73320007 36.53723526]
[-204.94027710 31.72484779]
[-219.14735413 26.91246033]
[-233.35443115 22.10007477]
[-247.56149292 17.28768730]
[-263.52880859 21.02629662]
[-274.55136108 8.88398933]
[-269.29006958 -6.64827013]
[-253.15733337 -9.59222412]
[-242.74911499 3.08061481]
[-228.54203796 7.89300108]
[-214.33496094 12.70538807]
[-200.12789917 17.51777458]
[-185.92082214 22.33016014]
[-171.27009583 14.23722363]
[-154.95330811 19.26125526]
[-147.08882141 34.79164124]
[-132.73895264 39.15986252]
[-118.38908386 43.52807999]
[-104.03921509 47.89630127]
[-89.68935394 52.26452255]
[-75.33948517 56.63274384]
[-58.58015060 51.69045639]
[-46.01132202 65.03479767]
[-31.53254509 68.95462799]
[-16.88670349 72.19489288]
[-2.10567307 74.74855042]
[12.67535686 77.30220032]
[27.45638657 79.85585022]
[42.23741913 82.40950775]
[57.01844788 84.96315765]
[69.27697754 66.39023590]
[88.87317657 55.84443283]
[111.12682343 55.84443283]
[130.72302246 66.39023590]
[142.98155212 84.96315765]
[157.76258850 82.40950775]
[172.54360962 79.85585022]
[178.42265320 70.44081879]
[188.35279846 65.99976349]
[198.85258484 67.81877136]
[206.38946533 75.03483582]
[221.30065918 73.40505219]
[236.21185303 71.77526855]
[249.08966064 62.58435822]
[262.58224487 68.89300537]
[277.49346924 67.26322174]
[292.40466309 65.63344574]
[303.52984619 54.07446671]
[319.48941040 55.70898438]
[328.04055786 69.28313446]
[322.62356567 84.38398743]
[307.39389038 89.42745972]
[294.03442383 80.54463959]
[279.12322998 82.17442322]
[264.21203613 83.80420685]
[252.40078735 92.87854767]
[237.84164429 86.68647003]
[222.93045044 88.31625366]
[208.01924133 89.94602966]
[193.50392151 102.56023407]
[175.09725952 94.63688660]
[160.31623840 97.19053650]
[145.53520203 99.74419403]
[144.70408630 108.66397858]
[142.14276123 117.24843597]
[137.95033264 125.16531372]
[132.28907776 132.10818481]
[125.37811279 137.80836487]
[117.48490906 142.04519653]
[108.91497803 144.65470886]
[100.00000000 145.53591919]
[91.08502197 144.65470886]
[82.51509094 142.04519653]
[74.62188721 137.80836487]
[67.71092224 132.10818481]
[62.04967117 125.16531372]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 54]
[3 53]
[4 52]
[5 51]
[6 50]
[7 49]
[11 48]
[12 47]
[15 45]
[16 44]
[17 43]
[18 42]
[19 41]
[20 40]
[24 37]
[25 36]
[26 35]
[27 34]
[28 33]
[59 87]
[60 86]
[61 85]
[65 83]
[66 82]
[67 81]
[69 79]
[70 78]
[71 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
