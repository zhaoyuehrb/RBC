%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGAAGCUCCUAUAAAGGGCUGCAUCUCUGGACUCACAGCUAUCAGACCAUUGAGAUGUGGAAGCUGUUGCUGUGGGUUGGGCUGGUUCUUGUGCUGAAACACCACGAUGGUGCUGCCCAUAAACUCGUGUGUUAUUUCACCAACUGGGCACACA\
) } def
/len { sequence length } bind def

/coor [
[175.01478577 335.90493774]
[167.77038574 335.48880005]
[163.62300110 349.90402222]
[159.47561646 364.31927490]
[155.32823181 378.73452759]
[156.75947571 395.62796021]
[140.92245483 401.67980957]
[130.72297668 388.13702393]
[140.91299438 374.58712769]
[145.06037903 360.17190552]
[149.20776367 345.75665283]
[153.35514832 331.34140015]
[138.45938110 320.99163818]
[128.20133972 305.99172974]
[123.94309998 288.29101562]
[126.26515198 270.20004272]
[134.88739014 254.08914185]
[148.70269775 242.07778931]
[143.13619995 228.14889526]
[137.56971741 214.21998596]
[132.00321960 200.29109192]
[120.09533691 191.34394836]
[122.15889740 175.65789795]
[116.59240723 161.72900391]
[111.02591705 147.80009460]
[105.45942688 133.87120056]
[99.89293671 119.94230652]
[77.64616394 109.73071289]
[78.80303192 80.47762299]
[67.04887390 71.15883636]
[51.42809677 68.64848328]
[46.26168442 54.67860413]
[34.50752640 45.35981750]
[22.75336838 36.04103470]
[10.99920940 26.72224808]
[-0.75494933 17.40346336]
[-12.50910854 8.08467865]
[-24.26326752 -1.23410571]
[-36.01742554 -10.55289078]
[-47.77158356 -19.87167549]
[-59.52574158 -29.19046021]
[-72.67282867 -26.11287880]
[-85.00526428 -31.11310959]
[-92.08611298 -42.14952469]
[-91.50853729 -55.05429840]
[-103.07389069 -64.60640717]
[-114.63923645 -74.15850830]
[-134.61901855 -76.54360199]
[-140.70169067 -94.86376953]
[-152.63995361 -103.94550323]
[-164.57821655 -113.02723694]
[-176.51647949 -122.10897064]
[-192.14109802 -119.73271179]
[-204.81994629 -129.16787720]
[-207.03088379 -144.81675720]
[-197.46220398 -157.39514160]
[-181.79081726 -159.44050598]
[-169.31430054 -149.73936462]
[-167.43475342 -134.04722595]
[-155.49649048 -124.96549988]
[-143.55821228 -115.88376617]
[-131.61994934 -106.80203247]
[-121.59085846 -109.08912659]
[-111.76335907 -105.37237549]
[-105.50025940 -96.66347504]
[-105.08712769 -85.72386169]
[-93.52178192 -76.17175293]
[-81.95643616 -66.61964417]
[-65.32533264 -68.94268036]
[-51.87852097 -58.33107758]
[-50.20695877 -40.94461823]
[-38.45280075 -31.62583351]
[-26.69864082 -22.30704880]
[-14.94448185 -12.98826408]
[-3.19032335 -3.66947961]
[8.56383514 5.64930487]
[20.31799507 14.96809006]
[32.07215500 24.28687477]
[43.82631302 33.60565948]
[55.58047104 42.92444611]
[70.36051178 44.76826096]
[76.36766052 59.40468216]
[88.12181854 68.72346497]
[77.84395599 57.79800797]
[76.40444183 42.86724472]
[84.40568542 30.17944908]
[98.49929047 25.04426384]
[112.78732300 29.61067963]
[121.29046631 41.96772385]
[120.45029449 56.94417572]
[110.61730957 68.27326965]
[121.98921967 58.49166489]
[133.36112976 48.71006393]
[144.73303223 38.92845917]
[156.10493469 29.14685822]
[161.52166748 14.28181362]
[176.21611023 11.84812927]
[187.58801270 2.06652713]
[195.65322876 -12.84617329]
[212.21582031 -9.22439480]
[213.32055664 7.69352102]
[197.36961365 13.43843365]
[185.99771118 23.22003555]
[181.39436340 37.38543320]
[165.88653564 40.51876450]
[154.51463318 50.30036545]
[143.14273071 60.08197021]
[131.77081299 69.86357117]
[120.39891052 79.64517212]
[124.37861633 100.25263977]
[113.82183075 114.37581635]
[119.38832092 128.30471802]
[124.95481110 142.23361206]
[130.52130127 156.16250610]
[136.08779907 170.09140015]
[148.39384460 180.03483582]
[145.93211365 194.72460938]
[151.49861145 208.65350342]
[157.06509399 222.58239746]
[162.63159180 236.51129150]
[177.28234863 235.31150818]
[191.64253235 238.36767578]
[204.50347900 245.41201782]
[214.78575134 255.84146118]
[221.62973022 268.76937866]
[224.46752930 283.10086060]
[223.06999207 297.62551880]
[217.56526184 311.11962891]
[208.42707825 322.44934082]
[216.90048218 334.82681274]
[225.37388611 347.20425415]
[233.84729004 359.58172607]
[242.32069397 371.95916748]
[250.79409790 384.33663940]
[259.26751709 396.71408081]
[274.23880005 393.92480469]
[289.04876709 397.47238159]
[301.13143921 406.74212646]
[308.39349365 420.12805176]
[309.57666016 435.31094360]
[304.47598267 449.66024780]
[293.97521973 460.68991089]
[279.89361572 466.48895264]
[264.67095947 466.05264282]
[250.94462585 459.45660400]
[241.09281921 447.84359741]
[236.82240295 433.22567749]
[238.87324524 418.13549805]
[246.89004517 405.18750000]
[238.41664124 392.81002808]
[229.94323730 380.43258667]
[221.46983337 368.05511475]
[212.99642944 355.67767334]
[204.52302551 343.30020142]
[196.04962158 330.92276001]
[189.30430603 333.59771729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 12]
[3 11]
[4 10]
[5 9]
[18 120]
[19 119]
[20 118]
[21 117]
[23 115]
[24 114]
[25 113]
[26 112]
[27 111]
[29 83]
[30 82]
[32 80]
[33 79]
[34 78]
[35 77]
[36 76]
[37 75]
[38 74]
[39 73]
[40 72]
[41 71]
[45 68]
[46 67]
[47 66]
[49 62]
[50 61]
[51 60]
[52 59]
[91 109]
[92 108]
[93 107]
[94 106]
[95 105]
[97 103]
[98 102]
[129 155]
[130 154]
[131 153]
[132 152]
[133 151]
[134 150]
[135 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
