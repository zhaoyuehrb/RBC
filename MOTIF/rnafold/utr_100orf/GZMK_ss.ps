%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:09:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUCAACACAUUUCAUCUGGGCUUCUUAAAUCUAAAUCUUUAAAAUGACUAAGUUUUCUUCCUUUUCUCUGUUUUUCCUAAUAGUUGGGGCUUAUAUGACUCAUGUGUGUUUCAAUAUGGAAAUUAUUGGAGGGAAAGAAGUGU\
) } def
/len { sequence length } bind def

/coor [
[105.10188293 232.24533081]
[98.19248962 246.13922119]
[84.42051697 253.28851318]
[69.08155823 250.94415283]
[58.07376099 240.00759888]
[55.62984848 224.68418884]
[62.68955231 210.86608887]
[76.53827667 203.86662292]
[78.80451202 189.03880310]
[81.07074738 174.21098328]
[83.33698273 159.38316345]
[85.60321808 144.55534363]
[87.86945343 129.72752380]
[90.13568878 114.89971161]
[85.03722382 109.39919281]
[70.41165924 112.72976685]
[74.84030914 98.39814758]
[69.74185181 92.89762878]
[54.78495789 94.03401184]
[39.82806778 95.17039490]
[34.20495605 109.31755066]
[23.04255867 119.57854462]
[8.59111977 123.95758820]
[-6.26747179 121.63740540]
[-18.59435844 113.13109589]
[-25.97499084 100.16992950]
[-40.93188477 101.30631256]
[-55.88877487 102.44269562]
[-70.84566498 103.57908630]
[-85.80255890 104.71546936]
[-93.83107758 117.99411774]
[-108.14431000 123.98668671]
[-123.23853302 120.38891602]
[-133.30970764 108.58421326]
[-134.48527527 93.11173248]
[-126.31317902 79.92095184]
[-111.93577576 74.08400726]
[-96.88146973 77.84531403]
[-86.93894196 89.75857544]
[-71.98204803 88.62219238]
[-57.02515793 87.48580933]
[-42.06826782 86.34942627]
[-27.11137390 85.21304321]
[-21.77366638 71.28557587]
[-10.87343025 61.01453018]
[3.46406293 56.47610474]
[18.41121483 58.62153244]
[30.99573326 67.07829285]
[38.69168472 80.21350861]
[53.64857483 79.07712555]
[68.60546875 77.94074249]
[87.39722443 74.18766022]
[100.95159912 80.94402313]
[104.96350098 91.97637177]
[117.55828857 83.82951355]
[130.15307617 75.68265533]
[142.74786377 67.53578949]
[155.34265137 59.38893509]
[167.93743896 51.24207687]
[180.53222656 43.09521866]
[193.12702942 34.94835663]
[205.72181702 26.80150032]
[202.72987366 16.33827019]
[202.35829163 5.47490597]
[204.62292480 -5.14312077]
[209.38313293 -14.88642311]
[216.35061646 -23.17900276]
[225.10670471 -29.53230858]
[235.12768555 -33.57400513]
[245.81599426 -35.06980896]
[256.53588867 -33.93703461]
[266.65130615 -30.24916267]
[275.56356812 -24.23109818]
[282.74673462 -16.24546432]
[296.29132080 -22.69090462]
[309.83593750 -29.13634682]
[323.38052368 -35.58178711]
[336.92514038 -42.02722931]
[337.89334106 -52.78161621]
[343.23300171 -62.07332230]
[351.90505981 -68.23046875]
[362.27816772 -70.17813110]
[372.43554688 -67.62551880]
[380.52905273 -61.10712051]
[394.46368408 -66.65919495]
[408.39834595 -72.21126556]
[422.33297729 -77.76333618]
[436.26763916 -83.31540680]
[450.20230103 -88.86748505]
[464.13693237 -94.41955566]
[478.07159424 -99.97162628]
[488.02777100 -112.26737213]
[502.71496582 -109.79044342]
[516.64959717 -115.34252167]
[530.58428955 -120.89459229]
[544.51892090 -126.44666290]
[558.45355225 -131.99873352]
[572.38824463 -137.55081177]
[584.86444092 -149.03038025]
[599.34912109 -140.21961975]
[594.89245605 -123.86191559]
[577.94030762 -123.61615753]
[564.00567627 -118.06408691]
[550.07098389 -112.51200867]
[536.13635254 -106.95993805]
[522.20172119 -101.40786743]
[508.26702881 -95.85579681]
[499.30758667 -83.95717621]
[483.62365723 -86.03697205]
[469.68902588 -80.48490143]
[455.75436401 -74.93283081]
[441.81970215 -69.38076019]
[427.88507080 -63.82868576]
[413.95040894 -58.27661514]
[400.01574707 -52.72454071]
[386.08111572 -47.17247009]
[379.81561279 -28.79322624]
[361.82534790 -20.71679878]
[343.37057495 -28.48262596]
[329.82598877 -22.03718567]
[316.28137207 -15.59174347]
[302.73675537 -9.14630222]
[289.19216919 -2.70086026]
[290.27609253 16.74458885]
[282.86056519 34.80366516]
[268.35482788 47.93865585]
[249.56124878 53.55776215]
[230.13403320 50.52645874]
[213.86866760 39.39628601]
[201.27388000 47.54314804]
[188.67909241 55.69000626]
[176.08430481 63.83686447]
[163.48951721 71.98372650]
[150.89472961 80.13058472]
[138.29994202 88.27744293]
[125.70515442 96.42430115]
[113.11035919 104.57115936]
[104.96350098 117.16594696]
[102.69726562 131.99375916]
[100.43103027 146.82157898]
[98.16479492 161.64939880]
[95.89855957 176.47721863]
[93.63232422 191.30503845]
[91.36609650 206.13285828]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 144]
[9 143]
[10 142]
[11 141]
[12 140]
[13 139]
[14 138]
[18 51]
[19 50]
[20 49]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
[54 137]
[55 136]
[56 135]
[57 134]
[58 133]
[59 132]
[60 131]
[61 130]
[62 129]
[74 123]
[75 122]
[76 121]
[77 120]
[78 119]
[84 116]
[85 115]
[86 114]
[87 113]
[88 112]
[89 111]
[90 110]
[91 109]
[93 107]
[94 106]
[95 105]
[96 104]
[97 103]
[98 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
