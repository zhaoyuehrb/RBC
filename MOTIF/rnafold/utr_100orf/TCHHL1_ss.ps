%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGCCCGCUGCCCCACGUUCUACCUGCUCUCGCUUGUGAACUAGCCUCUCCUGAGUUUGUAAAGAUGCCUCAGCUCCUGAGAAAUGUCCUCUGUGUAAUUGAGACAUUCCACAAAUAUGCCAGUGAGGACAGUAACGGGGCAACACUGACUGGCAGAGAGCUGA\
) } def
/len { sequence length } bind def

/coor [
[73.52260590 511.97790527]
[79.56894684 496.13876343]
[79.56894684 481.13876343]
[79.56894684 466.13876343]
[79.56894684 451.13876343]
[67.43052673 442.54824829]
[62.62121582 428.28872681]
[67.18396759 413.76168823]
[79.56894684 404.60098267]
[79.56894684 389.60098267]
[79.56894684 374.60098267]
[79.56894684 359.60098267]
[79.56894684 344.60098267]
[72.29258728 339.38034058]
[68.19519806 331.26229858]
[68.32054138 322.03167725]
[72.76776886 313.78485107]
[80.64003754 308.45376587]
[81.49121857 293.47793579]
[82.34239960 278.50210571]
[69.24295044 271.36978149]
[60.50330353 259.20724487]
[57.90041351 244.39555359]
[62.00329971 229.86329651]
[72.04972839 218.50740051]
[86.08717346 212.61573792]
[86.93834686 197.63990784]
[87.78952789 182.66407776]
[88.64070892 167.68824768]
[89.49188995 152.71241760]
[90.34306335 137.73658752]
[72.71820068 127.80306244]
[62.45291519 110.36933899]
[47.49587631 111.50376892]
[32.53883362 112.63819885]
[24.50858688 125.91580200]
[10.19456959 131.90650940]
[-4.89918613 128.30676270]
[-14.96882248 116.50074005]
[-16.14236069 101.02810669]
[-7.96854830 87.83840179]
[6.40961504 82.00332642]
[21.46343231 85.76660156]
[31.40440369 97.68115997]
[46.36144638 96.54673004]
[61.31848526 95.41229248]
[64.37514496 84.24638367]
[70.57847595 74.47196198]
[61.35350037 62.64403915]
[52.12852478 50.81611252]
[42.90354919 38.98818970]
[27.46603012 36.90953827]
[18.27908516 24.78292656]
[20.35589790 10.07842255]
[11.13092136 -1.74950254]
[1.90594423 -13.57742786]
[-7.31903219 -25.40535164]
[-16.54400826 -37.23327637]
[-35.53813553 -43.89809036]
[-37.48498154 -63.11022568]
[-47.15093613 -74.58059692]
[-56.81689072 -86.05095673]
[-72.41440582 -91.11550140]
[-75.56201935 -107.20974731]
[-63.02173615 -117.77730560]
[-47.69392395 -111.94718933]
[-45.34652328 -95.71691895]
[-35.68056870 -84.24655151]
[-26.01461411 -72.77618408]
[-15.74259377 -72.81907654]
[-6.97191572 -67.06041718]
[-2.75423694 -57.21328735]
[-4.71608448 -46.45825195]
[4.50889254 -34.63032913]
[13.73386860 -22.80240440]
[22.95884514 -10.97447968]
[32.18382263 0.85344559]
[46.95135117 2.42050982]
[56.47528076 14.28429413]
[54.73147202 29.76321220]
[63.95645142 41.59113693]
[73.18142700 53.41905975]
[82.40640259 65.24698639]
[98.09334564 61.09407043]
[114.11118317 63.69323349]
[127.68003845 72.59339142]
[140.17176819 64.28936768]
[152.66348267 55.98534393]
[165.15521240 47.68131638]
[177.64692688 39.37729263]
[190.13865662 31.07326508]
[202.63038635 22.76923943]
[210.88954163 3.02663946]
[231.49621582 2.43039083]
[243.49659729 -6.56910086]
[255.49697876 -15.56859207]
[267.49734497 -24.56808472]
[279.49774170 -33.56757355]
[285.89611816 -48.03724670]
[300.72036743 -49.48314285]
[312.72076416 -58.48263550]
[324.72113037 -67.48212433]
[322.80499268 -82.72102356]
[328.77978516 -96.87013245]
[341.03833008 -106.12341309]
[356.28317261 -107.99179077]
[370.41348267 -101.97266388]
[379.62829590 -89.68516541]
[381.44888306 -74.43455505]
[375.38549805 -60.32317734]
[363.06915283 -51.14692307]
[347.81292725 -49.37415695]
[333.72061157 -55.48174286]
[321.72024536 -46.48225403]
[309.71984863 -37.48276138]
[304.17984009 -23.65679169]
[288.49722290 -21.56719398]
[276.49685669 -12.56770229]
[264.49645996 -3.56821084]
[252.49607849 5.43128061]
[240.49569702 14.43077183]
[240.68463135 23.38423920]
[236.64828491 31.53280830]
[229.18833923 36.97060013]
[219.92250061 38.36051178]
[210.93440247 35.26096344]
[198.44268799 43.56499100]
[185.95095825 51.86901474]
[173.45922852 60.17303848]
[160.96751404 68.47706604]
[148.47578430 76.78108978]
[135.98406982 85.08511353]
[138.80027771 96.55825043]
[138.04757690 108.34795380]
[133.79522705 119.36981201]
[126.43434143 128.61000061]
[116.64199829 135.21861267]
[105.31889343 138.58776855]
[104.46772003 153.56359863]
[103.61653900 168.53942871]
[102.76535797 183.51525879]
[101.91417694 198.49108887]
[101.06300354 213.46691895]
[114.34246826 220.91119385]
[123.03749084 233.33227539]
[125.46733856 248.23583984]
[121.20293427 262.65719604]
[111.14145660 273.75115967]
[97.31822968 279.35330200]
[96.46704865 294.32913208]
[95.61586761 309.30496216]
[106.45523071 327.75738525]
[94.56894684 344.60098267]
[94.56894684 359.60098267]
[94.56894684 374.60098267]
[94.56894684 389.60098267]
[94.56894684 404.60098267]
[106.95391846 413.76168823]
[111.51667023 428.28872681]
[106.70735931 442.54824829]
[94.56894684 451.13876343]
[94.56894684 466.13876343]
[94.56894684 481.13876343]
[94.56894684 496.13876343]
[100.61528015 511.97790527]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 164]
[3 163]
[4 162]
[5 161]
[9 157]
[10 156]
[11 155]
[12 154]
[13 153]
[18 151]
[19 150]
[20 149]
[26 143]
[27 142]
[28 141]
[29 140]
[30 139]
[31 138]
[33 46]
[34 45]
[35 44]
[48 83]
[49 82]
[50 81]
[51 80]
[54 77]
[55 76]
[56 75]
[57 74]
[58 73]
[60 69]
[61 68]
[62 67]
[86 132]
[87 131]
[88 130]
[89 129]
[90 128]
[91 127]
[92 126]
[94 121]
[95 120]
[96 119]
[97 118]
[98 117]
[100 115]
[101 114]
[102 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
