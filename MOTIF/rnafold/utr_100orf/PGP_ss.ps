%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:16:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCGAGGAGCGGCCGGCGGGCGGCGGCGGCCGGCGGGCGGCGAUGGCGGCGGCGGAGGCCGGUGGCGACGACGCCCGCUGCGUGCGGCUGAGCGCCGAGCGGGCACAGGCGCUGCUGGCCGACGUGGACACGCUGCUGUUCG\
) } def
/len { sequence length } bind def

/coor [
[-18.56821823 205.36555481]
[-30.79827118 214.05036926]
[-43.02832413 222.73516846]
[-55.25837708 231.41996765]
[-67.48843384 240.10476685]
[-65.05487823 252.87081909]
[-67.64656830 265.55783081]
[-74.83959961 276.26882935]
[-85.52480316 283.41607666]
[-98.07865906 285.95654297]
[-110.60993195 283.54385376]
[-121.24459839 276.57513428]
[-133.83938599 284.72198486]
[-146.43417358 292.86883545]
[-159.02896118 301.01571655]
[-171.62374878 309.16256714]
[-184.21853638 317.30941772]
[-191.60357666 331.30126953]
[-206.49237061 331.71710205]
[-219.08715820 339.86398315]
[-223.84339905 355.18579102]
[-238.83973694 360.88574219]
[-252.57226562 352.59133911]
[-254.50656128 336.66531372]
[-243.15881348 325.32476807]
[-227.23402405 327.26919556]
[-214.63923645 319.12231445]
[-208.15505981 305.71319580]
[-192.36540222 304.71463013]
[-179.77061462 296.56777954]
[-167.17582703 288.42092896]
[-154.58103943 280.27404785]
[-141.98625183 272.12719727]
[-129.39144897 263.98034668]
[-130.90753174 246.89123535]
[-123.56217957 231.28907776]
[-109.27890778 221.46914673]
[-91.90451813 220.18450928]
[-76.17323303 227.87471008]
[-63.94318008 219.18991089]
[-51.71312714 210.50511169]
[-39.48307419 201.82031250]
[-27.25301933 193.13551331]
[-15.31162357 184.05789185]
[-3.67149639 174.59706116]
[7.96863031 165.13621521]
[19.60875702 155.67538452]
[31.24888420 146.21453857]
[42.88901138 136.75370789]
[54.52913666 127.29286957]
[66.16926575 117.83203125]
[77.80938721 108.37119293]
[89.44951630 98.91035461]
[100.56037140 88.83320618]
[111.10936737 78.16931152]
[121.65836334 67.50541687]
[121.74269104 51.92881012]
[132.59278870 41.26437759]
[147.44216919 41.44076157]
[157.99116516 30.77686501]
[168.54016113 20.11296844]
[179.08915710 9.44907093]
[189.63815308 -1.21482587]
[200.18714905 -11.87872314]
[210.73614502 -22.54261971]
[221.28514099 -33.20651627]
[231.83413696 -43.87041473]
[242.38313293 -54.53430939]
[252.93212891 -65.19820404]
[247.90322876 -79.56732178]
[249.60484314 -94.63356018]
[257.64627075 -107.41462708]
[270.38717651 -115.40400696]
[285.27203369 -117.06242371]
[299.34259033 -112.11417389]
[309.89157104 -122.77806854]
[320.44058228 -133.44197083]
[330.98956299 -144.10586548]
[341.53857422 -154.76976013]
[352.08755493 -165.43365479]
[362.63656616 -176.09754944]
[362.72088623 -191.67416382]
[373.57098389 -202.33859253]
[388.42037964 -202.16220093]
[398.96936035 -212.82609558]
[409.51834106 -223.49000549]
[420.06735229 -234.15390015]
[419.73114014 -249.95460510]
[430.72634888 -261.30718994]
[446.52972412 -261.47631836]
[457.76541138 -250.36170959]
[457.76745605 -234.55741882]
[446.53466797 -223.43986511]
[430.73126221 -223.60490417]
[420.18225098 -212.94100952]
[409.63327026 -202.27711487]
[399.08425903 -191.61320496]
[399.42150879 -176.76660156]
[388.87521362 -165.80162048]
[373.30044556 -165.54855347]
[362.75146484 -154.88465881]
[352.20245361 -144.22076416]
[341.65347290 -133.55686951]
[331.10446167 -122.89296722]
[320.55548096 -112.22907257]
[310.00646973 -101.56517792]
[315.10687256 -87.54905701]
[313.60980225 -72.64710236]
[305.75891113 -59.82039261]
[293.06570435 -51.64099121]
[278.01876831 -49.77626038]
[263.59603882 -54.64921188]
[253.04702759 -43.98531342]
[242.49803162 -33.32141876]
[231.94903564 -22.65752220]
[221.40003967 -11.99362469]
[210.85104370 -1.32972753]
[200.30204773 9.33416939]
[189.75305176 19.99806595]
[179.20407104 30.66196251]
[168.65507507 41.32585907]
[158.10607910 51.98975754]
[158.44331360 66.83636475]
[147.89703369 77.80135345]
[132.32226562 78.05441284]
[121.77326202 88.71830750]
[111.22427368 99.38220215]
[125.93131256 102.33228302]
[132.99122620 115.56699371]
[127.25021362 129.42486572]
[112.89926147 133.78952026]
[100.41471100 125.47471619]
[98.91035461 110.55048370]
[87.27022552 120.01132202]
[75.63010406 129.47215271]
[63.98997498 138.93299866]
[52.34984970 148.39382935]
[40.70972061 157.85467529]
[29.06959534 167.31550598]
[17.42946815 176.77635193]
[5.78934145 186.23718262]
[-5.85078526 195.69802856]
[-7.75662422 200.71716309]
[-11.09245777 204.11911011]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[3 41]
[4 40]
[5 39]
[12 34]
[13 33]
[14 32]
[15 31]
[16 30]
[17 29]
[19 27]
[20 26]
[44 142]
[45 141]
[46 140]
[47 139]
[48 138]
[49 137]
[50 136]
[51 135]
[52 134]
[53 133]
[54 127]
[55 126]
[56 125]
[59 122]
[60 121]
[61 120]
[62 119]
[63 118]
[64 117]
[65 116]
[66 115]
[67 114]
[68 113]
[69 112]
[75 106]
[76 105]
[77 104]
[78 103]
[79 102]
[80 101]
[81 100]
[84 97]
[85 96]
[86 95]
[87 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
