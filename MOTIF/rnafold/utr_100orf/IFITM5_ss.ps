%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:43:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAGUCUGAGUGUGGAAGAGACGGCGCUGGAACCCAUGGACACGGCGUAUCCCCGCGAGGACACCCGGGCCCCCACGCCCAGCAAGGCCGGUGCCCACACAGCCCUCACACUGGGGGCCCCGCACCCCCCGCCUC\
) } def
/len { sequence length } bind def

/coor [
[100.16669464 147.41569519]
[83.85321045 144.58203125]
[69.50869751 136.31193542]
[58.88235855 123.61388397]
[53.26999283 108.03630829]
[38.27097702 108.20829010]
[23.27196503 108.38027191]
[8.27295017 108.55225372]
[-2.73453212 119.57373047]
[-17.94811440 119.53447723]
[-28.38757896 108.97261047]
[-43.38659286 109.14458466]
[-58.38560867 109.31656647]
[-67.01832581 112.56726837]
[-73.72956848 109.31656647]
[-88.72858429 109.14458466]
[-92.59923553 111.52547455]
[-96.62099457 112.40414429]
[-100.28580475 111.92596436]
[-103.18997955 110.39140320]
[-105.07707977 108.20632935]
[-119.99728394 106.66120911]
[-130.53591919 114.19670105]
[-142.98066711 112.54760742]
[-150.68251038 103.14858246]
[-165.56336975 101.26175690]
[-180.44422913 99.37493134]
[-195.32507324 97.48811340]
[-210.20593262 95.60128784]
[-225.08679199 93.71446228]
[-235.73262024 104.84875488]
[-250.71820068 107.54793549]
[-264.25952148 100.98314667]
[-271.25494385 87.86055756]
[-286.13580322 85.97373199]
[-302.60968018 89.97966766]
[-311.01947021 75.25854492]
[-299.20172119 63.10218430]
[-284.24896240 71.09288025]
[-269.36810303 72.97969818]
[-259.31896973 62.01828003]
[-244.56773376 59.04085159]
[-230.73002625 65.39469147]
[-223.19996643 78.83360291]
[-208.31910706 80.72042847]
[-193.43824768 82.60725403]
[-178.55740356 84.49407959]
[-163.67654419 86.38089752]
[-148.79568481 88.26772308]
[-133.05621338 80.59180450]
[-118.45217133 91.74099731]
[-103.53195953 93.28611755]
[-88.55660248 94.14557648]
[-73.55758667 94.31755829]
[-58.55758667 94.31755829]
[-43.55857468 94.14557648]
[-28.55956078 93.97359467]
[-18.36501694 83.17512512]
[-3.15633440 82.78704834]
[8.10096931 93.55323792]
[23.09998322 93.38125610]
[38.09899902 93.20927429]
[53.09801102 93.03729248]
[57.41487885 79.14853668]
[65.73844147 67.22162628]
[77.28556061 58.37873077]
[90.96981049 53.45183563]
[105.50367737 52.90450668]
[109.57942200 38.46884537]
[113.65516663 24.03318596]
[117.73091125 9.59752560]
[109.79481506 -4.06973028]
[113.92804718 -19.32397270]
[127.67844391 -27.11512947]
[142.88813782 -22.82084656]
[150.53347778 -8.98884487]
[146.07862854 6.17459345]
[132.16656494 13.67327023]
[128.09082031 28.10893059]
[124.01508331 42.54459000]
[119.93933868 56.98025131]
[130.57130432 63.75540543]
[139.04205322 73.09286499]
[144.75271606 84.33251953]
[147.29959106 96.67978668]
[146.50263977 109.26177216]
[160.56506348 114.48175049]
[174.62748718 119.70173645]
[188.68991089 124.92172241]
[209.46936035 119.92761993]
[222.19046021 136.11892700]
[236.57844543 140.35990906]
[250.96641541 144.60090637]
[265.35440063 148.84188843]
[279.74240112 153.08287048]
[286.76730347 144.87298584]
[296.11352539 139.52796936]
[306.67602539 137.64991760]
[317.21600342 139.43278503]
[326.50607300 144.64263916]
[333.47329712 152.64807129]
[337.32308960 162.49656677]
[337.62973022 173.02783203]
[351.56875610 178.56887817]
[365.50778198 184.10992432]
[379.44683838 189.65098572]
[393.38586426 195.19203186]
[407.32489014 200.73307800]
[421.26394653 206.27413940]
[438.21630859 206.50648499]
[442.68591309 222.86065674]
[428.20816040 231.68287659]
[415.72290039 220.21318054]
[401.78384399 214.67211914]
[387.84481812 209.13107300]
[373.90579224 203.59001160]
[359.96673584 198.04896545]
[346.02770996 192.50791931]
[332.08868408 186.96685791]
[316.43991089 198.53538513]
[296.83758545 198.44500732]
[281.06939697 186.56187439]
[275.50140381 167.47085571]
[261.11340332 163.22987366]
[246.72543335 158.98887634]
[232.33744812 154.74789429]
[217.94947815 150.50691223]
[210.82135010 156.05310059]
[201.79515076 157.67123413]
[192.92025757 154.86312866]
[186.27273560 148.15069580]
[183.46992493 138.98414612]
[169.40750122 133.76416016]
[155.34507751 128.54417419]
[141.28265381 123.32419586]
[130.74586487 136.09664917]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 63]
[6 62]
[7 61]
[8 60]
[11 57]
[12 56]
[13 55]
[15 54]
[16 53]
[21 52]
[22 51]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[34 40]
[35 39]
[68 81]
[69 80]
[70 79]
[71 78]
[86 135]
[87 134]
[88 133]
[89 132]
[91 127]
[92 126]
[93 125]
[94 124]
[95 123]
[103 119]
[104 118]
[105 117]
[106 116]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
