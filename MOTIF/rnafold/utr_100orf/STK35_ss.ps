%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:17:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGCCACCAGGAGUCUCCGCUGGCCCGGGCGCCGGCGGGAGGUGCAGCUUAUGUAAAGAGGUUAUGUAAAGGGCUCAGCUGGCGCGAACACGUGGAAA\
) } def
/len { sequence length } bind def

/coor [
[29.58628654 247.37417603]
[29.30289841 232.37686157]
[34.03063202 218.13876343]
[21.70629692 226.68925476]
[9.38196182 235.23973083]
[-2.94237280 243.79022217]
[-15.26670742 252.34069824]
[-27.59104156 260.89117432]
[-28.47290802 274.43731689]
[-36.91753006 284.81463623]
[-49.62457275 288.32662964]
[-61.83188248 283.89227295]
[-74.41617584 292.05532837]
[-87.00046539 300.21841431]
[-96.99830627 313.91070557]
[-112.92320251 308.09399414]
[-111.74225616 291.18124390]
[-95.16352844 287.63412476]
[-82.57923889 279.47103882]
[-69.99494934 271.30798340]
[-67.26102448 254.79541016]
[-53.20263290 245.10829163]
[-36.14152527 248.56684875]
[-23.81719208 240.01637268]
[-11.49285698 231.46588135]
[0.83147812 222.91540527]
[13.15581322 214.36491394]
[25.48014832 205.81443787]
[26.86377144 200.81649780]
[30.62680817 196.51998901]
[36.35874557 194.05520630]
[43.92598724 181.10388184]
[51.49323273 168.15255737]
[59.06047440 155.20123291]
[66.62771606 142.24990845]
[74.19496155 129.29858398]
[81.76219940 116.34725189]
[89.32944489 103.39592743]
[96.69435883 90.32848358]
[103.85515594 77.14808655]
[111.01595306 63.96768188]
[102.72403717 48.01080704]
[105.51062775 30.40216446]
[118.10359955 18.00272369]
[135.44651794 15.53288651]
[141.77404785 1.93279719]
[148.10156250 -11.66729164]
[154.42909241 -25.26738167]
[160.33059692 -39.05767822]
[165.80036926 -53.02483749]
[171.27014160 -66.99199677]
[176.73991394 -80.95915985]
[168.26348877 -93.95645905]
[169.07916260 -109.45207977]
[178.87329102 -121.48764038]
[193.87982178 -125.43522644]
[208.32846069 -119.77690125]
[216.66339111 -106.68840790]
[215.67967224 -91.20254517]
[205.75555420 -79.27394104]
[190.70707703 -75.48938751]
[185.23730469 -61.52222443]
[179.76753235 -47.55506516]
[174.29776001 -33.58790207]
[175.43728638 -28.78246880]
[173.44087219 -23.22152901]
[168.02919006 -18.93985558]
[161.70166016 -5.33976650]
[155.37413025 8.26032257]
[149.04660034 21.86041260]
[156.54933167 31.65499878]
[159.12194824 43.79623032]
[156.20236206 55.93367767]
[148.29791260 65.68999481]
[136.89857483 71.12654877]
[124.19635773 71.12847900]
[117.03555298 84.30888367]
[109.87475586 97.48928070]
[109.06941223 105.66525269]
[102.28076935 110.96317291]
[94.71353149 123.91449738]
[87.14628601 136.86582947]
[79.57904053 149.81715393]
[72.01180267 162.76847839]
[64.44455719 175.71980286]
[56.87731552 188.67112732]
[49.31007004 201.62245178]
[63.13540649 195.80351257]
[78.10937500 194.92013550]
[92.52299500 199.07315063]
[104.73123932 207.78858948]
[113.34078979 220.07173157]
[117.36904144 234.52070618]
[116.35623932 249.48648071]
[110.41798401 263.26098633]
[100.23200989 274.27215576]
[86.96082306 281.26327515]
[72.11908722 283.43646240]
[57.40066910 280.54367065]
[44.48538589 272.91506958]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 28]
[4 27]
[5 26]
[6 25]
[7 24]
[8 23]
[12 20]
[13 19]
[14 18]
[31 87]
[32 86]
[33 85]
[34 84]
[35 83]
[36 82]
[37 81]
[38 80]
[39 78]
[40 77]
[41 76]
[45 70]
[46 69]
[47 68]
[48 67]
[49 64]
[50 63]
[51 62]
[52 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
