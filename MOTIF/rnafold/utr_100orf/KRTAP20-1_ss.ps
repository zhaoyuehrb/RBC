%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:05:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUACACCUGAACCAUCCAUUUCUGACACCAUGAUUUACUACAGCAACUAUUAUGGUGGCUAUGGGUAUGGUGGGCUUGGCUGUGGCUAUGGCUGUGGUUAUCGUGGCUAUGGAUGUGGUUAUGGUGGCU\
) } def
/len { sequence length } bind def

/coor [
[89.77313232 390.71884155]
[77.46233368 381.27297974]
[73.08711243 366.38549805]
[78.32982635 351.78094482]
[91.17453766 343.07501221]
[91.53422546 328.07934570]
[91.89392090 313.08364868]
[92.25360870 298.08795166]
[81.82321930 287.51712036]
[81.97437286 272.30422974]
[93.13275909 261.43554688]
[93.49244690 246.43988037]
[93.85214233 231.44418335]
[94.21183014 216.44850159]
[94.57151794 201.45281982]
[94.57151794 186.45281982]
[94.21183014 171.45712280]
[93.85214233 156.46144104]
[93.49244690 141.46575928]
[93.13275909 126.47006989]
[85.53999329 123.21059418]
[79.26738739 117.83205414]
[74.88761139 110.82549286]
[72.80052948 102.83059692]
[73.19668579 94.57727051]
[76.03992462 86.81902313]
[81.07064056 80.26416779]
[87.82956696 75.51114655]
[95.69962311 72.99388885]
[97.49393463 58.10159302]
[99.28824615 43.20929718]
[101.08256531 28.31700325]
[102.87687683 13.42470837]
[104.67119598 -1.46758616]
[106.46550751 -16.35988045]
[99.10427094 -27.03004646]
[100.96847534 -39.45180511]
[110.50723267 -46.99147797]
[112.65813446 -61.83646393]
[114.80904388 -76.68144989]
[116.95994568 -91.52643585]
[119.11085510 -106.37142181]
[121.26175690 -121.21640778]
[123.41266632 -136.06138611]
[125.56356812 -150.90637207]
[113.96115112 -141.39933777]
[99.21611786 -138.64541626]
[84.96430969 -143.32365417]
[74.71992493 -154.28050232]
[71.00901794 -168.81422424]
[74.74662781 -183.34111023]
[85.01113129 -194.27911377]
[99.27151489 -198.93115234]
[114.01145935 -196.15011597]
[125.59638977 -186.62178040]
[131.16954041 -172.69680786]
[136.44978333 -186.73672485]
[141.73002625 -200.77662659]
[147.01026917 -214.81654358]
[152.29052734 -228.85644531]
[157.57077026 -242.89636230]
[162.85101318 -256.93627930]
[168.13125610 -270.97616577]
[173.41149902 -285.01608276]
[178.69174194 -299.05599976]
[176.30755615 -314.69653320]
[188.02983093 -323.88552856]
[193.31007385 -337.92541504]
[184.01620483 -350.23913574]
[182.87779236 -365.62445068]
[190.25810242 -379.17193604]
[203.80209351 -386.55868530]
[219.18794250 -385.42755127]
[231.50605774 -376.13952637]
[236.82580566 -361.65838623]
[233.44964600 -346.60498047]
[222.45491028 -335.78280640]
[207.34997559 -332.64517212]
[202.06973267 -318.60528564]
[204.83160400 -303.96896362]
[192.73164368 -293.77575684]
[187.45140076 -279.73583984]
[182.17115784 -265.69592285]
[176.89091492 -251.65602112]
[171.61067200 -237.61611938]
[166.33042908 -223.57620239]
[161.05018616 -209.53630066]
[155.76994324 -195.49638367]
[150.48970032 -181.45648193]
[145.20945740 -167.41656494]
[147.08554077 -157.69395447]
[140.40855408 -148.75547791]
[138.25764465 -133.91049194]
[136.10675049 -119.06549835]
[133.95584106 -104.22051239]
[131.80493164 -89.37553406]
[129.65402222 -74.53054810]
[127.50312042 -59.68555832]
[125.35221863 -44.84057236]
[132.75009155 -28.97395325]
[121.35780334 -14.56556606]
[119.56348419 0.32672855]
[117.76917267 15.21902275]
[115.97486115 30.11131668]
[114.18054199 45.00361252]
[112.38623047 59.89590454]
[110.59191132 74.78820038]
[125.60253906 90.39096832]
[124.56448364 112.01705170]
[108.12844849 126.11037445]
[108.48813629 141.10606384]
[108.84782410 156.10174561]
[109.20751953 171.09744263]
[109.56720734 186.09312439]
[112.75395966 192.06938171]
[112.41834259 197.86843872]
[109.56720734 201.81250000]
[109.20751953 216.80819702]
[108.84782410 231.80387878]
[108.48813629 246.79956055]
[108.12844849 261.79525757]
[118.75289917 273.18643188]
[118.17450714 288.38906860]
[107.24929047 298.44766235]
[106.88960266 313.44332886]
[106.52991486 328.43902588]
[106.17022705 343.43472290]
[118.58276367 352.74645996]
[123.11923218 367.58560181]
[118.03526306 382.24618530]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 127]
[6 126]
[7 125]
[8 124]
[11 121]
[12 120]
[13 119]
[14 118]
[15 117]
[16 114]
[17 113]
[18 112]
[19 111]
[20 110]
[29 107]
[30 106]
[31 105]
[32 104]
[33 103]
[34 102]
[35 101]
[38 99]
[39 98]
[40 97]
[41 96]
[42 95]
[43 94]
[44 93]
[45 92]
[56 90]
[57 89]
[58 88]
[59 87]
[60 86]
[61 85]
[62 84]
[63 83]
[64 82]
[65 81]
[67 79]
[68 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
