%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:10:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCACCGCCUGUCCUUCCUGACACCUCACCAUGUGUACGGGAAAAUGUGCCCGCUGUGUGGGGCUCUCCCUCAUUACCCUCUGCCUCGUCUGCAUUGUGGCCAACGCCCUCCUGCUGGUACCUAAUGGGG\
) } def
/len { sequence length } bind def

/coor [
[157.16612244 131.51655579]
[151.46891785 140.15231323]
[144.47894287 147.77952576]
[136.37171936 154.20660400]
[127.35092926 159.27212524]
[117.64313507 162.84884644]
[107.49217987 164.84693909]
[97.15303802 165.21620178]
[86.88540649 163.94737244]
[76.94718170 161.07229614]
[67.58799744 156.66322327]
[59.04294586 150.83087158]
[51.52664566 143.72177124]
[45.22790146 135.51445007]
[40.30492020 126.41507721]
[36.88136292 116.65221405]
[22.03404045 118.78693390]
[7.18671942 120.92166138]
[-7.66060257 123.05638123]
[-22.50792313 125.19110107]
[-37.35524750 127.32582855]
[-52.17611313 129.63706970]
[-66.96842957 132.12452698]
[-81.76074219 134.61198425]
[-96.55306244 137.09942627]
[-103.34490204 151.05114746]
[-117.05603027 158.31645203]
[-132.41423035 156.10168457]
[-143.51396179 145.25845337]
[-146.08715820 129.95622253]
[-139.14437866 116.07901001]
[-125.35523987 108.96286774]
[-110.02196503 111.34411621]
[-99.04051208 122.30711365]
[-84.24819183 119.81966400]
[-69.45587921 117.33221436]
[-54.66356277 114.84476471]
[-48.52939987 110.59185791]
[-39.48996735 112.47850800]
[-24.64264679 110.34378052]
[-9.79532528 108.20906067]
[5.05199671 106.07434082]
[19.89931870 103.93961334]
[34.74663925 101.80489349]
[35.47562408 90.10739899]
[38.28456879 78.72879791]
[43.08292770 68.03587341]
[49.71601868 58.37332535]
[57.97003174 50.05262375]
[67.57888794 43.34198761]
[61.67413712 29.55308342]
[55.76938248 15.76417923]
[49.86463165 1.97527444]
[34.70494843 -1.33587277]
[24.41192245 -12.94764423]
[22.94342995 -28.39507484]
[30.86413383 -41.73831558]
[45.12836456 -47.84661484]
[60.25123596 -44.37120819]
[70.41769409 -32.64846420]
[71.71852112 -17.18600845]
[63.65353394 -3.92947888]
[69.55828857 9.85942554]
[75.46304321 23.64833069]
[81.36779785 37.43723297]
[104.81629944 34.89960098]
[127.63608551 40.86028671]
[146.84820557 54.54117584]
[159.94467163 74.15633392]
[165.21586609 97.14517212]
[180.17764282 98.21526337]
[195.13941956 99.28534698]
[210.10121155 100.35543823]
[225.06298828 101.42552185]
[240.02476501 102.49561310]
[254.98655701 103.56569672]
[269.94833374 104.63578796]
[276.11752319 95.72433472]
[285.38641357 90.26498413]
[296.00970459 89.20658112]
[306.01992798 92.67659760]
[313.59179688 99.97013855]
[317.37515259 109.69190979]
[332.22247314 111.82662964]
[347.06979370 113.96134949]
[361.91711426 116.09607697]
[366.92507935 110.15936279]
[373.64978027 106.41222382]
[381.19735718 105.29708862]
[388.58413696 106.91020203]
[394.86456299 110.99536896]
[399.25247192 116.98323059]
[401.21917725 124.07020569]
[415.70806885 127.95249176]
[430.19696045 131.83477783]
[441.08474731 121.09219360]
[455.79071045 117.26698303]
[470.34011841 121.28955078]
[480.85223389 131.98306274]
[484.57531738 146.40541077]
[499.06420898 150.28770447]
[513.55310059 154.16998291]
[529.24475098 149.40524292]
[541.03045654 160.80827332]
[536.78607178 176.64863586]
[520.87780762 180.63111877]
[509.67080688 168.65887451]
[495.18191528 164.77658081]
[480.69302368 160.89430237]
[470.25756836 171.52288818]
[455.80703735 175.52767944]
[441.19561768 171.73661804]
[430.37249756 161.07092285]
[426.31466675 146.32366943]
[411.82580566 142.44137573]
[397.33691406 138.55909729]
[376.52416992 146.96008301]
[359.78237915 130.94338989]
[344.93505859 128.80867004]
[330.08773804 126.67395020]
[315.24041748 124.53923035]
[300.67816162 137.35327148]
[281.07174683 135.45024109]
[268.87823486 119.59756470]
[253.91645813 118.52748108]
[238.95468140 117.45738983]
[223.99290466 116.38730621]
[209.03111267 115.31721497]
[194.06933594 114.24713135]
[179.10755920 113.17704010]
[164.14576721 112.10695648]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 44]
[17 43]
[18 42]
[19 41]
[20 40]
[21 39]
[22 37]
[23 36]
[24 35]
[25 34]
[50 65]
[51 64]
[52 63]
[53 62]
[70 131]
[71 130]
[72 129]
[73 128]
[74 127]
[75 126]
[76 125]
[77 124]
[83 121]
[84 120]
[85 119]
[86 118]
[93 116]
[94 115]
[95 114]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
