%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:18:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGAGCUGCCCAAGACCGGCUCGCCGCGCCCAGGCCCGCGUUGGUCGCCCCUCCGGGCCCCAGCGCCGGGUGCUCCGCCUCCCAAGGCCGGCGGCGGCAUGGCGGCCAGGCAGAUCUGGGCACGGACGGGUGCCGCGCUCUGCAGGCAACCUUCCGCCGCCCCGCCGCCAGCACCUCUCUGGGUAAGAGCUGGGUUCC\
) } def
/len { sequence length } bind def

/coor [
[35.09318161 313.04019165]
[21.45794678 313.90075684]
[15.69036007 327.74758911]
[9.92277241 341.59442139]
[4.15518475 355.44125366]
[-1.61240268 369.28811646]
[-7.37999010 383.13494873]
[-13.14757729 396.98178101]
[-4.95139694 410.15759277]
[-6.09867811 425.63220215]
[-16.14826775 437.45529175]
[-31.23589325 441.08065796]
[-45.56005478 435.11422729]
[-53.61281967 421.85028076]
[-52.29773712 406.38903809]
[-42.12048340 394.67565918]
[-26.99441528 391.21420288]
[-21.22682762 377.36737061]
[-15.45924091 363.52050781]
[-9.69165325 349.67367554]
[-3.92406607 335.82684326]
[1.84352160 321.98001099]
[7.61110926 308.13317871]
[-2.50991702 295.54223633]
[-4.91688347 279.47317505]
[1.14032304 264.29498291]
[14.09742832 254.18272400]
[30.47847939 251.96925354]
[36.02676010 238.03309631]
[41.57503891 224.09692383]
[47.12331772 210.16076660]
[52.67159653 196.22460938]
[58.21987534 182.28843689]
[63.21395493 168.14421082]
[67.64605713 153.81394958]
[72.07815552 139.48368835]
[76.51026154 125.15342712]
[68.04183197 112.77256012]
[53.07966995 111.70783997]
[38.11750412 110.64311981]
[23.15534019 109.57839966]
[8.19317627 108.51367950]
[-6.76898861 107.44896698]
[-21.73115349 106.38424683]
[-31.97523308 114.23198700]
[-44.42107010 113.03121948]
[-52.44351196 103.96944427]
[-67.38700867 102.66866302]
[-82.33049774 101.36788177]
[-97.27398682 100.06709290]
[-111.89664459 107.49070740]
[-125.48743439 98.31342316]
[-124.06532288 81.97605896]
[-109.09324646 75.28507996]
[-95.97320557 85.12360382]
[-81.02971649 86.42438507]
[-66.08621979 87.72516632]
[-51.14273071 89.02595520]
[-35.67018127 80.75426483]
[-20.66643333 91.42208099]
[-5.70426893 92.48680115]
[9.25789547 93.55152130]
[24.22006035 94.61624146]
[39.18222427 95.68095398]
[54.14439011 96.74567413]
[69.10655212 97.81039429]
[85.51921844 76.48396301]
[109.36236572 77.61608887]
[119.14453888 66.24467468]
[128.92671204 54.87326050]
[138.70889282 43.50184631]
[148.49105835 32.13043213]
[158.27323914 20.75901794]
[168.05540466 9.38760281]
[155.99485779 6.16837168]
[149.75657654 -3.88472390]
[151.97355652 -14.84279156]
[144.30329895 -27.73338318]
[136.63305664 -40.62397385]
[128.96281433 -53.51456451]
[114.39753723 -61.05012131]
[113.91127014 -77.44206238]
[128.00425720 -85.82775879]
[142.17883301 -77.58072662]
[141.85340881 -61.18481064]
[149.52365112 -48.29421997]
[157.19389343 -35.40362549]
[164.86413574 -22.51303482]
[177.69680786 -17.53709793]
[181.72454834 -3.14337611]
[193.90142822 -11.90258312]
[206.07830811 -20.66178894]
[218.25517273 -29.42099571]
[230.43205261 -38.18020248]
[242.60893250 -46.93941116]
[254.78581238 -55.69861603]
[266.96267700 -64.45782471]
[269.11386108 -69.23529053]
[272.54296875 -72.38864899]
[276.41467285 -73.70301819]
[279.92987061 -73.32727814]
[292.50775146 -81.50017548]
[305.08566284 -89.67307281]
[317.66357422 -97.84597015]
[330.24148560 -106.01885986]
[339.93359375 -117.46714020]
[345.91906738 -131.22120667]
[351.90451050 -144.97526550]
[357.88998413 -158.72932434]
[351.86972046 -173.34205627]
[358.02252197 -187.89947510]
[372.69808960 -193.76490784]
[387.18963623 -187.45851135]
[392.89959717 -172.72175598]
[386.44033813 -158.29769897]
[371.64404297 -152.74386597]
[365.65856934 -138.98980713]
[359.67312622 -125.23574066]
[353.68765259 -111.48168182]
[358.71200562 -105.91337585]
[373.38085938 -109.04779816]
[368.76068115 -94.77677155]
[373.78503418 -89.20847321]
[388.07986450 -93.75354767]
[402.37469482 -98.29862976]
[416.66952515 -102.84370422]
[427.47650146 -114.39878845]
[441.94989014 -110.88166046]
[456.24472046 -115.42673492]
[467.05169678 -126.98181915]
[481.52508545 -123.46469116]
[495.81991577 -128.00976562]
[510.11474609 -132.55484009]
[524.40960693 -137.09992981]
[538.66809082 -141.75769043]
[552.88940430 -146.52786255]
[561.29559326 -160.19226074]
[577.23687744 -161.99655151]
[588.48443604 -150.55664062]
[586.41015625 -134.64825439]
[572.60522461 -126.47493744]
[557.65960693 -132.30656433]
[543.43829346 -127.53639221]
[538.09118652 -122.42369080]
[528.95465088 -122.80509186]
[514.65985107 -118.26000977]
[500.36499023 -113.71493530]
[486.07015991 -109.16985321]
[476.28567505 -97.93986511]
[460.78979492 -101.13190460]
[446.49496460 -96.58682251]
[436.71047974 -85.35683441]
[421.21463013 -88.54887390]
[406.91976929 -84.00379181]
[392.62493896 -79.45871735]
[378.33010864 -74.91364288]
[338.41439819 -93.44095612]
[325.83648682 -85.26805878]
[313.25857544 -77.09516144]
[300.68066406 -68.92227173]
[288.10275269 -60.74937439]
[275.72189331 -52.28094864]
[263.54501343 -43.52173996]
[251.36813354 -34.76253510]
[239.19126892 -26.00332642]
[227.01438904 -17.24412155]
[214.83750916 -8.48491383]
[202.66062927 0.27429277]
[190.48376465 9.03349972]
[179.42681885 19.16977692]
[169.64465332 30.54119110]
[159.86247253 41.91260529]
[150.08030701 53.28401947]
[140.29812622 64.65543365]
[130.51594543 76.02684784]
[120.73377991 87.39826202]
[125.55428314 98.39577484]
[124.59616089 111.00570679]
[117.49144745 122.23166656]
[105.39769745 129.13354492]
[90.84052277 129.58552551]
[86.40842438 143.91578674]
[81.97631836 158.24604797]
[77.54421997 172.57632446]
[91.84396362 168.04672241]
[104.39068604 176.26742554]
[105.94757843 191.18640137]
[95.36848450 201.82044983]
[80.44163513 200.34085083]
[72.15603638 187.83673096]
[66.60775757 201.77288818]
[61.05947876 215.70904541]
[55.51119995 229.64520264]
[49.96292114 243.58137512]
[44.41464233 257.51751709]
[53.64336395 268.03622437]
[57.41961670 281.44158936]
[55.06086731 295.10034180]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 23]
[3 22]
[4 21]
[5 20]
[6 19]
[7 18]
[8 17]
[28 195]
[29 194]
[30 193]
[31 192]
[32 191]
[33 190]
[34 184]
[35 183]
[36 182]
[37 181]
[38 66]
[39 65]
[40 64]
[41 63]
[42 62]
[43 61]
[44 60]
[47 58]
[48 57]
[49 56]
[50 55]
[68 176]
[69 175]
[70 174]
[71 173]
[72 172]
[73 171]
[74 170]
[77 88]
[78 87]
[79 86]
[80 85]
[90 169]
[91 168]
[92 167]
[93 166]
[94 165]
[95 164]
[96 163]
[97 162]
[101 161]
[102 160]
[103 159]
[104 158]
[105 157]
[106 119]
[107 118]
[108 117]
[109 116]
[123 156]
[124 155]
[125 154]
[126 153]
[128 151]
[129 150]
[131 148]
[132 147]
[133 146]
[134 145]
[135 143]
[136 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
