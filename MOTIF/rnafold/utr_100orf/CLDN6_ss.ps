%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGACACUCGGCCUAGGAAUUUCCCUUAUCUCCUUCGCAGUGCAGCUCCUUCAACCUCGCCAUGGCCUCUGCCGGAAUGCAGAUCCUGGGAGUCGUCCUGACACUGCUGGGCUGGGUGAAUGGCCUGGUCUCCUGUGCCCUGCCCAUGUGGAAGGUGACCG\
) } def
/len { sequence length } bind def

/coor [
[221.85308838 270.10397339]
[212.84648132 254.75688171]
[211.41860962 236.96670532]
[217.90028381 220.28140259]
[207.34555054 209.62318420]
[196.79081726 198.96496582]
[186.23608398 188.30674744]
[175.68133545 177.64852905]
[165.12660217 166.99031067]
[154.57186890 156.33209229]
[144.01713562 145.67387390]
[133.46240234 135.01565552]
[122.90766907 124.35744476]
[112.35293579 113.69922638]
[97.35579681 113.99190521]
[87.22493744 125.05381012]
[77.09408569 136.11572266]
[70.85542297 151.88008118]
[53.98009491 150.24925232]
[50.87564468 133.58195496]
[66.03217316 125.98486328]
[76.16303253 114.92295074]
[86.29388428 103.86104584]
[72.09986877 108.71179199]
[59.31671524 116.55979156]
[44.37640762 117.89664459]
[30.40301514 112.44280243]
[20.31843185 101.33869934]
[16.23138428 86.90623474]
[18.99648666 72.16329193]
[28.03554535 60.19269180]
[41.45846176 53.49751663]
[56.45845032 53.47776413]
[69.89894867 60.13756180]
[78.96878815 72.08269501]
[90.44094086 81.74652863]
[85.00627136 67.76567841]
[79.57159424 53.78482056]
[74.13691711 39.80396652]
[68.70223999 25.82311249]
[63.26756287 11.84225655]
[57.69674301 -2.08490968]
[51.99031067 -15.95706272]
[46.28387833 -29.82921600]
[39.90778732 -43.40660095]
[32.87720108 -56.65691757]
[25.84661674 -69.90723419]
[18.81603050 -83.15754700]
[11.78544617 -96.40786743]
[-3.42963767 -95.89541626]
[-17.30186462 -102.01491547]
[-27.10138321 -113.50359344]
[-30.92526436 -128.04797363]
[-28.06686401 -142.74963379]
[-19.14570999 -154.70281982]
[-26.17629433 -167.95314026]
[-32.99780273 -174.10559082]
[-33.21192551 -181.53128052]
[-39.98263550 -194.91625977]
[-58.16661072 -200.08953857]
[-66.69609070 -216.60450745]
[-60.60065460 -233.82719421]
[-67.88843536 -246.93780518]
[-75.17622375 -260.04843140]
[-82.46400452 -273.15902710]
[-96.80134583 -281.11972046]
[-96.80527496 -297.51885986]
[-82.47174835 -305.48645020]
[-68.54586792 -296.82608032]
[-69.35339355 -280.44680786]
[-62.06560898 -267.33621216]
[-54.77782440 -254.22558594]
[-47.49003983 -241.11497498]
[-36.04294968 -240.42405701]
[-26.26220703 -234.20944214]
[-20.65912628 -223.92887878]
[-20.73878860 -212.10064697]
[-26.59766388 -201.68696594]
[-19.82695389 -188.30200195]
[-12.92597866 -174.98371887]
[-5.89539385 -161.73339844]
[9.00409889 -162.41940308]
[22.78055954 -156.54414368]
[32.68048859 -145.22370911]
[36.69997025 -130.66815186]
[33.99013519 -115.75025940]
[25.03576279 -103.43845367]
[32.06634903 -90.18813324]
[39.09693146 -76.93782043]
[46.12751770 -63.68750381]
[53.15810013 -50.43718719]
[60.24274445 -63.65867996]
[74.95951843 -66.55981445]
[86.53187561 -57.01620102]
[86.48580933 -42.01627350]
[74.85505676 -32.54391861]
[60.15603256 -35.53564835]
[65.86246490 -21.66349602]
[71.56890106 -7.79134226]
[77.04955292 -2.77643514]
[77.24842072 6.40758085]
[82.68309784 20.38843536]
[88.11776733 34.36928940]
[93.55244446 48.35014343]
[98.98712158 62.33099747]
[104.42179871 76.31185150]
[123.01115417 103.14449310]
[133.56588745 113.80271149]
[144.12062073 124.46092987]
[154.67535400 135.11914062]
[165.23008728 145.77735901]
[175.78482056 156.43557739]
[186.33955383 167.09379578]
[196.89428711 177.75201416]
[207.44903564 188.41023254]
[218.00376892 199.06845093]
[228.55850220 209.72666931]
[239.93266296 204.51606750]
[252.33488464 203.06892395]
[264.55505371 205.51119995]
[275.40554810 211.59013367]
[283.83657837 220.70024109]
[289.03790283 231.94369507]
[290.51638794 244.21870422]
[288.14306641 256.32751465]
[282.16400146 267.09326172]
[292.07708740 278.35073853]
[301.99017334 289.60821533]
[311.90328979 300.86569214]
[326.83026123 306.10931396]
[329.43453979 320.77447510]
[339.34762573 332.03195190]
[349.26071167 343.28942871]
[360.20111084 343.35577393]
[369.10009766 349.33355713]
[373.12924194 359.02990723]
[371.17086792 369.12158203]
[380.63717651 380.75726318]
[386.74328613 383.49862671]
[390.02032471 388.21948242]
[390.23513794 393.03659058]
[399.24029541 405.03274536]
[414.52807617 410.96704102]
[416.76498413 427.21289062]
[403.64987183 437.05798340]
[388.67443848 430.37454224]
[387.24414062 414.03787231]
[378.23901367 402.04171753]
[369.00152588 390.22357178]
[359.53518677 378.58789062]
[341.02493286 373.09960938]
[338.00323486 353.20251465]
[328.09014893 341.94503784]
[318.17706299 330.68756104]
[303.95913696 326.24914551]
[300.64581299 310.77877808]
[290.73272705 299.52130127]
[280.81964111 288.26382446]
[270.90652466 277.00634766]
[254.11990356 282.41589355]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 117]
[5 116]
[6 115]
[7 114]
[8 113]
[9 112]
[10 111]
[11 110]
[12 109]
[13 108]
[14 107]
[15 23]
[16 22]
[17 21]
[36 106]
[37 105]
[38 104]
[39 103]
[40 102]
[41 101]
[42 99]
[43 98]
[44 97]
[45 91]
[46 90]
[47 89]
[48 88]
[49 87]
[55 81]
[56 80]
[58 79]
[59 78]
[62 73]
[63 72]
[64 71]
[65 70]
[126 159]
[127 158]
[128 157]
[129 156]
[131 154]
[132 153]
[133 152]
[137 150]
[138 149]
[141 148]
[142 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
