%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:09:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUCCGUGCGGCCAGGGUAGCUAUCGCGGCGGCGGCGGCGGCGGCGGUUGAACUGACUCGGAGCGAGGAGACCCGAGCGAGCAGACGCGGCCCUGGCGCCCGCCCUGCGCACUCACCAUGGCGAUGCAUUUCAUCUUCUCAGAUACAGCGGUGCUUCUGUUUGAUUUCUGGAGUGUCCACAGUCCUGCUGGCAUGGCCCUUUCGGUGUUGGUGCUCC\
) } def
/len { sequence length } bind def

/coor [
[129.97428894 151.94091797]
[114.97734833 151.63764954]
[102.74208832 142.96018982]
[97.49665833 128.90722656]
[101.05393219 114.33479309]
[94.18635559 127.67032623]
[87.31877899 141.00585938]
[80.45120239 154.34140015]
[81.75995636 172.71141052]
[66.63687897 181.61854553]
[59.96218872 195.05166626]
[53.28749847 208.48477173]
[59.70788956 222.74354553]
[55.41110611 237.77922058]
[42.42595291 246.49243164]
[26.88362312 244.76904297]
[16.12273407 233.42279053]
[15.22424316 217.81105042]
[24.61239243 205.30517578]
[39.85438538 201.81008911]
[46.52907562 188.37696838]
[53.20376587 174.94386292]
[49.64847183 163.38499451]
[55.09505844 152.14067078]
[67.11566925 147.47381592]
[73.98324585 134.13829041]
[80.85082245 120.80275726]
[87.71839905 107.46722412]
[82.63326263 93.35547638]
[68.83792114 87.46578217]
[55.04257584 81.57608032]
[41.24723434 75.68638611]
[32.13134003 75.19575500]
[27.29649925 69.61113739]
[13.58746243 63.52325439]
[-0.12157419 57.43537521]
[-13.83061123 51.34749222]
[-27.53964806 45.25960922]
[-41.29219437 39.27066803]
[-55.08753967 33.38097000]
[-70.81743622 35.07829666]
[-79.48455048 22.96506500]
[-93.27989197 17.07536888]
[-107.07523346 11.18567371]
[-116.19113159 10.69504261]
[-121.02597046 5.11042356]
[-134.73500061 -0.97745800]
[-148.44404602 -7.06533957]
[-162.15307617 -13.15322113]
[-175.86212158 -19.24110413]
[-192.07263184 -12.65886593]
[-207.71897888 -19.70085335]
[-213.31626892 -35.56238556]
[-227.11160278 -41.45208359]
[-240.90695190 -47.34177780]
[-250.02284241 -47.83240891]
[-254.85768127 -53.41703033]
[-268.56671143 -59.50490952]
[-282.27575684 -65.59278870]
[-295.98480225 -71.68067169]
[-307.91091919 -65.42786407]
[-321.06893921 -67.15853882]
[-330.68627930 -76.01905060]
[-333.40493774 -88.61112213]
[-347.02481079 -94.89592743]
[-356.12280273 -95.64905548]
[-360.79467773 -101.37068176]
[-374.32260132 -107.85110474]
[-391.21945190 -109.24109650]
[-394.56130981 -125.86241913]
[-379.51467896 -133.67491150]
[-367.84216309 -121.37900543]
[-354.31427002 -114.89858246]
[-340.74002075 -108.51580811]
[-327.12014771 -102.23100281]
[-311.59982300 -108.71468353]
[-295.88391113 -101.82936859]
[-289.89691162 -85.38970947]
[-276.18786621 -79.30182648]
[-262.47885132 -73.21394348]
[-248.76980591 -67.12606812]
[-235.01725769 -61.13712311]
[-221.22190857 -55.24742508]
[-207.42657471 -49.35773087]
[-196.26202393 -55.78456497]
[-183.23980713 -54.59135437]
[-173.13269043 -45.99050522]
[-169.77423096 -32.95014191]
[-156.06520081 -26.86225891]
[-142.35615540 -20.77437592]
[-128.64712524 -14.68649483]
[-114.93808746 -8.59861279]
[-101.18553925 -2.60966897]
[-87.39019775 3.28002691]
[-73.59485626 9.16972256]
[-58.85169220 7.05112600]
[-49.19784164 19.58562851]
[-35.40250015 25.47532463]
[-28.02051353 25.21087646]
[-21.45176697 31.55057335]
[-7.74272966 37.63845444]
[5.96630764 43.72633743]
[19.67534447 49.81422043]
[33.38438034 55.90209961]
[47.13692856 61.89104462]
[60.93227005 67.78073883]
[74.72761536 73.67043304]
[88.52295685 79.56013489]
[119.05394745 87.09626770]
[134.02903748 86.23208618]
[149.00411987 85.36791229]
[163.97920227 84.50373077]
[178.95428467 83.63954926]
[193.91537476 82.55966187]
[208.85932922 81.26428986]
[223.80329895 79.96891785]
[238.74725342 78.67354584]
[250.84838867 62.62874603]
[270.54470825 60.69466782]
[285.07968140 73.67229462]
[299.95370483 71.73226166]
[314.82769775 69.79222870]
[327.51126099 60.33506393]
[341.13235474 66.36128998]
[356.00634766 64.42125702]
[370.88037109 62.48122787]
[385.75439453 60.54119492]
[373.72399902 51.58187103]
[372.22448730 36.65701294]
[382.23211670 25.48351288]
[397.23138428 25.33593369]
[407.45693970 36.31035614]
[406.25161743 51.26144028]
[417.52325439 41.36448288]
[428.79492188 31.46752739]
[440.06658936 21.57056999]
[444.81326294 5.87339878]
[460.84024048 2.39951491]
[471.66033936 14.72255230]
[466.14279175 30.16562653]
[449.96353149 32.84222412]
[438.69189453 42.73918152]
[427.42022705 52.63613892]
[416.14855957 62.53309631]
[418.33215332 69.70818329]
[424.88296509 91.23345184]
[439.75698853 93.17348480]
[454.63098145 95.11351776]
[469.50500488 97.05355072]
[484.37902832 98.99357605]
[499.25302124 100.93360901]
[505.81430054 92.53247070]
[515.19793701 87.64752960]
[525.68188477 87.09975433]
[535.37329102 90.92098236]
[542.55004883 98.36027527]
[545.96704102 108.03039551]
[560.74328613 110.61146545]
[575.51959229 113.19252777]
[590.29583740 115.77359772]
[601.27557373 109.01195526]
[613.52691650 111.46247864]
[620.59191895 121.27742767]
[635.32946777 124.07115936]
[650.06701660 126.86489105]
[660.60406494 115.59660339]
[675.56604004 111.83603668]
[690.17871094 116.78317261]
[699.77917480 128.85939026]
[701.30389404 144.21121216]
[694.26647949 157.93994141]
[680.91241455 165.66477966]
[665.50299072 164.92076111]
[652.95532227 155.94529724]
[647.27325439 141.60243225]
[632.53570557 138.80870056]
[617.79821777 136.01496887]
[601.56512451 142.68817139]
[587.71478271 130.54986572]
[572.93853760 127.96879578]
[558.16223145 125.38773346]
[543.38598633 122.80666351]
[528.30371094 135.14396667]
[508.70938110 132.36044312]
[497.31298828 115.80762482]
[482.43899536 113.86759186]
[467.56497192 111.92755890]
[452.69094849 109.98752594]
[437.81695557 108.04750061]
[422.94293213 106.10746765]
[387.69442749 75.41520691]
[372.82040405 77.35523987]
[357.94638062 79.29527283]
[343.07238770 81.23530579]
[331.45269775 90.55370331]
[316.76773071 84.66624451]
[301.89373779 86.60627747]
[287.01971436 88.54631042]
[283.18798828 98.05971527]
[275.69638062 105.18187714]
[265.84887695 108.58068085]
[255.39840698 107.58030701]
[246.23468018 102.29437256]
[240.04263306 93.61750793]
[225.09866333 94.91287994]
[210.15470886 96.20825195]
[195.21073914 97.50362396]
[191.50955200 100.51444244]
[185.87907410 101.23558044]
[179.81846619 98.61463928]
[164.84338379 99.47881317]
[149.86830139 100.34299469]
[134.89321899 101.20717621]
[119.91812897 102.07135773]
[134.67984009 104.73442841]
[145.39457703 115.23178101]
[148.35963440 129.93580627]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 28]
[6 27]
[7 26]
[8 25]
[10 22]
[11 21]
[12 20]
[29 108]
[30 107]
[31 106]
[32 105]
[34 104]
[35 103]
[36 102]
[37 101]
[38 100]
[39 98]
[40 97]
[42 95]
[43 94]
[44 93]
[46 92]
[47 91]
[48 90]
[49 89]
[50 88]
[53 84]
[54 83]
[55 82]
[57 81]
[58 80]
[59 79]
[60 78]
[64 75]
[65 74]
[67 73]
[68 72]
[109 214]
[110 213]
[111 212]
[112 211]
[113 210]
[114 207]
[115 206]
[116 205]
[117 204]
[120 198]
[121 197]
[122 196]
[124 194]
[125 193]
[126 192]
[127 191]
[133 144]
[134 143]
[135 142]
[136 141]
[146 190]
[147 189]
[148 188]
[149 187]
[150 186]
[151 185]
[157 182]
[158 181]
[159 180]
[160 179]
[163 177]
[164 176]
[165 175]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
