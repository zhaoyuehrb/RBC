%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:20:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAACGGUUGUUGUAGUCCGGCCCCCUCCUGGCUGGUCCAGCCACAUUAACCGGCAGGAUGUCGGAGGUGCGGCUGCCACCGCUACGCGCCCUGGACGACUUUGUUCUGGGGUCGGCGCGUCUGGCGGCUCCGGAUCCAUGCGACCCGCAGCGAUGGU\
) } def
/len { sequence length } bind def

/coor [
[143.65339661 381.56628418]
[141.87930298 366.67156982]
[130.05310059 357.68957520]
[128.04173279 342.60946655]
[137.54306030 330.26596069]
[135.76896667 315.37124634]
[133.99487305 300.47653198]
[130.82081604 296.84338379]
[129.93025208 291.16259766]
[132.45692444 284.95983887]
[131.27265930 270.00668335]
[130.08837891 255.05349731]
[128.90411377 240.10031128]
[127.71984100 225.14714050]
[126.53556824 210.19396973]
[124.90869904 195.28244019]
[122.84067535 180.42568970]
[120.77264404 165.56892395]
[118.70461273 150.71217346]
[116.63658905 135.85540771]
[114.56855774 120.99865723]
[102.12023926 124.31803894]
[90.24722290 121.11997986]
[81.98261261 112.82514191]
[79.13413239 102.07334900]
[64.66460419 98.11954498]
[50.19506836 94.16573334]
[35.72553635 90.21192932]
[21.25600052 86.25811768]
[12.09820557 87.01375580]
[6.54112816 82.08061981]
[-7.84746504 77.84170532]
[-22.23605919 73.60279083]
[-28.82622910 74.79765320]
[-34.20176315 72.75606537]
[-37.10322952 68.90173340]
[-51.31312561 64.09768677]
[-65.52301788 59.29363632]
[-79.73291779 54.48958969]
[-95.28421021 57.39955902]
[-104.86306000 45.99364853]
[-119.07295990 41.18960190]
[-133.28285217 36.38555145]
[-145.27633667 46.08915329]
[-160.61453247 47.74546051]
[-174.40307617 40.82594681]
[-182.24209595 27.53860855]
[-181.63017273 12.12338448]
[-172.76260376 -0.50078166]
[-158.46896362 -6.30556536]
[-143.31031799 -3.43868136]
[-132.12373352 7.18505859]
[-128.47880554 22.17565727]
[-114.26891327 26.97970581]
[-100.05901337 31.78375244]
[-85.52410889 28.53016663]
[-74.92887115 40.27969360]
[-60.71897125 45.08374023]
[-46.50907898 49.88779068]
[-32.29918289 54.69183731]
[-17.99714661 59.21419907]
[-3.60855246 63.45311356]
[10.78004074 67.69202423]
[25.20980835 71.78858185]
[39.67934418 75.74239349]
[54.14887619 79.69619751]
[68.61840820 83.65000916]
[83.08794403 87.60381317]
[91.91507721 79.41493988]
[104.38851166 77.15462494]
[116.70703125 82.20288086]
[124.74423218 93.60395813]
[136.00961304 83.69985199]
[147.27497864 73.79574585]
[158.54035950 63.89163971]
[169.80574036 53.98753357]
[181.07110596 44.08342743]
[192.33648682 34.17932129]
[203.60186768 24.27521324]
[209.06387329 6.71555328]
[226.36070251 3.88865519]
[237.42819214 -6.23608971]
[248.49569702 -16.36083412]
[249.35644531 -31.91386795]
[260.72470093 -42.02413940]
[275.54684448 -41.10769653]
[286.61431885 -51.23244095]
[287.47509766 -66.78547668]
[298.84332275 -76.89574432]
[313.66546631 -75.97930145]
[324.73297119 -86.10404968]
[335.80047607 -96.22879028]
[340.76016235 -111.25251007]
[355.37329102 -114.13436890]
[366.44079590 -124.25910950]
[377.50830078 -134.38385010]
[388.57580566 -144.50860596]
[399.64331055 -154.63334656]
[404.06887817 -170.42404175]
[420.02169800 -174.22401428]
[431.09085083 -162.12417603]
[425.88934326 -146.57180786]
[409.76803589 -143.56584167]
[398.70053101 -133.44110107]
[387.63305664 -123.31636047]
[376.56555176 -113.19161224]
[365.49804688 -103.06686401]
[361.32998657 -88.76733398]
[345.92520142 -85.16129303]
[334.85772705 -75.03654480]
[323.79022217 -64.91180420]
[323.38690186 -50.06684113]
[312.30709839 -39.64124680]
[296.73907471 -40.16493988]
[285.67156982 -30.04019737]
[285.26824951 -15.19523430]
[274.18847656 -4.76964188]
[258.62045288 -5.29333591]
[247.55294800 4.83140945]
[236.48544312 14.95615387]
[235.62309265 27.05532837]
[226.43884277 35.58088684]
[213.50596619 35.54058838]
[202.24058533 45.44469452]
[190.97521973 55.34880066]
[179.70983887 65.25290680]
[168.44447327 75.15701294]
[157.17909241 85.06111908]
[145.91371155 94.96522522]
[134.64834595 104.86933136]
[129.42532349 118.93062592]
[131.49334717 133.78738403]
[133.56137085 148.64414978]
[135.62940979 163.50090027]
[137.69743347 178.35766602]
[139.76545715 193.21441650]
[143.04516602 197.41157532]
[144.23088074 201.99053955]
[143.53442383 206.07629395]
[141.48873901 209.00968933]
[142.67301941 223.96286011]
[143.85728455 238.91604614]
[145.04156494 253.86921692]
[146.22583008 268.82238770]
[147.41011047 283.77557373]
[148.88958740 298.70242310]
[150.66368103 313.59713745]
[152.43777466 328.49188232]
[164.57261658 338.25833130]
[166.15962219 353.38894653]
[156.77401733 364.89746094]
[158.54811096 379.79217529]
[171.73017883 388.20452881]
[176.37153625 403.13742065]
[170.28068542 417.54006958]
[156.33354187 424.61190796]
[141.11552429 421.01388550]
[131.81210327 408.44485474]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[5 148]
[6 147]
[7 146]
[10 145]
[11 144]
[12 143]
[13 142]
[14 141]
[15 140]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[25 68]
[26 67]
[27 66]
[28 65]
[29 64]
[31 63]
[32 62]
[33 61]
[36 60]
[37 59]
[38 58]
[39 57]
[41 55]
[42 54]
[43 53]
[72 130]
[73 129]
[74 128]
[75 127]
[76 126]
[77 125]
[78 124]
[79 123]
[81 120]
[82 119]
[83 118]
[86 115]
[87 114]
[90 111]
[91 110]
[92 109]
[94 107]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
