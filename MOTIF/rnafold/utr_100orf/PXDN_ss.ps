%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:03:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGCUGGGACGUGGGCCGCGGCCGGGCGGGCGCAGUCGGGAGCCGGCCGUGGUGGCUCCGUGCGUCCGAGCGUCCGUCCGCGCCGUCGGCCAUGGCCAAGCGCUCCAGGGGCCCCGGGCGCCGCUGCCUGUUGGCGCUCGUGCUGUUCUGCGCCUGGGGGACGCUGGCCGUGGUGGCCCAGAAGCCGGGCG\
) } def
/len { sequence length } bind def

/coor [
[93.81217957 348.63442993]
[79.62561798 341.14303589]
[76.77913666 325.35452271]
[87.45631409 313.38049316]
[87.94455719 298.38845825]
[88.43280029 283.39639282]
[81.11386871 270.42401123]
[89.29625702 256.88302612]
[89.78450775 241.89096069]
[76.51258087 232.24183655]
[71.55231476 216.42651367]
[77.04540253 200.61233521]
[91.01613617 191.09027100]
[91.26029205 176.09225464]
[91.50444794 161.09423828]
[91.74860382 146.09622192]
[91.99275208 131.09822083]
[92.23690796 116.10019684]
[82.57432556 104.62699127]
[67.75331879 102.31665802]
[52.93230820 100.00631714]
[38.11129761 97.69598389]
[23.29028702 95.38564301]
[8.45096493 93.19601440]
[-6.40568781 91.12722015]
[-21.26234055 89.05843353]
[-36.11899185 86.98964691]
[-50.97564316 84.92085266]
[-65.83229828 82.85206604]
[-80.68894958 80.78327942]
[-95.54560089 78.71448517]
[-110.40225220 76.64569855]
[-125.25890350 74.57691193]
[-140.11555481 72.50811768]
[-146.39889526 74.64256287]
[-151.97523499 73.45139313]
[-155.41905212 70.12257385]
[-170.20048523 67.57130432]
[-184.98193359 65.02003479]
[-199.76336670 62.46876144]
[-214.54481506 59.91749191]
[-229.45991516 65.19485474]
[-240.68574524 55.40557480]
[-255.46717834 52.85430527]
[-270.26889038 50.42341995]
[-285.08990479 48.11308670]
[-299.94656372 46.04429626]
[-314.83493042 44.21760178]
[-329.72326660 42.39090729]
[-343.19894409 51.09640884]
[-358.36062622 45.85211182]
[-363.57760620 30.68098831]
[-354.84780884 17.22103119]
[-338.86804199 15.79756451]
[-327.89657593 27.50255203]
[-313.00820923 29.32924461]
[-298.11987305 31.15593910]
[-293.86135864 28.96364212]
[-288.17864990 29.43382072]
[-282.77957153 33.29207611]
[-267.95855713 35.60240936]
[-260.85452271 33.52310944]
[-252.91590881 38.07286453]
[-238.13447571 40.62413406]
[-224.27664185 35.16428757]
[-211.99354553 45.13604736]
[-197.21209717 47.68732071]
[-182.43066406 50.23859024]
[-167.64921570 52.78986359]
[-152.86778259 55.34113312]
[-138.04676819 57.65147018]
[-123.19011688 59.72025681]
[-108.33346558 61.78904724]
[-93.47681427 63.85783768]
[-78.62016296 65.92662811]
[-63.76350784 67.99541473]
[-48.90685654 70.06420135]
[-34.05020142 72.13299561]
[-19.19355011 74.20178223]
[-4.33689880 76.27056885]
[10.51975346 78.33936310]
[17.58901215 76.14469910]
[25.60062408 80.56463623]
[40.42163467 82.87496948]
[55.24264526 85.18531036]
[70.06365204 87.49564362]
[84.88466644 89.80598450]
[93.58840179 84.47012329]
[102.96888733 84.91832733]
[109.80707550 90.09196472]
[123.62996674 84.26722717]
[137.45286560 78.44249725]
[151.27575684 72.61775970]
[165.09866333 66.79302216]
[178.92155457 60.96828461]
[192.74444580 55.14355087]
[206.56733704 49.31881332]
[220.39024353 43.49407578]
[234.21313477 37.66934204]
[240.91860962 31.44372368]
[248.30874634 31.86432076]
[262.22460938 26.26535034]
[276.14050293 20.66638184]
[289.96337891 14.84164524]
[303.68963623 8.79268551]
[317.41589355 2.74372649]
[331.14215088 -3.30523300]
[344.86840820 -9.35419178]
[358.59466553 -15.40315151]
[372.32092285 -21.45211029]
[381.82907104 -34.09749985]
[396.59576416 -32.14967346]
[410.32202148 -38.19863129]
[411.94015503 -54.64661026]
[421.57342529 -67.96054840]
[436.51858521 -74.56567383]
[452.66238403 -72.74754333]
[465.61355591 -63.09589005]
[479.23953247 -69.36746979]
[492.86550903 -75.63904572]
[506.49148560 -81.91062927]
[520.11749268 -88.18220520]
[530.39331055 -103.45410919]
[547.78717041 -101.17509460]
[561.30926514 -107.66763306]
[567.70281982 -114.21314240]
[575.10467529 -114.15378571]
[588.73065186 -120.42536926]
[602.35662842 -126.69694519]
[611.38269043 -140.38865662]
[627.73480225 -139.14778137]
[634.59136963 -124.25081635]
[624.89892578 -111.02249146]
[608.62823486 -113.07096863]
[595.00225830 -106.79939270]
[581.37628174 -100.52780914]
[567.80175781 -94.14553833]
[554.27972412 -87.65299988]
[549.97082520 -76.33972931]
[538.74572754 -70.82387543]
[526.38903809 -74.55622864]
[512.76306152 -68.28465271]
[499.13708496 -62.01306915]
[485.51110840 -55.74148941]
[471.88513184 -49.46990967]
[471.52465820 -35.80944443]
[465.28079224 -23.57973862]
[454.32244873 -15.19590282]
[440.75573730 -12.34109783]
[427.21926880 -15.62886810]
[416.37097168 -24.47237778]
[402.64471436 -18.42341805]
[394.11837769 -6.21069002]
[378.36987305 -7.72585535]
[364.64361572 -1.67689610]
[350.91735840 4.37206316]
[337.19110107 10.42102242]
[323.46487427 16.46998215]
[309.73861694 22.51894188]
[296.01235962 28.56790161]
[293.47540283 32.63051987]
[288.35241699 35.13441086]
[281.73947144 34.58225632]
[267.82357788 40.18122482]
[253.90771484 45.78019333]
[240.03787231 51.49223709]
[226.21498108 57.31697464]
[212.39207458 63.14170837]
[198.56918335 68.96644592]
[184.74629211 74.79118347]
[170.92338562 80.61592102]
[157.10049438 86.44065094]
[143.27760315 92.26538849]
[129.45471191 98.09012604]
[115.63181305 103.91486359]
[107.23492432 116.34435272]
[106.99076843 131.34236145]
[106.74661255 146.34037781]
[106.50245667 161.33839417]
[106.25830078 176.33641052]
[106.01415253 191.33441162]
[117.62417603 198.77987671]
[123.98523712 210.89552307]
[123.52880859 224.46354675]
[116.48121643 235.93972778]
[104.77655792 242.37919617]
[104.28831482 257.37124634]
[111.57231903 271.41595459]
[103.42485046 283.88464355]
[102.93660736 298.87670898]
[102.44836426 313.86874390]
[112.32382965 326.51211548]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 191]
[5 190]
[6 189]
[8 187]
[9 186]
[13 181]
[14 180]
[15 179]
[16 178]
[17 177]
[18 176]
[19 87]
[20 86]
[21 85]
[22 84]
[23 83]
[24 81]
[25 80]
[26 79]
[27 78]
[28 77]
[29 76]
[30 75]
[31 74]
[32 73]
[33 72]
[34 71]
[37 70]
[38 69]
[39 68]
[40 67]
[41 66]
[43 64]
[44 63]
[45 61]
[46 60]
[47 57]
[48 56]
[49 55]
[90 175]
[91 174]
[92 173]
[93 172]
[94 171]
[95 170]
[96 169]
[97 168]
[98 167]
[99 166]
[101 165]
[102 164]
[103 163]
[104 160]
[105 159]
[106 158]
[107 157]
[108 156]
[109 155]
[110 154]
[112 152]
[113 151]
[118 145]
[119 144]
[120 143]
[121 142]
[122 141]
[124 138]
[125 137]
[127 136]
[128 135]
[129 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
