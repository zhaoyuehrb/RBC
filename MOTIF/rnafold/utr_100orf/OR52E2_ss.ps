%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUUCCUUCCCAAUGACACCCAGUUUCACCCCUCCUCCUUCCUGUUGCUGGGGAUCCCAGGACUAGAAACACUUCACAUCUGGAUCGGCUUUCCCUUCU\
) } def
/len { sequence length } bind def

/coor [
[159.79611206 185.38179016]
[166.50836182 169.70858765]
[155.34039307 159.69476318]
[144.17242432 149.68093872]
[133.00447083 139.66711426]
[118.36329651 136.93119812]
[113.25397491 121.95771790]
[102.08600616 111.94389343]
[90.61202240 102.28223419]
[78.84310913 92.98209381]
[67.07419586 83.68194580]
[54.01763535 88.40223694]
[40.44906998 86.02762604]
[29.93902969 77.29279327]
[25.19852638 64.59148407]
[27.38021278 51.32133484]
[15.90622616 41.65967560]
[0.37284127 42.82231522]
[-11.12578011 32.86056900]
[-12.13844967 18.04469681]
[-23.61243820 8.38304043]
[-35.08642578 -1.27861619]
[-46.56041336 -10.94027233]
[-58.03440094 -20.60192871]
[-69.50839233 -30.26358414]
[-85.04177094 -29.10094833]
[-96.54039764 -39.06269455]
[-97.55306244 -53.87856674]
[-109.02705383 -63.54022217]
[-122.50641632 -56.51347351]
[-137.64918518 -55.18490982]
[-152.14619446 -59.75713348]
[-163.78674316 -69.53291321]
[-170.79576111 -83.02150726]
[-172.10440063 -98.16600800]
[-167.51310730 -112.65699005]
[-157.72203064 -124.28467560]
[-144.22422791 -131.27593994]
[-129.07801819 -132.56465149]
[-114.59308624 -127.95430756]
[-102.97828674 -118.14794159]
[-96.00479126 -104.64095306]
[-94.73600006 -89.49305725]
[-99.36539459 -75.01421356]
[-87.89141083 -65.35255432]
[-73.11941528 -66.87697601]
[-61.34552765 -57.24213409]
[-59.84673309 -41.73757172]
[-48.37274551 -32.07591629]
[-36.89875793 -22.41426086]
[-25.42476845 -12.75260448]
[-13.95078087 -3.09094787]
[-2.47679329 6.57070827]
[12.29519844 5.04628754]
[24.06908798 14.68112946]
[25.56788254 30.18568993]
[37.04187012 39.84734726]
[52.75345612 35.38082123]
[68.20844269 41.15722656]
[77.31941986 55.11027527]
[76.37433624 71.91303253]
[88.14324951 81.21318054]
[99.91216278 90.51332092]
[105.31876373 91.10221100]
[109.95388031 94.76729584]
[112.09983063 100.77593231]
[123.26779175 110.78974915]
[138.70777893 114.24192810]
[143.01829529 128.49916077]
[154.18624878 138.51298523]
[165.35421753 148.52680969]
[176.52217102 158.54061890]
[187.82211304 151.58061218]
[200.54313660 147.84648132]
[213.78480530 147.59504700]
[226.61189270 150.83685303]
[238.12028503 157.33598328]
[247.50079346 166.62718201]
[254.09602356 178.04917908]
[257.44647217 190.79176331]
[257.32247925 203.95318604]
[253.74003601 216.60408020]
[246.95901489 227.85295105]
[257.14532471 238.86383057]
[267.33160400 249.87471008]
[282.94110107 248.93771362]
[295.47009277 258.29498291]
[299.00277710 273.52828979]
[291.87112427 287.44497681]
[277.44250488 293.47396851]
[262.52963257 288.76855469]
[254.17395020 275.55053711]
[256.32073975 260.06100464]
[246.13444519 249.05012512]
[235.94815063 238.03924561]
[220.58058167 245.02514648]
[203.73443604 246.43519592]
[187.37268066 242.08876038]
[173.40734863 232.47695923]
[163.47608948 218.70716858]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 72]
[3 71]
[4 70]
[5 69]
[7 67]
[8 66]
[9 63]
[10 62]
[11 61]
[16 57]
[17 56]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[28 45]
[29 44]
[83 95]
[84 94]
[85 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
