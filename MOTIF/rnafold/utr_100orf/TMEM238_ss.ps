%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:44:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGGCGGCGCCAGCGGUGUGCGCCUCGCAGGGGAGCCCGCCGGGUGCACCGUCCGCGCCGGCGGCCGCGCCAGCACCCGCGGCCGGCCUGGGCCGCU\
) } def
/len { sequence length } bind def

/coor [
[211.74827576 257.95623779]
[216.35736084 239.57934570]
[206.17106628 228.56846619]
[195.98477173 217.55760193]
[185.79847717 206.54672241]
[175.61218262 195.53584290]
[168.63638306 192.71382141]
[165.28689575 184.02050781]
[155.44796753 172.69816589]
[145.60903931 161.37582397]
[135.77011108 150.05348206]
[125.75628662 138.88551331]
[115.56999207 127.87464142]
[105.38369751 116.86376190]
[87.38563538 112.41968536]
[83.22200012 94.35469055]
[72.37087250 83.99839020]
[61.51974106 73.64208984]
[50.66860962 63.28578949]
[30.96916580 59.60932541]
[25.94426727 41.04690933]
[14.47027874 31.38525391]
[2.99629045 21.72359848]
[-8.47769737 12.06194210]
[-19.95168495 2.40028548]
[-31.42567253 -7.26137066]
[-42.89966202 -16.92302704]
[-54.37364960 -26.58468246]
[-69.91352844 -29.55500412]
[-74.66535187 -43.67128754]
[-86.13934326 -53.33294296]
[-94.88368225 -56.54683685]
[-97.81385040 -63.47789764]
[-108.98181152 -73.49172211]
[-120.14977264 -83.50553894]
[-135.97895813 -89.57787323]
[-134.52589417 -106.46943665]
[-117.89221191 -109.74920654]
[-110.13595581 -94.67350006]
[-98.96799469 -84.65968323]
[-87.80003357 -74.64585876]
[-76.47768402 -64.80693054]
[-65.00370026 -55.14527512]
[-50.28451920 -52.86602020]
[-44.71199417 -38.05867004]
[-33.23800659 -28.39701462]
[-21.76401711 -18.73535919]
[-10.29002953 -9.07370281]
[1.18395865 0.58795375]
[12.65794659 10.24960995]
[24.13193512 19.91126633]
[35.60592270 29.57292175]
[45.88514709 27.78022957]
[55.61756516 32.12007904]
[61.38895035 41.34081650]
[61.02490997 52.43465805]
[71.87603760 62.79095840]
[82.72717285 73.14726257]
[93.57830048 83.50356293]
[103.70705414 82.69022369]
[112.61436462 87.58031464]
[117.36534119 96.56259155]
[116.39457703 106.67746735]
[126.58087158 117.68834686]
[136.76716614 128.69921875]
[145.04507446 132.97343445]
[147.09245300 140.21455383]
[156.93138123 151.53689575]
[166.77030945 162.85923767]
[176.60923767 174.18157959]
[186.62306213 185.34954834]
[196.80935669 196.36042786]
[206.99565125 207.37130737]
[217.18194580 218.38218689]
[227.36822510 229.39305115]
[238.63597107 226.01321411]
[250.29104614 227.16450500]
[260.58801270 232.63485718]
[267.99993896 241.56834412]
[271.44473267 252.59895325]
[270.44305420 264.05929565]
[265.18453979 274.23275757]
[274.30053711 286.14486694]
[283.41653442 298.05700684]
[292.53250122 309.96911621]
[301.64849854 321.88125610]
[310.76449585 333.79336548]
[326.46194458 335.62783813]
[336.19888306 348.07644653]
[334.19857788 363.75363159]
[321.64773560 373.35839844]
[305.99255371 371.19244385]
[296.52099609 358.54074097]
[298.85238647 342.90936279]
[289.73638916 330.99722290]
[280.62039185 319.08511353]
[271.50439453 307.17297363]
[262.38839722 295.26086426]
[253.27241516 283.34872437]
[234.84175110 285.01892090]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 75]
[3 74]
[4 73]
[5 72]
[6 71]
[8 70]
[9 69]
[10 68]
[11 67]
[12 65]
[13 64]
[14 63]
[16 59]
[17 58]
[18 57]
[19 56]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[27 46]
[28 45]
[30 43]
[31 42]
[33 41]
[34 40]
[35 39]
[82 99]
[83 98]
[84 97]
[85 96]
[86 95]
[87 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
