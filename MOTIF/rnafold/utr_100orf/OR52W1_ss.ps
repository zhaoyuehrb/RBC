%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:22:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCAGAAACUCUACAACUCAAUUCCACCUUCCUACACCCAAACUUCUUCAUACUGACUGGCUUUCCAGGGCUAGGAAGUGCCCAGACUUGGCUGACAC\
) } def
/len { sequence length } bind def

/coor [
[37.58026505 177.07933044]
[24.14745331 172.62059021]
[13.08492851 163.84036255]
[0.25285366 171.60810852]
[-3.62947893 186.69337463]
[-16.75368118 194.38818359]
[-31.11125183 190.59399414]
[-43.94332886 198.36174011]
[-56.77540207 206.12948608]
[-54.44462585 221.15066528]
[-58.04448318 235.91920471]
[-67.02602386 248.18298340]
[-80.01963043 256.07186890]
[-95.04386139 258.38290405]
[-109.80764771 254.76361084]
[-122.05960083 245.76594543]
[-129.93139648 232.76197815]
[-132.22265625 217.73471069]
[-128.58395386 202.97570801]
[-119.57017517 190.73559570]
[-106.55586243 182.88090515]
[-91.52559662 180.60943604]
[-76.77138519 184.26754761]
[-64.54314423 193.29740906]
[-51.71107101 185.52967834]
[-38.87899780 177.76193237]
[-35.58359909 163.28173828]
[-22.68070412 155.22134399]
[-7.51489067 158.77603149]
[5.31718445 151.00828552]
[2.67653918 135.46588135]
[6.17579222 120.05471039]
[15.31374836 107.11413574]
[28.73102570 98.61989594]
[44.41222382 95.88249969]
[59.98862457 99.34510803]
[73.09601593 108.51211548]
[85.68030548 100.34905243]
[92.20484924 87.98288727]
[106.15663147 87.06665802]
[118.74092102 78.90359497]
[131.32521057 70.74053192]
[143.90950012 62.57746887]
[145.61022949 51.60872269]
[152.99227905 43.61896896]
[163.36094666 41.16030502]
[173.12904358 44.82915878]
[186.19648743 37.46424484]
[199.26393127 30.09933472]
[201.16345215 14.81215000]
[211.57856750 3.70456338]
[226.36230469 0.89290565]
[239.80592346 7.24955654]
[252.87336731 -0.11535452]
[265.94079590 -7.48026562]
[279.00823975 -14.84517670]
[283.35784912 -29.80240631]
[296.71502686 -37.08532333]
[310.94763184 -32.84646225]
[324.01507568 -40.21137619]
[337.08251953 -47.57628632]
[350.14996338 -54.94119644]
[363.21740723 -62.30610657]
[376.28485107 -69.67102051]
[389.35229492 -77.03592682]
[397.22839355 -91.41992950]
[413.62722778 -91.52049255]
[421.67910767 -77.23416138]
[413.10095215 -63.25749588]
[396.71722412 -63.96848679]
[383.64978027 -56.60357666]
[370.58233643 -49.23866272]
[357.51489258 -41.87375259]
[344.44744873 -34.50884247]
[331.38000488 -27.14393044]
[318.31256104 -19.77902031]
[314.56842041 -5.40831900]
[301.42108154 2.24689889]
[286.37316895 -1.77773333]
[273.30572510 5.58717775]
[260.23828125 12.95208931]
[247.17083740 20.31699944]
[245.64698792 35.10942841]
[235.58595276 46.30047226]
[220.69026184 49.45825958]
[206.62884521 43.16677856]
[193.56140137 50.53168869]
[180.49395752 57.89660263]
[172.11209106 75.20432281]
[152.07257080 75.16176605]
[139.48828125 83.32482147]
[126.90398407 91.48788452]
[114.31969452 99.65094757]
[107.79515076 112.01711273]
[93.84336853 112.93334198]
[81.25907898 121.09640503]
[84.26241302 135.11184692]
[82.27634430 149.27690125]
[75.56264496 161.87297058]
[64.95539856 171.37901306]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 30]
[4 29]
[7 26]
[8 25]
[9 24]
[37 96]
[38 95]
[40 93]
[41 92]
[42 91]
[43 90]
[47 88]
[48 87]
[49 86]
[53 82]
[54 81]
[55 80]
[56 79]
[59 76]
[60 75]
[61 74]
[62 73]
[63 72]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
