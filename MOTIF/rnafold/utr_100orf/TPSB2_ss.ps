%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGGAACAGGGAGCGGCCAGGAUGCUGAAUCUGCUGCUGCUGGCGCUGCCCGUCCUGGCGAGCCGCGCCUACGCGGCCCCUGCCCCAGGCCAGGCCCUGCAGCGAGUGGGCAUCGUUGGGG\
) } def
/len { sequence length } bind def

/coor [
[161.98568726 196.91506958]
[150.77442932 206.88040161]
[135.98422241 209.38029480]
[122.12058258 203.65318298]
[113.40683746 191.44374084]
[112.49744415 176.47132874]
[119.66944122 163.29701233]
[132.73802185 155.93411255]
[147.72424316 156.62631226]
[137.11764526 146.01969910]
[126.51104736 135.41310120]
[115.90444183 124.80650330]
[105.29784393 114.19989777]
[90.77668762 110.44010925]
[76.35543060 114.56655121]
[61.93418121 118.69299316]
[47.51293182 122.81943512]
[33.09168243 126.94587708]
[19.88463783 142.07489014]
[1.33318138 136.86579895]
[-12.86055946 141.71737671]
[-27.05430031 146.56893921]
[-37.42752075 159.27046204]
[-53.56831741 156.37103271]
[-58.87242508 140.85334778]
[-47.88343048 128.68066406]
[-31.90586853 132.37519836]
[-17.71212959 127.52363586]
[-3.51838827 122.67206573]
[0.20640615 113.00744629]
[8.85213280 106.91175842]
[19.64825249 106.63842010]
[28.96523857 112.52462769]
[43.38648987 108.39818573]
[57.80774307 104.27174377]
[72.22898865 100.14530182]
[86.65024567 96.01885986]
[94.58470154 83.28919983]
[91.93840790 68.52447510]
[89.29210663 53.75974655]
[86.64581299 38.99502182]
[83.99951935 24.23029518]
[70.28425598 9.56043530]
[77.34343719 -8.36884403]
[73.95272064 -22.98058701]
[70.56199646 -37.59232712]
[67.17127991 -52.20407104]
[63.78055573 -66.81581116]
[53.12402344 -78.50978088]
[57.78407669 -92.65662384]
[54.39335632 -107.26836395]
[43.73682404 -118.96233368]
[48.39687729 -133.10917664]
[45.00615692 -147.72091675]
[41.61543655 -162.33265686]
[30.02853584 -173.93765259]
[34.54602432 -189.70230103]
[50.52069855 -193.40930176]
[61.51918411 -181.24519348]
[56.22718048 -165.72338867]
[59.61790085 -151.11164856]
[63.00862122 -136.49989319]
[73.42262268 -125.85105896]
[69.00509644 -110.65908813]
[72.39582062 -96.04734802]
[82.80982208 -85.39850616]
[78.39229584 -70.20653534]
[81.78302002 -55.59479141]
[85.17373657 -40.98305130]
[88.56446075 -26.37130737]
[91.95518494 -11.75956535]
[101.19338226 -7.07612801]
[106.38311768 2.14193034]
[105.56283569 12.91031361]
[98.76424408 21.58399963]
[101.41053772 36.34872437]
[104.05683899 51.11344910]
[106.70313263 65.87817383]
[109.34942627 80.64289856]
[115.90444183 103.59329987]
[126.51104736 114.19989777]
[137.11764526 124.80650330]
[147.72424316 135.41310120]
[158.33085632 146.01969910]
[170.07522583 155.35081482]
[182.80488586 163.28527832]
[195.53456116 171.21972656]
[208.26422119 179.15419006]
[220.99388123 187.08865356]
[233.72354126 195.02311707]
[245.76689148 187.78733826]
[259.68887329 186.47758484]
[272.74584961 191.29432678]
[282.38943481 201.23628235]
[286.76409912 214.30796814]
[285.06381226 227.92008972]
[297.58837891 236.17448425]
[310.11294556 244.42886353]
[322.63754272 252.68325806]
[331.63610840 254.83152771]
[335.37118530 261.30877686]
[347.68261719 269.87777710]
[363.66415405 268.47418213]
[374.62106323 280.19281006]
[372.14813232 296.04412842]
[358.14239502 303.86834717]
[343.34783936 297.66345215]
[339.11361694 282.18923950]
[326.80215454 273.62020874]
[314.38314819 265.20782471]
[301.85855103 256.95346069]
[289.33398438 248.69905090]
[276.80941772 240.44467163]
[262.59912109 248.02632141]
[246.41004944 247.43653870]
[232.63095093 238.74119568]
[225.04452515 224.21626282]
[225.78909302 207.75277710]
[213.05941772 199.81831360]
[200.32975769 191.88386536]
[187.60009766 183.94940186]
[174.87043762 176.01493835]
[162.14076233 168.08047485]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 84]
[10 83]
[11 82]
[12 81]
[13 80]
[14 37]
[15 36]
[16 35]
[17 34]
[18 33]
[20 29]
[21 28]
[22 27]
[38 79]
[39 78]
[40 77]
[41 76]
[42 75]
[44 71]
[45 70]
[46 69]
[47 68]
[48 67]
[50 65]
[51 64]
[53 62]
[54 61]
[55 60]
[85 123]
[86 122]
[87 121]
[88 120]
[89 119]
[90 118]
[96 113]
[97 112]
[98 111]
[99 110]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
