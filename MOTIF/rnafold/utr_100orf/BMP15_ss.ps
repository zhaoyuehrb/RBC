%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCUUGGGCUUGUGUUGGGGCCUGUUGUUGAACACUAAGCCUUUCAAGAUGGUCCUCCUCAGUAUUCUUAGAAUUCUUUUUCUUUGUGAACUCGUGCUUUUCAUGGAACACAGGGCCCAAAUGGCAGAAGGAGGGCAGUCCUCUAUUG\
) } def
/len { sequence length } bind def

/coor [
[-76.87605286 317.92492676]
[-86.13306427 319.31933594]
[-95.47993469 318.93722534]
[-104.57905579 316.79498291]
[-113.10227203 312.97247314]
[-120.74267578 307.61013794]
[-127.22569275 300.90383911]
[-140.21607971 308.40383911]
[-153.20645142 315.90383911]
[-166.19683838 323.40383911]
[-179.18721008 330.90383911]
[-192.17759705 338.40383911]
[-205.08872986 346.03945923]
[-217.91918945 353.80987549]
[-230.74964905 361.58029175]
[-243.58012390 369.35067749]
[-256.41058350 377.12109375]
[-264.20663452 390.88815308]
[-279.10119629 390.86303711]
[-291.93167114 398.63342285]
[-293.09585571 414.10678101]
[-303.15838623 425.91885376]
[-318.24993896 429.52770996]
[-332.56759644 423.54565430]
[-340.60586548 410.27291870]
[-339.27386475 394.81311035]
[-329.08383179 383.11087036]
[-313.95397949 379.66592407]
[-299.70208740 385.80297852]
[-286.87161255 378.03256226]
[-279.99328613 364.82128906]
[-264.18099976 364.29061890]
[-251.35052490 356.52023315]
[-238.52006531 348.74981689]
[-225.68959045 340.97940063]
[-212.85913086 333.20901489]
[-208.73976135 327.01275635]
[-199.67759705 325.41345215]
[-186.68721008 317.91345215]
[-173.69683838 310.41345215]
[-160.70645142 302.91345215]
[-147.71607971 295.41345215]
[-134.72569275 287.91345215]
[-138.02958679 266.84393311]
[-132.07733154 246.32144165]
[-117.95824432 230.22738647]
[-98.30966187 221.62103271]
[-76.82433319 222.15808105]
[-57.55642319 231.77220154]
[-46.40925217 221.73522949]
[-35.26208115 211.69827271]
[-30.98113823 197.43212891]
[-15.54834652 193.94795227]
[-4.40117407 183.91099548]
[6.74599838 173.87403870]
[17.89317131 163.83708191]
[29.04034233 153.80010986]
[40.18751526 143.76315308]
[51.33468628 133.72619629]
[62.48186111 123.68923950]
[58.04054642 115.69146729]
[55.30111694 106.87157440]
[54.41315460 97.59111786]
[55.44956589 88.23819733]
[58.40201569 79.21127319]
[63.17982483 70.90217590]
[69.61234283 63.67908859]
[77.45488739 57.87032700]
[86.39792633 53.74946594]
[96.07924652 51.52261734]
[106.09862518 51.31837845]
[107.66654968 36.40055084]
[109.23448181 21.48272324]
[110.80240631 6.56489420]
[100.66291809 -5.55807209]
[102.14864349 -21.29237175]
[114.37813568 -31.30312157]
[130.09584045 -29.65112305]
[139.97674561 -17.31647873]
[138.15866089 -1.61711121]
[125.72023773 8.13282108]
[124.15230560 23.05064964]
[122.58438110 37.96847916]
[121.01645660 52.88630676]
[133.68136597 60.92370987]
[146.51184082 53.15330124]
[159.34230042 45.38289642]
[172.17276001 37.61249161]
[185.00323486 29.84208679]
[186.70152283 16.44067383]
[195.69293213 6.62199545]
[208.51243591 3.83666611]
[220.40847778 8.88678932]
[233.39884949 1.38678932]
[246.38923645 -6.11321068]
[259.37960815 -13.61321068]
[272.36999512 -21.11321068]
[277.89440918 -36.17509842]
[293.15960693 -41.10996628]
[306.45547485 -32.13220978]
[307.58251953 -16.12879372]
[295.67617798 -5.37616920]
[279.86999512 -8.12282944]
[266.87960815 -0.62282962]
[253.88923645 6.87717056]
[240.89884949 14.37717056]
[227.90847778 21.87717056]
[224.27951050 38.26819229]
[209.64744568 47.16550827]
[192.77363586 42.67255020]
[179.94317627 50.44295502]
[167.11270142 58.21336365]
[154.28224182 65.98376465]
[141.45178223 73.75417328]
[145.88362122 91.21737671]
[143.60408020 108.21434784]
[157.66329956 113.44293213]
[171.72253418 118.67150879]
[186.84930420 113.32733917]
[200.38211060 121.94377899]
[201.93971252 137.91104126]
[190.32727051 148.98040771]
[174.45285034 146.66040039]
[166.49395752 132.73074341]
[152.43472290 127.50215912]
[138.37548828 122.27358246]
[125.66183472 136.19752502]
[108.31430817 143.58512878]
[89.46542358 143.10235596]
[72.51882172 134.83641052]
[61.37164688 144.87336731]
[50.22447586 154.91032410]
[39.07730103 164.94729614]
[27.93013000 174.98425293]
[16.78295708 185.02120972]
[5.63578510 195.05816650]
[-5.51138735 205.09512329]
[-10.58965015 220.07917786]
[-25.22512054 222.84544373]
[-36.37229156 232.88241577]
[-47.51946640 242.91937256]
[-43.14538956 251.27261353]
[-40.43286896 260.29611206]
[-39.47745895 269.66314697]
[-40.31112671 279.03497314]
[-42.90119934 288.07327271]
[-47.15163040 296.45214844]
[-52.90657043 303.87005615]
[-59.95606995 310.06051636]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 43]
[8 42]
[9 41]
[10 40]
[11 39]
[12 38]
[13 36]
[14 35]
[15 34]
[16 33]
[17 32]
[19 30]
[20 29]
[49 141]
[50 140]
[51 139]
[53 137]
[54 136]
[55 135]
[56 134]
[57 133]
[58 132]
[59 131]
[60 130]
[71 84]
[72 83]
[73 82]
[74 81]
[85 114]
[86 113]
[87 112]
[88 111]
[89 110]
[93 107]
[94 106]
[95 105]
[96 104]
[97 103]
[116 126]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
