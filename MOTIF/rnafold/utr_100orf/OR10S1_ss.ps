%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:41:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACUAGCCGCUCUGUGUGUGAGAAGAUGACCAUGACAACGGAGAACCCCAACCAGACUGUGGUGAGCCACUUCUUCCUGGAGGGUUUGAGGUACACCG\
) } def
/len { sequence length } bind def

/coor [
[88.58610535 222.44128418]
[74.73203278 216.18563843]
[64.33011627 205.10101318]
[58.96657944 190.87777710]
[59.45931244 175.68482971]
[65.73317719 161.83898926]
[76.83146667 151.45167542]
[91.06175995 146.10684204]
[91.52825928 131.11410522]
[91.99475861 116.12135315]
[80.18798828 103.34559631]
[84.15525818 84.47127533]
[69.46080017 81.45916748]
[54.76633835 78.44706726]
[40.07187271 75.43495941]
[25.37741280 72.42285156]
[10.68295002 69.41074371]
[-4.05657864 66.62753296]
[-18.83760834 64.07387543]
[-33.65656662 61.75040436]
[-48.50986481 59.65767288]
[-63.36316299 57.56494522]
[-72.75988007 69.71390533]
[-86.97824097 75.52199554]
[-102.19355774 73.42687988]
[-114.31300354 63.99212265]
[-120.07650757 49.75563431]
[-117.93370056 34.54695129]
[-108.46100616 22.45713997]
[-94.20652008 16.73829460]
[-79.00463104 18.92875671]
[-66.94457245 28.43930435]
[-61.27043152 42.71164703]
[-46.41713333 44.80437469]
[-31.56383514 46.89710617]
[-24.37468910 44.67411804]
[-16.28395462 49.29284668]
[-1.50292504 51.84650040]
[5.75187778 49.84817123]
[13.69505596 54.71628571]
[28.38951874 57.72838974]
[43.08398056 60.74049759]
[57.77844238 63.75260162]
[72.47290802 66.76470947]
[87.16736603 69.77681732]
[101.94839478 67.22315979]
[114.78047180 59.45541763]
[127.61254883 51.68767166]
[140.44462585 43.91992950]
[153.27670288 36.15218353]
[155.31771851 25.24163246]
[162.94468689 17.48532677]
[173.38479614 15.35031796]
[183.03407288 19.32118034]
[196.32423401 12.36622715]
[209.61441040 5.41127443]
[222.90458679 -1.54367876]
[224.72840881 -20.40175438]
[237.29386902 -34.38489914]
[255.56324768 -38.14749527]
[272.36520386 -30.39031982]
[284.94949341 -38.55338287]
[297.53378296 -46.71644592]
[310.11807251 -54.87950897]
[317.08465576 -69.72533417]
[333.44552612 -70.84521484]
[342.37002563 -57.08710098]
[334.67736816 -42.60417175]
[318.28112793 -42.29521561]
[305.69683838 -34.13215256]
[293.11254883 -25.96908951]
[280.52825928 -17.80602837]
[282.06857300 -6.45797920]
[279.16708374 4.67414951]
[272.22100830 13.90957069]
[262.24139404 19.83840370]
[250.70590210 21.53684998]
[239.34014893 18.71093559]
[229.85952759 11.74649143]
[216.56936646 18.70144463]
[203.27919006 25.65639687]
[189.98902893 32.61135101]
[181.07295227 49.65002823]
[161.04444885 48.98426056]
[148.21237183 56.75200272]
[135.38029480 64.51974487]
[122.54821777 72.28749084]
[109.71614075 80.05523682]
[118.07565308 89.03968811]
[120.08500671 100.54879761]
[115.72241211 110.74970245]
[106.98750305 116.58785248]
[106.52100372 131.58059692]
[106.05450439 146.57333374]
[119.92498779 152.79252625]
[130.35603333 163.84973145]
[135.75697327 178.05882263]
[135.30421448 193.25300598]
[129.06678772 207.11529541]
[117.99587250 217.53178406]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 94]
[9 93]
[10 92]
[12 45]
[13 44]
[14 43]
[15 42]
[16 41]
[17 40]
[18 38]
[19 37]
[20 35]
[21 34]
[22 33]
[46 88]
[47 87]
[48 86]
[49 85]
[50 84]
[54 82]
[55 81]
[56 80]
[57 79]
[61 72]
[62 71]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
