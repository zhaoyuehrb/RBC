%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:43:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCGUUUCCUGAGUUCGGGGGUCGGCGGAAGAUGGCGGCCGGCGAAAGGAGCUGGUGCCUGUGCAAGUUGUUGAGGUUUUUUUAUUCAUUAUUCUUCCCUGGGCUCAUUGUAUGUGGAACUUUAUGUGUGU\
) } def
/len { sequence length } bind def

/coor [
[160.59667969 382.59902954]
[169.65582275 370.49847412]
[181.88017273 361.60708618]
[177.00968933 347.41983032]
[172.13919067 333.23257446]
[167.26869202 319.04531860]
[152.62426758 316.32391357]
[141.23246765 306.57284546]
[136.21786499 292.33486938]
[139.02163696 277.40048218]
[148.98922729 265.79901123]
[144.11872864 251.61174011]
[139.24822998 237.42448425]
[134.37774658 223.23722839]
[129.50724792 209.04997253]
[124.63675690 194.86271667]
[119.76626587 180.67544556]
[114.89577484 166.48818970]
[110.02528381 152.30093384]
[105.15479279 138.11367798]
[100.28430176 123.92642212]
[95.41381073 109.73915863]
[87.20958710 97.18166351]
[76.17372894 87.02243805]
[65.13787079 76.86321259]
[54.10200882 66.70399475]
[43.06615067 56.54476929]
[32.03029251 46.38554382]
[20.99443245 36.22632217]
[4.61477995 43.31035233]
[-13.16421223 42.59089661]
[-28.82545471 34.25574493]
[-39.29051971 19.99473763]
[-42.52471924 2.65738130]
[-37.93257904 -14.31647491]
[-49.66005325 -23.66882133]
[-61.38752365 -33.02116776]
[-73.11499786 -42.37351608]
[-81.86503601 -45.31808853]
[-85.00557709 -52.08787537]
[-96.50888824 -61.71460342]
[-108.01219940 -71.34133148]
[-119.51550293 -80.96805573]
[-131.01881409 -90.59478760]
[-146.38256836 -87.68118286]
[-159.99937439 -95.36991882]
[-165.43978882 -110.03061676]
[-160.13500977 -124.74092865]
[-146.58979797 -132.55511475]
[-131.19979858 -129.78353882]
[-121.23167419 -117.73485565]
[-121.39208984 -102.09809113]
[-109.88877869 -92.47136688]
[-98.38546753 -82.84464264]
[-86.88215637 -73.21791077]
[-75.37885284 -63.59118652]
[-63.76264954 -54.10098648]
[-52.03517914 -44.74864197]
[-40.30770493 -35.39629364]
[-28.58023262 -26.04394722]
[-18.05450630 -32.57351303]
[-6.00028467 -35.52851868]
[6.40101767 -34.60366440]
[17.92910767 -29.87467003]
[27.44488525 -21.79234314]
[34.00299835 -11.13963604]
[36.94574738 1.04418218]
[35.96902466 13.56490993]
[31.15365601 25.19046211]
[42.18951416 35.34968567]
[53.22537231 45.50891113]
[64.26123047 55.66813278]
[75.29708862 65.82735443]
[86.33294678 75.98657990]
[97.36880493 86.14580536]
[93.73160553 71.59346008]
[94.06888580 56.59725189]
[98.35667419 42.22314835]
[106.29018402 29.49289322]
[117.30548859 19.31138420]
[130.61958313 12.40234852]
[145.28608704 9.25689602]
[160.26245117 10.09861183]
[174.48413086 14.86766624]
[186.94020081 23.22506332]
[196.74528503 34.57674026]
[203.20237732 48.11578751]
[205.85252380 62.87982559]
[204.50732422 77.81938171]
[199.26240540 91.87252808]
[190.49058533 104.04032135]
[178.81539917 113.45785522]
[165.06672668 119.45570374]
[150.22187805 121.60752869]
[135.33604431 119.76036835]
[121.46735382 114.04553223]
[109.60106659 104.86866760]
[114.47155762 119.05592346]
[119.34204865 133.24317932]
[124.21253967 147.43045044]
[129.08303833 161.61770630]
[133.95352173 175.80496216]
[138.82402039 189.99221802]
[143.69450378 204.17947388]
[148.56500244 218.36672974]
[153.43550110 232.55400085]
[158.30598450 246.74125671]
[163.17648315 260.92852783]
[178.16809082 263.96148682]
[189.55354309 274.02471924]
[194.34146118 288.34051514]
[191.34095764 303.03244019]
[181.45596313 314.17480469]
[186.32644653 328.36206055]
[191.19694519 342.54934692]
[196.06742859 356.73660278]
[211.17536926 356.24478149]
[225.75660706 360.22958374]
[238.51461792 368.33666992]
[248.31497192 379.84512329]
[254.28619385 393.73165894]
[255.89736938 408.76147461]
[253.00520325 423.59814453]
[245.86686707 436.92239380]
[235.11711121 447.54943848]
[221.71179199 454.53433228]
[206.84289551 457.25598145]
[191.83256531 455.47238159]
[178.01548767 449.34213257]
[166.62030029 439.41033936]
[158.66021729 426.56008911]
[154.84307861 411.93405151]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 116]
[4 115]
[5 114]
[6 113]
[11 108]
[12 107]
[13 106]
[14 105]
[15 104]
[16 103]
[17 102]
[18 101]
[19 100]
[20 99]
[21 98]
[22 97]
[23 75]
[24 74]
[25 73]
[26 72]
[27 71]
[28 70]
[29 69]
[35 60]
[36 59]
[37 58]
[38 57]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
