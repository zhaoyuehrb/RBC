%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:55:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGCCGGGAUUCAGGAAGCGCGGAUCUCCCGGCCGCCGGCGCCCAGCCGUCCCGGAGGCUGAGCAGUGCAGACGGGCCUGGGGCAGGCAUGGCGGAUUCCAGCGAAGGCCCCCGCGCGGGGCCCGGGGAGGUGGCUGAGCUCCCCGGGGAUGAGAGUGGCACCCCAGGUGGGGAGGCUUUUCCUCUCU\
) } def
/len { sequence length } bind def

/coor [
[96.37442017 123.76539612]
[92.64231110 122.88674927]
[83.82553101 135.02200317]
[75.00875092 147.15725708]
[66.19197083 159.29251099]
[57.37519455 171.42776489]
[48.55841827 183.56303406]
[39.74163818 195.69828796]
[30.92486000 207.83354187]
[22.10807991 219.96879578]
[20.61714172 238.31416321]
[4.33375788 244.83720398]
[-4.28117180 257.11657715]
[2.26964974 271.00839233]
[0.98093218 286.31311035]
[-7.80066586 298.91387939]
[-21.71293831 305.42111206]
[-37.01355362 304.08444214]
[-49.58672333 295.26339722]
[-56.05033112 281.33078003]
[-54.66569138 266.03442383]
[-45.80527115 253.48896790]
[-31.85247993 247.06907654]
[-16.56054497 248.50164795]
[-7.94561434 236.22227478]
[-9.72419548 224.24580383]
[-2.63207316 213.94175720]
[9.97282505 211.15200806]
[18.78960419 199.01675415]
[27.60638237 186.88150024]
[36.42316055 174.74624634]
[45.23994064 162.61099243]
[54.05672073 150.47573853]
[62.87349701 138.34048462]
[71.69027710 126.20523071]
[80.50705719 114.06997681]
[73.96971130 105.35639954]
[71.58634186 93.66641235]
[56.68669891 95.39868164]
[41.78705978 97.13095093]
[26.88742256 98.86322021]
[15.84198093 110.49842072]
[-0.12845184 108.97367859]
[-8.77272606 95.45864105]
[-3.45969558 80.32089996]
[11.73493862 75.17282867]
[25.15515137 83.96358490]
[40.05479050 82.23131561]
[54.95442963 80.49904633]
[69.85407257 78.76677704]
[80.80556488 68.51666260]
[83.51876831 53.76408768]
[86.23197937 39.01151276]
[88.94518280 24.25893402]
[91.65839386 9.50635910]
[94.37160492 -5.24621725]
[87.79572296 -22.43730545]
[99.66683960 -35.35144806]
[102.13575745 -50.14686966]
[104.60467529 -64.94229126]
[107.07359314 -79.73770905]
[101.71325684 -94.62318420]
[111.43987274 -105.90335083]
[113.90879059 -120.69876862]
[116.37770844 -135.49418640]
[102.98857117 -142.50762939]
[92.43704987 -153.30151367]
[85.74749756 -166.80996704]
[83.56375885 -181.70448303]
[86.08724976 -196.52455139]
[93.05843353 -209.82092285]
[103.78344727 -220.29728699]
[117.20316315 -226.93666077]
[131.99777222 -229.10011292]
[134.46669006 -243.89553833]
[136.93560791 -258.69094849]
[139.40452576 -273.48635864]
[141.87344360 -288.28179932]
[144.34236145 -303.07720947]
[146.81127930 -317.87261963]
[148.54354858 -332.77227783]
[149.53491211 -347.73947144]
[150.52627563 -362.70666504]
[151.51763916 -377.67388916]
[152.50898743 -392.64108276]
[139.49385071 -406.38845825]
[140.62203979 -424.96633911]
[154.71386719 -436.63082886]
[155.20982361 -451.62265015]
[152.36193848 -460.32113647]
[155.83995056 -466.85763550]
[156.58370972 -481.83917236]
[157.32746887 -496.82073975]
[146.53553772 -508.36672974]
[147.15225220 -524.15899658]
[158.81169128 -534.82824707]
[174.59654236 -534.04461670]
[185.14192200 -522.27301025]
[184.19145203 -506.49731445]
[172.30900574 -496.07696533]
[171.56526184 -481.09542847]
[170.82150269 -466.11386108]
[170.20162964 -451.12667847]
[169.70567322 -436.13488770]
[179.13771057 -429.67877197]
[184.32832336 -419.36080933]
[183.88082886 -407.69943237]
[177.79083252 -397.60412598]
[167.47619629 -391.64971924]
[166.48483276 -376.68252563]
[165.49348450 -361.71533203]
[164.50212097 -346.74810791]
[163.51075745 -331.78091431]
[175.55090332 -340.72714233]
[190.41206360 -338.69100952]
[199.60223389 -326.83602905]
[197.86993408 -311.93637085]
[186.20503235 -302.50610352]
[171.27313232 -303.93386841]
[161.60670471 -315.40371704]
[159.13778687 -300.60830688]
[156.66886902 -285.81286621]
[154.19995117 -271.01745605]
[151.73103333 -256.22204590]
[149.26211548 -241.42662048]
[146.79319763 -226.63119507]
[160.08372498 -219.78117371]
[170.62051392 -209.14416504]
[177.36274719 -195.75302124]
[179.63888550 -180.91354370]
[177.21357727 -166.07708740]
[170.31192017 -152.69866943]
[159.59864807 -142.09423828]
[146.11407471 -135.31126404]
[131.17312622 -133.02526855]
[128.70420837 -118.22985077]
[126.23529053 -103.43443298]
[131.77221680 -89.60722351]
[121.86901855 -77.26879120]
[119.40009308 -62.47336960]
[116.93117523 -47.67794800]
[114.46225739 -32.88253021]
[121.23741913 -22.84776688]
[119.28919983 -10.49155331]
[109.12417603 -2.53300953]
[106.41097260 12.21956635]
[103.69776154 26.97214317]
[100.98455048 41.72472000]
[98.27134705 56.47729492]
[95.55813599 71.22987366]
[116.02976990 77.75261688]
[125.36453247 95.67528534]
[119.72290802 113.74575806]
[128.73913574 125.73357391]
[137.75534058 137.72138977]
[146.77156067 149.70921326]
[155.78778076 161.69703674]
[175.97880554 168.84121704]
[177.67103577 189.40109253]
[187.27056885 200.92710876]
[196.87008667 212.45312500]
[214.28810120 218.40196228]
[216.61419678 235.78839111]
[226.40298462 247.15411377]
[236.19177246 258.51983643]
[245.98056030 269.88555908]
[261.63165283 274.78201294]
[264.95220947 290.84146118]
[252.52633667 301.54330444]
[237.13668823 295.87841797]
[234.61483765 279.67434692]
[224.82604980 268.30862427]
[215.03726196 256.94290161]
[205.24847412 245.57717896]
[193.20185852 244.36128235]
[184.95413208 234.95668030]
[185.34407043 222.05264282]
[175.74455261 210.52662659]
[166.14501953 199.00061035]
[157.25833130 199.64543152]
[148.94924927 196.06471252]
[143.14070129 188.94889832]
[141.24006653 179.82139587]
[143.79995728 170.71325684]
[134.78373718 158.72543335]
[125.76752472 146.73760986]
[116.75131226 134.74978638]
[107.73509216 122.76197052]
[104.01802063 123.70220184]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 36]
[3 35]
[4 34]
[5 33]
[6 32]
[7 31]
[8 30]
[9 29]
[10 28]
[12 25]
[13 24]
[38 50]
[39 49]
[40 48]
[41 47]
[51 150]
[52 149]
[53 148]
[54 147]
[55 146]
[56 145]
[58 142]
[59 141]
[60 140]
[61 139]
[63 137]
[64 136]
[65 135]
[74 126]
[75 125]
[76 124]
[77 123]
[78 122]
[79 121]
[80 120]
[81 113]
[82 112]
[83 111]
[84 110]
[85 109]
[88 104]
[89 103]
[91 102]
[92 101]
[93 100]
[153 188]
[154 187]
[155 186]
[156 185]
[157 184]
[159 179]
[160 178]
[161 177]
[163 174]
[164 173]
[165 172]
[166 171]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
