%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:30:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGUGGGGAGAAUGUCACCAGGGUCGGCACCUUCAUCCUGGUGGGCUUCCCCACGGCCCCAGGGCUGCAGUACCUGCUCUUCCUCCUCUUCCUGCUCA\
) } def
/len { sequence length } bind def

/coor [
[83.57704926 316.21191406]
[86.36573792 297.03189087]
[86.83223724 282.03915405]
[87.29873657 267.04641724]
[87.76523590 252.05366516]
[88.23173523 237.06092834]
[88.69822693 222.06817627]
[89.16472626 207.07543945]
[89.63122559 192.08268738]
[90.09772491 177.08995056]
[90.56422424 162.09719849]
[91.03071594 147.10446167]
[91.49721527 132.11170959]
[79.88458252 127.72702026]
[70.37165070 119.17516327]
[64.43645477 107.41744232]
[63.13056946 93.93061829]
[66.90361786 80.52231598]
[53.02321243 74.83599091]
[39.14280319 69.14966583]
[25.26239777 63.46334076]
[11.38199139 57.77701569]
[-2.49841571 52.09069061]
[-16.37882233 46.40436172]
[-30.25922966 40.71803665]
[-44.13963699 35.03171158]
[-53.44800186 34.64831161]
[-58.35886002 28.94664955]
[-72.05570984 22.83139420]
[-87.49273682 27.19920158]
[-100.44799042 17.73659325]
[-100.98330688 1.70247447]
[-88.68804169 -8.60315228]
[-72.99406433 -5.27469206]
[-65.94045258 9.13454628]
[-52.24360657 15.24980068]
[-38.45331192 21.15130424]
[-24.57290268 26.83763123]
[-10.69249630 32.52395630]
[3.18791032 38.21028137]
[17.06831741 43.89661026]
[30.94872475 49.58293533]
[44.82913208 55.26926041]
[58.70953751 60.95558548]
[72.58994293 66.64191437]
[85.65738678 59.27700043]
[87.98085785 44.45804596]
[90.30433655 29.63908768]
[92.62780762 14.82013130]
[82.21460724 3.15397024]
[81.78817749 -12.47779751]
[91.54985046 -24.69432831]
[106.89048004 -27.72735214]
[120.56667328 -20.14476395]
[126.12096405 -5.52683401]
[120.93077850 9.22430038]
[107.44676208 17.14360428]
[105.12329102 31.96256065]
[102.79981995 46.78151703]
[100.47634125 61.60047531]
[115.28961945 66.66470337]
[126.20056152 76.87466431]
[131.68019104 90.00876617]
[146.63487244 88.84351349]
[161.58953857 87.67825317]
[176.54420471 86.51299286]
[187.57785034 73.04815674]
[204.59468079 71.66746521]
[217.15126038 82.73414612]
[232.06246948 81.10436249]
[246.97366333 79.47457886]
[261.88485718 77.84479523]
[276.97326660 70.11329651]
[288.57949829 82.47175598]
[279.91696167 97.04558563]
[263.51464844 92.75599670]
[248.60343933 94.38577271]
[233.69224548 96.01555634]
[218.78105164 97.64533997]
[212.12524414 108.79801941]
[200.05905151 114.10930634]
[186.95578003 111.40650940]
[177.70945740 101.46766663]
[162.75479126 102.63291931]
[147.80012512 103.79817963]
[132.84545898 104.96343994]
[128.17895508 117.58992767]
[118.88506317 127.32789612]
[106.48995972 132.57821655]
[106.02346039 147.57095337]
[105.55696869 162.56370544]
[105.09046936 177.55644226]
[104.62397003 192.54919434]
[104.15747070 207.54193115]
[103.69097137 222.53468323]
[103.22447968 237.52742004]
[102.75798035 252.52017212]
[102.29148102 267.51290894]
[101.82498169 282.50564575]
[101.35848236 297.49838257]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 100]
[3 99]
[4 98]
[5 97]
[6 96]
[7 95]
[8 94]
[9 93]
[10 92]
[11 91]
[12 90]
[13 89]
[18 45]
[19 44]
[20 43]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[28 36]
[29 35]
[46 60]
[47 59]
[48 58]
[49 57]
[63 86]
[64 85]
[65 84]
[66 83]
[69 79]
[70 78]
[71 77]
[72 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
