%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGCCCUGAGAACCAGAGCAGCGUGUCCGAGUUCCUCCUCCUGGGCCUCCCCAUCCGGCCAGAGCAGCAGGCCGUGUUCUUCGCCCUGUUCCUGGGCA\
) } def
/len { sequence length } bind def

/coor [
[65.43197632 136.80792236]
[54.06983566 120.98073578]
[49.54556274 102.03003693]
[34.63436508 100.40025330]
[19.72316933 98.77046967]
[4.78842831 97.37277985]
[-10.16624260 96.20752716]
[-25.12091255 95.04226685]
[-41.43843079 103.39604187]
[-55.56807709 93.11720276]
[-70.55175781 92.41759491]
[-85.53543091 91.71798706]
[-89.11827850 93.90827179]
[-92.84490967 94.86023712]
[-96.33792114 94.66757202]
[-99.28248596 93.52906036]
[-101.45336151 91.72167206]
[-102.73197937 89.56729126]
[-117.42643738 86.55518341]
[-132.12091064 83.54308319]
[-147.19367981 88.35160828]
[-158.10800171 78.21617889]
[-172.80245972 75.20407867]
[-187.49693298 72.19197083]
[-198.86143494 82.75736237]
[-214.26971436 84.59162903]
[-227.79696655 76.98945618]
[-234.24168396 62.87403107]
[-231.12574768 47.67302322]
[-219.64729309 37.23153687]
[-204.22003174 35.56452942]
[-190.77603149 43.31299973]
[-184.48481750 57.49750900]
[-169.79035950 60.50961304]
[-155.09590149 63.52172089]
[-141.07417297 58.49774933]
[-129.10879517 68.84861755]
[-114.41433716 71.86072540]
[-99.71987152 74.87283325]
[-84.83582306 76.73431396]
[-69.85214996 77.43391418]
[-54.86847305 78.13352203]
[-45.61285400 70.17416382]
[-33.01529694 70.74523163]
[-23.95565414 80.08759308]
[-9.00098419 81.25285339]
[5.95368624 82.41811371]
[12.99072266 79.75247955]
[21.35295105 83.85927582]
[36.26414871 85.48905182]
[51.17534637 87.11883545]
[57.51082611 72.71555328]
[67.97217560 60.96169281]
[81.54354858 52.99861145]
[96.90712738 49.59955215]
[112.57102966 51.09457779]
[127.01423645 57.33851624]
[138.83424377 67.72505188]
[151.66632080 59.95730972]
[164.49839783 52.18956375]
[177.33047485 44.42182159]
[190.16255188 36.65407562]
[190.47413635 21.22985840]
[199.09416199 8.43538952]
[213.27204895 2.35333443]
[228.48364258 4.92445660]
[239.87501526 15.32832050]
[243.81118774 30.24509048]
[239.03617859 44.91487885]
[227.07363892 54.65661240]
[211.74079895 56.36173630]
[197.93029785 49.48615265]
[185.09822083 57.25389481]
[172.26614380 65.02163696]
[159.43406677 72.78938293]
[146.60198975 80.55712891]
[148.85502625 87.23451233]
[150.15647888 94.16053772]
[150.48098755 101.20029449]
[149.82225037 108.21668243]
[148.19309998 115.07302094]
[145.62525940 121.63578033]
[142.16874695 127.77712250]
[137.89088440 133.37742615]
[132.87498474 138.32762146]
[140.84135437 151.03733826]
[148.80772400 163.74705505]
[156.77409363 176.45678711]
[172.28637695 178.43235779]
[182.86158752 189.95185852]
[183.50640869 205.57614136]
[173.91641235 217.92788696]
[158.61965942 221.17498779]
[144.83883667 213.78425598]
[139.08082581 199.24537659]
[144.06436157 184.42314148]
[136.09800720 171.71342468]
[128.13163757 159.00370789]
[120.16526794 146.29399109]
[101.13752747 150.48243713]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 51]
[4 50]
[5 49]
[6 47]
[7 46]
[8 45]
[10 42]
[11 41]
[12 40]
[18 39]
[19 38]
[20 37]
[22 35]
[23 34]
[24 33]
[58 76]
[59 75]
[60 74]
[61 73]
[62 72]
[85 99]
[86 98]
[87 97]
[88 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
