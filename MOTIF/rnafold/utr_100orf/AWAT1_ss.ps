%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:03:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGUUCUGAGAUCUUUGCCUCCCUCAGGCUCCCGAGAAUCAUGGCUCAUUCCAAGCAGCCUAGUCACUUCCAGAGUCUGAUGCUUCUGCAGUGGCCUUUGAGCUACCUUGCCAUCUUUUGGAUCUUGCAGCCAUUGUUCG\
) } def
/len { sequence length } bind def

/coor [
[-112.22093964 389.23095703]
[-120.76839447 401.62493896]
[-133.01737976 410.33035278]
[-147.47834778 414.31216431]
[-162.40083313 413.10845947]
[-175.98530579 406.88375854]
[-186.47393799 417.60702515]
[-196.96255493 428.33032227]
[-207.45118713 439.05358887]
[-217.93981934 449.77685547]
[-228.42843628 460.50015259]
[-223.17988586 474.83245850]
[-224.67822266 490.02188110]
[-232.62593079 503.05245972]
[-245.44499207 511.33703613]
[-260.59017944 513.23071289]
[-275.05441284 508.35739136]
[-285.96578979 497.68478394]
[-291.15786743 483.33190918]
[-289.59973145 468.14852905]
[-281.60076904 455.14932251]
[-268.74917603 446.91531372]
[-253.59664917 445.08132935]
[-239.15171814 450.01153564]
[-228.66308594 439.28823853]
[-218.17446899 428.56497192]
[-207.68583679 417.84167480]
[-197.19721985 407.11840820]
[-186.70858765 396.39511108]
[-193.23229980 382.95166016]
[-194.76582336 368.05947876]
[-191.10487366 353.51394653]
[-182.67259216 341.07537842]
[-170.47071838 332.25582886]
[-155.96064758 328.13543701]
[-140.88835144 329.23001099]
[-127.07438660 335.42675781]
[-116.58576202 324.70349121]
[-106.09712982 313.98019409]
[-95.60850525 303.25692749]
[-92.24034882 288.74813843]
[-77.05941010 284.29284668]
[-66.57078552 273.56954956]
[-56.08216095 262.84628296]
[-45.59353638 252.12300110]
[-35.10491180 241.39971924]
[-24.61628532 230.67643738]
[-14.24691868 219.83779907]
[-3.99808168 208.88511658]
[-1.09557354 189.81481934]
[18.17029381 184.06260681]
[27.92462540 172.66729736]
[37.67895889 161.27198792]
[47.43328857 149.87669373]
[57.18762207 138.48138428]
[66.94195557 127.08607483]
[60.25673676 115.71504974]
[57.35748291 102.84700012]
[58.52037430 89.70774841]
[63.63463593 77.54893494]
[72.21308136 67.52882385]
[83.43852234 60.60193634]
[96.24162292 57.42812729]
[109.40274048 58.30973434]
[115.21955109 44.48350143]
[121.03636169 30.65726852]
[126.85317993 16.83103752]
[132.66998291 3.00480556]
[138.48680115 -10.82142639]
[134.34201050 -23.09000397]
[139.53175354 -34.51438141]
[150.75593567 -39.15592957]
[156.87719727 -52.85009766]
[162.99844360 -66.54426575]
[169.11970520 -80.23843384]
[175.24095154 -93.93260193]
[167.38581848 -107.31454468]
[168.93008423 -122.75458527]
[179.27995300 -134.31571960]
[194.45570374 -137.55244446]
[208.62193298 -131.22018433]
[216.33143616 -117.75380707]
[214.61976624 -102.33142853]
[204.14508057 -90.88325500]
[188.93511963 -87.81134796]
[182.81387329 -74.11717987]
[176.69261169 -60.42301178]
[170.57136536 -46.72884369]
[164.45010376 -33.03467560]
[167.22813416 -15.74114990]
[152.31303406 -5.00461388]
[146.49621582 8.82161808]
[140.67941284 22.64785004]
[134.86259460 36.47408295]
[129.04579163 50.30031586]
[123.22897339 64.12654877]
[130.21105957 69.77117920]
[135.85980225 76.74995422]
[139.92587280 84.75485992]
[142.22984314 93.43260193]
[157.22616577 93.76443481]
[165.95431519 90.80751038]
[172.54957581 94.27313995]
[187.53489685 94.93664551]
[199.02291870 84.08303833]
[214.81825256 84.61514282]
[225.54978943 96.21727753]
[224.85072327 112.00609589]
[213.13577271 122.61437988]
[197.35522461 121.74841309]
[186.87139893 109.92195892]
[171.88607788 109.25846100]
[156.89433289 108.76076508]
[141.89801025 108.42893219]
[133.37918091 126.68933105]
[117.44045258 139.01692200]
[97.62487030 142.67140198]
[78.33725739 136.84040833]
[68.58293152 148.23571777]
[58.82859421 159.63101196]
[49.07426453 171.02632141]
[39.31993103 182.42163086]
[29.56559944 193.81694031]
[31.03766251 204.69425964]
[26.33582497 214.36804199]
[17.25343704 219.70687866]
[6.95460463 219.13394165]
[-3.29423285 230.08663940]
[-6.91209221 238.56219482]
[-13.89300442 241.16506958]
[-24.38162994 251.88835144]
[-34.87025452 262.61163330]
[-45.35888290 273.33489990]
[-55.84750748 284.05819702]
[-66.33613586 294.78146362]
[-70.45450592 310.05725098]
[-84.88523102 313.74554443]
[-95.37385559 324.46884155]
[-105.86248016 335.19210815]
[-116.35110474 345.91537476]
[-109.85028839 359.58889771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[11 24]
[37 140]
[38 139]
[39 138]
[40 137]
[42 135]
[43 134]
[44 133]
[45 132]
[46 131]
[47 130]
[48 128]
[49 127]
[51 123]
[52 122]
[53 121]
[54 120]
[55 119]
[56 118]
[64 96]
[65 95]
[66 94]
[67 93]
[68 92]
[69 91]
[72 89]
[73 88]
[74 87]
[75 86]
[76 85]
[100 114]
[101 113]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
