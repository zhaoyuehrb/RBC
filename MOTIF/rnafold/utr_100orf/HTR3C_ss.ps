%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:09:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGUGAAUCCCCAGAGAAGAGUCCAGAAAGAAGAAUGGAAGGAGGGUGGCCUGCAAGGCAGAGUGCCCUCCUCUGCCUCACUGUCAGUCUUCUGCUUCAAGGAAGAGGCGACGCUUUUACCAUCAAUUGCUCAG\
) } def
/len { sequence length } bind def

/coor [
[105.24031067 222.15403748]
[101.10575104 207.73512268]
[96.97119141 193.31619263]
[92.83663177 178.89726257]
[88.70206451 164.47833252]
[84.56750488 150.05941772]
[80.43294525 135.64048767]
[65.81819153 139.01820374]
[51.66200638 134.05813599]
[42.35147858 122.29743195]
[40.77200699 107.38082123]
[47.41308212 93.93106079]
[60.21658707 86.11631012]
[75.21463013 86.35842896]
[87.75942230 94.58260345]
[78.94264984 82.44734955]
[70.12586975 70.31209564]
[61.30908966 58.17683792]
[52.49230957 46.04158401]
[43.67553329 33.90632629]
[26.80679321 34.15457916]
[13.22875023 24.42358780]
[8.14512157 8.68489361]
[13.35981655 -6.83625126]
[4.26305056 -18.76306343]
[-4.83371592 -30.68987465]
[-20.24789810 -32.93503952]
[-29.30340958 -45.16011047]
[-27.06799507 -59.84133911]
[-36.16476059 -71.76815033]
[-53.29140091 -78.41624451]
[-54.95043564 -95.84732819]
[-64.32226562 -107.55923462]
[-73.69409180 -119.27114868]
[-77.01636505 -104.64369202]
[-89.59287262 -96.46863556]
[-104.30953217 -99.37032318]
[-112.84167480 -111.70736694]
[-110.36296082 -126.50114441]
[-98.27552032 -135.38336182]
[-83.41643524 -133.32946777]
[-91.06707764 -146.23170471]
[-98.71771240 -159.13394165]
[-106.36835480 -172.03617859]
[-114.01898956 -184.93841553]
[-121.66963196 -197.84065247]
[-129.32026672 -210.74288940]
[-136.97090149 -223.64512634]
[-152.02021790 -227.66458130]
[-159.59526062 -240.85827637]
[-155.67056274 -255.18072510]
[-163.32121277 -268.08294678]
[-170.97184753 -280.98519897]
[-178.62248230 -293.88742065]
[-191.90187073 -304.42755127]
[-185.44975281 -320.10577393]
[-168.59812927 -318.24597168]
[-165.72024536 -301.53808594]
[-158.06961060 -288.63583374]
[-150.41897583 -275.73358154]
[-142.76832581 -262.83135986]
[-128.31872559 -259.40432739]
[-120.37609863 -246.42860413]
[-124.06867218 -231.29576111]
[-116.41802979 -218.39352417]
[-108.76739502 -205.49128723]
[-101.11675262 -192.58905029]
[-93.46611786 -179.68681335]
[-85.81547546 -166.78457642]
[-78.16483307 -153.88233948]
[-70.51419830 -140.98010254]
[-61.98218155 -128.64297485]
[-52.61035156 -116.93106842]
[-43.23852539 -105.21915436]
[-31.19985580 -103.54974365]
[-23.30179787 -93.78903198]
[-24.23794937 -80.86492157]
[-15.14118385 -68.93811035]
[-0.39143041 -67.21173096]
[9.00388622 -55.24583435]
[7.09309626 -39.78664017]
[16.18986320 -27.85982895]
[25.28662872 -15.93301773]
[38.59872818 -17.47625160]
[51.02552032 -12.17630482]
[59.25757599 -1.32768083]
[61.04484940 12.28236198]
[55.81078720 25.08954811]
[64.62756348 37.22480392]
[73.44434357 49.36005783]
[82.26112366 61.49531174]
[91.07790375 73.63056946]
[99.89468384 85.76582336]
[113.21993256 92.65332031]
[128.21891785 92.82785034]
[143.21791077 93.00238037]
[158.21688843 93.17691040]
[173.21586609 93.35143280]
[184.34388733 82.12901306]
[200.14817810 82.14581299]
[211.25231934 93.39186096]
[211.06842041 109.19507599]
[199.70561218 120.17969513]
[183.90521240 119.82874298]
[173.04135132 108.35041809]
[158.04235840 108.17588806]
[143.04338074 108.00136566]
[128.04438782 107.82683563]
[113.04540253 107.65230560]
[108.49702454 113.61570740]
[123.37431335 115.53044128]
[129.15464783 129.37196350]
[120.05762482 141.29858398]
[105.18037415 139.38351440]
[99.40025330 125.54252625]
[94.85187531 131.50593567]
[98.98643494 145.92485046]
[103.12099457 160.34378052]
[107.25555420 174.76271057]
[111.39011383 189.18162537]
[115.52467346 203.60055542]
[119.65923309 218.01948547]
[134.74575806 220.09713745]
[147.67950439 228.13693237]
[156.21960449 240.74591064]
[158.88645935 255.73950195]
[155.21800232 270.51998901]
[145.84982300 282.52651978]
[132.40499878 289.67892456]
[117.21295929 290.73800659]
[102.90579224 285.52026367]
[91.96231079 274.92968750]
[86.27853394 260.80120850]
[86.83921051 245.58261108]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 122]
[2 121]
[3 120]
[4 119]
[5 118]
[6 117]
[7 116]
[15 93]
[16 92]
[17 91]
[18 90]
[19 89]
[20 88]
[24 83]
[25 82]
[26 81]
[29 78]
[30 77]
[32 74]
[33 73]
[34 72]
[41 71]
[42 70]
[43 69]
[44 68]
[45 67]
[46 66]
[47 65]
[48 64]
[51 61]
[52 60]
[53 59]
[54 58]
[94 109]
[95 108]
[96 107]
[97 106]
[98 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
