%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:26:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGACUCCGGAAGCAGCGCUCCCUCCGCUUCCGGCCGAGCCCGCGCCCCCCAGACCCCGAGAGCUCGCAGCUCCGGCCCGGCGGCGAUGGCGCGGAGCGUGCGCGUGCUGGUGGACAUGGACGGCGUCCUGGCCGACUUCGAGGCCGGCCUCCUGCGGGGCUUCCGCCGCCGCUUCCCUGAGGAGC\
) } def
/len { sequence length } bind def

/coor [
[229.57608032 695.43548584]
[225.87471008 680.89935303]
[222.17335510 666.36315918]
[218.47198486 651.82702637]
[214.77062988 637.29089355]
[212.41139221 635.74383545]
[210.52886963 633.16027832]
[209.52426147 629.71923828]
[209.72575378 625.74267578]
[211.34066772 621.66577148]
[208.61326599 606.91577148]
[205.88586426 592.16583252]
[203.15846252 577.41589355]
[200.43106079 562.66595459]
[197.70365906 547.91595459]
[194.97624207 533.16601562]
[182.59738159 524.96240234]
[179.62129211 510.04269409]
[188.30993652 497.11422729]
[185.58253479 482.36425781]
[182.85513306 467.61431885]
[167.36746216 463.71502686]
[155.08311462 453.41802979]
[148.49098206 438.74340820]
[148.95541382 422.60464478]
[156.43423462 408.23022461]
[169.47695923 398.51779175]
[166.50477600 383.81521606]
[163.53257751 369.11260986]
[160.43829346 354.43524170]
[157.22213745 339.78408813]
[154.00598145 325.13293457]
[150.78982544 310.48178101]
[146.96777344 295.97686768]
[142.54644775 281.64328003]
[138.12512207 267.30969238]
[133.70379639 252.97610474]
[129.28247070 238.64251709]
[124.29713440 233.16716003]
[124.90890503 224.03381348]
[120.72643280 209.62870789]
[111.34639740 205.51763916]
[105.66702271 196.73234558]
[105.77308655 186.05186462]
[111.87149811 177.01652527]
[108.17013550 162.48036194]
[104.46877289 147.94421387]
[100.76741028 133.40805054]
[97.06605530 118.87188721]
[84.66298676 111.38121796]
[81.08758545 97.33975220]
[88.39778900 84.82946777]
[84.69642639 70.29331207]
[80.99506378 55.75715256]
[65.79968262 47.10826874]
[61.63358688 30.47525787]
[70.59832001 16.25606155]
[66.65586090 1.78343260]
[62.59325027 -12.65593147]
[58.41077805 -27.06103134]
[53.00280380 -34.44656372]
[54.28064346 -41.74040604]
[50.33818054 -56.21303558]
[39.24580002 -67.49442291]
[43.36595535 -81.80783081]
[39.42349243 -96.28045654]
[28.33111191 -107.56184387]
[32.45126343 -121.87524414]
[28.50880432 -136.34786987]
[24.56634140 -150.82051086]
[20.62388039 -165.29313660]
[16.56127357 -179.73249817]
[12.37880230 -194.13760376]
[8.19633007 -208.54269409]
[4.01385736 -222.94779968]
[-0.16861477 -237.35290527]
[-4.35108709 -251.75799561]
[-8.65313530 -266.12783813]
[-13.07446289 -280.46142578]
[-17.49579048 -294.79504395]
[-22.15475273 -309.05316162]
[-27.05006027 -323.23187256]
[-39.78349304 -333.56588745]
[-36.93384171 -349.71554565]
[-21.43258667 -355.06747437]
[-9.22608757 -344.11605835]
[-12.87134552 -328.12716675]
[-7.97603703 -313.94845581]
[-4.13337898 -311.08355713]
[-2.06053352 -305.76641846]
[-3.16219854 -299.21636963]
[1.25912905 -284.88275146]
[5.68045664 -270.54916382]
[10.66578770 -265.07382202]
[10.05401325 -255.94047546]
[14.23648548 -241.53536987]
[18.41895866 -227.13027954]
[22.60143089 -212.72517395]
[26.78390312 -198.32006836]
[30.96637535 -183.91497803]
[35.86000824 -178.35751343]
[35.09651184 -169.23559570]
[39.03897095 -154.76296997]
[42.98143387 -140.29034424]
[46.92389297 -125.81771088]
[57.73428345 -115.57150269]
[53.89612198 -100.22291565]
[57.83858490 -85.75028992]
[68.64897156 -75.50408173]
[64.81081390 -60.15549850]
[68.75327301 -45.68286896]
[72.81587982 -31.24350357]
[76.99835205 -16.83840370]
[81.89198303 -11.28094482]
[81.12848663 -2.15902877]
[85.07094574 12.31360054]
[97.05070496 17.08835983]
[104.19469452 28.05813980]
[103.70301056 41.33468628]
[95.53122711 52.05579376]
[99.23258972 66.59194946]
[102.93394470 81.12811279]
[115.33701324 88.61878204]
[118.91241455 102.66024780]
[111.60221100 115.17053223]
[115.30357361 129.70668030]
[119.00493622 144.24284363]
[122.70629120 158.77900696]
[126.40765381 173.31517029]
[141.12396240 187.07359314]
[135.13153076 205.44624329]
[139.31401062 219.85134888]
[143.61605835 234.22119141]
[148.03738403 248.55477905]
[152.45870972 262.88836670]
[156.88003540 277.22195435]
[161.30136108 291.55554199]
[170.59712219 279.78317261]
[185.59515381 279.54006958]
[195.26754761 291.00500488]
[192.50228882 305.74792480]
[179.33264160 312.92846680]
[165.44097900 307.26562500]
[168.65713501 321.91677856]
[171.87329102 336.56793213]
[175.08944702 351.21908569]
[179.99478149 358.94760132]
[178.23516846 366.14041138]
[181.20735168 380.84301758]
[184.17955017 395.54559326]
[198.00833130 398.51110840]
[209.62513733 406.50204468]
[217.29257202 418.28317261]
[219.87927246 432.05551147]
[217.02665710 445.73098755]
[209.19834900 457.24899292]
[197.60508728 464.88690186]
[200.33248901 479.63687134]
[203.05989075 494.38681030]
[215.79714966 503.35342407]
[218.35299683 518.35083008]
[209.72621155 530.43859863]
[212.45361328 545.18853760]
[215.18101501 559.93853760]
[217.90841675 574.68847656]
[220.63581848 589.43841553]
[223.36322021 604.18841553]
[226.09062195 618.93835449]
[229.30679321 633.58953857]
[233.00814819 648.12567139]
[236.70950317 662.66180420]
[240.41087341 677.19799805]
[244.11222839 691.73413086]
[247.93428040 706.23901367]
[251.87673950 720.71166992]
[255.81919861 735.18432617]
[259.76165771 749.65692139]
[263.70413208 764.12957764]
[276.86123657 773.30944824]
[277.74359131 789.32818604]
[265.67434692 799.89764404]
[249.91197205 796.90979004]
[242.54803467 782.65661621]
[249.23149109 768.07202148]
[245.28903198 753.59936523]
[241.34657288 739.12677002]
[237.40411377 724.65411377]
[233.46163940 710.18151855]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 173]
[2 172]
[3 171]
[4 170]
[5 169]
[10 168]
[11 167]
[12 166]
[13 165]
[14 164]
[15 163]
[16 162]
[19 159]
[20 158]
[21 157]
[27 150]
[28 149]
[29 148]
[30 146]
[31 145]
[32 144]
[33 143]
[34 137]
[35 136]
[36 135]
[37 134]
[38 133]
[40 132]
[41 131]
[45 129]
[46 128]
[47 127]
[48 126]
[49 125]
[52 122]
[53 121]
[54 120]
[57 116]
[58 115]
[59 113]
[60 112]
[62 111]
[63 110]
[65 108]
[66 107]
[68 105]
[69 104]
[70 103]
[71 102]
[72 100]
[73 99]
[74 98]
[75 97]
[76 96]
[77 95]
[78 93]
[79 92]
[80 91]
[81 88]
[82 87]
[174 188]
[175 187]
[176 186]
[177 185]
[178 184]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
