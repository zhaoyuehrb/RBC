%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUAGAGAAGCCAAUCAGCGUCGCCGCGGUCCCAGUUCUAAAGUCCCCACGCACCCACCCGGACUCAGAGUCUCCUCAGACGCCGAGAUGCUGGUCAUGGCGCCCCGAACCGUCCUCCUGCUGCUCUCGGCGGCCCUGGCCCUGACCGAGACCUGGGCCGGCUCCCACUCCAUGAGGUAUUUCUACA\
) } def
/len { sequence length } bind def

/coor [
[68.91829681 351.62030029]
[65.55941772 335.93280029]
[75.84118652 323.61758423]
[75.84118652 308.61758423]
[75.84118652 293.61758423]
[75.84118652 278.61758423]
[75.84118652 263.61758423]
[75.84118652 248.61756897]
[68.10388184 235.89030457]
[75.84118652 222.09013367]
[75.84118652 207.09013367]
[75.84118652 192.09013367]
[73.14320374 188.12741089]
[72.91944122 182.42370605]
[76.10021210 176.59098816]
[76.60143280 161.59936523]
[77.10266113 146.60774231]
[64.73603821 138.11854553]
[50.92628860 143.97438049]
[37.11653900 149.83021545]
[23.30678940 155.68606567]
[21.33525467 170.85380554]
[12.09736919 182.91854858]
[-1.84640968 188.70106506]
[-16.71293449 186.74085999]
[-28.52267456 177.66365051]
[-42.33242416 183.51948547]
[-41.82576370 198.68879700]
[-46.83679199 213.01548767]
[-56.68780899 224.56199646]
[-70.04654694 231.76675415]
[-85.10634613 233.65538025]
[-99.83049011 229.97244263]
[-112.22766113 221.21603394]
[-120.62124634 208.57040405]
[-123.87607574 193.74574280]
[-121.55196381 178.74697876]
[-113.96323395 165.60256958]
[-102.13618469 156.09017944]
[-87.67034149 151.49629211]
[-72.52207947 152.44219971]
[-58.74008942 158.79995728]
[-48.18826294 169.70974731]
[-34.37851334 163.85389709]
[-32.69338226 149.05438232]
[-23.76732826 137.00524902]
[-9.91711426 131.00209045]
[5.17742395 132.74900818]
[17.45095062 141.87631226]
[31.26070023 136.02047729]
[45.07044601 130.16462708]
[58.88019562 124.30879211]
[53.64458084 108.51677704]
[54.17926788 92.11103058]
[60.26477432 77.10651398]
[71.00929260 65.29302979]
[84.97595978 58.02193451]
[100.37369537 56.05236053]
[115.28648376 59.47441101]
[122.93073273 46.56838989]
[130.57498169 33.66236496]
[138.21923828 20.75634003]
[139.90583801 11.75824451]
[146.10058594 7.70004702]
[153.95942688 -5.07644081]
[161.81826782 -17.85292816]
[169.67710876 -30.62941551]
[177.53593445 -43.40590286]
[179.37266541 -52.37456131]
[185.63435364 -56.32867813]
[193.70559692 -68.97206116]
[201.77682495 -81.61544800]
[209.84806824 -94.25883484]
[217.91929626 -106.90221405]
[218.30374146 -125.30316925]
[234.16381836 -132.79501343]
[242.02265930 -145.57150269]
[249.88150024 -158.34799194]
[257.74035645 -171.12448120]
[251.64488220 -180.14916992]
[251.19943237 -192.44599915]
[257.96792603 -204.38916016]
[264.05371094 -218.09913635]
[270.13949585 -231.80909729]
[276.22528076 -245.51907349]
[282.31106567 -259.22903442]
[288.39682007 -272.93902588]
[294.48260498 -286.64898682]
[291.43276978 -306.56222534]
[307.50607300 -317.29025269]
[313.13034058 -331.19592285]
[311.13189697 -346.89041138]
[323.07681274 -355.78805542]
[328.70108032 -369.69372559]
[322.00692749 -379.54711914]
[320.92089844 -391.28924561]
[325.59814453 -401.98336792]
[334.76687622 -409.01104736]
[346.07171631 -410.71304321]
[352.15750122 -424.42303467]
[358.24328613 -438.13299561]
[364.32907104 -451.84295654]
[356.43930054 -465.20452881]
[357.94360352 -480.64849854]
[368.26351929 -492.23638916]
[383.43081665 -495.51239014]
[397.61340332 -489.21682739]
[405.35775757 -475.77047729]
[403.68600464 -460.34371948]
[393.24099731 -448.86846924]
[378.03903198 -445.75717163]
[371.95324707 -432.04721069]
[365.86749268 -418.33724976]
[359.78170776 -404.62725830]
[367.38372803 -387.98999023]
[360.30810547 -370.77685547]
[342.60675049 -364.06945801]
[336.98248291 -350.16378784]
[339.38320923 -335.46392822]
[327.03601074 -325.57165527]
[321.41174316 -311.66598511]
[326.23934937 -302.63247681]
[325.26666260 -292.21539307]
[318.57498169 -283.88888550]
[308.19259644 -280.56320190]
[302.10681152 -266.85324097]
[296.02102661 -253.14326477]
[289.93524170 -239.43328857]
[283.84945679 -225.72332764]
[277.76367188 -212.01335144]
[271.67788696 -198.30339050]
[280.77615356 -186.37770081]
[295.60681152 -188.62513733]
[310.43750000 -190.87257385]
[322.90606689 -201.52467346]
[338.27291870 -195.79830933]
[340.73001099 -179.58427429]
[327.74963379 -169.56217957]
[312.68493652 -176.04188538]
[297.85424805 -173.79444885]
[283.02359009 -171.54701233]
[270.51681519 -163.26564026]
[262.65798950 -150.48915100]
[254.79914856 -137.71266174]
[246.94030762 -124.93618011]
[249.43772888 -113.08749390]
[242.97819519 -102.37409973]
[230.56268311 -98.83097839]
[222.49145508 -86.18759918]
[214.42021179 -73.54421234]
[206.34898376 -60.90082932]
[198.27774048 -48.25744247]
[190.31242371 -35.54706573]
[182.45358276 -22.77057648]
[174.59475708 -9.99408913]
[166.73591614 2.78239894]
[158.87707520 15.55888653]
[151.12525940 28.40059090]
[143.48100281 41.30661392]
[135.83676147 54.21263885]
[128.19250488 67.11865997]
[134.89660645 73.72218323]
[140.06604004 81.68109131]
[143.42958069 90.64112854]
[144.79736328 100.19445801]
[144.07113647 109.89826965]
[141.25057983 119.29523468]
[136.43484497 127.93508911]
[129.81948853 135.39620972]
[121.68867493 141.30613708]
[112.40312195 145.36006165]
[102.38408661 147.33648682]
[92.09428406 147.10897827]
[91.59305573 162.10060120]
[91.09183502 177.09222412]
[90.84118652 192.09013367]
[90.84118652 207.09013367]
[90.84118652 222.09013367]
[98.57848358 235.89030457]
[90.84118652 248.61756897]
[90.84118652 263.61758423]
[90.84118652 278.61758423]
[90.84118652 293.61758423]
[90.84118652 308.61758423]
[90.84118652 323.61758423]
[101.12295532 335.93280029]
[97.76406860 351.62030029]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 185]
[4 184]
[5 183]
[6 182]
[7 181]
[8 180]
[10 178]
[11 177]
[12 176]
[15 175]
[16 174]
[17 173]
[18 52]
[19 51]
[20 50]
[21 49]
[26 44]
[27 43]
[59 161]
[60 160]
[61 159]
[62 158]
[64 157]
[65 156]
[66 155]
[67 154]
[68 153]
[70 152]
[71 151]
[72 150]
[73 149]
[74 148]
[76 145]
[77 144]
[78 143]
[79 142]
[82 131]
[83 130]
[84 129]
[85 128]
[86 127]
[87 126]
[88 125]
[90 121]
[91 120]
[93 118]
[94 117]
[99 114]
[100 113]
[101 112]
[102 111]
[132 141]
[133 140]
[134 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
