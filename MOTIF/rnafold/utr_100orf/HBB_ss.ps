%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUUUGCUUCUGACACAACUGUGUUCACUAGCAACCUCAAACAGACACCAUGGUGCAUCUGACUCCUGAGGAGAAGUCUGCCGUUACUGCCCUGUGGGGCAAGGUGAACGUGGAUGAAGUUGGUGGUGAGGCCCUGGGCAGGCUGCUGG\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 237.84849548]
[92.50000000 222.00936890]
[92.50000000 207.00936890]
[80.36157990 198.41886902]
[75.55226898 184.15931702]
[80.11502075 169.63229370]
[92.50000000 160.47158813]
[92.50000000 145.47158813]
[92.50000000 130.47158813]
[92.50000000 115.47158051]
[85.60881042 112.51160431]
[73.59096527 121.48776245]
[71.82643127 106.59163666]
[64.93523407 103.63166046]
[54.05641174 113.95886230]
[43.17758560 124.28606415]
[32.29876328 134.61326599]
[28.16524315 150.48292542]
[12.28525066 154.57656860]
[0.99475992 142.68299866]
[5.90845966 127.03731537]
[21.97155571 123.73444366]
[32.85037994 113.40724182]
[43.72920609 103.08003998]
[54.60803223 92.75283051]
[61.23653030 79.29686737]
[62.79411316 64.37795258]
[64.35169220 49.45904160]
[65.90927124 34.54013062]
[67.46685791 19.62121773]
[69.02443695 4.70230484]
[62.76195526 -9.82669735]
[71.77901459 -21.68173599]
[73.33659363 -36.60064697]
[74.89417267 -51.51956177]
[76.45175171 -66.43846893]
[70.18927002 -80.96747589]
[79.20632935 -92.82250977]
[80.76390839 -107.74142456]
[82.32149506 -122.66033936]
[72.64188385 -134.86454773]
[74.43402100 -149.97225952]
[86.12852478 -159.12507629]
[87.68610382 -174.04399109]
[75.20224762 -188.22682190]
[76.95194244 -206.72103882]
[91.37254333 -217.92120361]
[92.30816650 -232.89199829]
[93.24379730 -247.86277771]
[94.17942810 -262.83358765]
[92.31181335 -277.71685791]
[87.70624542 -291.99230957]
[83.10068512 -306.26779175]
[78.49511719 -320.54324341]
[73.88955688 -334.81869507]
[60.47280121 -338.13378906]
[50.53651810 -347.58279419]
[46.61408234 -360.60833740]
[49.63196182 -373.76144409]
[58.69354630 -383.61453247]
[54.38596344 -397.98272705]
[43.39025497 -404.80535889]
[40.12156296 -416.91049194]
[45.81284714 -427.63040161]
[41.80510712 -442.08511353]
[37.79736710 -456.53979492]
[33.78962708 -470.99447632]
[23.73115349 -484.64230347]
[34.06116486 -498.08578491]
[49.83890152 -491.88101196]
[48.24431610 -475.00222778]
[52.25205612 -460.54751587]
[56.25979614 -446.09283447]
[60.26753616 -431.63815308]
[73.42773438 -420.07055664]
[68.75414276 -402.29031372]
[73.06172943 -387.92211914]
[88.69571686 -383.01458740]
[98.44037628 -369.63522339]
[98.31248474 -352.91799927]
[88.16501617 -339.42425537]
[92.77057648 -325.14880371]
[97.37614441 -310.87335205]
[101.98170471 -296.59786987]
[106.58727264 -282.32241821]
[113.83506775 -280.39382935]
[124.42324829 -291.01882935]
[128.33067322 -276.53668213]
[135.57846069 -274.60809326]
[146.66978455 -284.70675659]
[157.76109314 -294.80538940]
[168.85241699 -304.90405273]
[179.94372559 -315.00268555]
[184.40649414 -330.78292847]
[200.36822510 -334.54531860]
[211.40882874 -322.41943359]
[206.17071533 -306.87936401]
[190.04237366 -303.91137695]
[178.95106506 -293.81274414]
[167.85974121 -283.71408081]
[156.76843262 -273.61544800]
[145.67710876 -263.51678467]
[125.50592041 -256.40487671]
[109.15021515 -261.89794922]
[108.21459198 -246.92715454]
[107.27896118 -231.95635986]
[106.34333038 -216.98558044]
[115.62142181 -210.21743774]
[120.50380707 -199.68986511]
[119.65959930 -187.99537659]
[113.18430328 -178.07672119]
[102.60501862 -172.48641968]
[101.04743958 -157.56750488]
[110.59919739 -146.19650269]
[109.23211670 -131.04441833]
[97.24040222 -121.10276031]
[95.68282318 -106.18384552]
[94.12524414 -91.26493073]
[100.49913025 -77.80303192]
[91.37066650 -64.88088989]
[89.81308746 -49.96197891]
[88.25550842 -35.04306793]
[86.69792175 -20.12415504]
[93.07181549 -6.66225338]
[83.94334412 6.25988579]
[82.38576508 21.17879868]
[80.82818604 36.09770966]
[79.27060699 51.01662064]
[77.71302032 65.93553162]
[76.15544128 80.85444641]
[111.65313721 69.87973022]
[133.94729614 102.09980774]
[142.71350098 114.27164459]
[151.47970581 126.44348145]
[165.64265442 135.76268005]
[160.60835266 151.95193481]
[143.65814209 151.59600830]
[139.30787659 135.20968628]
[130.54167175 123.03785706]
[121.77545929 110.86602020]
[107.50000000 115.47158051]
[107.50000000 130.47158813]
[107.50000000 145.47158813]
[107.50000000 160.47158813]
[119.88497925 169.63229370]
[124.44773102 184.15931702]
[119.63842010 198.41886902]
[107.50000000 207.00936890]
[107.50000000 222.00936890]
[113.54634094 237.84849548]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 149]
[3 148]
[7 144]
[8 143]
[9 142]
[10 141]
[14 25]
[15 24]
[16 23]
[17 22]
[26 130]
[27 129]
[28 128]
[29 127]
[30 126]
[31 125]
[33 123]
[34 122]
[35 121]
[36 120]
[38 118]
[39 117]
[40 116]
[43 113]
[44 112]
[47 107]
[48 106]
[49 105]
[50 104]
[51 85]
[52 84]
[53 83]
[54 82]
[55 81]
[60 77]
[61 76]
[64 74]
[65 73]
[66 72]
[67 71]
[89 102]
[90 101]
[91 100]
[92 99]
[93 98]
[132 140]
[133 139]
[134 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
