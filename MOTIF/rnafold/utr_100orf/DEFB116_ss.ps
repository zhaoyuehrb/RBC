%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:32:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCAGUCAUGAAGCCCUGUUUAAUGACCAUUGCCAUCCUUAUGAUCCUGGCUCAAAAGACUCCAGGUGGCCUGUUCAGAUCCCACAAUGGCAAGAGCC\
) } def
/len { sequence length } bind def

/coor [
[19.25769615 218.20887756]
[12.51108074 220.83863831]
[5.35909081 221.86651611]
[-1.82406390 221.24583435]
[-8.66415882 219.01605225]
[-14.80645275 215.30018616]
[-19.93408012 210.29823303]
[-33.43412018 216.83648682]
[-46.93416214 223.37475586]
[-60.43420029 229.91302490]
[-73.93424225 236.45129395]
[-82.98186493 249.43016052]
[-97.80901337 248.01419067]
[-111.30905151 254.55245972]
[-124.80908966 261.09072876]
[-138.30912781 267.62899780]
[-149.92887878 279.97473145]
[-165.00883484 272.22674561]
[-161.73815918 255.59126282]
[-144.84739685 254.12895203]
[-131.34735107 247.59068298]
[-117.84731293 241.05241394]
[-104.34727478 234.51416016]
[-96.26526642 222.00294495]
[-80.47250366 222.95124817]
[-66.97246552 216.41297913]
[-53.47242737 209.87472534]
[-39.97238541 203.33645630]
[-26.47234726 196.79818726]
[-22.36005783 173.08566284]
[-2.51029992 159.08233643]
[21.65271187 163.23780823]
[32.50384140 152.88150024]
[43.35497284 142.52520752]
[54.20610428 132.16889954]
[65.05723572 121.81259918]
[75.90836334 111.45629883]
[86.75949860 101.09999847]
[72.43218231 105.54164124]
[57.73477173 102.54396057]
[46.29134369 92.84612274]
[40.92361450 78.83943176]
[42.95515442 63.97764206]
[51.88503265 51.92536545]
[65.51131439 45.65445709]
[80.47405243 46.71118546]
[93.08371735 54.83498764]
[100.23104858 68.02269745]
[100.15394592 83.02131653]
[106.90137482 69.62459564]
[113.64879608 56.22787094]
[120.39622498 42.83114624]
[118.85175323 24.56473732]
[133.71977234 15.38631153]
[140.04730225 1.78622270]
[138.06570435 -14.49276161]
[151.33375549 -24.13075829]
[166.20240784 -17.21302414]
[167.37606812 -0.85592932]
[153.64738464 8.11374855]
[147.31985474 21.71383667]
[151.17643738 33.29592514]
[145.87240601 44.73672104]
[133.79295349 49.57857132]
[127.04552460 62.97529602]
[120.29809570 76.37202454]
[113.55067444 89.76874542]
[120.71147156 102.94915009]
[135.62266541 104.57892609]
[150.53385925 106.20870972]
[165.44506836 107.83849335]
[183.32351685 98.78613281]
[198.59498596 110.47352600]
[213.57865906 111.17312622]
[227.89138794 103.16826630]
[241.83978271 111.79233551]
[241.07492065 128.17364502]
[226.38363647 135.46049500]
[212.87905884 126.15680695]
[197.89538574 125.45719910]
[190.82170105 133.12786865]
[180.45530701 135.59613037]
[170.26826477 131.78102112]
[163.81527710 122.74969482]
[148.90408325 121.11991119]
[133.99288940 119.49012756]
[119.08168793 117.86034393]
[105.50975800 118.40836334]
[97.11579895 111.95113373]
[86.26466370 122.30743408]
[75.41353607 132.66372681]
[64.56240082 143.02003479]
[53.71127319 153.37632751]
[42.86014175 163.73263550]
[32.00901031 174.08892822]
[34.89426422 180.84886169]
[36.16745377 188.07185364]
[35.76909637 195.37980652]
[33.72702408 202.39175415]
[30.15457726 208.74377441]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 29]
[8 28]
[9 27]
[10 26]
[11 25]
[13 23]
[14 22]
[15 21]
[16 20]
[32 95]
[33 94]
[34 93]
[35 92]
[36 91]
[37 90]
[38 89]
[49 67]
[50 66]
[51 65]
[52 64]
[54 61]
[55 60]
[68 87]
[69 86]
[70 85]
[71 84]
[73 80]
[74 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
