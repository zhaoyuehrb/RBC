%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAGCGGCGCGCUGUGUCUUCCCGCAGUCUCUCGUCAUGGAAUACGCCUCUGACGCUUCACUGGACCCCGAAGCCCCGUGGCCUCCCGCGCCCCGCGCUCGCGCCUGCCGCGUACUGCCUUGGGCCCUGGUCGCGG\
) } def
/len { sequence length } bind def

/coor [
[141.62399292 279.74246216]
[129.37768555 272.95004272]
[120.63007355 261.95886230]
[116.73530579 248.41709900]
[118.31662750 234.37168884]
[125.16693878 221.95890808]
[116.02431488 210.06721497]
[106.88169098 198.17552185]
[97.60527039 186.38789368]
[88.19623566 174.70585632]
[78.78720093 163.02381897]
[69.37816620 151.34178162]
[59.96912766 139.65974426]
[45.13070297 137.46401978]
[32.74167252 145.92048645]
[20.35263824 154.37696838]
[7.96360540 162.83343506]
[-4.42542744 171.28990173]
[-7.10861444 186.86474609]
[-20.06700706 195.91215515]
[-35.61262131 193.06445312]
[-44.52252197 180.01113892]
[-41.51062012 164.49649048]
[-28.36382294 155.72509766]
[-12.88189602 158.90086365]
[-0.49286371 150.44439697]
[11.89616871 141.98793030]
[24.28520203 133.53146362]
[36.67423630 125.07498932]
[36.33533096 117.58264923]
[23.69717216 125.66207123]
[10.38107014 118.75689697]
[9.70298290 103.77223206]
[22.34099007 95.69258118]
[35.65752029 102.59797668]
[35.31861496 95.10563660]
[22.21670341 87.80221558]
[9.11479473 80.49878693]
[-3.98711419 73.19536591]
[-22.34733772 73.93451691]
[-30.82168770 58.60837936]
[-44.08530426 51.60291672]
[-59.11035919 56.50426865]
[-73.16241455 49.27134323]
[-77.90464020 34.19530869]
[-70.52355194 20.22050667]
[-55.39822006 15.63794041]
[-41.50223923 23.16636658]
[-37.07984161 38.33930206]
[-23.81622696 45.34476471]
[-12.11464119 42.07700729]
[-0.98253739 47.87440109]
[3.31630802 60.09346008]
[16.41821671 67.39688110]
[29.52012634 74.70030212]
[42.62203598 82.00372314]
[55.01106644 73.54725647]
[52.98317337 58.68496704]
[50.95527649 43.82267761]
[48.92737961 28.96038818]
[46.89948273 14.09809971]
[32.65203857 8.36173820]
[23.19420624 -3.73970842]
[21.07010078 -18.95101166]
[26.85109329 -33.18040848]
[38.98212433 -42.60025787]
[54.20001221 -44.67667389]
[68.41121674 -38.85110855]
[77.79299927 -26.69060898]
[79.82170105 -11.46628952]
[73.95162201 2.72658587]
[61.76177216 12.07020378]
[63.78966904 26.93249321]
[65.81756592 41.79478073]
[67.84545898 56.65707016]
[69.87335968 71.51936340]
[85.86581421 65.38551331]
[101.27052307 66.70416260]
[113.08936310 73.84092712]
[123.01667023 62.59598923]
[132.94396973 51.35105133]
[142.87127686 40.10611343]
[152.79858398 28.86117744]
[155.51878357 12.68920898]
[170.97668457 7.21329403]
[183.27050781 18.06658363]
[179.75343323 34.08414459]
[164.04351807 38.78848267]
[154.11621094 50.03342056]
[144.18891907 61.27835846]
[134.26161194 72.52329254]
[124.33430481 83.76823425]
[131.98793030 104.49950409]
[122.85836029 126.97107697]
[99.04176331 138.39428711]
[71.65116882 130.25070190]
[81.06020355 141.93273926]
[90.46923828 153.61479187]
[99.87827301 165.29682922]
[109.28730774 176.97886658]
[117.17680359 181.75155640]
[118.77338409 189.03289795]
[127.91600800 200.92459106]
[137.05863953 212.81628418]
[152.91462708 209.34782410]
[168.64437866 213.10789490]
[181.12777710 223.29881287]
[187.91128540 237.85243225]
[187.69000244 253.84977722]
[180.55847168 268.10644531]
[189.96749878 279.78848267]
[199.37654114 291.47052002]
[208.78556824 303.15255737]
[218.19461060 314.83459473]
[226.08410645 319.60726929]
[227.68067932 326.88864136]
[236.82330322 338.78033447]
[245.96592712 350.67202759]
[255.50637817 362.24697876]
[265.43368530 373.49191284]
[275.36099243 384.73684692]
[290.37637329 392.60928345]
[286.96829224 409.21713257]
[270.06600952 410.53976440]
[264.11605835 394.66415405]
[254.18875122 383.41921997]
[244.26144409 372.17428589]
[240.69924927 371.61505127]
[237.24615479 369.25051880]
[234.77192688 365.15887451]
[234.07423401 359.81463623]
[224.93161011 347.92294312]
[215.78898621 336.03125000]
[206.51257324 324.24362183]
[197.10353088 312.56158447]
[187.69450378 300.87954712]
[178.28546143 289.19750977]
[168.87643433 277.51547241]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 104]
[7 103]
[8 102]
[9 100]
[10 99]
[11 98]
[12 97]
[13 96]
[14 29]
[15 28]
[16 27]
[17 26]
[18 25]
[36 56]
[37 55]
[38 54]
[39 53]
[41 50]
[42 49]
[57 76]
[58 75]
[59 74]
[60 73]
[61 72]
[79 92]
[80 91]
[81 90]
[82 89]
[83 88]
[110 138]
[111 137]
[112 136]
[113 135]
[114 134]
[116 133]
[117 132]
[118 131]
[119 127]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
