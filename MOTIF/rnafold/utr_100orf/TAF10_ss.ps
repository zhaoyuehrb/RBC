%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:09:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGGCGCGAGCGGAAGCGGAAGCGGCUCUGUUCGCCGCCUCUCCCACCGGCCCGAUGAGCUGCAGCGGCUCCGGCGCGGACCCCGAGGCGGCGCCGGCCUCCGCCGCCUCGGCCCCGGGCCCCGCGCCCCCGGUCUCGGCUCCCGCCGCGCUGC\
) } def
/len { sequence length } bind def

/coor [
[80.65766144 405.28305054]
[83.23584747 386.07360840]
[83.53790283 371.07662964]
[83.83995819 356.07968140]
[84.14201355 341.08273315]
[84.44407654 326.08575439]
[84.74613190 311.08880615]
[85.04818726 296.09185791]
[85.35024261 281.09487915]
[82.32326508 274.30511475]
[85.81240845 265.79980469]
[86.41639709 250.81196594]
[87.02038574 235.82412720]
[87.62437439 220.83628845]
[80.40583038 207.80778503]
[88.69252777 194.33035278]
[89.29651642 179.34252930]
[89.90050507 164.35469055]
[82.68196106 151.32618713]
[90.96865845 137.84875488]
[91.57264709 122.86092377]
[80.97272491 115.21857452]
[75.84608459 103.19852448]
[61.09178925 100.49470520]
[46.33749008 97.79087830]
[31.58319092 95.08705139]
[16.82889175 92.38322449]
[2.07459331 89.67939758]
[-12.67970562 86.97557068]
[-21.71500969 99.22811127]
[-35.11948395 106.31379700]
[-50.20940781 106.87459564]
[-63.98978424 100.85278320]
[-73.74880219 89.49184418]
[-77.59144592 75.08005524]
[-92.34574890 72.37622833]
[-107.10004425 69.67240143]
[-121.85434723 66.96858215]
[-131.74435425 78.71946716]
[-146.19024658 83.93593597]
[-161.30616760 81.21478271]
[-173.02600098 71.28798676]
[-178.19715881 56.82580948]
[-175.42863464 41.71849823]
[-165.46516418 30.02984428]
[-150.98684692 24.90403748]
[-135.88827515 27.71989632]
[-124.23091888 37.71996689]
[-119.15052032 52.21427917]
[-104.39621735 54.91810608]
[-89.64192200 57.62193298]
[-74.88761902 60.32575607]
[-66.18419647 48.21312332]
[-53.03071213 41.05105591]
[-38.01047134 40.30715561]
[-24.10000992 46.18246460]
[-14.07922649 57.56099319]
[-9.97587967 72.22127533]
[4.77841902 74.92510223]
[19.53271675 77.62892914]
[34.28701782 80.33275604]
[49.04131317 83.03657532]
[63.79561234 85.74040222]
[78.54991150 88.44422913]
[95.77559662 72.71690369]
[121.46397400 77.83873749]
[131.41081238 66.61107635]
[141.35765076 55.38341904]
[151.30448914 44.15575790]
[152.03202820 39.74203873]
[153.96023560 36.17317200]
[156.66493225 33.72766113]
[159.67466736 32.51323700]
[162.53215027 32.46652222]
[173.35018921 22.07565880]
[184.16822815 11.68479347]
[188.76113892 -3.45508194]
[203.29988098 -6.69141340]
[214.11791992 -17.08227921]
[224.93595886 -27.47314453]
[223.65858459 -40.91592407]
[230.27635193 -52.46228027]
[242.16763306 -57.99037170]
[254.87733459 -55.67710876]
[265.90243530 -65.84802246]
[276.92752075 -76.01893616]
[287.95260620 -86.18985748]
[298.97769165 -96.36077118]
[310.00277710 -106.53168488]
[321.02786255 -116.70259857]
[332.05294800 -126.87351227]
[343.07800293 -137.04443359]
[354.10308838 -147.21534729]
[365.12817383 -157.38626099]
[363.18618774 -172.78132629]
[370.69354248 -186.36143494]
[384.76354980 -192.90472412]
[399.98599243 -189.89518738]
[410.50750732 -178.49005127]
[412.28237915 -163.07482910]
[404.62814331 -149.57696533]
[390.48797607 -143.18669128]
[375.29910278 -146.36117554]
[364.27401733 -136.19026184]
[353.24893188 -126.01934814]
[342.22384644 -115.84842682]
[331.19876099 -105.67751312]
[320.17367554 -95.50659943]
[309.14859009 -85.33568573]
[298.12350464 -75.16477203]
[287.09841919 -64.99385834]
[276.07333374 -54.82294083]
[265.04824829 -44.65202332]
[265.10671997 -27.86020279]
[252.77925110 -15.96761322]
[235.32682800 -16.65510750]
[224.50878906 -6.26424170]
[213.69075012 4.12662363]
[209.87162781 18.52327538]
[194.55909729 22.50283051]
[183.74105835 32.89369583]
[172.92301941 43.28456116]
[162.53215027 54.10259628]
[152.58531189 65.33026123]
[142.63847351 76.55792236]
[132.69163513 87.78558350]
[134.79917908 102.63678741]
[147.47702026 110.65377045]
[160.15487671 118.67076111]
[176.77351379 122.02593231]
[178.14996338 138.92390442]
[162.29341125 144.92439270]
[152.13789368 131.34861755]
[139.46003723 123.33162689]
[126.78218842 115.31463623]
[116.97042084 121.77654266]
[106.56048584 123.46491241]
[105.95649719 138.45274353]
[113.13184357 152.55328369]
[104.88834381 164.95867920]
[104.28435516 179.94651794]
[103.68036652 194.93435669]
[110.85571289 209.03488159]
[102.61221313 221.44027710]
[102.00822449 236.42811584]
[101.40423584 251.41595459]
[100.80024719 266.40377808]
[100.34719849 281.39694214]
[100.04514313 296.39389038]
[99.74308777 311.39086914]
[99.44103241 326.38781738]
[99.13897705 341.38476562]
[98.83692169 356.38174438]
[98.53486633 371.37869263]
[98.23281097 386.37564087]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[11 147]
[12 146]
[13 145]
[14 144]
[16 142]
[17 141]
[18 140]
[20 138]
[21 137]
[23 64]
[24 63]
[25 62]
[26 61]
[27 60]
[28 59]
[29 58]
[35 52]
[36 51]
[37 50]
[38 49]
[66 126]
[67 125]
[68 124]
[69 123]
[74 122]
[75 121]
[76 120]
[78 118]
[79 117]
[80 116]
[84 113]
[85 112]
[86 111]
[87 110]
[88 109]
[89 108]
[90 107]
[91 106]
[92 105]
[93 104]
[94 103]
[127 135]
[128 134]
[129 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
