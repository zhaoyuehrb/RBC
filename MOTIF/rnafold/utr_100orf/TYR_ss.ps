%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:18:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCACUGUAGUAGUAGCUGGAAAGAGAAAUCUGUGACUCCAAUUAGCCAGUUCCUGCAGACCUUGUGAGGACUAGAGGAAGAAUGCUCCUGGCUGUUUUGUACUGCCUGCUGUGGAGUUUCCAGACCUCCGCUGGCCAUUUCCCUAGAGCCUGUGUCUCCUCUAAGAACCUGAUGGAGAAGG\
) } def
/len { sequence length } bind def

/coor [
[201.69160461 345.35848999]
[189.20320129 337.04946899]
[187.73747253 322.12124634]
[198.37133789 311.54199219]
[213.29260254 313.08499146]
[206.12956238 299.90582275]
[193.25375366 292.41833496]
[193.46176147 276.59848022]
[186.29872131 263.41931152]
[179.13568115 250.24011230]
[161.95089722 241.40762329]
[162.71221924 221.27986145]
[155.10099792 208.35433960]
[147.48977661 195.42881775]
[134.36451721 188.38772583]
[134.02934265 172.57006836]
[126.41812134 159.64454651]
[118.80689240 146.71900940]
[111.19566345 133.79348755]
[103.58444214 120.86795807]
[91.00922394 119.16992188]
[81.66315460 110.58678436]
[78.90296936 98.20127869]
[83.72003174 86.46179962]
[76.33181763 73.40752411]
[68.94359589 60.35324478]
[58.28129959 58.04956055]
[50.81076050 50.40537643]
[48.83591461 40.12479782]
[52.77377319 30.66285515]
[45.83802795 17.36264992]
[38.90228271 4.06244564]
[31.96653748 -9.23775959]
[16.20828629 -18.74226189]
[17.61565208 -36.22410202]
[10.45261383 -49.40328217]
[3.28957510 -62.58246613]
[-3.87346315 -75.76165009]
[-11.03650188 -88.94083405]
[-18.19953918 -102.12001801]
[-25.36257744 -115.29920197]
[-32.17945099 -118.61867523]
[-35.97365952 -124.31046295]
[-36.29771042 -130.40458679]
[-46.58092499 -141.32499695]
[-56.86413956 -152.24542236]
[-67.14735413 -163.16583252]
[-77.43056488 -174.08625793]
[-87.71378326 -185.00666809]
[-97.99699402 -195.92709351]
[-109.00527954 -206.11619568]
[-120.68673706 -215.52593994]
[-132.36819458 -224.93569946]
[-144.04965210 -234.34545898]
[-155.73110962 -243.75521851]
[-171.23553467 -242.25492859]
[-182.94813538 -251.96417236]
[-184.28288269 -266.75451660]
[-195.96434021 -276.16424561]
[-211.56517029 -278.79580688]
[-216.62295532 -292.80538940]
[-228.30442810 -302.21514893]
[-239.98588562 -311.62487793]
[-256.26412964 -313.61254883]
[-262.43200684 -328.80758667]
[-252.14454651 -341.57864380]
[-235.98458862 -338.78796387]
[-230.57612610 -323.30633545]
[-218.89466858 -313.89660645]
[-207.21321106 -304.48684692]
[-192.44792175 -302.52832031]
[-186.55459595 -287.84570312]
[-174.87312317 -278.43597412]
[-160.13780212 -280.28137207]
[-148.15708923 -270.90496826]
[-146.32135010 -255.43667603]
[-134.63989258 -246.02691650]
[-122.95843506 -236.61715698]
[-111.27697754 -227.20739746]
[-99.59552002 -217.79765320]
[-101.98974609 -232.60533142]
[-95.34159851 -246.05160522]
[-82.12175751 -253.13934326]
[-67.24320221 -251.23448181]
[-56.23532104 -241.04495239]
[-53.18904495 -226.35752869]
[-59.23647308 -212.63059998]
[-72.13016510 -204.96557617]
[-87.07657623 -206.21029663]
[-76.79336548 -195.28988647]
[-66.51014709 -184.36946106]
[-56.22693634 -173.44905090]
[-45.94372177 -162.52864075]
[-35.66050720 -151.60821533]
[-25.37729454 -140.68780518]
[-28.68974686 -155.31748962]
[-27.20101357 -170.24342346]
[-21.06419945 -183.93063354]
[-10.91041660 -194.97149658]
[2.21611381 -202.23056030]
[16.96545029 -204.96133423]
[31.82076263 -202.88294983]
[45.25432205 -196.20915222]
[55.88460922 -185.62628174]
[62.61840439 -172.22270203]
[64.76319122 -157.37683105]
[62.09841156 -142.61543274]
[54.89810181 -129.45657349]
[43.90274811 -119.25352478]
[30.24312210 -113.05557251]
[15.32398891 -111.50011444]
[0.67963958 -114.74711609]
[-12.18339443 -122.46224213]
[-5.02035618 -109.28305817]
[2.14268231 -96.10387421]
[9.30572033 -82.92469025]
[16.46875954 -69.74550629]
[23.63179779 -56.56632233]
[30.79483604 -43.38713837]
[42.31538010 -39.64800262]
[48.38561249 -28.70567894]
[45.26674271 -16.17350388]
[52.20248795 -2.87329888]
[59.13823318 10.42690563]
[66.07397461 23.72710991]
[83.10460663 32.85329819]
[81.99787140 52.96502304]
[89.38609314 66.01930237]
[96.77431488 79.07357788]
[112.76589203 83.10763550]
[121.01216125 97.39059448]
[116.50996399 113.25673676]
[124.12119293 126.18225861]
[131.73242188 139.10778809]
[139.34364319 152.03330994]
[146.95487976 164.95884705]
[160.62452698 172.92445374]
[160.41529846 187.81758118]
[168.02651978 200.74311829]
[175.63775635 213.66864014]
[186.33801270 215.78895569]
[193.93867493 223.30377197]
[196.08972168 233.54893494]
[192.31486511 243.07707214]
[199.47790527 256.25625610]
[206.64094543 269.43545532]
[220.02909851 277.86560059]
[219.30874634 292.74276733]
[226.47178650 305.92196655]
[234.19367981 318.78167725]
[242.46020508 331.29824829]
[250.72673035 343.81481934]
[255.44229126 346.16693115]
[258.46630859 349.74307251]
[259.61587524 353.68707275]
[259.07717896 357.19540405]
[266.68841553 370.12091064]
[274.29965210 383.04644775]
[281.91085815 395.97198486]
[289.52209473 408.89749146]
[297.24398804 421.75723267]
[305.07598877 434.55017090]
[320.50155640 434.78442383]
[333.33908081 443.34020996]
[339.49215698 457.48739624]
[336.99734497 472.71170044]
[326.65072632 484.15509033]
[311.75387573 488.16601562]
[297.06033325 483.46459961]
[287.25875854 471.55108643]
[285.47677612 456.22698975]
[292.28302002 442.38217163]
[284.45101929 429.58920288]
[278.26162720 425.51602173]
[276.59655762 416.50872803]
[268.98535156 403.58319092]
[261.37411499 390.65768433]
[253.76289368 377.73214722]
[246.15165710 364.80661011]
[238.21015930 352.08135986]
[229.94363403 339.56478882]
[221.67710876 327.04821777]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 149]
[6 148]
[8 146]
[9 145]
[10 144]
[12 140]
[13 139]
[14 138]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[24 129]
[25 128]
[26 127]
[30 125]
[31 124]
[32 123]
[33 122]
[35 119]
[36 118]
[37 117]
[38 116]
[39 115]
[40 114]
[41 113]
[44 95]
[45 94]
[46 93]
[47 92]
[48 91]
[49 90]
[50 89]
[51 80]
[52 79]
[53 78]
[54 77]
[55 76]
[58 73]
[59 72]
[61 70]
[62 69]
[63 68]
[150 182]
[151 181]
[152 180]
[156 179]
[157 178]
[158 177]
[159 176]
[160 175]
[161 173]
[162 172]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
