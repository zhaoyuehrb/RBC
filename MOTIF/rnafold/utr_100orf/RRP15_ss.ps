%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGUCAGGUGACGCUUCCGGCGCAGAAAAAUGGCAGCCGCCGCUCCGGACUCACGUGUGAGUGAGGAAGAAAACCUGAAAAAGACCCCAAAGAAGAAGAUGAAAAUGGUAACUGGAGCCGUAGCGUCGG\
) } def
/len { sequence length } bind def

/coor [
[77.03556061 246.70582581]
[66.96669006 257.88983154]
[52.41710281 260.96353149]
[46.46979141 274.73413086]
[40.52248001 288.50473022]
[34.57516479 302.27532959]
[37.00817871 318.49298096]
[24.01296806 328.49581909]
[8.95789337 321.99374390]
[7.33032417 305.67556763]
[20.80456543 296.32800293]
[26.75187683 282.55740356]
[32.69918823 268.78680420]
[38.64650345 255.01620483]
[30.90897751 242.31704712]
[32.14756775 227.31938171]
[42.09614182 215.79205322]
[57.09815598 212.29264832]
[63.04546738 198.52204895]
[68.99278259 184.75144958]
[74.94009399 170.98085022]
[80.88740540 157.21023560]
[86.83471680 143.43963623]
[92.78202820 129.66903687]
[89.40116119 122.97428894]
[77.57992554 132.20782471]
[67.61764526 143.42179871]
[52.74296570 141.48686218]
[45.98114777 128.09739685]
[53.25328445 114.97810364]
[68.19159698 113.61717987]
[82.63942719 109.58477783]
[79.25856018 102.89002228]
[64.64616394 99.50212860]
[50.03376389 96.11423492]
[34.51296997 101.40924072]
[22.34674263 90.41310883]
[26.05064774 74.43771362]
[41.81443024 69.91717529]
[53.42165756 81.50183868]
[68.03405762 84.88973236]
[82.64645386 88.27762604]
[96.97751617 83.84811401]
[107.12977600 72.80584717]
[117.28203583 61.76358032]
[127.43428802 50.72130966]
[137.58654785 39.67904282]
[147.73880005 28.63677406]
[157.89105225 17.59450722]
[153.14859009 -4.36003208]
[169.63427734 -24.01616478]
[164.69221497 -38.17865372]
[159.75016785 -52.34114075]
[154.80810547 -66.50362396]
[149.86604309 -80.66611481]
[135.52560425 -87.30895233]
[130.16108704 -102.17493439]
[136.95516968 -116.44434357]
[151.87702942 -121.65139008]
[166.07380676 -114.70682526]
[171.12280273 -99.73073578]
[164.02853394 -85.60817719]
[168.97059631 -71.44568634]
[173.91264343 -57.28319931]
[178.85470581 -43.12070847]
[183.79676819 -28.95822144]
[179.83609009 -43.42587662]
[185.56022644 -57.29073715]
[198.57369995 -64.75057983]
[213.43060303 -62.68358612]
[223.91355896 -51.95475769]
[225.63560486 -37.05393219]
[217.87611389 -24.21686935]
[203.88102722 -18.81561852]
[218.21209717 -23.24512863]
[232.54315186 -27.67464066]
[230.89665222 -42.63076019]
[232.11062622 -57.62818527]
[236.14120483 -72.12477112]
[242.84268188 -85.59646606]
[251.97280884 -97.55628967]
[263.20153809 -107.57189178]
[276.12292480 -115.28121948]
[290.26992798 -120.40558624]
[305.13110352 -122.75975037]
[320.16921997 -122.25859833]
[334.84069824 -118.92026520]
[348.61514282 -112.86541748]
[360.99462891 -104.31293488]
[371.53161621 -93.57198334]
[379.84524536 -81.03084564]
[385.63497925 -67.14288330]
[388.69149780 -52.41011810]
[388.90429688 -37.36514664]
[386.26571655 -22.55182838]
[380.87112427 -8.50565624]
[372.91555786 4.26560926]
[362.68655396 15.30029392]
[350.55392456 24.19950104]
[336.95626831 30.64153290]
[322.38507080 34.39350891]
[307.36715698 35.31980133]
[292.44534302 33.38692474]
[278.15905762 28.66474915]
[265.02478027 21.32398033]
[253.51725769 11.62998199]
[244.05250549 -0.06681355]
[236.97267151 -13.34357452]
[222.64160156 -8.91406345]
[208.31053162 -4.48455238]
[204.89236450 18.22432709]
[187.90658569 30.71378326]
[168.93333435 27.74676323]
[158.78106689 38.78903198]
[148.62881470 49.83129883]
[138.47656250 60.87356949]
[128.32429504 71.91583252]
[118.17204285 82.95810699]
[108.01978302 94.00037384]
[114.83224487 96.43220520]
[120.19898224 103.47081757]
[121.57679749 114.02558899]
[117.18585968 125.76936340]
[106.55263519 135.61634827]
[100.60531616 149.38694763]
[94.65800476 163.15756226]
[88.71069336 176.92816162]
[82.76338196 190.69876099]
[76.81607056 204.46936035]
[70.86875916 218.23995972]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 14]
[4 13]
[5 12]
[6 11]
[18 130]
[19 129]
[20 128]
[21 127]
[22 126]
[23 125]
[24 124]
[33 42]
[34 41]
[35 40]
[43 119]
[44 118]
[45 117]
[46 116]
[47 115]
[48 114]
[49 113]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[74 110]
[75 109]
[76 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
