%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGGCUGGCCAACCAGACCCUGGGUGGUGACUUUUUCCUGUUGGGAAUCUUCAGCCAGAUCUCACACCCUGGCCGCCUCUGCUUGCUUAUCUUCAGUA\
) } def
/len { sequence length } bind def

/coor [
[249.12730408 373.03759766]
[256.13610840 359.69692993]
[266.03302002 348.33261108]
[257.29190063 336.14273071]
[248.55079651 323.95288086]
[239.80967712 311.76300049]
[231.06855774 299.57315063]
[222.32745361 287.38327026]
[213.58633423 275.19338989]
[204.84521484 263.00354004]
[190.32434082 266.47824097]
[175.53936768 264.12240601]
[162.74819946 256.26422119]
[153.91630554 244.07467651]
[150.41473389 229.39295959]
[152.80737305 214.44912720]
[160.76037598 201.52528381]
[152.01925659 189.33541870]
[143.27815247 177.14555359]
[131.29470825 174.81852722]
[123.93215179 164.58049011]
[125.64505768 151.67999268]
[117.28726959 139.22416687]
[108.92948914 126.76834869]
[100.57170105 114.31253052]
[88.10556793 107.98109436]
[86.97247314 94.04524994]
[78.61469269 81.58943176]
[70.25690460 69.13361359]
[56.14268875 61.98522949]
[55.47619629 47.10554123]
[47.11841202 34.64972305]
[42.09851456 32.21088028]
[38.94746780 28.40873337]
[37.87085342 24.23793411]
[38.62608719 20.62066269]
[31.46529007 7.44026089]
[24.30449104 -5.74014044]
[17.14369392 -18.92054176]
[9.98289585 -32.10094070]
[-4.27687883 -40.19976044]
[-4.12239504 -56.59818268]
[10.28742790 -64.42691040]
[24.12899971 -55.63243103]
[23.16329575 -39.26174164]
[30.32409477 -26.08133888]
[37.48489380 -12.90093803]
[44.64569092 0.27946267]
[51.80648804 13.45986366]
[59.57423401 26.29193878]
[67.93201447 38.74775696]
[81.44843292 45.00521851]
[82.71273041 60.77582932]
[91.07051086 73.23165131]
[99.42829895 85.68746948]
[111.89443207 92.01890564]
[113.02752686 105.95475006]
[121.38530731 118.41056824]
[129.74308777 130.86639404]
[138.10087585 143.32220459]
[154.77221680 150.94541931]
[155.46801758 168.40443420]
[164.20912170 180.59429932]
[172.95024109 192.78417969]
[187.74243164 189.39788818]
[202.66392517 191.92608643]
[215.44615173 199.95283508]
[224.15783691 212.22857666]
[227.49687195 226.86468506]
[224.98478699 241.62391663]
[217.03507996 254.26242065]
[225.77619934 266.45227051]
[234.51731873 278.64215088]
[243.25843811 290.83203125]
[251.99954224 303.02188110]
[260.74066162 315.21176147]
[269.48178101 327.40164185]
[278.22290039 339.59149170]
[292.16165161 333.86373901]
[307.04571533 331.50543213]
[322.07238770 332.64382935]
[336.43130493 337.21749878]
[349.34808350 344.97979736]
[360.12619019 355.51211548]
[368.18432617 368.24642944]
[373.08795166 382.49603271]
[374.57260132 397.49246216]
[372.55822754 412.42694092]
[367.15344238 426.49411011]
[358.64974976 438.93533325]
[347.50573730 449.07965088]
[334.32235718 456.38003540]
[319.81060791 460.44274902]
[304.75305176 461.04870605]
[289.96176147 458.16522217]
[276.23440552 451.94781494]
[264.31124878 442.73175049]
[254.83535767 431.01409912]
[248.31768799 417.42672729]
[245.10975647 402.70239258]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 78]
[4 77]
[5 76]
[6 75]
[7 74]
[8 73]
[9 72]
[10 71]
[17 64]
[18 63]
[19 62]
[22 60]
[23 59]
[24 58]
[25 57]
[27 55]
[28 54]
[29 53]
[31 51]
[32 50]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
