%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:18:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACCGGAAGGGGUGGGCUUUGCGAAGAUGGCGGCGCUGGGGGUGCUGGAGUCCGACCUGCCAAGUGCCGUGACACUUCUGAAAAAUCUCCAGGAGCAAGUGAUGGCUGUAACUGCACAAGUGAAAU\
) } def
/len { sequence length } bind def

/coor [
[80.86666870 150.65849304]
[73.38078308 151.11839294]
[67.30216217 164.83154297]
[61.22354126 178.54469299]
[55.14492035 192.25782776]
[61.06592941 206.91107178]
[54.81449509 221.42640686]
[40.09947968 227.19215393]
[25.65104675 220.78761292]
[20.04118919 206.01246643]
[26.59814072 191.63253784]
[41.43177414 186.17921448]
[47.51039505 172.46606445]
[53.58901596 158.75291443]
[59.66763306 145.03977966]
[53.75775528 131.25306702]
[39.63459396 126.19972229]
[25.51143265 121.14636993]
[13.78215790 130.96325684]
[-1.18719184 133.57389832]
[-15.35921001 128.37579346]
[-24.96229362 116.85898590]
[-27.49430466 102.18061829]
[-41.61746597 97.12726593]
[-48.34966278 97.95471191]
[-53.64613342 95.55050659]
[-56.29926300 91.46387482]
[-70.15745544 85.72362518]
[-84.01564789 79.98336792]
[-98.47048187 85.78816223]
[-112.44288635 79.76931763]
[-117.88778687 65.95307159]
[-131.74598694 60.21282196]
[-145.60417175 54.47256851]
[-159.46237183 48.73231888]
[-173.32055664 42.99206543]
[-187.17875671 37.25181580]
[-201.03694153 31.51156235]
[-217.98422241 31.03627968]
[-222.21899414 14.61973000]
[-207.61630249 6.00590754]
[-195.29669189 17.65336990]
[-181.43850708 23.39362144]
[-167.58030701 29.13387299]
[-153.72210693 34.87412643]
[-139.86392212 40.61437607]
[-126.00572968 46.35462952]
[-112.14753723 52.09487915]
[-98.52784729 46.17544556]
[-84.39189911 51.79946136]
[-78.27539825 66.12517548]
[-64.41720581 71.86543274]
[-50.55900955 77.60568237]
[-36.56411743 83.00410461]
[-22.44095612 88.05745697]
[-11.17182732 78.31721497]
[3.55763936 75.50673676]
[17.81040001 80.47917938]
[27.72569847 91.99367523]
[30.56477928 107.02320862]
[44.68794250 112.07656097]
[58.81110001 117.12990570]
[58.59162521 92.58495331]
[71.03985596 73.10118866]
[90.81564331 64.17533875]
[110.84567261 67.31093597]
[124.82169342 79.96365356]
[138.38153076 73.55033112]
[151.94137573 67.13700104]
[165.50120544 60.72367477]
[179.06105042 54.31034851]
[188.22813416 41.41557693]
[203.04158020 42.96840668]
[216.60140991 36.55508041]
[227.18704224 19.48193169]
[246.34092712 21.63138962]
[259.56976318 14.56043911]
[272.79855347 7.48948765]
[286.02737427 0.41853678]
[299.25619507 -6.65241432]
[312.48501587 -13.72336578]
[313.62036133 -29.10889626]
[322.91177368 -41.42446518]
[337.39440918 -46.74021912]
[352.44686890 -43.35992432]
[363.26602173 -32.36221313]
[366.39947510 -17.25642395]
[360.84738159 -2.86275148]
[348.38137817 6.22583151]
[332.97933960 7.10919237]
[319.55596924 -0.49454635]
[306.32714844 6.57640457]
[293.09832764 13.64735603]
[279.86950684 20.71830750]
[266.64068604 27.78925705]
[253.41188049 34.86021042]
[251.29336548 44.98801422]
[243.75244141 52.39173508]
[233.15348816 54.40677643]
[223.01473999 50.11491776]
[209.45491028 56.52824402]
[201.25770569 68.96429443]
[185.47438049 67.87018585]
[171.91453552 74.28351593]
[158.35470581 80.69683838]
[144.79486084 87.11016846]
[131.23501587 93.52349091]
[134.34106445 102.62584686]
[134.65036011 112.92714691]
[131.75369263 123.53591156]
[125.53147888 133.43321228]
[116.19025421 141.56723022]
[123.90179443 154.43316650]
[131.61334229 167.29908752]
[146.76359558 172.57632446]
[151.94757080 187.75874329]
[143.18855286 201.19970703]
[127.20572662 202.58843994]
[116.25972748 190.85963440]
[118.74740601 175.01063538]
[111.03586578 162.14469910]
[103.32432556 149.27877808]
[95.83843994 149.73867798]
[96.75824738 164.71044922]
[102.25939941 178.66528320]
[90.68739319 188.20932007]
[78.03462982 180.15280151]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[16 62]
[17 61]
[18 60]
[23 55]
[24 54]
[27 53]
[28 52]
[29 51]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
[38 42]
[67 107]
[68 106]
[69 105]
[70 104]
[71 103]
[73 101]
[74 100]
[76 96]
[77 95]
[78 94]
[79 93]
[80 92]
[81 91]
[112 122]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
