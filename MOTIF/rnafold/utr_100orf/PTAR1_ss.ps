%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:21:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUGUCGCGGCCGCCGCCAACAUGGCCGAGACCAGCGAGGAGGUGGCGGUGCUGGUGCAGCGGGUUGUGAAGGACAUCACUAACGCCUUCAGGAGGAACCCACACAUAGAUGAAAUUGGCC\
) } def
/len { sequence length } bind def

/coor [
[112.03749084 187.82614136]
[108.58480835 202.79191589]
[98.10007477 214.01536560]
[83.40363312 218.47744751]
[68.44874573 214.97787476]
[57.25821304 204.45800781]
[52.84222412 189.74765015]
[56.38866425 174.80381775]
[66.94355011 163.64630127]
[81.66767883 159.27644348]
[85.08547974 144.67102051]
[88.50328064 130.06558228]
[91.92108917 115.46015930]
[84.92415619 102.19203949]
[70.94114685 96.76290894]
[56.82404709 91.69264984]
[42.58206177 86.98458862]
[28.34008026 82.27651978]
[14.09809589 77.56845093]
[-0.14388743 72.86038208]
[-15.67519188 75.87520599]
[-25.33078194 64.53417969]
[-39.57276535 59.82611084]
[-53.81475067 55.11804199]
[-69.34605408 58.13286591]
[-79.00164795 46.79184341]
[-93.24362946 42.08377457]
[-107.48561096 37.37570572]
[-121.72759247 32.66763687]
[-134.31265259 41.55146790]
[-149.53768921 41.32402420]
[-161.56713867 32.28208923]
[-165.91362000 18.06076622]
[-180.15560913 13.35269928]
[-195.07563782 19.24949074]
[-208.91612244 11.13649464]
[-211.05981445 -4.76269245]
[-199.86225891 -16.25157356]
[-183.91326904 -14.51686478]
[-175.44754028 -0.88928461]
[-161.20555115 3.81878352]
[-149.23925781 -5.00991344]
[-134.19081116 -5.10052824]
[-121.83001709 3.79126406]
[-117.01952362 18.42565536]
[-102.77754211 23.13372231]
[-88.53556061 27.84179115]
[-74.29357910 32.54985809]
[-59.78095245 29.19828224]
[-49.10668182 40.87606049]
[-34.86469650 45.58412933]
[-20.62271500 50.29219437]
[-6.11009216 46.94062042]
[4.56418085 58.61839676]
[18.80616379 63.32646561]
[33.04814911 68.03453064]
[47.29013062 72.74259949]
[61.53211594 77.45066833]
[66.21949005 76.08460236]
[71.81219482 77.73278046]
[76.37027740 82.77989960]
[90.35328674 88.20903015]
[105.32271576 87.25187683]
[118.50040436 80.08608246]
[131.67808533 72.92028046]
[144.47268677 65.09097290]
[156.85083008 56.61857224]
[163.86863708 42.43897629]
[178.74154663 41.63516998]
[191.11968994 33.16277313]
[203.49783325 24.69037628]
[215.87597656 16.21797752]
[228.25411987 7.74558067]
[240.63226318 -0.72681695]
[238.27896118 -15.80742550]
[242.71017456 -30.41315079]
[253.04605103 -41.64401627]
[267.23440552 -47.27012253]
[282.45816040 -46.17440796]
[295.69458008 -38.57442093]
[304.31558228 -25.97915077]
[306.60946655 -10.88939095]
[302.12078857 3.69877100]
[291.74078369 14.88884640]
[277.53036499 20.45903778]
[262.31106567 19.30337906]
[249.10466003 11.65132809]
[236.72651672 20.12372589]
[224.34837341 28.59612274]
[211.97023010 37.06851959]
[199.59208679 45.54091644]
[187.21394348 54.01331711]
[181.08149719 67.58691406]
[165.32322693 68.99671936]
[152.94508362 77.46911621]
[152.33946228 80.32019806]
[150.50112915 83.08670044]
[147.46263123 85.27182007]
[143.44525146 86.40258026]
[138.84388733 86.09796906]
[125.66619873 93.26376343]
[112.48851776 100.42955780]
[127.48848724 100.45870209]
[140.92565918 93.79218292]
[155.84721375 92.26011658]
[170.35871887 96.05699921]
[182.61778259 104.70079041]
[191.06802368 117.09407043]
[194.63659668 131.66340637]
[192.87042236 146.55905151]
[185.99374390 159.88989258]
[174.87962341 169.96343994]
[160.93910217 175.50076294]
[145.94207764 175.79884338]
[131.79252625 170.81982422]
[120.28691864 161.19586182]
[112.88596344 148.14878845]
[110.52932739 133.33401489]
[106.52651978 118.87796021]
[103.10871124 133.48338318]
[99.69091034 148.08882141]
[96.27310944 162.69425964]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 122]
[11 121]
[12 120]
[13 119]
[14 62]
[15 61]
[16 58]
[17 57]
[18 56]
[19 55]
[20 54]
[22 52]
[23 51]
[24 50]
[26 48]
[27 47]
[28 46]
[29 45]
[33 41]
[34 40]
[63 102]
[64 101]
[65 100]
[66 95]
[67 94]
[69 92]
[70 91]
[71 90]
[72 89]
[73 88]
[74 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
