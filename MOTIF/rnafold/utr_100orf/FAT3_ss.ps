%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:45:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGGAAGUAUGAUGUGAUGGAUAUAAUUAUGGGACACUGUGUGGGCACACGGCCUCCUGCUUGUUGCCUCAUCCUCCUGCUUUUCAAGCUUUUGGCCACUGUCUCCCAGGGGCUGC\
) } def
/len { sequence length } bind def

/coor [
[247.37315369 285.66967773]
[243.04138184 276.79699707]
[242.30873108 266.89193726]
[245.32322693 257.36700439]
[234.85874939 246.62014771]
[224.39428711 235.87329102]
[213.92980957 225.12644958]
[203.46533203 214.37959290]
[193.00085449 203.63273621]
[182.53639221 192.88589478]
[168.11399841 189.16513062]
[164.03001404 173.88012695]
[153.56553650 163.13327026]
[136.48458862 159.35383606]
[131.96278381 141.56497192]
[121.21592712 131.10050964]
[110.46907806 120.63603210]
[99.72222900 110.17156219]
[92.10887146 107.20050812]
[88.83325195 99.28257751]
[78.36877441 88.53572845]
[62.79648209 88.15971375]
[52.33710861 77.11180115]
[52.79155350 62.26831818]
[42.32707977 51.52146912]
[31.86260796 40.77461624]
[21.39813423 30.02776527]
[10.37018299 30.50554848]
[1.12695205 24.88662910]
[-3.33885169 15.27779102]
[-1.74232149 5.02665663]
[-11.61999226 -6.26190472]
[-21.49766350 -17.55046654]
[-31.37533379 -28.83902740]
[-41.25300598 -40.12759018]
[-56.78321457 -41.33186722]
[-66.63977051 -52.92078400]
[-65.39596558 -67.71904755]
[-75.27363586 -79.00760651]
[-85.15130615 -90.29616547]
[-95.02897644 -101.58473206]
[-104.90664673 -112.87329102]
[-114.78431702 -124.16185760]
[-130.47335815 -128.93534851]
[-133.91983032 -144.96824646]
[-121.57830811 -155.76727295]
[-106.14469147 -150.22331238]
[-103.49575806 -134.03952026]
[-93.61808777 -122.75096130]
[-83.74041748 -111.46240234]
[-73.86274719 -100.17384338]
[-63.98507690 -88.88527679]
[-54.10740662 -77.59671783]
[-39.27498245 -76.86540985]
[-29.09680939 -65.55791473]
[-29.96444321 -50.00526047]
[-20.08677101 -38.71669769]
[-10.20910168 -27.42813683]
[-0.33143058 -16.13957596]
[9.54623985 -4.85101414]
[28.21701431 -0.12175081]
[32.14498520 19.56329346]
[42.60945892 30.31014442]
[53.07393265 41.05699539]
[63.53840256 51.80384445]
[78.38872528 51.74470520]
[89.15428162 62.49446869]
[89.11562347 78.07125854]
[99.58010101 88.81810760]
[110.18669891 99.42470551]
[120.93355560 109.88918304]
[131.68040466 120.35365295]
[142.42726135 130.81813049]
[155.39378357 131.44844055]
[164.13613892 140.49333191]
[164.31237793 152.66879272]
[174.77685547 163.41564941]
[189.94773865 167.90509033]
[193.28323364 182.42141724]
[203.74771118 193.16827393]
[214.21218872 203.91511536]
[224.67665100 214.66197205]
[235.14112854 225.40881348]
[245.60560608 236.15567017]
[256.07006836 246.90252686]
[276.93099976 245.62348938]
[291.93981934 259.75338745]
[291.92083740 280.08035278]
[303.46835327 289.65402222]
[315.01583862 299.22766113]
[326.56335449 308.80133057]
[338.11087036 318.37500000]
[349.65838623 327.94866943]
[361.20590210 337.52233887]
[372.75338745 347.09597778]
[384.30090332 356.66964722]
[398.67413330 351.25613403]
[413.82583618 353.77035522]
[425.68029785 363.53594971]
[431.04873657 377.92608643]
[428.48706055 393.06982422]
[418.68432617 404.89364624]
[404.27743530 410.21691895]
[389.14178467 407.60778809]
[377.34878540 397.76803589]
[372.07067871 383.34454346]
[374.72723389 368.21716309]
[363.17974854 358.64349365]
[351.63223267 349.06982422]
[340.08471680 339.49618530]
[328.53720093 329.92251587]
[316.98968506 320.34884644]
[305.44219971 310.77517700]
[293.89468384 301.20150757]
[282.34716797 291.62786865]
[273.48638916 295.42398071]
[263.79107666 295.66073608]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 85]
[5 84]
[6 83]
[7 82]
[8 81]
[9 80]
[10 79]
[12 77]
[13 76]
[15 73]
[16 72]
[17 71]
[18 70]
[20 69]
[21 68]
[24 65]
[25 64]
[26 63]
[27 62]
[31 60]
[32 59]
[33 58]
[34 57]
[35 56]
[38 53]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
[88 115]
[89 114]
[90 113]
[91 112]
[92 111]
[93 110]
[94 109]
[95 108]
[96 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
