%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGGACCCCGGCGACGCCGCCAUUUUGGAGUCUUCCCUAAGGAUCCUCUACCGGCUUUUCGAGUCAGUGCUGCCGCCGCUGCCCGCGGCUUUGCAGAGCA\
) } def
/len { sequence length } bind def

/coor [
[82.77998352 127.14461517]
[72.01129913 137.58662415]
[61.24262238 148.02862549]
[50.47394562 158.47064209]
[39.70526505 168.91264343]
[38.60366440 173.53219604]
[36.24216080 177.11363220]
[33.14107513 179.37528992]
[29.85851479 180.24925232]
[26.91170120 179.87350464]
[14.94144344 188.91302490]
[2.97118473 197.95254517]
[-8.99907398 206.99206543]
[-17.99524117 221.36235046]
[-34.29432297 216.69584656]
[-34.32222748 199.74192810]
[-18.03859329 195.02180481]
[-6.06833458 185.98228455]
[5.90192366 176.94276428]
[17.87218285 167.90324402]
[29.26325607 158.14396667]
[40.03193283 147.70196533]
[50.80061340 137.25994873]
[61.56929398 126.81793976]
[72.33797455 116.37593079]
[67.86934662 99.01006317]
[73.39855194 81.95222473]
[63.29312134 70.86709595]
[53.18768311 59.78195953]
[43.08224869 48.69682693]
[32.97681427 37.61169434]
[19.43507385 38.52949905]
[8.03289604 31.53389168]
[2.86953545 19.40576172]
[5.64651251 6.72032022]
[-4.11276197 -4.67075348]
[-13.87203598 -16.06182671]
[-29.51037598 -20.99886894]
[-32.78927231 -37.06687546]
[-20.33568001 -47.73646164]
[-4.96078539 -42.03166962]
[-2.48096251 -25.82110214]
[7.27831221 -14.43002796]
[17.03758621 -3.03895402]
[33.76834106 -2.51715016]
[45.23272705 10.13592148]
[44.06195068 27.50625801]
[54.16738510 38.59139252]
[64.27281952 49.67652512]
[74.37825012 60.76165771]
[84.48368835 71.84679413]
[92.68693542 68.69699860]
[101.43663025 67.88621521]
[110.07897949 69.47503662]
[117.97546387 56.72178268]
[125.87194061 43.96852493]
[133.76843262 31.21526909]
[141.66490173 18.46201134]
[144.86244202 1.81232238]
[161.74661255 0.27579620]
[167.89709473 16.07477951]
[154.41816711 26.35849380]
[146.52168274 39.11175156]
[138.62519836 51.86500931]
[130.72871399 64.61826324]
[122.83223724 77.37152100]
[130.91874695 91.20285797]
[131.32472229 107.21949768]
[144.75216675 113.90557098]
[160.55438232 113.13069153]
[168.49856567 125.72987366]
[181.92601013 132.41593933]
[195.35345459 139.10202026]
[208.78091431 145.78810120]
[228.68948364 143.48039246]
[238.97082520 159.73419189]
[252.78440857 165.58097839]
[266.59799194 171.42776489]
[280.41156006 177.27455139]
[294.22515869 183.12133789]
[309.57400513 178.45310974]
[322.71145630 187.66107178]
[323.55960083 203.68170166]
[311.46777344 214.22531128]
[295.71185303 211.20376587]
[288.37835693 196.93492126]
[274.56478882 191.08813477]
[260.75119019 185.24134827]
[246.93762207 179.39456177]
[233.12403870 173.54777527]
[223.83500671 178.29177856]
[213.25923157 177.01908875]
[205.02481079 169.91732788]
[202.09483337 159.21554565]
[188.66738892 152.52946472]
[175.23992920 145.84339905]
[161.81248474 139.15731812]
[146.97068787 140.41043091]
[138.06608582 127.33302307]
[124.63864136 120.64694214]
[112.33355713 129.68572998]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 22]
[5 21]
[10 20]
[11 19]
[12 18]
[13 17]
[27 51]
[28 50]
[29 49]
[30 48]
[31 47]
[35 44]
[36 43]
[37 42]
[54 66]
[55 65]
[56 64]
[57 63]
[58 62]
[68 100]
[69 99]
[71 97]
[72 96]
[73 95]
[74 94]
[76 90]
[77 89]
[78 88]
[79 87]
[80 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
