%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUCCGAGCCUCGCGUGGGCUCCUGGCCCCCGACGGACACCACCAGGCCCACGGAGCCCACCAUGCCGCGCCCGGCCCCCGCGCGCCGCCUCCCGGGACUCCUCCUGCUGCUCUGGCCGCUGCUGCUGCUGCCCUCCGCCGCCCCCGACCCCGUGGCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[153.67727661 238.16415405]
[149.59167480 223.73129272]
[151.93721008 208.91580200]
[160.28117371 196.45072937]
[173.08436584 188.63548279]
[187.98500061 186.91174316]
[202.23170471 191.59594727]
[191.22662354 181.40338135]
[180.22154236 171.21083069]
[169.21646118 161.01828003]
[159.02482605 162.32592773]
[149.60969543 157.68832397]
[144.21257019 148.43125916]
[144.83982849 137.51358032]
[134.23323059 126.90698242]
[72.54374695 123.08509064]
[57.58776093 124.23332977]
[42.63177490 125.38156891]
[27.67578697 126.52980804]
[12.71980000 127.67804718]
[-2.23618746 128.82627869]
[-17.19217491 129.97451782]
[-32.14816284 131.12275696]
[-47.10414886 132.27099609]
[-63.15560532 144.41514587]
[-80.24280548 135.42254639]
[-95.14382935 137.14279175]
[-110.04486084 138.86303711]
[-124.94589233 140.58329773]
[-128.94975281 152.91534424]
[-137.30255127 162.77075195]
[-148.72827148 168.69892883]
[-161.50221252 169.84500122]
[-173.71122742 166.07304382]
[-183.54032898 157.98095703]
[-189.54244995 146.80610657]
[-204.49844360 147.95434570]
[-219.82824707 155.19541931]
[-231.03005981 142.46922302]
[-221.90217590 128.18223572]
[-205.64668274 132.99836731]
[-190.69068909 131.85012817]
[-183.84861755 116.09247589]
[-169.91313171 105.89561462]
[-152.64732361 104.12412262]
[-136.77003479 111.35225677]
[-126.66614532 125.68225861]
[-111.76511383 123.96201324]
[-96.86408234 122.24176025]
[-81.96305084 120.52150726]
[-76.32199860 111.93325806]
[-66.67296600 107.80429840]
[-56.13236618 109.73247528]
[-48.25238800 117.31501770]
[-33.29640198 116.16677856]
[-18.34041405 115.01853943]
[-3.38442612 113.87030029]
[11.57156086 112.72206116]
[26.52754784 111.57382202]
[41.48353577 110.42558289]
[56.43952179 109.27734375]
[71.39550781 108.12910461]
[76.05561829 102.25259399]
[70.53702545 88.30464935]
[85.37583923 90.49957275]
[90.03594971 84.62306213]
[87.74620819 69.79885101]
[77.99299622 57.34150696]
[83.69681549 43.58230209]
[81.40707397 28.75809479]
[79.11733246 13.93388748]
[76.82759094 -0.89031881]
[67.07438660 -13.34766579]
[72.77819824 -27.10687256]
[70.48845673 -41.93107986]
[68.19872284 -56.75528717]
[59.80540848 -71.48581696]
[71.63677216 -83.62893677]
[86.58057404 -75.62149811]
[83.02292633 -59.04502487]
[85.31266785 -44.22081757]
[87.60240173 -29.39661217]
[97.19183350 -17.99959183]
[91.65180206 -3.18005800]
[93.94154358 11.64414787]
[96.23127747 26.46835518]
[98.52101898 41.29256058]
[108.11045074 52.68958282]
[102.57041168 67.50911713]
[104.86015320 82.33332062]
[112.03197479 84.52763367]
[111.77356720 69.52986145]
[125.95750427 64.64971161]
[134.98173523 76.63150024]
[126.37561035 88.91626740]
[133.54742432 91.11058044]
[143.73999023 80.10549927]
[153.93254089 69.10041809]
[164.12509155 58.09533691]
[167.23005676 41.99281311]
[182.81410217 36.88696289]
[194.84568787 48.03024673]
[190.94776917 63.95940781]
[175.13017273 68.28789520]
[164.93762207 79.29297638]
[154.74507141 90.29805756]
[144.55250549 101.30313873]
[144.83982849 116.30038452]
[155.44642639 126.90698242]
[175.11373901 131.18795776]
[179.40902710 150.01319885]
[190.41410828 160.20574951]
[201.41918945 170.39830017]
[212.42425537 180.59086609]
[222.71682739 165.38301086]
[245.54013062 159.39514160]
[260.49612427 160.54338074]
[275.45211792 161.69161987]
[289.80407715 155.03341675]
[301.90173340 163.72227478]
[316.85769653 164.87051392]
[327.66680908 153.57020569]
[343.21633911 151.91302490]
[356.16427612 160.68144226]
[360.39697266 175.73529053]
[353.91592407 189.96658325]
[339.78125000 196.65576172]
[324.66693115 192.64437866]
[315.70947266 179.82650757]
[300.75347900 178.67826843]
[287.47125244 185.41859436]
[274.30386353 176.64759827]
[259.34786987 175.49937439]
[244.39189148 174.35113525]
[240.62118530 180.83432007]
[253.58741760 188.37596130]
[246.04556274 201.34208679]
[233.07974243 193.80068970]
[229.30902100 200.28387451]
[237.70220947 212.71586609]
[246.09539795 225.14785767]
[254.48858643 237.57984924]
[262.88177490 250.01184082]
[278.19696045 248.85391235]
[292.03228760 255.52316284]
[300.66616821 268.22558594]
[301.77606201 283.54434204]
[295.06347656 297.35870361]
[282.33404541 305.95269775]
[267.01190186 307.01458740]
[253.21864319 300.25875854]
[244.66458130 287.50244141]
[243.65072632 272.17703247]
[250.44978333 258.40502930]
[242.05659485 245.97302246]
[233.66340637 233.54103088]
[225.27021790 221.10903931]
[216.87702942 208.67704773]
[219.33142090 223.47488403]
[215.35206604 237.93740845]
[205.67300415 249.39672852]
[192.07975769 255.73893738]
[177.07984924 255.79408264]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 114]
[8 113]
[9 112]
[10 111]
[14 109]
[15 108]
[16 62]
[17 61]
[18 60]
[19 59]
[20 58]
[21 57]
[22 56]
[23 55]
[24 54]
[26 50]
[27 49]
[28 48]
[29 47]
[36 42]
[37 41]
[66 90]
[67 89]
[69 87]
[70 86]
[71 85]
[72 84]
[74 82]
[75 81]
[76 80]
[96 107]
[97 106]
[98 105]
[99 104]
[116 134]
[117 133]
[118 132]
[120 130]
[121 129]
[139 158]
[140 157]
[141 156]
[142 155]
[143 154]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
