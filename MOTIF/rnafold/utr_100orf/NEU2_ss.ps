%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:45:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGUCCCUUCCUGUCCUGCAGAAGGAGAGCGUGUUCCAGUCGGGAGCCCAUGCCUACAGAAUCCCUGCCCUGCUCUACCUGCCUGGGCAGCAGUCCC\
) } def
/len { sequence length } bind def

/coor [
[85.57711029 191.64207458]
[82.21823120 175.95458984]
[92.50000000 163.63935852]
[92.50000000 148.63935852]
[92.50000000 133.63935852]
[82.15331268 130.79374695]
[72.87660980 124.74913788]
[65.66079712 115.90577698]
[61.34790802 104.97024536]
[47.65105820 111.08549500]
[33.95420837 117.20075226]
[20.25736046 123.31600952]
[6.56051111 129.43125916]
[-0.14352448 135.90029907]
[-7.65871239 135.51632690]
[-21.53911972 141.20265198]
[-35.41952515 146.88897705]
[-47.78433609 158.48844910]
[-62.35342026 149.81791687]
[-58.05485535 133.41795349]
[-41.10585403 133.00856018]
[-27.22544479 127.32224274]
[-13.34503841 121.63591766]
[0.44525704 115.73441315]
[14.14210606 109.61915588]
[27.83895493 103.50390625]
[41.53580475 97.38864899]
[55.23265076 91.27339172]
[60.48455048 77.22285461]
[54.15702438 63.62276840]
[47.58450317 57.02014923]
[47.85156250 49.49989700]
[41.95005798 35.70960236]
[36.04855347 21.91930771]
[30.14705086 8.12901211]
[23.81952477 -5.47107744]
[17.07209969 -18.86780167]
[10.32467461 -32.26452637]
[3.57724857 -45.66125107]
[-3.17017698 -59.05797958]
[-17.89271736 -65.43186188]
[-21.94952965 -80.95351410]
[-12.22857285 -93.71606445]
[3.81306458 -93.92916107]
[13.86961269 -81.42935181]
[10.22654819 -65.80540466]
[16.97397423 -52.40867996]
[23.72139931 -39.01195145]
[30.46882439 -25.61522865]
[37.21625137 -12.21850300]
[41.55478287 -9.85886955]
[44.36228943 -4.66005802]
[43.93734741 2.22750807]
[49.83885193 16.01780319]
[55.74035263 29.80809975]
[61.64185715 43.59839630]
[67.75711060 57.29524231]
[74.08464050 70.89533234]
[81.86972046 66.01366425]
[90.48518372 63.13887405]
[99.42936707 62.38549805]
[108.19364929 63.74605560]
[116.29144287 67.09426880]
[123.28511047 72.19493103]
[128.80966187 78.71979523]
[132.59165955 86.26831818]
[134.46250916 94.39208221]
[134.36546326 102.62134552]
[148.71533203 106.98956299]
[163.06520081 111.35778809]
[177.41506958 115.72600555]
[191.76492310 120.09423065]
[206.11479187 124.46244812]
[223.85160828 119.83078766]
[235.42723083 132.91918945]
[249.90600586 136.83901978]
[262.63452148 127.75502777]
[278.22009277 129.02954102]
[289.30364990 140.06077576]
[290.65194702 155.64013672]
[281.62829590 168.41149902]
[266.49340820 172.34463501]
[252.39353943 165.58242798]
[245.98619080 151.31779480]
[231.50740051 147.39796448]
[220.75096130 153.17002869]
[208.57418823 149.89114380]
[201.74656677 138.81231689]
[187.39671326 134.44409180]
[173.04684448 130.07586670]
[158.69697571 125.70764923]
[144.34710693 121.33943176]
[129.99723816 116.97120667]
[124.16703796 124.57256317]
[116.46973419 130.27548218]
[107.50000000 133.63935852]
[107.50000000 148.63935852]
[107.50000000 163.63935852]
[117.78176880 175.95458984]
[114.42288971 191.64207458]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 98]
[4 97]
[5 96]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[15 23]
[16 22]
[17 21]
[29 58]
[30 57]
[32 56]
[33 55]
[34 54]
[35 53]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[68 93]
[69 92]
[70 91]
[71 90]
[72 89]
[73 88]
[75 85]
[76 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
