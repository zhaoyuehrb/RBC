%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:39:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAGUGUCGAGCUUCUCCUCGCGAGAGACUUAGUGCUCAUGCUCGCUGCAGGGGUCGGAGGUCAGGGCGAGCGUCUCGCAGGCCGUAGGAGGAAGAUGGCGGUGGAGUCGCGCGUUACCCAGGAGGAAAUUAAGAAGG\
) } def
/len { sequence length } bind def

/coor [
[105.91756439 285.09219360]
[102.22275543 299.83724976]
[93.16249084 312.04296875]
[80.11839294 319.84811401]
[65.07959747 322.06240845]
[50.33941269 318.34820557]
[38.14560318 309.27188110]
[30.35763741 296.21755981]
[28.16312790 281.17584229]
[31.89671707 266.44055176]
[40.98906326 254.25869751]
[54.05364609 246.48791504]
[69.09821320 244.31320190]
[72.76332092 229.76785278]
[76.42842865 215.22250366]
[80.09352875 200.67716980]
[82.77188110 185.91822815]
[84.45135498 171.01254272]
[86.13082123 156.10685730]
[87.81028748 141.20117188]
[89.48975372 126.29548645]
[84.42044067 123.64730835]
[79.98662567 120.03454590]
[76.36917114 115.60455322]
[73.71563721 110.53804016]
[72.13425446 105.04167175]
[71.68954468 99.33965302]
[72.39962769 93.66457367]
[59.19069672 86.55654144]
[45.98176575 79.44850922]
[32.77283096 72.34048462]
[19.56389809 65.23245239]
[5.62816954 71.79763794]
[-9.32641602 68.93167114]
[-19.60432243 57.93946075]
[-21.41707039 43.17965317]
[-34.62600327 36.07162094]
[-47.83493423 28.96359253]
[-61.04386902 21.85556221]
[-76.86270142 22.12952614]
[-84.40381622 9.28503799]
[-97.61274719 2.17700791]
[-110.82168579 -4.93102217]
[-126.53862762 -1.71274149]
[-138.76129150 -12.10437012]
[-138.11349487 -28.13434029]
[-125.09218597 -37.50582886]
[-109.68618011 -33.02983475]
[-103.71365356 -18.13995552]
[-90.50472260 -11.03192520]
[-77.29578400 -3.92389512]
[-62.42174530 -4.70627165]
[-53.93583679 8.64662933]
[-40.72690582 15.75465965]
[-27.51797295 22.86268997]
[-14.30904007 29.97071838]
[-0.99226171 23.35245514]
[13.84360886 25.87454796]
[24.47390366 36.77639008]
[26.67192841 52.02351761]
[39.88085938 59.13154984]
[53.08979416 66.23957825]
[66.29872894 73.34761047]
[79.50765991 80.45563507]
[99.68227386 71.68362427]
[120.04864502 80.00074768]
[133.09475708 72.59812927]
[146.14088440 65.19550323]
[158.93048096 57.35802460]
[171.44908142 49.09457016]
[178.70387268 35.03475189]
[193.58818054 34.48068237]
[206.10676575 26.21722603]
[218.62536621 17.95377159]
[225.88017273 3.89395499]
[240.76446533 3.33988333]
[253.28306580 -4.92357159]
[265.80166626 -13.18702602]
[271.29702759 -20.58906364]
[278.69515991 -21.49176979]
[291.39602661 -29.47224998]
[299.57159424 -45.92929077]
[317.08523560 -45.99431610]
[329.60385132 -54.25777054]
[342.12243652 -62.52122498]
[354.64105225 -70.78468323]
[367.15963745 -79.04813385]
[366.86801147 -94.47274017]
[374.98126221 -107.59441376]
[388.91055298 -114.22608185]
[404.21102905 -112.25159454]
[416.00039673 -102.30101013]
[420.51672363 -87.54952240]
[416.31884766 -72.70427704]
[404.74627686 -62.50233841]
[389.49182129 -60.19910812]
[375.42309570 -66.52953339]
[362.90447998 -58.26608276]
[350.38589478 -50.00262833]
[337.86730957 -41.73917389]
[325.34869385 -33.47571945]
[322.59005737 -21.64489555]
[312.15689087 -14.66961384]
[299.37649536 -16.77138710]
[286.67562866 -8.79090691]
[274.06512451 -0.66842741]
[261.54650879 7.59502745]
[249.02792358 15.85848236]
[242.66853333 29.32724190]
[226.88882446 30.47237015]
[214.37022400 38.73582458]
[201.85162354 46.99927902]
[195.49224854 60.46804047]
[179.71253967 61.61317062]
[167.19393921 69.87662506]
[166.14347839 73.32429504]
[163.32252502 76.41261292]
[158.92924500 78.29261780]
[153.54350281 78.24162292]
[140.49739075 85.64424133]
[127.45126343 93.04686737]
[127.00038147 108.53799438]
[118.46275330 121.47195435]
[104.39543915 127.97496033]
[102.71596527 142.88064575]
[101.03649902 157.78631592]
[99.35703278 172.69200134]
[97.67756653 187.59768677]
[110.35109711 179.57388306]
[125.03038788 182.65908813]
[133.40151978 195.10594177]
[130.72332764 209.86491394]
[118.51266479 218.57696533]
[103.68528748 216.30783081]
[94.63887024 204.34226990]
[90.97377014 218.88761902]
[87.30866241 233.43295288]
[83.64355469 247.97830200]
[95.86119843 257.02249146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 138]
[14 137]
[15 136]
[16 135]
[17 128]
[18 127]
[19 126]
[20 125]
[21 124]
[28 64]
[29 63]
[30 62]
[31 61]
[32 60]
[36 56]
[37 55]
[38 54]
[39 53]
[41 51]
[42 50]
[43 49]
[66 121]
[67 120]
[68 119]
[69 115]
[70 114]
[72 112]
[73 111]
[74 110]
[76 108]
[77 107]
[78 106]
[80 105]
[81 104]
[83 101]
[84 100]
[85 99]
[86 98]
[87 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
