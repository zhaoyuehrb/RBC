%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:55:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAACAACACAAUCUAACAACGGUGAAUGAAUUCAUUCUUACGGGAAUCACAGAUAUCGCUGAGCUGCAGGCACCAUUAUUUGCAUUGUUCCUCAUGA\
) } def
/len { sequence length } bind def

/coor [
[89.18919373 231.24882507]
[93.88315582 216.55290222]
[105.79172516 206.74526978]
[103.93024445 191.86122131]
[102.06876373 176.97717285]
[100.20728302 162.09312439]
[98.34580231 147.20907593]
[96.48432159 132.32502747]
[94.62284088 117.44098663]
[91.21740723 132.04930115]
[82.33134460 144.13392639]
[69.40248108 151.73947144]
[54.52277374 153.63533020]
[40.09984970 149.51475525]
[28.46742058 140.04444885]
[21.50768471 126.75678253]
[20.34676933 111.80177307]
[25.17251396 97.59922791]
[35.20408630 86.44721222]
[48.81832123 80.15017700]
[63.81235123 79.72702026]
[77.76005554 85.24621582]
[88.40605164 95.81688690]
[82.07852173 82.21679688]
[75.75099945 68.61671448]
[69.42346954 55.01662064]
[63.09594727 41.41653442]
[56.76842117 27.81644440]
[41.75925064 29.60031128]
[26.95361900 26.66163826]
[13.79904175 19.30056000]
[3.57764196 8.24895287]
[-2.71880555 -5.40232325]
[-4.48509693 -20.31108475]
[-1.56075037 -35.01578903]
[5.75550175 -48.07881165]
[16.73617744 -58.22700119]
[10.40865135 -71.82708740]
[4.08112621 -85.42717743]
[-2.24639940 -99.02726746]
[-8.57392502 -112.62735748]
[-22.30261421 -121.59703827]
[-21.12894630 -137.95413208]
[-6.26028824 -144.87187195]
[7.00775814 -135.23387146]
[5.02616405 -118.95487976]
[11.35368919 -105.35479736]
[17.68121529 -91.75470734]
[24.00874138 -78.15461731]
[30.33626556 -64.55452728]
[45.17171478 -66.41744995]
[59.87651825 -63.59985733]
[73.00822449 -56.36533356]
[83.27473450 -45.41135025]
[89.66143799 -31.80206490]
[91.53146362 -16.86492729]
[88.68918610 -2.06121635]
[81.40061188 11.15692234]
[70.36850739 21.48891830]
[76.69603729 35.08900833]
[83.02355957 48.68909836]
[89.35108948 62.28918457]
[95.67861176 75.88927460]
[102.00614166 89.48936462]
[105.77960968 87.25770569]
[110.63820648 86.37880707]
[116.12015533 87.21508026]
[121.66046906 89.97954559]
[136.57167053 91.60932922]
[151.48286438 93.23911285]
[166.39405823 94.86889648]
[181.30526733 96.49867249]
[196.21646118 98.12845612]
[206.54704285 86.55009460]
[221.71737671 83.28807831]
[235.89414978 89.59671783]
[243.62608337 103.05021667]
[241.94012451 118.47542572]
[231.48454285 129.94104004]
[216.27972412 133.03829956]
[202.17222595 126.57624054]
[194.58666992 113.03965759]
[179.67547607 111.40987396]
[164.76428223 109.78009033]
[149.85308838 108.15030670]
[134.94187927 106.52052307]
[120.03068542 104.89074707]
[109.50688934 115.57950592]
[111.36837006 130.46354675]
[113.22985077 145.34759521]
[115.09133148 160.23164368]
[116.95281219 175.11569214]
[118.81429291 189.99974060]
[120.67577362 204.88378906]
[134.63296509 211.45649719]
[142.80163574 224.54376221]
[142.57521057 239.96946716]
[134.02593994 252.81132507]
[119.88185883 258.97155762]
[104.65629578 256.48446655]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 94]
[4 93]
[5 92]
[6 91]
[7 90]
[8 89]
[9 88]
[23 64]
[24 63]
[25 62]
[26 61]
[27 60]
[28 59]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[68 87]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
