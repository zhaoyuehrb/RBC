%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGUCACUAUCUCCCGGGUGAACGGAGCUUUCGCAGCUGGAGAAGGCUCAUCCACCUGCAGACAUGGGGCGCAGAAAGUCAAAACGAAAGCCGCCUCCCAAGAAGAAGAUGACAGGCACCCUCGAGACCCAGUUCACCUGCCCCUUCUGCAACCACGAGAAAU\
) } def
/len { sequence length } bind def

/coor [
[116.49143219 220.69662476]
[104.41579437 229.92958069]
[89.72478485 233.83374023]
[74.65866089 231.81376648]
[61.51490021 224.17765808]
[52.29783249 212.08988953]
[48.41299438 197.39375305]
[50.45279694 182.33030701]
[58.10617828 169.19659424]
[70.20606232 159.99543762]
[84.90729523 156.12994385]
[86.90058136 141.26296997]
[88.89385986 126.39599609]
[90.88713837 111.52902222]
[85.55865479 106.25102997]
[74.90168762 95.69503021]
[69.57320404 90.41703796]
[54.72588348 92.55175781]
[39.87856293 94.68648529]
[25.03124046 96.82120514]
[10.18391800 98.95592499]
[4.66199303 111.61320496]
[-6.31310034 119.81464386]
[-19.80115128 121.49699402]
[-32.25433731 116.32582092]
[-40.45040512 105.75530243]
[-55.33567810 107.60696411]
[-70.22094727 109.45862579]
[-85.10622406 111.31028748]
[-99.99149323 113.16194153]
[-114.87677002 115.01360321]
[-129.76203918 116.86526489]
[-144.64730835 118.71692657]
[-151.22923279 132.66976929]
[-164.32186890 140.82981873]
[-179.74742126 140.59321594]
[-192.58364868 132.03547668]
[-198.73454285 117.88732910]
[-196.23739624 102.66340637]
[-185.88902283 91.22160339]
[-170.99156189 87.21295929]
[-156.29873657 91.91661835]
[-146.49897766 103.83164978]
[-131.61370850 101.97999573]
[-116.72843170 100.12833405]
[-101.84315491 98.27667236]
[-86.95788574 96.42501068]
[-72.07260895 94.57334900]
[-57.18733978 92.72168732]
[-42.30206299 90.87003326]
[-34.84882736 76.26712036]
[-20.01894379 68.89568329]
[-3.55131912 71.82886505]
[8.04919529 84.10860443]
[22.89651680 81.97388458]
[37.74383926 79.83915710]
[52.59115982 77.70443726]
[67.43848419 75.56971741]
[106.62018585 82.38718414]
[117.95642853 72.56427002]
[129.29266357 62.74135971]
[140.62892151 52.91844940]
[151.96516418 43.09553909]
[152.11820984 32.16253281]
[158.16036987 23.31491280]
[167.88034058 19.35996628]
[177.95164490 21.38892365]
[189.65362549 12.00471210]
[201.35562134 2.62050104]
[213.05761719 -6.76371002]
[224.75959778 -16.14792061]
[236.46159363 -25.53213120]
[238.03955078 -42.93244171]
[251.43591309 -53.61559677]
[268.08270264 -51.37171555]
[279.60391235 -60.97701645]
[291.12512207 -70.58232117]
[285.54980469 -84.63127899]
[284.59115601 -99.69525909]
[288.33047485 -114.29819489]
[296.38940430 -127.01309967]
[307.96807861 -136.60150146]
[321.92449951 -142.13406372]
[336.88723755 -143.08067322]
[351.39019775 -139.36116028]
[364.01614380 -131.35202026]
[375.53732300 -140.95732117]
[387.05853271 -150.56262207]
[383.95968628 -164.22825623]
[387.04605103 -177.82879639]
[395.65765381 -188.71441650]
[408.06387329 -194.78956604]
[421.81085205 -194.91632080]
[434.20690918 -189.12702942]
[445.90890503 -198.51124573]
[457.61090088 -207.89546204]
[469.31289673 -217.27966309]
[471.18240356 -232.74389648]
[483.18356323 -242.09413147]
[497.91485596 -240.21652222]
[509.61682129 -249.60072327]
[507.90200806 -264.93249512]
[514.76885986 -278.74734497]
[528.02618408 -286.63699341]
[543.44360352 -286.08392334]
[556.10156250 -277.26458740]
[561.96081543 -262.99322510]
[559.15179443 -247.82373047]
[548.57086182 -236.59669495]
[533.59423828 -232.89457703]
[519.00103760 -237.89874268]
[507.29904175 -228.51452637]
[505.93200684 -213.72714233]
[494.19818115 -204.04351807]
[478.69708252 -205.57768250]
[466.99511719 -196.19346619]
[455.29312134 -186.80924988]
[443.59112549 -177.42504883]
[446.43646240 -161.53974915]
[440.86267090 -146.29487610]
[428.29788208 -135.87130737]
[412.10092163 -133.17816162]
[396.66384888 -139.04141235]
[385.14263916 -129.43611145]
[373.62142944 -119.83081055]
[379.22857666 -105.97003937]
[380.27838135 -91.03458405]
[376.65551758 -76.48622131]
[368.70251465 -63.75276566]
[357.18759155 -54.08791351]
[343.23037720 -48.44780731]
[328.19299316 -47.39647293]
[313.54721069 -51.04941940]
[300.73043823 -59.06111526]
[289.20922852 -49.45581055]
[277.68801880 -39.85050964]
[278.32620239 -26.95474243]
[271.30371094 -15.88846397]
[259.00341797 -10.82616138]
[245.84580994 -13.83014107]
[234.14381409 -4.44593048]
[222.44181824 4.93828058]
[210.73983765 14.32249165]
[199.03784180 23.70670319]
[187.33584595 33.09091187]
[181.71131897 51.56339645]
[161.78807068 54.43178177]
[150.45182800 64.25469208]
[139.11558533 74.07760620]
[127.77933502 83.90051270]
[116.44309235 93.72342682]
[131.29814148 91.64315796]
[143.71330261 100.06122589]
[147.27859497 114.63135529]
[140.15325928 127.83095551]
[126.01611328 132.84504700]
[112.16620636 127.08484650]
[105.75411224 113.52230835]
[103.76083374 128.38928223]
[101.76754761 143.25625610]
[99.77426910 158.12321472]
[112.93807220 165.72471619]
[122.18690491 177.78819275]
[126.11039734 192.47406006]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 161]
[12 160]
[13 159]
[14 158]
[17 58]
[18 57]
[19 56]
[20 55]
[21 54]
[26 50]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
[33 43]
[59 151]
[60 150]
[61 149]
[62 148]
[63 147]
[67 145]
[68 144]
[69 143]
[70 142]
[71 141]
[72 140]
[75 136]
[76 135]
[77 134]
[86 125]
[87 124]
[88 123]
[94 118]
[95 117]
[96 116]
[97 115]
[100 112]
[101 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
