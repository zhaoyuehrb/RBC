%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:07:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAGUUCUAAGGGACCAUACAGAGUAUUCCUCUCUUCACACCAGGACCAGUCACUGUUGCAGCAUGAGUUCCCAGCAGCAGAAGCAGCCUUGCACCCCACCCCCUCAGCUUCAGCAGCAGCAGGUGAAACAGCCUUGCCAGCCUCCACCUCAGGAACCAUGCA\
) } def
/len { sequence length } bind def

/coor [
[135.06558228 123.76137543]
[128.39952087 133.29359436]
[119.12339020 140.91487122]
[107.79621887 145.90879822]
[95.17317963 147.72531128]
[89.33412933 161.54216003]
[83.49507904 175.35902405]
[77.65602875 189.17587280]
[80.21624756 205.37393188]
[67.29994202 215.47845459]
[52.19430161 209.09475708]
[50.43870926 192.78984070]
[63.83917236 183.33682251]
[69.67822266 169.51995850]
[75.51727295 155.70310974]
[81.35633087 141.88626099]
[75.87929535 136.76257324]
[69.51829529 150.34703064]
[54.63306427 148.49499512]
[51.79484940 133.76596069]
[64.92523956 126.51520538]
[59.44820786 121.39151764]
[46.05084610 128.13768005]
[32.65348434 134.88385010]
[19.25612450 141.63000488]
[15.84228420 156.89041138]
[3.38661408 166.34504700]
[-12.22970104 165.52973938]
[-23.63311386 154.82945251]
[-25.43928337 139.29652405]
[-16.79538918 126.26514435]
[-1.78281462 121.88831329]
[12.50996113 128.23265076]
[25.90732193 121.48648071]
[39.30468369 114.74031830]
[52.70204544 107.99415588]
[54.67737579 104.16990662]
[56.94622803 100.69144440]
[59.46757126 97.58020782]
[62.19887161 94.85340118]
[48.02386093 89.94738770]
[32.45206451 92.74554443]
[22.95540428 81.27111053]
[8.78039169 76.36508942]
[-5.39462090 71.45906830]
[-19.61569595 66.68821716]
[-33.88154221 62.05295944]
[-49.80109787 65.98993683]
[-60.97385406 53.98571014]
[-55.90623856 38.38919449]
[-39.81138229 35.24475098]
[-29.24628830 47.78711319]
[-14.98044014 52.42236710]
[-7.61378145 51.49439240]
[-0.48860154 57.28405762]
[13.68641090 62.19007492]
[27.86142349 67.09609222]
[42.41932678 63.94702148]
[52.92987823 75.77236938]
[67.10488892 80.67839050]
[86.13478851 64.45891571]
[111.12083435 63.50698853]
[131.32965088 78.23153687]
[145.09028625 72.26121521]
[158.85092163 66.29089355]
[172.61157227 60.32057190]
[186.37220764 54.35025024]
[193.03622437 48.03524017]
[200.45213318 48.40002441]
[214.32394409 42.69277191]
[228.19577026 36.98551941]
[242.06758118 31.27826691]
[255.93939209 25.57101440]
[246.73625183 6.04757595]
[255.86230469 -11.70241642]
[273.90249634 -14.97364235]
[282.01208496 -27.59244537]
[282.96398926 -43.38499069]
[296.35391235 -49.90875244]
[304.46353149 -62.52755356]
[305.41543579 -78.32009888]
[318.80535889 -84.84385681]
[326.91494751 -97.46266174]
[335.02456665 -110.08146667]
[343.13418579 -122.70027161]
[351.24380493 -135.31907654]
[341.08645630 -146.47662354]
[334.16390991 -159.88336182]
[330.94805908 -174.62516785]
[331.65826416 -189.69692993]
[336.24600220 -204.07102966]
[344.39855957 -216.76742554]
[355.56005859 -226.92044067]
[368.96945190 -233.83784485]
[383.71249390 -237.04797363]
[398.78399658 -236.33197021]
[413.15631104 -231.73866272]
[425.84954834 -223.58120728]
[435.99826050 -212.41580200]
[442.91049194 -199.00373840]
[446.11492920 -184.25944519]
[445.39309692 -169.18824768]
[440.79425049 -154.81768799]
[432.63189697 -142.12759399]
[421.46258545 -131.98320007]
[408.04782104 -125.07615662]
[393.30230713 -121.87741089]
[378.23138428 -122.60504913]
[363.86260986 -127.20945740]
[355.75299072 -114.59066010]
[347.64337158 -101.97185516]
[339.53375244 -89.35305023]
[331.42416382 -76.73424530]
[331.05230713 -61.84428406]
[317.08233643 -54.41794205]
[308.97271729 -41.79914093]
[308.60086060 -26.90917587]
[294.63088989 -19.48283386]
[286.52130127 -6.86402988]
[292.79501343 6.90281343]
[287.61779785 23.15371704]
[302.19497681 26.69009972]
[316.77215576 30.22648430]
[331.38232422 33.62393570]
[346.02420044 36.88214874]
[360.66604614 40.14035797]
[373.86581421 31.44887543]
[389.32818604 34.71849442]
[397.87963867 48.00940704]
[394.44671631 63.43635559]
[381.06613159 71.84679413]
[365.67636108 68.25097656]
[357.40783691 54.78221893]
[342.76599121 51.52400589]
[328.12411499 48.26579666]
[320.87902832 49.88981628]
[313.23577881 44.80365753]
[298.65859985 41.26727295]
[284.08142090 37.73088837]
[297.88723755 43.59603500]
[308.52713013 54.16923904]
[314.47894287 67.93788910]
[314.89126587 82.93222046]
[309.70501709 97.00713348]
[299.66223145 108.14904022]
[286.19958496 114.76398468]
[271.24310303 115.90561676]
[256.93243408 111.41060638]
[245.31492615 101.92201996]
[238.05255127 88.79730988]
[236.18431091 73.91411591]
[239.97744751 59.40163040]
[248.88931274 47.33604050]
[261.64663696 39.44282913]
[247.77484131 45.15008163]
[233.90301514 50.85733414]
[220.03120422 56.56458664]
[206.15939331 62.27184296]
[192.34252930 68.11089325]
[178.58189392 74.08121490]
[164.82124329 80.05153656]
[151.06060791 86.02185822]
[137.29997253 91.99217987]
[139.48713684 102.27430725]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 16]
[6 15]
[7 14]
[8 13]
[22 36]
[23 35]
[24 34]
[25 33]
[40 60]
[41 59]
[43 57]
[44 56]
[45 55]
[46 53]
[47 52]
[63 163]
[64 162]
[65 161]
[66 160]
[67 159]
[69 158]
[70 157]
[71 156]
[72 155]
[73 154]
[76 119]
[77 118]
[79 116]
[80 115]
[82 113]
[83 112]
[84 111]
[85 110]
[86 109]
[121 139]
[122 138]
[123 137]
[124 135]
[125 134]
[126 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
