%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:33:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCGGGCGGCUCUGAGGAGCCCGGAGGGAACCGGCGACGAGGGGACCAUGUACCGGGACCCGGAGGCGGCCAGCCCAGGGGCGCCCUCGCGCGACGUCCUGCUGGUCUCUGCCAUCAUCACCGUCAGCCUUAGCGUCACUGUCGUCC\
) } def
/len { sequence length } bind def

/coor [
[79.37722015 491.15527344]
[71.70910645 476.65936279]
[80.65686035 462.91638184]
[80.96484375 447.91952515]
[81.27281952 432.92269897]
[73.79846191 420.03924561]
[81.81747437 406.40084839]
[82.12545013 391.40399170]
[82.43343353 376.40716553]
[82.74140930 361.41033936]
[74.57634735 352.43292236]
[74.74757385 339.89727783]
[83.71051788 330.56619263]
[84.32634735 315.57882690]
[84.94216919 300.59149170]
[77.73391724 287.55728149]
[86.03125763 274.08639526]
[86.64707947 259.09906006]
[87.26290894 244.11169434]
[87.87873077 229.12434387]
[88.49456024 214.13699341]
[89.11038208 199.14964294]
[76.45488739 191.29444885]
[69.38339996 178.07136536]
[69.88338470 162.98440552]
[77.92063904 150.08868408]
[91.42164612 142.90049744]
[92.03746796 127.91314697]
[92.65329742 112.92578888]
[86.26910400 108.30529785]
[82.78314972 100.58592987]
[69.09252167 94.45675659]
[55.40189743 88.32758331]
[40.78895950 93.72200775]
[26.99203300 87.31112671]
[21.93932724 73.34667969]
[8.24870110 67.21750641]
[-5.44192457 61.08832932]
[-19.13254929 54.95915604]
[-31.48052788 58.82323456]
[-42.77828598 53.38889694]
[-47.17506027 42.07825470]
[-60.73695755 35.66928101]
[-74.29885101 29.26030350]
[-90.08183289 30.35947037]
[-98.28301239 17.92605400]
[-111.84490967 11.51707935]
[-128.74888611 10.21622658]
[-132.17834473 -6.38723898]
[-117.17312622 -14.27898026]
[-105.43593597 -2.04481721]
[-91.87403870 4.36415815]
[-77.06109619 2.80657911]
[-67.88987732 15.69840813]
[-54.32798004 22.10738373]
[-40.76608276 28.51635933]
[-23.40926361 26.11108398]
[-13.00337601 41.26853180]
[0.68724924 47.39770508]
[14.37787437 53.52687836]
[28.06850052 59.65605164]
[41.84986115 54.12345505]
[55.82141495 60.14427948]
[61.53107071 74.63695526]
[75.22169495 80.76612854]
[88.91232300 86.89530182]
[103.45927429 83.23659515]
[112.62121582 71.35977173]
[114.92399597 55.70704651]
[128.82406616 50.35565567]
[137.98599243 38.47882843]
[140.28877258 22.82610703]
[154.18884277 17.47471237]
[163.35078430 5.59788799]
[172.51271057 -6.27893591]
[181.67465210 -18.15575981]
[190.83659363 -30.03258324]
[199.99851990 -41.90940857]
[209.16046143 -53.78623199]
[210.43586731 -60.37530899]
[214.29695129 -64.65081024]
[218.95046997 -65.95231628]
[228.59228516 -77.44298553]
[238.23410034 -88.93365479]
[247.87591553 -100.42431641]
[257.03784180 -112.30113983]
[265.70446777 -124.54409790]
[274.37106323 -136.78704834]
[283.03765869 -149.02999878]
[284.01119995 -165.40022278]
[298.79412842 -172.49929810]
[312.17907715 -163.02430725]
[310.39672852 -146.72230530]
[295.28063965 -140.36338806]
[286.61401367 -128.12043762]
[277.94741821 -115.87748718]
[269.28079224 -103.63453674]
[269.66259766 -100.79811859]
[268.90847778 -97.63575745]
[266.88696289 -94.59269714]
[263.63494873 -92.15385437]
[259.36657715 -90.78250122]
[249.72476196 -79.29183960]
[240.08294678 -67.80117035]
[230.44113159 -56.31050491]
[221.03727722 -44.62429428]
[211.87535095 -32.74747086]
[202.71340942 -20.87064743]
[193.55146790 -8.99382401]
[184.38954163 2.88299966]
[175.22760010 14.75982285]
[166.06567383 26.63664627]
[164.41821289 41.43986130]
[149.86282349 47.64076614]
[140.70088196 59.51758957]
[139.05342102 74.32080078]
[124.49803925 80.52170563]
[115.33609772 92.39852905]
[129.23362732 86.75417328]
[143.67828369 90.79792023]
[152.62521362 102.83753967]
[152.33027649 117.83464050]
[142.91690063 129.51318359]
[128.32441711 132.98587036]
[114.65956116 126.79946899]
[107.64064789 113.54161835]
[107.02481842 128.52896118]
[106.40899658 143.51632690]
[119.27476501 151.78791809]
[126.22695160 165.29954529]
[125.48749542 180.37666321]
[117.35501862 192.97502136]
[104.09774017 199.76547241]
[103.48191071 214.75282288]
[102.86608887 229.74017334]
[102.25025940 244.72752380]
[101.63443756 259.71487427]
[101.01860809 274.70223999]
[108.18282318 288.80841064]
[99.92952728 301.20730591]
[99.31369781 316.19467163]
[98.69787598 331.18200684]
[107.62796021 347.25323486]
[97.73824310 361.71829224]
[97.43026733 376.71514893]
[97.12229156 391.71197510]
[96.81431580 406.70883179]
[104.26663971 420.66494751]
[96.26965332 433.23068237]
[95.96167755 448.22750854]
[95.65370178 463.22433472]
[104.02969360 477.32308960]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 151]
[4 150]
[5 149]
[7 147]
[8 146]
[9 145]
[10 144]
[13 142]
[14 141]
[15 140]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[27 128]
[28 127]
[29 126]
[31 66]
[32 65]
[33 64]
[36 61]
[37 60]
[38 59]
[39 58]
[42 56]
[43 55]
[44 54]
[46 52]
[47 51]
[67 118]
[68 117]
[70 115]
[71 114]
[73 112]
[74 111]
[75 110]
[76 109]
[77 108]
[78 107]
[79 106]
[82 105]
[83 104]
[84 103]
[85 102]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
