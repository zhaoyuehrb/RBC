%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:11:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCAGAGUGCCCCGCCCACAGUUCCGACGAAAAAUGGCGGGGUCUCCUGAGUUGGUGGUCCUUGACCCUCCAUGGGACAAGGAGCUCGCGGCUGGCACAGAGAGCCAGGCCUUGGUCUCCGCCACUCCCCGAG\
) } def
/len { sequence length } bind def

/coor [
[-32.74761200 212.63874817]
[-39.56799698 212.66259766]
[-46.21127701 211.18811035]
[-52.35313416 208.29426575]
[-57.69526291 204.12910461]
[-61.97986984 198.90231323]
[-76.13399506 203.86825562]
[-90.28812408 208.83421326]
[-97.42851257 214.68023682]
[-104.82977295 213.74685669]
[-119.09561920 218.38211060]
[-133.36146545 223.01736450]
[-147.62731934 227.65261841]
[-161.89315796 232.28788757]
[-176.15901184 236.92314148]
[-190.42485046 241.55839539]
[-204.69070435 246.19364929]
[-206.90080261 260.05621338]
[-214.84671021 271.54794312]
[-226.92080688 278.44464111]
[-240.72344971 279.44161987]
[-253.53987122 274.40032959]
[-262.87408447 264.36416626]
[-277.24392700 268.66622925]
[-291.61376953 272.96826172]
[-302.46783447 285.26138306]
[-318.48516846 281.74328613]
[-323.18850708 266.03308105]
[-311.73944092 254.29208374]
[-295.91580200 258.59841919]
[-281.54595947 254.29637146]
[-267.17611694 249.99432373]
[-263.85876465 234.22265625]
[-252.99740601 222.18911743]
[-237.46876526 217.22132874]
[-221.45690918 220.75660706]
[-209.32595825 231.92779541]
[-195.06010437 227.29254150]
[-180.79426575 222.65728760]
[-166.52841187 218.02203369]
[-152.26257324 213.38677979]
[-137.99671936 208.75152588]
[-123.73087311 204.11627197]
[-109.46502686 199.48101807]
[-95.25407410 194.68008423]
[-81.09994507 189.71412659]
[-66.94581604 184.74818420]
[-59.77823257 161.79927063]
[-38.03933716 150.98558044]
[-14.96533585 159.27458191]
[-2.33796215 151.17832947]
[10.28941154 143.08206177]
[22.91678619 134.98580933]
[26.88598824 128.66954041]
[35.93352509 126.85204315]
[48.74587250 119.05180359]
[61.55821991 111.25155640]
[74.37056732 103.45131683]
[87.18291473 95.65107727]
[95.85789490 83.41405487]
[98.97657013 68.74184418]
[102.09524536 54.06962585]
[105.21392059 39.39741135]
[108.33259583 24.72519875]
[111.45127106 10.05298519]
[106.75226593 -5.05429554]
[116.96663666 -15.89477062]
[120.08531189 -30.56698418]
[123.20398712 -45.23920059]
[115.70738220 -59.42300797]
[122.25447845 -74.06934357]
[137.82290649 -77.94278717]
[150.46990967 -68.07196808]
[150.49377441 -52.02893066]
[137.87620544 -42.12052536]
[134.75752258 -27.44830894]
[131.63885498 -12.77609539]
[136.56092834 1.28173018]
[126.12348938 13.17166042]
[123.00481415 27.84387398]
[119.88613892 42.51608658]
[116.76746368 57.18830109]
[113.64878845 71.86051941]
[110.53011322 86.53273010]
[120.03757477 98.13480377]
[135.03656006 97.96027374]
[143.67243958 94.70713806]
[150.38562012 97.96027374]
[165.38459778 98.13480377]
[179.27386475 90.55859375]
[191.91024780 98.44345856]
[206.90924072 98.61798859]
[221.90821838 98.79251862]
[236.90821838 98.79251862]
[251.90721130 98.61798859]
[266.90618896 98.44345856]
[281.90518188 98.26892853]
[291.67614746 86.05982971]
[307.01907349 83.03849030]
[320.68951416 90.63148499]
[326.23266602 105.25363922]
[321.03125000 120.00081635]
[307.54119873 127.90985870]
[292.13214111 125.24634552]
[282.07971191 113.26791382]
[267.08071899 113.44244385]
[252.08174133 113.61697388]
[237.08274841 113.79150391]
[230.36956787 117.04463959]
[221.73368835 113.79150391]
[206.73471069 113.61697388]
[191.73571777 113.44244385]
[178.91928101 121.03113556]
[165.21006775 113.13378906]
[150.21109009 112.95925903]
[135.21109009 112.95925903]
[120.21210480 113.13378906]
[109.01528168 117.12062073]
[99.63224030 114.58926392]
[94.98315430 108.46341705]
[82.17080688 116.26366425]
[69.35845947 124.06390381]
[56.54611206 131.86415100]
[43.73376846 139.66438293]
[31.01304626 147.61317444]
[18.38567162 155.70944214]
[5.75829792 163.80569458]
[-6.86907625 171.90196228]
[-5.43531132 178.69662476]
[-5.53192854 185.62475586]
[-7.14737606 192.34667969]
[-10.19580460 198.53436279]
[-14.52160168 203.88732910]
[-19.90732574 208.14736938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 47]
[7 46]
[8 45]
[10 44]
[11 43]
[12 42]
[13 41]
[14 40]
[15 39]
[16 38]
[17 37]
[23 32]
[24 31]
[25 30]
[50 128]
[51 127]
[52 126]
[53 125]
[55 124]
[56 123]
[57 122]
[58 121]
[59 120]
[60 84]
[61 83]
[62 82]
[63 81]
[64 80]
[65 79]
[67 77]
[68 76]
[69 75]
[85 117]
[86 116]
[88 115]
[89 114]
[91 112]
[92 111]
[93 110]
[94 108]
[95 107]
[96 106]
[97 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
