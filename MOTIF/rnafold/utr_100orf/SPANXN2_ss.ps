%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:10:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAACAGCCGACUUCAAGCACCAAUGGGGAGAAGAGGAAGAGCCCCUGUGAAUCCAAUAACAAAAAAAAUGAUGAGAUGCAGGAGGCACCGAACAGGG\
) } def
/len { sequence length } bind def

/coor [
[83.25801086 181.13693237]
[71.60140228 190.57745361]
[56.83917236 193.23762512]
[42.62041855 188.45985413]
[32.45990753 177.42517090]
[28.86923409 162.86128235]
[32.73598480 148.36824036]
[43.10433197 137.52862549]
[57.41421509 133.02172852]
[70.22821808 125.22420502]
[55.24454117 125.92381287]
[45.89873886 134.97990417]
[33.28951645 135.15892029]
[24.28590775 126.91555786]
[9.28772163 127.14883423]
[-5.71046448 127.38211060]
[-20.70865059 127.61538696]
[-26.15555191 137.14607239]
[-35.05757904 143.42848206]
[-45.70150375 145.33819580]
[-56.07430649 142.58432007]
[-64.24389648 135.75140381]
[-68.71894836 126.17694855]
[-83.67361450 125.01168823]
[-98.22837067 132.56755066]
[-111.90180206 123.51386261]
[-110.62785339 107.16426849]
[-95.71705627 100.33783722]
[-82.50836182 110.05701447]
[-67.55368805 111.22227478]
[-53.96823120 97.47788239]
[-34.34918213 97.88313293]
[-20.94192696 112.61720276]
[-5.94374180 112.38392639]
[9.05444431 112.15065002]
[24.05262947 111.91736603]
[38.49511337 102.08293152]
[54.54493713 110.94013977]
[69.52861023 110.24053192]
[69.82136536 94.09092712]
[77.75428772 80.84333801]
[90.61410522 73.65943146]
[104.63276672 73.83862305]
[116.07917023 80.63019562]
[128.66346741 72.46713257]
[141.24775696 64.30406952]
[153.70358276 55.94628525]
[166.02790833 47.39580154]
[178.35224915 38.84531784]
[190.67657471 30.29483223]
[203.00091553 21.74434853]
[206.29878235 15.68272877]
[211.43865967 12.76874161]
[216.36795044 13.07354546]
[229.20002747 5.30580139]
[242.03210449 -2.46194291]
[254.74182129 -10.42830944]
[267.32611084 -18.59137344]
[263.89968872 -33.35739517]
[265.73324585 -48.40444946]
[272.60540771 -61.91552734]
[283.68630981 -72.25910187]
[297.63787842 -78.18614197]
[312.77539062 -78.98091888]
[327.27090454 -74.54747009]
[339.37405396 -65.42114258]
[347.62329102 -52.70399475]
[351.02249146 -37.93168259]
[349.16119385 -22.88803482]
[342.26416016 -9.38964367]
[331.16421509 0.93349510]
[317.20175171 6.83481121]
[302.06280518 7.60169172]
[287.57546997 3.14153242]
[275.48916626 -6.00708055]
[262.90487671 2.15598226]
[258.93646240 8.54951096]
[249.79983521 10.37013245]
[236.96777344 18.13787651]
[224.13569641 25.90562057]
[211.55140686 34.06868362]
[199.22706604 42.61916733]
[186.90272522 51.16965103]
[174.57839966 59.72013474]
[162.25405884 68.27062225]
[158.48640442 74.78446960]
[149.41081238 76.88835907]
[136.82652283 85.05142212]
[124.24223328 93.21448517]
[123.63657379 116.20836639]
[103.07181549 131.99902344]
[108.54158783 145.96618652]
[122.60616302 153.68417358]
[125.19902802 169.51631165]
[114.33116150 181.31753540]
[98.33946228 180.03497314]
[89.49138641 166.65248108]
[94.57443237 151.43595886]
[89.10466003 137.46879578]
[87.20861816 152.34848022]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 39]
[11 38]
[14 36]
[15 35]
[16 34]
[17 33]
[23 30]
[24 29]
[44 89]
[45 88]
[46 87]
[47 85]
[48 84]
[49 83]
[50 82]
[51 81]
[54 80]
[55 79]
[56 78]
[57 76]
[58 75]
[91 99]
[92 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
