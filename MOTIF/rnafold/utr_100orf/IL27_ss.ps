%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCAAAGAGGCUGGGCCCCGCCAUGGGCCAGACGGCAGGCGACCUUGGCUGGCGGCUCAGCCUGUUGCUGCUUCCCUUGCUCCUGGUUCAAGCUGGUGUCUGGGGAUUCCCAAGGCCCCCAG\
) } def
/len { sequence length } bind def

/coor [
[125.58742523 168.96195984]
[128.16928101 153.60058594]
[119.60025787 141.28913879]
[111.03123474 128.97769165]
[102.46221161 116.66623688]
[90.26029205 107.94194794]
[75.83904266 103.81550598]
[60.44282150 107.45790100]
[50.33511353 96.51790619]
[35.91386032 92.39146423]
[21.49261093 88.26502228]
[7.07135916 84.13858032]
[-7.34989166 80.01213837]
[-21.77114296 75.88569641]
[-36.19239426 71.75925446]
[-50.61364365 67.63281250]
[-65.03489685 63.50637436]
[-79.45614624 59.37993240]
[-93.92851257 55.43650055]
[-108.44966888 51.67671204]
[-123.01728821 48.10117340]
[-137.62902832 44.71044922]
[-152.24076843 41.31972885]
[-166.85250854 37.92900848]
[-182.04447937 42.34653473]
[-192.69332886 31.93253136]
[-207.30506897 28.54181099]
[-221.99801636 25.52233315]
[-236.76274109 22.87603569]
[-251.52746582 20.22974014]
[-262.62612915 31.07406998]
[-277.98410034 33.29037476]
[-291.69595337 26.02644157]
[-298.48919678 12.07540035]
[-295.75167847 -3.19829035]
[-284.53604126 -13.92158318]
[-269.15490723 -15.97115421]
[-255.52265930 -8.55890083]
[-248.88116455 5.46501398]
[-234.11643982 8.11131096]
[-219.35171509 10.75760746]
[-214.90634155 8.74365997]
[-209.13945007 9.58292770]
[-203.91435242 13.93006802]
[-189.30259705 17.32078934]
[-175.15576172 12.66073513]
[-163.46179199 23.31726646]
[-148.85005188 26.70798683]
[-134.23831177 30.09870911]
[-119.62656403 33.48942947]
[-112.31642151 31.91866684]
[-104.68988037 37.15555573]
[-90.16872406 40.91534424]
[-82.82113647 39.53026962]
[-75.32970428 44.95868301]
[-60.90845490 49.08512497]
[-46.48720169 53.21156693]
[-32.06595230 57.33800507]
[-17.64470100 61.46444702]
[-3.22344995 65.59088898]
[11.19780064 69.71733093]
[25.61905289 73.84377289]
[40.04030228 77.97021484]
[54.46155548 82.09665680]
[68.82627106 78.15911102]
[79.96548462 89.39425659]
[94.38673401 93.52069855]
[95.20326233 89.05809784]
[98.28150177 84.77506256]
[103.50069427 81.63455963]
[110.36958313 80.51711273]
[123.29615784 72.90767670]
[136.22273254 65.29824066]
[149.14932251 57.68880081]
[158.14262390 39.73236847]
[177.40754700 40.12519836]
[189.93211365 31.87080574]
[190.50495911 16.36430931]
[200.10934448 4.17680454]
[215.05221558 -0.00536182]
[229.58770752 5.42593813]
[238.12664795 18.38225937]
[237.38562012 33.88162994]
[227.64958191 45.96422577]
[212.66223145 49.98404694]
[198.18650818 44.39538193]
[185.66192627 52.64977264]
[184.47850037 62.93949509]
[177.63667297 71.00766754]
[167.25370789 73.97835541]
[156.75875854 70.61537933]
[143.83218384 78.22481537]
[130.90559387 85.83425140]
[117.97901917 93.44369507]
[114.77365875 108.09721375]
[123.34268188 120.40866089]
[131.91171265 132.72012329]
[140.48072815 145.03157043]
[155.78257751 147.94551086]
[164.29740906 160.55314636]
[161.42509460 175.12316895]
[169.99412537 187.43461609]
[178.56314087 199.74607849]
[187.13217163 212.05752563]
[195.70120239 224.36897278]
[204.27021790 236.68041992]
[215.21076965 238.00631714]
[223.40519714 245.04067993]
[226.25364685 255.22853088]
[223.03294373 265.07263184]
[230.96740723 277.80227661]
[244.47692871 288.04577637]
[238.37356567 303.86303711]
[221.48487854 302.37683105]
[218.23774719 285.73675537]
[210.30328369 273.00708008]
[192.63377380 265.32077026]
[191.95877075 245.24945068]
[183.38973999 232.93800354]
[174.82072449 220.62654114]
[166.25169373 208.31509399]
[157.68267822 196.00364685]
[149.11364746 183.69218445]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 98]
[3 97]
[4 96]
[5 95]
[6 67]
[7 66]
[9 64]
[10 63]
[11 62]
[12 61]
[13 60]
[14 59]
[15 58]
[16 57]
[17 56]
[18 55]
[19 53]
[20 52]
[21 50]
[22 49]
[23 48]
[24 47]
[26 45]
[27 44]
[28 41]
[29 40]
[30 39]
[71 94]
[72 93]
[73 92]
[74 91]
[76 87]
[77 86]
[101 123]
[102 122]
[103 121]
[104 120]
[105 119]
[106 118]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
