%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:05:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUGUUUACGAAUGUUUGGGCGCGAAUUACUCUAAGCGCGGCUCUCAGAAGGGUGCAAGAAGAAUCAGUGCACUGUGUUUAGAUCAAGAUGUCUGGUAAAGCAAAUGCUUCCAAGAAAAACGCUCAACAGUUAAAAAGAAAUCCAAAGAGAAAAAAGGAUAAUGAGGAAGUUGUGUUGUCAGAGAAUA\
) } def
/len { sequence length } bind def

/coor [
[215.35954285 433.77612305]
[214.36817932 418.80889893]
[213.37683105 403.84170532]
[212.38546753 388.87451172]
[211.39410400 373.90728760]
[196.92431641 362.71508789]
[195.18249512 344.18466187]
[207.73597717 330.01449585]
[206.25030518 315.08825684]
[204.76461792 300.16201782]
[203.27893066 285.23574829]
[201.79324341 270.30950928]
[202.00070190 246.93516541]
[214.32618713 233.98036194]
[203.98588562 223.11398315]
[193.64558411 212.24760437]
[183.30528259 201.38122559]
[176.40432739 198.69812012]
[172.88569641 190.24865723]
[162.72647095 179.21279907]
[152.56724548 168.17694092]
[142.40802002 157.14108276]
[132.24879456 146.10522461]
[118.99066925 152.96253967]
[104.39597321 156.09234619]
[89.49188232 155.27436829]
[75.32736206 150.56616211]
[62.89929962 142.29910278]
[53.08239365 131.05502319]
[46.56756210 117.62528992]
[43.81331253 102.95507812]
[45.01349640 88.07688904]
[30.90870476 82.97248840]
[16.80391312 77.86809540]
[2.69912291 72.76369476]
[-11.40566826 67.65930176]
[-25.51045799 62.55490112]
[-39.61524963 57.45050430]
[-53.72003937 52.34610748]
[-67.82482910 47.24170685]
[-81.92961884 42.13731003]
[-96.03441620 37.03291321]
[-110.76405334 34.19783401]
[-125.75585175 33.70188522]
[-140.74765015 33.20593262]
[-155.73945618 32.70998383]
[-169.94209290 40.90858078]
[-184.00636292 32.47482681]
[-183.46415710 16.08464813]
[-168.87324524 8.59885025]
[-155.24349976 17.71818352]
[-140.25169373 18.21413422]
[-125.25990295 18.71008492]
[-110.26810455 19.20603561]
[-105.98806000 4.82962370]
[-118.80995178 -2.95492005]
[-131.63183594 -10.73946381]
[-144.45373535 -18.52400780]
[-162.85957336 -18.49490547]
[-170.70500183 -34.18400574]
[-183.65383911 -41.75548553]
[-200.04679871 -41.30474472]
[-208.40193176 -55.41586685]
[-200.12420654 -69.57253265]
[-183.72903442 -69.21158600]
[-176.08236694 -54.70433426]
[-163.13351440 -47.13285065]
[-151.34481812 -49.89436722]
[-140.49031067 -43.67736816]
[-136.66918945 -31.34589767]
[-123.84729767 -23.56135368]
[-111.02540588 -15.77681065]
[-98.20351410 -7.99226713]
[-90.93001556 22.92812157]
[-76.82522583 28.03252029]
[-62.72043228 33.13691711]
[-48.61564255 38.24131393]
[-34.51085281 43.34571457]
[-20.40606117 48.45011139]
[-6.30127001 53.55450821]
[7.80352068 58.65890503]
[21.90831184 63.76330185]
[36.01310349 68.86769867]
[50.11789322 73.97209930]
[54.33587646 67.12958527]
[59.48586273 60.95795822]
[65.46273804 55.58317947]
[72.14452362 51.11494446]
[79.39483643 47.64445114]
[87.06569672 45.24253464]
[95.00054932 43.95821381]
[103.03743744 43.81770706]
[111.01233673 44.82387543]
[115.88282776 30.63661766]
[120.75331879 16.44935799]
[125.50635529 2.22231936]
[130.14161682 -12.04352856]
[129.13829041 -18.60781097]
[131.28941345 -23.89245415]
[135.17315674 -26.69993019]
[140.27755737 -40.80472183]
[145.38195801 -54.90951157]
[150.48635864 -69.01430511]
[147.07788086 -85.05532074]
[159.44496155 -95.82507324]
[174.86538696 -90.24455261]
[177.47596741 -74.05452728]
[164.59114075 -63.90990448]
[159.48674011 -49.80511475]
[154.38235474 -35.70032120]
[149.27795410 -21.59553146]
[144.40745544 -7.40827370]
[139.77220154 6.85757399]
[140.69699097 14.20380402]
[134.94058228 21.31985092]
[130.07008362 35.50711060]
[125.19959259 49.69436646]
[141.30134583 61.79168320]
[152.11123657 78.78454590]
[156.24423218 98.49570465]
[153.17077637 118.39959717]
[143.28465271 135.94599915]
[153.44387817 146.98185730]
[163.60310364 158.01771545]
[173.76232910 169.05357361]
[183.92155457 180.08943176]
[194.17166138 191.04092407]
[204.51196289 201.90730286]
[214.85226440 212.77368164]
[225.19256592 223.64006042]
[218.91587830 210.01643372]
[219.41191101 195.02462769]
[226.57540894 181.84570312]
[238.88639832 173.27600098]
[253.73265076 171.13389587]
[267.96405029 175.87390137]
[278.56085205 186.49028015]
[283.27465820 200.73037720]
[281.10519409 215.57266235]
[272.51281738 227.86782837]
[259.32070923 235.00703430]
[244.32821655 235.47547913]
[258.66876221 239.87422180]
[273.00927734 244.27297974]
[287.34982300 248.67172241]
[297.67587280 237.43182373]
[311.85931396 231.79328918]
[327.08398438 232.87567139]
[340.32705688 240.46406555]
[348.95910645 253.05178833]
[351.26620483 268.13952637]
[346.79028320 282.73162842]
[336.42007446 293.93078613]
[322.21453857 299.51339722]
[306.99423218 298.37106323]
[293.78112793 290.73059082]
[285.19873047 278.10897827]
[282.95108032 263.01226807]
[268.61053467 258.61352539]
[254.27000427 254.21476746]
[239.92945862 249.81600952]
[234.12696838 254.56796265]
[244.60310364 265.30346680]
[255.07923889 276.03894043]
[268.29632568 283.13177490]
[269.74685669 298.06149292]
[258.14230347 307.56591797]
[243.79106140 303.20230103]
[239.44165039 288.84533691]
[230.98181152 276.45861816]
[222.52198792 264.07186890]
[216.71949768 268.82382202]
[218.20516968 283.75009155]
[219.69085693 298.67633057]
[221.17654419 313.60256958]
[222.66223145 328.52880859]
[233.16809082 334.13891602]
[239.58854675 344.02734375]
[240.42137146 355.66757202]
[235.57473755 366.15148926]
[226.36131287 372.91592407]
[227.35267639 387.88314819]
[228.34402466 402.85034180]
[229.33538818 417.81753540]
[230.32675171 432.78475952]
[241.39996338 444.39352417]
[239.08522034 460.26870728]
[225.15818787 468.23223877]
[210.30250549 462.17514038]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 185]
[2 184]
[3 183]
[4 182]
[5 181]
[8 176]
[9 175]
[10 174]
[11 173]
[12 172]
[14 130]
[15 129]
[16 128]
[17 127]
[19 126]
[20 125]
[21 124]
[22 123]
[23 122]
[32 84]
[33 83]
[34 82]
[35 81]
[36 80]
[37 79]
[38 78]
[39 77]
[40 76]
[41 75]
[42 74]
[43 54]
[44 53]
[45 52]
[46 51]
[55 73]
[56 72]
[57 71]
[58 70]
[60 67]
[61 66]
[93 117]
[94 116]
[95 115]
[96 113]
[97 112]
[100 111]
[101 110]
[102 109]
[103 108]
[142 161]
[143 160]
[144 159]
[145 158]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
