%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUCCAAACUCCAUCUUGCUUUCUCCUCAGCCCCAGAUCUGCUCCCACCUAGCAGAAGCUUGUACGGAAGGCGAGAGAAGCUCAUCCCCUCCAGAGC\
) } def
/len { sequence length } bind def

/coor [
[105.26200867 117.57432556]
[97.76291656 117.69096375]
[89.79654694 130.40068054]
[81.83017731 143.11041260]
[73.86381531 155.82012939]
[78.84735870 170.64234924]
[73.08934021 185.18124390]
[59.30851746 192.57197571]
[44.01177216 189.32487488]
[34.42176437 176.97312927]
[35.06659698 161.34884644]
[45.64180374 149.82933044]
[61.15409088 147.85375977]
[69.12046051 135.14404297]
[77.08683014 122.43431854]
[85.05319214 109.72460175]
[88.06529999 95.03013611]
[85.74182892 80.21118164]
[83.41835785 65.39222717]
[81.09487915 50.57326889]
[78.77140808 35.75431061]
[76.44793701 20.93535423]
[74.12446594 6.11639833]
[71.80098724 -8.70255852]
[69.47751617 -23.52151489]
[67.15404510 -38.34047318]
[64.83057404 -53.15942764]
[51.17610168 -60.29115677]
[44.41820908 -73.93609619]
[46.96069717 -88.76848602]
[57.62195587 -99.13552856]
[55.29848099 -113.95448303]
[52.74482727 -128.73551941]
[49.96161270 -143.47503662]
[42.52339935 -146.36061096]
[36.67244720 -151.68235779]
[33.15877151 -158.69090271]
[32.40842819 -166.42543030]
[34.47239304 -173.84538269]
[39.02635956 -179.97047424]
[45.42055511 -184.01011658]
[44.95405960 -199.00285339]
[44.48756027 -213.99560547]
[44.02106094 -228.98834229]
[43.55456543 -243.98109436]
[43.08806610 -258.97384644]
[30.69106102 -268.50527954]
[27.37159348 -283.78646851]
[34.69701385 -297.60211182]
[49.20848083 -303.42889404]
[64.05413055 -298.51556396]
[72.22428894 -285.18206787]
[69.86126709 -269.72406006]
[58.08081055 -259.44033813]
[58.54730988 -244.44758606]
[59.01380539 -229.45484924]
[59.48030472 -214.46209717]
[59.94680405 -199.46936035]
[60.41329956 -184.47660828]
[74.65425873 -167.14775085]
[64.70114136 -146.25825500]
[67.48435974 -131.51872253]
[71.89629364 -125.42280579]
[70.11743927 -116.27795410]
[72.44091034 -101.45899963]
[85.76347351 -94.85239410]
[92.72351837 -81.50991058]
[90.46604919 -66.45145416]
[79.64952850 -55.48290253]
[81.97299957 -40.66394424]
[84.29647827 -25.84498787]
[86.61994934 -11.02603054]
[88.94342041 3.79292560]
[91.26689148 18.61188126]
[93.59036255 33.43083954]
[95.91384125 48.24979401]
[98.23731232 63.06875229]
[100.56078339 77.88771057]
[102.88425446 92.70666504]
[110.78093719 87.93844604]
[121.64384460 88.49435425]
[132.54406738 95.55329895]
[140.21510315 108.86663055]
[148.57289124 121.32244873]
[156.93067932 133.77827454]
[165.28845215 146.23408508]
[180.60687256 145.11973572]
[194.42318726 151.82832336]
[203.02087402 164.55526733]
[204.08720398 179.87710571]
[197.33534241 193.67231750]
[184.58149719 202.23007202]
[169.25640869 203.24836731]
[155.48242188 196.45330811]
[146.96469116 183.67269897]
[145.99443054 168.34448242]
[152.83264160 154.59187317]
[144.47485352 142.13604736]
[136.11706543 129.68023682]
[127.75928497 117.22441101]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 16]
[3 15]
[4 14]
[5 13]
[17 79]
[18 78]
[19 77]
[20 76]
[21 75]
[22 74]
[23 73]
[24 72]
[25 71]
[26 70]
[27 69]
[31 65]
[32 64]
[33 62]
[34 61]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
[83 100]
[84 99]
[85 98]
[86 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
