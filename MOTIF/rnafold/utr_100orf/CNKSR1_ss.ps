%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:57:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAUUCCGGCGACAGCAGGGCAAAACAGGAGCUGAUUCGAGCUGGCAGAGCUGGGCCAUGGAACCGGUAGAGACCUGGACCCCCGGAAAGGUGGCAACUUGGCUGAGAGGUCUUGACGACUCCCUGCAGGACUAUCCCUUUGAGGACUGGCAGCUGC\
) } def
/len { sequence length } bind def

/coor [
[110.82972717 219.40454102]
[99.44198608 229.81237793]
[84.23127747 232.38879395]
[70.05128479 226.31167603]
[61.42679596 213.52020264]
[61.10984802 198.09609985]
[69.20157623 184.96112061]
[83.11994934 178.30661011]
[84.89404297 163.41189575]
[86.66814423 148.51718140]
[88.44224548 133.62246704]
[74.70915222 124.98849487]
[66.24096680 111.15256500]
[64.80054474 94.99494934]
[70.68775177 79.87926483]
[82.67701721 68.95219421]
[78.29616547 54.60618210]
[73.91531372 40.26016617]
[69.53446198 25.91415215]
[65.15361023 11.56813812]
[60.77275467 -2.77787685]
[44.69520569 -5.10848522]
[31.28426552 -14.17393780]
[23.18719673 -28.12371445]
[21.97568703 -44.14934921]
[27.84102058 -59.04978943]
[39.56595993 -69.87081146]
[34.90252686 -84.12747192]
[30.23909187 -98.38413239]
[25.57565880 -112.64079285]
[20.91222572 -126.89745331]
[9.26794338 -137.60826111]
[12.66496277 -152.11030579]
[8.00152969 -166.36697388]
[-9.37672997 -171.38243103]
[-20.20380020 -185.67558289]
[-20.32360840 -203.44958496]
[-9.87586021 -217.63523865]
[-15.09888554 -231.69653320]
[-20.32190895 -245.75782776]
[-25.54493332 -259.81912231]
[-30.76795959 -273.88043213]
[-42.82629776 -284.12283325]
[-40.00485992 -298.74777222]
[-45.22788239 -312.80908203]
[-57.28622437 -323.05148315]
[-54.46478271 -337.67642212]
[-59.68780518 -351.73770142]
[-77.25064087 -356.06268311]
[-88.63393402 -369.91696167]
[-89.45584106 -387.67233276]
[-79.57667542 -402.25967407]
[-85.35113525 -416.10366821]
[-91.12559509 -429.94763184]
[-96.90006256 -443.79159546]
[-102.67452240 -457.63558960]
[-106.32242584 -460.20797729]
[-108.69178772 -463.49050903]
[-109.71685028 -466.98281860]
[-109.50492096 -470.21609497]
[-108.31023407 -472.80789185]
[-112.97366333 -487.06457520]
[-124.12992096 -493.60662842]
[-127.70245361 -505.61798096]
[-122.29216766 -516.47442627]
[-126.67301941 -530.82043457]
[-131.19538879 -545.12249756]
[-135.85882568 -559.37915039]
[-140.52224731 -573.63580322]
[-153.08546448 -584.17608643]
[-149.97282410 -600.27716064]
[-134.38635254 -605.37554932]
[-122.36007690 -594.22656250]
[-126.26558685 -578.29925537]
[-121.60215759 -564.04260254]
[-116.93872070 -549.78594971]
[-111.84307861 -544.37744141]
[-112.32701111 -535.20129395]
[-107.94615936 -520.85528564]
[-94.49040222 -509.62524414]
[-98.71700287 -491.72799683]
[-94.05357361 -477.47134399]
[-88.83054352 -463.41003418]
[-83.05608368 -449.56607056]
[-77.28162384 -435.72210693]
[-71.50716400 -421.87811279]
[-65.73270416 -408.03414917]
[-53.57722855 -406.99859619]
[-42.96333694 -400.83871460]
[-35.95180130 -390.67901611]
[-33.93431854 -378.42736816]
[-37.35763931 -366.41668701]
[-45.62651062 -356.96072388]
[-40.40348816 -342.89944458]
[-28.71873283 -333.66278076]
[-31.16658783 -318.03210449]
[-25.94356346 -303.97079468]
[-14.25880909 -294.73413086]
[-16.70666313 -279.10345459]
[-11.48363972 -265.04214478]
[-6.26061487 -250.98086548]
[-1.03759027 -236.91957092]
[4.18543434 -222.85827637]
[16.29050636 -221.34330750]
[26.65275574 -214.76890564]
[33.25744247 -204.34013367]
[34.78933334 -192.01835632]
[30.89417839 -180.15228271]
[22.25819206 -171.03039551]
[26.92162323 -156.77374268]
[38.23234558 -147.08267212]
[35.16888809 -131.56088257]
[39.83232117 -117.30422211]
[44.49575424 -103.04756165]
[49.15918732 -88.79090118]
[53.82262039 -74.53424072]
[67.67478943 -73.37091064]
[80.07191467 -66.98693848]
[89.12042999 -56.32016373]
[93.42404938 -42.96538925]
[92.29916382 -28.93595123]
[85.88319397 -16.36022568]
[75.11877441 -7.15872812]
[79.49961853 7.18728638]
[83.88047028 21.53330040]
[88.26132202 35.87931442]
[92.64217377 50.22533035]
[97.02302551 64.57134247]
[113.33226013 67.04089355]
[126.77169800 76.60495758]
[134.44847107 91.20485687]
[134.71014404 107.69792175]
[127.50038147 122.53399658]
[136.83616638 134.27465820]
[146.17195129 146.01531982]
[155.62327576 157.66317749]
[165.18919373 169.21710205]
[174.75512695 180.77101135]
[190.51136780 182.00239563]
[200.71835327 194.06858826]
[199.32044983 209.81092834]
[187.14701843 219.88977051]
[171.42033386 218.32551575]
[161.47076416 206.04620361]
[163.20120239 190.33694458]
[153.63528442 178.78302002]
[144.06935120 167.22909546]
[137.34555054 164.06565857]
[134.43128967 155.35110474]
[125.09550476 143.61044312]
[115.75971985 131.86978149]
[111.77254486 133.54786682]
[107.61109161 134.72927856]
[103.33695984 135.39656067]
[101.56285858 150.29127502]
[99.78876495 165.18598938]
[98.01466370 180.08071899]
[109.98059082 189.81828308]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 157]
[9 156]
[10 155]
[11 154]
[16 128]
[17 127]
[18 126]
[19 125]
[20 124]
[21 123]
[27 116]
[28 115]
[29 114]
[30 113]
[31 112]
[33 110]
[34 109]
[38 103]
[39 102]
[40 101]
[41 100]
[42 99]
[44 97]
[45 96]
[47 94]
[48 93]
[52 87]
[53 86]
[54 85]
[55 84]
[56 83]
[61 82]
[62 81]
[65 79]
[66 78]
[67 76]
[68 75]
[69 74]
[133 151]
[134 150]
[135 149]
[136 147]
[137 146]
[138 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
