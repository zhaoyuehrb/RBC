%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:27:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAGGGAAAAAUCAAACCAAUAUCUCUGAAUUUCUCCUCCUGGGCUUCUCAAGUUGGCAACAACAGCAGGUGCUACUCUUUGCACUUUUCCUGUGUC\
) } def
/len { sequence length } bind def

/coor [
[92.20348358 111.71945953]
[89.66177368 108.50995636]
[88.26708984 104.87280273]
[73.41378784 106.96553040]
[58.56048965 109.05826569]
[45.97475815 118.64522552]
[32.29248810 112.75924683]
[17.43918800 114.85198212]
[2.58588958 116.94470978]
[-12.26740932 119.03743744]
[-27.12070847 121.13017273]
[-41.97400665 123.22290039]
[-50.43531036 133.11042786]
[-62.97299576 134.46357727]
[-72.70554352 127.09503174]
[-87.61673737 128.72480774]
[-102.52793884 130.35459900]
[-107.56841278 144.76141357]
[-118.36666870 155.54846191]
[-132.77871704 160.57394409]
[-147.94303894 158.84007263]
[-160.84872437 150.69110107]
[-168.93336487 137.74499512]
[-170.59173584 122.57224274]
[-165.49456787 108.18538666]
[-154.65391541 97.44094849]
[-140.22218323 92.47225189]
[-125.06481171 94.26583099]
[-112.19131470 102.46556854]
[-104.15772247 115.44339752]
[-89.24652100 113.81361389]
[-74.33532715 112.18383026]
[-60.87204361 101.04644012]
[-44.06673813 108.36959839]
[-29.21343803 106.27687073]
[-14.36013889 104.18414307]
[0.49315953 102.09140778]
[15.34645844 99.99868011]
[30.19975662 97.90595245]
[41.72308350 88.46867371]
[56.46776199 94.20496368]
[71.32106018 92.11223602]
[86.17435455 90.01950836]
[97.34231567 80.00568390]
[101.03649902 65.46769714]
[95.58262634 47.96620560]
[108.11689758 35.79272842]
[111.35717010 21.14688873]
[114.59743500 6.50104761]
[103.65454102 -4.37353992]
[100.35035706 -19.44291115]
[105.73923492 -33.89848328]
[118.10160828 -43.12753296]
[133.49267578 -44.18511200]
[147.00122070 -36.73374176]
[154.31669617 -23.15113258]
[153.10478210 -7.77144527]
[143.75218201 4.49771929]
[129.24327087 9.74131489]
[126.00300598 24.38715553]
[122.76274109 39.03299713]
[129.03021240 49.50853348]
[126.32281494 61.82497025]
[115.57448578 69.16188049]
[111.88030243 83.69986725]
[118.83525848 96.99003601]
[132.88578796 102.24193573]
[146.93632507 107.49382782]
[160.98686218 112.74572754]
[180.54405212 108.37527466]
[192.46679688 123.46372223]
[206.81665039 127.83193970]
[221.16651917 132.20016479]
[235.51638794 136.56838989]
[249.86625671 140.93659973]
[264.21612549 145.30482483]
[276.51565552 135.84432983]
[292.02783203 135.45378113]
[304.78784180 144.28334045]
[309.88928223 158.93786621]
[305.37048340 173.78239441]
[292.96902466 183.10890198]
[277.45355225 183.33116150]
[264.79003906 174.36369324]
[259.84790039 159.65469360]
[245.49803162 155.28646851]
[231.14816284 150.91824341]
[216.79829407 146.55003357]
[202.44844055 142.18180847]
[188.09857178 137.81358337]
[179.35363770 143.50590515]
[168.69866943 143.34510803]
[159.76498413 137.13865662]
[155.73497009 126.79626465]
[141.68443298 121.54436493]
[127.63389587 116.29247284]
[113.58335876 111.04057312]
[109.40237427 113.94498444]
[104.73935699 115.42112732]
[100.04790497 115.44721222]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 43]
[4 42]
[5 41]
[7 39]
[8 38]
[9 37]
[10 36]
[11 35]
[12 34]
[15 32]
[16 31]
[17 30]
[44 65]
[45 64]
[47 61]
[48 60]
[49 59]
[66 97]
[67 96]
[68 95]
[69 94]
[71 90]
[72 89]
[73 88]
[74 87]
[75 86]
[76 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
