%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:02:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUAGCGGCGUCUCGGUUGCCAUGGAGACCAGGAGCUCCAAAACGCGGAGGUCUUUAGCGUCCCGGACCAACGAGUGCCAGGGGACAAUGUGGGCGCCAACUUCGCCACCAGCCGGGUCCA\
) } def
/len { sequence length } bind def

/coor [
[210.68597412 219.91889954]
[200.95870972 217.31614685]
[192.47329712 211.83955383]
[186.05741882 204.00152588]
[182.34349060 194.54583740]
[181.70646667 184.37704468]
[184.22598267 174.47399902]
[172.22839355 165.47079468]
[160.23080444 156.46757507]
[148.23321533 147.46435547]
[140.90802002 145.94831848]
[136.04661560 138.07162476]
[124.28482056 128.76248169]
[112.52301788 119.45334625]
[100.76122284 110.14420319]
[92.89151764 107.97129822]
[88.82050323 100.44081116]
[77.30229187 90.83190918]
[65.78408813 81.22301483]
[50.81602859 84.86491394]
[36.73813629 79.06263733]
[28.86932564 66.23509979]
[30.04862976 51.41122437]
[18.53042412 41.80232620]
[7.01221657 32.19342804]
[-1.69233632 29.04601669]
[-4.67470455 22.18580246]
[-15.94168377 12.28352165]
[-27.20866203 2.38123965]
[-48.38573456 -0.32984591]
[-54.58789062 -19.94584465]
[-66.58547974 -28.94905853]
[-78.58306885 -37.95227051]
[-90.58065796 -46.95548630]
[-106.26261139 -49.04994965]
[-111.79834747 -62.87763596]
[-123.79593658 -71.88085175]
[-135.79351807 -80.88406372]
[-147.79110718 -89.88728333]
[-162.97875977 -86.16310120]
[-176.98410034 -93.11898804]
[-183.19425964 -107.47057343]
[-178.67697144 -122.44148254]
[-165.56517029 -130.96290588]
[-150.04985046 -129.01129150]
[-139.45686340 -117.50814056]
[-138.78790283 -101.88487244]
[-126.79030609 -92.88165283]
[-114.79271698 -83.87844086]
[-102.79513550 -74.87522888]
[-87.97132111 -73.42472839]
[-81.57743835 -58.95307541]
[-69.57984924 -49.94985962]
[-57.58226395 -40.94664764]
[-45.58467484 -31.94343185]
[-36.91515350 -34.66039658]
[-27.84366035 -32.98968124]
[-20.49294472 -27.19057274]
[-16.64419937 -18.50335693]
[-17.30638123 -8.88573933]
[-6.03940153 1.01654255]
[5.22757721 10.91882420]
[16.62111473 20.67522240]
[28.13932037 30.28412056]
[39.65752792 39.89301682]
[54.02979660 36.07518387]
[68.06023407 41.51677322]
[76.29238892 54.32633972]
[75.39298248 69.70481110]
[86.91119385 79.31370544]
[98.42939758 88.92259979]
[110.07036591 98.38240814]
[121.83216095 107.69155121]
[133.59396362 117.00069427]
[145.35575867 126.30983734]
[157.23643494 135.46676636]
[169.23402405 144.46998596]
[181.23161316 153.47320557]
[193.22920227 162.47640991]
[212.41925049 155.05322266]
[232.13084412 160.46290588]
[244.67634583 176.42874146]
[245.26237488 196.59001160]
[258.31665039 203.97824097]
[271.37094116 211.36645508]
[284.42520142 218.75468445]
[303.32696533 212.28292847]
[320.72009277 221.48794556]
[325.84017944 240.17778015]
[339.42572021 246.53649902]
[354.12738037 241.38876343]
[367.81445312 248.03094482]
[372.63140869 262.07843018]
[386.21694946 268.43716431]
[399.80249023 274.79586792]
[413.38803101 281.15460205]
[427.49273682 274.40249634]
[442.62478638 278.34646606]
[451.63928223 291.12429810]
[450.27984619 306.70269775]
[439.18835449 317.72598267]
[423.60189819 318.98931885]
[410.87988281 309.89620972]
[407.02929688 294.74011230]
[393.44378662 288.38140869]
[379.85824585 282.02270508]
[366.27270508 275.66397095]
[352.40017700 280.96386719]
[338.53195190 274.70874023]
[333.06698608 260.12203979]
[319.48147583 253.76330566]
[310.95422363 259.83587646]
[300.58383179 261.77389526]
[290.28121948 259.15069580]
[281.97415161 252.38638306]
[277.24661255 242.68254089]
[277.03698730 231.80895996]
[263.98269653 224.42073059]
[250.92843628 217.03251648]
[237.87414551 209.64430237]
[230.07423401 215.87019348]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 79]
[8 78]
[9 77]
[10 76]
[12 75]
[13 74]
[14 73]
[15 72]
[17 71]
[18 70]
[19 69]
[23 65]
[24 64]
[25 63]
[27 62]
[28 61]
[29 60]
[31 55]
[32 54]
[33 53]
[34 52]
[36 50]
[37 49]
[38 48]
[39 47]
[83 120]
[84 119]
[85 118]
[86 117]
[89 111]
[90 110]
[93 107]
[94 106]
[95 105]
[96 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
