%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUUGAUGAAUUACUCUAGUGCCACUGAAUUUUAUCUCCUUGGCUUCCCUGGCUCUGAAGAACUACAUCAUAUCCUUUUUGCUAUAUUCUUCUUUUUCU\
) } def
/len { sequence length } bind def

/coor [
[221.16873169 310.00225830]
[222.59855652 295.03140259]
[226.60652161 280.53631592]
[233.07080078 266.95751953]
[241.79496765 254.70761108]
[231.27117920 244.01885986]
[220.74737549 233.33009338]
[210.22357178 222.64134216]
[199.69976807 211.95257568]
[185.61758423 216.86761475]
[170.73667908 215.17407227]
[158.01464844 207.15466309]
[150.00341797 194.35464478]
[148.33735657 179.28443909]
[153.40014648 164.92723083]
[142.87634277 154.23846436]
[128.43357849 150.59761047]
[124.26503754 135.33543396]
[113.74123383 124.64667511]
[103.21743774 113.95791626]
[89.79298401 110.04949188]
[86.09380341 96.56587982]
[75.56999969 85.87712097]
[65.04620361 75.18836212]
[54.52239609 64.49960327]
[38.94826126 64.20979309]
[28.42789268 53.21995544]
[28.80016136 38.37418365]
[18.27635956 27.68542290]
[7.75255680 16.99666405]
[-5.22913074 16.08416367]
[-13.78017902 6.81571531]
[-13.65344334 -5.39091825]
[-23.83973694 -16.40179634]
[-34.02603149 -27.41267395]
[-49.82612991 -27.77648735]
[-60.68066025 -39.26364136]
[-60.14982224 -55.05901337]
[-48.54854584 -65.79148865]
[-32.75967026 -65.09368134]
[-22.15045166 -53.37958527]
[-23.01515198 -37.59896851]
[-12.82885933 -26.58808899]
[-2.64256573 -15.57721138]
[14.32110691 -11.38969421]
[18.44131660 6.47286081]
[28.96511841 17.16162109]
[39.48892212 27.85037994]
[54.33868790 27.70903397]
[65.16358948 38.39904022]
[65.21115875 53.97580338]
[75.73496246 64.66455841]
[86.25876617 75.35332489]
[96.78256226 86.04208374]
[110.20701599 89.95050812]
[113.90619659 103.43412018]
[124.43000031 114.12287903]
[134.95379639 124.81163788]
[150.14929199 129.21702576]
[153.56510925 143.71466064]
[164.08891296 154.40342712]
[178.52311707 149.56451416]
[193.56559753 151.46475220]
[206.23947144 159.67408752]
[214.06005859 172.51928711]
[215.52197266 187.42472839]
[210.38851929 201.42877197]
[220.91232300 212.11753845]
[231.43612671 222.80628967]
[241.95993042 233.49505615]
[252.48373413 244.18380737]
[264.86782837 235.65119934]
[278.54553223 229.39888000]
[293.10119629 225.61683655]
[308.09246826 224.41998291]
[323.06381226 225.84472656]
[337.56027222 229.84776306]
[351.14126587 236.30741882]
[363.39413452 245.02742004]
[373.94650269 255.74276733]
[382.47772217 268.12783813]
[388.72848511 281.80624390]
[392.50888062 296.36233521]
[393.70404053 311.35375977]
[392.27758789 326.32495117]
[388.27291870 340.82092285]
[381.81170654 354.40121460]
[373.09033203 366.65307617]
[362.37377930 377.20422363]
[349.98776245 385.73403931]
[336.30862427 391.98324585]
[321.75210571 395.76199341]
[306.76055908 396.95544434]
[291.78955078 395.52731323]
[277.29400635 391.52099609]
[263.71444702 385.05825806]
[251.46356201 376.33547974]
[240.91363525 365.61773682]
[232.38523865 353.23074341]
[226.13755798 339.55090332]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 71]
[6 70]
[7 69]
[8 68]
[9 67]
[15 61]
[16 60]
[18 58]
[19 57]
[20 56]
[22 54]
[23 53]
[24 52]
[25 51]
[28 48]
[29 47]
[30 46]
[33 44]
[34 43]
[35 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
