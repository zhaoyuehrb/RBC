%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAACUCAGAGAACCUCACCCGGGCCGCGGUUGCCCCUGCUGAAUUCGUCCUCCUGGGCAUCACAAAUCGCUGGGACCUGCGUGUGGCCCUCUUCCUGA\
) } def
/len { sequence length } bind def

/coor [
[80.42344666 414.28015137]
[65.70684052 410.56719971]
[53.32754517 401.78555298]
[44.95975494 389.12283325]
[41.73514938 374.29156494]
[44.08982849 359.29757690]
[51.70533752 346.16864014]
[63.55175018 336.68038940]
[78.02692413 332.11599731]
[78.95947266 317.14501953]
[79.89201355 302.17404175]
[80.82456207 287.20306396]
[70.80579376 276.24130249]
[71.53826141 261.04531860]
[83.10388184 250.61103821]
[84.03643036 235.64004517]
[77.10534668 222.45637512]
[85.68563080 209.16392517]
[86.61817169 194.19293213]
[87.55072021 179.22195435]
[80.61963654 166.03828430]
[89.19992065 152.74581909]
[90.13246155 137.77484131]
[91.06501007 122.80385590]
[91.99755096 107.83287048]
[92.69715881 92.84919739]
[93.16365814 77.85645294]
[93.16365814 62.85645294]
[92.69715881 47.86370850]
[92.23065948 32.87096405]
[91.76416016 17.87821960]
[91.29766846 2.88547564]
[89.43618774 -11.99857235]
[86.19591522 -26.64441299]
[82.95565033 -41.29025650]
[79.71538544 -55.93609619]
[76.47511292 -70.58193970]
[61.67489624 -74.14774323]
[49.93838120 -83.74676514]
[43.55952835 -97.43363190]
[43.75498962 -112.47100830]
[50.43244553 -125.87701416]
[62.21951294 -135.01652527]
[58.97924423 -149.66236877]
[46.27992630 -159.46577454]
[46.17072678 -175.50845337]
[58.73541260 -185.48384094]
[74.33543396 -181.73965454]
[81.00379181 -167.14813232]
[73.62508392 -152.90263367]
[76.86535645 -138.25679016]
[91.40773010 -134.94244385]
[103.11711884 -125.60437775]
[109.63763428 -112.05284882]
[109.62770081 -96.95251465]
[103.03572845 -83.29846954]
[91.12095642 -73.82220459]
[94.36122131 -59.17636490]
[97.60149384 -44.53052139]
[100.84175873 -29.88468170]
[104.08202362 -15.23884010]
[113.95301819 -26.53323936]
[128.89726257 -27.82532883]
[140.56031799 -18.39277458]
[142.42207336 -3.50875998]
[133.44171143 8.50594711]
[118.63964081 10.93463802]
[106.29041290 2.41897750]
[106.75690460 17.41172218]
[107.22340393 32.40446472]
[107.68990326 47.39720917]
[108.15640259 62.38995361]
[111.09465790 66.35951233]
[111.44710541 72.25743866]
[108.15640259 78.32295227]
[107.68990326 93.31569672]
[110.64841461 100.98004150]
[106.96853638 108.76541901]
[106.03599548 123.73640442]
[105.10344696 138.70738220]
[104.17090607 153.67837524]
[111.03528595 167.93287659]
[102.52170563 180.15449524]
[101.58915710 195.12548828]
[100.65661621 210.09646606]
[107.52099609 224.35096741]
[99.00740814 236.57260132]
[98.07486725 251.54357910]
[108.25620270 263.33248901]
[107.09720612 278.50189209]
[95.79554749 288.13558960]
[94.86299896 303.10659790]
[93.93045807 318.07757568]
[92.99790955 333.04855347]
[106.79476166 339.37399292]
[117.37211609 350.25903320]
[123.29947662 364.23153687]
[123.77521515 379.40185547]
[118.73499298 393.71829224]
[108.86045837 405.24468994]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 94]
[10 93]
[11 92]
[12 91]
[15 88]
[16 87]
[18 85]
[19 84]
[20 83]
[22 81]
[23 80]
[24 79]
[25 78]
[26 76]
[27 75]
[28 72]
[29 71]
[30 70]
[31 69]
[32 68]
[33 61]
[34 60]
[35 59]
[36 58]
[37 57]
[43 51]
[44 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
