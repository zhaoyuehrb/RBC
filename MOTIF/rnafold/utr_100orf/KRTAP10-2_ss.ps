%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:23:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACUCACUCACACACCUCCCCCAGCUCACCUCCUCCCCACUCCAGCAUGGCCGCCUCCACCAUGUCCAUCUGCUCCAGCGCCUGCACCAACUCCUGGCAGGUGGACGACUGCCCAGAGAGCUGCUGUGAGCUCCCCUGCGGCACCC\
) } def
/len { sequence length } bind def

/coor [
[133.32569885 182.04699707]
[131.00544739 196.86645508]
[125.31209564 210.74397278]
[116.55600739 222.92309570]
[105.21446991 232.73989868]
[91.90573883 239.65925598]
[77.35527802 243.30401611]
[62.35625839 243.47546387]
[47.72629166 240.16426086]
[34.26287079 233.55091858]
[22.69990540 223.99592590]
[13.66770458 212.02014160]
[7.65862560 198.27638245]
[5.00022936 183.51383972]
[5.83742857 168.53721619]
[10.12458706 154.16291809]
[17.62800598 141.17451477]
[27.93866348 130.28001404]
[40.49451828 122.07327271]
[54.61113358 117.00166321]
[69.52503967 115.34168243]
[82.53317261 107.87251282]
[67.53655243 108.19089508]
[52.53993225 108.50927734]
[37.54753494 108.98680115]
[22.56104851 109.62342072]
[7.57456446 110.26004028]
[3.29056501 124.78333282]
[-5.47905493 137.12725830]
[-17.78303337 145.95283508]
[-32.28672409 150.30273438]
[-47.41687775 149.70510864]
[-61.53229141 144.22479248]
[-73.10182190 134.45623779]
[-80.87049866 121.45907593]
[-83.99563599 106.64312744]
[-82.13823700 91.61552429]
[-75.49978638 78.00635529]
[-64.80036163 67.29182434]
[-51.20056534 60.63417816]
[-36.17560196 58.75558090]
[-21.35526085 61.85981369]
[-8.34714699 69.61014557]
[1.43771875 81.16588593]
[6.93794680 95.27355194]
[21.92443085 94.63693237]
[36.91091537 94.00032043]
[43.50590897 90.55015564]
[52.22154999 93.51265717]
[67.21817017 93.19427490]
[82.21479034 92.87589264]
[68.90138245 85.96553802]
[54.34821320 82.33161926]
[42.61869049 72.98184204]
[35.83164215 59.60514832]
[35.21308136 44.61790466]
[40.87474823 30.72742081]
[51.79390717 20.44287491]
[65.99813080 15.62207127]
[80.92154694 17.13584328]
[93.86840057 24.71074104]
[102.49995422 36.97843170]
[105.25700378 51.72287750]
[101.64002991 66.28366089]
[101.49832153 81.28298950]
[108.81374359 68.18777466]
[116.12917328 55.09256363]
[123.44459534 41.99735260]
[130.76002502 28.90214157]
[138.07543945 15.80692959]
[145.39086914 2.71171761]
[152.70628357 -10.38349438]
[160.02171326 -23.47870636]
[167.33714294 -36.57391739]
[167.63003540 -43.29124832]
[170.82978821 -48.09335327]
[175.25114441 -50.06009293]
[183.11575317 -62.83302689]
[190.98036194 -75.60596466]
[181.78015137 -87.67744446]
[177.56568909 -102.25834656]
[178.90693665 -117.37672424]
[185.62251282 -130.98794556]
[196.80419922 -141.25120544]
[210.93974304 -146.77848816]
[226.11744690 -146.82225037]
[240.28463745 -141.37660217]
[251.52531433 -131.17800903]
[258.31930542 -117.60574341]
[259.74771118 -102.49534607]
[255.61741638 -87.89038086]
[246.48698425 -75.76603699]
[233.59123230 -67.76204681]
[218.67419434 -64.96087646]
[203.75329590 -67.74135590]
[195.88868713 -54.96841812]
[188.02407837 -42.19548035]
[180.43235779 -29.25849342]
[173.11692810 -16.16328239]
[165.80149841 -3.06806993]
[158.48608398 10.02714157]
[151.17065430 23.12235260]
[143.85522461 36.21756363]
[136.53981018 49.31277847]
[129.22438049 62.40798950]
[121.90895844 75.50319672]
[114.59353638 88.59841156]
[115.82408142 92.80606079]
[115.95295715 96.92931366]
[115.09275818 100.70038605]
[113.41680145 103.90026855]
[124.88469696 113.56915283]
[136.35258484 123.23804474]
[147.82048035 132.90693665]
[159.39035034 142.45356750]
[171.06088257 151.87686157]
[182.73143005 161.30015564]
[200.95637512 163.69850159]
[206.68959045 180.25329590]
[218.55751038 189.42675781]
[230.42543030 198.60021973]
[242.29335022 207.77369690]
[254.16127014 216.94715881]
[269.80374146 214.69137573]
[282.40951538 224.22398376]
[284.49975586 239.88941956]
[274.83444214 252.39369202]
[259.14776611 254.31822205]
[246.74636841 244.52122498]
[244.98780823 228.81507874]
[233.11988831 219.64161682]
[221.25196838 210.46813965]
[209.38403320 201.29467773]
[197.51611328 192.12121582]
[185.43739319 193.33839417]
[175.46476746 185.73316956]
[173.30812073 172.97070312]
[161.63758850 163.54739380]
[149.96705627 154.12409973]
[142.73693848 152.35690308]
[138.15159607 144.37483215]
[126.68370056 134.70593262]
[115.21580505 125.03704834]
[103.74791718 115.36815643]
[109.17642975 129.35140991]
[119.73342133 140.00738525]
[127.53176880 152.82087708]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 51]
[23 50]
[24 49]
[25 47]
[26 46]
[27 45]
[65 107]
[66 106]
[67 105]
[68 104]
[69 103]
[70 102]
[71 101]
[72 100]
[73 99]
[74 98]
[77 97]
[78 96]
[79 95]
[111 144]
[112 143]
[113 142]
[114 141]
[115 139]
[116 138]
[117 137]
[119 134]
[120 133]
[121 132]
[122 131]
[123 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
