%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:10:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGGAAACCAACAACAGCUCUGAAAAGGGAUUUCUUCUCCUGGGAUUUUCAGAUCAGCCUCAGCUAGAGAGGUUUCUUUUUGCCAUCAUUUUGUACU\
) } def
/len { sequence length } bind def

/coor [
[172.90975952 275.91995239]
[167.87699890 261.78942871]
[162.84425354 247.65892029]
[157.81150818 233.52841187]
[151.91000366 219.73811340]
[145.16256714 206.34138489]
[138.41514587 192.94465637]
[131.66772461 179.54792786]
[124.92029572 166.15121460]
[118.17287445 152.75448608]
[111.42544556 139.35775757]
[104.67801666 125.96103668]
[94.94026184 126.57428741]
[85.40089417 123.56902313]
[77.39021301 117.18062592]
[72.08995819 108.12738037]
[70.36070251 97.53233337]
[72.60675049 86.78466034]
[78.69932556 77.35759735]
[87.97107697 70.60664368]
[79.22996521 58.41677856]
[69.92982483 46.64786530]
[60.09089279 35.32551956]
[50.25196457 24.00317574]
[40.41303635 12.68083191]
[30.57410622 1.35848796]
[20.73517609 -9.96385574]
[10.89624786 -21.28619957]
[1.05731881 -32.60854340]
[-9.46648407 -43.29730225]
[-20.63444519 -53.31112671]
[-31.80240631 -63.32494736]
[-42.97036743 -73.33876801]
[-58.42463303 -70.95136261]
[-71.77101898 -79.10047913]
[-76.70776367 -93.93835449]
[-70.90389252 -108.45899963]
[-57.09981537 -115.80620575]
[-41.81339645 -112.51084900]
[-32.26241302 -100.12889862]
[-32.95654678 -84.50672913]
[-21.78858566 -74.49291229]
[-10.62062359 -64.47908783]
[0.54733825 -54.46526718]
[3.51848125 -54.59426117]
[6.72027445 -53.44644165]
[9.62353706 -50.92732239]
[11.67554569 -47.15222931]
[12.37966251 -42.44747162]
[22.21859169 -31.12512970]
[32.05752182 -19.80278587]
[41.89645004 -8.48044109]
[51.73537827 2.84190297]
[61.57430649 14.16424751]
[71.41323853 25.48659134]
[81.25216675 36.80893707]
[84.90489960 37.36801147]
[88.43474579 39.83678055]
[90.89295959 44.11960983]
[91.41983032 49.67566299]
[100.16094971 61.86553192]
[114.85540771 64.87763977]
[127.68748474 57.10989380]
[140.51956177 49.34214783]
[145.73048401 34.16895294]
[160.89007568 28.91861725]
[174.36921692 37.61875534]
[175.82785034 53.59535980]
[164.14704895 64.59255219]
[148.28730774 62.17422485]
[135.45523071 69.94197083]
[122.62315369 77.70970917]
[129.06407166 100.55146790]
[118.07474518 119.21360779]
[124.82217407 132.61033630]
[131.56959534 146.00706482]
[138.31701660 159.40377808]
[145.06445312 172.80050659]
[151.81187439 186.19723511]
[158.55929565 199.59396362]
[165.30671692 212.99069214]
[169.39340210 215.42576599]
[172.10882568 218.75570679]
[173.33932495 222.39724731]
[173.18771362 225.79518127]
[171.94201660 228.49565125]
[176.97476196 242.62617493]
[182.00752258 256.75668335]
[187.04026794 270.88720703]
[202.22207642 272.46063232]
[215.21321106 280.47265625]
[223.43429565 293.33255005]
[225.25302124 308.48690796]
[220.30827332 322.92687988]
[209.58184814 333.78533936]
[195.20346069 338.90637207]
[180.02796936 337.27319336]
[167.06848145 329.21002197]
[158.89810181 316.31787109]
[157.13906860 301.15646362]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 89]
[2 88]
[3 87]
[4 86]
[5 81]
[6 80]
[7 79]
[8 78]
[9 77]
[10 76]
[11 75]
[12 74]
[20 61]
[21 60]
[22 56]
[23 55]
[24 54]
[25 53]
[26 52]
[27 51]
[28 50]
[29 49]
[30 44]
[31 43]
[32 42]
[33 41]
[62 72]
[63 71]
[64 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
