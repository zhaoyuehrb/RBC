%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:40:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGCGCGAGGCCUGGACGGGAGUGGCCGAGGCGGUUGGGCGGAGGCGGAGCAGGCGCCAUGUCAGCCCGGGAAGUGGCCGUGCUGCUGCUGUGGCUGAGCUGCUAUGGCUCCGCCCUUUGGAGGUAUUCCACUAACAGCCCAAACUAUCGCAUUUUUA\
) } def
/len { sequence length } bind def

/coor [
[106.31859589 254.60861206]
[105.14170837 239.65484619]
[103.96482086 224.70108032]
[102.78793335 209.74732971]
[101.61104584 194.79356384]
[100.43415833 179.83979797]
[88.97669983 170.39193726]
[87.57014465 155.24346924]
[97.55761719 143.28988647]
[96.38073730 128.33612061]
[82.52254486 122.59587097]
[71.11645508 132.33760071]
[59.71036148 142.07931519]
[48.30427170 151.82102966]
[46.53400040 156.84196472]
[43.31583405 160.30535889]
[39.50000381 161.91888428]
[35.92787170 161.77636719]
[23.96806335 170.82969666]
[12.00825310 179.88304138]
[10.09141159 195.57066345]
[-2.40811992 205.24212646]
[-18.07459259 203.15953064]
[-27.61336517 190.55844116]
[-25.36525345 174.91487122]
[-12.66402149 165.50985718]
[2.95491385 167.92323303]
[14.91472340 158.86988831]
[26.87453270 149.81655884]
[38.56255341 140.41494751]
[49.96864319 130.67321777]
[61.37473297 120.93150330]
[72.78082275 111.18978119]
[74.43237305 92.89015198]
[85.91088104 81.00966644]
[100.47652435 79.25112915]
[106.21677399 65.39293671]
[111.95702362 51.53474426]
[117.69727325 37.67655182]
[123.43753052 23.81835747]
[129.17778015 9.96016502]
[132.10414124 -4.75161409]
[132.10414124 -19.75161362]
[128.96168518 -28.38502502]
[132.25428772 -35.04539490]
[132.54879761 -50.04250336]
[132.84329224 -65.03961182]
[133.13780212 -80.03672028]
[133.43231201 -95.03382874]
[133.72680664 -110.03093719]
[134.02131653 -125.02804565]
[134.31582642 -140.02516174]
[123.76795959 -157.16378784]
[134.34870911 -173.31211853]
[134.05419922 -188.30921936]
[133.75968933 -203.30633545]
[133.31797791 -218.29981995]
[132.72908020 -233.28825378]
[130.20803833 -236.96807861]
[129.13108826 -240.86778259]
[129.38572693 -244.49633789]
[130.70864868 -247.45230103]
[132.72908020 -249.46604919]
[133.31797791 -264.45449829]
[133.90686035 -279.44293213]
[134.49575806 -294.43136597]
[135.08465576 -309.41979980]
[135.67355347 -324.40823364]
[136.11528015 -339.40173340]
[136.40979004 -354.39883423]
[136.70429993 -369.39593506]
[128.32705688 -379.24783325]
[128.91094971 -391.76473999]
[137.59477234 -400.23257446]
[138.18367004 -415.22103882]
[138.77256775 -430.20947266]
[139.36146545 -445.19790649]
[139.95036316 -460.18634033]
[140.53926086 -475.17477417]
[135.11943054 -491.23907471]
[149.05557251 -500.89413452]
[162.19122314 -490.17541504]
[155.52769470 -474.58587646]
[154.93879700 -459.59744263]
[154.34989929 -444.60900879]
[153.76100159 -429.62057495]
[153.17210388 -414.63214111]
[152.58320618 -399.64370728]
[161.58889771 -384.60742188]
[151.70140076 -369.10144043]
[151.40689087 -354.10433960]
[151.11239624 -339.10720825]
[154.14097595 -332.32272339]
[150.66198730 -323.81933594]
[150.07310486 -308.83090210]
[149.48420715 -293.84246826]
[148.89530945 -278.85403442]
[148.30641174 -263.86560059]
[147.71751404 -248.87715149]
[147.71751404 -233.87715149]
[148.30641174 -218.88871765]
[151.72914124 -212.29428101]
[148.75680542 -203.60083008]
[149.05130005 -188.60372925]
[149.34580994 -173.60661316]
[157.36273193 -167.16923523]
[160.55313110 -157.16378784]
[157.62236023 -146.85008240]
[149.31292725 -139.73065186]
[149.01843262 -124.73354340]
[148.72392273 -109.73643494]
[148.42941284 -94.73932648]
[148.13490295 -79.74221802]
[147.84040833 -64.74510956]
[147.54589844 -49.74800110]
[147.25138855 -34.75089264]
[147.10414124 -19.75161362]
[147.10414124 -4.75161409]
[156.33476257 -8.34564877]
[166.58529663 -9.09991837]
[181.17085266 -5.59823799]
[195.75639343 -2.09655762]
[210.34194946 1.40512288]
[224.71713257 -5.71762800]
[239.18705750 1.21062112]
[242.65164185 16.87511063]
[232.45315552 29.25938416]
[216.41499329 28.86328697]
[206.84027100 15.99067211]
[192.25471497 12.48899174]
[177.66917419 8.98731041]
[163.08361816 5.48563051]
[176.48834229 12.21714401]
[181.91870117 26.19967842]
[176.57096863 40.21402359]
[163.20620728 47.02453613]
[148.72467041 43.11493683]
[140.60319519 30.50376129]
[143.03596497 15.70041656]
[137.29571533 29.55860901]
[131.55546570 43.41680145]
[125.81521606 57.27499390]
[120.07496643 71.13318634]
[114.33471680 84.99137878]
[124.67047882 104.57950592]
[111.33449554 127.15924072]
[112.51138306 142.11299133]
[124.24584198 152.35702515]
[125.22635651 167.53903198]
[115.38792419 178.66291809]
[116.56481171 193.61668396]
[117.74169159 208.57043457]
[118.91857910 223.52420044]
[120.09546661 238.47795105]
[121.27235413 253.43171692]
[132.48866272 264.90228271]
[130.37097168 280.80496216]
[116.54376984 288.94055176]
[101.61411285 283.06817627]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 155]
[2 154]
[3 153]
[4 152]
[5 151]
[6 150]
[9 147]
[10 146]
[11 33]
[12 32]
[13 31]
[14 30]
[18 29]
[19 28]
[20 27]
[36 144]
[37 143]
[38 142]
[39 141]
[40 140]
[41 139]
[42 118]
[43 117]
[45 116]
[46 115]
[47 114]
[48 113]
[49 112]
[50 111]
[51 110]
[52 109]
[54 105]
[55 104]
[56 103]
[57 101]
[58 100]
[63 99]
[64 98]
[65 97]
[66 96]
[67 95]
[68 94]
[69 92]
[70 91]
[71 90]
[74 88]
[75 87]
[76 86]
[77 85]
[78 84]
[79 83]
[120 132]
[121 131]
[122 130]
[123 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
