%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUAGAACCCGGCAGUAGGAGACUUAGAAUCGAAUCUCUUCUCCCUCCCGCCUCCUGUUUUUGGCUUUUUGAGAAACCUUAUCAUCCAACACAAUGGCCAGCAACGUUACCAACAAGAUGGAUCCUCACUCCAUGAACUCCCGUGUGUUCAUUGGGAAUCUCAACACUCUUGUUGUCAAGAAAUCGGAUGUGG\
) } def
/len { sequence length } bind def

/coor [
[27.86709595 204.14167786]
[27.64736938 211.03022766]
[25.85936737 217.66738892]
[22.60637856 223.70195007]
[18.06896782 228.81660461]
[12.49498844 232.74459839]
[6.18603849 235.28361511]
[-0.51884842 236.30624390]
[-7.26141977 235.76632690]
[-13.68334866 233.70095825]
[-19.44527435 230.22805786]
[-31.25878525 239.47148132]
[-37.35940552 254.06919861]
[-52.15093613 255.81845093]
[-63.96444702 265.06188965]
[-68.80362701 272.82635498]
[-76.04492188 274.35748291]
[-88.00656891 283.40838623]
[-99.96820831 292.45932007]
[-111.92984772 301.51022339]
[-123.89149475 310.56115723]
[-135.85313416 319.61206055]
[-142.18933105 334.10906982]
[-157.00724792 335.61859131]
[-168.96890259 344.66949463]
[-170.88891602 360.35671997]
[-183.39039612 370.02566528]
[-199.05645752 367.93991089]
[-208.59268188 355.33688354]
[-206.34140015 339.69375610]
[-193.63825989 330.29132080]
[-178.01982117 332.70785522]
[-166.05816650 323.65695190]
[-160.57754517 309.80731201]
[-144.90405273 307.65042114]
[-132.94241333 298.59951782]
[-120.98076630 289.54858398]
[-109.01912689 280.49768066]
[-97.05748749 271.44674683]
[-85.09584045 262.39584351]
[-73.20787811 253.24836731]
[-61.39436340 244.00494385]
[-56.13872147 230.06838989]
[-40.50221252 227.65797424]
[-28.68869972 218.41455078]
[-28.73298264 194.86483765]
[-11.23122692 178.72964478]
[12.74509430 180.72634888]
[23.09095192 169.86526489]
[33.43680954 159.00418091]
[43.78266525 148.14308167]
[46.95859909 133.59101868]
[62.07927322 128.93528748]
[72.42513275 118.07420349]
[82.77098846 107.21311188]
[84.58831024 92.32360840]
[77.15853882 79.29293060]
[69.72876740 66.26226044]
[62.29899979 53.23158264]
[48.74204254 45.07563400]
[49.15948105 30.18688011]
[41.72970963 17.15620422]
[34.29994202 4.12552738]
[26.87017059 -8.90514851]
[19.44040108 -21.93582535]
[12.01063061 -34.96649933]
[-11.73939419 -35.17700958]
[-30.56771088 -49.46011734]
[-37.10451889 -72.04806519]
[-28.89706802 -93.95796204]
[-38.51819229 -105.46595764]
[-48.13931656 -116.97396088]
[-57.76043701 -128.48194885]
[-73.33807373 -133.60731506]
[-76.42285919 -149.71372986]
[-63.84143448 -160.23226929]
[-48.53649139 -154.34239197]
[-46.25244141 -138.10307312]
[-36.63131714 -126.59507751]
[-27.01019478 -115.08708191]
[-17.38907242 -103.57908630]
[-10.75933075 -106.40093231]
[-3.69977331 -107.89057159]
[3.52429342 -107.98818970]
[10.64063740 -106.68634796]
[17.38035965 -104.03041840]
[23.48805809 -100.11701965]
[28.73150063 -95.09048462]
[32.91045761 -89.13756561]
[35.86434937 -82.48046875]
[37.47840500 -75.36859131]
[37.68813324 -68.06915283]
[36.48187256 -60.85717010]
[33.90138245 -54.00508881]
[30.04041862 -47.77249146]
[25.04130745 -42.39627075]
[32.47107697 -29.36559486]
[39.90084839 -16.33491898]
[47.33061600 -3.30424261]
[54.76038742 9.72643375]
[62.19015503 22.75710869]
[75.21569061 29.98101616]
[75.32967377 45.80181122]
[82.75944519 58.83248901]
[90.18921661 71.86316681]
[97.61898804 84.89383698]
[101.32360077 84.91114044]
[104.87976074 85.81492615]
[108.08064270 87.53497314]
[110.74439240 89.95412445]
[112.72442627 92.91613007]
[127.67527771 91.70292664]
[142.62614441 90.48972321]
[157.57699585 89.27651215]
[172.52784729 88.06330872]
[187.47871399 86.85009766]
[202.42956543 85.63689423]
[217.38041687 84.42368317]
[232.28414917 82.72698212]
[247.12512207 80.54855347]
[261.94796753 78.25003052]
[276.75170898 75.83156586]
[291.55548096 73.41310120]
[303.92761230 63.55201721]
[317.73583984 69.13605499]
[332.53961182 66.71759033]
[347.34335327 64.29913330]
[362.14709473 61.88066483]
[365.43081665 58.99050903]
[369.09619141 57.45860672]
[372.66659546 57.23738098]
[375.73040771 58.12848663]
[377.98471069 59.81734467]
[392.91397095 58.36219406]
[407.84323120 56.90704727]
[422.77246094 55.45190048]
[437.70172119 53.99675369]
[452.63098145 52.54160309]
[460.37445068 39.09473038]
[474.55661011 32.79822922]
[489.72412109 36.07323074]
[500.04479980 47.66043472]
[501.55010986 63.10432434]
[493.66122437 76.46640778]
[479.41159058 82.60868835]
[464.28048706 79.16933441]
[454.08612061 67.47085571]
[439.15686035 68.92600250]
[424.22763062 70.38114929]
[409.29837036 71.83629608]
[394.36911011 73.29144287]
[379.43988037 74.74659729]
[364.56558228 76.68441772]
[349.76181030 79.10288239]
[334.95806885 81.52134705]
[320.15432739 83.93981171]
[308.84106445 93.62790680]
[293.97393799 88.21685028]
[279.17019653 90.63531494]
[264.36642456 93.05377960]
[258.26327515 97.24093628]
[249.30355835 95.38952637]
[234.46258545 97.56795502]
[232.68066406 99.74945068]
[229.92112732 101.35131073]
[226.40231323 101.99535370]
[222.47608948 101.39004517]
[218.59362793 99.37454224]
[203.64277649 100.58775330]
[188.69190979 101.80095673]
[173.74105835 103.01416016]
[158.79020691 104.22737122]
[143.83934021 105.44057465]
[128.88848877 106.65378571]
[113.93762970 107.86698914]
[128.67556763 110.65863037]
[140.25363159 120.19532013]
[145.81690979 134.12550354]
[143.99360657 149.01428223]
[135.23332214 161.19036865]
[121.69615936 167.65142822]
[106.72010040 166.80426025]
[93.99794006 158.85775757]
[86.66670990 145.77139282]
[86.53413391 130.77198792]
[93.63207245 117.55896759]
[83.28621674 128.42005920]
[72.94036102 139.28114319]
[69.02442169 154.61007690]
[54.64375305 158.48893738]
[44.29789734 169.35003662]
[33.95204163 180.21112061]
[23.60618401 191.07220459]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 45]
[12 44]
[14 42]
[15 41]
[17 40]
[18 39]
[19 38]
[20 37]
[21 36]
[22 35]
[24 33]
[25 32]
[48 193]
[49 192]
[50 191]
[51 190]
[53 188]
[54 187]
[55 186]
[56 106]
[57 105]
[58 104]
[59 103]
[61 101]
[62 100]
[63 99]
[64 98]
[65 97]
[66 96]
[70 81]
[71 80]
[72 79]
[73 78]
[111 175]
[112 174]
[113 173]
[114 172]
[115 171]
[116 170]
[117 169]
[118 168]
[119 163]
[120 162]
[121 160]
[122 159]
[123 158]
[125 156]
[126 155]
[127 154]
[128 153]
[133 152]
[134 151]
[135 150]
[136 149]
[137 148]
[138 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
