%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCAGAAAGCUGGCGGGGGGGUGGGGGGAGGAACAUGGCGCAAGCUCUGUCUGAGGAGGAGUUUCAGCGGAUGCAGGCUCAGCUCCUGGAACUCCGGACAAACAACUACCAGCUUUCAGAUGAACUACGCAAGA\
) } def
/len { sequence length } bind def

/coor [
[202.11863708 519.09851074]
[200.73461914 504.16247559]
[199.35058594 489.22647095]
[197.10679626 474.39523315]
[194.01072693 459.71823120]
[190.40805054 445.15731812]
[186.30310059 430.72991943]
[182.19816589 416.30255127]
[178.09321594 401.87515259]
[173.98826599 387.44778442]
[169.88333130 373.02038574]
[165.77838135 358.59298706]
[161.67343140 344.16561890]
[157.56849670 329.73822021]
[146.64356995 319.61422729]
[150.30891418 304.22344971]
[146.20396423 289.79608154]
[131.49032593 287.35183716]
[119.24666595 278.72616577]
[111.93231201 265.58612061]
[111.04480743 250.51187134]
[116.81366730 236.49020386]
[128.14421082 226.32258606]
[124.03926086 211.89520264]
[110.01331329 206.95446777]
[101.48529053 194.55540466]
[101.89834595 179.33427429]
[111.30358887 167.13397217]
[107.19864655 152.70658875]
[103.09369659 138.27920532]
[98.98875427 123.85181427]
[85.21279907 118.74221039]
[77.03810120 106.53322601]
[77.56116486 91.84951019]
[86.58386230 80.25312805]
[82.47891235 65.82574463]
[77.07426453 58.34807587]
[78.44991302 51.01757431]
[74.67930603 36.49922562]
[63.72144318 25.08712959]
[68.01099396 10.82357407]
[64.24038696 -3.69477677]
[51.02246094 -16.45554733]
[56.24269867 -33.16998291]
[52.13775253 -47.59736633]
[48.03281021 -62.02474976]
[42.62815857 -69.50242615]
[44.00380325 -76.83292389]
[40.23319626 -91.35127258]
[36.46258926 -105.86962128]
[32.69198227 -120.38797760]
[28.58703613 -134.81535339]
[24.14994431 -149.14407349]
[19.71285248 -163.47279358]
[6.01260614 -170.88502502]
[1.71688223 -185.47958374]
[8.86773109 -198.49499512]
[4.43063879 -212.82371521]
[-0.00645288 -227.15243530]
[-12.40118408 -237.89035034]
[-9.03397465 -253.94007874]
[6.63127804 -258.79104614]
[18.47950554 -247.45298767]
[14.32226753 -231.58952332]
[18.75935936 -217.26081848]
[23.19645119 -202.93209839]
[36.45136642 -196.23561096]
[41.15532684 -181.76745605]
[34.04157257 -167.90989685]
[38.47866440 -153.58117676]
[42.91575623 -139.25245667]
[46.72624588 -136.23937988]
[48.63075256 -130.76467896]
[47.21033096 -124.15858459]
[50.98094177 -109.64022827]
[54.75154877 -95.12187958]
[58.52215576 -80.60353088]
[62.46019363 -66.12969971]
[66.56513977 -51.70231247]
[70.67008209 -37.27492523]
[81.12202454 -31.07452774]
[84.62457275 -19.01828194]
[78.75874329 -7.46538448]
[82.52935028 7.05296659]
[93.21750641 17.42661285]
[89.19765472 32.72861862]
[92.96826172 47.24696732]
[96.90630341 61.72080231]
[101.01124573 76.14818573]
[114.78720093 81.25778961]
[122.96189880 93.46677399]
[122.43883514 108.15048981]
[113.41613770 119.74687195]
[117.52108765 134.17425537]
[121.62602997 148.60163879]
[125.73097229 163.02902222]
[140.15011597 168.45071411]
[148.51419067 181.17453003]
[147.79078674 196.20585632]
[138.46664429 207.79026794]
[142.57159424 222.21765137]
[157.55755615 224.89756775]
[169.84381104 233.78211975]
[177.02479553 247.06570435]
[177.72335815 262.08810425]
[171.85441589 275.86727905]
[160.63134766 285.69113159]
[164.73629761 300.11849976]
[175.95483398 311.27444458]
[171.99588013 325.63330078]
[176.10081482 340.06066895]
[180.20576477 354.48806763]
[184.31071472 368.91543579]
[188.41564941 383.34283447]
[192.52059937 397.77020264]
[196.62554932 412.19760132]
[200.73048401 426.62496948]
[204.83543396 441.05236816]
[208.72067261 444.80368042]
[210.53384399 449.23794556]
[210.36994934 453.42691040]
[208.68772888 456.62216187]
[211.78379822 471.29916382]
[222.40637207 460.70855713]
[237.33447266 462.17532349]
[245.69264221 474.63088989]
[241.39172363 489.00106812]
[227.56504822 494.81683350]
[214.28660583 487.84243774]
[215.67062378 502.77847290]
[217.05465698 517.71447754]
[228.42886353 529.02850342]
[226.53176880 544.95898438]
[212.81866455 553.28546143]
[197.80905151 547.62054443]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 131]
[2 130]
[3 129]
[4 123]
[5 122]
[6 118]
[7 117]
[8 116]
[9 115]
[10 114]
[11 113]
[12 112]
[13 111]
[14 110]
[16 108]
[17 107]
[23 101]
[24 100]
[28 96]
[29 95]
[30 94]
[31 93]
[35 89]
[36 88]
[38 87]
[39 86]
[41 84]
[42 83]
[44 80]
[45 79]
[46 78]
[48 77]
[49 76]
[50 75]
[51 74]
[52 71]
[53 70]
[54 69]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
