%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:51:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCACAACCUUGCUGGUCUGGCCCAGGCGGGGGGCGGGGCCAGCACGAUGAGCGCCCCGGGCAGCCCCGACCAGGCCUACGACUUCCUGCUCAAGUUCCUGCUGGUGGGCGACAGGGACGUAGGCAAGAGUGAGAUCCUGGAGAGCC\
) } def
/len { sequence length } bind def

/coor [
[70.48816681 120.74704742]
[56.69167709 126.63405609]
[42.89519119 132.52107239]
[33.23889923 145.05368042]
[18.49614906 142.93222046]
[4.69965935 148.81922913]
[2.61986423 162.48471069]
[-5.88746023 173.24154663]
[-18.50491905 178.33273315]
[-31.88026047 176.52145386]
[-42.51687241 168.38963318]
[-56.43520737 173.98248291]
[-70.35353851 179.57533264]
[-84.27187347 185.16818237]
[-98.19021606 190.76103210]
[-112.10855103 196.35386658]
[-126.02688599 201.94671631]
[-139.94522095 207.53956604]
[-153.86355591 213.13241577]
[-163.78367615 225.45726013]
[-178.47807312 223.02334595]
[-192.39640808 228.61619568]
[-206.31474304 234.20904541]
[-220.23307800 239.80187988]
[-224.92112732 254.72021484]
[-238.12942505 263.09127808]
[-253.62142944 260.96252441]
[-264.08230591 249.33908081]
[-264.57272339 233.70919800]
[-254.86112976 221.45280457]
[-239.53305054 218.35700989]
[-225.82592773 225.88354492]
[-211.90759277 220.29071045]
[-197.98925781 214.69786072]
[-184.07092285 209.10501099]
[-175.14633179 197.18020630]
[-159.45640564 199.21408081]
[-145.53807068 193.62123108]
[-131.61973572 188.02838135]
[-117.70139313 182.43553162]
[-103.78305817 176.84269714]
[-89.86472321 171.24984741]
[-75.94638824 165.65699768]
[-62.02805328 160.06414795]
[-48.10971832 154.47129822]
[-44.64162445 138.45855713]
[-32.20449066 127.54010010]
[-15.54710484 126.14720917]
[-1.18734968 135.02273560]
[12.60913944 129.13572693]
[21.27861404 117.02418518]
[37.00817871 118.72457886]
[50.80466843 112.83757019]
[64.60115814 106.95056152]
[64.05089569 96.99169922]
[66.24867249 87.26280975]
[71.02649689 78.50757599]
[78.01912689 71.39528656]
[71.55188751 57.86108398]
[65.08464050 44.32687759]
[58.61739349 30.79266930]
[44.79706192 21.96484566]
[45.80222321 5.59653282]
[60.59885406 -1.47395360]
[73.96544647 8.02689743]
[72.15160370 24.32542419]
[78.61884308 37.85963058]
[85.08609009 51.39383698]
[91.55333710 64.92804718]
[115.89820099 67.61736298]
[132.91442871 85.23419952]
[147.57775879 82.07401276]
[162.24107361 78.91381836]
[176.90440369 75.75363159]
[191.56773376 72.59344482]
[204.88301086 59.92045975]
[221.36494446 65.85987091]
[235.95790100 62.38916016]
[250.51318359 58.76376343]
[265.02917480 54.98409271]
[272.25125122 44.24289322]
[284.47119141 41.42052460]
[294.97631836 47.50490189]
[309.56927490 44.03419113]
[324.16223145 40.56347656]
[338.71749878 36.93808365]
[353.23348999 33.15841293]
[367.74951172 29.37874031]
[382.26550293 25.59906960]
[396.78149414 21.81939888]
[399.86242676 18.53831673]
[403.47521973 16.64291573]
[407.10440063 16.12750053]
[410.29190063 16.81480789]
[412.68948364 18.39096642]
[427.47372437 15.85595322]
[442.25796509 13.32094097]
[457.04217529 10.78592873]
[471.82641602 8.25091648]
[486.61065674 5.71590424]
[501.39489746 3.18089175]
[513.68896484 -6.77735472]
[527.54077148 -1.30226803]
[542.32501221 -3.83728027]
[552.72546387 -16.05243874]
[568.75494385 -15.39307022]
[578.11706543 -2.36498570]
[573.62994385 13.03778267]
[558.73571777 18.99954987]
[544.86004639 10.94695854]
[530.07580566 13.48197079]
[518.83917236 23.25889587]
[503.92993164 17.96512985]
[489.14569092 20.50014305]
[474.36145020 23.03515434]
[459.57720947 25.57016754]
[444.79296875 28.10517883]
[430.00872803 30.64019203]
[415.22448730 33.17520523]
[400.56115723 36.33539200]
[386.04516602 40.11506271]
[371.52917480 43.89473343]
[357.01318359 47.67440796]
[342.49719238 51.45407867]
[336.77709961 56.21623230]
[327.63293457 55.15642548]
[313.03997803 58.62714005]
[298.44702148 62.09785080]
[286.40383911 74.82153320]
[268.80886841 69.50009155]
[254.29286194 73.27976227]
[248.57276917 78.04191589]
[239.42860413 76.98210907]
[224.83566284 80.45281982]
[218.19458008 90.61516571]
[206.01242065 93.59646606]
[194.72792053 87.25676727]
[180.06460571 90.41696167]
[165.40127563 93.57714844]
[150.73794556 96.73733521]
[136.07461548 99.89752960]
[134.31512451 111.12924194]
[129.14764404 121.25565338]
[121.08537292 129.27107239]
[110.92900848 134.37942505]
[99.68722534 136.07339478]
[88.47650909 134.18475342]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 54]
[2 53]
[3 52]
[5 50]
[6 49]
[11 45]
[12 44]
[13 43]
[14 42]
[15 41]
[16 40]
[17 39]
[18 38]
[19 37]
[21 35]
[22 34]
[23 33]
[24 32]
[58 69]
[59 68]
[60 67]
[61 66]
[71 141]
[72 140]
[73 139]
[74 138]
[75 137]
[77 134]
[78 133]
[79 131]
[80 130]
[83 128]
[84 127]
[85 126]
[86 124]
[87 123]
[88 122]
[89 121]
[90 120]
[95 119]
[96 118]
[97 117]
[98 116]
[99 115]
[100 114]
[101 113]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
