%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:13:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGAUUCUGUGGUUAUACUCACUCCUCAUCCCAAAGAAUGAAAUUUACCACUCUCCUCUUCUUGGCAGCUGUAGCAGGGGCCCUGGUCUAUGCUGAAGAUGCCUCCUCUGACUCGACGGGUGCUGAUCCUGCCCAGG\
) } def
/len { sequence length } bind def

/coor [
[104.37985992 211.92759705]
[102.68836212 197.02326965]
[100.99686432 182.11895752]
[99.30536652 167.21463013]
[87.52913666 158.16720581]
[85.60139465 143.07620239]
[95.17101288 130.78553772]
[93.47951508 115.88121796]
[91.53771973 112.33577728]
[90.73886108 108.76461792]
[75.95384979 111.29511261]
[61.16883469 113.82560730]
[46.38382339 116.35610199]
[31.59881020 118.88660431]
[27.32370758 133.49772644]
[17.17008591 144.75787354]
[3.19163609 150.46954346]
[-11.81884003 149.54942322]
[-24.88737488 142.23348999]
[-33.44805527 130.01956177]
[-48.23307037 132.55004883]
[-63.01808167 135.08055115]
[-75.31517792 145.03504944]
[-89.16532135 139.55572510]
[-103.95033264 142.08622742]
[-108.61422729 156.66383362]
[-119.52658081 167.39598083]
[-134.17982483 171.81649780]
[-149.20675659 168.90957642]
[-161.15428162 159.34321594]
[-167.27694702 145.31568909]
[-166.16781616 130.05043030]
[-158.08177185 117.05525970]
[-144.87689209 109.31639862]
[-129.58760071 108.61215973]
[-115.72724152 115.10438538]
[-106.48082733 127.30120850]
[-91.69581604 124.77071381]
[-80.45623779 114.99722290]
[-65.54857635 120.29553986]
[-50.76356506 117.76504517]
[-35.97855377 115.23454285]
[-31.96705055 100.86884308]
[-22.07538033 89.62320709]
[-8.22528648 83.76352692]
[6.85701418 84.50136566]
[20.17741585 91.74386597]
[29.06831360 104.10159302]
[43.85332489 101.57109070]
[58.63834000 99.04059601]
[73.42334747 96.51010132]
[88.20836639 93.97959900]
[73.67687225 90.25995636]
[62.04600143 80.78774261]
[55.46130371 67.31028748]
[55.13745117 52.31378555]
[61.13418579 38.56463623]
[72.34529877 28.59914207]
[86.70265961 24.25564003]
[101.55778503 26.33537483]
[114.17034149 34.45469666]
[122.21369934 47.11583710]
[124.20408630 61.98319626]
[119.77435303 76.31419373]
[109.74412537 87.46340942]
[123.45190430 81.37268066]
[137.15968323 75.28195953]
[150.86744690 69.19123077]
[160.33705139 56.51695251]
[175.10960388 58.41981125]
[188.81736755 52.32908630]
[202.52514648 46.23836136]
[216.23292542 40.14763641]
[229.79954529 33.74868011]
[243.21809387 27.04475975]
[256.56002808 20.18963051]
[269.82363892 13.18416977]
[283.08724976 6.17870903]
[296.35089111 -0.82675177]
[309.61450195 -7.83221292]
[322.87811279 -14.83767319]
[322.68560791 -28.87004089]
[328.54663086 -41.54817963]
[339.25875854 -50.40758896]
[352.68276978 -53.75343704]
[366.16983032 -50.98458099]
[377.08413696 -42.70066071]
[390.50268555 -49.40457916]
[403.92123413 -56.10850143]
[417.33978271 -62.81242371]
[420.80166626 -78.06198883]
[433.28707886 -87.47734833]
[448.90075684 -86.61284637]
[460.27038574 -75.87668610]
[462.02761841 -60.33814621]
[453.34271240 -47.33405304]
[438.31640625 -43.00454330]
[424.04370117 -49.39387512]
[410.62515259 -42.68995285]
[397.20660400 -35.98603439]
[383.78805542 -29.28211212]
[383.22476196 -13.17180538]
[374.58465576 0.54803580]
[360.13311768 8.10338402]
[343.74902344 7.36012697]
[329.88357544 -1.57405734]
[316.61996460 5.43140364]
[303.35635376 12.43686485]
[290.09271240 19.44232559]
[276.82910156 26.44778633]
[263.56549072 33.45324707]
[259.08227539 39.40874100]
[249.92201233 40.46330643]
[236.50346375 47.16722870]
[234.15002441 51.41118240]
[229.06413269 54.17758942]
[222.32365417 53.85541153]
[208.61587524 59.94613647]
[194.90809631 66.03685760]
[181.20031738 72.12758636]
[172.71119690 84.36621857]
[156.95817566 82.89900970]
[143.25039673 88.98973083]
[129.54263306 95.08045959]
[115.83485413 101.17118073]
[108.38384247 114.18972015]
[110.07534027 129.09403992]
[122.15584564 138.92761230]
[123.65894318 154.06681824]
[114.20969391 165.52313232]
[115.90119171 180.42744446]
[117.59268951 195.33177185]
[119.28418732 210.23609924]
[131.80297852 219.88261414]
[133.75109863 235.56637573]
[123.97276306 247.98248291]
[108.26928711 249.76467896]
[95.95725250 239.85562134]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 133]
[2 132]
[3 131]
[4 130]
[7 127]
[8 126]
[10 52]
[11 51]
[12 50]
[13 49]
[14 48]
[20 42]
[21 41]
[22 40]
[24 38]
[25 37]
[65 125]
[66 124]
[67 123]
[68 122]
[70 120]
[71 119]
[72 118]
[73 117]
[74 114]
[75 113]
[76 111]
[77 110]
[78 109]
[79 108]
[80 107]
[81 106]
[87 101]
[88 100]
[89 99]
[90 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
