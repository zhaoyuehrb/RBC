%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:19:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAAACUGAAAGCUAACCAGACGCCCAUUGCCAUGGAUUGCUGUGCCUCUCGCAGCUGCAGUGUCCCCACUGGGCCUGCCACCACCAUCUGCUCCUCCGACAAAUCCUGCCGCUGUGGAGUCUGCCUGCCCA\
) } def
/len { sequence length } bind def

/coor [
[41.69871140 522.93670654]
[31.54510880 534.19195557]
[18.15287399 541.29290771]
[3.13918424 543.38220215]
[-11.68298340 540.20739746]
[-24.52377892 532.15197754]
[-33.83261490 520.18865967]
[-38.48540878 505.76202393]
[-37.92030334 490.61422729]
[-32.20554733 476.57437134]
[-22.03121758 465.33786011]
[-8.62591934 458.26159668]
[6.39159441 456.20001221]
[9.53319836 441.53268433]
[-0.29868758 432.42468262]
[-4.35612440 419.53747559]
[-1.46957171 406.22747803]
[7.70708656 396.01739502]
[20.84086227 391.66390991]
[24.32544136 377.07424927]
[27.81002235 362.48461914]
[31.29460335 347.89495850]
[34.77918243 333.30532837]
[28.70091820 322.77917480]
[31.55255890 310.55014038]
[42.32790756 303.35061646]
[46.15354919 288.84667969]
[49.97919083 274.34271240]
[53.80483246 259.83877563]
[49.56940460 245.55905151]
[60.57046509 234.18859863]
[64.39611053 219.68464661]
[53.62661743 207.35223389]
[52.28285217 190.86846924]
[61.08724976 176.67311096]
[76.75891876 170.42939758]
[80.24349976 155.83976746]
[83.72808075 141.25012207]
[87.21266174 126.66047668]
[90.69724274 112.07083130]
[86.19597626 97.76213837]
[74.98626709 87.79506683]
[63.77656555 77.82799530]
[52.56686020 67.86092377]
[41.35715485 57.89385223]
[30.14745140 47.92678070]
[14.11217308 47.42737198]
[4.62057686 34.49333954]
[8.95380306 19.04657173]
[23.78777122 12.93650150]
[37.74312973 20.85025406]
[40.11452484 36.71707535]
[51.32422638 46.68415070]
[62.53393173 56.65122223]
[73.74363708 66.61829376]
[84.95333862 76.58536530]
[96.16304779 86.55243683]
[103.17326355 83.88658142]
[124.20392609 75.88899994]
[125.95825958 60.99194336]
[127.71258545 46.09488678]
[129.46691895 31.19782829]
[127.35023499 22.21357536]
[131.44097900 15.97361565]
[133.54405212 1.12177813]
[135.64712524 -13.73005962]
[137.75019836 -28.58189774]
[129.29663086 -42.21703339]
[134.82180786 -57.27864456]
[150.08726501 -62.21274567]
[163.38265991 -53.23432541]
[164.50889587 -37.23085403]
[152.60203552 -26.47882462]
[150.49896240 -11.62698650]
[148.39588928 3.22485113]
[146.29281616 18.07668877]
[144.36398315 32.95215988]
[142.60964966 47.84921646]
[140.85531616 62.74627304]
[139.10098267 77.64333344]
[153.28533936 72.76436615]
[168.20651245 71.22865295]
[183.08728027 73.11620331]
[197.15248108 78.32868958]
[209.66946411 86.59458923]
[219.98622131 97.48332977]
[227.56533813 110.42771149]
[232.01200867 124.75346375]
[233.09461975 139.71434021]
[230.75677490 154.53103638]
[225.12025452 168.43174744]
[216.47865295 180.69236755]
[205.28213501 190.67424011]
[192.11392212 197.85742188]
[177.65994263 201.86772156]
[162.67311096 202.49623108]
[147.93411255 199.71025085]
[134.21067810 193.65486145]
[122.21769714 184.64552307]
[112.57987213 173.15150452]
[105.79924011 159.77156067]
[102.22900391 145.20263672]
[102.05515289 130.20364380]
[105.28688812 115.55541229]
[101.80230713 130.14505005]
[98.31772614 144.73469543]
[94.83314514 159.32434082]
[91.34856415 173.91398621]
[101.09744263 183.73277283]
[104.66970825 196.98779297]
[101.22991943 210.16564941]
[91.78667450 219.82836914]
[78.90005493 223.51029968]
[75.07440948 238.01423645]
[79.03620148 253.33137512]
[68.30877686 263.66442871]
[64.48313904 278.16836548]
[60.65749741 292.67230225]
[56.83185577 307.17626953]
[62.10420990 324.77423096]
[49.36882782 336.78991699]
[45.88424683 351.37954712]
[42.39966583 365.96920776]
[38.91508484 380.55883789]
[35.43050385 395.14846802]
[46.58917236 407.80032349]
[48.02841568 424.44226074]
[39.38066483 438.53967285]
[24.20051956 444.67428589]
[21.05891609 459.34161377]
[33.91453552 467.37335205]
[43.24540329 479.31951904]
[47.92477417 493.73754883]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 130]
[14 129]
[19 125]
[20 124]
[21 123]
[22 122]
[23 121]
[26 119]
[27 118]
[28 117]
[29 116]
[31 114]
[32 113]
[36 108]
[37 107]
[38 106]
[39 105]
[40 104]
[41 57]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
[59 80]
[60 79]
[61 78]
[62 77]
[64 76]
[65 75]
[66 74]
[67 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
