%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:09:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUUUUAUCACAACAAGAGCAUAUUUCACCCAGUCACAUUUUUCCUCAUUGGAAUCCCAGGUCUGGAAGACUUCCACAUGUGGAUCUCCGGGCCUUUCU\
) } def
/len { sequence length } bind def

/coor [
[70.02807617 108.18200684]
[59.84178543 119.19288635]
[49.65549469 130.20376587]
[39.46920013 141.21464539]
[29.28290749 152.22550964]
[19.09661484 163.23638916]
[8.91032124 174.24726868]
[12.87260818 189.15713501]
[8.12327385 203.83525085]
[-3.82218862 213.59791565]
[-19.15202332 215.32987976]
[-32.97453690 208.47846985]
[-40.87901688 195.22998047]
[-40.34317017 179.81192017]
[-31.53798485 167.14414978]
[-17.27316284 161.26892090]
[-2.10055709 164.06097412]
[8.08573627 153.05009460]
[18.27202988 142.03923035]
[28.45832253 131.02835083]
[38.64461517 120.01747131]
[48.83090973 109.00659180]
[59.01720047 97.99571228]
[44.79899216 102.77510071]
[33.06381607 112.11777496]
[19.07916832 117.54267883]
[4.11355162 118.55773163]
[-10.47554398 115.07086182]
[-23.36478615 107.39834595]
[-33.38502884 96.23614502]
[-39.62736130 82.59674835]
[-41.52556610 67.71733856]
[-38.90745926 52.94758606]
[-32.01052094 39.62721634]
[-21.46035385 28.96447754]
[-8.21393204 21.92655754]
[6.52719975 19.15184593]
[21.42591667 20.89202499]
[35.13079834 26.98925209]
[46.39871979 36.89046478]
[54.20759583 49.69755173]
[57.84909821 64.24871826]
[66.23577881 76.68510437]
[64.83808899 61.75036240]
[63.44040298 46.81562042]
[62.04271317 31.88088036]
[50.65815353 20.57728195]
[52.54067230 4.64506149]
[66.24616241 -3.69394588]
[81.26094818 1.95723331]
[86.06697083 17.26349831]
[76.97745514 30.48319244]
[78.37514496 45.41793060]
[79.77283478 60.35267258]
[81.17052460 75.28741455]
[92.93116760 70.83705139]
[105.05371857 71.49836731]
[115.48591614 76.81036377]
[122.60147858 85.55396271]
[125.45200348 96.01194000]
[140.30529785 98.10467529]
[155.15859985 100.19740295]
[170.01190186 102.29013062]
[184.86520386 104.38285828]
[199.71850586 106.47559357]
[214.57179260 108.56832123]
[229.42509460 110.66104889]
[244.27839661 112.75378418]
[253.39447021 110.83291626]
[259.55828857 115.14952087]
[274.33929443 117.70317841]
[280.94204712 115.69750214]
[286.64907837 117.22711945]
[289.94775391 120.90263367]
[304.54144287 124.37027740]
[319.13510132 127.83792114]
[333.72879028 131.30557251]
[349.27825928 126.09540558]
[361.38427734 137.15780640]
[357.59317017 153.11273193]
[341.80493164 157.54711914]
[330.26113892 145.89924622]
[315.66748047 142.43161011]
[301.07379150 138.96395874]
[286.48010254 135.49630737]
[271.78564453 132.48420715]
[257.00460815 129.93055725]
[242.18566895 127.60707855]
[227.33236694 125.51435089]
[212.47906494 123.42162323]
[197.62576294 121.32888794]
[182.77247620 119.23616028]
[167.91917419 117.14343262]
[153.06587219 115.05069733]
[138.21257019 112.95796967]
[123.35927582 110.86524200]
[117.74628448 119.87779999]
[108.71747589 126.11466217]
[97.60352325 128.31436157]
[86.18333435 125.83770752]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[5 19]
[6 18]
[7 17]
[43 55]
[44 54]
[45 53]
[46 52]
[60 96]
[61 95]
[62 94]
[63 93]
[64 92]
[65 91]
[66 90]
[67 89]
[68 88]
[70 87]
[71 86]
[74 85]
[75 84]
[76 83]
[77 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
