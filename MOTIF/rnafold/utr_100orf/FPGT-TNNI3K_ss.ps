%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:40:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCGGGCGGAGGCGCACCCCAGGGCGCAUGCGUGCUGUGCGGCGCGGUCUCAGGGAAGGUGGGGCUAUGGCAGCUGCUAGGGACCCUCCGGAAGUAUCGCUGCGAGAAGCCACCCAGCGAAAAUUGC\
) } def
/len { sequence length } bind def

/coor [
[82.29327393 98.91163635]
[86.60244751 86.88095093]
[71.61244965 87.42877960]
[56.62245941 87.97661591]
[50.25460052 102.89637756]
[38.07787704 113.52646637]
[22.54680634 117.79104614]
[6.76312494 114.89067078]
[-6.14364719 105.45167542]
[-13.63671207 91.39170074]
[-28.60891914 92.30438995]
[-43.58112717 93.21707916]
[-58.55333328 94.12976837]
[-73.52554321 95.04245758]
[-88.48552704 96.13739014]
[-103.43106842 97.41439819]
[-116.52243042 106.29846954]
[-129.86221313 99.67278290]
[-144.80775452 100.94979095]
[-157.89910889 109.83386230]
[-171.23889160 103.20817566]
[-186.18443298 104.48517609]
[-199.27578735 113.36925507]
[-212.61557007 106.74356079]
[-227.56111145 108.02056885]
[-242.50665283 109.29757690]
[-257.45220947 110.57458496]
[-272.39773560 111.85159302]
[-285.53341675 121.66922760]
[-300.49481201 114.95444489]
[-301.89093018 98.61483002]
[-288.28558350 89.45919037]
[-273.67474365 96.90605164]
[-258.72918701 95.62904358]
[-243.78366089 94.35203552]
[-228.83811951 93.07502747]
[-213.89257812 91.79801941]
[-201.87020874 83.00528717]
[-187.46144104 89.53963470]
[-172.51589966 88.26262665]
[-160.49353027 79.46989441]
[-146.08476257 86.00424957]
[-131.13920593 84.72724152]
[-119.11685181 75.93450928]
[-104.70807648 82.46885681]
[-89.76253510 81.19184875]
[-83.29911041 77.44913483]
[-74.43823242 80.07025146]
[-59.46602249 79.15756226]
[-44.49381638 78.24487305]
[-29.52160835 77.33218384]
[-14.54940128 76.41949463]
[-9.91352272 63.28676605]
[-0.57868135 52.89288330]
[12.06067371 46.84022903]
[26.09733963 46.07896042]
[39.39913177 50.75798798]
[49.93275833 60.19730759]
[56.07463074 72.98661804]
[71.06462097 72.43878937]
[86.05461884 71.89096069]
[100.69575500 68.62950897]
[114.50094604 62.76293564]
[128.23368835 56.72870255]
[141.89192200 50.52770233]
[155.55017090 44.32669830]
[169.20840454 38.12569809]
[172.34834290 21.55569267]
[184.59843445 10.20653343]
[201.03057861 8.37576675]
[215.19172668 16.58444595]
[228.69491577 10.05269146]
[242.19810486 3.52093625]
[255.70129395 -3.01081896]
[269.20449829 -9.54257393]
[282.54461670 -16.40120888]
[295.71377563 -23.58265686]
[308.88293457 -30.76410294]
[322.05209351 -37.94554901]
[326.64068604 -54.77502823]
[341.66098022 -62.96368790]
[357.65103149 -57.90548325]
[370.64141846 -65.40547943]
[383.63180542 -72.90547943]
[394.32571411 -86.06133270]
[409.92779541 -79.42723846]
[407.87207031 -62.59838486]
[391.13180542 -59.91510010]
[378.14141846 -52.41510010]
[365.15103149 -44.91510010]
[363.56878662 -32.06700134]
[354.71963501 -22.35298729]
[341.69293213 -19.49933243]
[329.23355103 -24.77638817]
[316.06439209 -17.59494209]
[302.89523315 -10.41349411]
[289.72607422 -3.23204732]
[287.52294922 1.11160755]
[282.51489258 4.06478596]
[275.73623657 3.96061707]
[262.23306274 10.49237251]
[248.72985840 17.02412796]
[235.22666931 23.55588341]
[221.72348022 30.08763695]
[220.57530212 43.44614792]
[212.89314270 54.56712723]
[200.60993958 60.46301651]
[186.91125488 59.48532486]
[175.40940857 51.78393936]
[161.75117493 57.98493958]
[148.09292603 64.18594360]
[134.43467712 70.38694763]
[129.59480286 76.07546234]
[120.36751556 76.56813049]
[106.56232452 82.43470001]
[115.13819122 90.75079346]
[116.61608887 101.94192505]
[111.16165924 111.06706238]
[115.48314667 125.43106842]
[119.80463409 139.79507446]
[124.12611389 154.15908813]
[134.47933960 167.58470154]
[124.44445038 181.24989319]
[108.53536987 175.39007568]
[109.76210785 158.48057556]
[105.44062042 144.11656189]
[101.11913300 129.75254822]
[96.79764557 115.38854218]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 61]
[3 60]
[4 59]
[10 52]
[11 51]
[12 50]
[13 49]
[14 48]
[15 46]
[16 45]
[18 43]
[19 42]
[21 40]
[22 39]
[24 37]
[25 36]
[26 35]
[27 34]
[28 33]
[62 115]
[63 114]
[64 112]
[65 111]
[66 110]
[67 109]
[71 104]
[72 103]
[73 102]
[74 101]
[75 100]
[76 97]
[77 96]
[78 95]
[79 94]
[82 90]
[83 89]
[84 88]
[118 128]
[119 127]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
