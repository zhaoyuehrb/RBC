%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGAGGCCGCCAGUCGCGGCGAUCUUCUCCUCGCUUCUGGAGUGUUAUCGUCACCAUGUCCCUAAUGGUCUCGGCUGGCCGGGGCCUGGGGGCCGUGUGGUCCCCAACCCACGUGCAGGUGACGGUGCUGCAGGCGCGGGGCCUGCGGGCCAAGG\
) } def
/len { sequence length } bind def

/coor [
[-37.13501358 448.71765137]
[-34.44448090 433.96090698]
[-41.88113022 432.98815918]
[-51.31704712 444.64849854]
[-60.75296402 456.30883789]
[-70.18888092 467.96917725]
[-78.90824890 480.17462158]
[-86.87965393 492.88116455]
[-94.85105133 505.58773804]
[-102.82245636 518.29431152]
[-110.79386139 531.00085449]
[-108.62876892 546.89715576]
[-119.81084442 558.40112305]
[-135.76216125 556.68786621]
[-144.24623108 543.07165527]
[-138.75479126 527.99774170]
[-123.50041962 523.02947998]
[-115.52902222 510.32290649]
[-107.55761719 497.61633301]
[-99.58621216 484.90975952]
[-91.61481476 472.20321655]
[-106.49197388 474.11895752]
[-118.47849274 465.10101318]
[-120.76061249 450.27563477]
[-112.04106903 438.07031250]
[-97.27648926 435.42321777]
[-84.85981750 443.83905029]
[-81.84922028 458.53326416]
[-72.41329956 446.87292480]
[-62.97738266 435.21258545]
[-53.54146576 423.55224609]
[-13.66878700 411.35186768]
[-9.23380280 397.02249146]
[-4.79881954 382.69311523]
[-0.36383593 368.36373901]
[-3.99219704 353.91784668]
[7.47941589 343.02230835]
[11.91439915 328.69293213]
[16.34938240 314.36355591]
[20.78436661 300.03417969]
[17.15600586 285.58828735]
[28.62761879 274.69274902]
[33.06260300 260.36337280]
[37.49758530 246.03399658]
[36.14296341 242.72140503]
[36.36001205 238.57882690]
[38.52507782 234.36831665]
[42.65249252 230.99247742]
[47.93916702 216.95500183]
[53.22584534 202.91751099]
[58.51252365 188.88002014]
[63.79919815 174.84252930]
[69.08587646 160.80503845]
[74.37255096 146.76756287]
[79.65923309 132.73007202]
[84.94590759 118.69258118]
[76.97769928 110.88334656]
[73.07174683 99.74118805]
[74.56793213 87.37383270]
[81.72237396 76.38983154]
[93.54502869 69.34980011]
[92.34570312 54.39782333]
[91.14637756 39.44584656]
[89.94705200 24.49386978]
[88.74771881 9.54189301]
[85.26807404 3.81389380]
[85.24934387 -1.93972600]
[87.81179810 -6.03027058]
[87.21164703 -21.01825905]
[86.61150360 -36.00624847]
[86.01136017 -50.99423981]
[85.41121674 -65.98223114]
[84.81107330 -80.97021484]
[84.21092987 -95.95820618]
[83.61078644 -110.94619751]
[74.39693451 -124.51222229]
[81.78112793 -139.15481567]
[98.16714478 -139.81094360]
[106.69845581 -125.80562592]
[98.59877777 -111.54634094]
[99.19892120 -96.55834961]
[99.79906464 -81.57035828]
[100.39920807 -66.58237457]
[100.99935150 -51.59438324]
[101.59949493 -36.60639191]
[102.19963837 -21.61840439]
[102.79978180 -6.63041449]
[103.69969940 8.34256649]
[104.89902496 23.29454231]
[106.09835052 38.24652100]
[107.29768372 53.19849777]
[108.49700928 68.15047455]
[121.73024750 75.21315002]
[134.81951904 67.88710785]
[147.83483887 60.43047333]
[160.77490234 52.84399414]
[173.71498108 45.25751495]
[186.65504456 37.67103577]
[192.51651001 30.59068871]
[199.93080139 30.06519318]
[213.02006531 22.73914909]
[226.10934448 15.41310406]
[231.83418274 0.42625198]
[247.16386414 -4.30454493]
[260.33877563 4.84977531]
[261.25222778 20.86680222]
[249.20352173 31.45964241]
[233.43539429 28.50237656]
[220.34611511 35.82842255]
[207.25683594 43.15446472]
[194.24151611 50.61110306]
[181.30145264 58.19758224]
[168.36138916 65.78405762]
[155.42132568 73.37053680]
[151.21809387 79.50085449]
[142.14556885 80.97637939]
[129.05628967 88.30242157]
[122.58984375 115.96454620]
[98.98339081 123.97926331]
[93.69671631 138.01675415]
[88.41004181 152.05422974]
[83.12335968 166.09172058]
[77.83668518 180.12921143]
[72.55001068 194.16670227]
[67.26333618 208.20417786]
[61.97665405 222.24166870]
[56.68997955 236.27915955]
[51.82695770 250.46897888]
[47.39197540 264.79833984]
[42.95699310 279.12771606]
[46.26813126 294.59857178]
[35.11373901 304.46917725]
[30.67875671 318.79855347]
[26.24377251 333.12789917]
[21.80878830 347.45727539]
[25.11993027 362.92813110]
[13.96553707 372.79873657]
[9.53055286 387.12811279]
[5.09556961 401.45745850]
[0.66058600 415.78683472]
[1.56050181 430.75982666]
[7.67982626 444.45486450]
[13.79915047 458.14990234]
[19.91847420 471.84490967]
[33.50873947 481.02297974]
[32.08568192 497.36026001]
[17.11322784 504.05038452]
[3.99375033 494.21109009]
[6.22344398 477.96423340]
[0.10411973 464.26922607]
[-6.01520443 450.57418823]
[-12.13452911 436.87915039]
[-19.57117844 435.90640259]
[-20.76671410 450.85867310]
[-18.66706085 465.71099854]
[-31.94634819 472.68670654]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 31]
[4 30]
[5 29]
[6 28]
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[32 140]
[33 139]
[34 138]
[35 137]
[37 135]
[38 134]
[39 133]
[40 132]
[42 130]
[43 129]
[44 128]
[48 127]
[49 126]
[50 125]
[51 124]
[52 123]
[53 122]
[54 121]
[55 120]
[56 119]
[61 92]
[62 91]
[63 90]
[64 89]
[65 88]
[68 87]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
[93 117]
[94 116]
[95 114]
[96 113]
[97 112]
[98 111]
[100 110]
[101 109]
[102 108]
[141 152]
[142 151]
[143 150]
[144 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
