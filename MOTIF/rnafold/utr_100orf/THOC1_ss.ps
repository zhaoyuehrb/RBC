%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCGCCGCAGCGCAGUGGCGGGCACGCGCAGCCGAGAAGAUGUCUCCGACGCCGCCGCUCUUCAGUUUGCCCGAAGCGCGGACGCGGUUUACGAAGUCUACCAGAGAGGCCUUGAACAACAAAAACAUCAAGCCAUUGU\
) } def
/len { sequence length } bind def

/coor [
[126.94552612 187.78193665]
[138.10984802 176.83242798]
[136.77478027 161.89195251]
[135.43969727 146.95149231]
[120.84831238 143.47418213]
[112.91843414 156.20669556]
[104.98854828 168.93922424]
[97.05866241 181.67173767]
[89.12877655 194.40425110]
[92.95051575 209.73950195]
[84.73773193 223.24230957]
[69.36293793 226.90168762]
[55.94771194 218.54661560]
[52.45108032 203.13398743]
[60.94752502 189.80784607]
[76.39626312 186.47436523]
[84.32614899 173.74185181]
[92.25603485 161.00933838]
[100.18591309 148.27682495]
[108.11579895 135.54429626]
[87.71854401 134.64353943]
[70.84099579 122.86227417]
[56.61701965 127.62448120]
[42.39305115 132.38668823]
[36.83329773 147.00254822]
[23.15426254 154.58001709]
[7.81477308 151.54125977]
[-1.94233596 139.32107544]
[-1.51005566 123.68946838]
[8.90750408 112.02720642]
[24.39149094 109.84084320]
[37.63084030 118.16271973]
[51.85480881 113.40051270]
[66.07878113 108.63829803]
[65.57755280 93.64667511]
[51.06726837 89.84515381]
[36.55698013 86.04364014]
[22.04669380 82.24211884]
[7.52777290 89.06710815]
[-6.79630661 81.84213257]
[-9.93733692 66.10956573]
[0.51421225 53.93809891]
[16.54080582 54.66463089]
[25.84821320 67.73182678]
[40.35850143 71.53334808]
[54.86878967 75.33486938]
[69.37907410 79.13639069]
[88.92866516 64.79525757]
[113.06211090 65.64318848]
[131.40843201 81.19509125]
[136.15835571 104.67303467]
[135.15646362 89.70652771]
[134.15457153 74.74002838]
[122.54074097 64.35943604]
[121.73788452 49.16700363]
[131.70576477 38.15895844]
[130.70387268 23.19245529]
[129.70198059 8.22595310]
[128.70008850 -6.74055004]
[120.05831909 -19.99311066]
[126.92825317 -33.20875549]
[125.92636108 -48.17525864]
[124.92447662 -63.14176178]
[123.92258453 -78.10826111]
[110.36676025 -85.47325134]
[102.96472168 -99.00888824]
[104.07844543 -114.39600372]
[113.35253906 -126.72461700]
[127.82768250 -132.06071472]
[142.88488770 -128.70156860]
[153.71948242 -117.71907806]
[156.87417603 -102.61770630]
[151.34230042 -88.21624756]
[138.88908386 -79.11015320]
[139.89097595 -64.14365387]
[140.89286804 -49.17714691]
[141.89476013 -34.21064377]
[150.46485901 -22.02858925]
[143.66659546 -7.74243975]
[144.66848755 7.22406340]
[145.67037964 22.19056702]
[146.67225647 37.15707016]
[158.01843262 46.73830795]
[159.24769592 61.90219879]
[149.12107849 73.73813629]
[150.12297058 88.70464325]
[151.12486267 103.67114258]
[162.68681335 113.22734833]
[177.57432556 111.39378357]
[192.46183777 109.56021118]
[207.34934998 107.72664642]
[222.23686218 105.89307404]
[227.64070129 95.19585419]
[237.45887756 88.53517914]
[249.15614319 87.48974609]
[259.77975464 92.20613861]
[266.70486450 101.39117432]
[281.65927124 100.22261047]
[296.61367798 99.05405426]
[311.56808472 97.88549805]
[320.50811768 85.05546570]
[335.61697388 81.02355194]
[349.76074219 87.69351196]
[356.26113892 101.91599274]
[352.04885864 116.97557068]
[339.11288452 125.76158142]
[323.56109619 124.12552643]
[312.73663330 112.83991241]
[297.78222656 114.00846863]
[282.82781982 115.17702484]
[267.87341309 116.34558105]
[256.91491699 130.93585205]
[238.46545410 132.99946594]
[224.07043457 120.78058624]
[209.18292236 122.61415863]
[194.29541016 124.44772339]
[179.40789795 126.28129578]
[164.52038574 128.11486816]
[178.46446228 133.64320374]
[192.40853882 139.17155457]
[207.40670776 138.93690491]
[220.99356079 145.29281616]
[230.42593384 156.95602417]
[233.79943848 171.57174683]
[230.43299866 186.18910217]
[221.00625610 197.85685730]
[207.42248535 204.21932983]
[192.42420959 203.99192810]
[179.03955078 197.22056580]
[169.97087097 185.27238464]
[167.04913330 170.55924988]
[158.71464539 158.08782959]
[150.38015747 145.61640930]
[151.71524048 160.55688477]
[153.05032349 175.49734497]
[165.97915649 184.29389954]
[170.17912292 199.35690308]
[163.66714478 213.57408142]
[149.51795959 220.23251343]
[134.41239929 216.18827820]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 135]
[3 134]
[4 133]
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[22 34]
[23 33]
[24 32]
[35 47]
[36 46]
[37 45]
[38 44]
[51 87]
[52 86]
[53 85]
[56 82]
[57 81]
[58 80]
[59 79]
[61 77]
[62 76]
[63 75]
[64 74]
[88 118]
[89 117]
[90 116]
[91 115]
[92 114]
[97 111]
[98 110]
[99 109]
[100 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
