%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:15:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGCCCUGACUUCUCAUAUCUUGCCUAGGAACUCCAGGCUUGUCUUGGCUCCAAAUGGAUCCCAACUGCUCCUGCACCACAGGUGGCUCCUGUGCCUGCGCCGGCUCCUGCAAGUGCAAAGAGUGCAAAUGUACCUCCUGCAAGAAGUGCUGCU\
) } def
/len { sequence length } bind def

/coor [
[86.01006317 356.27880859]
[71.88176727 348.67810059]
[69.15728760 332.86807251]
[79.92659760 320.97683716]
[80.53058624 305.98901367]
[69.30864716 298.69815063]
[63.11795807 286.71157837]
[63.67757416 273.12384033]
[70.94796753 261.50308228]
[83.11330414 254.95401001]
[84.01897430 239.98138428]
[84.92465210 225.00874329]
[85.83032990 210.03611755]
[86.73600769 195.06347656]
[87.64168549 180.09085083]
[78.46299744 178.12445068]
[69.57328033 175.10983276]
[61.09180450 171.08743286]
[53.13237000 166.11125183]
[45.80177307 160.24801636]
[39.19837189 153.57643127]
[33.41076279 146.18598938]
[28.51660347 138.17585754]
[24.58155632 129.65350342]
[10.17378521 133.82676697]
[-4.23398685 138.00003052]
[-18.64175797 142.17329407]
[-26.06491470 147.59649658]
[-33.38179779 146.28237915]
[-47.87068558 150.16467285]
[-59.07771301 162.13690186]
[-74.98594666 158.15443420]
[-79.23036194 142.31407166]
[-67.44466400 130.91102600]
[-51.75297165 135.67578125]
[-37.26408386 131.79350281]
[-22.81501961 127.76551819]
[-8.40724850 123.59225464]
[6.00052309 119.41899109]
[20.40829468 115.24573517]
[19.10250664 104.78199768]
[19.16644669 94.23730469]
[20.59903336 83.79017639]
[23.37600899 73.61750793]
[27.45035362 63.89154053]
[32.75308609 54.77694702]
[21.13401031 45.29026794]
[9.51493645 35.80358887]
[-2.10413790 26.31690598]
[-20.32055664 23.81361961]
[-25.95244789 7.21870852]
[-37.76020050 -2.03207469]
[-49.56795120 -11.28285789]
[-65.87160492 -13.05000591]
[-72.24459839 -28.16016960]
[-62.13093185 -41.06930923]
[-45.93468857 -38.49760437]
[-40.31716919 -23.09061050]
[-28.50941658 -13.83982658]
[-16.70166397 -4.58904362]
[-4.62284470 -5.72870111]
[5.29823780 1.93121636]
[7.38254261 14.69783211]
[19.00161743 24.18451309]
[30.62069130 33.67119217]
[42.23976517 43.15787506]
[57.37943649 31.07424736]
[74.95424652 22.92871857]
[71.65852356 8.29525852]
[68.36279297 -6.33820200]
[56.85152435 -18.01821709]
[61.47132874 -33.75319290]
[77.46974945 -37.35633469]
[88.38897705 -25.12104034]
[82.99625397 -9.63393021]
[86.29198456 4.99953032]
[89.58770752 19.63299179]
[105.70723724 19.16251373]
[121.60076904 21.89315796]
[126.91983795 7.86791420]
[132.23890686 -6.15732956]
[137.55798340 -20.18257332]
[142.87705994 -34.20781708]
[148.19613647 -48.23305893]
[142.94955444 -63.39396286]
[151.65303040 -76.87094879]
[167.62998962 -78.32563019]
[178.62428284 -66.64209747]
[176.20204163 -50.78295898]
[162.22137451 -42.91398621]
[156.90229797 -28.88874245]
[151.58323669 -14.86349964]
[146.26416016 -0.83825612]
[140.94508362 13.18698788]
[135.62600708 27.21223068]
[151.08474731 37.09037781]
[163.92556763 50.19242859]
[173.49041748 65.84694672]
[187.61991882 60.81137848]
[201.74943542 55.77581024]
[215.87893677 50.74024200]
[230.00845337 45.70467377]
[236.83815002 31.70491982]
[251.23921204 26.79941940]
[264.54373169 33.39675903]
[278.67324829 28.36119270]
[288.88058472 15.52598381]
[305.05767822 18.21546364]
[310.56295776 33.66292572]
[299.73303223 45.97734451]
[283.70883179 42.49070358]
[269.57931519 47.52626801]
[263.44601440 61.05099487]
[249.18841553 66.35905457]
[235.04402161 59.83418274]
[220.91450500 64.86975098]
[206.78500366 69.90531921]
[192.65548706 74.94088745]
[178.52598572 79.97645569]
[180.83749390 105.70723724]
[174.93367004 130.85801697]
[188.21551514 137.82885742]
[197.32589722 139.05982971]
[201.69253540 145.07615662]
[214.83131409 152.31304932]
[227.97007751 159.54994202]
[241.10885620 166.78683472]
[257.48486328 165.91580200]
[266.19915771 179.80799866]
[258.28723145 194.17230225]
[241.88819885 194.23196411]
[233.87196350 179.92559814]
[220.73318481 172.68870544]
[207.59442139 165.45182800]
[194.45564270 158.21493530]
[181.24465942 151.11070251]
[167.96282959 144.13984680]
[161.27104187 153.03895569]
[153.42260742 160.93682861]
[144.56568909 167.68434143]
[134.86747742 173.15415955]
[124.51105499 177.24299622]
[113.69192505 179.87367249]
[102.61431885 180.99652100]
[101.70864105 195.96916199]
[100.80296326 210.94178772]
[99.89728546 225.91442871]
[98.99160767 240.88705444]
[98.08593750 255.85969543]
[111.27569580 266.40484619]
[115.55925751 282.56799316]
[109.44565582 297.95312500]
[95.51842499 306.59298706]
[94.91443634 321.58084106]
[104.69197845 334.30007935]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 154]
[5 153]
[10 149]
[11 148]
[12 147]
[13 146]
[14 145]
[15 144]
[24 40]
[25 39]
[26 38]
[27 37]
[29 36]
[30 35]
[46 66]
[47 65]
[48 64]
[49 63]
[51 60]
[52 59]
[53 58]
[68 77]
[69 76]
[70 75]
[79 95]
[80 94]
[81 93]
[82 92]
[83 91]
[84 90]
[98 119]
[99 118]
[100 117]
[101 116]
[102 115]
[105 112]
[106 111]
[121 137]
[122 136]
[124 135]
[125 134]
[126 133]
[127 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
