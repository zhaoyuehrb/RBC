%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:31:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACACCAGGUCACUUCUUUUCCCUACAUCUGACUGCCUUGGCCACUUCAGUACUAUGAGAGCAACAGCCAUAGUCCUACUCUUGGCUCUGACACUUGCAACCAUGUUCAGUAUAGAAUGUGCCAAACAGACGAAACAGAUGGUUGACUGCAGUC\
) } def
/len { sequence length } bind def

/coor [
[27.74191093 546.51672363]
[30.32010078 527.30731201]
[30.62215614 512.31036377]
[30.92421150 497.31338501]
[19.55772972 490.25000000]
[13.12692356 478.39053345]
[13.41280746 464.79425049]
[20.44771576 453.02944946]
[32.47870636 446.23675537]
[33.08269501 431.24890137]
[33.68668365 416.26107788]
[34.29067230 401.27322388]
[34.89466476 386.28540039]
[25.69781685 398.13522339]
[12.57582760 405.40249634]
[-2.34808993 406.91134644]
[-16.65915871 402.41766357]
[-28.04176331 392.64849854]
[-34.65412903 379.18460083]
[-35.42634201 364.20449829]
[-30.23344612 350.13204956]
[-19.91568756 339.24426270]
[-6.14253807 333.30285645]
[8.85742378 333.26916504]
[22.65711784 339.14868164]
[33.02367020 349.98999023]
[38.28011322 364.04156494]
[42.16239929 349.55267334]
[46.04468536 335.06378174]
[49.92697144 320.57489014]
[53.80925751 306.08599854]
[57.69154358 291.59710693]
[49.40789032 270.73281860]
[65.64727020 254.19010925]
[68.05344391 239.38435364]
[70.45960999 224.57859802]
[63.63382339 214.54837036]
[65.55676270 202.16271973]
[75.73368835 194.17765808]
[78.43750763 179.42337036]
[81.14133453 164.66906738]
[83.84516144 149.91476440]
[86.54898834 135.16046143]
[89.10411835 120.37969208]
[91.51028442 105.57393646]
[89.58499908 97.69522858]
[94.11686707 90.49550629]
[96.82069397 75.74121094]
[99.52452087 60.98691177]
[94.40150452 46.01809692]
[104.30622101 34.89398956]
[107.01004791 20.13968849]
[109.71387482 5.38539076]
[112.41770172 -9.36890793]
[115.12152863 -24.12320709]
[117.22906494 -38.97441101]
[118.73689270 -53.89843369]
[120.24472046 -68.82245636]
[108.84333038 -79.18172455]
[105.76397705 -94.09383392]
[111.98232269 -107.79770660]
[124.92279816 -115.12451935]
[126.43062592 -130.04853821]
[127.93845367 -144.97256470]
[129.44628906 -159.89659119]
[117.48668671 -180.53692627]
[131.11599731 -199.24011230]
[130.81393433 -214.23707581]
[130.51188660 -229.23402405]
[130.20982361 -244.23098755]
[129.90777588 -259.22793579]
[120.01186371 -274.72552490]
[129.00341797 -289.76751709]
[128.39942932 -304.75534058]
[127.79544067 -319.74319458]
[121.11622620 -335.32601929]
[134.24107361 -346.05795288]
[148.18693542 -336.41693115]
[142.78327942 -320.34716797]
[143.38726807 -305.35934448]
[143.99125671 -290.37149048]
[152.68539429 -281.90933228]
[153.27876282 -269.38934326]
[144.90473938 -259.52999878]
[145.20678711 -244.53305054]
[145.50885010 -229.53608704]
[145.81089783 -214.53912354]
[146.11296082 -199.54217529]
[152.00740051 -196.45480347]
[156.67254639 -191.63763428]
[159.61450195 -185.55395508]
[160.50732422 -178.80325317]
[159.22874451 -172.06211853]
[155.87580872 -166.01652527]
[150.75830078 -161.29194641]
[144.37030029 -158.38876343]
[142.86247253 -143.46473694]
[141.35464478 -128.54071045]
[139.84681702 -113.61669159]
[151.06021118 -103.84951782]
[154.41177368 -89.17876434]
[148.41184998 -75.18396759]
[135.16874695 -67.31462860]
[133.66091919 -52.39060593]
[132.15309143 -37.46658325]
[133.87857056 -35.18840790]
[134.77876282 -32.07022858]
[134.52172852 -28.43294907]
[132.90155029 -24.71410942]
[129.87582397 -21.41938019]
[127.17199707 -6.66508245]
[124.46817017 8.08921623]
[121.76435089 22.84351540]
[119.06052399 37.59781265]
[124.37693024 51.51129913]
[114.27881622 63.69073486]
[111.57498932 78.44503784]
[108.87116241 93.19933319]
[106.31604004 107.98011017]
[103.90986633 122.78586578]
[105.62722015 131.81719971]
[101.30328369 137.86428833]
[98.59946442 152.61859131]
[95.89563751 167.37289429]
[93.19181061 182.12719727]
[90.48798370 196.88148499]
[97.08399200 214.04531860]
[85.26536560 226.98477173]
[82.85919189 241.79051208]
[80.45302582 256.59628296]
[86.21453857 261.64663696]
[89.80535126 268.33718872]
[90.81116486 275.79449463]
[89.15164185 283.06384277]
[85.08459473 289.23156738]
[79.16728210 293.53976440]
[72.18042755 295.47940063]
[68.29814148 309.96829224]
[64.41585541 324.45718384]
[60.53357315 338.94607544]
[56.65128708 353.43496704]
[52.76900101 367.92382812]
[55.50645447 375.30313110]
[54.15380096 382.25668335]
[49.88249969 386.88940430]
[49.27850723 401.87722778]
[48.67451859 416.86505127]
[48.07052994 431.85290527]
[47.46654129 446.84072876]
[60.86597824 457.11813354]
[65.47415161 473.19177246]
[59.67160034 488.69686890]
[45.92116928 497.61544800]
[45.61911392 512.61242676]
[45.31705856 527.60937500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 155]
[3 154]
[4 153]
[9 149]
[10 148]
[11 147]
[12 146]
[13 145]
[27 142]
[28 141]
[29 140]
[30 139]
[31 138]
[32 137]
[34 130]
[35 129]
[36 128]
[39 126]
[40 125]
[41 124]
[42 123]
[43 122]
[44 120]
[45 119]
[47 118]
[48 117]
[49 116]
[51 114]
[52 113]
[53 112]
[54 111]
[55 110]
[56 105]
[57 104]
[58 103]
[62 99]
[63 98]
[64 97]
[65 96]
[67 88]
[68 87]
[69 86]
[70 85]
[71 84]
[73 81]
[74 80]
[75 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
