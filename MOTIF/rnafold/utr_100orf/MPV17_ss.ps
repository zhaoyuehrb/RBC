%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAAGUUCCUAGGCCAGCCUGUCACGUGGGAGGGAGGCUCGGCGCUCAGGAAGCAUGGCACUCUGGCGGGCAUACCAGCGGGCCCUGGCCGCUCACCCGUGGAAAGUACAGGUCCUGACAGCUGGGUCCCUGAUGGGCCUGGGUGACAUUAUCU\
) } def
/len { sequence length } bind def

/coor [
[163.04161072 129.53332520]
[148.85179138 124.67031097]
[134.66197205 119.80728912]
[120.47214508 114.94426727]
[111.48165131 122.59671783]
[100.00000000 125.34639740]
[88.51834869 122.59671783]
[79.52785492 114.94426727]
[65.33802795 119.80728912]
[51.14820862 124.67031097]
[36.95838547 129.53332520]
[22.76856613 134.39634705]
[8.62810898 139.40109253]
[-5.46156883 144.54705811]
[-19.49905586 149.83374023]
[-33.48294830 155.26058960]
[-47.46683884 160.68745422]
[-61.39573669 166.25393677]
[-75.26824188 171.95951843]
[-89.14075470 177.66508484]
[-103.01325989 183.37065125]
[-116.88576508 189.07623291]
[-126.70558929 201.48114014]
[-141.41925049 199.16650391]
[-155.29174805 204.87207031]
[-158.82086182 219.98249817]
[-170.57966614 230.10723877]
[-186.04664612 231.35313416]
[-199.27442932 223.24108887]
[-205.17668152 208.89038086]
[-201.48385620 193.81912231]
[-189.61592102 183.82254028]
[-174.13633728 182.74450684]
[-160.99732971 190.99957275]
[-147.12481689 185.29399109]
[-138.29725647 173.29719543]
[-122.59133911 175.20372009]
[-108.71882629 169.49815369]
[-94.84632111 163.79257202]
[-80.97381592 158.08700562]
[-67.10131073 152.38143921]
[-62.08337784 146.89797974]
[-52.89369583 146.70355225]
[-38.90980530 141.27670288]
[-24.92591286 135.84985352]
[-19.79926872 130.46789551]
[-10.60753727 130.45738220]
[3.48214006 125.31141663]
[8.71544456 120.03311920]
[17.90554428 120.20652771]
[32.09536743 115.34350586]
[46.28518677 110.48048401]
[60.47500992 105.61746979]
[74.66483307 100.75444794]
[77.75952148 87.84265137]
[86.95721436 78.26694489]
[83.38990021 63.69730759]
[72.59262085 52.13316727]
[77.08112335 37.93096161]
[73.51380920 23.36132622]
[69.94649506 8.79169083]
[64.83901978 1.14958823]
[66.45667267 -6.10514164]
[63.18159103 -20.74323845]
[59.76022339 -35.34783554]
[56.19291306 -49.91746902]
[52.62559891 -64.48710632]
[49.05828476 -79.05673981]
[34.64535522 -84.80539703]
[26.39251518 -97.94580078]
[27.47315216 -113.42520142]
[37.47174072 -125.29145813]
[52.54361343 -128.98173523]
[66.89333344 -123.07706451]
[75.00314331 -109.84790802]
[73.75464630 -94.38114166]
[63.62792206 -82.62405396]
[67.19523621 -68.05442047]
[70.76255035 -53.48478317]
[74.32985687 -38.91514969]
[79.00142670 -33.13376999]
[77.81968689 -24.01831627]
[81.09476471 -9.38021946]
[84.51612854 5.22437716]
[88.08344269 19.79401207]
[91.65075684 34.36364746]
[102.19287872 44.88566971]
[97.95954132 60.12999344]
[101.52684784 74.69963074]
[118.71110535 82.90220642]
[125.33516693 100.75444794]
[139.52499390 105.61746979]
[153.71481323 110.48048401]
[167.90463257 115.34350586]
[182.47427368 118.91082001]
[197.30566406 121.15351868]
[212.13705444 123.39622498]
[226.96846008 125.63892365]
[241.79985046 127.88162231]
[256.63125610 130.12432861]
[271.46264648 132.36701965]
[280.47305298 130.55029297]
[286.56716919 134.80584717]
[301.35070801 137.34484863]
[312.47561646 126.68919373]
[327.56533813 124.65123749]
[340.80505371 131.80482483]
[347.21697998 145.22218323]
[362.00051880 147.76118469]
[371.04550171 146.12510681]
[377.05322266 150.50173950]
[391.78302002 153.33604431]
[406.51281738 156.17034912]
[421.24261475 159.00465393]
[438.46496582 152.56114197]
[451.29864502 164.49540710]
[466.08221436 167.03440857]
[480.86575317 169.57342529]
[495.64932251 172.11242676]
[509.52719116 164.06358337]
[524.41979980 170.02938843]
[528.90270996 185.43336487]
[519.53710938 198.45892334]
[503.50744629 199.11395264]
[493.11029053 186.89598083]
[478.32675171 184.35697937]
[463.54318237 181.81796265]
[448.75964355 179.27894592]
[438.66940308 186.01412964]
[426.30227661 183.98101807]
[418.40829468 173.73443604]
[403.67849731 170.90013123]
[388.94873047 168.06584167]
[374.21893311 165.23153687]
[359.46151733 162.54473877]
[344.67797852 160.00573730]
[334.15676880 170.51490784]
[319.28894043 172.84114075]
[305.74386597 165.88526917]
[298.81170654 152.12840271]
[284.02816772 149.58938599]
[269.21994019 147.19842529]
[254.38854980 144.95571899]
[239.55714417 142.71301270]
[224.72575378 140.47032166]
[209.89436340 138.22761536]
[195.06295776 135.98490906]
[180.23156738 133.74221802]
[190.08497620 145.05195618]
[192.40078735 159.87211609]
[186.46740723 173.64872742]
[174.10803223 182.14848328]
[159.12048340 182.75956726]
[146.11015320 175.29421997]
[139.07489014 162.04638672]
[140.17648315 147.08689880]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 94]
[2 93]
[3 92]
[4 91]
[8 54]
[9 53]
[10 52]
[11 51]
[12 50]
[13 48]
[14 47]
[15 45]
[16 44]
[17 43]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[24 35]
[25 34]
[56 89]
[57 88]
[59 86]
[60 85]
[61 84]
[63 83]
[64 82]
[65 80]
[66 79]
[67 78]
[68 77]
[95 148]
[96 147]
[97 146]
[98 145]
[99 144]
[100 143]
[101 142]
[103 141]
[104 140]
[108 136]
[109 135]
[111 134]
[112 133]
[113 132]
[114 131]
[116 128]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
