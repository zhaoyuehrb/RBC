%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCGCGCAGCCUCGAGGGAUGGAGGAGGUGCGUGAGGGACACGCGCUCGGUGGCGGGAUGGAAGCCGAUGGGCCCGCGAGCCUCCAGGAGCUGCCUCCCUCGCCACGGUCGCCUUCAC\
) } def
/len { sequence length } bind def

/coor [
[23.97440147 322.77011108]
[17.01974678 309.47976685]
[13.99337578 294.78823853]
[15.12926197 279.83132935]
[20.34083557 265.76300049]
[7.97894335 274.25909424]
[-4.38294935 282.75518799]
[-16.74484253 291.25128174]
[-19.74919891 306.53564453]
[-32.40694809 314.97579956]
[-46.95973206 312.01739502]
[-59.32162476 320.51348877]
[-71.68351746 329.00958252]
[-84.04541016 337.50567627]
[-84.31696320 353.02038574]
[-93.68283081 365.39212036]
[-108.54164886 369.86373901]
[-123.17989349 364.71575928]
[-131.96885681 351.92773438]
[-131.52900696 336.41690063]
[-122.02948761 324.14749146]
[-107.12303925 319.83734131]
[-92.54150391 325.14379883]
[-80.17961121 316.64770508]
[-67.81771851 308.15161133]
[-55.45582581 299.65551758]
[-53.00246429 285.00912476]
[-40.58677673 276.21676636]
[-25.24093628 278.88937378]
[-12.87904263 270.39328003]
[-0.51715022 261.89718628]
[11.84474277 253.40110779]
[21.58646393 241.99501038]
[28.04413033 228.45623779]
[34.50179672 214.91746521]
[40.95946121 201.37867737]
[47.41712952 187.83990479]
[53.87479401 174.30111694]
[60.33246231 160.76234436]
[66.79013062 147.22355652]
[62.48312759 137.79161072]
[64.18019104 127.33853912]
[71.55120087 119.42985535]
[82.28955078 116.90055084]
[89.44692993 103.71829224]
[96.43115234 90.44348145]
[103.24100494 77.07838440]
[110.05086517 63.71328735]
[116.86071777 50.34818649]
[123.31838989 36.80941010]
[129.41943359 23.10622597]
[127.96409607 7.35209799]
[140.20912170 -1.12779975]
[146.31016541 -14.83098125]
[152.41122437 -28.53416252]
[144.62135315 -39.98987198]
[143.54989624 -53.69274521]
[149.37173462 -66.02351379]
[160.45524597 -73.77889252]
[173.81799316 -75.00354004]
[180.27565002 -88.54232025]
[186.73332214 -102.08110046]
[186.59120178 -108.89174652]
[189.54133606 -113.93114471]
[193.89970398 -116.14591217]
[201.05708313 -129.32817078]
[208.21446228 -142.51042175]
[207.24452209 -158.88085938]
[221.08381653 -167.67893982]
[235.49566650 -159.85394287]
[235.65440369 -143.45555115]
[221.39672852 -135.35304260]
[214.23933411 -122.17078400]
[207.08195496 -108.98853302]
[200.27210999 -95.62343597]
[193.81443787 -82.08465576]
[187.35676575 -68.54587555]
[195.64193726 -54.44003296]
[193.91377258 -38.00618362]
[182.65238953 -25.68818092]
[166.11439514 -22.43311310]
[160.01335144 -8.72993183]
[153.91230774 4.97324991]
[155.80403137 19.74723434]
[143.12261963 29.20727539]
[137.02157593 42.91045761]
[137.91767883 47.71644974]
[135.71559143 53.12474060]
[130.22581482 57.15804672]
[123.41596222 70.52313995]
[116.60610199 83.88824463]
[109.79624939 97.25334167]
[109.21542358 105.40094757]
[102.62918854 110.87567902]
[95.47180939 124.05793762]
[97.02561951 144.07412720]
[80.32891083 153.68122864]
[73.87123871 167.22000122]
[67.41357422 180.75878906]
[60.95590973 194.29756165]
[54.49824142 207.83634949]
[48.04057693 221.37512207]
[41.58290863 234.91390991]
[35.12524414 248.45268250]
[48.20264053 241.10545349]
[62.79756546 237.64306641]
[77.78167725 238.33319092]
[91.99655914 243.12245178]
[104.34325409 251.64062500]
[113.86722565 263.22915649]
[119.83218384 276.99212646]
[121.77696228 291.86550903]
[119.55123138 306.69946289]
[113.32704163 320.34716797]
[103.58560181 331.75347900]
[91.08001709 340.03662109]
[76.77709961 344.55618286]
[61.78260803 344.96279907]
[47.25577927 341.22497559]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 32]
[6 31]
[7 30]
[8 29]
[11 26]
[12 25]
[13 24]
[14 23]
[33 104]
[34 103]
[35 102]
[36 101]
[37 100]
[38 99]
[39 98]
[40 97]
[44 95]
[45 94]
[46 92]
[47 91]
[48 90]
[49 89]
[50 86]
[51 85]
[53 83]
[54 82]
[55 81]
[60 77]
[61 76]
[62 75]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
