%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:50:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCGAAACAUCUUUGAGCAAGAUGGGUCUCUACCGCAUCCGCGUGUCCACUGGGGCCUCGCUCUAUGCCGGUUCCAACAACCAGGUGCAGCUGUGGCUGGUCGGCCAGCACGGGGAGGCGG\
) } def
/len { sequence length } bind def

/coor [
[-83.95602417 289.65902710]
[-96.10672760 288.98526001]
[-107.55624390 298.67590332]
[-113.09130096 313.49728394]
[-127.80467224 315.81375122]
[-139.25419617 325.50439453]
[-140.71377563 341.01269531]
[-152.46325684 350.67727661]
[-167.23905945 349.19021606]
[-178.68858337 358.88085938]
[-190.13809204 368.57150269]
[-201.58761597 378.26214600]
[-213.03712463 387.95278931]
[-224.48664856 397.64343262]
[-227.24441528 413.44769287]
[-241.38868713 421.01864624]
[-256.06918335 414.54849243]
[-260.02429199 399.00061035]
[-250.21998596 386.30200195]
[-234.17729187 386.19390869]
[-222.72776794 376.50326538]
[-211.27825928 366.81262207]
[-199.82873535 357.12197876]
[-188.37921143 347.43133545]
[-176.92970276 337.74069214]
[-175.95449829 322.92233276]
[-164.48110962 312.93151855]
[-148.94483948 314.05487061]
[-137.49531555 304.36422729]
[-132.77920532 290.23599243]
[-117.24688721 287.22637939]
[-105.79736328 277.53573608]
[-100.83080292 260.75613403]
[-82.76214600 257.49777222]
[-71.56384277 247.51788330]
[-60.36554718 237.53799438]
[-49.16724777 227.55810547]
[-44.81348801 213.31402588]
[-29.36310005 209.90872192]
[-18.16480064 199.92883301]
[-6.96650267 189.94894409]
[-2.61274147 175.70486450]
[12.83764648 172.29956055]
[24.03594398 162.31967163]
[35.23424149 152.33978271]
[46.43254089 142.35989380]
[57.63084030 132.38002014]
[68.43866730 121.97852325]
[78.84014893 111.17070007]
[76.32219696 96.55246735]
[82.90412140 83.25919342]
[96.05634308 76.39975739]
[98.34608459 61.57555389]
[100.63581848 46.75134659]
[102.92556000 31.92714119]
[105.21530151 17.10293388]
[107.50503540 2.27872753]
[109.79477692 -12.54547882]
[102.78926086 -23.46569633]
[105.07769012 -35.82740402]
[114.88050842 -43.03838348]
[117.54808807 -57.79927826]
[109.62033844 -71.74669647]
[115.71552277 -86.58678436]
[131.15794373 -90.93550110]
[144.10148621 -81.45688629]
[144.61698914 -65.42211914]
[132.30899048 -55.13169861]
[129.64140320 -40.37080383]
[136.48564148 -24.26559448]
[124.61898041 -10.25573921]
[122.32924652 4.56846666]
[120.03950500 19.39267349]
[117.74976349 34.21688080]
[115.46002960 49.04108429]
[113.17028809 63.86529160]
[110.88054657 78.68949890]
[114.62242126 81.06040192]
[117.86312866 84.08043671]
[120.49159241 87.64611053]
[122.41771698 91.63520050]
[137.40670776 91.06066132]
[152.39570618 90.48612213]
[167.38468933 89.91157532]
[182.37368774 89.33703613]
[195.86737061 81.07682800]
[208.88166809 88.32096100]
[223.87065125 87.74642181]
[238.85964966 87.17188263]
[252.44139099 77.98121643]
[267.07135010 85.39041901]
[267.69949341 101.77752686]
[253.67962646 110.28489685]
[239.43418884 102.16087341]
[224.44519043 102.73541260]
[209.45620728 103.30995941]
[197.03463745 111.52906799]
[182.94822693 104.32602692]
[167.95922852 104.90057373]
[152.97024536 105.47511292]
[137.98124695 106.04965210]
[122.99225616 106.62419128]
[109.78797913 121.83390045]
[89.64797211 121.57218933]
[79.24649048 132.38002014]
[77.94997406 137.67895508]
[74.99185944 141.50382996]
[71.24543762 143.46159363]
[67.61072540 143.57830811]
[56.41242599 153.55819702]
[45.21413040 163.53808594]
[34.01583099 173.51797485]
[22.81753159 183.49784851]
[17.66279411 198.45576477]
[3.01338291 201.14724731]
[-8.18491554 211.12713623]
[-19.38321304 221.10700989]
[-24.53795242 236.06492615]
[-39.18736267 238.75640869]
[-50.38566208 248.73629761]
[-61.58395767 258.71618652]
[-72.78225708 268.69607544]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 32]
[3 31]
[5 29]
[6 28]
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[14 20]
[34 122]
[35 121]
[36 120]
[37 119]
[39 117]
[40 116]
[41 115]
[43 113]
[44 112]
[45 111]
[46 110]
[47 109]
[48 105]
[49 104]
[52 77]
[53 76]
[54 75]
[55 74]
[56 73]
[57 72]
[58 71]
[61 69]
[62 68]
[81 102]
[82 101]
[83 100]
[84 99]
[85 98]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
