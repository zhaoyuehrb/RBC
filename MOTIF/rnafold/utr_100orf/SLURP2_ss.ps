%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:26:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCGACCUCACCAGGAGAACAUGCAGCUCGGCACUGGGCUCCUGCUGGCCGCCGUCCUGAGCCUGCAGCUGGCUGCAGCCGAAGCCAUAUGGUGUCACCAGUGCACGGGCUUCGGAGGGU\
) } def
/len { sequence length } bind def

/coor [
[56.64153671 132.12893677]
[51.90746689 138.17366028]
[45.80704498 142.79911804]
[38.74985886 145.70895386]
[31.20613670 146.72151184]
[23.67542267 145.78111267]
[16.65350342 142.96107483]
[10.59976578 138.45805359]
[5.90714169 132.57843018]
[2.87661386 125.71740723]
[-12.11237907 126.29194641]
[-27.10137177 126.86649323]
[-40.59505844 135.12669373]
[-53.60934830 127.88256073]
[-68.59834290 128.45710754]
[-83.58733368 129.03164673]
[-98.57632446 129.60618591]
[-113.56532288 130.18072510]
[-128.55430603 130.75526428]
[-139.26197815 142.06825256]
[-154.47113037 142.43739319]
[-165.19035339 132.15956116]
[-180.17933655 132.73410034]
[-195.15977478 133.50001526]
[-210.12921143 134.45716858]
[-225.09863281 135.41430664]
[-235.34860229 147.44401550]
[-251.10913086 148.61918640]
[-263.02978516 138.24261475]
[-264.03826904 122.47053528]
[-253.53623962 110.66024017]
[-237.75437927 109.81857300]
[-226.05578613 120.44488525]
[-211.08636475 119.48773193]
[-196.11692810 118.53057861]
[-189.56646729 114.92191315]
[-180.75387573 117.74510956]
[-165.76489258 117.17057037]
[-155.86389160 106.10233307]
[-140.67109680 105.30614471]
[-129.12886047 115.76627350]
[-114.13986206 115.19173431]
[-99.15087128 114.61719513]
[-84.16187286 114.04265594]
[-69.17288208 113.46810913]
[-54.18389130 112.89356995]
[-41.76231766 104.67446136]
[-27.67591286 111.87749481]
[-12.68692017 111.30295563]
[2.30207276 110.72841644]
[15.57513142 91.87796021]
[38.62120819 88.42388916]
[57.23077774 102.85990906]
[71.79137421 99.25586700]
[86.35196686 95.65183258]
[96.55839539 86.09565735]
[110.04399109 89.78757477]
[124.60458374 86.18353271]
[139.16517639 82.57949829]
[150.70205688 71.75308990]
[164.91554260 76.20576477]
[179.47613525 72.60172272]
[194.03672791 68.99768066]
[208.59732056 65.39363861]
[223.15791321 61.78960037]
[237.71850586 58.18556213]
[252.27909851 54.58152008]
[260.98239136 39.47124481]
[277.58084106 35.35456467]
[291.76718140 44.28861618]
[306.23098755 40.31389236]
[320.69479370 36.33916855]
[335.15859985 32.36444855]
[349.62240601 28.38972473]
[357.17245483 23.03916740]
[364.50646973 24.50324249]
[379.06704712 20.89920235]
[387.25643921 7.64884281]
[402.07427979 4.20125437]
[414.65600586 12.09022141]
[429.21658325 8.48618126]
[443.77719116 4.88214064]
[458.33779907 1.27810001]
[464.05007935 -13.14928055]
[477.16964722 -21.43522835]
[492.65170288 -20.39362717]
[504.54312134 -10.42499542]
[508.27142334 4.63752699]
[502.40295410 19.00209045]
[489.19427490 27.14522934]
[473.72439575 25.93573952]
[461.94183350 15.83869362]
[447.38122559 19.44273376]
[432.82064819 23.04677391]
[418.26004028 26.65081596]
[410.81088257 39.49782944]
[396.09573364 43.36026001]
[382.67111206 35.45979691]
[368.11050415 39.06383514]
[353.59713745 42.85352707]
[339.13333130 46.82825089]
[324.66952515 50.80297089]
[310.20571899 54.77769470]
[295.74191284 58.75241852]
[290.96054077 70.79027557]
[279.93466187 77.95260620]
[266.60232544 77.41204834]
[255.88313293 69.14211273]
[241.32254028 72.74615479]
[226.76194763 76.35019684]
[212.20135498 79.95423889]
[197.64076233 83.55827332]
[183.08016968 87.16231537]
[168.51957703 90.76635742]
[158.02416992 101.33497620]
[142.76922607 97.14009094]
[128.20863342 100.74413300]
[113.64803314 104.34816742]
[103.44160461 113.90434265]
[89.95600891 110.21242523]
[75.39541626 113.81646729]
[60.83481979 117.42050171]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 50]
[11 49]
[12 48]
[14 46]
[15 45]
[16 44]
[17 43]
[18 42]
[19 41]
[22 38]
[23 37]
[24 35]
[25 34]
[26 33]
[53 122]
[54 121]
[55 120]
[57 118]
[58 117]
[59 116]
[61 114]
[62 113]
[63 112]
[64 111]
[65 110]
[66 109]
[67 108]
[70 104]
[71 103]
[72 102]
[73 101]
[74 100]
[76 99]
[77 98]
[80 95]
[81 94]
[82 93]
[83 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
