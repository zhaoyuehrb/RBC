%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:35:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCACAUAGCUGCGUGGUACGUGACUGGAGGUGUAUCCUUGUCCUCGUCUGAAUCACGCUGAUGUGGCCCCAACCCCACCUCCCUCCCCACCCCAUGAUGUCAGAAAAAACCAGACAGAACAAAUUGGCUGAGGCCAAGAAAAAGUUUACAGACUAUCGUC\
) } def
/len { sequence length } bind def

/coor [
[82.95265961 280.77621460]
[67.17478180 279.86291504]
[56.72648239 268.00506592]
[57.80655289 252.23771667]
[69.77420044 241.91537476]
[70.64102936 226.94042969]
[71.36351013 211.95783997]
[71.94157410 196.96899414]
[72.51963806 181.98013306]
[73.09770203 166.99127197]
[73.53129578 151.99754333]
[73.82038116 137.00032043]
[74.10946655 122.00311279]
[67.15831757 108.71095276]
[54.67624664 100.39242554]
[42.19417572 92.07390594]
[29.71210098 83.75537872]
[17.23002625 75.43685913]
[6.64622593 78.19502258]
[-3.49132133 74.71846008]
[-9.88639927 66.39449310]
[-10.60242462 56.14271164]
[-22.75465012 47.34933853]
[-34.90687561 38.55596542]
[-51.91949844 44.71138382]
[-69.08208466 39.50358582]
[-79.61963654 25.18430328]
[-79.48995972 7.56272507]
[-91.97203064 -0.75579870]
[-104.45410919 -9.07432270]
[-116.93618011 -17.39284515]
[-129.41825867 -25.71137047]
[-141.90032959 -34.02989197]
[-154.38240051 -42.34841537]
[-165.97868347 -32.68373108]
[-179.81448364 -26.68431854]
[-194.76510620 -24.82854080]
[-209.61787415 -27.25831413]
[-223.17044067 -33.76828766]
[-234.32818604 -43.82317352]
[-242.19259644 -56.60174561]
[-246.13357544 -71.06391907]
[-245.83998108 -86.03540039]
[-241.34417725 -100.30301666]
[-253.82624817 -108.62154388]
[-269.60076904 -109.83617401]
[-275.90075684 -123.33282471]
[-288.38284302 -131.65135193]
[-300.86489868 -139.96986389]
[-313.34698486 -148.28839111]
[-326.75085449 -140.89958191]
[-342.05340576 -140.59780884]
[-355.73815918 -147.45242310]
[-364.66052246 -159.88825989]
[-366.77014160 -175.04768372]
[-361.58230591 -189.44715881]
[-350.28909302 -199.77778625]
[-335.48559570 -203.66566467]
[-320.57360840 -200.21739197]
[-308.97973633 -190.22535706]
[-303.36819458 -175.98565674]
[-305.02844238 -160.77046204]
[-292.54638672 -152.45195007]
[-280.06430054 -144.13342285]
[-267.58224487 -135.81489563]
[-252.70051575 -135.19525146]
[-245.50773621 -121.10361481]
[-233.02566528 -112.78509521]
[-221.58775330 -122.42624664]
[-207.88276672 -128.45985413]
[-193.01791382 -130.38911438]
[-178.19679260 -128.04920959]
[-164.62188721 -121.62130737]
[-153.39697266 -111.61863708]
[-145.43745422 -98.84545135]
[-141.39564514 -84.33239746]
[-141.60731506 -69.25335693]
[-146.06387329 -54.83049011]
[-133.58180237 -46.51196671]
[-121.09973145 -38.19344330]
[-108.61766052 -29.87491989]
[-96.13558197 -21.55639648]
[-83.65351105 -13.23787212]
[-71.17143250 -4.91934872]
[-60.48734283 -10.79584980]
[-48.24510574 -11.55784702]
[-36.78027725 -6.99812508]
[-28.30648613 2.06935120]
[-24.48808861 13.95402241]
[-26.11350250 26.40373802]
[-13.96127605 35.19711304]
[-1.80905068 43.99048615]
[17.49223709 44.51051331]
[25.54854965 62.95478439]
[38.03062439 71.27330780]
[50.51269913 79.59183502]
[62.99477005 87.91035461]
[75.47684479 96.22888184]
[91.03456879 74.71765900]
[119.37409973 78.63887787]
[132.45977783 71.30640411]
[145.54544067 63.97393417]
[158.63111877 56.64146423]
[158.14762878 41.34359360]
[164.83921814 27.57837868]
[177.16821289 18.50895882]
[192.30151367 16.21942520]
[206.76158142 21.23589516]
[217.22560120 32.40561676]
[221.28903198 47.16187668]
[218.01811218 62.11378860]
[208.16447449 73.82551575]
[193.99243164 79.60578918]
[178.75859070 78.12633514]
[165.96359253 69.72714233]
[152.87791443 77.05960846]
[139.79223633 84.39208221]
[126.70656586 91.72455597]
[127.14016724 106.71828461]
[140.62770081 113.28230286]
[154.11523438 119.84631348]
[167.60278320 126.41033173]
[184.03379822 116.69415283]
[202.85926819 118.77021790]
[216.56057739 131.62919617]
[219.77386475 149.99134827]
[233.61819458 155.76496887]
[247.46252441 161.53858948]
[261.30685425 167.31221008]
[275.15115356 173.08583069]
[291.33694458 170.44900513]
[301.50244141 183.31736755]
[295.19027710 198.45303345]
[278.89385986 200.28575134]
[269.37753296 186.93016052]
[255.53321838 181.15653992]
[241.68888855 175.38290405]
[227.84457397 169.60928345]
[214.00024414 163.83566284]
[205.67852783 171.38543701]
[195.08445740 175.28092957]
[183.75123596 174.91723633]
[173.33454895 170.30886841]
[165.37068176 162.09324646]
[161.04991150 151.44284058]
[161.03875732 139.89787292]
[147.55122375 133.33386230]
[134.06369019 126.76983643]
[120.57614899 120.20582581]
[104.53755188 126.43834686]
[89.10668182 122.29219818]
[88.81759644 137.28941345]
[88.52851105 152.28662109]
[91.50308228 160.97503662]
[88.08656311 167.56933594]
[87.50849915 182.55819702]
[86.93043518 197.54705811]
[86.35237122 212.53590393]
[89.15893555 221.28002930]
[85.61596680 227.80726624]
[84.74913788 242.78219604]
[95.44582367 254.41647339]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 161]
[6 160]
[7 158]
[8 157]
[9 156]
[10 155]
[11 153]
[12 152]
[13 151]
[14 98]
[15 97]
[16 96]
[17 95]
[18 94]
[22 92]
[23 91]
[24 90]
[28 84]
[29 83]
[30 82]
[31 81]
[32 80]
[33 79]
[34 78]
[44 68]
[45 67]
[47 65]
[48 64]
[49 63]
[50 62]
[100 118]
[101 117]
[102 116]
[103 115]
[119 149]
[120 148]
[121 147]
[122 146]
[126 139]
[127 138]
[128 137]
[129 136]
[130 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
