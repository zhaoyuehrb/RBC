%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUCUUUUUCUUUAUUCAGUGGAUUGUUAGUUCUUCUGCUGUUAGGAAGCCACUAUGUCUGGACGUGGAAAGCAAGGCGGCAAAGCUCGGGCAAAAGCUAAAACGCGUUCUUCCAGGGCCGGUCUUCAGUUUCCAGUUGGCCGUGUGCACCGCC\
) } def
/len { sequence length } bind def

/coor [
[124.18638611 121.69496155]
[117.95365143 127.73277283]
[110.22615051 131.98828125]
[101.51147461 134.09574890]
[92.40527344 133.83345032]
[83.55049896 131.14433289]
[75.59207153 126.14534760]
[69.12994385 119.12413025]
[64.67414093 110.52332306]
[50.87445068 116.40281677]
[37.07476044 122.28231812]
[23.27506828 128.16181946]
[9.47537708 134.04132080]
[7.24882603 145.78900146]
[-0.31588137 154.89283752]
[-11.23316288 159.14558411]
[-22.72444916 157.58988953]
[-31.92517662 150.73114014]
[-45.95042038 156.05021667]
[-59.97566223 161.36929321]
[-74.00090790 166.68835449]
[-88.02615356 172.00743103]
[-102.05139160 177.32650757]
[-116.07663727 182.64558411]
[-117.85818481 197.84704590]
[-126.50970459 210.47280884]
[-140.04315186 217.62155151]
[-155.34863281 217.65054321]
[-168.90905762 210.55311584]
[-177.60835266 197.96023560]
[-179.44746399 182.76562500]
[-174.00379944 168.46089172]
[-162.52825928 158.33319092]
[-147.65783691 154.70976257]
[-132.80966187 158.42324829]
[-121.39571381 168.62033081]
[-107.37046814 163.30126953]
[-93.34522247 157.98219299]
[-79.31998444 152.66311646]
[-65.29473877 147.34403992]
[-51.26949310 142.02496338]
[-37.24425125 136.70590210]
[-30.80069923 119.61575317]
[-13.64017296 112.48695374]
[3.59587812 120.24162292]
[17.39556885 114.36212921]
[31.19526100 108.48262787]
[44.99495316 102.60312653]
[58.79464340 96.72363281]
[62.67692947 82.23474121]
[53.66579819 70.24310303]
[36.32910156 68.12212372]
[26.06896210 54.40607834]
[28.82027245 37.84108353]
[19.56949043 26.03333092]
[10.31870651 14.22557831]
[1.06792367 2.41782665]
[-8.18285942 -9.38992596]
[-17.43364334 -21.19767761]
[-32.84063721 -26.81519699]
[-35.41234207 -43.01144409]
[-22.50320244 -53.12510681]
[-7.39303875 -46.75211716]
[-5.62589025 -30.44846153]
[3.62489271 -18.64070892]
[12.87567616 -6.83295631]
[22.12645912 4.97479582]
[31.37724113 16.78254700]
[40.62802505 28.59029961]
[53.54421616 28.34577370]
[64.39473724 35.70977402]
[69.07465363 48.16817474]
[65.65744019 61.23196793]
[74.66857147 73.22360992]
[97.36254120 65.05992889]
[118.94805145 72.71495819]
[130.16290283 91.27838898]
[145.15074158 90.67440033]
[160.13856506 90.07041168]
[175.12640381 89.46642303]
[190.11424255 88.86243439]
[196.90693665 76.83144379]
[208.67176819 69.79653168]
[222.26802063 69.51065063]
[234.12750244 75.94145203]
[241.19088745 87.30793762]
[256.18783569 87.00588226]
[269.82940674 78.99225616]
[282.70989990 86.47169495]
[297.70687866 86.16963959]
[312.70382690 85.86758423]
[326.34539795 77.85395813]
[339.22589111 85.33340454]
[354.22283936 85.03134918]
[369.21981812 84.72928619]
[384.19244385 83.82361603]
[399.11645508 82.31578064]
[414.04049683 80.80795288]
[428.96450806 79.30012512]
[443.88854980 77.79228973]
[458.79663086 76.13426971]
[473.68725586 74.32621765]
[486.45416260 64.98190308]
[500.02127075 71.12868500]
[514.91192627 69.32064056]
[524.65069580 57.16356659]
[539.77764893 55.54207230]
[551.30755615 64.90140533]
[566.19818115 63.09335709]
[581.08880615 61.28530884]
[595.97943115 59.47725677]
[610.87005615 57.66920853]
[625.86492920 49.75775528]
[637.61816406 61.97648621]
[629.13055420 76.65290070]
[612.67810059 72.55983734]
[597.78747559 74.36788940]
[582.89685059 76.17594147]
[568.00622559 77.98399353]
[553.11560059 79.79203796]
[544.16058350 91.63869476]
[529.08508301 93.68444061]
[516.71997070 84.21127319]
[501.82934570 86.01931763]
[490.12747192 95.23431396]
[475.49530029 89.21685028]
[460.60467529 91.02490234]
[454.30752563 94.97583008]
[445.39636230 92.71631622]
[430.47235107 94.22414398]
[415.54830933 95.73197174]
[400.62429810 97.23980713]
[385.70028687 98.74763489]
[383.81329346 100.89395142]
[380.93817139 102.39966583]
[377.32299805 102.87537384]
[373.35522461 102.03179169]
[369.52188110 99.72624969]
[354.52490234 100.02830505]
[339.52795410 100.33036041]
[326.95907593 108.32238007]
[313.00588989 100.86454773]
[298.00894165 101.16660309]
[283.01196289 101.46865845]
[270.44308472 109.46067810]
[256.48989868 102.00283813]
[241.49295044 102.30489349]
[232.57438660 116.05532837]
[217.06925964 121.85787201]
[200.99563599 117.24970245]
[190.71823120 103.85026550]
[175.73039246 104.45425415]
[160.74255371 105.05824280]
[145.75473022 105.66223145]
[130.76689148 106.26622772]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 49]
[10 48]
[11 47]
[12 46]
[13 45]
[18 42]
[19 41]
[20 40]
[21 39]
[22 38]
[23 37]
[24 36]
[50 74]
[51 73]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
[77 155]
[78 154]
[79 153]
[80 152]
[81 151]
[86 147]
[87 146]
[89 144]
[90 143]
[91 142]
[93 140]
[94 139]
[95 138]
[96 133]
[97 132]
[98 131]
[99 130]
[100 129]
[101 127]
[102 126]
[104 124]
[105 123]
[108 120]
[109 119]
[110 118]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
