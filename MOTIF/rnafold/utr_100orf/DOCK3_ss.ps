%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGGGCCGCGCCCGGCACGGCCAUGUGGACCCCCACGGAGGAGGAGAAAUACGGCGUAGUGAUAUGCAGCUUUCGAGGAUCUGUCCCUCAAGGGUUGGUCUUAGAAAUAGGAGAAACAGUCC\
) } def
/len { sequence length } bind def

/coor [
[21.00493622 160.53639221]
[11.23434925 171.91777039]
[1.46376193 183.29913330]
[-1.65455115 198.80999756]
[-15.81548500 203.42704773]
[-25.58607292 214.80842590]
[-35.35665894 226.18978882]
[-45.12724686 237.57116699]
[-54.89783478 248.95254517]
[-58.01614761 264.46340942]
[-72.17707825 269.08044434]
[-81.94766998 280.46182251]
[-87.67713165 296.41830444]
[-104.59611511 295.32995605]
[-108.23392487 278.77087402]
[-93.32904053 270.69122314]
[-83.55845642 259.30987549]
[-81.13899994 244.61308289]
[-66.27920532 239.18194580]
[-56.50861740 227.80058289]
[-46.73803329 216.41920471]
[-36.96744537 205.03784180]
[-27.19685745 193.65646362]
[-24.77740097 178.95968628]
[-9.91761017 173.52854919]
[-0.14702269 162.14718628]
[9.62356472 150.76580811]
[19.24919510 139.26158142]
[28.72832680 127.63634491]
[38.20745850 116.01110840]
[47.68658829 104.38587952]
[43.92679977 89.86472321]
[29.99700546 84.30047607]
[15.99784279 78.91313171]
[1.93156087 73.70355225]
[-13.18798065 79.06816101]
[-26.73240471 70.47001648]
[-28.31158638 54.50487137]
[-16.71411514 43.41982651]
[-0.83657688 45.71837616]
[7.14113951 59.63727188]
[21.20742226 64.84684753]
[28.65743637 64.21222687]
[35.56124878 70.37068176]
[49.49104309 75.93492126]
[55.64677048 71.65041351]
[46.08986664 60.08903122]
[36.53295898 48.52764893]
[25.98724937 37.86050415]
[31.57801247 23.94132996]
[46.57244492 23.53262138]
[52.91312408 37.12671661]
[60.43567276 50.10405350]
[67.95822144 63.08139038]
[74.11394501 58.79687881]
[73.73395538 43.80169296]
[73.35396576 28.80650520]
[72.97397614 13.81132030]
[72.59398651 -1.18386626]
[63.58033371 -14.88372612]
[71.17874908 -29.41631317]
[87.57263947 -29.83174706]
[95.89736176 -15.70266628]
[87.58917236 -1.56385696]
[87.96916199 13.43132877]
[88.34915161 28.42651558]
[88.72914124 43.42169952]
[89.10913086 58.41688919]
[107.23471069 60.21175385]
[121.89153290 69.06717682]
[130.69732666 82.46887970]
[143.62391663 74.85944366]
[156.55049133 67.25000763]
[169.47706604 59.64056778]
[175.36871338 52.50770187]
[182.82891846 52.00686646]
[195.94410706 44.72734070]
[209.05931091 37.44781113]
[222.17451477 30.16827965]
[224.97183228 14.78292942]
[237.03717041 4.83498478]
[252.67364502 5.02155972]
[264.49816895 15.25456047]
[266.92761230 30.70227623]
[258.81481934 44.07076645]
[243.99041748 49.04784393]
[229.45404053 43.28347778]
[216.33883667 50.56300735]
[203.22364807 57.84253693]
[190.10844421 65.12207031]
[177.08650208 72.56714630]
[164.15992737 80.17658234]
[151.23335266 87.78601837]
[138.30676270 95.39546204]
[137.16777039 110.35214996]
[148.79301453 119.83128357]
[160.41824341 129.31040955]
[175.93132019 127.90245056]
[187.58592224 137.68124390]
[188.83259583 152.47926331]
[200.45782471 161.95838928]
[212.08306885 171.43753052]
[223.70829773 180.91665649]
[235.33352661 190.39578247]
[251.59965515 192.48031616]
[257.67697144 207.71180725]
[247.31365967 220.42140198]
[231.17060852 217.53456116]
[225.85440063 202.02102661]
[214.22917175 192.54188538]
[202.60392761 183.06275940]
[190.97869873 173.58363342]
[179.35346985 164.10450745]
[164.60740662 165.86216736]
[152.68272400 156.41458130]
[150.93911743 140.93565369]
[139.31387329 131.45651245]
[127.68864441 121.97738647]
[93.32546234 138.59524536]
[59.31182098 113.86500549]
[49.83269119 125.49024200]
[40.35356140 137.11547852]
[30.87442970 148.74070740]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[5 23]
[6 22]
[7 21]
[8 20]
[9 19]
[11 17]
[12 16]
[28 123]
[29 122]
[30 121]
[31 120]
[32 45]
[33 44]
[34 42]
[35 41]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
[71 94]
[72 93]
[73 92]
[74 91]
[76 90]
[77 89]
[78 88]
[79 87]
[95 118]
[96 117]
[97 116]
[100 113]
[101 112]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
