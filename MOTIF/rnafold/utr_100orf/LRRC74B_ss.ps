%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:34:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUGAGACUGCGAGAGGGUCGUAACCAUGAGGGGUUCCUGUGAGAGGUCUGGGGAGGAUGAAGAGCAGAAAGAAGAGGCUAUGGUGGCCUGUGGGCGUCUUUCAGGGGUCCCCGAGGCCGAGCAGG\
) } def
/len { sequence length } bind def

/coor [
[13.40687180 462.47494507]
[3.59115291 474.28796387]
[-10.82156849 479.59542847]
[-25.95434189 476.96963501]
[-37.73652649 467.11694336]
[-42.99877548 452.68765259]
[-40.32556915 437.56317139]
[-30.43598747 425.81195068]
[-15.99027729 420.59494019]
[-13.42584896 405.81576538]
[-10.86142063 391.03662109]
[-8.29699230 376.25744629]
[-16.38094902 369.64181519]
[-20.97464180 360.16967773]
[-21.16716385 349.56283569]
[-16.85462189 339.78137207]
[-8.77196503 332.66159058]
[1.63138008 329.57125854]
[5.27608299 315.02078247]
[8.92078590 300.47030640]
[12.56548786 285.91983032]
[6.50999594 281.56735229]
[1.74453914 275.80239868]
[-1.40962708 268.99597168]
[-2.73540068 261.58981323]
[-2.13474321 254.06771851]
[0.36416343 246.92396545]
[4.60803080 240.63087463]
[10.32782078 235.60749817]
[17.15578270 232.19180298]
[24.64908791 230.61788940]
[32.31854248 231.00001526]
[38.73186874 217.44018555]
[45.14519501 203.88034058]
[51.55852127 190.32049561]
[57.80496597 176.68298340]
[63.88358688 162.96983337]
[69.96220398 149.25668335]
[76.04082489 135.54354858]
[82.11944580 121.83039093]
[88.19806671 108.11724854]
[86.90490723 94.19534302]
[98.08879089 85.80413055]
[104.16741180 72.09098816]
[110.24602509 58.37783813]
[116.32464600 44.66469193]
[114.84353638 28.91296768]
[127.07466125 20.41304398]
[133.15328979 6.69989824]
[139.23190308 -7.01324797]
[145.31051636 -20.72639465]
[151.38914490 -34.43954086]
[149.90803528 -50.19126511]
[162.13916016 -58.69118881]
[168.21777344 -72.40433502]
[160.60760498 -85.79804993]
[162.32325745 -100.92781830]
[172.49851990 -112.01509857]
[187.07681274 -114.94963837]
[193.15542603 -128.66278076]
[185.35101318 -140.09638977]
[184.25152588 -153.78700256]
[190.03898621 -166.12294006]
[201.09280396 -173.90342712]
[214.44186401 -175.16882324]
[220.85519409 -188.72865295]
[227.26852417 -202.28849792]
[218.00759888 -214.47430420]
[215.48193359 -229.56999207]
[220.27188110 -244.10665894]
[231.27676392 -254.74391174]
[245.96774292 -259.03738403]
[260.96893311 -256.00042725]
[272.83316040 -246.33097839]
[278.83413696 -232.25094604]
[277.59286499 -216.99586487]
[269.39456177 -204.07119751]
[256.12316895 -196.44697571]
[240.82835388 -195.87516785]
[234.41503906 -182.31533813]
[228.00170898 -168.75549316]
[236.33390808 -154.66778564]
[234.64833069 -138.22109985]
[223.40895081 -125.87153625]
[206.86857605 -122.58415985]
[200.78996277 -108.87101746]
[208.40579224 -96.09850311]
[207.02395630 -81.11335754]
[196.96568298 -69.68161774]
[181.93092346 -66.32571411]
[175.85231018 -52.61256790]
[177.76820374 -37.84169769]
[165.10229492 -28.36092186]
[159.02366638 -14.64777470]
[152.94505310 -0.93462831]
[146.86642456 12.77851772]
[140.78781128 26.49166489]
[142.70370483 41.26253510]
[130.03779602 50.74331284]
[123.95917511 64.45645905]
[117.88055420 78.16960907]
[111.80193329 91.88275146]
[113.09509277 105.80465698]
[101.91120911 114.19586945]
[95.83258820 127.90901184]
[89.75397491 141.62216187]
[83.67535400 155.33531189]
[77.59673309 169.04844666]
[71.51811218 182.76159668]
[70.88294220 191.98229980]
[65.11836243 196.73382568]
[58.70503616 210.29367065]
[52.29170990 223.85350037]
[45.87838364 237.41334534]
[56.31306458 258.53399658]
[48.27951050 280.41326904]
[27.11595726 289.56454468]
[23.47125435 304.11502075]
[19.82655144 318.66546631]
[16.18184853 333.21594238]
[27.44929123 349.73013306]
[23.17184639 368.95095825]
[6.48217297 378.82186890]
[3.91774440 393.60104370]
[1.35331619 408.38021851]
[-1.21111214 423.15936279]
[10.63260841 432.93801880]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 126]
[10 125]
[11 124]
[12 123]
[18 120]
[19 119]
[20 118]
[21 117]
[32 114]
[33 113]
[34 112]
[35 111]
[36 109]
[37 108]
[38 107]
[39 106]
[40 105]
[41 104]
[43 102]
[44 101]
[45 100]
[46 99]
[48 97]
[49 96]
[50 95]
[51 94]
[52 93]
[54 91]
[55 90]
[59 86]
[60 85]
[65 81]
[66 80]
[67 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
