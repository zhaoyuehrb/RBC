%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:25:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACUUGAACUUGGAAUCUUAUAACUUGAAGAACUGCCCUGGAGAAAGGAAGAAACUUAUAAUAAAUGGGAAAUUAUAAAUCUAGACCAACCCAAACUUGUACUGAUGAAUGGAAGAAAAAAGUCAGUGAAUCAUAUGUUAUCACAAUAGAAAGAUUAGAAGAUG\
) } def
/len { sequence length } bind def

/coor [
[116.65320587 486.95861816]
[103.40264130 494.46475220]
[88.24398804 495.92602539]
[73.80358887 491.08923340]
[62.58331680 480.79235840]
[56.52716064 466.81942749]
[56.68437958 451.59130859]
[63.02773666 437.74639893]
[74.45820618 427.68338013]
[88.99539185 423.14575195]
[90.69500732 408.24237061]
[92.39462280 393.33895874]
[82.95160675 381.87750244]
[84.46295929 366.73913574]
[96.54881287 356.91213989]
[98.24842834 342.00872803]
[99.94804382 327.10534668]
[101.64765930 312.20193481]
[103.34727478 297.29855347]
[105.04689026 282.39514160]
[105.47265625 267.40118408]
[104.62147522 252.42535400]
[103.77029419 237.44952393]
[102.91911316 222.47369385]
[102.06793976 207.49786377]
[90.28912354 192.19570923]
[99.51873779 174.30686951]
[98.10146332 159.37397766]
[96.68418884 144.44107056]
[88.01182556 143.75982666]
[79.48558044 141.37315369]
[71.44302368 137.31384277]
[64.21408844 131.68186951]
[58.10762405 124.64253235]
[53.39847183 116.42196655]
[50.31544113 107.30001831]
[49.03082657 97.60083008]
[49.65187073 87.68130493]
[34.69483185 86.54687500]
[19.73778915 85.41244507]
[7.91412115 95.89940643]
[-7.85666132 94.87083435]
[-18.21803284 82.93695068]
[-17.02277374 67.17792511]
[-4.98001146 56.94330597]
[10.76549721 58.30511093]
[20.87222099 70.45540619]
[35.82926178 71.58983612]
[50.78630066 72.72426605]
[56.03918457 67.37102509]
[43.45701981 59.20467758]
[30.87485695 51.03833389]
[18.29269409 42.87199020]
[5.71053219 34.70564651]
[-8.50688934 29.92391777]
[-17.80480766 18.15324402]
[-19.16462517 3.21500897]
[-12.14487743 -10.04105091]
[0.97545844 -17.31131935]
[15.93682766 -16.23548126]
[27.88198090 -7.16281319]
[32.93299103 6.96305561]
[41.33597946 19.38842392]
[49.73896790 31.81379318]
[58.14195633 44.23916245]
[66.54494476 56.66453171]
[71.79782867 51.31128311]
[70.38054657 36.37839127]
[68.96327209 21.44549561]
[67.54599762 6.51260233]
[52.71248245 3.65890431]
[39.28444290 -3.25950861]
[28.35042763 -13.68179226]
[20.79680824 -26.76305771]
[17.23592186 -41.44286728]
[17.95643425 -56.53118896]
[22.89993668 -70.80488586]
[31.66568184 -83.10685730]
[43.54307175 -92.43982697]
[57.56925583 -98.04721832]
[72.60719299 -99.47446442]
[87.43783569 -96.60586548]
[100.85891724 -89.67396545]
[111.78245544 -79.24070740]
[119.32292938 -66.15185547]
[122.86906433 -51.46847916]
[122.13339996 -36.38088608]
[117.17556000 -22.11216164]
[108.39746094 -9.81900597]
[96.51069641 -0.49797270]
[82.47888947 5.09532547]
[83.89616394 20.02821922]
[85.31344604 34.96111298]
[86.73072052 49.89400864]
[96.29402161 49.34051514]
[105.60223389 50.55990982]
[114.33616638 53.43898392]
[122.20954132 57.80884933]
[128.97836304 63.45316696]
[134.44834900 70.11785889]
[138.48036194 77.52189636]
[152.52104187 72.24368286]
[166.56170654 66.96546173]
[180.60238647 61.68724823]
[194.64305115 56.40903473]
[208.68373108 51.13082123]
[222.72439575 45.85260391]
[222.84712219 30.67533875]
[228.44787598 16.56874084]
[238.76916504 5.44060946]
[252.41514587 -1.20406520]
[267.54031372 -2.46664619]
[282.09909058 1.82362056]
[294.12252808 11.08651161]
[301.98455811 24.06929588]
[304.62191772 39.01616287]
[301.67791748 53.90566254]
[293.55072021 66.72412109]
[281.33944702 75.73794556]
[266.69555664 79.72808838]
[251.59954834 78.15491486]
[238.09301758 71.23118591]
[228.00260925 59.89327621]
[213.96194458 65.17149353]
[199.92126465 70.44970703]
[185.88059998 75.72792053]
[171.83992004 81.00613403]
[157.79925537 86.28435516]
[143.75859070 91.56256866]
[142.45796204 113.53977203]
[130.79536438 132.21257019]
[111.61708069 143.02380371]
[113.03435516 157.95669556]
[114.45163727 172.88958740]
[123.26371765 179.36003113]
[126.96044922 189.41433716]
[124.53987885 199.62353516]
[117.04376984 206.64668274]
[117.89494324 221.62251282]
[118.74612427 236.59834290]
[119.59730530 251.57417297]
[120.44848633 266.55001831]
[129.40736389 254.51927185]
[143.40026855 249.11572266]
[158.11982727 252.00270081]
[169.03495789 262.29153442]
[172.78570557 276.81503296]
[168.21748352 291.10247803]
[156.73649597 300.75582886]
[141.87692261 302.80352783]
[128.21292114 296.61523438]
[119.95029449 284.09475708]
[118.25067902 298.99816895]
[116.55106354 313.90155029]
[114.85144806 328.80496216]
[113.15183258 343.70834351]
[111.45221710 358.61175537]
[121.01513672 370.90762329]
[119.07918549 385.99755859]
[107.29801941 395.03857422]
[105.59840393 409.94198608]
[103.89879608 424.84536743]
[117.04103088 432.53964233]
[125.91224670 444.91787720]
[128.97546387 459.83554077]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 162]
[11 161]
[12 160]
[15 157]
[16 156]
[17 155]
[18 154]
[19 153]
[20 152]
[21 142]
[22 141]
[23 140]
[24 139]
[25 138]
[27 134]
[28 133]
[29 132]
[38 49]
[39 48]
[40 47]
[67 94]
[68 93]
[69 92]
[70 91]
[101 129]
[102 128]
[103 127]
[104 126]
[105 125]
[106 124]
[107 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
