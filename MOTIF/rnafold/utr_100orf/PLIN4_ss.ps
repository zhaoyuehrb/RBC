%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:11:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCAGACCCUGGGCAGCUUCUUUGGGUCCCUGCCUGGCUUCAGCUCUGCCCGGAACCUGGUGGCCAACGCACAUAGCUCGGCGAGAGCCCGGCCGGCCG\
) } def
/len { sequence length } bind def

/coor [
[15.52254772 196.38499451]
[7.66383839 183.60842896]
[10.86244392 168.95275879]
[-2.83440447 175.06800842]
[-16.53125381 181.18325806]
[-30.03129387 187.72152710]
[-43.32146454 194.67648315]
[-56.61163330 201.63143921]
[-69.90180206 208.58639526]
[-83.19197083 215.54133606]
[-91.83158112 228.79531860]
[-106.69559479 227.84115601]
[-119.98576355 234.79609680]
[-133.27593994 241.75105286]
[-137.75601196 256.90704346]
[-151.68054199 264.38256836]
[-166.78833008 259.74249268]
[-174.11619568 245.73971558]
[-169.31666565 230.68182373]
[-155.23718262 223.50241089]
[-140.23088074 228.46089172]
[-126.94071198 221.50593567]
[-113.65054321 214.55097961]
[-105.96154022 201.79447937]
[-90.14692688 202.25117493]
[-76.85675812 195.29621887]
[-63.56658554 188.34126282]
[-50.27641678 181.38630676]
[-36.98624420 174.43136597]
[-34.69437027 170.05665588]
[-29.53984833 167.16864014]
[-22.64650726 167.48641968]
[-8.94965839 161.37115479]
[4.74719000 155.25590515]
[17.81463432 147.89099121]
[30.13896751 139.34051514]
[42.46330261 130.79002380]
[54.78763962 122.23954010]
[67.11196899 113.68905640]
[79.43630981 105.13857269]
[80.21903229 92.38529205]
[88.18989563 82.39909363]
[100.45239258 78.80883026]
[112.55049133 82.91914368]
[125.13478088 74.75608063]
[137.71907043 66.59301758]
[150.30337524 58.42995834]
[162.88766479 50.26689529]
[166.29896545 35.06818771]
[179.17750549 26.96894836]
[193.64613342 30.31476974]
[206.23042297 22.15170670]
[218.81472778 13.98864460]
[231.39901733 5.82558203]
[233.09973145 -5.14316702]
[240.48178101 -13.13291836]
[250.85044861 -15.59158134]
[260.61856079 -11.92273140]
[273.68600464 -19.28764153]
[286.75344849 -26.65255356]
[299.70477295 -34.21979523]
[312.53683472 -41.98754120]
[325.36892700 -49.75528336]
[327.58547974 -65.23497772]
[339.26806641 -75.62975311]
[354.90048218 -76.03152466]
[367.10159302 -66.25057983]
[370.11041260 -50.90518951]
[362.50625610 -37.24097061]
[347.87957764 -31.70975494]
[333.13665771 -36.92321014]
[320.30459595 -29.15546608]
[307.47250366 -21.38772202]
[303.30718994 -15.12070274]
[294.11834717 -13.58510971]
[281.05090332 -6.22019863]
[267.98345947 1.14471257]
[259.60159302 18.45243645]
[239.56207275 18.40987396]
[226.97778320 26.57293701]
[214.39349365 34.73600006]
[201.80920410 42.89906311]
[198.96572876 57.47473526]
[186.31974792 65.93251038]
[171.05072021 62.85118866]
[158.46643066 71.01425171]
[145.88214111 79.17731476]
[133.29785156 87.34037781]
[120.71355438 95.50344086]
[117.70701599 111.65041351]
[104.06830597 120.80190277]
[87.98679352 117.46291351]
[75.66245270 126.01339722]
[63.33812332 134.56387329]
[51.01378632 143.11436462]
[38.68945312 151.66484070]
[26.36511803 160.21533203]
[40.55848694 165.06797791]
[47.41932678 178.40698242]
[43.11214447 192.77528381]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 34]
[4 33]
[5 32]
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[12 23]
[13 22]
[14 21]
[35 97]
[36 96]
[37 95]
[38 94]
[39 93]
[40 92]
[44 89]
[45 88]
[46 87]
[47 86]
[48 85]
[51 82]
[52 81]
[53 80]
[54 79]
[58 77]
[59 76]
[60 75]
[61 73]
[62 72]
[63 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
