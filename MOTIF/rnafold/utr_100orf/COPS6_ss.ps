%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGGGCCGAGGCUGGCGGGCGCGGGGAAAAUGGCGGCGGCGGCGGCGGCGGCUGCAGCUACGAACGGGACCGGAGGAAGCAGCGGGAUGGAGGUGGAUGCAGCAGUAGUCCCCAGCGUGAUGGCCUGCG\
) } def
/len { sequence length } bind def

/coor [
[75.44421387 419.92178345]
[81.49055481 404.08264160]
[81.49055481 389.08264160]
[81.49055481 374.08264160]
[81.49055481 359.08264160]
[81.49055481 344.08264160]
[78.31376648 337.32815552]
[81.67330170 328.72674561]
[82.03026581 313.73098755]
[82.38722992 298.73526001]
[68.98733521 286.36752319]
[68.78056335 267.81689453]
[82.35707092 254.71353149]
[82.00010681 239.71777344]
[81.64314270 224.72201538]
[81.28617859 209.72627258]
[80.92921448 194.73051453]
[77.59258270 188.05354309]
[80.74646759 179.37461853]
[80.74646759 164.37461853]
[80.74646759 149.37461853]
[80.74646759 134.37461853]
[69.29413605 124.68729401]
[54.50182343 127.17474365]
[49.20969391 141.59309387]
[37.40711975 151.42137146]
[22.26893997 154.01579285]
[7.86724472 148.67849731]
[-1.92398024 136.84518433]
[-4.47094536 121.69893646]
[0.91147012 107.31404114]
[12.77542400 97.55995941]
[27.92957115 95.06048584]
[42.29752350 100.48796082]
[52.01437378 112.38243103]
[66.80668640 109.89498138]
[68.18584442 100.06341553]
[72.18376160 91.82854462]
[59.37554550 84.02152252]
[43.56481934 83.44571686]
[36.72425461 70.21484375]
[23.91603661 62.40782547]
[7.51758289 62.55870819]
[-0.57810372 48.29715729]
[7.95712471 34.29423141]
[24.34295654 34.95494080]
[31.72305298 49.59960556]
[44.53127289 57.40662384]
[59.42586899 57.42402267]
[67.18256378 71.21330261]
[79.99078369 79.02032471]
[94.17492676 71.59957123]
[110.13502502 72.83757782]
[118.83587646 60.61894226]
[127.53673553 48.40030289]
[136.23759460 36.18166351]
[144.93844604 23.96302414]
[153.63929749 11.74438477]
[155.34156799 -3.98497820]
[169.02671814 -9.86423302]
[177.72756958 -22.08287239]
[186.42843628 -34.30151367]
[195.12928772 -46.52015305]
[190.35450745 -61.16623306]
[195.06430054 -75.64626312]
[207.25320435 -84.47206879]
[222.12385559 -84.42871094]
[230.82470703 -96.64735413]
[227.07165527 -109.64352417]
[231.45495605 -122.23439026]
[242.14955139 -129.86343384]
[255.09114075 -129.90830994]
[264.08029175 -141.91642761]
[273.06945801 -153.92454529]
[266.94976807 -168.01158142]
[268.70941162 -183.26934814]
[277.87506104 -195.59356689]
[291.98120117 -201.66908264]
[307.23339844 -199.86163330]
[319.52880859 -190.65739441]
[325.56008911 -176.53225708]
[323.70483398 -161.28582764]
[314.46209717 -149.01931763]
[300.31811523 -143.03234863]
[285.07757568 -144.93537903]
[276.08840942 -132.92726135]
[267.09927368 -120.91914368]
[270.22210693 -104.43862915]
[260.30261230 -90.49718475]
[243.04333496 -87.94650269]
[234.34248352 -75.72785950]
[239.24716187 -61.68926620]
[234.89337158 -47.28411484]
[222.75015259 -38.09739685]
[207.34791565 -37.81929779]
[198.64706421 -25.60065842]
[189.94621277 -13.38201904]
[181.24536133 -1.16337967]
[180.16543579 13.69202423]
[165.85794067 20.44523811]
[157.15707397 32.66387939]
[148.45622253 44.88251877]
[139.75537109 57.10115814]
[131.05451965 69.31979370]
[122.35366821 81.53843689]
[129.43693542 93.61859131]
[130.17216492 108.13536835]
[123.90596008 121.83774567]
[111.60715485 131.43316650]
[95.74646759 134.37461853]
[95.74646759 149.37461853]
[95.74646759 164.37461853]
[95.74646759 179.37461853]
[95.92496490 194.37355042]
[96.28192902 209.36930847]
[96.63889313 224.36505127]
[96.99585724 239.36080933]
[97.35282898 254.35655212]
[107.48077393 260.80093384]
[113.14179993 271.24984741]
[113.01129150 283.01254272]
[107.23924255 293.12396240]
[97.38298035 299.09222412]
[97.02601624 314.08795166]
[96.66905212 329.08370972]
[96.49055481 344.08264160]
[96.49055481 359.08264160]
[96.49055481 374.08264160]
[96.49055481 389.08264160]
[96.49055481 404.08264160]
[102.53689575 419.92178345]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 130]
[3 129]
[4 128]
[5 127]
[6 126]
[8 125]
[9 124]
[10 123]
[13 118]
[14 117]
[15 116]
[16 115]
[17 114]
[19 113]
[20 112]
[21 111]
[22 110]
[23 36]
[24 35]
[38 51]
[39 50]
[41 48]
[42 47]
[53 105]
[54 104]
[55 103]
[56 102]
[57 101]
[58 100]
[60 98]
[61 97]
[62 96]
[63 95]
[67 91]
[68 90]
[72 87]
[73 86]
[74 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
