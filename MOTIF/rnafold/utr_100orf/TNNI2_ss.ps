%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:48:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUCACACACCACACAGCACCAUGUCCCAGUGCAAGAAGCGGAACAGGGCCAUCACGGCCCGCAGGCAGCACCUGAAGAGUGUGAUGCUGCAGAUAGCGGCCACGGAGCUGGAGAAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[125.12814331 236.52189636]
[119.52088928 250.43443298]
[113.91363525 264.34695435]
[122.26145935 277.42724609]
[121.29300690 292.91406250]
[111.38066101 304.85244751]
[96.33591461 308.65182495]
[81.94378662 302.85128784]
[73.73834991 289.68121338]
[74.87474823 274.20581055]
[84.91602325 262.37567139]
[100.00109863 258.73971558]
[105.60835266 244.82717896]
[111.21560669 230.91464233]
[109.58327484 221.51547241]
[115.93482971 212.84141541]
[117.84523773 197.96357727]
[119.75563812 183.08572388]
[121.66603851 168.20787048]
[115.61269379 154.59883118]
[125.04457855 141.89645386]
[126.95497894 127.01860809]
[84.91268921 132.61065674]
[66.40982056 97.30467224]
[51.84923172 93.70063019]
[37.28863525 90.09658813]
[22.03368568 94.29148102]
[11.53828049 83.72285461]
[-3.02231359 80.11882019]
[-12.22442436 81.09510040]
[-17.90637779 76.23233795]
[-32.37017822 72.25761414]
[-45.13305664 81.29325867]
[-60.71366882 79.95963287]
[-71.75532532 68.88642883]
[-73.04449463 53.30207825]
[-63.97246933 40.56502914]
[-48.82278442 36.68933487]
[-34.74865341 43.50497437]
[-28.39545631 57.79381180]
[-13.93165493 61.76853180]
[0.58172685 65.55822754]
[15.14232063 69.16226196]
[29.35579872 64.70959473]
[40.89267731 75.53599548]
[55.45326996 79.14003754]
[70.01386261 82.74407959]
[80.13594055 71.67414093]
[75.24638367 57.49343872]
[70.35682678 43.31274033]
[65.46726227 29.13204384]
[60.57770538 14.95134449]
[46.84312439 6.66033316]
[44.90488434 -9.26520538]
[56.24983215 -20.60856056]
[72.17509460 -18.66807938]
[80.46417999 -4.93233585]
[74.75839996 10.06178570]
[79.64796448 24.24248314]
[84.53752136 38.42318344]
[89.42707825 52.60388184]
[94.31664276 66.78457642]
[110.43383789 65.61661530]
[126.25715637 72.30274963]
[132.56748962 58.69466782]
[138.87780762 45.08658981]
[145.18812561 31.47850990]
[141.04132080 15.98065281]
[150.68806458 3.16191792]
[166.72819519 2.85574222]
[176.85710144 15.29699707]
[173.30476379 30.94181633]
[158.79620361 37.78883362]
[152.48588562 51.39691162]
[146.17556763 65.00498962]
[139.86523438 78.61306763]
[143.61523438 85.10826111]
[151.11515808 72.11783600]
[166.11515808 72.11764526]
[173.61540222 85.10789490]
[166.11572266 98.09845734]
[151.11523438 98.09864044]
[154.86523438 104.59383392]
[169.80534363 105.93296814]
[184.74545288 107.27210999]
[191.06974792 104.77156830]
[196.81306458 105.77611542]
[200.40757751 109.08022308]
[215.25982666 111.18046570]
[230.11206055 113.28070831]
[244.96429443 115.38095093]
[259.81652832 117.48119354]
[273.45007324 109.02503967]
[288.51272583 114.54734039]
[293.44973755 129.81185913]
[284.47384644 143.10896301]
[268.47058105 144.23825073]
[257.71627808 132.33343506]
[242.86405945 130.23318481]
[228.01181030 128.13294983]
[213.15957642 126.03270721]
[198.30734253 123.93246460]
[183.40631104 122.21221161]
[168.46620178 120.87307739]
[153.52609253 119.53393555]
[141.83282471 128.92901611]
[139.92242432 143.80685425]
[145.83912659 158.48007202]
[136.54388428 170.11828613]
[134.63348389 184.99612427]
[132.72308350 199.87397766]
[130.81268311 214.75181580]
[141.98797607 204.74618530]
[156.46270752 200.81141663]
[171.16552734 203.78240967]
[182.97674561 213.02876282]
[189.39019775 226.58854675]
[189.04502869 241.58457947]
[182.01449585 254.83493042]
[169.79035950 263.52804565]
[154.96641541 265.81942749]
[140.68804932 261.22283936]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[16 112]
[17 111]
[18 110]
[19 109]
[21 107]
[22 106]
[24 47]
[25 46]
[26 45]
[28 43]
[29 42]
[31 41]
[32 40]
[48 62]
[49 61]
[50 60]
[51 59]
[52 58]
[64 76]
[65 75]
[66 74]
[67 73]
[83 105]
[84 104]
[85 103]
[88 102]
[89 101]
[90 100]
[91 99]
[92 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
