%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:55:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUAGGGCCAUUAAUUCUGACCACGUGCCUGAGAGGCAAGGUGGAUGGCCCUGGGACAGAAACUGUUCAUCACUAUGUCCCGGGGAGCAGGACGUCUGCAGGGCACGCUGUGGGCUCUCGUCUUCCUAGGCAUCCUAGUGGGCA\
) } def
/len { sequence length } bind def

/coor [
[84.37973022 126.64912415]
[74.71704865 119.19635773]
[68.48062897 108.32335663]
[54.42896271 113.57223511]
[40.37730026 118.82112122]
[26.32563782 124.06999969]
[12.27397537 129.31887817]
[-1.77768803 134.56776428]
[-15.82935143 139.81665039]
[-29.88101387 145.06553650]
[-43.93267822 150.31442261]
[-29.88102341 155.56332397]
[-20.77475357 167.48287964]
[-19.40461540 182.42016602]
[-26.19050598 195.79745483]
[-39.05279160 203.51506042]
[-54.04964828 203.20783997]
[-66.58506775 194.96992493]
[-72.81739807 181.32595825]
[-70.83665466 166.45730591]
[-61.25070190 154.92126465]
[-76.05310059 157.34799194]
[-90.85549927 159.77473450]
[-105.65789795 162.20146179]
[-119.58417511 174.19636536]
[-135.75038147 167.45008850]
[-150.49673462 170.19694519]
[-165.24308777 172.94378662]
[-179.98944092 175.69062805]
[-194.73579407 178.43748474]
[-209.19985962 187.28208923]
[-221.70286560 175.83171082]
[-214.16114807 160.64753723]
[-197.48263550 163.69113159]
[-182.73628235 160.94429016]
[-167.98992920 158.19743347]
[-153.24357605 155.45059204]
[-138.49723816 152.70375061]
[-131.36062622 142.87933350]
[-119.04272461 140.50466919]
[-108.08462524 147.39906311]
[-93.28222656 144.97233582]
[-78.47982788 142.54560852]
[-63.67743301 140.11886597]
[-49.18156052 136.26275635]
[-35.12989807 131.01387024]
[-21.07823372 125.76498413]
[-7.02657080 120.51610565]
[7.02509260 115.26721954]
[21.07675552 110.01834106]
[35.12841797 104.76945496]
[49.18008041 99.52057648]
[63.23174286 94.27169037]
[68.48062897 80.22003174]
[61.31134796 67.04423523]
[54.14207077 53.86845016]
[46.97278976 40.69265747]
[39.80351257 27.51686859]
[32.63423157 14.34107876]
[19.75286865 3.31806660]
[26.77918053 -12.11136246]
[43.55069733 -9.63093185]
[45.81002426 7.17180014]
[52.97930145 20.34758949]
[60.14857864 33.52338028]
[67.31785583 46.69916916]
[74.48713684 59.87496185]
[81.65641785 73.05075073]
[107.99201202 71.49211121]
[124.22991180 88.98996735]
[139.08140564 86.88449097]
[153.93290710 84.77902222]
[168.78440857 82.67354584]
[183.63591003 80.56806946]
[198.48739624 78.46259308]
[213.26264954 75.87565613]
[227.94602966 72.80998230]
[235.77552795 67.95938110]
[242.98057556 69.84058380]
[257.72692871 67.09373474]
[269.87686157 56.96014404]
[283.80578613 62.23594666]
[298.55215454 59.48910141]
[313.29849243 56.74225616]
[328.04483032 53.99540710]
[342.79119873 51.24856186]
[357.53753662 48.50171661]
[367.13021851 33.91542053]
[383.96633911 30.80429459]
[397.59133911 40.60604477]
[412.27471924 37.54037094]
[426.95809937 34.47469711]
[434.78759766 29.62409782]
[441.99264526 31.50529861]
[456.73898315 28.75845146]
[471.48535156 26.01160622]
[486.23168945 23.26475906]
[500.97805786 20.51791191]
[515.72436523 17.77106667]
[530.47076416 15.02421951]
[545.21710205 12.27737331]
[553.94915771 -0.89556527]
[569.45477295 -3.95380068]
[582.53460693 4.91706419]
[585.42877197 20.45410156]
[576.42010498 33.43946457]
[560.85333252 36.16916656]
[547.96392822 27.02372360]
[533.21759033 29.77056885]
[518.47125244 32.51741791]
[503.72488403 35.26426315]
[488.97854614 38.01110840]
[474.23217773 40.75795364]
[459.48583984 43.50480270]
[444.73950195 46.25164795]
[430.02377319 49.15807724]
[415.34039307 52.22375107]
[400.65701294 55.28942490]
[395.15051270 66.98627472]
[383.73080444 73.45225525]
[370.47961426 72.11751556]
[360.28439331 63.24806595]
[345.53802490 65.99491119]
[330.79168701 68.74176025]
[316.04534912 71.48860168]
[301.29898071 74.23545074]
[286.55264282 76.98229980]
[275.45745850 86.91941833]
[260.47378540 81.84008789]
[245.72743225 84.58692932]
[231.01170349 87.49336243]
[216.32832336 90.55903625]
[214.08280945 93.36785889]
[210.33218384 95.19444275]
[205.56950378 95.32833099]
[200.59288025 93.31409454]
[185.74137878 95.41957092]
[170.88987732 97.52503967]
[156.03839111 99.63051605]
[141.18688965 101.73599243]
[126.33538818 103.84146881]
[123.61589050 114.03018951]
[116.99460602 122.65941620]
[107.28349304 128.25576782]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 53]
[4 52]
[5 51]
[6 50]
[7 49]
[8 48]
[9 47]
[10 46]
[11 45]
[21 44]
[22 43]
[23 42]
[24 41]
[26 38]
[27 37]
[28 36]
[29 35]
[30 34]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
[59 63]
[70 141]
[71 140]
[72 139]
[73 138]
[74 137]
[75 136]
[76 132]
[77 131]
[79 130]
[80 129]
[82 127]
[83 126]
[84 125]
[85 124]
[86 123]
[87 122]
[90 118]
[91 117]
[92 116]
[94 115]
[95 114]
[96 113]
[97 112]
[98 111]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
