%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:37:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCGGAACCGCCGCCUCUAGGGAUGGACGGUCAGACUCUGCGAAAGGCCGAGAGAAGCUGGUCCUGCUCACGAGAGAAAAAGGAGGGUUACGCUAAGGACAUGGUGACAGACUUUGAUGAGA\
) } def
/len { sequence length } bind def

/coor [
[167.38063049 159.61724854]
[155.35713196 150.64866638]
[143.33361816 141.68009949]
[131.31011963 132.71151733]
[118.99866486 141.10252380]
[104.63034058 145.04360962]
[89.76071167 144.10809326]
[75.99963379 138.39726257]
[64.83693695 128.52938843]
[51.78417587 135.92028809]
[38.73142242 143.31120300]
[25.67866516 150.70211792]
[12.71981335 158.25645447]
[-0.14308614 165.97305298]
[-13.00598621 173.68965149]
[-25.77090263 181.56726074]
[-38.43582153 189.60466003]
[-51.10074234 197.64207458]
[-61.23437119 211.23419189]
[-77.10057831 205.25926208]
[-75.75135803 188.35908508]
[-59.13814163 184.97715759]
[-46.47322464 176.93974304]
[-33.80830383 168.90234375]
[-29.80185699 162.59135437]
[-20.72257805 160.82675171]
[-7.85967922 153.11015320]
[5.00322056 145.39355469]
[9.16699982 139.18524170]
[18.28775406 137.64935303]
[31.34051132 130.25843811]
[44.39326859 122.86753845]
[57.44602203 115.47662354]
[54.76169586 101.96534729]
[56.26414490 88.27217865]
[61.81431961 75.66441345]
[70.89855957 65.30889130]
[82.67611694 58.16401291]
[79.31205750 43.54610825]
[75.94799805 28.92820549]
[72.40051270 14.35372925]
[68.67015839 -0.17501780]
[57.74398041 -11.61744404]
[62.07305527 -25.86905289]
[58.34270477 -40.39780045]
[45.16104126 -53.18114090]
[50.40073013 -69.87947083]
[46.30644989 -84.30989075]
[42.21217346 -98.74030304]
[37.93688202 -113.11813354]
[33.48125839 -127.44110107]
[29.02563667 -141.76406860]
[14.28677368 -146.61643982]
[5.24227476 -159.22503662]
[5.36993313 -174.74159241]
[14.62066174 -187.19966125]
[29.43736649 -191.80888367]
[44.12272263 -186.79690552]
[53.02991104 -174.09092712]
[52.73393631 -158.57667542]
[43.34860229 -146.21969604]
[47.80422974 -131.89672852]
[52.25985336 -117.57375336]
[57.30732346 -112.05982971]
[56.64258575 -102.83457947]
[60.73686600 -88.40416718]
[64.83114624 -73.97375488]
[75.28842926 -67.75516510]
[78.77319336 -55.67900848]
[72.87145233 -44.12815094]
[76.60179901 -29.59940147]
[87.26116180 -19.19616890]
[83.19890594 -3.90536618]
[86.92926025 10.62338161]
[91.69331360 16.38394547]
[90.56589508 25.56414413]
[93.92996216 40.18204880]
[97.29402161 54.79994965]
[112.99378204 56.62341309]
[127.11044312 63.73168564]
[137.92408752 75.25872803]
[144.11723328 89.80014038]
[144.93531799 105.58425903]
[140.27868652 120.68801117]
[152.30220032 129.65658569]
[164.32569885 138.62516785]
[176.34919739 147.59373474]
[189.40196228 154.98464966]
[203.27812195 160.68133545]
[217.15428162 166.37802124]
[231.03044128 172.07470703]
[250.77275085 168.38493347]
[262.10272217 183.97257996]
[276.24755859 188.96487427]
[290.39242554 193.95716858]
[304.53729248 198.94946289]
[318.68212891 203.94174194]
[332.82980347 196.89764404]
[347.78787231 201.99975586]
[354.68200684 216.22109985]
[349.42202759 231.12438965]
[335.12860107 237.86778259]
[320.28173828 232.45053101]
[313.68984985 218.08660889]
[299.54498291 213.09431458]
[285.40011597 208.10202026]
[271.25527954 203.10972595]
[257.11041260 198.11743164]
[248.19886780 203.39070129]
[237.63867188 202.81575012]
[228.99842834 196.34136963]
[225.33375549 185.95086670]
[211.45759583 180.25418091]
[197.58143616 174.55749512]
[183.70527649 168.86080933]
[190.58825684 182.18840027]
[190.05088806 197.17877197]
[182.23127747 209.97930908]
[169.13912964 217.30020142]
[154.13917542 217.25993347]
[141.08651733 209.86886597]
[133.33575439 197.02653503]
[132.87886047 182.03349304]
[139.83329773 168.74304199]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 87]
[2 86]
[3 85]
[4 84]
[9 33]
[10 32]
[11 31]
[12 30]
[13 28]
[14 27]
[15 26]
[16 24]
[17 23]
[18 22]
[38 78]
[39 77]
[40 76]
[41 74]
[42 73]
[44 71]
[45 70]
[47 67]
[48 66]
[49 65]
[50 63]
[51 62]
[52 61]
[88 115]
[89 114]
[90 113]
[91 112]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
