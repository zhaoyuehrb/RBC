%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:37:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGACGGCGGUGGCGUCCCAAGAUGGCGUCGUGGCUGCCGGAGACUCUCUUUGAAACUGUAGGACAAGGCCCGCCGCCUAGCAAAGACUAUUACCAGUUACUGGUCACCCGGUCUCAGGUAA\
) } def
/len { sequence length } bind def

/coor [
[275.70983887 272.55038452]
[273.34686279 250.28164673]
[260.82226562 242.02725220]
[248.62026978 246.36875916]
[235.96664429 242.80221558]
[227.58244324 232.42375183]
[226.73071289 218.91333008]
[214.41925049 210.34431458]
[202.10780334 201.77528381]
[189.79635620 193.20626831]
[177.48489380 184.63723755]
[165.17344666 176.06822205]
[152.86199951 167.49919128]
[140.55055237 158.93017578]
[133.17929077 157.67716980]
[128.03948975 149.98484802]
[115.94907379 141.10670471]
[103.85865021 132.22854614]
[88.95603180 130.52210999]
[75.17166138 136.43743896]
[61.38729477 142.35278320]
[49.21620941 154.15536499]
[34.50558090 145.72720337]
[38.53205109 129.25833130]
[55.47195816 128.56840515]
[69.25632477 122.65307617]
[83.04068756 116.73773193]
[79.14692688 103.78149414]
[83.05484009 92.43190002]
[72.99906921 81.30169678]
[62.94329453 70.17149353]
[47.95068741 65.11854553]
[45.15969849 50.48777008]
[35.10392761 39.35756683]
[19.58712196 44.07061768]
[3.62117124 41.58137131]
[-9.62904930 32.43423080]
[-17.55916405 18.48829842]
[-18.63713646 2.53969908]
[-12.69900513 -12.23897362]
[-23.03350830 -23.11086464]
[-33.36801147 -33.98275757]
[-43.70251465 -44.85464859]
[-54.03702164 -55.72653961]
[-64.37152100 -66.59843445]
[-79.66650391 -73.91279602]
[-76.87206268 -90.63485718]
[-60.02992630 -92.57875061]
[-53.49963379 -76.93293762]
[-43.16512680 -66.06104279]
[-32.83062363 -55.18915176]
[-22.49612045 -44.31726074]
[-12.16161728 -33.44536972]
[-1.82711339 -22.57347679]
[11.21341991 -27.47849274]
[25.18186951 -27.02017212]
[37.95199966 -21.23501396]
[47.56726456 -10.97287178]
[52.54054642 2.22772026]
[52.08409882 16.37016869]
[46.23413086 29.30179405]
[56.28990173 40.43199921]
[70.56325531 44.68883896]
[74.07350159 60.11572266]
[84.12927246 71.24592590]
[94.18504333 82.37612915]
[112.24161530 83.78770447]
[122.05251312 100.91339874]
[112.73680115 120.13811493]
[124.82722473 129.01626587]
[136.91764832 137.89442444]
[149.11956787 146.61871338]
[161.43101501 155.18774414]
[173.74247742 163.75675964]
[186.05392456 172.32579041]
[198.36537170 180.89480591]
[210.67683411 189.46383667]
[222.98828125 198.03285217]
[235.29972839 206.60188293]
[252.39938354 203.18023682]
[266.43997192 212.94514465]
[269.07666016 229.50267029]
[281.60125732 237.75706482]
[288.93408203 233.20654297]
[297.26306152 231.08088684]
[305.81170654 231.55712891]
[313.78933716 234.57069397]
[320.46423340 239.82328796]
[325.23083496 246.81228638]
[327.66455078 254.87878418]
[327.55960083 263.26968384]
[324.94616699 271.20806885]
[336.07635498 281.26382446]
[347.20657349 291.31961060]
[358.33676147 301.37536621]
[369.46697998 311.43115234]
[384.05288696 306.82702637]
[398.88705444 310.12014771]
[410.00723267 320.32836914]
[414.49468994 334.63638306]
[411.23980713 349.17153931]
[422.37002563 359.22732544]
[433.50021362 369.28308105]
[444.63043213 379.33886719]
[455.76062012 389.39462280]
[471.90029907 392.30035400]
[477.19836426 407.82009888]
[466.20462036 419.98849487]
[450.22848511 416.28771973]
[445.70486450 400.52484131]
[434.57464600 390.46905518]
[423.44445801 380.41329956]
[412.31423950 370.35751343]
[401.18405151 360.30175781]
[387.05273438 365.01043701]
[372.36416626 361.99349976]
[361.08331299 351.96313477]
[356.30633545 337.53823853]
[359.41119385 322.56137085]
[348.28100586 312.50558472]
[337.15078735 302.44979858]
[326.02059937 292.39404297]
[314.89038086 282.33825684]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 83]
[3 82]
[7 79]
[8 78]
[9 77]
[10 76]
[11 75]
[12 74]
[13 73]
[14 72]
[16 71]
[17 70]
[18 69]
[19 27]
[20 26]
[21 25]
[29 66]
[30 65]
[31 64]
[33 62]
[34 61]
[40 54]
[41 53]
[42 52]
[43 51]
[44 50]
[45 49]
[92 123]
[93 122]
[94 121]
[95 120]
[96 119]
[101 114]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
