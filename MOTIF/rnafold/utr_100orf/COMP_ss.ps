%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAAGCGAGCAGCCACCCAGCUCCCCGCCACCGCCAUGGUCCCCGACACCGCCUGCGUUCUUCUGCUCACCCUGGCUGCCCUCGGCGCGUCCGGACAGGGCCAGAGCCCGUUGGGCUCAGACCUGGGCCCGCAGA\
) } def
/len { sequence length } bind def

/coor [
[12.89376736 174.00830078]
[2.96794438 183.53746033]
[-9.37651253 189.55126953]
[-22.94248962 191.48577881]
[-36.42029572 189.17169189]
[-48.51409531 182.84906006]
[-59.30153656 193.27168274]
[-70.08898163 203.69430542]
[-68.07141876 218.96635437]
[-75.34833527 232.34170532]
[-88.94497681 238.79115295]
[-103.55722809 236.03070068]
[-114.34466553 246.45332336]
[-125.13211060 256.87594604]
[-125.15327454 272.68020630]
[-136.40238953 283.78125000]
[-152.20556641 283.59298706]
[-163.18704224 272.22714233]
[-162.83171082 256.42684937]
[-151.35038757 245.56614685]
[-135.55473328 246.08850098]
[-124.76728821 235.66587830]
[-113.97985077 225.24325562]
[-116.23615265 210.54470825]
[-109.32292938 197.17791748]
[-95.70523834 190.36528015]
[-80.51160431 192.90686035]
[-69.72415924 182.48423767]
[-58.93672180 172.06161499]
[-63.68682480 162.91448975]
[-66.17421722 152.91218567]
[-66.26190186 142.60559082]
[-63.94503403 132.56240845]
[-76.99236298 125.16192627]
[-90.03969574 117.76144409]
[-106.76644135 122.73773193]
[-121.64629364 114.28182220]
[-125.76595306 98.01735687]
[-138.97953796 90.91798401]
[-152.19313049 83.81861115]
[-165.40672302 76.71923828]
[-179.86283875 82.68198395]
[-194.75396729 77.90823364]
[-203.04893494 64.65201569]
[-200.83113098 49.17249680]
[-189.14773560 38.77864456]
[-173.51528931 38.37810898]
[-161.31494141 48.16001892]
[-158.30734253 63.50564575]
[-145.09375000 70.60501862]
[-131.88017273 77.70439911]
[-118.66658020 84.80377197]
[-106.91781616 79.38980865]
[-94.00847626 81.79400635]
[-84.72437286 91.35429382]
[-82.63920593 104.71411133]
[-69.59188080 112.11460114]
[-56.54454803 119.51508331]
[-42.00344467 107.84477997]
[-23.88169861 103.23444366]
[-5.42528677 106.55597687]
[10.04074478 117.25636292]
[19.71130753 133.44917297]
[34.54498672 131.22163391]
[49.37866974 128.99409485]
[64.21234894 126.76656342]
[79.04602814 124.53902435]
[68.07998657 112.79447937]
[63.67890930 96.29710388]
[67.78130341 78.68733215]
[80.33594513 64.30778503]
[99.11087799 57.13803864]
[108.63507843 45.54970551]
[111.41996765 29.97552681]
[125.47860718 25.05577660]
[135.00280762 13.46744251]
[144.52702332 1.87910783]
[153.91772461 -9.81766415]
[163.17372131 -21.62133598]
[172.42970276 -33.42500687]
[181.68569946 -45.22867966]
[186.70155334 -61.42366409]
[203.65216064 -61.08704758]
[208.02108765 -44.70569229]
[193.48936462 -35.97269058]
[184.23338318 -24.16901779]
[174.97738647 -12.36534691]
[165.72140503 -0.56167489]
[164.05468750 6.70673943]
[156.11535645 11.40331364]
[146.59114075 22.99164772]
[137.06694031 34.57998276]
[134.96328735 49.32528687]
[120.22341919 55.07390976]
[110.69921112 66.66224670]
[113.62881470 73.56640625]
[128.51681519 75.39603424]
[119.48802185 87.37472534]
[122.41762543 94.27888489]
[137.36933899 95.48148346]
[152.32106018 96.68408966]
[167.27276611 97.88669586]
[181.84634399 90.36720276]
[195.49711609 99.45500946]
[194.18234253 115.80136871]
[179.25454712 122.59053802]
[166.07015991 112.83840942]
[151.11845398 111.63580322]
[136.16673279 110.43319702]
[121.21501923 109.23059845]
[117.66533661 115.83738708]
[125.55897522 128.59240723]
[110.56596375 129.05097961]
[107.01627350 135.65777588]
[116.27226257 147.46144104]
[125.52825165 159.26512146]
[134.78424072 171.06878662]
[144.04023743 182.87245178]
[153.29621887 194.67613220]
[162.55221558 206.47979736]
[177.96168518 212.09053040]
[180.54052734 228.28562927]
[167.63584900 238.40498352]
[152.52287292 232.03866577]
[150.74853516 215.73579407]
[141.49255371 203.93211365]
[132.23655701 192.12844849]
[122.98056793 180.32476807]
[113.72457886 168.52110291]
[104.46858978 156.71743774]
[95.21260071 144.91375732]
[81.27356720 139.37271118]
[66.43988800 141.60025024]
[51.60620499 143.82777405]
[36.77252579 146.05531311]
[21.93884277 148.28285217]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 29]
[7 28]
[8 27]
[12 23]
[13 22]
[14 21]
[33 58]
[34 57]
[35 56]
[38 52]
[39 51]
[40 50]
[41 49]
[63 136]
[64 135]
[65 134]
[66 133]
[67 132]
[72 95]
[73 94]
[75 92]
[76 91]
[77 90]
[78 88]
[79 87]
[80 86]
[81 85]
[99 110]
[100 109]
[101 108]
[102 107]
[114 131]
[115 130]
[116 129]
[117 128]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
