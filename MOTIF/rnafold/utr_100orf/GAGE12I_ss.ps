%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGUUCCUGCCGUCCGGACUCUUUUUCCUCUACUGAGAUUCAUCUGUGUGAAAUAUGAGUUGGCGAGGAAGAUCGACCUAUUAUUGGCCUAGACCAAGGCGCUAUGUACAGCCUCCUGAAAUGAUUGGGCCUAUGCGGCCCGAGCAGUUCAGUG\
) } def
/len { sequence length } bind def

/coor [
[86.07232666 81.73942566]
[72.22872162 75.96408081]
[58.38511658 70.18873596]
[44.54151154 64.41339111]
[30.69790649 58.63805008]
[17.47492790 66.54115295]
[2.31106305 65.15890503]
[-8.99747372 55.23011017]
[-12.25214386 40.71993637]
[-26.09574890 34.94459152]
[-39.93935394 29.16925049]
[-53.78295898 23.39390755]
[-69.61185455 34.04195404]
[-88.51532745 33.07701874]
[-102.94866943 21.06313133]
[-107.25859070 2.93839884]
[-121.42756653 -1.98502934]
[-128.07638550 -1.10606742]
[-133.35292053 -3.40907097]
[-136.06401062 -7.40577269]
[-150.02182007 -12.89936256]
[-168.13363647 -9.73044300]
[-178.55679321 -23.81752205]
[-192.62307739 -29.02710152]
[-206.68936157 -34.23667908]
[-220.75564575 -39.44625854]
[-234.82191467 -44.65583801]
[-248.88819885 -49.86541748]
[-262.95449829 -55.07499695]
[-277.02075195 -60.28457260]
[-285.38552856 -52.30064774]
[-296.08810425 -48.06047440]
[-307.54812622 -48.14853287]
[-318.08905029 -52.51326370]
[-326.18325806 -60.48025131]
[-330.67352295 -70.85615540]
[-330.93823242 -82.10734558]
[-344.66195679 -88.16207123]
[-358.38565063 -94.21679688]
[-372.10937500 -100.27152252]
[-385.83309937 -106.32624817]
[-399.55679321 -112.38096619]
[-413.28051758 -118.43569183]
[-425.21871948 -108.85769653]
[-440.24279785 -105.93614960]
[-454.90036011 -110.34238434]
[-465.82315063 -121.06390381]
[-470.50125122 -135.63696289]
[-467.85961914 -150.71278381]
[-458.50534058 -162.82705688]
[-444.58789062 -169.19601440]
[-429.30545044 -168.35609436]
[-416.16979980 -160.50033569]
[-408.19940186 -147.43391418]
[-407.22579956 -132.15940857]
[-393.50207520 -126.10468292]
[-379.77835083 -120.04995728]
[-366.05465698 -113.99523163]
[-352.33093262 -107.94050598]
[-338.60723877 -101.88578033]
[-324.88351440 -95.83106232]
[-309.37622070 -106.15602112]
[-290.62628174 -105.10946655]
[-276.13623047 -92.93119049]
[-271.81118774 -74.35085297]
[-257.74490356 -69.14128113]
[-243.67861938 -63.93169785]
[-229.61233521 -58.72211838]
[-215.54606628 -53.51254272]
[-201.47978210 -48.30296326]
[-187.41349792 -43.09338379]
[-173.34721375 -37.88380432]
[-162.19027710 -42.65257645]
[-150.40536499 -38.38167191]
[-144.52822876 -26.85717201]
[-130.57041931 -21.36358261]
[-116.50413513 -16.15400505]
[-102.33515930 -11.23057652]
[-94.47279358 -19.28306198]
[-84.11503601 -23.81501389]
[-72.76200867 -24.12785149]
[-62.07387161 -20.13713264]
[-53.62811279 -12.39056206]
[-48.68669891 -1.99315262]
[-48.00761795 9.55030155]
[-34.16401291 15.32564449]
[-20.32040596 21.10098839]
[-6.47680092 26.87633133]
[6.12500715 18.98124313]
[21.13693237 20.03294563]
[32.78726959 29.83718109]
[36.47325134 44.79444504]
[50.31685638 50.56978989]
[64.16046143 56.34513092]
[78.00406647 62.12047577]
[91.84767151 67.89582062]
[106.84458923 67.59181213]
[120.44277191 61.26019669]
[134.04095459 54.92857742]
[147.63914490 48.59695816]
[148.90641785 33.29043579]
[157.67036438 20.67739296]
[171.57351685 14.15067101]
[186.87599182 15.46592617]
[199.46150208 24.26936150]
[205.94461060 38.19289780]
[204.58139038 53.49117279]
[195.73855591 66.04902649]
[181.79476929 72.48846436]
[166.50083923 71.07730103]
[153.97076416 62.19514084]
[140.37257385 68.52675629]
[126.77439117 74.85837555]
[113.17620850 81.18999481]
[119.64376068 93.30768585]
[117.69434357 105.53247070]
[128.97612000 115.41790009]
[140.25788879 125.30332184]
[151.53965759 135.18875122]
[162.82144165 145.07417297]
[178.29989624 148.34951782]
[182.77320862 162.55650330]
[194.05497742 172.44192505]
[209.53343201 175.71726990]
[214.00674438 189.92427063]
[225.28852844 199.80969238]
[236.57029724 209.69511414]
[247.85206604 219.58053589]
[259.13385010 229.46595764]
[270.41561890 239.35139465]
[281.69738770 249.23681641]
[297.73587036 249.61979675]
[307.32110596 262.48455811]
[303.10015869 277.96240234]
[288.31094360 284.17999268]
[274.29849243 276.36776733]
[271.81195068 260.51858521]
[260.53018188 250.63316345]
[249.24841309 240.74774170]
[237.96664429 230.86231995]
[226.68487549 220.97688293]
[215.40310669 211.09146118]
[204.12132263 201.20603943]
[189.44981384 198.63777161]
[184.16955566 183.72370911]
[172.88778687 173.83827209]
[158.21627808 171.27000427]
[152.93600464 156.35594177]
[141.65423584 146.47052002]
[130.37246704 136.58509827]
[119.09069061 126.69966888]
[107.80892181 116.81424713]
[94.26163483 118.78903198]
[82.23453522 110.72625732]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 96]
[2 95]
[3 94]
[4 93]
[5 92]
[9 88]
[10 87]
[11 86]
[12 85]
[16 78]
[17 77]
[20 76]
[21 75]
[23 72]
[24 71]
[25 70]
[26 69]
[27 68]
[28 67]
[29 66]
[30 65]
[37 61]
[38 60]
[39 59]
[40 58]
[41 57]
[42 56]
[43 55]
[97 114]
[98 113]
[99 112]
[100 111]
[116 152]
[117 151]
[118 150]
[119 149]
[120 148]
[122 146]
[123 145]
[125 143]
[126 142]
[127 141]
[128 140]
[129 139]
[130 138]
[131 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
