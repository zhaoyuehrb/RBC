%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCCAGUGCGCAGACGCAGGGGUCGGCGCCGGGUGAGAGCGUGCGGCCGGAUUCACCACAACAUGGCAAAUCUUUUUAUAAGGAAAAUGGUGAACCCUCUGCUCUAUCUCAGUCGUCACACGGUGAAGCCUCGAGCCCUCUCCACAUUUCUAUUUGGAUCCA\
) } def
/len { sequence length } bind def

/coor [
[89.19055176 132.07089233]
[85.49360657 146.60816956]
[81.79666901 161.14546204]
[78.09972382 175.68273926]
[83.06447601 191.31230164]
[71.81287384 203.24266052]
[55.91960144 199.20088196]
[51.73429871 183.34480286]
[63.56244278 171.98579407]
[67.25938416 157.44851685]
[70.95632172 142.91123962]
[74.65326691 128.37394714]
[69.27620697 119.03825378]
[66.97863770 109.06105042]
[67.66621399 99.38129425]
[70.97718048 90.82868195]
[76.33693695 84.05274963]
[83.02990723 79.47376251]
[90.28067780 77.25933838]
[88.84616852 62.32808685]
[87.41165924 47.39683914]
[85.97714996 32.46558762]
[76.95555115 19.46861649]
[83.44022369 6.05973148]
[82.00572205 -8.87151718]
[80.57121277 -23.80276680]
[79.13670349 -38.73401642]
[70.11509705 -51.73098755]
[76.59977722 -65.13986969]
[75.16526794 -80.07112122]
[72.02786255 -94.73934174]
[67.22895050 -108.95097351]
[62.43003845 -123.16260529]
[50.68434143 -133.76208496]
[53.94318008 -148.29582214]
[49.14426804 -162.50744629]
[44.34535599 -176.71908569]
[39.54644394 -190.93070984]
[34.74753571 -205.14233398]
[19.77140808 -208.25085449]
[8.43682480 -218.37133789]
[3.72113180 -232.71109009]
[6.79566526 -247.38771057]
[16.73670578 -258.48010254]
[11.93779373 -272.69174194]
[7.13888168 -286.90338135]
[2.33997035 -301.11502075]
[-11.54377937 -308.17752075]
[-16.20810890 -322.65850830]
[-9.38951015 -335.85101318]
[-14.18842125 -350.06265259]
[-19.92486000 -357.23242188]
[-18.94031143 -364.59268188]
[-23.46611977 -378.89364624]
[-27.99192810 -393.19458008]
[-32.51773834 -407.49554443]
[-37.04354477 -421.79647827]
[-41.56935501 -436.09741211]
[-46.09516525 -450.39837646]
[-54.22469330 -450.54974365]
[-62.10687256 -452.49078369]
[-69.35334015 -456.11975098]
[-75.60839844 -461.25201416]
[-80.56646729 -467.62918091]
[-83.98702240 -474.93234253]
[-85.70623016 -482.79785156]
[-85.64481354 -490.83557129]
[-83.81169128 -498.64804077]
[-80.30321503 -505.85031128]
[-75.29815674 -512.08880615]
[-69.04859161 -517.05865479]
[-61.86720657 -520.51885986]
[-63.87257004 -535.38415527]
[-65.87792969 -550.24951172]
[-67.88329315 -565.11486816]
[-69.88865662 -579.98022461]
[-80.33607483 -592.62078857]
[-74.35995483 -607.89227295]
[-58.10802078 -610.08465576]
[-48.29887009 -596.94262695]
[-55.02331543 -581.98559570]
[-53.01795197 -567.12023926]
[-51.01258850 -552.25488281]
[-49.00722504 -537.38952637]
[-47.00186157 -522.52416992]
[-26.14621162 -514.00866699]
[-14.40179062 -494.64260864]
[-16.51320648 -471.96997070]
[-31.79421806 -454.92416382]
[-27.26840973 -440.62322998]
[-22.74260139 -426.32229614]
[-18.21679115 -412.02133179]
[-13.69098282 -397.72039795]
[-9.16517353 -383.41943359]
[-4.63936472 -369.11849976]
[0.02320934 -354.86157227]
[4.82212067 -340.64993286]
[18.24253845 -334.29162598]
[23.31176758 -319.94738770]
[16.55160141 -305.91390991]
[21.35051346 -291.70230103]
[26.14942360 -277.49066162]
[30.94833565 -263.27902222]
[45.57886887 -260.48382568]
[56.92136383 -250.67547607]
[61.86413193 -236.41239929]
[58.98510742 -221.49234009]
[48.95916367 -209.94125366]
[53.75807571 -195.72961426]
[58.55698776 -181.51799011]
[63.35589981 -167.30636597]
[68.15480804 -153.09472656]
[79.55725861 -143.51174927]
[76.64167023 -127.96150970]
[81.44058228 -113.74988556]
[86.23949432 -99.53825378]
[98.59052277 -91.02637482]
[113.57951355 -91.60092163]
[128.56851196 -92.17546082]
[143.55749512 -92.75000000]
[159.15342712 -99.39858246]
[169.85955811 -86.25267029]
[160.19114685 -72.32579041]
[144.13204956 -77.76100922]
[129.14305115 -77.18647003]
[114.15406036 -76.61192322]
[99.16506195 -76.03738403]
[94.34539032 -78.43816376]
[90.09651947 -81.50563049]
[91.53102875 -66.57437897]
[100.45001984 -54.64538956]
[94.06794739 -40.16852188]
[95.50245667 -25.23727417]
[96.93696594 -10.30602551]
[98.37147522 4.62522316]
[107.29047394 16.55421257]
[100.90840149 31.03108025]
[102.34290314 45.96232986]
[103.77741241 60.89357758]
[105.21192169 75.82482910]
[129.00193787 87.99459076]
[131.95924377 120.64326477]
[139.37614441 133.68127441]
[146.79304504 146.71926880]
[154.20994568 159.75727844]
[167.75885010 167.92660522]
[167.32670593 182.81494141]
[174.74360657 195.85295105]
[189.15885925 203.67167664]
[189.32473755 220.06997681]
[175.07058716 228.17871094]
[161.05987549 219.65628052]
[161.70559692 203.26985168]
[154.28869629 190.23184204]
[141.27030945 182.99508667]
[141.17193604 167.17417908]
[133.75503540 154.13616943]
[126.33814240 141.09817505]
[118.92124176 128.06016541]
[111.48857117 129.06285095]
[117.98925781 142.58102417]
[107.14140320 152.94075012]
[93.93663025 145.82499695]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[19 140]
[20 139]
[21 138]
[22 137]
[24 135]
[25 134]
[26 133]
[27 132]
[29 130]
[30 129]
[31 116]
[32 115]
[33 114]
[35 112]
[36 111]
[37 110]
[38 109]
[39 108]
[44 103]
[45 102]
[46 101]
[47 100]
[50 97]
[51 96]
[53 95]
[54 94]
[55 93]
[56 92]
[57 91]
[58 90]
[59 89]
[72 85]
[73 84]
[74 83]
[75 82]
[76 81]
[117 127]
[118 126]
[119 125]
[120 124]
[142 159]
[143 158]
[144 157]
[145 156]
[147 154]
[148 153]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
