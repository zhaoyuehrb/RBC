%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:18:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCUACAUGCAUUGGGAGAUCCACAGCUAAGACGCCAGGACUCCCUGGAAGCCUAGAAAUGGGACCAUUGACAUUCACAGAUGUGGCAAUAAAAUUUUCUCUGGAGGAGUGGCAAUUCCUGGACACUGCACAGCAGAAUUUAUAUAGGGAUGUGAUGU\
) } def
/len { sequence length } bind def

/coor [
[96.60991669 277.05603027]
[84.44620514 287.14660645]
[68.71801758 285.59750366]
[58.75661087 273.32778931]
[60.47190094 257.61688232]
[72.84624481 247.78573608]
[74.31650543 232.85797119]
[75.78675842 217.93019104]
[77.25701904 203.00242615]
[78.58065033 188.06094360]
[79.75753784 173.10717773]
[80.93442535 158.15341187]
[82.11131287 143.19966125]
[83.28820038 128.24589539]
[71.24008179 119.31040955]
[57.27186203 124.77746582]
[43.30363846 130.24452209]
[29.33541298 135.71157837]
[15.36718941 141.17863464]
[8.47296047 147.25155640]
[1.07066464 146.61294556]
[-13.00220490 151.80470276]
[-27.07507515 156.99645996]
[-31.28384209 169.82368469]
[-41.96612549 177.75559998]
[-55.07268524 178.06558228]
[-65.79431152 170.86473083]
[-79.96640015 175.77919006]
[-86.63716888 190.10665894]
[-101.51357269 195.44219971]
[-115.76972198 188.62033081]
[-120.94767761 173.68833923]
[-113.97547150 159.50512695]
[-98.98957062 154.48532104]
[-84.88085175 161.60710144]
[-70.70876312 156.69264221]
[-64.04605865 141.27639771]
[-47.98789978 135.30783081]
[-32.26683044 142.92358398]
[-18.19396210 137.73182678]
[-4.12109137 132.54008484]
[9.90013123 127.21041107]
[23.86835480 121.74335480]
[37.83657837 116.27629852]
[51.80480194 110.80924225]
[65.77302551 105.34218597]
[68.11954498 90.52685547]
[56.52438736 81.01096344]
[44.92922974 71.49506378]
[34.11902618 73.18990326]
[24.37304688 68.72026062]
[18.83684349 59.79623413]
[19.14838982 49.51938248]
[7.93576431 39.55559540]
[-3.27686048 29.59181023]
[-14.48948574 19.62802315]
[-30.65252876 16.85529327]
[-36.07819366 1.37969255]
[-25.18502045 -10.87880707]
[-9.17897224 -7.30971193]
[-4.52569866 8.41539764]
[6.68692636 18.37918472]
[17.89955139 28.34297180]
[29.11217690 38.30675888]
[48.26310349 40.74859619]
[54.44512939 59.89990234]
[66.04029083 69.41580200]
[77.63544464 78.93170166]
[84.31799316 75.52677155]
[85.10300446 60.54732895]
[97.68309021 68.71691895]
[104.36563873 65.31198883]
[103.48257446 50.33800507]
[102.59951782 35.36401749]
[101.71645355 20.39003563]
[100.83338928 5.41605091]
[91.36501312 -7.97356415]
[98.47138977 -22.75299072]
[114.84209442 -23.71842194]
[123.63634491 -9.87670422]
[115.80737305 4.53298855]
[116.69043732 19.50697327]
[117.57350159 34.48095703]
[118.45655823 49.45494080]
[119.33962250 64.42892456]
[125.49263763 68.71733856]
[131.89659119 55.15306473]
[138.30053711 41.58879471]
[144.70448303 28.02452469]
[144.79541016 13.02480125]
[153.59651184 0.87817729]
[167.82177734 -3.88019872]
[182.15992737 0.52629244]
[191.25759888 12.45241356]
[191.71801758 27.44534492]
[183.36927795 39.90722656]
[169.32675171 45.18528748]
[158.81738281 55.88824081]
[148.30801392 66.59120178]
[137.79866028 77.29415131]
[143.95166016 81.58256531]
[158.30577087 77.22829437]
[172.65988159 72.87402344]
[177.51119995 68.25955200]
[183.12333679 67.01509857]
[187.66360474 68.64253235]
[202.17758179 64.85516357]
[216.69157410 61.06778717]
[231.20556641 57.28041458]
[245.71954346 53.49304199]
[260.23352051 49.70566559]
[271.51867676 37.80703354]
[287.40051270 41.89353943]
[291.54116821 57.76134109]
[279.68109131 69.08699799]
[264.02090454 64.21965027]
[249.50692749 68.00702667]
[234.99293518 71.79440308]
[220.47894287 75.58177185]
[205.96496582 79.36914825]
[191.45097351 83.15652466]
[177.01414490 87.22812653]
[162.66004944 91.58239746]
[148.30593872 95.93666840]
[142.70108032 98.24734497]
[136.99746704 100.06939697]
[131.22669983 101.39904785]
[144.59179688 108.20890808]
[157.95689392 115.01876068]
[171.32199097 121.82862091]
[188.17973328 123.63211060]
[191.11341858 140.33030701]
[175.87992859 147.77186584]
[164.51213074 135.19372559]
[151.14703369 128.38386536]
[137.78193665 121.57400513]
[124.41683960 114.76414490]
[117.87311554 118.42881012]
[126.33727264 130.81259155]
[134.80143738 143.19636536]
[143.26559448 155.58015442]
[154.36991882 165.66448975]
[152.67251587 180.56814575]
[139.58494568 187.89723206]
[125.99083710 181.55688477]
[123.19487762 166.82029724]
[117.05847931 153.13290405]
[110.92208099 139.44551086]
[104.78567505 125.75812531]
[98.24195862 129.42279053]
[97.06507111 144.37654114]
[95.88818359 159.33030701]
[94.71129608 174.28405762]
[93.53440857 189.23782349]
[95.98980713 198.09117126]
[92.18478394 204.47268677]
[90.71453094 219.40045166]
[89.24427032 234.32821655]
[87.77401733 249.25599670]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 159]
[7 158]
[8 157]
[9 156]
[10 154]
[11 153]
[12 152]
[13 151]
[14 150]
[15 46]
[16 45]
[17 44]
[18 43]
[19 42]
[21 41]
[22 40]
[23 39]
[27 36]
[28 35]
[47 68]
[48 67]
[49 66]
[53 64]
[54 63]
[55 62]
[56 61]
[72 85]
[73 84]
[74 83]
[75 82]
[76 81]
[101 124]
[102 123]
[103 122]
[106 121]
[107 120]
[108 119]
[109 118]
[110 117]
[111 116]
[127 137]
[128 136]
[129 135]
[130 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
