%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:05:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGACCCCGCCCCCCUUAAGAAGAGAAGCCGCGGCCCCUGCAGGACGGGGGCCUGUGUCGCUAUGGGUUCCCCCGCCGCCCCGGAGGGAGCGCUGGGCUACGUCCGCGAGUUCACUCGCCACUCCUCCGACGUGCUGGGCAACCUCAACGAGCUGCGCCUGC\
) } def
/len { sequence length } bind def

/coor [
[159.72190857 152.47608948]
[150.35540771 164.19226074]
[137.13014221 171.26986694]
[122.18604279 172.56370544]
[107.94116211 167.86442566]
[96.70038605 157.93240356]
[90.28255463 144.37469482]
[89.72610474 129.38500977]
[95.12247467 115.38660431]
[84.46488953 125.94197845]
[88.83335114 141.86547852]
[84.61328125 157.73197937]
[73.04405975 169.24887085]
[57.33997345 173.34960938]
[41.79755402 169.00981140]
[31.34537697 179.76861572]
[20.89319801 190.52742004]
[19.68644142 206.52502441]
[6.34603691 215.43643188]
[-8.89439869 210.42558289]
[-14.34370708 195.33636475]
[-5.82164574 181.74392700]
[10.13438892 180.07525635]
[20.58656693 169.31643677]
[31.03874588 158.55763245]
[26.45151138 145.66682434]
[27.88296890 131.99261475]
[35.10971069 120.21833801]
[46.76549149 112.67927551]
[60.59919357 110.89956665]
[73.90951538 115.28439331]
[84.56710052 104.72901917]
[79.46699524 90.62268066]
[64.52338409 89.32334137]
[49.57976151 88.02400970]
[34.63614273 86.72467041]
[19.69252586 85.42533875]
[4.74890757 84.12599945]
[-10.19471073 82.82666016]
[-25.13832855 81.52732849]
[-38.29789734 90.70367432]
[-53.63546753 85.99852753]
[-59.38537598 71.02127838]
[-51.13677979 57.26118088]
[-35.21729660 55.27381516]
[-23.83899307 66.58370972]
[-8.89537525 67.88304901]
[6.04824352 69.18238068]
[20.99186134 70.48171997]
[35.93547821 71.78105164]
[50.87909698 73.08039093]
[65.82271576 74.37972260]
[80.76633453 75.67906189]
[96.36170959 78.82553101]
[103.86272430 88.67840576]
[116.18215942 80.12086487]
[128.50160217 71.56332397]
[140.82102966 63.00579071]
[147.74090576 48.77814484]
[162.60791016 47.87181473]
[174.92735291 39.31427765]
[187.24679565 30.75674057]
[194.94613647 12.16063118]
[214.23382568 11.26871681]
[226.21432495 2.24277377]
[238.10728455 -6.89820147]
[249.91160583 -16.15336037]
[261.71594238 -25.40851974]
[273.52026367 -34.66367722]
[279.60638428 -49.26743698]
[294.39614868 -51.03139114]
[306.20046997 -60.28655243]
[318.00479126 -69.54170990]
[324.09091187 -84.14546967]
[338.88070679 -85.90942383]
[350.68502808 -95.16458130]
[362.39959717 -104.53306580]
[374.02337646 -114.01400757]
[374.50234985 -124.94080353]
[380.80859375 -133.60612488]
[390.64605713 -137.26806641]
[400.65447998 -134.93510437]
[412.63497925 -143.96105957]
[424.61547852 -152.98699951]
[436.59597778 -162.01293945]
[448.57647705 -171.03887939]
[460.55697632 -180.06481934]
[472.53747559 -189.09075928]
[479.51446533 -207.96977234]
[498.75344849 -209.60432434]
[510.37722778 -219.08526611]
[522.00097656 -228.56620789]
[528.11126709 -245.91354370]
[545.50378418 -248.09349060]
[556.94262695 -257.79669189]
[568.38153076 -267.49987793]
[579.82037354 -277.20306396]
[591.25927734 -286.90625000]
[602.69818115 -296.60946655]
[607.24676514 -304.58734131]
[614.45227051 -306.38684082]
[626.07604980 -315.86779785]
[631.38983154 -331.38214111]
[647.53247070 -334.27151489]
[657.89770508 -321.56350708]
[651.82275391 -306.33108521]
[635.55700684 -304.24401855]
[623.93322754 -294.76309204]
[612.40136719 -285.17056274]
[600.96246338 -275.46737671]
[589.52362061 -265.76419067]
[578.08471680 -256.06100464]
[566.64581299 -246.35780334]
[555.20697021 -236.65460205]
[553.89343262 -224.59941101]
[544.40093994 -216.42355347]
[531.48193359 -216.94244385]
[519.85815430 -207.46150208]
[508.23440552 -197.98056030]
[508.11199951 -187.70454407]
[502.20864868 -179.02491760]
[492.28894043 -174.96833801]
[481.56344604 -177.11026001]
[469.58294678 -168.08432007]
[457.60244751 -159.05838013]
[445.62194824 -150.03244019]
[433.64144897 -141.00650024]
[421.66094971 -131.98056030]
[409.68045044 -122.95461273]
[403.50274658 -104.66127014]
[383.50430298 -102.39024353]
[371.88055420 -92.90930176]
[368.66949463 -86.21253967]
[359.94018555 -83.36026001]
[348.13586426 -74.10510254]
[342.89407349 -60.16333389]
[327.25994873 -57.73738861]
[315.45562744 -48.48222733]
[303.65130615 -39.22706985]
[298.40951538 -25.28530312]
[282.77542114 -22.85935593]
[270.97109985 -13.60419655]
[259.16677856 -4.34903765]
[247.36244202 4.90612125]
[244.02293396 11.53975487]
[235.24026489 14.22327328]
[223.25976562 23.24921608]
[222.74145508 33.51288986]
[216.50798035 41.95856094]
[206.43931580 45.62985611]
[195.80433655 43.07617569]
[183.48489380 51.63371658]
[171.16545105 60.19125366]
[165.12675476 73.80680847]
[149.37857056 75.32522583]
[137.05914307 83.88276672]
[124.73970032 92.44029999]
[112.42026520 100.99784088]
[127.16464233 98.24042511]
[141.80265808 101.51583862]
[153.96580505 110.29410553]
[161.68600464 123.15483856]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 32]
[10 31]
[15 25]
[16 24]
[17 23]
[33 53]
[34 52]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[55 158]
[56 157]
[57 156]
[58 155]
[60 153]
[61 152]
[62 151]
[64 147]
[65 146]
[66 144]
[67 143]
[68 142]
[69 141]
[71 139]
[72 138]
[73 137]
[75 135]
[76 134]
[77 132]
[78 131]
[82 129]
[83 128]
[84 127]
[85 126]
[86 125]
[87 124]
[88 123]
[90 119]
[91 118]
[92 117]
[94 114]
[95 113]
[96 112]
[97 111]
[98 110]
[99 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
