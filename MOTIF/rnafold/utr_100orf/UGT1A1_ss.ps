%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGCAAAGGCGCCAUGGCUGUGGAGUCCCAGGGCGGACGCCCACUUGUCCUGGGCCUGCUGCUGUGUGUGCUGGGCCCAGUGGUGUCCCAUGCUGGGAAGAUACUGUUGAUCC\
) } def
/len { sequence length } bind def

/coor [
[131.55375671 147.25189209]
[146.51753235 146.22566223]
[134.57614136 137.14804077]
[127.24960327 135.58450317]
[122.43872070 127.65937042]
[110.74752045 118.26171875]
[98.32070923 121.12296295]
[86.50208282 116.33419037]
[79.57193756 105.62973022]
[80.04014587 92.88637543]
[68.60771179 83.17558289]
[57.17528534 73.46478271]
[45.74285507 63.75399017]
[34.31042099 54.04319763]
[22.74754715 44.48809814]
[11.05634594 35.09045029]
[-0.63485491 25.69279861]
[-12.32605553 16.29514885]
[-24.01725578 6.89749861]
[-35.70845795 -2.50015140]
[-51.31199265 -5.11554193]
[-56.38430405 -19.11985970]
[-68.07550049 -28.51751137]
[-79.76670074 -37.91516113]
[-91.45790100 -47.31280899]
[-102.35269928 -45.49988937]
[-112.21374512 -49.96132278]
[-117.81062317 -58.96571350]
[-117.46092987 -69.34065247]
[-128.62620544 -79.35746765]
[-139.79148865 -89.37428284]
[-150.95675659 -99.39109802]
[-162.12203979 -109.40791321]
[-173.28730774 -119.42473602]
[-184.45259094 -129.44154358]
[-195.61785889 -139.45835876]
[-206.78314209 -149.47518921]
[-217.94841003 -159.49200439]
[-233.09175110 -156.10687256]
[-247.31929016 -162.30015564]
[-255.16024780 -175.69039917]
[-253.59963989 -191.12879944]
[-243.23751831 -202.67897034]
[-228.05836487 -205.89961243]
[-213.89884949 -199.55235291]
[-206.20359802 -186.07783508]
[-207.93159485 -170.65727234]
[-196.76632690 -160.64045715]
[-185.60104370 -150.62364197]
[-174.43577576 -140.60682678]
[-163.27049255 -130.59001160]
[-152.10522461 -120.57318878]
[-140.93994141 -110.55637360]
[-129.77467346 -100.53955841]
[-118.60939026 -90.52274323]
[-107.44411469 -80.50592804]
[-88.34201813 -78.06529236]
[-82.06025696 -59.00401306]
[-70.36905670 -49.60636139]
[-58.67785263 -40.20870972]
[-46.98665237 -30.81106186]
[-32.21934891 -28.86785316]
[-26.31080627 -14.19135189]
[-14.61960602 -4.79370213]
[-2.92840576 4.60394812]
[8.76279545 14.00159836]
[20.45399666 23.39924812]
[32.14519501 32.79689789]
[39.42670059 34.55825424]
[44.02121735 42.61076736]
[55.45364761 52.32155991]
[66.88607788 62.03235626]
[78.31851196 71.74314880]
[89.75093842 81.45394135]
[106.10224152 79.70807648]
[118.77842712 90.18316650]
[120.14516449 106.57051849]
[131.83636475 115.96817017]
[143.65374756 125.20664215]
[155.59513855 134.28425598]
[168.65270996 141.66668701]
[182.58735657 147.21875000]
[196.52200317 152.77082825]
[210.45664978 158.32290649]
[223.55088806 150.20826721]
[238.73501587 151.34658813]
[250.20169067 161.09233093]
[253.68917847 175.54830933]
[267.62384033 181.10038757]
[281.55847168 186.65245056]
[295.49313354 192.20452881]
[309.42779541 197.75660706]
[326.37994385 198.00236511]
[330.83660889 214.36006165]
[316.35189819 223.17082214]
[303.87570190 211.69125366]
[289.94107056 206.13917542]
[276.00640869 200.58711243]
[262.07174683 195.03503418]
[248.13710022 189.48295593]
[235.66383362 197.57958984]
[220.63694763 196.76933289]
[208.83052063 187.15362549]
[204.90458679 172.25755310]
[190.96994019 166.70547485]
[177.03527832 161.15341187]
[163.10063171 155.60133362]
[169.93615723 168.95332336]
[169.35807800 183.94216919]
[161.51446533 196.72802734]
[148.41473389 204.03533936]
[133.41479492 203.99214172]
[120.35737610 196.60946655]
[112.58756256 183.77864075]
[112.09583282 168.78671265]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 80]
[3 79]
[5 78]
[6 77]
[10 74]
[11 73]
[12 72]
[13 71]
[14 70]
[15 68]
[16 67]
[17 66]
[18 65]
[19 64]
[20 63]
[22 61]
[23 60]
[24 59]
[25 58]
[29 56]
[30 55]
[31 54]
[32 53]
[33 52]
[34 51]
[35 50]
[36 49]
[37 48]
[38 47]
[81 107]
[82 106]
[83 105]
[84 104]
[88 100]
[89 99]
[90 98]
[91 97]
[92 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
