%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCGAAGAAGCCCGGUCUCCGGGUAAGAUGGCAGCGGACGGACAGUGCUCGCUCCCCGCUUCAUGGCGGCCGGUGACCCUCACCCACGUCGAAUAUCCUGCAGGUGAUCUCUCUGGCCACCUCCUUG\
) } def
/len { sequence length } bind def

/coor [
[180.34606934 175.12396240]
[172.42889404 187.86437988]
[160.95571899 197.52700806]
[147.05439758 203.16198730]
[132.09143066 204.21540833]
[117.53771210 200.58370972]
[104.82389069 192.62388611]
[95.19976044 181.11840820]
[89.61138153 167.19827271]
[88.60800934 152.23291016]
[94.12614441 138.28479004]
[82.59643555 147.87988281]
[71.06672668 157.47497559]
[59.53702164 167.07006836]
[48.00731659 176.66517639]
[36.47760773 186.26026917]
[28.17058563 201.03962708]
[11.66918850 197.14859009]
[10.84012985 180.21492004]
[26.88251305 174.73056030]
[38.41222000 165.13546753]
[49.94192886 155.54037476]
[61.47163391 145.94526672]
[73.00134277 136.35017395]
[84.53105164 126.75508118]
[84.62237549 119.25563812]
[71.72412109 111.59828186]
[84.80501556 104.25675201]
[84.89633942 96.75730896]
[73.60370636 86.88429260]
[62.31106567 77.01128387]
[51.01842880 67.13827515]
[42.40311813 63.79734039]
[39.57478714 56.88472748]
[28.52591515 46.73965454]
[17.47704315 36.59458542]
[6.42817211 26.44951630]
[-4.62069893 16.30444717]
[-22.18172646 20.45740509]
[-38.60878372 13.37318516]
[-47.48579025 -1.97867393]
[-45.46676636 -19.44003868]
[-56.99647141 -29.03513336]
[-72.71006012 -27.34440041]
[-84.96418762 -37.32497787]
[-86.48869324 -53.05556488]
[-76.37911987 -65.20348358]
[-60.63329315 -66.56159210]
[-48.59293365 -56.32414627]
[-47.40137863 -40.56484222]
[-35.87166977 -30.96974564]
[-24.56426048 -35.69669724]
[-12.24935436 -35.12330627]
[-1.30195415 -29.29794884]
[6.14005470 -19.28784943]
[8.59332561 -6.98407793]
[5.52437067 5.25557518]
[16.57324219 15.40064526]
[27.62211418 25.54571533]
[38.67098618 35.69078445]
[49.71985626 45.83585358]
[60.89143753 55.84563828]
[72.18407440 65.71865082]
[83.47671509 75.59165955]
[94.76935577 85.46466827]
[109.13336182 89.78615570]
[123.99900818 87.78299713]
[136.64230347 78.27207184]
[150.28883362 84.24042511]
[165.15447998 82.23726654]
[180.02012634 80.23411560]
[194.88577271 78.23095703]
[209.75141907 76.22779846]
[224.61706543 74.22464752]
[237.26036072 64.71372223]
[250.90689087 70.68207550]
[265.77255249 68.67891693]
[272.69406128 57.05239868]
[284.88403320 51.64470673]
[297.76571655 54.23939514]
[306.64367676 63.66057968]
[321.55368042 62.02001190]
[336.46371460 60.37944412]
[351.37371826 58.73887634]
[366.28372192 57.09830856]
[376.15850830 45.05146790]
[391.30276489 43.60009766]
[402.72674561 53.08843613]
[417.63674927 51.44786835]
[423.74182129 37.35447693]
[436.08520508 28.21466446]
[451.34661865 26.48699760]
[465.42080688 32.63621140]
[474.52188110 45.00819397]
[476.20172119 60.27494812]
[470.00842285 74.32979584]
[457.60797119 83.39204407]
[442.33602905 85.02400208]
[428.30065918 78.78668213]
[419.27731323 66.35788727]
[404.36730957 67.99845123]
[395.27969360 79.74370575]
[380.18218994 81.61987305]
[367.92431641 72.00832367]
[353.01428223 73.64888763]
[338.10427856 75.28945923]
[323.19427490 76.93002319]
[308.28424072 78.57059479]
[298.38699341 92.10985565]
[281.43307495 94.39640808]
[267.77569580 83.54456329]
[252.91004944 85.54771423]
[241.33004761 94.91535950]
[226.62020874 89.09028625]
[211.75457764 91.09344482]
[196.88893127 93.09660339]
[182.02328491 95.09975433]
[167.15763855 97.10291290]
[152.29199219 99.10607147]
[140.71199036 108.47370911]
[126.00215912 102.64864349]
[111.13652039 104.65179443]
[125.14270782 110.02083588]
[140.09828186 108.86716461]
[154.67601013 112.40126038]
[167.44288635 120.27570343]
[177.14390564 131.71643066]
[182.82543945 145.59880066]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 25]
[12 24]
[13 23]
[14 22]
[15 21]
[16 20]
[29 65]
[30 64]
[31 63]
[32 62]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[42 51]
[43 50]
[66 122]
[67 121]
[69 119]
[70 118]
[71 117]
[72 116]
[73 115]
[74 114]
[76 112]
[77 111]
[81 108]
[82 107]
[83 106]
[84 105]
[85 104]
[88 101]
[89 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
