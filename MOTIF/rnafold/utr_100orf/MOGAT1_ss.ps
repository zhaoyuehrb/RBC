%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUGGGUGCAGGCUGCAGUGGCUGGCGCCGUCCUCGCCCGGCCAGGCCAUGAAGGUAGAGUUUGCACCGCUCAACAUCCAGCUGGCGCGGCGGCUGCAGACGGUGGCCGUGCUGCAGUGGGUCCUGAAAUACCUGCUGCUCGGGCCGA\
) } def
/len { sequence length } bind def

/coor [
[269.90173340 148.46980286]
[256.74899292 141.25834656]
[250.20027161 127.76338196]
[252.67411804 112.96878052]
[263.25628662 102.33876038]
[248.26377869 102.81307983]
[233.27128601 103.28740692]
[218.27879333 103.76172638]
[203.28628540 104.23605347]
[188.29379272 104.71037292]
[173.30128479 105.18469238]
[158.30879211 105.65901947]
[143.31629944 106.13333893]
[128.32379150 106.60766602]
[122.03722382 118.98049164]
[110.73286438 127.03153992]
[96.98467255 128.92761230]
[83.92305756 124.23696899]
[74.52210236 114.02766418]
[59.96089172 117.62921143]
[45.39968109 121.23075104]
[30.83847046 124.83229828]
[16.27725792 128.43383789]
[1.71604741 132.03538513]
[-12.84516430 135.63693237]
[-20.48592377 140.76803589]
[-27.75132751 139.15747070]
[-42.38523483 142.45121765]
[-49.39990997 156.42720032]
[-63.77746964 162.57699585]
[-78.72926331 157.99682617]
[-87.19551086 144.84933472]
[-85.17871857 129.34234619]
[-73.63114166 118.79780579]
[-58.00519943 118.19450378]
[-45.67898560 127.81730652]
[-31.04507828 124.52355957]
[-16.44670868 121.07572174]
[-1.88549709 117.47417450]
[12.67571449 113.87262726]
[27.23692513 110.27108765]
[41.79813766 106.66954041]
[56.35934830 103.06799316]
[70.92056274 99.46645355]
[71.32843018 95.11740112]
[72.38304138 90.87847900]
[59.83465576 82.66032410]
[47.28627396 74.44217682]
[31.35071564 76.29624939]
[20.06745529 64.89153290]
[22.09204292 48.97674179]
[35.87138748 40.76034164]
[50.83515549 46.54525375]
[55.50442505 61.89378738]
[68.05281067 70.11193848]
[80.60119629 78.33009338]
[98.23704529 70.96914673]
[116.63403320 76.14192963]
[127.84947205 91.61516571]
[142.84196472 91.14083862]
[157.83447266 90.66651917]
[172.82696533 90.19219971]
[187.81947327 89.71787262]
[202.81196594 89.24355316]
[217.80445862 88.76922607]
[232.79696655 88.29490662]
[247.78945923 87.82058716]
[262.78195190 87.34626007]
[277.68121338 85.61068726]
[292.38131714 82.62619019]
[307.08139038 79.64170074]
[321.78149414 76.65721130]
[322.36303711 69.25344849]
[324.55697632 62.06939697]
[328.29449463 55.45582199]
[333.43066406 49.74379349]
[339.74972534 45.22815323]
[346.97393799 42.15243149]
[354.77587891 40.69589996]
[362.79318237 40.96352768]
[370.64538574 42.97932434]
[377.95196533 46.68347549]
[384.35073853 51.93351746]
[389.51583862 58.50953674]
[402.23468018 50.55776596]
[414.95355225 42.60599899]
[427.67239380 34.65422821]
[440.39126587 26.70245934]
[453.11013794 18.75069046]
[465.82897949 10.79892159]
[478.54785156 2.84715295]
[486.14764404 -11.02920818]
[501.04110718 -11.21552086]
[513.75994873 -19.16728973]
[526.47882080 -27.11905861]
[539.19769287 -35.07082748]
[546.41119385 -49.79824448]
[562.78851318 -50.64474106]
[571.48199463 -36.73951340]
[563.54852295 -22.38706589]
[547.14941406 -22.35196877]
[534.43060303 -14.40019989]
[521.71173096 -6.44843054]
[508.99285889 1.50333810]
[502.30279541 14.81093502]
[486.49960327 15.56601143]
[473.78076172 23.51778030]
[461.06188965 31.46954918]
[448.34304810 39.42131805]
[435.62417603 47.37308884]
[422.90530396 55.32485580]
[410.18646240 63.27662659]
[397.46759033 71.22839355]
[396.99328613 86.22089386]
[409.18405151 94.96073914]
[421.37484741 103.70057678]
[433.56561279 112.44042206]
[445.75640869 121.18026733]
[457.94717407 129.92010498]
[470.13796997 138.65995789]
[482.32873535 147.39979553]
[494.51953125 156.13963318]
[509.20352173 151.12371826]
[524.02148438 155.72897339]
[533.27551270 168.18457031]
[533.40734863 183.70108032]
[524.36621094 196.31210327]
[509.62866211 201.16842651]
[494.86157227 196.40270996]
[485.74316406 183.84745789]
[485.77969360 168.33041382]
[473.58889771 159.59057617]
[461.39813232 150.85073853]
[449.20733643 142.11088562]
[437.01657104 133.37104797]
[424.82577515 124.63120270]
[412.63500977 115.89135742]
[400.44421387 107.15151978]
[388.25341797 98.41167450]
[366.08941650 113.06740570]
[340.84042358 109.68486023]
[324.76599121 91.35730743]
[310.06588745 94.34179688]
[295.36581421 97.32628632]
[280.66571045 100.31078339]
[293.40835571 108.22435760]
[299.21621704 122.05435944]
[295.94430542 136.69316101]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 68]
[6 67]
[7 66]
[8 65]
[9 64]
[10 63]
[11 62]
[12 61]
[13 60]
[14 59]
[19 44]
[20 43]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[27 37]
[28 36]
[46 56]
[47 55]
[48 54]
[69 145]
[70 144]
[71 143]
[72 142]
[84 113]
[85 112]
[86 111]
[87 110]
[88 109]
[89 108]
[90 107]
[91 106]
[93 104]
[94 103]
[95 102]
[96 101]
[114 139]
[115 138]
[116 137]
[117 136]
[118 135]
[119 134]
[120 133]
[121 132]
[122 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
