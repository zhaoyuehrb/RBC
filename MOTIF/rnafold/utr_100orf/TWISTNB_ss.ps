%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:26:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGGAACCUUGACAAGCAGCAUGGCUGCAGGUUGCUCAGAGGCGCCGCGGCCAGCGGCGGCUUCUGAUGGGUCUCUGGUAGGGCAGGCUGGCGUCCUGCCUUGCCUAGAGUUGCCGACUU\
) } def
/len { sequence length } bind def

/coor [
[77.78961945 123.55744171]
[71.67534637 116.79296875]
[67.60655212 108.46164703]
[54.74683762 116.18354034]
[46.89885330 129.92106628]
[32.00447083 129.83967590]
[19.14475060 137.56156921]
[6.28503084 145.28346252]
[-6.57468843 153.00535583]
[-19.43440819 160.72724915]
[-5.44631720 166.14326477]
[0.83153063 179.76635742]
[-4.13888741 193.91891479]
[-17.55637932 200.62495422]
[-31.85921669 196.10511780]
[-38.98671341 182.90667725]
[-34.92268753 168.46879578]
[-48.81754684 174.11970520]
[-62.71240616 179.77062988]
[-76.60726929 185.42153931]
[-90.50212860 191.07246399]
[-102.89646912 202.64038086]
[-117.44339752 193.93272400]
[-113.10303497 177.54377747]
[-96.15304565 177.17759705]
[-82.25818634 171.52668762]
[-68.36332703 165.87576294]
[-54.46846390 160.22485352]
[-40.57360458 154.57392883]
[-27.15629959 147.86752319]
[-14.29658031 140.14562988]
[-1.43686104 132.42373657]
[11.42285824 124.70184326]
[24.28257751 116.97995758]
[31.21074677 103.79474640]
[47.02494431 103.32381439]
[59.88466263 95.60192871]
[64.26203156 81.25484467]
[57.90331268 67.66931152]
[51.54459763 54.08377838]
[45.18588257 40.49824524]
[38.82716751 26.91271019]
[32.46844864 13.32717705]
[26.10973358 -0.25835705]
[19.57663155 -13.76089668]
[12.87022495 -27.17820168]
[6.16381788 -40.59550858]
[-0.54258919 -54.01281357]
[-7.24899626 -67.43012238]
[-21.95196724 -73.84901428]
[-25.96127129 -89.38301086]
[-16.20131302 -102.11576080]
[-0.15909904 -102.27977753]
[9.85915852 -89.74925232]
[6.16831017 -74.13652802]
[12.87471676 -60.71922302]
[19.58112335 -47.30191422]
[26.28753090 -33.88460922]
[32.99393845 -20.46730232]
[38.86843109 -15.83617210]
[39.69526672 -6.61707306]
[46.05398560 6.96846104]
[52.41270065 20.55399513]
[58.77141571 34.13953018]
[65.13013458 47.72506332]
[71.48884583 61.31059647]
[77.84756470 74.89613342]
[93.90010071 68.34354401]
[110.40460968 70.80115509]
[122.83827972 80.92612457]
[128.13542175 95.36836243]
[143.05592346 96.91068268]
[157.97642517 98.45299530]
[172.93168640 99.61062622]
[187.91178894 100.38280487]
[202.89190674 101.15499115]
[217.87202454 101.92716980]
[232.86082458 102.50641632]
[247.85585022 102.89263916]
[262.85089111 103.27885437]
[277.84591675 103.66507721]
[292.84094238 104.05129242]
[307.83596802 104.43751526]
[322.83099365 104.82373047]
[337.82601929 105.20994568]
[352.82104492 105.59616852]
[367.81607056 105.98238373]
[382.81109619 106.36860657]
[393.03158569 94.53325653]
[408.47674561 92.08750153]
[421.85379028 100.18616486]
[426.84652710 115.00528717]
[421.09753418 129.54774475]
[407.32131958 136.94703674]
[392.02255249 133.70942688]
[382.42489624 121.36363220]
[367.42984009 120.97741699]
[352.43481445 120.59119415]
[337.43978882 120.20497894]
[322.44476318 119.81875610]
[307.44973755 119.43254089]
[292.45471191 119.04631805]
[277.45968628 118.66010284]
[262.46466064 118.27388000]
[247.46963501 117.88766479]
[232.47460938 117.50144196]
[225.62593079 120.51020813]
[217.09983826 116.90727997]
[202.11972046 116.13510132]
[187.13961792 115.36291504]
[172.15950012 114.59073639]
[167.99909973 117.14991760]
[162.16673279 117.03921509]
[156.43411255 113.37348938]
[141.51361084 111.83117676]
[126.59310913 110.28886414]
[123.15963745 117.56298828]
[117.74257660 123.71518707]
[110.70299530 128.20719910]
[102.54697418 130.61557007]
[93.88947296 130.67034912]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 37]
[4 36]
[6 34]
[7 33]
[8 32]
[9 31]
[10 30]
[17 29]
[18 28]
[19 27]
[20 26]
[21 25]
[38 67]
[39 66]
[40 65]
[41 64]
[42 63]
[43 62]
[44 61]
[45 59]
[46 58]
[47 57]
[48 56]
[49 55]
[71 116]
[72 115]
[73 114]
[74 111]
[75 110]
[76 109]
[77 108]
[78 106]
[79 105]
[80 104]
[81 103]
[82 102]
[83 101]
[84 100]
[85 99]
[86 98]
[87 97]
[88 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
