%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:26:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCGGGGAGUCGGCGCCAUGACCCCAUCGAGGCUUCCCUGGUUGCUUAGCUGGGUCUCGGCCACGGCGUGGAGAGCGGCAAGAUCACCCCUUCUGUGUCAUUCUCUGAGGAAAACAA\
) } def
/len { sequence length } bind def

/coor [
[114.06603241 328.45892334]
[120.73004913 314.68035889]
[133.04086304 305.58627319]
[130.69435120 290.77093506]
[128.34782410 275.95559692]
[126.00131226 261.14028931]
[123.65479279 246.32496643]
[121.30827332 231.50962830]
[118.96176147 216.69430542]
[116.61524200 201.87898254]
[114.26872253 187.06365967]
[111.92221069 172.24833679]
[107.71631622 166.05795288]
[109.71347046 157.01493835]
[107.75557709 142.14326477]
[105.79768372 127.27159119]
[80.69007111 115.14598846]
[80.90918732 90.77803040]
[70.58386993 79.89741516]
[60.25854874 69.01679993]
[49.93323135 58.13618088]
[39.60791397 47.25556564]
[31.32332420 43.11669540]
[29.15934372 35.95236969]
[19.12238503 24.80519676]
[2.38795161 26.81996346]
[-12.12873173 18.58480644]
[-18.85065842 3.48931885]
[-15.32993221 -12.48639202]
[-25.65525055 -23.36700821]
[-35.98057175 -34.24762344]
[-46.30588913 -45.12823868]
[-56.63120651 -56.00885391]
[-66.95652771 -66.88947296]
[-77.28184509 -77.77008820]
[-87.60716248 -88.65070343]
[-97.93247986 -99.53131866]
[-113.49864960 -100.10768127]
[-123.81499481 -111.28926086]
[-123.16958618 -126.12567139]
[-133.49490356 -137.00628662]
[-143.82022095 -147.88690186]
[-154.14553833 -158.76751709]
[-170.01448059 -162.90379333]
[-174.10536194 -178.78448486]
[-162.20985413 -190.07292175]
[-146.56500244 -185.15650940]
[-143.26492310 -169.09283447]
[-132.93960571 -158.21221924]
[-122.61428833 -147.33160400]
[-112.28897095 -136.45098877]
[-97.43911743 -136.31903076]
[-86.81277466 -125.43163300]
[-87.05186462 -109.85663605]
[-76.72654724 -98.97602081]
[-66.40122986 -88.09540558]
[-56.07590866 -77.21479034]
[-45.75059128 -66.33417511]
[-35.42527390 -55.45355606]
[-25.09995461 -44.57294083]
[-14.77463531 -33.69232559]
[-4.44931698 -22.81171036]
[8.63783932 -25.77631760]
[21.57543755 -21.82551003]
[30.92274666 -11.89729309]
[34.13815308 1.46600950]
[30.26955795 14.76823711]
[40.30651855 25.91540909]
[50.48852921 36.93024826]
[60.81384659 47.81086349]
[71.13916779 58.69147873]
[81.46448517 69.57209778]
[91.78980255 80.45271301]
[101.85934448 77.20430756]
[113.04457855 79.21266174]
[122.59719849 86.71875000]
[127.84288788 98.54172516]
[142.71455383 96.58383179]
[157.58622742 94.62593842]
[172.45790100 92.66804504]
[180.67588806 88.39844513]
[187.74389648 90.85883331]
[202.66172791 89.29090118]
[217.57955933 87.72297668]
[226.17340088 74.65852356]
[241.16906738 70.22413635]
[255.48608398 76.51360321]
[262.36437988 90.55721283]
[258.55621338 105.72402191]
[245.85972595 114.85271454]
[230.26977539 113.63301086]
[219.14747620 102.64080811]
[204.22966003 104.20873260]
[189.31182861 105.77665710]
[174.41580200 107.53971863]
[159.54412842 109.49761200]
[144.67245483 111.45550537]
[129.80078125 113.41339874]
[120.66935730 125.31369781]
[122.62725067 140.18537903]
[124.58514404 155.05705261]
[126.73753357 169.90180969]
[129.08404541 184.71714783]
[131.43057251 199.53247070]
[133.77708435 214.34779358]
[136.12359619 229.16311646]
[138.47012329 243.97843933]
[140.81663513 258.79376221]
[143.16314697 273.60910034]
[145.50967407 288.42440796]
[147.85618591 303.23974609]
[162.37469482 308.08447266]
[172.97036743 319.12939453]
[177.20840454 333.83645630]
[174.11491394 348.82608032]
[164.40078735 360.65377808]
[150.29823303 366.60162354]
[135.04792786 365.30282593]
[122.15428162 357.05584717]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 111]
[4 110]
[5 109]
[6 108]
[7 107]
[8 106]
[9 105]
[10 104]
[11 103]
[12 102]
[14 101]
[15 100]
[16 99]
[18 73]
[19 72]
[20 71]
[21 70]
[22 69]
[24 68]
[25 67]
[29 62]
[30 61]
[31 60]
[32 59]
[33 58]
[34 57]
[35 56]
[36 55]
[37 54]
[40 51]
[41 50]
[42 49]
[43 48]
[77 98]
[78 97]
[79 96]
[80 95]
[82 94]
[83 93]
[84 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
