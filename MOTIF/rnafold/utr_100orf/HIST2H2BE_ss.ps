%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:41:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCUUUUCUUGGCUAAGCCGCGUUUGUACUGUGUCUUACCAUGCCUGAACCGGCAAAAUCCGCUCCGGCCCCUAAAAAGGGCUCCAAGAAAGCCGUCACCAAAGCCCAGAAGAAAGACGGCAAGAAGCGCAAGCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[111.39162445 330.14196777]
[115.10945892 344.67391968]
[114.00353241 359.63308716]
[108.18910217 373.46032715]
[98.27219391 384.71444702]
[85.28643036 392.22241211]
[70.58528900 395.20175171]
[55.70104218 393.34191895]
[42.18503189 386.83670044]
[31.44601250 376.36419678]
[24.60328674 363.01589966]
[22.37005806 348.18307495]
[24.97986412 333.40951538]
[14.78878212 344.41595459]
[4.59770012 355.42239380]
[-1.72691250 371.15249634]
[-18.59308815 369.42956543]
[-21.60651970 352.74557495]
[-6.40874529 345.23132324]
[3.78233695 334.22488403]
[13.97341919 323.21844482]
[21.94393349 310.51132202]
[27.41674423 296.54534912]
[32.88955307 282.57937622]
[38.36236572 268.61340332]
[43.83517456 254.64743042]
[49.30798721 240.68145752]
[54.78079605 226.71548462]
[60.25360870 212.74951172]
[59.12996674 209.33016968]
[59.65551376 205.18730164]
[62.15581894 201.12503052]
[66.57435608 198.06352234]
[72.95507812 184.48831177]
[71.36666107 169.67864990]
[84.23937225 160.48060608]
[90.62009430 146.90539551]
[97.00082397 133.33018494]
[103.38154602 119.75497437]
[95.49143219 123.43376160]
[85.53710175 123.60659790]
[75.13973999 119.35448456]
[66.27056122 110.50426483]
[60.91666031 97.74246979]
[48.95809174 88.68748474]
[36.99952698 79.63250732]
[25.04095840 70.57752228]
[9.42169189 72.98876190]
[-3.27824783 63.58200455]
[-5.52421188 47.93811798]
[4.01629066 35.33834076]
[19.68304825 33.25790024]
[32.18125153 42.93107986]
[34.09593964 58.61895752]
[46.05450821 67.67394257]
[58.01307297 76.72891998]
[69.97164154 85.78390503]
[77.04099274 83.27906036]
[70.88755035 69.59931946]
[64.73411560 55.91958618]
[52.95843506 46.62800598]
[52.21529770 31.64642715]
[63.01364517 21.23509979]
[77.95813751 22.52430916]
[86.81392670 34.63112640]
[83.51544952 49.26489639]
[87.34757233 63.76713181]
[91.17969513 78.26936340]
[98.24905396 75.76451874]
[101.83878326 61.20039368]
[105.42852020 46.63626480]
[109.01825714 32.07213974]
[112.60799408 17.50801086]
[103.23703766 4.98925304]
[104.15699005 -10.62124729]
[114.93346405 -21.95268822]
[130.47814941 -23.65471077]
[143.45130920 -14.92367077]
[147.72743225 0.11790096]
[141.28744507 14.36783409]
[127.17211914 21.09774590]
[123.58238220 35.66187286]
[119.99264526 50.22600174]
[116.40291595 64.79013062]
[112.81317902 79.35425568]
[117.27471924 85.38291168]
[127.40741730 74.32269287]
[135.30397034 61.56947708]
[150.29115295 60.94974136]
[159.21366882 73.00746918]
[154.23956299 87.15873718]
[139.73645020 90.98230743]
[126.19779205 97.44021606]
[130.65933228 103.46887207]
[145.63671875 104.29230499]
[160.61408997 105.11573029]
[175.59147644 105.93916321]
[190.56886292 106.76259613]
[205.54623413 107.58602142]
[210.98677063 93.47022247]
[220.52462769 81.72779846]
[233.22537231 73.50914764]
[247.84472656 69.61945343]
[262.95043945 70.43978882]
[277.06259155 75.88977814]
[288.79861450 85.43549347]
[297.00875854 98.14174652]
[300.88864136 112.76370239]
[300.05819702 127.86885071]
[294.59875488 141.97734070]
[285.04516602 153.70698547]
[272.33340454 161.90859985]
[257.70886230 165.77870178]
[242.60427856 164.93812561]
[228.49943542 159.46922302]
[216.77621460 149.90779114]
[208.58311462 137.19055176]
[204.72280884 122.56340790]
[189.74542236 121.73997498]
[174.76805115 120.91654205]
[159.79066467 120.09311676]
[144.81327820 119.26968384]
[129.83590698 118.44625092]
[116.95675659 126.13570404]
[110.57603455 139.71090698]
[104.19530487 153.28611755]
[97.81458282 166.86132812]
[98.94660950 182.64198303]
[86.53028870 190.86904907]
[80.14956665 204.44425964]
[74.21958160 218.22232056]
[68.74676514 232.18829346]
[63.27395630 246.15426636]
[57.80114746 260.12023926]
[52.32833481 274.08621216]
[46.85552597 288.05218506]
[41.38271332 302.01815796]
[35.90990448 315.98413086]
[48.07221603 307.20471191]
[62.39790726 302.75784302]
[77.39384460 303.10702515]
[91.49702454 308.21585083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 21]
[14 20]
[15 19]
[22 138]
[23 137]
[24 136]
[25 135]
[26 134]
[27 133]
[28 132]
[29 131]
[33 130]
[34 129]
[36 127]
[37 126]
[38 125]
[39 124]
[44 57]
[45 56]
[46 55]
[47 54]
[69 85]
[70 84]
[71 83]
[72 82]
[73 81]
[94 123]
[95 122]
[96 121]
[97 120]
[98 119]
[99 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
