%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:53:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCCCCGAAGGAUCUCGGAGGCGAAGUUGCUAGAAGAUACGUAAGAGGGCCCCAGUGGAGAUGGAACAACCAAAGGACGGGGCUGGGCCUGAAGGGAACAACCUGUCCCUGCCGUCAUCUGGGACCGAGCCAUGGCCCCCUGCGCCUCUCCCAGCCCCUC\
) } def
/len { sequence length } bind def

/coor [
[-113.55159760 124.14959717]
[-126.63727570 131.48207092]
[-139.72294617 138.81454468]
[-152.80862427 146.14701843]
[-165.89430237 153.47947693]
[-178.97996521 160.81195068]
[-189.63755798 171.36732483]
[-197.09577942 184.38172913]
[-204.55401611 197.39613342]
[-212.01225281 210.41055298]
[-207.63142395 225.59553528]
[-215.34414673 239.39007568]
[-230.57460022 243.61012268]
[-244.28683472 235.75198364]
[-248.34561157 220.47775269]
[-240.34294128 206.84938049]
[-225.02665710 202.95231628]
[-217.56842041 189.93791199]
[-210.11019897 176.92350769]
[-202.65196228 163.90908813]
[-213.20780945 153.25103760]
[-223.76271057 142.59391785]
[-236.84837341 149.92639160]
[-249.93405151 157.25886536]
[-263.01971436 164.59133911]
[-270.93145752 178.95576477]
[-287.33050537 179.01564026]
[-295.34692383 164.70938110]
[-286.73410034 150.75402832]
[-270.35220337 151.50566101]
[-257.26651001 144.17318726]
[-244.18084717 136.84072876]
[-231.09516907 129.50825500]
[-246.09431458 129.66949463]
[-253.16140747 116.43861389]
[-255.57089233 101.63339996]
[-253.06391907 86.84438324]
[-245.90980530 73.66034698]
[-234.87713623 63.49766922]
[-221.15113831 57.44812393]
[-206.20640564 56.16161346]
[-191.64846802 59.77635574]
[-179.04127502 67.90401459]
[-169.73924255 79.67143250]
[-164.74166870 93.81443024]
[-164.58546448 108.81361389]
[-169.28739929 123.05762482]
[-178.34405518 135.01782227]
[-186.31243896 147.72628784]
[-173.22676086 140.39381409]
[-160.14109802 133.06134033]
[-147.05541992 125.72886658]
[-133.96974182 118.39639282]
[-120.88407135 111.06392670]
[-135.88320923 111.22516632]
[-150.25596619 115.51747131]
[-164.47497559 110.74047852]
[-173.34077454 98.64099121]
[-173.61141968 83.64343262]
[-165.18792725 71.23195648]
[-151.15052795 65.94506073]
[-136.63226318 69.71601105]
[-126.94228363 81.16526794]
[-114.46947479 89.49768066]
[-121.42062378 76.20552063]
[-128.37176514 62.91335678]
[-143.18989563 56.76496887]
[-147.48318481 41.30704880]
[-137.95819092 28.39759445]
[-121.92167664 27.93963242]
[-111.67547607 40.28447342]
[-115.07961273 55.96220779]
[-108.12846375 69.25437164]
[-101.17731476 82.54653168]
[-91.97924042 78.20031738]
[-82.17531586 76.57346344]
[-72.53399658 77.66400146]
[-63.77657700 81.26181793]
[-56.52326965 86.97409058]
[-51.24942017 94.26396179]
[-48.25503540 102.49901581]
[-33.28915024 101.48792267]
[-18.32326698 100.47682190]
[-3.35738277 99.46572876]
[11.60850143 98.45463562]
[26.57438469 97.44354248]
[41.54026794 96.43244171]
[56.50615311 95.42134857]
[71.47203827 94.41025543]
[73.30141449 85.72294617]
[77.81095123 77.66703033]
[84.77242279 71.07577515]
[93.69801331 66.69749451]
[103.87226868 65.11493683]
[114.40891266 66.67668915]
[124.43870544 55.52306747]
[134.46850586 44.36944962]
[133.38105774 28.60261726]
[143.82380676 16.73987961]
[159.60125732 15.81919003]
[171.35292053 26.38677597]
[172.10675049 42.17307663]
[161.41551208 53.81235886]
[145.62211609 54.39924622]
[135.59233093 65.55286407]
[125.56253052 76.70648193]
[133.02076721 89.72088623]
[147.71464539 86.70597839]
[162.40853882 83.69107056]
[177.10241699 80.67615509]
[191.79631042 77.66124725]
[195.97871399 62.93827057]
[206.53257751 51.85337830]
[221.03266907 46.95379639]
[236.14698792 49.36541367]
[248.40237427 58.53406143]
[254.98263550 72.35284424]
[254.37565613 87.64631653]
[246.72094727 100.90013885]
[233.77748108 109.06868744]
[218.51956177 110.27488708]
[204.45338440 104.24156952]
[194.81121826 92.35513306]
[180.11734009 95.37004089]
[165.42344666 98.38495636]
[150.72955322 101.39986420]
[136.03567505 104.41477203]
[131.56420898 108.49648285]
[126.73022461 111.42738342]
[138.53454590 120.68254089]
[150.42750549 129.82351685]
[162.40800476 138.84945679]
[174.47492981 147.75952148]
[186.62715149 156.55290222]
[195.45991516 159.06666565]
[198.92665100 165.63470459]
[210.90715027 174.66064453]
[227.19612122 179.36230469]
[227.18743896 196.31625366]
[210.89366150 201.00122070]
[201.88121033 186.64114380]
[189.90071106 177.61520386]
[177.83378601 168.70512390]
[165.68156433 159.91175842]
[158.38410950 158.53164673]
[153.38206482 150.82995605]
[141.40156555 141.80401611]
[134.13206482 140.28352356]
[129.27938843 132.48686218]
[117.47506714 123.23170471]
[91.44409180 127.78284454]
[72.48313141 109.37613678]
[57.51725006 110.38722992]
[42.55136490 111.39833069]
[27.58548164 112.40942383]
[12.61959648 113.42051697]
[-2.34628725 114.43161774]
[-17.31217194 115.44271088]
[-32.27805710 116.45380402]
[-47.24393845 117.46489716]
[-56.03898239 136.38177490]
[-75.47654724 146.32977295]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 54]
[2 53]
[3 52]
[4 51]
[5 50]
[6 49]
[7 20]
[8 19]
[9 18]
[10 17]
[22 33]
[23 32]
[24 31]
[25 30]
[64 74]
[65 73]
[66 72]
[81 160]
[82 159]
[83 158]
[84 157]
[85 156]
[86 155]
[87 154]
[88 153]
[89 152]
[95 106]
[96 105]
[97 104]
[107 127]
[108 126]
[109 125]
[110 124]
[111 123]
[129 150]
[130 149]
[131 147]
[132 146]
[133 144]
[134 143]
[136 142]
[137 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
