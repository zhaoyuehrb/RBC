%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:55:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCUCUCACCAUCUGCUCUGUGGCUCCCAGUGCUGACUCUGGAAGCUUUAUCUUGGGUAAAAGAUGUGUGAUCAGACCUUUCUCGUUAAUGUAUUUGGCUCAUGUGACAAAUGUUUCAAACAACGAGCUCUGAGACCAGUUUUCAAGAAGUCUCAACAACUCA\
) } def
/len { sequence length } bind def

/coor [
[60.78895187 163.02114868]
[53.23649216 157.63980103]
[46.41401291 151.35868835]
[40.42801666 144.27584839]
[35.37194061 136.50186157]
[31.32471848 128.15809631]
[28.34952164 119.37476349]
[26.49279594 110.28899384]
[11.50354004 110.85661316]
[-3.48571634 111.42423248]
[-18.47497177 111.99185944]
[-33.45818710 112.70128632]
[-48.43401718 113.55246735]
[-63.40984726 114.40364838]
[-78.38568115 115.25482941]
[-93.36151123 116.10600281]
[-108.30714417 117.38191986]
[-123.21054077 119.08153534]
[-138.11393738 120.78115082]
[-153.01734924 122.48076630]
[-161.85861206 140.35411072]
[-179.53996277 149.25952148]
[-198.88269043 145.77401733]
[-212.14872742 131.46678162]
[-226.88090515 134.28865051]
[-241.61308289 137.11051941]
[-256.34524536 139.93240356]
[-268.44345093 150.12770081]
[-282.39904785 144.92286682]
[-297.13122559 147.74473572]
[-311.86340332 150.56661987]
[-326.59558105 153.38848877]
[-333.06967163 167.49046326]
[-346.61270142 175.06448364]
[-362.01715088 173.19815063]
[-373.35964966 162.60914612]
[-376.27877808 147.36912537]
[-369.65209961 133.33819580]
[-356.02770996 125.91154480]
[-340.64440918 127.94487000]
[-329.41744995 138.65631104]
[-314.68527222 135.83444214]
[-299.95309448 133.01255798]
[-285.22091675 130.19068909]
[-274.17648315 120.19721985]
[-259.16714478 125.20021820]
[-244.43495178 122.37834930]
[-229.70277405 119.55647278]
[-214.97059631 116.73460388]
[-212.71553040 106.54187775]
[-207.15806580 97.65965271]
[-198.91777039 91.12649536]
[-188.92956543 87.71643066]
[-178.33773804 87.84725952]
[-168.36483765 91.52956390]
[-160.17056274 98.36251831]
[-154.71696472 107.57736206]
[-139.81355286 105.87774658]
[-124.91015625 104.17813110]
[-110.00675964 102.47851562]
[-107.52227783 99.91819000]
[-103.65670776 98.45590973]
[-98.95005035 98.73545074]
[-94.21268463 101.13017273]
[-79.23685455 100.27899933]
[-64.26102448 99.42781830]
[-49.28519440 98.57663727]
[-34.30936432 97.72545624]
[-27.78092003 94.19075012]
[-19.04259491 97.00260162]
[-4.05333853 96.43498230]
[10.93591785 95.86735535]
[25.92517471 95.29973602]
[28.50635147 80.05430603]
[34.19018936 65.67448425]
[42.73002243 52.78430176]
[53.75524139 41.94317627]
[66.78737640 33.62158203]
[81.26086426 28.18066216]
[96.54759216 25.85653687]
[111.98413849 26.75006676]
[126.90060425 30.82247734]
[140.64964294 37.89703369]
[152.63458252 47.66671371]
[164.28581238 38.21955872]
[175.93705750 28.77239990]
[187.58828735 19.32524300]
[199.23951721 9.87808418]
[201.13267517 4.91892576]
[204.42636108 1.54515409]
[208.26988220 0.02585012]
[211.83058167 0.24813436]
[223.99911499 -8.52264881]
[236.16764832 -17.29343224]
[239.25608826 -23.21979904]
[244.15107727 -26.21498299]
[248.96675110 -26.15555000]
[261.45846558 -34.45957565]
[273.95019531 -42.76359940]
[286.44192505 -51.06762695]
[289.68212891 -66.30372620]
[302.46881104 -74.54724121]
[316.97415161 -71.36428833]
[329.46588135 -79.66831970]
[341.95758057 -87.97234344]
[343.51684570 -103.53199768]
[354.74890137 -114.41203308]
[370.35028076 -115.47524261]
[382.95452881 -106.21960449]
[386.61029053 -91.01534271]
[379.59143066 -77.04145813]
[365.21203613 -70.89598083]
[350.26162720 -75.48062134]
[337.76989746 -67.17659760]
[325.27816772 -58.87257004]
[322.59875488 -44.26585007]
[310.04864502 -35.66643524]
[294.74594116 -38.57590103]
[282.25421143 -30.27187729]
[269.76251221 -21.96785164]
[257.27078247 -13.66382599]
[244.93844604 -5.12489223]
[232.76989746 3.64589095]
[220.60136414 12.41667461]
[208.68667603 21.52931595]
[197.03544617 30.97647476]
[185.38420105 40.42363358]
[173.73297119 49.87078857]
[162.08174133 59.31794739]
[171.60575867 80.46063232]
[174.14073181 103.51045227]
[169.43923950 126.21762848]
[157.96015930 146.36585999]
[168.66665649 156.87161255]
[179.37313843 167.37738037]
[190.07963562 177.88313293]
[200.78611755 188.38890076]
[211.49261475 198.89466858]
[225.64221191 193.26359558]
[240.85859680 193.88099670]
[254.50547791 200.63990784]
[264.21841431 212.36929321]
[268.31460571 227.03698730]
[266.08435059 242.10169983]
[257.91403198 254.95339966]
[245.21925354 263.36544800]
[230.19944763 265.88040161]
[215.45686340 262.06250000]
[203.54576111 252.57328796]
[196.52980042 239.05676270]
[195.62455750 223.85478210]
[200.98684692 209.60115051]
[190.28036499 199.09539795]
[179.57386780 188.58963013]
[168.86738586 178.08386230]
[158.16088867 167.57810974]
[147.45439148 157.07234192]
[139.96730042 162.54428101]
[131.85630798 167.03990173]
[123.24804688 170.48901367]
[114.27687836 172.83778381]
[105.08283997 174.04956055]
[95.80946350 174.10540771]
[86.60150146 173.00447083]
[77.60269165 170.76391602]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 73]
[9 72]
[10 71]
[11 70]
[12 68]
[13 67]
[14 66]
[15 65]
[16 64]
[17 60]
[18 59]
[19 58]
[20 57]
[24 49]
[25 48]
[26 47]
[27 46]
[29 44]
[30 43]
[31 42]
[32 41]
[84 129]
[85 128]
[86 127]
[87 126]
[88 125]
[92 124]
[93 123]
[94 122]
[97 121]
[98 120]
[99 119]
[100 118]
[103 115]
[104 114]
[105 113]
[133 157]
[134 156]
[135 155]
[136 154]
[137 153]
[138 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
