%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:05:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUCCCUAUCACUCUCUUUAAUCACUACUCACAGUAACCUCAACUCCUGCCACAAUGUACAGGAUGCAACUCCUGUCUUGCAUUGCACUAAGUCUUGCACUUGUCACAAACAGUGCACCUACUUCAAGUUCUACAAAGAAAACACAGCUACAAC\
) } def
/len { sequence length } bind def

/coor [
[51.51309586 356.23773193]
[37.07621765 351.99826050]
[23.70268440 345.10296631]
[11.87593555 335.80111694]
[2.02350283 324.42895508]
[-5.49845505 311.39758301]
[-10.41802311 297.17807007]
[-12.55736351 282.28445435]
[-11.83913994 267.25512695]
[-8.28931427 252.63337708]
[-2.03621244 238.94779968]
[6.69412088 226.69309998]
[17.58608818 216.31227112]
[30.24595451 208.18058777]
[44.21607208 202.59199524]
[58.99142838 199.74851990]
[58.99142838 184.74851990]
[58.99142838 169.74851990]
[58.99142838 154.74851990]
[58.99142838 139.74851990]
[52.99560928 135.24296570]
[51.18764877 150.13360596]
[37.38803101 156.01327515]
[25.39622307 147.00236511]
[27.20390511 132.11167908]
[41.00396729 126.23182678]
[35.00814438 121.72625732]
[20.60037422 125.89952087]
[6.19260216 130.07278442]
[-8.21516895 134.24604797]
[-21.74674606 144.46038818]
[-35.30781937 134.28523254]
[-29.28440285 118.43737793]
[-12.38843155 119.83827209]
[2.01934028 115.66500854]
[16.42711258 111.49174500]
[30.83488274 107.31848907]
[34.32030869 100.67756653]
[19.67552948 97.43249512]
[5.03075218 94.18742371]
[-9.61402512 90.94235229]
[-24.56962013 92.09567261]
[-38.03818893 85.49282074]
[-46.28626633 72.96408081]
[-47.02750015 57.98241043]
[-40.05642700 44.70068741]
[-27.30540848 36.80059052]
[-12.30900764 36.47200775]
[0.77580237 43.80601883]
[8.32168484 56.76871109]
[19.31150818 66.97771454]
[30.30133057 77.18672180]
[41.29115677 87.39572906]
[44.77657700 80.75480652]
[40.02655792 66.52675629]
[35.27653885 52.29871368]
[30.52651978 38.07066345]
[25.77649879 23.84261894]
[21.02647972 9.61457157]
[15.84889603 -4.46351862]
[10.24847412 -18.37880707]
[4.64805269 -32.29409790]
[-0.95236915 -46.20938492]
[-6.55279112 -60.12467575]
[-12.15321255 -74.03996277]
[-26.78924561 -80.00336456]
[-32.84463501 -94.60157013]
[-26.72683144 -109.17373657]
[-12.06541538 -115.07445526]
[2.44125485 -108.80292511]
[8.18662834 -94.07994080]
[1.76207650 -79.64038849]
[7.36249828 -65.72509766]
[12.96292019 -51.80980682]
[18.56334114 -37.89451981]
[24.16376305 -23.97922897]
[29.76418495 -10.06394005]
[32.90668869 -8.34856701]
[35.35303116 -4.99617529]
[36.32939148 -0.36103034]
[35.25452423 4.86455202]
[40.00454712 19.09259796]
[44.75456619 33.32064438]
[49.50458527 47.54869080]
[54.25460434 61.77673721]
[59.00462723 76.00478363]
[99.74706268 59.04230881]
[129.48471069 82.24963379]
[143.71276855 77.49961853]
[157.94081116 72.74959564]
[172.07031250 67.71402740]
[186.09556580 62.39495468]
[200.12080383 57.07588196]
[214.14605713 51.75680923]
[221.00665283 35.69469070]
[237.03572083 29.65568733]
[252.18122864 36.90704346]
[266.09652710 31.30661964]
[280.01181030 25.70619774]
[293.92709351 20.10577583]
[307.84237671 14.50535393]
[321.75769043 8.90493202]
[328.59808350 2.76300311]
[336.01000977 3.33495378]
[350.03524780 -1.98411965]
[357.90420532 -15.96477985]
[373.76336670 -18.38703156]
[385.44689941 -7.39273214]
[383.99221802 8.58423424]
[370.51522827 17.28770638]
[355.35430908 12.04112434]
[341.32907104 17.36019707]
[327.35809326 22.82022095]
[313.44281006 28.42064285]
[299.52752686 34.02106476]
[285.61224365 39.62148666]
[271.69696045 45.22190857]
[257.78164673 50.82233047]
[254.42301941 63.29659653]
[244.33096313 71.66992950]
[231.06240845 72.69892120]
[219.46511841 65.78205109]
[205.43988037 71.10112762]
[191.41464233 76.42019653]
[177.38938904 81.73927307]
[174.62911987 85.70057678]
[169.32614136 87.93740082]
[162.69082642 86.97764587]
[148.46278381 91.72766113]
[134.23474121 96.47768402]
[135.24186707 109.86470032]
[130.90797424 123.41770935]
[121.30206299 134.98312378]
[107.36219788 142.50662231]
[90.82057190 144.38111877]
[73.99143219 139.74851990]
[73.99143219 154.74851990]
[73.99143219 169.74851990]
[73.99143219 184.74851990]
[73.99143219 199.74851990]
[88.76678467 202.59199524]
[102.73690033 208.18058777]
[115.39676666 216.31227112]
[126.28873444 226.69309998]
[135.01907349 238.94779968]
[141.27217102 252.63337708]
[144.82199097 267.25512695]
[145.54022217 282.28445435]
[143.40087891 297.17807007]
[138.48130798 311.39758301]
[130.95935059 324.42895508]
[121.10691833 335.80111694]
[109.28017426 345.10296631]
[95.90663910 351.99826050]
[81.46976471 356.23773193]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[27 37]
[28 36]
[29 35]
[30 34]
[54 86]
[55 85]
[56 84]
[57 83]
[58 82]
[59 81]
[60 77]
[61 76]
[62 75]
[63 74]
[64 73]
[65 72]
[88 130]
[89 129]
[90 128]
[91 125]
[92 124]
[93 123]
[94 122]
[97 118]
[98 117]
[99 116]
[100 115]
[101 114]
[102 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
