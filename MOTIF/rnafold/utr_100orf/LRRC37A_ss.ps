%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:26:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAUGUCUUCUGCUCAGUGCCCGGCACUAGUGUGUGUCAUGUCCCGGCUGCGUUUCUGGGGCCCAUGGCCCCUCCUUAUGUGGCAACUAUUGUGGCUACUAG\
) } def
/len { sequence length } bind def

/coor [
[110.51868439 127.71237946]
[104.77843475 141.57057190]
[99.03817749 155.42877197]
[93.29792786 169.28695679]
[95.97373962 185.46632385]
[83.12990570 195.66281128]
[67.97907257 189.38711548]
[66.10710907 173.09516907]
[79.43973541 163.54670715]
[85.17998505 149.68850708]
[90.92024231 135.83032227]
[96.66049194 121.97212982]
[87.05729675 110.44916534]
[72.39139557 113.59738159]
[57.72549057 116.74559784]
[49.83689499 121.68267822]
[42.56932068 119.76034546]
[27.81502151 122.46417236]
[13.06072330 125.16799927]
[-1.69357550 127.87182617]
[-16.44787407 130.57565308]
[-30.93767738 139.37803650]
[-43.40723801 127.89123535]
[-35.82126999 112.72913361]
[-19.15169907 115.82135010]
[-4.39740133 113.11752319]
[10.35689735 110.41369629]
[25.11119652 107.70987701]
[39.86549377 105.00605011]
[54.57727432 102.07969666]
[69.24317932 98.93147278]
[83.90908051 95.78325653]
[97.39540100 89.21674347]
[108.91836548 79.61354828]
[120.44132996 70.01036072]
[125.13195801 61.97277451]
[132.46043396 60.29750824]
[144.26817322 51.04672241]
[156.07592773 41.79594040]
[167.88368225 32.54515839]
[179.69143677 23.29437447]
[191.49919128 14.04359150]
[187.88438416 -1.73924875]
[191.46186829 -17.47128487]
[201.47428894 -30.04839706]
[215.89974976 -37.01132965]
[231.85989380 -37.02647400]
[246.19427490 -30.14101791]
[257.71722412 -39.74420929]
[269.24020386 -49.34740067]
[280.76315308 -58.95059586]
[292.28613281 -68.55378723]
[303.80908203 -78.15698242]
[315.33206177 -87.76016998]
[312.33590698 -103.93994141]
[317.83032227 -119.35134125]
[330.24404907 -129.86584473]
[346.16571045 -132.71675110]
[361.28118896 -127.22667694]
[372.50885010 -137.17352295]
[383.73651123 -147.12036133]
[394.96417236 -157.06719971]
[406.19183350 -167.01403809]
[417.41949463 -176.96087646]
[425.26577759 -191.98991394]
[441.87954712 -188.61070251]
[443.23153687 -171.71075439]
[427.36633301 -165.73321533]
[416.13867188 -155.78637695]
[404.91101074 -145.83953857]
[393.68334961 -135.89270020]
[382.45568848 -125.94585419]
[371.22802734 -115.99901581]
[374.84353638 -102.73687744]
[372.34494019 -89.15211487]
[364.16876221 -77.93690491]
[351.88256836 -71.33920288]
[337.88446045 -70.71218872]
[324.93524170 -76.23720551]
[313.41229248 -66.63401794]
[301.88931274 -57.03082275]
[290.36636353 -47.42763138]
[278.84338379 -37.82444000]
[267.32043457 -28.22124672]
[255.79747009 -18.61805344]
[259.84484863 -5.25763464]
[258.45901489 8.67717171]
[251.81842041 21.05548859]
[240.90751648 29.97161865]
[227.37109375 34.03841019]
[213.26626587 32.60299683]
[200.74996948 25.85134506]
[188.94221497 35.10212708]
[177.13447571 44.35290909]
[165.32672119 53.60369492]
[153.51896667 62.85447693]
[141.71121216 72.10526276]
[130.04452515 81.53332520]
[118.52156067 91.13651276]
[106.99859619 100.73970795]
[110.95015717 103.69997406]
[113.73809052 108.35486603]
[114.83274841 114.29499054]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[13 32]
[14 31]
[15 30]
[17 29]
[18 28]
[19 27]
[20 26]
[21 25]
[33 100]
[34 99]
[35 98]
[37 97]
[38 96]
[39 95]
[40 94]
[41 93]
[42 92]
[48 85]
[49 84]
[50 83]
[51 82]
[52 81]
[53 80]
[54 79]
[59 73]
[60 72]
[61 71]
[62 70]
[63 69]
[64 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
