%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:03:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUACUCUGCGCUGGGCGCGCGGAGGCCUAGGCGGGAAGCUCGAGCGGCGGCGCCAUGGCCCGAGCGUGGCAGCACCCGUUCCUCAACGUCUUCAGACACUUCCGGGUGGACGAGUGGAAGCGCUCCGCCAAGCAGGGGGACGUGGCCGUGGUCA\
) } def
/len { sequence length } bind def

/coor [
[56.74171829 249.53390503]
[42.37316513 253.84025574]
[29.08013344 246.89076233]
[24.41606140 232.63424683]
[16.35300636 245.28285217]
[8.28995132 257.93145752]
[0.22689590 270.58004761]
[-7.83615923 283.22866821]
[-15.89921474 295.87725830]
[-23.96226883 308.52584839]
[-32.02532578 321.17446899]
[-29.97521400 337.08599854]
[-41.24016571 348.50878906]
[-57.17867661 346.68026733]
[-65.56407928 333.00311279]
[-59.96381760 317.96926880]
[-44.67392731 313.11141968]
[-36.61087036 300.46279907]
[-28.54781723 287.81420898]
[-20.48476219 275.16558838]
[-12.42170620 262.51699829]
[-4.35865164 249.86839294]
[3.70440364 237.21978760]
[11.76745892 224.57118225]
[19.04698753 211.45599365]
[25.51608658 197.92266846]
[31.98518372 184.38934326]
[26.79841232 170.47413635]
[33.16621017 156.65727234]
[47.79692841 151.31126404]
[54.26602554 137.77793884]
[60.73512268 124.24462128]
[52.29130173 111.84696198]
[37.32902908 112.91015625]
[22.36675644 113.97335052]
[6.99602509 121.12715912]
[-4.13324881 108.33748627]
[5.07570410 94.10261536]
[21.30356216 99.01107788]
[36.26583481 97.94788361]
[51.22810745 96.88468933]
[57.42159653 83.22303772]
[48.36068344 71.26896667]
[39.29977417 59.31489182]
[30.23886108 47.36081696]
[21.17794800 35.40674591]
[12.11703491 23.45267105]
[-3.29033494 21.16123199]
[-12.30909824 8.90902519]
[-10.02961063 -5.76542616]
[-19.09052277 -17.71949959]
[-28.27211189 -29.58113480]
[-37.57343674 -41.34911728]
[-46.87475967 -53.11709595]
[-56.17608643 -64.88507843]
[-65.47740936 -76.65306091]
[-74.77873230 -88.42103577]
[-90.41386414 -88.69790649]
[-102.17911530 -98.99901581]
[-104.51929474 -114.46050262]
[-96.32944489 -127.78192139]
[-81.47655487 -132.67330933]
[-66.97370911 -126.82510376]
[-59.66870880 -112.99864197]
[-63.01075363 -97.72236633]
[-53.70942688 -85.95438385]
[-44.40810394 -74.18640137]
[-35.10678101 -62.41842270]
[-25.80545616 -50.65044022]
[-16.50413132 -38.88245773]
[-9.85000420 -35.56550217]
[-7.13644981 -26.78041267]
[1.92446280 -14.82633877]
[16.66896629 -13.05568027]
[26.02830887 -1.06162667]
[24.07110786 14.39175892]
[33.13202286 26.34583092]
[42.19293213 38.29990387]
[51.25384521 50.25397873]
[60.31475830 62.20804977]
[69.37567139 74.16212463]
[83.60784149 66.03795624]
[98.96100616 64.66117859]
[112.57245636 69.49190521]
[122.21726990 78.89993286]
[126.67049408 90.58592224]
[141.63276672 89.52272797]
[156.59503174 88.45953369]
[171.55731201 87.39633942]
[186.51957703 86.33314514]
[201.48185730 85.26995087]
[216.44413757 84.20674896]
[231.40640259 83.14355469]
[236.59674072 71.69764709]
[246.12129211 63.60958099]
[258.11715698 60.38021851]
[270.27239990 62.56793594]
[280.27157593 69.69319916]
[286.23681641 80.34197235]
[301.22985840 79.88600159]
[316.22293091 79.43003845]
[320.75814819 76.61498260]
[325.44772339 75.93090820]
[329.44009399 77.07089233]
[332.13488770 79.43003845]
[347.12792969 79.88600159]
[362.12100220 80.34197235]
[377.11407471 80.79793549]
[392.10714722 81.25390625]
[407.10021973 81.70986938]
[411.79809570 79.17561340]
[416.52059937 78.77777863]
[420.43627930 80.15825653]
[422.98275757 82.67680359]
[437.92041016 84.04302216]
[452.85806274 85.40923309]
[467.51306152 78.04974365]
[481.06353760 87.28645325]
[479.56988525 103.61743927]
[464.56866455 110.24277496]
[451.49182129 100.34688568]
[436.55416870 98.98067474]
[421.61651611 97.61445618]
[406.64425659 96.70294189]
[391.65118408 96.24697113]
[376.65811157 95.79100800]
[361.66503906 95.33503723]
[346.67196655 94.87907410]
[331.67889404 94.42310333]
[316.67889404 94.42310333]
[301.68585205 94.87907410]
[286.69277954 95.33503723]
[277.48971558 110.35290527]
[260.98550415 116.93930054]
[243.66900635 112.30313873]
[232.46960449 98.10582733]
[217.50732422 99.16902161]
[202.54505920 100.23222351]
[187.58277893 101.29541779]
[172.62051392 102.35861206]
[157.65823364 103.42180634]
[142.69595337 104.48500061]
[127.73368835 105.54820251]
[111.33248901 132.24200439]
[74.26844025 130.71371460]
[67.79934692 144.24703979]
[61.33024597 157.78036499]
[66.35813141 172.52342224]
[59.60475540 186.15599060]
[45.51850510 190.85844421]
[39.04940796 204.39176941]
[32.58031082 217.92509460]
[47.14608002 214.34202576]
[60.07528305 221.94700623]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 24]
[5 23]
[6 22]
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[25 152]
[26 151]
[27 150]
[30 147]
[31 146]
[32 145]
[33 41]
[34 40]
[35 39]
[42 81]
[43 80]
[44 79]
[45 78]
[46 77]
[47 76]
[50 73]
[51 72]
[52 70]
[53 69]
[54 68]
[55 67]
[56 66]
[57 65]
[86 143]
[87 142]
[88 141]
[89 140]
[90 139]
[91 138]
[92 137]
[93 136]
[99 132]
[100 131]
[101 130]
[105 129]
[106 128]
[107 127]
[108 126]
[109 125]
[110 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
