%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:17:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCCGGGAGGGCGCGCGGCGCCGGAGACAUGUCCAGGCGGAAACAGAGCAACCCCCGGCAGAUCAAGCGUUCCCUCGGAGACAUGGAGGCCAGAGAGGAGGUGCAGUUGGUGGGUGCCAGCCACAUGG\
) } def
/len { sequence length } bind def

/coor [
[115.16897583 186.91615295]
[111.34333801 172.41220093]
[107.51769257 157.90824890]
[96.79026794 147.57521057]
[100.75205994 132.25807190]
[96.92642212 117.75413513]
[85.48613739 108.05258179]
[70.55204773 106.64795685]
[55.61796188 105.24333954]
[40.68387222 103.83871460]
[25.74978256 102.43408966]
[10.81569290 101.02947235]
[1.88352835 103.35618591]
[-4.45061350 99.41285706]
[-19.34767151 97.65852356]
[-31.67856789 107.17623138]
[-46.76131058 105.18487549]
[-55.75899887 93.37059784]
[-70.65605927 91.61627197]
[-81.34297180 107.45249939]
[-98.46858215 115.73759460]
[-117.35793304 114.29969025]
[-132.89958191 103.60897827]
[-140.92872620 86.62842560]
[-155.92460632 86.27678680]
[-170.92047119 85.92514801]
[-185.91635132 85.57350922]
[-200.91532898 85.39768219]
[-215.91532898 85.39768219]
[-230.91532898 85.39768219]
[-241.91201782 96.74881744]
[-257.71542358 96.91590881]
[-268.94964600 85.79982758]
[-268.94964600 69.99553680]
[-257.71542358 58.87944794]
[-241.91201782 59.04654312]
[-230.91532898 70.39768219]
[-215.91532898 70.39768219]
[-200.91532898 70.39768219]
[-194.16345215 67.22222137]
[-185.56471252 70.57763672]
[-170.56883240 70.92927551]
[-155.57296753 71.28091431]
[-140.57708740 71.63255310]
[-136.37857056 61.19351578]
[-129.14929199 52.53659821]
[-119.58072662 46.51560211]
[-108.59609222 43.73097229]
[-97.26126862 44.46995163]
[-86.68137360 48.67705154]
[-77.89303589 55.95782852]
[-71.76280212 65.61583710]
[-68.90172577 76.71920776]
[-54.00466919 78.47354126]
[-42.50860977 69.07267761]
[-27.37588501 70.63960266]
[-17.59334183 82.76146698]
[-2.69628382 84.51580048]
[12.22031498 86.09538269]
[27.15440369 87.50000000]
[42.08849335 88.90462494]
[57.02258301 90.30924988]
[71.95667267 91.71386719]
[86.89076233 93.11849213]
[92.66043091 86.02637482]
[102.00867462 83.35863495]
[111.74946594 86.70819092]
[125.43350983 80.56433868]
[139.11755371 74.42047882]
[152.80158997 68.27662659]
[166.48564148 62.13277054]
[180.02189636 55.66981506]
[193.40292358 48.89130783]
[203.05079651 33.25785446]
[220.49256897 34.79110718]
[233.71101379 27.70077896]
[246.92945862 20.61045074]
[260.14791870 13.52012348]
[273.28231812 6.27533484]
[286.33093262 -1.12291837]
[299.37951660 -8.52117157]
[312.34048462 -16.07187462]
[325.21206665 -23.77398682]
[324.29315186 -39.05188370]
[330.59008789 -53.00206375]
[342.65582275 -62.41887283]
[357.71777344 -65.13839722]
[372.31484985 -60.53571701]
[383.09268188 -49.66848373]
[387.57464600 -35.03391647]
[384.73080444 -19.99492836]
[375.21466064 -8.00736809]
[361.21295166 -1.82589114]
[345.94317627 -2.87095475]
[332.91418457 -10.90241146]
[320.04260254 -3.20029807]
[315.87930298 2.99148846]
[306.77777100 4.52742386]
[293.72918701 11.92567730]
[280.68057251 19.32393074]
[276.37329102 25.41641808]
[267.23822021 26.73856735]
[254.01979065 33.82889557]
[240.80134583 40.91922379]
[227.58290100 48.00954819]
[223.75538635 59.54625320]
[212.72163391 65.54103088]
[200.18142700 62.27233505]
[186.80039978 69.05084229]
[184.46862793 73.31639099]
[179.38621521 76.11355591]
[172.62950134 75.81681061]
[158.94544983 81.96067047]
[145.26141357 88.10452271]
[131.57736206 94.24838257]
[117.89331818 100.39223480]
[111.43036652 113.92848969]
[115.25600433 128.43243408]
[126.25706482 139.80288696]
[122.02163696 154.08261108]
[125.84728241 168.58656311]
[129.67292786 183.09049988]
[144.66844177 185.93608093]
[156.93917847 195.01306152]
[164.04878235 208.51921082]
[164.58563232 223.77288818]
[158.44313049 237.74545288]
[146.84088135 247.66264343]
[132.08251953 251.55538940]
[117.09832764 248.65078735]
[104.86342621 239.52554321]
[97.80706787 225.99150085]
[97.33029175 210.73582458]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 122]
[2 121]
[3 120]
[5 118]
[6 117]
[7 64]
[8 63]
[9 62]
[10 61]
[11 60]
[12 59]
[14 58]
[15 57]
[18 54]
[19 53]
[24 44]
[25 43]
[26 42]
[27 41]
[28 39]
[29 38]
[30 37]
[67 116]
[68 115]
[69 114]
[70 113]
[71 112]
[72 109]
[73 108]
[75 105]
[76 104]
[77 103]
[78 102]
[79 100]
[80 99]
[81 98]
[82 96]
[83 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
