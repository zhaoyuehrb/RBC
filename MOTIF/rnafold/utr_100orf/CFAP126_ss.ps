%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:30:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACAGCACAAGAUCAUGGCCACUAACUACAGUGCCAACCAGUAUGAAAAGGCUUUCUCAUCCAAGUAUCUGCAGAACUGGUCUCCCACUAAGCCAACAAAAGAGAGCAUCUCUU\
) } def
/len { sequence length } bind def

/coor [
[103.85301208 150.04492188]
[107.67881012 164.54882812]
[106.14257050 179.46994019]
[99.44178772 192.89006042]
[88.43789673 203.08390808]
[74.54553986 208.74096680]
[59.55069351 209.13401794]
[45.38105774 204.21247864]
[33.85825348 194.60910034]
[26.46363258 181.55844116]
[24.14782906 166.73829651]
[27.20856094 152.05387878]
[35.25234604 139.39300537]
[47.24509048 130.38334656]
[61.64740753 126.18289948]
[73.95645142 117.61042023]
[86.26550293 109.03794098]
[71.35343170 110.65972900]
[56.44136047 112.28150940]
[41.52929306 113.90329742]
[33.20749664 117.98989105]
[26.19222450 115.36145782]
[11.24170685 116.57884216]
[-3.70881081 117.79621887]
[-13.74798107 130.00239563]
[-29.48569298 131.45152283]
[-41.58504105 121.28385925]
[-42.86769867 105.53170013]
[-32.57268524 93.54052734]
[-16.80784988 92.42448425]
[-4.92619181 102.84570312]
[10.02432632 101.62831879]
[24.97484398 100.41094208]
[39.90750504 98.99122620]
[54.81957626 97.36944580]
[69.73164368 95.74765778]
[84.64371490 94.12586975]
[95.25031281 83.51927185]
[96.87210083 68.60720062]
[98.49388885 53.69513321]
[100.11566925 38.78306198]
[101.73745728 23.87099266]
[103.35924530 8.95892334]
[95.51617432 -7.63295317]
[106.27300262 -21.42634773]
[107.49037933 -36.37686539]
[94.39704895 -44.14384842]
[86.00857544 -56.77399063]
[83.94413757 -71.73254395]
[88.56015778 -86.04524231]
[98.89009094 -96.88968658]
[112.84626770 -102.15187836]
[114.06364441 -117.10239410]
[115.28102875 -132.05291748]
[116.49840546 -147.00343323]
[104.63917542 -157.01034546]
[100.95946503 -172.08480835]
[106.87420654 -186.43037415]
[120.10904694 -194.53089905]
[135.57493591 -193.27154541]
[147.32492065 -183.13658142]
[150.84088135 -168.02308655]
[144.77087402 -153.74252319]
[131.44892883 -145.78605652]
[130.23155212 -130.83552551]
[129.01416016 -115.88501740]
[127.79678345 -100.93449402]
[140.71777344 -93.48377228]
[149.15719604 -81.11098480]
[151.39686584 -66.24005127]
[146.93960571 -51.81253815]
[136.61830139 -40.70588684]
[122.44090271 -35.15948486]
[121.22351837 -20.20896721]
[128.84695435 -10.70987988]
[127.86911774 1.83455288]
[118.27130890 10.58070850]
[116.64952850 25.49277878]
[115.02774048 40.40484619]
[113.40596008 55.31691742]
[111.78417206 70.22898865]
[110.16238403 85.14105225]
[112.24519348 70.28636169]
[118.60753632 56.70252609]
[128.68585205 45.59273529]
[141.58746338 37.94104385]
[156.16961670 34.42520905]
[171.14067078 35.35663986]
[185.17456055 40.65283585]
[197.02824402 49.84468460]
[205.65177917 62.11801910]
[210.28132629 76.38571930]
[210.50682068 91.38402557]
[206.30828857 105.78445435]
[198.05761719 118.31148529]
[186.48561096 127.85552979]
[172.61726379 133.57122803]
[157.68098450 134.95228577]
[142.99974060 131.87641907]
[129.87393188 124.61603546]
[119.46546936 113.81324005]
[125.76380157 127.42687225]
[132.06213379 141.04049683]
[138.36047363 154.65412903]
[144.65881348 168.26776123]
[150.95715332 181.88139343]
[163.09533691 193.71781921]
[155.08168030 208.65827942]
[138.50668335 205.09373474]
[137.34352112 188.17973328]
[131.04518127 174.56610107]
[124.74684906 160.95246887]
[118.44850922 147.33883667]
[112.15016937 133.72520447]
[105.85183716 120.11157990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 37]
[18 36]
[19 35]
[20 34]
[22 33]
[23 32]
[24 31]
[38 82]
[39 81]
[40 80]
[41 79]
[42 78]
[43 77]
[45 74]
[46 73]
[52 67]
[53 66]
[54 65]
[55 64]
[101 115]
[102 114]
[103 113]
[104 112]
[105 111]
[106 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
