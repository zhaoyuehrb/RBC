%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:33:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGGAUUGCUGUCCUCCUCUUCGCCAUUUUCUUCUUUAUGAGCCAAGUUCUACCAGCCAGGGGCAAAUUCAAGGAGAUCUGUGAACGUCCAAAUGGCU\
) } def
/len { sequence length } bind def

/coor [
[115.23833466 138.91134644]
[97.92203522 141.73706055]
[80.97203827 137.20532227]
[71.85604858 149.11744690]
[62.74005890 161.02957153]
[53.62406921 172.94169617]
[44.50807953 184.85382080]
[35.39208984 196.76594543]
[33.81034470 213.08863831]
[18.77358627 219.63294983]
[5.75034046 209.66664124]
[8.13780689 193.44221497]
[23.47996330 187.64996338]
[32.59595490 175.73783875]
[41.71194458 163.82571411]
[50.82793427 151.91358948]
[59.94392776 140.00146484]
[69.05991364 128.08934021]
[60.73615265 114.30559540]
[58.24197388 98.39787292]
[61.94768906 82.72801971]
[49.62335587 74.17753601]
[37.29901886 65.62705231]
[21.54998016 64.11764526]
[15.50348091 50.50555420]
[3.17914581 41.95507050]
[-9.27667427 33.59728622]
[-21.86096573 25.43422318]
[-34.44525909 17.27116013]
[-48.08986282 24.32242203]
[-63.43131256 23.59066200]
[-76.34283447 15.27271938]
[-83.35129547 1.60607851]
[-82.57144928 -13.73300266]
[-74.21307373 -26.61838913]
[-60.52453613 -33.58397293]
[-45.18797302 -32.75605392]
[-32.32884979 -24.35733223]
[-25.40620613 -10.64702320]
[-26.28219604 4.68686771]
[-13.69790363 12.84993076]
[-1.11361122 21.01299286]
[6.34232473 22.03010559]
[11.72962952 29.63073540]
[24.05396461 38.18121719]
[38.92148590 39.07903671]
[45.84950638 53.30271912]
[58.17383957 61.85320282]
[70.49817657 70.40368652]
[80.30928802 63.14113998]
[91.80051422 59.02356720]
[103.99134827 58.40229797]
[115.84162903 61.33034515]
[126.34022522 67.55786896]
[134.59135437 76.55350494]
[139.89097595 87.54971313]
[141.78691101 99.60823059]
[156.56794739 102.16188812]
[171.34896851 104.71553802]
[186.13000488 107.26919556]
[200.91104126 109.82284546]
[219.31768799 101.89949036]
[233.83300781 114.51369476]
[248.74421692 116.14347839]
[263.65539551 117.77326202]
[278.56661987 119.40304565]
[286.81817627 111.97891998]
[297.58880615 110.45446777]
[307.17727661 115.10376740]
[312.42694092 124.12136841]
[327.20794678 126.67502594]
[341.98898315 129.22868347]
[356.77001953 131.78233337]
[371.68597412 126.50737000]
[382.91021729 136.29846191]
[397.69125366 138.85211182]
[412.88671875 132.68531799]
[425.65704346 142.97370911]
[422.86520386 159.13345337]
[407.38320923 164.54081726]
[395.13760376 153.63314819]
[380.35656738 151.07948303]
[366.49786377 156.53710938]
[354.21636963 146.56335449]
[339.43533325 144.00970459]
[324.65429688 141.45605469]
[309.87326050 138.90240479]
[292.43768311 147.01493835]
[276.93682861 134.31423950]
[262.02563477 132.68446350]
[247.11442566 131.05467224]
[232.20323181 129.42489624]
[224.66635132 136.64096069]
[214.16656494 138.45996094]
[204.23641968 134.01890564]
[198.35737610 124.60387421]
[183.57635498 122.05022430]
[168.79531860 119.49656677]
[154.01429749 116.94291687]
[139.23326111 114.38926697]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 18]
[4 17]
[5 16]
[6 15]
[7 14]
[8 13]
[21 49]
[22 48]
[23 47]
[25 45]
[26 44]
[27 42]
[28 41]
[29 40]
[57 100]
[58 99]
[59 98]
[60 97]
[61 96]
[63 92]
[64 91]
[65 90]
[66 89]
[70 87]
[71 86]
[72 85]
[73 84]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
