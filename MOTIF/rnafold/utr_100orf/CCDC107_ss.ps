%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:54:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCUCGCGUGCGCGUGCGCGUUGGGGCGGCCGGCCAAUGCCGGACCGCUUCGGCACCGCCCGCCCGAUCCCUCCACCCGUGGGCCGGCAAUGGCGGGCGCAGUUUCGCUCUUGGGUGUGGUGGGGCUGCUGCUUGUGUCUGCGCUGUCCGGGGUCCUAGGAGACCGCGCCAAUCCCGACCUCCGGGCAC\
) } def
/len { sequence length } bind def

/coor [
[168.09652710 299.45581055]
[154.46766663 305.72109985]
[139.46865845 305.54812622]
[125.98790741 298.97018433]
[116.62141418 287.25399780]
[113.17290497 272.65579224]
[116.30645752 257.98675537]
[125.41864777 246.07171631]
[138.75471497 239.20518494]
[153.74652100 238.70945740]
[167.50881958 244.68127441]
[159.34268188 232.09898376]
[151.17654419 219.51667786]
[143.01040649 206.93438721]
[134.84428406 194.35208130]
[121.42523193 187.88845825]
[120.40249634 172.10034180]
[112.23635864 159.51805115]
[104.07022095 146.93574524]
[95.90408325 134.35345459]
[81.74874878 129.39094543]
[67.51370239 134.11996460]
[53.27866364 138.84896851]
[39.04362106 143.57798767]
[24.80857658 148.30699158]
[10.57353401 153.03601074]
[-3.66150856 157.76501465]
[-17.89655113 162.49403381]
[-32.13159561 167.22305298]
[-46.36663818 171.95205688]
[-60.56230545 176.79797363]
[-74.71764374 181.76048279]
[-88.87297821 186.72297668]
[-103.02832031 191.68548584]
[-117.18365479 196.64799500]
[-127.45715332 209.43029785]
[-143.62014771 206.65727234]
[-149.04553223 191.18157959]
[-138.15214539 178.92326355]
[-122.14615631 182.49264526]
[-107.99082184 177.53015137]
[-93.83547974 172.56764221]
[-79.68014526 167.60514832]
[-65.52481079 162.64263916]
[-60.24373245 157.45399475]
[-51.09564972 157.71701050]
[-36.86060715 152.98800659]
[-22.62556458 148.25898743]
[-8.39052105 143.52998352]
[5.84452152 138.80096436]
[20.07956505 134.07196045]
[34.31460571 129.34294128]
[48.54964828 124.61392975]
[62.78469086 119.88491821]
[77.01973724 115.15590668]
[73.47468567 89.75884247]
[92.71736908 71.57894135]
[90.26125336 56.78139114]
[87.80514526 41.98383713]
[85.34903717 27.18628693]
[82.89292908 12.38873577]
[80.31520844 -2.38811612]
[77.61605072 -17.14326859]
[74.91688538 -31.89842224]
[72.21772766 -46.65357590]
[69.51856995 -61.40872955]
[66.81941223 -76.16387939]
[64.12025452 -90.91903687]
[57.89957428 -85.61340332]
[49.63702774 -82.21815491]
[39.86972809 -81.28811646]
[29.26543427 -83.23711395]
[18.58740616 -88.30966949]
[8.65356255 -96.56123352]
[0.69547665 -109.27613831]
[-7.26260948 -121.99104309]
[-21.99360847 -129.19726562]
[-22.84823990 -145.57412720]
[-8.94733047 -154.27452087]
[5.40905476 -146.34822083]
[5.45229769 -129.94912720]
[13.41038418 -117.23422241]
[21.36846924 -104.51931763]
[35.30783844 -110.05953217]
[32.36636353 -124.76829529]
[29.42488480 -139.47706604]
[26.48340797 -154.18582153]
[15.25748158 -166.14035034]
[20.25582314 -181.75920105]
[36.33656693 -184.97505188]
[46.95722580 -172.47970581]
[41.19216919 -157.12730408]
[44.13364792 -142.41853333]
[47.07512665 -127.70977020]
[50.01660156 -113.00100708]
[65.00848389 -112.50765228]
[68.91062927 -126.99121094]
[72.81276703 -141.47476196]
[76.71491241 -155.95831299]
[80.61705017 -170.44186401]
[72.51744080 -184.01286316]
[76.46724701 -199.31562805]
[90.12311554 -207.27130127]
[105.38326263 -203.15992737]
[113.19411469 -189.42071533]
[108.92163849 -174.20487976]
[95.10060883 -166.53971863]
[91.19846344 -152.05616760]
[87.29632568 -137.57261658]
[83.39418030 -123.08906555]
[79.49204254 -108.60551453]
[78.87541199 -93.61819458]
[81.57456970 -78.86303711]
[84.27372742 -64.10788727]
[86.97288513 -49.35273361]
[89.67204285 -34.59757996]
[92.37120056 -19.84242821]
[95.07035828 -5.08727455]
[99.37393188 0.93692648]
[97.69047546 9.93262577]
[100.14659119 24.73017693]
[102.60269928 39.52772903]
[105.05880737 54.32527924]
[107.51491547 69.12283325]
[120.84059143 76.00951385]
[134.33210754 69.45366669]
[147.82360840 62.89781952]
[156.56062317 49.01990128]
[172.93518066 49.91771317]
[180.10253906 64.66766357]
[170.68952942 78.09626770]
[154.37945557 76.38932800]
[140.88795471 82.94517517]
[127.39643860 89.50102997]
[125.65565491 112.25809479]
[108.48638153 126.18730927]
[116.65251923 138.76960754]
[124.81865692 151.35191345]
[132.98478699 163.93420410]
[146.98793030 171.29780579]
[147.42657471 186.18594360]
[155.59271240 198.76824951]
[163.75885010 211.35054016]
[171.92498779 223.93284607]
[180.09112549 236.51513672]
[189.45724487 248.23161316]
[199.93218994 258.96826172]
[210.40715027 269.70489502]
[220.88209534 280.44152832]
[231.35705566 291.17816162]
[241.83201599 301.91479492]
[252.30696106 312.65142822]
[262.86987305 323.30154419]
[273.51998901 333.86444092]
[284.17010498 344.42733765]
[294.82025146 354.99023438]
[305.69787598 354.31735229]
[314.95486450 359.64102173]
[319.64648438 368.98855591]
[318.43527222 379.15573120]
[328.73220825 390.06320190]
[339.02917480 400.97067261]
[353.74929810 396.77828979]
[368.72924805 399.91827393]
[380.52676392 409.66903687]
[386.43078613 423.78997803]
[385.08468628 439.03619385]
[376.79776001 451.90417480]
[363.47427368 459.43701172]
[348.17587280 459.90365601]
[334.41802979 453.19692993]
[325.36218262 440.85797119]
[323.08932495 425.72213745]
[328.12170410 411.26760864]
[317.82473755 400.36013794]
[307.52780151 389.45266724]
[288.65237427 385.30245972]
[284.25735474 365.64038086]
[273.60720825 355.07748413]
[262.95709229 344.51458740]
[252.30696106 333.95169067]
[245.33200073 331.46942139]
[241.57032776 323.12637329]
[231.09536743 312.38973999]
[220.62042236 301.65310669]
[210.14546204 290.91647339]
[199.67051697 280.17984009]
[189.19555664 269.44320679]
[178.72061157 258.70657349]
[181.51501465 273.44396973]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 145]
[12 144]
[13 143]
[14 142]
[15 141]
[17 139]
[18 138]
[19 137]
[20 136]
[21 55]
[22 54]
[23 53]
[24 52]
[25 51]
[26 50]
[27 49]
[28 48]
[29 47]
[30 46]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
[57 124]
[58 123]
[59 122]
[60 121]
[61 120]
[62 118]
[63 117]
[64 116]
[65 115]
[66 114]
[67 113]
[68 112]
[74 83]
[75 82]
[76 81]
[84 95]
[85 94]
[86 93]
[87 92]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
[125 134]
[126 133]
[127 132]
[146 189]
[147 188]
[148 187]
[149 186]
[150 185]
[151 184]
[152 183]
[153 181]
[154 180]
[155 179]
[156 178]
[160 176]
[161 175]
[162 174]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
