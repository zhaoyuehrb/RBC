%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:20:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUCCGGGCCGCCUGGGGGCGUGGCCGGGCCUGUACAGCAGCCUGGGCCAUGUCGGCGCCGCCGGCCCUGCAGAUCCGGGAGGCAAACGCACACCUGGCAGCCGUGCACCGGCGCGCAGCGGAGCUGGAGGCGCGGCUGGACGCGGCGG\
) } def
/len { sequence length } bind def

/coor [
[94.47084045 238.70733643]
[81.84980011 247.36573792]
[66.64929962 249.15556335]
[52.36231232 243.66552734]
[42.27187347 232.15721130]
[38.69669724 217.27511597]
[42.45832825 202.43905640]
[52.69237518 191.05824280]
[67.04712677 185.74790955]
[68.91474152 170.86462402]
[70.78235626 155.98135376]
[72.64997101 141.09806824]
[74.51758575 126.21479034]
[66.13543701 113.77534485]
[51.63984299 109.91819000]
[37.14424515 106.06102753]
[22.60931015 102.35486603]
[8.03660679 98.80010223]
[-6.53609610 95.24534607]
[-21.10879898 91.69058228]
[-35.68150330 88.13581848]
[-69.14781952 116.36943054]
[-84.14051819 116.83747101]
[-99.13321686 117.30551910]
[-114.12590790 117.77355957]
[-129.11860657 118.24160004]
[-144.11129761 118.70964050]
[-157.66333008 126.87377930]
[-170.62582397 119.53737640]
[-185.61853027 120.00541687]
[-199.17054749 128.16955566]
[-212.13305664 120.83314514]
[-227.12574768 121.30118561]
[-242.11843872 121.76923370]
[-257.11114502 122.23727417]
[-272.75390625 128.77488708]
[-283.36636353 115.55325317]
[-273.59927368 101.69540405]
[-257.57919312 107.24457550]
[-242.58648682 106.77653503]
[-227.59379578 106.30849457]
[-212.60108948 105.84045410]
[-200.12144470 97.70979309]
[-186.08656311 105.01271820]
[-171.09387207 104.54467773]
[-158.61422729 96.41401672]
[-144.57934570 103.71694946]
[-129.58665466 103.24890137]
[-114.59395599 102.78086090]
[-99.60125732 102.31282043]
[-84.60855865 101.84477997]
[-69.61586761 101.37673950]
[-66.37178040 94.61463928]
[-59.88361740 81.09045410]
[-56.63953400 74.32835388]
[-65.65706635 62.34152222]
[-74.67459106 50.35469055]
[-83.69212341 38.36785889]
[-98.04587555 29.34532738]
[-93.34946442 13.05483723]
[-76.39551544 13.05805683]
[-71.70529175 29.35032845]
[-62.68776321 41.33716202]
[-53.67023087 53.32399368]
[-44.65270233 65.31082916]
[-32.12673950 73.56311798]
[-17.55403709 77.11787415]
[-2.98133421 80.67263794]
[11.59136868 84.22740173]
[26.16407204 87.78216553]
[33.45484924 86.30222321]
[41.00140381 91.56542969]
[55.49700165 95.42259216]
[69.99259949 99.27974701]
[76.99214172 80.12788391]
[94.79148865 69.65644073]
[115.44612885 72.92285156]
[122.90103912 59.90654373]
[130.35595703 46.89023590]
[137.81086731 33.87392426]
[145.26577759 20.85761452]
[140.36248779 4.09768915]
[148.90135193 -10.74723244]
[165.20002747 -14.77354050]
[172.38253784 -27.94212341]
[171.44381714 -44.31438065]
[185.29986572 -53.08604431]
[199.69676208 -45.23357391]
[199.82423401 -28.83492279]
[185.55113220 -20.75961494]
[178.36862183 -7.59103203]
[183.70579529 4.17804766]
[181.23327637 17.06063080]
[171.63717651 26.28792572]
[158.28208923 28.31252480]
[150.82717896 41.32883453]
[143.37226868 54.34514618]
[135.91735840 67.36145782]
[128.46244812 80.37776184]
[134.09440613 94.28031921]
[148.50662231 98.43820953]
[162.91883850 102.59609222]
[177.33103943 106.75398254]
[191.74325562 110.91187286]
[206.15547180 115.06975555]
[220.56768799 119.22764587]
[234.97990417 123.38552856]
[249.39212036 127.54341888]
[267.12280273 122.68512726]
[278.82666016 135.72428894]
[293.32226562 139.58143616]
[307.81787109 143.43859863]
[322.31344604 147.29576111]
[336.80905151 151.15292358]
[347.59359741 140.21723938]
[362.40539551 136.15441895]
[377.26013184 140.05731201]
[388.16192627 150.87608337]
[392.17831421 165.70053101]
[388.22888184 180.54295349]
[377.37597656 191.41081238]
[362.53900146 195.38070679]
[347.70904541 191.38475037]
[336.87527466 180.49784851]
[332.95190430 165.64851379]
[318.45629883 161.79135132]
[303.96069336 157.93420410]
[289.46511841 154.07704163]
[274.96951294 150.21987915]
[264.30938721 156.02236938]
[252.17088318 152.87977600]
[245.23423767 141.95562744]
[230.82202148 137.79774475]
[216.40980530 133.63986206]
[201.99758911 129.48197937]
[187.58537292 125.32408905]
[173.17315674 121.16619873]
[158.76094055 117.00830841]
[144.34872437 112.85042572]
[129.93650818 108.69253540]
[123.72294617 119.77441406]
[113.68238068 127.36451721]
[101.55627441 130.26528931]
[89.40086365 128.08239746]
[87.53324890 142.96568298]
[85.66563416 157.84895325]
[83.79801941 172.73223877]
[81.93041229 187.61552429]
[94.52803802 196.30795288]
[101.63285065 209.86450195]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 148]
[10 147]
[11 146]
[12 145]
[13 144]
[14 74]
[15 73]
[16 72]
[17 70]
[18 69]
[19 68]
[20 67]
[21 66]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[29 45]
[30 44]
[32 42]
[33 41]
[34 40]
[35 39]
[55 65]
[56 64]
[57 63]
[58 62]
[77 99]
[78 98]
[79 97]
[80 96]
[81 95]
[84 91]
[85 90]
[100 140]
[101 139]
[102 138]
[103 137]
[104 136]
[105 135]
[106 134]
[107 133]
[108 132]
[110 129]
[111 128]
[112 127]
[113 126]
[114 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
