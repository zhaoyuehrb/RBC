%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:26:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUGCAUAGGGGUCGACUGCCGCUGCGGUGCAUGAGGGCGCAUGCGCAGCGGGGCCGUGGGUGUACGCGGCGCAGCGCGGCAGUCCUGAUGGCCCGGCAUGGGUUACCGCUGCUGCCCCUGCUGUCGCUCC\
) } def
/len { sequence length } bind def

/coor [
[96.12538910 253.24502563]
[91.13360596 267.84246826]
[79.02809906 277.40597534]
[63.67168427 278.88378906]
[49.96453476 271.80441284]
[42.28055573 258.42681885]
[43.07167816 243.01976013]
[52.08545303 230.49955750]
[66.44562531 224.86137390]
[69.28439331 210.13244629]
[72.12316132 195.40351868]
[74.96192932 180.67459106]
[73.12084198 173.44094849]
[78.04749298 165.63076782]
[81.23596954 150.97357178]
[84.42445374 136.31636047]
[87.61293030 121.65915680]
[81.82929230 117.09924316]
[77.62886047 111.04946899]
[75.37761688 104.03695679]
[60.53029633 101.90223694]
[45.68297577 99.76751709]
[30.83565331 97.63278961]
[15.98833179 95.49806976]
[1.14101040 93.36334991]
[-13.70631123 91.22862244]
[-28.55363274 89.09390259]
[-43.42530441 87.13600922]
[-58.31922531 85.35522461]
[-73.21314240 83.57444000]
[-88.10706329 81.79364777]
[-98.55443573 93.26674652]
[-113.75704193 96.37488556]
[-127.86915588 89.92292023]
[-135.46438599 76.39176941]
[-133.62222290 60.98443222]
[-123.05098724 49.62534714]
[-107.81556702 46.68231201]
[-93.77426910 53.28698349]
[-86.32627106 66.89973450]
[-71.43235779 68.68051910]
[-56.53843689 70.46130371]
[-41.64451981 72.24208832]
[-34.56064987 69.88965607]
[-26.41891098 74.24658203]
[-11.57158852 76.38130188]
[3.27573299 78.51602936]
[18.12305450 80.65074921]
[32.97037506 82.78546906]
[47.81769943 84.92019653]
[62.66501999 87.05491638]
[77.51234436 89.18963623]
[85.65007782 76.21614838]
[101.13005829 69.41691589]
[98.64260864 54.62459946]
[96.15515900 39.83228302]
[93.66770172 25.03996849]
[91.18025208 10.24765396]
[88.69280243 -4.54466105]
[75.67524719 -13.50673580]
[72.88979340 -29.06362343]
[81.98899078 -41.98569870]
[97.57446289 -44.60652542]
[110.39961243 -35.37121201]
[112.85551453 -19.75890541]
[103.48512268 -7.03211117]
[105.97257233 7.76020384]
[108.46002197 22.55251884]
[110.94747162 37.34483337]
[113.43492126 52.13714981]
[115.92237091 66.92946625]
[127.82266998 76.06089020]
[142.75474548 74.63504791]
[157.68682861 73.20920563]
[172.61891174 71.78336334]
[187.30560303 60.75064850]
[202.98437500 68.54065704]
[217.87829590 66.75987244]
[232.77220154 64.97908020]
[247.66612244 63.19829559]
[262.56005859 61.41751099]
[277.45394897 59.63672638]
[292.34786987 57.85593796]
[307.24179077 56.07515335]
[311.61300659 46.15721512]
[319.68121338 39.04237366]
[329.91223145 35.99262238]
[340.39822388 37.50548935]
[349.21359253 43.23423767]
[354.76843262 52.06431961]
[369.75143433 51.35058975]
[384.73443604 50.63686371]
[399.71746826 49.92313385]
[414.70046997 49.20940399]
[429.68347168 48.49567413]
[441.49551392 37.63957214]
[457.32507324 40.24820709]
[465.02905273 54.32046509]
[458.69760132 69.06130981]
[443.18771362 73.16282654]
[430.39721680 63.47868729]
[415.41418457 64.19241333]
[400.43118286 64.90614319]
[385.44818115 65.61987305]
[370.46514893 66.33360291]
[355.48214722 67.04733276]
[343.60812378 82.38573456]
[323.99588013 84.22763824]
[309.02258301 70.96907043]
[294.12866211 72.74985504]
[279.23474121 74.53063965]
[264.34082031 76.31143188]
[249.44691467 78.09221649]
[234.55299377 79.87300110]
[219.65907288 81.65378571]
[204.76515198 83.43457031]
[196.99148560 92.78199768]
[184.52857971 94.33750916]
[174.04475403 86.71544647]
[159.11267090 88.14128113]
[144.18058777 89.56712341]
[129.24850464 90.99296570]
[123.07411194 115.46535492]
[102.27013397 124.84764099]
[99.08165741 139.50483704]
[95.89317322 154.16204834]
[92.70469666 168.81924438]
[89.69085693 183.51335144]
[86.85208893 198.24227905]
[84.01332092 212.97122192]
[81.17455292 227.70014954]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 131]
[10 130]
[11 129]
[12 128]
[14 127]
[15 126]
[16 125]
[17 124]
[20 52]
[21 51]
[22 50]
[23 49]
[24 48]
[25 47]
[26 46]
[27 45]
[28 43]
[29 42]
[30 41]
[31 40]
[54 71]
[55 70]
[56 69]
[57 68]
[58 67]
[59 66]
[72 122]
[73 121]
[74 120]
[75 119]
[77 116]
[78 115]
[79 114]
[80 113]
[81 112]
[82 111]
[83 110]
[84 109]
[90 106]
[91 105]
[92 104]
[93 103]
[94 102]
[95 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
