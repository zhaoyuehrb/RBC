%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:00:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUAACUAUGUUUAAUGUCAGAUAGCAAUAAAGUAGAAGCUGCCGGUCGGGCCCCGCGGAAAUGGGCGAGCAUAAUCUCCUGAAUCCCGGGUUUGUGGGGCCGCUGGUAAACAUCCACACGGGAGACACCUUCUACUUCCCCAACUUCCGCGCGUCCGGGG\
) } def
/len { sequence length } bind def

/coor [
[92.56761932 132.35157776]
[95.32114410 147.09667969]
[82.35856628 154.64463806]
[70.89390564 144.97190857]
[76.15124512 130.92419434]
[78.18537903 116.06275177]
[70.71356964 115.41308594]
[61.80349731 127.48000336]
[52.89342880 139.54692078]
[43.98335648 151.61384583]
[51.15774918 165.08570862]
[51.76785660 180.33662415]
[45.69253922 194.33853149]
[34.13805771 204.31132507]
[19.39856339 208.27491760]
[4.40059233 205.44232178]
[-7.87799835 196.37596130]
[-14.99928474 182.87596130]
[-15.54932976 167.62275696]
[-9.41892147 153.64488220]
[2.17474246 143.71766663]
[16.92973137 139.81214905]
[31.91643333 142.70378113]
[40.82650375 130.63685608]
[49.73657608 118.56993103]
[58.64664841 106.50301361]
[64.06317902 98.19903564]
[70.87965393 92.37412262]
[78.31862640 89.19924164]
[85.60209656 88.63478088]
[92.00402832 90.43957520]
[96.89874268 94.19234467]
[99.20241547 79.37030029]
[101.50609589 64.54825592]
[103.80976868 49.72620392]
[106.11344147 34.90415955]
[108.41712189 20.08211136]
[110.72079468 5.26006413]
[113.02446747 -9.56198311]
[115.32814789 -24.38402939]
[100.98862457 -47.09376907]
[114.22372437 -69.80786896]
[111.06735229 -84.47201538]
[107.91098022 -99.13616943]
[104.75461578 -113.80031586]
[101.59824371 -128.46447754]
[98.44187164 -143.12861633]
[95.28549957 -157.79277039]
[91.09062195 -163.00294495]
[90.31105042 -168.69325256]
[92.30158997 -173.08250427]
[89.71268463 -187.85739136]
[87.12377930 -202.63229370]
[84.53487396 -217.40718079]
[81.94596863 -232.18208313]
[79.35707092 -246.95698547]
[76.76816559 -261.73187256]
[74.17926025 -276.50677490]
[71.59035492 -291.28167725]
[69.00144958 -306.05657959]
[66.41255188 -320.83145142]
[53.75998306 -329.91717529]
[51.34494019 -344.93792725]
[60.08475876 -356.94421387]
[57.49585724 -371.71911621]
[54.90695190 -386.49398804]
[52.31804657 -401.26889038]
[39.49618912 -406.40097046]
[30.96195793 -417.12115479]
[28.86821556 -430.55291748]
[33.65773392 -443.15933228]
[43.97489929 -451.67434692]
[41.67122269 -466.49636841]
[27.80486679 -473.46084595]
[20.71028709 -487.26107788]
[23.11549377 -502.59063721]
[34.09563446 -513.55493164]
[49.42862320 -515.93804932]
[63.21861267 -508.82354736]
[70.16307068 -494.94714355]
[67.59170532 -479.64462280]
[56.49327087 -468.80004883]
[58.79694366 -453.97799683]
[73.61903381 -446.97351074]
[81.43898773 -432.37649536]
[79.01078033 -415.82809448]
[67.09294891 -403.85781860]
[69.68184662 -389.08291626]
[72.27075195 -374.30801392]
[74.85965729 -359.53311157]
[87.16101074 -351.21371460]
[89.99700165 -336.26675415]
[81.18744659 -323.42037964]
[83.77635193 -308.64547729]
[86.36524963 -293.87057495]
[88.95415497 -279.09567261]
[91.54306030 -264.32077026]
[94.13196564 -249.54588318]
[96.72087097 -234.77099609]
[99.30976868 -219.99609375]
[101.89867401 -205.22119141]
[104.48757935 -190.44630432]
[107.07648468 -175.67140198]
[109.94965363 -160.94914246]
[113.10602570 -146.28498840]
[116.26239777 -131.62083435]
[119.41876221 -116.95668793]
[122.57513428 -102.29254150]
[125.73150635 -87.62838745]
[128.88787842 -72.96423340]
[134.22444153 -71.87871552]
[139.20063782 -69.66631317]
[143.58161926 -66.43144989]
[147.16061401 -62.32680130]
[149.76869202 -57.54608917]
[164.71231079 -58.84542465]
[179.65592957 -60.14476013]
[191.03422546 -71.45465851]
[206.95372009 -69.46728516]
[215.20231628 -55.70719528]
[209.45240784 -40.72993851]
[194.11482239 -36.02479553]
[180.95526123 -45.20114136]
[166.01164246 -43.90180588]
[151.06802368 -42.60247040]
[149.64524841 -37.70677948]
[147.24684143 -33.16599274]
[143.95822144 -29.17377090]
[139.90309143 -25.90373039]
[135.23876953 -23.50192261]
[130.15019226 -22.08035469]
[127.84651947 -7.25830746]
[125.54283905 7.56373978]
[123.23916626 22.38578606]
[120.93549347 37.20783234]
[118.63181305 52.02988052]
[116.32814026 66.85192871]
[114.02446747 81.67397308]
[111.72078705 96.49602509]
[114.02446747 111.31806946]
[120.71814728 124.74172974]
[127.41183472 138.16539001]
[134.10551453 151.58903503]
[149.68522644 161.36341858]
[147.98835754 178.80966187]
[154.93949890 192.10182190]
[170.30949402 194.23332214]
[181.46783447 205.01623535]
[184.12391663 220.30429077]
[177.25643921 234.21893311]
[163.50608826 241.40969849]
[148.16012573 239.11158752]
[137.11941528 228.20828247]
[134.62931824 212.89230347]
[141.64733887 199.05297852]
[134.69619751 185.76081848]
[123.22467041 181.82923889]
[117.33560181 170.77166748]
[120.68186188 158.28273010]
[113.98818207 144.85906982]
[107.29449463 131.43540955]
[100.60080719 118.01175690]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 26]
[8 25]
[9 24]
[10 23]
[32 139]
[33 138]
[34 137]
[35 136]
[36 135]
[37 134]
[38 133]
[39 132]
[40 131]
[42 110]
[43 109]
[44 108]
[45 107]
[46 106]
[47 105]
[48 104]
[51 103]
[52 102]
[53 101]
[54 100]
[55 99]
[56 98]
[57 97]
[58 96]
[59 95]
[60 94]
[61 93]
[64 90]
[65 89]
[66 88]
[67 87]
[72 83]
[73 82]
[115 125]
[116 124]
[117 123]
[140 162]
[141 161]
[142 160]
[143 159]
[145 156]
[146 155]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
