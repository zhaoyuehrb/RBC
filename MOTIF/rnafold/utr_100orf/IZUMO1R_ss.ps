%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCAUGCUGGUGGCCGCUCCUGCUAGAGCUGUGGACAGUCAUGCCCACCUGGGCUGGGGACGAGCUGCUCAACAUCUGCAUGAAUGCCAAACACCACA\
) } def
/len { sequence length } bind def

/coor [
[191.23168945 334.70654297]
[202.65742493 324.52267456]
[198.96324158 309.98468018]
[195.26905823 295.44671631]
[191.57487488 280.90872192]
[187.88069153 266.37072754]
[183.28982544 252.09053040]
[177.82005310 238.12338257]
[172.35028076 224.15621948]
[165.60285950 210.75949097]
[157.63648987 198.04977417]
[149.47343445 185.46548462]
[141.11564636 173.00965881]
[132.75785828 160.55383301]
[124.40007782 148.09802246]
[116.04228973 135.64219666]
[107.49180603 123.31786346]
[98.75069427 111.12799835]
[89.82106018 99.07553864]
[80.70507050 87.16341400]
[71.58908081 75.25128937]
[62.47308731 63.33916855]
[47.94175720 57.08208466]
[46.35149002 42.27261734]
[37.23550034 30.36049271]
[28.11951065 18.44836807]
[15.35141277 15.93191242]
[8.01666832 5.67393494]
[9.65725231 -6.42261219]
[0.91613632 -18.61248016]
[-5.19603825 -21.81567764]
[-8.18960762 -26.90962219]
[-7.96149969 -31.84304810]
[-15.92786694 -44.55276871]
[-23.89423370 -57.26248932]
[-31.86060143 -69.97221375]
[-45.74567795 -77.55609131]
[-45.94908905 -92.44930267]
[-53.91545868 -105.15902710]
[-68.65114594 -112.35565186]
[-69.51644897 -128.73194885]
[-55.62120819 -137.44139099]
[-41.25966263 -129.52444458]
[-41.20573807 -113.12538910]
[-33.23937225 -100.41567230]
[-19.92410088 -93.74087524]
[-19.15088081 -77.93857574]
[-11.18451309 -65.22885895]
[-3.21814609 -52.51913834]
[4.74822092 -39.80941772]
[13.10600471 -27.35359573]
[21.84712029 -15.16372776]
[38.15999603 -8.90340996]
[40.03163528 9.33237839]
[49.14762497 21.24450302]
[58.26361465 33.15662766]
[72.14290619 38.56167603]
[74.38520813 54.22317505]
[83.50120544 66.13529968]
[92.61719513 78.04742432]
[101.73318481 89.95954895]
[108.87052155 94.02813721]
[110.94055939 102.38687897]
[119.68167877 114.57675171]
[127.36516571 119.84519958]
[128.49810791 127.28441620]
[136.85589600 139.74023438]
[145.21368408 152.19606018]
[153.57145691 164.65187073]
[161.92924500 177.10769653]
[169.44517517 182.61254883]
[170.34620667 190.08340454]
[178.31257629 202.79312134]
[183.82192993 188.84152222]
[197.46640015 182.61029053]
[211.61819458 187.58293152]
[218.36584473 200.97953796]
[213.93717957 215.31086731]
[200.80798340 222.56510925]
[186.31744385 218.68644714]
[191.78721619 232.65361023]
[197.25698853 246.62075806]
[201.09898376 249.42604065]
[203.49232483 252.99452209]
[204.37814331 256.73486328]
[203.91058350 260.10388184]
[202.41867065 262.67654419]
[206.11285400 277.21453857]
[209.80703735 291.75253296]
[213.50122070 306.29049683]
[217.19540405 320.82849121]
[232.09675598 324.32250977]
[243.65991211 334.35006714]
[249.22773743 348.60693359]
[247.52078247 363.81695557]
[238.93128967 376.48498535]
[225.43307495 383.70004272]
[210.12791443 383.80410767]
[196.53283691 376.77328491]
[187.77188110 364.22320557]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 91]
[3 90]
[4 89]
[5 88]
[6 87]
[7 82]
[8 81]
[9 80]
[10 73]
[11 72]
[12 70]
[13 69]
[14 68]
[15 67]
[16 66]
[17 64]
[18 63]
[19 61]
[20 60]
[21 59]
[22 58]
[24 56]
[25 55]
[26 54]
[29 52]
[30 51]
[33 50]
[34 49]
[35 48]
[36 47]
[38 45]
[39 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
