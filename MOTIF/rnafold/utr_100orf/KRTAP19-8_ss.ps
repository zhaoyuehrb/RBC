%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:19:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGACCUCCAAACACAUCUACAGUUGCUGAACCAUGAGCUACUACAGAAGCUAUUAUGGAGGCCUGGGCUAUGGCUAUGGAGGCUUUGGUGGCUGGGGCUAUGGCUAUGGCUGCGGCUAUGGCAGCUUCCGCA\
) } def
/len { sequence length } bind def

/coor [
[88.89539337 145.38172913]
[76.28546906 140.25463867]
[65.68865967 131.71034241]
[58.00450134 120.47418976]
[53.88531494 107.50000000]
[38.88531494 107.50000000]
[23.88531494 107.50000000]
[8.88531399 107.50000000]
[-6.11468601 107.50000000]
[-21.11468506 107.50000000]
[-27.27990341 123.11672974]
[-38.91629028 135.16920471]
[-54.23993683 141.84988403]
[-70.91695404 142.17166138]
[-86.41889191 136.11364746]
[-98.40612030 124.62007904]
[-105.08091736 109.45329285]
[-120.06443024 110.15637207]
[-135.04794312 110.85945892]
[-145.65818787 122.26387024]
[-160.86361694 122.76345062]
[-171.67059326 112.57793427]
[-186.65409851 113.28102112]
[-201.63761902 113.98410034]
[-215.05995178 122.35974121]
[-228.13591003 115.22750092]
[-243.11941528 115.93058777]
[-258.10293579 116.63367462]
[-266.51232910 129.67443848]
[-280.99301147 135.25028992]
[-295.97677612 131.21722412]
[-305.70214844 119.12602997]
[-306.42947388 103.62600708]
[-297.87908936 90.67724609]
[-283.33877563 85.25879669]
[-268.39962769 89.45417023]
[-258.80599976 101.65015411]
[-243.82249451 100.94707489]
[-228.83898926 100.24398804]
[-216.48837280 91.91864014]
[-202.34069824 99.00058746]
[-187.35719299 98.29750061]
[-172.37367249 97.59442139]
[-162.56796265 86.44167328]
[-147.38256836 85.51519775]
[-135.75103760 95.87594604]
[-120.76751709 95.17285919]
[-105.78400421 94.46977997]
[-102.05920410 81.64387512]
[-94.52913666 70.58549500]
[-83.92391968 62.39206696]
[-71.27968597 57.88203812]
[-57.83735657 57.51309586]
[-44.92087173 61.33577347]
[-33.80677032 68.98708344]
[-25.59804535 79.72490692]
[-21.11468506 92.50000000]
[-6.11468601 92.50000000]
[8.88531399 92.50000000]
[23.88531494 92.50000000]
[38.88531494 92.50000000]
[53.88531494 92.50000000]
[57.99368286 79.54801941]
[65.65513611 68.32595825]
[76.22164154 59.78303909]
[88.79943085 54.64185333]
[102.32460785 53.33726883]
[105.46621704 38.66994858]
[108.60781860 24.00262642]
[103.05246735 8.57310486]
[113.84238434 -3.77638149]
[129.87782288 -0.34173977]
[134.66290283 15.34376526]
[123.27513885 27.14422989]
[120.13353729 41.81155014]
[116.99193573 56.47887421]
[132.87518311 66.80306244]
[143.35357666 82.58501434]
[146.70440674 101.23007965]
[161.44134521 104.02697754]
[176.17828369 106.82388306]
[190.91522217 109.62078094]
[205.65216064 112.41767883]
[220.38909912 115.21458435]
[235.12603760 118.01148224]
[246.43537903 107.55181122]
[261.55841064 105.77779388]
[274.67114258 113.16159058]
[280.84765625 126.68891907]
[295.58459473 129.48582458]
[310.32153320 132.28273010]
[325.05847168 135.07962036]
[339.79541016 137.87652588]
[354.53234863 140.67343140]
[369.26928711 143.47032166]
[384.27014160 138.44189453]
[395.33151245 148.41664124]
[410.06845093 151.21353149]
[424.80538940 154.01043701]
[439.54232788 156.80734253]
[454.27926636 159.60423279]
[469.01620483 162.40113831]
[484.31124878 156.48561096]
[496.91027832 166.98304749]
[493.85250854 183.09460449]
[478.28347778 188.24607849]
[466.21929932 177.13807678]
[451.48236084 174.34117126]
[436.74542236 171.54428101]
[422.00848389 168.74737549]
[407.27154541 165.95046997]
[392.53460693 163.15357971]
[378.58786011 168.38204956]
[366.47238159 158.20726013]
[351.73544312 155.41036987]
[336.99850464 152.61346436]
[322.26156616 149.81655884]
[307.52462769 147.01965332]
[292.78768921 144.22276306]
[278.05075073 141.42585754]
[267.34759521 151.74961853]
[252.44137573 153.81575012]
[239.01988220 146.62429810]
[232.32913208 132.74842834]
[217.59219360 129.95152283]
[202.85525513 127.15461731]
[188.11831665 124.35771942]
[173.38137817 121.56081390]
[158.64443970 118.76391602]
[143.90750122 115.96701813]
[137.44139099 127.94561005]
[127.79689789 137.55192566]
[115.79275513 143.97047424]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 62]
[6 61]
[7 60]
[8 59]
[9 58]
[10 57]
[17 48]
[18 47]
[19 46]
[22 43]
[23 42]
[24 41]
[26 39]
[27 38]
[28 37]
[67 76]
[68 75]
[69 74]
[79 130]
[80 129]
[81 128]
[82 127]
[83 126]
[84 125]
[85 124]
[89 120]
[90 119]
[91 118]
[92 117]
[93 116]
[94 115]
[95 114]
[97 112]
[98 111]
[99 110]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
