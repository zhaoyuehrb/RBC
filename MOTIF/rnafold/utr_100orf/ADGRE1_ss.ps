%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:53:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGAAAACCCAGCGUUAGUAGAAAAGUUUCUUUUCUUUGAAUGACAGAACUACAGCAUAAUGCGUGGCUUCAACCUGCUCCUCUUCUGGGGAUGUUGUGUUAUGCACAGCUGGGAAGGGCACAUAAGACCCACACGGAAACCAAACACAAAGGGUAAUA\
) } def
/len { sequence length } bind def

/coor [
[158.31829834 228.54998779]
[153.68534851 222.11727905]
[150.34205627 215.05271912]
[148.36270142 207.60728455]
[147.77395630 200.03776550]
[148.55522156 192.59794617]
[150.64064026 185.53010559]
[153.92251587 179.05709839]
[158.25621033 173.37536621]
[148.34312439 162.11788940]
[138.43002319 150.86042786]
[128.51693726 139.60295105]
[118.60385132 128.34548950]
[108.69075775 117.08801270]
[94.10010529 113.60768127]
[80.17293549 119.17849731]
[66.24576569 124.74932098]
[52.31860352 130.32014465]
[45.46217346 149.15556335]
[27.27527618 156.83406067]
[9.54795074 148.85992432]
[-4.02943563 155.23602295]
[-17.60682297 161.61212158]
[-31.18420792 167.98820496]
[-44.76159668 174.36430359]
[-58.33898163 180.74040222]
[-71.91636658 187.11648560]
[-83.68316650 199.32217407]
[-98.66922760 191.39410400]
[-95.19953156 174.79899597]
[-78.29246521 173.53910828]
[-64.71507263 167.16300964]
[-51.13768768 160.78691101]
[-37.56030273 154.41082764]
[-23.98291588 148.03472900]
[-10.40552902 141.65863037]
[3.17185712 135.28254700]
[3.93998814 124.95938110]
[8.98639107 115.82834625]
[17.44888496 109.58930206]
[27.82253265 107.43580627]
[38.22708893 109.82726288]
[46.74778366 116.39297485]
[60.67494965 110.82215118]
[74.60211945 105.25133514]
[88.52928162 99.68051147]
[66.35441589 95.81516266]
[45.01891327 87.72571564]
[34.25822830 77.27546692]
[23.49754333 66.82522583]
[12.63541317 56.48046112]
[1.67287374 46.24216080]
[-9.28966618 36.00386429]
[-20.25220490 25.76556778]
[-28.70550156 22.17008972]
[-31.32628441 15.21895027]
[-42.08696747 4.76870346]
[-52.84765625 -5.68154287]
[-68.42269897 -12.37888145]
[-66.29869843 -29.19925499]
[-49.54768753 -31.81460190]
[-42.39740753 -16.44222832]
[-31.63672256 -5.99198198]
[-20.87603760 4.45826483]
[-10.01390839 14.80302906]
[0.94863147 25.04132652]
[11.91117096 35.27962494]
[22.87371063 45.51792145]
[29.94437790 47.79662323]
[33.94778824 56.06453705]
[44.70847321 66.51478577]
[55.46915817 76.96503448]
[62.69104004 74.94155884]
[54.37881470 62.45528793]
[63.68535995 50.69143677]
[77.74932098 55.90727997]
[77.13479614 70.89460754]
[84.35668182 68.87113190]
[88.12103271 54.35115433]
[91.74355316 39.79514694]
[95.22388458 25.20449066]
[98.70421600 10.61383247]
[102.18454742 -3.97682571]
[105.66487885 -18.56748390]
[100.46823120 -34.12148285]
[111.54116058 -46.21785736]
[127.49278259 -42.41289520]
[131.91343689 -26.62081146]
[120.25553894 -15.08715248]
[116.77520752 -0.49649465]
[113.29487610 14.09416294]
[109.81454468 28.68482018]
[106.33421326 43.27547836]
[107.84885406 50.54821396]
[102.64100647 58.11551285]
[98.87664795 72.63548279]
[111.53842926 80.67783356]
[123.08119202 71.09844208]
[134.62394714 61.51905060]
[146.16670227 51.93965912]
[157.70947266 42.36026764]
[166.03660583 27.59222412]
[182.53268433 31.50573158]
[183.33869934 48.44050980]
[167.28886414 53.90302658]
[155.74609375 63.48241806]
[144.20333862 73.06180573]
[132.66058350 82.64119720]
[121.11782074 92.22058868]
[119.94823456 107.17491913]
[129.86132812 118.43239594]
[139.77441406 129.68986511]
[149.68750000 140.94734192]
[159.60058594 152.20480347]
[169.51367188 163.46228027]
[196.17472839 155.81340027]
[223.26327515 167.98629761]
[236.96447754 196.52861023]
[251.75862122 199.00512695]
[266.55276489 201.48164368]
[276.84533691 189.98960876]
[291.72311401 185.90852356]
[306.43865967 190.54061890]
[316.29629517 202.40783691]
[318.15048218 217.72335815]
[311.40954590 231.60008240]
[298.22451782 239.61000061]
[282.80270386 239.19714355]
[270.06509399 230.49328613]
[264.07626343 216.27578735]
[249.28210449 213.79927063]
[234.48796082 211.32275391]
[230.10328674 217.40754700]
[242.27285767 226.17689514]
[254.44242859 234.94624329]
[266.61187744 243.71578979]
[257.84213257 255.88508606]
[245.67308044 247.11581421]
[233.50350952 238.34646606]
[221.33393860 229.57711792]
[216.94924927 235.66189575]
[223.97984314 248.91221619]
[231.01042175 262.16253662]
[246.36215210 262.63165283]
[259.41412354 270.72744751]
[266.65539551 284.27215576]
[266.13815308 299.62234497]
[258.00149536 312.64886475]
[244.43414307 319.84765625]
[229.08566284 319.28231812]
[216.08471680 311.10485840]
[208.92846680 297.51501465]
[209.54194641 282.16836548]
[217.76011658 269.19311523]
[210.72952271 255.94279480]
[203.69894409 242.69247437]
[195.19224548 243.94033813]
[186.71186829 243.63214111]
[178.53640747 241.81825256]
[170.92729187 238.59790039]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 115]
[10 114]
[11 113]
[12 112]
[13 111]
[14 110]
[15 46]
[16 45]
[17 44]
[18 43]
[21 37]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[27 31]
[48 72]
[49 71]
[50 70]
[51 68]
[52 67]
[53 66]
[54 65]
[56 64]
[57 63]
[58 62]
[78 96]
[79 95]
[80 93]
[81 92]
[82 91]
[83 90]
[84 89]
[97 109]
[98 108]
[99 107]
[100 106]
[101 105]
[118 132]
[119 131]
[120 130]
[141 156]
[142 155]
[143 154]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
