%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUACAGAUUUACAGAUUUUGAUGUAUCAAACAUUUCAAUUUACCUGAAUCAUGUCCUUUUCUAUACUACCCAGCAGGCAGGUGACCUAGAACACAUGG\
) } def
/len { sequence length } bind def

/coor [
[70.48407745 129.55421448]
[64.45706177 121.93948364]
[60.35136795 113.13877869]
[58.38893890 103.62783813]
[58.67585754 93.92079163]
[44.46878433 89.10840607]
[30.26171112 84.29602051]
[15.98151398 79.70516205]
[1.63164806 75.33693695]
[-12.71821785 70.96871948]
[-27.06808281 66.60050201]
[-41.41794968 62.23227692]
[-55.76781464 57.86405563]
[-75.01546478 63.44192123]
[-87.85317993 49.12388992]
[-102.44685364 45.65624619]
[-117.04053497 42.18860245]
[-131.63421631 38.72095490]
[-146.22789001 35.25331116]
[-159.57800293 43.27903748]
[-174.32867432 39.55445862]
[-181.89770508 26.77770805]
[-196.49137878 23.31006241]
[-211.08505249 19.84241867]
[-225.67872620 16.37477303]
[-240.27241516 12.90712833]
[-254.63093567 20.06339455]
[-269.11700439 13.16892147]
[-272.61810303 -2.48744273]
[-262.44854736 -14.89547443]
[-246.40948486 -14.53679371]
[-236.80476379 -1.68655002]
[-222.21109009 1.78109479]
[-207.61741638 5.24873972]
[-193.02372742 8.71638489]
[-178.43005371 12.18402958]
[-165.92269897 4.17768526]
[-151.07322693 7.48647785]
[-142.76023865 20.65963364]
[-128.16656494 24.12727737]
[-113.57289124 27.59492302]
[-98.97920990 31.06256676]
[-84.38552856 34.53021240]
[-76.01140594 28.30524445]
[-65.36705017 27.80331230]
[-56.06478882 33.44235611]
[-51.39959335 43.51419067]
[-37.04972839 47.88241196]
[-22.69986343 52.25063324]
[-8.34999657 56.61885452]
[5.99986887 60.98707581]
[20.34973526 65.35529327]
[27.79644775 64.27272034]
[35.07409668 70.08894348]
[49.28116989 74.90132904]
[63.48824310 79.71372223]
[77.90781403 64.55177307]
[97.87129211 58.28537369]
[118.36896515 62.48703384]
[134.25704956 76.10237122]
[141.54849243 95.71469879]
[156.50317383 96.87995148]
[171.45783997 98.04521179]
[186.41250610 99.21047211]
[201.36718750 100.37572479]
[216.35992432 100.84222412]
[231.35810852 100.60894775]
[246.35629272 100.37567139]
[261.35449219 100.14239502]
[272.31683350 89.07601929]
[287.53045654 89.05310059]
[298.01300049 99.57221985]
[313.01116943 99.33894348]
[326.79855347 90.45974731]
[341.25610352 98.19997406]
[341.51113892 114.59713745]
[327.30130005 122.78324127]
[313.24444580 114.33712769]
[298.24627686 114.57040405]
[288.09594727 125.41044617]
[272.88897705 125.86067200]
[261.58776855 115.14057922]
[246.58956909 115.37385559]
[231.59138489 115.60713196]
[216.59320068 115.84040833]
[213.81278992 118.27439880]
[209.65072632 119.38433838]
[204.79129028 118.50608826]
[200.20191956 115.33039856]
[185.24725342 114.16513824]
[170.29258728 112.99988556]
[155.33790588 111.83462524]
[140.38323975 110.66936493]
[136.82794189 119.70645142]
[131.28186035 127.67828369]
[124.04477692 134.15391541]
[115.50793457 138.78330994]
[106.13278198 141.31622314]
[96.42611694 141.61572266]
[86.91263580 139.66563416]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 56]
[6 55]
[7 54]
[8 52]
[9 51]
[10 50]
[11 49]
[12 48]
[13 47]
[15 43]
[16 42]
[17 41]
[18 40]
[19 39]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[61 93]
[62 92]
[63 91]
[64 90]
[65 89]
[66 85]
[67 84]
[68 83]
[69 82]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
