%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:56:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGCCAAACACCUUCCUGACACCAUGAGGGCCAGCAGCUUCUUGAUCGUGGUGGUGUUCCUCAUCGCUGGGACGCUGGUUCUAGAGGCAGCUGUCACGGGAGUUCCUGUUAAAGGUCAAGACA\
) } def
/len { sequence length } bind def

/coor [
[77.19236755 224.95727539]
[77.54362488 209.65579224]
[84.97573090 196.27586365]
[97.78085327 187.89210510]
[96.27542877 172.96784973]
[94.77000427 158.04357910]
[88.15281677 154.51329041]
[85.52744293 169.28175354]
[70.67051697 171.34857178]
[64.11384583 157.85745239]
[74.91844940 147.45274353]
[68.30126190 143.92245483]
[55.06689453 150.98301697]
[41.83252716 158.04357910]
[28.59815788 165.10414124]
[15.36379051 172.16468811]
[6.82999706 185.48704529]
[-8.04114056 184.65126038]
[-21.27550888 191.71182251]
[-29.48231888 205.90972900]
[-45.87909317 205.63078308]
[-53.59823608 191.16197205]
[-44.69895554 177.38754272]
[-28.33606911 178.47746277]
[-15.10169983 171.41690063]
[-7.51451731 158.59956360]
[8.30323124 158.93032837]
[21.53759956 151.86976624]
[34.77196884 144.80920410]
[48.00633621 137.74865723]
[61.24070358 130.68809509]
[63.22175598 86.84971619]
[93.90032959 71.97632599]
[94.65399170 56.99527359]
[95.40765381 42.01422119]
[96.16132355 27.03316689]
[89.12717438 12.86166954]
[97.49417114 0.53922766]
[98.24784088 -14.44182682]
[99.00150299 -29.42288017]
[99.75516510 -44.40393448]
[100.50883484 -59.38499069]
[101.26249695 -74.36604309]
[92.47297668 -90.48790741]
[102.43627167 -104.87614441]
[102.81321716 -119.87140656]
[103.19017029 -134.86666870]
[103.56712341 -149.86193848]
[90.71958160 -142.11979675]
[76.56883240 -147.09535217]
[71.39385223 -161.17440796]
[78.95372009 -174.13003540]
[93.75699615 -176.55139160]
[105.05037689 -166.68037415]
[107.30376434 -181.51014709]
[109.55714417 -196.33992004]
[111.81053162 -211.16969299]
[114.06391144 -225.99948120]
[116.31729889 -240.82925415]
[118.57067871 -255.65902710]
[120.82406616 -270.48880005]
[109.68890381 -281.29565430]
[107.06565094 -296.58938599]
[113.96299744 -310.48922729]
[127.72877502 -317.65045166]
[143.06974792 -315.31939697]
[154.08702087 -304.39239502]
[156.54421997 -289.07110596]
[149.49649048 -275.24688721]
[135.65383911 -268.23541260]
[133.40045166 -253.40563965]
[131.14707947 -238.57586670]
[128.89369202 -223.74609375]
[126.64030457 -208.91632080]
[124.38692474 -194.08653259]
[122.13353729 -179.25675964]
[119.88015747 -164.42698669]
[118.56238556 -149.48498535]
[118.18543243 -134.48971558]
[117.80848694 -119.49445343]
[117.43153381 -104.49919128]
[125.56964111 -95.45503998]
[125.30999756 -82.88882446]
[116.24355316 -73.61238098]
[115.48988342 -58.63132477]
[114.73622131 -43.65027237]
[113.98255920 -28.66921616]
[113.22888947 -13.68816185]
[112.47522736 1.29289246]
[119.56328583 14.39284420]
[111.14237213 27.78683090]
[110.38871002 42.76788712]
[109.63504791 57.74893951]
[108.88137817 72.72999573]
[128.38404846 78.51437378]
[142.48420715 98.30244446]
[141.67269897 126.59751129]
[154.90707397 133.65806580]
[168.14143372 140.71862793]
[181.37580872 147.77919006]
[194.61016846 154.83975220]
[210.97306824 153.74983215]
[219.87234497 167.52426147]
[212.15319824 181.99308777]
[195.75642395 182.27201843]
[187.54962158 168.07411194]
[174.31524658 161.01356506]
[161.08088684 153.95300293]
[147.84651184 146.89244080]
[134.61213684 139.83187866]
[128.38267517 144.00845337]
[136.73559570 156.46752930]
[124.27638245 164.82025146]
[115.92373657 152.36158752]
[109.69426727 156.53814697]
[111.19969177 171.46241760]
[112.70511627 186.38668823]
[126.92660522 192.04423523]
[136.88108826 203.67036438]
[140.28112793 218.59344482]
[136.34539795 233.38427734]
[125.97830963 244.64402771]
[111.56214142 249.78529358]
[96.40962219 247.62664795]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 117]
[5 116]
[6 115]
[12 31]
[13 30]
[14 29]
[15 28]
[16 27]
[18 25]
[19 24]
[33 94]
[34 93]
[35 92]
[36 91]
[38 89]
[39 88]
[40 87]
[41 86]
[42 85]
[43 84]
[45 81]
[46 80]
[47 79]
[48 78]
[54 77]
[55 76]
[56 75]
[57 74]
[58 73]
[59 72]
[60 71]
[61 70]
[97 110]
[98 109]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
