%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:33:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCUGUUCCUGUAAGGCGGGGAGACAAUGAGUAAACUCUCCUUCCGAGCGCGGGCGCUGGACGCCGCCAAGCCGCUGCCUAUCUACCGCGGCAAGGACAUGCCUGAUCUCAACGACUGCGUCUCCA\
) } def
/len { sequence length } bind def

/coor [
[179.25784302 244.66526794]
[171.54629517 231.79934692]
[163.83476257 218.93341064]
[156.12321472 206.06748962]
[148.25436401 193.29716492]
[140.22940063 180.62435913]
[132.20443726 167.95155334]
[125.90158081 163.94140625]
[124.14247131 154.86779785]
[116.43093109 142.00187683]
[108.71939087 129.13594055]
[95.91335297 130.13685608]
[83.83633423 125.76172638]
[74.64270782 116.79102325]
[69.97251129 104.82501221]
[70.65884399 91.99826813]
[57.60754395 84.60479736]
[44.55623627 77.21132660]
[31.50493240 69.81784821]
[18.45362854 62.42437744]
[3.90315890 58.77967453]
[-11.09232330 59.14779282]
[-26.08780670 59.51591110]
[-41.08328629 59.88402939]
[-56.07876968 60.25214767]
[-62.31472397 74.18325043]
[-73.98314667 84.02249908]
[-88.76725006 87.81629944]
[-103.73165131 84.81139374]
[-115.90515137 75.60440826]
[-122.87069702 62.02339935]
[-123.24527740 46.76487732]
[-116.95450592 32.85844040]
[-105.24743652 23.06521797]
[-90.44850159 19.32966423]
[-75.49604797 22.39347649]
[-63.35889816 31.64832878]
[-56.44688797 45.25666809]
[-41.45140457 44.88854980]
[-26.45592499 44.52043152]
[-11.46044159 44.15231323]
[3.53504038 43.78419495]
[0.76035887 32.44563675]
[4.86823368 22.72499275]
[-2.84330750 9.85906410]
[-10.55484867 -3.00686550]
[-17.72782135 -8.83553219]
[-18.29330063 -16.28452682]
[-25.68677330 -29.33583069]
[-33.08024597 -42.38713455]
[-40.47372055 -55.43844223]
[-54.87491226 -63.28303909]
[-55.01133728 -79.68161774]
[-40.74265289 -87.76472473]
[-26.74725723 -79.21715546]
[-27.42241478 -62.83191299]
[-20.02894020 -49.78060913]
[-12.63546848 -36.72930527]
[-5.24199533 -23.67799950]
[2.31108046 -10.71840668]
[10.02262211 2.14752245]
[17.73416328 15.01345158]
[31.96246910 20.10507202]
[36.48993683 35.68553925]
[25.84710121 49.37307358]
[38.89840698 56.76654816]
[51.94971085 64.16001892]
[65.00101471 71.55348969]
[78.05232239 78.94696808]
[90.49611664 71.11042786]
[105.16203308 70.02861023]
[118.62100983 75.95443726]
[130.44619751 66.72596741]
[142.27140808 57.49748993]
[154.09660339 48.26901627]
[165.92179871 39.04054260]
[162.63180542 24.13622284]
[166.14274597 9.28239727]
[175.75747681 -2.57169580]
[189.56701660 -9.07241726]
[204.82946777 -8.92904377]
[218.51445007 -2.17004275]
[227.90480042 9.86258125]
[231.13606262 24.77974319]
[227.56666565 39.61962891]
[217.90531921 51.43576431]
[204.07028198 57.88205338]
[188.80851746 57.67858124]
[175.15026855 50.86574173]
[163.32507324 60.09421539]
[151.49987793 69.32268524]
[139.67468262 78.55116272]
[127.84947968 87.77963257]
[129.89886475 105.56673431]
[121.58531952 121.42440033]
[129.29685974 134.29032898]
[137.00839233 147.15626526]
[144.87724304 159.92658997]
[152.90220642 172.59939575]
[160.92716980 185.27220154]
[168.24102783 190.92308044]
[168.98915100 198.35594177]
[176.70068359 211.22187805]
[184.41223145 224.08779907]
[192.12376404 236.95373535]
[203.83950806 234.45330811]
[215.76390076 235.37762451]
[226.91806030 239.63973999]
[236.38949585 246.87916565]
[243.40669250 256.49237061]
[247.40202332 267.68295288]
[248.05758667 279.52786255]
[245.33055115 291.05319214]
[239.45567322 301.31460571]
[230.92524719 309.47445679]
[237.33857727 323.03427124]
[243.75189209 336.59411621]
[255.98982239 348.32739258]
[248.10290527 363.33514404]
[231.49833679 359.91101074]
[230.19206238 343.00744629]
[223.77873230 329.44760132]
[217.36540222 315.88778687]
[199.12863159 316.63986206]
[182.31010437 309.42098999]
[170.22682190 295.60781860]
[165.28218079 277.88214111]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 105]
[2 104]
[3 103]
[4 102]
[5 100]
[6 99]
[7 98]
[9 97]
[10 96]
[11 95]
[16 69]
[17 68]
[18 67]
[19 66]
[20 65]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[44 62]
[45 61]
[46 60]
[48 59]
[49 58]
[50 57]
[51 56]
[72 93]
[73 92]
[74 91]
[75 90]
[76 89]
[115 123]
[116 122]
[117 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
