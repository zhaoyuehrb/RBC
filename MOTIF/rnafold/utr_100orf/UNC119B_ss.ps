%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:20:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGCGCUGUGGAGGCGGCGGCCAUCUUGGCGGCGGAGCGAUGAGCGGGUCUAACCCGAAGGCUGCGGCCGCGGCGUCGGCGGCUGGGCCCGGGGGGCUGGUGGCUGGCAAGGAGGAGAAGAAGAAGGCGGGCGGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[67.38643646 184.59187317]
[75.73777771 170.47850037]
[75.40359497 155.48222351]
[75.06941223 140.48594666]
[74.73522949 125.48966980]
[66.52364349 112.93698883]
[52.91727829 106.62296295]
[39.31091309 100.30894470]
[25.70455170 93.99492645]
[12.09818745 87.68090057]
[-3.67672229 88.89036560]
[-11.96461678 76.51457977]
[-25.57098007 70.20055389]
[-41.34589005 71.41001892]
[-49.63378525 59.03423309]
[-63.24014664 52.72021103]
[-79.01506042 53.92967606]
[-87.30294800 41.55389023]
[-100.90931702 35.23986816]
[-114.51567841 28.92584610]
[-128.12203979 22.61182404]
[-141.72840881 16.29780197]
[-155.33476257 9.98378086]
[-151.72694397 24.54343796]
[-159.29402161 37.49485779]
[-173.74917603 41.50092316]
[-186.90339661 34.29215622]
[-191.30468750 19.95239639]
[-184.45965576 6.60527658]
[-170.24623108 1.81207526]
[-182.88961792 -6.25916004]
[-195.53300476 -14.33039570]
[-208.17639160 -22.40163040]
[-220.81976318 -30.47286606]
[-227.62707520 -25.14213562]
[-235.49636841 -21.59866905]
[-243.96876526 -20.04079247]
[-252.55218506 -20.55128479]
[-260.74990845 -23.09301376]
[-268.08938599 -27.51152611]
[-274.14941406 -33.54441071]
[-278.58435059 -40.83687592]
[-281.14379883 -48.96260834]
[-281.68673706 -57.44868469]
[-280.18930054 -65.80311584]
[-276.74563599 -73.54334259]
[-287.75765991 -83.72842407]
[-298.76965332 -93.91350555]
[-309.78164673 -104.09857941]
[-320.79364014 -114.28366089]
[-336.52719116 -120.59969330]
[-334.81347656 -137.46681213]
[-318.13110352 -140.48933411]
[-310.60858154 -125.29566193]
[-299.59658813 -115.11058044]
[-288.58456421 -104.92550659]
[-277.57257080 -94.74042511]
[-266.56057739 -84.55534363]
[-245.54049683 -91.07438660]
[-224.63168335 -83.82129669]
[-212.02433777 -65.48236084]
[-212.74853516 -43.11624908]
[-200.10514832 -35.04501343]
[-187.46176147 -26.97377968]
[-174.81837463 -18.90254402]
[-162.17500305 -10.83130836]
[-149.02075195 -3.62258244]
[-135.41438293 2.69143891]
[-121.80802155 9.00546074]
[-108.20166016 15.31948185]
[-94.59529114 21.63350296]
[-80.98892975 27.94752502]
[-66.18724060 26.28644180]
[-56.92612457 39.11384964]
[-43.31976318 45.42786789]
[-28.51807022 43.76678467]
[-19.25695801 56.59419250]
[-5.65059519 62.90821457]
[9.15109634 61.24713135]
[18.41220856 74.07453918]
[32.01857376 80.38855743]
[45.62493515 86.70258331]
[59.23130035 93.01660156]
[72.83766174 99.33062744]
[78.41962433 79.20922852]
[97.97317505 67.30107880]
[122.36424255 72.35661316]
[135.00762939 64.28537750]
[147.65100098 56.21414566]
[160.29438782 48.14291000]
[172.93777466 40.07167435]
[183.03503418 26.45250511]
[198.91716003 32.38499069]
[197.61312866 49.28871536]
[181.00901794 52.71505737]
[168.36563110 60.78629303]
[155.72224426 68.85752869]
[143.07885742 76.92876434]
[130.43547058 85.00000000]
[130.43547058 92.50000000]
[145.43547058 92.50022888]
[145.43501282 107.50022888]
[130.43547058 107.50000000]
[130.43547058 115.00000000]
[143.07885742 123.07123566]
[155.72224426 131.14247131]
[171.51760864 132.04638672]
[178.08201599 145.41642761]
[190.72540283 153.48765564]
[202.39584351 143.86184692]
[216.47036743 138.31541443]
[231.57009888 137.39172363]
[246.21572876 141.18127441]
[258.97241211 149.31282043]
[268.59039307 160.98970032]
[274.12741089 175.06793213]
[275.04098511 190.16828918]
[271.24160767 204.81137085]
[263.10153198 217.56262207]
[251.41819763 227.17277527]
[237.33625793 232.70034790]
[222.23529053 233.60380554]
[207.59475708 229.79461670]
[194.84896851 221.64598083]
[185.24664307 209.95622253]
[179.72851562 195.87057495]
[178.83517456 180.76902771]
[182.65417480 166.13104248]
[170.01078796 158.05979919]
[155.11976624 157.73320007]
[147.65100098 143.78585815]
[135.00762939 135.71461487]
[122.36424255 127.64338684]
[104.57318878 131.02870178]
[89.73150635 125.15548706]
[90.06568909 140.15176392]
[90.39987183 155.14804077]
[90.73405457 170.14431763]
[99.70581818 183.87164307]
[92.06304169 198.38095093]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 138]
[3 137]
[4 136]
[5 135]
[6 84]
[7 83]
[8 82]
[9 81]
[10 80]
[12 78]
[13 77]
[15 75]
[16 74]
[18 72]
[19 71]
[20 70]
[21 69]
[22 68]
[23 67]
[30 66]
[31 65]
[32 64]
[33 63]
[34 62]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
[87 99]
[88 98]
[89 97]
[90 96]
[91 95]
[104 133]
[105 132]
[106 131]
[108 129]
[109 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
