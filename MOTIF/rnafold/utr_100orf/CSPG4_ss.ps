%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCCAGGAGCAGAGCCGCGCUCGCUCCACUCAGCUCCCAGCUCCCAGGACUCCGCUGGCUCCUCGCAAGUCCUGCCGCCCAGCCCGCCGGGAUGCAGUCCGGGCCGCGGCCCCCACUUCCAGCCCCCGGCCUGGCCUUGGCUUUGACCCUGACUAUGUUGGCCAGACUUGCAUCCGCGGCUUCCUUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[156.77648926 92.70989227]
[142.27717590 96.55306244]
[127.77787018 100.39622498]
[130.88650513 112.11966705]
[128.65435791 125.82971191]
[120.21081543 139.05690002]
[105.80574799 149.03237915]
[86.88386536 153.17985535]
[78.42451477 165.56692505]
[69.96515656 177.95397949]
[61.50580215 190.34104919]
[53.04644394 202.72810364]
[50.78598785 211.59349060]
[44.34846497 215.24574280]
[35.68963242 227.49420166]
[27.03080177 239.74266052]
[18.37197113 251.99111938]
[14.16596889 268.41503906]
[-2.78045726 268.92001343]
[-7.95692873 252.77566528]
[6.12351704 243.33227539]
[14.78234768 231.08383179]
[23.44117928 218.83537292]
[32.10000992 206.58691406]
[40.65938187 194.26875305]
[49.11874008 181.88169861]
[57.57809448 169.49462891]
[66.03745270 157.10757446]
[74.49680328 144.72050476]
[70.01992035 138.70323181]
[57.98523712 147.65681458]
[49.03186798 135.62197876]
[61.06615067 126.66870880]
[56.58926392 120.65143585]
[42.29368973 125.19419098]
[27.99811745 129.73693848]
[13.70254517 134.27969360]
[0.43838081 144.83897400]
[-13.38012028 135.01626587]
[-7.76663923 119.01860809]
[9.15979385 119.98411560]
[23.45536613 115.44136810]
[37.75093842 110.89861298]
[52.04651260 106.35586548]
[52.47137070 98.86791229]
[53.32109070 83.89199829]
[53.74594879 76.40403748]
[40.05597305 70.27341461]
[26.36599541 64.14279175]
[12.67601967 58.01216888]
[-1.01395750 51.88154602]
[-14.70393372 45.75092316]
[-28.39391136 39.62030029]
[-40.71083450 43.47992325]
[-51.99190903 38.08090973]
[-56.41790390 26.81355476]
[-70.00681305 20.46205330]
[-85.78499603 21.62802887]
[-94.03874207 9.22944546]
[-107.62765503 2.87794352]
[-124.53697205 1.64866853]
[-128.03671265 -14.94012928]
[-113.06502533 -22.89532661]
[-101.27615356 -10.71096420]
[-87.68724060 -4.35946274]
[-72.88102722 -5.97974110]
[-63.65530777 6.87314463]
[-50.06639862 13.22464657]
[-32.69673920 10.76516056]
[-22.26328850 25.93032455]
[-8.57331085 32.06094742]
[5.11666536 38.19157028]
[18.80664253 44.32219315]
[32.49662018 50.45281601]
[46.18659592 56.58343887]
[59.87657166 62.71406174]
[104.45531464 58.96408081]
[123.93470001 85.89691162]
[138.43402100 82.05374908]
[152.93331909 78.21057892]
[154.02418518 59.89225769]
[161.27107239 43.05800247]
[173.79563904 29.70869064]
[190.09329224 21.42520523]
[208.21389771 19.18122482]
[225.99510193 23.22879982]
[241.32044983 33.07014847]
[252.37120056 47.51881409]
[266.51217651 42.51552582]
[280.65313721 37.51224136]
[294.79412842 32.50895309]
[308.89410400 27.39133453]
[322.95220947 22.15971947]
[337.01031494 16.92810249]
[351.06842041 11.69648647]
[365.12652588 6.46487045]
[379.18463135 1.23325396]
[393.24270630 -3.99836230]
[407.25799561 -9.34363270]
[421.22955322 -14.80220699]
[435.20108032 -20.26078033]
[438.41137695 -59.95759964]
[448.03250122 -71.46559906]
[457.65362549 -82.97359467]
[467.27474976 -94.48159027]
[476.89587402 -105.98958588]
[486.51699829 -117.49758148]
[496.13812256 -129.00558472]
[498.87420654 -147.20867920]
[515.56610107 -152.60646057]
[524.99957275 -164.26873779]
[534.43310547 -175.93103027]
[528.31109619 -189.95884705]
[529.42095947 -205.22406006]
[537.50762939 -218.21884155]
[550.71282959 -225.95707703]
[566.00219727 -226.66059875]
[579.86224365 -220.16770935]
[589.10803223 -207.97045898]
[591.61505127 -192.87165833]
[586.80712891 -178.34092712]
[575.78906250 -167.71730042]
[561.09277344 -163.44201660]
[546.09539795 -166.49751282]
[536.66186523 -154.83523560]
[527.22833252 -143.17294312]
[528.18524170 -131.10534668]
[520.40911865 -121.31024170]
[507.64611816 -119.38445282]
[498.02499390 -107.87645721]
[488.40386963 -96.36846161]
[478.78274536 -84.86046600]
[469.16162109 -73.35247040]
[459.54049683 -61.84447479]
[449.91937256 -50.33647537]
[452.24853516 -43.20731354]
[466.50695801 -47.86542892]
[471.16482544 -33.60695267]
[456.90689087 -28.94899178]
[459.23608398 -21.81982994]
[473.79571533 -18.21195602]
[488.35534668 -14.60408211]
[502.91500854 -10.99620819]
[517.47467041 -7.38833332]
[523.94494629 -8.85508251]
[529.36566162 -7.08942795]
[532.44354248 -3.42070150]
[546.87872314 0.65674955]
[561.31390381 4.73420048]
[572.79998779 -5.56497240]
[588.03448486 -7.99676895]
[602.15612793 -1.78521192]
[610.65869141 11.08761406]
[610.82910156 26.51403618]
[602.61297607 39.57154083]
[588.63195801 46.09352493]
[573.34747314 43.99884415]
[561.63665771 33.95590973]
[557.23645020 19.16938019]
[542.80126953 15.09192848]
[528.36608887 11.01447773]
[513.86676025 7.17131090]
[499.30712891 3.56343651]
[484.74749756 -0.04443784]
[470.18783569 -3.65231228]
[455.62820435 -7.26018667]
[440.65966797 -6.28923941]
[426.68811035 -0.83066517]
[412.71658325 4.62790871]
[407.62313843 9.99798679]
[398.47433472 10.05973816]
[384.41622925 15.29135418]
[370.35812378 20.52297020]
[356.30001831 25.75458717]
[342.24194336 30.98620415]
[328.18383789 36.21781921]
[314.12573242 41.44943619]
[308.94601440 46.73633194]
[299.79739380 46.64992905]
[285.65643311 51.65321350]
[271.51544189 56.65650177]
[257.37448120 61.65978622]
[258.41302490 73.49266052]
[256.77224731 85.26645660]
[252.53146362 96.38175201]
[245.90255737 106.27169800]
[237.21925354 114.43093872]
[226.92041016 120.44146729]
[215.52775574 123.99398041]
[203.61955261 124.90384674]
[191.80119324 123.12065887]
[180.67442322 118.73103333]
[170.80671692 111.95439911]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 80]
[2 79]
[3 78]
[8 29]
[9 28]
[10 27]
[11 26]
[12 25]
[14 24]
[15 23]
[16 22]
[17 21]
[34 44]
[35 43]
[36 42]
[37 41]
[47 76]
[48 75]
[49 74]
[50 73]
[51 72]
[52 71]
[53 70]
[56 68]
[57 67]
[59 65]
[60 64]
[88 182]
[89 181]
[90 180]
[91 179]
[92 177]
[93 176]
[94 175]
[95 174]
[96 173]
[97 172]
[98 171]
[99 169]
[100 168]
[101 167]
[102 135]
[103 134]
[104 133]
[105 132]
[106 131]
[107 130]
[108 129]
[110 126]
[111 125]
[112 124]
[140 166]
[141 165]
[142 164]
[143 163]
[144 162]
[147 161]
[148 160]
[149 159]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
