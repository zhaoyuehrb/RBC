%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:08:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGGCGCUCUUCAUCUACCGCACUAUGGUGCCGGAGGAGGUGGAGGUGGAGAUUGAUGAGAUACCUGUCCUGUCUGAAGAGGGAGAAGAGGAAGAAGAGACUUAUUCUCAAAAAGUGGAGUCCG\
) } def
/len { sequence length } bind def

/coor [
[94.04314423 201.52308655]
[92.54962158 186.59762573]
[91.05610657 171.67216492]
[82.09002686 159.77853394]
[88.41482544 145.27655029]
[86.92131042 130.35108948]
[74.85234070 121.44377899]
[60.14975357 124.41597748]
[52.25630569 129.23252869]
[45.04378510 127.27417755]
[30.27167130 129.87890625]
[15.49955463 132.48362732]
[0.72743809 135.08834839]
[-14.04467869 137.69306946]
[-28.81679535 140.29779053]
[-43.58890915 142.90251160]
[-58.36102676 145.50723267]
[-73.07460022 159.17994690]
[-90.98239136 152.05928040]
[-105.60630798 155.39709473]
[-120.23023224 158.73490906]
[-134.81140137 162.25476074]
[-149.34756470 165.95613098]
[-163.88371277 169.65748596]
[-175.23913574 181.48908997]
[-191.09648132 177.30860901]
[-195.14309692 161.41656494]
[-183.21615601 150.16133118]
[-167.58508301 155.12133789]
[-153.04891968 151.41996765]
[-138.51275635 147.71861267]
[-132.74395752 142.96714783]
[-123.56804657 144.11099243]
[-108.94412231 140.77317810]
[-94.32020569 137.43536377]
[-89.60647583 128.21859741]
[-80.37598419 123.06209564]
[-69.61563873 123.91519165]
[-60.96575165 130.73512268]
[-46.19363403 128.13040161]
[-31.42151642 125.52567291]
[-16.64940071 122.92095184]
[-1.87728453 120.31623077]
[12.89483166 117.71150970]
[27.66694832 115.10678101]
[42.43906403 112.50205994]
[57.17756271 109.71338654]
[71.88014984 106.74119568]
[84.51302338 79.71723938]
[110.64175415 80.60567474]
[121.88847351 70.68038940]
[133.13519287 60.75510406]
[144.38191223 50.82981491]
[146.10185242 45.66716003]
[149.35128784 42.10155106]
[153.23385620 40.45213699]
[156.86010742 40.62172699]
[168.81709290 31.56466103]
[180.77407837 22.50759506]
[192.73106384 13.45052814]
[204.68804932 4.39346218]
[199.91711426 -10.75413799]
[200.60058594 -26.59383965]
[206.63816833 -41.22475433]
[217.28817749 -52.89730072]
[231.25848389 -60.22239304]
[246.86340332 -62.33676529]
[262.22698975 -59.00464630]
[275.50857544 -50.64391327]
[287.23605347 -59.99626160]
[298.96353149 -69.34860992]
[310.69100952 -78.70095825]
[316.95730591 -95.96192169]
[334.33831787 -98.01671600]
[345.82897949 -107.65853119]
[357.31964111 -117.30034637]
[356.10293579 -132.76965332]
[364.23989868 -145.98211670]
[378.60171509 -151.85728455]
[393.66598511 -148.13604736]
[403.64016724 -136.24928284]
[404.68899536 -120.76768494]
[396.40917969 -107.64426422]
[381.98446655 -101.92523956]
[366.96145630 -105.80967712]
[355.47079468 -96.16786957]
[343.98013306 -86.52605438]
[342.58682251 -74.44088745]
[332.99661255 -66.31867218]
[320.04336548 -66.97348022]
[308.31588745 -57.62113571]
[296.58840942 -48.26878738]
[284.86093140 -38.91644287]
[289.78646851 -25.58564949]
[290.33901978 -11.36320877]
[286.45086670 2.35095763]
[278.49200439 14.20281982]
[267.23504639 23.01792526]
[253.78021240 27.91777611]
[239.44779968 28.40736771]
[225.64862061 24.42515755]
[213.74511719 16.35045052]
[201.78813171 25.40751648]
[189.83114624 34.46458054]
[177.87416077 43.52164841]
[165.91717529 52.57871628]
[154.30718994 62.07653427]
[143.06048584 72.00182343]
[131.81376648 81.92710876]
[120.56703949 91.85239410]
[123.20812225 98.53198242]
[123.62371063 106.05329895]
[121.55535889 113.66028595]
[117.00451660 120.52225494]
[110.25204468 125.82356262]
[101.84677124 128.85757446]
[103.34028625 143.78303528]
[112.41319275 156.74423218]
[105.98156738 170.17864990]
[107.47508240 185.10411072]
[108.96860504 200.02957153]
[120.42548370 211.25987244]
[118.64525604 227.20384216]
[104.99356842 235.63064575]
[89.94282532 230.07595825]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 121]
[2 120]
[3 119]
[5 117]
[6 116]
[7 48]
[8 47]
[10 46]
[11 45]
[12 44]
[13 43]
[14 42]
[15 41]
[16 40]
[17 39]
[19 35]
[20 34]
[21 33]
[22 31]
[23 30]
[24 29]
[50 110]
[51 109]
[52 108]
[53 107]
[57 106]
[58 105]
[59 104]
[60 103]
[61 102]
[69 93]
[70 92]
[71 91]
[72 90]
[74 87]
[75 86]
[76 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
