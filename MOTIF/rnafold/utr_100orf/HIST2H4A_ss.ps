%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:46:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGCUGUCUAUCGGGCUCCAGCGGUCAUGUCCGGCAGAGGAAAGGGCGGAAAAGGCUUAGGCAAAGGGGGCGCUAAGCGCCACCGCAAGGUCUUGAGAGACAACAUUCAGGGCAUCACCAAGCCUG\
) } def
/len { sequence length } bind def

/coor [
[-54.68435669 174.02629089]
[-64.57558441 178.16999817]
[-75.24648285 178.72979736]
[-85.44316864 175.66598511]
[-93.97624969 169.36306763]
[-99.85958862 160.58183289]
[-114.61007690 163.30638123]
[-129.36056519 166.03092957]
[-144.11105347 168.75547791]
[-158.86152649 171.48004150]
[-173.61201477 174.20458984]
[-176.79400635 186.83822632]
[-184.51931763 197.27046204]
[-195.59501648 203.95054626]
[-208.33361816 205.90243530]
[-220.81005859 202.86737061]
[-231.15267944 195.33747864]
[-237.82394409 184.47636414]
[-252.68959045 186.47952271]
[-267.55523682 188.48268127]
[-274.97994995 201.98008728]
[-288.76754761 208.44195557]
[-303.54162598 205.58000183]
[-313.67617798 194.69750977]
[-328.54183960 196.70066833]
[-343.40747070 198.70382690]
[-352.78979492 211.42182922]
[-368.42932129 213.69787598]
[-381.04742432 204.18161011]
[-383.15798950 188.51889038]
[-373.50885010 176.00210571]
[-357.82470703 174.05725098]
[-345.41061401 183.83818054]
[-330.54498291 181.83502197]
[-315.67935181 179.83186340]
[-308.78677368 166.65496826]
[-295.29721069 159.98446655]
[-280.29098511 162.56634521]
[-269.55838013 173.61703491]
[-254.69274902 171.61387634]
[-239.82710266 169.61073303]
[-233.93521118 153.52406311]
[-220.67901611 142.53302002]
[-203.60513306 139.69369507]
[-187.34005737 145.86555481]
[-176.33656311 159.45410156]
[-161.58609009 156.72955322]
[-146.83560181 154.00500488]
[-132.08511353 151.28044128]
[-117.33463287 148.55589294]
[-102.58414459 145.83134460]
[-95.51224518 127.72083282]
[-78.90538025 117.34117889]
[-59.24519348 118.94282532]
[-44.32476425 132.06045532]
[-29.90920067 127.91419220]
[-15.49363613 123.76792908]
[-1.07807219 119.62166595]
[13.33749199 115.47540283]
[27.75305557 111.32913971]
[33.36962128 106.40593719]
[42.57030106 107.26202393]
[57.08255768 103.46801758]
[58.51361465 88.47550201]
[65.02041626 74.89297485]
[75.80686188 64.38222504]
[89.55326843 58.22919846]
[104.57780457 57.18671036]
[119.04225922 61.38230515]
[127.91804504 49.29013824]
[136.64591980 37.09078979]
[145.22462463 24.78607559]
[153.80331421 12.48135948]
[162.38200378 0.17664354]
[170.96069336 -12.12807274]
[175.05940247 -28.57912064]
[192.00216675 -29.19469833]
[197.28392029 -13.08446980]
[183.26541138 -3.54938006]
[174.68672180 8.75533581]
[166.10803223 21.06005287]
[157.52932739 33.36476898]
[148.95063782 45.66948318]
[147.69299316 53.03168488]
[140.01020813 58.16592026]
[131.13442993 70.25808716]
[135.29618835 75.34004974]
[138.63650513 80.99592590]
[141.07762146 87.09408569]
[142.56274414 93.49260712]
[143.05731201 100.04256439]
[142.54980469 106.59154510]
[156.74639893 111.43474579]
[170.94299316 116.27795410]
[185.13958740 121.12116241]
[199.33618164 125.96436310]
[213.53279114 130.80757141]
[227.72938538 135.65077209]
[241.92597961 140.49398804]
[254.53344727 131.44792175]
[270.05001831 131.57365417]
[282.50924683 140.82284546]
[287.12030029 155.63897705]
[282.11013794 170.32495117]
[269.40527344 179.23371887]
[253.89097595 178.93966675]
[241.53282166 169.55586243]
[237.08277893 154.69058228]
[222.88616943 149.84738159]
[208.68957520 145.00416565]
[194.49298096 140.16096497]
[180.29638672 135.31774902]
[166.09979248 130.47454834]
[151.90319824 125.63134766]
[137.70658875 120.78813934]
[125.21211243 134.90391541]
[107.88490295 142.32920837]
[89.04629517 141.64073181]
[72.30731964 132.97042847]
[60.87655640 117.98027802]
[46.36430359 121.77427673]
[31.89932060 125.74470520]
[17.48375702 129.89096069]
[3.06819177 134.03723145]
[-11.34737206 138.18350220]
[-25.76293755 142.32975769]
[-40.17850113 146.47602844]
[-41.70371246 157.20791626]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 51]
[7 50]
[8 49]
[9 48]
[10 47]
[11 46]
[18 41]
[19 40]
[20 39]
[24 35]
[25 34]
[26 33]
[55 127]
[56 126]
[57 125]
[58 124]
[59 123]
[60 122]
[62 121]
[63 120]
[69 86]
[70 85]
[71 83]
[72 82]
[73 81]
[74 80]
[75 79]
[92 115]
[93 114]
[94 113]
[95 112]
[96 111]
[97 110]
[98 109]
[99 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
