%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:31:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUUAGGAGAAUUGAGCCAGGCCCACCAGGCCCAUGGGUAACUGGACUGCAGCGGUGACUGAGUUUGUUCUGCUGGGGUUUUCCCUGAGCAGGGAGGUGGAGCUGCUGCUCCUGGUGCUCCUGCUGCCCACGU\
) } def
/len { sequence length } bind def

/coor [
[148.07342529 478.94656372]
[151.54229736 464.14672852]
[160.41484070 451.80386353]
[173.33804321 443.80017090]
[170.88739014 429.00170898]
[168.43672180 414.20324707]
[165.98606873 399.40478516]
[163.53541565 384.60635376]
[161.08474731 369.80789185]
[151.37205505 358.51571655]
[156.75076294 343.63687134]
[154.30010986 328.83840942]
[151.84944153 314.03997803]
[149.05253601 299.30303955]
[145.91093445 284.63571167]
[142.76933289 269.96838379]
[139.62773132 255.30105591]
[125.15364838 246.82051086]
[121.16907501 230.17881775]
[130.59609985 215.49603271]
[127.11152649 200.90638733]
[123.62694550 186.31674194]
[119.97158051 171.76895142]
[116.14594269 157.26499939]
[112.32029724 142.76106262]
[108.49465942 128.25711060]
[104.66901398 113.75316620]
[97.13714600 121.79103088]
[83.66071320 124.48056030]
[68.06911469 118.46736145]
[53.08559799 117.76427460]
[38.10208511 117.06119537]
[23.78749847 125.06272888]
[9.84111691 116.43542480]
[10.60978222 100.05429840]
[25.30275726 92.77085876]
[38.80516815 102.07768250]
[53.78868103 102.78076172]
[68.77219391 103.48384857]
[73.62297058 97.76371002]
[62.18284225 88.06198120]
[71.88474274 76.62200165]
[83.32451630 86.32343292]
[88.17529297 80.60329437]
[85.03369141 65.93596649]
[81.89208221 51.26864624]
[78.75048065 36.60132599]
[75.60887909 21.93400383]
[65.15287018 10.06040287]
[70.05296326 -4.00509930]
[66.91136169 -18.67242050]
[63.76975632 -33.33974075]
[60.62815094 -48.00706482]
[57.48654556 -62.67438507]
[54.34494400 -77.34170532]
[49.44505310 -85.16400146]
[51.30587006 -92.38954926]
[48.50896835 -107.12648773]
[45.71206665 -121.86342621]
[31.98133278 -129.34680176]
[26.32136154 -143.92413330]
[31.40461731 -158.71246338]
[44.83094406 -166.72918701]
[60.26084137 -164.18904114]
[70.40878296 -152.29142761]
[70.48322296 -136.65402222]
[60.44900513 -124.66032410]
[63.24590683 -109.92339325]
[66.04280853 -95.18645477]
[69.01226807 -80.48331451]
[72.15386963 -65.81598663]
[75.29547119 -51.14866638]
[78.43707275 -36.48134613]
[81.57868195 -21.81402397]
[84.72028351 -7.14670324]
[94.95158386 3.67779422]
[90.27619934 18.79240036]
[93.41780090 33.45972061]
[96.55941010 48.12704468]
[99.70101166 62.79436493]
[102.84261322 77.46168518]
[116.66692352 83.28306580]
[129.35440063 75.28132629]
[142.04188538 67.27958679]
[154.72937012 59.27784729]
[167.41685486 51.27610779]
[174.57240295 36.52042770]
[190.94622803 35.60951614]
[199.69435120 49.48044205]
[191.81742859 63.86398315]
[175.41859436 63.96358871]
[162.73110962 71.96533203]
[150.04362488 79.96707153]
[137.35614014 87.96880341]
[124.66866302 95.97054291]
[119.17296600 109.92752838]
[122.99860382 124.43147278]
[126.82424927 138.93542480]
[130.64988708 153.43936157]
[134.47552490 167.94331360]
[139.73667908 175.52734375]
[138.21658325 182.83216858]
[141.70117188 197.42181396]
[145.18574524 212.01145935]
[157.44319153 217.72796631]
[164.04751587 229.30661011]
[162.76632690 242.37855530]
[154.29505920 252.15945435]
[157.43666077 266.82678223]
[160.57826233 281.49411011]
[163.71986389 296.16140747]
[167.95619202 301.43350220]
[168.70759583 307.18591309]
[166.64790344 311.58929443]
[169.09855652 326.38775635]
[171.54922485 341.18621826]
[181.43719482 353.53686523]
[175.88320923 367.35723877]
[178.33386230 382.15567017]
[180.78453064 396.95413208]
[183.23518372 411.75259399]
[185.68583679 426.55105591]
[188.13650513 441.34948730]
[202.94992065 444.75994873]
[215.32771301 453.58370972]
[223.38233948 466.47521973]
[225.88555908 481.46862793]
[222.45562744 496.27755737]
[213.61558533 508.64373779]
[200.71348572 516.68139648]
[185.71679688 519.16491699]
[170.91239929 515.71545410]
[158.55787659 506.85919189]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 123]
[5 122]
[6 121]
[7 120]
[8 119]
[9 118]
[11 116]
[12 115]
[13 114]
[14 111]
[15 110]
[16 109]
[17 108]
[20 104]
[21 103]
[22 102]
[23 100]
[24 99]
[25 98]
[26 97]
[27 96]
[30 39]
[31 38]
[32 37]
[44 81]
[45 80]
[46 79]
[47 78]
[48 77]
[50 75]
[51 74]
[52 73]
[53 72]
[54 71]
[55 70]
[57 69]
[58 68]
[59 67]
[82 95]
[83 94]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
