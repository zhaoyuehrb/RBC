%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:48:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUGGGCACACAGUGGACUCUCGCACGGUGUCUUCUGCCGUCACACCCUGACCCAGGGCUGGCCGGGAGCCUUCGGGGCGACAGCUCCGAGGAUGGAC\
) } def
/len { sequence length } bind def

/coor [
[70.19789886 191.80957031]
[61.58405685 179.52943420]
[58.91596985 164.76863098]
[62.68582153 150.25009155]
[72.19818878 138.65202332]
[85.69534302 132.11466980]
[71.34548187 136.48289490]
[56.99561310 140.85110474]
[42.64574814 145.21932983]
[28.29588127 149.58755493]
[13.94601536 153.95576477]
[8.78904343 168.47167969]
[-3.77961516 177.06716919]
[-18.82165718 176.61888123]
[-30.57471848 167.50825500]
[-44.92458344 171.87648010]
[-59.27444839 176.24470520]
[-73.62431335 180.61291504]
[-84.42163086 192.95593262]
[-100.45500946 189.51167297]
[-105.23068237 173.82330322]
[-93.83584595 162.02967834]
[-77.99253845 166.26306152]
[-63.64266968 161.89483643]
[-49.29280472 157.52661133]
[-34.94293976 153.15838623]
[-30.25964928 139.04440308]
[-18.01869202 130.29095459]
[-2.79255271 130.42546082]
[9.57779503 139.60591125]
[23.92765999 135.23768616]
[38.27752686 130.86946106]
[52.62739182 126.50124359]
[66.97725677 122.13301849]
[81.32712555 117.76480103]
[78.51760101 92.97975922]
[96.54841614 80.88163757]
[99.78868103 66.23579407]
[95.21514893 51.09005737]
[105.51908112 40.33467865]
[108.75934601 25.68883514]
[111.99961853 11.04299450]
[115.01171875 -3.65146756]
[117.79493713 -18.39099693]
[120.57815552 -33.13052368]
[113.92790222 -44.31672287]
[116.66869354 -56.62577057]
[126.77017975 -63.47981644]
[130.01045227 -78.12565613]
[133.25071716 -92.77149963]
[136.49098206 -107.41734314]
[139.73124695 -122.06317902]
[137.24920654 -138.83445740]
[152.67794800 -145.86225891]
[163.70220947 -132.98196411]
[154.37709045 -118.82291412]
[151.13682556 -104.17707062]
[147.89656067 -89.53123474]
[144.65629578 -74.88539124]
[141.41601562 -60.23954773]
[147.64530945 -43.91479874]
[135.31768799 -30.34730911]
[132.53446960 -15.60777950]
[129.75125122 -0.86825114]
[131.63652039 6.41675234]
[126.64545441 14.28326225]
[123.40518951 28.92910385]
[120.16492462 43.57494354]
[124.97022247 57.67311478]
[114.43452454 69.47605896]
[111.19425201 84.12190247]
[122.60012054 99.89148712]
[115.05240631 120.92102814]
[128.34257507 127.87598419]
[141.63275146 134.83093262]
[154.92291260 141.78588867]
[168.21308899 148.74084473]
[181.50326538 155.69580078]
[194.79342651 162.65074158]
[208.08360291 169.60569763]
[221.37376404 176.56065369]
[237.72746277 175.34046936]
[246.73614502 189.04360962]
[239.13246155 203.57344055]
[222.73841858 203.98292542]
[214.41882324 189.85083008]
[201.12864685 182.89587402]
[187.83847046 175.94091797]
[174.54830933 168.98596191]
[161.25813293 162.03100586]
[147.96797180 155.07606506]
[134.67779541 148.12110901]
[121.38762665 141.16615295]
[108.09745789 134.21119690]
[120.14925385 143.14172363]
[127.34329224 156.30400085]
[128.35249329 171.27001953]
[122.99066925 185.27897644]
[112.24694061 195.74664307]
[98.10317993 200.74206543]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 35]
[7 34]
[8 33]
[9 32]
[10 31]
[11 30]
[15 26]
[16 25]
[17 24]
[18 23]
[37 71]
[38 70]
[40 68]
[41 67]
[42 66]
[43 64]
[44 63]
[45 62]
[48 60]
[49 59]
[50 58]
[51 57]
[52 56]
[73 94]
[74 93]
[75 92]
[76 91]
[77 90]
[78 89]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
