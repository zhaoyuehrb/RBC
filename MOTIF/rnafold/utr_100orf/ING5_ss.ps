%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:47:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCACCGCCCGCCCGCGCAGACCCCGAGCGCGGCCGCGGACGAAGAUGGCGACCGCCAUGUACUUGGAGCACUAUCUGGACAGUAUCGAGAACCUUCCCUGCGAACUUCAGAGGAACUUCCAGCUGAUGCGAGAGCUGGACCAGA\
) } def
/len { sequence length } bind def

/coor [
[84.46710968 190.33773804]
[84.29872894 174.53434753]
[95.41390228 163.29919434]
[95.09552002 148.30258179]
[85.64571381 145.04643250]
[77.30966187 140.02059937]
[70.40088654 133.53961182]
[65.15224457 125.96922302]
[51.75835800 132.72227478]
[42.91918945 145.84399414]
[28.07131767 144.66503906]
[14.67743111 151.41809082]
[1.28354287 158.17114258]
[-12.11034489 164.92419434]
[-25.35787964 171.96002197]
[-38.45309067 179.27545166]
[-51.54830170 186.59086609]
[-64.64351654 193.90629578]
[-77.73872375 201.22172546]
[-90.83393860 208.53713989]
[-91.68333435 223.94111633]
[-100.74441528 236.42712402]
[-115.12580872 242.01094055]
[-130.23846436 238.91078186]
[-141.26000977 228.11590576]
[-144.67349243 213.07092285]
[-139.38967896 198.57661438]
[-127.09461975 189.25807190]
[-111.71163177 188.08880615]
[-98.14936066 195.44194031]
[-85.05415344 188.12651062]
[-71.95893860 180.81108093]
[-58.86372757 173.49566650]
[-45.76851654 166.18023682]
[-32.67330170 158.86480713]
[-30.52069092 154.53092957]
[-25.58711052 151.53784180]
[-18.86340141 151.53031921]
[-5.46951342 144.77725220]
[7.92437458 138.02420044]
[21.31826210 131.27114868]
[29.19941139 118.63244629]
[45.00530243 119.32839203]
[58.39919281 112.57533264]
[55.38880539 100.78978729]
[55.74040604 88.31369019]
[59.59964371 76.11119843]
[66.83477020 65.17189789]
[55.78757095 55.02500916]
[44.74036789 44.87812042]
[33.69316864 34.73123550]
[22.64596558 24.58434677]
[6.53072023 21.54610634]
[1.36036575 5.98334694]
[12.45372009 -6.09429884]
[28.39889145 -2.26238513]
[32.79285431 13.53714466]
[43.84005356 23.68403244]
[54.88725662 33.83092117]
[65.93445587 43.97780609]
[76.98165894 54.12469482]
[91.22769928 49.42891693]
[94.07594299 34.70181656]
[89.09982300 19.68353462]
[99.11305237 8.65699291]
[101.96128845 -6.07010841]
[104.80953217 -20.79720879]
[107.65777588 -35.52431107]
[110.50601959 -50.25141144]
[105.52989960 -65.26969910]
[115.54312134 -76.29623413]
[118.39136505 -91.02333832]
[106.11675262 -100.09508514]
[99.00138855 -113.59820557]
[98.45802307 -128.85165405]
[104.59455872 -142.82682800]
[116.19257355 -152.74896240]
[130.94927979 -156.64801025]
[145.93470764 -153.74981689]
[158.17350769 -144.62979126]
[165.23564148 -131.09875488]
[165.71893311 -115.84329224]
[159.52740479 -101.89238739]
[147.89041138 -92.01599884]
[133.11846924 -88.17509460]
[130.27023315 -73.44799042]
[135.45007324 -59.48309326]
[125.23312378 -47.40317154]
[122.38488007 -32.67606735]
[119.53663635 -17.94896698]
[116.68839264 -3.22186589]
[113.84014893 11.50523567]
[119.01999664 25.47013664]
[108.80304718 37.55006027]
[105.95480347 52.27716064]
[129.01295471 64.59194946]
[141.22587585 86.24524689]
[156.06059265 84.02460480]
[170.89530945 81.80397034]
[185.73002625 79.58332825]
[200.54032898 77.20536804]
[215.32456970 74.67035675]
[230.10881042 72.13534546]
[237.83460999 58.53953171]
[252.51005554 53.13906479]
[267.20587158 58.48388290]
[274.98312378 72.05032349]
[272.16964722 87.43272400]
[260.09387207 97.36799622]
[244.45761108 97.16499329]
[232.64382935 86.91957855]
[217.85958862 89.45458984]
[203.07534790 91.98960876]
[196.97200012 96.24950409]
[187.95066833 94.41803741]
[173.11595154 96.63867950]
[158.28123474 98.85932159]
[143.44651794 101.07996368]
[143.57037354 111.86469269]
[140.96275330 122.74520874]
[135.59394836 133.01913452]
[145.26283264 144.48703003]
[154.93171692 155.95492554]
[164.60061646 167.42282104]
[174.26950073 178.89071655]
[183.93838501 190.35861206]
[193.60728455 201.82650757]
[209.07366943 200.57330322]
[222.30528259 208.67909241]
[228.21432495 223.02702332]
[224.52861023 238.10002136]
[212.66540527 248.10220337]
[197.18632507 249.18754578]
[184.04342651 240.93870544]
[178.29039001 226.52752686]
[182.13938904 211.49539185]
[172.47048950 200.02749634]
[162.80160522 188.55960083]
[153.13272095 177.09170532]
[143.46383667 165.62382507]
[133.79493713 154.15592957]
[124.12605286 142.68803406]
[110.09214020 147.98419189]
[110.41052246 162.98081970]
[121.99251556 173.73410034]
[122.49500275 189.53039551]
[111.61987305 200.99804688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 144]
[4 143]
[8 44]
[9 43]
[11 41]
[12 40]
[13 39]
[14 38]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
[62 95]
[63 94]
[65 92]
[66 91]
[67 90]
[68 89]
[69 88]
[71 86]
[72 85]
[97 118]
[98 117]
[99 116]
[100 115]
[101 113]
[102 112]
[103 111]
[121 142]
[122 141]
[123 140]
[124 139]
[125 138]
[126 137]
[127 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
