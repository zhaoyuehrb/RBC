%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:08:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAGAGCACGUCAGGCGGCGCCAUGCUCAGCGCCCAGGAGCGCGCCCAAAUCGCGCAGGUCUGGGACCUGAUUGCGGGCCACGAGGCGCAAUUCGGGGCGGAGCUGCUGCUCAGGCUCUUCA\
) } def
/len { sequence length } bind def

/coor [
[44.07992554 499.27719116]
[31.78001404 489.81716919]
[27.42193031 474.92468262]
[32.68144989 460.32614136]
[45.53617477 451.63500977]
[45.91312790 436.63977051]
[46.29007721 421.64450073]
[46.66703033 406.64923096]
[47.04398346 391.65396118]
[36.90429306 386.56915283]
[29.40066910 377.99359131]
[25.67311668 367.17089844]
[26.31026459 355.69021606]
[31.25678444 345.25299072]
[39.81581497 337.42077637]
[50.74687958 333.38159180]
[52.25230408 318.45733643]
[53.75773239 303.53305054]
[55.26315689 288.60879517]
[56.76858139 273.68453979]
[58.27400970 258.76025391]
[59.77943420 243.83599854]
[57.99552917 241.53643799]
[57.06849670 238.35287476]
[57.35498810 234.62861633]
[59.07288361 230.83489990]
[62.25925827 227.51599121]
[65.25490570 212.81817627]
[68.25055695 198.12034607]
[71.24620819 183.42251587]
[69.33956146 178.93229675]
[70.31400299 173.18957520]
[74.77934265 168.06991577]
[78.50969696 153.54116821]
[82.24004364 139.01242065]
[85.97039032 124.48368073]
[89.70073700 109.95493317]
[86.12606812 96.43778229]
[95.77051544 86.31472015]
[99.50086212 71.78597260]
[103.23120880 57.25722885]
[95.44762421 43.76450348]
[99.43769836 29.08342934]
[112.34891510 21.74612045]
[116.07926178 7.21737385]
[119.80960846 -7.31137371]
[123.53995514 -21.84012032]
[127.27030182 -36.36886978]
[113.69799805 -48.69237137]
[108.18390656 -66.08782196]
[112.14183807 -83.81595612]
[124.41696930 -97.09120178]
[141.62107849 -102.37349701]
[144.24642944 -117.14196014]
[146.87176514 -131.91043091]
[149.49711609 -146.67889404]
[152.12246704 -161.44735718]
[154.37583923 -176.27713013]
[156.25584412 -191.15884399]
[158.13584900 -206.04057312]
[160.01583862 -220.92228699]
[161.89584351 -235.80401611]
[163.77583313 -250.68572998]
[159.76234436 -267.15777588]
[174.47961426 -275.57434082]
[186.64138794 -263.76217651]
[178.65756226 -248.80574036]
[176.77755737 -233.92401123]
[174.89756775 -219.04229736]
[173.01756287 -204.16056824]
[171.13757324 -189.27885437]
[169.25756836 -174.39712524]
[171.49703979 -170.06327820]
[170.95793152 -164.26347351]
[166.89093018 -158.82200623]
[164.26557922 -144.05354309]
[161.64024353 -129.28507996]
[159.01489258 -114.51661682]
[156.38954163 -99.74814606]
[166.51730347 -93.38725281]
[173.89035034 -83.92649078]
[177.60606384 -72.48536682]
[177.19639587 -60.42807388]
[172.68667603 -49.20081711]
[164.59544373 -40.15835190]
[153.87493896 -34.40052414]
[141.79905701 -32.63851929]
[138.06871033 -18.10977364]
[134.33836365 -3.58102536]
[130.60800171 10.94772243]
[126.87766266 25.47646904]
[134.65707397 38.12622833]
[131.08093262 52.91358185]
[117.75995636 60.98757553]
[114.02960968 75.51631927]
[110.29926300 90.04506683]
[113.87393188 103.56221771]
[104.22948456 113.68527985]
[100.49913788 128.21401978]
[96.76879120 142.74276733]
[93.03844452 157.27151489]
[89.30809021 171.80026245]
[85.94403076 186.41816711]
[82.94837952 201.11599731]
[79.95273590 215.81382751]
[76.95708466 230.51164246]
[74.70369720 245.34143066]
[73.19827271 260.26568604]
[71.69284821 275.18994141]
[70.18742371 290.11422729]
[68.68199921 305.03848267]
[67.17656708 319.96273804]
[65.67114258 334.88702393]
[80.43894196 346.87179565]
[85.09426880 365.15963745]
[77.96682739 382.47311401]
[62.03924561 392.03091431]
[61.66229248 407.02618408]
[61.28534317 422.02145386]
[60.90839005 437.01672363]
[60.53144073 452.01196289]
[72.93325043 461.33798218]
[77.45263672 476.18234253]
[72.35179138 490.83706665]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 121]
[6 120]
[7 119]
[8 118]
[9 117]
[16 113]
[17 112]
[18 111]
[19 110]
[20 109]
[21 108]
[22 107]
[27 106]
[28 105]
[29 104]
[30 103]
[33 102]
[34 101]
[35 100]
[36 99]
[37 98]
[39 96]
[40 95]
[41 94]
[44 91]
[45 90]
[46 89]
[47 88]
[48 87]
[53 79]
[54 78]
[55 77]
[56 76]
[57 75]
[58 72]
[59 71]
[60 70]
[61 69]
[62 68]
[63 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
