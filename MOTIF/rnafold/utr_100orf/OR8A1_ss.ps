%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:26:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGGUUCUUGUCUCCCAUGCAUCCCUGCAGGCCUCCCACCCAGAGGAGAAUGGCUGCAGGAAAUCACUCUACAGUGACAGAGUUCAUUCUCAAGGGUU\
) } def
/len { sequence length } bind def

/coor [
[72.65148926 148.07803345]
[63.53549957 159.99015808]
[54.41950989 171.90228271]
[45.30351639 183.81440735]
[36.18752670 195.72653198]
[27.07153702 207.63865662]
[31.62680626 222.47203064]
[26.56142235 237.13905334]
[13.82312489 245.99995422]
[-1.68994737 245.64752197]
[-14.01270294 236.21728516]
[-18.40679169 221.33535767]
[-13.18259430 206.72415161]
[-0.34892422 198.00196838]
[15.15941238 198.52265930]
[24.27540207 186.61053467]
[33.39139175 174.69841003]
[42.50738525 162.78628540]
[51.62337494 150.87416077]
[60.73936462 138.96203613]
[50.92766953 125.52144623]
[45.55765533 109.77082825]
[45.11538315 93.13582611]
[49.64088440 77.12212372]
[58.72454071 63.17916107]
[71.54415894 52.56896591]
[65.64265442 38.77866745]
[59.74115372 24.98837280]
[53.83964920 11.19807720]
[47.93814468 -2.59221816]
[42.03664017 -16.38251305]
[36.13513565 -30.17280960]
[17.21519852 -36.40844727]
[8.84678841 -54.15784454]
[15.85854626 -72.16640472]
[8.69774818 -85.34680176]
[1.53695011 -98.52720642]
[-5.62384796 -111.70760345]
[-21.02565956 -113.59540558]
[-32.35338211 -124.20023346]
[-35.25127792 -139.44430542]
[-28.60503960 -153.46597290]
[-14.97028923 -160.87362671]
[0.41013816 -158.81884766]
[11.62215233 -148.09176636]
[14.35450649 -132.81715393]
[7.55655289 -118.86840057]
[14.71735096 -105.68800354]
[21.87814903 -92.50759888]
[29.03894806 -79.32720184]
[39.60601807 -79.14427948]
[49.17592239 -74.47010803]
[55.91936111 -66.12116241]
[58.51490784 -55.62339020]
[56.40751266 -44.93350983]
[49.92543411 -36.07431412]
[55.82693481 -22.28401756]
[61.72843933 -8.49372196]
[67.62994385 5.29657364]
[73.53144836 19.08686829]
[79.43295288 32.87716293]
[85.33445740 46.66746140]
[105.90093231 45.00348282]
[125.64624023 50.99277496]
[141.82264709 63.80187225]
[152.17903137 81.64826965]
[166.87350464 78.63616180]
[181.56796265 75.62406158]
[196.26242065 72.61195374]
[210.95687866 69.59984589]
[222.85734558 58.31661606]
[238.50003052 63.23986816]
[241.79309082 79.30497742]
[229.34890747 89.98554230]
[213.96899414 84.29431152]
[199.27453613 87.30641174]
[184.58006287 90.31851959]
[169.88560486 93.33062744]
[155.19114685 96.34273529]
[154.65585327 108.49563599]
[151.47695923 120.23762512]
[145.80819702 131.00074768]
[156.97616577 141.01457214]
[168.14411926 151.02839661]
[183.90939331 149.91838074]
[195.78706360 160.34414673]
[196.73033142 176.12025452]
[186.17956543 187.88703918]
[170.39436340 188.66346741]
[158.73979187 177.98889160]
[158.13031006 162.19635010]
[146.96234131 152.18254089]
[135.79438782 142.16871643]
[129.76208496 146.62248230]
[123.18283081 150.21946716]
[116.17753601 152.89352417]
[108.87494659 154.59555054]
[101.40924835 155.29423523]
[93.91765594 154.97674561]
[86.53784180 153.64894104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[4 17]
[5 16]
[6 15]
[26 62]
[27 61]
[28 60]
[29 59]
[30 58]
[31 57]
[32 56]
[35 50]
[36 49]
[37 48]
[38 47]
[66 79]
[67 78]
[68 77]
[69 76]
[70 75]
[82 93]
[83 92]
[84 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
