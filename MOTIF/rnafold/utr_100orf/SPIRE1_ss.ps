%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:20:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGCCGGCACACGGCGCGACUGCCGAGCGCAGCGCCCACCCGCGGGAUGGCUCAGGCGGCUGGCCCGGCGGGCGGCGGGGAGCCGCGGACUGAGGCAGUGGGCGGCGAGGGGCCGCGGGAGCCCGGGGCAGCCGGCGGCGCGGCCG\
) } def
/len { sequence length } bind def

/coor [
[107.54106140 137.41844177]
[104.69313812 122.69174957]
[97.32958984 124.11586761]
[91.15106964 137.78430176]
[84.97254944 151.45272827]
[78.79402924 165.12115479]
[72.61550903 178.78958130]
[76.91189575 194.24664307]
[67.38948822 207.15800476]
[51.35306549 207.61917114]
[41.10439682 195.27639771]
[44.50538635 179.59797668]
[58.94708252 172.61106873]
[65.12560272 158.94262695]
[71.30412292 145.27420044]
[77.48264313 131.60577393]
[83.66115570 117.93735504]
[78.35785675 112.63404846]
[63.86905289 116.51663971]
[67.75125885 102.02745056]
[62.44795609 96.72415161]
[48.77952957 102.90266418]
[35.11109924 109.08118439]
[21.44267273 115.25970459]
[14.45576286 129.70140076]
[-1.22265673 133.10238647]
[-13.56544304 122.85372162]
[-13.10426712 106.81729889]
[-0.19290328 97.29489136]
[15.26415443 101.59127808]
[28.93258286 95.41275787]
[42.60100937 89.23423767]
[56.26943588 83.05571747]
[63.58486176 69.96051025]
[61.67959213 55.08200455]
[59.77432632 40.20349503]
[57.86906052 25.32498932]
[48.13218689 16.79709435]
[46.88483047 4.31763363]
[54.25426483 -5.32957888]
[52.66522980 -20.24517441]
[51.07619476 -35.16076660]
[49.48715591 -50.07636261]
[47.89812088 -64.99195862]
[45.10930252 -68.52468872]
[43.76963806 -72.37828827]
[43.79717255 -76.04376984]
[44.94879150 -79.09438324]
[46.86252594 -81.23220825]
[46.54414368 -96.22882843]
[38.51567459 -109.86166382]
[45.98109055 -122.75029755]
[45.66270828 -137.74691772]
[45.34432983 -152.74354553]
[45.02594757 -167.74015808]
[44.70756912 -182.73678589]
[43.91193008 -197.71566772]
[42.63983917 -212.66162109]
[41.36775208 -227.60758972]
[40.09566116 -242.55355835]
[38.82357407 -257.49951172]
[37.55148315 -272.44546509]
[34.03261185 -278.17486572]
[33.99459076 -283.94525146]
[36.55639267 -288.05053711]
[35.91977692 -303.03701782]
[35.28315735 -318.02349854]
[26.96713257 -331.48287964]
[34.15730286 -344.52703857]
[33.52068329 -359.51354980]
[22.72550583 -371.38128662]
[25.41556549 -387.19720459]
[39.52727890 -394.82867432]
[54.23534775 -388.42144775]
[58.25699997 -372.89065552]
[48.50716782 -360.15014648]
[49.14378738 -345.16366577]
[57.41427612 -332.77624512]
[50.26964188 -318.66012573]
[50.90626144 -303.67364502]
[51.54287720 -288.68716431]
[52.49744797 -273.71755981]
[53.76953506 -258.77160645]
[55.04162598 -243.82563782]
[56.31371307 -228.87968445]
[57.58580399 -213.93371582]
[58.85789108 -198.98774719]
[61.37061691 -196.42160034]
[62.72985458 -192.48408508]
[62.29268265 -187.74763489]
[59.70418930 -183.05516052]
[60.02256775 -168.05854797]
[60.34095001 -153.06192017]
[60.65932846 -138.06529236]
[60.97771072 -123.06867981]
[68.98340607 -110.50849915]
[61.54076767 -96.54721069]
[61.85914612 -81.55059052]
[62.81371689 -66.58099365]
[64.40274811 -51.66539764]
[65.99179077 -36.74980545]
[67.58082581 -21.83420944]
[69.16986084 -6.91861486]
[80.26078796 6.64317322]
[72.74756622 23.41972160]
[74.65283203 38.29822922]
[76.55809784 53.17673492]
[78.46336365 68.05524445]
[99.92993164 61.62265015]
[121.25402069 68.22471619]
[135.22126770 85.52639771]
[137.16287231 107.59004211]
[147.99221802 117.96912384]
[158.82154846 128.34820557]
[169.65089417 138.72729492]
[180.48023987 149.10636902]
[191.30958557 159.48545837]
[202.13891602 169.86454773]
[215.52461243 168.03274536]
[227.33860779 174.17521667]
[233.34904480 185.83796692]
[231.55009460 198.63755798]
[242.15669250 209.24415588]
[252.76329041 219.85075378]
[261.10546875 223.74266052]
[263.47946167 230.79685974]
[273.85855103 241.62619019]
[289.80291748 243.40289307]
[298.23275757 257.05270386]
[292.68136597 272.10467529]
[277.40734863 277.01223755]
[264.12762451 268.01068115]
[263.02920532 252.00527954]
[252.65013123 241.17593384]
[242.15669250 230.45736694]
[231.55009460 219.85075378]
[220.94349670 209.24415588]
[204.17318726 209.98202515]
[191.79130554 198.15409851]
[191.75984192 180.69387817]
[180.93049622 170.31480408]
[170.10115051 159.93571472]
[159.27182007 149.55664062]
[148.44247437 139.17755127]
[137.61312866 128.79846191]
[126.78379059 118.41938782]
[119.42023468 119.84350586]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 17]
[4 16]
[5 15]
[6 14]
[7 13]
[21 33]
[22 32]
[23 31]
[24 30]
[34 108]
[35 107]
[36 106]
[37 105]
[40 103]
[41 102]
[42 101]
[43 100]
[44 99]
[49 98]
[50 97]
[52 95]
[53 94]
[54 93]
[55 92]
[56 91]
[57 87]
[58 86]
[59 85]
[60 84]
[61 83]
[62 82]
[65 81]
[66 80]
[67 79]
[69 77]
[70 76]
[112 146]
[113 145]
[114 144]
[115 143]
[116 142]
[117 141]
[118 140]
[122 137]
[123 136]
[124 135]
[126 134]
[127 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
