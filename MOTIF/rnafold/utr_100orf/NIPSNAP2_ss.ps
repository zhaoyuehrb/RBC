%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:59:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCGGGCGGUGGGAGCCGAGGCGCCGAGCAAGAUGGCGGCGCGAGUGCUGCGCGCCCGCGGAGCGGCCUGGGCCGGCGGCCUCCUGCAGCGGGCGGCCCCCUGCAGCCUCCUGCCCAGGCUCCGGACAUGGA\
) } def
/len { sequence length } bind def

/coor [
[109.35382080 196.98106384]
[115.48382568 182.89849854]
[127.84338379 173.78054810]
[126.08905792 158.88349915]
[124.33472443 143.98643494]
[122.58039856 129.08938599]
[115.32842255 127.17655945]
[93.57250214 121.43809509]
[84.69892120 133.53187561]
[75.82533264 145.62565613]
[66.95175171 157.71943665]
[65.69994354 174.07073975]
[50.79840469 180.91735840]
[37.57656097 171.21607971]
[39.63591003 154.94674683]
[54.85797119 148.84585571]
[63.73155594 136.75207520]
[72.60514069 124.65829468]
[81.47872162 112.56451416]
[77.93355560 105.95529175]
[70.84323120 92.73684692]
[67.29806519 86.12762451]
[52.31455231 86.83071136]
[37.33103943 87.53379822]
[22.34752655 88.23687744]
[7.36401367 88.93996429]
[-7.61949968 89.64304352]
[-16.91612816 98.67154694]
[-29.47119522 98.89868927]
[-38.49086380 90.75062561]
[-53.48674393 91.10226440]
[-69.17977905 97.51825714]
[-79.68929291 84.21463013]
[-69.81490326 70.43302155]
[-53.83838272 76.10639191]
[-38.84250259 75.75475311]
[-24.42601395 65.81838989]
[-8.32258320 74.65953064]
[6.66092968 73.95645142]
[21.64444351 73.25336456]
[36.62795639 72.55027771]
[51.61146927 71.84719849]
[66.59498596 71.14411163]
[70.29411316 64.61981201]
[57.24563599 57.22134399]
[64.64432526 44.17299652]
[77.69235992 51.57122040]
[81.39148712 45.04692078]
[74.30116272 31.82847786]
[67.21083832 18.61003494]
[53.86931229 10.10624790]
[54.67161560 -4.76673412]
[47.58129120 -17.98517799]
[40.49096298 -31.20362091]
[26.27462959 -39.37845612]
[26.51666069 -55.77581787]
[40.96807480 -63.52750397]
[54.76249313 -54.65924835]
[53.70940399 -38.29394913]
[60.79973221 -25.07550430]
[67.89006042 -11.85706139]
[80.72443390 -4.29874611]
[80.42927551 11.51970673]
[87.51960754 24.73815155]
[94.60993195 37.95659637]
[141.12609863 100.43354797]
[155.43478394 95.93228149]
[169.74346924 91.43100739]
[184.05216980 86.92974091]
[198.36085510 82.42847443]
[212.66954041 77.92720032]
[226.97822571 73.42593384]
[241.28691101 68.92465973]
[255.59561157 64.42339325]
[266.43792725 52.90146637]
[280.90048218 56.46291351]
[295.20916748 51.96164703]
[306.05148315 40.43971634]
[320.51400757 44.00116730]
[334.82272339 39.49989700]
[349.13140869 34.99862671]
[352.07730103 31.52128410]
[355.63714600 29.43178368]
[359.27886963 28.74988174]
[362.52212524 29.31374550]
[364.99502563 30.81435394]
[379.66232300 27.67275047]
[394.32965088 24.53114510]
[408.99697876 21.38954163]
[423.66430664 18.24793816]
[431.48660278 13.34804821]
[438.71212769 15.20886517]
[453.44906616 12.41196442]
[468.18600464 9.61506367]
[480.25018311 -1.49293292]
[495.81921387 3.65853953]
[498.87701416 19.77008820]
[486.27795410 30.26753235]
[470.98291016 24.35200119]
[456.24597168 27.14890289]
[441.50903320 29.94580269]
[426.80590820 32.91526031]
[412.13858032 36.05686188]
[397.47125244 39.19846725]
[382.80392456 42.34007263]
[368.13662720 45.48167419]
[353.63265991 49.30731583]
[339.32397461 53.80858612]
[325.01528931 58.30985641]
[315.19644165 69.50981903]
[299.71041870 66.27033234]
[285.40173340 70.77160645]
[275.58288574 81.97157288]
[260.09686279 78.73207855]
[245.78819275 83.23335266]
[231.47949219 87.73461914]
[217.17080688 92.23589325]
[202.86212158 96.73715973]
[188.55343628 101.23842621]
[174.24475098 105.73970032]
[159.93605042 110.24096680]
[145.62736511 114.74224091]
[137.47744751 127.33505249]
[139.23178101 142.23210144]
[140.98611450 157.12916565]
[142.74044800 172.02622986]
[156.88002014 178.02352905]
[166.11378479 190.29681396]
[167.95790100 205.54458618]
[161.91629028 219.66529846]
[149.61413574 228.86054993]
[134.36065674 230.65686035]
[120.25894165 224.57101440]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 126]
[4 125]
[5 124]
[6 123]
[8 19]
[9 18]
[10 17]
[11 16]
[22 43]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[30 36]
[31 35]
[48 65]
[49 64]
[50 63]
[52 61]
[53 60]
[54 59]
[66 122]
[67 121]
[68 120]
[69 119]
[70 118]
[71 117]
[72 116]
[73 115]
[74 114]
[76 112]
[77 111]
[79 109]
[80 108]
[81 107]
[86 106]
[87 105]
[88 104]
[89 103]
[90 102]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
