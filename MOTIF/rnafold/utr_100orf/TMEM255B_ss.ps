%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:32:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGGGAGAGCCGGGUGGGGCCUCGGGAUGCAGCCGCCGGUGCCCGGGCCCCUGGGCCUGCUGGACCCCGCAGAAGGGCUUUCGAGGAGGAAGAAGACGUCGCUCUGGUUUGUGGGGUCUCUGCUGC\
) } def
/len { sequence length } bind def

/coor [
[97.71350861 125.11853027]
[91.97325134 138.97671509]
[86.23300171 152.83491516]
[80.49275208 166.69311523]
[74.75250244 180.55130005]
[79.53878021 195.86375427]
[70.43223572 209.07171631]
[54.41862488 210.04318237]
[43.78221893 198.03291321]
[46.68235779 182.25416565]
[60.89430618 174.81105042]
[66.63455963 160.95285034]
[72.37480927 147.09466553]
[78.11505890 133.23646545]
[83.85531616 119.37828064]
[78.20854950 112.70043945]
[75.18152618 104.49576569]
[60.29433441 102.65960693]
[45.40713882 100.82344055]
[30.51994705 98.98728180]
[15.63275433 97.15112305]
[0.74556106 95.31496429]
[-8.26248646 97.38377380]
[-14.48277569 93.24670410]
[-29.32042313 91.04575348]
[-44.15806961 88.84479523]
[-58.99571991 86.64383698]
[-68.05182648 88.49095154]
[-74.16870880 84.20248413]
[-88.94787598 81.63805389]
[-103.72704315 79.07362366]
[-114.76542664 89.97930145]
[-130.11088562 92.28068542]
[-143.86279297 85.09285736]
[-150.73323059 71.17967987]
[-148.08041382 55.89104843]
[-136.92436218 45.10576248]
[-121.55484009 42.97098160]
[-107.88172913 50.30756760]
[-101.16261292 64.29445648]
[-86.38344574 66.85888672]
[-71.60428619 69.42331696]
[-56.79476166 71.80619049]
[-41.95711517 74.00714874]
[-27.11946678 76.20809937]
[-12.28181839 78.40905762]
[2.58172131 80.42777252]
[17.46891403 82.26393127]
[32.35610580 84.10009003]
[47.24330139 85.93624878]
[62.13049316 87.77240753]
[77.01768494 89.60857391]
[85.80791473 79.14926147]
[98.76239777 74.80799866]
[112.08001709 77.85859680]
[121.85311127 87.40594482]
[136.48864746 84.11943054]
[144.08772278 73.61238098]
[156.42265320 71.22006226]
[166.71714783 77.69703674]
[181.42892456 74.77068329]
[194.92135620 62.31135941]
[211.30656433 68.46850586]
[225.94210815 65.18198395]
[240.57763672 61.89546967]
[255.21316528 58.60894775]
[269.84869385 55.32242966]
[284.48422241 52.03591156]
[299.11975098 48.74939346]
[313.75527954 45.46287537]
[328.39083862 42.17635727]
[343.02636719 38.88983917]
[357.66189575 35.60332108]
[372.29742432 32.31679916]
[386.84790039 28.67209816]
[401.30453491 24.67140579]
[415.76116943 20.67071533]
[430.21780396 16.67002296]
[444.67443848 12.66933250]
[458.66934204 7.27090693]
[472.06771851 0.52673703]
[485.46606445 -6.21743298]
[498.86444092 -12.96160316]
[503.58334351 -28.04495239]
[517.62420654 -35.29959488]
[532.65679932 -30.42147636]
[539.76263428 -16.30470085]
[534.72583008 -1.32450104]
[520.53472900 5.63163805]
[505.60861206 0.43676165]
[492.21023560 7.18093157]
[478.81188965 13.92510128]
[465.41351318 20.66927147]
[479.69592285 25.25325203]
[488.70803833 37.24415207]
[489.13989258 52.23793411]
[480.83288574 64.72766113]
[466.83798218 70.12609863]
[452.29528809 66.45049286]
[442.54605103 55.05082703]
[441.17098999 40.11398697]
[448.67514038 27.12597275]
[434.21850586 31.12666512]
[419.76187134 35.12735748]
[405.30523682 39.12804794]
[390.84857178 43.12873840]
[387.71514893 46.85986710]
[382.16421509 48.59764481]
[375.58395386 46.95233154]
[360.94839478 50.23884964]
[346.31286621 53.52537155]
[331.67733765 56.81188965]
[317.04180908 60.09840775]
[302.40628052 63.38492584]
[287.77075195 66.67144775]
[273.13522339 69.95796204]
[258.49969482 73.24448395]
[243.86415100 76.53099823]
[229.22862244 79.81752014]
[214.59309387 83.10403442]
[207.80650330 93.19710541]
[195.56031799 96.00865173]
[184.35528564 89.48246765]
[169.64349365 92.40882111]
[157.15910339 104.67770386]
[139.77516174 98.75495911]
[125.13962555 102.04148102]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 12]
[5 11]
[17 52]
[18 51]
[19 50]
[20 49]
[21 48]
[22 47]
[24 46]
[25 45]
[26 44]
[27 43]
[29 42]
[30 41]
[31 40]
[56 127]
[57 126]
[60 124]
[61 123]
[63 120]
[64 119]
[65 118]
[66 117]
[67 116]
[68 115]
[69 114]
[70 113]
[71 112]
[72 111]
[73 110]
[74 109]
[75 106]
[76 105]
[77 104]
[78 103]
[79 102]
[80 93]
[81 92]
[82 91]
[83 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
