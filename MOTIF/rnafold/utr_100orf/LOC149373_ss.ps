%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:59:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGAAUCGAAGCUUCACUGAGAGUUUCACACCAUCAUUGGGCACAAAGGAGGUUGUGAAAUGGACCACAGGGGAUUUCUCUCACCUUUUUAUCUGCCCCUCAGUGCUAAGAACAAAGAGGGAGCGCCUCAGCCUGGCUGUCAAGCCCUUCAUCCAUUCA\
) } def
/len { sequence length } bind def

/coor [
[63.40614700 213.35078430]
[67.42720032 198.36376953]
[79.51060486 188.62873840]
[78.63302612 173.65441895]
[77.75543976 158.68011475]
[70.66431427 156.23759460]
[59.34280777 166.07748413]
[56.48206711 151.35252380]
[49.39094162 148.91000366]
[39.47785187 160.16746521]
[29.56476212 171.42494202]
[19.65167236 182.68241882]
[9.73858356 193.93988037]
[-0.17450656 205.19735718]
[-10.08759594 216.45481873]
[-8.83600044 232.20947266]
[-19.15463638 244.18032837]
[-34.92163849 245.26528931]
[-46.78273010 234.82066345]
[-47.70092773 219.04307556]
[-37.13148499 207.29307556]
[-21.34506798 206.54173279]
[-11.43197727 195.28427124]
[-1.51888788 184.02679443]
[8.39420223 172.76931763]
[18.30729103 161.51185608]
[28.22038078 150.25437927]
[38.13347244 138.99690247]
[34.55370712 132.40635681]
[19.55877686 132.01646423]
[27.39418411 119.22527313]
[23.81442070 112.63472748]
[8.97476673 114.82210541]
[-5.86488819 117.00949097]
[-18.37645912 127.61103058]
[-33.72002792 121.82250977]
[-36.11144257 105.59866333]
[-23.09062386 95.62919617]
[-8.05227280 102.16983795]
[6.78738165 99.98245239]
[21.62703705 97.79506683]
[30.03648758 85.37407684]
[26.55615616 70.78341675]
[23.07582474 56.19275665]
[19.59549332 41.60210037]
[6.41511631 33.30056763]
[3.09341502 18.45398903]
[11.08888245 5.93967295]
[7.60855103 -8.65098476]
[4.12821960 -23.24164200]
[-0.93098599 -30.90911484]
[0.72527605 -38.15091324]
[-2.46970320 -52.80670166]
[-5.66468239 -67.46248627]
[-18.36945343 -80.75947571]
[-12.44648647 -97.25584412]
[-15.92681789 -111.84649658]
[-19.40714836 -126.43715668]
[-22.88747978 -141.02781677]
[-26.36781120 -155.61846924]
[-29.84814262 -170.20913696]
[-40.57624054 -181.83747864]
[-36.00309372 -196.01264954]
[-39.48342514 -210.60331726]
[-49.76112747 -213.77815247]
[-57.71498108 -220.89924622]
[-61.93791962 -230.61608887]
[-61.72096252 -241.12762451]
[-57.17134094 -250.51606750]
[-49.18059540 -257.09677124]
[-51.80133057 -271.86605835]
[-54.42206573 -286.63534546]
[-57.04280090 -301.40463257]
[-69.31808472 -311.73403931]
[-68.75171661 -327.76708984]
[-55.77816391 -337.20458984]
[-40.34962463 -332.80691528]
[-34.30155563 -317.94754028]
[-42.27351761 -304.02536011]
[-39.65278244 -289.25607300]
[-37.03204727 -274.48678589]
[-34.41131210 -259.71749878]
[-17.67369080 -249.83334351]
[-13.45876026 -230.54716492]
[-24.89276886 -214.08364868]
[-21.41243744 -199.49298096]
[-10.93327618 -188.90826416]
[-15.25748444 -173.68946838]
[-11.77715397 -159.09880066]
[-8.29682255 -144.50814819]
[-4.81649160 -129.91748047]
[-1.33616030 -115.32682800]
[2.14417076 -100.73617554]
[12.30288219 -94.11095428]
[15.30025005 -81.94507599]
[8.99110508 -70.65747070]
[12.18608475 -56.00167847]
[15.38106346 -41.34589386]
[18.71887779 -26.72197342]
[22.19920921 -12.13131618]
[25.67954063 2.45934200]
[38.46286774 10.01726151]
[42.20026779 24.76468468]
[34.18614960 38.12176895]
[37.66648102 52.71242523]
[41.14681244 67.30308533]
[44.62714386 81.89374542]
[53.60749054 68.04510498]
[65.76801300 57.71105194]
[79.88397217 51.52582550]
[94.63990784 49.72775650]
[108.75042725 52.16172028]
[121.07177734 58.31660461]
[130.69453430 67.39267731]
[137.00994873 78.39128876]
[139.74505615 90.21758270]
[138.96511841 101.78603363]
[135.04454041 112.11892700]
[147.93626404 119.78726959]
[160.82798767 127.45561981]
[173.71969604 135.12396240]
[186.61141968 142.79231262]
[195.63656616 144.50474548]
[199.67779541 150.73815918]
[212.41743469 158.65658569]
[225.95336914 151.53437805]
[241.13659668 152.13970947]
[253.89346313 160.20993042]
[260.85147095 173.49308777]
[260.23068237 188.37528992]
[272.97033691 196.29371643]
[285.70996094 204.21214294]
[298.44961548 212.13058472]
[315.09378052 215.35676575]
[316.60122681 232.24356079]
[300.79165649 238.36683655]
[290.53118896 224.87022400]
[277.79153442 216.95179749]
[265.05187988 209.03335571]
[252.31225586 201.11492920]
[239.24227905 208.25926208]
[224.25138855 207.89988708]
[211.36799622 200.03320312]
[204.10430908 186.68646240]
[204.49900818 171.39622498]
[191.75936890 163.47779846]
[178.94306946 155.68403625]
[166.05136108 148.01568604]
[153.15963745 140.34733582]
[140.26791382 132.67898560]
[127.37619781 125.01064301]
[116.46663666 144.73501587]
[92.72974396 157.80253601]
[93.60733032 172.77684021]
[94.48491669 187.75114441]
[107.62274933 196.00807190]
[113.36692810 210.42279053]
[109.50868988 225.45254517]
[97.53160095 235.31809998]
[82.04110718 236.22593689]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 155]
[4 154]
[5 153]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[32 41]
[33 40]
[34 39]
[42 107]
[43 106]
[44 105]
[45 104]
[48 101]
[49 100]
[50 99]
[52 98]
[53 97]
[54 96]
[56 93]
[57 92]
[58 91]
[59 90]
[60 89]
[61 88]
[63 86]
[64 85]
[70 82]
[71 81]
[72 80]
[73 79]
[118 151]
[119 150]
[120 149]
[121 148]
[122 147]
[124 146]
[125 145]
[130 140]
[131 139]
[132 138]
[133 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
