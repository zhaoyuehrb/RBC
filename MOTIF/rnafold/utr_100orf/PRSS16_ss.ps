%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:23:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUCCCGAACACCAUGGCCGUCUGGCUUGCCCAGUGGCUGGGCCCUCUGCUCUUGGUUUCCCUCUGGGGACUCUUGGCUCCAGCCUCCCUUCUUAGGCGCCUGGGUGAGCACA\
) } def
/len { sequence length } bind def

/coor [
[-7.94140053 260.69375610]
[-17.65219498 272.12619019]
[-27.36298943 283.55862427]
[-23.85414505 298.55844116]
[-29.78119087 312.58425903]
[-42.67809677 320.33883667]
[-57.49091339 319.02795410]
[-67.20170593 330.46038818]
[-76.91250610 341.89282227]
[-74.11160278 357.27752686]
[-81.89995575 370.83758545]
[-96.60013580 376.17037964]
[-111.27117157 370.75793457]
[-118.98583984 357.15579224]
[-116.10152435 341.78652954]
[-103.98009491 331.90698242]
[-88.34493256 332.18203735]
[-78.63414001 320.74960327]
[-68.92334747 309.31716919]
[-72.61341095 294.91156006]
[-67.04745483 280.92999268]
[-54.16529465 272.81192017]
[-38.79542160 273.84783936]
[-29.08462524 262.41540527]
[-19.37383080 250.98297119]
[-17.68665695 230.48770142]
[2.33671188 223.10885620]
[11.08763027 210.92601013]
[19.83854866 198.74317932]
[28.58946800 186.56034851]
[37.34038544 174.37751770]
[46.09130478 162.19468689]
[54.84222412 150.01185608]
[63.59314346 137.82902527]
[72.34406281 125.64618683]
[81.09497833 113.46335602]
[78.93600464 90.25476074]
[98.02240753 76.87532043]
[101.64247131 62.31870270]
[105.26254272 47.76208496]
[108.88261414 33.20547104]
[112.50267792 18.64885330]
[116.12274933 4.09223509]
[119.54537201 -10.51206684]
[122.76992798 -25.16137505]
[125.99448395 -39.81068420]
[118.20472717 -44.80895996]
[111.99816132 -51.64895630]
[107.79558563 -59.85200882]
[105.87803650 -68.84756470]
[106.36801147 -78.01288605]
[109.22168732 -86.71613312]
[114.23263550 -94.35995483]
[121.04674530 -100.42244720]
[129.18719482 -104.49282837]
[138.08786011 -106.29921722]
[147.13262939 -105.72682190]
[153.06001282 -119.50601959]
[158.98738098 -133.28521729]
[164.91476440 -147.06440735]
[170.84213257 -160.84359741]
[176.76951599 -174.62278748]
[182.69689941 -188.40199280]
[180.24041748 -204.61610413]
[193.22113037 -214.63772583]
[208.28561401 -208.15747070]
[209.93678284 -191.84165955]
[196.47608948 -182.47460938]
[190.54870605 -168.69541931]
[184.62133789 -154.91621399]
[178.69395447 -141.13702393]
[172.76657104 -127.35783386]
[166.83920288 -113.57863617]
[160.91181946 -99.79944611]
[173.68510437 -82.62061310]
[173.89410400 -61.08955002]
[161.31161499 -43.46274567]
[140.64379883 -36.58612823]
[137.41923523 -21.93681908]
[134.19468689 -7.28750992]
[135.85198975 0.01837957]
[130.67936707 7.71230364]
[127.05929565 22.26892090]
[123.43923187 36.82553864]
[119.81916046 51.38215637]
[116.19908905 65.93877411]
[112.57902527 80.49539185]
[118.62141418 86.14703369]
[122.29744720 93.55908203]
[123.13998413 101.78961182]
[136.91917419 107.71699524]
[150.69837952 113.64437103]
[166.91249084 111.18788910]
[176.93411255 124.16860962]
[170.45385742 139.23307800]
[154.13804626 140.88426208]
[144.77099609 127.42356110]
[130.99180603 121.49618530]
[117.21260834 115.56880951]
[112.19362640 119.74783325]
[106.20909119 122.36311340]
[99.73287201 123.20755005]
[93.27781677 122.21427155]
[84.52689362 134.39710999]
[75.77597809 146.57994080]
[67.02505493 158.76277161]
[58.27413940 170.94560242]
[49.52322006 183.12843323]
[40.77230072 195.31126404]
[32.02138138 207.49411011]
[23.27046394 219.67694092]
[14.51954460 231.85977173]
[17.33514404 241.10694885]
[15.52491283 250.46081543]
[9.63680077 257.77337646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[7 19]
[8 18]
[9 17]
[27 112]
[28 111]
[29 110]
[30 109]
[31 108]
[32 107]
[33 106]
[34 105]
[35 104]
[36 103]
[38 87]
[39 86]
[40 85]
[41 84]
[42 83]
[43 82]
[44 80]
[45 79]
[46 78]
[57 74]
[58 73]
[59 72]
[60 71]
[61 70]
[62 69]
[63 68]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
