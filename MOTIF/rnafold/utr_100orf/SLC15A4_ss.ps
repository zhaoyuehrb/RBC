%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGGUUCUGGGACAGGUGACCCGGCGGCGGGGCGAGGCAGCUGGCGGCGUCGCAUGGAGGGCUCUGGGGGCGGUGCGGGCGAGCGGGCGCCGCUGCUGGGCGCGCGGCGGGCGGCGGCGGCCGCGGCGGCGGCUGGGGCGUUCGCGGGCCGGC\
) } def
/len { sequence length } bind def

/coor [
[83.91868591 296.83764648]
[83.76337433 281.03411865]
[94.88783264 269.80816650]
[94.58185577 254.81129456]
[94.27587891 239.81440735]
[93.96990204 224.81753540]
[93.66392517 209.82064819]
[82.77480316 199.72299194]
[82.25086212 184.51838684]
[92.91605377 173.16534424]
[92.61007690 158.16845703]
[92.30409241 143.17158508]
[91.99811554 128.17469788]
[74.58402252 111.82911682]
[75.57994843 89.01060486]
[92.71464539 75.53807068]
[82.89173126 64.20182800]
[73.06882477 52.86558533]
[65.03317261 48.39382172]
[63.16403580 41.19645309]
[53.57440948 29.66219330]
[43.98478699 18.12793541]
[34.39516068 6.59367847]
[24.80553627 -4.94057941]
[15.21591282 -16.47483635]
[5.62628841 -28.00909424]
[-3.96333599 -39.54335403]
[-13.55296040 -51.07761002]
[-23.14258385 -62.61186981]
[-32.73220825 -74.14612579]
[-47.50437546 -79.81125641]
[-49.69142532 -94.54441833]
[-59.28104782 -106.07867432]
[-72.78250122 -105.76737213]
[-83.82609558 -113.19685364]
[-88.48719788 -125.45574951]
[-85.26654816 -137.96806335]
[-94.61889648 -149.69552612]
[-111.89431763 -155.98960876]
[-113.89585114 -173.39822388]
[-123.48547363 -184.93247986]
[-133.07510376 -196.46675110]
[-147.84725952 -202.13186646]
[-150.03431702 -216.86503601]
[-159.62393188 -228.39929199]
[-169.21356201 -239.93354797]
[-183.98573303 -245.59867859]
[-186.17277527 -260.33184814]
[-195.76240540 -271.86608887]
[-205.35202026 -283.40036011]
[-214.94165039 -294.93463135]
[-228.44309998 -294.62332153]
[-239.48669434 -302.05279541]
[-244.14779663 -314.31167603]
[-240.92715454 -326.82400513]
[-250.27949524 -338.55148315]
[-259.63183594 -350.27896118]
[-268.98419189 -362.00640869]
[-284.43908691 -367.49075317]
[-287.15048218 -383.66421509]
[-274.32913208 -393.88891602]
[-259.16452026 -387.64657593]
[-257.25671387 -371.35876465]
[-247.90437317 -359.63128662]
[-238.55203247 -347.90380859]
[-229.19967651 -336.17636108]
[-212.44830322 -335.02893066]
[-201.47142029 -321.88119507]
[-203.40739441 -304.52423096]
[-193.81776428 -292.98999023]
[-184.22814941 -281.45571899]
[-174.63851929 -269.92147827]
[-160.55226135 -265.08135986]
[-157.67930603 -249.52317810]
[-148.08967590 -237.98892212]
[-138.50006104 -226.45466614]
[-124.41380310 -221.61453247]
[-121.54084015 -206.05636597]
[-111.95121765 -194.52210999]
[-102.36159515 -182.98785400]
[-90.31257629 -181.55212402]
[-82.23154449 -171.96855164]
[-82.89142609 -159.04788208]
[-73.53907776 -147.32040405]
[-56.78770065 -146.17298889]
[-45.81082535 -133.02525330]
[-47.74679184 -115.66830444]
[-38.15716553 -104.13404083]
[-24.07091522 -99.29392242]
[-21.19795036 -83.73574829]
[-11.60832691 -72.20149231]
[-2.01870251 -60.66723633]
[7.57092190 -49.13297653]
[17.16054535 -37.59872055]
[26.75016975 -26.06446075]
[36.33979416 -14.53020382]
[45.92942047 -2.99594593]
[55.51904297 8.53831196]
[65.10866547 20.07257080]
[74.69829559 31.60682869]
[84.40506744 43.04267502]
[94.22797394 54.37891769]
[104.05088806 65.71516418]
[118.20913696 70.66934967]
[132.95703125 67.93080139]
[145.11267090 57.80404663]
[159.03862000 63.08768845]
[173.78651428 60.34914017]
[184.01762390 47.99179077]
[200.05468750 48.43015671]
[209.59544373 61.32796478]
[205.32104492 76.79111481]
[190.51045227 82.95761108]
[176.52507019 75.09703827]
[161.77717590 77.83557892]
[150.67640686 87.76645660]
[135.69557190 82.67869568]
[120.94768524 85.41723633]
[127.02494812 95.44353485]
[128.19578552 107.92727661]
[140.81459045 116.03688812]
[153.43339539 124.14650726]
[169.22593689 125.09841156]
[175.74969482 138.48832703]
[188.36849976 146.59793091]
[200.98730469 154.70755005]
[213.60610962 162.81715393]
[230.00350952 163.05656433]
[237.75750732 177.50674438]
[228.89146423 191.30258179]
[212.52598572 190.25210571]
[205.49649048 175.43595886]
[192.87768555 167.32635498]
[180.25888062 159.21673584]
[167.64009094 151.10713196]
[152.75012207 150.73527527]
[145.32377625 136.76530457]
[132.70497131 128.65570068]
[120.08617401 120.54608154]
[106.99499512 127.86872864]
[107.30097198 142.86560059]
[107.60694885 157.86248779]
[107.91293335 172.85935974]
[119.03231812 183.76794434]
[119.12898254 198.98126221]
[108.66079712 209.51467896]
[108.96678162 224.51155090]
[109.27275848 239.50843811]
[109.57873535 254.50531006]
[109.88471222 269.50219727]
[121.45780945 280.26504517]
[121.94722748 296.06176758]
[111.06262207 307.52041626]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[10 143]
[11 142]
[12 141]
[13 140]
[16 103]
[17 102]
[18 101]
[20 100]
[21 99]
[22 98]
[23 97]
[24 96]
[25 95]
[26 94]
[27 93]
[28 92]
[29 91]
[30 90]
[32 88]
[33 87]
[37 84]
[38 83]
[40 80]
[41 79]
[42 78]
[44 76]
[45 75]
[46 74]
[48 72]
[49 71]
[50 70]
[51 69]
[55 66]
[56 65]
[57 64]
[58 63]
[104 118]
[105 117]
[107 115]
[108 114]
[120 139]
[121 138]
[122 137]
[124 135]
[125 134]
[126 133]
[127 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
