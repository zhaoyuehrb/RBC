%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:30:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCGGCGCCAAAAUCAAACGCGUCCUGGCCUGUCCCGCCCCUCUCCCCAAGCGCGGGCCCGGCCAGCGGAAGCCCCUGCGCCCGCGCCAUGUCAAAGAAAAAAGGACUGAGUGCAGAAGAAAAGAGAACUCGCAUGAUGGAAAUAUUUUCUGAAACAAAAGAUGUAUUUCAAUUAAAAGACUUGGAGA\
) } def
/len { sequence length } bind def

/coor [
[39.11666107 217.50390625]
[37.06759262 230.31767273]
[30.09442520 242.05845642]
[18.75370598 250.82650757]
[4.33192635 255.00526428]
[-2.80728436 268.19735718]
[-9.94649506 281.38946533]
[-17.08570671 294.58157349]
[-24.22491646 307.77368164]
[-15.63843346 320.44375610]
[-13.93508339 335.65420532]
[-19.50628281 349.90972900]
[-31.07181358 359.93453979]
[-45.97399902 363.42504883]
[-60.78842545 359.57910156]
[-72.11084747 349.28048706]
[-77.33945465 334.89575195]
[-75.27275848 319.73043823]
[-66.38565826 307.26937866]
[-52.72034836 300.37603760]
[-37.41702271 300.63446045]
[-30.27781296 287.44238281]
[-23.13860130 274.25027466]
[-15.99939060 261.05816650]
[-8.86017990 247.86604309]
[-14.03033066 242.43286133]
[-24.37063217 231.56648254]
[-29.54078293 226.13330078]
[-43.07065201 232.60960388]
[-56.60051727 239.08592224]
[-60.31949997 254.27484131]
[-72.96215057 263.47796631]
[-88.55899048 262.34985352]
[-99.74566650 251.42318726]
[-101.24018097 235.85719299]
[-92.33686829 223.00164795]
[-77.23959351 218.92655945]
[-63.07683563 225.55606079]
[-49.54696655 219.07974243]
[-36.01709747 212.60342407]
[-23.73953438 189.68797302]
[-2.02001405 180.46427917]
[18.36289024 186.30119324]
[27.96241951 174.77517700]
[37.56194687 163.24916077]
[47.16147614 151.72314453]
[56.76100159 140.19712830]
[47.52085114 127.04364014]
[42.17128372 111.88524628]
[41.10890198 95.84573364]
[44.41246033 80.11420441]
[51.83705139 65.85692596]
[40.80119324 55.69770050]
[29.76533318 45.53847504]
[18.72947502 35.37925339]
[7.69361544 25.22002792]
[-3.34224296 15.06080532]
[-14.37810135 4.90158129]
[-25.41395950 -5.25764227]
[-40.80740738 -8.91172791]
[-44.93083572 -23.22419167]
[-55.96669388 -33.38341522]
[-67.00255585 -43.54263687]
[-80.31748962 -41.44095612]
[-92.23527527 -47.31121445]
[-98.49819183 -58.80616379]
[-97.01359558 -71.61610413]
[-107.87997437 -81.95640564]
[-123.93907928 -85.27861786]
[-128.83393860 -100.93021393]
[-117.52912140 -112.81017303]
[-101.65407562 -108.69740295]
[-97.53967285 -92.82278442]
[-86.67329407 -82.48248291]
[-69.90227509 -83.62236023]
[-57.24081421 -72.05879211]
[-56.84333038 -54.57849884]
[-45.80747223 -44.41927338]
[-34.77161026 -34.26005173]
[-20.16752243 -31.33262062]
[-15.25473690 -16.29350090]
[-4.21887827 -6.13427734]
[6.81698036 4.02494621]
[17.85283852 14.18416977]
[28.88869858 24.34339333]
[39.92455673 34.50261688]
[50.96041489 44.66184235]
[61.99627304 54.82106400]
[72.07913971 46.89832687]
[83.81298828 41.23675919]
[96.68841553 38.17945862]
[110.12511444 37.95430374]
[112.59403229 23.15888405]
[115.06295013 8.36346436]
[102.82774353 -0.83208799]
[96.27786255 -14.66529846]
[96.91843414 -29.95739555]
[104.60225677 -43.19437027]
[117.56364441 -51.33445740]
[132.82415771 -52.50712967]
[146.87705994 -46.44291306]
[156.49307251 -34.53532410]
[159.46252441 -19.52063179]
[155.10305786 -4.84910917]
[144.41644287 6.10783815]
[129.85836792 10.83238316]
[127.38945007 25.62780190]
[124.92053223 40.42322159]
[137.99279785 47.77957535]
[149.35852051 37.99078751]
[160.72424316 28.20200157]
[172.08996582 18.41321564]
[183.45568848 8.62442875]
[178.34654236 -5.66756439]
[178.74917603 -20.83998489]
[184.60914612 -34.84088516]
[195.13392639 -45.77676010]
[208.90014648 -52.16862488]
[224.04600525 -53.15202713]
[238.52317810 -48.59397125]
[250.37374878 -39.11090088]
[257.99499512 -25.98531914]
[260.35623169 -10.99235535]
[257.13812256 3.84031701]
[248.77587891 16.50670052]
[236.40042114 25.29376793]
[221.68544006 29.01314545]
[206.62101746 27.16181374]
[193.24447632 19.99015236]
[181.87875366 29.77893829]
[170.51303101 39.56772614]
[159.14730835 49.35651016]
[147.78158569 59.14529800]
[157.52720642 78.00089264]
[160.29768372 98.60691833]
[156.05796814 118.51821899]
[169.58782959 124.99452972]
[183.11770630 131.47084045]
[196.64756775 137.94715881]
[212.43582153 136.92646790]
[220.57508850 149.40049744]
[234.10496521 155.87681580]
[247.63482666 162.35313416]
[261.16470337 168.82945251]
[274.69454956 175.30575562]
[288.22442627 181.78207397]
[301.75430298 188.25839233]
[314.16775513 184.71263123]
[325.30926514 190.39929199]
[329.44522095 201.77879333]
[342.86614990 208.47792053]
[356.28710938 215.17706299]
[369.99154663 207.89918518]
[385.35177612 210.09986877]
[396.46145630 220.93290710]
[399.04870605 236.23277283]
[392.11862183 250.11636353]
[378.33602905 257.24514771]
[363.00057983 254.87794495]
[352.00906372 243.92503357]
[349.58798218 228.59800720]
[336.16702271 221.89886475]
[322.74609375 215.19973755]
[305.32064819 217.21293640]
[295.27798462 201.78826904]
[281.74810791 195.31195068]
[268.21826172 188.83563232]
[254.68838501 182.35931396]
[241.15850830 175.88299561]
[227.62864685 169.40669250]
[214.09877014 162.93037415]
[199.27827454 164.41429138]
[190.17124939 151.47703552]
[176.64138794 145.00071716]
[163.11151123 138.52439880]
[149.58164978 132.04808044]
[143.29338074 140.13853455]
[135.70092773 147.01982117]
[127.03297424 152.48463440]
[117.55066681 156.36837769]
[107.53964233 158.55401611]
[97.30149078 158.97573853]
[87.14463806 157.62081909]
[77.37503815 154.53009033]
[68.28701782 149.79664612]
[58.68749237 161.32266235]
[49.08796310 172.84867859]
[39.48843384 184.37469482]
[29.88890648 195.90071106]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 25]
[6 24]
[7 23]
[8 22]
[9 21]
[28 40]
[29 39]
[30 38]
[43 189]
[44 188]
[45 187]
[46 186]
[47 185]
[52 88]
[53 87]
[54 86]
[55 85]
[56 84]
[57 83]
[58 82]
[59 81]
[61 79]
[62 78]
[63 77]
[67 74]
[68 73]
[92 108]
[93 107]
[94 106]
[109 133]
[110 132]
[111 131]
[112 130]
[113 129]
[136 176]
[137 175]
[138 174]
[139 173]
[141 171]
[142 170]
[143 169]
[144 168]
[145 167]
[146 166]
[147 165]
[150 163]
[151 162]
[152 161]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
