%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:14:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUACUACAGGAGCAAAUUGCCAAUUCUGCUCCAGUGGGAGAAAACAAGGUUUCCUCAAUGGACUCUCUAGCAACAUCAAUCAACCAGUUUGCCCUGGAGUUGAGCAAAAAGCUAGCUGAAUCUGCUCAGGGUAAAAAUAUCUUCUUUUCUUCCUGGA\
) } def
/len { sequence length } bind def

/coor [
[17.65949440 329.87905884]
[9.38425350 342.38986206]
[-3.20669246 350.54266357]
[-18.00827026 352.97439575]
[-32.54581833 349.27847290]
[-44.38880920 340.07284546]
[-51.55722427 326.89660645]
[-52.85258102 311.95263672]
[-48.05830002 297.73941040]
[-59.96601868 306.86114502]
[-66.21607971 321.39550781]
[-81.02478027 322.99291992]
[-92.93250275 332.11465454]
[-104.84021759 341.23641968]
[-116.74794006 350.35815430]
[-128.65565491 359.47988892]
[-140.56338501 368.60162354]
[-152.38154602 377.83911133]
[-164.10900879 387.19146729]
[-175.83648682 396.54382324]
[-187.56394958 405.89617920]
[-196.17765808 420.49893188]
[-212.59423828 416.26428223]
[-213.06967163 399.31701660]
[-196.91630554 394.16870117]
[-185.18882751 384.81634521]
[-173.46136475 375.46398926]
[-161.73388672 366.11166382]
[-158.44845581 359.44885254]
[-149.68511963 356.69390869]
[-137.77740479 347.57217407]
[-125.86968231 338.45043945]
[-113.96195984 329.32867432]
[-102.05424500 320.20693970]
[-90.14652252 311.08520508]
[-84.74818420 297.20330811]
[-69.08776093 294.95343018]
[-57.18004227 285.83169556]
[-46.52182770 275.27694702]
[-37.28433990 263.45880127]
[-28.04685593 251.64064026]
[-18.80937195 239.82247925]
[-9.57188702 228.00431824]
[-0.33440259 216.18615723]
[8.90308189 204.36801147]
[18.14056587 192.54985046]
[27.37805176 180.73168945]
[29.11987305 165.93928528]
[43.71450806 159.83131409]
[52.95199203 148.01315308]
[62.18947983 136.19499207]
[71.42696381 124.37683868]
[80.66444397 112.55868530]
[74.78255463 92.46110535]
[88.10527039 72.91220093]
[77.34458160 62.46195602]
[66.58390045 52.01170731]
[50.58607864 50.80782318]
[41.67227554 37.46902084]
[46.68039703 22.22768593]
[61.76863861 16.77566719]
[75.36259460 25.29528809]
[77.03414154 41.25102234]
[87.79483032 51.70127106]
[98.55551147 62.15151596]
[94.12223816 47.82161331]
[89.68896484 33.49171448]
[79.71840668 22.28511047]
[72.74967194 9.00216007]
[69.19538116 -5.57065821]
[69.26598358 -20.57049179]
[72.95729065 -35.10920715]
[80.05075073 -48.32596970]
[90.12635803 -59.43822479]
[102.58753204 -67.78800964]
[116.69647217 -72.88095093]
[131.61776733 -74.41548157]
[146.46795654 -72.30075836]
[160.36773682 -66.66197968]
[172.49414062 -57.83301926]
[182.12913513 -46.33663940]
[188.70227051 -32.85353851]
[191.82432556 -18.18204308]
[191.31044006 -3.19084787]
[187.19107056 11.23242378]
[179.71009827 24.23377419]
[169.31048584 35.04339981]
[156.60798645 43.02126312]
[142.35409546 47.69511795]
[131.31671143 57.85269547]
[120.27935028 68.01027679]
[134.83535767 64.38775635]
[149.39135742 60.76524353]
[163.94737244 57.14272690]
[178.50337219 53.52021027]
[193.05938721 49.89769363]
[207.61540222 46.27517700]
[222.17140198 42.65265656]
[236.72741699 39.03013992]
[251.28341675 35.40762329]
[265.76596069 31.50178337]
[280.16955566 27.31410599]
[294.53161621 22.98610115]
[308.85073853 18.51818275]
[319.71987915 7.02154779]
[334.17410278 10.61668396]
[348.49322510 6.14876461]
[362.81237793 1.68084514]
[366.80947876 -13.21971512]
[378.24325562 -23.57694244]
[393.46524048 -26.08588219]
[407.61813354 -19.94594193]
[416.18582153 -7.11635399]
[416.43435669 8.30900669]
[408.28445435 21.40796471]
[394.33673096 28.00068855]
[379.04180908 25.98346519]
[367.28027344 15.99998283]
[352.96115112 20.46790123]
[338.64199829 24.93582153]
[328.79708862 36.11288071]
[313.31866455 32.83731842]
[298.99954224 37.30524063]
[293.52331543 42.32498932]
[284.35723877 41.71769333]
[269.95364380 45.90537262]
[266.88992310 49.62886047]
[261.43502808 51.43699646]
[254.90592957 49.96363068]
[240.34992981 53.58615112]
[225.79391479 57.20866776]
[211.23791504 60.83118439]
[196.68190002 64.45369720]
[182.12590027 68.07621765]
[167.56988525 71.69873047]
[153.01388550 75.32125092]
[138.45787048 78.94377136]
[123.90186310 82.56628418]
[127.95214844 100.08653259]
[121.16827393 115.64156342]
[107.32305908 123.57707214]
[92.48260498 121.79616547]
[83.24512482 133.61431885]
[74.00763702 145.43247986]
[64.77014923 157.25064087]
[55.53266907 169.06880188]
[53.13011932 184.70652771]
[39.19620895 189.96917725]
[29.95872498 201.78732300]
[20.72124100 213.60548401]
[11.48375607 225.42364502]
[2.24627161 237.24180603]
[-6.99121332 249.05996704]
[-16.22869682 260.87811279]
[-25.46618271 272.69628906]
[-34.70366669 284.51443481]
[-20.44437408 279.85906982]
[-5.51375961 281.30014038]
[7.59193993 288.59677124]
[16.68159103 300.52899170]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 38]
[10 37]
[12 35]
[13 34]
[14 33]
[15 32]
[16 31]
[17 30]
[18 28]
[19 27]
[20 26]
[21 25]
[39 156]
[40 155]
[41 154]
[42 153]
[43 152]
[44 151]
[45 150]
[46 149]
[47 148]
[49 146]
[50 145]
[51 144]
[52 143]
[53 142]
[55 65]
[56 64]
[57 63]
[91 138]
[92 137]
[93 136]
[94 135]
[95 134]
[96 133]
[97 132]
[98 131]
[99 130]
[100 129]
[101 126]
[102 125]
[103 123]
[104 122]
[106 120]
[107 119]
[108 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
