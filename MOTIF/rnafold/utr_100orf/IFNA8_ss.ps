%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:30:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAGCUCAGCAGCAUCCACAACAUCUACAAUGGCCUUGACUUUUUAUUUACUGGUGGCCCUAGUGGUGCUCAGCUACAAGUCAUUCAGCUCUCUGGGCUGUGAUCUGCCUCAGACUCACAGCCUGGGUA\
) } def
/len { sequence length } bind def

/coor [
[171.80978394 182.22444153]
[157.98480225 166.78285217]
[150.78160095 147.31980896]
[151.22396851 126.54421997]
[137.12174988 121.43270111]
[123.01953888 116.32118225]
[108.91732788 111.20966339]
[95.11885834 113.46662140]
[85.97115326 102.89254761]
[71.86894226 97.78102875]
[57.76672745 92.66950989]
[43.66451645 87.55799103]
[28.05369568 90.12953949]
[18.72480583 78.51828766]
[4.62259483 73.40676880]
[-9.47961712 68.29525757]
[-23.86276436 64.03789520]
[-38.47516251 60.65000153]
[-53.08755875 57.26210785]
[-67.69995880 53.87421417]
[-74.30334473 67.40939331]
[-83.74872589 79.13002777]
[-95.55987549 88.45030975]
[-109.14244843 94.90532684]
[-123.81385803 98.17424774]
[-138.83760071 98.09627533]
[-153.46023560 94.67852020]
[-166.94909668 88.09554291]
[-178.62910461 78.68036652]
[-187.91650391 66.90769958]
[-194.34803772 53.36996460]
[-197.60403442 38.74748993]
[-197.52436829 23.77433014]
[-212.13676453 20.38643456]
[-225.41305542 28.96055031]
[-240.84584045 25.55397224]
[-249.27911377 12.18776512]
[-245.70956421 -3.20813847]
[-232.25494385 -11.49962234]
[-216.89762878 -7.76749516]
[-208.74887085 5.77403736]
[-194.13645935 9.16193199]
[-187.61912537 -4.31865215]
[-178.26074219 -16.01647186]
[-166.52815247 -25.34284401]
[-153.00778198 -31.82750702]
[-138.37629700 -35.14234161]
[-123.36682129 -35.11796570]
[-108.73210144 -31.75238037]
[-95.20684052 -25.21124840]
[-83.47075653 -15.81972885]
[-74.11446381 -4.04631710]
[-67.60971069 9.52051926]
[-64.28562164 24.20176125]
[-64.31206512 39.26181412]
[-49.69966507 42.64971161]
[-35.08726883 46.03760529]
[-20.47486877 49.42549896]
[-25.54049492 35.30673981]
[-17.87040329 22.41605568]
[-3.04524016 20.13252258]
[8.14842510 30.11760521]
[7.56624651 45.10630417]
[-4.36809921 54.19304276]
[9.73411274 59.30456161]
[23.83632469 64.41607666]
[38.43846130 61.47891998]
[48.77603531 73.45578003]
[62.87824631 78.56729889]
[76.98046112 83.67881775]
[91.08267212 88.79033661]
[104.88114166 86.53337860]
[114.02884674 97.10745239]
[128.13105774 102.21897125]
[142.23327637 107.33049011]
[156.33547974 112.44200897]
[161.88363647 103.92301941]
[168.88520813 96.55944061]
[177.10508728 90.59562683]
[186.26780701 86.22901154]
[196.06672668 83.60352325]
[206.17433167 82.80485535]
[216.25312805 83.85768127]
[225.96701050 86.72490692]
[234.99234009 91.30893707]
[243.02882385 97.45501709]
[249.80949402 104.95647430]
[255.10951233 113.56163025]
[258.75369263 122.98227692]
[260.62231445 132.90330505]
[260.65490723 142.99327087]
[258.85241699 152.91543579]
[255.27691650 162.33903503]
[267.76144409 170.65388489]
[280.24597168 178.96873474]
[292.73046875 187.28358459]
[305.21499634 195.59843445]
[317.69952393 203.91328430]
[330.18405151 212.22813416]
[342.66854858 220.54298401]
[355.15307617 228.85784912]
[367.63760376 237.17269897]
[380.12213135 245.48754883]
[392.60665894 253.80239868]
[405.18997192 261.96694946]
[417.87030029 269.98004150]
[430.55059814 277.99313354]
[443.23092651 286.00622559]
[459.85058594 289.35626221]
[461.23223877 306.25384521]
[445.37750244 312.25918579]
[435.21783447 298.68652344]
[422.53750610 290.67343140]
[409.85720825 282.66033936]
[397.17687988 274.64727783]
[389.76837158 273.72433472]
[384.29180908 266.28692627]
[371.80728149 257.97207642]
[359.32275391 249.65721130]
[346.83822632 241.34236145]
[334.35369873 233.02751160]
[321.86920166 224.71266174]
[309.38467407 216.39781189]
[296.90014648 208.08296204]
[284.41561890 199.76811218]
[271.93112183 191.45326233]
[259.44659424 183.13841248]
[246.96206665 174.82356262]
[230.70498657 187.50427246]
[210.90266418 193.34202576]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 76]
[5 75]
[6 74]
[7 73]
[9 71]
[10 70]
[11 69]
[12 68]
[14 66]
[15 65]
[16 64]
[17 58]
[18 57]
[19 56]
[20 55]
[33 42]
[34 41]
[93 128]
[94 127]
[95 126]
[96 125]
[97 124]
[98 123]
[99 122]
[100 121]
[101 120]
[102 119]
[103 118]
[104 117]
[105 115]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
