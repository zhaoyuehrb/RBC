%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:17:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAGGAACUAGGAGGUUCUCACUGCCCGAGCAGAGGCCCUACACCCACCGAGGCAUGGGGCUCCCUGGGCUGUUCUGCUUGGCCGUGCUGGCUGCCAGCAGCUUCUCCAAGGCACGGGAGGAAGAAAUUACCCCUGUGGUCUCCAUUGCCUACA\
) } def
/len { sequence length } bind def

/coor [
[150.79992676 432.82797241]
[149.29209900 417.90396118]
[135.83287048 407.86312866]
[133.73106384 390.86364746]
[144.76509094 377.32443237]
[142.95703125 362.43380737]
[141.14898682 347.54318237]
[139.19108582 332.67150879]
[137.08355713 317.82031250]
[134.97601318 302.96908569]
[132.56985474 288.16333008]
[129.86602783 273.40902710]
[127.16220093 258.65475464]
[122.83826447 252.60765076]
[124.55561829 243.57630920]
[122.14944458 228.77055359]
[119.74327850 213.96479797]
[116.74288940 199.26794434]
[113.15316010 184.70381165]
[109.56342316 170.13969421]
[96.72373199 162.67791748]
[92.87576294 147.95895386]
[100.78940582 134.54209900]
[97.19966888 119.97798157]
[82.50252533 113.56276703]
[76.04946899 97.28798676]
[83.48886871 79.82671356]
[71.49722290 70.81558228]
[59.50558472 61.80444717]
[47.51394272 52.79331207]
[35.52230072 43.78217697]
[23.53065872 34.77104568]
[11.53901768 25.75991058]
[-0.45262411 16.74877548]
[-12.44426537 7.73764181]
[-24.61493301 -1.03018844]
[-36.95969009 -9.55115986]
[-49.30445099 -18.07213020]
[-61.64920807 -26.59310150]
[-73.99396515 -35.11407471]
[-90.31980896 -26.63597488]
[-108.60794067 -27.56001282]
[-123.85471344 -37.54791641]
[-131.93176270 -53.79323578]
[-130.70372009 -71.80940247]
[-143.54043579 -79.56947327]
[-156.37716675 -87.32953644]
[-169.21388245 -95.08960724]
[-183.46083069 -88.94110107]
[-198.59344482 -92.37384033]
[-208.79292297 -104.06787109]
[-210.13734436 -119.52659607]
[-202.10978699 -132.80581665]
[-187.79696655 -138.79940796]
[-172.70248413 -135.20271301]
[-162.63047791 -123.39871979]
[-161.45381165 -107.92632294]
[-148.61709595 -100.16625977]
[-135.78038025 -92.40618896]
[-122.94365692 -84.64612579]
[-113.44257355 -91.76210022]
[-102.05799103 -95.24418640]
[-90.13249207 -94.65710449]
[-79.08083344 -90.04689789]
[-70.22210693 -81.93830109]
[-64.62229156 -71.27507782]
[-62.96603012 -59.31024933]
[-65.47299194 -47.45883179]
[-53.12823486 -38.93785858]
[-40.78347778 -30.41688919]
[-28.43872070 -21.89591789]
[-16.09396172 -13.37494659]
[-11.26585484 -13.35355854]
[-6.41255236 -10.25995731]
[-3.43313169 -4.25399971]
[8.55850983 4.75713444]
[20.55015182 13.76826859]
[32.54179382 22.77940178]
[44.53343582 31.79053688]
[56.52507401 40.80167007]
[68.51671600 49.81280518]
[80.50836182 58.82393646]
[92.50000000 67.83507538]
[107.50000000 67.83507538]
[119.49163818 58.82393646]
[131.48327637 49.81280518]
[143.47492981 40.80167007]
[155.46656799 31.79053688]
[167.45820618 22.77940178]
[179.44984436 13.76826859]
[190.77709961 3.93498445]
[201.38369751 -6.67161703]
[211.99029541 -17.27821922]
[222.59690857 -27.88482094]
[233.20350647 -38.49142075]
[236.92295837 -54.46319962]
[252.69113159 -58.96839523]
[264.28707886 -47.37244415]
[259.78189087 -31.60427284]
[243.81010437 -27.88482094]
[233.20350647 -17.27821922]
[222.59690857 -6.67161703]
[211.99029541 3.93498445]
[201.38369751 14.54158592]
[216.37980652 14.88305092]
[227.75918579 24.65595818]
[230.36152649 39.42849350]
[223.00671387 52.50162125]
[209.02999878 57.94694519]
[194.76954651 53.29512405]
[186.69216919 40.65566254]
[188.46098328 25.75991058]
[176.46934509 34.77104568]
[164.47770691 43.78217697]
[152.48605347 52.79331207]
[140.49441528 61.80444717]
[128.50277710 70.81558228]
[116.51113129 79.82671356]
[123.10942841 100.73181915]
[111.76380157 116.38824463]
[115.35353088 130.95237732]
[128.59584045 139.15475464]
[132.02886963 153.97598267]
[124.12754822 166.54995728]
[127.71728516 181.11407471]
[131.30702209 195.67820740]
[134.52615356 198.78424072]
[136.36791992 202.39846802]
[136.84410095 206.01359558]
[136.13381958 209.18043518]
[134.54902649 211.55863953]
[136.95520020 226.36437988]
[139.36137390 241.17013550]
[141.91648865 255.95091248]
[144.62031555 270.70520020]
[147.32414246 285.45950317]
[151.36608887 290.80847168]
[151.96528625 296.53259277]
[149.82722473 300.86154175]
[151.93475342 315.71276855]
[154.04229736 330.56396484]
[158.36874390 338.67544556]
[156.03961182 345.73513794]
[157.84767151 360.62576294]
[159.65571594 375.51638794]
[171.16983032 382.57083130]
[176.42489624 394.79776001]
[173.70069885 407.62512207]
[164.21612549 416.39611816]
[165.72395325 431.32015991]
[178.12300110 441.12008667]
[179.87783813 456.82666016]
[169.94734192 469.12139893]
[154.22311401 470.71008301]
[142.03404236 460.65017700]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[5 145]
[6 144]
[7 143]
[8 141]
[9 140]
[10 139]
[11 136]
[12 135]
[13 134]
[15 133]
[16 132]
[17 131]
[18 126]
[19 125]
[20 124]
[23 121]
[24 120]
[27 83]
[28 82]
[29 81]
[30 80]
[31 79]
[32 78]
[33 77]
[34 76]
[35 75]
[36 72]
[37 71]
[38 70]
[39 69]
[40 68]
[45 60]
[46 59]
[47 58]
[48 57]
[84 118]
[85 117]
[86 116]
[87 115]
[88 114]
[89 113]
[90 112]
[91 104]
[92 103]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
