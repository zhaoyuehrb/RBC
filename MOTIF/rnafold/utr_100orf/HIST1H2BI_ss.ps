%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCUGAACCAGCUAAGUCAGCUCCCGCCCCGAAGAAGGGCUCCAAGAAGGCGGUGACCAAGGCACAGAAGAAGGAUGGCAAGAAGCGCAAGCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[205.98451233 232.59698486]
[203.68125916 208.18768311]
[190.84918213 200.41995239]
[178.01710510 192.65220642]
[165.18502808 184.88446045]
[152.35295105 177.11671448]
[134.03695679 183.28091431]
[116.69718933 174.09376526]
[111.35076904 154.90359497]
[97.85073090 148.36532593]
[84.35069275 141.82705688]
[69.35069275 141.82705688]
[55.85065079 148.36532593]
[42.35061264 154.90359497]
[28.85057068 161.44186401]
[22.24849892 176.06349182]
[6.66562843 179.87841797]
[-5.94419527 169.96015930]
[-5.90779495 153.91714478]
[6.74690676 144.05621338]
[22.31230545 147.94181824]
[35.81234360 141.40354919]
[49.31238556 134.86528015]
[62.81242371 128.32701111]
[63.39505386 120.84968567]
[51.02638245 112.36346436]
[64.56031036 105.89501190]
[65.14293671 98.41767883]
[52.81860352 89.86719513]
[40.49427032 81.31671143]
[28.16993523 72.76622772]
[13.13140869 77.05303192]
[-1.12309968 70.62318420]
[-7.86304665 56.51264954]
[-3.90603566 41.38399887]
[8.87955475 32.38051605]
[24.45675850 33.75336838]
[35.47049713 44.85433960]
[36.72042084 60.44189072]
[49.04475403 68.99237823]
[61.36909103 77.54286194]
[73.69342041 86.09334564]
[82.10619354 83.35543823]
[89.86616516 83.78598785]
[87.54269409 68.96703339]
[75.47741699 58.39307404]
[76.36579132 42.37463760]
[89.52634430 33.19969559]
[104.86341095 37.90647888]
[110.61171722 52.88434982]
[102.36165619 66.64356232]
[104.68512726 81.46251678]
[123.49079132 106.73888397]
[90.88895416 128.32701111]
[104.38899994 134.86528015]
[117.88903809 141.40354919]
[127.04091644 135.34172058]
[137.81745911 133.73519897]
[148.18275452 136.81753540]
[156.20808411 143.94303894]
[160.43083191 153.72053528]
[160.12069702 164.28463745]
[172.95277405 172.05238342]
[185.78485107 179.82012939]
[198.61692810 187.58787537]
[211.44900513 195.35562134]
[217.22004700 190.80410767]
[223.85934448 187.68762207]
[231.01747131 186.16241455]
[238.31939697 186.30114746]
[245.38424683 188.08953857]
[251.84509277 191.42741394]
[257.36804199 196.13433838]
[261.66946411 201.95930481]
[264.53060913 208.59416199]
[265.80859375 215.68991089]
[265.44375610 222.87503052]
[263.46215820 229.77491760]
[259.97393799 236.03149414]
[269.81286621 247.35383606]
[279.65179443 258.67617798]
[292.05453491 255.93415833]
[304.35913086 258.77990723]
[314.18447876 266.59835815]
[319.65704346 277.81854248]
[319.76788330 290.22885132]
[314.55810547 301.41290283]
[323.67410278 313.32504272]
[339.01626587 319.11727905]
[341.40371704 335.34170532]
[328.38049316 345.30801392]
[313.34371948 338.76370239]
[311.76199341 322.44100952]
[302.64599609 310.52890015]
[285.17901611 311.86373901]
[270.20486450 302.47738647]
[263.68029785 285.88644409]
[268.32946777 268.51510620]
[258.49053955 257.19277954]
[248.65161133 245.87042236]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 66]
[3 65]
[4 64]
[5 63]
[6 62]
[9 56]
[10 55]
[11 54]
[12 24]
[13 23]
[14 22]
[15 21]
[28 42]
[29 41]
[30 40]
[31 39]
[44 52]
[45 51]
[79 100]
[80 99]
[81 98]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
