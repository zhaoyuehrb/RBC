%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:21:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAGCCCAGACAAAUUUUGAGCUAUUUCAUAACCUACCAGACUUAUCAUGCUAACACUGAAUAAAACAGACCUAAUACCAGCUUCAUUUAUUCUGAAUGGAGUCCCAGGACUGGAAGACACACAACUCUGGAUUUCCUUCCCAUUCU\
) } def
/len { sequence length } bind def

/coor [
[-12.94905472 327.26403809]
[-21.81692886 339.36199951]
[-30.68480110 351.45996094]
[-39.29564285 363.74221802]
[-47.64562607 376.20324707]
[-55.99560547 388.66430664]
[-57.25002670 404.43569946]
[-70.76251984 410.70162964]
[-79.11250305 423.16268921]
[-87.46247864 435.62374878]
[-95.81246185 448.08477783]
[-94.12648010 464.03900146]
[-105.64951324 475.20141602]
[-121.54207611 473.00915527]
[-129.61276245 459.14395142]
[-123.67041779 444.24200439]
[-108.27351379 439.73480225]
[-99.92353058 427.27374268]
[-91.57355499 414.81271362]
[-83.22357178 402.35165405]
[-82.56639862 387.47155762]
[-68.45665741 380.31433105]
[-60.10667801 367.85327148]
[-51.75669479 355.39221191]
[-51.80459595 350.55484009]
[-48.76786804 345.65032959]
[-42.78276825 342.59210205]
[-33.91489410 330.49411011]
[-25.04702187 318.39614868]
[-37.11703110 303.24935913]
[-44.13908768 285.18377686]
[-45.46908951 265.83251953]
[-40.97792053 246.94775391]
[-31.06393051 230.24194336]
[-16.61762428 217.23265076]
[1.05833137 209.10462952]
[20.36656570 206.60194397]
[39.55935669 209.95988464]
[45.98608017 196.40638733]
[52.41280746 182.85289001]
[58.83953094 169.29939270]
[65.26625824 155.74591064]
[49.44772720 141.93455505]
[38.79663086 123.83666229]
[34.40172195 103.30220032]
[36.71223831 82.43019104]
[45.49200821 63.35416031]
[34.08078384 53.61845398]
[22.66956139 43.88274384]
[11.15633869 34.26787567]
[-0.45760560 24.77491570]
[-16.72123528 22.67102623]
[-22.78042030 7.43231487]
[-12.40198994 -5.26493740]
[3.73761654 -2.35888577]
[9.03535557 13.16097260]
[20.64929962 22.65393257]
[27.86755943 24.46411133]
[32.40526962 32.47152328]
[43.81649017 42.20722961]
[55.22771454 51.94293594]
[65.12039948 44.34524155]
[76.27104950 38.75479126]
[88.27750397 35.37321091]
[100.70674896 34.32246017]
[113.11050415 35.64043427]
[125.04141235 39.27960205]
[136.06918335 45.10871506]
[145.68405151 33.59548950]
[155.29891968 22.08226776]
[158.20594788 6.53042793]
[172.30276489 1.72117472]
[181.91763306 -9.79204845]
[191.53251648 -21.30527115]
[186.81332397 -30.97545052]
[185.62045288 -41.63070679]
[188.06683350 -52.03022766]
[193.84310913 -60.97168732]
[202.25651550 -67.43026733]
[212.31381226 -70.67605591]
[222.83863831 -70.35652924]
[232.60893250 -66.53460693]
[243.15948486 -77.19697571]
[253.71003723 -87.85933685]
[264.26058960 -98.52169800]
[274.81112671 -109.18405914]
[285.36166382 -119.84642029]
[295.91220093 -130.50878906]
[306.46276855 -141.17114258]
[317.01330566 -151.83351135]
[327.56384277 -162.49588013]
[334.40673828 -178.00752258]
[351.20648193 -175.72612000]
[353.66485596 -158.95135498]
[338.22622681 -151.94532776]
[327.67565918 -141.28295898]
[317.12512207 -130.62060547]
[306.57458496 -119.95824432]
[296.02401733 -109.29587555]
[285.47348022 -98.63351440]
[274.92294312 -87.97115326]
[264.37240601 -77.30879211]
[253.82185364 -66.64642334]
[243.27130127 -55.98406219]
[247.78247070 -37.02940750]
[239.97285461 -19.02351189]
[222.80386353 -9.22345734]
[203.04573059 -11.69040298]
[193.43086243 -0.17718023]
[183.81599426 11.33604336]
[181.59667969 26.06437874]
[166.81213379 31.69713593]
[157.19726562 43.21035767]
[147.58239746 54.72358322]
[155.27622986 64.52355957]
[160.98101807 75.60009766]
[164.49148560 87.55463409]
[165.68133545 99.95700073]
[164.50772095 112.36091614]
[161.01290894 124.32003784]
[155.32263184 135.40403748]
[147.64164734 145.21408081]
[138.24633789 153.39715576]
[127.47480011 159.65881348]
[115.71462250 163.77374268]
[103.38897705 165.59385681]
[90.94138336 165.05366516]
[78.81974792 162.17262268]
[72.39302826 175.72612000]
[65.96630096 189.27961731]
[59.53957367 202.83311462]
[53.11285019 216.38661194]
[61.99508667 223.09796143]
[69.59364319 231.22851562]
[75.68495941 240.53695679]
[80.09018707 250.74737549]
[82.68041992 261.55740356]
[83.38048553 272.64718628]
[82.17111969 283.68887329]
[79.08947754 294.35623169]
[74.22801971 304.33432007]
[67.73172760 313.32888794]
[59.79376221 321.07485962]
[50.64975357 327.34436035]
[40.57078171 331.95318604]
[29.85535812 334.76644897]
[18.82056427 335.70239258]
[7.79268646 334.73471069]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[4 24]
[5 23]
[6 22]
[8 20]
[9 19]
[10 18]
[11 17]
[38 132]
[39 131]
[40 130]
[41 129]
[42 128]
[47 61]
[48 60]
[49 59]
[50 57]
[51 56]
[68 114]
[69 113]
[70 112]
[72 110]
[73 109]
[74 108]
[82 104]
[83 103]
[84 102]
[85 101]
[86 100]
[87 99]
[88 98]
[89 97]
[90 96]
[91 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
