%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:32:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUGGAAGCUUCAUACUCCUAAGCUCCUCCCCCGGCGGCGAGCCAGGGAGAAAGGAUGGCCGGCCUGGCGGCGCGGUUGGUCCUGCUAGCUGGGGCAGCGGCGCUGGCGAGCGGCUCCCAGGGCGACCGUGAGCCGGUGUACCGCGACUGCGUAC\
) } def
/len { sequence length } bind def

/coor [
[83.15892029 240.20658875]
[85.38404083 224.72813416]
[97.07234955 214.33979797]
[96.47219849 199.35180664]
[95.87205505 184.36381531]
[95.27191162 169.37582397]
[84.18679047 159.49374390]
[83.36464691 144.30233765]
[93.80504608 132.74224854]
[93.20490265 117.75425720]
[87.28149414 113.15390015]
[85.23693848 128.01390076]
[71.34554291 133.67333984]
[59.49857330 124.47284698]
[61.54286194 109.61280060]
[75.43469238 103.95317841]
[69.51129150 99.35282135]
[54.84115982 102.48127747]
[40.17103195 105.60974121]
[25.50090027 108.73820496]
[10.83076954 111.86666107]
[2.21468878 124.84359741]
[-12.70747566 127.80731964]
[-25.02590370 119.51323700]
[-39.69603348 122.64169312]
[-54.36616516 125.77015686]
[-69.03629303 128.89862061]
[-83.67439270 132.17369080]
[-98.27899170 135.59506226]
[-112.84862518 139.16236877]
[-127.38184357 142.87527466]
[-141.23144531 152.65406799]
[-154.46203613 142.05274963]
[-147.93760681 126.40448761]
[-131.09474182 128.34205627]
[-116.56152344 124.62915802]
[-110.82717896 119.89997864]
[-101.70035553 120.99046326]
[-87.09575653 117.56909943]
[-81.26792908 112.95560455]
[-72.16475677 114.22848511]
[-57.49462509 111.10002899]
[-42.82449722 107.97156525]
[-28.15436554 104.84310150]
[-20.29122925 92.24521637]
[-5.45819712 88.86353302]
[7.70230818 97.19653320]
[22.37243843 94.06806946]
[37.04256821 90.93961334]
[51.71269989 87.81114960]
[66.38282776 84.68268585]
[79.86173248 77.88632202]
[92.49854279 78.38865662]
[101.11582947 84.19614410]
[104.02978516 92.16547394]
[115.20369720 82.15828705]
[113.76517487 66.82085419]
[121.54273987 53.73029327]
[135.37358093 47.79969025]
[149.87097168 51.11081314]
[161.04487610 41.10363007]
[172.21879578 31.09644890]
[183.39270020 21.08926582]
[194.56661987 11.08208275]
[198.90377808 2.97794056]
[206.06567383 0.98920035]
[217.43757629 -8.79240227]
[222.85430908 -23.65744591]
[237.54875183 -26.09112930]
[248.92065430 -35.87273407]
[260.29257202 -45.65433502]
[271.66445923 -55.43593597]
[282.93795776 -65.33082581]
[294.11184692 -75.33800507]
[305.28576660 -85.34519196]
[302.24618530 -100.33545685]
[307.08596802 -114.73938751]
[318.41043091 -124.72052765]
[333.11199951 -127.67342377]
[347.22265625 -122.90322113]
[358.39657593 -132.91040039]
[359.42169189 -148.45346069]
[370.89617920 -158.44299316]
[385.70779419 -157.36991882]
[396.88171387 -167.37710571]
[408.05560303 -177.38427734]
[419.22952271 -187.39146423]
[430.40344238 -197.39865112]
[435.52166748 -212.36909485]
[450.16445923 -215.09631348]
[461.33837891 -225.10350037]
[472.51226807 -235.11067200]
[483.68618774 -245.11785889]
[494.86010742 -255.12504578]
[499.97833252 -270.09548950]
[514.62115479 -272.82269287]
[525.79504395 -282.82989502]
[530.38732910 -298.57290649]
[546.37939453 -302.20404053]
[557.32000732 -289.98788452]
[551.95440674 -274.49136353]
[535.80224609 -271.65597534]
[524.62829590 -261.64880371]
[520.30932617 -247.39411926]
[504.86727905 -243.95112610]
[493.69338989 -233.94395447]
[482.51947021 -223.93676758]
[471.34555054 -213.92958069]
[460.17163086 -203.92239380]
[455.85266113 -189.66772461]
[440.41061401 -186.22473145]
[429.23672485 -176.21755981]
[418.06280518 -166.21037292]
[406.88888550 -156.20318604]
[395.71496582 -146.19599915]
[395.15475464 -131.35614014]
[383.96536255 -121.04825592]
[368.40374756 -121.73648834]
[357.22982788 -111.72930908]
[360.42135620 -97.18008423]
[355.87158203 -82.89178467]
[344.70703125 -72.73210907]
[329.85867310 -69.50363922]
[315.29293823 -74.17127991]
[304.11904907 -64.16409302]
[292.94512939 -54.15691376]
[290.04428101 -47.31344604]
[281.44607544 -44.06402969]
[270.07415771 -34.28242874]
[258.70227051 -24.50082588]
[247.33035278 -14.71922302]
[242.72700500 -0.55382556]
[227.21917725 2.57950425]
[215.84727478 12.36110687]
[204.57380676 22.25599480]
[193.39988708 32.26317596]
[182.22598267 42.27035904]
[171.05206299 52.27754211]
[159.87815857 62.28472519]
[161.57693481 77.05808258]
[154.16313171 90.15386200]
[140.29751587 96.44658661]
[125.21087646 93.33219910]
[114.03696442 103.33938599]
[108.19288635 117.15411377]
[108.79302979 132.14210510]
[120.12429810 142.83042908]
[120.51941681 158.03892517]
[110.25990295 168.77568054]
[110.86004639 183.76367188]
[111.46018982 198.75166321]
[112.06033325 213.73965454]
[124.54182434 223.16018677]
[127.99739838 238.41119385]
[120.79544067 252.29159546]
[106.33649445 258.24752808]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 152]
[4 151]
[5 150]
[6 149]
[9 146]
[10 145]
[17 51]
[18 50]
[19 49]
[20 48]
[21 47]
[24 44]
[25 43]
[26 42]
[27 41]
[28 39]
[29 38]
[30 36]
[31 35]
[55 144]
[56 143]
[60 139]
[61 138]
[62 137]
[63 136]
[64 135]
[66 134]
[67 133]
[69 131]
[70 130]
[71 129]
[72 128]
[73 126]
[74 125]
[75 124]
[80 119]
[81 118]
[84 115]
[85 114]
[86 113]
[87 112]
[88 111]
[90 109]
[91 108]
[92 107]
[93 106]
[94 105]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
