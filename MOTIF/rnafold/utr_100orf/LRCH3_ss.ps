%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:11:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCCGGCCGCGCAUGCGCUGAGCUGGCGGGCCCGAGUGUUGUCGGCUGGGAAAUGGCGGCCGCGGGCUUGGUCGCUGUGGCAGCGGCUGCCGAGUACUCUGGCACGGUAGCGUCGGGAGGUAACCUCCCUGGUGUUCACUGCGGCCCAAGCU\
) } def
/len { sequence length } bind def

/coor [
[-201.55201721 204.62913513]
[-211.24324036 208.95184326]
[-221.77304077 208.83029175]
[-231.21534729 204.35444641]
[-237.87129211 196.40458679]
[-252.61918640 199.14312744]
[-267.36706543 201.88168335]
[-282.11495972 204.62022400]
[-296.86285400 207.35877991]
[-311.61074829 210.09732056]
[-326.35864258 212.83586121]
[-334.28106689 217.50529480]
[-341.43511963 215.47663879]
[-356.23580933 217.91378784]
[-371.03649902 220.35092163]
[-377.59802246 232.15483093]
[-389.59344482 237.92269897]
[-402.52600098 235.74188232]
[-411.68991089 226.63404846]
[-426.53723145 228.76876831]
[-439.09582520 238.39128113]
[-452.79467773 232.54402161]
[-467.64199829 234.67874146]
[-482.48931885 236.81346130]
[-497.33663940 238.94818115]
[-512.18395996 241.08290100]
[-527.03131104 243.21762085]
[-541.87860107 245.35235596]
[-556.72595215 247.48707581]
[-570.89447021 259.20492554]
[-586.92376709 252.12481689]
[-601.72448730 254.56196594]
[-614.05560303 265.37283325]
[-629.49456787 259.84368896]
[-632.15899658 243.66244507]
[-619.30804443 233.47497559]
[-604.16162109 239.76127625]
[-589.36090088 237.32412720]
[-582.02709961 227.65689087]
[-569.67224121 225.53425598]
[-558.86065674 232.63975525]
[-544.01330566 230.50503540]
[-529.16601562 228.37030029]
[-514.31866455 226.23558044]
[-499.47137451 224.10086060]
[-484.62405396 221.96614075]
[-469.77673340 219.83142090]
[-454.92941284 217.69668579]
[-443.43280029 208.22686768]
[-428.67196655 213.92144775]
[-413.82464600 211.78672791]
[-404.36074829 197.91734314]
[-387.46646118 195.09977722]
[-373.47363281 205.55023193]
[-358.67294312 203.11309814]
[-343.87225342 200.67594910]
[-329.09719849 198.08798218]
[-314.34930420 195.34942627]
[-299.60140991 192.61088562]
[-284.85351562 189.87232971]
[-270.10562134 187.13378906]
[-255.35772705 184.39523315]
[-240.60984802 181.65669250]
[-230.87310791 164.84252930]
[-211.63563538 160.44987488]
[-195.06491089 171.71160889]
[-180.51211548 168.07617188]
[-165.95933533 164.44075012]
[-151.40653992 160.80532837]
[-136.85375977 157.16990662]
[-122.30096436 153.53446960]
[-107.74817657 149.89904785]
[-93.23322296 146.11537170]
[-78.75762177 142.18385315]
[-64.28201294 138.25231934]
[-49.80641174 134.32080078]
[-39.55204010 123.51815033]
[-24.20635986 127.36791229]
[-9.73075581 123.43638611]
[4.74484825 119.50485992]
[19.22045326 115.57333374]
[33.65520096 111.49436951]
[48.04759598 107.26837921]
[58.07947540 96.25880432]
[73.50049591 99.79473114]
[87.89289093 95.56874847]
[97.34965515 54.34501648]
[109.26545715 45.23384094]
[121.18126678 36.12266159]
[133.09707642 27.01148415]
[145.01287842 17.90030670]
[156.92868042 8.78912830]
[168.84449768 -0.32204914]
[175.10743713 -14.85084915]
[189.91755676 -16.43513298]
[201.83335876 -25.54631042]
[203.67416382 -41.24303055]
[216.12669373 -50.97494125]
[231.80307007 -48.96827698]
[241.40278625 -36.41355133]
[239.23049927 -20.75926590]
[226.57498169 -11.29282665]
[210.94453430 -13.63050461]
[199.02873230 -4.51932669]
[193.61807251 9.35778046]
[177.95567322 11.59375668]
[166.03985596 20.70493507]
[154.12405396 29.81611252]
[142.20825195 38.92729187]
[130.29244995 48.03846741]
[118.37664032 57.14964676]
[106.46083069 66.26082611]
[107.75482178 73.64835358]
[121.84439850 78.79460144]
[110.34279633 88.42340851]
[111.63678741 95.81094360]
[125.93998718 100.32963562]
[140.24317932 104.84832764]
[154.54637146 109.36701965]
[168.84957886 113.88571167]
[183.15277100 118.40440369]
[200.07756042 117.41041565]
[205.71794128 133.39860535]
[191.91598511 143.24455261]
[178.63407898 132.70759583]
[164.33088684 128.18890381]
[150.02767944 123.67021942]
[135.72448730 119.15151978]
[121.42129517 114.63282776]
[107.11809540 110.11413574]
[92.11887360 109.96114349]
[77.72647858 114.18712616]
[66.66516113 125.49897003]
[52.27358627 121.66077423]
[37.88119125 125.88676453]
[30.47540283 131.33860779]
[23.15197754 130.04893494]
[8.67637348 133.98046875]
[-5.79923010 137.91198730]
[-20.27483368 141.84352112]
[-31.56459618 152.92736816]
[-45.87488556 148.79640198]
[-60.35049057 152.72793579]
[-74.82609558 156.65945435]
[-89.30169678 160.59097290]
[-96.81715393 165.89062500]
[-104.11274719 164.45184326]
[-118.66553497 168.08726501]
[-133.21832275 171.72268677]
[-147.77111816 175.35810852]
[-162.32389832 178.99354553]
[-176.87669373 182.62896729]
[-191.42948914 186.26438904]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 63]
[6 62]
[7 61]
[8 60]
[9 59]
[10 58]
[11 57]
[13 56]
[14 55]
[15 54]
[19 51]
[20 50]
[22 48]
[23 47]
[24 46]
[25 45]
[26 44]
[27 43]
[28 42]
[29 41]
[31 38]
[32 37]
[66 153]
[67 152]
[68 151]
[69 150]
[70 149]
[71 148]
[72 147]
[73 145]
[74 144]
[75 143]
[76 142]
[78 140]
[79 139]
[80 138]
[81 137]
[82 135]
[83 134]
[85 132]
[86 131]
[87 112]
[88 111]
[89 110]
[90 109]
[91 108]
[92 107]
[93 106]
[95 104]
[96 103]
[116 130]
[117 129]
[118 128]
[119 127]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
