%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:21:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUCCGCUGCCUGGGGCCUGCGCUGCUGCUGCUGCUGUUACUGGGGUCGGCGAGCUCGGUCGGAGGGAACCGAUGUGUGGACGCGGCCGAAGCCUGCA\
) } def
/len { sequence length } bind def

/coor [
[192.12756348 338.09924316]
[190.72409058 334.89480591]
[190.31101990 331.07073975]
[191.10820007 326.94781494]
[185.20669556 313.15750122]
[179.30519104 299.36721802]
[173.40368652 285.57690430]
[167.50219727 271.78662109]
[161.60069275 257.99633789]
[146.79566956 256.36016846]
[134.71707153 247.47404480]
[128.66810608 233.64376831]
[130.36506653 218.54353333]
[139.45170593 206.23986816]
[133.55020142 192.44956970]
[127.64870453 178.65927124]
[111.84261322 173.15411377]
[104.69025421 157.65177917]
[111.00286865 141.42851257]
[104.67534637 127.82843018]
[98.34781647 114.22834015]
[87.01287079 106.04234314]
[88.05209351 92.09918213]
[81.72456360 78.49909210]
[75.18630219 64.99905396]
[68.43887329 51.60232925]
[61.69144821 38.20560455]
[49.61198807 33.36375427]
[44.30795670 21.92295837]
[48.16453934 10.34087181]
[41.83701324 -3.25921702]
[35.50948715 -16.85930634]
[28.97122002 -30.35934639]
[22.22379494 -43.75607300]
[15.47636890 -57.15279770]
[8.72894382 -70.54952240]
[1.77399039 -83.83969116]
[-5.38680744 -97.02009583]
[-20.78862000 -98.90789795]
[-32.11634445 -109.51271820]
[-35.01423645 -124.75679779]
[-28.36800003 -138.77845764]
[-14.73324871 -146.18611145]
[0.64717853 -144.13133240]
[11.85919285 -133.40425110]
[14.59154606 -118.12963867]
[7.79359341 -104.18089294]
[14.95439148 -91.00048828]
[21.02031708 -86.54739380]
[22.12566948 -77.29694366]
[28.87309456 -63.90022278]
[35.62052155 -50.50349808]
[42.36794662 -37.10677338]
[48.29244614 -32.46718216]
[49.10957718 -23.18683243]
[55.43709946 -9.58674240]
[61.76462555 4.01334620]
[76.63264465 13.19177246]
[75.08817291 31.45817947]
[81.83560181 44.85490417]
[88.58302307 58.25162888]
[94.50753021 62.89121628]
[95.32465363 72.17156982]
[101.65218353 85.77165985]
[112.98712921 93.95765686]
[111.94790649 107.90081787]
[118.27543640 121.50090790]
[124.60295868 135.10099792]
[137.80119324 138.27612305]
[146.58940125 148.36415100]
[147.88684082 161.48358154]
[141.43899536 172.75778198]
[147.34049988 186.54806519]
[153.24200439 200.33836365]
[168.41618347 202.25970459]
[180.51144409 211.45761108]
[186.34005737 225.38218689]
[184.42906189 240.25511169]
[175.39097595 252.09481812]
[181.29248047 265.88513184]
[187.19398499 279.67541504]
[193.09548950 293.46569824]
[198.99699402 307.25601196]
[204.89849854 321.04629517]
[211.85345459 334.33645630]
[219.81982422 347.04620361]
[227.98287964 359.63049316]
[236.34066772 372.08630371]
[244.69845581 384.54211426]
[259.65081787 391.27697754]
[261.02502441 407.61846924]
[247.40734863 416.75582886]
[232.80653381 409.28936768]
[232.24263000 392.89990234]
[223.88484192 380.44409180]
[215.52706909 367.98828125]
[209.07258606 364.11978149]
[207.11010742 355.01257324]
[199.14373779 342.30282593]
[196.67803955 341.85946655]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 84]
[5 83]
[6 82]
[7 81]
[8 80]
[9 79]
[14 74]
[15 73]
[16 72]
[19 68]
[20 67]
[21 66]
[23 64]
[24 63]
[25 61]
[26 60]
[27 59]
[30 57]
[31 56]
[32 55]
[33 53]
[34 52]
[35 51]
[36 50]
[37 48]
[38 47]
[85 99]
[86 98]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
