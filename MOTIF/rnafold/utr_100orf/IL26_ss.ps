%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUGAGUGACACACGCUGAGUGGGGUGAAGGGAAAUGCUGGUGAAUUUCAUUUUGAGGUGUGGGUUGCUGUUAGUCACUCUGUCUCUUGCCAUUGCCAAGCACAAGCAAUCUUCCUUCACCAAAAGUUGUUACC\
) } def
/len { sequence length } bind def

/coor [
[107.09255219 246.91249084]
[93.58806610 254.55503845]
[78.17437744 252.76679993]
[66.77835846 242.23539734]
[63.78201675 227.01037598]
[70.33750153 212.94604492]
[83.92410278 205.45045471]
[85.65274811 190.55038452]
[87.38139343 175.65032959]
[89.11004639 160.75027466]
[90.83869171 145.85020447]
[92.56733704 130.95014954]
[79.21800232 124.10943604]
[68.13287354 134.21487427]
[57.04773712 144.32031250]
[54.87345886 160.21534729]
[41.01739502 168.30169678]
[26.10873604 162.37620544]
[21.58412552 146.98440552]
[30.91445732 133.93356323]
[46.94230270 133.23516846]
[58.02743530 123.12973785]
[69.11257172 113.02430725]
[74.99645233 84.15914917]
[98.91392517 74.34579468]
[102.68453217 59.82744217]
[106.45513916 45.30908966]
[110.22574615 30.79073906]
[113.99635315 16.27238846]
[117.76696014 1.75403714]
[121.53756714 -12.76431370]
[125.30817413 -27.28266525]
[129.07878113 -41.80101776]
[132.84939575 -56.31936646]
[123.71265411 -71.18666840]
[128.02673340 -87.74781799]
[142.66844177 -95.93906403]
[146.10270691 -110.54063416]
[149.53695679 -125.14220428]
[152.97122192 -139.74377441]
[148.59898376 -154.94885254]
[159.04469299 -165.56660461]
[162.47894287 -180.16816711]
[165.91320801 -194.76974487]
[154.12518311 -204.40322876]
[147.71490479 -218.14350891]
[147.90528870 -233.24264526]
[154.60498047 -246.70648193]
[166.43721008 -255.88841248]
[181.02227783 -259.00955200]
[184.45652771 -273.61111450]
[170.62568665 -285.68334961]
[164.78343201 -302.99856567]
[168.43936157 -320.81750488]
[180.51556396 -334.30792236]
[197.66244507 -339.85507202]
[200.07737732 -354.65939331]
[202.49232483 -369.46374512]
[204.90725708 -384.26806641]
[195.80610657 -394.26962280]
[194.17970276 -407.49752808]
[200.40217590 -419.06213379]
[211.98780823 -424.81933594]
[214.74404907 -439.56393433]
[217.50028992 -454.30853271]
[220.25653076 -469.05313110]
[215.18675232 -484.04003906]
[225.13093567 -495.12890625]
[227.88719177 -509.87347412]
[230.64343262 -524.61810303]
[227.61047363 -541.29852295]
[242.79943848 -548.83056641]
[254.24185181 -536.32025146]
[245.38803101 -521.86181641]
[242.63177490 -507.11724854]
[239.87553406 -492.37265015]
[245.14247131 -478.44036865]
[235.00112915 -466.29687500]
[232.24488831 -451.55227661]
[229.48864746 -436.80767822]
[226.73240662 -422.06311035]
[236.81793213 -408.65570068]
[234.07502747 -391.76312256]
[219.71157837 -381.85311890]
[217.29664612 -367.04879761]
[214.88171387 -352.24447632]
[212.46676636 -337.44015503]
[222.65467834 -331.24554443]
[230.14883423 -321.92697144]
[234.03648376 -310.58157349]
[233.83128357 -298.55548096]
[229.53404236 -287.28421021]
[221.63540649 -278.12121582]
[211.05998230 -272.17538452]
[199.05810547 -270.17687988]
[195.62384033 -255.57530212]
[207.28863525 -246.28024292]
[213.78767395 -232.78683472]
[213.78366089 -217.74818420]
[207.22380066 -204.14714050]
[195.36099243 -194.70465088]
[180.51477051 -191.33547974]
[177.08052063 -176.73391724]
[173.64625549 -162.13233948]
[178.26412964 -147.97166443]
[167.57278442 -136.30952454]
[164.13853455 -121.70794678]
[160.70426941 -107.10637665]
[157.27001953 -92.50480652]
[165.54302979 -82.55847931]
[166.56411743 -69.46585846]
[159.73326111 -58.02198410]
[147.36773682 -52.54875946]
[143.59713745 -38.03040695]
[139.82652283 -23.51205826]
[136.05592346 -8.99370670]
[132.28530884 5.52464485]
[128.51470947 20.04299545]
[124.74409485 34.56134796]
[120.97348785 49.07969666]
[117.20288086 63.59804916]
[113.43227386 78.11640167]
[120.79964447 83.10342407]
[126.28112030 90.58008575]
[129.03833008 99.82279968]
[128.51289368 109.82884216]
[124.51753235 119.42495728]
[117.28515625 127.40473938]
[107.46739960 132.67880249]
[105.73874664 147.57885742]
[104.01010132 162.47891235]
[102.28145599 177.37898254]
[100.55281067 192.27903748]
[98.82416534 207.17909241]
[110.33375549 217.58625793]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 134]
[8 133]
[9 132]
[10 131]
[11 130]
[12 129]
[13 23]
[14 22]
[15 21]
[25 122]
[26 121]
[27 120]
[28 119]
[29 118]
[30 117]
[31 116]
[32 115]
[33 114]
[34 113]
[37 109]
[38 108]
[39 107]
[40 106]
[42 104]
[43 103]
[44 102]
[50 96]
[51 95]
[56 87]
[57 86]
[58 85]
[59 84]
[63 81]
[64 80]
[65 79]
[66 78]
[68 76]
[69 75]
[70 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
