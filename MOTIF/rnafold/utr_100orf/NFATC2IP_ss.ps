%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:06:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGAAAGUGUGCCAUGGCGGAGCCUGUGGGGAAGCGGGGCCGCUGGUCCGGAGGUAGCGGUGCCGGCCGAGGGGGUCGGGGCGGCUGGGGCGGUCGGGGCCGGCGUCCUCGGG\
) } def
/len { sequence length } bind def

/coor [
[-64.72455597 275.33074951]
[-67.82612610 284.32614136]
[-72.52717590 292.59194946]
[-78.66522217 299.84692383]
[-86.02894592 305.84466553]
[-94.36541748 310.38201904]
[-103.38884735 313.30587769]
[-112.79032898 314.51849365]
[-122.24845123 313.98062134]
[-131.44027710 311.71276855]
[-140.05235291 307.79461670]
[-147.79142761 302.36190796]
[-154.39439392 295.60205078]
[-159.63729858 287.74746704]
[-173.71717834 292.92016602]
[-187.79707336 298.09286499]
[-201.87695312 303.26556396]
[-215.88551331 308.62844849]
[-229.82015991 314.18051147]
[-243.75480652 319.73257446]
[-256.23101807 331.21215820]
[-270.71572876 322.40139771]
[-266.25903320 306.04370117]
[-249.30688477 305.79794312]
[-235.37223816 300.24584961]
[-221.43757629 294.69378662]
[-216.32063293 289.22207642]
[-207.04965210 289.18566895]
[-192.96975708 284.01296997]
[-178.88987732 278.84027100]
[-164.80998230 273.66760254]
[-164.73036194 252.09733582]
[-155.74601746 232.44468689]
[-139.42732239 218.22106934]
[-118.65818787 211.98228455]
[-97.12642670 214.86927795]
[-78.66899109 226.39962769]
[-66.72760010 217.32202148]
[-54.78620148 208.24440002]
[-42.84480667 199.16679382]
[-30.90340996 190.08917236]
[-25.45373154 176.22734070]
[-9.78509617 174.03544617]
[2.15630031 164.95783997]
[14.09769630 155.88021851]
[26.03909302 146.80261230]
[37.98048782 137.72499084]
[49.92188263 128.64738464]
[61.86328125 119.56977081]
[73.80467987 110.49215698]
[85.74607086 101.41454315]
[91.33152008 88.59680939]
[105.17631531 86.64405823]
[117.11771393 77.56644440]
[118.38088989 56.70982742]
[134.21778870 43.52252197]
[154.39002991 45.98738861]
[165.27995300 35.67189789]
[176.16989136 25.35640717]
[187.05982971 15.04091454]
[191.75775146 -0.06670167]
[206.31863403 -3.20199466]
[217.20855713 -13.51748657]
[221.90649414 -28.62510300]
[236.46736145 -31.76039505]
[247.35729980 -42.07588577]
[258.24722290 -52.39138031]
[269.13717651 -62.70687103]
[280.02709961 -73.02236176]
[290.91702271 -83.33785248]
[292.78704834 -99.27154541]
[306.48602295 -107.62129211]
[321.50521851 -101.98188782]
[326.32324219 -86.67938995]
[317.24407959 -73.45257568]
[301.23251343 -72.44792175]
[290.34259033 -62.13243103]
[279.45266724 -51.81694031]
[268.56271362 -41.50144577]
[257.67279053 -31.18595505]
[246.78285217 -20.87046242]
[242.86386108 -6.50067997]
[227.52404785 -2.62755394]
[216.63412476 7.68793774]
[212.71511841 22.05772018]
[197.37532043 25.93084717]
[186.48538208 36.24633789]
[175.59545898 46.56183243]
[164.70552063 56.87732315]
[167.41380310 66.14040375]
[166.48124695 75.80489349]
[161.99806213 84.48317719]
[154.56741333 90.91304779]
[145.22450256 94.14122772]
[135.29255676 93.66455078]
[126.19532013 89.50784302]
[114.25392914 98.58545685]
[108.66847992 111.40319061]
[94.82368469 113.35594177]
[82.88228607 122.43355560]
[70.94089508 131.51116943]
[58.99949646 140.58877563]
[47.05810165 149.66639709]
[35.11670685 158.74400330]
[23.17531013 167.82162476]
[11.23391342 176.89923096]
[-0.70748252 185.97685242]
[-7.01128912 200.48796082]
[-21.82579613 202.03057861]
[-33.76719284 211.10818481]
[-45.70858765 220.18580627]
[-57.64998627 229.26341248]
[-69.59137726 238.34101868]
[-65.80397797 247.09580994]
[-63.69369888 256.39224243]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 31]
[15 30]
[16 29]
[17 28]
[18 26]
[19 25]
[20 24]
[37 113]
[38 112]
[39 111]
[40 110]
[41 109]
[43 107]
[44 106]
[45 105]
[46 104]
[47 103]
[48 102]
[49 101]
[50 100]
[51 99]
[53 97]
[54 96]
[57 89]
[58 88]
[59 87]
[60 86]
[62 84]
[63 83]
[65 81]
[66 80]
[67 79]
[68 78]
[69 77]
[70 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
