%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:09:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCAGCCCCUUGCCGUCCGGCUUCCCCGCGCGCAGGAACAGCCGCCUGGAUGUGUUCCUGCGGCGGCAUCUGCCGCCCGAGGUCUACGACGCGGUCC\
) } def
/len { sequence length } bind def

/coor [
[87.37791443 131.10113525]
[78.63679504 143.29100037]
[69.89568329 155.48086548]
[61.15456390 167.67073059]
[52.41344833 179.86061096]
[50.65930176 195.58427429]
[36.95481873 201.41835022]
[28.21370316 213.60821533]
[23.89719772 230.00346375]
[6.94775534 230.39430237]
[1.88011718 214.21543884]
[16.02383614 204.86709595]
[24.76495171 192.67723083]
[25.89387703 177.82546997]
[40.22357941 171.11949158]
[48.96469498 158.92962646]
[57.70581055 146.73974609]
[66.44692993 134.54988098]
[75.18804169 122.36001587]
[73.64763641 94.68605804]
[91.33740997 81.56929016]
[90.40486908 66.59830475]
[89.47232056 51.62732315]
[88.53977966 36.65633774]
[73.72277069 29.51047516]
[64.54062653 15.97403431]
[63.39281082 -0.24899909]
[70.49562836 -14.77583504]
[83.84902954 -23.72892189]
[82.45133972 -38.66366196]
[81.05364990 -53.59840393]
[79.65596008 -68.53314209]
[75.67971039 -76.95822906]
[78.45446014 -83.95295715]
[77.52191925 -98.92394257]
[76.58937073 -113.89492798]
[75.65682983 -128.86590576]
[74.72428131 -143.83689880]
[73.79174042 -158.80787659]
[72.85919189 -173.77885437]
[71.92665100 -188.74984741]
[70.99410248 -203.72082520]
[70.06156158 -218.69181824]
[58.09765244 -234.76817322]
[67.01456451 -251.80641174]
[65.15308380 -266.69046021]
[54.82842255 -279.43148804]
[60.95198059 -294.64443970]
[77.22435760 -296.67953491]
[86.90593719 -283.44326782]
[80.03713226 -268.55194092]
[81.89861298 -253.66789246]
[90.66156006 -248.00335693]
[94.85858917 -238.20849609]
[92.83345032 -227.52067566]
[85.03254700 -219.62435913]
[85.96508789 -204.65338135]
[86.89763641 -189.68238831]
[87.83017731 -174.71141052]
[88.76272583 -159.74041748]
[89.69526672 -144.76943970]
[90.62781525 -129.79846191]
[91.56035614 -114.82746887]
[92.49290466 -99.85648346]
[93.42544556 -84.88550568]
[94.59070587 -69.93083191]
[95.98839569 -54.99608994]
[97.38607788 -40.06135178]
[98.78376770 -25.12661171]
[111.62634277 -20.21055603]
[121.11576843 -10.16646290]
[125.33557892 3.06111884]
[123.39727020 16.87669945]
[115.62664795 28.54310989]
[103.51076508 35.72379303]
[104.44330597 50.69477844]
[105.37585449 65.66576385]
[106.30839539 80.63674927]
[125.35325623 91.06147003]
[127.97601318 118.24681091]
[138.49981689 128.93557739]
[149.02362061 139.62432861]
[162.00531006 140.53683472]
[170.55635071 149.80528259]
[170.42961121 162.01191711]
[180.61590576 173.02279663]
[190.80220032 184.03367615]
[205.99670410 191.55453491]
[202.97601318 208.23721313]
[186.10910034 209.95280457]
[179.79132080 194.21995544]
[169.60502625 183.20909119]
[159.41874695 172.19821167]
[142.45506287 168.01069641]
[138.33485413 150.14813232]
[127.81105804 139.45938110]
[117.28725433 128.77061462]
[109.80992126 129.35324097]
[110.97492981 144.30793762]
[96.02021790 145.47270203]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[3 17]
[4 16]
[5 15]
[7 13]
[8 12]
[21 78]
[22 77]
[23 76]
[24 75]
[29 69]
[30 68]
[31 67]
[32 66]
[34 65]
[35 64]
[36 63]
[37 62]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[43 56]
[45 52]
[46 51]
[80 97]
[81 96]
[82 95]
[85 93]
[86 92]
[87 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
