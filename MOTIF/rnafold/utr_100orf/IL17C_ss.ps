%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:53:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAGGUGUGCAGGCCGCUCCAAGCCCAGCCUGCCCCGCUGCCGCCACCAUGACGCUCCUCCCCGGCCUCCUGUUUCUGACCUGGCUGCACACAUGCCUGGCCCACCAUGACCCCUCCCUCAGGGGGCACCCCCACAGUCACGGUACCC\
) } def
/len { sequence length } bind def

/coor [
[204.54589844 183.24360657]
[192.05207825 174.94273376]
[179.55825806 166.64186096]
[167.06443787 158.34098816]
[154.57061768 150.04011536]
[142.07679749 141.73924255]
[129.58299255 133.43836975]
[117.08916473 125.13749695]
[104.59535217 116.83662415]
[89.60275269 117.30778503]
[77.65480042 126.37677002]
[65.70685577 135.44575500]
[53.75890350 144.51473999]
[41.81095505 153.58372498]
[29.86300659 162.65272522]
[22.97532463 181.55158997]
[3.75708771 183.29928589]
[-7.80061102 192.86064148]
[-19.35830879 202.42199707]
[-27.70848846 217.17703247]
[-44.19844437 213.23777771]
[-44.97801208 196.30175781]
[-28.91967010 190.86430359]
[-17.36197090 181.30294800]
[-5.80427217 171.74159241]
[-5.74995184 161.44270325]
[0.11655661 152.71101379]
[10.03797817 148.59887695]
[20.79401970 150.70477295]
[32.74197006 141.63578796]
[44.68991852 132.56680298]
[56.63786697 123.49781036]
[68.58581543 114.42882538]
[80.53376007 105.35983276]
[66.01589966 109.13233185]
[53.43877029 100.95824432]
[50.99076462 86.15934753]
[60.26567078 74.37053680]
[75.22502136 73.26696777]
[86.12928772 83.56671143]
[80.02823639 69.86353302]
[73.92718506 56.16035080]
[61.24577713 46.70030975]
[63.13750458 31.92632484]
[57.03645325 18.22314262]
[50.93540192 4.51996088]
[44.83435440 -9.18322086]
[28.00761414 -20.20449829]
[30.69460297 -39.31405258]
[24.02507401 -52.74972916]
[17.36204529 -59.09673691]
[17.35987854 -66.53735352]
[10.97318935 -80.10975647]
[-1.90355718 -89.30213928]
[-0.32164732 -104.11250305]
[-6.70833683 -117.68491364]
[-21.80203819 -116.28634644]
[-36.46302795 -120.13747406]
[-48.92092133 -128.77325439]
[-57.67136383 -141.15087891]
[-61.65770340 -155.77568054]
[-60.39856339 -170.88165283]
[-54.04599380 -184.64466858]
[-43.36709976 -195.40278625]
[-29.65140724 -201.85690308]
[-14.55515385 -203.22764587]
[0.09871419 -199.34950256]
[12.54067135 -190.69078064]
[21.26828957 -178.29705811]
[25.22766876 -163.66493225]
[23.94069290 -148.56130981]
[17.56277084 -134.81001282]
[6.86406898 -124.07160187]
[13.25075817 -110.49919128]
[25.67068672 -102.27759552]
[24.54559517 -86.49644470]
[30.93228340 -72.92404175]
[37.46075058 -59.41925812]
[44.13027954 -45.98358154]
[54.14464951 -43.57893753]
[61.30602264 -35.87353897]
[63.04393387 -25.27524567]
[58.53753662 -15.28427029]
[64.63858795 -1.58108890]
[70.73963165 12.12209320]
[76.84068298 25.82527542]
[89.08570862 34.30517197]
[87.63037109 50.05929947]
[93.73141479 63.76248169]
[99.83246613 77.46566772]
[109.16476440 81.88299561]
[114.63718414 89.40152740]
[115.65950012 97.61822510]
[112.89622498 104.34280396]
[125.39003754 112.64367676]
[137.88386536 120.94454956]
[150.37767029 129.24542236]
[162.87149048 137.54629517]
[175.36531067 145.84716797]
[187.85913086 154.14804077]
[200.35295105 162.44891357]
[212.84677124 170.74978638]
[232.22570801 165.68563843]
[248.88377380 176.25311279]
[252.44837952 195.34796143]
[265.43875122 202.84796143]
[278.42913818 210.34796143]
[294.24908447 210.54734802]
[301.40258789 223.61167908]
[314.39297485 231.11167908]
[327.38336182 238.61167908]
[340.37371826 246.11167908]
[354.07690430 252.21272278]
[368.34277344 256.84799194]
[382.60861206 261.48324585]
[396.87445068 266.11849976]
[411.14028931 270.75375366]
[426.03002930 264.78082275]
[439.91177368 272.82299805]
[442.13665771 288.71102905]
[430.99792480 300.25695801]
[415.04028320 298.60375977]
[406.50503540 285.01959229]
[392.23919678 280.38433838]
[377.97335815 275.74908447]
[363.70751953 271.11383057]
[349.44165039 266.47857666]
[357.68884277 279.00790405]
[358.70474243 293.97344971]
[352.22644043 307.50238037]
[339.93041992 316.09353638]
[324.99874878 317.52368164]
[311.29553223 311.42269897]
[302.36700439 299.36941528]
[300.52371216 284.48312378]
[306.24267578 270.61611938]
[318.04394531 261.35705566]
[332.87371826 259.10205078]
[319.88336182 251.60206604]
[306.89297485 244.10206604]
[293.90258789 236.60206604]
[279.01181030 236.93911743]
[270.92913818 223.33833313]
[257.93875122 215.83833313]
[244.94837952 208.33833313]
[236.01310730 213.61793518]
[225.60812378 214.68577576]
[215.63317871 211.27873230]
[207.93801880 203.95690918]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 102]
[2 101]
[3 100]
[4 99]
[5 98]
[6 97]
[7 96]
[8 95]
[9 94]
[10 34]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[17 25]
[18 24]
[19 23]
[40 90]
[41 89]
[42 88]
[44 86]
[45 85]
[46 84]
[47 83]
[49 79]
[50 78]
[52 77]
[53 76]
[55 74]
[56 73]
[105 145]
[106 144]
[107 143]
[109 141]
[110 140]
[111 139]
[112 138]
[113 127]
[114 126]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
