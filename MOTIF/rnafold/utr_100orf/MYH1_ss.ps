%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:07:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUCUCCUCAUAAAGCUUCAAGUUCUGAUCCACUUUAAGGUCGCAUCUCUACGCCAGGGUCCUUAACUGGGCUACCAUCAAUAACCUGCAGCCAUGAGUUCCGACUCUGAGAUGGCCAUUUUUGGGGAGGCUGCUCCUUUCCUCCGAAAGUCUGAAAGGGAGCGAAUUGAAGCCCAGAACAAGCCUUUUGAUG\
) } def
/len { sequence length } bind def

/coor [
[16.98317337 735.85083008]
[4.61099052 744.86126709]
[-10.53306866 747.07849121]
[-24.96900940 741.99298096]
[-35.37955856 730.77343750]
[-39.37244797 715.99792480]
[-36.03014374 701.06182861]
[-26.12067604 689.39727783]
[-11.92117310 683.68475342]
[-10.47346401 668.75482178]
[-9.02575588 653.82482910]
[-15.49857616 640.41021729]
[-6.46548796 627.42120361]
[-5.01777935 612.49127197]
[-11.49059963 599.07666016]
[-2.45751143 586.08764648]
[-1.00980270 571.15765381]
[0.43790609 556.22772217]
[1.88561487 541.29772949]
[-0.07269985 538.35046387]
[-0.69327956 534.30450439]
[0.52633971 529.80242920]
[3.78104353 525.68743896]
[5.94837952 510.84484863]
[8.11571503 496.00225830]
[10.28305054 481.15966797]
[12.45038700 466.31707764]
[14.61772251 451.47448730]
[6.47664833 445.18444824]
[1.64959192 436.00778198]
[1.06974494 425.57427979]
[4.90914345 415.76873779]
[12.53540421 408.39044189]
[22.61487389 404.82318115]
[25.49677467 390.10263062]
[28.37867546 375.38208008]
[31.26057625 360.66152954]
[34.14247894 345.94097900]
[37.02437973 331.22042847]
[30.53349495 321.00292969]
[32.82338715 308.70846558]
[43.20177841 301.03533936]
[46.32045364 286.36312866]
[49.43912888 271.69091797]
[52.55780411 257.01870728]
[50.87109375 249.81275940]
[55.84671402 242.13610840]
[59.20135498 227.51605225]
[62.55599594 212.89598083]
[65.91063690 198.27590942]
[69.26527405 183.65583801]
[61.24570465 175.51899719]
[58.12342072 164.40467834]
[60.78725815 153.04841614]
[68.68688202 144.30372620]
[79.94174957 140.42518616]
[83.76564789 125.92077637]
[87.58954620 111.41636658]
[82.15766907 97.43442535]
[69.54480743 89.31557465]
[56.93194580 81.19672394]
[44.31908417 73.07787323]
[31.70622253 64.95902252]
[16.31569290 68.55167389]
[2.93684340 60.13847733]
[-0.49289414 44.71082687]
[8.06128311 31.42167282]
[23.52433395 28.15523720]
[36.72230530 36.84943771]
[39.82507324 52.34616089]
[52.43793488 60.46501160]
[65.05079651 68.58386230]
[77.66365814 76.70271301]
[90.27651978 84.82156372]
[97.22282410 81.99335480]
[90.04638672 68.82146454]
[82.86994171 55.64957428]
[75.69349670 42.47768402]
[68.51705933 29.30579376]
[61.34061432 16.13390350]
[51.76585388 4.58730316]
[52.63953018 -10.38723183]
[63.49210358 -20.74202156]
[78.49113464 -20.91214943]
[89.57579041 -10.80618477]
[90.78914642 4.14384413]
[94.85440826 18.58246040]
[98.91967010 33.02108002]
[102.98492432 47.45969391]
[107.05018616 61.89831161]
[111.11544800 76.33692932]
[118.06175995 73.50872040]
[121.41639709 58.88864899]
[124.77103424 44.26858139]
[128.12567139 29.64851379]
[131.48031616 15.02844620]
[134.36221313 0.30789429]
[136.76838684 -14.49785995]
[139.17456055 -29.30361366]
[141.58073425 -44.10936737]
[135.26275635 -59.24261856]
[145.42330933 -72.11487579]
[161.61009216 -69.48426819]
[167.17152405 -54.05693436]
[156.38647461 -41.70319748]
[153.98031616 -26.89744377]
[151.57414246 -12.09169006]
[149.16796875 2.71406341]
[150.70841980 5.07124949]
[151.40158081 8.18463898]
[150.95321655 11.73223972]
[149.19186401 15.29109573]
[146.10038757 18.38308716]
[142.74574280 33.00315475]
[139.39109802 47.62322235]
[136.03646851 62.24328995]
[132.68182373 76.86335754]
[138.29565430 81.83677673]
[155.13714600 96.75704193]
[169.24626160 91.66460419]
[183.35537720 86.57216644]
[197.46449280 81.47972870]
[211.57360840 76.38729858]
[225.68272400 71.29486084]
[239.79182434 66.20242310]
[253.90093994 61.10998535]
[267.96856689 55.90406418]
[281.99383545 50.58499146]
[296.01907349 45.26591873]
[310.04431152 39.94684219]
[324.06954956 34.62776947]
[329.04898071 19.80416489]
[342.41876221 11.69349384]
[357.86608887 14.12536812]
[368.09722900 25.95153236]
[368.28131104 41.58803177]
[358.33145142 53.65179062]
[342.94564819 56.44667053]
[329.38864136 48.65301514]
[315.36337280 53.97208786]
[301.33813477 59.29116058]
[287.31289673 64.61023712]
[273.28765869 69.92930603]
[268.14141846 75.24785614]
[258.99337769 75.21910095]
[244.88426208 80.31153870]
[230.77514648 85.40397644]
[216.66603088 90.49640656]
[202.55693054 95.58884430]
[188.44781494 100.68128204]
[174.33869934 105.77371979]
[160.22958374 110.86614990]
[102.09394836 115.24026489]
[98.27005005 129.74467468]
[94.44615173 144.24906921]
[104.60406494 160.22836304]
[99.94972992 178.25271606]
[83.88534546 187.01048279]
[80.53070068 201.63055420]
[77.17606354 216.25062561]
[73.82141876 230.87068176]
[70.46678162 245.49075317]
[67.23001862 260.13735962]
[64.11134338 274.80960083]
[60.99266815 289.48181152]
[57.87399292 304.15402222]
[63.97252655 321.52246094]
[51.74493027 334.10232544]
[48.86302948 348.82287598]
[45.98112869 363.54342651]
[43.09922791 378.26400757]
[40.21732712 392.98455811]
[37.33542633 407.70510864]
[49.42041016 423.74053955]
[45.89204788 443.19787598]
[29.46031761 453.64181519]
[27.29298210 468.48440552]
[25.12564659 483.32699585]
[22.95831108 498.16961670]
[20.79097557 513.01220703]
[18.62364006 527.85479736]
[16.81558990 542.74542236]
[15.36788082 557.67541504]
[13.92017174 572.60534668]
[12.47246265 587.53533936]
[18.84173393 602.01788330]
[9.91219521 613.93896484]
[8.46448612 628.86895752]
[14.83375740 643.35144043]
[5.90421867 655.27252197]
[4.45651007 670.20251465]
[3.00880122 685.13250732]
[15.84624386 693.46667480]
[23.33003235 706.81774902]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 192]
[10 191]
[11 190]
[13 188]
[14 187]
[16 185]
[17 184]
[18 183]
[19 182]
[23 181]
[24 180]
[25 179]
[26 178]
[27 177]
[28 176]
[34 173]
[35 172]
[36 171]
[37 170]
[38 169]
[39 168]
[42 166]
[43 165]
[44 164]
[45 163]
[47 162]
[48 161]
[49 160]
[50 159]
[51 158]
[56 155]
[57 154]
[58 153]
[59 74]
[60 73]
[61 72]
[62 71]
[63 70]
[92 117]
[93 116]
[94 115]
[95 114]
[96 113]
[97 108]
[98 107]
[99 106]
[100 105]
[119 152]
[120 151]
[121 150]
[122 149]
[123 148]
[124 147]
[125 146]
[126 145]
[127 143]
[128 142]
[129 141]
[130 140]
[131 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
