%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGAGACCAGAGGCCGAACUCAGGUUCUGAUGGCCGAGCUGCCCCACAGGAUCAUCAAGGAAACCCAGCGUUUGCUGGCAGAGCCAGUUCCUGGCAUCAAAGCAGAACCAGAUGAAAGCAACGCCCGUU\
) } def
/len { sequence length } bind def

/coor [
[17.28691292 230.72747803]
[15.99461937 215.78311157]
[5.07487679 226.06703186]
[0.33324423 241.16099548]
[-14.23664856 244.25413513]
[-25.15639114 254.53805542]
[-36.07613373 264.82199097]
[-46.87178421 275.23611450]
[-57.54178619 285.77893066]
[-61.92011261 300.98223877]
[-76.41164398 304.42385864]
[-87.08164215 314.96670532]
[-97.75164795 325.50952148]
[-97.59575653 341.31301880]
[-108.71981049 352.53939819]
[-124.52409363 352.52819824]
[-135.63221741 341.28607178]
[-135.45391846 325.48278809]
[-124.09497833 314.49414062]
[-108.29446411 314.83950806]
[-97.62446594 304.29669189]
[-86.95446014 293.75387573]
[-83.33932495 279.30465698]
[-68.08460236 275.10891724]
[-57.41460419 264.56610107]
[-54.84225082 257.55749512]
[-46.36006546 253.90223694]
[-35.44032288 243.61831665]
[-24.52057838 233.33438110]
[-20.55999947 218.97599792]
[-5.20905304 215.14729309]
[5.71069002 204.86335754]
[15.86294746 193.82109070]
[25.19519234 182.07762146]
[34.52743530 170.33415222]
[30.36886978 156.05673218]
[35.47523880 141.90086365]
[48.08539581 133.36637878]
[63.48090363 133.89979553]
[72.81314850 122.15631104]
[82.14539337 110.41283417]
[79.92298126 104.91197205]
[79.35473633 99.00640106]
[80.48748016 93.18269348]
[69.08722687 83.43413544]
[52.87433624 80.96955872]
[47.15509033 65.60003662]
[57.81295776 53.13641739]
[73.88404083 56.40020370]
[78.83578491 72.03388977]
[90.23603058 81.78244781]
[100.49563599 79.33678436]
[110.62617493 82.27153015]
[122.48070526 73.08076477]
[134.33523560 63.89000320]
[146.18975830 54.69924164]
[158.04429626 45.50848007]
[160.46046448 32.77260590]
[170.60673523 25.36799049]
[182.67431641 26.85392761]
[194.74581909 17.95006943]
[189.63543701 -2.20182657]
[193.67161560 -22.54223251]
[206.02629089 -39.13132858]
[224.26469421 -48.77579498]
[244.82502747 -49.64347839]
[249.76707458 -63.80596542]
[254.70913696 -77.96845245]
[259.65118408 -92.13094330]
[264.59326172 -106.29342651]
[261.00076294 -122.29424286]
[273.24331665 -133.20532227]
[288.72683716 -127.80229187]
[291.52319336 -111.64331818]
[278.75573730 -101.35137177]
[273.81369019 -87.18888092]
[268.87161255 -73.02639771]
[263.92956543 -58.86390686]
[258.98751831 -44.70141983]
[265.97241211 -40.05202103]
[272.01135254 -34.22648621]
[276.90896606 -27.41331863]
[290.88455200 -32.86152649]
[304.79379272 -38.47692108]
[318.63473511 -44.25868988]
[332.47564697 -50.04045868]
[346.31658936 -55.82222748]
[360.15750122 -61.60399628]
[372.44213867 -73.28833771]
[387.07058716 -64.71832275]
[382.88504028 -48.28915787]
[365.93927002 -47.76307297]
[352.09832764 -41.98130417]
[338.25741577 -36.19953537]
[324.41650391 -30.41776657]
[310.57556152 -24.63599777]
[305.56652832 -19.10000992]
[296.33276367 -18.88594246]
[282.35717773 -13.43773174]
[283.39587402 -1.58075702]
[281.39938354 10.16848469]
[276.48992920 21.04470634]
[268.97967529 30.33750343]
[259.35101318 37.43775940]
[248.22541809 41.87755966]
[236.32347107 43.36103439]
[224.41813660 41.78404999]
[213.28459167 37.24148941]
[203.64968872 30.02157974]
[191.57817078 38.92543793]
[185.49134827 55.33972168]
[167.23506165 57.36300659]
[155.38052368 66.55377197]
[143.52600098 75.74453735]
[131.67146301 84.93529510]
[119.81694031 94.12606049]
[114.52742004 114.70266724]
[93.88887024 119.74507904]
[84.55662537 131.48855591]
[75.22438049 143.23202515]
[79.22122955 158.10923767]
[73.75540924 172.32115173]
[61.11864090 180.49281311]
[46.27091217 179.66639709]
[36.93866730 191.40986633]
[27.60642242 203.15333557]
[42.60638046 203.18814087]
[53.34414673 213.66192627]
[53.75221252 228.65638733]
[43.59999466 239.69868469]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 32]
[3 31]
[5 29]
[6 28]
[7 27]
[8 25]
[9 24]
[11 22]
[12 21]
[13 20]
[33 126]
[34 125]
[35 124]
[39 120]
[40 119]
[41 118]
[44 51]
[45 50]
[53 116]
[54 115]
[55 114]
[56 113]
[57 112]
[60 110]
[61 109]
[66 79]
[67 78]
[68 77]
[69 76]
[70 75]
[82 99]
[83 98]
[84 96]
[85 95]
[86 94]
[87 93]
[88 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
