%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAAAAAUAAACAACGUAACUGAAUUCAUUUUCUGGGGUCUUUCUCAGAGCCCAGAGAUUGAGAAAGUUUGUUUUGUGGUGUUUUCUUUCUUCUACA\
) } def
/len { sequence length } bind def

/coor [
[143.62640381 412.91287231]
[150.74703979 399.45120239]
[162.73143005 390.05471802]
[159.03724670 375.51672363]
[155.34306335 360.97872925]
[151.64888000 346.44076538]
[147.95469666 331.90277100]
[144.26051331 317.36477661]
[130.81146240 314.49734497]
[119.88076019 306.04437256]
[113.66294861 293.63009644]
[113.43785095 279.68103027]
[119.30757904 266.95175171]
[130.16496277 257.98101807]
[126.92469025 243.33517456]
[123.68442535 228.68933105]
[120.44415283 214.04348755]
[105.25247955 208.04209900]
[96.48954010 194.06231689]
[97.73385620 177.44458008]
[108.69597626 164.67517090]
[105.00179291 150.13717651]
[101.30760956 135.59919739]
[97.61342621 121.06121063]
[85.94144440 115.86277008]
[79.37815857 104.90001678]
[80.30857086 92.15665436]
[88.39458466 82.26346588]
[85.15431213 67.61762238]
[81.91404724 52.97178268]
[78.67378235 38.32593918]
[68.13807678 26.52299309]
[72.94338226 12.42482471]
[69.70310974 -2.22101665]
[66.46284485 -16.86685753]
[63.22257614 -31.51269913]
[59.98231125 -46.15853882]
[56.74204254 -60.80438232]
[53.50177383 -75.45022583]
[50.26150894 -90.09606171]
[39.72580719 -101.89900970]
[44.53110504 -115.99717712]
[41.29084015 -130.64302063]
[38.05057144 -145.28886414]
[25.35125351 -155.09226990]
[25.24205208 -171.13494873]
[37.80673981 -181.11033630]
[53.40676117 -177.36614990]
[60.07511520 -162.77462769]
[52.69641495 -148.52912903]
[55.93667984 -133.88328552]
[59.17694855 -119.23744965]
[69.48088074 -108.48207092]
[64.90734863 -93.33633423]
[68.14761353 -78.69049072]
[71.38788605 -64.04464722]
[74.62815094 -49.39880753]
[77.86841583 -34.75296783]
[81.10868835 -20.10712433]
[84.34895325 -5.46128368]
[87.58921814 9.18455791]
[97.89315796 19.93993568]
[93.31961823 35.08567429]
[96.55989075 49.73151398]
[99.80015564 64.37735748]
[103.04042053 79.02320099]
[117.11266327 87.49291229]
[120.90962219 103.47250366]
[112.15140533 117.36702728]
[115.84558868 131.90501404]
[119.53977203 146.44299316]
[123.23396301 160.98098755]
[136.47138977 165.16729736]
[145.80361938 175.29914856]
[148.84164429 188.62313843]
[144.88726807 201.59072876]
[135.08999634 210.80322266]
[138.33026123 225.44906616]
[141.57052612 240.09490967]
[144.81080627 254.74075317]
[160.55586243 259.50524902]
[171.72393799 271.45599365]
[175.37081909 287.30545044]
[170.60391235 302.75714111]
[158.79849243 313.67059326]
[162.49267578 328.20858765]
[166.18687439 342.74658203]
[169.88105774 357.28454590]
[173.57524109 371.82254028]
[177.26942444 386.36053467]
[192.28578186 388.89599609]
[204.96907043 397.32537842]
[213.12179565 410.18820190]
[215.33146667 425.25598145]
[211.21525574 439.91806030]
[201.48629761 451.63415527]
[187.83020020 458.37442017]
[172.61297607 458.97103882]
[158.47109985 453.32064819]
[147.85472107 442.40219116]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 90]
[4 89]
[5 88]
[6 87]
[7 86]
[8 85]
[14 80]
[15 79]
[16 78]
[17 77]
[21 72]
[22 71]
[23 70]
[24 69]
[28 66]
[29 65]
[30 64]
[31 63]
[33 61]
[34 60]
[35 59]
[36 58]
[37 57]
[38 56]
[39 55]
[40 54]
[42 52]
[43 51]
[44 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
