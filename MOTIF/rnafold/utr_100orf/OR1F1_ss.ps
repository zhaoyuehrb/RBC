%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGCGGGACAAACCAGUCGAGUGUCUCCGAGUUCCUCCUCCUGGGACUCUCCAGGCAGCCCCAGCAGCAGCAUCUCCUCUUUGUGUUCUUCCUCAGCA\
) } def
/len { sequence length } bind def

/coor [
[110.58823395 466.32678223]
[120.08448029 453.39617920]
[119.15193176 438.42517090]
[118.21939087 423.45419312]
[117.28684235 408.48321533]
[106.78950500 394.51513672]
[114.88850403 378.06967163]
[113.49081421 363.13491821]
[112.09312439 348.20019531]
[110.69543457 333.26544189]
[109.29774475 318.33071899]
[107.90005493 303.39596558]
[95.75337219 297.62408447]
[88.01993561 286.48901367]
[86.83426666 272.87460327]
[92.61775208 260.37274170]
[103.93869781 252.33590698]
[103.00615692 237.36492920]
[91.70449829 227.73123169]
[90.54550171 212.56181335]
[100.72683716 200.77290344]
[99.79428864 185.80192566]
[98.86174774 170.83094788]
[97.69648743 155.87626648]
[96.29879761 140.94152832]
[94.90110779 126.00679016]
[82.68080139 122.87706757]
[72.44154358 113.94327545]
[66.92669678 100.46310425]
[68.09708405 84.96530914]
[76.56223297 70.77851868]
[68.20445251 58.32269669]
[59.84666443 45.86687851]
[51.48888016 33.41106033]
[43.13109589 20.95523834]
[34.77331161 8.49941921]
[26.41552925 -3.95640039]
[10.84930325 -5.44858646]
[-0.07904284 -16.63363266]
[-1.20947742 -32.23030472]
[7.99175549 -44.87432861]
[23.18011475 -48.59558105]
[37.18412399 -41.63700485]
[43.39151382 -27.28422546]
[38.87134933 -12.31418419]
[47.22913361 0.14163539]
[55.58691788 12.59745502]
[63.94470215 25.05327415]
[72.30248260 37.50909424]
[80.66027069 49.96491623]
[89.01805115 62.42073441]
[96.47364807 63.23562622]
[93.41587830 48.55059814]
[106.43727875 41.10457993]
[117.54267883 51.18773651]
[111.38484955 64.86540985]
[118.84044647 65.68029785]
[129.69157410 55.32399750]
[134.33276367 40.19885254]
[148.88175964 37.00891876]
[159.73289490 26.65262032]
[163.82389832 10.77194881]
[179.69287109 6.63579798]
[191.01516724 18.49908447]
[186.14338684 34.15787506]
[170.08918762 37.50374985]
[159.23806763 47.86005020]
[155.37303162 62.24444580]
[140.04788208 66.17513275]
[129.19674683 76.53143311]
[130.93243408 108.12121582]
[109.83585358 124.60910034]
[111.23353577 139.54383850]
[112.63122559 154.47857666]
[116.60748291 162.90367126]
[113.83273315 169.89839172]
[114.76527405 184.86938477]
[115.69782257 199.84036255]
[127.26344299 210.27464294]
[127.99590302 225.47064209]
[117.97714233 236.43238831]
[118.90968323 251.40336609]
[133.25393677 260.20498657]
[139.52452087 275.64443970]
[135.46070862 291.63534546]
[122.83479309 301.99829102]
[124.23248291 316.93301392]
[125.63017273 331.86776733]
[127.02786255 346.80249023]
[128.42555237 361.73724365]
[129.82324219 376.67196655]
[139.30537415 385.58523560]
[140.07228088 398.17239380]
[132.25782776 407.55065918]
[133.19036865 422.52166748]
[134.12290955 437.49264526]
[135.05546570 452.46362305]
[146.08297729 464.11581421]
[143.70587158 479.98178101]
[129.74766541 487.89050293]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 97]
[3 96]
[4 95]
[5 94]
[7 91]
[8 90]
[9 89]
[10 88]
[11 87]
[12 86]
[17 82]
[18 81]
[21 78]
[22 77]
[23 76]
[24 74]
[25 73]
[26 72]
[31 51]
[32 50]
[33 49]
[34 48]
[35 47]
[36 46]
[37 45]
[57 70]
[58 69]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
