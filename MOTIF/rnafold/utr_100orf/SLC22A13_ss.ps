%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCUACAGAGCUACCCUAGUGUCCCCAGGCUGAGGAGGUAGUGACUGGCAUACAUGGCUCAGUUUGUCCAGGUCCUGGCUGAAAUAGGUGACUUUGGUCGCUUCCAGAUACAGCUAUUGAUCCUGCUGUGUGUUCUCAACUUCCUGUCUCCCU\
) } def
/len { sequence length } bind def

/coor [
[-35.99684906 383.75347900]
[-55.90676880 384.33081055]
[-60.39721680 398.64291382]
[-64.88766479 412.95498657]
[-69.37810516 427.26708984]
[-65.28000641 443.14593506]
[-77.17039490 454.43975830]
[-92.81745911 449.53045654]
[-96.12484741 433.46829224]
[-83.69020081 422.77664185]
[-79.19975281 408.46453857]
[-74.70930481 394.15246582]
[-70.21885681 379.84036255]
[-79.15783691 374.41287231]
[-86.83795929 367.30447388]
[-92.94777679 358.79953003]
[-97.23874664 349.23907471]
[-99.53532410 339.00720215]
[-99.74217224 328.51559448]
[-97.84807587 318.18701172]
[-93.92654419 308.43817139]
[-88.13293457 299.66299438]
[-80.69832611 292.21670532]
[-71.92028046 286.40136719]
[-62.15093994 282.45376587]
[-51.78291702 280.53558350]
[-41.23349762 280.72702026]
[-30.92784691 283.02316284]
[-24.18579865 269.62371826]
[-17.44375038 256.22427368]
[-10.70170212 242.82485962]
[-11.34512234 238.03845215]
[-8.94720936 232.80436707]
[-3.40523958 229.02732849]
[3.87428999 215.91213989]
[11.15381908 202.79693604]
[18.43334961 189.68173218]
[25.71287918 176.56652832]
[32.99240875 163.45133972]
[40.27193832 150.33613586]
[39.82301712 145.52758789]
[42.43107605 140.39498901]
[48.12155914 136.84564209]
[55.92660904 124.03622437]
[63.73165894 111.22680664]
[62.21413422 96.30377197]
[51.99033737 85.32770538]
[41.76654053 74.35163879]
[31.54274178 63.37557983]
[21.20823669 52.50368500]
[10.76408863 41.73708344]
[-4.39827776 37.21898651]
[-7.70634937 22.69638443]
[-18.15049744 11.92978096]
[-33.49203873 14.25716877]
[-47.25609970 7.09265423]
[-54.15011597 -6.80886221]
[-51.52320099 -22.10196304]
[-40.38545227 -32.90613937]
[-25.01956749 -35.06696320]
[-11.33403873 -27.75355721]
[-4.59123230 -13.77807236]
[-7.38389444 1.48563170]
[3.06025410 12.25223541]
[17.47558594 16.00023460]
[21.53069305 31.29293442]
[31.97484207 42.05953598]
[38.93040085 44.68629074]
[42.51880646 53.15177917]
[52.74260330 64.12784576]
[62.96640015 75.10390472]
[73.19019318 86.07997131]
[80.31731415 76.41122437]
[90.80354309 70.14875031]
[103.09616089 68.40178680]
[115.30329895 71.59696960]
[123.62104034 59.11437988]
[131.93879700 46.63178635]
[140.25654602 34.14919662]
[125.48339844 36.74809647]
[112.41147614 29.39113617]
[106.96748352 15.41390610]
[111.61968231 1.15357578]
[124.25881195 -6.92432976]
[139.15437317 -5.15735054]
[149.55284119 5.65337896]
[150.73970032 20.60606194]
[160.73895264 9.42504883]
[170.73820496 -1.75596547]
[180.73744202 -12.93697929]
[190.73669434 -24.11799431]
[200.73593140 -35.29900742]
[210.73518372 -46.48002243]
[213.55908203 -62.63420486]
[229.05178833 -68.01083374]
[241.27572632 -57.07889175]
[237.65596008 -41.08422470]
[221.91619873 -36.48077774]
[211.91694641 -25.29976273]
[201.91770935 -14.11874771]
[191.91845703 -2.93773365]
[181.91920471 8.24328041]
[171.91996765 19.42429543]
[161.92071533 30.60530853]
[152.73913574 42.46694565]
[144.42138672 54.94953537]
[136.10363770 67.43212891]
[127.78588867 79.91471863]
[133.70121765 93.69908142]
[148.47917175 96.27053070]
[163.25711060 98.84197998]
[178.03506470 101.41342926]
[192.81300354 103.98487854]
[207.59094238 106.55632782]
[222.36889648 109.12777710]
[232.15316772 97.28870392]
[246.55171204 91.94293976]
[261.69140625 94.52847290]
[273.49975586 104.34980011]
[278.80038452 118.76503754]
[276.16738892 133.89656067]
[266.30911255 145.67407227]
[251.87731934 150.92945862]
[236.75411987 148.24906921]
[225.00756836 138.35391235]
[219.79743958 123.90572357]
[205.01950073 121.33427429]
[190.24156189 118.76282501]
[175.46360779 116.19137573]
[160.68566895 113.61992645]
[145.90771484 111.04847717]
[131.12977600 108.47702789]
[124.26538086 120.63395691]
[113.02896881 128.61466980]
[99.64144135 131.02815247]
[86.67111969 127.56584930]
[76.54107666 119.03186035]
[68.73602295 131.84127808]
[60.93097687 144.65069580]
[53.38713455 157.61566162]
[46.10760880 170.73086548]
[38.82807922 183.84606934]
[31.54854774 196.96125793]
[24.26901817 210.07646179]
[16.98948860 223.19166565]
[9.70995998 236.30685425]
[2.69773054 249.56689453]
[-4.04431772 262.96633911]
[-10.78636551 276.36575317]
[-17.52841377 289.76519775]
[-3.60419774 304.25302124]
[3.85697722 322.87918091]
[3.78565836 342.91467285]
[-3.78572679 361.43295288]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[5 10]
[28 150]
[29 149]
[30 148]
[31 147]
[34 146]
[35 145]
[36 144]
[37 143]
[38 142]
[39 141]
[40 140]
[43 139]
[44 138]
[45 137]
[46 72]
[47 71]
[48 70]
[49 69]
[50 67]
[51 66]
[53 64]
[54 63]
[76 108]
[77 107]
[78 106]
[79 105]
[87 104]
[88 103]
[89 102]
[90 101]
[91 100]
[92 99]
[93 98]
[109 132]
[110 131]
[111 130]
[112 129]
[113 128]
[114 127]
[115 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
