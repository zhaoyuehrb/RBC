%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:14:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACCAGCCAGAGGCCCCCUGCUCCAGCACGGGGCCGCGCCUCGCGGUGGCCCGCGAGCUGCUCCUGGCUGCGCUGGAGGAACUGAGCCAAGAGCAGC\
) } def
/len { sequence length } bind def

/coor [
[119.47931671 120.01381683]
[96.67098999 124.93468475]
[90.34346008 138.53477478]
[84.01593781 152.13485718]
[88.14314270 167.63795471]
[78.48020172 180.44447327]
[62.43969345 180.73037720]
[52.32652664 168.27632141]
[55.89865494 152.63600159]
[70.41584778 145.80734253]
[76.74337006 132.20724487]
[83.07089996 118.60716248]
[73.53268433 108.91505432]
[69.81055450 94.41935730]
[74.19396210 78.68058777]
[59.23928833 77.51532745]
[44.28461838 76.35006714]
[29.32994843 75.18481445]
[14.37527657 74.01955414]
[-0.57939374 72.85429382]
[-14.93892574 79.49616241]
[-27.02667236 70.79354095]
[-41.98134232 69.62828827]
[-56.93601608 68.46302795]
[-71.49076843 76.01889801]
[-85.16419983 66.96520233]
[-83.89025116 50.61561203]
[-68.97945404 43.78918076]
[-55.77075577 53.50835800]
[-40.81608582 54.67361450]
[-25.86141586 55.83887100]
[-12.57154179 49.11365891]
[0.58586401 57.89962769]
[15.54053497 59.06488419]
[30.49520493 60.23014069]
[45.44987488 61.39540100]
[60.40454483 62.56065750]
[75.35921478 63.72591400]
[81.02038574 58.80644989]
[68.16423035 51.07863617]
[71.54106903 36.46368027]
[86.48422241 35.15900040]
[92.34273529 48.96752167]
[98.00390625 44.04805756]
[98.93644714 29.07707214]
[99.86899567 14.10608864]
[100.80153656 -0.86489511]
[101.73408508 -15.83587933]
[102.66662598 -30.80686378]
[94.88532257 -45.24235153]
[103.72527313 -59.05492783]
[120.09269714 -58.03540039]
[127.15019226 -43.23256683]
[117.63761139 -29.87431908]
[116.70507050 -14.90333462]
[115.77252197 0.06764944]
[114.83998108 15.03863335]
[113.90743256 30.00961685]
[112.97489166 44.98060226]
[121.71600342 57.17047119]
[136.19477844 61.09029770]
[150.67355347 65.01012421]
[165.15232849 68.92995453]
[179.63110352 72.84978485]
[194.10987854 76.76961517]
[208.58865356 80.68944550]
[223.93122864 76.82728577]
[234.19432068 87.62164307]
[248.67309570 91.54147339]
[263.15185547 95.46130371]
[277.63064575 99.38113403]
[292.10943604 103.30096436]
[301.07653809 91.05533600]
[313.86386108 82.87922668]
[328.74200439 79.87837982]
[343.69885254 82.45863342]
[356.71154785 90.27103424]
[366.02029419 102.25901794]
[370.36614990 116.80130005]
[369.16134644 131.93116760]
[362.56884766 145.60243225]
[351.48022461 155.96615601]
[337.39511108 161.62072754]
[322.21841431 161.80143738]
[308.00268555 156.48381042]
[296.67044067 146.38703918]
[289.75430298 132.87663269]
[288.18960571 117.77973938]
[273.71081543 113.85990906]
[259.23205566 109.94007874]
[244.75326538 106.02024841]
[230.27449036 102.10041809]
[215.96754456 106.24295044]
[204.66882324 95.16822052]
[190.19004822 91.24839020]
[175.71127319 87.32855988]
[161.23249817 83.40872955]
[146.75372314 79.48890686]
[132.27494812 75.56907654]
[117.79617310 71.64924622]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 12]
[3 11]
[4 10]
[15 38]
[16 37]
[17 36]
[18 35]
[19 34]
[20 33]
[22 31]
[23 30]
[24 29]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
[60 100]
[61 99]
[62 98]
[63 97]
[64 96]
[65 95]
[66 94]
[68 92]
[69 91]
[70 90]
[71 89]
[72 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
