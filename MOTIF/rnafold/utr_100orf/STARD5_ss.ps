%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:27:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCUCCAGCCUCCAGGCACCCGGGAUCCAGCGCCGCCGCUCAUAACACCCGCGACCCCGCAGCUAAGCGCAGCUCCCGACGCAAUGGACCCGGCGCUGGCAGCCCAGAUGAGCGAGGCUGUGGCCGAGAAGAUGCUCCAGUACCGGCGGGACACAGCAGGCUGGAAGAUUUGCCGGGAAGGCA\
) } def
/len { sequence length } bind def

/coor [
[114.00091553 305.02093506]
[104.82397461 317.33676147]
[90.71225739 323.39935303]
[75.46175385 321.57791138]
[63.17476273 312.36242676]
[57.15643311 298.23178101]
[59.02565765 282.98703003]
[68.27962494 270.72900391]
[82.42906952 264.75500488]
[84.20793915 249.86083984]
[85.98680878 234.96669006]
[87.76567841 220.07255554]
[89.41802216 205.16383362]
[90.94372559 190.24162292]
[84.54108429 176.79338074]
[93.64192200 163.85176086]
[95.16761780 148.92955017]
[96.69331360 134.00735474]
[80.60160065 126.20449829]
[71.33026123 111.89345551]
[70.84386444 95.68056488]
[78.42836761 82.29047394]
[69.81892395 70.00725555]
[61.20948410 57.72403336]
[56.43446732 55.50473404]
[53.31414413 52.01676941]
[52.05479813 48.10917664]
[52.49320602 44.58885193]
[44.52042770 31.88315201]
[36.54765320 19.17745209]
[21.40199471 15.53783131]
[13.49746323 2.53886819]
[17.06062317 -11.87777042]
[9.08784580 -24.58347130]
[1.11506891 -37.28917313]
[-11.27428627 -40.92955780]
[-17.64996910 -51.69526291]
[-15.05749607 -63.52540970]
[-22.81337166 -76.36466217]
[-30.56924629 -89.20391846]
[-38.32511902 -102.04316711]
[-46.08099365 -114.88242340]
[-53.83686829 -127.72167206]
[-61.59274292 -140.56092834]
[-74.73320007 -137.15150452]
[-88.28804016 -137.37380981]
[-101.27338409 -141.20159912]
[-112.74938965 -148.34733582]
[-121.88825226 -158.28369141]
[-128.03393555 -170.28245544]
[-130.74926758 -183.46797180]
[-129.84700012 -196.88098145]
[-143.94721985 -201.99798584]
[-158.04743958 -207.11499023]
[-174.09150696 -203.72085571]
[-184.85018921 -216.09754944]
[-179.25588989 -231.51298523]
[-163.06353760 -234.10908508]
[-152.93043518 -221.21520996]
[-138.83021545 -216.09820557]
[-124.72998810 -210.98120117]
[-116.35849762 -222.22180176]
[-105.18938446 -230.68843079]
[-110.42591858 -244.74470520]
[-115.66246033 -258.80096436]
[-120.89899445 -272.85723877]
[-126.84074402 -279.82583618]
[-126.10289001 -287.19689941]
[-131.09999084 -301.34005737]
[-136.09709167 -315.48321533]
[-141.09417725 -329.62640381]
[-156.21817017 -331.36608887]
[-169.03479004 -339.46676636]
[-177.03057861 -352.27642822]
[-178.66505432 -367.22601318]
[-173.66725159 -381.34448242]
[-163.07897949 -391.84942627]
[-168.07608032 -405.99258423]
[-182.98881531 -410.28094482]
[-192.50627136 -422.53646851]
[-192.96878052 -438.04663086]
[-184.19853210 -450.84750366]
[-169.56782532 -456.01684570]
[-154.70248413 -451.56698608]
[-145.31854248 -439.20895386]
[-145.02430725 -423.69467163]
[-153.93290710 -410.98968506]
[-148.93582153 -396.84652710]
[-134.09834290 -395.32507324]
[-121.34037018 -387.48010254]
[-113.22042847 -374.82199097]
[-111.39414978 -359.83251953]
[-116.27693176 -345.47821045]
[-126.95101929 -334.62347412]
[-121.95392609 -320.48031616]
[-116.95682526 -306.33715820]
[-111.95973206 -292.19400024]
[-106.84272766 -278.09378052]
[-101.60618591 -264.03750610]
[-96.36965179 -249.98124695]
[-91.13311005 -235.92497253]
[-74.66915131 -236.64833069]
[-58.84542465 -231.96231079]
[-45.39252853 -222.36367798]
[-35.78689575 -208.88734436]
[-31.08874512 -192.99475098]
[-31.82510376 -176.41545105]
[-37.93070602 -160.95887756]
[-48.75349045 -148.31680298]
[-40.99761581 -135.47755432]
[-33.24174118 -122.63829803]
[-25.48586845 -109.79904175]
[-17.72999382 -96.95979309]
[-9.97411823 -84.12053680]
[-2.21824360 -71.28128052]
[13.58056545 -63.66398239]
[13.82076931 -45.26194763]
[21.79354668 -32.55624771]
[29.76632309 -19.85054779]
[44.29755783 -16.78807068]
[52.56408691 -4.01625776]
[49.25335312 11.20467472]
[57.22612762 23.91037560]
[65.19890594 36.61607742]
[73.49270630 49.11458969]
[82.10214996 61.39781189]
[90.71158600 73.68103027]
[107.22760773 71.42554474]
[123.00392151 79.16186523]
[132.24191284 95.15928650]
[130.94250488 114.49122620]
[144.55796814 120.78557587]
[158.17344666 127.07992554]
[171.78892517 133.37428284]
[186.46604919 128.15702820]
[200.18441772 134.73435974]
[205.06781006 148.75891113]
[218.68328857 155.05325317]
[232.29876709 161.34761047]
[245.91423035 167.64195251]
[259.52972412 173.93630981]
[273.14520264 180.23065186]
[283.31588745 174.02243042]
[295.10052490 173.51072693]
[305.55609131 178.70721436]
[312.12756348 188.21247864]
[313.27203369 199.59077454]
[326.66592407 206.34382629]
[340.39953613 199.12113953]
[355.75079346 201.38357544]
[366.81680298 212.26121521]
[369.34246826 227.57136536]
[362.35662842 241.42695618]
[348.54547119 248.50024414]
[333.21966553 246.07139587]
[322.27230835 235.07437134]
[319.91287231 219.73771667]
[306.51898193 212.98466492]
[289.53051758 219.75984192]
[272.68624878 211.85134888]
[266.85083008 193.84613037]
[253.23536682 187.55177307]
[239.61988831 181.25743103]
[226.00440979 174.96307373]
[212.38893127 168.66873169]
[198.77346802 162.37437439]
[184.92617798 167.73985291]
[171.02848816 161.55044556]
[165.49456787 146.98974609]
[151.87910461 140.69540405]
[138.26362610 134.40104675]
[124.64814758 128.10670471]
[111.61552429 135.53305054]
[110.08982086 150.45526123]
[108.56412506 165.37745667]
[114.85763550 179.89305115]
[105.86592865 191.76733398]
[104.34023285 206.68952942]
[106.58394623 215.56825256]
[102.65982819 221.85142517]
[100.88095856 236.74555969]
[99.10208893 251.63970947]
[97.32321930 266.53387451]
[109.66773987 275.67214966]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 183]
[10 182]
[11 181]
[12 180]
[13 178]
[14 177]
[16 175]
[17 174]
[18 173]
[22 127]
[23 126]
[24 125]
[28 124]
[29 123]
[30 122]
[33 119]
[34 118]
[35 117]
[38 115]
[39 114]
[40 113]
[41 112]
[42 111]
[43 110]
[44 109]
[52 61]
[53 60]
[54 59]
[63 101]
[64 100]
[65 99]
[66 98]
[68 97]
[69 96]
[70 95]
[71 94]
[77 88]
[78 87]
[131 172]
[132 171]
[133 170]
[134 169]
[137 166]
[138 165]
[139 164]
[140 163]
[141 162]
[142 161]
[147 158]
[148 157]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
