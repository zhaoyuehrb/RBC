%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:55:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUGACCCUCAGGUGAUGCGCCAGGGCCGGCUGCCGUCGGGGACAGGGCUUUCCAUAGCCAUGGCCCAGCAGUGGAGCCUCCAAAGGCUCGCAGGCCGCCAUCCGCAGGACAGCUAUGAGGACAGCACCCAGUCCAGCAUCUUCACCUACACCAACAGCA\
) } def
/len { sequence length } bind def

/coor [
[106.66854858 177.25465393]
[119.16989136 168.68188477]
[115.40553284 154.16191101]
[111.64117432 139.64193726]
[107.87681580 125.12196350]
[93.13380432 122.35725403]
[84.36444855 134.52682495]
[75.59510040 146.69639587]
[66.82574463 158.86596680]
[65.76890564 165.47526550]
[62.06420517 169.86851501]
[57.46920013 171.33024597]
[48.23171616 183.14840698]
[38.99423218 194.96656799]
[29.75674629 206.78472900]
[24.76626968 222.98754883]
[7.81515789 222.67749023]
[3.42056441 206.30300903]
[17.93858719 197.54724121]
[27.17607117 185.72908020]
[36.41355515 173.91091919]
[45.65104294 162.09275818]
[54.65617371 150.09661865]
[63.42552567 137.92704773]
[72.19487762 125.75747681]
[80.96423340 113.58790588]
[72.43399811 101.24954224]
[57.95144272 105.15538788]
[43.46888733 109.06122589]
[28.98633385 112.96706390]
[14.50377750 116.87290955]
[3.31623054 128.86335754]
[-12.59845924 124.90675354]
[-16.86862373 109.07331848]
[-5.10148239 97.65112305]
[10.59793663 102.39035034]
[25.08049202 98.48451233]
[39.56304932 94.57866669]
[54.04560471 90.67282867]
[68.52816010 86.76699066]
[79.28884125 76.31674194]
[83.61684418 61.95469666]
[87.94485474 47.59264755]
[92.27285767 33.23060226]
[87.62873840 15.43585110]
[100.82044983 3.89503670]
[104.86740112 -10.54872227]
[108.77323914 -25.03127861]
[112.53759766 -39.55125046]
[116.30195618 -54.07122421]
[119.92447662 -68.62722778]
[123.40480804 -83.21788788]
[126.88513947 -97.80854797]
[130.22294617 -112.43246460]
[133.41792297 -127.08825684]
[136.61291504 -141.74403381]
[139.80789185 -156.39982605]
[143.00286865 -171.05561829]
[146.19784546 -185.71141052]
[132.44335938 -208.22053528]
[150.16293335 -232.86285400]
[150.74818420 -247.85144043]
[151.33341980 -262.84002686]
[151.91865540 -277.82858276]
[152.50390625 -292.81716919]
[144.62727356 -300.41024780]
[142.30570984 -310.87622070]
[146.07513428 -320.67648315]
[154.45301819 -326.63369751]
[155.62260437 -341.58801270]
[147.83523560 -351.91140747]
[149.14810181 -364.37210083]
[158.31005859 -372.31887817]
[159.77120972 -387.24755859]
[161.08663940 -402.18975830]
[162.25624084 -417.14410400]
[163.42582703 -432.09841919]
[164.59541321 -447.05276489]
[165.76501465 -462.00708008]
[166.93460083 -476.96142578]
[159.38294983 -491.51837158]
[168.44061279 -505.18917847]
[184.78982544 -503.91049194]
[191.61193848 -488.99771118]
[181.88893127 -475.79183960]
[180.71934509 -460.83749390]
[179.54975891 -445.88317871]
[178.38015747 -430.92883301]
[177.21057129 -415.97451782]
[176.04096985 -401.02017212]
[178.66790771 -394.07135010]
[174.69987488 -385.78640747]
[173.23872375 -370.85772705]
[181.35276794 -355.32153320]
[170.57693481 -340.41842651]
[169.40734863 -325.46408081]
[179.02639771 -308.72418213]
[167.49247742 -292.23193359]
[166.90724182 -277.24334717]
[166.32200623 -262.25479126]
[165.73675537 -247.26620483]
[165.15151978 -232.27761841]
[178.19039917 -224.86227417]
[190.77311707 -233.02777100]
[200.76831055 -246.72201538]
[216.69433594 -240.90837097]
[215.51666260 -223.99537659]
[198.93861389 -220.44505310]
[186.35589600 -212.27955627]
[185.23751831 -200.10466003]
[179.45802307 -190.20837402]
[170.65362549 -184.13528442]
[160.85363770 -182.51641846]
[157.65866089 -167.86064148]
[154.46366882 -153.20484924]
[151.26869202 -138.54905701]
[148.07371521 -123.89327240]
[144.87873840 -109.23748779]
[146.53500366 -101.99568939]
[141.47579956 -94.32821655]
[137.99546814 -79.73755646]
[134.51513672 -65.14690399]
[136.02978516 -57.87416458]
[130.82192993 -50.30686569]
[127.05757141 -35.78689194]
[123.29321289 -21.26692009]
[124.66566467 -13.96601486]
[119.31115723 -6.50177097]
[115.26420593 7.94198847]
[120.92446136 18.66833496]
[117.63346100 30.75808716]
[106.63490295 37.55860901]
[102.30690002 51.92065430]
[97.97889709 66.28269958]
[93.65088654 80.64474487]
[100.30817413 78.30996704]
[107.79173279 78.34466553]
[115.23756409 81.02397919]
[121.69784546 86.30396271]
[126.25897980 93.79954529]
[128.16389465 102.80583191]
[126.92272949 112.36280823]
[122.39678955 121.35760498]
[126.16114807 135.87757874]
[129.92550659 150.39755249]
[133.68986511 164.91752625]
[148.78164673 166.33666992]
[162.47656250 172.83473206]
[173.12091064 183.62702942]
[179.42932129 197.41033936]
[180.64001465 212.52027893]
[176.60681152 227.13221741]
[167.81672668 239.48171997]
[155.33120728 248.07751465]
[140.65794373 251.88162231]
[125.56880188 250.43466187]
[111.88587189 243.91137695]
[101.26143646 233.09947205]
[94.97843933 219.30455017]
[93.79559326 204.19241333]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 146]
[3 145]
[4 144]
[5 143]
[6 26]
[7 25]
[8 24]
[9 23]
[12 22]
[13 21]
[14 20]
[15 19]
[27 40]
[28 39]
[29 38]
[30 37]
[31 36]
[41 135]
[42 134]
[43 133]
[44 132]
[46 129]
[47 128]
[48 126]
[49 125]
[50 124]
[51 122]
[52 121]
[53 120]
[54 118]
[55 117]
[56 116]
[57 115]
[58 114]
[59 113]
[61 102]
[62 101]
[63 100]
[64 99]
[65 98]
[69 96]
[70 95]
[73 93]
[74 92]
[75 90]
[76 89]
[77 88]
[78 87]
[79 86]
[80 85]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
