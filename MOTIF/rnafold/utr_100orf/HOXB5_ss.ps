%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:45:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGAAGCACAGGGUUAUAACGACCACGAUCCACAAAUCAAGCCCUCCAAAAUCACCCAAAUGAGCUCGUACUUUGUAAACUCCUUCUCGGGGCGUUAUCCAAAUGGCCCGGACUAUCAGUUGCUAAAUUAUGGCAGUGGCAGCUCUCUGAGCGGCUCUU\
) } def
/len { sequence length } bind def

/coor [
[-96.30712128 193.55645752]
[-109.67222595 200.36630249]
[-123.03732300 207.17616272]
[-136.40242004 213.98602295]
[-135.90058899 230.22450256]
[-142.49537659 245.00843811]
[-154.82478333 255.40869141]
[-170.39616394 259.38879395]
[-186.09010315 256.20358276]
[-198.78533936 246.53822327]
[-212.01416016 253.60917664]
[-225.24298096 260.68011475]
[-238.47178650 267.75106812]
[-251.70060730 274.82202148]
[-264.92944336 281.89297485]
[-261.20306396 296.50042725]
[-261.08148193 311.57519531]
[-264.57174683 326.24084473]
[-271.47094727 339.64474487]
[-281.37796021 351.00762939]
[-293.71679688 359.66882324]
[-307.77011108 365.12481689]
[-322.72085571 367.05838013]
[-337.69982910 365.35711670]
[-351.83612061 360.11993408]
[-364.30792236 351.65130615]
[-374.39013672 340.44360352]
[-381.49655151 327.14840698]
[-385.21405029 312.53869629]
[-385.32650757 297.46386719]
[-381.82733154 282.80032349]
[-374.92001343 269.40060425]
[-365.00613403 258.04376221]
[-352.66204834 249.39002991]
[-338.60540771 243.94256592]
[-323.65350342 242.01806641]
[-308.67559814 243.72840881]
[-294.54244995 248.97415161]
[-282.07577515 257.45034790]
[-272.00036621 268.66415405]
[-258.77157593 261.59320068]
[-245.54273987 254.52224731]
[-232.31391907 247.45130920]
[-219.08509827 240.38035583]
[-205.85629272 233.30940247]
[-207.11892700 219.46662903]
[-202.98797607 206.14898682]
[-194.05766296 195.38398743]
[-181.65547180 188.82371521]
[-167.64492798 187.49139404]
[-154.14555359 191.62182617]
[-143.21228027 200.62092590]
[-129.84718323 193.81106567]
[-116.48207855 187.00120544]
[-103.11698151 180.19134521]
[-103.48006439 168.95449829]
[-99.58285522 158.35398865]
[-91.95850372 149.95196533]
[-81.69236755 145.00196838]
[-70.26761627 144.26202393]
[-59.35098267 147.87881470]
[-50.54959488 155.36058044]
[-36.80677795 149.34934998]
[-23.06395721 143.33810425]
[-9.32113838 137.32687378]
[-4.42778254 131.73609924]
[4.75101376 131.33547974]
[18.60920715 125.59523010]
[32.46739960 119.85498047]
[30.21381760 109.20657349]
[29.62876892 98.33805847]
[30.72624016 87.50926971]
[33.47999191 76.97912598]
[37.82418442 66.99939728]
[43.65494919 57.80868149]
[50.83288193 49.62672806]
[59.18635941 42.64915848]
[68.51565552 37.04280472]
[78.59772491 32.94170380]
[89.19150543 30.44391823]
[100.04370117 29.60915947]
[110.89485931 30.45739174]
[121.48552704 32.96833038]
[131.56248474 37.08194733]
[140.88482666 42.69988251]
[150.84860229 31.48725510]
[154.23435974 22.94632721]
[161.11978149 20.15476418]
[171.30178833 9.13992691]
[181.48379517 -1.87491095]
[191.66581726 -12.88974857]
[195.35169983 -28.27561188]
[209.67266846 -32.36944962]
[219.85467529 -43.38428497]
[230.03668213 -54.39912415]
[240.21868896 -65.41396332]
[241.02813721 -81.43658447]
[254.14332581 -90.67624664]
[269.50341797 -86.04508209]
[275.32543945 -71.09571838]
[267.14324951 -57.29602432]
[251.23353577 -55.23194885]
[241.05152893 -44.21711349]
[230.86950684 -33.20227432]
[220.68750000 -22.18743706]
[217.72988892 -7.58942938]
[202.68064880 -2.70773745]
[192.49864197 8.30710030]
[182.31663513 19.32193756]
[172.13461304 30.33677483]
[162.06123352 41.45104218]
[152.09744263 52.66366577]
[159.62315369 62.58406830]
[165.28309631 73.67530823]
[168.90016174 85.59031677]
[170.36117554 97.95623779]
[169.62040710 110.38611603]
[166.70103455 122.49098969]
[180.32318115 128.77088928]
[193.94532776 135.05078125]
[207.56747437 141.33067322]
[221.18962097 147.61056519]
[234.81176758 153.89047241]
[248.43391418 160.17036438]
[262.05606079 166.45025635]
[274.15036011 157.07015991]
[289.22052002 154.39640808]
[303.80352783 159.04341125]
[314.54830933 169.94334412]
[318.98577881 184.59146118]
[316.09625244 199.62173462]
[306.54373169 211.58033752]
[292.52331543 217.71923828]
[277.25677490 216.62779236]
[264.25225830 208.55677795]
[256.49810791 195.36088562]
[255.77616882 180.07240295]
[242.15402222 173.79251099]
[228.53187561 167.51261902]
[214.90972900 161.23271179]
[201.28758240 154.95281982]
[187.66543579 148.67292786]
[174.04328918 142.39303589]
[160.42114258 136.11312866]
[147.02474976 152.37886047]
[129.41416931 163.95059204]
[109.16760254 169.79130554]
[88.09947205 169.37759399]
[68.09782410 162.74650574]
[50.95512390 150.49229431]
[38.20764923 133.71316528]
[24.34945869 139.45341492]
[10.49126530 145.19367981]
[-3.30990601 151.06970215]
[-17.05272484 157.08093262]
[-30.79554558 163.09216309]
[-44.53836441 169.10339355]
[-47.79250717 187.90846252]
[-61.57172012 200.89628601]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 55]
[2 54]
[3 53]
[4 52]
[10 45]
[11 44]
[12 43]
[13 42]
[14 41]
[15 40]
[62 157]
[63 156]
[64 155]
[65 154]
[67 153]
[68 152]
[69 151]
[85 112]
[86 111]
[88 110]
[89 109]
[90 108]
[91 107]
[93 105]
[94 104]
[95 103]
[96 102]
[118 144]
[119 143]
[120 142]
[121 141]
[122 140]
[123 139]
[124 138]
[125 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
