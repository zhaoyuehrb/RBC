%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUGGGGCUUCCGCUUCCGGUUCUGACGGACGCUUCGGCCGUAACGAUGAUCGGAGACAUCCUGCUGUUCGGGACGUUGCUGAUGAAUGCCGGGGCGGUGCUGAACUUUAAGCUGAAAAAGAAGGACACGCAGGGCUUUGGGGAGG\
) } def
/len { sequence length } bind def

/coor [
[105.01127625 312.40658569]
[104.05670929 297.43698120]
[103.10213470 282.46740723]
[102.14756775 267.49780273]
[101.19300079 252.52821350]
[100.23843384 237.55860901]
[99.28386688 222.58901978]
[98.32929230 207.61941528]
[97.37472534 192.64982605]
[96.42015839 177.68023682]
[95.46559143 162.71063232]
[86.57176971 154.44763184]
[85.69214630 141.93687439]
[93.84774017 131.88609314]
[93.21112061 116.89961243]
[79.96299744 109.86348724]
[66.71605682 102.82796478]
[53.94311905 110.69257355]
[41.17018127 118.55718231]
[28.39724350 126.42179108]
[26.29784775 141.91781616]
[14.69425297 152.40068054]
[-0.93468148 152.92071533]
[-13.20944881 143.23236084]
[-16.33428001 127.91017914]
[-8.83372402 114.18881989]
[5.75068426 108.54709625]
[20.53263474 113.64885712]
[33.30557251 105.78424835]
[46.07850647 97.91963959]
[58.85144424 90.05503082]
[63.54722214 75.80899048]
[57.95437622 61.89065170]
[52.36152649 47.97231674]
[46.76868057 34.05398178]
[41.17583466 20.13564491]
[35.58298492 6.21731043]
[29.99013901 -7.70102501]
[24.39729309 -21.61935997]
[18.80444527 -35.53769684]
[8.54472256 -34.99296570]
[-1.48921156 -37.12067795]
[-10.61435699 -41.76693344]
[-18.21192360 -48.60670471]
[-23.76929474 -57.16656494]
[-26.91460419 -66.85746002]
[-27.44161606 -77.01520538]
[-25.32321930 -86.94606781]
[-20.71267891 -95.97407532]
[-13.93257523 -103.48708344]
[-5.45225573 -108.97824860]
[-9.23192692 -123.49423981]
[-13.01159763 -138.01023865]
[-16.79126930 -152.52622986]
[-20.57094002 -167.04222107]
[-31.53592110 -178.44747925]
[-27.25527382 -192.71369934]
[-31.03494453 -207.22970581]
[-34.81461716 -221.74569702]
[-45.77959824 -233.15093994]
[-41.49895096 -247.41717529]
[-45.27862167 -261.93316650]
[-49.05829239 -276.44915771]
[-52.83796310 -290.96514893]
[-56.61763382 -305.48114014]
[-69.67080688 -314.80822754]
[-70.37320709 -330.83587646]
[-58.18601990 -341.26910400]
[-42.45820236 -338.10440063]
[-35.25479889 -323.76943970]
[-42.10163879 -309.26083374]
[-38.32196808 -294.74484253]
[-34.54229736 -280.22882080]
[-30.76262665 -265.71282959]
[-26.98295593 -251.19685364]
[-16.28832054 -240.82987976]
[-20.29862022 -225.52536011]
[-16.51894951 -211.00936890]
[-12.73927879 -196.49337769]
[-2.04464555 -186.12640381]
[-6.05494547 -170.82189941]
[-2.27527428 -156.30589294]
[1.50439656 -141.78990173]
[5.28406763 -127.27391052]
[9.06373882 -112.75791931]
[28.78461647 -108.83395386]
[43.93295288 -95.49765778]
[50.37187958 -76.29093170]
[46.29283905 -56.37208176]
[32.72278214 -41.13054276]
[38.31562805 -27.21220779]
[43.90847397 -13.29387188]
[49.50132370 0.62446320]
[55.09416962 14.54279900]
[60.68701553 28.46113396]
[66.27986145 42.37947083]
[71.87271118 56.29780579]
[77.46556091 70.21614075]
[121.57251740 91.39921570]
[136.40722656 93.61985016]
[151.24194336 95.84049225]
[166.09939575 97.90356445]
[180.97790527 99.80883026]
[190.65071106 90.37650299]
[203.80165100 88.29003143]
[215.56907654 94.09284210]
[221.73379517 105.45339203]
[236.56851196 107.67403412]
[251.40321350 109.89466858]
[266.23794556 112.11531067]
[277.02017212 100.95632172]
[292.30807495 98.29930878]
[306.22311401 105.16595459]
[313.41470337 118.91588593]
[311.11752319 134.26197815]
[300.21487427 145.30334473]
[284.89904785 147.79435730]
[271.05929565 140.77716064]
[264.01730347 126.95002747]
[249.18258667 124.72938538]
[234.34786987 122.50874329]
[219.51315308 120.28810883]
[206.46862793 130.85353088]
[189.48036194 128.70658875]
[179.07263184 114.68733978]
[164.19412231 112.78207397]
[157.11091614 115.06804657]
[149.02130127 110.67520905]
[134.18659973 108.45456696]
[119.35187531 106.23392487]
[108.19760895 116.26300049]
[108.83422852 131.24948120]
[119.07463074 146.51496887]
[110.43518829 161.75607300]
[111.38975525 176.72566223]
[112.34432220 191.69525146]
[113.29888916 206.66485596]
[114.25345612 221.63444519]
[115.20803070 236.60404968]
[116.16259766 251.57363892]
[117.11716461 266.54324341]
[118.07173157 281.51281738]
[119.02630615 296.48242188]
[119.98087311 311.45202637]
[129.51309204 324.79626465]
[122.47738647 339.60946655]
[106.11148071 340.65307617]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 144]
[2 143]
[3 142]
[4 141]
[5 140]
[6 139]
[7 138]
[8 137]
[9 136]
[10 135]
[11 134]
[14 132]
[15 131]
[17 31]
[18 30]
[19 29]
[20 28]
[32 98]
[33 97]
[34 96]
[35 95]
[36 94]
[37 93]
[38 92]
[39 91]
[40 90]
[51 85]
[52 84]
[53 83]
[54 82]
[55 81]
[57 79]
[58 78]
[59 77]
[61 75]
[62 74]
[63 73]
[64 72]
[65 71]
[99 130]
[100 129]
[101 128]
[102 126]
[103 125]
[107 122]
[108 121]
[109 120]
[110 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
