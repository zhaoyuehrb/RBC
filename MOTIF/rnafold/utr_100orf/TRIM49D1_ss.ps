%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:26:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAUUCUGGAAUCUCGCAAGUCUUCCAGAGGGAACUCACCUGCCCCAUCUGCCUGAACUACUUCAUAGACCCGGUCACCAUAGACUGUGGGCACAGCU\
) } def
/len { sequence length } bind def

/coor [
[142.06513977 171.46383667]
[127.75041962 175.94590759]
[112.82693481 174.43276978]
[99.70321655 167.16860962]
[90.49732971 155.32582092]
[86.69504547 140.81573486]
[88.90948486 125.98159027]
[75.02908325 131.66792297]
[61.14867401 137.35424805]
[47.26826859 143.04057312]
[33.38785934 148.72689819]
[19.50745392 154.41322327]
[5.62704706 160.09954834]
[-5.18860960 174.90051270]
[-22.43172264 172.07623291]
[-36.12857056 178.19149780]
[-45.31066895 191.77902222]
[-61.64753342 190.35112000]
[-68.33319855 175.37667847]
[-58.49002457 162.26011658]
[-42.24382782 164.49464417]
[-28.54697800 158.37939453]
[-23.86099243 147.10733032]
[-12.35304070 141.95062256]
[-0.05927908 146.21913147]
[13.82112789 140.53280640]
[27.70153427 134.84648132]
[41.58194351 129.16015625]
[55.46234894 123.47383118]
[69.34275818 117.78750610]
[83.22315979 112.10118103]
[85.77681732 97.32015228]
[74.60885620 87.30632782]
[59.15459061 89.69374084]
[45.80820465 81.54462433]
[40.87145996 66.70674896]
[46.67533112 52.18610382]
[60.47940445 44.83889389]
[75.76582336 48.13424683]
[85.31681061 60.51619720]
[84.62267303 76.13836670]
[95.79063416 86.15219116]
[110.60959625 88.47566223]
[124.30644226 82.36041260]
[138.00329590 76.24515533]
[151.70013428 70.12989807]
[165.39698792 64.01464844]
[169.19123840 48.75895691]
[181.32968140 39.17288971]
[196.54290771 39.02306366]
[205.28401184 26.83319283]
[214.02513123 14.64332485]
[222.76625061 2.45345592]
[223.83917236 -4.36328602]
[227.70343018 -8.83287907]
[232.44924927 -10.19959927]
[241.93130493 -21.82245636]
[251.41334534 -33.44531250]
[260.89538574 -45.06816864]
[262.98400879 -61.33377075]
[278.21701050 -67.40726471]
[290.92401123 -57.04076767]
[288.03311157 -40.89843750]
[272.51824951 -35.58612442]
[263.03619385 -23.96326637]
[253.55415344 -12.34041023]
[244.07211304 -0.71755320]
[234.95611572 11.19457150]
[226.21499634 23.38443947]
[217.47389221 35.57431030]
[208.73277283 47.76417923]
[211.21583557 52.17413330]
[212.68966675 57.01573944]
[213.08491516 62.06124115]
[227.13545227 67.31313324]
[241.18598938 72.56503296]
[255.23652649 77.81693268]
[269.28707886 83.06882477]
[283.56201172 76.28642273]
[298.42361450 81.66309357]
[305.05471802 96.00896454]
[299.52120972 110.81288147]
[285.10604858 117.29193878]
[270.36145020 111.60223389]
[264.03515625 97.11936188]
[249.98463440 91.86746979]
[235.93409729 86.61557007]
[221.88356018 81.36367035]
[207.83302307 76.11177826]
[190.31141663 85.26580811]
[171.51223755 77.71149445]
[157.81539917 83.82675171]
[144.11854553 89.94200134]
[130.42169189 96.05725861]
[116.72484589 102.17250824]
[131.72450256 102.27349854]
[145.47401428 108.26943207]
[155.75428772 119.19261932]
[160.90617371 133.28012085]
[160.09822083 148.25834656]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 31]
[8 30]
[9 29]
[10 28]
[11 27]
[12 26]
[13 25]
[15 22]
[16 21]
[32 42]
[33 41]
[43 95]
[44 94]
[45 93]
[46 92]
[47 91]
[50 71]
[51 70]
[52 69]
[53 68]
[56 67]
[57 66]
[58 65]
[59 64]
[74 89]
[75 88]
[76 87]
[77 86]
[78 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
