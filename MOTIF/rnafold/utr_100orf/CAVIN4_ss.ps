%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUUUUUGCUCCAAGUGCCAGAAUUGAUUGUGGUUAGGACAUCUUACGCUGAGAAAUAAAUAAAAUGGAACAUAAUGGGUCUGCUUCAAAUGCUGAUAAAAUCCACCAGAAUCGCCUGUCGAGUGUUACAGAAGAUGAAGACCAAGACGCUGCUCUUACCAUUG\
) } def
/len { sequence length } bind def

/coor [
[142.65173340 129.97938538]
[132.92210388 140.95808411]
[120.42881775 148.86647034]
[106.11945343 153.02835083]
[91.10079956 153.05458069]
[76.55328369 148.87854004]
[63.63822174 140.76643372]
[53.40509415 129.30122375]
[41.23655319 138.07200623]
[36.07542038 145.66328430]
[28.75371742 146.89105225]
[16.42137718 155.42997742]
[4.08903646 163.96891785]
[4.27607059 175.90849304]
[-1.28528452 186.33944702]
[-11.10136604 192.70748901]
[-22.65360451 193.51737976]
[-33.04429626 188.68258667]
[-45.69092941 196.74873352]
[-58.33756256 204.81486511]
[-70.98419189 212.88101196]
[-78.45856476 226.82534790]
[-93.34971619 227.14596558]
[-105.99635315 235.21209717]
[-113.07678986 250.00398254]
[-129.44577026 250.99812317]
[-138.26429749 237.17185974]
[-130.46061707 222.74845886]
[-114.06249237 222.56547546]
[-101.41586304 214.49932861]
[-94.84606171 201.13194275]
[-79.05033875 200.23439026]
[-66.40370941 192.16824341]
[-53.75707245 184.10209656]
[-41.11043930 176.03594971]
[-38.27524185 157.98303223]
[-22.90683937 147.51931763]
[-4.44989729 151.63658142]
[7.88244295 143.09764099]
[20.21478271 134.55870056]
[32.46577072 125.90346527]
[44.63431168 117.13267517]
[42.09173584 102.34973907]
[27.69209290 98.14852142]
[13.29244995 93.94729614]
[-1.10719454 89.74607849]
[-15.50683880 85.54486084]
[-32.40549850 86.91295624]
[-38.39814377 71.05342865]
[-24.81734276 60.90462494]
[-11.30561829 71.14521027]
[3.09402585 75.34643555]
[17.49366951 79.54765320]
[31.89331436 83.74887085]
[46.29295731 87.95009613]
[51.05531693 75.74101257]
[58.52297592 65.09275055]
[68.23044586 56.58710480]
[79.59166718 50.67501831]
[91.93530273 47.65280151]
[104.54433441 47.64756012]
[116.69772339 50.61254883]
[127.71163177 56.33250046]
[136.97789001 64.43856049]
[143.99755859 74.43172455]
[157.93583679 68.88874817]
[171.87409973 63.34577179]
[185.81237793 57.80279541]
[199.75064087 52.25981903]
[198.02752686 37.27762604]
[200.23962402 22.37151909]
[206.23019409 8.55671024]
[215.58538818 -3.22747684]
[227.66278076 -12.18149090]
[241.63551331 -17.69979095]
[256.54891968 -19.41180038]
[271.38571167 -17.20678139]
[285.13537598 -11.24098682]
[296.86309814 -1.92659235]
[305.77310181 10.09676743]
[319.71136475 4.55378962]
[333.64962769 -0.98918790]
[347.58792114 -6.53216553]
[359.74911499 -24.14152336]
[380.03408813 -20.46596527]
[393.63534546 -26.79094315]
[407.23663330 -33.11592102]
[420.83792114 -39.44089508]
[434.43917847 -45.76587296]
[435.89053345 -60.99219513]
[444.71014404 -73.36600494]
[458.44787598 -79.62227631]
[473.37277222 -78.17195129]
[485.48623657 -69.50418854]
[499.08749390 -75.82917023]
[512.68878174 -82.15414429]
[519.18585205 -88.63894653]
[526.60778809 -88.46739197]
[540.32635498 -94.53384399]
[554.04486084 -100.60029602]
[553.08117676 -115.70978546]
[557.33703613 -130.21011353]
[566.28033447 -142.35662842]
[578.81610107 -150.69474792]
[593.42071533 -154.23420715]
[608.32684326 -152.56655884]
[621.73767090 -145.91227722]
[632.04309082 -135.09176636]
[645.76159668 -141.15821838]
[659.48016357 -147.22467041]
[664.94665527 -162.05345154]
[679.33233643 -168.59765625]
[694.10253906 -162.97468567]
[700.49426270 -148.52058411]
[694.71545410 -133.81068420]
[680.19458008 -127.57212830]
[665.54656982 -133.50613403]
[651.82806396 -127.43968201]
[638.10949707 -121.37322998]
[639.17987061 -106.46887970]
[635.07867432 -92.07064056]
[626.28234863 -79.92156982]
[613.83703613 -71.49932098]
[599.23382568 -67.83636475]
[584.23065186 -69.39353943]
[570.64025879 -76.00209045]
[560.11132812 -86.88176727]
[546.39282227 -80.81531525]
[532.67425537 -74.74886322]
[519.01373291 -68.55287170]
[505.41247559 -62.22789383]
[491.81118774 -55.90291595]
[490.63348389 -41.05439377]
[482.12496948 -28.70687103]
[468.48831177 -22.23327446]
[453.34283447 -23.46263313]
[440.76416016 -32.16460037]
[427.16287231 -25.83962250]
[413.56161499 -19.51464462]
[399.96032715 -13.18966866]
[386.35906982 -6.86469126]
[384.69342041 1.93451107]
[379.06011963 9.07292366]
[370.63735962 12.85150433]
[361.28430176 12.29636669]
[353.13088989 7.40610552]
[339.19262695 12.94908333]
[325.25433350 18.49205971]
[311.31607056 24.03503799]
[313.09649658 38.89368820]
[310.96841431 53.71826553]
[305.07089233 67.49736786]
[295.80044556 79.28936005]
[283.78427124 88.28671265]
[269.83789062 93.87129974]
[254.90975952 95.65685272]
[240.01672363 93.51570892]
[226.17488098 87.58786774]
[214.33013916 78.27188873]
[205.29362488 66.19808960]
[191.35534668 71.74106598]
[177.41708374 77.28404236]
[163.47880554 82.82701874]
[149.54054260 88.37000275]
[151.23742676 102.58965302]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 42]
[9 41]
[11 40]
[12 39]
[13 38]
[18 35]
[19 34]
[20 33]
[21 32]
[23 30]
[24 29]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
[65 164]
[66 163]
[67 162]
[68 161]
[69 160]
[80 149]
[81 148]
[82 147]
[83 146]
[85 141]
[86 140]
[87 139]
[88 138]
[89 137]
[94 132]
[95 131]
[96 130]
[98 129]
[99 128]
[100 127]
[108 119]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
