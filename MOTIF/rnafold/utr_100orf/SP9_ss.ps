%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:02:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCACGUCUAUACUCGGGGAAGAGCCGCGCUUCGGAACGACCCCGUUGGCCAUGCUGGCGGCGACCUGCAACAAGAUCGGCAACACGAGCCCGCUGA\
) } def
/len { sequence length } bind def

/coor [
[87.74932861 105.14477539]
[73.05487061 102.13266754]
[58.36040497 99.12055969]
[43.66594315 96.10845184]
[28.97148132 93.09635162]
[14.27701950 90.08424377]
[-0.41744244 87.07213593]
[8.00400734 99.48500061]
[9.41635513 114.41836548]
[3.47134495 128.18995667]
[-8.36510468 137.40399170]
[-23.17436600 139.78848267]
[-37.30477905 134.75544739]
[-47.27207184 123.54592896]
[-50.61850739 108.92398071]
[-46.51893234 94.49507141]
[-35.98421097 83.81707001]
[-21.61321259 79.52301025]
[-34.90338516 72.56806183]
[-48.19355392 65.61310577]
[-61.48372269 58.65815353]
[-74.77389526 51.70320129]
[-87.03446960 60.72759628]
[-101.93668365 63.52240753]
[-116.51490021 59.58594894]
[-127.89158630 49.75069809]
[-133.84526062 36.00794601]
[-133.24418640 21.10478783]
[-146.53436279 14.14983463]
[-159.82452393 7.19488144]
[-175.50323486 10.59452438]
[-187.84513855 0.34479782]
[-187.38258362 -15.69158554]
[-174.47041321 -25.21288490]
[-159.01371765 -20.91517448]
[-152.86956787 -6.09528923]
[-139.57940674 0.85966384]
[-126.28923035 7.81461668]
[-114.38709259 -1.17451751]
[-99.70195770 -4.11666012]
[-85.13601685 -0.37573412]
[-73.59168243 9.35814667]
[-67.39321899 23.19527245]
[-67.81893921 38.41302872]
[-54.52877045 45.36798096]
[-41.23860168 52.32293701]
[-27.94843102 59.27788925]
[-14.65826035 66.23284149]
[-5.36418915 65.52664948]
[2.59466362 72.37767792]
[17.28912544 75.38977814]
[31.98358727 78.40188599]
[46.67805099 81.41399384]
[61.37251282 84.42610168]
[76.06697083 87.43820190]
[90.76143646 90.45030975]
[105.61473846 92.54304504]
[120.56940460 93.70829773]
[134.92893982 87.06642914]
[147.01667786 95.76905060]
[161.97135925 96.93431091]
[176.92602539 98.09957123]
[187.32344055 90.27328491]
[199.85740662 91.66044617]
[207.76841736 100.95742035]
[222.67962646 102.58720398]
[233.13174438 91.27087402]
[248.06852722 88.31352997]
[261.72109985 94.64369965]
[268.94189453 107.64363098]
[283.85308838 109.27341461]
[298.76428223 110.90319824]
[307.77862549 98.46788025]
[321.80947876 92.22040558]
[337.08261108 93.84131622]
[349.48959351 102.89459229]
[355.69305420 116.94495392]
[354.02429199 132.21292114]
[344.93215942 144.59147644]
[330.86242676 150.75086975]
[315.59976196 149.03425598]
[303.24975586 139.90336609]
[297.13452148 125.81439972]
[282.22329712 124.18461609]
[267.31210327 122.55483246]
[257.45361328 133.68800354]
[242.75593567 136.91952515]
[228.81065369 130.80538940]
[221.04983521 117.49839783]
[206.13864136 115.86862183]
[190.58735657 123.83473969]
[175.76077271 113.05423737]
[160.80609131 111.88898468]
[145.85142517 110.72372437]
[132.56155396 117.44893646]
[119.40414429 108.66297150]
[104.44947815 107.49771118]
[101.85533142 109.45191193]
[98.44561005 110.43081665]
[94.60992432 110.11295319]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 56]
[2 55]
[3 54]
[4 53]
[5 52]
[6 51]
[7 50]
[18 48]
[19 47]
[20 46]
[21 45]
[22 44]
[28 38]
[29 37]
[30 36]
[57 97]
[58 96]
[60 94]
[61 93]
[62 92]
[65 90]
[66 89]
[70 85]
[71 84]
[72 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
