%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCAAAUCUGAGCCAGCCCUCCGAAUUUGUCCUCUUGGGCUUCUCCUCCUUUGGUGAGCUGCAGGCCCUUCUGUAUGGCCCCUUCCUCAUGCUUUAUC\
) } def
/len { sequence length } bind def

/coor [
[69.24942017 144.29786682]
[61.56071854 137.81958008]
[55.20824432 130.02661133]
[41.70820236 136.56488037]
[28.20816422 143.10314941]
[14.70812416 149.64140320]
[1.20808434 156.17967224]
[-12.29195499 162.71794128]
[-25.68868065 169.46536255]
[-38.97885132 176.42031860]
[-47.61845779 189.67428589]
[-62.48246765 188.72012329]
[-75.77263641 195.67507935]
[-89.06280518 202.63003540]
[-93.54289246 217.78604126]
[-107.46741486 225.26155090]
[-122.57520294 220.62147522]
[-129.90307617 206.61869812]
[-125.10353851 191.56080627]
[-111.02406311 184.38139343]
[-96.01776123 189.33985901]
[-82.72759247 182.38491821]
[-69.43742371 175.42996216]
[-61.74841690 162.67344666]
[-45.93380356 163.13014221]
[-32.64363480 156.17520142]
[-28.09674263 150.17926025]
[-18.83022118 149.21789551]
[-5.33018208 142.67964172]
[8.16985798 136.14137268]
[21.66989708 129.60310364]
[35.16993713 123.06483459]
[48.66997528 116.52657318]
[46.08633423 98.89758301]
[49.38846588 81.38894653]
[58.21588135 65.91208649]
[71.60488129 54.15661240]
[88.09378815 47.40588379]
[105.88250732 46.39687729]
[109.57669067 31.85889053]
[113.27087402 17.32090569]
[116.96505737 2.78292108]
[120.65924072 -11.75506401]
[124.35342407 -26.29304886]
[127.13664246 -41.03257751]
[128.99812317 -55.91662598]
[130.85960388 -70.80067444]
[123.52677155 -81.55178833]
[125.49701691 -94.00742340]
[135.15284729 -101.47621155]
[137.47631836 -116.29517365]
[133.95640564 -132.87969971]
[148.91839600 -140.85310364]
[160.72209167 -128.68309021]
[152.29527283 -113.97169495]
[149.97180176 -99.15274048]
[157.20393372 -83.24684143]
[145.74365234 -68.93919373]
[143.88217163 -54.05514526]
[142.02069092 -39.17109680]
[143.82032776 -36.80347061]
[144.70237732 -33.51851273]
[144.28756714 -29.69714737]
[142.35557556 -25.85924721]
[138.89140320 -22.59886551]
[135.19721985 -8.06088066]
[131.50303650 6.47710466]
[127.80886078 21.01508904]
[124.11467743 35.55307388]
[120.42049408 50.09106064]
[134.97877502 58.95875549]
[146.04171753 71.92761230]
[152.50381470 87.70167542]
[153.71931458 104.70468140]
[149.56677246 121.23756409]
[162.39884949 129.00531006]
[175.23092651 136.77305603]
[188.06298828 144.54080200]
[200.89506531 152.30854797]
[213.72714233 160.07627869]
[227.97776794 153.93630981]
[243.10832214 157.37809753]
[253.30079651 169.07823181]
[254.63598633 184.53775024]
[246.60047913 197.81216431]
[232.28408813 203.79719543]
[217.19175720 200.19146729]
[207.12680054 188.38145447]
[205.95939636 172.90835571]
[193.12731934 165.14060974]
[180.29525757 157.37286377]
[167.46318054 149.60513306]
[154.63110352 141.83738708]
[141.79902649 134.06964111]
[134.74804688 141.23678589]
[126.48915100 146.97045898]
[117.30944824 151.07133484]
[107.52803040 153.39688110]
[97.48491669 153.86625671]
[87.52924347 152.46311951]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 33]
[4 32]
[5 31]
[6 30]
[7 29]
[8 28]
[9 26]
[10 25]
[12 23]
[13 22]
[14 21]
[39 70]
[40 69]
[41 68]
[42 67]
[43 66]
[44 65]
[45 60]
[46 59]
[47 58]
[50 56]
[51 55]
[75 94]
[76 93]
[77 92]
[78 91]
[79 90]
[80 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
