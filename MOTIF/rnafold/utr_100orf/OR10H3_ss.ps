%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCUGGUCAGAACUACAGAACCAUAUCUGAAUUUAUCCUCUCUGGCUUCUCAGCCUUCCCCCAGCAGCUCCUGCCUGUCUUGUUCCUGCUGUACCUCC\
) } def
/len { sequence length } bind def

/coor [
[90.38101196 330.43087769]
[75.08893585 328.99972534]
[62.57047272 320.10122681]
[56.19301605 306.12896729]
[57.67207336 290.84146118]
[66.60977936 278.35095215]
[80.60195160 272.01733398]
[81.99964142 257.08258057]
[83.39732361 242.14784241]
[84.56258392 227.19317627]
[85.49513245 212.22218323]
[86.42767334 197.25120544]
[65.70001221 192.00823975]
[46.59849930 182.40318298]
[30.02873611 168.89141846]
[16.77629471 152.11352539]
[7.46946526 132.86494446]
[2.54948354 112.05825043]
[-12.43419266 112.75785828]
[-27.41786957 113.45746613]
[-42.40154648 114.15706635]
[-52.85684586 126.00874329]
[-68.63526154 126.91273499]
[-80.37573242 116.33271027]
[-81.11285400 100.54562378]
[-70.40929413 88.91766357]
[-54.61529541 88.34749603]
[-43.10115051 99.17339325]
[-28.11747551 98.47378540]
[-13.13379860 97.77418518]
[1.84987760 97.07457733]
[2.65509892 87.11687469]
[4.46793509 77.29252625]
[7.26962137 67.70322418]
[11.03115749 58.44822693]
[15.71360874 49.62332916]
[21.26850510 41.31988144]
[27.63835144 33.62382889]
[34.75720978 26.61483192]
[42.55139542 20.36544418]
[50.94022751 14.94035339]
[59.83687973 10.39571190]
[69.14926147 6.77856255]
[78.78097534 4.12634611]
[88.63232422 2.46651554]
[98.60134125 1.81625187]
[99.53388977 -13.15473175]
[100.46643066 -28.12571526]
[101.39897919 -43.09669876]
[93.61766815 -57.53218842]
[102.45761871 -71.34476471]
[118.82505035 -70.32523346]
[125.88253784 -55.52240372]
[116.36995697 -42.16415405]
[115.43741608 -27.19317055]
[114.50486755 -12.22218704]
[113.57232666 2.74879646]
[128.50767517 6.03555250]
[142.75155640 11.60141945]
[155.95851135 19.31139946]
[167.80818176 28.97848320]
[178.01315308 40.36819839]
[186.32592773 53.20428467]
[192.54486084 67.17539978]
[207.02363586 63.25557327]
[221.50241089 59.33574295]
[235.91847229 55.19121933]
[250.26834106 50.82299805]
[264.61819458 46.45477676]
[278.01004028 36.05791092]
[291.70782471 46.04825974]
[285.89984131 61.97632980]
[268.98641968 60.80464172]
[254.63655090 65.17285919]
[240.28669739 69.54108429]
[234.70622253 74.58924103]
[225.42224121 73.81452179]
[210.94346619 77.73434448]
[196.46469116 81.65417480]
[198.10478210 95.82181549]
[197.67521667 110.07760620]
[195.18504333 124.12078857]
[190.68681335 137.65510559]
[184.27540588 150.39505005]
[176.08609009 162.07182312]
[166.29164124 172.43910217]
[155.09866333 181.27818298]
[142.74330139 188.40257263]
[129.48620605 193.66198730]
[115.60705566 196.94546509]
[101.39865875 198.18374634]
[100.46611023 213.15473938]
[99.53356934 228.12571716]
[102.15679932 237.06503296]
[98.33206940 243.54553223]
[96.93437958 258.48028564]
[95.53668976 273.41500854]
[108.11069489 282.23486328]
[114.57561493 296.16687012]
[113.19242859 311.46334839]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 97]
[8 96]
[9 95]
[10 93]
[11 92]
[12 91]
[18 31]
[19 30]
[20 29]
[21 28]
[46 57]
[47 56]
[48 55]
[49 54]
[64 79]
[65 78]
[66 77]
[67 75]
[68 74]
[69 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
