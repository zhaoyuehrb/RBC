%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:32:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGACGGCGCUGAUGGCUGUGGUUCUGCGGGCAGCUGCUGUAGCCCCGAGGCUGAGAGGCCGGGGAGGCACUGGGGGCGCCCGAAGGCUGAGCUGUG\
) } def
/len { sequence length } bind def

/coor [
[-10.62088776 360.97174072]
[-18.39706802 366.12124634]
[-27.54264450 366.99560547]
[-35.10988617 379.94692993]
[-42.67713165 392.89825439]
[-50.24437332 405.84957886]
[-49.78826523 422.24237061]
[-63.89664841 430.60214233]
[-78.05603027 422.32904053]
[-77.70044708 405.93374634]
[-63.19569778 398.28231812]
[-55.62845612 385.33099365]
[-48.06121445 372.37966919]
[-40.49396896 359.42834473]
[-42.48127747 338.98660278]
[-24.17326164 328.08438110]
[-17.84573555 314.48428345]
[-11.51820946 300.88421631]
[-5.19068432 287.28411865]
[1.13684106 273.68402100]
[7.46436644 260.08392334]
[3.60778427 248.50184631]
[8.91181850 237.06105042]
[20.99127769 232.21920776]
[27.73870277 218.82247925]
[34.48612976 205.42575073]
[34.68711472 197.90344238]
[41.65740585 191.72221375]
[48.81820297 178.54180908]
[48.09531784 163.66476440]
[61.48204803 155.23231506]
[68.64284515 142.05192566]
[75.80364227 128.87152100]
[82.96444702 115.69111633]
[90.12524414 102.51071930]
[90.93058777 94.33474731]
[97.71923065 89.03682709]
[105.28646851 76.08550262]
[112.85371399 63.13417816]
[113.13510895 47.31547165]
[126.23635864 40.22980499]
[133.80360413 27.27848053]
[141.16850281 14.21103668]
[148.32929993 1.03063583]
[149.72181702 -8.18096352]
[155.92329407 -12.44325256]
[163.49053955 -25.39457893]
[171.05778503 -38.34590530]
[178.42268372 -51.41334915]
[185.58349609 -64.59375000]
[181.32531738 -79.57726288]
[188.77514648 -92.84205627]
[203.08587646 -96.80923462]
[210.24668884 -109.98963165]
[217.40748596 -123.17003632]
[224.56828308 -136.35043335]
[223.60256958 -152.72113037]
[237.44415283 -161.51560974]
[251.85397339 -153.68687439]
[252.00845337 -137.28845215]
[237.74867249 -129.18963623]
[230.58787537 -116.00923157]
[223.42707825 -102.82883453]
[216.26628113 -89.64842987]
[220.72596741 -75.48345184]
[213.65167236 -62.01464081]
[198.76388550 -57.43294907]
[191.60308838 -44.25254822]
[191.16825867 -36.74013138]
[184.00910950 -30.77866173]
[176.44186401 -17.82733536]
[168.87461853 -4.87600946]
[161.50970459 8.19143391]
[154.34890747 21.37183571]
[153.91407776 28.88425255]
[146.75492859 34.84572220]
[139.18768311 47.79705048]
[139.44754028 62.68938828]
[125.80503845 70.70142365]
[118.23780060 83.65274811]
[110.67055511 96.60407257]
[103.30564117 109.67151642]
[96.14484406 122.85191345]
[88.98404694 136.03231812]
[81.82324982 149.21272278]
[74.66245270 162.39311218]
[74.87314606 178.21292114]
[61.99860382 185.70260620]
[54.83780670 198.88301086]
[47.88285446 212.17318726]
[41.13542938 225.56990051]
[34.38800430 238.96662903]
[35.93247223 257.23303223]
[21.06445503 266.41146851]
[14.73692989 280.01156616]
[8.40940475 293.61163330]
[2.08187914 307.21173096]
[-4.24564648 320.81182861]
[-10.57317162 334.41189575]
[-6.04879761 343.04266357]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 14]
[4 13]
[5 12]
[6 11]
[16 99]
[17 98]
[18 97]
[19 96]
[20 95]
[21 94]
[24 92]
[25 91]
[26 90]
[28 89]
[29 88]
[31 86]
[32 85]
[33 84]
[34 83]
[35 82]
[37 81]
[38 80]
[39 79]
[41 77]
[42 76]
[43 74]
[44 73]
[46 72]
[47 71]
[48 70]
[49 68]
[50 67]
[53 64]
[54 63]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
