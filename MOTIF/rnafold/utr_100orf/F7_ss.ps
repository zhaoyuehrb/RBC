%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:47:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAGUCCCAUGGGGAAUGUCAACAGGCAGGGGCAGCACUGCAGAGAUUUCAUCAUGGUCUCCCAGGCCCUCAGGCUCCUCUGCCUUCUGCUUGGGCUUCAGGGCUGCCUGGCUGCAGGCGGGGUCGCUAAGGCCUCAGGAGGAGAAACACGGG\
) } def
/len { sequence length } bind def

/coor [
[29.92501450 240.84690857]
[15.55307484 236.55186462]
[3.46119189 227.67570496]
[-4.94338512 215.25140381]
[-8.68253422 200.72491455]
[-7.32109451 185.78683472]
[-1.01751006 172.17562866]
[9.49524784 161.47492981]
[-5.09912634 164.93963623]
[-19.69350052 168.40435791]
[-34.28787231 171.86907959]
[-48.88224792 175.33378601]
[-63.47661972 178.79850769]
[-78.03513336 182.41094971]
[-92.55628967 186.17073059]
[-107.07744598 189.93051147]
[-121.59860229 193.69030762]
[-136.11976624 197.45008850]
[-147.54002380 208.39944458]
[-161.80036926 204.09925842]
[-176.32153320 207.85905457]
[-184.36849976 221.19636536]
[-199.14859009 224.80245972]
[-211.81408691 217.04870605]
[-226.33523560 220.80850220]
[-240.85639954 224.56828308]
[-255.33869934 228.47503662]
[-269.78067017 232.52835083]
[-276.05609131 246.85153198]
[-290.09292603 253.74360657]
[-305.26348877 249.95034790]
[-314.40463257 237.26281738]
[-313.20022583 221.67167664]
[-302.21893311 210.53860474]
[-286.64581299 209.12026978]
[-273.83398438 218.08638000]
[-259.39202881 214.03306580]
[-253.76878357 209.16902161]
[-244.61618042 210.04713440]
[-230.09503174 206.28733826]
[-215.57386780 202.52755737]
[-208.26274109 189.60150146]
[-193.58978271 185.58168030]
[-180.08131409 193.33789062]
[-165.56016541 189.57810974]
[-155.17855835 178.89768982]
[-139.87954712 182.92893982]
[-125.35839081 179.16914368]
[-110.83723450 175.40936279]
[-96.31607819 171.64956665]
[-81.79492188 167.88978577]
[-76.07426453 163.14071655]
[-66.94133759 164.20413208]
[-52.34696198 160.73941040]
[-37.75259018 157.27470398]
[-23.15821648 153.80998230]
[-8.56384182 150.34526062]
[6.03053141 146.88055420]
[19.87413597 141.10520935]
[32.60380173 133.17074585]
[45.33346558 125.23628998]
[58.06312943 117.30182648]
[70.79279327 109.36736298]
[69.34497833 83.32468414]
[89.79000092 62.23452759]
[122.45320129 62.92309570]
[127.51996613 48.80474091]
[132.58673096 34.68638611]
[137.65348816 20.56803513]
[142.72026062 6.44968081]
[147.78701782 -7.66867256]
[145.16596985 -23.27125740]
[156.74757385 -32.63692856]
[161.81433105 -46.75528336]
[166.88110352 -60.87363434]
[171.94786072 -74.99198914]
[177.01463318 -89.11034393]
[182.08139038 -103.22869873]
[174.97688293 -112.84804535]
[173.44136047 -124.58630371]
[177.74424744 -135.48571777]
[186.69842529 -142.85667419]
[197.98506165 -144.94128418]
[203.61981201 -158.84271240]
[198.71728516 -174.11833191]
[207.72317505 -187.39514160]
[223.72894287 -188.48828125]
[234.45632935 -176.55920410]
[231.67619324 -160.75888062]
[217.52122498 -153.20796204]
[211.88647461 -139.30653381]
[220.03878784 -122.96350861]
[213.60221863 -105.53267670]
[196.19973755 -98.16193390]
[191.13298035 -84.04357910]
[186.06622314 -69.92522430]
[180.99945068 -55.80687332]
[175.93269348 -41.68851852]
[170.86592102 -27.57016563]
[173.84938049 -12.97741890]
[161.90538025 -2.60190916]
[156.83860779 11.51644421]
[151.77185059 25.63479805]
[146.70507812 39.75315094]
[141.63832092 53.87150574]
[136.57154846 67.98986053]
[145.87287903 79.75784302]
[160.77976990 78.08916473]
[175.68667603 76.42048645]
[190.59356689 74.75180817]
[205.50045776 73.08312988]
[218.37403870 62.92424774]
[233.50646973 69.24419403]
[235.33079529 85.54155731]
[221.97030640 95.05099487]
[207.16914368 87.99002838]
[192.26223755 89.65870667]
[177.35534668 91.32737732]
[162.44845581 92.99605560]
[147.54154968 94.66473389]
[144.52207947 109.35768127]
[157.56283569 116.76974487]
[170.60359192 124.18181610]
[183.64434814 131.59387207]
[196.68510437 139.00595093]
[209.72586060 146.41801453]
[225.51312256 143.56462097]
[237.49182129 154.23655701]
[236.47291565 170.24722290]
[223.23803711 179.31460571]
[207.93983459 174.48298645]
[202.31379700 159.45877075]
[189.27304077 152.04669189]
[176.23228455 144.63462830]
[163.19152832 137.22256470]
[150.15077209 129.81050110]
[137.11001587 122.39843750]
[125.30872345 132.01574707]
[111.68006134 136.45079041]
[98.25885010 135.69937134]
[86.83751678 130.48716736]
[78.72724915 122.09703064]
[65.99758911 130.03149414]
[53.26792526 137.96595764]
[40.53826141 145.90040588]
[27.80859756 153.83486938]
[42.80849075 153.89163208]
[56.91646194 158.98721313]
[68.49063873 168.52862549]
[76.18401337 181.40542603]
[79.10123444 196.11901855]
[76.90280151 210.95704651]
[69.84456635 224.19265747]
[58.74796295 234.28549194]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 58]
[9 57]
[10 56]
[11 55]
[12 54]
[13 53]
[14 51]
[15 50]
[16 49]
[17 48]
[18 47]
[20 45]
[21 44]
[24 41]
[25 40]
[26 39]
[27 37]
[28 36]
[59 146]
[60 145]
[61 144]
[62 143]
[63 142]
[66 106]
[67 105]
[68 104]
[69 103]
[70 102]
[71 101]
[73 99]
[74 98]
[75 97]
[76 96]
[77 95]
[78 94]
[83 91]
[84 90]
[107 120]
[108 119]
[109 118]
[110 117]
[111 116]
[121 137]
[122 136]
[123 135]
[124 134]
[125 133]
[126 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
