%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAUUACUCUACAGCUCAGAACACCAACUGCUGAGGCUGCCUUGGGAAGAGGAUGAUCCUAAACAAAGCUCUGCUGCUGGGGGCCCUCGCUCUGACCACCGUGAUGAGCCCCUGUGGAGGUGAAGACAUUGUGGCUGACCACGUUGCCUCUU\
) } def
/len { sequence length } bind def

/coor [
[252.27635193 382.69967651]
[243.05030823 379.16232300]
[235.31030273 372.97262573]
[229.79812622 364.70068359]
[227.04899597 355.11724854]
[227.33970642 345.12188721]
[230.66081238 335.65844727]
[236.71585083 327.62609863]
[229.12768555 314.68701172]
[221.53953552 301.74795532]
[213.95137024 288.80886841]
[206.36320496 275.86978149]
[198.77505493 262.93069458]
[191.18688965 249.99162292]
[183.20640564 237.29075623]
[174.84107971 224.83999634]
[166.47575378 212.38925171]
[158.11041260 199.93849182]
[149.74508667 187.48774719]
[135.12538147 184.88014221]
[126.46437073 172.37248230]
[129.29858398 157.05566406]
[120.93325043 144.60490417]
[104.52391815 149.06457520]
[87.57578278 147.68057251]
[72.10739136 140.61773682]
[59.96105194 128.71726990]
[52.58341980 113.39651489]
[50.85317993 96.48021698]
[54.97640991 79.98313141]
[64.46202087 65.87008667]
[55.35084152 53.95428467]
[47.60373688 48.99942017]
[46.17830276 41.70120621]
[37.31208420 29.60202217]
[28.44586945 17.50284195]
[19.57965088 5.40365934]
[10.59048653 -6.60445929]
[1.47930884 -18.52026558]
[-13.04949093 -24.78321648]
[-14.63377571 -39.59332275]
[-23.74495316 -51.50913239]
[-39.14773941 -51.26349640]
[-51.59622192 -60.03211212]
[-56.43718338 -74.28094482]
[-52.01255798 -88.47814941]
[-61.12373352 -100.39395142]
[-75.65253448 -106.65690613]
[-77.23681641 -121.46701050]
[-86.34799957 -133.38281250]
[-95.45917511 -145.29862976]
[-104.57035065 -157.21443176]
[-118.92684937 -152.40093994]
[-134.06838989 -152.51228333]
[-148.35253906 -157.53640747]
[-160.22985840 -166.92832947]
[-168.41198730 -179.66926575]
[-172.01136780 -194.37719727]
[-170.63760376 -209.45669556]
[-164.43968201 -223.27206421]
[-154.08992004 -234.32472229]
[-140.71096802 -241.41574097]
[-125.75409698 -243.77595520]
[-110.84169769 -241.14933777]
[-97.59136963 -233.82080078]
[-87.44039154 -222.58529663]
[-81.48988342 -208.66157532]
[-80.38529968 -193.55996704]
[-84.24646759 -178.91857910]
[-92.65454865 -166.32560730]
[-83.54336548 -154.40980530]
[-74.43218994 -142.49400330]
[-65.32101440 -130.57818604]
[-51.44390488 -125.16754150]
[-49.20792770 -109.50513458]
[-40.09675217 -97.58932495]
[-25.23617172 -98.13816071]
[-12.75430393 -89.73179626]
[-7.55500221 -75.42023468]
[-11.82914639 -60.62030792]
[-2.71796894 -48.70450211]
[11.15913868 -43.29384995]
[13.39511490 -27.63144302]
[22.50629234 -15.71563721]
[29.10728645 -12.29179668]
[31.67883301 -3.46255755]
[40.54505157 8.63662434]
[49.41126633 20.73580551]
[58.27748489 32.83498764]
[67.26664734 44.84310532]
[76.37783051 56.75891113]
[88.45002747 52.10013580]
[101.31882477 50.74495697]
[114.09665680 52.78683472]
[125.90225983 58.08494568]
[135.92141724 66.27388763]
[143.46311951 76.78887939]
[148.00721741 88.90471649]
[149.24032593 101.78577423]
[147.07739258 114.54367065]
[141.66757202 126.29851532]
[133.38400269 136.23957825]
[141.74932861 148.69032288]
[157.00117493 151.85560608]
[165.30744934 164.60160828]
[162.19584656 179.12240601]
[170.56117249 191.57316589]
[178.92649841 204.02391052]
[187.29182434 216.47467041]
[195.65716553 228.92541504]
[200.45675659 231.26799011]
[203.53266907 234.87652588]
[204.69134521 238.86543274]
[204.12597656 242.40345764]
[211.71412659 255.34252930]
[219.30229187 268.28161621]
[226.89045715 281.22070312]
[234.47860718 294.15979004]
[242.06677246 307.09884644]
[249.65493774 320.03793335]
[270.29827881 320.69461060]
[286.31838989 333.51190186]
[291.41995239 353.24218750]
[283.72488403 371.96435547]
[292.59109497 384.06353760]
[301.45730591 396.16271973]
[310.32351685 408.26190186]
[319.43469238 420.17770386]
[328.78704834 431.90518188]
[343.44058228 437.87048340]
[345.32662964 452.64517212]
[354.67898560 464.37265015]
[364.03134155 476.10012817]
[373.38369751 487.82760620]
[382.73602295 499.55505371]
[398.19094849 505.03939819]
[400.90231323 521.21282959]
[388.08096313 531.43756104]
[372.91635132 525.19519043]
[371.00854492 508.90740967]
[361.65621948 497.17993164]
[352.30386353 485.45248413]
[342.95150757 473.72500610]
[333.59918213 461.99752808]
[319.61459351 456.87106323]
[317.05957031 441.25753784]
[307.70724487 429.53005981]
[303.08898926 428.11297607]
[299.33645630 423.74432373]
[298.22433472 417.12811279]
[289.35812378 405.02893066]
[280.49191284 392.92974854]
[271.62570190 380.83056641]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 120]
[9 119]
[10 118]
[11 117]
[12 116]
[13 115]
[14 114]
[15 110]
[16 109]
[17 108]
[18 107]
[19 106]
[22 103]
[23 102]
[31 91]
[32 90]
[34 89]
[35 88]
[36 87]
[37 86]
[38 84]
[39 83]
[41 81]
[42 80]
[46 76]
[47 75]
[49 73]
[50 72]
[51 71]
[52 70]
[124 153]
[125 152]
[126 151]
[127 150]
[128 147]
[129 146]
[131 144]
[132 143]
[133 142]
[134 141]
[135 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
