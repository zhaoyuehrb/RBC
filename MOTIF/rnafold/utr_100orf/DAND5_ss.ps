%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:06:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCGGACAGACAGACAGGCAGACAGACGCACGGACAAGCAGAUGCUCCUUGGCCAGCUAUCCACUCUUCUGUGCCUGCUUAGCGGGGCCCUGCCUACAGGCUCAGGGAGGCCUGAACCCCAGUCUCCUCGACCUCAGUCCU\
) } def
/len { sequence length } bind def

/coor [
[104.44142914 217.73330688]
[89.34339142 221.80558777]
[75.18186951 215.17343140]
[68.64350128 200.96836853]
[72.81550598 185.89759827]
[85.72798157 177.07705688]
[87.03531647 162.13414001]
[88.34265137 147.19120789]
[89.64999390 132.24829102]
[82.87798309 129.22177124]
[76.92723083 124.79360199]
[72.08318329 119.17620087]
[68.57817841 112.63899994]
[66.58033752 105.49556732]
[66.18548584 98.08853912]
[67.41255951 90.77319336]
[70.20271301 83.90041351]
[74.42210388 77.79985809]
[65.55245972 65.70318604]
[56.68281174 53.60652161]
[47.81316757 41.50985336]
[38.94352341 29.41318321]
[30.07387924 17.31651306]
[16.38053513 20.90936661]
[2.13023949 18.76175880]
[-10.32841301 11.02472496]
[-18.86264992 -1.21344149]
[-21.91960144 -16.07671356]
[-18.80549049 -31.18795586]
[-9.83024597 -44.04904175]
[-20.88940620 -54.18289185]
[-31.94856644 -64.31674957]
[-43.00772476 -74.45059967]
[-54.06688690 -84.58444977]
[-65.12604523 -94.71830750]
[-76.18520355 -104.85215759]
[-91.75366211 -104.34127808]
[-102.82485962 -114.77599335]
[-103.21595764 -129.62127686]
[-114.27512360 -139.75514221]
[-129.84358215 -139.24426270]
[-140.91477966 -149.67897034]
[-141.30587769 -164.52426147]
[-152.36503601 -174.65811157]
[-163.42419434 -184.79196167]
[-174.59323120 -194.80458069]
[-185.87083435 -204.69476318]
[-197.14843750 -214.58496094]
[-212.25260925 -211.02915955]
[-226.54911804 -217.06150818]
[-234.54067993 -230.36242676]
[-233.15437317 -245.81744385]
[-222.92326355 -257.48379517]
[-207.78140259 -260.87554932]
[-193.55116272 -254.68846130]
[-185.70436096 -241.30162048]
[-187.25823975 -225.86254883]
[-175.98065186 -215.97236633]
[-164.70304871 -206.08218384]
[-157.54606628 -204.02114868]
[-153.29034424 -195.85112000]
[-142.23118591 -185.71726990]
[-131.17202759 -175.58341980]
[-116.34913635 -176.48765564]
[-104.98921204 -166.36802673]
[-104.14126587 -150.81430054]
[-93.08210754 -140.68043518]
[-78.25922394 -141.58468628]
[-66.89929962 -131.46505737]
[-66.05135345 -115.91131592]
[-54.99219131 -105.77746582]
[-43.93303299 -95.64361572]
[-32.87387466 -85.50975800]
[-21.81471252 -75.37590790]
[-10.75555325 -65.24205017]
[0.30360714 -55.10820007]
[15.01538658 -58.03455353]
[21.35466003 -71.62917328]
[27.69393349 -85.22378540]
[34.03320694 -98.81840515]
[35.24726868 -115.72882843]
[51.83291245 -119.24348450]
[59.80157471 -104.27896881]
[47.62782669 -92.47913361]
[41.28855133 -78.88451385]
[34.94927597 -65.28989410]
[28.61000252 -51.69528198]
[41.29982376 -43.37464905]
[49.62485123 -31.10261154]
[52.52561951 -16.91184044]
[49.81558609 -3.03485489]
[42.17054749 8.44686890]
[51.04019165 20.54353714]
[59.90983582 32.64020538]
[68.77947998 44.73687744]
[77.64912415 56.83354568]
[86.51876831 68.93021393]
[110.70811462 67.86884308]
[129.42471313 83.22916412]
[133.10284424 107.16077423]
[146.69746399 113.50005341]
[160.29208374 119.83932495]
[169.46879578 120.64456940]
[174.11180115 126.46804047]
[187.56488037 133.10237122]
[203.36399841 132.26664734]
[211.35662842 144.83515930]
[224.80972290 151.46948242]
[238.26281738 158.10382080]
[251.71589661 164.73814392]
[265.16900635 171.37248230]
[278.62207031 178.00680542]
[292.07516479 184.64114380]
[301.23214722 185.64637756]
[305.74700928 191.56974792]
[319.05215454 198.49598694]
[334.72348022 195.06248474]
[347.08749390 205.28552246]
[346.65960693 221.32286072]
[333.76800537 230.87203979]
[318.30206299 226.60772705]
[312.12591553 211.80114746]
[298.82077026 204.87490845]
[285.44085693 198.09422302]
[271.98776245 191.45989990]
[258.53466797 184.82557678]
[245.08157349 178.19123840]
[231.62847900 171.55691528]
[218.17538452 164.92257690]
[204.72229004 158.28825378]
[189.88543701 159.59849548]
[180.93055725 146.55546570]
[167.47746277 139.92112732]
[153.95280457 133.43394470]
[140.35818481 127.09466553]
[126.76357269 120.75539398]
[120.57186127 126.90489960]
[113.01439667 131.26820374]
[104.59291077 133.55563354]
[103.28557587 148.49855042]
[101.97824097 163.44146729]
[100.67090607 178.38438416]
[111.85554504 189.31315613]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 142]
[7 141]
[8 140]
[9 139]
[18 97]
[19 96]
[20 95]
[21 94]
[22 93]
[23 92]
[30 76]
[31 75]
[32 74]
[33 73]
[34 72]
[35 71]
[36 70]
[39 67]
[40 66]
[43 63]
[44 62]
[45 61]
[46 59]
[47 58]
[48 57]
[77 87]
[78 86]
[79 85]
[80 84]
[100 136]
[101 135]
[102 134]
[104 133]
[105 132]
[107 130]
[108 129]
[109 128]
[110 127]
[111 126]
[112 125]
[113 124]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
