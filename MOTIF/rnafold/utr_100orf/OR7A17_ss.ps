%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAACCAGAGAAUGACACAGGGAUUUCAGAAUUUGUUCUUCUGGGACUUUCUGAGGAACCAGAAUUGCAGCCCUUCCUCUUUGGGCUGUUUCUGUCCA\
) } def
/len { sequence length } bind def

/coor [
[94.49229431 280.66934204]
[97.28099060 261.48931885]
[97.74748993 246.49656677]
[98.21398163 231.50382996]
[98.68048096 216.51107788]
[95.99469757 212.36653137]
[96.00960541 206.45809937]
[99.67102814 200.60891724]
[101.06871796 185.67416382]
[102.46640778 170.73942566]
[103.86409760 155.80468750]
[105.26178741 140.86994934]
[94.90424347 140.42454529]
[85.10250854 137.42558289]
[76.46815491 132.12147522]
[69.52438354 124.90241241]
[64.67443848 116.27214050]
[62.17841339 106.81310272]
[62.13981247 97.14720917]
[64.50251770 87.89500427]
[69.05812073 79.63581085]
[75.46288300 72.87147522]
[67.89564514 59.92014694]
[52.87257767 55.80368042]
[45.38281631 42.56139755]
[49.39981842 28.26457024]
[41.83257675 15.31324482]
[34.26533127 2.36191893]
[26.69808960 -10.58940697]
[19.13084602 -23.54073143]
[11.56360340 -36.49205780]
[3.99636078 -49.44338226]
[-3.57088232 -62.39471054]
[-14.44837189 -64.60516357]
[-22.08512688 -72.35182953]
[-24.05751610 -82.82388306]
[-19.93706894 -92.41023254]
[-26.68449593 -105.80696106]
[-33.43192291 -119.20368958]
[-40.17934799 -132.60041809]
[-46.92677307 -145.99713135]
[-59.45174026 -157.42349243]
[-51.93918991 -172.62210083]
[-35.25485992 -169.61054993]
[-33.53004837 -152.74456787]
[-26.78262138 -139.34783936]
[-20.03519630 -125.95111084]
[-13.28777027 -112.55438995]
[-6.54034472 -99.15766144]
[10.35761166 -89.97768402]
[9.38044357 -69.96195221]
[16.94768715 -57.01062775]
[24.51492882 -44.05929947]
[32.08217239 -31.10797501]
[39.64941406 -18.15664864]
[47.21665955 -5.20532417]
[54.78390121 7.74600172]
[62.35114288 20.69732666]
[76.77833557 24.21751976]
[84.63709259 37.24420929]
[80.84696960 52.35290527]
[88.41421509 65.30422974]
[100.65350342 62.76551056]
[113.25875854 64.49336243]
[124.76041412 70.43661499]
[133.76792908 80.04430389]
[139.13734436 92.31397247]
[140.11523438 105.89527893]
[136.44068909 119.23838043]
[150.91946411 123.15821075]
[165.39823914 127.07803345]
[179.87701416 130.99786377]
[194.35578918 134.91769409]
[208.83456421 138.83752441]
[223.31333923 142.75735474]
[234.68647766 132.33355713]
[249.89355469 129.73580933]
[264.08206177 135.79304504]
[272.72448730 148.57240295]
[273.06304932 163.99604797]
[264.98974609 177.14234924]
[251.08073425 183.81637573]
[235.77430725 181.88845825]
[223.95469666 171.97380066]
[219.39350891 157.23612976]
[204.91473389 153.31629944]
[190.43595886 149.39646912]
[175.95718384 145.47663879]
[161.47840881 141.55680847]
[146.99963379 137.63697815]
[132.52085876 133.71714783]
[120.19652557 142.26763916]
[118.79883575 157.20237732]
[117.40114594 172.13711548]
[116.00345612 187.07185364]
[114.60577393 202.00659180]
[113.67322540 216.97758484]
[113.20672607 231.97032166]
[112.74022675 246.96307373]
[112.27373505 261.95581055]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 100]
[3 99]
[4 98]
[5 97]
[8 96]
[9 95]
[10 94]
[11 93]
[12 92]
[22 62]
[23 61]
[26 58]
[27 57]
[28 56]
[29 55]
[30 54]
[31 53]
[32 52]
[33 51]
[37 49]
[38 48]
[39 47]
[40 46]
[41 45]
[69 91]
[70 90]
[71 89]
[72 88]
[73 87]
[74 86]
[75 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
