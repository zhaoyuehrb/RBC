%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUCACUCCGAGGCGCGGGCUGCGGGCGGCGGGCGGCGGGCGCACCAUGCCCUCCUUCGACGAGGCGCUGCAGCGGGUGGGCGAGUUCGGGCGCUUCCAGAGGCGCGUGUUUUUGCUGCUGUGCCUGACGGGCGUCACCUUCGCCU\
) } def
/len { sequence length } bind def

/coor [
[134.80175781 375.32925415]
[132.89648438 360.45077515]
[130.99121094 345.57226562]
[129.08595276 330.69375610]
[119.79473114 319.05233765]
[125.71649170 304.38116455]
[123.81122589 289.50265503]
[121.74815369 274.64520264]
[119.52751160 259.81048584]
[117.30687714 244.97578430]
[115.08623505 230.14106750]
[112.55122375 215.35682678]
[109.70298004 200.62973022]
[106.85473633 185.90261841]
[104.00649261 171.17552185]
[101.15825653 156.44842529]
[98.31001282 141.72131348]
[95.46176910 126.99421692]
[92.61352539 112.26712036]
[83.44006348 100.39920044]
[69.90585327 93.93195343]
[56.37164688 87.46470642]
[42.83744049 80.99746704]
[29.30323410 74.53022003]
[15.76902771 68.06297302]
[2.23482060 61.59572983]
[-11.36726284 55.27249527]
[-25.03569031 49.09397507]
[-43.34090042 57.21738434]
[-61.48512650 49.48184586]
[-68.09229279 31.21821022]
[-82.12620544 25.92204666]
[-96.16011810 20.62588120]
[-110.19402313 15.32971573]
[-119.39873505 15.21946430]
[-124.46762085 9.76932812]
[-138.38595581 4.17648077]
[-154.07588196 6.21035290]
[-163.00047302 -5.71444893]
[-176.91880798 -11.30729580]
[-190.83714294 -16.90014267]
[-204.75547791 -22.49299049]
[-218.67381287 -28.08583832]
[-233.93460083 -23.13730812]
[-247.23847961 -32.10316086]
[-248.37985229 -48.10556412]
[-236.48313904 -58.86883926]
[-220.67451477 -56.13632584]
[-213.08097839 -42.00417328]
[-199.16264343 -36.41132736]
[-185.24430847 -30.81847763]
[-171.32597351 -25.22563171]
[-157.40763855 -19.63278389]
[-142.71322632 -22.06669426]
[-132.79310608 -9.74185467]
[-118.87477112 -4.14900780]
[-104.89785767 1.29580522]
[-90.86395264 6.59197044]
[-76.83003998 11.88813591]
[-62.79613113 17.18430138]
[-54.82998657 10.52367020]
[-44.72982788 7.78469181]
[-34.33001709 9.53512478]
[-25.54887009 15.52090645]
[-20.03482628 24.70048714]
[-18.85717201 35.42554855]
[-5.18874359 41.60406494]
[2.25337243 41.49241638]
[8.70206547 48.06152344]
[22.23627090 54.52877045]
[35.77047729 60.99601364]
[49.30468369 67.46325684]
[62.83889008 73.93050385]
[76.37310028 80.39774323]
[89.90730286 86.86499023]
[82.36596680 73.89856720]
[86.85265350 59.58529663]
[100.44628143 53.24390411]
[114.29666138 59.00298309]
[119.38643646 73.11306000]
[112.40223694 86.38742065]
[125.64977264 79.35159302]
[138.89730835 72.31577301]
[152.14483643 65.27994537]
[165.39237976 58.24411774]
[178.63990784 51.20829391]
[183.36219788 36.36451340]
[196.89730835 29.41790390]
[211.01947021 34.01135635]
[224.26701355 26.97553253]
[232.82566833 13.66914940]
[247.69522095 14.53270245]
[260.94274902 7.49687719]
[274.19030762 0.46105176]
[287.43783569 -6.57477331]
[300.68536377 -13.61059856]
[313.93289185 -20.64642334]
[322.16622925 -34.82896805]
[338.56243896 -34.51940155]
[346.25454712 -20.03618431]
[337.32955933 -6.27840614]
[320.96871948 -7.39888954]
[307.72119141 -0.36306444]
[294.47366333 6.67276096]
[281.22613525 13.70858574]
[267.97857666 20.74441147]
[254.73104858 27.78023720]
[247.11993408 40.58337021]
[231.30284119 40.22306824]
[218.05529785 47.25889206]
[213.95295715 61.53146744]
[200.61830139 68.85551453]
[185.67573547 64.45582581]
[172.42819214 71.49165344]
[159.18066406 78.52748108]
[145.93313599 85.56330109]
[132.68559265 92.59912872]
[119.43806458 99.63495636]
[114.16333771 106.75449371]
[107.34062958 109.41887665]
[110.18887329 124.14598083]
[113.03710938 138.87307739]
[115.88535309 153.60017395]
[118.73359680 168.32728577]
[121.58184052 183.05438232]
[124.43008423 197.78147888]
[127.27832031 212.50859070]
[131.38433838 217.83296204]
[132.03344727 223.56683350]
[129.92094421 227.92042542]
[132.14158630 242.75514221]
[134.36222839 257.58984375]
[136.58287048 272.42456055]
[140.97570801 280.51419067]
[138.68972778 287.59738159]
[140.59500122 302.47589111]
[150.02249146 315.18151855]
[143.96446228 328.78848267]
[145.86972046 343.66699219]
[147.77499390 358.54550171]
[149.68025208 373.42401123]
[162.93592834 381.71984863]
[167.70867920 396.61129761]
[161.74497986 411.06701660]
[147.86068726 418.26150513]
[132.61154175 414.79769897]
[123.19773865 402.31112671]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 141]
[2 140]
[3 139]
[4 138]
[6 136]
[7 135]
[8 133]
[9 132]
[10 131]
[11 130]
[12 127]
[13 126]
[14 125]
[15 124]
[16 123]
[17 122]
[18 121]
[19 120]
[20 75]
[21 74]
[22 73]
[23 72]
[24 71]
[25 70]
[26 69]
[27 67]
[28 66]
[31 60]
[32 59]
[33 58]
[34 57]
[36 56]
[37 55]
[39 53]
[40 52]
[41 51]
[42 50]
[43 49]
[81 118]
[82 117]
[83 116]
[84 115]
[85 114]
[86 113]
[89 110]
[90 109]
[92 107]
[93 106]
[94 105]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
