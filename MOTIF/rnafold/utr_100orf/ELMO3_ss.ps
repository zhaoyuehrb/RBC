%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:12:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCCGGAACUAACCUCGGCUCCCUUGGGAAGGCCGCGUUGCAUGGCCAGGAGCAGCAGUCUGGGCCGCGAGUGCGGGACACCGAGGUCAGGUCUCGGAAAGGGAGGACCUCCUCGUCCCCAGGGGCCCCAGGCCAGGUGCA\
) } def
/len { sequence length } bind def

/coor [
[92.18584442 398.56948853]
[83.25333405 410.79605103]
[70.83342743 419.45773315]
[56.27333832 423.61495972]
[41.15243912 422.81677246]
[27.11092758 417.14981079]
[15.67192554 407.22869873]
[8.07624912 394.12969971]
[5.14782000 379.27362061]
[7.20429325 364.27194214]
[14.02259731 350.75198364]
[24.86313438 340.18026733]
[38.55000305 333.70352173]
[53.59855652 332.02429199]
[56.84514999 317.37985229]
[60.09174347 302.73541260]
[63.33833694 288.09097290]
[61.70286942 280.82492065]
[66.81879425 273.16412354]
[70.38407898 258.59399414]
[73.94937134 244.02384949]
[77.51465607 229.45372009]
[80.28035736 214.71089172]
[82.23825073 199.83921814]
[84.19614410 184.96754456]
[86.15403748 170.09587097]
[88.11193085 155.22419739]
[90.06982422 140.35252380]
[92.02771759 125.48085785]
[93.98561096 110.60918427]
[90.49642944 108.77006531]
[87.60751343 105.76602173]
[85.70899963 101.80593872]
[85.11474609 97.22846222]
[86.01981354 92.47342682]
[76.63095856 80.77516174]
[67.24211121 69.07688904]
[57.85325623 57.37862396]
[48.46440506 45.68035889]
[38.94850540 34.08520126]
[29.30669022 22.59453392]
[19.66487503 11.10386753]
[10.02306175 -0.38679889]
[3.83838511 -3.05125356]
[0.48514459 -7.75752020]
[0.22457600 -12.59545898]
[-8.90684509 -24.49575806]
[-18.03826714 -36.39606094]
[-27.16968918 -48.29636002]
[-41.70911407 -54.53460312]
[-43.31857300 -69.34199524]
[-52.44999313 -81.24229431]
[-61.58141708 -93.14259338]
[-77.21096039 -93.64389038]
[-88.82711792 -104.11284637]
[-90.94508362 -119.60633850]
[-82.56482697 -132.80880737]
[-67.64324951 -137.48646545]
[-53.22585678 -131.43064880]
[-46.12010574 -117.50074768]
[-49.68111420 -102.27401733]
[-40.54969406 -90.37371826]
[-31.41827393 -78.47341919]
[-17.53198814 -73.08636475]
[-15.26938820 -57.42778015]
[-6.13796663 -45.52748108]
[2.99345469 -33.62718201]
[12.12487602 -21.72688103]
[21.51372910 -10.02861309]
[31.15554237 1.46205366]
[40.79735565 12.95272064]
[50.43917084 24.44338608]
[57.19932556 27.56917191]
[60.16267014 36.29150391]
[69.55152130 47.98977280]
[78.94037628 59.68804169]
[88.32922363 71.38630676]
[97.71807861 83.08457184]
[112.24845123 86.80858612]
[126.10664368 81.06832886]
[139.96484375 75.32807922]
[143.68870544 60.38020325]
[155.36384583 50.60551453]
[170.37838745 49.59185028]
[182.96014404 57.51884079]
[196.81834412 51.77858734]
[210.67652893 46.03833771]
[224.53472900 40.29808426]
[238.39291382 34.55783463]
[252.25111389 28.81758308]
[255.86450195 18.45738602]
[264.43380737 11.96382999]
[274.94497681 11.31479645]
[283.86627197 16.48394966]
[297.96166992 11.35364628]
[312.05706787 6.22334433]
[326.15246582 1.09304225]
[334.20840454 -12.78071594]
[350.09863281 -14.98983765]
[361.63351440 -3.83967423]
[359.96447754 12.11632347]
[346.37185669 20.63807869]
[331.28274536 15.18843174]
[317.18737793 20.31873322]
[303.09197998 25.44903564]
[288.99658203 30.57933807]
[277.77563477 46.27224350]
[257.99136353 42.67577744]
[244.13317871 48.41602707]
[230.27497864 54.15627670]
[216.41677856 59.89653015]
[202.55859375 65.63677979]
[188.70039368 71.37702942]
[185.40898132 85.87891388]
[174.07531738 95.77902985]
[158.90800476 97.12284851]
[145.70509338 89.18627167]
[131.84689331 94.92652130]
[117.98870087 100.66677856]
[108.85728455 112.56707764]
[106.89939117 127.43875122]
[104.94149780 142.31042480]
[102.98360443 157.18209839]
[101.02571106 172.05377197]
[99.06781769 186.92544556]
[97.10992432 201.79711914]
[95.15203094 216.66879272]
[108.65546417 210.13752747]
[122.27629852 216.42027283]
[126.07360077 230.93167114]
[117.27597809 243.08081055]
[102.30422211 244.00086975]
[92.08478546 233.01901245]
[88.51950073 247.58914185]
[84.95420837 262.15927124]
[81.38892365 276.72940063]
[77.98278046 291.33755493]
[74.73618317 305.98199463]
[71.48959351 320.62643433]
[68.24299622 335.27087402]
[81.17194366 343.15255737]
[90.83926392 354.80682373]
[96.19631958 368.96948242]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 140]
[15 139]
[16 138]
[17 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 127]
[24 126]
[25 125]
[26 124]
[27 123]
[28 122]
[29 121]
[30 120]
[35 78]
[36 77]
[37 76]
[38 75]
[39 74]
[40 72]
[41 71]
[42 70]
[43 69]
[46 68]
[47 67]
[48 66]
[49 65]
[51 63]
[52 62]
[53 61]
[79 119]
[80 118]
[81 117]
[85 113]
[86 112]
[87 111]
[88 110]
[89 109]
[90 108]
[94 106]
[95 105]
[96 104]
[97 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
