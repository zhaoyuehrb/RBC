%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCAACGGAAGUGACGUAAGAGCAGCCAGACCUGGAGGGCUUGGGUAAAAAUGGCUGAAUAUUUAGCUUCGAUAUUCGGGACUGAGAAGGACAAGGUUAACUGCUCUUUUUACUUUAAGAUCGGGGUCUGCCGGCACGGGGACCGGUGCU\
) } def
/len { sequence length } bind def

/coor [
[88.17718506 203.03636169]
[90.76555634 183.82827759]
[91.07556152 168.83148193]
[91.38556671 153.83468628]
[91.69556427 138.83789062]
[72.59445190 128.74510193]
[61.60229492 110.14699554]
[61.97154999 88.54651642]
[73.59294891 70.33498383]
[65.91468048 57.44917297]
[58.23640060 44.56336594]
[50.55812454 31.67755508]
[42.87984848 18.79174614]
[35.20157242 5.90593672]
[27.52329826 -6.97987270]
[16.76563263 -9.05756283]
[9.10973644 -16.58423996]
[6.94047403 -26.87378120]
[10.74374390 -36.44088364]
[3.60453272 -49.63298798]
[-3.53467822 -62.82509613]
[-10.67388916 -76.01720428]
[-17.81310081 -89.20930481]
[-24.95231056 -102.40141296]
[-32.09152222 -115.59352112]
[-39.23073196 -128.78562927]
[-46.90900803 -141.67143250]
[-55.11323166 -154.22892761]
[-71.98695374 -154.82368469]
[-85.06620789 -165.23706055]
[-89.34104919 -181.22814941]
[-83.32438660 -196.47044373]
[-91.78637695 -208.85569763]
[-100.24837494 -221.24096680]
[-115.50724030 -220.18533325]
[-129.15563965 -226.86500549]
[-137.57214355 -239.39611816]
[-138.57952881 -254.35743713]
[-132.00714111 -267.72418213]
[-140.46914673 -280.10943604]
[-149.05867004 -292.40658569]
[-157.77482605 -304.61431885]
[-166.49098206 -316.82205200]
[-175.20713806 -329.02978516]
[-183.92327881 -341.23748779]
[-192.63943481 -353.44522095]
[-201.35559082 -365.65295410]
[-210.07174683 -377.86068726]
[-223.94075012 -375.79336548]
[-237.27976990 -379.89691162]
[-247.49114990 -389.31231689]
[-252.61222839 -402.15209961]
[-251.69242859 -415.87841797]
[-244.96913147 -427.80462646]
[-253.43112183 -440.18988037]
[-261.89312744 -452.57516479]
[-270.35510254 -464.96041870]
[-278.81710815 -477.34567261]
[-287.27911377 -489.73092651]
[-302.28747559 -496.34011841]
[-303.79870605 -512.66949463]
[-290.25817871 -521.92077637]
[-275.59524536 -514.57708740]
[-274.89385986 -498.19293213]
[-266.43185425 -485.80767822]
[-257.96984863 -473.42239380]
[-249.50785828 -461.03713989]
[-241.04586792 -448.65188599]
[-232.58387756 -436.26663208]
[-216.53598022 -437.89114380]
[-201.76606750 -431.17889404]
[-192.32762146 -417.86843872]
[-190.86293030 -401.52297974]
[-197.86401367 -386.57684326]
[-189.14785767 -374.36911011]
[-180.43170166 -362.16137695]
[-171.71554565 -349.95364380]
[-162.99940491 -337.74591064]
[-154.28324890 -325.53817749]
[-145.56709290 -313.33047485]
[-136.85093689 -301.12274170]
[-130.36361694 -297.48358154]
[-128.08387756 -288.57141113]
[-119.62188721 -276.18615723]
[-104.78044891 -277.45001221]
[-91.20880890 -271.07299805]
[-82.59440613 -258.67709351]
[-81.33298492 -243.53425598]
[-87.86311340 -229.70295715]
[-79.40112305 -217.31770325]
[-70.93912506 -204.93243408]
[-57.58047485 -205.78117371]
[-45.45669937 -199.85636902]
[-37.79604721 -188.61616516]
[-36.69728470 -174.94932556]
[-42.55573273 -162.43315125]
[-34.35151291 -149.87565613]
[-31.57151985 -149.18952942]
[-28.90549469 -147.32571411]
[-26.81673622 -144.32550049]
[-25.74351692 -140.40180969]
[-26.03862572 -135.92483521]
[-18.89941597 -122.73272705]
[-11.76020432 -109.54062653]
[-4.62099361 -96.34851837]
[2.51821709 -83.15641022]
[9.65742779 -69.96430206]
[16.79663849 -56.77219772]
[23.93585014 -43.58009338]
[41.10335159 -34.76303101]
[40.40910721 -14.65814877]
[48.08738327 -1.77233922]
[55.76565933 11.11347008]
[63.44393539 23.99927902]
[71.12220764 36.88508987]
[78.80048370 49.77089691]
[86.47875977 62.65670776]
[97.75237274 60.34784317]
[109.21467590 61.36795044]
[119.90336609 65.63139343]
[128.92108154 72.78022766]
[135.51075745 82.21427917]
[139.11914062 93.14152527]
[139.44329834 104.64456940]
[136.45600891 115.75768280]
[130.40809631 125.54786682]
[139.86395264 137.19203186]
[149.31980896 148.83621216]
[158.77566528 160.48037720]
[168.23152161 172.12455750]
[176.12268066 176.85247803]
[177.75949097 184.10848999]
[186.97267151 195.94558716]
[196.18586731 207.78269958]
[210.68588257 216.56826782]
[206.25765991 232.93368530]
[189.30593872 233.20893860]
[184.34875488 216.99589539]
[175.13557434 205.15878296]
[165.92237854 193.32167053]
[156.58735657 181.58041382]
[147.13150024 169.93623352]
[137.67564392 158.29206848]
[128.21977234 146.64788818]
[118.76391602 135.00372314]
[114.89675903 136.81619263]
[110.85733795 138.20292664]
[106.69235992 139.14788818]
[106.38236237 154.14468384]
[106.07235718 169.14147949]
[105.76235199 184.13829041]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 151]
[3 150]
[4 149]
[5 148]
[9 117]
[10 116]
[11 115]
[12 114]
[13 113]
[14 112]
[15 111]
[19 109]
[20 108]
[21 107]
[22 106]
[23 105]
[24 104]
[25 103]
[26 102]
[27 97]
[28 96]
[32 91]
[33 90]
[34 89]
[39 84]
[40 83]
[41 81]
[42 80]
[43 79]
[44 78]
[45 77]
[46 76]
[47 75]
[48 74]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
[126 145]
[127 144]
[128 143]
[129 142]
[130 141]
[132 140]
[133 139]
[134 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
