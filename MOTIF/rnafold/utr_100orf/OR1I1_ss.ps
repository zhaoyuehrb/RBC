%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:00:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAACCAGAAAAGCAAACCGAAAUCUCAGAAUUCUUCCUCCAGGGACUCUCAGAAAAGCCAGAGCAUCAGACCCUCCUCUUCACAAUGUUCCUCUCCA\
) } def
/len { sequence length } bind def

/coor [
[93.52759552 265.93786621]
[98.22155762 251.24194336]
[110.13012695 241.43432617]
[108.26864624 226.55027771]
[106.40716553 211.66622925]
[104.54568481 196.78218079]
[102.68420410 181.89813232]
[91.95159149 181.54588318]
[81.35720062 179.79319763]
[71.08297729 176.67016602]
[61.30536652 172.23042297]
[52.19228363 166.55021667]
[43.90023804 159.72708130]
[36.57163239 151.87823486]
[30.33233070 143.13842773]
[25.28947830 133.65777588]
[21.52968407 123.59910583]
[19.11751556 113.13513947]
[18.09440041 102.44560242]
[18.47790909 91.71406555]
[20.26145363 81.12482452]
[23.41440392 70.85974121]
[27.88261414 61.09510422]
[33.58934784 51.99860764]
[40.43659973 43.72647476]
[48.30677414 36.42076874]
[39.94898987 23.96494865]
[31.59120750 11.50912857]
[17.47698784 4.36074400]
[16.81049728 -10.51894188]
[8.45271301 -22.97476196]
[0.09492895 -35.43058014]
[-14.01928997 -42.57896805]
[-14.68578148 -57.45865250]
[-23.04356575 -69.91447449]
[-31.40135002 -82.37029266]
[-39.75913239 -94.82611084]
[-48.11691666 -107.28192902]
[-63.51663971 -111.77949524]
[-69.46831512 -126.67771912]
[-61.40631485 -140.54797363]
[-45.51512909 -142.75016785]
[-33.98510742 -131.59498596]
[-35.66109848 -115.63971710]
[-27.30331421 -103.18389893]
[-18.94552994 -90.72807312]
[-10.58774567 -78.27225494]
[-2.22996140 -65.81643677]
[11.28645229 -59.55897522]
[12.55074883 -43.78836441]
[20.90853310 -31.33254623]
[29.26631737 -18.87672615]
[42.78273010 -12.61926460]
[44.04702759 3.15134478]
[52.40481186 15.60716438]
[60.76259613 28.06298447]
[80.07832336 20.51644897]
[100.66998291 18.06063652]
[121.21873474 20.85283661]
[140.40847778 28.71421623]
[157.01016235 41.14126968]
[169.96047974 57.33808136]
[178.43000793 76.26728058]
[193.12446594 73.25518036]
[207.81893921 70.24307251]
[222.51339722 67.23096466]
[226.18951416 52.41716003]
[235.93566895 40.67087173]
[249.81675720 34.32434082]
[265.07666016 34.63767242]
[278.68551636 41.54865265]
[287.94128418 53.68510437]
[291.00622559 68.63732147]
[287.27178955 83.43653870]
[277.47946167 95.14435577]
[263.57348633 101.43617249]
[248.31494141 101.06275177]
[234.73341370 94.09823608]
[225.52549744 81.92543030]
[210.83103943 84.93753052]
[196.13658142 87.94963837]
[181.44210815 90.96174622]
[181.72607422 105.94625092]
[179.27609253 120.73184204]
[174.17414856 134.82389832]
[166.59089661 147.75102234]
[156.78002930 159.08076477]
[145.06973267 168.43411255]
[131.85174561 175.49816895]
[117.56825256 180.03665161]
[119.42973328 194.92070007]
[121.29121399 209.80474854]
[123.15269470 224.68879700]
[125.01417542 239.57284546]
[138.97135925 246.14555359]
[147.14004517 259.23281860]
[146.91362000 274.65850830]
[138.36434937 287.50036621]
[124.22026825 293.66061401]
[108.99469757 291.17349243]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 94]
[4 93]
[5 92]
[6 91]
[7 90]
[26 56]
[27 55]
[28 54]
[30 52]
[31 51]
[32 50]
[34 48]
[35 47]
[36 46]
[37 45]
[38 44]
[63 82]
[64 81]
[65 80]
[66 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
