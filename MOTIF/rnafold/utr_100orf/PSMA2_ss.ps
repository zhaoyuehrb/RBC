%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:11:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCACAGUGCGCAUGUGUGCGGCUGUGCUUUGGCUCUUCGGGUAAAGAUGGCGGAGCGCGGGUACAGCUUUUCGCUGACUACAUUCAGCCCGUCUGGUAAACUUGUCCAGAUUGAAUAUGCUUUGGCUGCUGUAGCUGGAGGAGCCC\
) } def
/len { sequence length } bind def

/coor [
[-14.45254803 261.76330566]
[-23.57351112 273.67163086]
[-32.69447327 285.57995605]
[-35.45585251 294.35971069]
[-42.13541412 297.64050293]
[-51.50540924 309.35385132]
[-60.87540817 321.06723022]
[-70.24540710 332.78060913]
[-79.61540985 344.49398804]
[-88.86140442 356.30548096]
[-97.98236084 368.21380615]
[-107.10332489 380.12213135]
[-116.22428894 392.03045654]
[-117.81285095 408.35247803]
[-132.85234070 414.89050293]
[-145.87142944 404.91876221]
[-143.47718811 388.69534302]
[-128.13261414 382.90948486]
[-119.01164246 371.00115967]
[-109.89067841 359.09283447]
[-100.76972198 347.18453979]
[-99.18869781 339.91262817]
[-91.32878113 335.12399292]
[-81.95877838 323.41061401]
[-72.58878326 311.69723511]
[-63.21878433 299.98385620]
[-53.84878540 288.27050781]
[-44.60279083 276.45898438]
[-35.48182678 264.55065918]
[-26.36086464 252.64234924]
[-28.56646729 237.95661926]
[-19.48615265 225.74995422]
[-4.06744385 223.53610229]
[5.05351925 211.62777710]
[14.17448235 199.71945190]
[23.29544640 187.81114197]
[32.41640854 175.90281677]
[41.53737259 163.99450684]
[50.65833664 152.08618164]
[59.77930069 140.17787170]
[61.37574768 125.36907196]
[75.90969086 119.11805725]
[85.03065491 107.20973969]
[72.90522766 116.04003143]
[57.91167450 115.60034180]
[46.32454681 106.07466125]
[42.99287415 91.44934845]
[49.31090546 77.84484100]
[62.63464737 70.95442200]
[77.38832855 73.66160583]
[87.39826965 84.83465576]
[80.97154236 71.28115845]
[74.54481506 57.72766495]
[68.11809540 44.17417145]
[61.69136810 30.62067604]
[55.26464462 17.06718254]
[48.83791733 3.51368809]
[35.93409348 -5.64064884]
[37.47227859 -20.45561600]
[31.04555511 -34.00910950]
[15.87035942 -37.78369141]
[6.71359396 -50.45995331]
[7.89880419 -66.05255890]
[18.86636925 -77.19915009]
[34.43774033 -78.63665009]
[47.26059341 -69.68631744]
[51.28036880 -54.57422256]
[44.59904861 -40.43583679]
[51.02577209 -26.88234138]
[63.46991730 -18.69744110]
[62.39141464 -2.91303682]
[68.81813812 10.64045715]
[75.24486542 24.19395256]
[81.67158508 37.74744415]
[88.09831238 51.30094147]
[94.52503967 64.85443115]
[100.95175934 78.40792847]
[105.59394073 83.27623749]
[107.72802734 88.74103546]
[107.46051025 93.83600616]
[122.27335358 91.47387695]
[137.08619690 89.11174011]
[151.89904785 86.74960327]
[166.71188354 84.38746643]
[174.93536377 74.39347839]
[187.36944580 72.76203918]
[197.23887634 79.82941437]
[212.09822083 77.78010559]
[226.95758057 75.73079681]
[241.81692505 73.68148804]
[256.67626953 71.63217163]
[265.50930786 65.09100342]
[275.09930420 66.86881256]
[289.08972168 61.45886230]
[303.08016968 56.04891205]
[317.07061768 50.63896179]
[331.06106567 45.22901154]
[345.05151367 39.81906128]
[348.04919434 24.68573952]
[358.76916504 13.59132481]
[373.79067993 10.07600021]
[388.32043457 15.26149464]
[397.72207642 27.49313545]
[398.99551392 42.86785126]
[391.73443604 56.47962570]
[378.25582886 63.98498917]
[362.86065674 62.98900986]
[350.46145630 53.80950165]
[336.47100830 59.21945190]
[322.48056030 64.62940216]
[308.49011230 70.03935242]
[294.49969482 75.44930267]
[280.50924683 80.85925293]
[294.87692261 85.16857147]
[306.11169434 95.10736084]
[312.14114380 108.84220123]
[311.85296631 123.83943176]
[305.30035400 137.33251953]
[293.69207764 146.83238220]
[279.16946411 150.58659363]
[264.41156006 147.90261841]
[252.14070129 139.27555847]
[244.62052917 126.29684448]
[243.23826599 111.36067200]
[248.24891663 97.22230530]
[258.72558594 86.49152374]
[243.86624146 88.54084015]
[229.00689697 90.59014893]
[214.14753723 92.63945770]
[199.28819275 94.68876648]
[186.07470703 106.19347382]
[169.07402039 99.20030975]
[154.26118469 101.56244659]
[139.44833374 103.92458344]
[124.63549042 106.28671265]
[109.82264709 108.64884949]
[96.93897247 116.33070374]
[87.81800842 128.23901367]
[85.56916046 143.89958191]
[71.68761444 149.29882812]
[62.56665421 161.20715332]
[53.44569016 173.11546326]
[44.32472610 185.02378845]
[35.20376205 196.93209839]
[26.08279991 208.84042358]
[16.96183777 220.74873352]
[7.84087372 232.65705872]
[9.72027206 248.12010193]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[5 27]
[6 26]
[7 25]
[8 24]
[9 23]
[10 21]
[11 20]
[12 19]
[13 18]
[33 147]
[34 146]
[35 145]
[36 144]
[37 143]
[38 142]
[39 141]
[40 140]
[42 138]
[43 137]
[51 77]
[52 76]
[53 75]
[54 74]
[55 73]
[56 72]
[57 71]
[59 69]
[60 68]
[80 136]
[81 135]
[82 134]
[83 133]
[84 132]
[87 130]
[88 129]
[89 128]
[90 127]
[91 126]
[93 113]
[94 112]
[95 111]
[96 110]
[97 109]
[98 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
