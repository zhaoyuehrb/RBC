%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:55:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCGCGCCUGACCGCGGCAGCUCCCACCAUGGCGGAGACCAAGCUCCAGCUGUUUGUCAAGGCGAGUGAGGACGGGGAGAGCGUGGGUCACUGCCCCUCCUGCCAGCGGCUCUUCAUGGUCCUGCUCC\
) } def
/len { sequence length } bind def

/coor [
[343.50192261 179.42555237]
[330.85388184 187.48948669]
[315.87139893 186.76489258]
[304.06054688 177.51808167]
[299.76181030 163.14724731]
[304.55499268 148.93368530]
[316.67895508 140.10076904]
[301.83636475 137.93344116]
[286.99374390 135.76609802]
[272.15115356 133.59877014]
[257.28347778 131.61093140]
[242.39282227 129.80287170]
[227.50219727 127.99482727]
[219.95596313 135.06665039]
[209.53625488 136.79951477]
[199.70448303 132.36959839]
[193.86492920 123.04224396]
[179.07904053 120.51688385]
[164.29315186 117.99153137]
[149.50726318 115.46617889]
[134.72137451 112.94081879]
[119.93547821 110.41546631]
[105.14958954 107.89010620]
[104.06039429 128.89602661]
[85.58279419 146.76608276]
[70.79690552 149.29142761]
[56.01101303 151.81678772]
[41.41590881 160.44345093]
[29.08605194 148.80683899]
[36.85466766 133.73748779]
[53.48565674 137.03089905]
[68.27154541 134.50553894]
[83.05744171 131.98019409]
[85.04535675 117.11182404]
[87.03311157 102.24478912]
[73.43000031 95.92376709]
[59.82688522 89.60275269]
[46.22377014 83.28173828]
[31.46776962 88.94178009]
[17.06565285 82.43373871]
[11.56194019 67.61872101]
[18.22188377 53.28621674]
[33.09426117 47.93944168]
[47.35555267 54.75054932]
[52.54478455 69.67861938]
[66.14790344 75.99964142]
[79.75101471 82.32065582]
[93.35413361 88.64167023]
[107.67494202 93.10421753]
[122.46083832 95.62957001]
[137.24671936 98.15493011]
[152.03262329 100.68028259]
[166.81851196 103.20564270]
[181.60440063 105.73099518]
[196.39028931 108.25635529]
[214.85913086 100.34676361]
[229.31024170 113.10419464]
[244.20088196 114.91223907]
[259.09152222 116.72029114]
[268.09140015 114.63500977]
[274.31851196 118.75616455]
[289.16110229 120.92350006]
[304.00369263 123.09083557]
[318.84628296 125.25817108]
[333.82876587 125.98287201]
[348.81124878 125.25817108]
[363.79373169 124.53347015]
[378.77621460 123.80877686]
[387.29660034 120.23806000]
[394.12860107 123.25202179]
[409.12423706 122.88956451]
[424.11984253 122.52710724]
[439.11547852 122.16464996]
[454.11108398 121.80219269]
[465.89056396 108.93498230]
[482.99401855 108.52513123]
[494.89849854 120.33962250]
[509.88098145 119.61492920]
[524.86346436 118.89022827]
[539.84594727 118.16552734]
[554.82843018 117.44082642]
[569.81091309 116.71612549]
[584.79339600 115.99142456]
[599.76599121 115.08574677]
[614.72662354 113.99922180]
[629.48089600 111.29539490]
[643.85461426 107.00621033]
[658.22827148 102.71702576]
[672.60198975 98.42784119]
[683.46704102 86.14443207]
[699.48126221 89.67687225]
[704.17047119 105.39128876]
[692.71093750 117.12203217]
[676.89117432 112.80152893]
[662.51745605 117.09071350]
[648.14379883 121.37989807]
[633.77008057 125.66908264]
[647.33178711 132.07856750]
[655.42053223 144.71075439]
[655.56744385 159.71003723]
[647.72778320 172.49829102]
[634.29431152 179.17227173]
[619.36724854 177.69494629]
[607.50268555 168.51719666]
[602.32183838 154.44029236]
[605.40612793 139.76081848]
[615.81311035 128.95982361]
[600.85253906 130.04634094]
[594.34332275 133.70561218]
[585.51806641 130.97390747]
[570.53558350 131.69860840]
[555.55310059 132.42330933]
[540.57061768 133.14801025]
[525.58813477 133.87271118]
[510.60568237 134.59741211]
[495.62319946 135.32211304]
[488.33822632 146.02145386]
[476.02636719 150.61016846]
[463.13839722 147.18872070]
[454.47354126 136.79782104]
[439.47793579 137.16026306]
[424.48229980 137.52272034]
[409.48669434 137.88517761]
[394.49105835 138.24763489]
[379.50091553 138.79125977]
[364.51843262 139.51596069]
[349.53594971 140.24066162]
[334.55346680 140.96536255]
[345.76812744 150.92684937]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 64]
[8 63]
[9 62]
[10 61]
[11 59]
[12 58]
[13 57]
[17 55]
[18 54]
[19 53]
[20 52]
[21 51]
[22 50]
[23 49]
[25 33]
[26 32]
[27 31]
[35 48]
[36 47]
[37 46]
[38 45]
[65 128]
[66 127]
[67 126]
[68 125]
[70 124]
[71 123]
[72 122]
[73 121]
[74 120]
[77 116]
[78 115]
[79 114]
[80 113]
[81 112]
[82 111]
[83 110]
[84 108]
[85 107]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
