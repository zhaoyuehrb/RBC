%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:14:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCACCCGGGAGGCGGGGCCAGCGAGGCAAGAUGGAGUUAGUGCAGGUCCUGAAACGCGGGCUGCAGCAGAUCACCGGCCACGGCGGUCUCCGAGGCUAUCUACGGGUUUUUUUCAGGACAAAUGAUGCGA\
) } def
/len { sequence length } bind def

/coor [
[87.18308258 106.54092407]
[90.52108765 100.99903870]
[75.62403107 99.24471283]
[60.70743179 97.66512299]
[45.77334213 96.26050568]
[30.83925247 94.85588074]
[15.88972282 93.62641144]
[0.92680919 92.57227325]
[-14.03610420 91.51812744]
[-28.99901772 90.46398163]
[-36.62264252 103.64130402]
[-49.16048050 112.16712189]
[-64.09561157 114.39468384]
[-78.45783997 109.93514252]
[-89.41437531 99.72418213]
[-94.82856750 85.82627106]
[-109.79148102 84.77212524]
[-124.75439453 83.71798706]
[-139.71730042 82.66384125]
[-154.68022156 81.60969543]
[-169.64312744 80.55555725]
[-184.60604858 79.50141144]
[-198.91584778 86.24975586]
[-211.06790161 77.63716125]
[-226.03082275 76.58302307]
[-240.99372864 75.52887726]
[-257.29998779 83.99008942]
[-271.47958374 73.71849823]
[-286.46310425 73.01541138]
[-301.44662476 72.31232452]
[-311.04022217 84.50831604]
[-325.97940063 88.70368958]
[-340.51968384 83.28524017]
[-349.07006836 70.33647919]
[-348.34274292 54.83645630]
[-338.61740112 42.74525452]
[-323.63360596 38.71218872]
[-309.15295410 44.28805542]
[-300.74353027 57.32881546]
[-285.76000977 58.03189850]
[-270.77651978 58.73498154]
[-261.56829834 50.80060577]
[-249.02201843 51.32201004]
[-239.93959045 60.56596375]
[-224.97666931 61.62010956]
[-210.01376343 62.67425156]
[-196.77420044 55.85050583]
[-183.55191040 64.53849792]
[-168.58898926 65.59264374]
[-153.62608337 66.64678192]
[-138.66316223 67.70092773]
[-123.70024872 68.75507355]
[-108.73733521 69.80921173]
[-93.77442169 70.86335754]
[-86.46515656 57.86181259]
[-74.18521118 49.28786850]
[-59.33960342 46.88603210]
[-44.86430740 51.18557358]
[-33.64567184 61.38504410]
[-27.94487572 75.50106812]
[-12.98196125 76.55521393]
[1.98095202 77.60935974]
[16.94386482 78.66349792]
[23.90219688 75.97039032]
[32.24387360 79.92179108]
[47.17796326 81.32641602]
[62.11205292 82.73103333]
[69.13160706 80.20178223]
[77.37835693 84.34764862]
[92.27541351 86.10198212]
[106.16701508 80.44305420]
[115.59770966 68.77848816]
[125.02840424 57.11392975]
[134.45909119 45.44936371]
[143.88978577 33.78480148]
[146.54931641 18.18873024]
[160.56793213 13.15606594]
[169.99862671 1.49150300]
[179.42932129 -10.17306042]
[181.44616699 -26.44771385]
[196.65225220 -32.58833313]
[209.40484619 -22.27798080]
[206.58517456 -6.12305737]
[191.09388733 -0.74236703]
[181.66319275 10.92219639]
[172.23249817 22.58675957]
[170.24751282 37.34850311]
[155.55435181 43.21549606]
[146.12365723 54.88005829]
[136.69296265 66.54462433]
[127.26227570 78.20918274]
[117.83158112 89.87374878]
[118.70874786 97.32227325]
[132.33465576 91.05053711]
[142.50993347 102.07159424]
[135.17245483 115.15445709]
[120.46307373 112.21932983]
[121.34024048 119.66786194]
[133.22267151 128.82250977]
[142.01896667 131.61935425]
[145.27302551 138.33370972]
[156.93759155 147.76438904]
[168.60215759 157.19508362]
[181.42854309 151.48825073]
[195.39529419 151.88310242]
[207.76078796 158.24476624]
[216.12251282 169.27276611]
[218.88385010 182.76638794]
[215.55859375 196.06385803]
[226.99887085 205.76539612]
[238.43914795 215.46694946]
[249.87942505 225.16850281]
[261.31970215 234.87004089]
[277.54260254 237.26786804]
[283.32507324 252.61372375]
[272.71859741 265.12109375]
[256.63421631 261.92349243]
[251.61814880 246.31031799]
[240.17787170 236.60877991]
[228.73759460 226.90722656]
[217.29731750 217.20567322]
[205.85704041 207.50413513]
[190.82751465 213.32093811]
[174.81901550 210.77650452]
[162.18867493 200.46809387]
[156.42205811 185.11900330]
[159.17146301 168.85964966]
[147.50689697 159.42895508]
[135.84233093 149.99826050]
[124.06802368 140.70495605]
[112.18558502 131.55029297]
[100.04936218 128.96362305]
[91.39171600 122.51616669]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 70]
[3 69]
[4 67]
[5 66]
[6 65]
[7 63]
[8 62]
[9 61]
[10 60]
[16 54]
[17 53]
[18 52]
[19 51]
[20 50]
[21 49]
[22 48]
[24 46]
[25 45]
[26 44]
[28 41]
[29 40]
[30 39]
[71 92]
[72 91]
[73 90]
[74 89]
[75 88]
[77 86]
[78 85]
[79 84]
[98 131]
[99 130]
[101 129]
[102 128]
[103 127]
[109 122]
[110 121]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
