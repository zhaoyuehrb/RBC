%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:37:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCACCUGCCUGGCAACAUGGGGUCCAGCAGCUUCUUGGUCCUCAUGGUGUCUCUCGUUCUUGUGACCCUGGUGGCUGUGGAAGGAGUUAAAGAGGGUAUAGAGAAAGCAGGGGUUU\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 261.71862793]
[92.50000000 246.71861267]
[92.50000000 231.71861267]
[92.50000000 216.71861267]
[84.76270294 203.99134827]
[92.50000000 190.19117737]
[92.50000000 175.19117737]
[92.50000000 160.19117737]
[92.50000000 145.19117737]
[92.50000000 130.19117737]
[80.87850952 124.53824615]
[72.55699158 114.65052795]
[68.97155762 102.23444366]
[54.19186783 99.67306519]
[39.41217422 97.11167908]
[24.63248062 94.55030060]
[9.71378136 99.81746674]
[-1.50535226 90.02050781]
[-16.28504562 87.45912933]
[-31.06473923 84.89775085]
[-45.84443283 82.33637238]
[-60.62412643 79.77499390]
[-75.40381622 77.21360779]
[-90.18350983 74.65222931]
[-105.10221100 79.91939545]
[-116.32134247 70.12243652]
[-131.10104370 67.56105804]
[-145.88073730 64.99967957]
[-160.66043091 62.43829727]
[-172.49246216 72.66262054]
[-188.12907410 72.83773041]
[-200.18710327 62.88093567]
[-202.97314453 47.49353790]
[-195.17169189 33.94099426]
[-180.46636963 28.62240028]
[-165.80058289 34.04903412]
[-158.09904480 47.65860748]
[-143.31935120 50.21998596]
[-128.53965759 52.78136444]
[-113.75996399 55.34274673]
[-99.89840698 49.89237595]
[-87.62213135 59.87253571]
[-72.84243774 62.43391800]
[-58.06274414 64.99530029]
[-43.28305054 67.55667877]
[-28.50335884 70.11805725]
[-13.72366524 72.67943573]
[1.05602789 75.24081421]
[14.91758442 69.79045105]
[27.19386101 79.77060699]
[41.97355270 82.33198547]
[56.75324631 84.89337158]
[71.53294373 87.45475006]
[77.75181580 78.25660706]
[86.80484009 71.82830048]
[97.53876495 68.98872375]
[108.58621979 70.09960175]
[118.53989410 75.01942444]
[126.13181305 83.12146759]
[140.32244873 78.26082611]
[154.51309204 73.40019226]
[168.70373535 68.53955841]
[182.89437866 63.67892456]
[187.54753113 48.99375534]
[199.81219482 39.96982574]
[214.86074829 39.89894104]
[226.92109680 48.59871292]
[241.11174011 43.73807907]
[255.30238342 38.87744522]
[269.49301147 34.01681137]
[283.68365479 29.15617561]
[291.03118896 13.34720230]
[307.20068359 7.79270411]
[322.11389160 15.44272709]
[336.17126465 10.20919800]
[350.22866821 4.97566843]
[364.28604126 -0.25786057]
[378.34344482 -5.49138975]
[382.38116455 -20.47392845]
[394.47537231 -30.19553185]
[409.97561646 -30.91804504]
[422.92172241 -22.36364555]
[428.33566284 -7.82167435]
[424.13565063 7.11618233]
[411.93670654 16.70601463]
[396.42953491 17.26033592]
[383.57696533 8.56599903]
[369.51959229 13.79952812]
[355.46218872 19.03305626]
[341.40481567 24.26658630]
[327.34741211 29.50011635]
[323.64236450 41.91722488]
[313.28341675 50.02308655]
[299.94943237 50.65211868]
[288.54428101 43.34681702]
[274.35363770 48.20745087]
[260.16302490 53.06808472]
[245.97238159 57.92871857]
[231.78173828 62.78935242]
[227.58810425 77.05650330]
[215.65640259 86.22700500]
[200.43467712 86.61782837]
[187.75500488 77.86956787]
[173.56436157 82.73020172]
[159.37373352 87.59083557]
[145.18309021 92.45146942]
[130.99244690 97.31210327]
[125.31156921 118.08538818]
[107.50000000 130.19117737]
[107.50000000 145.19117737]
[107.50000000 160.19117737]
[107.50000000 175.19117737]
[107.50000000 190.19117737]
[115.23729706 203.99134827]
[107.50000000 216.71861267]
[107.50000000 231.71861267]
[107.50000000 246.71861267]
[107.50000000 261.71862793]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 118]
[2 117]
[3 116]
[4 115]
[6 113]
[7 112]
[8 111]
[9 110]
[10 109]
[13 53]
[14 52]
[15 51]
[16 50]
[18 48]
[19 47]
[20 46]
[21 45]
[22 44]
[23 43]
[24 42]
[26 40]
[27 39]
[28 38]
[29 37]
[59 107]
[60 106]
[61 105]
[62 104]
[63 103]
[67 99]
[68 98]
[69 97]
[70 96]
[71 95]
[74 91]
[75 90]
[76 89]
[77 88]
[78 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
