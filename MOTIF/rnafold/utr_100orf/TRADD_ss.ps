%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:32:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACACCCGGAAGCGGCGGAGUAGAGCGGAGCCUGGCGGGCGUGGGAACCCAGGCCCCGCCGAGGCGGCCAGGUUAGUGCAGCAGGAGGUGAGAUGGCAGCUGGGCAAAAUGGGCACGAAGAGUGGGUGGGCAGCGCAUACCUGUUUGUGGAGUCCUCGCUGGACAAGGUGGUCCUGUCGGAUGCCUACGCGC\
) } def
/len { sequence length } bind def

/coor [
[262.60424805 253.77497864]
[250.08184814 245.51731873]
[235.19729614 244.97012329]
[227.93598938 230.91366577]
[215.41355896 222.65600586]
[202.89114380 214.39834595]
[190.36872864 206.14068604]
[177.84629822 197.88302612]
[165.32388306 189.62535095]
[151.06307983 197.21025085]
[134.82948303 196.56877136]
[121.05339813 187.78132629]
[113.54218292 173.16432190]
[114.42813110 156.66026306]
[101.77363586 148.60646057]
[86.95079041 150.90498352]
[77.32966614 162.41297913]
[81.24113464 177.42897034]
[75.54806519 191.86395264]
[62.43956375 200.16737366]
[46.95611572 199.14640808]
[35.05141830 189.19361877]
[31.30307388 174.13607788]
[37.15239716 159.76371765]
[50.35020447 151.60298157]
[65.82167053 152.79185486]
[75.44279480 141.28385925]
[72.26704407 134.48941040]
[57.32292175 133.19583130]
[65.91554260 120.90049744]
[62.73978806 114.10604858]
[47.73978806 114.10604858]
[32.73978806 114.10604858]
[17.73978806 114.10604858]
[2.74027967 114.22750092]
[-12.25775337 114.47039032]
[-27.25578690 114.71328735]
[-42.25381851 114.95618439]
[-57.25185394 115.19908142]
[-72.24742889 115.56340790]
[-87.23956299 116.04913330]
[-100.78195190 124.22925568]
[-113.75309753 116.90814209]
[-128.74522400 117.39387512]
[-143.73736572 117.87960052]
[-157.37332153 126.98963928]
[-171.95912170 119.49389648]
[-172.49015808 103.10334778]
[-158.42013550 94.67918396]
[-144.22308350 102.88746643]
[-129.23095703 102.40174103]
[-114.23882294 101.91600800]
[-101.76877594 93.77063751]
[-87.72528839 101.05699921]
[-72.73315430 100.57127380]
[-66.14022064 97.20765686]
[-57.49475098 100.20104980]
[-42.49671555 99.95815277]
[-27.49868202 99.71525574]
[-12.50064945 99.47235870]
[2.49738383 99.22946167]
[9.14392281 95.97304535]
[17.73978806 99.10604858]
[32.73978806 99.10604858]
[47.73978806 99.10604858]
[62.73978806 99.10604858]
[74.41720581 84.78699493]
[88.90545654 80.70449829]
[86.24758911 65.94184875]
[83.58972931 51.17920303]
[69.77752686 44.35795593]
[62.71291733 30.86927223]
[64.91946411 15.98319912]
[75.34365082 5.37780571]
[72.68578339 -9.38484097]
[62.62564850 -21.59566689]
[67.98535919 -35.49252701]
[65.32749176 -50.25517654]
[55.26736069 -62.46599960]
[60.62707138 -76.36286163]
[57.96920776 -91.12551117]
[55.31134033 -105.88815308]
[52.65347672 -120.65080261]
[37.71183014 -123.20481873]
[24.54633522 -130.71783447]
[14.74679089 -142.28265381]
[9.49654007 -156.50273132]
[9.42957497 -171.66093445]
[14.55398369 -185.92684937]
[24.25096703 -197.57778931]
[37.34956741 -205.20683289]
[52.26806641 -207.89276123]
[67.20498657 -205.31121826]
[80.35661316 -197.77394104]
[90.13482666 -186.19110107]
[95.35886383 -171.96136475]
[95.39788818 -156.80305481]
[90.24720001 -142.54661560]
[80.52876282 -130.91357422]
[67.41612244 -123.30867004]
[70.07398987 -108.54602051]
[72.73185730 -93.78337097]
[75.38971710 -79.02072906]
[85.25974274 -67.86582184]
[80.09014130 -52.91304016]
[82.74800873 -38.15039444]
[92.61803436 -26.99549103]
[87.44843292 -12.04270649]
[90.10630035 2.71994114]
[103.57480621 9.02369785]
[110.83467865 22.20543671]
[108.91818237 37.31108093]
[98.35237122 48.52133560]
[101.01023865 63.28398514]
[103.66810608 78.04663086]
[129.72616577 98.49346924]
[109.82743835 135.95196533]
[122.48193359 144.00576782]
[134.54162598 136.90341187]
[148.41894531 135.69879150]
[161.39811707 140.57038879]
[170.96379089 150.51313782]
[175.28848267 163.54524231]
[173.58154297 177.10293579]
[186.10395813 185.36059570]
[198.62638855 193.61825562]
[211.14880371 201.87591553]
[223.67123413 210.13359070]
[236.19364929 218.39125061]
[251.97389221 219.52906799]
[258.33950806 232.99488831]
[270.86193848 241.25254822]
[286.64215088 242.39038086]
[293.00778198 255.85620117]
[305.53021240 264.11386108]
[318.05261230 272.37152100]
[330.57504272 280.62918091]
[339.67391968 267.70492554]
[356.34686279 259.57290649]
[377.69641113 260.25283813]
[398.88101196 271.97814941]
[413.87902832 272.22106934]
[423.98596191 260.28857422]
[439.40701294 257.69531250]
[452.86087036 265.66577148]
[457.99499512 280.43649292]
[452.38525391 295.03323364]
[438.68035889 302.56384277]
[423.35134888 299.47259521]
[413.63613892 287.21908569]
[398.63809204 286.97619629]
[395.26632690 301.59301758]
[391.89483643 316.20849609]
[405.48373413 322.55999756]
[419.07266235 328.91149902]
[432.66156006 335.26300049]
[448.17190552 331.16314697]
[460.96136475 340.84866333]
[461.21896362 356.88964844]
[448.74710083 366.98083496]
[433.11309814 363.38113403]
[426.31005859 348.85192871]
[412.72116089 342.50042725]
[399.13223267 336.14892578]
[385.54333496 329.79742432]
[380.54898071 335.39260864]
[365.56588745 352.17825317]
[373.41369629 364.96148682]
[381.26153564 377.74475098]
[389.10937500 390.52798462]
[396.95721436 403.31124878]
[404.12445068 408.99765015]
[404.82669067 416.36566162]
[412.46649170 429.27432251]
[420.10629272 442.18295288]
[434.65374756 449.75286865]
[435.10131836 466.14590454]
[420.98858643 474.49832153]
[406.83352661 466.21786499]
[407.19763184 449.82278442]
[399.55783081 436.91412354]
[391.91802979 424.00546265]
[384.17395020 411.15908813]
[376.32611084 398.37582397]
[368.47827148 385.59259033]
[360.63046265 372.80932617]
[352.78262329 360.02606201]
[323.01889038 342.28646851]
[313.46624756 314.89715576]
[322.31738281 293.15161133]
[309.79495239 284.89395142]
[297.27252197 276.63629150]
[284.75012207 268.37863159]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 132]
[2 131]
[4 129]
[5 128]
[6 127]
[7 126]
[8 125]
[9 124]
[14 118]
[15 117]
[16 27]
[17 26]
[31 66]
[32 65]
[33 64]
[34 63]
[35 61]
[36 60]
[37 59]
[38 58]
[39 57]
[40 55]
[41 54]
[43 52]
[44 51]
[45 50]
[68 115]
[69 114]
[70 113]
[74 109]
[75 108]
[77 106]
[78 105]
[80 103]
[81 102]
[82 101]
[83 100]
[134 193]
[135 192]
[136 191]
[137 190]
[141 151]
[142 150]
[153 165]
[154 164]
[155 163]
[156 162]
[167 187]
[168 186]
[169 185]
[170 184]
[171 183]
[173 182]
[174 181]
[175 180]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
