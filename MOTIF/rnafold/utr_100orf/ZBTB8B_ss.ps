%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:49:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUCGGUGCGCGGUGCUCCGUGGCUGCGCUGCUGGAACCCGCUGGAAGAGAUACAGGUUUGCUCUGGAGCAGCAGCAGCUGGCGGAGCAAUGGAGAUGCAAUCCUAUUAUGCCAAGCUUUUGGGGGAGCUGAAUGAACAGAGAAAGAGGGACUUUUUCUGUGACUGCAGCAUCAUUGUGGAAGGGCGGA\
) } def
/len { sequence length } bind def

/coor [
[93.05934906 333.34432983]
[101.49286652 319.27990723]
[101.24615479 304.28195190]
[100.99944305 289.28396606]
[100.75273132 274.28598022]
[87.66662598 267.17126465]
[79.84673309 254.37654114]
[79.47864532 239.28578186]
[86.76132202 225.94938660]
[99.82680511 217.99700928]
[99.58009338 202.99903870]
[99.33338165 188.00106812]
[99.08666992 173.00308228]
[98.83995819 158.00511169]
[98.59324646 143.00714111]
[52.56065750 88.61037445]
[37.74340820 86.27603912]
[22.92615891 83.94171143]
[8.10890961 81.60737610]
[-6.70834017 79.27304840]
[-21.52559090 76.93871307]
[-36.34283829 74.60438538]
[-53.36035919 81.61836243]
[-66.57402039 70.08094788]
[-81.42765808 67.99063873]
[-96.28129578 65.90032959]
[-111.13493347 63.81001282]
[-125.98857117 61.71970367]
[-140.85890198 59.75161743]
[-155.74491882 57.90589523]
[-170.63092041 56.06016922]
[-185.51693726 54.21444321]
[-200.40293884 52.36872101]
[-215.28895569 50.52299500]
[-205.40487671 61.80595016]
[-203.91368103 76.73164368]
[-211.37013245 89.74706268]
[-225.00013733 96.00991058]
[-239.73271179 93.19012451]
[-250.08670044 82.33679199]
[-252.20997620 67.48782349]
[-245.31257629 54.16769409]
[-231.95858765 47.33172607]
[-246.47373962 43.54882812]
[-260.98889160 39.76593018]
[-275.50402832 35.98303223]
[-290.01919556 32.20013428]
[-303.54000854 39.93484497]
[-318.20654297 35.89167404]
[-325.49707031 22.95399284]
[-340.01223755 19.17109680]
[-354.52737427 15.38819885]
[-369.04254150 11.60530186]
[-384.70120239 16.47747803]
[-396.56478882 5.15547657]
[-392.42901611 -10.71360016]
[-376.54846191 -14.80500507]
[-365.25964355 -2.90985227]
[-350.74447632 0.87304503]
[-336.22933960 4.65594244]
[-321.71417236 8.43883991]
[-309.03634644 0.70525467]
[-294.26202393 4.33487654]
[-286.23629761 17.68498230]
[-271.72113037 21.46788025]
[-257.20599365 25.25077629]
[-242.69084167 29.03367424]
[-228.17568970 32.81657028]
[-213.44322205 35.63698578]
[-198.55722046 37.48270798]
[-183.67120361 39.32843399]
[-168.78520203 41.17416000]
[-153.89918518 43.01988220]
[-139.01318359 44.86560822]
[-131.97630310 42.56468964]
[-123.89826202 46.86606598]
[-109.04462433 48.95637512]
[-94.19098663 51.04668808]
[-79.33734894 53.13699722]
[-64.48370361 55.22731018]
[-54.62579727 48.19832993]
[-42.22439194 49.82975388]
[-34.00850677 59.78713226]
[-19.19125748 62.12146378]
[-4.37400818 64.45579529]
[10.44324112 66.79013062]
[25.26049232 69.12445831]
[40.07773972 71.45879364]
[54.89499283 73.79312134]
[66.91318512 64.81742859]
[68.88127136 49.94710541]
[70.84934998 35.07677841]
[72.81743622 20.20644951]
[74.78552246 5.33612156]
[72.80710602 -3.59934211]
[76.91021729 -9.76182938]
[79.12261200 -24.59777641]
[81.33500671 -39.43372345]
[77.69095612 -55.99141693]
[92.59279633 -64.07668304]
[104.48732758 -51.99543381]
[96.17095184 -37.22132492]
[93.95855713 -22.38537979]
[91.74616241 -7.54943323]
[89.65584564 7.30420589]
[87.68776703 22.17453384]
[85.71968079 37.04486084]
[83.75159454 51.91518784]
[81.78350830 66.78551483]
[88.55599213 70.00785065]
[100.90955353 61.49964523]
[102.10096741 76.45252991]
[108.87345123 79.67486572]
[119.17039490 68.76739502]
[129.46734619 57.85992432]
[139.76429749 46.95245743]
[143.02253723 30.88024712]
[158.65451050 25.92310905]
[170.57939148 37.18051910]
[166.52987671 53.07181931]
[150.67175293 57.24940491]
[140.37481689 68.15687561]
[130.07786560 79.06433868]
[119.78091431 89.97180939]
[121.96911621 97.14550018]
[128.53372192 118.66655731]
[143.16543579 121.97000122]
[158.33076477 117.46186829]
[169.04158020 127.81212616]
[183.67330933 131.11557007]
[198.30502319 134.41900635]
[212.93675232 137.72245789]
[222.46434021 125.84869385]
[236.14671326 119.31570435]
[251.24694824 119.37093353]
[264.77020264 125.94987488]
[274.05764771 137.69944763]
[277.30920410 152.25599670]
[291.94091797 155.55943298]
[306.57266235 158.86288452]
[321.20437622 162.16632080]
[335.83609009 165.46977234]
[350.46780396 168.77320862]
[365.09954834 172.07664490]
[379.73126221 175.38009644]
[394.36297607 178.68353271]
[408.99468994 181.98698425]
[423.27191162 174.66981506]
[437.83453369 181.40109253]
[441.51135254 197.01712036]
[431.48184204 209.53863525]
[415.43975830 209.36021423]
[405.69125366 196.61869812]
[391.05953979 193.31526184]
[376.42782593 190.01181030]
[361.79608154 186.70837402]
[347.16436768 183.40492249]
[332.53265381 180.10148621]
[317.90093994 176.79804993]
[303.26919556 173.49459839]
[288.63748169 170.19116211]
[274.00576782 166.88771057]
[264.81549072 178.63523865]
[251.38078308 185.25477600]
[236.34269714 185.38533020]
[222.68348694 178.94747925]
[213.13520813 167.16964722]
[209.63330078 152.35417175]
[195.00158691 149.05073547]
[180.36985779 145.74728394]
[165.73814392 142.44384766]
[151.61936951 147.18826294]
[139.86199951 136.60171509]
[125.23027039 133.29827881]
[113.59121704 142.76043701]
[113.83792877 157.75840759]
[114.08464050 172.75637817]
[114.33135223 187.75434875]
[114.57806396 202.75231934]
[114.82477570 217.75028992]
[128.14474487 225.26864624]
[135.86212158 238.35829163]
[135.99057007 253.45298767]
[128.59573364 266.49801636]
[115.75070953 274.03927612]
[115.99741364 289.03726196]
[116.24412537 304.03521729]
[116.49083710 319.03320312]
[125.38237762 332.81262207]
[117.65510559 347.27709961]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 188]
[3 187]
[4 186]
[5 185]
[10 180]
[11 179]
[12 178]
[13 177]
[14 176]
[15 175]
[16 89]
[17 88]
[18 87]
[19 86]
[20 85]
[21 84]
[22 83]
[24 80]
[25 79]
[26 78]
[27 77]
[28 76]
[29 74]
[30 73]
[31 72]
[32 71]
[33 70]
[34 69]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[50 61]
[51 60]
[52 59]
[53 58]
[90 109]
[91 108]
[92 107]
[93 106]
[94 105]
[96 104]
[97 103]
[98 102]
[113 124]
[114 123]
[115 122]
[116 121]
[126 174]
[127 173]
[129 171]
[130 170]
[131 169]
[132 168]
[138 162]
[139 161]
[140 160]
[141 159]
[142 158]
[143 157]
[144 156]
[145 155]
[146 154]
[147 153]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
