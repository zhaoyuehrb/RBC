%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:02:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCAGGCUGCCAACUCAUUCGGGAGCCCGGGGCAUGAACGGCUACGGCUCCCCCUACCUGUACAUGGGCGGCCCGGUGUCGCAGCCGCCACGGGCGCCCCUGCAGCGCACGCCCAAGUGCGCGCGCUGCCGCA\
) } def
/len { sequence length } bind def

/coor [
[91.38981628 108.03144836]
[88.05158997 104.25177765]
[73.68174744 99.94972992]
[59.31190109 95.64768219]
[43.87239838 99.10199738]
[33.89888763 88.03952026]
[19.52904510 83.73747253]
[5.15920258 79.43542480]
[-9.21063995 75.13337708]
[-23.58048248 70.83132935]
[-37.95032501 66.52928162]
[-52.32016754 62.22723007]
[-64.73747253 74.55174255]
[-81.58679199 78.92186737]
[-98.25868225 74.23406219]
[-110.23846436 61.85028076]
[-114.32873535 45.20383835]
[-128.88317871 41.57500839]
[-142.88795471 54.47616196]
[-161.68025208 56.42472458]
[-177.77926636 46.82336807]
[-184.88285828 29.63719559]
[-199.65498352 27.03247261]
[-214.42709351 24.42774963]
[-229.19921875 21.82302666]
[-243.97132874 19.21830559]
[-258.74343872 16.61358261]
[-267.83224487 18.21205330]
[-273.82727051 13.77254963]
[-288.53479004 10.82480049]
[-303.58636475 15.69926357]
[-314.54495239 5.61171675]
[-329.25247192 2.66396785]
[-343.95999146 -0.28378135]
[-356.05584717 9.62701702]
[-371.69168091 9.39236259]
[-383.48468018 -0.87694883]
[-385.86660767 -16.33206177]
[-377.71273804 -29.67554474]
[-362.87310791 -34.60701370]
[-348.35452271 -28.79797745]
[-341.01223755 -14.99128914]
[-326.30471802 -12.04354000]
[-311.59719849 -9.09579086]
[-297.59759521 -14.18109703]
[-285.58703613 -3.88270712]
[-270.87954712 -0.93495798]
[-256.13873291 1.84146595]
[-241.36660767 4.44618845]
[-226.59449768 7.05091143]
[-211.82237244 9.65563393]
[-197.05026245 12.26035690]
[-182.27813721 14.86507893]
[-175.76269531 5.62130356]
[-166.20132446 -0.51458633]
[-154.98204041 -2.60563087]
[-143.75105286 -0.30544025]
[-134.17121887 6.08512688]
[-127.67585754 15.65668678]
[-125.25434113 27.02057457]
[-110.69990540 30.64940262]
[-102.88173676 20.59857368]
[-91.78645325 14.25543690]
[-79.06560516 12.60532665]
[-66.62843323 15.93192577]
[-56.35533524 23.76926041]
[-49.81354904 34.96661758]
[-48.01811981 47.85738754]
[-33.64827728 52.15943527]
[-19.27843475 56.46148682]
[-4.90859175 60.76353455]
[9.46125126 65.06558228]
[23.83109283 69.36763000]
[38.20093536 73.66967773]
[52.61261368 69.90764618]
[63.61394882 81.27783966]
[77.98379517 85.57988739]
[92.35363770 89.88193512]
[106.86486053 93.67986298]
[121.49979401 96.96903992]
[136.66073608 92.44612885]
[147.38162231 102.78594208]
[162.01655579 106.07511902]
[176.65148926 109.36430359]
[191.28642273 112.65348053]
[205.92135620 115.94265747]
[220.59358215 119.06133270]
[235.30108643 122.00908661]
[250.00859070 124.95683289]
[264.74938965 127.73325348]
[279.52151489 130.33798218]
[294.29364014 132.94270325]
[309.12234497 135.20298767]
[323.99966431 137.11761475]
[338.87698364 139.03224182]
[353.75427246 140.94686890]
[368.63159180 142.86148071]
[372.76037598 140.94242859]
[376.86450195 140.53810120]
[380.45388794 141.44390869]
[383.16110229 143.31250000]
[384.77825928 145.70857239]
[399.41317749 148.99775696]
[414.04812622 152.28694153]
[430.82760620 149.86093140]
[437.80380249 165.31307983]
[424.88674927 176.29423523]
[410.75894165 166.92187500]
[396.12399292 163.63269043]
[381.48907471 160.34352112]
[366.71694946 157.73878479]
[351.83966064 155.82417297]
[336.96234131 153.90954590]
[322.08505249 151.99491882]
[307.20773315 150.08029175]
[302.88293457 152.29644775]
[297.10946655 151.75424194]
[291.68890381 147.71481323]
[276.91677856 145.11009216]
[262.14468384 142.50537109]
[254.94535828 144.45971680]
[247.06083679 139.66433716]
[232.35333252 136.71658325]
[217.64582825 133.76884460]
[210.40296936 135.55514526]
[202.63218689 130.57759094]
[187.99725342 127.28841400]
[173.36231995 123.99923706]
[158.72738647 120.71005249]
[144.09243774 117.42087555]
[129.97830200 122.17904663]
[118.21061707 111.60397339]
[103.57568359 108.31479645]
[99.97377777 109.95883179]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[6 74]
[7 73]
[8 72]
[9 71]
[10 70]
[11 69]
[12 68]
[17 61]
[18 60]
[22 53]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
[29 47]
[30 46]
[32 44]
[33 43]
[34 42]
[79 133]
[80 132]
[82 130]
[83 129]
[84 128]
[85 127]
[86 126]
[87 124]
[88 123]
[89 122]
[90 120]
[91 119]
[92 118]
[93 115]
[94 114]
[95 113]
[96 112]
[97 111]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
