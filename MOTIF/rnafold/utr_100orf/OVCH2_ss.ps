%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:03:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUUAUAAGCAGGAACAAGCUGAUUUUACUACUAGGAAUAGUCUUUUUUGAACGAGGUAAAUCUGCAACUCUUUCGCUCCCCAAAGCUCCCAGUUGUG\
) } def
/len { sequence length } bind def

/coor [
[88.17493439 121.95115662]
[79.12807465 116.40963745]
[72.38064575 129.80636597]
[65.63321686 143.20309448]
[58.88579559 156.59980774]
[60.36015701 172.93255615]
[46.79878616 182.15324402]
[32.15246201 174.77644348]
[31.48806572 158.39076233]
[45.48907089 149.85238647]
[52.23649597 136.45565796]
[58.98392105 123.05893707]
[65.73134613 109.66220856]
[56.30893326 121.33346558]
[42.43411636 127.03340912]
[27.52813721 125.35656738]
[15.26651096 116.71639252]
[8.67270279 103.24340057]
[9.37261105 88.25973511]
[17.19365311 75.46007538]
[30.20731926 68.00055695]
[45.20470428 67.72053528]
[58.48776245 74.68906403]
[66.78075409 87.18669891]
[61.31098175 73.21953583]
[55.84120941 59.25237656]
[50.37143707 45.28521347]
[44.90166473 31.31805420]
[30.69755363 24.92422676]
[25.34939384 10.68161964]
[31.53246689 -2.82042480]
[26.06269455 -16.78758621]
[8.51632500 -23.54992867]
[1.43338108 -40.62937164]
[8.79000473 -57.24937439]
[2.46247911 -70.84946442]
[-3.86504650 -84.44955444]
[-10.19257164 -98.04964447]
[-16.52009773 -111.64972687]
[-22.84762383 -125.24981689]
[-37.77817917 -130.43191528]
[-44.59610748 -144.68994141]
[-39.25645065 -159.56486511]
[-24.92713547 -166.23167419]
[-10.10948849 -160.73504639]
[-3.59455657 -146.33604431]
[-9.24753380 -131.57734680]
[-2.92000842 -117.97725677]
[3.40751696 -104.37716675]
[9.73504257 -90.77707672]
[16.06256866 -77.17698669]
[22.39009285 -63.57690048]
[33.90113831 -62.02598572]
[43.28146744 -54.97300720]
[48.06545639 -44.12388229]
[46.92367554 -32.20035172]
[40.02985382 -22.25735855]
[45.49962616 -8.29019737]
[59.20741653 -2.57774615]
[64.95351410 11.50902176]
[58.86882401 25.84827995]
[64.33860016 39.81544113]
[69.80837250 53.78260422]
[75.27814484 67.74976349]
[80.74791718 81.71692657]
[109.37879181 78.65234375]
[120.03701782 101.37091064]
[133.53706360 107.90917969]
[147.03709412 114.44744110]
[160.53713989 120.98571014]
[174.03718567 127.52397919]
[187.53721619 134.06224060]
[198.77493286 125.57279205]
[212.51632690 122.80477142]
[226.03550720 126.24846649]
[236.67610168 135.16773987]
[242.37316895 147.75646973]
[242.05383301 161.50410461]
[255.34399414 168.45904541]
[268.63418579 175.41400146]
[283.64047241 170.45553589]
[297.71994019 177.63494873]
[302.51947021 192.69284058]
[295.19161987 206.69561768]
[280.08383179 211.33567810]
[266.15930176 203.86018372]
[261.67922974 188.70417786]
[248.38905334 181.74922180]
[235.09887695 174.79426575]
[221.75192261 183.75697327]
[205.61677551 184.82267761]
[191.03973389 177.61056519]
[181.99449158 163.98226929]
[180.99894714 147.56228638]
[167.49891663 141.02401733]
[153.99887085 134.48574829]
[140.49882507 127.94748688]
[126.99879456 121.40921783]
[113.49875641 114.87094879]
[106.96347046 120.55284882]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[5 10]
[24 65]
[25 64]
[26 63]
[27 62]
[28 61]
[31 58]
[32 57]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[67 99]
[68 98]
[69 97]
[70 96]
[71 95]
[72 94]
[78 89]
[79 88]
[80 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
