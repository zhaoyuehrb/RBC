%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:59:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCAUGAGACCAGCCAGGCACUGGGAAACAAGGUUUGGUGCCAGAGAUUUUGGUGGCUUCCAAGACUGCUUUUUCAGAGACAGGCUCAUGGACACAGCACGGA\
) } def
/len { sequence length } bind def

/coor [
[80.87315369 120.54365540]
[75.97049713 113.17745209]
[61.34658051 116.51526642]
[46.72266006 119.85308075]
[32.09874344 123.19089508]
[17.47482300 126.52870941]
[5.74236107 137.14285278]
[-8.38752270 132.43162537]
[-23.01144218 135.76943970]
[-37.63536072 139.10725403]
[-52.25927734 142.44506836]
[-66.88319397 145.78288269]
[-76.69643402 165.08547974]
[-97.18588257 171.19633484]
[-115.49633026 160.69363403]
[-129.45944214 166.17375183]
[-143.42254639 171.65386963]
[-157.38565063 177.13397217]
[-169.92089844 188.54904175]
[-184.35997009 179.66366577]
[-179.81896973 163.32917786]
[-162.86576843 163.17086792]
[-148.90266418 157.69075012]
[-134.93954468 152.21064758]
[-120.97644043 146.73052979]
[-120.35735321 137.69488525]
[-116.73143005 129.34753418]
[-110.49011993 122.66359711]
[-102.33218384 118.43459320]
[-93.18558502 117.17476654]
[-84.10190582 119.05871582]
[-76.13547516 123.89787292]
[-70.22100830 131.15896606]
[-55.59709167 127.82114410]
[-40.97317505 124.48332977]
[-26.34925461 121.14551544]
[-11.72533703 117.80770111]
[-1.03887546 107.43230438]
[14.13700867 111.90479279]
[28.76092720 108.56697845]
[43.38484573 105.22916412]
[58.00876617 101.89134979]
[72.63268280 98.55353546]
[78.16753387 80.64698792]
[94.67124176 69.51726532]
[115.66706848 71.28071594]
[119.65761566 56.82127380]
[118.92795563 47.54700089]
[123.98987579 41.99237061]
[128.41120911 27.65877914]
[132.83253479 13.32518768]
[137.25386047 -1.00840425]
[141.67518616 -15.34199619]
[146.09651184 -29.67558861]
[138.49101257 -43.52953339]
[142.98947144 -58.68008804]
[156.92304993 -66.13870239]
[172.02520752 -61.48030472]
[179.33609009 -47.46864700]
[174.51828003 -32.41659164]
[160.43011475 -25.25426102]
[156.00878906 -10.92066860]
[151.58744812 3.41292334]
[147.16612244 17.74651527]
[142.74479675 32.08010864]
[138.32347107 46.41370010]
[134.11706543 60.81182861]
[130.12651062 75.27127075]
[137.23454285 88.48020172]
[151.50038147 93.11545563]
[165.76623535 97.75071716]
[181.11360168 89.52149963]
[197.37030029 94.75664520]
[204.73597717 109.79275513]
[219.13410950 113.99916840]
[233.53222656 118.20557404]
[247.93035889 122.41198730]
[262.38980103 126.40254211]
[276.90731812 130.17634583]
[291.42483521 133.95014954]
[305.93069458 127.09743500]
[320.26855469 134.29504395]
[323.43963623 150.02157593]
[313.01135254 162.21298218]
[296.98339844 161.51705933]
[287.65103149 148.46766663]
[273.13351440 144.69386292]
[258.61599731 140.92005920]
[251.22981262 142.30616760]
[243.72395325 136.81011963]
[229.32582092 132.60371399]
[214.92768860 128.39729309]
[200.52955627 124.19088745]
[190.11636353 131.94029236]
[176.94366455 132.23014832]
[165.87579346 124.72689056]
[161.13098145 112.01656342]
[146.86512756 107.38130951]
[132.59928894 102.74605560]
[129.47673035 112.58547211]
[123.53451538 120.76770020]
[115.48618317 126.53542328]
[106.23053741 129.40733337]
[96.75212860 129.21650696]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 43]
[3 42]
[4 41]
[5 40]
[6 39]
[8 37]
[9 36]
[10 35]
[11 34]
[12 33]
[15 25]
[16 24]
[17 23]
[18 22]
[46 68]
[47 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[69 99]
[70 98]
[71 97]
[74 93]
[75 92]
[76 91]
[77 90]
[78 88]
[79 87]
[80 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
