%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:29:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGCGGCGCCUGAGCCCAGCCGAGGAUGGAGAACCGGCCUGGGUCCUUCCAGUACGUCCCUGUGCAGCUGCAAGGGGGGGCACCCUGGGGCUUCACCCUUAAGGGGGGUCUGGAACACUGUGAGC\
) } def
/len { sequence length } bind def

/coor [
[93.54063416 132.88148499]
[84.63139343 130.64500427]
[75.93511963 142.86689758]
[67.23884583 155.08880615]
[58.54257202 167.31069946]
[50.15126038 179.74395752]
[42.07004547 192.38096619]
[33.98883057 205.01797485]
[37.62735367 220.39772034]
[29.25407600 233.80158997]
[13.83671665 237.27731323]
[0.52212125 228.76278687]
[-2.79039669 213.30953979]
[5.86442041 200.08570862]
[21.35182381 196.93675232]
[29.43303871 184.29974365]
[37.51425171 171.66273499]
[37.35132599 166.79118347]
[40.32163239 161.78704834]
[46.32067108 158.61442566]
[55.01694489 146.39253235]
[63.71321869 134.17062378]
[72.40949249 121.94873047]
[65.78209686 108.49221802]
[50.79241943 107.93576813]
[35.80274582 107.37931061]
[21.72504234 114.59934235]
[9.29356098 106.39522552]
[-5.69611406 105.83876801]
[-20.68578911 105.28231812]
[-34.92140579 113.42353058]
[-48.95152664 104.93308258]
[-48.34317017 88.54521942]
[-33.72215652 81.11837006]
[-20.12933540 90.29264069]
[-5.13966036 90.84909821]
[9.85001469 91.40554810]
[22.85555649 84.14572144]
[36.35919952 92.38963318]
[51.34887314 92.94609070]
[66.33854675 93.50254059]
[88.46508026 71.43627930]
[115.71085358 77.64084625]
[127.37193298 68.20584869]
[139.03302002 58.77084732]
[141.18612671 45.98242188]
[151.18336487 38.36907959]
[163.28355408 39.61226273]
[175.17442322 30.46858215]
[187.06530762 21.32489967]
[198.95619202 12.18121719]
[210.84707642 3.03753519]
[222.73796082 -6.10614729]
[227.70198059 -13.90508938]
[235.03793335 -15.32458782]
[247.15133667 -24.17135811]
[253.73246765 -38.55882645]
[268.57385254 -39.81684113]
[280.68725586 -48.66360855]
[292.80065918 -57.51037979]
[304.91409302 -66.35715485]
[317.02749634 -75.20391846]
[328.57098389 -84.78242493]
[339.50042725 -95.05603790]
[350.42987061 -105.32965851]
[355.18576050 -120.41912842]
[369.75857544 -123.49850464]
[380.68801880 -133.77212524]
[391.61746216 -144.04573059]
[402.54690552 -154.31935120]
[407.30279541 -169.40882874]
[421.87561035 -172.48820496]
[432.80505371 -182.76181030]
[436.97436523 -191.01298523]
[444.13421631 -193.15023804]
[455.31442261 -203.15037537]
[466.49462891 -213.15051270]
[467.12347412 -228.94229126]
[478.79110718 -239.60258484]
[494.57534790 -238.80682373]
[505.11169434 -227.02713013]
[504.14907837 -211.25218201]
[492.25866699 -200.84097290]
[476.49478149 -201.97029114]
[465.31454468 -191.97015381]
[454.13433838 -181.97001648]
[443.07867432 -171.83236694]
[432.14920044 -161.55874634]
[428.17507935 -147.20411682]
[412.82052612 -143.38990784]
[401.89108276 -133.11628723]
[390.96163940 -122.84267426]
[380.03219604 -112.56906128]
[376.05804443 -98.21442413]
[360.70349121 -94.40020752]
[349.77404785 -84.12659454]
[338.84460449 -73.85297394]
[353.38870239 -70.18294525]
[359.81723022 -56.63031006]
[353.45797729 -43.04502869]
[338.93280029 -39.30078888]
[326.79849243 -48.11888504]
[325.87426758 -63.09051514]
[313.76086426 -54.24374390]
[301.64743042 -45.39697266]
[289.53402710 -36.55020142]
[277.42062378 -27.70343208]
[271.70593262 -13.94874287]
[255.99810791 -12.05795002]
[243.88470459 -3.21117973]
[231.88163757 5.78473473]
[219.99075317 14.92841721]
[208.09986877 24.07209969]
[196.20899963 33.21578217]
[184.31811523 42.35946274]
[172.42723083 51.50314713]
[166.67498779 68.03388977]
[148.46801758 70.43193054]
[136.80693054 79.86692810]
[125.14585114 89.30192566]
[127.85771179 96.31921387]
[128.59217834 104.01496124]
[127.18400574 111.82749939]
[123.62837219 119.15676117]
[118.08912659 125.41026306]
[110.89375305 130.05053711]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 23]
[3 22]
[4 21]
[5 20]
[6 17]
[7 16]
[8 15]
[24 41]
[25 40]
[26 39]
[28 37]
[29 36]
[30 35]
[43 120]
[44 119]
[45 118]
[48 116]
[49 115]
[50 114]
[51 113]
[52 112]
[53 111]
[55 110]
[56 109]
[58 107]
[59 106]
[60 105]
[61 104]
[62 103]
[63 97]
[64 96]
[65 95]
[67 93]
[68 92]
[69 91]
[70 90]
[72 88]
[73 87]
[75 86]
[76 85]
[77 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
