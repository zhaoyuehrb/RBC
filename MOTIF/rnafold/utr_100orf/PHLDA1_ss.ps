%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:04:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGACGCAGCGGGCUUUGGAAAGGCCCCAAGUUAAUGAGGCGUGCGCCGGCUGCCGAGCGCCUCUUGGAGCUGGGCUUUCCCCCGCGGUGCGGGCGCCAGGAGCCGCCUUUUCCGCUGGGUGUCACUCGGGGGU\
) } def
/len { sequence length } bind def

/coor [
[127.02877045 308.11968994]
[124.27252197 293.37509155]
[121.51628113 278.63049316]
[118.76004028 263.88589478]
[115.83368683 249.17411804]
[112.73760986 234.49711609]
[102.53994751 223.64093018]
[107.26220703 208.54089355]
[104.16613007 193.86390686]
[101.07005310 179.18690491]
[97.97397614 164.50990295]
[94.87789917 149.83290100]
[91.78182220 135.15589905]
[78.20352173 128.78175354]
[64.93408966 135.77619934]
[51.66465759 142.77062988]
[38.39522552 149.76507568]
[29.79506493 163.04467773]
[14.92828274 162.13470459]
[1.65885031 169.12915039]
[-2.77615070 184.29840088]
[-16.67838478 191.81527710]
[-31.79990196 187.22013855]
[-39.16937637 173.23921204]
[-34.41462708 158.16712952]
[-20.35656548 150.94587708]
[-5.33558702 155.85971069]
[7.93384552 148.86528015]
[15.58488655 136.08595276]
[31.40078926 136.49563599]
[44.67021942 129.50120544]
[57.93965530 122.50675964]
[71.20908356 115.51232147]
[68.67958069 102.48039246]
[71.55339050 90.06077576]
[78.91832733 80.30881500]
[89.15727234 74.66027832]
[100.28507233 73.72498322]
[104.72216034 59.39625931]
[109.15925598 45.06753922]
[113.59634399 30.73881912]
[118.03343964 16.41010094]
[122.47052765 2.08138013]
[122.02463531 -7.13420343]
[127.17913055 -12.52491665]
[131.94599915 -26.74732590]
[128.99537659 -42.29095459]
[140.37619019 -51.89960480]
[145.14306641 -66.12201691]
[149.74534607 -80.39852905]
[154.18244934 -94.72724915]
[158.61953735 -109.05596924]
[144.30140686 -126.99777985]
[154.08908081 -154.21162415]
[152.36042786 -169.11167908]
[150.63179016 -184.01174927]
[141.35566711 -196.82829285]
[147.57467651 -210.36244202]
[145.84603882 -225.26249695]
[144.11738586 -240.16256714]
[134.84126282 -252.97911072]
[141.06028748 -266.51327515]
[139.33163452 -281.41333008]
[129.12103271 -294.24591064]
[135.38003540 -309.40365601]
[151.66992188 -311.29354858]
[161.23304749 -297.97143555]
[154.23168945 -283.14196777]
[155.96034241 -268.24191284]
[165.11282349 -256.49111938]
[159.01744080 -241.89120483]
[160.74609375 -226.99114990]
[162.47474670 -212.09109497]
[171.62721252 -200.34028625]
[165.53184509 -185.74038696]
[167.26049805 -170.84033203]
[168.98913574 -155.94027710]
[175.81465149 -152.83181763]
[177.50904846 -167.73580933]
[192.20722961 -170.72973633]
[199.59645081 -157.67602539]
[189.46566772 -146.61492920]
[196.29116821 -143.50648499]
[208.66613770 -151.98352051]
[221.04109192 -160.46057129]
[233.41606140 -168.93762207]
[245.79101562 -177.41465759]
[255.44125366 -191.35415649]
[271.50744629 -185.93988037]
[270.75231934 -169.00276184]
[254.26806641 -165.03970337]
[241.89309692 -156.56265259]
[229.51814270 -148.08561707]
[217.14317322 -139.60856628]
[204.76821899 -131.13151550]
[192.95527649 -108.47158813]
[172.94825745 -104.61888123]
[168.51116943 -90.29016113]
[164.07406616 -75.96144104]
[165.10969543 -68.57523346]
[159.36547852 -61.35514450]
[154.59860229 -47.13273239]
[157.89018250 -32.60638809]
[146.16841125 -21.98045540]
[141.40153503 -7.75804520]
[136.79925537 6.51847172]
[132.36215210 20.84719276]
[127.92506409 35.17591095]
[123.48797607 49.50463104]
[119.05088043 63.83335114]
[114.61379242 78.16207123]
[127.87102509 94.44597626]
[125.43470764 116.94345856]
[106.45882416 132.05982971]
[109.55490112 146.73683167]
[112.65097809 161.41381836]
[115.74705505 176.09082031]
[118.84313202 190.76782227]
[121.93920898 205.44482422]
[132.35832214 217.35081482]
[127.41460419 231.40104675]
[130.51068115 246.07804871]
[135.38456726 253.91200256]
[133.50463867 261.12966919]
[136.26087952 275.87423706]
[139.01712036 290.61883545]
[141.77336121 305.36343384]
[156.10173035 311.08193970]
[165.04525757 323.65243530]
[165.75009155 339.06369019]
[157.99131775 352.39804077]
[144.24473572 359.40054321]
[128.89683533 357.83673096]
[116.84506989 348.20562744]
[111.93511963 333.58044434]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 127]
[2 126]
[3 125]
[4 124]
[5 122]
[6 121]
[8 119]
[9 118]
[10 117]
[11 116]
[12 115]
[13 114]
[14 33]
[15 32]
[16 31]
[17 30]
[19 28]
[20 27]
[38 111]
[39 110]
[40 109]
[41 108]
[42 107]
[43 106]
[45 105]
[46 104]
[48 102]
[49 101]
[50 99]
[51 98]
[52 97]
[54 77]
[55 76]
[56 75]
[58 73]
[59 72]
[60 71]
[62 69]
[63 68]
[83 95]
[84 94]
[85 93]
[86 92]
[87 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
