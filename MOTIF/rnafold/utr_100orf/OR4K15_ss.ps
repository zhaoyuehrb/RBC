%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUCACUUCAUUAACUGAUCUCUGUUUCUCUCCUAUUCAGGUAGCUGAAAUUAAGUCCCUUCCAAAAUCGAUGAAUGAGACAAAUCAUUCUCGGGUGA\
) } def
/len { sequence length } bind def

/coor [
[114.69293213 238.39401245]
[99.50965881 243.57550049]
[86.07013702 234.81428528]
[84.68402100 218.83123779]
[96.41461182 207.88716125]
[98.27610016 193.00311279]
[100.13758087 178.11906433]
[101.99906158 163.23501587]
[103.86054230 148.35096741]
[92.62809753 147.51879883]
[81.98710632 144.13531494]
[72.50345612 138.42771912]
[64.67048645 130.74545288]
[58.88333130 121.53911591]
[55.41910172 111.33415222]
[54.42388535 100.70095062]
[55.90707016 90.22298431]
[59.74327469 80.46479034]
[65.68158722 71.94157410]
[55.84265900 60.61922836]
[47.70168304 56.08964157]
[45.88048935 48.78835678]
[36.39844513 37.16550064]
[20.91906738 35.42576599]
[11.46849632 23.50345993]
[13.22246456 8.75696278]
[3.74041796 -2.86589384]
[-5.74162865 -14.48875046]
[-15.22367477 -26.11160660]
[-24.70572090 -37.73446274]
[-42.01485825 -43.77108765]
[-44.33444595 -61.08931351]
[-54.17337418 -72.41165924]
[-64.18719482 -83.57962036]
[-74.37348938 -94.59049988]
[-84.55978394 -105.60137177]
[-100.37490845 -109.93885803]
[-104.26377106 -125.87023926]
[-92.22583771 -137.00666809]
[-76.64469910 -131.89195251]
[-73.54890442 -115.78766632]
[-63.36260986 -104.77678680]
[-53.17631912 -93.76591492]
[-46.20052338 -90.94388580]
[-42.85102844 -82.25058746]
[-33.01210022 -70.92824554]
[-20.86396217 -69.72795105]
[-12.57947350 -60.22048950]
[-13.08286476 -47.21651077]
[-3.60081840 -35.59365463]
[5.88122797 -23.97079659]
[15.36327457 -12.34794044]
[24.84532166 -0.72508365]
[39.64365387 0.51787674]
[49.42536926 12.17003059]
[48.02130127 27.68345642]
[57.50334549 39.30631256]
[67.16500092 50.78030014]
[77.00392914 62.10264587]
[86.18135071 57.51413345]
[96.24401093 55.13225937]
[106.66487885 55.11948395]
[116.88943481 57.51317596]
[126.36525726 62.22168732]
[134.57177734 69.02732849]
[141.04891968 77.59622192]
[145.42276001 87.49456024]
[147.42704773 98.21051025]
[146.91905212 109.18068695]
[143.88914490 119.81974030]
[138.46325684 129.55160522]
[151.96330261 136.08987427]
[165.46333313 142.62814331]
[174.72985840 143.58949280]
[179.27674866 149.58543396]
[192.56692505 156.54039001]
[205.85708618 163.49534607]
[219.14726257 170.45030212]
[232.43742371 177.40524292]
[245.72760010 184.36019897]
[260.73388672 179.40173340]
[274.81338501 186.58114624]
[279.61291504 201.63903809]
[272.28503418 215.64181519]
[257.17724609 220.28187561]
[243.25273132 212.80638123]
[238.77264404 197.65037537]
[225.48248291 190.69541931]
[212.19230652 183.74046326]
[198.90213013 176.78550720]
[185.61196899 169.83056641]
[172.32179260 162.87561035]
[158.92506409 156.12817383]
[145.42503357 149.58992004]
[131.92498779 143.05165100]
[118.74459076 150.21244812]
[116.88311005 165.09649658]
[115.02162933 179.98054504]
[113.16014099 194.86459351]
[111.29866028 209.74864197]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 100]
[6 99]
[7 98]
[8 97]
[9 96]
[19 59]
[20 58]
[22 57]
[23 56]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[32 46]
[33 45]
[34 43]
[35 42]
[36 41]
[71 95]
[72 94]
[73 93]
[75 92]
[76 91]
[77 90]
[78 89]
[79 88]
[80 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
