%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:27:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGGGACCACACGCCGCGCUGUCCCCAGCACCCAACCCAGGUUACCAUGGCCUCCCUGUUCUCUGGCCGCAUCCUGAUCCGCAACAAUAGCGACCAGGACGAGCUGGAUACGGAGGCUGAGGUCAGUCGCAGGCUGGAGAACCGGC\
) } def
/len { sequence length } bind def

/coor [
[106.39958191 689.05310059]
[106.08119965 674.05651855]
[105.76281738 659.05987549]
[105.44444275 644.06323242]
[91.68751526 635.16479492]
[85.86354828 619.67364502]
[90.44171906 603.59729004]
[103.81571960 593.29614258]
[103.17910767 578.30963135]
[102.54248810 563.32312012]
[100.14093781 560.65264893]
[98.95003510 556.66101074]
[99.58783722 551.94738770]
[102.37315369 547.36901855]
[102.69152832 532.37237549]
[103.00991058 517.37573242]
[103.16911316 502.37658691]
[103.16911316 487.37658691]
[103.16911316 472.37658691]
[103.00991058 457.37744141]
[102.69152832 442.38082886]
[102.37315369 427.38418579]
[94.36745453 414.82403564]
[101.81009674 400.86273193]
[101.49171448 385.86611938]
[93.48601532 373.30593872]
[100.92865753 359.34463501]
[100.61027527 344.34802246]
[100.29190063 329.35140991]
[99.97351837 314.35476685]
[89.07605743 304.26614380]
[88.53953552 289.06195068]
[99.19533539 277.70010376]
[98.87695312 262.70349121]
[85.12002563 253.80500793]
[79.29605865 238.31384277]
[83.87422943 222.23748779]
[97.24822998 211.93634033]
[96.61161804 196.94985962]
[95.97499847 181.96336365]
[95.33837891 166.97688293]
[87.06788635 154.58946228]
[94.21252441 140.47334290]
[93.57590485 125.48686218]
[85.62798309 122.00668335]
[79.24616241 116.12845612]
[75.12586212 108.49272919]
[73.71607971 99.93155670]
[75.17043304 91.37784576]
[79.33043671 83.76367950]
[70.66892242 71.51712036]
[62.00741196 59.27056122]
[53.34590149 47.02399826]
[38.30321503 49.60863876]
[23.63115501 45.40228653]
[12.24286842 35.24011612]
[6.39950848 21.13983727]
[7.26127768 5.90106773]
[14.65707207 -7.45052338]
[27.11845016 -16.26396751]
[42.17119980 -18.78934860]
[56.82658005 -14.52525043]
[68.17475891 -4.31831360]
[73.96254730 9.80486774]
[73.04077911 25.04012680]
[65.59246063 38.36248779]
[74.25397491 50.60905075]
[82.91548157 62.85560989]
[91.57699585 75.10216522]
[95.18232727 74.16128540]
[98.88447571 73.73967743]
[102.60903931 73.84580231]
[106.28118134 74.47753906]
[113.87290192 61.54055405]
[121.46463013 48.60356522]
[129.05636597 35.66657639]
[136.64808655 22.72958755]
[136.95941162 6.91144371]
[150.07402039 -0.14942975]
[157.66575623 -13.08641911]
[159.33001709 -22.14009476]
[165.55841064 -26.21498871]
[173.42301941 -38.98792648]
[168.32125854 -53.76987457]
[173.96298218 -68.35428619]
[187.68434143 -75.85483551]
[203.00653076 -72.73001099]
[212.69487000 -60.45524216]
[212.17485046 -44.82630539]
[201.69197083 -33.22270966]
[186.19595337 -31.12331581]
[178.33134460 -18.35037804]
[170.60273743 -5.49469185]
[163.01101685 7.44229746]
[163.24270630 22.33510017]
[149.58506775 30.32131386]
[141.99334717 43.25830460]
[134.40162659 56.19529343]
[126.80989075 69.13227844]
[119.21817017 82.06926727]
[125.50476074 106.35266113]
[108.56238556 124.85024261]
[109.19900513 139.83673096]
[117.51502991 153.29608154]
[110.32486725 166.34027100]
[110.96147919 181.32675171]
[111.59809875 196.31323242]
[112.23471832 211.29972839]
[124.28573608 218.07054138]
[131.34600830 229.82794189]
[131.65435791 243.43034363]
[125.23720551 255.30471802]
[113.87357330 262.38510132]
[114.19195557 277.38171387]
[125.32035828 288.28109741]
[125.42960358 303.49432373]
[114.97013855 314.03640747]
[115.28852081 329.03302002]
[115.60690308 344.02963257]
[115.92527771 359.02627563]
[123.95375061 372.65908813]
[116.48833466 385.54772949]
[116.80671692 400.54434204]
[124.83518982 414.17718506]
[117.36977386 427.06582642]
[117.68814850 442.06243896]
[118.00653076 457.05905151]
[121.33626556 465.64111328]
[118.16911316 472.37658691]
[118.16911316 487.37658691]
[118.16911316 502.37658691]
[121.31594086 511.02740479]
[118.00653076 517.69415283]
[117.68814850 532.69073486]
[117.36977386 547.68737793]
[117.52896881 562.68652344]
[118.16558838 577.67303467]
[118.80220795 592.65948486]
[130.85322571 599.43029785]
[137.91349792 611.18774414]
[138.22184753 624.79010010]
[131.80468750 636.66448975]
[120.44106293 643.74487305]
[120.75944519 658.74151611]
[121.07781982 673.73809814]
[121.39620209 688.73474121]
[123.99530029 707.94134521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 146]
[2 145]
[3 144]
[4 143]
[8 138]
[9 137]
[10 136]
[14 135]
[15 134]
[16 133]
[17 131]
[18 130]
[19 129]
[20 127]
[21 126]
[22 125]
[24 123]
[25 122]
[27 120]
[28 119]
[29 118]
[30 117]
[33 114]
[34 113]
[38 108]
[39 107]
[40 106]
[41 105]
[43 103]
[44 102]
[50 69]
[51 68]
[52 67]
[53 66]
[73 100]
[74 99]
[75 98]
[76 97]
[77 96]
[79 94]
[80 93]
[82 92]
[83 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
