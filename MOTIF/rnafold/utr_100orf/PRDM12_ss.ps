%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:49:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGCCCACCUCCCCCGUCGGCCCGGCCGUCCCCCGGCGCCGGGGAGCUCCGGGCCGCCCAUGAUGGGCUCCGUGCUCCCGGCUGAGGCCCUGGUGCUCAAGACCGGGCUGAAGGCGCCGGGACUGGCGCUGGCCGAGGUUAUCACCUCCGACAUCCUGC\
) } def
/len { sequence length } bind def

/coor [
[122.22181702 578.86914062]
[109.36589050 586.74243164]
[94.99913025 591.30969238]
[79.95677948 592.30529785]
[65.11339569 589.67138672]
[51.33194733 583.56115723]
[39.41366959 574.32977295]
[30.05147552 562.51397705]
[23.78967285 548.80072021]
[20.99231529 533.98730469]
[21.82203484 518.93487549]
[26.23059273 504.51864624]
[33.96168518 491.57672119]
[44.56583023 480.86151123]
[57.42652130 472.99600220]
[71.79605103 468.43750000]
[86.83900452 467.45101929]
[89.45973206 452.68173218]
[92.08046722 437.91244507]
[125.98747253 410.57913208]
[124.23530579 395.68182373]
[122.48314667 380.78451538]
[120.73098755 365.88720703]
[116.80657959 359.57958984]
[119.09290314 350.68249512]
[117.63175201 335.75384521]
[116.17059326 320.82516479]
[112.37000275 314.44219971]
[114.82949066 305.59140015]
[113.65989685 290.63705444]
[112.49031067 275.68273926]
[100.38565063 260.64184570]
[109.21526337 242.55696106]
[107.46310425 227.65965271]
[105.71094513 212.76232910]
[103.95878601 197.86502075]
[102.20661926 182.96771240]
[100.45446014 168.07038879]
[98.70230103 153.17308044]
[96.95014191 138.27577209]
[95.19798279 123.37845612]
[71.87847900 109.47531891]
[73.28185272 76.65033722]
[63.15099335 65.58843231]
[53.02013779 54.52652359]
[42.88928223 43.46461868]
[32.75842667 32.40271378]
[22.62757111 21.34080505]
[9.76757622 19.98584557]
[1.55694520 10.52126598]
[2.00266767 -1.59873068]
[-7.91042185 -12.85620117]
[-17.82351112 -24.11367226]
[-27.73660088 -35.37114334]
[-33.94502258 -37.87219238]
[-37.40374374 -42.46159744]
[-37.80635071 -47.26666260]
[-47.27266693 -58.90233231]
[-56.73898697 -70.53800201]
[-66.20530701 -82.17367554]
[-75.67162323 -93.80934143]
[-90.35772705 -102.28016663]
[-86.28346252 -118.73728180]
[-69.34162903 -119.37802887]
[-64.03595734 -103.27565765]
[-54.56963730 -91.63999176]
[-45.10331726 -80.00431824]
[-35.63699722 -68.36865234]
[-26.17067909 -56.73298264]
[-16.47912979 -45.28423309]
[-6.56604052 -34.02676392]
[3.34704900 -22.76929092]
[13.26013851 -11.51181984]
[30.15283394 -6.83757544]
[33.68947601 11.20995045]
[43.82033157 22.27185631]
[53.95118713 33.33376312]
[64.08204651 44.39566803]
[74.21289825 55.45757294]
[84.34375763 66.51947784]
[91.84233093 66.37314606]
[84.09038544 53.53151703]
[91.33567810 40.39737701]
[106.33283234 40.10502625]
[114.08449554 52.94681931]
[106.83946991 66.08046722]
[114.33804321 65.93412781]
[124.02959442 54.48537827]
[133.72114563 43.03662872]
[143.41268921 31.58787918]
[153.10424805 20.13912964]
[156.28323364 11.52056122]
[163.09831238 8.56393814]
[173.01139832 -2.69353294]
[182.92448425 -13.95100403]
[180.39834595 -29.38319778]
[188.42723083 -42.80224991]
[203.22015381 -47.87209702]
[217.79235840 -42.19890594]
[225.26327515 -28.46139145]
[222.10537720 -13.14598370]
[209.80973816 -3.48415065]
[194.18196106 -4.03791428]
[184.26887512 7.21955681]
[174.35577393 18.47702789]
[164.55299377 29.83067894]
[154.86143494 41.27942657]
[145.16989136 52.72817612]
[135.47834778 64.17692566]
[125.78679657 75.62567902]
[131.27023315 90.85822296]
[129.14981079 105.55785370]
[121.12847900 116.43956757]
[110.09529114 121.62629700]
[111.84745026 136.52360535]
[113.59961700 151.42091370]
[115.35177612 166.31823730]
[117.10393524 181.21554565]
[118.85609436 196.11285400]
[120.60825348 211.01017761]
[122.36042023 225.90748596]
[124.11257935 240.80479431]
[133.07394409 247.08096313]
[136.99443054 257.05874634]
[134.79447937 267.32583618]
[127.44464111 274.51315308]
[128.61422729 289.46746826]
[129.78382874 304.42181396]
[131.09925842 319.36401367]
[132.56040955 334.29269409]
[134.02156067 349.22134399]
[135.62829590 364.13504028]
[137.38046265 379.03234863]
[139.13262939 393.92968750]
[140.88478088 408.82699585]
[146.99475098 422.52618408]
[156.90783691 433.78366089]
[166.82092285 445.04113770]
[176.73400879 456.29861450]
[186.64710999 467.55609131]
[202.35105896 472.28027344]
[205.84788513 488.30224609]
[193.54035950 499.14001465]
[178.08940125 493.64456177]
[175.38963318 477.46917725]
[165.47654724 466.21170044]
[155.56344604 454.95422363]
[145.65036011 443.69674683]
[135.73727417 432.43930054]
[121.29287720 436.48641968]
[106.84975433 440.53320312]
[104.22901917 455.30245972]
[101.60828400 470.07174683]
[115.39343262 476.17364502]
[127.31730652 485.39779663]
[136.68666077 497.20788574]
[142.95677185 510.91735840]
[145.76312256 525.72906494]
[144.94252014 540.78198242]
[140.54270935 555.20092773]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 153]
[18 152]
[19 151]
[20 135]
[21 134]
[22 133]
[23 132]
[25 131]
[26 130]
[27 129]
[29 128]
[30 127]
[31 126]
[33 122]
[34 121]
[35 120]
[36 119]
[37 118]
[38 117]
[39 116]
[40 115]
[41 114]
[43 80]
[44 79]
[45 78]
[46 77]
[47 76]
[48 75]
[51 73]
[52 72]
[53 71]
[54 70]
[57 69]
[58 68]
[59 67]
[60 66]
[61 65]
[87 110]
[88 109]
[89 108]
[90 107]
[91 106]
[93 105]
[94 104]
[95 103]
[136 149]
[137 148]
[138 147]
[139 146]
[140 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
