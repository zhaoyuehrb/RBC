%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:34:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUAAAAGAAGAGCUUCGCCGGAAUCAGUCUUCAUUACAGAUGUGCAGCACCAUGAGGGCCCUGGUGCUUCUGCUGUCCCUGUUCCUGCUGGGUGGCCAGGCCCAGCAUGUGUCUGACUGGACCUACUCAGAAGGGGCACUGGACGAAGCGC\
) } def
/len { sequence length } bind def

/coor [
[46.74422073 232.77415466]
[42.81269836 247.24975586]
[38.88117218 261.72537231]
[34.94964600 276.20095825]
[39.66101456 291.90878296]
[28.21796989 303.65563965]
[12.39213181 299.35739136]
[8.46376801 283.43569946]
[20.47404289 272.26943970]
[24.40556717 257.79385376]
[28.33709335 243.31823730]
[32.26861954 228.84263611]
[25.92423439 210.61410522]
[40.30249786 196.54170227]
[43.64031219 181.91778564]
[46.97812653 167.29386902]
[50.31594086 152.66995239]
[53.65375519 138.04603577]
[56.99156570 123.42211151]
[60.18004608 108.76490784]
[63.21886063 94.07595062]
[57.97689819 80.02170563]
[46.06109238 70.91052246]
[34.14528275 61.79934692]
[22.22947884 52.68816757]
[13.45453167 49.93705368]
[10.16605473 43.26759338]
[-1.56141746 33.91524506]
[-13.28888988 24.56289864]
[-26.30027771 29.21412086]
[-39.80107117 26.83220100]
[-50.26829910 18.14770889]
[-55.02466583 5.52145910]
[-52.92288971 -7.69645214]
[-64.45714569 -17.28607559]
[-75.28846741 -15.65947914]
[-85.01284790 -20.20058632]
[-90.48886871 -29.17374229]
[-90.09712982 -39.45805740]
[-101.23064423 -49.51016998]
[-112.36415100 -59.56227875]
[-123.49766541 -69.61438751]
[-125.69557190 -54.77628708]
[-138.56047058 -47.06304169]
[-152.68394470 -52.11554718]
[-157.73709106 -66.23877716]
[-150.02444458 -79.10403442]
[-135.18566895 -81.30239105]
[-145.23777771 -92.43590546]
[-155.28988647 -103.56941223]
[-165.34199524 -114.70292664]
[-175.39410400 -125.83644104]
[-185.44621277 -136.96995544]
[-195.49832153 -148.10346985]
[-210.70365906 -145.49548340]
[-224.89622498 -151.54315186]
[-233.54725647 -164.31669617]
[-233.89622498 -179.74011230]
[-225.83177185 -192.89184570]
[-211.92724609 -199.57522583]
[-196.61952209 -197.65762329]
[-184.79324341 -187.75091553]
[-180.22213745 -173.01631165]
[-184.36482239 -158.15557861]
[-174.31271362 -147.02206421]
[-164.26058960 -135.88854980]
[-154.20848083 -124.75503540]
[-144.15637207 -113.62152863]
[-134.10426331 -102.48801422]
[-124.05215454 -91.35449982]
[-113.44555664 -80.74790192]
[-102.31204224 -70.69579315]
[-91.17852783 -60.64368057]
[-80.04502106 -50.59157181]
[-60.91767883 -48.00789261]
[-54.86752319 -28.82033348]
[-43.33326721 -19.23070908]
[-27.59107208 -23.78651810]
[-12.07238293 -18.02418137]
[-2.93723798 -4.02058601]
[-3.93654251 12.83542633]
[7.79092979 22.18777275]
[19.51840210 31.54012108]
[31.34065628 40.77236176]
[43.25646210 49.88354111]
[55.17226791 58.99472046]
[67.08807373 68.10589600]
[82.08495331 67.79991913]
[93.61920929 58.21029282]
[105.15347290 48.62067032]
[116.68772888 39.03104401]
[128.22198486 29.44142151]
[139.75624084 19.85179710]
[151.29049683 10.26217270]
[162.82475281 0.67254794]
[164.02378845 -15.08619118]
[176.06900024 -25.31792450]
[191.81419373 -23.95234871]
[201.91799927 -11.79963207]
[200.38603210 3.93023229]
[188.12716675 13.90499496]
[172.41438293 12.20680618]
[160.88012695 21.79643059]
[149.34587097 31.38605499]
[137.81161499 40.97567749]
[126.27735138 50.56530380]
[114.74309540 60.15492630]
[103.20883942 69.74455261]
[91.67457581 79.33417511]
[111.85434723 82.96075439]
[119.22716522 100.53565979]
[132.87164307 106.76688385]
[146.51612854 112.99810791]
[160.16059875 119.22933197]
[173.80508423 125.46055603]
[187.44956970 131.69178772]
[203.69229126 125.27421570]
[219.25744629 132.42129517]
[224.75532532 148.28631592]
[238.52407837 154.23791504]
[252.29281616 160.18951416]
[266.06155396 166.14111328]
[280.65945435 160.08491516]
[295.23196411 166.20190430]
[301.13348389 180.86299133]
[294.86276245 195.37001038]
[280.14010620 201.11621094]
[265.70019531 194.69245911]
[260.10995483 179.90986633]
[246.34121704 173.95826721]
[232.57246399 168.00665283]
[218.80372620 162.05505371]
[207.57296753 168.44261169]
[194.52096558 167.15754700]
[184.45666504 158.44731140]
[181.21833801 145.33625793]
[167.57385254 139.10504150]
[153.92938232 132.87380981]
[140.28489685 126.64258575]
[126.64041901 120.41136169]
[112.99594116 114.18013763]
[90.42570496 118.41722870]
[77.90782166 97.11476135]
[74.86901093 111.80372620]
[76.19764709 120.90334320]
[71.61548615 126.75992584]
[68.27767181 141.38385010]
[64.93985748 156.00776672]
[61.60204315 170.63168335]
[58.26422882 185.25559998]
[54.92641449 199.87951660]
[61.27484512 208.80480957]
[61.62158585 219.53164673]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[14 151]
[15 150]
[16 149]
[17 148]
[18 147]
[19 146]
[20 144]
[21 143]
[22 87]
[23 86]
[24 85]
[25 84]
[27 83]
[28 82]
[29 81]
[34 77]
[35 76]
[39 74]
[40 73]
[41 72]
[42 71]
[48 70]
[49 69]
[50 68]
[51 67]
[52 66]
[53 65]
[54 64]
[88 109]
[89 108]
[90 107]
[91 106]
[92 105]
[93 104]
[94 103]
[95 102]
[111 141]
[112 140]
[113 139]
[114 138]
[115 137]
[116 136]
[119 132]
[120 131]
[121 130]
[122 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
