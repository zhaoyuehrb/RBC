%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGGCUCUGGCCAUAUAAACAGAGGGACGCACGCCCAUGCGGCUGUAGACGCCAUGAUGGAUGUGUCUGGUGUGGGUUUCCCAAGCAAGGUUCCUUGGAAGAAGAUGUCUGCAGAGGAGCUGGAGAAUCAGUACUGUCCCAGCCGAUGGGUUG\
) } def
/len { sequence length } bind def

/coor [
[-27.71488190 297.60821533]
[-36.53166199 309.74346924]
[-31.89653206 324.43432617]
[-36.74396515 338.86886597]
[-49.01632690 347.57824707]
[-63.88588715 347.39331055]
[-72.70266724 359.52856445]
[-81.51944733 371.66381836]
[-90.33621979 383.79907227]
[-99.15299988 395.93432617]
[-92.83276367 409.93255615]
[-94.37435150 425.21389771]
[-103.36309052 437.66772461]
[-117.38105011 443.94406128]
[-132.65747070 442.35458374]
[-145.08308411 433.32684326]
[-151.31544495 419.28927612]
[-149.67808533 404.01791382]
[-140.61145020 391.62066650]
[-126.55441284 385.43234253]
[-111.28825378 387.11755371]
[-102.47148132 374.98229980]
[-93.65470123 362.84704590]
[-84.83792114 350.71179199]
[-76.02114105 338.57653809]
[-80.79195404 324.49188232]
[-76.30121613 310.12884521]
[-64.07109833 301.05813599]
[-48.66691589 300.92666626]
[-39.85013580 288.79141235]
[-44.62094879 274.70678711]
[-40.13021469 260.34371948]
[-27.90009689 251.27302551]
[-12.49591160 251.14155579]
[-3.67913294 239.00630188]
[5.13764572 226.87104797]
[13.95442486 214.73579407]
[22.77120399 202.60054016]
[31.58798218 190.46528625]
[32.98345566 183.16239929]
[40.70846939 178.17587280]
[49.76938248 166.22180176]
[58.83029175 154.26773071]
[67.89120483 142.31365967]
[76.95211792 130.35957336]
[86.01303101 118.40550232]
[52.52220917 81.92843628]
[42.07806015 71.16183472]
[31.63391113 60.39522934]
[21.18976212 49.62862396]
[10.74561310 38.86201859]
[0.30146423 28.09541702]
[-10.14268494 17.32881355]
[-18.41556168 13.31624413]
[-20.68664742 6.23656988]
[-30.91044617 -4.73949337]
[-46.82789230 -6.74309158]
[-55.06245804 -20.51158905]
[-49.29728317 -35.48297119]
[-33.95492172 -40.17247772]
[-20.80471611 -30.98271942]
[-19.93438148 -14.96329117]
[-9.71058464 -3.98722768]
[0.62391913 6.88466406]
[11.06806755 17.65126801]
[21.51221657 28.41787148]
[31.95636559 39.18447495]
[42.40051270 49.95108032]
[52.84466171 60.71768188]
[63.28881073 71.48428345]
[77.35509491 66.27470398]
[78.26660919 51.30242920]
[71.38220978 37.05758286]
[79.87861633 24.82400894]
[80.79013062 9.85172939]
[81.70164490 -5.12054968]
[82.61315918 -20.09282875]
[77.54049683 -36.27011108]
[91.68131256 -45.62284851]
[104.58310699 -34.62375641]
[97.58543396 -19.18131638]
[96.67391968 -4.20903635]
[95.76240540 10.76324272]
[94.85089111 25.73552132]
[101.80049133 38.90945053]
[93.23888397 52.21394348]
[92.32736969 67.18621826]
[98.48310089 71.47073364]
[110.79454803 80.03975677]
[116.95027924 84.32426453]
[130.67399597 78.26954651]
[144.39770508 72.21482086]
[158.12141418 66.16009521]
[171.84512329 60.10536957]
[185.56884766 54.05064392]
[199.29255676 47.99591827]
[213.01626587 41.94119263]
[216.39836121 26.91229820]
[227.84759521 16.87396049]
[242.83512878 15.51822662]
[255.59436035 23.15629387]
[269.31805420 17.10157013]
[283.04177856 11.04684448]
[290.15893555 -3.33111238]
[305.86746216 -6.59025383]
[318.11709595 3.76955485]
[317.51101685 19.80115509]
[304.51409912 29.20647430]
[289.09649658 24.77055740]
[275.37280273 30.82528305]
[261.64907837 36.88000870]
[258.68914795 51.45316315]
[247.58416748 61.60910797]
[232.45143127 63.29839706]
[219.07099915 55.66490555]
[205.34727478 61.71963120]
[191.62356567 67.77436066]
[177.89985657 73.82907867]
[164.17614746 79.88380432]
[150.45242310 85.93852997]
[136.72871399 91.99325562]
[123.00500488 98.04798126]
[121.48748016 112.97102356]
[133.71145630 121.66436768]
[145.93544006 130.35771179]
[159.27713013 122.94409180]
[174.51473999 122.06196594]
[188.62281799 127.88648224]
[198.80018616 139.26118469]
[203.02613831 153.92761230]
[200.46159363 168.97373962]
[191.61576843 181.41213989]
[178.24496460 188.77316284]
[163.00401306 189.59527588]
[148.91897583 183.71525574]
[138.78648376 172.30056763]
[134.61831665 157.61759949]
[137.24209595 142.58169556]
[125.01811218 133.88835144]
[112.79412842 125.19499969]
[97.96710205 127.46641541]
[88.90618896 139.42048645]
[79.84527588 151.37455750]
[70.78437042 163.32864380]
[61.72345352 175.28271484]
[52.66254044 187.23678589]
[43.72323608 199.28207397]
[34.90645981 211.41732788]
[26.08967972 223.55258179]
[17.27290154 235.68783569]
[8.45612144 247.82308960]
[-0.36065692 259.95834351]
[4.27447224 274.64920044]
[-0.57296056 289.08374023]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[6 25]
[7 24]
[8 23]
[9 22]
[10 21]
[34 152]
[35 151]
[36 150]
[37 149]
[38 148]
[39 147]
[41 146]
[42 145]
[43 144]
[44 143]
[45 142]
[46 141]
[47 70]
[48 69]
[49 68]
[50 67]
[51 66]
[52 65]
[53 64]
[55 63]
[56 62]
[71 87]
[72 86]
[74 84]
[75 83]
[76 82]
[77 81]
[90 122]
[91 121]
[92 120]
[93 119]
[94 118]
[95 117]
[96 116]
[97 115]
[101 111]
[102 110]
[103 109]
[123 140]
[124 139]
[125 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
