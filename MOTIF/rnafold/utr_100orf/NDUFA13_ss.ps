%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:14:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGACCGGAAGUGUGGGAUACUGCGAGUAUGGCGGCGUCAAAGGUGAAGCAGGACAUGCCUCCGCCGGGGGGCUAUGGGCCCAUCGACUACAAACGGAACUUGCCGCGUCGAGGACUGUCGGGCUACA\
) } def
/len { sequence length } bind def

/coor [
[196.89179993 293.92575073]
[199.80978394 286.71646118]
[190.99301147 274.58120728]
[176.28741455 272.51208496]
[167.17308044 260.33081055]
[169.44306946 244.92027283]
[160.62629700 232.78501892]
[151.80950928 220.64976501]
[140.30317688 221.34082031]
[129.80395508 216.29774475]
[123.01194763 206.68750000]
[121.73668671 194.86747742]
[126.41645050 183.80766296]
[118.19625854 171.26062012]
[109.97607422 158.71356201]
[101.75588226 146.16651917]
[93.53569794 133.61946106]
[79.78381348 127.62899017]
[64.99792480 130.15434265]
[50.21203232 132.67970276]
[37.91147232 142.62991333]
[24.06323814 137.14578247]
[9.27734756 139.67114258]
[-5.50854349 142.19650269]
[-20.29443550 144.72184753]
[-28.02910995 158.31262207]
[-42.70808792 163.70349121]
[-57.40040970 158.34907532]
[-65.16880798 144.77755737]
[-62.34527588 129.39700317]
[-50.26301193 119.46961975]
[-34.62688065 119.68283081]
[-22.81978989 129.93595886]
[-8.03389931 127.41060638]
[6.75199175 124.88524628]
[21.53788376 122.35989380]
[32.78085709 112.59030914]
[47.68667603 117.89381409]
[62.47256851 115.36845398]
[77.25846100 112.84310150]
[75.28691864 102.10140991]
[77.89241791 92.06926727]
[84.13977051 84.50666809]
[92.50000000 80.53853607]
[92.50000000 65.53853607]
[92.50000000 50.53853607]
[92.50000000 35.53853607]
[79.88385773 43.65229034]
[65.59692383 39.08245087]
[60.03152084 25.15311813]
[67.23593140 11.99650478]
[81.96965790 9.18274307]
[93.51504517 18.75785255]
[95.32309723 3.86721849]
[87.69419098 -12.84059715]
[98.65932465 -26.48661041]
[100.10703278 -41.41658401]
[101.55474091 -56.34656143]
[102.82195282 -71.29293823]
[103.90847015 -86.25353241]
[104.99499512 -101.21413422]
[106.08152008 -116.17472839]
[107.16803741 -131.13533020]
[108.25456238 -146.09591675]
[100.62218475 -160.61070251]
[109.60377502 -174.33160400]
[125.95984650 -173.14373779]
[132.86466980 -158.26907349]
[123.21515656 -145.00939941]
[122.12863922 -130.04879761]
[121.04211426 -115.08820343]
[119.95558929 -100.12760925]
[118.86907196 -85.16701508]
[117.78254700 -70.20641327]
[120.46290588 -63.23675156]
[116.48471832 -54.89884949]
[115.03701019 -39.96887589]
[113.58930206 -25.03890228]
[121.05762482 -15.44259167]
[119.90746307 -2.93320274]
[110.21372986 5.67526865]
[108.40567780 20.56590271]
[107.50000000 35.53853607]
[107.50000000 50.53853607]
[107.50000000 65.53853607]
[107.50000000 80.53853607]
[121.18681335 92.10430145]
[121.50270081 111.45563507]
[106.08274841 125.39927673]
[114.30294037 137.94631958]
[122.52312469 150.49337769]
[130.74331665 163.04043579]
[138.96350098 175.58747864]
[157.57647705 178.66273499]
[167.94247437 194.04455566]
[163.94476318 211.83299255]
[172.76155090 223.96824646]
[181.57832336 236.10350037]
[196.93609619 238.70672607]
[205.70468140 251.13920593]
[203.12826538 265.76443481]
[211.94503784 277.89968872]
[233.92628479 285.21987915]
[236.23690796 307.54437256]
[246.45214844 318.52841187]
[256.66738892 329.51245117]
[264.89080811 333.72213745]
[266.99279785 340.88751221]
[276.93963623 352.11517334]
[291.88229370 357.31396484]
[294.53057861 371.97122192]
[304.47741699 383.19888306]
[320.33993530 385.59890747]
[328.22851562 399.56851196]
[322.09170532 414.39144897]
[306.63714600 418.69680786]
[293.72024536 409.18188477]
[293.24975586 393.14575195]
[283.30291748 381.91809082]
[269.07171631 377.52236938]
[265.71197510 362.06201172]
[255.76512146 350.83435059]
[245.68334961 339.72769165]
[235.46810913 328.74365234]
[225.25286865 317.75961304]
[218.05984497 319.34289551]
[210.70433044 318.26611328]
[204.14688110 314.62069702]
[199.26113892 308.83670044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 102]
[3 101]
[6 98]
[7 97]
[8 96]
[13 93]
[14 92]
[15 91]
[16 90]
[17 89]
[18 40]
[19 39]
[20 38]
[22 36]
[23 35]
[24 34]
[25 33]
[44 86]
[45 85]
[46 84]
[47 83]
[53 82]
[54 81]
[56 78]
[57 77]
[58 76]
[59 74]
[60 73]
[61 72]
[62 71]
[63 70]
[64 69]
[104 125]
[105 124]
[106 123]
[108 122]
[109 121]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
