%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:05:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUUUUUCCGCGGGCGCUUGAUAACGCGGGUGAGGCGUGGAGGGCGGCGCCAUGGCCCACCUGGAGCUGCUGCUUGUGGAAAAUUUCAAGUCGUGGCGGGGCCGCCAGGUCAUUGGCCCCUUCCGGAGGUUCACCUGCAUCAUCGGCCCCA\
) } def
/len { sequence length } bind def

/coor [
[-12.50037575 577.95458984]
[-14.96460915 579.41009521]
[-19.21745491 593.79461670]
[-10.42955589 606.72930908]
[-12.06332970 622.28131104]
[-23.34735870 633.10742188]
[-38.95367050 634.09588623]
[-51.51344299 624.77996826]
[-55.09633255 609.55841064]
[-48.01060867 595.61828613]
[-33.60193634 589.54174805]
[-29.34909058 575.15728760]
[-25.69038391 560.61029053]
[-22.63198853 545.92541504]
[-19.57359314 531.24053955]
[-16.51519775 516.55560303]
[-26.64708138 505.67062378]
[-28.44794273 490.73007202]
[-21.01907921 477.43850708]
[-7.02646732 470.99545288]
[-3.96807170 456.31054688]
[-0.90967625 441.62564087]
[2.14871931 426.94076538]
[0.48180133 423.76763916]
[0.30592322 419.61569214]
[2.07021236 415.21197510]
[5.87401628 411.45880127]
[9.83062649 396.99002075]
[13.78723717 382.52127075]
[17.74384689 368.05249023]
[21.70045853 353.58370972]
[25.65706825 339.11495972]
[29.61367798 324.64617920]
[33.57028961 310.17742920]
[37.52689743 295.70864868]
[26.86499977 283.26382446]
[25.68773079 266.75244141]
[34.65390015 252.64085388]
[50.41097641 246.57334900]
[54.06968307 232.02639771]
[57.72838974 217.47944641]
[61.38709641 202.93249512]
[65.04579926 188.38552856]
[68.70450592 173.83857727]
[72.36321259 159.29162598]
[70.93585968 151.99266052]
[76.24925995 144.48509216]
[80.20587158 130.01632690]
[84.16247559 115.54756165]
[68.70993805 74.36894989]
[67.17264557 59.44793320]
[65.63535309 44.52691650]
[64.09806061 29.60589981]
[62.56076813 14.68488407]
[61.02347565 -0.23613235]
[59.48618317 -15.15714836]
[57.94889069 -30.07816505]
[54.89049530 -44.76306152]
[50.34320450 -59.05719376]
[45.79591370 -73.35132599]
[41.24862289 -87.64545441]
[37.29393768 -91.23929596]
[35.35034180 -95.56688690]
[35.35561371 -99.72255707]
[36.89085388 -102.96141815]
[33.23214722 -117.50837708]
[29.57344246 -132.05532837]
[25.91473770 -146.60227966]
[14.11649799 -157.99235535]
[18.34347725 -173.83737183]
[34.24731827 -177.83734131]
[45.46751785 -165.87744141]
[40.46169281 -150.26098633]
[44.12039566 -135.71403503]
[47.77910233 -121.16708374]
[51.43780899 -106.62012482]
[55.54275513 -92.19274139]
[60.09004211 -77.89861298]
[64.63733673 -63.60448456]
[69.18462372 -49.31035233]
[74.51861572 -63.32992935]
[86.06151581 -72.90914917]
[100.82410431 -75.56732178]
[114.98338318 -70.61607361]
[124.87258148 -59.33760834]
[127.93072510 -44.65266037]
[123.36587524 -30.36412811]
[112.36016083 -20.17225647]
[97.76368713 -16.71638870]
[83.35644531 -20.89147758]
[72.86990356 -31.61545753]
[74.40719604 -16.69444084]
[75.94448853 -1.77342486]
[77.48178101 13.14759159]
[79.01907349 28.06860733]
[80.55636597 42.98962402]
[82.09365845 57.91064072]
[83.63095093 72.83165741]
[89.96671295 76.84515381]
[102.63822937 84.87215424]
[108.97398376 88.88565063]
[123.12129974 83.90032959]
[137.26861572 78.91500854]
[151.41593933 73.92968750]
[161.66880798 61.13083267]
[177.83625793 63.87778473]
[183.28659058 79.34471130]
[172.41297913 91.62056732]
[156.40126038 88.07700348]
[142.25393677 93.06232452]
[128.10662842 98.04764557]
[113.95930481 103.03296661]
[127.69176483 109.06783295]
[130.72529602 123.75788116]
[120.50661469 134.73870850]
[105.63665009 132.76789856]
[98.63124847 119.50417328]
[94.67463684 133.97294617]
[90.71802521 148.44171143]
[86.91016388 162.95033264]
[83.25145721 177.49728394]
[79.59275818 192.04423523]
[75.93405151 206.59120178]
[72.27534485 221.13815308]
[68.61663818 235.68510437]
[64.95793152 250.23205566]
[74.57856750 260.15155029]
[77.99878693 273.42819214]
[74.42526245 286.55203247]
[64.89912415 296.10815430]
[51.99566650 299.66525269]
[48.03905487 314.13403320]
[44.08244705 328.60278320]
[40.12583542 343.07156372]
[36.16922379 357.54034424]
[32.21261597 372.00909424]
[28.25600433 386.47787476]
[24.29939461 400.94662476]
[20.34278488 415.41540527]
[16.83361626 429.99914551]
[13.77522182 444.68405151]
[10.71682549 459.36895752]
[7.65843058 474.05383301]
[17.91543388 485.54733276]
[19.42037582 500.69949341]
[11.80467224 513.67889404]
[-1.83030021 519.61401367]
[-4.88869572 534.29888916]
[-7.94709110 548.98382568]
[-11.00548649 563.66870117]
[-9.44098091 567.87011719]
[-9.34398746 571.93389893]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 12]
[3 11]
[13 150]
[14 149]
[15 148]
[16 147]
[20 143]
[21 142]
[22 141]
[23 140]
[27 139]
[28 138]
[29 137]
[30 136]
[31 135]
[32 134]
[33 133]
[34 132]
[35 131]
[39 126]
[40 125]
[41 124]
[42 123]
[43 122]
[44 121]
[45 120]
[47 119]
[48 118]
[49 117]
[50 98]
[51 97]
[52 96]
[53 95]
[54 94]
[55 93]
[56 92]
[57 91]
[58 80]
[59 79]
[60 78]
[61 77]
[65 76]
[66 75]
[67 74]
[68 73]
[101 112]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
