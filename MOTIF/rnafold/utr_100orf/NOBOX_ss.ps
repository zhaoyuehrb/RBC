%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:52:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUCUCCUUUUGACACUAACAUCACCAGACCUGGAGGGUACCUGGGACACCAGAGACAAGGAUGGCUUCAAAGCCCAGGAGGGGCCGCCCCUGGCUG\
) } def
/len { sequence length } bind def

/coor [
[110.65711212 140.22276306]
[91.04622650 138.12120056]
[75.78546906 127.58673859]
[67.94986725 112.08972168]
[53.09656906 114.18245697]
[38.24327087 116.27518463]
[23.38997078 118.36791229]
[8.53667259 120.46064758]
[-6.31662607 122.55337524]
[-21.16992569 124.64610291]
[-36.26830292 137.82273865]
[-53.94775009 130.25636292]
[-68.64221191 133.26846313]
[-83.33667755 136.28057861]
[-98.03113556 139.29267883]
[-101.26421356 154.17445374]
[-110.27596283 166.45077515]
[-123.50506592 173.99470520]
[-138.65948486 175.49920654]
[-153.11361694 170.70362854]
[-164.36322021 160.43881226]
[-170.45922852 146.48321533]
[-170.34544373 131.25473022]
[-164.04161072 117.39176941]
[-152.63989258 107.29618835]
[-138.11572266 102.71710205]
[-122.98547363 104.44786835]
[-109.87056732 112.18861389]
[-101.04324341 124.59822083]
[-86.34878540 121.58611298]
[-71.65431976 118.57400513]
[-56.95985794 115.56190491]
[-51.99317551 106.38539124]
[-42.55396271 101.44014740]
[-31.74111176 102.62889099]
[-23.26265526 109.79280853]
[-8.40935612 107.70007324]
[6.44394207 105.60734558]
[21.29724121 103.51461792]
[36.15053940 101.42188263]
[51.00383759 99.32915497]
[65.85713959 97.23642731]
[71.08626556 74.81969452]
[90.79970551 58.58154297]
[118.84545135 57.47391891]
[118.84545135 42.47391891]
[118.84545135 27.47391701]
[118.84545135 12.47391701]
[110.18174744 -1.44988573]
[118.14588165 -15.78532028]
[134.54502869 -15.78532028]
[142.50915527 -1.44988573]
[133.84545898 12.47391701]
[133.84545898 27.47391701]
[133.84545898 42.47391891]
[133.84545898 57.47391891]
[139.65687561 62.21493912]
[146.84826660 49.05120087]
[147.00573730 34.05202866]
[157.32545471 23.16610146]
[172.29486084 22.20844078]
[183.91761780 31.69060898]
[185.98510742 46.54743958]
[177.39292908 58.84274673]
[162.73126221 62.00871658]
[151.27973938 71.69698334]
[157.09117126 76.43801117]
[171.78562927 73.42590332]
[186.48008728 70.41379547]
[201.17456055 67.40169525]
[213.07501221 56.11846542]
[228.71769714 61.04171371]
[232.01075745 77.10682678]
[219.56657410 87.78738403]
[204.18666077 82.09615326]
[189.49220276 85.10826111]
[174.79772949 88.12036896]
[160.10327148 91.13246918]
[155.29089355 105.33954620]
[165.12982178 116.66188812]
[174.96875000 127.98423767]
[192.45724487 133.47962952]
[195.31430054 150.71733093]
[205.50059509 161.72821045]
[215.68688965 172.73908997]
[225.87318420 183.74996948]
[236.05947876 194.76084900]
[251.25398254 202.28170776]
[248.23329163 218.96438599]
[231.36636353 220.67997742]
[225.04859924 204.94714355]
[214.86230469 193.93626404]
[204.67601013 182.92538452]
[194.48971558 171.91450500]
[184.30342102 160.90362549]
[172.12384033 160.08172607]
[163.54766846 150.83650208]
[163.64640808 137.82316589]
[153.80746460 126.50081635]
[143.96853638 115.17847443]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 42]
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[10 36]
[12 32]
[13 31]
[14 30]
[15 29]
[45 56]
[46 55]
[47 54]
[48 53]
[67 78]
[68 77]
[69 76]
[70 75]
[79 100]
[80 99]
[81 98]
[83 95]
[84 94]
[85 93]
[86 92]
[87 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
