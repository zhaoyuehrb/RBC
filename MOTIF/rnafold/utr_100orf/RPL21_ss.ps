%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:14:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCCUUUCGGCCGGAACCGCCAUCUUCCAGUAAUUCGCCAAAAUGACGAACACAAAGGGAAAGAGGAGAGGCACCCGAUAUAUGUUCUCUAGGCCUUUUAGAAAACAUGGAGUUGUUCCUUUGGCCACAUAUAUGCGAAUCU\
) } def
/len { sequence length } bind def

/coor [
[209.34748840 158.06758118]
[201.39381409 150.79760742]
[195.79463196 141.56617737]
[193.01206970 131.11222839]
[178.06915283 129.80488586]
[163.12622070 128.49755859]
[148.18330383 127.19022369]
[133.24038696 125.88288116]
[118.29747009 124.57554626]
[104.43927002 130.31579590]
[94.79746246 141.80647278]
[85.15564728 153.29713440]
[88.04908752 168.66470337]
[80.34248352 182.27139282]
[65.67465973 187.69256592]
[50.97132111 182.36849976]
[43.17492676 168.81304932]
[45.96669388 153.42668152]
[58.02844238 143.47438049]
[73.66497803 143.65531921]
[83.30679321 132.16465759]
[92.94860840 120.67398834]
[85.04773712 111.92076874]
[83.68685913 101.70330811]
[69.70674133 96.26673889]
[55.72662735 90.83016968]
[41.74650955 85.39360046]
[27.70792007 80.10984802]
[13.61252975 74.97954559]
[1.60859704 87.16739655]
[-14.45063591 92.89969635]
[-31.34949303 91.07947540]
[-45.72623825 82.11698914]
[-54.74183273 67.83853149]
[-56.64053726 51.11445999]
[-70.94628906 46.60387039]
[-85.25204468 42.09328461]
[-99.55780029 37.58269882]
[-115.04590607 40.81209946]
[-124.85747528 29.60574150]
[-139.16322327 25.09515381]
[-156.08744812 26.09873199]
[-161.73689270 10.11373615]
[-147.94052124 0.25998423]
[-134.65263367 10.78940010]
[-120.34688568 15.29998684]
[-105.88201904 11.74795723]
[-95.04721069 23.27694321]
[-80.74145508 27.78753090]
[-66.43570709 32.29811859]
[-52.12994766 36.80870438]
[-43.97990417 26.59044266]
[-32.80288315 19.75308418]
[-19.93140221 17.13744736]
[-6.90879536 19.07950211]
[4.69584513 25.36739159]
[13.47672272 35.26430511]
[18.36162758 47.59474945]
[18.74283218 60.88415527]
[32.83822250 66.01445770]
[40.25557709 65.34139252]
[47.18307877 71.41348267]
[61.16319656 76.85005188]
[75.14331818 82.28662109]
[89.12343597 87.72319031]
[111.59175110 84.79124451]
[119.60480499 109.63262939]
[134.54772949 110.93996429]
[149.49064636 112.24729919]
[164.43356323 113.55463409]
[179.37648010 114.86196899]
[194.31941223 116.16931152]
[204.76573181 99.35194397]
[222.17979431 90.09799957]
[241.80818176 90.84520721]
[258.33724976 101.31327820]
[267.33163452 118.60095215]
[282.32806396 118.27372742]
[297.32000732 117.78294373]
[312.30575562 117.12865448]
[327.29147339 116.47435760]
[342.27719116 115.82006836]
[357.26290894 115.16577911]
[372.24862671 114.51148987]
[387.23437500 113.85720062]
[402.22009277 113.20290375]
[392.29278564 101.95796967]
[393.02331543 86.97576904]
[403.99755859 76.75001526]
[418.99398804 77.07788086]
[429.51080322 87.77350616]
[429.58584595 102.77331543]
[419.17813110 113.57293701]
[434.12106323 114.88027191]
[449.06399536 116.18760681]
[464.00689697 117.49494171]
[471.51593018 108.16210175]
[482.49935913 103.69184875]
[494.15255737 105.09957886]
[503.56057739 111.91552734]
[508.42724609 122.33193970]
[523.29888916 124.28983307]
[534.03479004 117.05227661]
[546.42242432 119.03768158]
[553.86523438 128.63348389]
[568.69067383 130.91534424]
[583.51611328 133.19718933]
[598.34149170 135.47904968]
[610.93701172 125.93286896]
[626.58190918 128.17178345]
[635.99438477 140.86749268]
[633.59014893 156.48783875]
[620.79565430 165.76556396]
[605.20159912 163.19635010]
[596.05969238 150.30445862]
[581.23425293 148.02261353]
[566.40881348 145.74076843]
[551.58337402 143.45890808]
[535.63824463 150.71054077]
[521.34100342 139.16149902]
[506.46936035 137.20361328]
[492.71844482 149.20417786]
[474.23910522 147.38806152]
[462.69955444 132.43786621]
[447.75665283 131.13052368]
[432.81372070 129.82319641]
[417.87081909 128.51585388]
[402.87435913 128.18862915]
[387.88864136 128.84292603]
[372.90292358 129.49720764]
[357.91720581 130.15150452]
[342.93148804 130.80578613]
[327.94577026 131.46008301]
[312.96002197 132.11437988]
[297.97430420 132.76866150]
[291.37915039 136.22900391]
[282.65527344 133.27015686]
[267.65884399 133.59738159]
[264.35784912 143.69912720]
[258.33724976 152.48234558]
[250.07321167 159.23135376]
[240.22520447 163.39218140]
[229.58348083 164.61801147]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 72]
[5 71]
[6 70]
[7 69]
[8 68]
[9 67]
[10 22]
[11 21]
[12 20]
[24 65]
[25 64]
[26 63]
[27 62]
[28 60]
[29 59]
[35 51]
[36 50]
[37 49]
[38 48]
[40 46]
[41 45]
[77 138]
[78 137]
[79 135]
[80 134]
[81 133]
[82 132]
[83 131]
[84 130]
[85 129]
[86 128]
[93 127]
[94 126]
[95 125]
[96 124]
[101 121]
[102 120]
[105 118]
[106 117]
[107 116]
[108 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
