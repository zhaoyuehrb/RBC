%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCGCGCCCGCUGGGGCCCGCGAUGGCGGGGGCCUGGCUCAGGUGGGGGCUCCUGCUCUGGGCAGGGCUCCUCGCGUCCUCGGCGCACGGCCGGCUGCGGAGGAUCACCUACGUGGUGCACC\
) } def
/len { sequence length } bind def

/coor [
[88.69773102 317.83200073]
[88.69773102 302.83200073]
[88.69773102 287.83200073]
[85.51518250 281.06613159]
[88.89255524 272.45321655]
[89.27254486 257.45803833]
[89.65253448 242.46284485]
[90.03252411 227.46765137]
[90.41251373 212.47247314]
[90.60252380 197.47367859]
[90.60252380 182.47367859]
[87.41997528 175.70780945]
[90.79734802 167.09487915]
[91.17734528 152.09970093]
[91.55733490 137.10450745]
[91.93732452 122.10932922]
[75.53125000 110.04151154]
[73.46080017 87.43240356]
[59.26705551 92.28397369]
[45.07331848 97.13554382]
[30.87957573 101.98711395]
[16.68583488 106.83868408]
[6.31261635 119.54019165]
[-9.82818127 116.64076996]
[-15.13228893 101.12308502]
[-4.14329433 88.95040894]
[11.83426571 92.64494324]
[26.02800560 87.79337311]
[40.22174835 82.94180298]
[54.41548920 78.09023285]
[68.60923004 73.23866272]
[73.64020538 59.10752106]
[65.70574951 46.37785721]
[57.77128601 33.64819336]
[49.83682632 20.91852760]
[41.90236664 8.18886375]
[28.03635597 0.57018030]
[27.87030220 -14.32349968]
[19.93584251 -27.05316353]
[12.00138187 -39.78282547]
[4.06692171 -52.51248932]
[-3.86753845 -65.24215698]
[-11.80199909 -77.97181702]
[-19.89707375 -90.59995270]
[-28.15146446 -103.12452698]
[-36.40585327 -115.64910889]
[-44.66024399 -128.17369080]
[-52.91463470 -140.69825745]
[-67.81075287 -147.55667114]
[-69.04961395 -163.90895081]
[-55.35678864 -172.93328857]
[-40.81827927 -165.34620667]
[-40.39006042 -148.95265198]
[-32.13566971 -136.42807007]
[-23.88127708 -123.90349579]
[-15.62688732 -111.37892151]
[-7.37249660 -98.85433960]
[-0.99195468 -94.95637512]
[0.92766517 -85.90628052]
[8.86212540 -73.17661285]
[16.79658508 -60.44695282]
[24.73104477 -47.71728897]
[32.66550446 -34.98762512]
[40.59996414 -22.25795937]
[53.89844894 -15.54978657]
[54.63203049 0.25440371]
[62.56649017 12.98406792]
[70.50094604 25.71373177]
[78.43540955 38.44339371]
[86.36987305 51.17305756]
[100.36903381 56.56040192]
[114.79028320 52.43395996]
[129.21153259 48.30751801]
[143.63278198 44.18107605]
[151.12422180 38.75266647]
[158.47180176 40.13774109]
[172.99296570 36.37795258]
[187.51411438 32.61816406]
[195.56109619 19.28085136]
[210.34117126 15.67475128]
[223.00666809 23.42850685]
[237.52783203 19.66871834]
[252.04898071 15.90892982]
[266.57012939 12.14914227]
[281.09130859 8.38935375]
[290.43621826 -4.65103388]
[306.46484375 -5.33148670]
[316.88134766 6.86998081]
[313.69512939 22.59344673]
[299.35031128 29.77721405]
[284.85107422 22.91051102]
[270.32992554 26.67029953]
[255.80877686 30.43008614]
[241.28761292 34.18987656]
[226.76646423 37.94966125]
[219.45533752 50.87572479]
[204.78237915 54.89554214]
[191.27391052 47.13932037]
[176.75274658 50.89910889]
[162.23159790 54.65889740]
[147.75923157 58.60232925]
[133.33798218 62.72877121]
[118.91672516 66.85520935]
[104.49547577 70.98165131]
[117.98128510 78.27861786]
[125.47068024 90.94570923]
[125.36954498 105.04312897]
[118.33951569 116.54509735]
[106.93251038 122.48931885]
[106.55252075 137.48449707]
[106.17253113 152.47969055]
[105.79253387 167.47488403]
[105.60252380 182.47367859]
[105.60252380 197.47367859]
[108.76062775 206.16938782]
[105.40769958 212.85246277]
[105.02770996 227.84764099]
[104.64772034 242.84283447]
[104.26773071 257.83801270]
[103.88774109 272.83319092]
[103.69773102 287.83200073]
[103.69773102 302.83200073]
[103.69773102 317.83200073]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 123]
[2 122]
[3 121]
[5 120]
[6 119]
[7 118]
[8 117]
[9 116]
[10 114]
[11 113]
[13 112]
[14 111]
[15 110]
[16 109]
[18 31]
[19 30]
[20 29]
[21 28]
[22 27]
[32 70]
[33 69]
[34 68]
[35 67]
[36 66]
[38 64]
[39 63]
[40 62]
[41 61]
[42 60]
[43 59]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
[71 104]
[72 103]
[73 102]
[74 101]
[76 100]
[77 99]
[78 98]
[81 95]
[82 94]
[83 93]
[84 92]
[85 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
