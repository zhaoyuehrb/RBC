%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGGAGCCCGGGCGGGAUCCUGCUCCAGGCGCUGCCCCGGCUGCUGCAGCACGCCGCCCUCCCGGGCCUCGCCGAGCUGCCGGCCCGCUGGGCCCUGC\
) } def
/len { sequence length } bind def

/coor [
[75.37140656 453.40689087]
[62.48507309 442.38967896]
[69.50443268 426.95709229]
[70.43697357 411.98611450]
[71.36952209 397.01513672]
[72.30206299 382.04415894]
[65.37097931 368.86047363]
[73.95126343 355.56802368]
[74.88381195 340.59704590]
[75.81635284 325.62603760]
[76.74890137 310.65505981]
[77.68144226 295.68408203]
[78.61399078 280.71310425]
[75.83923340 273.71835327]
[79.81549072 265.29327393]
[81.21318054 250.35853577]
[82.61087036 235.42379761]
[84.00855255 220.48905945]
[70.22365570 212.56976318]
[61.20468903 199.40774536]
[58.77780914 183.57933044]
[63.47284317 168.20921326]
[74.40864563 156.35368347]
[89.45796967 150.39283752]
[90.39051056 135.42184448]
[91.32305908 120.45086670]
[92.25559998 105.47988129]
[89.65750885 100.70201111]
[90.02665710 94.80448151]
[93.74022675 89.61620331]
[95.60170746 74.73215485]
[97.46318817 59.84810638]
[99.32466888 44.96405792]
[89.89594269 32.56499481]
[91.99577332 17.49696922]
[103.87449646 8.58452797]
[105.73597717 -6.29952002]
[107.59745789 -21.18356705]
[109.45893860 -36.06761551]
[109.69221497 -51.06580353]
[108.29452515 -66.00054169]
[106.89684296 -80.93527985]
[105.49915314 -95.87002563]
[103.86936951 -110.78121948]
[102.00788879 -125.66526794]
[100.14640808 -140.54931641]
[89.82174683 -153.29032898]
[95.94530487 -168.50329590]
[112.21768188 -170.53840637]
[121.89926147 -157.30212402]
[115.03045654 -142.41079712]
[116.89193726 -127.52674866]
[118.75341797 -112.64270020]
[122.77783966 -106.28427887]
[120.43389130 -97.26770782]
[121.83158112 -82.33296967]
[123.22927094 -67.39823151]
[124.62696075 -52.46348953]
[135.11668396 -63.18569946]
[150.01657104 -64.91574097]
[162.68403625 -56.88233566]
[167.47167969 -42.66690826]
[162.24511719 -28.60692787]
[149.33442688 -20.97056389]
[134.49540710 -23.16223145]
[124.34298706 -34.20613480]
[122.48150635 -19.32208633]
[120.62002563 -4.43803835]
[118.75854492 10.44600964]
[128.07644653 22.00941658]
[126.40066528 37.13047409]
[114.20871735 46.82553864]
[112.34723663 61.70958710]
[110.48575592 76.59363556]
[108.62427521 91.47768402]
[107.22658539 106.41242218]
[106.29404449 121.38340759]
[105.36149597 136.35438538]
[104.42895508 151.32537842]
[117.08811188 157.81646729]
[126.26381683 168.63117981]
[130.57965088 182.09564209]
[129.40803528 196.14257812]
[122.96123505 208.62864685]
[112.25385284 217.66154480]
[98.94329834 221.88674927]
[97.54560852 236.82148743]
[96.14791870 251.75622559]
[94.75022888 266.69097900]
[93.58496857 281.64562988]
[92.65242767 296.61663818]
[91.71987915 311.58761597]
[90.78733826 326.55859375]
[89.85478973 341.52957153]
[88.92224884 356.50054932]
[95.78662872 370.75506592]
[87.27304840 382.97668457]
[86.34049988 397.94766235]
[85.40795898 412.91867065]
[84.47541046 427.88964844]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 100]
[4 99]
[5 98]
[6 97]
[8 95]
[9 94]
[10 93]
[11 92]
[12 91]
[13 90]
[15 89]
[16 88]
[17 87]
[18 86]
[24 79]
[25 78]
[26 77]
[27 76]
[30 75]
[31 74]
[32 73]
[33 72]
[36 69]
[37 68]
[38 67]
[39 66]
[40 58]
[41 57]
[42 56]
[43 55]
[44 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
