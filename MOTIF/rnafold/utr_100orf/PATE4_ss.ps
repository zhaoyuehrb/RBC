%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:15:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUACCUCACUCAGCACACCGUCUGUCACCCAAACAAGCAUCCAAUGAGGAAAAUGAACACACUGCUCCUUGUGAGCUUAUCUUUUCUCUACCUCAAAGAGGUUAUGGGUCUGAAGUGUAAUACCUGCAUAUACACAGAAGGAU\
) } def
/len { sequence length } bind def

/coor [
[90.98616791 281.55053711]
[88.86049652 296.49658203]
[82.78020477 310.31442261]
[73.19647980 321.97866821]
[60.82051468 330.62380981]
[46.57067490 335.60824585]
[31.50440025 336.56213379]
[16.73970604 333.41470337]
[3.37222934 326.39950562]
[-7.60607290 316.03707886]
[-15.38053799 303.09643555]
[-19.37424850 288.53784180]
[-19.29084587 273.44161987]
[-15.13651848 258.92803955]
[-7.21954393 246.07409668]
[3.87258410 235.83361816]
[17.31675720 228.96653748]
[32.11532593 225.98243713]
[47.17014313 227.10275269]
[52.26649857 212.99504089]
[49.31364441 198.39607239]
[61.27938461 188.04563904]
[66.37574005 173.93792725]
[71.47209167 159.83023071]
[76.56844330 145.72253418]
[81.66480255 131.61483765]
[69.39540863 99.00029755]
[89.03135681 77.87473297]
[86.76512146 63.04691315]
[84.49888611 48.21909714]
[82.23265076 33.39127731]
[79.96641541 18.56346130]
[71.90678406 17.62679482]
[64.16130066 15.23608875]
[56.98970795 11.47451019]
[50.63196945 6.47114658]
[45.30021667 0.39658228]
[41.17169189 -6.54292011]
[38.38283539 -14.11242199]
[37.02479172 -22.05626106]
[37.14044189 -30.10668945]
[38.72303009 -37.99289322]
[41.71650696 -45.45010757]
[46.01750946 -52.22849655]
[51.47890854 -58.10154343]
[57.91487503 -62.87359619]
[65.10716248 -66.38639069]
[62.20072937 -81.10211945]
[59.29430008 -95.81784821]
[56.38787079 -110.53357697]
[53.48143768 -125.24930573]
[50.57500839 -139.96504211]
[47.66857910 -154.68077087]
[44.60290527 -169.36415100]
[41.37834930 -184.01345825]
[38.15379333 -198.66276550]
[34.92923355 -213.31207275]
[20.86453056 -219.59619141]
[13.28557205 -232.80273438]
[14.91706276 -247.76275635]
[24.92498589 -258.76184082]
[21.70042992 -273.41113281]
[18.47587395 -288.06045532]
[4.20176077 -294.14562988]
[-3.74055982 -307.47601318]
[-2.29710412 -322.92581177]
[7.97708941 -334.55422974]
[23.13138390 -337.88995361]
[37.33864594 -331.65029907]
[45.13588715 -318.23452759]
[43.52491760 -302.80130005]
[33.12518311 -291.28500366]
[36.34973907 -276.63568115]
[39.57429504 -261.98638916]
[53.27562714 -256.20611572]
[61.03787994 -243.31381226]
[59.70468521 -228.14556885]
[49.57854462 -216.53662109]
[52.80310059 -201.88731384]
[56.02765656 -187.23800659]
[59.25221252 -172.58869934]
[63.79555511 -166.68872070]
[62.38430786 -157.58718872]
[65.29073334 -142.87145996]
[68.19716644 -128.15573120]
[71.10359955 -113.44001007]
[74.01002502 -98.72428131]
[76.91645813 -84.00855255]
[79.82289124 -69.29282379]
[99.10494232 -65.27224731]
[114.65221405 -53.17906189]
[127.74956512 -60.49065399]
[140.84692383 -67.80223846]
[153.94427490 -75.11383057]
[167.04162598 -82.42542267]
[177.92445374 -95.42543793]
[193.42909241 -88.56668854]
[191.13049316 -71.76927948]
[174.35321045 -69.32807159]
[161.25585938 -62.01647949]
[148.15850830 -54.70488739]
[135.06115723 -47.39329910]
[121.96380615 -40.08171082]
[123.81533813 -17.32014275]
[113.88999939 3.37059760]
[94.79423523 16.29722595]
[97.06047058 31.12504387]
[99.32670593 45.95286179]
[101.59294128 60.78067780]
[103.85917664 75.60849762]
[111.97534180 76.16948700]
[120.03165436 79.52313232]
[127.05173492 85.65273285]
[132.07603455 94.19966888]
[134.28054810 104.47644806]
[133.08775330 115.52025604]
[145.31781006 124.20505524]
[157.54785156 132.88986206]
[169.77790833 141.57466125]
[182.00796509 150.25946045]
[198.00202942 149.00671387]
[208.84786987 160.82818604]
[206.22549438 176.65545654]
[192.14656067 184.34719849]
[177.41120911 178.00297546]
[173.32316589 162.48951721]
[161.09310913 153.80471802]
[148.86305237 145.11990356]
[136.63299561 136.43510437]
[124.40294647 127.75030518]
[117.24533844 129.99052429]
[121.72554016 144.30583191]
[107.41017151 148.78579712]
[102.93011475 134.47097778]
[95.77249908 136.71119690]
[90.67614746 150.81889343]
[85.57978821 164.92658997]
[80.48343658 179.03428650]
[75.38708496 193.14198303]
[77.97541046 208.75003052]
[66.37419891 218.09140015]
[61.27784348 232.19909668]
[73.57293701 240.95884705]
[83.04785156 252.71165466]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 142]
[20 141]
[22 139]
[23 138]
[24 137]
[25 136]
[26 135]
[28 110]
[29 109]
[30 108]
[31 107]
[32 106]
[47 89]
[48 88]
[49 87]
[50 86]
[51 85]
[52 84]
[53 83]
[54 81]
[55 80]
[56 79]
[57 78]
[61 74]
[62 73]
[63 72]
[91 103]
[92 102]
[93 101]
[94 100]
[95 99]
[116 130]
[117 129]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
