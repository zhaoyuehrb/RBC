%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:46:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCUUAAUGACGGAAGGAGCAUGGCGUGGAGACACCUGAAAAAGCGGGCCCAGGAUGCUGUGAUCAUCCUGGGGGGAGGAGGACUUCUCUUCGCCUCCUACCUGAUGGCCACGGGAGAUG\
) } def
/len { sequence length } bind def

/coor [
[141.02900696 469.29925537]
[152.92419434 459.73541260]
[149.47888184 445.13644409]
[146.03356934 430.53747559]
[142.58825684 415.93850708]
[130.75781250 414.11184692]
[120.23020172 408.34106445]
[112.28062439 399.29806519]
[107.88127136 388.05267334]
[107.58243561 375.94613647]
[111.44379425 364.43121338]
[119.02438354 354.89776611]
[129.43286133 348.50500488]
[127.12450409 333.68368530]
[117.52075958 322.29873657]
[123.04217529 307.47225952]
[120.73381805 292.65093994]
[118.42546082 277.82962036]
[116.11710358 263.00830078]
[113.80303955 261.23248291]
[112.09754181 258.37872314]
[111.43611908 254.69117737]
[112.15103149 250.57472229]
[114.41599274 246.55162048]
[113.64381409 231.57150269]
[112.87163544 216.59140015]
[112.09944916 201.61128235]
[103.71722412 189.29919434]
[110.73384857 175.11901855]
[109.96166992 160.13890076]
[109.18949127 145.15879822]
[108.41730499 130.17868042]
[107.64512634 115.19857025]
[95.31439972 120.37723541]
[80.29394531 115.06507111]
[71.32135010 98.87056732]
[59.09592819 90.17925262]
[46.87050247 81.48793793]
[34.64507675 72.79662323]
[19.10537529 75.67640686]
[6.12833452 66.65576172]
[3.41300511 51.08648300]
[12.57034397 38.20553970]
[28.16746330 35.65496826]
[40.95087051 44.94798279]
[43.33639526 60.57119370]
[55.56182098 69.26251221]
[67.78724670 77.95382690]
[80.01267242 86.64514160]
[93.51520538 80.11204529]
[94.28739166 65.13192749]
[95.05957031 50.15181732]
[95.83175659 35.17170715]
[96.60393524 20.19159698]
[97.37611389 5.21148491]
[98.14830017 -9.76862621]
[98.92047882 -24.74873734]
[99.69265747 -39.72884750]
[88.12438965 -50.25069046]
[86.07713318 -65.75368500]
[94.51753235 -78.91778564]
[109.46030426 -83.52731323]
[123.84991455 -77.40578461]
[130.89202881 -63.44360352]
[127.26159668 -48.23328018]
[114.67276764 -38.95666885]
[113.90058899 -23.97655678]
[113.12841034 -8.99644470]
[112.35622406 5.98366642]
[111.58404541 20.96377754]
[110.81186676 35.94388962]
[110.03968048 50.92399979]
[109.26750183 65.90411377]
[108.49532318 80.88422394]
[121.45339203 88.43990326]
[134.11003113 80.38946533]
[134.93395996 64.89427948]
[144.73449707 52.86393738]
[159.74313354 48.92435455]
[174.18875122 54.59037781]
[182.51670837 67.68331146]
[181.52473450 83.16864014]
[171.59426880 95.09195709]
[156.54376221 98.86849213]
[142.16047668 93.04609680]
[129.50382996 101.09654236]
[122.62523651 114.42639160]
[123.39741516 129.40649414]
[124.16960144 144.38661194]
[124.94178009 159.36672974]
[125.71395874 174.34683228]
[134.15141296 187.73040771]
[127.07955933 200.83911133]
[127.85174561 215.81921387]
[128.62393188 230.79933167]
[129.39610291 245.77943420]
[130.93841553 260.69995117]
[133.24678040 275.52124023]
[135.55514526 290.34255981]
[137.86349487 305.16387939]
[147.63233948 317.60897827]
[141.94581604 331.37533569]
[144.25418091 346.19665527]
[161.58297729 352.15463257]
[173.51934814 365.94747925]
[176.89669800 383.78738403]
[170.88377380 400.83074951]
[157.18721008 412.49319458]
[160.63253784 427.09216309]
[164.07785034 441.69113159]
[167.52316284 456.29010010]
[182.43919373 459.52655029]
[194.46855164 468.92111206]
[201.22277832 482.60842896]
[201.36083984 497.87094116]
[194.85530090 511.67819214]
[182.99786377 521.28881836]
[168.14280701 524.79455566]
[153.23963928 521.49938965]
[141.24737549 512.05755615]
[134.54708862 498.34371948]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 111]
[3 110]
[4 109]
[5 108]
[13 103]
[14 102]
[16 100]
[17 99]
[18 98]
[19 97]
[24 96]
[25 95]
[26 94]
[27 93]
[29 91]
[30 90]
[31 89]
[32 88]
[33 87]
[36 49]
[37 48]
[38 47]
[39 46]
[50 74]
[51 73]
[52 72]
[53 71]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[75 86]
[76 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
