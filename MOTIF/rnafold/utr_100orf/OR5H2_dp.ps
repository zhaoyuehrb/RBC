%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:28:28 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (OR5H2)
} def

/sequence { (\
AUGUCGAAUGAGGACAUGGAACAGGAUAAUACAACAUUGCUGACAGAGUUUGUUCUCACAGGACUUACAUAUCAGCCAGAGUGGAAAAUGCCCCUGUUCU\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 17 0.916747527 ubox
2 16 0.979584770 ubox
3 15 0.999348607 ubox
4 11 0.009972473 ubox
4 13 0.043094270 ubox
4 14 0.998367527 ubox
5 10 0.011478479 ubox
5 12 0.081370854 ubox
5 13 0.995994832 ubox
8 17 0.014720251 ubox
9 16 0.015274778 ubox
10 15 0.015357592 ubox
18 99 0.034473488 ubox
18 100 0.885088022 ubox
19 98 0.023774032 ubox
19 99 0.998635374 ubox
20 97 0.016828968 ubox
20 98 0.999201247 ubox
21 97 0.999354780 ubox
22 96 0.999973386 ubox
23 95 0.999692750 ubox
24 92 0.025427857 ubox
24 93 0.043503174 ubox
24 94 0.998694521 ubox
25 91 0.029031867 ubox
25 92 0.060993123 ubox
25 93 0.996005694 ubox
26 37 0.009409896 ubox
26 89 0.094085198 ubox
27 36 0.009951741 ubox
27 39 0.006087751 ubox
27 88 0.090918375 ubox
27 90 0.126629358 ubox
28 38 0.018465853 ubox
28 89 0.123682473 ubox
29 37 0.019966907 ubox
29 89 0.550072505 ubox
30 36 0.019511654 ubox
30 83 0.028133347 ubox
30 88 0.523795191 ubox
30 90 0.033134730 ubox
31 38 0.004138518 ubox
31 53 0.003536273 ubox
31 82 0.034536911 ubox
31 89 0.032938239 ubox
32 39 0.009267649 ubox
32 52 0.004164043 ubox
32 81 0.034853324 ubox
32 83 0.195161303 ubox
32 90 0.013304237 ubox
33 38 0.009372910 ubox
33 50 0.003810348 ubox
33 51 0.003624832 ubox
33 54 0.004331465 ubox
33 82 0.167641793 ubox
33 89 0.012523188 ubox
34 49 0.004604121 ubox
34 53 0.005279048 ubox
34 82 0.363776700 ubox
35 48 0.005073820 ubox
35 52 0.005515871 ubox
35 81 0.380579469 ubox
35 83 0.905149186 ubox
35 90 0.010860985 ubox
36 51 0.005429041 ubox
36 82 0.904508463 ubox
36 89 0.010894783 ubox
37 46 0.005034223 ubox
37 79 0.365832242 ubox
37 80 0.108691160 ubox
37 81 0.890696941 ubox
37 88 0.010810562 ubox
38 45 0.005340656 ubox
38 78 0.412530928 ubox
38 79 0.110679317 ubox
38 80 0.831771058 ubox
38 87 0.010456003 ubox
39 44 0.005355243 ubox
39 49 0.006083721 ubox
39 76 0.951307001 ubox
39 77 0.299951312 ubox
40 48 0.006183962 ubox
40 75 0.998280537 ubox
40 79 0.056462967 ubox
41 47 0.006166961 ubox
41 74 0.998079661 ubox
41 78 0.056522791 ubox
42 73 0.998154248 ubox
42 77 0.056295774 ubox
43 72 0.979129195 ubox
45 51 0.003185410 ubox
45 56 0.003481478 ubox
45 65 0.003389748 ubox
45 66 0.006748819 ubox
46 55 0.003704384 ubox
46 57 0.009217404 ubox
46 64 0.003455979 ubox
46 65 0.004835122 ubox
46 66 0.222261304 ubox
46 73 0.053361314 ubox
47 54 0.003623527 ubox
47 56 0.009242477 ubox
47 65 0.230438651 ubox
47 66 0.014363527 ubox
47 72 0.053144268 ubox
48 55 0.009226185 ubox
48 64 0.231268352 ubox
48 65 0.010569519 ubox
48 68 0.954087662 ubox
48 70 0.011781479 ubox
48 72 0.004102627 ubox
49 62 0.086283694 ubox
49 63 0.214119732 ubox
49 67 0.954490559 ubox
49 69 0.011861216 ubox
49 71 0.006594144 ubox
50 61 0.154893374 ubox
50 62 0.168561428 ubox
50 63 0.003249664 ubox
51 58 0.030000665 ubox
51 60 0.203140542 ubox
51 61 0.099275614 ubox
51 62 0.003901972 ubox
51 67 0.004212296 ubox
51 69 0.011125383 ubox
52 57 0.032596708 ubox
52 59 0.215712179 ubox
52 64 0.972227715 ubox
52 68 0.011238843 ubox
53 58 0.197337591 ubox
53 61 0.004138967 ubox
53 62 0.003895787 ubox
53 63 0.971068438 ubox
53 67 0.011005303 ubox
54 60 0.005367869 ubox
54 61 0.005401663 ubox
54 62 0.969355671 ubox
54 63 0.050090909 ubox
54 85 0.004618889 ubox
55 61 0.968742740 ubox
55 62 0.068982169 ubox
55 81 0.003421269 ubox
55 84 0.004894435 ubox
56 60 0.872781393 ubox
56 61 0.063614732 ubox
56 62 0.004376666 ubox
56 63 0.007298091 ubox
56 80 0.003467750 ubox
56 84 0.003794822 ubox
57 61 0.010322717 ubox
57 62 0.008256102 ubox
57 79 0.003471348 ubox
57 83 0.006652247 ubox
58 82 0.006720367 ubox
59 81 0.006718025 ubox
61 77 0.007845475 ubox
62 76 0.007876053 ubox
64 75 0.007771117 ubox
65 74 0.007663620 ubox
76 84 0.020063035 ubox
77 83 0.026424576 ubox
77 90 0.011284492 ubox
78 82 0.021518191 ubox
78 89 0.011144381 ubox
81 89 0.009411469 ubox
81 91 0.030985336 ubox
82 88 0.010101566 ubox
82 90 0.030886045 ubox
83 89 0.027456721 ubox
83 92 0.190878218 ubox
83 93 0.009606806 ubox
84 91 0.192521573 ubox
84 92 0.022895587 ubox
1 17 0.9500000 lbox
2 16 0.9500000 lbox
3 15 0.9500000 lbox
4 14 0.9500000 lbox
5 13 0.9500000 lbox
18 100 0.9500000 lbox
19 99 0.9500000 lbox
20 98 0.9500000 lbox
21 97 0.9500000 lbox
22 96 0.9500000 lbox
23 95 0.9500000 lbox
24 94 0.9500000 lbox
25 93 0.9500000 lbox
35 83 0.9500000 lbox
36 82 0.9500000 lbox
37 81 0.9500000 lbox
38 80 0.9500000 lbox
39 76 0.9500000 lbox
40 75 0.9500000 lbox
41 74 0.9500000 lbox
42 73 0.9500000 lbox
43 72 0.9500000 lbox
48 68 0.9500000 lbox
49 67 0.9500000 lbox
52 64 0.9500000 lbox
53 63 0.9500000 lbox
54 62 0.9500000 lbox
55 61 0.9500000 lbox
56 60 0.9500000 lbox
showpage
end
%%EOF
