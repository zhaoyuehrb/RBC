%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:27:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGGAGGGCCCGGCCUGCGAGAGCCUCAGUGGGAGCCGGCUCAGCCCUCGGCCACCAUGUCGGCGCCGUCGGAGGAGGAGGAGUACGCGCGGCUGGUGAUGGAGGCGCAGCCGGAGUGGCUGCGCGCCGAGGUGAAGCGGCUGUCCCACGAGCUGG\
) } def
/len { sequence length } bind def

/coor [
[-33.65854645 410.43234253]
[-42.08486176 422.84188843]
[-50.51117706 435.25146484]
[-58.93749237 447.66101074]
[-67.36380768 460.07055664]
[-66.67491913 483.91534424]
[-87.57070160 493.85995483]
[-94.46015930 507.18417358]
[-101.34961700 520.50842285]
[-108.23908234 533.83264160]
[-110.14308929 550.67938232]
[-126.85848999 553.51336670]
[-134.20904541 538.23577881]
[-121.56331635 526.94317627]
[-114.67385864 513.61895752]
[-107.78440094 500.29473877]
[-100.89494324 486.97048950]
[-104.59759521 481.45162964]
[-106.39843750 475.00057983]
[-106.08484650 468.25839233]
[-103.65599060 461.90560913]
[-99.32618713 456.59359741]
[-93.50634003 452.87783813]
[-86.76510620 451.15991211]
[-79.77336884 451.64425659]
[-71.34705353 439.23468018]
[-62.92073822 426.82513428]
[-54.49442291 414.41558838]
[-46.06810379 402.00601196]
[-38.65436935 388.96621704]
[-32.30007935 375.37860107]
[-25.94579315 361.79098511]
[-19.59150505 348.20339966]
[-13.23721886 334.61578369]
[-6.88293171 321.02816772]
[-0.80005175 307.31692505]
[5.00901604 293.48742676]
[10.81808376 279.65795898]
[16.62715149 265.82846069]
[10.77549171 252.17951965]
[16.46970558 238.07170105]
[30.82565117 232.02647400]
[36.63471985 218.19699097]
[42.44378662 204.36750793]
[41.47607422 199.63992310]
[43.50668335 194.25839233]
[48.76854706 190.11102295]
[55.12283325 176.52342224]
[61.47712326 162.93582153]
[67.83140564 149.34820557]
[74.18569946 135.76060486]
[80.53998566 122.17299652]
[86.89427185 108.58539581]
[73.09276581 73.82820892]
[71.60395813 58.90227890]
[70.11515045 43.97634506]
[68.62634277 29.05041313]
[67.13753510 14.12448025]
[63.15275192 5.84296846]
[65.77053833 -1.11256969]
[64.57878876 -16.06515312]
[63.38703537 -31.01773453]
[62.19528198 -45.97031784]
[60.85493851 -60.91031265]
[59.36613083 -75.83624268]
[57.87732315 -90.76217651]
[55.79629135 -105.61711884]
[53.12631989 -120.37758636]
[43.05617905 -132.58015442]
[48.40449142 -146.48139954]
[45.73452377 -161.24186707]
[32.60726547 -170.04248047]
[29.62986755 -185.56376648]
[38.56876755 -198.59724426]
[54.12067795 -201.41038513]
[67.05892181 -192.33418274]
[69.70747375 -176.75340271]
[60.49498749 -163.91183472]
[63.16495514 -149.15138245]
[73.04412842 -138.00456238]
[67.88678741 -123.04755402]
[70.55675507 -108.28708649]
[72.84090424 -106.57395935]
[74.56461334 -103.82820892]
[75.32173920 -100.26592255]
[74.79462433 -96.24937439]
[72.80325317 -92.25098419]
[74.29206085 -77.32505035]
[75.78086853 -62.39912033]
[79.59492493 -56.02061844]
[77.14786530 -47.16207123]
[78.33961487 -32.20948792]
[79.53137207 -17.25690460]
[80.72312164 -2.30432224]
[82.06346893 12.63567352]
[83.55227661 27.56160545]
[85.04108429 42.48753738]
[86.52989197 57.41347122]
[88.01869965 72.33940125]
[93.82218170 77.09014130]
[96.24713135 62.28745270]
[110.27907562 56.98608780]
[121.88622284 66.48735809]
[119.46155548 81.29009247]
[105.42915344 86.59162903]
[111.23264313 91.34236908]
[126.15857697 89.85356140]
[141.08450317 88.36475372]
[156.01043701 86.87594604]
[170.93637085 85.38713837]
[185.86230469 83.89833069]
[200.78823853 82.40952301]
[215.71417236 80.92071533]
[226.94807434 69.46738434]
[242.89149475 71.25263977]
[251.31398010 84.90698242]
[245.75454712 99.95597839]
[230.47789001 104.85531616]
[217.20297241 95.84664917]
[202.27703857 97.33545685]
[187.35110474 98.82426453]
[172.42518616 100.31307220]
[157.49925232 101.80187988]
[142.57331848 103.29068756]
[127.64738464 104.77949524]
[112.72145081 106.26830292]
[100.48188019 114.93968201]
[94.12758636 128.52728271]
[87.77330017 142.11489868]
[81.41901398 155.70249939]
[75.06472778 169.29010010]
[68.71044159 182.87771606]
[62.35615540 196.46531677]
[56.27327347 210.17657471]
[50.46420670 224.00605774]
[44.65513992 237.83554077]
[50.38800812 252.31906128]
[44.29977798 266.26138306]
[30.45663834 271.63751221]
[24.64757156 285.46701050]
[18.83850288 299.29650879]
[13.02943611 313.12597656]
[13.48594379 319.81024170]
[10.85898209 324.92721558]
[6.70467424 327.38247681]
[0.35038716 340.97006226]
[-6.00390005 354.55767822]
[-12.35818768 368.14529419]
[-18.71247482 381.73287964]
[-25.06676102 395.32049561]
[-11.16236210 389.69308472]
[3.43052864 393.16403198]
[13.31227112 404.44903564]
[14.82643795 419.37243652]
[7.41275835 432.41226196]
[-6.18556833 438.74356079]
[-20.93690872 436.02365112]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[4 26]
[5 25]
[7 17]
[8 16]
[9 15]
[10 14]
[30 150]
[31 149]
[32 148]
[33 147]
[34 146]
[35 145]
[36 142]
[37 141]
[38 140]
[39 139]
[42 136]
[43 135]
[44 134]
[47 133]
[48 132]
[49 131]
[50 130]
[51 129]
[52 128]
[53 127]
[54 99]
[55 98]
[56 97]
[57 96]
[58 95]
[60 94]
[61 93]
[62 92]
[63 91]
[64 89]
[65 88]
[66 87]
[67 82]
[68 81]
[70 79]
[71 78]
[106 126]
[107 125]
[108 124]
[109 123]
[110 122]
[111 121]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
