%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:53:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGAAGUACGAGCGGAUCCGAGUGGUGGGGAGAGGUGCCUUCGGGAUUGUGCACCUGUGCCUGCGAAAGGCUGACCAGAAGCUGGUGAUCAUCAAGC\
) } def
/len { sequence length } bind def

/coor [
[16.04001808 241.03430176]
[4.55199671 241.64131165]
[-6.25559282 237.85359192]
[-16.77939606 248.54234314]
[-27.30319786 259.23110962]
[-24.90489197 274.44802856]
[-31.84552383 288.00091553]
[-45.27686691 294.78787231]
[-59.95349884 292.39318848]
[-70.47730255 303.08193970]
[-74.07244110 319.08215332]
[-89.80510712 323.70983887]
[-101.49087524 312.20440674]
[-97.10842896 296.40167236]
[-81.16606140 292.55813599]
[-70.64225769 281.86938477]
[-73.26491547 267.23178101]
[-66.68764496 253.69650269]
[-53.24432373 246.54594421]
[-37.99195862 248.70730591]
[-27.46815491 238.01853943]
[-16.94435120 227.32978821]
[-21.16957092 209.31237793]
[-13.81499577 192.17068481]
[2.40655661 182.66909790]
[21.24674797 184.66925049]
[30.72879410 173.04638672]
[40.21083832 161.42353821]
[49.69288635 149.80067444]
[59.17493439 138.17782593]
[68.65698242 126.55496979]
[61.03406906 113.00798035]
[58.99044037 97.59846497]
[62.81871033 82.53280640]
[71.97072601 69.96816254]
[85.13607788 61.70359039]
[82.35285950 46.96406174]
[79.56964874 32.22453308]
[76.78643036 17.48500252]
[74.00321198 2.74547434]
[71.21999359 -11.99405479]
[56.46515274 -15.90011787]
[44.87185669 -25.82777023]
[38.74197006 -39.80586624]
[39.29258347 -55.05905151]
[46.41437149 -68.55878448]
[58.69329834 -77.62469482]
[73.69137573 -80.45673370]
[88.43072510 -76.49259186]
[99.98483276 -66.51936340]
[106.05963135 -52.51723862]
[105.44895172 -37.26634216]
[98.27406311 -23.79475403]
[85.95952606 -14.77727032]
[88.74274445 -0.03774205]
[91.52595520 14.70178699]
[94.30917358 29.44131470]
[97.09239197 44.18084335]
[99.87561035 58.92037201]
[112.12700653 60.75096130]
[123.27571106 66.15044403]
[132.30796814 74.62783813]
[145.59812927 67.67288208]
[158.88830566 60.71792984]
[172.17848206 53.76297760]
[178.32261658 38.94309235]
[193.77931213 34.64538193]
[206.69149780 44.16667938]
[207.15405273 60.20306396]
[194.81213379 70.45278931]
[179.13342285 67.05314636]
[165.84326172 74.00810242]
[152.55308533 80.96305084]
[139.26292419 87.91800690]
[140.83209229 95.49537659]
[140.95243835 103.23257446]
[139.61967468 110.85507965]
[153.11972046 117.39334106]
[166.61975098 123.93161011]
[180.11979675 130.46987915]
[193.61982727 137.00814819]
[210.51060486 138.47045898]
[213.78126526 155.10592651]
[198.70132446 162.85392761]
[187.08157349 150.50817871]
[173.58152771 143.96990967]
[160.08148193 137.43165588]
[146.58145142 130.89338684]
[133.08140564 124.35511780]
[118.13468933 136.86033630]
[99.10675049 141.07009888]
[80.27983856 136.03701782]
[70.79779053 147.65986633]
[61.31574249 159.28273010]
[51.83369827 170.90557861]
[42.35165024 182.52844238]
[32.86960220 194.15129089]
[37.78841400 204.83731079]
[38.27444458 216.53901672]
[34.29418564 227.49847412]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 22]
[4 21]
[5 20]
[9 16]
[10 15]
[26 97]
[27 96]
[28 95]
[29 94]
[30 93]
[31 92]
[36 59]
[37 58]
[38 57]
[39 56]
[40 55]
[41 54]
[62 74]
[63 73]
[64 72]
[65 71]
[77 89]
[78 88]
[79 87]
[80 86]
[81 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
