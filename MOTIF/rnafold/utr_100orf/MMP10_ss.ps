%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:42:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGCCCAGUAGACAAAGAAGGUAAGGGCAGUGAGAAUGAUGCAUCUUGCAUUCCUUGUGCUGUUGUGUCUGCCAGUCUGCUCUGCCUAUCCUCUGAGUGGGGCAGCAAAAGAGGAGGACUCCAACAAGGAUCUUG\
) } def
/len { sequence length } bind def

/coor [
[187.29695129 291.37063599]
[177.07954407 275.90997314]
[173.46105957 257.70205688]
[177.00279236 239.44622803]
[187.20265198 223.85841370]
[178.27574158 211.80393982]
[169.34881592 199.74948120]
[160.42190552 187.69500732]
[142.24365234 186.15425110]
[130.69865417 171.62141418]
[133.39987183 152.93820190]
[123.93355560 141.30253601]
[114.46723175 129.66685486]
[105.00091553 118.03118896]
[96.16401672 118.31442261]
[88.18354034 114.50876617]
[82.84121704 107.46385956]
[81.32978821 98.75256348]
[83.98668671 90.31977081]
[75.33647919 78.06522369]
[66.54734802 65.90992737]
[57.62043381 53.85546494]
[48.69351959 41.80099869]
[39.76660156 29.74653053]
[30.83968735 17.69206429]
[23.14907074 12.60178089]
[21.85047531 5.26005793]
[13.20027065 -6.99449062]
[4.55006552 -19.24903870]
[-4.10013962 -31.50358772]
[-12.75034428 -43.75813675]
[-21.40054893 -56.01268387]
[-36.02406311 -52.09118271]
[-51.07865143 -53.40699387]
[-64.74900055 -59.78208160]
[-75.39335632 -70.42951965]
[-81.74064636 -84.05058289]
[-83.04229736 -98.99314117]
[-79.16043091 -113.45205688]
[-70.58221436 -125.68723297]
[-79.23242188 -137.94178772]
[-87.88262939 -150.19633484]
[-96.53282928 -162.45088196]
[-105.18303680 -174.70542908]
[-113.83324432 -186.95997620]
[-127.64051819 -186.12791443]
[-139.94842529 -192.19898987]
[-147.56987000 -203.48123169]
[-148.59095764 -216.94931030]
[-142.85055542 -229.05549622]
[-151.21957397 -241.50378418]
[-159.58857727 -253.95205688]
[-167.95759583 -266.40032959]
[-183.36135864 -270.88400269]
[-189.32646179 -285.77688599]
[-181.27697754 -299.65438843]
[-165.38777161 -301.87091064]
[-153.84770203 -290.72613525]
[-155.50930786 -274.76934814]
[-147.14030457 -262.32107544]
[-138.77128601 -249.87278748]
[-130.40228271 -237.42451477]
[-114.02608490 -237.37112427]
[-100.75719452 -227.49328613]
[-95.91246796 -211.50355530]
[-101.57868958 -195.61018372]
[-92.92848969 -183.35563660]
[-84.27828217 -171.10108948]
[-75.62807465 -158.84654236]
[-66.97787476 -146.59197998]
[-58.32766724 -134.33743286]
[-43.92627335 -138.32304382]
[-29.00224495 -137.13877869]
[-15.35834694 -130.90832520]
[-4.64932966 -120.36610413]
[1.81875801 -106.77073669]
[3.24783015 -91.75481415]
[-0.55380690 -77.12882233]
[-9.14600086 -64.66288757]
[-0.49579588 -52.40834045]
[8.15440941 -40.15379333]
[16.80461311 -27.89924431]
[25.45481873 -15.64469528]
[34.10502243 -3.39014697]
[42.89415359 8.76514816]
[51.82106781 20.81961441]
[60.74798584 32.87408066]
[69.67490387 44.92854691]
[78.60181427 56.98301315]
[85.16690063 60.51669693]
[87.59102631 69.41502380]
[96.24123383 81.66957092]
[114.90969086 88.69362640]
[116.63658905 108.56487274]
[126.10290527 120.20053864]
[135.56922913 131.83621216]
[145.03553772 143.47187805]
[156.97514343 142.36325073]
[167.84013367 147.14460754]
[174.94247437 156.50526428]
[176.58732605 168.01805115]
[172.47636414 178.76809692]
[181.40328979 190.82255554]
[190.33020020 202.87702942]
[199.25711060 214.93148804]
[210.34587097 210.81964111]
[222.08924866 209.52374268]
[233.78414917 211.11557007]
[244.73181152 215.49415588]
[254.27954102 222.39221191]
[261.85961914 231.39245605]
[267.02304077 241.95277405]
[269.46615601 253.43896484]
[269.04849243 265.16275024]
[265.80081177 276.42303467]
[259.92294312 286.54794312]
[251.77148438 294.93466187]
[259.27148438 307.92504883]
[266.77148438 320.91543579]
[274.27148438 333.90582275]
[281.33416748 339.83666992]
[281.79049683 347.27838135]
[288.99285889 360.43609619]
[296.19519043 373.59384155]
[311.12744141 379.45968628]
[315.71353149 394.83328247]
[306.43545532 407.92129517]
[290.41052246 408.68377686]
[279.93170166 396.53576660]
[283.03747559 380.79620361]
[275.83511353 367.63845825]
[268.63275146 354.48071289]
[261.28109741 341.40582275]
[253.78109741 328.41543579]
[246.28109741 315.42504883]
[238.78109741 302.43466187]
[220.63255310 305.67309570]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 105]
[6 104]
[7 103]
[8 102]
[11 97]
[12 96]
[13 95]
[14 94]
[19 92]
[20 91]
[21 89]
[22 88]
[23 87]
[24 86]
[25 85]
[27 84]
[28 83]
[29 82]
[30 81]
[31 80]
[32 79]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[50 62]
[51 61]
[52 60]
[53 59]
[117 136]
[118 135]
[119 134]
[120 133]
[122 132]
[123 131]
[124 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
