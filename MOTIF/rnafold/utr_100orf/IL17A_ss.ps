%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:07:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGCACAAACUCAUCCAUCCCCAGUUGAUUGGAAGAAACAACGAUGACUCCUGGGAAGACCUCAUUGGUGUCACUGCUACUGCUGCUGAGCCUGGAGGCCAUAGUGAAGGCAGGAAUCACAAUCCCACGAAAUCCAGGAUGCC\
) } def
/len { sequence length } bind def

/coor [
[102.38266754 190.24966431]
[86.01767731 189.19177246]
[78.99489594 174.37245178]
[88.53875732 161.03652954]
[89.50638580 146.06776428]
[90.47400665 131.09901428]
[91.44163513 116.13024902]
[85.91508484 111.06002045]
[77.88951111 123.73243713]
[76.91936493 138.70103455]
[66.01178741 148.99786377]
[51.01216888 149.10484314]
[39.95883560 138.96463013]
[38.77529144 124.01139832]
[48.09579849 112.25860596]
[62.92639923 110.00480652]
[74.86198425 100.91956329]
[69.33543396 95.84932709]
[54.50527191 98.10015869]
[39.67510605 100.35099030]
[24.84494400 102.60182190]
[21.43455315 105.55029297]
[17.63804817 107.06112671]
[13.96970940 107.19393158]
[10.86833477 106.17387390]
[8.64847088 104.35113525]
[-6.32028675 105.31876373]
[-21.28904343 106.28639221]
[-36.25780106 107.25401306]
[-49.53010941 115.86543274]
[-62.72999191 108.96526337]
[-77.69875336 109.93288422]
[-89.32506561 120.98767853]
[-105.19656372 118.64776611]
[-113.13798523 104.70813751]
[-107.05735779 89.86207581]
[-91.61921692 85.49821472]
[-78.66637421 94.96412659]
[-63.69762039 93.99650574]
[-51.49597931 85.45429993]
[-37.22542953 92.28525543]
[-22.25667191 91.31763458]
[-7.28791380 90.35000610]
[7.68084383 89.38237762]
[22.59411240 87.77165985]
[37.42427444 85.52082825]
[52.25444031 83.26999664]
[67.08460236 81.01916504]
[86.25176239 74.78420258]
[100.95981598 80.57926941]
[105.72428894 91.59559631]
[118.26316833 83.36295319]
[130.80204773 75.13031006]
[143.34094238 66.89766693]
[155.87982178 58.66501999]
[168.41870117 50.43237686]
[180.95758057 42.19972992]
[176.72283936 26.99359703]
[177.38206482 11.24198246]
[182.85905457 -3.52079391]
[192.60894775 -15.86042404]
[205.67234802 -24.58195877]
[220.76974487 -28.84552574]
[236.42678833 -28.24719238]
[251.11834717 -22.85720062]
[263.41702271 -13.21197224]
[275.77587891 -21.71249771]
[288.13470459 -30.21302414]
[300.49356079 -38.71355057]
[303.49243164 -53.99898529]
[316.14715576 -62.44367218]
[330.70098877 -59.49050522]
[343.05984497 -67.99102783]
[346.05871582 -83.27646637]
[358.71343994 -91.72115326]
[373.26727295 -88.76798248]
[385.62612915 -97.26850891]
[397.98498535 -105.76903534]
[410.34381104 -114.26956177]
[422.70266724 -122.77008820]
[425.70153809 -138.05552673]
[438.35626221 -146.50021362]
[452.91009521 -143.54704285]
[465.26895142 -152.04756165]
[477.62777710 -160.54809570]
[489.98663330 -169.04861450]
[502.34548950 -177.54914856]
[507.69192505 -185.04676819]
[515.06292725 -186.09625244]
[527.60180664 -194.32890320]
[533.10833740 -201.70974731]
[540.50024414 -202.60038757]
[553.21337891 -210.56134033]
[565.92645264 -218.52229309]
[573.12939453 -233.25491333]
[589.50604248 -234.11323547]
[598.20959473 -220.21429443]
[590.28649902 -205.85612488]
[573.88745117 -205.80918884]
[561.17431641 -197.84823608]
[548.46118164 -189.88728333]
[535.83447266 -181.79000854]
[523.29559326 -173.55737305]
[510.84600830 -165.19029236]
[498.48715210 -156.68977356]
[486.12832642 -148.18925476]
[473.76947021 -139.68872070]
[461.41061401 -131.18820190]
[458.96252441 -116.54093170]
[446.54998779 -107.74413300]
[431.20318604 -110.41123962]
[418.84432983 -101.91071320]
[406.48550415 -93.41018677]
[394.12664795 -84.90966034]
[381.76782227 -76.40913391]
[379.31970215 -61.76187134]
[366.90716553 -52.96507263]
[351.56036377 -55.63218307]
[339.20153809 -47.13165665]
[336.75341797 -32.48439407]
[324.34088135 -23.68759537]
[308.99407959 -26.35470581]
[296.63525391 -17.85417938]
[284.27639771 -9.35365391]
[271.91754150 -0.85312718]
[276.31396484 12.74389362]
[276.69067383 27.04500580]
[273.00793457 40.88544846]
[265.55706787 53.13542938]
[254.93730164 62.79235840]
[242.00773621 69.06289673]
[227.81767273 71.42811584]
[213.52157593 69.68644714]
[200.28515625 63.97084045]
[189.19023132 54.73861313]
[176.65133667 62.97125626]
[164.11245728 71.20390320]
[151.57357788 79.43654633]
[139.03469849 87.66918945]
[126.49581909 95.90183258]
[113.95693207 104.13447571]
[106.41039276 117.09787750]
[105.44276428 132.06663513]
[104.47514343 147.03540039]
[103.50751495 162.00415039]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 145]
[5 144]
[6 143]
[7 142]
[18 48]
[19 47]
[20 46]
[21 45]
[26 44]
[27 43]
[28 42]
[29 41]
[31 39]
[32 38]
[51 141]
[52 140]
[53 139]
[54 138]
[55 137]
[56 136]
[57 135]
[66 125]
[67 124]
[68 123]
[69 122]
[72 119]
[73 118]
[76 115]
[77 114]
[78 113]
[79 112]
[80 111]
[83 108]
[84 107]
[85 106]
[86 105]
[87 104]
[89 103]
[90 102]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
