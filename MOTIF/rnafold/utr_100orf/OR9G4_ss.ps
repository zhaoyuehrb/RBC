%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:50:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUUUUCCCUUCUCAUGAUAGUCAGGCUUUCACCUCCGUGGACAUGGAAGUGGGAAAUUGCACCAUCCUGACUGAAUUCAUCUUGUUGGGUUUCUCAG\
) } def
/len { sequence length } bind def

/coor [
[89.28414154 357.98046875]
[95.33048248 342.14135742]
[95.33048248 327.14135742]
[95.33048248 312.14135742]
[82.36315918 304.81234741]
[74.75476074 291.89074707]
[74.63492584 276.79595947]
[82.13597107 263.58114624]
[95.33048248 255.84474182]
[95.33048248 240.84474182]
[95.33048248 225.84474182]
[80.86763763 219.24436951]
[70.66148376 206.97999573]
[66.77027893 191.44656372]
[70.01271820 175.70584106]
[79.79624939 162.88290405]
[94.22467041 155.54570007]
[93.75817108 140.55296326]
[93.29167175 125.56021118]
[92.82518005 110.56746674]
[91.65991974 95.61280060]
[89.79843903 80.72875214]
[87.93695831 65.84470367]
[86.07547760 50.96065521]
[84.21399689 36.07660675]
[82.35250854 21.19255829]
[80.49102783 6.30850983]
[78.62954712 -8.57553768]
[72.55837250 -16.75669479]
[73.69671631 -25.73358917]
[67.36919403 -39.33367920]
[61.04166794 -52.93376923]
[54.71414185 -66.53385925]
[48.38661957 -80.13394928]
[42.05909348 -93.73403168]
[29.22249794 -102.98240662]
[30.86888695 -117.78574371]
[24.54136086 -131.38583374]
[18.21383667 -144.98591614]
[11.88631058 -158.58601379]
[5.55878496 -172.18609619]
[-8.16990471 -181.15577698]
[-6.99623585 -197.51286316]
[7.87242174 -204.43060303]
[21.14046860 -194.79260254]
[19.15887451 -178.51362610]
[25.48639870 -164.91352844]
[31.81392479 -151.31344604]
[38.14144897 -137.71336365]
[44.46897507 -124.11326599]
[56.85298157 -115.83766174]
[55.65917969 -100.06156158]
[61.98670578 -86.46147156]
[68.31423187 -72.86138153]
[74.64175415 -59.26129532]
[80.96928406 -45.66120529]
[87.29680634 -32.06111526]
[91.80416107 -46.36788940]
[102.24635315 -57.13639450]
[116.40769958 -62.08171463]
[131.28338623 -60.15453339]
[143.71701050 -51.76376343]
[151.07034302 -38.68980408]
[151.78312683 -23.70674896]
[145.70411682 -9.99377728]
[134.12318420 -0.46057343]
[119.49762726 2.87006044]
[104.93077087 -0.70858580]
[93.51359558 -10.43701935]
[95.37507629 4.44702864]
[97.23655701 19.33107758]
[99.09803772 34.21512604]
[100.95952606 49.09917450]
[102.82100677 63.98321915]
[104.68248749 78.86727142]
[106.54396820 93.75131989]
[109.39570618 96.63713837]
[110.87999725 100.81646729]
[110.42875671 105.60974121]
[107.81791687 110.10096741]
[108.28441620 125.09371185]
[108.75091553 140.08645630]
[109.21741486 155.07920837]
[122.42633057 160.36248779]
[132.56982422 170.27516174]
[138.12149048 183.27890015]
[138.26385498 197.37388611]
[133.00854492 210.40634155]
[123.18943024 220.39765930]
[110.33048248 225.84474182]
[110.33048248 240.84474182]
[110.33048248 255.84474182]
[123.52499390 263.58114624]
[131.02603149 276.79595947]
[130.90620422 291.89074707]
[123.29780579 304.81234741]
[110.33048248 312.14135742]
[110.33048248 327.14135742]
[110.33048248 342.14135742]
[116.37682343 357.98046875]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 99]
[3 98]
[4 97]
[9 92]
[10 91]
[11 90]
[17 83]
[18 82]
[19 81]
[20 80]
[21 76]
[22 75]
[23 74]
[24 73]
[25 72]
[26 71]
[27 70]
[28 69]
[30 57]
[31 56]
[32 55]
[33 54]
[34 53]
[35 52]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
