%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:48:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCAUUGGCUGCGAGAGGCCGGUGCGGGCCGCACUCGCAGGGCCCGUGGCGGUUCAGGCGCCAGAGCUGGCCGAUCGGCGUUGGCCGCCGACAUGACGCCCGAGGACCCAGAGGAAACCCAGCCGCUUCUGGGGCCUCCUGGCGGCAGCGCGCCCCGCGGCCGCCGCGUCUUCCUCGCCGCCUUCGCCGCUG\
) } def
/len { sequence length } bind def

/coor [
[103.59934998 345.07546997]
[103.11362457 330.08334351]
[88.38363647 323.90524292]
[77.78137970 311.88049316]
[73.46549988 296.38067627]
[76.34809113 280.49243164]
[85.90248108 267.40270996]
[100.25858307 259.75952148]
[99.53015137 244.77722168]
[98.80171967 229.79492188]
[90.45548248 217.45840454]
[97.51348114 203.29878235]
[96.78504944 188.31646729]
[96.05661774 173.33416748]
[95.32818604 158.35186768]
[94.59975433 143.36956787]
[76.53417969 136.87054443]
[62.99697495 123.25635529]
[49.11565781 128.94046021]
[35.23433685 134.62455750]
[21.35301971 140.30865479]
[7.47170162 145.99276733]
[-2.36729813 158.38246155]
[-17.07735825 156.04507446]
[-30.95867729 161.72917175]
[-44.83999634 167.41326904]
[-58.72131348 173.09736633]
[-72.60263062 178.78147888]
[-86.48394775 184.46557617]
[-100.36527252 190.14967346]
[-114.24658966 195.83377075]
[-128.03404236 201.74191284]
[-141.72401428 207.87252808]
[-150.89086914 221.47036743]
[-167.22932434 220.06079102]
[-173.93177795 205.09385681]
[-164.10333252 191.96626282]
[-147.85464478 194.18255615]
[-134.16467285 188.05194092]
[-131.65220642 183.97509766]
[-126.54543304 181.44093323]
[-119.93068695 181.95245361]
[-106.04936981 176.26835632]
[-92.16805267 170.58425903]
[-78.28673553 164.90014648]
[-64.40541077 159.21604919]
[-50.52409744 153.53195190]
[-36.64277649 147.84785461]
[-22.76145935 142.16375732]
[-13.91534424 130.18061829]
[1.78760099 132.11143494]
[15.66891956 126.42733765]
[29.55023766 120.74324036]
[43.43155670 115.05914307]
[57.31287384 109.37503815]
[56.41409302 96.78273773]
[59.15204239 84.45887756]
[65.29827881 73.43173981]
[55.12965012 62.40454483]
[44.96102524 51.37734604]
[34.79240036 40.35015106]
[24.53482246 29.40565109]
[14.18896580 18.54456139]
[3.84310889 7.68347311]
[-6.50274754 -3.17761540]
[-21.62342262 -7.83334208]
[-24.79935646 -22.38541031]
[-35.14521408 -33.24649811]
[-45.49106979 -44.10758972]
[-55.83692551 -54.96867752]
[-71.64065552 -55.10192871]
[-82.66162872 -66.42949677]
[-82.36129761 -82.23092651]
[-70.91783905 -93.13152313]
[-55.12046432 -92.66414642]
[-44.34146881 -81.10608673]
[-44.97583771 -65.31453705]
[-34.62998199 -54.45344543]
[-24.28412437 -43.59235764]
[-13.93826771 -32.73126602]
[0.44240117 -28.85239792]
[4.35834122 -13.52347183]
[14.70419788 -2.66238332]
[25.05005455 8.19870567]
[35.39591217 19.05979347]
[42.29559708 21.73842239]
[45.81959534 30.18152618]
[55.98822021 41.20872116]
[66.15684509 52.23591614]
[76.32546997 63.26311493]
[86.71905518 58.36229706]
[98.03074646 56.33990479]
[109.47857666 57.33574677]
[120.27114868 61.28097916]
[129.66236877 67.90287018]
[137.00302124 76.74364471]
[150.88433838 71.05953979]
[164.76565552 65.37544250]
[178.64697266 59.69134140]
[192.52830505 54.00724030]
[186.88407898 42.98866272]
[188.34770203 27.89762306]
[198.88729858 13.08466148]
[209.40766907 2.39252782]
[219.92803955 -8.29960537]
[230.44842529 -18.99173927]
[234.61207581 -34.25524521]
[249.05366516 -37.90073776]
[259.57403564 -48.59287262]
[270.09442139 -59.28500366]
[280.61477661 -69.97713470]
[291.13516235 -80.66927338]
[301.65554810 -91.36140442]
[312.17590332 -102.05353546]
[322.69628906 -112.74567413]
[317.96398926 -127.30121613]
[320.54946899 -142.38676453]
[329.85861206 -154.53578186]
[343.75225830 -160.95648193]
[359.03771973 -160.17346191]
[372.20254517 -152.36663818]
[380.22149658 -139.32997131]
[381.25195312 -124.05919647]
[375.05706787 -110.06340790]
[363.06039429 -100.55875397]
[348.01867676 -97.72931671]
[333.38842773 -102.22529602]
[322.86804199 -91.53316498]
[312.34765625 -80.84103394]
[301.82730103 -70.14889526]
[291.30691528 -59.45676422]
[280.78656006 -48.76462936]
[270.26617432 -38.07249832]
[259.74578857 -27.38036346]
[256.33462524 -12.88163090]
[241.14054871 -8.47136497]
[230.62017822 2.22076869]
[220.09980774 12.91290188]
[209.57943726 23.60503578]
[211.50100708 30.85469246]
[215.34417725 45.35400391]
[217.26576233 52.60366058]
[231.70094299 56.68111420]
[246.13612366 60.75856400]
[260.57128906 64.83601379]
[275.00646973 68.91346741]
[289.44165039 72.99091339]
[304.82540894 69.29626465]
[314.97021484 80.20187378]
[329.40539551 84.27932739]
[343.84057617 88.35677338]
[358.48696899 81.80981445]
[372.67071533 89.30654907]
[375.51126099 105.09613037]
[364.82955933 117.06614685]
[348.81973267 116.03421783]
[339.76312256 102.79195404]
[325.32794189 98.71450043]
[310.89276123 94.63705444]
[296.54150391 98.62335205]
[285.36419678 87.42609406]
[270.92901611 83.34864807]
[256.49383545 79.27119446]
[242.05867004 75.19374084]
[227.62348938 71.11629486]
[213.18830872 67.03884125]
[198.21240234 67.88855743]
[184.33108521 73.57266235]
[170.44976807 79.25675964]
[156.56845093 84.94085693]
[142.68711853 90.62496185]
[143.03471375 107.62204742]
[136.87054443 123.46582031]
[125.12735748 135.75888062]
[109.58205414 142.64112854]
[110.31048584 157.62344360]
[111.03891754 172.60574341]
[111.76735687 187.58804321]
[112.49578857 202.57034302]
[120.89412689 215.97850037]
[113.78401947 229.06648254]
[114.51245117 244.04879761]
[115.24088287 259.03109741]
[128.46461487 264.04031372]
[138.74734497 273.68405151]
[144.55772400 286.48074341]
[145.04776001 300.48284912]
[140.17642212 313.57321167]
[130.71084595 323.78506470]
[118.10575867 329.59759521]
[118.59148407 344.58972168]
[125.14755249 360.22476196]
[111.93844604 370.85284424]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 191]
[2 190]
[8 183]
[9 182]
[10 181]
[12 179]
[13 178]
[14 177]
[15 176]
[16 175]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[24 49]
[25 48]
[26 47]
[27 46]
[28 45]
[29 44]
[30 43]
[31 42]
[32 39]
[33 38]
[58 90]
[59 89]
[60 88]
[61 87]
[62 85]
[63 84]
[64 83]
[65 82]
[67 80]
[68 79]
[69 78]
[70 77]
[96 171]
[97 170]
[98 169]
[99 168]
[100 167]
[103 139]
[104 138]
[105 137]
[106 136]
[108 134]
[109 133]
[110 132]
[111 131]
[112 130]
[113 129]
[114 128]
[115 127]
[142 166]
[143 165]
[144 164]
[145 163]
[146 162]
[147 161]
[149 159]
[150 158]
[151 157]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
