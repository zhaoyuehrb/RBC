%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:44:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGGGCUCAGGGCGUUUAUAACAACUUGGAAUGCUGUGCUUUACUGCGCGCUCUGGUACUGCUGUGGCUCCCCGUCCUGGUGCGGGACCUGUGCCCCGCGCUUCAGCCCUCCCCGCACAGCCUACUGAUU\
) } def
/len { sequence length } bind def

/coor [
[93.63808441 232.50427246]
[95.25668335 216.75373840]
[102.16669464 202.47795105]
[113.55429077 191.40011597]
[107.32306671 177.75563049]
[101.09183502 164.11116028]
[94.86061096 150.46667480]
[88.62938690 136.82218933]
[85.77331543 100.20271301]
[72.96509552 92.39569855]
[60.15687180 84.58868408]
[47.34865189 76.78166199]
[34.54043579 68.97464752]
[21.73221588 61.16762924]
[8.92399597 53.36061478]
[-3.95667148 62.90690231]
[-19.47240448 66.78958130]
[-35.25516129 64.44636536]
[-48.90771866 56.26286316]
[-58.36778259 43.50951004]
[-62.21948242 28.14438629]
[-59.90524673 12.51263428]
[-72.89562988 5.01263475]
[-85.88600922 -2.48736525]
[-99.29938507 -9.20162296]
[-113.08829498 -15.10637665]
[-126.87719727 -21.01112938]
[-136.09690857 -21.52834511]
[-140.92132568 -27.22397423]
[-154.56581116 -33.45520020]
[-168.21029663 -39.68642426]
[-174.97509766 -39.43262863]
[-180.04257202 -42.26691055]
[-182.34478760 -46.55253983]
[-195.67732239 -53.42593765]
[-204.83665466 -54.59956360]
[-209.24246216 -60.62484741]
[-222.40763855 -67.81358337]
[-235.57283020 -75.00231934]
[-248.73800659 -82.19105530]
[-263.82958984 -77.49855042]
[-277.77999878 -84.92565918]
[-282.31268311 -100.06601715]
[-274.73849487 -113.93711090]
[-259.55105591 -118.30946350]
[-245.76081848 -110.58905029]
[-241.54927063 -95.35623932]
[-228.38409424 -88.16750336]
[-215.21890259 -80.97876740]
[-202.05372620 -73.79003143]
[-188.80392456 -66.75846863]
[-175.47138977 -59.88507080]
[-161.97906494 -53.33090210]
[-148.33457947 -47.09967804]
[-134.69010925 -40.86845398]
[-120.97244263 -34.80003357]
[-107.18354034 -28.89528084]
[-93.39463806 -22.99052811]
[-95.90983582 -37.77814865]
[-86.09976959 -49.12551498]
[-71.10388184 -48.77439499]
[-61.83566284 -36.98032379]
[-65.04021454 -22.32662582]
[-78.38600922 -15.47774601]
[-65.39562988 -7.97774649]
[-52.40524673 -0.47774634]
[-41.56219482 -9.46439457]
[-28.26931000 -14.20521736]
[-14.12671185 -14.10776615]
[-0.84427714 -9.16330910]
[9.96509266 0.04962843]
[16.98132133 12.43288326]
[19.33835411 26.49952507]
[16.73101234 40.55239487]
[29.53923225 48.35941315]
[42.34745026 56.16642761]
[55.15567017 63.97344589]
[67.96389008 71.78046417]
[80.77210999 79.58747864]
[93.58032990 87.39450073]
[108.51240540 88.82033539]
[122.56665039 83.57837677]
[136.62089539 78.33641052]
[150.67514038 73.09445190]
[164.72938538 67.85248566]
[178.78363037 62.61052322]
[192.83789062 57.36856079]
[196.86660767 42.38360214]
[208.95498657 32.65474319]
[224.45480347 31.92293167]
[237.40603638 40.46956253]
[242.82870483 55.00828171]
[238.63766479 69.94865417]
[226.44444275 79.54580688]
[210.93760681 80.10942841]
[198.07984924 71.42280579]
[184.02560425 76.66477203]
[169.97135925 81.90673065]
[155.91711426 87.14869690]
[141.86286926 92.39065552]
[127.80861664 97.63262177]
[113.75437164 102.87458038]
[110.88424683 109.80368042]
[120.01591492 121.70378876]
[105.14398956 123.66187286]
[102.27386475 130.59097290]
[108.50509644 144.23544312]
[114.73632050 157.87992859]
[120.96754456 171.52441406]
[127.19876862 185.16888428]
[141.50166321 183.70535278]
[155.53327942 186.74011230]
[167.91592407 193.96156311]
[177.43798828 204.64768982]
[183.17257690 217.73822021]
[184.56767273 231.93986511]
[181.49929810 245.85404968]
[174.28233337 258.11465454]
[163.63833618 267.52215576]
[169.54309082 281.31106567]
[175.44784546 295.09994507]
[188.89315796 304.48907471]
[187.21519470 320.80215454]
[172.14010620 327.25769043]
[159.17585754 317.21478271]
[161.65893555 301.00469971]
[155.75418091 287.21578979]
[149.84944153 273.42691040]
[134.18676758 274.50540161]
[119.07117462 270.16473389]
[106.32386780 260.90887451]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 110]
[5 109]
[6 108]
[7 107]
[8 106]
[9 80]
[10 79]
[11 78]
[12 77]
[13 76]
[14 75]
[15 74]
[22 66]
[23 65]
[24 64]
[25 58]
[26 57]
[27 56]
[29 55]
[30 54]
[31 53]
[34 52]
[35 51]
[37 50]
[38 49]
[39 48]
[40 47]
[81 102]
[82 101]
[83 100]
[84 99]
[85 98]
[86 97]
[87 96]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
