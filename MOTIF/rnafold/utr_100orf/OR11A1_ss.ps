%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:15:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUAAUAACGUUAGGCUUGGUAUAGAAGAUGCAGAGACAUGCUAAAAUUUCUCCCCCAAUUAUUGCCAAGCAGAAACUUGGACGAUCGACAUGGAAAUUGUCUCCACAGGAAACGAAACUAUUACUGAAUUUGUCCUCCUUGGCUUCUAUGACAUCCCUGAACUGCAUUUCUUGUUUUUUAUUGUAUUCA\
) } def
/len { sequence length } bind def

/coor [
[141.62257385 421.66055298]
[128.33702087 414.69680786]
[118.12837982 403.70663452]
[112.16175842 389.94439697]
[111.11813354 374.98074341]
[115.11660767 360.52349854]
[123.70083618 348.22262573]
[135.89111328 339.48208618]
[150.29614258 335.29937744]
[165.27189636 336.15188599]
[179.10919189 341.94235229]
[190.23033142 352.01184082]
[185.87606812 337.65774536]
[181.52178955 323.30364990]
[177.16752625 308.94952393]
[172.81324768 294.59542847]
[159.59722900 287.82250977]
[154.97689819 273.32745361]
[162.17056274 259.51116943]
[157.81629944 245.15707397]
[144.60026550 238.38417053]
[139.97993469 223.88908386]
[147.17359924 210.07283020]
[142.81933594 195.71871948]
[138.46505737 181.36462402]
[134.11079407 167.01051331]
[129.75651550 152.65640259]
[125.40225220 138.30230713]
[121.04798126 123.94819641]
[113.14186859 130.41232300]
[103.25221252 134.22334290]
[92.28128815 134.77847290]
[81.31094360 131.78453064]
[71.49591827 125.30975342]
[63.94302750 115.79875183]
[49.04131317 117.51305389]
[34.13959503 119.22736359]
[19.23787880 120.94166565]
[6.41240072 130.20544434]
[-7.11575222 123.97340393]
[-22.01746941 125.68771362]
[-31.64481926 138.22125244]
[-47.32558060 140.19337463]
[-59.75663757 130.43405151]
[-61.56285858 114.73331451]
[-51.67265320 102.40613556]
[-35.95369720 100.76600647]
[-23.73177338 110.78599548]
[-8.83005619 109.07168579]
[2.92955089 99.93052673]
[17.52357483 106.03994751]
[32.42528915 104.32564545]
[47.32700729 102.61133575]
[62.22872543 100.89703369]
[65.04206848 93.94468689]
[51.13737488 88.31800842]
[37.23268509 82.69132233]
[23.32808685 77.06440735]
[28.95523071 63.15990448]
[42.85936737 68.78662872]
[56.76405716 74.41331482]
[70.66874695 80.04000092]
[73.48209381 73.08765411]
[63.96619034 61.49249649]
[54.45029449 49.89733887]
[44.93439484 38.30218124]
[35.32395172 26.78526306]
[25.61960793 15.34735584]
[15.91526699 3.90944767]
[6.21092415 -7.52846050]
[-3.49341798 -18.96636772]
[-19.26334572 -20.00795555]
[-29.61487007 -31.95038033]
[-28.40661240 -47.70841599]
[-16.35541153 -57.93309784]
[-0.61103225 -56.55830383]
[9.48566532 -44.39967346]
[7.94448996 -28.67071152]
[17.64883232 -17.23280334]
[27.35317421 -5.79489470]
[37.05751801 5.64301348]
[46.76185989 17.08092117]
[53.49742126 20.15232086]
[56.52954865 28.78628159]
[66.04544830 40.38143921]
[75.56134796 51.97659683]
[85.07724762 63.57175446]
[89.08683014 68.39930725]
[92.50000000 73.54480743]
[92.50000000 58.54481125]
[92.50000000 43.54481125]
[92.50000000 28.54480934]
[80.40541840 18.63243866]
[77.56279755 3.25539398]
[85.31433868 -10.32575607]
[100.00000000 -15.69840622]
[114.68566132 -10.32575607]
[122.43720245 3.25539398]
[119.59458160 18.63243866]
[107.50000000 28.54480934]
[107.50000000 43.54481125]
[107.50000000 58.54481125]
[107.50000000 73.54480743]
[121.66158295 79.69487000]
[131.17182922 93.30289459]
[143.21994019 84.36740112]
[155.26805115 75.43191528]
[160.30718994 67.79344940]
[167.58718872 66.45070648]
[179.77989197 57.71353912]
[191.97257996 48.97637177]
[204.16528320 40.23920822]
[211.36439514 23.29870605]
[228.87477112 22.24342918]
[240.92288208 13.30794048]
[252.97099304 4.37245083]
[265.01910400 -4.56303883]
[277.06723022 -13.49852848]
[274.14398193 -28.47909927]
[278.01840210 -43.24229050]
[287.92114258 -54.85685349]
[301.88607788 -61.01671600]
[317.14041138 -60.49882507]
[330.65539551 -53.40601349]
[339.74761963 -41.14656448]
[342.61181641 -26.15459633]
[338.67932129 -11.40677834]
[328.73089600 0.16870013]
[314.74182129 6.27351904]
[299.48965454 5.69556284]
[286.00271606 -1.45041525]
[273.95458984 7.48507452]
[261.90649414 16.42056465]
[249.85836792 25.35605431]
[237.81025696 34.29154205]
[235.72122192 46.21658707]
[225.74284363 53.75803375]
[212.90245056 52.43190765]
[200.70974731 61.16907501]
[188.51704407 69.90624237]
[176.32435608 78.64340210]
[164.20353699 87.48002625]
[152.15542603 96.41551971]
[140.10731506 105.35100555]
[135.40208435 119.59393311]
[139.75636292 133.94802856]
[144.11062622 148.30213928]
[148.46490479 162.65625000]
[152.81916809 177.01034546]
[157.17343140 191.36445618]
[161.52770996 205.71856689]
[175.18492126 213.20977783]
[179.39628601 227.82890320]
[172.17039490 240.80281067]
[176.52467346 255.15690613]
[190.18188477 262.64813232]
[194.39324951 277.26724243]
[187.16735840 290.24114990]
[191.52162170 304.59527588]
[195.87590027 318.94937134]
[200.23016357 333.30346680]
[204.58444214 347.65756226]
[210.76033020 352.43765259]
[213.29344177 358.99795532]
[212.17005920 365.15548706]
[219.67005920 378.14584351]
[227.17005920 391.13623047]
[234.67005920 404.12661743]
[249.66366577 401.76950073]
[264.49545288 404.99166870]
[277.15954590 413.35739136]
[285.94320679 425.73526001]
[289.65856934 440.45126343]
[287.80310059 455.51519775]
[280.62774658 468.88973999]
[269.10296631 478.76617432]
[254.78733826 483.80871582]
[239.61695862 483.33544922]
[225.64349365 477.41036987]
[214.75672913 466.83480835]
[208.42901611 453.03897095]
[207.51614380 437.88870239]
[212.14154053 423.43289185]
[221.67967224 411.62661743]
[214.17967224 398.63623047]
[206.67967224 385.64584351]
[199.17967224 372.65548706]
[198.92718506 387.65335083]
[193.69515991 401.71130371]
[184.08073425 413.22488403]
[171.18118286 420.88006592]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 162]
[13 161]
[14 160]
[15 159]
[16 158]
[19 155]
[20 154]
[23 151]
[24 150]
[25 149]
[26 148]
[27 147]
[28 146]
[29 145]
[35 54]
[36 53]
[37 52]
[38 51]
[40 49]
[41 48]
[63 87]
[64 86]
[65 85]
[66 84]
[67 82]
[68 81]
[69 80]
[70 79]
[71 78]
[89 103]
[90 102]
[91 101]
[92 100]
[105 144]
[106 143]
[107 142]
[109 141]
[110 140]
[111 139]
[112 138]
[114 135]
[115 134]
[116 133]
[117 132]
[118 131]
[165 187]
[166 186]
[167 185]
[168 184]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
