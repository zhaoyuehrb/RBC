%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCAGGACGCGGCAAAGGAGGUAAGGGCCUGGGGAAAGGGGGUGCCAAGCGCCACCGCAAGGUGCUGCGCGACAACAUCCAGGGUAUCACCAAGCCAG\
) } def
/len { sequence length } bind def

/coor [
[46.89620590 242.33210754]
[35.28167725 242.44253540]
[27.31530952 255.15225220]
[19.34894371 267.86196899]
[11.38257694 280.57168579]
[16.36612129 295.39392090]
[10.60810280 309.93280029]
[-3.17271996 317.32354736]
[-18.46946335 314.07644653]
[-28.05947304 301.72470093]
[-27.41464043 286.10040283]
[-16.83943367 274.58090210]
[-1.32714403 272.60531616]
[6.63922310 259.89559937]
[14.60558987 247.18588257]
[22.57195663 234.47616577]
[17.33472252 217.07168579]
[26.48245239 201.00325012]
[44.73238373 196.47067261]
[51.89318085 183.29026794]
[49.80327225 164.17364502]
[66.80566406 153.56689453]
[73.13319397 139.96681213]
[79.46071625 126.36672211]
[70.06419373 114.86316681]
[66.58015442 100.42406464]
[69.69670105 85.90119934]
[78.79830933 74.16292572]
[92.08735657 67.52761078]
[106.93919373 67.30575562]
[113.26672363 53.70566559]
[119.59424591 40.10557556]
[125.92176819 26.50548935]
[132.24929810 12.90539932]
[138.57682800 -0.69468963]
[128.14877319 -10.65095615]
[121.33865356 -23.33450317]
[118.80815887 -37.48463821]
[120.79436493 -51.69960403]
[127.08757019 -64.57544708]
[137.05337524 -74.84465790]
[149.69657898 -81.50099945]
[163.76057434 -83.89801025]
[177.85223389 -81.81185150]
[184.59965515 -95.20857239]
[191.34709167 -108.60530090]
[198.09451294 -122.00202179]
[198.09858704 -128.90267944]
[201.22387695 -133.91690063]
[205.70071411 -136.00224304]
[213.26795959 -148.95356750]
[220.83518982 -161.90489197]
[228.40243530 -174.85621643]
[235.96968079 -187.80754089]
[243.53692627 -200.75886536]
[238.09481812 -215.41893005]
[243.39790344 -230.12986755]
[256.94219971 -237.94560242]
[272.33251953 -235.17579651]
[282.30203247 -223.12828064]
[282.14343262 -207.49150085]
[271.93161011 -195.64866638]
[256.48825073 -193.19161987]
[248.92100525 -180.24029541]
[241.35375977 -167.28897095]
[233.78651428 -154.33764648]
[226.21928406 -141.38632202]
[218.65203857 -128.43499756]
[211.49124146 -115.25460052]
[204.74380493 -101.85787201]
[197.99638367 -88.46115112]
[191.24896240 -75.06442261]
[202.13973999 -63.80762863]
[208.55717468 -49.49060059]
[209.71755981 -33.81731796]
[205.46408081 -18.65996552]
[196.28768921 -5.83531475]
[183.27053833 3.11305308]
[167.95834351 7.10051155]
[152.17691040 5.63283587]
[145.84938049 19.23292542]
[139.52186584 32.83301544]
[133.19433594 46.43310165]
[126.86680603 60.03319168]
[120.53928375 73.63327789]
[129.93580627 85.13683319]
[133.41984558 99.57593536]
[130.30329895 114.09880066]
[121.20169067 125.83707428]
[107.91264343 132.47239685]
[93.06080627 132.69424438]
[86.73327637 146.29432678]
[80.40575409 159.89442444]
[84.79011536 170.09164429]
[82.77848053 180.78201294]
[75.29872894 188.37197876]
[65.07358551 190.45106506]
[57.91278458 203.63146973]
[63.51940155 214.35311890]
[63.17266083 226.32617188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 16]
[3 15]
[4 14]
[5 13]
[19 98]
[20 97]
[22 93]
[23 92]
[24 91]
[30 85]
[31 84]
[32 83]
[33 82]
[34 81]
[35 80]
[44 72]
[45 71]
[46 70]
[47 69]
[50 68]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
