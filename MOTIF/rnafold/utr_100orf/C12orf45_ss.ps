%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:25:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCGGGCCUGAGAGUGCAGGCUUGAGGGAAGCAUGGAGGUCCAUGGCAAGCCCAAGGCUAGCCCGAGUUGUUCGUCGCCCACCCGGGAUUCCUCAGGAGUCCCAGUGUCCAAGGAGCUGCUGACGGCGGGAA\
) } def
/len { sequence length } bind def

/coor [
[116.19388580 136.01983643]
[104.67789459 139.21463013]
[92.73353577 138.81840515]
[81.45458984 134.86743164]
[72.02390289 146.53199768]
[62.59320831 158.19656372]
[53.16251373 169.86112976]
[43.73182297 181.52568054]
[34.30112839 193.19024658]
[24.87043571 204.85481262]
[15.43974209 216.51937866]
[17.35305405 232.20742798]
[7.54718637 244.60179138]
[-8.16021156 246.34913635]
[-20.45022011 236.41278076]
[-22.03139496 220.68777466]
[-11.96565247 208.50350952]
[3.77517939 207.08868408]
[13.20587254 195.42411804]
[22.63656616 183.75955200]
[32.06725693 172.09498596]
[41.49795151 160.43043518]
[50.92864609 148.76586914]
[60.35933685 137.10130310]
[69.79003143 125.43673706]
[62.05998993 110.96474457]
[60.87822723 94.60027313]
[46.67899323 89.76480865]
[32.47975922 84.92934418]
[18.06945992 95.80509949]
[0.17212161 95.92521667]
[-14.13124752 85.42845917]
[-19.29275322 68.61730194]
[-33.70302963 64.45269775]
[-48.11330795 60.28810120]
[-62.52358627 56.12350082]
[-76.93386841 51.95890045]
[-92.71564484 56.41618729]
[-104.27632904 44.78507614]
[-99.72326660 29.03065681]
[-83.74026489 25.35972786]
[-72.76926422 37.54862213]
[-58.35898590 41.71322250]
[-43.94870758 45.87782288]
[-29.53843117 50.04242325]
[-15.12815380 54.20702362]
[-6.67505455 45.34842300]
[4.82338572 40.93286514]
[17.17772293 41.86761093]
[28.00695801 48.03475571]
[35.19742203 58.30200577]
[37.31522369 70.73011017]
[51.51445770 75.56557465]
[65.71369171 80.40103912]
[77.15525818 67.78528595]
[92.84548187 61.16080856]
[109.86630249 61.75962448]
[125.05218506 69.47037506]
[135.57887268 82.85900879]
[150.08282471 79.03336334]
[161.45327759 68.03231049]
[175.73300171 72.26773071]
[190.23693848 68.44209290]
[204.74089050 64.61644745]
[213.22373962 49.36868286]
[229.77235413 45.01367188]
[244.08740234 53.76000595]
[258.49768066 49.59540939]
[272.90795898 45.43080902]
[284.01739502 34.16621780]
[298.39248657 38.06572723]
[312.80276489 33.90112686]
[327.21304321 29.73652840]
[341.62332153 25.57192802]
[343.37533569 10.49857140]
[350.74502563 -2.72001600]
[362.58209229 -12.08469486]
[377.06347656 -16.19285774]
[391.97393799 -14.44844341]
[405.04498291 -7.14820337]
[414.29992676 4.56823254]
[428.71020508 0.40363270]
[443.12048340 -3.76096725]
[450.06542969 -14.70212936]
[462.22424316 -17.83966827]
[472.89001465 -12.00983334]
[487.39395142 -15.83547497]
[501.89791870 -19.66111565]
[516.40185547 -23.48675728]
[530.90582275 -27.31239891]
[545.40972900 -31.13804054]
[559.91369629 -34.96368408]
[574.41766357 -38.78932571]
[588.19091797 -48.67536545]
[601.50341797 -38.17710495]
[595.10070801 -22.47864723]
[578.24328613 -24.28537750]
[563.73931885 -20.45973587]
[549.23541260 -16.63409424]
[534.73144531 -12.80845261]
[520.22747803 -8.98281097]
[505.72354126 -5.15716982]
[491.21960449 -1.33152807]
[476.71566772 2.49411345]
[465.00183105 15.50767517]
[447.28509521 10.64931011]
[432.87481689 14.81391048]
[418.46453857 18.97850990]
[416.88650513 33.82570267]
[409.72491455 46.97321320]
[398.04373169 56.40266800]
[383.60342407 60.65293884]
[368.59564209 59.04647446]
[355.31069946 51.79711151]
[345.78790283 39.98220444]
[331.37762451 44.14680481]
[316.96734619 48.31140518]
[302.55706787 52.47600555]
[292.47836304 63.44271469]
[277.07257080 59.84108353]
[262.66229248 64.00568390]
[248.25199890 68.17028809]
[243.63705444 80.25874329]
[232.72326660 87.56671906]
[219.39804077 87.21987915]
[208.56652832 79.12039948]
[194.06259155 82.94603729]
[179.55863953 86.77168274]
[169.22560120 97.49910736]
[153.90846252 93.53731537]
[139.40451050 97.36295319]
[138.38912964 109.27066803]
[133.85829163 120.32943726]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 25]
[5 24]
[6 23]
[7 22]
[8 21]
[9 20]
[10 19]
[11 18]
[27 54]
[28 53]
[29 52]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
[59 131]
[60 130]
[62 128]
[63 127]
[64 126]
[67 122]
[68 121]
[69 120]
[71 118]
[72 117]
[73 116]
[74 115]
[81 108]
[82 107]
[83 106]
[86 104]
[87 103]
[88 102]
[89 101]
[90 100]
[91 99]
[92 98]
[93 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
