%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:05:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCACCCCGUGGAAUCCCCCACGUCAUCAUCAGAACCAUCAAUGAGAUGCAAACAUGAAAGACAAGAGGAAGAAGAAGGACCGCACCUGGGCCGAGGCUGCCCGCCUGGCACUAGAAAAACACCCCAACUCACCAAUGACAGCAAAGCAGAUAU\
) } def
/len { sequence length } bind def

/coor [
[120.38442993 157.60229492]
[113.68244934 144.18276978]
[106.98047638 130.76325989]
[99.51846313 130.00933838]
[105.67455292 143.68788147]
[96.90654755 155.85842896]
[81.98255920 154.35026550]
[75.82676697 140.67158508]
[84.59444427 128.50151062]
[77.13243103 127.74759674]
[67.88164520 139.55534363]
[58.63086319 151.36309814]
[49.38008118 163.17085266]
[51.53364182 178.82772827]
[41.91891861 191.37095642]
[26.24014854 193.35885620]
[13.79927349 183.61206055]
[11.97724247 167.91314697]
[21.85503387 155.57601929]
[37.57232666 153.92007446]
[46.82311249 142.11231995]
[56.07389450 130.30456543]
[65.32467651 118.49681091]
[60.14709473 104.41872406]
[45.45023346 101.41833496]
[30.75337601 98.41794586]
[13.46020222 104.66699219]
[0.76137078 92.59019470]
[-13.99292755 89.88636780]
[-28.74722672 87.18254852]
[-43.50152588 84.47872162]
[-51.40701675 96.23055267]
[-63.16486740 104.04899597]
[-76.97470093 106.77666473]
[-90.73706055 104.03266907]
[-102.37258911 96.26538086]
[-110.13617706 84.67958069]
[-112.87869263 71.04966736]
[-127.57555389 68.04928589]
[-142.27241516 65.04889679]
[-156.96926880 62.04851532]
[-171.09223938 69.65913391]
[-185.79083252 63.23023224]
[-189.78956604 47.69350815]
[-180.02093506 34.96741104]
[-163.97860718 34.81431198]
[-153.96888733 47.35165405]
[-139.27203369 50.35203934]
[-124.57517242 53.35242462]
[-109.87831116 56.35280991]
[-100.47254181 43.46719742]
[-86.34410095 35.93387604]
[-70.28717804 35.30000305]
[-55.50238419 41.74251938]
[-44.95878983 54.02279663]
[-40.79769897 69.72441864]
[-26.04340172 72.42824554]
[-11.28910255 75.13207245]
[3.46519637 77.83589935]
[13.63083458 71.21347809]
[25.97525787 73.38543701]
[33.75376129 83.72109222]
[48.45061874 86.72147369]
[63.14748001 89.72186279]
[65.24682617 86.82339478]
[67.56018829 84.21691132]
[70.05230713 81.91664124]
[72.68717957 79.93285370]
[75.42845154 78.27187347]
[74.22145081 63.32051468]
[60.11582184 57.37999725]
[50.39555740 45.55734634]
[47.29430389 30.56932449]
[51.52470779 15.86006737]
[62.11465454 4.80965471]
[76.63065338 -0.04260967]
[91.73702240 2.41828966]
[103.96244812 11.62685585]
[110.49759674 25.46702766]
[109.84075165 40.75843430]
[102.14285278 53.98722458]
[89.17281342 62.11351776]
[90.37980652 77.06488037]
[97.15568542 80.28006744]
[103.58628845 66.72841644]
[117.13784027 73.15921783]
[110.70744324 86.71045685]
[117.48332214 89.92565155]
[129.82807922 81.40468597]
[142.17283630 72.88371277]
[154.51759338 64.36273956]
[166.77592468 55.71789932]
[178.94659424 46.95006943]
[191.11726379 38.18223953]
[196.28904724 30.58176804]
[203.62246704 29.36330986]
[215.96722412 20.84233856]
[228.31198120 12.32136822]
[240.65673828 3.80039692]
[244.95124817 -11.65717888]
[259.76986694 -17.80438423]
[273.74499512 -9.92561150]
[276.15612793 5.93522167]
[265.15365601 17.61104012]
[249.17770386 16.14515495]
[236.83294678 24.66612625]
[224.48818970 33.18709564]
[212.14343262 41.70806885]
[199.88510132 50.35290909]
[187.71443176 59.12073898]
[175.54376221 67.88856506]
[171.93415833 74.38736725]
[163.03857422 76.70749664]
[150.69381714 85.22846985]
[138.34904480 93.74944305]
[126.00429535 102.27040863]
[140.92300415 100.71094513]
[153.31408691 92.25746918]
[168.12612915 89.89032745]
[182.53468323 94.06088257]
[193.79223633 103.97388458]
[199.75210571 117.73905182]
[199.27786255 132.73155212]
[192.45989990 146.09252930]
[180.59832764 155.27420044]
[165.95498657 158.52577209]
[151.32217407 155.22718811]
[139.49015808 146.00747681]
[132.71519470 132.62490845]
[120.39999390 124.06127930]
[127.10197449 137.48080444]
[133.80395508 150.90031433]
[148.50897217 147.57981873]
[163.58132935 147.87565613]
[178.14472961 151.77062988]
[191.35247803 159.03829956]
[202.43669128 169.25610352]
[210.75294495 181.83001709]
[215.81774902 196.02900696]
[217.33663940 211.02754211]
[215.22131348 225.95365906]
[209.59475708 239.93955994]
[200.78407288 252.17210388]
[189.30151367 261.94012451]
[175.81466675 268.67575073]
[161.10763550 271.98730469]
[146.03546143 271.68234253]
[131.47442627 267.77853394]
[118.27108765 260.50286865]
[107.19306946 250.27835083]
[98.88443756 237.69938660]
[93.82823944 223.49734497]
[92.31844330 208.49787903]
[94.44281769 193.57304382]
[100.07785797 179.59056091]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 132]
[2 131]
[3 130]
[10 23]
[11 22]
[12 21]
[13 20]
[24 64]
[25 63]
[26 62]
[28 59]
[29 58]
[30 57]
[31 56]
[38 50]
[39 49]
[40 48]
[41 47]
[69 83]
[70 82]
[88 116]
[89 115]
[90 114]
[91 113]
[92 111]
[93 110]
[94 109]
[96 108]
[97 107]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
