%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:27:46 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (IQSEC3)
} def

/sequence { (\
AUGGAGAGCCUGCUGGAGAAUCCGGUGCGCGCCGUGCUCUACCUCAAGGAGCUCACGGCCAUCGUGCAGAACCAGCAGAGCCUCAUCCACACCCAGCGAG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 86 0.038095785 ubox
2 85 0.043650633 ubox
2 89 0.855019299 ubox
2 91 0.018975724 ubox
2 95 0.016153108 ubox
3 84 0.034294504 ubox
3 87 0.025229863 ubox
3 88 0.982823496 ubox
3 90 0.017951019 ubox
3 93 0.004821410 ubox
3 94 0.017487885 ubox
3 97 0.003897098 ubox
4 83 0.016303766 ubox
4 84 0.178272951 ubox
4 86 0.022849247 ubox
4 87 0.982685031 ubox
4 92 0.004218038 ubox
4 93 0.014980642 ubox
5 83 0.185548421 ubox
5 86 0.978167961 ubox
6 82 0.192716938 ubox
6 84 0.968365070 ubox
6 87 0.006970744 ubox
7 83 0.968795929 ubox
7 86 0.006933065 ubox
8 81 0.712029593 ubox
8 82 0.701819840 ubox
9 80 0.976372449 ubox
10 78 0.999499553 ubox
10 80 0.017179640 ubox
11 77 0.999653876 ubox
11 79 0.011799346 ubox
12 76 0.999988019 ubox
13 75 0.999985725 ubox
14 24 0.005806851 ubox
14 74 0.999703483 ubox
15 23 0.027138596 ubox
15 73 0.999592638 ubox
16 22 0.028359895 ubox
16 72 0.997638656 ubox
17 21 0.025348243 ubox
20 26 0.008099310 ubox
20 65 0.020061952 ubox
21 25 0.008340681 ubox
21 64 0.008252009 ubox
21 70 0.785660767 ubox
22 69 0.805993770 ubox
23 34 0.006261505 ubox
23 64 0.398584376 ubox
23 66 0.011799520 ubox
24 33 0.006403658 ubox
24 63 0.402063272 ubox
24 65 0.006600412 ubox
24 73 0.023928330 ubox
25 32 0.006402131 ubox
25 62 0.401923859 ubox
25 67 0.828373386 ubox
25 72 0.024092617 ubox
26 31 0.006138646 ubox
26 61 0.402024689 ubox
26 64 0.003829757 ubox
26 66 0.826913163 ubox
26 68 0.384157368 ubox
26 71 0.017950484 ubox
27 59 0.004148313 ubox
27 60 0.401311532 ubox
27 63 0.004977954 ubox
27 65 0.827249640 ubox
27 67 0.388415823 ubox
28 58 0.005718731 ubox
28 64 0.828933897 ubox
28 66 0.388423169 ubox
29 59 0.047290783 ubox
29 63 0.827016124 ubox
29 65 0.388216720 ubox
30 57 0.012916403 ubox
30 58 0.040911941 ubox
30 64 0.388123840 ubox
31 56 0.013398420 ubox
31 59 0.985744069 ubox
31 63 0.157611878 ubox
32 58 0.999029493 ubox
33 57 0.999351023 ubox
34 56 0.998824800 ubox
35 55 0.955919266 ubox
36 52 0.820154992 ubox
36 54 0.568314410 ubox
37 48 0.004559895 ubox
37 49 0.006747001 ubox
37 51 0.914781011 ubox
38 47 0.004525404 ubox
38 49 0.036065254 ubox
38 50 0.916105839 ubox
39 48 0.078312648 ubox
39 49 0.912938266 ubox
39 51 0.394866895 ubox
40 47 0.101022223 ubox
40 48 0.892933647 ubox
40 50 0.393768101 ubox
42 49 0.398034397 ubox
43 48 0.397947927 ubox
43 49 0.014266684 ubox
43 51 0.016716790 ubox
44 48 0.013820249 ubox
44 50 0.016900345 ubox
45 49 0.016842995 ubox
54 66 0.006436299 ubox
55 65 0.006513968 ubox
56 64 0.006522312 ubox
57 63 0.006499246 ubox
58 62 0.004210733 ubox
62 70 0.003821223 ubox
63 69 0.004154914 ubox
65 71 0.006239462 ubox
82 100 0.003252955 ubox
83 99 0.003359499 ubox
84 98 0.003394216 ubox
86 99 0.019513887 ubox
87 98 0.020887033 ubox
2 89 0.9500000 lbox
3 88 0.9500000 lbox
4 87 0.9500000 lbox
5 86 0.9500000 lbox
6 84 0.9500000 lbox
7 83 0.9500000 lbox
8 81 0.9500000 lbox
9 80 0.9500000 lbox
10 78 0.9500000 lbox
11 77 0.9500000 lbox
12 76 0.9500000 lbox
13 75 0.9500000 lbox
14 74 0.9500000 lbox
15 73 0.9500000 lbox
16 72 0.9500000 lbox
21 70 0.9500000 lbox
22 69 0.9500000 lbox
25 67 0.9500000 lbox
26 66 0.9500000 lbox
27 65 0.9500000 lbox
28 64 0.9500000 lbox
29 63 0.9500000 lbox
31 59 0.9500000 lbox
32 58 0.9500000 lbox
33 57 0.9500000 lbox
34 56 0.9500000 lbox
35 55 0.9500000 lbox
36 52 0.9500000 lbox
37 51 0.9500000 lbox
38 50 0.9500000 lbox
39 49 0.9500000 lbox
40 48 0.9500000 lbox
showpage
end
%%EOF
