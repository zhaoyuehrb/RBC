%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:40:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGGGAAACAAGAUGGCGGCUGCAGGUCCGAGUACUCGGGCCUCUUCCGCGGCGGCAGCAGCCGCUCUGAGUCGGCGGGGCCGGCGGGGCCGCUGUGACGAGACGGCGGCAG\
) } def
/len { sequence length } bind def

/coor [
[76.23567963 178.41307068]
[62.39670944 184.19950867]
[47.47306442 185.71109009]
[32.75488281 182.81710815]
[19.51453018 175.76777649]
[8.89662743 165.17250061]
[1.81907976 151.94720459]
[-1.10626543 137.23522949]
[0.37348512 122.30838776]
[6.13040829 108.45711517]
[15.66682434 96.87882233]
[28.15831947 88.57445526]
[42.52501297 84.26190948]
[57.52492523 84.31400299]
[71.86132050 88.72622681]
[84.29389191 97.11629486]
[72.98229218 87.26501465]
[61.67069244 77.41373444]
[50.35909653 67.56245422]
[39.04749680 57.71117020]
[27.73589706 47.85988998]
[16.42429733 38.00860977]
[5.11269855 28.15732956]
[-6.19890070 18.30604935]
[-19.18928146 10.80604935]
[-33.37654114 5.93555784]
[-47.56380081 1.06506562]
[-61.75105667 -3.80542636]
[-75.93831635 -8.67591858]
[-90.12557220 -13.54641056]
[-104.31283569 -18.41690254]
[-118.50009155 -23.28739548]
[-134.48255920 -19.61416626]
[-145.45532227 -31.80148506]
[-140.13052368 -47.31208038]
[-123.98587036 -50.18998337]
[-113.62960052 -37.47465134]
[-99.44234467 -32.60416031]
[-85.25508118 -27.73366928]
[-71.06782532 -22.86317635]
[-56.88056564 -17.99268532]
[-42.69330597 -13.12219334]
[-28.50604820 -8.25170135]
[-14.31878948 -3.38120890]
[-8.66299057 -8.30684948]
[-21.52757835 -16.02062798]
[-18.16669273 -30.63926125]
[-3.22497249 -31.96024895]
[2.64860892 -18.15812874]
[8.30440807 -23.08376884]
[5.42874908 -37.80554199]
[-5.74359608 -49.81015396]
[-0.67544502 -65.40649414]
[15.41952229 -68.55039215]
[25.98418427 -56.00766373]
[20.15052223 -40.68120193]
[23.02618027 -25.95942879]
[18.01802826 -3.80372572]
[3.65237951 6.99445057]
[14.96397877 16.84573174]
[26.27557755 26.69701195]
[37.58717728 36.54829025]
[48.89877701 46.39957047]
[60.21037674 56.25085068]
[71.52197266 66.10213470]
[82.83357239 75.95341492]
[94.14517212 85.80469513]
[108.94058990 88.27361298]
[122.83800507 82.62897491]
[128.62260437 70.99972534]
[140.42344666 66.62450409]
[151.64857483 71.35997772]
[165.69624329 66.10041809]
[179.74391174 60.84085464]
[193.79158020 55.58129120]
[207.83924866 50.32172775]
[221.88691711 45.06216431]
[234.60037231 33.84590530]
[248.89773560 42.95753860]
[244.10008240 59.21850204]
[227.14648438 59.10983276]
[213.09881592 64.36939240]
[199.05114746 69.62895966]
[185.00347900 74.88851929]
[170.95581055 80.14808655]
[156.90814209 85.40764618]
[146.58557129 99.52618408]
[128.48265076 96.52638245]
[114.58523560 102.17102051]
[111.30501556 116.80796814]
[121.46424103 127.84382629]
[131.62345886 138.87968445]
[141.78268433 149.91554260]
[151.94190979 160.95140076]
[162.10113525 171.98725891]
[172.26036072 183.02311707]
[182.41958618 194.05897522]
[198.21873474 194.46159363]
[209.04502869 205.97537231]
[208.47540283 221.76937866]
[196.84780884 232.47334290]
[181.06069946 231.73675537]
[170.48027039 219.99664307]
[171.38372803 204.21820068]
[161.22450256 193.18234253]
[151.06527710 182.14648438]
[140.90605164 171.11062622]
[130.74682617 160.07476807]
[120.58760834 149.03890991]
[110.42838287 138.00305176]
[100.26915741 126.96719360]
[100.35323334 141.96694946]
[96.07132721 156.34281921]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 67]
[17 66]
[18 65]
[19 64]
[20 63]
[21 62]
[22 61]
[23 60]
[24 59]
[25 44]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
[31 38]
[32 37]
[50 57]
[51 56]
[68 89]
[69 88]
[72 86]
[73 85]
[74 84]
[75 83]
[76 82]
[77 81]
[90 111]
[91 110]
[92 109]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
