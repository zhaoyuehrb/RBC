%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:43:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACACCUUCUGAGGCAGCGGCAUGGCUUCCCUCUGGCUCCUCUCCUGCUUCUCCCUUGUGGGGGCCGCCUUUGGCUGCGGGGUCCCCGCCAUCCACCCUGUGCUCAGCGGCCUGUCCAGGA\
) } def
/len { sequence length } bind def

/coor [
[92.10083771 107.20272827]
[77.11184692 106.62818146]
[62.12285233 106.05364227]
[47.13385773 105.47910309]
[32.14486694 104.90456390]
[25.97632790 117.68860626]
[15.41851330 127.11108398]
[2.10005808 131.76307678]
[-11.94151974 130.96813965]
[-24.57151413 124.88040924]
[-33.88256454 114.45617676]
[-38.48269272 101.30376434]
[-53.45212173 100.34661102]
[-68.42155457 99.38945770]
[-83.39098358 98.43231201]
[-98.36041260 97.47515869]
[-113.32984924 96.51800537]
[-128.29927063 95.56085205]
[-142.56504822 102.40179443]
[-154.77265930 93.86813354]
[-169.74209595 92.91098022]
[-179.67440796 104.68617249]
[-194.46299744 108.31265259]
[-208.38659668 102.60324097]
[-216.18504333 89.94139862]
[-231.15446472 88.98424530]
[-246.12390137 88.02709198]
[-261.09332275 87.06994629]
[-271.75726318 98.50737000]
[-287.28436279 100.36298370]
[-300.34320068 91.76062775]
[-304.76779175 76.76206207]
[-298.46902466 62.44916153]
[-284.42089844 55.58003235]
[-269.25659180 59.39806747]
[-260.13616943 72.10050964]
[-245.16674805 73.05766296]
[-230.19731140 74.01481628]
[-215.22789001 74.97196960]
[-205.88032532 63.40644836]
[-191.34297180 59.51684189]
[-177.13668823 64.99726868]
[-168.78494263 77.94155121]
[-153.81550598 78.89870453]
[-140.62045288 71.98929596]
[-127.34212494 80.59142303]
[-112.37269592 81.54857635]
[-97.40326691 82.50572205]
[-82.43383026 83.46287537]
[-67.46440125 84.42002869]
[-52.49497223 85.37718201]
[-37.52553940 86.33433533]
[-29.99514580 72.30113983]
[-17.06815147 62.90012360]
[-1.28332317 60.03983307]
[14.23213005 64.33811188]
[26.38210297 74.98947906]
[32.71940613 89.91556549]
[47.70840073 90.49011230]
[62.69739151 91.06465149]
[77.68638611 91.63919067]
[92.67537689 92.21372986]
[107.63136292 91.06549072]
[122.35698700 88.20962524]
[137.08261108 85.35375977]
[151.80824280 82.49789429]
[166.53385925 79.64202881]
[181.25949097 76.78616333]
[195.98510742 73.93029785]
[200.65884399 62.84856415]
[210.04046631 55.51734924]
[221.68501282 53.69832611]
[232.62922668 57.73557663]
[240.14575195 66.49787903]
[254.99800110 64.39763641]
[269.85021973 62.29739380]
[278.02026367 57.95198441]
[285.10806274 60.33819962]
[300.00909424 58.61794662]
[314.91012573 56.89769363]
[329.81115723 55.17744446]
[344.71218872 53.45719147]
[359.61322021 51.73694229]
[374.51425171 50.01668930]
[379.96636963 35.71518326]
[391.44790649 25.59425163]
[406.32046509 21.97960663]
[421.16644287 25.70186615]
[432.57437134 35.90568542]
[437.92276001 50.24629974]
[435.98260498 65.42834473]
[427.19973755 77.96308899]
[413.59240723 84.97014618]
[398.28744507 84.83934784]
[384.80184937 77.60074615]
[376.23452759 64.91772461]
[361.33349609 66.63796997]
[346.43246460 68.35822296]
[331.53143311 70.07847595]
[316.63040161 71.79872894]
[301.72937012 73.51898193]
[286.82833862 75.23922729]
[271.95046997 77.14963531]
[257.09823608 79.24987793]
[242.24600220 81.35011292]
[232.25466919 96.58745575]
[214.00776672 99.85486603]
[198.84097290 88.65592194]
[184.11535645 91.51178741]
[169.38972473 94.36765289]
[154.66410828 97.22351837]
[139.93847656 100.07938385]
[125.21285248 102.93524933]
[110.48722839 105.79112244]
[123.28282928 113.61880493]
[129.97798157 127.04173279]
[128.53372192 141.97204590]
[119.38988495 153.86280823]
[105.33116913 159.09277344]
[90.63906097 156.06919861]
[79.78794861 145.71287537]
[76.08245087 131.17778015]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 62]
[2 61]
[3 60]
[4 59]
[5 58]
[12 52]
[13 51]
[14 50]
[15 49]
[16 48]
[17 47]
[18 46]
[20 44]
[21 43]
[25 39]
[26 38]
[27 37]
[28 36]
[63 114]
[64 113]
[65 112]
[66 111]
[67 110]
[68 109]
[69 108]
[74 105]
[75 104]
[76 103]
[78 102]
[79 101]
[80 100]
[81 99]
[82 98]
[83 97]
[84 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
