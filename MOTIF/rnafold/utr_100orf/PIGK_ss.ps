%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:22:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGCCUCCGCCCCUUCAGGUGCGGGAAGUCUGAAGCCGGUAAACAUGGCCGUCACCGACAGCCUCAGCCGGGCUGCGACUGUCUUGGCAACUGUGUUGCUCUUGUCCUUCGGCAGCGUGGCCGCUAGUCAUAUCGAGGAUCAAG\
) } def
/len { sequence length } bind def

/coor [
[151.41319275 167.01260376]
[144.84095764 180.49613953]
[131.39025879 187.13531494]
[116.68997955 184.15171814]
[106.89195251 172.79396057]
[106.09648895 157.81507874]
[114.63750458 145.48271179]
[104.85901642 156.85729980]
[95.08052826 168.23188782]
[85.30204773 179.60647583]
[75.52355957 190.98106384]
[65.86801910 202.46020508]
[56.33653259 214.04254150]
[56.45017624 230.08520508]
[43.88825607 240.06405640]
[28.28719711 236.32420349]
[21.61479950 221.73452759]
[28.98955727 207.48698425]
[44.75418472 204.51106262]
[54.28567123 192.92871094]
[56.12059402 185.71301270]
[64.14897156 181.20257568]
[73.92745972 169.82798767]
[83.70594788 158.45341492]
[93.48442841 147.07882690]
[103.26291656 135.70423889]
[73.47654724 117.42186737]
[75.76092529 86.77126312]
[65.04082489 76.27938843]
[54.32072067 65.78751373]
[43.60062027 55.29563904]
[30.19456482 56.98708344]
[18.44450188 50.71918488]
[12.55775928 38.99143219]
[14.49415207 26.21005249]
[4.00227690 15.48995113]
[-6.48959827 4.76985025]
[-16.98147392 -5.95025015]
[-27.58807564 -16.55685234]
[-38.30817413 -27.04872704]
[-49.02827454 -37.54060364]
[-59.94365692 -33.65436935]
[-71.46777344 -34.15519333]
[-81.91106415 -38.93083954]
[-89.75701904 -47.24519348]
[-93.88238525 -57.85143661]
[-93.71787262 -69.17897034]
[-89.32637787 -79.56594849]
[-99.34733582 -90.72750854]
[-109.36829376 -101.88906860]
[-124.34504700 -106.98881531]
[-127.09032440 -121.62824249]
[-137.11128235 -132.78979492]
[-147.13223267 -143.95135498]
[-162.21289062 -151.69798279]
[-158.94375610 -168.33375549]
[-142.05313110 -169.79762268]
[-135.97068787 -153.97232056]
[-125.94972229 -142.81076050]
[-115.92876434 -131.64920044]
[-101.66877747 -127.34780121]
[-98.20674133 -111.91002655]
[-88.18578339 -100.74846649]
[-78.16482544 -89.58690643]
[-59.79939651 -92.63187408]
[-43.13776016 -83.99999237]
[-34.90256119 -66.97341156]
[-38.53639984 -48.26070404]
[-27.81630135 -37.76882935]
[-17.09619904 -27.27695274]
[-10.06494331 -24.82852364]
[-6.26137209 -16.44212532]
[4.23050261 -5.72202444]
[14.72237778 4.99807644]
[25.21425247 15.71817684]
[41.99006271 15.15988827]
[54.24467087 27.11748695]
[54.09249496 44.57553864]
[64.81259918 55.06741333]
[75.53269958 65.55928802]
[86.25279999 76.05116272]
[95.48521423 71.36659241]
[106.27915192 70.29609680]
[117.20547485 73.33566284]
[126.69155121 80.41396332]
[133.24594116 90.85850525]
[135.68663025 103.45010376]
[147.47137451 94.17003632]
[159.25613403 84.88996124]
[171.04087830 75.60989380]
[182.82562256 66.32981873]
[194.61036682 57.04974747]
[203.31369019 42.50022507]
[219.70391846 46.83570099]
[220.07514954 63.78558350]
[203.89044189 68.83449554]
[192.10569763 78.11457062]
[180.32095337 87.39463806]
[168.53619385 96.67471313]
[156.75144958 105.95478058]
[144.96670532 115.23484802]
[145.45077515 130.22703552]
[157.80961609 138.72756958]
[170.16845703 147.22808838]
[182.52729797 155.72862244]
[194.97688293 164.09568787]
[207.51576233 172.32833862]
[220.05465698 180.56097412]
[232.59353638 188.79362488]
[245.13241577 197.02626038]
[267.49774170 196.49858093]
[276.81604004 216.00483704]
[290.01620483 223.12910461]
[303.21640015 230.25337219]
[316.49246216 237.23521423]
[329.84289551 244.07382202]
[343.19329834 250.91241455]
[356.54370117 257.75100708]
[372.88610840 256.38803101]
[382.01416016 270.01196289]
[374.53765869 284.60763550]
[358.14782715 285.16030884]
[349.70510864 271.10144043]
[336.35470581 264.26281738]
[323.00427246 257.42422485]
[309.65386963 250.58563232]
[302.21276855 250.33372498]
[296.09213257 243.45355225]
[282.89193726 236.32929993]
[269.69177246 229.20503235]
[262.65768433 233.09178162]
[254.56193542 233.84834290]
[246.74993896 231.27307129]
[240.55032349 225.72441101]
[237.04908752 218.07289124]
[236.89976501 209.56513977]
[224.36088562 201.33250427]
[211.82200623 193.09985352]
[199.28312683 184.86721802]
[186.74424744 176.63456726]
[179.37321472 175.58508301]
[174.02677917 168.08746338]
[161.66793823 159.58692932]
[149.30908203 151.08641052]
[136.95024109 142.58587646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 26]
[8 25]
[9 24]
[10 23]
[11 22]
[12 20]
[13 19]
[28 81]
[29 80]
[30 79]
[31 78]
[35 75]
[36 74]
[37 73]
[38 72]
[39 70]
[40 69]
[41 68]
[48 64]
[49 63]
[50 62]
[52 60]
[53 59]
[54 58]
[87 101]
[88 100]
[89 99]
[90 98]
[91 97]
[92 96]
[102 145]
[103 144]
[104 143]
[105 142]
[106 140]
[107 139]
[108 138]
[109 137]
[110 136]
[112 130]
[113 129]
[114 128]
[115 126]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
