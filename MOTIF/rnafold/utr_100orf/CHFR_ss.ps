%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGAGGGAGCCGCAAUGUCUCUUGACAGCGGCGGCGGCGCAGCCGGUUCCGGGUUCGGCGCGGGGCGGGGAUGUGAAUCCCGAUGGAGCGGCCCGAGGAAGGCAAGCAGUCGCCGCCGCCGCAGCCCUGGGGACGGCUCCUGCGUCUGGGCGCGGAGGAGGGCGAGCCGCACGUCCUCCUGA\
) } def
/len { sequence length } bind def

/coor [
[80.25464630 119.72337341]
[72.75708008 119.53234863]
[64.78430176 132.23805237]
[56.81152344 144.94375610]
[48.83874512 157.64945984]
[48.59854126 176.05148315]
[32.79973221 183.66879272]
[25.04385948 196.50804138]
[17.28798485 209.34729004]
[9.53210926 222.18653870]
[1.77623451 235.02580261]
[1.26348412 250.83869934]
[-11.94000149 257.73196411]
[-19.69587517 270.57122803]
[-22.71026611 287.25503540]
[-39.57653809 288.97698975]
[-45.90024948 273.24655151]
[-32.53512955 262.81533813]
[-24.77925301 249.97608948]
[-24.82125473 235.08154297]
[-11.06301785 227.26992798]
[-3.30714345 214.43066406]
[4.44873142 201.59141541]
[12.20460606 188.75216675]
[19.96048164 175.91291809]
[17.36800766 164.08276367]
[23.74369049 153.31706238]
[36.13304520 149.67668152]
[44.10582352 136.97097778]
[52.07859802 124.26527405]
[60.05137634 111.55957031]
[59.92401505 96.56011200]
[51.73663712 83.99163055]
[43.54925537 71.42314148]
[35.36187744 58.85466003]
[27.17449760 46.28617477]
[18.98711777 33.71768951]
[10.79973698 21.14920616]
[2.61235738 8.58071995]
[-5.57502222 -3.98776460]
[-13.86882210 -16.48628044]
[-22.26844406 -28.91392517]
[-39.00357819 -36.57080841]
[-39.58598709 -54.10039520]
[-48.19543076 -66.38362122]
[-56.80487061 -78.66683960]
[-69.36353302 -81.67160034]
[-76.27915955 -92.09867096]
[-74.29247284 -104.04548645]
[-82.69210052 -116.47312927]
[-91.09172058 -128.90077209]
[-99.59655762 -141.25665283]
[-108.20600128 -153.53987122]
[-116.81543732 -165.82308960]
[-125.42488098 -178.10632324]
[-134.03431702 -190.38954163]
[-138.08270264 -192.09780884]
[-141.06500244 -194.74736023]
[-142.81541443 -197.88282776]
[-143.33470154 -201.04208374]
[-142.77774048 -203.81158447]
[-150.53361511 -216.65084839]
[-158.28948975 -229.49009705]
[-173.30207825 -227.27703857]
[-187.97868347 -230.97033691]
[-200.09040833 -239.97698975]
[-207.81019592 -252.89955139]
[-209.98840332 -267.75283813]
[-206.32392883 -282.26892090]
[-197.40536499 -294.24343872]
[-205.16123962 -307.08267212]
[-212.91711426 -319.92193604]
[-220.67300415 -332.76119995]
[-228.42887878 -345.60043335]
[-243.04399109 -353.03887939]
[-243.63934326 -369.42721558]
[-229.60249329 -377.90652466]
[-215.37333679 -369.75402832]
[-215.58961487 -353.35632324]
[-207.83374023 -340.51705933]
[-200.07786560 -327.67782593]
[-192.32199097 -314.83856201]
[-184.56611633 -301.99929810]
[-169.81704712 -304.32183838]
[-155.26300049 -300.81109619]
[-143.12910461 -291.97180176]
[-135.28271484 -279.12570190]
[-132.94604492 -264.21417236]
[-136.50595093 -249.50466919]
[-145.45022583 -237.24597168]
[-137.69435120 -224.40672302]
[-129.93847656 -211.56745911]
[-121.75110626 -198.99897766]
[-113.14166260 -186.71575928]
[-104.53221893 -174.43254089]
[-95.92277527 -162.14932251]
[-87.31333923 -149.86608887]
[-80.88484192 -146.18489075]
[-78.66407013 -137.30039978]
[-70.26445007 -124.87274933]
[-61.86483002 -112.44510651]
[-45.69862366 -105.64221191]
[-44.52165222 -87.27628326]
[-35.91220856 -74.99305725]
[-27.30276871 -62.70983887]
[-15.43406868 -60.30001068]
[-8.16348362 -50.11726379]
[-9.84079933 -37.31354523]
[-1.44117737 -24.88590240]
[4.92388248 -21.09605980]
[6.99346256 -12.17514420]
[15.18084240 0.39334056]
[23.36822128 12.96182537]
[31.55560112 25.53030968]
[39.74298096 38.09879684]
[47.93036270 50.66727829]
[56.11774063 63.23576355]
[64.30512238 75.80425262]
[72.49250031 88.37273407]
[97.63825989 71.19653320]
[123.61650085 85.07691193]
[138.61595154 85.20427704]
[153.61541748 85.33163452]
[168.61486816 85.45899200]
[177.24563599 82.39700317]
[183.86740112 85.71803284]
[198.86253357 86.10007477]
[213.85766602 86.48211670]
[228.85279846 86.86416626]
[233.47648621 84.34473419]
[238.13626099 83.91005707]
[242.02679443 85.22113800]
[244.59643555 87.66691589]
[259.55267334 88.81205750]
[274.50888062 89.95719910]
[289.46511841 91.10234070]
[304.42132568 92.24748230]
[315.22811890 80.94493103]
[330.77728271 79.28453064]
[343.72702026 88.05027771]
[347.96286011 103.10324097]
[341.48474121 117.33588409]
[327.35147095 124.02797699]
[312.23629761 120.01972961]
[303.27618408 107.20370483]
[288.31997681 106.05856323]
[273.36373901 104.91342163]
[258.40753174 103.76828003]
[243.45129395 102.62313843]
[228.47074890 101.85929871]
[213.47561646 101.47725677]
[198.48048401 101.09520721]
[183.48535156 100.71316528]
[168.48751831 100.45845032]
[153.48805237 100.33109283]
[138.48860168 100.20373535]
[123.48913574 100.07637024]
[115.84255981 112.98101807]
[123.15798187 126.07622528]
[130.47340393 139.17143250]
[137.78883362 152.26664734]
[145.10424805 165.36186218]
[152.41967773 178.45707703]
[159.73510742 191.55229187]
[167.05052185 204.64749146]
[174.36595154 217.74270630]
[189.75891113 220.49787903]
[199.73985291 232.53593445]
[199.59611511 248.17285156]
[189.39553833 260.02536011]
[173.95452881 262.49710083]
[160.56387329 254.42094421]
[155.54620361 239.61024475]
[161.27073669 225.05813599]
[153.95530701 211.96292114]
[146.63989258 198.86770630]
[139.32446289 185.77249146]
[132.00904846 172.67729187]
[124.69361877 159.58207703]
[117.37819672 146.48686218]
[110.06276703 133.39164734]
[102.74734497 120.29644012]
[95.24977875 120.10541534]
[94.86750031 135.10054016]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[5 28]
[7 25]
[8 24]
[9 23]
[10 22]
[11 21]
[13 19]
[14 18]
[32 119]
[33 118]
[34 117]
[35 116]
[36 115]
[37 114]
[38 113]
[39 112]
[40 111]
[41 109]
[42 108]
[44 105]
[45 104]
[46 103]
[49 101]
[50 100]
[51 99]
[52 97]
[53 96]
[54 95]
[55 94]
[56 93]
[61 92]
[62 91]
[63 90]
[70 83]
[71 82]
[72 81]
[73 80]
[74 79]
[121 157]
[122 156]
[123 155]
[124 154]
[126 153]
[127 152]
[128 151]
[129 150]
[133 149]
[134 148]
[135 147]
[136 146]
[137 145]
[158 182]
[159 181]
[160 180]
[161 179]
[162 178]
[163 177]
[164 176]
[165 175]
[166 174]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
