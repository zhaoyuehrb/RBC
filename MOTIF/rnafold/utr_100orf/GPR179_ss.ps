%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:59:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCUGAGAGCUGCCCCAAGGAUGGGCACCAGGGGAGCGGUCAUGCCCCCUCCUAUGUGGGGGCUGCUGGGCUGCUGUUUUGUCUGUGCCUGGGCUCUGGGGGGUCCACGGCCCAUCCGCU\
) } def
/len { sequence length } bind def

/coor [
[83.71520996 117.01007080]
[75.02389526 129.23548889]
[66.33258057 141.46092224]
[57.64126205 153.68634033]
[48.94994736 165.91177368]
[56.73614120 178.99974060]
[58.51938248 194.12390137]
[53.99070358 208.66387939]
[43.93473434 220.10054016]
[30.09372711 226.45242310]
[14.86572170 226.61901855]
[0.88906276 220.57147217]
[-9.41471004 209.35754395]
[-14.26040554 194.92012024]
[-12.80847740 179.76057434]
[-5.31048155 166.50538635]
[6.93450975 157.45111084]
[21.80497742 154.16642761]
[36.72452164 157.22045898]
[45.41584015 144.99502563]
[54.10715485 132.76960754]
[62.79846954 120.54417419]
[71.48978424 108.31875610]
[91.25462341 90.66837311]
[88.56541443 75.91140747]
[85.87619781 61.15443420]
[83.18698883 46.39746475]
[80.49777985 31.64049721]
[77.80856323 16.88352776]
[74.55149841 2.24141312]
[70.73143005 -12.26400280]
[66.91136169 -26.76941872]
[63.09129715 -41.27483368]
[59.27122879 -55.78025055]
[48.27453995 -67.15493011]
[52.51545715 -81.43302155]
[48.69538879 -95.93843842]
[44.87532425 -110.44385529]
[41.05525589 -124.94927216]
[37.23519135 -139.45468140]
[33.41512299 -153.96009827]
[29.59505653 -168.46551514]
[11.76792526 -177.48513794]
[6.22069502 -196.36584473]
[16.03191757 -213.07707214]
[11.10378265 -227.24440002]
[6.17564678 -241.41174316]
[1.24751127 -255.57908630]
[-3.68062449 -269.74642944]
[-8.60875988 -283.91375732]
[-23.50042534 -288.27471924]
[-32.95806122 -300.57644653]
[-33.34501648 -316.08871460]
[-24.51249695 -328.84667969]
[-9.85678673 -333.94470215]
[4.98669434 -329.42245483]
[14.31032467 -317.01885986]
[14.52897835 -301.50332642]
[5.55857801 -288.84188843]
[10.48671436 -274.67456055]
[15.41484928 -260.50723267]
[20.34298515 -246.33987427]
[25.27112198 -232.17254639]
[30.19925690 -218.00520325]
[40.49966049 -216.13670349]
[49.12554550 -210.06257629]
[54.43757248 -200.85346985]
[55.39118195 -190.18322754]
[51.74130630 -180.02485657]
[44.10047150 -172.28558350]
[47.92053986 -157.78016663]
[51.74060440 -143.27474976]
[55.56067276 -128.76933289]
[59.38073730 -114.26392365]
[63.20080566 -99.75850677]
[67.02087402 -85.25308990]
[77.74432373 -74.91593170]
[73.77664948 -59.60031891]
[77.59671021 -45.09490204]
[81.41677856 -30.58948517]
[85.23684692 -16.08407021]
[89.05691528 -1.57865369]
[92.02439880 0.52722502]
[94.06669617 4.23167801]
[94.41758728 9.05808640]
[92.56553650 14.19431591]
[95.25474548 28.95128441]
[97.94396210 43.70825577]
[100.63317108 58.46522522]
[103.32238007 73.22219086]
[106.01158905 87.97916412]
[114.22431946 100.53109741]
[126.66947937 108.90475464]
[139.11463928 117.27841187]
[151.55978394 125.65206146]
[164.00494385 134.02572632]
[179.77392578 135.31011963]
[186.01416016 148.83450317]
[198.45930481 157.20816040]
[210.90446472 165.58181763]
[226.86186218 163.92616272]
[238.00233459 175.47039795]
[235.77987671 191.35876465]
[221.89936829 199.40306091]
[207.00872803 193.43240356]
[202.53080750 178.02696228]
[190.08564758 169.65330505]
[177.64050293 161.27964783]
[162.76167297 160.59419250]
[155.63128662 146.47087097]
[143.18612671 138.09721375]
[130.74098206 129.72355652]
[118.29582214 121.34990692]
[105.85066986 112.97624969]
[112.75777435 126.29135132]
[121.76615906 138.28506470]
[121.25562286 153.27636719]
[111.45215607 164.62944031]
[96.69522095 167.31886292]
[83.51692963 160.15419006]
[77.75059509 146.30682373]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[5 19]
[24 91]
[25 90]
[26 89]
[27 88]
[28 87]
[29 86]
[30 82]
[31 81]
[32 80]
[33 79]
[34 78]
[36 76]
[37 75]
[38 74]
[39 73]
[40 72]
[41 71]
[42 70]
[45 64]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[92 114]
[93 113]
[94 112]
[95 111]
[96 110]
[98 108]
[99 107]
[100 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
