%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:47:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUAUAUCAUACGAAAAUGAAAAUUAUAAUUCUUCUUGGAUUCCUGGGAGCCACAUUGUCAGCCCCACUUAUCCCACAGCGUCUCAUGUCUGCCAGCAAUAGCAAUGAGUUACUUC\
) } def
/len { sequence length } bind def

/coor [
[123.68055725 156.43217468]
[115.01086426 159.32986450]
[106.00627136 160.90388489]
[96.86768341 161.11912537]
[87.79897308 159.97077942]
[79.00247192 157.48445129]
[70.67443085 153.71563721]
[63.00065613 148.74841309]
[52.53618622 159.49526978]
[42.07171249 170.24211121]
[31.60723877 180.98896790]
[32.06820297 196.78652954]
[21.16296196 208.22555542]
[5.36140633 208.51947021]
[-5.96168280 197.49389648]
[-6.08851767 181.69012451]
[5.05615044 170.48423767]
[20.86038780 170.52449036]
[31.32486153 159.77763367]
[41.78933334 149.03079224]
[52.25380707 138.28393555]
[48.27176666 132.70394897]
[44.93875504 126.71363831]
[42.29660034 120.38814545]
[40.37844467 113.80683899]
[39.20835495 107.05230713]
[38.80102158 100.20928192]
[39.16154480 93.36363983]
[40.28540802 86.60125732]
[42.15850449 80.00698853]
[44.75733948 73.66357422]
[48.04930115 67.65059662]
[51.99308395 62.04351044]
[56.53921127 56.91266251]
[61.63063431 52.32242966]
[67.20348358 48.33040237]
[73.18782043 44.98667526]
[79.50857544 42.33319473]
[86.08643341 40.40325928]
[84.49202728 25.48823738]
[82.89762878 10.57321548]
[81.30322266 -4.34180689]
[68.01468658 -12.13417339]
[61.93365479 -26.09391785]
[65.20002747 -40.78387451]
[76.35655975 -50.61594772]
[74.76216125 -65.53096771]
[73.16775513 -80.44599152]
[71.57335663 -95.36101532]
[67.50383759 -103.68543243]
[70.14047241 -110.69355011]
[68.94368744 -125.64572906]
[55.03792572 -132.16688538]
[46.26893616 -144.77642822]
[44.99552536 -160.08242798]
[51.56023788 -173.96768188]
[64.19719696 -182.69709778]
[79.50712585 -183.92253113]
[93.37172699 -177.31433105]
[102.06150055 -164.65007019]
[103.23892975 -149.33638000]
[96.58730316 -135.49255371]
[83.89586639 -126.84252167]
[85.09265900 -111.89034271]
[86.48837280 -96.95541382]
[88.08277893 -82.04039764]
[89.67717743 -67.12537384]
[91.27158356 -52.21035004]
[104.25434875 -44.95874405]
[110.55210876 -31.29118538]
[107.55933380 -16.36145973]
[96.21824646 -5.93620920]
[97.81265259 8.97881317]
[99.40705109 23.89383507]
[101.00145721 38.80885696]
[128.66194153 45.92734909]
[150.07958984 64.82339478]
[160.58940125 91.38124084]
[157.90225220 119.81634521]
[171.39193726 126.37595367]
[185.04631042 119.24404144]
[200.10597229 121.49347687]
[210.82661438 132.05435181]
[213.24394226 146.72726440]
[226.73361206 153.28688049]
[240.22329712 159.84649658]
[253.71298218 166.40609741]
[267.20266724 172.96571350]
[272.66723633 172.56100464]
[277.23471069 174.20759583]
[280.25506592 177.18714905]
[281.47506714 180.62503052]
[294.39837646 188.24002075]
[307.32168579 195.85501099]
[321.49847412 189.54641724]
[336.66879272 192.80850220]
[346.99935913 204.38690186]
[348.51782227 219.82949829]
[340.64031982 233.19830322]
[326.39593506 239.35272217]
[311.26190186 235.92626953]
[301.05755615 224.23648071]
[299.70672607 208.77832031]
[286.78338623 201.16333008]
[273.86007690 193.54833984]
[260.64306641 186.45539856]
[247.15336609 179.89578247]
[233.66369629 173.33616638]
[220.17401123 166.77656555]
[206.68432617 160.21694946]
[193.65055847 167.37649536]
[178.72363281 165.46575928]
[167.65461731 155.00964355]
[164.83233643 139.86563110]
[151.34265137 133.30603027]
[145.80900574 140.58193970]
[139.25334167 146.95246887]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 21]
[9 20]
[10 19]
[11 18]
[39 75]
[40 74]
[41 73]
[42 72]
[46 68]
[47 67]
[48 66]
[49 65]
[51 64]
[52 63]
[79 115]
[80 114]
[84 110]
[85 109]
[86 108]
[87 107]
[88 106]
[92 105]
[93 104]
[94 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
