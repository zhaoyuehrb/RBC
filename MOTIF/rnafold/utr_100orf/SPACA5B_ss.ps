%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:10:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUCCGAACACCACAGGGUGAGUCUGGAGCAAGUCACCUGGGAGGGCUUACAGGUGCCAUAAUGAAGGCCUGGGGCACUGUGGUAGUGACCUUGGCCACGCUGAUGGUUGUCACUGUGGAUGCCAAGAUCUAUGAACGCUGCGAGCUGGCGGCAAGACUGG\
) } def
/len { sequence length } bind def

/coor [
[65.47276306 194.51162720]
[55.53441620 197.67033386]
[45.26505661 196.40342712]
[36.35498428 208.47035217]
[27.44491386 220.53726196]
[18.53484154 232.60418701]
[9.74146938 244.75642395]
[1.06561053 256.99282837]
[-0.19934817 275.34127808]
[-16.38140869 282.07861328]
[-24.81983185 294.47994995]
[-33.25825500 306.88128662]
[-41.69667816 319.28259277]
[-42.36690903 335.66806030]
[-57.01585770 343.03964233]
[-70.57394409 333.81411743]
[-69.09376526 317.48190308]
[-54.09800720 310.84417725]
[-45.65958405 298.44284058]
[-37.22116089 286.04153442]
[-28.78273964 273.64019775]
[-30.73024940 261.67105103]
[-23.76070213 251.26065063]
[-11.17078972 248.31695557]
[-2.49493074 236.08055115]
[-1.18520880 228.77014160]
[6.46791983 223.69412231]
[15.37799168 211.62719727]
[24.28806305 199.56027222]
[33.19813538 187.49334717]
[28.85004044 168.54536438]
[39.94671631 152.21504211]
[59.76397705 149.18859863]
[67.96183014 136.62693787]
[76.15968323 124.06528473]
[84.35753632 111.50362396]
[78.71759033 97.60430908]
[64.08454132 94.30677032]
[49.45148468 91.00923157]
[34.81843185 87.71170044]
[20.18537712 84.41416168]
[9.82882786 95.75600433]
[-4.81597424 100.38475800]
[-19.80965042 97.05530548]
[-31.11897659 86.66325378]
[-35.70180130 72.00401306]
[-32.32536697 57.02085114]
[-21.89791870 45.74415207]
[-7.22438717 41.20730209]
[7.74812222 44.63068390]
[18.99207878 55.09342575]
[23.48291397 69.78110504]
[38.11596680 73.07864380]
[52.74901962 76.37618256]
[67.38207245 79.67371368]
[82.01512909 82.97125244]
[93.99562836 73.94531250]
[94.86245728 58.97037888]
[95.72928619 43.99544525]
[96.59610748 29.02051163]
[97.46293640 14.04557991]
[83.83111572 7.37855625]
[73.81735992 -3.96902490]
[68.92424011 -18.24736786]
[69.86795044 -33.27058411]
[76.47359467 -46.75132370]
[87.70661163 -56.64903259]
[101.83468628 -61.47882080]
[102.70151520 -76.45375061]
[103.56834412 -91.42868805]
[104.43517303 -106.40361786]
[97.50829315 -120.62785339]
[105.96815491 -132.88673401]
[106.83497620 -147.86166382]
[107.70180511 -162.83659363]
[100.77492523 -177.06083679]
[109.23478699 -189.31971741]
[110.10161591 -204.29464722]
[110.96844482 -219.26957703]
[111.83527374 -234.24450684]
[112.70209503 -249.21943665]
[107.58118439 -265.38150024]
[121.69402313 -274.77639771]
[134.62858582 -263.81585693]
[127.67703247 -248.35261536]
[126.81020355 -233.37768555]
[125.94337463 -218.40274048]
[125.07654572 -203.42781067]
[124.20972443 -188.45288086]
[131.19859314 -175.29975891]
[122.67674255 -161.96977234]
[121.80991364 -146.99484253]
[120.94308472 -132.01989746]
[127.93196106 -118.86677551]
[119.41010284 -105.53678894]
[118.54327393 -90.56185913]
[117.67644501 -75.58692932]
[116.80961609 -60.61199188]
[130.28605652 -54.18431091]
[140.30200195 -43.05659866]
[145.30807495 -28.90371323]
[144.51203918 -13.87195015]
[138.00411987 -0.25355840]
[126.74790955 9.86280537]
[112.43787384 14.91240788]
[111.57104492 29.88734055]
[110.70421600 44.86227417]
[109.83738708 59.83720398]
[108.97055817 74.81214142]
[111.09477997 59.96331024]
[121.86391449 49.52177429]
[136.77127075 47.85714722]
[149.57833862 55.66604233]
[154.92558289 69.68056488]
[150.57527161 84.03587341]
[138.34793091 92.72449493]
[123.35932922 92.10992432]
[138.24177551 93.98418427]
[153.12422180 95.85844421]
[168.00665283 97.73271179]
[182.88909912 99.60697174]
[197.77154541 101.48123169]
[210.10038757 91.59310150]
[225.80082703 93.40196228]
[235.55805969 105.83466339]
[233.58329773 121.51509094]
[221.04814148 131.14033508]
[205.38946533 128.99990845]
[195.89729309 116.36367798]
[181.01484680 114.48941803]
[166.13240051 112.61515045]
[151.24995422 110.74089050]
[136.36750793 108.86663055]
[121.48506165 106.99237061]
[117.69341278 113.46333313]
[130.63522339 121.04685211]
[123.05148315 133.98852539]
[110.11011505 126.40526581]
[106.31845856 132.87622070]
[115.22853088 144.94314575]
[124.13860321 157.01007080]
[133.04867554 169.07699585]
[141.95875549 181.14392090]
[157.62239075 183.24769592]
[167.14410400 195.86167908]
[164.87483215 211.50219727]
[152.16088867 220.89002991]
[136.54524231 218.45552063]
[127.29235840 205.64303589]
[129.89183044 190.05398560]
[120.98175049 177.98706055]
[112.07168579 165.92015076]
[103.16161346 153.85322571]
[94.25154114 141.78630066]
[95.05056000 134.41276550]
[95.93981934 127.05087280]
[96.91918945 119.70147705]
[88.72133636 132.26313782]
[80.52348328 144.82479858]
[72.32563019 157.38644409]
[77.08798981 167.02661133]
[77.39072418 177.69361877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 30]
[4 29]
[5 28]
[6 27]
[7 25]
[8 24]
[10 21]
[11 20]
[12 19]
[13 18]
[33 160]
[34 159]
[35 158]
[36 157]
[37 56]
[38 55]
[39 54]
[40 53]
[41 52]
[57 109]
[58 108]
[59 107]
[60 106]
[61 105]
[68 98]
[69 97]
[70 96]
[71 95]
[73 93]
[74 92]
[75 91]
[77 89]
[78 88]
[79 87]
[80 86]
[81 85]
[117 134]
[118 133]
[119 132]
[120 131]
[121 130]
[122 129]
[139 154]
[140 153]
[141 152]
[142 151]
[143 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
