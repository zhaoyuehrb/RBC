%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:10:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGCCCCGGGCUGCUGCUGCUCGGCAGCGCCGUCCUGCUCGCCUUCGGCCUCUGCUGCACCUUCGUGCACCGCGCUCGCAGCCGCUACGAGCACAUCC\
) } def
/len { sequence length } bind def

/coor [
[66.51959229 134.76779175]
[71.90586853 120.76821136]
[82.80416870 110.46630096]
[68.02313995 113.01995087]
[53.24210739 115.57360840]
[38.46107483 118.12725830]
[32.58204269 127.54228973]
[22.65189171 131.98335266]
[12.15210629 130.16435242]
[4.61522388 122.94828033]
[-10.29597378 124.57805634]
[-25.20717049 126.20783997]
[-40.11837006 127.83762360]
[-52.99616623 137.02853394]
[-66.48876953 130.71989441]
[-81.39996338 132.34967041]
[-89.76219177 136.45646667]
[-96.79922485 133.79083252]
[-111.75389862 134.95608521]
[-126.70857239 136.12135315]
[-141.66323853 137.28660583]
[-156.61790466 138.45185852]
[-171.93946838 145.71037292]
[-183.15574646 132.99694824]
[-174.04414368 118.69956970]
[-157.78317261 123.49719238]
[-142.82849121 122.33193207]
[-127.87382507 121.16667938]
[-112.91915894 120.00141907]
[-97.96448517 118.83615875]
[-83.02974701 117.43847656]
[-68.11854553 115.80869293]
[-56.30729675 106.73435211]
[-41.74814987 112.92642975]
[-26.83695412 111.29664612]
[-11.92575550 109.66686249]
[2.98544145 108.03707886]
[17.50076675 95.42287445]
[35.90742111 103.34622955]
[50.68845367 100.79257202]
[65.46948242 98.23892212]
[80.25051117 95.68527222]
[88.60829926 83.22944641]
[85.36802673 68.58361053]
[82.12776184 53.93776703]
[72.80264282 39.77872086]
[83.82689667 26.89842224]
[99.25565338 33.92621994]
[96.77360535 50.69749832]
[100.01387024 65.34333801]
[103.25413513 79.98918152]
[110.27940369 82.61512756]
[115.53153992 68.56468201]
[129.58189392 73.81704712]
[124.32994080 87.86702728]
[131.35520935 90.49297333]
[143.40766907 81.56333923]
[155.17657471 72.26319885]
[166.65057373 62.60154343]
[178.12455750 52.93988800]
[189.59854126 43.27823257]
[201.07252502 33.61657333]
[206.14291382 18.02095985]
[222.23834229 14.87937832]
[232.80120850 27.42362022]
[226.96533203 42.74924469]
[210.73419189 45.09056091]
[199.26020813 54.75222015]
[187.78620911 64.41387177]
[176.31222534 74.07553101]
[164.83824158 83.73719025]
[163.54548645 88.50369263]
[159.13653564 92.43698883]
[152.33729553 93.61579895]
[140.28485107 102.54543304]
[140.75134277 117.53817749]
[153.33563232 125.70124054]
[165.91992188 133.86430359]
[178.50422668 142.02735901]
[191.08851624 150.19042969]
[206.87687683 151.20930481]
[213.34378052 164.62677002]
[225.92807007 172.78984070]
[242.50680542 176.33695984]
[243.68774414 193.24972534]
[227.76286316 199.06643677]
[217.76501465 185.37413025]
[205.18072510 177.21105957]
[190.29246521 176.77606201]
[182.92544556 162.77471924]
[170.34115601 154.61164856]
[157.75686646 146.44859314]
[145.17257690 138.28552246]
[132.58828735 130.12246704]
[133.50859070 145.09420776]
[127.87672424 158.99679565]
[116.79586029 169.10691833]
[102.43659973 173.44413757]
[87.61170197 171.15887451]
[75.22515869 162.69874573]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 42]
[4 41]
[5 40]
[6 39]
[10 37]
[11 36]
[12 35]
[13 34]
[15 32]
[16 31]
[18 30]
[19 29]
[20 28]
[21 27]
[22 26]
[43 51]
[44 50]
[45 49]
[56 75]
[57 74]
[58 71]
[59 70]
[60 69]
[61 68]
[62 67]
[76 94]
[77 93]
[78 92]
[79 91]
[80 90]
[82 88]
[83 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
