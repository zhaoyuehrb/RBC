%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGUUAGCGGCCCGGAGUUGGCGCGGCCCCUGCAGUCCGGCGGAGAGCGGAGCUGAGGAUGGCUGUGCCCGGCUCCUUCCCGCUGCUGGUCGAGGGCUCCUGGGGCCCCGACCCCCCGAAGAACUUGAACACCAAGUUGCAGAUGUACUUCCAGAGCC\
) } def
/len { sequence length } bind def

/coor [
[58.10341644 106.13482666]
[72.43309021 101.70081329]
[87.26053619 103.97205353]
[72.60904694 100.75741577]
[57.95755768 97.54277802]
[48.85128021 98.76200104]
[43.05129242 94.11851501]
[28.46574402 90.61683655]
[13.88019466 87.11515808]
[-0.70535380 83.61347198]
[-15.29090214 80.11179352]
[-27.08971214 90.01605225]
[-42.28051758 91.06146240]
[-55.02335358 83.05621338]
[-60.54284668 69.24776459]
[-75.12839508 65.74608612]
[-89.71394348 62.24440384]
[-104.29949188 58.74272156]
[-118.88504028 55.24104309]
[-133.47059631 51.73936081]
[-148.05613708 48.23768234]
[-162.64169312 44.73600006]
[-177.26091003 41.37768173]
[-191.91239929 38.16304398]
[-206.56388855 34.94840622]
[-221.21537781 31.73376846]
[-235.86686707 28.51913071]
[-250.51835632 25.30449486]
[-265.16983032 22.08985710]
[-279.88162231 19.16350174]
[-294.64801025 16.52655792]
[-309.41442871 13.88961315]
[-318.46582031 15.46540833]
[-324.44363403 11.05321026]
[-339.15539551 8.12685585]
[-353.86718750 5.20050097]
[-368.60699463 2.41871738]
[-383.37338257 -0.21822678]
[-398.13977051 -2.85517097]
[-412.90618896 -5.49211502]
[-423.99795532 5.35924244]
[-439.35455322 7.58527565]
[-453.07098389 0.33002841]
[-459.87304688 -13.61670780]
[-457.14520264 -28.89212990]
[-445.93637085 -39.62252426]
[-430.55654907 -41.68183517]
[-416.91961670 -34.27821732]
[-410.26922607 -20.25851440]
[-395.50283813 -17.62156868]
[-380.73645020 -14.98462486]
[-365.97003174 -12.34768105]
[-358.79528809 -14.27764606]
[-350.94082642 -9.51127815]
[-336.22906494 -6.58492327]
[-321.51727295 -3.65856862]
[-306.77746582 -0.87678498]
[-292.01107788 1.76015925]
[-277.24468994 4.39710331]
[-272.84609985 2.41846180]
[-267.15362549 3.21874976]
[-261.95520020 7.43836832]
[-247.30371094 10.65300560]
[-232.65222168 13.86764336]
[-218.00073242 17.08228111]
[-203.34925842 20.29691696]
[-188.69776917 23.51155472]
[-174.04627991 26.72619247]
[-166.80128479 25.07939529]
[-159.14001465 30.15045166]
[-144.55445862 33.65213394]
[-129.96891785 37.15381241]
[-115.38336182 40.65549469]
[-100.79781342 44.15717316]
[-86.21226501 47.65885544]
[-71.62671661 51.16053391]
[-57.04116821 54.66221619]
[-45.85435867 44.86459732]
[-30.86609840 43.51699448]
[-17.80560112 51.34494400]
[-11.78922176 65.52624512]
[2.79632664 69.02792358]
[17.38187599 72.52960968]
[31.96742439 76.03128815]
[46.55297470 79.53296661]
[61.17219543 82.89128876]
[75.82368469 86.10592651]
[90.47517395 89.32056427]
[104.98915863 85.53318787]
[116.20178223 75.56940460]
[127.41440582 65.60561371]
[138.62702942 55.64183044]
[149.83966064 45.67804337]
[154.20582581 37.59426880]
[161.37162781 35.63135147]
[172.77770996 25.88962936]
[184.18380737 16.14790916]
[195.58988953 6.40618849]
[206.99598694 -3.33553219]
[218.40206909 -13.07725334]
[226.51945496 -27.96161842]
[243.06925964 -24.28186607]
[244.11474609 -7.36018419]
[228.14379883 -1.67116356]
[216.73770142 8.07055759]
[205.33161926 17.81227875]
[193.92552185 27.55399895]
[182.51943970 37.29571915]
[171.11334229 47.03744125]
[159.80345154 56.89066696]
[148.59082031 66.85445404]
[137.37818909 76.81824493]
[126.16557312 86.78202820]
[114.95294189 96.74581146]
[115.39447784 104.23280334]
[130.36846924 103.34997559]
[131.25106812 118.32398987]
[116.27754211 119.20679474]
[116.71907043 126.69378662]
[129.02508545 135.27059937]
[141.33111572 143.84742737]
[153.63713074 152.42424011]
[166.65199280 159.88168335]
[180.27413940 166.16159058]
[193.89628601 172.44148254]
[207.51843262 178.72137451]
[221.14057922 185.00128174]
[234.76272583 191.28117371]
[250.25128174 187.09974670]
[263.09155273 196.71780396]
[263.43356323 212.75721741]
[251.01496887 222.91389465]
[235.36225891 219.39653015]
[228.48283386 204.90332031]
[214.86068726 198.62342834]
[201.23854065 192.34352112]
[187.61639404 186.06362915]
[173.99424744 179.78373718]
[160.37210083 173.50384521]
[166.72425842 187.09243774]
[164.86038208 201.97618103]
[155.35356140 213.57879639]
[141.12686157 218.33280945]
[126.55452728 214.77653503]
[116.11711121 204.00338745]
[113.02380371 189.32580566]
[118.22569275 175.25668335]
[130.12336731 166.12184143]
[145.06031799 164.73027039]
[132.75428772 156.15344238]
[120.44827271 147.57662964]
[108.14225006 138.99980164]
[103.08864594 153.12287903]
[92.37329102 163.61959839]
[78.14906311 168.38102722]
[63.27380753 166.45051575]
[50.73619461 158.21594238]
[43.05520630 145.33175659]
[41.77407074 130.38656616]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 88]
[4 87]
[5 86]
[7 85]
[8 84]
[9 83]
[10 82]
[11 81]
[15 77]
[16 76]
[17 75]
[18 74]
[19 73]
[20 72]
[21 71]
[22 70]
[23 68]
[24 67]
[25 66]
[26 65]
[27 64]
[28 63]
[29 62]
[30 59]
[31 58]
[32 57]
[34 56]
[35 55]
[36 54]
[37 52]
[38 51]
[39 50]
[40 49]
[89 114]
[90 113]
[91 112]
[92 111]
[93 110]
[95 109]
[96 108]
[97 107]
[98 106]
[99 105]
[100 104]
[119 152]
[120 151]
[121 150]
[122 149]
[123 139]
[124 138]
[125 137]
[126 136]
[127 135]
[128 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
