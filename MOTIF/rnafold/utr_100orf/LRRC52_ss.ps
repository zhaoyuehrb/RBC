%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:18:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUCAGAGGACAGAGCCCGCAGGAAGGUGAAAGGAGGGUGGUUGUGGCUUCUUACUAUGUCCCUUGCUUCAGGCCCUGGCCCUGGGUGGUUACUCUUUUCCUUUGGAAUGGGGCUGGUAUCAGGGUCAAAGUGUCCAAAUAAUUGUCUGUGUCAAG\
) } def
/len { sequence length } bind def

/coor [
[124.64572906 292.54125977]
[123.74581146 277.56826782]
[122.84590149 262.59530640]
[121.79622650 247.63206482]
[120.59690094 232.68008423]
[119.39756775 217.72811890]
[118.19824219 202.77613831]
[115.65923309 187.99258423]
[111.80111694 173.49723816]
[107.94299316 159.00190735]
[104.08487701 144.50656128]
[100.22675323 130.01121521]
[85.49555969 126.27443695]
[74.48371887 115.80013275]
[70.01498413 101.27422333]
[55.34485626 98.14576721]
[40.67472458 95.01730347]
[29.13241577 105.21932220]
[13.97322369 106.65191650]
[1.03031743 98.97434235]
[-4.83963537 85.31119537]
[-19.50976562 82.18273163]
[-34.62017822 86.87165833]
[-45.45383835 76.65006256]
[-60.12396622 73.52159882]
[-74.79409790 70.39313507]
[-89.46422577 67.26467896]
[-98.56740570 68.53755951]
[-104.39523315 63.92406464]
[-118.99982452 60.50269699]
[-133.78338623 57.96368790]
[-148.69262695 56.31618118]
[-163.60188293 54.66867447]
[-178.51112366 53.02116776]
[-193.42037964 51.37366104]
[-208.32963562 49.72615814]
[-216.83497620 62.45084381]
[-230.28507996 69.75518036]
[-245.58920288 69.96067047]
[-259.23059082 63.02010727]
[-268.07452393 50.52837372]
[-270.08874512 35.35597992]
[-264.81039429 20.98943329]
[-253.45240784 10.73005962]
[-238.62477112 6.93538713]
[-223.73474121 10.47740459]
[-212.20396423 20.54218102]
[-206.68212891 34.81690598]
[-191.77287292 36.46441269]
[-176.86361694 38.11191940]
[-161.95437622 39.75942612]
[-147.04512024 41.40693283]
[-132.13587952 43.05443954]
[-140.33482361 30.49349594]
[-137.43171692 15.77711201]
[-125.07682800 7.27083063]
[-110.29331207 9.81005764]
[-101.48487854 21.95136642]
[-103.65867615 36.79301834]
[-115.57846069 45.89810181]
[-100.97386169 49.31946945]
[-86.33576965 52.59454727]
[-71.66563416 55.72300720]
[-56.99550629 58.85146713]
[-42.32537460 61.97993088]
[-28.26427078 57.06723404]
[-16.38130569 67.51260376]
[-1.71117437 70.64105988]
[9.22205448 60.56125641]
[24.17105865 58.83173752]
[37.42699814 66.32396698]
[43.80318832 80.34717560]
[58.47331619 83.47563171]
[73.14344788 86.60409546]
[85.53849030 73.70191193]
[103.07292175 70.14566040]
[119.51528168 77.19915771]
[131.80734253 68.60234833]
[144.09941101 60.00553131]
[156.39146423 51.40871429]
[168.68353271 42.81189728]
[180.97558594 34.21508408]
[193.26765442 25.61826706]
[205.55970764 17.02145195]
[217.85177612 8.42463684]
[214.36843872 -5.41514778]
[215.82455444 -19.58200836]
[222.02418518 -32.37002563]
[232.20150757 -42.24635315]
[245.11521912 -48.03493881]
[259.20004272 -49.05656052]
[272.75637817 -45.20845032]
[284.15539551 -36.97423553]
[296.61700439 -45.32337952]
[309.07861328 -53.67252731]
[321.54022217 -62.02167130]
[328.69839478 -76.13092804]
[343.57855225 -76.78710175]
[356.04016113 -85.13624573]
[368.50177002 -93.48538971]
[380.96337891 -101.83454132]
[390.75665283 -115.67389679]
[406.76623535 -110.09444427]
[405.83670044 -93.16600037]
[389.31253052 -89.37292480]
[376.85092163 -81.02378082]
[364.38928223 -72.67463684]
[351.92767334 -64.32549286]
[345.66085815 -50.81341934]
[329.88937378 -49.56005859]
[317.42776489 -41.21091461]
[304.96615601 -32.86177063]
[292.50451660 -24.51262474]
[295.85491943 -9.05020523]
[293.01947021 6.55396700]
[284.40176392 19.91387177]
[271.29193115 28.97519684]
[255.67332458 32.33119965]
[239.92274475 29.44104385]
[226.44859314 20.71669769]
[214.15652466 29.31351280]
[201.86447144 37.91032791]
[189.57240295 46.50714493]
[177.28034973 55.10395813]
[164.98828125 63.70077515]
[152.69622803 72.29759216]
[140.40415955 80.89440918]
[128.11210632 89.49121857]
[130.01185608 99.88661957]
[128.19070435 110.29608154]
[122.87439728 119.42900848]
[114.72209167 126.15309906]
[118.58021545 140.64843750]
[122.43833160 155.14378357]
[126.29645538 169.63911438]
[130.15457153 184.13446045]
[136.59649658 170.58818054]
[149.26359558 162.55421448]
[164.26350403 162.50125122]
[176.98703003 170.44555664]
[183.52444458 183.94601440]
[181.86695862 198.85415649]
[172.52386475 210.58898926]
[158.36611938 215.54463196]
[143.74414062 212.19828796]
[133.15022278 201.57681274]
[134.34954834 216.52877808]
[135.54887390 231.48075867]
[136.74819946 246.43273926]
[140.57223511 254.79125977]
[137.81887817 261.69537354]
[138.71879578 276.66836548]
[139.61871338 291.64132690]
[149.10215759 305.02029419]
[142.01242065 319.80770874]
[125.64281464 320.79156494]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 149]
[5 148]
[6 147]
[7 146]
[8 136]
[9 135]
[10 134]
[11 133]
[12 132]
[15 74]
[16 73]
[17 72]
[21 68]
[22 67]
[24 65]
[25 64]
[26 63]
[27 62]
[29 61]
[30 60]
[31 53]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[77 128]
[78 127]
[79 126]
[80 125]
[81 124]
[82 123]
[83 122]
[84 121]
[85 120]
[93 113]
[94 112]
[95 111]
[96 110]
[98 108]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
