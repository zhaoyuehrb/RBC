%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGUGGUGCUGGGGCCCAGUGCUGCUCAUCGCGGGUGCCACAGUCCUCAUGGAGGGUCUUCAAGCCGCUCAGCGUGCCUGUGGACAGCGUGGCCCCG\
) } def
/len { sequence length } bind def

/coor [
[-51.86733627 191.35615540]
[-64.69940948 199.12390137]
[-77.53148651 206.89164734]
[-90.36356354 214.65939331]
[-96.21297455 221.91040039]
[-103.71772003 222.46200562]
[-116.78516388 229.82691956]
[-129.85261536 237.19183350]
[-142.92005920 244.55674744]
[-155.98750305 251.92164612]
[-169.05494690 259.28656006]
[-182.12239075 266.65148926]
[-195.18981934 274.01638794]
[-208.25726318 281.38128662]
[-221.32470703 288.74621582]
[-232.15446472 301.79046631]
[-247.68692017 294.99496460]
[-245.45680237 278.18832397]
[-228.68962097 275.67877197]
[-215.62217712 268.31384277]
[-202.55473328 260.94894409]
[-189.48728943 253.58403015]
[-176.41984558 246.21911621]
[-163.35240173 238.85420227]
[-150.28495789 231.48930359]
[-137.21751404 224.12438965]
[-124.15007782 216.75947571]
[-111.08263397 209.39456177]
[-98.13130951 201.82731628]
[-85.29923248 194.05957031]
[-72.46715546 186.29183960]
[-59.63508224 178.52409363]
[-56.38417053 166.75762939]
[-45.60511780 160.21266174]
[-32.87667084 162.92254639]
[-19.80922508 155.55763245]
[-6.74178219 148.19271851]
[6.32566118 140.82781982]
[10.68387890 134.69337463]
[19.91602135 133.44429016]
[33.20619202 126.48933411]
[46.49636078 119.53438568]
[59.78653336 112.57942963]
[73.07669830 105.62448120]
[72.08341980 91.91090393]
[78.01412964 78.68028259]
[90.09574127 69.37609100]
[105.88153839 66.77042389]
[108.20500946 51.95146561]
[110.52848053 37.13251114]
[112.85195160 22.31355476]
[109.33204651 5.72902632]
[124.29403687 -2.24437881]
[136.09773254 9.92563248]
[127.67091370 24.63702774]
[125.34743500 39.45598221]
[123.02396393 54.27494049]
[120.70049286 69.09389496]
[131.22428894 79.78265381]
[146.07759094 77.68992615]
[160.93089294 75.59719849]
[175.78419495 73.50446320]
[188.36991882 63.91749954]
[202.05220032 69.80348206]
[216.90548706 67.71074677]
[229.49122620 58.12378693]
[243.17349243 64.00976562]
[258.02679443 61.91703415]
[272.84576416 59.59356308]
[287.62677002 57.03990936]
[302.40780640 54.48625565]
[316.98638916 45.83166885]
[329.33847046 57.44466782]
[321.59872437 72.52885437]
[304.96145630 69.26728821]
[290.18045044 71.82093811]
[275.39941406 74.37459564]
[269.23559570 78.69119263]
[260.11953735 76.77033234]
[245.26622009 78.86306000]
[233.74290466 88.30033875]
[218.99822998 82.56404877]
[204.14492798 84.65677643]
[192.62159729 94.09405518]
[177.87692261 88.35776520]
[163.02362061 90.45049286]
[148.17031860 92.54322815]
[133.31703186 94.63595581]
[128.60629272 114.75119781]
[113.56771088 127.45588684]
[94.88916016 128.61203003]
[80.03165436 118.91464996]
[66.74148560 125.86959839]
[53.45131302 132.82455444]
[40.16114426 139.77951050]
[26.87097359 146.73446655]
[13.69057274 153.89526367]
[0.62312883 161.26016235]
[-12.44431496 168.62507629]
[-25.51175880 175.98999023]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[6 28]
[7 27]
[8 26]
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[14 20]
[15 19]
[35 100]
[36 99]
[37 98]
[38 97]
[40 96]
[41 95]
[42 94]
[43 93]
[44 92]
[48 58]
[49 57]
[50 56]
[51 55]
[59 88]
[60 87]
[61 86]
[62 85]
[64 83]
[65 82]
[67 80]
[68 79]
[69 77]
[70 76]
[71 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
