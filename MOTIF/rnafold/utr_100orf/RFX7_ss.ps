%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCAGAGGAACAACAACAGCCGCCACCACAGCAGCCUGAUGCCCAUCAGCAGCUUCCCCCCAGCGCCCCCAACUCGGGGGUGGCCCUGCCAGCCCUUG\
) } def
/len { sequence length } bind def

/coor [
[109.47896576 274.70938110]
[120.75476837 264.18038940]
[117.97154999 249.44084167]
[115.18833160 234.70132446]
[112.40511322 219.96179199]
[109.62190247 205.22225952]
[106.83868408 190.48272705]
[102.42674255 184.38681030]
[104.20560455 175.24195862]
[101.88213348 160.42300415]
[94.62432098 160.21281433]
[87.44406128 159.13400269]
[80.44493866 157.20210266]
[73.72792053 154.44500732]
[67.38990021 150.90248108]
[61.52231979 146.62564087]
[56.20982361 141.67616272]
[51.52904892 136.12545776]
[47.54751968 130.05360413]
[44.32267761 123.54819489]
[41.90104294 116.70307922]
[40.31754684 109.61699677]
[39.59503937 102.39218903]
[39.74394226 95.13286591]
[40.76210022 87.94375610]
[42.63483429 80.92856598]
[45.33512497 74.18850708]
[48.82401657 67.82080841]
[53.05117798 61.91733170]
[57.95562744 56.56323624]
[63.46661377 51.83576584]
[69.50463867 47.80311966]
[63.60313034 34.01282120]
[57.70162582 20.22252655]
[45.15886688 10.57941055]
[47.26483917 -4.16555929]
[41.36333466 -17.95585442]
[34.99933243 -24.75968552]
[35.50014496 -32.26799393]
[30.03037071 -46.23515320]
[24.56059837 -60.20231628]
[19.09082603 -74.16947174]
[5.94633436 -83.97531128]
[8.13464737 -100.22779846]
[23.40461731 -106.20777130]
[36.04780579 -95.76354980]
[33.05798721 -79.63925171]
[38.52775955 -65.67208862]
[43.99753189 -51.70492554]
[49.46730423 -37.73776627]
[55.15363312 -23.85735893]
[61.05513382 -10.06706333]
[73.17578125 -1.41032076]
[71.49192047 14.32102394]
[77.39342499 28.11131859]
[83.29492950 41.90161514]
[93.24318695 39.92648315]
[103.38164520 39.64234924]
[113.42490387 41.05720139]
[123.09027863 44.13121796]
[132.10568237 48.77787018]
[140.21736145 54.86635971]
[147.19697571 62.22529984]
[152.84803772 70.64755249]
[157.01150513 79.89604187]
[159.57017517 89.71042633]
[174.55386353 89.01081848]
[189.53753662 88.31121063]
[204.52120972 87.61161041]
[219.50488281 86.91200256]
[234.48855591 86.21239471]
[249.47224426 85.51279449]
[261.29452515 74.66782379]
[277.12158203 77.29138184]
[284.81228638 91.37088776]
[278.46697998 106.10575867]
[262.95321655 110.19265747]
[250.17184448 100.49646759]
[235.18817139 101.19607544]
[220.20449829 101.89567566]
[205.22080994 102.59528351]
[190.23713684 103.29489136]
[175.25346375 103.99449921]
[160.26979065 104.69409943]
[146.84190369 138.21411133]
[116.70108795 158.09953308]
[119.02455902 172.91848755]
[121.57820892 187.69952393]
[124.36142731 202.43904114]
[127.14464569 217.17857361]
[129.92785645 231.91810608]
[132.71107483 246.65763855]
[135.49429321 261.39715576]
[149.83309937 267.08944702]
[158.79960632 279.64352417]
[159.53263855 295.05346680]
[151.79827881 308.40200806]
[138.06452942 315.42965698]
[122.71379852 313.89392090]
[110.64443207 304.28488159]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 93]
[3 92]
[4 91]
[5 90]
[6 89]
[7 88]
[9 87]
[10 86]
[32 56]
[33 55]
[34 54]
[36 52]
[37 51]
[39 50]
[40 49]
[41 48]
[42 47]
[66 84]
[67 83]
[68 82]
[69 81]
[70 80]
[71 79]
[72 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
