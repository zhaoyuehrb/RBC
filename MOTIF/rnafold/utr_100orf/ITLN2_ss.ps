%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGGGAGCUCCGAGUGUCCACAGGAAGGGAACUAUCAGCUCCUGGCAUCUGUAAGGAUGCUGUCCAUGCUGAGGACAAUGACCAGACUCUGCUUCCUGUUAUUCUUCUCUGUGGCCACCAGUGGGUGCAGUGCAGCAGCAGCCUCUUCUCUUGAGA\
) } def
/len { sequence length } bind def

/coor [
[87.27222443 234.82337952]
[97.05943298 222.11157227]
[96.46683502 207.12327576]
[95.87423706 192.13499451]
[95.28163910 177.14669800]
[94.68904114 162.15840149]
[94.09644318 147.17012024]
[93.50384521 132.18182373]
[85.48954010 128.39070129]
[79.00759888 122.72471619]
[74.45948792 115.71872711]
[72.07525635 107.98126221]
[71.90443420 100.14287567]
[73.82180786 92.80509949]
[77.54696655 86.49435425]
[82.67536163 81.62424469]
[76.09091949 68.14666748]
[69.50646973 54.66909027]
[56.49670410 45.66595459]
[57.86190414 30.83404732]
[51.27745819 17.35647011]
[44.69301605 3.87889290]
[38.10857010 -9.59868431]
[31.52412415 -23.07626152]
[24.93967819 -36.55383682]
[18.22240829 -49.96570969]
[11.37297058 -63.31056595]
[4.52353191 -76.65541840]
[-2.32590652 -90.00027466]
[-9.17534542 -103.34513092]
[-16.02478409 -116.68999481]
[-23.00572205 -129.96653748]
[-30.11748123 -143.17346191]
[-37.22924042 -156.38038635]
[-52.51446915 -156.93626404]
[-65.38421631 -165.01501465]
[-72.43539429 -178.36219788]
[-71.86285400 -193.34646606]
[-63.92042923 -205.94738770]
[-71.03218842 -219.15431213]
[-78.14394379 -232.36123657]
[-97.63272858 -237.03770447]
[-107.32595062 -254.23271179]
[-101.42157745 -272.75009155]
[-109.30323029 -285.51251221]
[-117.18488312 -298.27493286]
[-127.63314819 -309.03753662]
[-140.15641785 -317.29394531]
[-152.67967224 -325.55032349]
[-165.20294189 -333.80670166]
[-177.72619629 -342.06311035]
[-190.24946594 -350.31948853]
[-206.64294434 -350.75030518]
[-214.22770691 -365.29003906]
[-205.20120239 -378.98141479]
[-188.84910583 -377.73995972]
[-181.99307251 -362.84274292]
[-169.46981812 -354.58636475]
[-156.94654846 -346.32998657]
[-144.42329407 -338.07357788]
[-131.90002441 -329.81719971]
[-119.37676239 -321.56082153]
[-107.54444885 -330.78015137]
[-112.48863983 -344.94189453]
[-117.43283844 -359.10363770]
[-122.37702942 -373.26538086]
[-127.32122040 -387.42712402]
[-142.00715637 -392.79901123]
[-149.75939941 -406.37979126]
[-146.91755676 -421.75695801]
[-134.82348633 -431.66995239]
[-119.18762207 -431.43814087]
[-107.39274597 -421.17095947]
[-105.00803375 -405.71627808]
[-113.15948486 -392.37130737]
[-108.21528625 -378.20956421]
[-103.27109528 -364.04785156]
[-98.32689667 -349.88610840]
[-93.38270569 -335.72436523]
[-92.14575195 -328.98498535]
[-92.46818542 -322.59915161]
[-94.14724731 -316.90011597]
[-96.91391754 -312.15228271]
[-100.45253754 -308.53927612]
[-104.42245483 -306.15658569]
[-96.54080200 -293.39416504]
[-88.65914917 -280.63174438]
[-78.31108856 -281.04470825]
[-68.66091919 -277.06823730]
[-61.49745941 -269.36618042]
[-58.17896271 -259.29959106]
[-59.37596130 -248.68635559]
[-64.93701935 -239.47300720]
[-57.82526016 -226.26608276]
[-50.71350098 -213.05914307]
[-35.82146835 -212.75428772]
[-22.99620628 -204.98455811]
[-15.73400593 -191.75100708]
[-16.07301903 -176.55950928]
[-24.02231216 -163.49214172]
[-16.91055489 -150.28521729]
[-9.79879665 -137.07829285]
[-3.82680154 -132.65649414]
[-2.67992735 -123.53942871]
[4.16951132 -110.19457245]
[11.01894951 -96.84971619]
[17.86838913 -83.50485992]
[24.71782684 -70.16000366]
[31.56726646 -56.81514740]
[37.45073318 -52.27622986]
[38.41725540 -43.13828278]
[45.00170135 -29.66070557]
[51.58614731 -16.18312836]
[58.17058945 -2.70555234]
[64.75503540 10.77202511]
[71.33948517 24.24960136]
[83.87828827 32.28873062]
[82.98404694 48.08464813]
[89.56849670 61.56222534]
[96.15293884 75.03980255]
[122.76422882 81.96442413]
[130.44375610 112.29016876]
[142.63105774 121.03485870]
[158.35420227 122.79362488]
[164.18424988 136.49981689]
[176.37155151 145.24450684]
[192.09469604 147.00326538]
[197.92475891 160.70945740]
[210.11206055 169.45416260]
[222.29936218 178.19885254]
[238.02250671 179.95761108]
[243.85256958 193.66380310]
[256.03985596 202.40849304]
[272.43383789 206.72981262]
[272.81970215 223.67936707]
[256.63937378 228.74226379]
[247.29518127 214.59579468]
[235.10786438 205.85110474]
[220.25643921 204.71781921]
[213.55467224 190.38615417]
[201.36737061 181.64146423]
[189.18006897 172.89677429]
[174.32864380 171.76348877]
[167.62686157 157.43180847]
[155.43955994 148.68711853]
[140.58813477 147.55383301]
[133.88636780 133.22216797]
[121.69905853 124.47747040]
[108.49213409 131.58923340]
[109.08473206 146.57751465]
[109.67733002 161.56581116]
[110.26992798 176.55409241]
[110.86252594 191.54238892]
[111.45512390 206.53068542]
[112.04772949 221.51896667]
[122.80799866 233.41838074]
[120.07150269 249.22631836]
[105.93743134 256.81631470]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[16 120]
[17 119]
[18 118]
[20 116]
[21 115]
[22 114]
[23 113]
[24 112]
[25 111]
[26 109]
[27 108]
[28 107]
[29 106]
[30 105]
[31 104]
[32 102]
[33 101]
[34 100]
[39 95]
[40 94]
[41 93]
[44 87]
[45 86]
[46 85]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
[63 79]
[64 78]
[65 77]
[66 76]
[67 75]
[122 148]
[123 147]
[125 145]
[126 144]
[128 142]
[129 141]
[130 140]
[132 138]
[133 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
