%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:55:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAAGGCGCCCGCCCGCCGCCCGCCGCCCGCGCCCGCGCCGCCGCCAUGAAGCCGGGGCCGCCGCACCGUGCCGGGGCCGCCCACGGGGCCGGCGCCGGGGCCGGGGCCGCGGCCGGGCCCGGGGCCCGCGGGCUGCUCCUGCCAC\
) } def
/len { sequence length } bind def

/coor [
[105.41917419 534.56134033]
[90.42151642 534.82666016]
[76.28591919 529.80816650]
[64.81301880 520.14526367]
[57.46425629 507.06872559]
[55.17568207 492.24667358]
[48.70843887 505.78088379]
[42.24119186 519.31512451]
[44.05503845 535.61364746]
[30.68844414 545.11450195]
[15.89181519 538.04400635]
[14.88665390 521.67565918]
[28.70698547 512.84783936]
[35.17423248 499.31365967]
[41.64147568 485.77944946]
[40.59646606 476.66983032]
[46.92947769 468.51229858]
[49.15011978 453.67758179]
[43.38225555 439.94509888]
[53.07731247 427.44244385]
[55.29795456 412.60772705]
[57.51859283 397.77301025]
[59.73923492 382.93829346]
[61.95987320 368.10357666]
[64.18051147 353.26885986]
[52.42533112 339.30142212]
[54.57962418 320.85348511]
[69.74645996 309.59167480]
[71.33550262 294.67608643]
[72.92453766 279.76046753]
[74.51357269 264.84487915]
[68.16808319 251.36956787]
[77.32377625 238.46670532]
[78.91281128 223.55111694]
[80.50184631 208.63552856]
[82.09088135 193.71992493]
[83.67992401 178.80433655]
[81.24411011 171.77124023]
[85.46425629 163.59020996]
[87.36952209 148.71170044]
[89.27479553 133.83319092]
[91.18006134 118.95468903]
[93.08532715 104.07618713]
[87.33246613 105.00031281]
[81.24918365 104.17842102]
[75.24575806 101.55051422]
[62.99920273 92.88899994]
[48.34764481 97.99895477]
[33.50048828 93.48879242]
[24.16676140 81.09278107]
[23.93547440 65.57743073]
[32.89556122 52.90871048]
[47.60168839 47.95800400]
[62.39904785 52.62895966]
[71.59774780 65.12549591]
[71.66071320 80.64244080]
[83.90727234 89.30395508]
[98.38233185 85.37043762]
[104.56085205 71.70200348]
[110.73937225 58.03358078]
[116.91789246 44.36515045]
[117.61368561 35.18611526]
[123.37535095 30.47434235]
[129.84259033 16.94013596]
[136.30982971 3.40593004]
[135.78730774 -1.06448925]
[136.66702271 -5.04833984]
[138.61230469 -8.15516949]
[141.19239807 -10.14905167]
[143.94288635 -10.96608639]
[151.53460693 -23.90307617]
[151.84593201 -39.72121811]
[164.96054077 -46.78209305]
[172.55227661 -59.71908188]
[180.14399719 -72.65606689]
[187.73573303 -85.59305573]
[188.04704285 -101.41120148]
[201.16166687 -108.47207642]
[208.75340271 -121.40906525]
[216.34512329 -134.34605408]
[223.93684387 -147.28303528]
[231.39085388 -160.29988098]
[238.70626831 -173.39508057]
[246.02169800 -186.49029541]
[248.46781921 -203.26686096]
[265.26589966 -205.56053162]
[272.12011719 -190.05389404]
[259.11691284 -179.17488098]
[251.80148315 -166.07966614]
[244.48605347 -152.98445129]
[243.96617126 -145.55967712]
[236.87384033 -139.69131470]
[229.28211975 -126.75432587]
[221.69038391 -113.81733704]
[214.09866333 -100.88034821]
[214.33035278 -85.98754883]
[200.67271423 -78.00133514]
[193.08099365 -65.06434631]
[185.48925781 -52.12735367]
[177.89753723 -39.19036484]
[178.12922668 -24.29756165]
[164.47160339 -16.31134796]
[156.87986755 -3.37435985]
[149.84403992 9.87317467]
[143.37680054 23.40738106]
[136.90956116 36.94158936]
[130.58631897 50.54367065]
[124.40779877 64.21209717]
[118.22927856 77.88052368]
[112.05075836 91.54895020]
[107.96383667 105.98145294]
[106.05856323 120.85995483]
[104.15329742 135.73846436]
[102.24803162 150.61697388]
[100.34276581 165.49548340]
[98.59551239 180.39337158]
[97.00647736 195.30895996]
[95.41744232 210.22456360]
[93.82840729 225.14015198]
[92.23937225 240.05574036]
[98.47119904 254.59791565]
[89.42916870 266.43392944]
[87.84013367 281.34951782]
[86.25109100 296.26510620]
[84.66205597 311.18069458]
[93.84618378 318.85897827]
[98.10922241 329.91632080]
[96.48963928 341.53430176]
[89.50966644 350.81185913]
[79.01522827 355.48950195]
[76.79458618 370.32421875]
[74.57395172 385.15893555]
[72.35330963 399.99365234]
[70.13266754 414.82836914]
[67.91202545 429.66308594]
[73.52105713 444.45663452]
[63.98483276 455.89822388]
[61.76419449 470.73294067]
[71.96215820 459.73287964]
[85.37358856 453.01470947]
[100.29009247 451.43426514]
[114.81156921 455.19281006]
[127.08821869 463.81161499]
[135.55622864 476.19274902]
[139.13688660 490.75912476]
[137.37409973 505.65518188]
[130.49241638 518.98345947]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 15]
[7 14]
[8 13]
[17 138]
[18 137]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[25 130]
[28 125]
[29 124]
[30 123]
[31 122]
[33 120]
[34 119]
[35 118]
[36 117]
[37 116]
[39 115]
[40 114]
[41 113]
[42 112]
[43 111]
[46 57]
[47 56]
[58 110]
[59 109]
[60 108]
[61 107]
[63 106]
[64 105]
[65 104]
[70 103]
[71 102]
[73 100]
[74 99]
[75 98]
[76 97]
[78 95]
[79 94]
[80 93]
[81 92]
[82 90]
[83 89]
[84 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
