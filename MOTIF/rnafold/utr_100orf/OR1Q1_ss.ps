%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:11:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACAACAGCAACUGGACCAGUGUGUCCCAUUUUGUUCUCUUGGGCAUUUCCACCCACCCAGAAGAGCAAAUCCCACUCUUCCUUGUUUUCUCACUCA\
) } def
/len { sequence length } bind def

/coor [
[90.16345978 293.14544678]
[94.85742188 278.44952393]
[106.76599121 268.64190674]
[104.90451050 253.75784302]
[103.04302979 238.87379456]
[93.78609467 227.20509338]
[99.75100708 212.55142212]
[97.88951874 197.66737366]
[96.02803802 182.78332520]
[94.16655731 167.89927673]
[92.30507660 153.01522827]
[90.25653839 151.57310486]
[88.62325287 149.26838684]
[87.71692657 146.24427795]
[87.79619598 142.74685669]
[89.03478241 139.10543823]
[91.49677277 135.70356750]
[91.96327209 120.71082306]
[92.42977142 105.71807861]
[89.68434906 101.02331543]
[89.86990356 95.11716461]
[93.42031860 89.81590271]
[94.81800842 74.88116455]
[88.40026093 60.42007446]
[97.28981781 48.46913147]
[98.68750763 33.53438950]
[100.08519745 18.59965134]
[90.04658508 12.46680927]
[83.12297058 3.02066016]
[80.32167053 -8.29768944]
[82.02482605 -19.77998543]
[87.93774414 -29.70863724]
[97.13904572 -36.61364365]
[108.22399902 -39.49020004]
[111.00721741 -54.22972870]
[113.79043579 -68.96926117]
[116.57365417 -83.70878601]
[119.35686493 -98.44831848]
[122.14008331 -113.18784332]
[124.92330170 -127.92737579]
[127.70652008 -142.66690063]
[122.66416168 -157.66307068]
[132.62863159 -168.73370361]
[135.41183472 -183.47323608]
[138.19505310 -198.21276855]
[140.97827148 -212.95228577]
[143.76148987 -227.69181824]
[131.44696045 -236.70930481]
[124.27206421 -250.18089294]
[123.66138458 -265.43179321]
[129.73617554 -279.43392944]
[141.29029846 -289.40713501]
[156.02964783 -293.37127686]
[171.02772522 -290.53924561]
[183.30664062 -281.47332764]
[190.42843628 -267.97360229]
[190.97904968 -252.72041321]
[184.84915161 -238.74232483]
[173.25585938 -228.81466675]
[158.50102234 -224.90859985]
[155.71780396 -210.16906738]
[152.93458557 -195.42955017]
[150.15136719 -180.69001770]
[147.36814880 -165.95048523]
[152.60957336 -152.00859070]
[142.44604492 -139.88368225]
[139.66282654 -125.14415741]
[136.87960815 -110.40463257]
[134.09638977 -95.66510010]
[131.31318665 -80.92556763]
[128.52996826 -66.18604279]
[125.74674988 -51.44651413]
[122.96353149 -36.70698547]
[136.51113892 -24.09978485]
[139.95509338 -5.76766300]
[131.77905273 11.16075802]
[115.01993561 19.99733925]
[113.62224579 34.93207932]
[112.22455597 49.86682129]
[118.74227905 63.25967407]
[109.75274658 76.27885437]
[108.35506439 91.21359253]
[107.42251587 106.18457794]
[106.95601654 121.17732239]
[106.48951721 136.17005920]
[107.18912506 151.15374756]
[109.05060577 166.03779602]
[110.91208649 180.92184448]
[112.77356720 195.80589294]
[114.63504791 210.68992615]
[124.02512360 223.42323303]
[117.92707062 237.01231384]
[119.78855896 251.89636230]
[121.65003967 266.78042603]
[135.60722351 273.35311890]
[143.77589417 286.44036865]
[143.54948425 301.86608887]
[135.00021362 314.70794678]
[120.85612488 320.86819458]
[105.63056183 318.38107300]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 94]
[4 93]
[5 92]
[7 90]
[8 89]
[9 88]
[10 87]
[11 86]
[17 85]
[18 84]
[19 83]
[22 82]
[23 81]
[25 79]
[26 78]
[27 77]
[34 73]
[35 72]
[36 71]
[37 70]
[38 69]
[39 68]
[40 67]
[41 66]
[43 64]
[44 63]
[45 62]
[46 61]
[47 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
