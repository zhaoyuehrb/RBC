%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUACCUGUCUAUAAGGAGUCCUGCUUAUCACAAUGAAUGUUCUCCUGGGCAGCGUUGUGAUCUUUGCCACCUUCGUGACUUUAUGCAAUGCAUCAUGCUAUUUCAUACCUAAUGAGGGAGUUCCAGGAGAUU\
) } def
/len { sequence length } bind def

/coor [
[73.54923248 250.90733337]
[66.42834473 255.29989624]
[58.35161209 257.34933472]
[50.06581116 256.88717651]
[43.24017715 270.24420166]
[36.41453934 283.60125732]
[42.67384720 297.93145752]
[38.20790482 312.91778564]
[25.12539101 321.48410034]
[9.60347080 319.58569336]
[-1.02888131 308.11889648]
[-1.75139344 292.49801636]
[7.77708244 280.09872437]
[23.05749130 276.77560425]
[29.88312912 263.41857910]
[36.70876694 250.06152344]
[27.67933655 230.13755798]
[36.15248108 209.68048096]
[57.12671280 201.78733826]
[61.99720383 187.60008240]
[66.86769867 173.41281128]
[71.73818970 159.22555542]
[76.60868073 145.03829956]
[62.14663315 133.80421448]
[52.61326981 118.16866302]
[49.24988556 100.16745758]
[52.49440002 82.14445496]
[39.38753128 74.84994507]
[26.28066063 67.55542755]
[13.17378998 60.26091385]
[0.06691933 52.96640015]
[-13.03995132 45.67188263]
[-26.14682198 38.37736893]
[-39.25369263 31.08285332]
[-52.36056137 23.78833961]
[-65.01984406 26.56616211]
[-75.81227112 20.14466095]
[-79.18615723 8.46598434]
[-92.11708069 0.86393589]
[-105.04800415 -6.73811245]
[-117.97893524 -14.34016132]
[-130.90986633 -21.94220924]
[-147.30383301 -21.53019142]
[-155.62561035 -35.66100693]
[-147.31446838 -49.79808426]
[-130.92019653 -49.39841080]
[-123.30781555 -34.87313461]
[-110.37688446 -27.27108765]
[-97.44596100 -19.66903877]
[-84.51502991 -12.06699085]
[-71.58410645 -4.46494246]
[-54.09656525 -5.31550217]
[-45.06604767 10.68146896]
[-31.95917702 17.97598457]
[-18.85230637 25.27049828]
[-5.74543667 32.56501389]
[7.36143398 39.85952759]
[20.46830368 47.15404129]
[33.57517624 54.44855881]
[46.68204498 61.74307251]
[59.78891754 69.03759003]
[67.88668060 60.70195007]
[77.66835785 54.42697906]
[88.62104797 50.54171753]
[100.17041016 49.24989319]
[111.71083832 50.61924744]
[122.63718414 54.57797623]
[132.37651062 60.91849518]
[140.41810608 69.30832672]
[146.34030151 79.30753326]
[160.79028320 75.28283691]
[175.24026489 71.25814056]
[189.69023132 67.23344421]
[204.14021301 63.20874786]
[218.59019470 59.18405151]
[233.04016113 55.15935516]
[235.83824158 41.40128326]
[244.26760864 30.25674248]
[256.62667847 23.88033867]
[270.46136475 23.47367287]
[283.05230713 29.05930328]
[291.94943237 39.48757172]
[306.49044800 35.80529022]
[321.03143311 32.12300873]
[335.57244873 28.44072723]
[347.05093384 17.55244255]
[361.28817749 21.92862320]
[375.82916260 18.24634171]
[390.37017822 14.56405926]
[404.86666870 10.71030140]
[419.31665039 6.68560505]
[433.76663208 2.66090894]
[447.40264893 -7.41356850]
[460.85824585 2.90066481]
[454.67196655 18.68567085]
[437.79132080 17.11088562]
[423.34133911 21.13558197]
[408.89135742 25.16027832]
[403.23800659 30.03189850]
[394.05245972 29.10506248]
[379.51144409 32.78734589]
[364.97045898 36.46962738]
[354.53201294 47.09452820]
[339.25473022 42.98173141]
[324.71374512 46.66401291]
[310.17272949 50.34629440]
[295.63171387 54.02857590]
[291.64257812 69.64202881]
[280.27801514 81.19901276]
[264.55322266 85.49906921]
[248.70829773 81.28518677]
[237.06486511 69.60932922]
[222.61488342 73.63402557]
[208.16491699 77.65872192]
[193.71493530 81.68341827]
[179.26495361 85.70811462]
[164.81498718 89.73281097]
[150.36500549 93.75750732]
[149.84254456 109.55628967]
[144.48457336 124.42796326]
[134.81088257 136.92973328]
[121.75997925 145.84872437]
[106.59801483 150.31965637]
[90.79593658 149.90879822]
[85.92544556 164.09605408]
[81.05495453 178.28330994]
[76.18446350 192.47056580]
[71.31397247 206.65782166]
[77.50536346 212.58447266]
[81.62074280 220.06378174]
[83.30002594 228.39906311]
[82.40895081 236.82080078]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 16]
[5 15]
[6 14]
[19 128]
[20 127]
[21 126]
[22 125]
[23 124]
[27 61]
[28 60]
[29 59]
[30 58]
[31 57]
[32 56]
[33 55]
[34 54]
[35 53]
[38 51]
[39 50]
[40 49]
[41 48]
[42 47]
[70 118]
[71 117]
[72 116]
[73 115]
[74 114]
[75 113]
[76 112]
[82 107]
[83 106]
[84 105]
[85 104]
[87 102]
[88 101]
[89 100]
[90 98]
[91 97]
[92 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
