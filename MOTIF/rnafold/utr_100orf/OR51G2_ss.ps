%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:49:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACCCUGGGAUCCCUGGGAAACAGCAGCAGCAGCGUUUCUGCUACCUUCCUGCUGAGUGGCAUCCCUGGGCUGGAGCGCAUGCACAUCUGGAUCUCCA\
) } def
/len { sequence length } bind def

/coor [
[191.14193726 225.08728027]
[183.88485718 220.74353027]
[178.96977234 213.74372864]
[177.31153870 205.25576782]
[179.27349854 196.73497009]
[169.08720398 185.72410583]
[158.90090942 174.71322632]
[144.57836914 170.62495422]
[140.88648987 155.24052429]
[130.70019531 144.22964478]
[120.51390839 133.21876526]
[110.32761383 122.20789337]
[100.14131927 111.19701385]
[89.78501892 100.34587860]
[79.26121521 89.65711975]
[68.57245636 79.13331604]
[57.72132492 68.77701569]
[46.24733734 59.11536407]
[34.19488525 50.18572998]
[22.14242935 41.25609589]
[10.08997440 32.32646561]
[-1.96247947 23.39683151]
[-19.12289619 26.32311630]
[-32.87322235 16.20347214]
[-35.09227753 -0.38613871]
[-47.41661072 -8.93662262]
[-59.74094772 -17.48710632]
[-72.06528473 -26.03759003]
[-84.38961792 -34.58807373]
[-100.13865662 -36.09748077]
[-106.18515778 -49.70957184]
[-118.50949097 -58.26005554]
[-130.83383179 -66.81053925]
[-147.29421997 -70.87155151]
[-147.94860840 -87.81286621]
[-131.85052490 -93.13150024]
[-122.28334045 -79.13487244]
[-109.95900726 -70.58438873]
[-97.63467407 -62.03390884]
[-82.76715088 -61.13608932]
[-75.83913422 -46.91241074]
[-63.51479721 -38.36192322]
[-51.19046402 -29.81144142]
[-38.86612701 -21.26095772]
[-26.54179382 -12.71047306]
[-14.20247936 -16.76303673]
[-1.61080658 -12.85755539]
[6.50699568 -2.22261453]
[6.96715355 11.34437656]
[19.01960754 20.27400970]
[31.07206154 29.20364189]
[43.12451553 38.13327408]
[55.17697144 47.06290817]
[58.12316895 46.65762329]
[61.41798401 47.50210953]
[64.54334259 49.73974609]
[66.93818665 53.30720901]
[68.07762909 57.92588806]
[78.92875671 68.28218842]
[86.06649780 70.66506958]
[89.94997406 79.13331604]
[100.47377777 89.82207489]
[108.06085205 92.97348022]
[111.15219879 101.01071930]
[121.33849335 112.02159882]
[131.52478027 123.03247833]
[141.71107483 134.04335022]
[151.89736938 145.05422974]
[166.94850159 149.93006897]
[169.91178894 164.52693176]
[180.09808350 175.53781128]
[190.28437805 186.54869080]
[212.11132812 191.16836548]
[217.00566101 212.17852783]
[228.47964478 221.84019470]
[239.95362854 231.50184631]
[251.42762756 241.16349792]
[262.90161133 250.82516479]
[268.39993286 251.78205872]
[272.47888184 254.56555176]
[274.66595459 258.27651978]
[274.93960571 261.96163940]
[285.46340942 272.65039062]
[300.65890503 277.05578613]
[304.07470703 291.55343628]
[314.59851074 302.24218750]
[330.54086304 306.08572388]
[334.92330933 321.88845825]
[323.23754883 333.39389038]
[307.50488281 328.76620483]
[303.90975952 312.76599121]
[293.38595581 302.07723999]
[278.94317627 298.43637085]
[274.77462769 283.17419434]
[264.25082397 272.48544312]
[253.23995972 262.29913330]
[241.76596069 252.63749695]
[230.29197693 242.97583008]
[218.81799316 233.31417847]
[207.34400940 223.65252686]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 72]
[6 71]
[7 70]
[9 68]
[10 67]
[11 66]
[12 65]
[13 64]
[14 62]
[15 61]
[16 59]
[17 58]
[18 53]
[19 52]
[20 51]
[21 50]
[22 49]
[25 45]
[26 44]
[27 43]
[28 42]
[29 41]
[31 39]
[32 38]
[33 37]
[74 100]
[75 99]
[76 98]
[77 97]
[78 96]
[82 95]
[83 94]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
