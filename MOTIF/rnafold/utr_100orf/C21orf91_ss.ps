%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:12:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCCUCUGCUGCGGCCGGAAACAAUAGUGGAGGAACCCGAGCCGCACGGAACGGCGGUGGUGGCCCGCGGAGCCGGACGGGGCACUAUGAACGAAGAGGAGCAGUUUGUAAACAUUGAUUUGAAUGAUGACAACAUUUGCAGUGUUUGUAAACUGGGAACAGACAAAGAAACACUCUCCUUCUGCC\
) } def
/len { sequence length } bind def

/coor [
[66.58942413 125.59304047]
[53.24668121 132.44659424]
[44.50640869 145.63439941]
[29.65009117 144.56709290]
[16.30735016 151.42065430]
[2.96460962 158.27421570]
[-10.37813187 165.12776184]
[-23.72087288 171.98132324]
[-37.06361389 178.83488464]
[-50.29243088 185.90583801]
[-63.40378952 193.19229126]
[-76.51514435 200.47872925]
[-89.62649536 207.76518250]
[-95.61954498 214.68057251]
[-103.01252747 215.06159973]
[-116.24134827 222.13253784]
[-129.47016907 229.20349121]
[-142.69898987 236.27444458]
[-155.92779541 243.34539795]
[-169.15661621 250.41635132]
[-182.32714844 257.59527588]
[-195.43850708 264.88174438]
[-208.54986572 272.16818237]
[-205.62921143 287.01153564]
[-207.44035339 302.03070068]
[-213.80587769 315.75421143]
[-224.10214233 326.83764648]
[-237.32041931 334.19509888]
[-252.16572571 337.10580444]
[-267.18365479 335.28460693]
[-280.90292358 328.90988159]
[-291.97943115 318.60620117]
[-299.32803345 305.38299561]
[-302.22879028 290.53573608]
[-300.39752197 275.51904297]
[-294.01361084 261.80404663]
[-283.70251465 250.73443604]
[-270.47439575 243.39468384]
[-255.62519836 240.50387573]
[-240.60971069 242.34521484]
[-226.89900208 248.73831177]
[-215.83630371 259.05682373]
[-202.72496033 251.77038574]
[-189.61360168 244.48393250]
[-185.28717041 238.47698975]
[-176.22756958 237.18753052]
[-162.99874878 230.11657715]
[-149.76992798 223.04562378]
[-136.54110718 215.97467041]
[-123.31229401 208.90371704]
[-110.08347321 201.83277893]
[-96.91294861 194.65383911]
[-83.80159760 187.36738586]
[-70.69023895 180.08093262]
[-57.57888412 172.79447937]
[-55.42639923 168.51478577]
[-50.55439377 165.54977417]
[-43.91717148 165.49214172]
[-30.57443047 158.63858032]
[-17.23168945 151.78501892]
[-3.88894844 144.93147278]
[9.45379257 138.07791138]
[22.79653358 131.22434998]
[30.58244514 118.52675629]
[46.39312363 119.10385895]
[59.73586273 112.25030518]
[59.25984192 89.44017029]
[70.75625610 69.73328400]
[62.42270279 57.26124191]
[54.08914948 44.78919601]
[45.75559616 32.31715393]
[38.37358856 26.90928078]
[37.38967514 19.57216835]
[29.26129913 6.96544266]
[13.76132584 6.23712587]
[1.67075217 -3.48900604]
[-2.36135006 -18.47305679]
[3.21544504 -32.95335388]
[16.25674629 -41.36192703]
[31.74790764 -40.46550751]
[43.73225784 -30.60878754]
[47.60157776 -15.58187771]
[41.86802673 -1.16293097]
[49.99639893 11.44379520]
[58.22763824 23.98360062]
[66.56119537 36.45564270]
[74.89474487 48.92768860]
[83.22830200 61.39973068]
[90.21504974 59.06681824]
[97.50152588 57.98776245]
[104.86453247 58.19561005]
[112.07853699 59.68400192]
[118.92255402 62.40734482]
[125.18693542 66.28221893]
[130.67979431 71.18992615]
[135.23287964 76.98013306]
[138.70672607 83.47547913]
[140.99491882 90.47700500]
[155.97685242 89.74098969]
[170.95878601 89.00497437]
[185.94070435 88.26895905]
[199.34460449 79.86383820]
[212.43620300 86.96731567]
[227.41813660 86.23130035]
[242.40007019 85.49528503]
[257.38198853 84.75926971]
[272.09378052 81.83291626]
[286.21694946 76.77957153]
[300.34008789 71.72621918]
[314.46325684 66.67287445]
[328.58642578 61.61952591]
[342.70959473 56.56618118]
[356.83273315 51.51283264]
[370.95590210 46.45948410]
[385.07907104 41.40613556]
[399.20223999 36.35278702]
[413.32537842 31.29944038]
[427.44854736 26.24609184]
[441.57171631 21.19274521]
[455.69485474 16.13939667]
[469.81802368 11.08604908]
[483.94119263 6.03270149]
[487.33639526 2.02567387]
[491.51400757 -0.05901356]
[495.60653687 -0.24630834]
[498.88317871 1.09653127]
[513.23730469 -3.25773883]
[527.59143066 -7.61200905]
[541.94549561 -11.96627903]
[556.29962158 -16.32054901]
[570.65374756 -20.67481995]
[576.62841797 -35.12602234]
[590.51812744 -42.30995941]
[605.76464844 -38.83459854]
[615.16894531 -26.34089470]
[614.29071045 -10.72799492]
[603.54449463 0.63216674]
[588.00439453 2.37566996]
[575.00799561 -6.32071447]
[560.65386963 -1.96644437]
[546.29980469 2.38782573]
[531.94567871 6.74209595]
[517.59155273 11.09636593]
[503.23745728 15.45063591]
[488.99453735 20.15586281]
[474.87136841 25.20920944]
[460.74822998 30.26255798]
[446.62506104 35.31590652]
[432.50189209 40.36925507]
[418.37872314 45.42259979]
[404.25558472 50.47594833]
[390.13241577 55.52929688]
[376.00924683 60.58264542]
[361.88607788 65.63599396]
[347.76293945 70.68933868]
[333.63977051 75.74269104]
[319.51660156 80.79603577]
[305.39343262 85.84938049]
[291.27029419 90.90273285]
[277.14712524 95.95607758]
[291.95748901 98.33372498]
[305.33953857 105.11019135]
[316.02111816 115.64127350]
[322.98678589 128.92582703]
[325.57434082 143.70095825]
[323.53781128 158.56207275]
[317.07077026 172.09637451]
[306.78802490 183.01722717]
[293.66711426 190.28645325]
[278.95535278 193.21298218]
[264.05136108 191.51860046]
[250.37196350 185.36441040]
[239.21760559 175.33543396]
[231.64868164 162.38510132]
[228.38471985 147.74450684]
[229.73602295 132.80551147]
[235.57412720 118.98825073]
[245.34403992 107.60628510]
[258.11801147 99.74120331]
[243.13607788 100.47721863]
[228.15414429 101.21323395]
[213.17221069 101.94924927]
[200.83992004 110.30172729]
[186.67672729 103.25089264]
[171.69479370 103.98690796]
[156.71286011 104.72292328]
[141.73092651 105.45893860]
[136.45951843 121.02317047]
[125.62980652 133.38238525]
[110.89277649 140.65240479]
[94.49513245 141.72489929]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 66]
[2 65]
[4 63]
[5 62]
[6 61]
[7 60]
[8 59]
[9 58]
[10 55]
[11 54]
[12 53]
[13 52]
[15 51]
[16 50]
[17 49]
[18 48]
[19 47]
[20 46]
[21 44]
[22 43]
[23 42]
[68 88]
[69 87]
[70 86]
[71 85]
[73 84]
[74 83]
[98 187]
[99 186]
[100 185]
[101 184]
[103 182]
[104 181]
[105 180]
[106 179]
[107 160]
[108 159]
[109 158]
[110 157]
[111 156]
[112 155]
[113 154]
[114 153]
[115 152]
[116 151]
[117 150]
[118 149]
[119 148]
[120 147]
[121 146]
[122 145]
[126 144]
[127 143]
[128 142]
[129 141]
[130 140]
[131 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
