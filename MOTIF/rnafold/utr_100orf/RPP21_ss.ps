%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:08:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGAGGGGUGGGGCUGCGGGAGGCCCUGGAGCGCGGCGGUGAUGGCGGGGCCGGUGAAGGACCGCGAGGCCUUCCAGAGGCUCAACUUCCUGUACCAGGCCGCCCAUUGUGUCCUUGCCCAGGACCCCGAGAACCAGGCGC\
) } def
/len { sequence length } bind def

/coor [
[150.62046814 526.08721924]
[150.62046814 511.08718872]
[150.62046814 496.08718872]
[150.62046814 481.08718872]
[132.93022156 467.17196655]
[130.99971008 444.48541260]
[146.43449402 427.39340210]
[144.15264893 412.56799316]
[141.87080383 397.74255371]
[139.58894348 382.91714478]
[137.30709839 368.09170532]
[124.10482025 354.02484131]
[131.49191284 335.32235718]
[128.56555176 320.61056519]
[125.63919830 305.89880371]
[122.71284485 291.18701172]
[113.66554260 286.24169922]
[108.76749420 276.91888428]
[109.87338257 266.22421265]
[116.85590363 257.76046753]
[114.57405853 242.93504333]
[112.29220581 228.10961914]
[110.01035309 213.28419495]
[100.42698669 201.88208008]
[105.97490692 187.06549072]
[103.69305420 172.24008179]
[91.56693268 163.66728210]
[89.04161835 148.66470337]
[98.11576843 136.00382996]
[95.83391571 121.17841339]
[93.55206299 106.35298920]
[90.72215271 103.60961151]
[89.14829254 99.61017609]
[89.37252808 94.95972443]
[91.63901520 90.48632812]
[90.33168030 75.54341125]
[89.02433777 60.60049057]
[87.71700287 45.65756989]
[86.40966797 30.71464920]
[84.77666473 15.80380440]
[82.81877136 0.93213111]
[80.86087799 -13.93954182]
[78.90298462 -28.81121445]
[66.64847565 -38.42707062]
[64.87474823 -53.53695297]
[74.11751556 -65.16049957]
[72.15962219 -80.03217316]
[55.60591125 -91.29265594]
[52.59463501 -110.77986908]
[64.60377502 -126.03692627]
[61.67742157 -140.74870300]
[58.75106812 -155.46047974]
[55.82471466 -170.17225647]
[52.89835739 -184.88404846]
[37.46953964 -191.72691345]
[29.21688843 -206.25965881]
[31.20496941 -222.68655396]
[42.45860291 -234.59010315]
[39.21200943 -249.23454285]
[35.96541214 -263.87896729]
[32.71881866 -278.52340698]
[29.47222519 -293.16784668]
[24.52464104 -300.93844604]
[26.31822777 -308.16708374]
[23.39187431 -322.87887573]
[12.17824173 -334.84490967]
[17.19263840 -350.45861816]
[33.27667999 -353.65792847]
[43.88448715 -341.15167236]
[38.10365295 -325.80520630]
[41.03000641 -311.09344482]
[44.11666489 -296.41445923]
[47.36325836 -281.77001953]
[50.60985565 -267.12557983]
[53.85644913 -252.48114014]
[57.10304260 -237.83670044]
[69.82460022 -233.65087891]
[78.87493134 -223.63247681]
[81.79749298 -210.34049988]
[77.71981049 -197.24258423]
[67.61013794 -187.81039429]
[70.53649139 -173.09861755]
[73.46284485 -158.38684082]
[76.38919830 -143.67506409]
[79.31555939 -128.96328735]
[89.19152832 -125.72012329]
[96.86253357 -118.58549500]
[100.87351227 -108.81990814]
[100.42502594 -98.19097900]
[95.53154755 -88.65352631]
[87.03129578 -81.99006653]
[88.98918915 -67.11839294]
[100.92540741 -58.28311157]
[103.12284088 -43.22901154]
[93.77465820 -30.76910782]
[95.73255157 -15.89743423]
[97.69044495 -1.02576172]
[99.64833832 13.84591103]
[102.88502502 17.45109940]
[103.84175873 23.15003204]
[101.35259247 29.40731239]
[102.65992737 44.35023499]
[103.96726227 59.29315567]
[105.27459717 74.23607635]
[106.58193207 89.17899323]
[108.37748718 104.07113647]
[110.65933990 118.89656067]
[112.94119263 133.72198486]
[125.40255737 143.06822205]
[127.50548553 158.13581848]
[118.51847839 169.95822144]
[120.80033112 184.78364563]
[130.54690552 197.24618530]
[124.83577728 211.00234985]
[127.11763000 225.82777405]
[129.39947510 240.65319824]
[131.68133545 255.47862244]
[145.01954651 270.52667236]
[137.42462158 288.26065063]
[140.35098267 302.97244263]
[143.27732849 317.68423462]
[146.20368958 332.39599609]
[155.65988159 337.96115112]
[160.35687256 347.63262939]
[158.94281006 358.06845093]
[152.13252258 365.80987549]
[154.41436768 380.63528442]
[156.69621277 395.46072388]
[158.97807312 410.28613281]
[161.25991821 425.11157227]
[168.98942566 427.15567017]
[175.84458923 431.21740723]
[181.31274414 436.97579956]
[184.98963928 443.98370361]
[186.60932922 451.70242310]
[186.06340027 459.54315186]
[183.40798950 466.91192627]
[178.85856628 473.25457764]
[172.77235413 478.09832764]
[165.62046814 481.08718872]
[165.62046814 496.08718872]
[165.62046814 511.08718872]
[165.62046814 526.08721924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 143]
[2 142]
[3 141]
[4 140]
[7 130]
[8 129]
[9 128]
[10 127]
[11 126]
[13 122]
[14 121]
[15 120]
[16 119]
[20 117]
[21 116]
[22 115]
[23 114]
[25 112]
[26 111]
[29 108]
[30 107]
[31 106]
[35 105]
[36 104]
[37 103]
[38 102]
[39 101]
[40 98]
[41 97]
[42 96]
[43 95]
[46 92]
[47 91]
[50 85]
[51 84]
[52 83]
[53 82]
[54 81]
[58 76]
[59 75]
[60 74]
[61 73]
[62 72]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
