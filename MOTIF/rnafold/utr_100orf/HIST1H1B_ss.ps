%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:43:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUGCUCUUUAGAUUUCGAGCUUAUUCUCUUCUAGCAGUUUCUUGCCACCAUGUCGGAAACCGCUCCUGCCGAGACAGCCACCCCAGCGCCGGUGGAGAAAUCCCCGGCUAAGAAGAAGGCAACUAAGAAGGCUGCCGGCGCCGGCGCUG\
) } def
/len { sequence length } bind def

/coor [
[141.01272583 143.28218079]
[129.26019287 151.95413208]
[115.75203705 157.50881958]
[101.29875946 159.61294556]
[86.76754761 158.14028931]
[73.03029633 153.17918396]
[64.61688232 165.59750366]
[56.20347214 178.01580811]
[47.79006195 190.43412781]
[54.56669617 204.21719360]
[53.52789307 219.54090881]
[44.95307922 232.28329468]
[31.14884377 239.01667786]
[15.82845306 237.92985535]
[3.11301637 229.31513977]
[-3.57707810 215.48986816]
[-2.44222832 200.17295837]
[6.21229696 187.48458862]
[20.05847359 180.83786011]
[35.37174988 182.02072144]
[43.78516006 169.60240173]
[52.19857025 157.18408203]
[60.61198044 144.76577759]
[50.37247849 133.05297852]
[43.51142120 119.09008026]
[40.49588013 103.82759857]
[41.53114700 88.30455017]
[46.54673386 73.57767487]
[34.04270172 65.29220581]
[21.53866386 57.00672913]
[9.03462791 48.72125244]
[-6.45172119 56.91627121]
[-23.86856842 56.18067169]
[-38.45964813 46.80484772]
[-46.28554916 31.42646217]
[-45.28713989 14.28901291]
[-58.12079239 6.52387714]
[-70.95444489 -1.24125826]
[-86.76696777 -1.76541650]
[-93.65071869 -14.97387123]
[-106.48436737 -22.73900604]
[-119.31802368 -30.50414276]
[-132.15167236 -38.26927948]
[-144.98533630 -46.03441238]
[-157.81898499 -53.79954910]
[-173.63150024 -54.32370758]
[-180.51525879 -67.53216553]
[-193.34890747 -75.29729462]
[-208.63363647 -71.27824402]
[-222.24116516 -79.31632233]
[-226.09838867 -94.64268494]
[-217.91690063 -108.16446686]
[-202.55061340 -111.85944366]
[-189.11607361 -103.53544617]
[-185.58377075 -88.13095093]
[-172.75012207 -80.36581421]
[-157.85554504 -80.39707184]
[-150.05384827 -66.63320160]
[-137.22019958 -58.86806870]
[-124.38654327 -51.10293198]
[-111.55288696 -43.33779526]
[-98.71923828 -35.57266235]
[-85.88558197 -27.80752563]
[-70.99101257 -27.83878136]
[-63.18931198 -14.07491207]
[-50.35565948 -6.30977678]
[-37.52200317 1.45535874]
[-27.11328506 -5.82312012]
[-14.67452335 -8.61376572]
[-2.06163311 -6.46372223]
[8.82961082 0.33995920]
[16.34851265 10.80807114]
[19.33960533 23.39294434]
[17.32010269 36.21721649]
[29.82413864 44.50269318]
[42.32817459 52.78816605]
[54.83221054 61.07364273]
[65.86312866 51.11170959]
[79.01521301 44.18755341]
[93.47122955 40.73141098]
[108.33292389 40.95804214]
[122.67683411 44.85335922]
[135.61167908 52.17532730]
[146.33370972 62.46897507]
[154.17671204 75.09468842]
[158.65333557 89.26794434]
[159.48541260 104.10805511]
[174.20094299 107.01552582]
[188.91645813 109.92300415]
[203.63198853 112.83047485]
[218.34750366 115.73794556]
[233.06303406 118.64541626]
[247.77854919 121.55288696]
[262.49407959 124.46036530]
[277.20959473 127.36783600]
[291.92510986 130.27531433]
[306.64062500 133.18278503]
[297.34667969 121.40898895]
[295.74801636 106.49442291]
[302.33551025 93.01833344]
[315.08657837 85.11832428]
[330.08624268 85.21994019]
[342.72909546 93.29199982]
[349.13339233 106.85610199]
[347.33282471 121.74764252]
[337.88015747 133.39442444]
[323.67959595 138.22042847]
[337.61029053 143.78236389]
[351.54101562 149.34431458]
[365.47174072 154.90625000]
[379.40243530 160.46818542]
[389.44464111 148.28329468]
[402.73910522 139.80020142]
[417.98309326 135.83596802]
[433.68719482 136.76553345]
[448.32092285 142.48635864]
[460.46176147 152.42945862]
[468.93344116 165.61607361]
[472.92004395 180.75396729]
[472.04437256 196.36407471]
[486.08633423 201.63882446]
[502.16744995 198.42474365]
[512.78674316 210.92126465]
[507.01995850 226.27304077]
[490.79953003 228.68745422]
[480.81161499 215.68080139]
[466.76962280 210.40605164]
[458.13540649 221.78611755]
[446.62606812 230.27415466]
[433.17318726 235.17192078]
[418.86883545 236.07226562]
[404.87689209 232.89288330]
[392.33843994 225.88381958]
[382.27850342 215.60780334]
[375.52252197 202.89505005]
[372.62835693 188.77622986]
[373.84051514 174.39889526]
[359.90979004 168.83695984]
[345.97909546 163.27502441]
[332.04837036 157.71308899]
[318.11764526 152.15115356]
[303.73315430 147.89830017]
[289.01763916 144.99082947]
[274.30212402 142.08335876]
[259.58660889 139.17588806]
[244.87107849 136.26841736]
[230.15554810 133.36094666]
[215.44003296 130.45347595]
[200.72450256 127.54599762]
[186.00898743 124.63852692]
[171.29345703 121.73104858]
[156.57794189 118.82357788]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 23]
[7 22]
[8 21]
[9 20]
[28 77]
[29 76]
[30 75]
[31 74]
[36 67]
[37 66]
[38 65]
[40 63]
[41 62]
[42 61]
[43 60]
[44 59]
[45 58]
[47 56]
[48 55]
[87 152]
[88 151]
[89 150]
[90 149]
[91 148]
[92 147]
[93 146]
[94 145]
[95 144]
[96 143]
[97 142]
[107 141]
[108 140]
[109 139]
[110 138]
[111 137]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
