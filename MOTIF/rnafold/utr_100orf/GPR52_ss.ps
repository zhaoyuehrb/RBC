%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUAGCCAAGUCUGCAGGUGUCUUUAAAUUUCCAAGCCAUGAAUGAAUCCAGGUGGACUGAAUGGAGGAUCCUGAACAUGAGCAGUGGCAUUGUGAAUGUGUCCGAGCGUCACUCCUGCCCACUUGGAUUUGGCCACU\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 307.77966309]
[92.50000000 291.94052124]
[92.50000000 276.94052124]
[84.76270294 264.21325684]
[92.50000000 250.41307068]
[92.50000000 235.41307068]
[92.50000000 220.41307068]
[92.50000000 205.41307068]
[92.50000000 190.41307068]
[92.50000000 175.41307068]
[92.50000000 160.41307068]
[92.50000000 145.41307068]
[92.50000000 130.41307068]
[73.54452515 116.77238464]
[69.29366302 93.80918121]
[55.72703934 87.41022491]
[42.16041183 81.01126862]
[28.59378624 74.61231232]
[19.41201973 73.76502991]
[14.79537201 67.91237640]
[1.37682378 61.20845413]
[-12.04172421 54.50453186]
[-25.46027374 47.80061340]
[-38.87882233 41.09669113]
[-52.29737091 34.39276886]
[-65.60519409 45.12977982]
[-82.20445251 48.99869156]
[-98.78078461 45.27611542]
[-112.04571533 34.74956894]
[-119.38905334 19.55145836]
[-119.39242554 2.72725868]
[-133.10020447 -3.36346555]
[-146.80796814 -9.45418930]
[-153.54846191 -9.13201427]
[-158.63435364 -11.89841938]
[-160.98779297 -16.14237213]
[-174.40634155 -22.84629440]
[-187.82489014 -29.55021477]
[-196.98516846 -30.60478020]
[-201.46836853 -36.56027603]
[-214.73197937 -43.56573486]
[-228.59989929 -36.60438156]
[-243.90556335 -39.15710068]
[-254.76362610 -50.24232101]
[-256.99896240 -65.59754944]
[-249.75199890 -79.31838226]
[-235.80937195 -86.12888336]
[-220.53230286 -83.41027832]
[-209.79513550 -72.20792389]
[-207.72651672 -56.82935333]
[-194.46290588 -49.82389069]
[-181.12097168 -42.96876526]
[-167.70242310 -36.26484299]
[-154.28387451 -29.56092072]
[-140.71725464 -23.16196442]
[-127.00947571 -17.07123947]
[-113.30170441 -10.98051548]
[-104.04708862 -20.22309685]
[-92.16226196 -25.76063538]
[-79.06866455 -26.90664864]
[-66.34059143 -23.50134277]
[-55.51591492 -15.93347359]
[-47.91026688 -5.09609270]
[-44.45716095 7.71878862]
[-45.59344864 20.97422218]
[-32.17490005 27.67814255]
[-18.75635147 34.38206482]
[-5.33780336 41.08598328]
[8.08074474 47.78990555]
[21.49929428 54.49382782]
[34.99274063 61.04568481]
[48.55936813 67.44464111]
[62.12599564 73.84359741]
[75.69261932 80.24255371]
[80.60491943 75.40251923]
[86.45724487 71.75466156]
[92.96595764 69.47579193]
[99.81558990 68.67634583]
[106.67415619 69.39508057]
[113.20925140 71.59716797]
[119.10411835 75.17586517]
[124.07306671 79.95772552]
[127.87524414 85.71098328]
[130.32638550 92.15679932]
[145.32542419 91.98728943]
[160.32446289 91.81778717]
[175.32350159 91.64827728]
[190.32255554 91.47876740]
[205.31872559 91.13977814]
[220.31010437 90.63134766]
[231.97277832 77.64713287]
[249.07987976 77.08364868]
[261.08959961 88.80226135]
[276.06567383 87.95516205]
[291.04171753 87.10806274]
[306.01779175 86.26096344]
[314.49185181 82.62599945]
[321.34112549 85.56783295]
[336.33251953 85.05939484]
[351.32388306 84.55096436]
[361.92950439 72.83361053]
[377.71817017 72.13094330]
[389.32275391 82.85985565]
[389.85842896 98.65505981]
[379.00744629 110.14555359]
[363.20745850 110.51422119]
[351.83233643 99.54234314]
[336.84094238 100.05078125]
[321.84954834 100.55921173]
[306.86489868 101.23702240]
[291.88882446 102.08412170]
[276.91275024 102.93122101]
[261.93670654 103.77832794]
[254.74688721 114.52993774]
[242.48504639 119.22282410]
[229.57600403 115.92229462]
[220.81852722 105.62272644]
[205.82714844 106.13115692]
[199.19293213 109.53028107]
[190.49206543 106.47781372]
[175.49301147 106.64731598]
[160.49397278 106.81682587]
[145.49493408 106.98633575]
[130.49589539 107.15583801]
[122.27435303 122.02404785]
[107.50000000 130.41307068]
[107.50000000 145.41307068]
[107.50000000 160.41307068]
[107.50000000 175.41307068]
[107.50000000 190.41307068]
[107.50000000 205.41307068]
[107.50000000 220.41307068]
[107.50000000 235.41307068]
[107.50000000 250.41307068]
[115.23729706 264.21325684]
[107.50000000 276.94052124]
[107.50000000 291.94052124]
[113.54634094 307.77966309]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 137]
[3 136]
[5 134]
[6 133]
[7 132]
[8 131]
[9 130]
[10 129]
[11 128]
[12 127]
[13 126]
[15 74]
[16 73]
[17 72]
[18 71]
[20 70]
[21 69]
[22 68]
[23 67]
[24 66]
[25 65]
[31 57]
[32 56]
[33 55]
[36 54]
[37 53]
[38 52]
[40 51]
[41 50]
[84 124]
[85 123]
[86 122]
[87 121]
[88 120]
[89 118]
[90 117]
[93 113]
[94 112]
[95 111]
[96 110]
[98 109]
[99 108]
[100 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
