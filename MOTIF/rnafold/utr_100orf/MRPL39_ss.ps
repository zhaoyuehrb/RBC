%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUCACCGCUGCUAUGGAGGCGCUGGCCAUGGGUUCCCGGGCGCUGCGGCUCUGGCUGGUCGCACCCGGUGGCGGGAUCAAAUGGAGAUUUAUAGCAACAUCGUCAGCUUCUC\
) } def
/len { sequence length } bind def

/coor [
[220.61257935 242.78591919]
[206.79028320 231.04319763]
[200.69360352 213.87290955]
[204.04605103 195.87834167]
[192.28216553 186.57183838]
[184.98527527 184.86672974]
[180.32864380 176.84692383]
[168.82334900 167.22254944]
[157.31806946 157.59819031]
[145.81277466 147.97383118]
[134.30749512 138.34945679]
[122.80220795 128.72509766]
[111.29692078 119.10073853]
[99.79163361 109.47637177]
[94.44919586 108.73927307]
[89.94477844 104.99490356]
[87.93959045 98.99858856]
[76.97705078 88.76029205]
[61.40445328 89.12347412]
[50.43272781 78.58422089]
[50.18246078 63.73588562]
[39.21992111 53.49758911]
[28.25738144 43.25929260]
[17.15602303 33.17168427]
[5.91791630 23.23664665]
[-5.32018995 13.30160809]
[-16.55829620 3.36657095]
[-27.79640198 -6.56846666]
[-39.03450775 -16.50350380]
[-50.27261353 -26.43854141]
[-58.89909744 -29.84226418]
[-61.67723083 -36.80171585]
[-72.63977051 -47.04001236]
[-83.60231018 -57.27830887]
[-88.95951843 -58.50199509]
[-92.84803009 -61.43061066]
[-94.85558319 -65.17960358]
[-94.99929047 -68.83203125]
[-105.08689880 -79.93339539]
[-115.17450714 -91.03475189]
[-130.79173279 -90.23710632]
[-143.23670959 -99.70583344]
[-146.63328552 -114.97007751]
[-139.37771606 -128.82254028]
[-124.89584351 -134.72250366]
[-110.02558136 -129.88420105]
[-101.78820038 -116.59210205]
[-104.07315063 -101.12236023]
[-93.98554230 -90.02100372]
[-83.89793396 -78.91963959]
[-73.36401367 -68.24085236]
[-62.40147400 -58.00255203]
[-51.43893433 -47.76425552]
[-40.33757782 -37.67664719]
[-29.09947014 -27.74160957]
[-17.86136436 -17.80657196]
[-6.62325859 -7.87153530]
[4.61484766 2.06350231]
[15.85295391 11.99853992]
[27.09106064 21.93357658]
[34.28395081 24.03461647]
[38.49567795 32.29675293]
[49.45821762 42.53504944]
[60.42075729 52.77334595]
[75.25155640 52.00974655]
[86.51497650 62.23667145]
[87.21535492 77.79775238]
[98.17789459 88.03604889]
[109.41600037 97.97108459]
[120.92128754 107.59545135]
[132.42657471 117.21981049]
[143.93185425 126.84417725]
[155.43714905 136.46853638]
[166.94242859 146.09291077]
[178.44772339 155.71726990]
[189.95300293 165.34162903]
[201.58866882 174.80795288]
[213.35255432 184.11445618]
[224.06707764 178.19059753]
[236.12660217 176.29136658]
[248.07463074 178.62199402]
[258.47640991 184.87825012]
[266.09118652 194.28602600]
[270.02020264 205.69694519]
[269.81274414 217.72863770]
[265.51763916 228.93206787]
[276.48016357 239.17036438]
[287.44271851 249.40866089]
[298.40524292 259.64697266]
[301.28121948 244.92524719]
[314.45278931 237.74824524]
[328.38247681 243.31280518]
[332.98376465 257.58963013]
[324.92489624 270.24090576]
[310.04092407 272.10571289]
[319.50723267 283.74139404]
[328.97357178 295.37704468]
[344.12490845 292.86068726]
[358.49890137 298.27212524]
[368.22900391 310.15576172]
[370.69787598 325.31491089]
[365.24139404 339.67187500]
[353.32733154 349.36468506]
[338.16052246 351.78604126]
[323.82070923 346.28457642]
[314.16531372 334.34017944]
[311.79150391 319.16586304]
[317.33789062 304.84338379]
[307.87158203 293.20770264]
[298.40524292 281.57205200]
[288.16696167 270.60949707]
[277.20440674 260.37121582]
[266.24188232 250.13290405]
[255.27934265 239.89460754]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 78]
[5 77]
[7 76]
[8 75]
[9 74]
[10 73]
[11 72]
[12 71]
[13 70]
[14 69]
[17 68]
[18 67]
[21 64]
[22 63]
[23 62]
[24 60]
[25 59]
[26 58]
[27 57]
[28 56]
[29 55]
[30 54]
[32 53]
[33 52]
[34 51]
[38 50]
[39 49]
[40 48]
[86 114]
[87 113]
[88 112]
[89 111]
[95 110]
[96 109]
[97 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
