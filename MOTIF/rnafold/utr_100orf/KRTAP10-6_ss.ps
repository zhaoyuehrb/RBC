%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCACCAGUUCAACCCCAGCAUGGCCGCGUCCACCAUGUCCGUCUGCUCCAGCGACCUGAGCUACGGCAGCCGCGUCUGCCUUCCUGGUUCCUGUGACUCUUGCUCCGACUCCUGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[186.39772034 381.43380737]
[171.51089478 383.27291870]
[158.29142761 376.18450928]
[151.58534241 362.76702881]
[153.85096741 347.93911743]
[164.25775146 337.13641357]
[178.99078369 334.31896973]
[192.64830017 340.51882935]
[187.35700989 326.48306274]
[182.06573486 312.44729614]
[176.77445984 298.41156006]
[171.30290222 284.44509888]
[165.65197754 270.55023193]
[149.64498901 267.16412354]
[138.66848755 254.80908203]
[137.16099548 238.18519592]
[145.90759277 223.77430725]
[139.90078735 210.02954102]
[133.89398193 196.28479004]
[127.88716888 182.54003906]
[113.32442474 179.52929688]
[103.20728302 168.38893127]
[101.57080078 153.25039673]
[109.25093079 139.89668274]
[103.24411774 126.15192413]
[97.23731232 112.40717316]
[90.70420837 98.90463257]
[83.65455627 85.66445160]
[76.60490417 72.42427063]
[69.55525208 59.18408585]
[60.31869888 59.46134567]
[51.55577850 56.66971970]
[44.25168610 51.15362549]
[39.21743774 43.56203842]
[36.99982834 34.77222824]
[37.82218552 25.78841782]
[41.56221771 17.62706566]
[47.76918793 11.20185566]
[42.47790527 -2.83389640]
[36.45271301 -9.86045456]
[37.23618698 -17.29975700]
[32.30805206 -31.46709442]
[27.37991524 -45.63443375]
[22.45178032 -59.80177307]
[11.14274693 -66.16359711]
[7.36880255 -78.15704346]
[12.64887428 -89.12285614]
[8.08715153 -103.41239166]
[3.52542949 -117.70191956]
[-1.03629303 -131.99145508]
[-6.69177723 -139.31886292]
[-5.52637672 -146.70796204]
[-9.71866131 -161.11021423]
[-21.92861748 -172.05776978]
[-18.28840828 -188.04779053]
[-2.54276848 -192.63111877]
[9.11053658 -181.09281921]
[4.68358707 -165.30250549]
[8.87587166 -150.90025330]
[13.25323772 -136.55317688]
[17.81496048 -122.26364136]
[22.37668228 -107.97411346]
[26.93840599 -93.68457794]
[40.53251648 -82.66700745]
[36.61911774 -64.72990417]
[41.54725266 -50.56256866]
[46.47539139 -36.39522934]
[51.40352631 -22.22789192]
[56.51365662 -8.12517738]
[61.80493927 5.91057444]
[81.88102722 12.56336403]
[90.89402771 32.00089264]
[82.79543304 52.13443756]
[89.84508514 65.37461853]
[96.89473724 78.61479950]
[103.94438934 91.85498047]
[107.57054901 93.51997375]
[110.40704346 96.82551575]
[111.71672821 101.36296082]
[110.98206329 106.40036011]
[116.98886871 120.14511871]
[122.99568176 133.88987732]
[138.01268005 137.32437134]
[148.01101685 148.80856323]
[149.31445312 163.80073547]
[141.63191223 176.53323364]
[147.63873291 190.27798462]
[153.64553833 204.02273560]
[159.65234375 217.76748657]
[173.36227417 219.73722839]
[184.20365906 228.18168640]
[189.38682556 240.79142761]
[187.64608765 254.20372009]
[179.54684448 264.89932251]
[185.19775391 278.79418945]
[191.40187073 285.66326904]
[190.81021118 293.12026978]
[196.10148621 307.15603638]
[201.39276123 321.19177246]
[206.68405151 335.22753906]
[213.39045715 348.64483643]
[221.44090271 361.30148315]
[229.49134827 373.95809937]
[237.54177856 386.61474609]
[245.59222412 399.27136230]
[253.64266968 411.92800903]
[269.07000732 411.89739990]
[282.05252075 420.23156738]
[288.44754028 434.27105713]
[286.21441650 449.53591919]
[276.06576538 461.15524292]
[261.23999023 465.42129517]
[246.46789551 460.97283936]
[236.46324158 449.22930908]
[234.41845703 433.93804932]
[240.98603821 419.97845459]
[232.93559265 407.32180786]
[224.88514709 394.66519165]
[216.83470154 382.00854492]
[208.78427124 369.35192871]
[200.73382568 356.69528198]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 100]
[9 99]
[10 98]
[11 97]
[12 95]
[13 94]
[17 89]
[18 88]
[19 87]
[20 86]
[24 82]
[25 81]
[26 80]
[27 76]
[28 75]
[29 74]
[30 73]
[38 70]
[39 69]
[41 68]
[42 67]
[43 66]
[44 65]
[47 63]
[48 62]
[49 61]
[50 60]
[52 59]
[53 58]
[101 121]
[102 120]
[103 119]
[104 118]
[105 117]
[106 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
