%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:08:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUACGCGCCAGAACCUGCGCCGGGAAGCGUCGCACAGCGACUGCAUCACCAUGGAGCCGAGGGCAGUAGGUGUCUCCAAACAGGACAUACGUGAACAAAUUUGGGGCUACAUGGAAUCACAAAAUUUAGCUGACUUUCCCCGACCUGUUC\
) } def
/len { sequence length } bind def

/coor [
[116.18551636 271.34344482]
[101.18551636 271.35272217]
[87.28351593 265.71942139]
[76.52122498 255.27081299]
[70.47925568 241.54148865]
[70.04541779 226.54502869]
[62.10247421 239.26940918]
[54.15952682 251.99377441]
[46.21658325 264.71813965]
[52.16060638 279.05160522]
[48.51169205 294.13354492]
[36.67292023 304.16467285]
[21.19654274 305.28778076]
[8.03354168 297.07101440]
[2.24535894 282.67391968]
[6.05766869 267.63244629]
[18.00456047 257.73034668]
[33.49221039 256.77520752]
[41.43515778 244.05082703]
[49.37810135 231.32646179]
[57.32104874 218.60208130]
[63.34647751 204.86549377]
[67.32849121 190.40368652]
[71.31050873 175.94189453]
[75.29251862 161.48010254]
[56.31637192 149.81970215]
[42.27606964 132.53013611]
[34.75803757 111.56497192]
[19.78686333 112.49444580]
[4.82609367 113.57859039]
[-10.12267399 114.81728363]
[-25.07144165 116.05597687]
[-40.02021027 117.29466248]
[-54.96897507 118.53335571]
[-70.25470734 125.86702728]
[-81.53328705 113.20883179]
[-72.49200439 98.86688232]
[-56.20766449 103.58458710]
[-41.25889969 102.34589386]
[-26.31013107 101.10720825]
[-11.36136341 99.86851501]
[3.58740354 98.62982178]
[10.03439999 94.91970062]
[18.85738182 97.52327728]
[33.82855606 96.59379578]
[38.62496567 75.03267670]
[50.24194336 56.24616623]
[67.38850403 42.32199478]
[88.15916443 34.80754089]
[110.24568176 34.53788757]
[114.22769928 20.07609177]
[118.20970917 5.61429453]
[122.19172668 -8.84750271]
[126.17373657 -23.30929947]
[122.37754822 -38.66831970]
[133.21591187 -48.88493347]
[137.19792175 -63.34672928]
[141.17994690 -77.80852509]
[145.16195679 -92.27032471]
[130.84931946 -101.35112762]
[120.01939392 -114.36734009]
[113.70586395 -130.05953979]
[112.50608826 -146.91375732]
[116.52462006 -163.30744934]
[125.36418152 -177.66583252]
[138.16494751 -188.61302185]
[153.68807983 -195.10400391]
[170.43576050 -196.52424622]
[173.51399231 -211.20500183]
[168.77337646 -226.29927063]
[178.95782471 -237.16786194]
[182.03605652 -251.84860229]
[185.11428833 -266.52935791]
[188.19252014 -281.21011353]
[183.45190430 -296.30438232]
[193.63635254 -307.17297363]
[196.71458435 -321.85372925]
[199.79281616 -336.53448486]
[192.25714111 -350.69757080]
[198.76385498 -365.36187744]
[214.32154846 -369.27822876]
[226.99569702 -359.44229126]
[227.06378174 -343.39938354]
[214.47357178 -333.45623779]
[211.39533997 -318.77548218]
[208.31710815 -304.09472656]
[213.27790833 -290.05053711]
[202.87327576 -278.13189697]
[199.79504395 -263.45114136]
[196.71681213 -248.77037048]
[193.63858032 -234.08963013]
[198.59938049 -220.04541016]
[188.19474792 -208.12677002]
[185.11651611 -193.44601440]
[196.90313721 -187.54255676]
[206.92308044 -178.96041870]
[214.57978821 -168.20385742]
[219.41583252 -155.90678406]
[221.14021301 -142.79537964]
[219.64581299 -129.64521790]
[215.01605225 -117.23543549]
[207.52032471 -106.30249786]
[197.59820557 -97.49655151]
[185.83377075 -91.34272766]
[172.92120361 -88.20985413]
[159.62374878 -88.28830719]
[155.64173889 -73.82651520]
[151.65972900 -59.36471558]
[147.67770386 -44.90291977]
[151.75871277 -30.57830238]
[140.63552856 -19.32728577]
[136.65351868 -4.86548901]
[132.67150879 9.59630775]
[128.68949890 24.05810547]
[124.70748138 38.51990128]
[131.69142151 41.81137466]
[138.24505615 45.89290619]
[144.27941895 50.70907974]
[149.71258545 56.19450760]
[154.47076416 62.27470779]
[158.48936462 68.86712646]
[161.71382141 75.88225555]
[164.10035706 83.22483826]
[165.61656189 90.79519653]
[166.24185181 98.49052429]
[165.96774292 106.20635223]
[164.79794312 113.83791351]
[162.74835205 121.28158569]
[159.84678650 128.43630981]
[156.13264465 135.20494080]
[151.65637207 141.49555969]
[146.47871399 147.22277832]
[140.66999817 152.30883789]
[134.30906677 156.68464661]
[127.48231506 160.29083252]
[120.28241730 163.07841492]
[112.80712891 165.00953674]
[105.15795898 166.05798340]
[97.43875122 166.20953369]
[89.75431824 165.46211243]
[85.77230072 179.92390442]
[81.79029083 194.38571167]
[77.80827332 208.84750366]
[89.13294983 199.01124573]
[103.32571411 194.15684509]
[118.30215454 194.99720764]
[131.86274719 201.40895081]
[142.01591492 212.45037842]
[147.27050781 226.49990845]
[146.85479736 241.49414062]
[140.82984924 255.23095703]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 21]
[7 20]
[8 19]
[9 18]
[22 143]
[23 142]
[24 141]
[25 140]
[28 45]
[29 44]
[30 42]
[31 41]
[32 40]
[33 39]
[34 38]
[50 115]
[51 114]
[52 113]
[53 112]
[54 111]
[56 109]
[57 108]
[58 107]
[59 106]
[68 94]
[69 93]
[71 91]
[72 90]
[73 89]
[74 88]
[76 86]
[77 85]
[78 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
