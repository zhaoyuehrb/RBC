%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:06:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGUGCUGCCUGUGACUCCGCUCCUGAACACCCACCACCGAGAUGUCCUGCCAGCAGAGCCAGCAGCAGUGCCAGCCCCCUCCCAAGUGCACUCCCAAGUGCACUCCCAAGUGCCCCGCCCCUAAAUGUCCCCCUAAGUGCC\
) } def
/len { sequence length } bind def

/coor [
[185.63853455 113.98385620]
[198.44252014 106.17202759]
[183.44252014 106.17202759]
[168.44252014 106.17202759]
[153.44340515 106.33564758]
[138.44697571 106.66287231]
[123.45054626 106.99008942]
[108.45411682 107.31731415]
[93.46214294 107.80810547]
[78.47642517 108.46239471]
[63.49872971 109.28011322]
[48.53084564 110.26115417]
[33.56296158 111.24220276]
[18.59507751 112.22325134]
[3.72340369 114.18114471]
[-10.98837566 117.10749817]
[-25.70015526 120.03385162]
[-40.37913895 123.12051392]
[-55.02357864 126.36710358]
[-69.63172913 129.77325439]
[-84.20186615 133.33853149]
[-88.58042145 147.99375916]
[-99.63362885 158.42080688]
[-114.32429504 161.89222717]
[-128.68402100 157.57315063]
[-138.88513184 146.71945190]
[-153.45526123 150.28472900]
[-161.43879700 163.92433167]
[-176.74960327 167.84288025]
[-190.30403137 159.71557617]
[-194.06048584 144.36421204]
[-185.79032898 130.89646912]
[-170.40010071 127.30252838]
[-157.02055359 135.71459961]
[-142.45040894 132.14932251]
[-138.41360474 117.81161499]
[-127.67070007 107.34996796]
[-113.03700256 103.64575958]
[-98.41800690 107.79086304]
[-87.76715088 118.76840973]
[-73.19702148 115.20311737]
[-67.40364838 110.52262115]
[-58.27017212 111.72266388]
[-43.62573242 108.47607422]
[-37.73163605 103.92307281]
[-28.62650871 105.32207489]
[-13.91473007 102.39572144]
[0.79704893 99.46936798]
[-10.72533512 89.86547852]
[-12.28243256 74.94651031]
[-2.99149370 63.17033005]
[11.88026333 61.21308136]
[23.90174675 70.18436432]
[26.25774002 84.99818420]
[17.61402893 97.25537109]
[32.58191299 96.27432251]
[47.54979706 95.29327393]
[62.51768112 94.31222534]
[69.03579712 90.70884705]
[77.82212830 93.47666931]
[92.80785370 92.82238007]
[100.14571381 89.33000183]
[108.12689209 92.32088470]
[123.12332153 91.99365997]
[138.11975098 91.66643524]
[153.11618042 91.33921814]
[161.70268250 88.00266266]
[168.44252014 91.17202759]
[183.44252014 91.17202759]
[198.44252014 91.17202759]
[205.36250305 86.88993073]
[212.67584229 87.35821533]
[225.66622925 79.85821533]
[229.85433960 62.91089630]
[244.69265747 54.37089157]
[260.80364990 59.07469559]
[273.62731934 51.29309464]
[275.62265015 40.50379562]
[283.10440063 32.78221893]
[293.39450073 30.54174614]
[302.99832153 34.29359818]
[316.14923096 27.07876778]
[316.58554077 11.78965759]
[324.56338501 -1.14288187]
[337.85501099 -8.29823303]
[352.84329224 -7.84290266]
[365.50595093 0.00073156]
[378.65686035 -7.21409988]
[391.80776978 -14.42893124]
[404.95867920 -21.64376259]
[418.10955811 -28.85859489]
[431.26046753 -36.07342529]
[444.41137695 -43.28825760]
[457.56225586 -50.50308990]
[465.60250854 -64.79598236]
[482.00140381 -64.70880127]
[489.88922119 -50.33123016]
[481.15161133 -36.45368195]
[464.77709961 -37.35218811]
[451.62619019 -30.13735580]
[438.47531128 -22.92252541]
[425.32440186 -15.70769310]
[412.17349243 -8.49286175]
[399.02258301 -1.27803016]
[385.87170410 5.93680143]
[372.72079468 13.15163326]
[372.53240967 28.04559517]
[364.86322021 40.93123245]
[351.68688965 48.29671097]
[336.49319458 48.07651901]
[323.36404419 40.22966766]
[310.21313477 47.44449997]
[301.51004028 64.66173553]
[281.40893555 64.11677551]
[268.58526611 71.89836884]
[267.28909302 84.76235962]
[258.67416382 94.66320038]
[245.73384094 97.81761169]
[233.16622925 92.84859467]
[220.17584229 100.34859467]
[235.17144775 100.71200562]
[249.69514465 104.46192932]
[262.99230957 111.40352631]
[274.37194824 121.17610931]
[283.24282837 133.27186584]
[289.14398193 147.06231689]
[291.76879883 161.83088684]
[290.98083496 176.81016541]
[286.82110596 191.22184753]
[279.50570679 204.31707764]
[269.41479492 215.41542053]
[257.07263184 223.94018555]
[243.12060547 229.44841003]
[228.28363037 231.65391541]
[213.33265686 230.44206238]
[199.04457092 225.87585449]
[186.16175842 218.19253540]
[175.35365295 207.79133606]
[167.18185425 195.21272278]
[162.07095337 181.11029053]
[160.28652954 166.21679688]
[161.92129517 151.30615234]
[166.89033508 137.15310669]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 70]
[3 69]
[4 68]
[5 66]
[6 65]
[7 64]
[8 63]
[9 61]
[10 60]
[11 58]
[12 57]
[13 56]
[14 55]
[15 48]
[16 47]
[17 46]
[18 44]
[19 43]
[20 41]
[21 40]
[26 35]
[27 34]
[72 120]
[73 119]
[76 115]
[77 114]
[81 112]
[82 111]
[87 106]
[88 105]
[89 104]
[90 103]
[91 102]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
