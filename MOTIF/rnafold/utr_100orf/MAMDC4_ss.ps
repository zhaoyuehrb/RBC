%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:13:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAACUUCCCAGGCACCCUGUGUGGCCGCACUGCUCCCUCUGGCCCAACCAUGCCUCUGUCCAGCCACCUGCUGCCCGCCUUGGUCCUGUUCCUGGCAGGGUCCUCAGGCUGGGCCUGGGUCCCCAACCACUGCAGGAGCCCUGGCCAGG\
) } def
/len { sequence length } bind def

/coor [
[113.90500641 123.87200928]
[110.50202942 138.48091125]
[119.06243134 151.76605225]
[115.63992310 167.19531250]
[102.26502228 175.61477661]
[86.87281036 172.02932739]
[78.59521484 158.56616211]
[82.34320068 143.21270752]
[95.89313507 135.07792664]
[99.29611206 120.46903229]
[88.96891022 109.59020996]
[74.20285034 112.22907257]
[59.43679810 114.86793518]
[44.67074203 117.50680542]
[29.90468597 120.14566803]
[25.82435799 133.56195068]
[16.39612198 143.85270691]
[3.51033068 149.03935242]
[-10.28573418 148.15830994]
[-22.29137039 141.43939209]
[-30.18114090 130.24961853]
[-44.99890137 132.58071899]
[-53.05118561 137.03184509]
[-60.14887619 134.80284119]
[-75.01192474 136.82518005]
[-89.87496948 138.84751892]
[-104.73801422 140.86985779]
[-119.60105896 142.89218140]
[-124.25996399 157.42687988]
[-134.77008057 168.49485779]
[-149.04463196 173.89855957]
[-164.24938965 172.56507874]
[-177.36543274 164.75918579]
[-185.78857422 152.03073120]
[-187.84637451 136.90696716]
[-183.13027954 122.39073181]
[-172.57666016 111.36422729]
[-158.28094482 106.01678467]
[-143.08155823 107.41012573]
[-129.99633789 115.26761627]
[-121.62339783 128.02914429]
[-106.76035309 126.00680542]
[-91.89730072 123.98447418]
[-77.03425598 121.96213531]
[-62.17120743 119.93980408]
[-47.33000183 117.76296234]
[-32.51224518 115.43186188]
[-27.09624481 100.23915100]
[-14.69815636 89.77638245]
[1.37334228 86.95912170]
[16.76672554 92.64588928]
[27.26582146 105.37960815]
[42.03187561 102.74074554]
[56.79793167 100.10188293]
[71.56398773 97.46302032]
[86.33003998 94.82415009]
[100.65264130 90.36734009]
[114.30888367 84.16193390]
[127.96512604 77.95652008]
[137.32815552 65.20331573]
[152.11613464 66.98228455]
[165.77236938 60.77687836]
[179.42861938 54.57146835]
[193.08485413 48.36606216]
[196.23069763 31.77824020]
[208.50564575 20.42892265]
[224.95916748 18.62676239]
[239.11337280 26.88289261]
[252.63757324 20.39472771]
[266.16174316 13.90656281]
[279.68594360 7.41839743]
[293.21014404 0.93023241]
[302.81292725 -19.25681877]
[324.46557617 -20.81274796]
[335.12719727 -31.36403656]
[345.78881836 -41.91532898]
[356.45043945 -52.46661758]
[367.00173950 -63.12824249]
[377.44155884 -73.89905548]
[387.88137817 -84.66986084]
[398.32116699 -95.44066620]
[402.35977173 -113.37582397]
[419.36825562 -117.58428192]
[429.58172607 -128.56994629]
[439.68038940 -139.66125488]
[449.66311646 -150.85702515]
[459.64584351 -162.05279541]
[469.62857056 -173.24855042]
[479.61129761 -184.44432068]
[489.59402466 -195.64009094]
[499.57675171 -206.83586121]
[505.60504150 -222.68186951]
[522.50054932 -221.27577209]
[525.82659912 -204.65127563]
[510.77249146 -196.85313416]
[500.78976440 -185.65736389]
[490.80703735 -174.46159363]
[480.82431030 -163.26583862]
[470.84161377 -152.07006836]
[460.85888672 -140.87429810]
[450.87615967 -129.67852783]
[448.75839233 -122.54685974]
[440.56738281 -118.35646820]
[430.35391235 -107.37080383]
[430.46978760 -95.23432922]
[421.99420166 -85.99398804]
[409.09197998 -85.00085449]
[398.65216064 -74.23004913]
[388.21237183 -63.45923996]
[377.77255249 -52.68843079]
[375.35995483 -45.65102768]
[367.00173950 -41.80499268]
[356.34011841 -31.25370216]
[345.67849731 -20.70241165]
[335.01687622 -10.15112114]
[336.52725220 -5.23608065]
[336.81274414 -0.10213144]
[350.46896362 6.10327578]
[364.12521362 12.30868244]
[377.55523682 4.53603888]
[392.98547363 6.17529154]
[404.48269653 16.59611511]
[407.62597656 31.79149055]
[401.20666504 45.91848373]
[387.69311523 53.54498291]
[372.28155518 51.73843765]
[360.89807129 41.19350433]
[357.91979980 25.96492386]
[344.26358032 19.75951767]
[330.60733032 13.55410957]
[321.20391846 19.44366074]
[309.89468384 19.85388565]
[299.69830322 14.45442200]
[286.17410278 20.94258690]
[272.64993286 27.43075180]
[259.12573242 33.91891861]
[245.60154724 40.40708160]
[244.41659546 53.74094391]
[236.72268677 64.82765961]
[224.45057678 70.69669342]
[210.77426147 69.71106720]
[199.29026794 62.02230453]
[185.63401794 68.22771454]
[171.97778320 74.43312073]
[158.32154846 80.63852692]
[149.93530273 92.94788361]
[134.17053223 91.61276245]
[120.51428986 97.81816864]
[106.85804749 104.02358246]
[111.08350372 109.36405945]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[11 56]
[12 55]
[13 54]
[14 53]
[15 52]
[21 47]
[22 46]
[24 45]
[25 44]
[26 43]
[27 42]
[28 41]
[57 149]
[58 148]
[59 147]
[61 145]
[62 144]
[63 143]
[64 142]
[68 137]
[69 136]
[70 135]
[71 134]
[72 133]
[74 115]
[75 114]
[76 113]
[77 112]
[78 110]
[79 109]
[80 108]
[81 107]
[83 104]
[84 103]
[85 101]
[86 100]
[87 99]
[88 98]
[89 97]
[90 96]
[91 95]
[117 130]
[118 129]
[119 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
