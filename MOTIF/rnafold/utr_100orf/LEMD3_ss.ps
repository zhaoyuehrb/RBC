%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:47:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUUGUAAAACACCCUGGAGAGAAAAUGGCGGCGGCAGCAGCUUCGGCGCCUCAGCAGCUCUCGGAUGAGGAGCUUUUCUCUCAGCUCCGCCGUUACGGCCUGUCUCCCGGACCAGUGACGGAGA\
) } def
/len { sequence length } bind def

/coor [
[86.23017883 198.60417175]
[72.28672791 204.13409424]
[57.28936386 204.41519165]
[43.14849091 199.41162109]
[31.66541862 189.76075745]
[24.30289459 176.69197083]
[21.99877548 161.86999512]
[25.04657173 147.18289185]
[33.05804443 134.50155640]
[45.01266479 125.44136047]
[59.38762283 121.15644073]
[74.34949493 122.19201660]
[60.73317719 115.89949036]
[44.96019363 117.13385773]
[36.65277100 104.77117157]
[23.03645515 98.47864532]
[7.26347399 99.71301270]
[-1.04395044 87.35032654]
[-14.66026688 81.05780029]
[-28.27658272 74.76526642]
[-41.89289856 68.47274017]
[-52.60032272 79.17678070]
[-66.29817200 85.55963898]
[-81.32505798 86.86843872]
[-95.86565399 82.96444702]
[-108.17001343 74.33749390]
[-116.76414490 62.04460144]
[-120.62663269 47.58049393]
[-119.30992889 32.69588470]
[-132.92623901 26.40335655]
[-146.54255676 20.11082649]
[-160.15887451 13.81829643]
[-175.93185425 15.05266571]
[-184.23927307 2.68998122]
[-197.85559082 -3.60254860]
[-211.62338257 -9.55636120]
[-225.53424072 -15.16781425]
[-241.68809509 -12.34203720]
[-252.00326538 -25.09072876]
[-245.86839294 -40.29912949]
[-229.59451294 -42.32213593]
[-219.92277527 -29.07865906]
[-206.01193237 -23.46720505]
[-201.25402832 -24.52596664]
[-195.78785706 -22.52972031]
[-191.56306458 -17.21886444]
[-177.94674683 -10.92633533]
[-163.14770508 -12.61078739]
[-153.86634827 0.20198041]
[-140.25003052 6.49451017]
[-126.63371277 12.78703976]
[-113.01739502 19.07956886]
[-102.53440857 8.43099022]
[-89.01538086 1.99943042]
[-74.08367920 0.57856739]
[-59.53964233 4.35910463]
[-47.14349365 12.90343571]
[-38.40232468 25.19620514]
[-34.38686752 39.76494217]
[-35.60036850 54.85642242]
[-21.98405266 61.14895248]
[-8.36773682 67.44148254]
[5.24857903 73.73400879]
[20.04763031 72.04956055]
[29.32898331 84.86232758]
[42.94530106 91.15485382]
[57.74435043 89.47040558]
[67.02570343 102.28317261]
[80.64202118 108.57569885]
[86.27488708 86.69808960]
[106.41604614 84.19875336]
[117.59626007 74.19861603]
[128.77647400 64.19847870]
[139.95669556 54.19833755]
[151.13691711 44.19820023]
[162.31712341 34.19805908]
[160.61215210 18.77494049]
[168.32749939 5.31191730]
[182.49647522 -1.01419985]
[197.67080688 2.22910929]
[208.01567078 13.79472637]
[209.55323792 29.23543549]
[201.69229126 42.61396790]
[187.45553589 48.78600693]
[172.31726074 45.37827682]
[161.13705444 55.37841415]
[149.95683289 65.37855530]
[138.77661133 75.37869263]
[127.59640503 85.37882996]
[116.41618347 95.37896729]
[115.87362671 110.64647675]
[102.42572784 121.03306580]
[114.75424957 129.57751465]
[127.08277130 138.12196350]
[139.41128540 146.66639709]
[151.73980713 155.21084595]
[164.06832886 163.75529480]
[176.39685059 172.29974365]
[188.83010864 180.69105530]
[201.36621094 188.92794800]
[214.00321960 197.00915527]
[226.73919678 204.93345642]
[241.06394958 198.96844482]
[256.15121460 202.59527588]
[266.19964600 214.41932678]
[267.34542847 229.89404297]
[259.14797974 243.06907654]
[244.75935364 248.87834167]
[229.71231079 245.08805847]
[219.79273987 233.15568542]
[218.81491089 217.66944885]
[206.07891846 209.74514771]
[198.65789795 208.87347412]
[193.12931824 201.46403503]
[180.59321594 193.22714233]
[173.19604492 192.17218018]
[167.85240173 184.62826538]
[155.52388000 176.08381653]
[143.19535828 167.53936768]
[130.86683655 158.99491882]
[118.53832245 150.45048523]
[106.20980072 141.90603638]
[93.88127899 133.36158752]
[102.36231232 145.73382568]
[105.95831299 160.29640198]
[104.21121216 175.19430542]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 69]
[13 68]
[15 66]
[16 65]
[18 63]
[19 62]
[20 61]
[21 60]
[29 52]
[30 51]
[31 50]
[32 49]
[34 47]
[35 46]
[36 43]
[37 42]
[71 90]
[72 89]
[73 88]
[74 87]
[75 86]
[76 85]
[92 123]
[93 122]
[94 121]
[95 120]
[96 119]
[97 118]
[98 117]
[99 115]
[100 114]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
