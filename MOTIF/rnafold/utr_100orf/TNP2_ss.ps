%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:36:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAUGAGGAGGAGGCCCUGCCCCUCCAAACGUGGCCUCCUAUGGACACCCAGACUCACAGCCUUCCUAUCACCCACACUCAGCUCCAUAGCAACUCUCAGCCCCAAAGCCGCACCUGCACCCGCCAUUGCCAAACCUUCA\
) } def
/len { sequence length } bind def

/coor [
[170.02992249 215.88874817]
[176.22120667 204.61743164]
[165.26852417 194.36859131]
[150.68878174 191.32221985]
[145.89872742 176.24356079]
[134.94604492 165.99472046]
[123.99336243 155.74588013]
[113.04067993 145.49705505]
[102.08798981 135.24821472]
[87.26750946 132.93447876]
[73.71210480 139.35717773]
[60.15670395 145.77987671]
[46.60130310 152.20257568]
[33.04590225 158.62527466]
[19.49049950 165.04797363]
[5.93509674 171.47067261]
[-7.62030554 177.89337158]
[-16.77847481 190.79447937]
[-31.59298325 189.25189209]
[-45.14838409 195.67459106]
[-46.31295776 210.98927307]
[-54.99208832 223.66082764]
[-68.85113525 230.28067017]
[-84.16208649 229.06809998]
[-96.80637360 220.34928894]
[-103.38274384 206.46955872]
[-102.12219238 191.16249084]
[-93.36379242 178.54559326]
[-79.46351624 172.01275635]
[-64.16046143 173.32128906]
[-51.57108688 182.11918640]
[-38.01568222 175.69648743]
[-29.82708740 163.25477600]
[-14.04300499 164.33796692]
[-0.48760289 157.91526794]
[13.06779957 151.49256897]
[26.62320137 145.06987000]
[40.17860413 138.64717102]
[53.73400497 132.22447205]
[67.28940582 125.80177307]
[80.84481049 119.37907410]
[71.27793884 101.85713959]
[76.08929443 81.36334229]
[63.15457535 73.76774597]
[50.21986008 66.17215729]
[33.82609558 66.59235382]
[25.49726105 52.46569443]
[33.80134583 38.32447052]
[50.19581985 38.71596146]
[57.81545258 53.23743439]
[70.75016785 60.83303070]
[83.68489075 68.42862701]
[75.97512817 55.56163025]
[68.26536560 42.69463348]
[60.55560684 29.82763863]
[52.84584427 16.96064186]
[45.13608170 4.09364653]
[33.00889587 -4.73422670]
[23.27910805 -16.15049744]
[16.48498535 -29.52359962]
[13.00238800 -44.11371613]
[13.02397823 -59.11370087]
[16.54856110 -73.69373322]
[23.38115311 -87.04722595]
[33.14376450 -98.43544006]
[45.29631424 -107.22836304]
[59.16650391 -112.93955994]
[73.98701477 -115.25308990]
[88.93796539 -114.04094696]
[103.19223022 -109.37019348]
[115.96125031 -101.49923706]
[126.53862762 -90.86348724]
[134.33920288 -78.05134583]
[138.93144226 -63.77159500]
[140.06129456 -48.81420517]
[137.66625977 -34.00664902]
[131.87881470 -20.16809464]
[123.02038574 -8.06544304]
[119.59942627 6.53924990]
[116.17847443 21.14394379]
[112.75752258 35.74863815]
[109.33656311 50.35332870]
[105.91561127 64.95802307]
[115.91964722 53.78129196]
[125.92367554 42.60456085]
[128.75450134 26.45158958]
[144.24949646 21.08159637]
[156.46876526 32.01877213]
[152.84214783 48.01188660]
[137.10040283 52.60859299]
[127.09637451 63.78532410]
[117.09233856 74.96205902]
[126.56056213 87.05106354]
[128.72206116 101.85713959]
[123.39124298 115.41750336]
[112.33683014 124.29552460]
[123.28951263 134.54435730]
[134.24220276 144.79319763]
[145.19488525 155.04203796]
[156.14756775 165.29087830]
[171.51072693 169.07031250]
[175.51734924 183.41590881]
[186.47004700 193.66474915]
[201.53013611 184.88764954]
[218.53149414 181.11920166]
[235.85574341 182.70747375]
[251.85697937 189.49107361]
[265.01821899 200.81558228]
[274.09512329 215.59660339]
[278.23379517 232.42356873]
[277.05087280 249.69445801]
[270.66921997 265.76821899]
[282.48483276 275.00894165]
[294.30047607 284.24966431]
[309.14617920 280.13735962]
[323.40011597 285.49261475]
[331.66970825 298.06552124]
[330.95864868 312.91921997]
[342.77426147 322.15997314]
[359.07943726 323.91323853]
[365.46527100 339.01797485]
[355.36257935 351.93569946]
[339.16415405 349.37777710]
[333.53353882 333.97558594]
[321.71792603 324.73483276]
[307.47323608 329.00421143]
[293.27813721 324.00796509]
[284.64593506 311.46447754]
[285.05972290 296.06530762]
[273.24411011 286.82455444]
[261.42849731 277.58383179]
[251.36734009 285.42361450]
[239.78704834 290.79101562]
[227.28492737 293.40478516]
[214.50679016 293.12591553]
[202.11367798 289.96484375]
[190.74754333 284.08126831]
[180.99810791 275.77600098]
[173.37220764 265.47558594]
[168.26742554 253.71044922]
[165.95143127 241.08757019]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 103]
[3 102]
[5 100]
[6 99]
[7 98]
[8 97]
[9 96]
[10 41]
[11 40]
[12 39]
[13 38]
[14 37]
[15 36]
[16 35]
[17 34]
[19 32]
[20 31]
[43 52]
[44 51]
[45 50]
[83 92]
[84 91]
[85 90]
[112 131]
[113 130]
[114 129]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
