%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:52:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUGCGGCUCGUGGGGCAGCUCGGCAGCAUGGCGUCCGUGACGCUGAGCGAGGCGGAGAAGGUGUACAUCGUGCAUGGCGUCCAGGAAGACCUCCGUGUGGAUGGCCGUGGCUGUGAGGACUACCGAU\
) } def
/len { sequence length } bind def

/coor [
[99.40321350 441.50061035]
[83.92689514 440.37664795]
[72.08869171 430.34484863]
[68.44062042 415.26269531]
[74.38545227 400.92956543]
[87.63726807 392.85684204]
[88.72379303 377.89624023]
[89.81031036 362.93563843]
[80.06708527 354.41415405]
[76.99585724 341.63894653]
[81.94583130 329.25735474]
[93.30541229 321.90817261]
[94.75312042 306.97817993]
[82.14530182 296.53814697]
[78.16925049 280.48855591]
[84.57228851 265.06451416]
[99.02972412 256.37887573]
[100.11624908 241.41828918]
[101.20276642 226.45768738]
[102.28929138 211.49710083]
[103.37581635 196.53649902]
[104.46233368 181.57589722]
[105.36801147 166.60327148]
[106.09271240 151.62078857]
[106.81741333 136.63830566]
[107.54211426 121.65581512]
[86.18268585 114.86459351]
[82.94545746 95.42402649]
[71.48072052 85.75138855]
[60.01598358 76.07875824]
[48.55125046 66.40612793]
[34.12980652 71.50212860]
[19.19253159 68.71382904]
[7.73263884 58.88849258]
[2.76265621 44.74087143]
[5.52286768 30.10369682]
[-5.94186831 20.43106461]
[-17.40660477 10.75843048]
[-28.87133980 1.08579755]
[-40.33607483 -8.58683586]
[-55.87056732 -7.43906641]
[-67.35964966 -17.41181183]
[-68.35813904 -32.22864532]
[-79.82287598 -41.90127945]
[-91.28760529 -51.57391357]
[-107.29264069 -57.16634369]
[-106.34940338 -74.09403229]
[-89.82213593 -77.87370300]
[-81.61497498 -63.03865051]
[-70.15023804 -53.36601639]
[-58.68550491 -43.69338226]
[-43.91205978 -45.20366287]
[-32.14739609 -35.55755997]
[-30.66344261 -20.05157089]
[-19.19870758 -10.37893867]
[-7.73397064 -0.70630509]
[3.73076487 8.96632767]
[15.19550037 18.63896179]
[29.15904236 13.45387745]
[43.94145584 15.97106743]
[55.55589676 25.61321831]
[60.81919479 39.86785126]
[58.22388458 54.94139099]
[69.68862152 64.61402130]
[81.15335083 74.28665924]
[92.61808777 83.95928955]
[109.65228271 82.14761353]
[122.68026733 96.61425018]
[135.60981750 89.00985718]
[148.53935242 81.40545654]
[161.46890259 73.80105591]
[165.48974609 61.47599792]
[176.49891663 55.42573166]
[188.27932739 58.44020844]
[201.38885498 51.15045929]
[214.49836731 43.86070633]
[227.60789490 36.57095337]
[240.71740723 29.28120422]
[253.82693481 21.99145317]
[262.85968018 5.99893379]
[280.34469604 6.84898663]
[293.27423096 -0.75541097]
[306.20376587 -8.35980892]
[309.92800903 -23.71902657]
[323.46536255 -31.87474823]
[338.78436279 -27.98832703]
[346.79647827 -14.36550903]
[342.74832153 0.91152948]
[329.04156494 8.77919292]
[313.80816650 4.56973648]
[300.87863159 12.17413425]
[287.94909668 19.77853203]
[284.57528687 31.46110535]
[273.77893066 37.88343811]
[261.11669922 35.10097504]
[248.00717163 42.39072418]
[234.89764404 49.68047714]
[221.78811646 56.97022629]
[208.67860413 64.25997925]
[195.56907654 71.54972839]
[187.43760681 87.05220795]
[169.07330322 86.73060608]
[156.14375305 94.33499908]
[143.21421814 101.93939972]
[130.28466797 109.54380035]
[122.52459717 122.38051605]
[121.79989624 137.36300659]
[121.07519531 152.34548950]
[120.35049438 167.32797241]
[123.08220673 176.15318298]
[119.42293549 182.66241455]
[118.33641052 197.62301636]
[117.24989319 212.58361816]
[116.16336823 227.54421997]
[115.07684326 242.50480652]
[113.99032593 257.46539307]
[125.19796753 265.58703613]
[130.85998535 278.09780884]
[129.58480835 291.66180420]
[121.81507111 302.72036743]
[109.68309021 308.42590332]
[108.23538208 323.35586548]
[119.58892059 336.60040283]
[117.93418884 353.62857056]
[104.77091217 364.02218628]
[103.68438721 378.98275757]
[102.59786224 393.94335938]
[114.54420471 403.84613037]
[118.35566711 418.88781738]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 127]
[7 126]
[8 125]
[12 122]
[13 121]
[17 116]
[18 115]
[19 114]
[20 113]
[21 112]
[22 111]
[23 109]
[24 108]
[25 107]
[26 106]
[28 66]
[29 65]
[30 64]
[31 63]
[36 58]
[37 57]
[38 56]
[39 55]
[40 54]
[43 51]
[44 50]
[45 49]
[68 105]
[69 104]
[70 103]
[71 102]
[74 100]
[75 99]
[76 98]
[77 97]
[78 96]
[79 95]
[81 92]
[82 91]
[83 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
