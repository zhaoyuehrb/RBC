%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:06:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCGGCCGCCGUUGCGCGGCGCAGAGCGGCAGCAAGAUGGCGGCGCAACAGCGGGACUGCGGGGGUGCUGCGCAGCUGGCGGGGCCGGCGGCGGAGGCUGACCCCCUAGGACGCUUCACGUGUCCCGUGUGCUUAG\
) } def
/len { sequence length } bind def

/coor [
[-19.43330383 258.66067505]
[-33.80620193 254.36883545]
[-43.70025635 243.09463501]
[-46.08948898 228.28613281]
[-40.24446869 214.47393799]
[-53.76964569 220.96005249]
[-67.29482269 227.44616699]
[-80.81999207 233.93228149]
[-94.34516907 240.41838074]
[-107.87034607 246.90449524]
[-121.39552307 253.39060974]
[-134.92070007 259.87670898]
[-148.29359436 266.67123413]
[-161.50717163 273.77062988]
[-174.72076416 280.86999512]
[-187.85208130 288.12039185]
[-200.89941406 295.52087402]
[-209.08578491 309.05950928]
[-223.97357178 308.60861206]
[-237.02090454 316.00909424]
[-242.66027832 331.02832031]
[-257.96276855 335.84637451]
[-271.18960571 326.76724243]
[-272.19427490 310.75567627]
[-260.20611572 300.09439087]
[-244.42138672 302.96179199]
[-231.37405396 295.56127930]
[-224.12091064 282.55203247]
[-208.29989624 282.47357178]
[-195.25257874 275.07305908]
[-190.94866943 268.98339844]
[-181.82014465 267.65640259]
[-168.60655212 260.55703735]
[-155.39295959 253.45765686]
[-153.16586304 249.14233398]
[-148.15969849 246.22505188]
[-141.40679932 246.35154724]
[-127.88162994 239.86543274]
[-114.35645294 233.37931824]
[-100.83128357 226.89320374]
[-87.30610657 220.40710449]
[-73.78092957 213.92098999]
[-60.25575638 207.43487549]
[-46.73057938 200.94876099]
[-33.94547272 193.10395813]
[-22.03645325 183.98390198]
[-10.12743378 174.86386108]
[-6.69942808 168.24143982]
[2.16083121 165.67497253]
[14.27583599 156.83038330]
[17.85478973 150.28829956]
[26.77156639 147.92567444]
[39.08618546 139.36120605]
[51.40080643 130.79673767]
[63.71542740 122.23226929]
[76.03004456 113.66780090]
[88.34466553 105.10333252]
[81.96603394 97.86423492]
[81.19347382 85.74857330]
[88.91541290 73.16659546]
[104.77063751 65.86263275]
[114.29484558 54.27429581]
[123.81905365 42.68596268]
[133.34326172 31.09762764]
[142.86746216 19.50929260]
[152.39167786 7.92095852]
[161.64765930 -3.88271308]
[170.63056946 -15.89551449]
[179.61346436 -27.90831757]
[181.32386780 -46.20195007]
[197.63897705 -52.56341553]
[206.34407043 -64.77902985]
[215.04916382 -76.99464417]
[216.75689697 -92.72341919]
[230.44410706 -98.59791565]
[239.14920044 -110.81352997]
[247.85429382 -123.02915192]
[256.55938721 -135.24476624]
[265.26449585 -147.46037292]
[273.96960449 -159.67599487]
[278.23770142 -176.08390808]
[295.18591309 -176.52478027]
[300.30126953 -160.36094666]
[286.18521118 -150.97090149]
[277.48010254 -138.75527954]
[268.77502441 -126.53966522]
[260.06991577 -114.32405090]
[251.36482239 -102.10843658]
[242.65971375 -89.89282227]
[241.57463074 -75.03778839]
[227.26478577 -68.28955078]
[218.55969238 -56.07393265]
[209.85458374 -43.85831833]
[211.53883362 -31.82405853]
[204.31112671 -21.55997467]
[191.62626648 -18.92541122]
[182.64337158 -6.91260910]
[173.66046143 5.10019255]
[173.46266174 9.95229340]
[170.15539551 14.70984173]
[163.98001099 17.44516373]
[154.45579529 29.03349876]
[144.93159485 40.62183380]
[135.40739441 52.21016693]
[125.88317871 63.79850388]
[116.35897827 75.38684082]
[117.38763428 82.81596375]
[132.24591064 80.75887299]
[134.30276489 95.61718750]
[119.44494629 97.67420959]
[120.47360229 105.10333252]
[132.78822327 113.66780090]
[145.10284424 122.23226929]
[161.08386230 120.82275391]
[172.04508972 132.53730774]
[169.57801819 148.38954163]
[155.57518005 156.21896362]
[140.77833557 150.01951599]
[136.53837585 134.54689026]
[124.22375488 125.98241425]
[111.90913391 117.41794586]
[96.90913391 117.41794586]
[84.59451294 125.98241425]
[72.27989197 134.54689026]
[59.96527481 143.11135864]
[47.65065384 151.67582703]
[35.33603668 160.24029541]
[23.12041855 168.94538879]
[11.00541496 177.78997803]
[-1.00738740 186.77288818]
[-12.91640663 195.89292908]
[-24.82542610 205.01296997]
[-9.86195564 206.05917358]
[2.25729680 214.89793396]
[7.82580233 228.82603455]
[5.14049959 243.58370972]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 44]
[6 43]
[7 42]
[8 41]
[9 40]
[10 39]
[11 38]
[12 37]
[13 34]
[14 33]
[15 32]
[16 30]
[17 29]
[19 27]
[20 26]
[45 132]
[46 131]
[47 130]
[49 129]
[50 128]
[52 127]
[53 126]
[54 125]
[55 124]
[56 123]
[57 122]
[61 106]
[62 105]
[63 104]
[64 103]
[65 102]
[66 101]
[67 98]
[68 97]
[69 96]
[71 93]
[72 92]
[73 91]
[75 89]
[76 88]
[77 87]
[78 86]
[79 85]
[80 84]
[111 121]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
