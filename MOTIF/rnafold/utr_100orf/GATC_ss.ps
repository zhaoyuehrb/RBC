%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:51:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGUUACGCGCGGGCGCACUGCGGGGGCCAAGGAAGGAAGAAAUGUGGUCGCGGUUGGUGUGGCUGGGCCUUCGGGCCCCUCUGGGCGGGCGCCAGGGCUUCACCUCCAAGGCGGAUCCUCAGGGCAGUGGCCGGAUCACGG\
) } def
/len { sequence length } bind def

/coor [
[94.42179871 267.58050537]
[88.73572540 253.70019531]
[84.22513580 268.00595093]
[79.71455383 282.31170654]
[75.20396423 296.61746216]
[76.20754242 313.54165649]
[60.22254562 319.19113159]
[50.36879349 305.39474487]
[60.89820862 292.10687256]
[65.40879822 277.80111694]
[69.91938782 263.49536133]
[74.42996979 249.18960571]
[72.03159332 239.60478210]
[78.18233490 230.32518005]
[79.48966980 215.38226318]
[80.79701233 200.43934631]
[78.22711945 193.44892883]
[82.29933929 185.18589783]
[83.93234253 170.27505493]
[85.56534576 155.36421204]
[87.19834900 140.45336914]
[88.83135223 125.54252625]
[90.46435547 110.63168335]
[85.18061066 96.59309387]
[74.12144470 86.45923615]
[63.06228638 76.32538605]
[52.00312805 66.19152832]
[40.94396591 56.05767822]
[29.88480759 45.92382431]
[18.82564735 35.78997421]
[7.90903330 36.89353180]
[-1.59767509 31.87139320]
[-6.62811041 22.61933517]
[-5.71357107 12.34931374]
[-16.32017326 1.74271202]
[-26.92677498 -8.86388969]
[-37.53337479 -19.47049141]
[-48.13997650 -30.07709312]
[-56.12584686 -27.14085770]
[-64.59006500 -26.72154427]
[-72.76129150 -28.83708954]
[-79.90091705 -33.27534866]
[-85.36983490 -39.61518478]
[-88.68563843 -47.26636505]
[-89.56512451 -55.52447891]
[-87.94839478 -63.63578033]
[-84.00244141 -70.86599731]
[-93.13386536 -82.76629639]
[-102.26528168 -94.66659546]
[-111.39670563 -106.56689453]
[-120.52812958 -118.46719360]
[-129.65954590 -130.36749268]
[-138.79096985 -142.26779175]
[-147.92239380 -154.16809082]
[-163.57650757 -157.67927551]
[-170.46165466 -172.16975403]
[-163.29617310 -186.52368164]
[-147.57676697 -189.72994995]
[-135.36204529 -179.32899475]
[-136.02209473 -163.29951477]
[-126.89067078 -151.39921570]
[-117.75924683 -139.49891663]
[-108.62782288 -127.59861755]
[-99.49640656 -115.69831848]
[-90.36498260 -103.79801941]
[-81.23355865 -91.89772034]
[-72.10214233 -79.99741364]
[-50.21907806 -79.54364014]
[-35.46281433 -63.01484680]
[-37.53337479 -40.68369675]
[-26.92677498 -30.07709312]
[-16.32017326 -19.47049141]
[-5.71357107 -8.86388969]
[4.89303064 1.74271202]
[23.85781479 5.28024149]
[28.95949936 24.73081207]
[40.01866150 34.86466599]
[51.07781982 44.99851990]
[62.13698196 55.13237000]
[73.19613647 65.26622772]
[84.25530243 75.40007782]
[95.31446075 85.53392792]
[109.76013947 89.57403564]
[124.47191620 86.64767456]
[139.18370056 83.72132111]
[153.89547729 80.79496765]
[168.60725403 77.86861420]
[176.48391724 73.09172058]
[183.67170715 75.04257202]
[198.44383240 72.43785095]
[212.22367859 60.27616501]
[228.46997070 66.82537842]
[243.18174744 63.89902115]
[257.89352417 60.97266769]
[272.60531616 58.04631042]
[287.17544556 54.48102188]
[301.57617188 50.28358841]
[315.97692871 46.08615112]
[323.35791016 32.11130142]
[338.48321533 27.52863121]
[352.37927246 35.05696487]
[356.80175781 50.22986984]
[349.12692261 64.04553223]
[333.90811157 68.30736542]
[320.17437744 60.48690033]
[305.77362061 64.68433380]
[291.37286377 68.88176727]
[289.90817261 71.35620117]
[287.33786011 73.37609100]
[283.83883667 74.50308990]
[279.74832153 74.37444305]
[275.53164673 72.75808716]
[260.81988525 75.68444824]
[246.10810852 78.61080170]
[231.39631653 81.53715515]
[224.37915039 91.44847870]
[212.08987427 93.97234344]
[201.04855347 87.20996857]
[186.27642822 89.81468964]
[171.53361511 92.58039093]
[156.82182312 95.50674438]
[142.11004639 98.43309784]
[127.39826965 101.35945892]
[112.68649292 104.28581238]
[109.87277985 109.04673767]
[105.37520599 112.26468658]
[103.74220276 127.17552948]
[102.10919952 142.08638000]
[100.47619629 156.99722290]
[98.84319305 171.90806580]
[97.21018982 186.81890869]
[95.73992920 201.74667358]
[94.43259430 216.68960571]
[93.12525940 231.63252258]
[103.69043732 220.98464966]
[117.90764618 216.20230103]
[132.76020813 218.30020142]
[145.09664917 226.83322144]
[152.29934692 239.99076843]
[152.84001160 254.98101807]
[146.60389709 268.62326050]
[134.91424561 278.02282715]
[120.25139618 281.18527222]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 12]
[3 11]
[4 10]
[5 9]
[14 134]
[15 133]
[16 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 127]
[23 126]
[24 82]
[25 81]
[26 80]
[27 79]
[28 78]
[29 77]
[30 76]
[34 74]
[35 73]
[36 72]
[37 71]
[38 70]
[47 67]
[48 66]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
[54 60]
[83 124]
[84 123]
[85 122]
[86 121]
[87 120]
[89 119]
[90 118]
[92 115]
[93 114]
[94 113]
[95 112]
[96 107]
[97 106]
[98 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
