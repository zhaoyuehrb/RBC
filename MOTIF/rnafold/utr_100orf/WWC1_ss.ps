%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:11:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCCCGGGCUAAGAGCGGCCGGCUGGAGCCGCUGAGCCCCCGCUGCGGCCGGGAGCUGCAUGGGGGAGCGCCGGCAGCGCUUGGGAAGAUGCCCCGGCCGGAGCUGCCCCUGCCGGAGGGCUGGGAGGAGGCGCGCGACUUCGACGGCAAGGUCUACUACAUAGACCACACGAACCGCACCACCAGCU\
) } def
/len { sequence length } bind def

/coor [
[71.61743927 367.85842896]
[68.40637207 369.34716797]
[61.83565521 382.83142090]
[55.26494217 396.31570435]
[48.69422531 409.79998779]
[42.12351227 423.28427124]
[35.55279541 436.76855469]
[28.98208046 450.25280762]
[38.10054398 462.54559326]
[40.45034790 477.66964722]
[35.49152374 492.14956665]
[24.36357498 502.65802002]
[9.62362099 506.78021240]
[-5.34120274 503.56887817]
[-17.09209061 493.76199341]
[-22.92877388 479.61306763]
[-21.51002693 464.37344360]
[-13.16186619 451.54510498]
[0.19736215 444.07586670]
[15.49780464 443.68209839]
[22.06851959 430.19781494]
[28.63923454 416.71356201]
[35.20994949 403.22927856]
[41.78066635 389.74499512]
[48.35137939 376.26071167]
[54.92209625 362.77645874]
[61.16336441 349.13656616]
[67.07150269 335.34909058]
[72.97963715 321.56164551]
[78.88777161 307.77420044]
[84.79590607 293.98672485]
[75.14498901 263.25973511]
[93.80776978 244.19018555]
[91.86994934 229.31588745]
[89.93212128 214.44157410]
[87.99430084 199.56727600]
[78.67762756 187.94622803]
[84.56726837 173.26213074]
[82.62944794 158.38783264]
[80.69162750 143.51353455]
[78.75380707 128.63922119]
[68.85601044 117.36830902]
[54.35669708 113.52513885]
[39.85738373 109.68196869]
[25.35807228 105.83880615]
[10.85875988 101.99563599]
[-3.64055276 98.15247345]
[-12.75220394 98.97853851]
[-18.34255791 94.12789917]
[-32.77773666 90.05044556]
[-47.21291351 85.97299957]
[-61.64809418 81.89554596]
[-76.08327484 77.81809235]
[-90.51845551 73.74064636]
[-105.16484833 80.28760529]
[-119.34858704 72.79087067]
[-122.18912506 57.00128937]
[-111.50743866 45.03127670]
[-95.49760437 46.06320572]
[-86.44100189 59.30546570]
[-72.00582123 63.38291550]
[-57.57064438 67.46036530]
[-43.13546371 71.53781891]
[-28.70028496 75.61527252]
[-14.26510620 79.69271851]
[0.20261388 83.65316010]
[14.70192623 87.49632263]
[29.20123863 91.33949280]
[43.70055389 95.18266296]
[58.19986343 99.02582550]
[72.69918060 102.86899567]
[81.06455994 83.78570557]
[98.88416290 77.62099457]
[103.19482422 63.25373459]
[107.50549316 48.88647461]
[111.81616211 34.51921463]
[116.12682343 20.15195465]
[117.94415283 5.26244974]
[117.21571350 -9.71985245]
[116.48728180 -24.70215416]
[115.75885010 -39.68445587]
[115.03041840 -54.66675949]
[114.30197906 -69.64906311]
[113.08877563 -84.59992218]
[111.39206696 -99.50364685]
[109.69535828 -114.40737915]
[100.44673157 -127.24378967]
[106.69474030 -140.76457214]
[104.99803162 -155.66830444]
[103.30132294 -170.57203674]
[90.77915955 -180.21417236]
[88.82555389 -195.89726257]
[98.59955597 -208.31677246]
[114.30241394 -210.10446167]
[126.61790466 -200.19970703]
[128.23947144 -184.47882080]
[118.20505524 -172.26873779]
[119.90176392 -157.36500549]
[121.59847260 -142.46127319]
[130.72573853 -130.69088745]
[124.59909058 -116.10408783]
[126.29579926 -101.20035553]
[127.99250793 -86.29662323]
[130.11515808 -84.44499969]
[131.62683105 -81.63504791]
[132.15658569 -78.09722137]
[131.42445374 -74.19264984]
[129.28428650 -70.37749481]
[130.01271057 -55.39519119]
[130.74114990 -40.41289139]
[131.46958923 -25.43058777]
[132.19801331 -10.44828606]
[132.92645264 4.53401661]
[146.71391296 10.44215298]
[158.06460571 0.63594133]
[169.41529846 -9.17026997]
[174.79981995 -24.04701233]
[189.48895264 -26.51251984]
[200.83964539 -36.31872940]
[212.19033813 -46.12494278]
[223.54103088 -55.93115234]
[228.41346741 -71.58973694]
[244.46780396 -74.93493652]
[255.18870544 -62.52548981]
[249.54742432 -47.12717819]
[233.34722900 -44.58046341]
[221.99655151 -34.77425003]
[210.64585876 -24.96803856]
[199.29516602 -15.16182709]
[194.72250366 -0.98649102]
[179.22149658 2.18042207]
[167.87080383 11.98663330]
[156.52011108 21.79284477]
[142.31750488 27.50214958]
[130.49407959 24.46261978]
[126.18341827 38.82987976]
[121.87274933 53.19713974]
[117.56208801 67.56439972]
[113.25141907 81.93166351]
[120.61157227 89.24775696]
[124.08152008 99.43035889]
[122.62281799 110.47196960]
[116.20574188 120.03626251]
[105.88301849 125.95198059]
[93.62810516 126.70140076]
[95.56592560 141.57569885]
[97.50375366 156.45001221]
[99.44157410 171.32431030]
[108.89685059 184.00927734]
[102.86860657 197.62945557]
[104.80642700 212.50375366]
[106.74424744 227.37805176]
[108.68206787 242.25236511]
[123.44822693 246.15086365]
[134.49824524 259.60528564]
[135.84609985 279.11941528]
[148.23316956 287.57876587]
[160.62022400 296.03811646]
[173.00729370 304.49746704]
[185.39434814 312.95684814]
[197.78141785 321.41619873]
[213.74984741 319.87072754]
[224.81037903 331.49157715]
[222.47831726 347.36422729]
[208.54260254 355.31253052]
[193.69354248 349.23922729]
[189.32205200 333.80325317]
[176.93499756 325.34390259]
[164.54792786 316.88455200]
[152.16087341 308.42520142]
[139.77380371 299.96582031]
[127.38674927 291.50646973]
[120.18589783 293.60357666]
[127.00093842 306.96603394]
[133.81597900 320.32849121]
[140.63101196 333.69094849]
[151.94416809 343.54043579]
[155.54603577 358.10156250]
[150.12928772 372.08938599]
[137.65995789 380.42700195]
[122.66378021 380.08825684]
[110.58362579 371.19613647]
[105.80399323 356.97802734]
[110.05975342 342.59420776]
[108.63456726 327.66204834]
[107.20938873 312.72991943]
[105.78421021 297.79776001]
[98.58336639 299.89486694]
[92.67522430 313.68231201]
[86.76708984 327.46978760]
[80.85895538 341.25723267]
[74.95082092 355.04467773]
[75.57584381 360.25567627]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 26]
[3 25]
[4 24]
[5 23]
[6 22]
[7 21]
[8 20]
[27 192]
[28 191]
[29 190]
[30 189]
[31 188]
[33 153]
[34 152]
[35 151]
[36 150]
[38 148]
[39 147]
[40 146]
[41 145]
[42 71]
[43 70]
[44 69]
[45 68]
[46 67]
[47 66]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
[54 60]
[73 139]
[74 138]
[75 137]
[76 136]
[77 135]
[78 113]
[79 112]
[80 111]
[81 110]
[82 109]
[83 108]
[84 103]
[85 102]
[86 101]
[88 99]
[89 98]
[90 97]
[114 133]
[115 132]
[116 131]
[118 129]
[119 128]
[120 127]
[121 126]
[156 172]
[157 171]
[158 170]
[159 169]
[160 168]
[161 167]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
