%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:15:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGGCUGCAUGGACGCGGGUCCGGCGCGCGGGAGGCGAUGACGGCCCCGCCAUGGCCCGGGCGGGCAGCUGCGGCGGCGCCGCGGCGGGCGCAGGGCGGCCGGAGCCCUGGGAGCUGUCCCUGGAGGAGGUGCUGAAGGCCUACGAGCAGC\
) } def
/len { sequence length } bind def

/coor [
[70.73072052 216.63366699]
[73.31649780 197.42524719]
[73.62447357 182.42840576]
[66.15012360 169.54495239]
[74.16913605 155.90655518]
[74.47711182 140.90971375]
[74.78508759 125.91287994]
[80.03675079 115.67951965]
[87.41043854 107.41919708]
[72.90181732 111.22705078]
[58.39319229 115.03491211]
[43.88456726 118.84277344]
[29.37594032 122.65062714]
[21.81421852 127.88667297]
[14.53029442 126.38446045]
[-0.05345495 129.89363098]
[-7.72108841 134.97331238]
[-14.97263336 133.32186890]
[-29.62535858 136.53085327]
[-44.27808380 139.73985291]
[-52.04839706 144.66104126]
[-59.26450348 142.86105347]
[-73.98002625 145.76852417]
[-88.69554901 148.67599487]
[-100.73426819 158.94146729]
[-114.71989441 153.81784058]
[-129.43542480 156.72531128]
[-144.12031555 159.78370667]
[-158.77304077 162.99270630]
[-173.42576599 166.20170593]
[-183.25625610 178.88006592]
[-199.29914856 178.95501709]
[-209.24768066 166.36907959]
[-205.47019958 150.77708435]
[-190.86448669 144.13989258]
[-176.63476562 151.54898071]
[-161.98204041 148.33998108]
[-147.32931519 145.13098145]
[-141.43177795 140.59983826]
[-132.34289551 142.00979614]
[-117.62736511 139.10232544]
[-106.64120483 129.04481506]
[-91.60301971 133.96046448]
[-76.88749695 131.05299377]
[-62.17197800 128.14552307]
[-47.48707962 125.08712769]
[-32.83435440 121.87813568]
[-18.18162918 118.66913605]
[-3.56262207 115.30987549]
[11.02112675 111.80071259]
[25.56808090 108.14200592]
[40.07670593 104.33414459]
[54.58533096 100.52629089]
[69.09395599 96.71842957]
[83.60258484 92.91056824]
[92.88597107 81.12843323]
[93.19394684 66.13159180]
[93.50192261 51.13475800]
[93.80989838 36.13792038]
[85.43838501 26.27276039]
[86.03919220 13.75036526]
[94.74141693 5.29262400]
[95.35724640 -9.69472885]
[95.97306824 -24.68208313]
[84.53202057 -32.43161011]
[78.47663116 -44.73199844]
[79.29922485 -58.30877304]
[86.67682648 -69.60647583]
[98.58395386 -75.71976471]
[99.50737000 -90.69131470]
[100.43077850 -105.66286469]
[101.35419464 -120.63441467]
[102.27761078 -135.60597229]
[103.20101929 -150.57751465]
[104.12443542 -165.54907227]
[105.04785156 -180.52061462]
[99.98804474 -196.70191956]
[114.13629150 -206.04342651]
[127.02934265 -195.03407288]
[120.01940155 -179.59719849]
[119.09598541 -164.62565613]
[118.17256927 -149.65409851]
[117.24916077 -134.68255615]
[116.32574463 -119.71100616]
[115.40232849 -104.73945618]
[114.47891998 -89.76790619]
[113.55550385 -74.79635620]
[126.53084564 -64.78682709]
[131.04994202 -48.86233139]
[125.14937592 -33.21906281]
[110.96042633 -24.06625748]
[110.34459686 -9.07890415]
[109.72877502 5.90844965]
[118.70924377 20.95489883]
[108.80673981 36.44589615]
[108.49876404 51.44273376]
[108.19078064 66.43957520]
[107.88280487 81.43640900]
[117.04473877 93.31323242]
[131.62849426 96.82240295]
[146.21223450 100.33156586]
[160.79598999 103.84073639]
[175.51232910 94.43772125]
[192.15597534 98.47761536]
[200.58531189 112.99826813]
[215.23803711 116.20726013]
[229.89076233 119.41625977]
[244.57566833 122.47465515]
[259.29119873 125.38212585]
[274.00671387 128.28959656]
[288.87329102 130.28565979]
[303.83459473 131.36271667]
[318.79586792 132.43978882]
[333.75714111 133.51686096]
[348.26708984 125.87532043]
[361.99368286 134.84823608]
[360.81613159 151.20506287]
[345.94583130 158.11927795]
[332.68008423 148.47814941]
[317.71881104 147.40107727]
[302.75750732 146.32400513]
[287.79623413 145.24693298]
[296.43789673 157.50749207]
[294.06631470 172.31883240]
[282.02853394 181.26820374]
[267.16189575 179.27244568]
[257.91055298 167.46511841]
[259.52920532 152.55270386]
[271.09924316 143.00512695]
[256.38369751 140.09764099]
[241.66818237 137.19017029]
[234.45207214 138.99015808]
[226.68176270 134.06898499]
[212.02903748 130.85998535]
[197.37631226 127.65099335]
[187.57341003 136.06855774]
[174.51560974 137.30235291]
[162.97131348 130.67585754]
[157.28681946 118.42448425]
[142.70307922 114.91532135]
[128.11932373 111.40615082]
[113.53557587 107.89698029]
[107.59716034 112.47795105]
[116.75890350 124.35492706]
[104.88177490 133.51646423]
[95.72033691 121.63988495]
[89.78192902 126.22085571]
[89.47395325 141.21769714]
[89.16596985 156.21452332]
[96.61830139 170.17065430]
[88.62131500 182.73638916]
[88.31333923 197.73321533]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[5 149]
[6 148]
[7 147]
[9 55]
[10 54]
[11 53]
[12 52]
[13 51]
[15 50]
[16 49]
[18 48]
[19 47]
[20 46]
[22 45]
[23 44]
[24 43]
[26 41]
[27 40]
[28 38]
[29 37]
[30 36]
[56 98]
[57 97]
[58 96]
[59 95]
[62 93]
[63 92]
[64 91]
[69 87]
[70 86]
[71 85]
[72 84]
[73 83]
[74 82]
[75 81]
[76 80]
[99 142]
[100 141]
[101 140]
[102 139]
[105 135]
[106 134]
[107 133]
[108 131]
[109 130]
[110 129]
[111 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
