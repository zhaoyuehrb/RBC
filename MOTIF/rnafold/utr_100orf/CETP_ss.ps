%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:46:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUACGGGCUCCAGGCUGAACGGCUCGGGCCACUUACACACCACUGCCUGAUAACCAUGCUGGCUGCCACAGUCCUGACCCUGGCCCUGCUGGGCAAUGCCCAUGCCUGCUCCAAAGGCACCUCGCACGAGGCAGGCAUCGUGUGCCGCAUCACCA\
) } def
/len { sequence length } bind def

/coor [
[10.88853931 377.84274292]
[3.05301857 380.81802368]
[-5.14721441 382.53115845]
[-13.51031876 382.94134521]
[-21.83065033 382.03973389]
[-29.90381813 379.84976196]
[-37.53170395 376.42654419]
[-44.52732849 371.85540771]
[-55.23884964 382.35601807]
[-65.95037842 392.85665894]
[-69.91711426 401.14682007]
[-76.98080444 403.45693970]
[-87.89898682 413.74252319]
[-92.63832855 428.83721924]
[-107.20775604 431.93255615]
[-118.12593842 442.21813965]
[-129.04411316 452.50372314]
[-139.96229553 462.78930664]
[-144.15638733 478.64306641]
[-160.05189514 482.67602539]
[-171.29689026 470.73944092]
[-166.32348633 455.11264038]
[-150.24789429 451.87112427]
[-139.32971191 441.58554077]
[-128.41152954 431.29995728]
[-117.49333954 421.01437378]
[-113.53494263 406.65539551]
[-98.18457794 402.82434082]
[-87.26639557 392.53875732]
[-76.45100403 382.14514160]
[-65.73947906 371.64450073]
[-55.02795792 361.14385986]
[-64.37319183 340.37445068]
[-64.20082855 317.56268311]
[-54.51111221 296.86914062]
[-37.04298019 282.08105469]
[-14.96204567 275.91925049]
[7.71302843 279.53753662]
[15.12676620 266.49771118]
[22.54050446 253.45791626]
[29.95424271 240.41810608]
[37.36798096 227.37831116]
[32.24031448 215.52279663]
[34.93405151 202.69067383]
[44.68172455 193.63240051]
[58.06300354 191.83337402]
[65.73453522 178.94354248]
[73.40606689 166.05372620]
[81.07759857 153.16389465]
[88.74913025 140.27406311]
[96.42066193 127.38424683]
[88.23352814 127.05730438]
[80.00672913 124.20296478]
[72.53464508 118.79531097]
[66.61557007 111.05948639]
[62.97266006 101.46952057]
[62.17710495 90.72145081]
[64.58119202 79.68305969]
[70.26816559 69.32389832]
[79.02460480 60.63121414]
[76.94357300 45.77627182]
[67.36652374 33.18299484]
[73.26327515 19.50536156]
[71.18224335 4.65042019]
[67.37138367 -0.86003882]
[67.01178741 -6.60068512]
[69.32597351 -10.83518696]
[67.83716583 -25.76111984]
[66.34836578 -40.68704987]
[64.85955811 -55.61298370]
[52.91379166 -65.60980988]
[51.61655807 -80.76803589]
[61.22061920 -92.09488678]
[59.73181152 -107.02082062]
[49.72890091 -120.01596069]
[56.23085785 -135.07107544]
[72.54902649 -136.69876099]
[81.89667511 -123.22457886]
[74.65774536 -108.50962830]
[76.14655304 -93.58369446]
[87.79875183 -84.37707520]
[89.52124023 -69.26126862]
[79.78548431 -57.10179138]
[81.27429199 -42.17585754]
[82.76309967 -27.24992561]
[84.25190735 -12.32399368]
[86.03717804 2.56938720]
[88.11821747 17.42432976]
[97.54641724 28.95508385]
[91.79851532 43.69524002]
[93.87954712 58.55018234]
[108.17279053 63.10025787]
[118.45837402 52.18207550]
[128.74395752 41.26389313]
[139.02955627 30.34571075]
[149.31513977 19.42752838]
[155.77511597 3.75254989]
[172.62580872 5.62080765]
[175.49530029 22.33015633]
[160.23332214 29.71311569]
[149.94773865 40.63129807]
[139.66213989 51.54948044]
[129.37655640 62.46766281]
[119.09097290 73.38584137]
[126.50470734 86.42565155]
[141.14735413 83.17096710]
[155.78999329 79.91628265]
[170.43264771 76.66160583]
[185.07528687 73.40692139]
[192.12724304 59.44969940]
[206.52116394 53.33831024]
[221.46067810 57.95835876]
[229.89181519 71.12840271]
[227.83363342 86.62995148]
[216.25794983 97.14363861]
[200.63046265 97.70523834]
[188.32997131 88.04956818]
[173.68733215 91.30424500]
[159.04467773 94.55892944]
[144.40203857 97.81361389]
[129.75939941 101.06829071]
[128.71635437 116.03198242]
[142.76585388 121.28664398]
[156.81535339 126.54131317]
[170.86485291 131.79597473]
[186.94134521 128.55891418]
[197.57847595 141.04025269]
[191.83367920 156.40023804]
[175.61671448 158.83784485]
[165.61019897 145.84547424]
[151.56069946 140.59082031]
[137.51118469 135.33615112]
[123.46168518 130.08148193]
[109.31048584 135.05577087]
[101.63895416 147.94560242]
[93.96742249 160.83543396]
[86.29589081 173.72525024]
[78.62435913 186.61508179]
[70.95282745 199.50489807]
[75.57372284 216.34988403]
[66.77873993 231.05000305]
[50.40778351 234.79203796]
[42.99404526 247.83184814]
[35.58030701 260.87164307]
[28.16657066 273.91146851]
[20.75283241 286.95126343]
[26.99097824 292.62869263]
[32.26247025 299.20819092]
[36.43873215 306.52719116]
[39.41822052 314.40515137]
[41.12889099 322.64794922]
[41.52996063 331.05273438]
[40.61285400 339.41278076]
[38.40139389 347.52276611]
[34.95117950 355.18365479]
[30.34820557 362.20767212]
[24.70669365 368.42285156]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 32]
[9 31]
[10 30]
[12 29]
[13 28]
[15 26]
[16 25]
[17 24]
[18 23]
[38 146]
[39 145]
[40 144]
[41 143]
[42 142]
[46 139]
[47 138]
[48 137]
[49 136]
[50 135]
[51 134]
[60 91]
[61 90]
[63 88]
[64 87]
[67 86]
[68 85]
[69 84]
[70 83]
[73 80]
[74 79]
[92 104]
[93 103]
[94 102]
[95 101]
[96 100]
[105 121]
[106 120]
[107 119]
[108 118]
[109 117]
[122 133]
[123 132]
[124 131]
[125 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
