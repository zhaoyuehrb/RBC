%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:24:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGUUAUCAUAGAGCACAGUCCCUCACAUCACACAGCUGCAGAGAUGAGUAAACAAAGAGGAACCUUCUCAGAAGUGAGUCUGGCCCAGGACCCAAAGUGGCAGCAAAGGAAACCUAAAGGCAAUAAAAGCUCCAUUUCAGGAA\
) } def
/len { sequence length } bind def

/coor [
[341.73468018 316.80096436]
[332.44161987 319.63476562]
[322.79492188 320.82846069]
[313.08184814 320.34484863]
[303.59207153 318.19671631]
[294.60882568 314.44647217]
[286.40048218 309.20437622]
[279.21258545 302.62530518]
[273.26055908 294.90417480]
[268.72305298 286.27008057]
[265.73681641 276.97964478]
[264.39242554 267.30932617]
[264.73159790 257.54705811]
[266.74581909 247.98397827]
[270.37670898 238.90542603]
[258.01785278 230.40490723]
[250.67112732 229.19706726]
[245.48724365 221.58615112]
[233.31416321 212.82167053]
[221.14106750 204.05720520]
[211.15544128 206.60963440]
[201.21832275 203.13478088]
[194.73292542 194.56439209]
[194.06207275 183.61679077]
[182.27732849 174.33671570]
[170.49258423 165.05664062]
[158.70782471 155.77656555]
[146.92308044 146.49650574]
[132.13705444 144.70130920]
[126.08179474 130.08473206]
[114.29705048 120.80465698]
[106.82198334 126.51753998]
[97.09768677 129.37538147]
[86.26602936 128.52136230]
[75.78063965 123.56700134]
[67.21363068 114.69908905]
[62.02838135 102.70738983]
[47.80295563 97.94951630]
[33.57753372 93.19165039]
[24.37203598 93.43177032]
[19.09914589 88.17534637]
[4.97938681 83.11250305]
[-11.05152798 86.56819153]
[-21.85764503 74.23287964]
[-16.32255745 58.79608154]
[-0.14028859 56.13784409]
[10.04223061 68.99273682]
[24.16198921 74.05558777]
[38.33540344 78.96622467]
[52.56082535 83.72409058]
[66.78624725 88.48196411]
[72.03218842 83.12191010]
[61.31208801 72.63003540]
[47.87450790 65.96434021]
[50.06154251 51.12463760]
[64.85077667 48.61893463]
[71.80396271 61.90993881]
[82.52406311 72.40180969]
[87.76999664 67.04176331]
[82.70715332 52.92200089]
[77.64431000 38.80224228]
[72.58146667 24.68248177]
[67.51862335 10.56272221]
[56.48102951 -2.30614901]
[65.79147339 -16.47484779]
[81.98384094 -11.45054817]
[81.63838196 5.49987888]
[86.70122528 19.61963844]
[91.76406860 33.73939896]
[96.82691193 47.85915756]
[101.88976288 61.97891998]
[126.51576996 82.70825958]
[123.57711792 109.01991272]
[135.36186218 118.29998016]
[150.99081421 120.75894165]
[156.20315552 134.71174622]
[167.98789978 143.99182129]
[179.77264404 153.27189636]
[191.55738831 162.55197144]
[203.34214783 171.83203125]
[223.36273193 173.73353577]
[229.90554810 191.88410950]
[242.07862854 200.64859009]
[254.25170898 209.41305542]
[266.51840210 218.04606628]
[278.87722778 226.54658508]
[295.84158325 213.81610107]
[316.27465820 208.22935486]
[337.30322266 210.55160522]
[355.97769165 220.43736267]
[369.68603516 236.48161316]
[376.51898193 256.41958618]
[375.53604126 277.44622803]
[389.54360962 282.81170654]
[403.83709717 276.62026978]
[417.96630859 282.26116943]
[423.78082275 295.92596436]
[437.78836060 301.29144287]
[451.79592896 306.65692139]
[465.80349731 312.02239990]
[479.81103516 317.38787842]
[493.81860352 322.75335693]
[503.02590942 322.90948486]
[508.06777954 328.38790894]
[521.95666504 334.05352783]
[535.84552002 339.71914673]
[545.63458252 328.20254517]
[558.48657227 320.28622437]
[573.13635254 316.73474121]
[588.14617920 317.88366699]
[602.04705811 323.60794067]
[613.48248291 333.33535767]
[621.34063721 346.10363770]
[624.86273193 360.65579224]
[623.71600342 375.56372070]
[637.60485840 381.22933960]
[653.76959229 378.46652222]
[664.03503418 391.25531006]
[657.84094238 406.43969727]
[641.55926514 408.39926147]
[631.93927002 395.11819458]
[618.05035400 389.45257568]
[608.44244385 400.90896606]
[595.74670410 408.84545898]
[581.19976807 412.47415161]
[566.22326660 411.42749023]
[552.28479004 405.79534912]
[540.75402832 396.11770630]
[532.76837158 383.33267212]
[529.12048340 368.68563843]
[530.17987061 353.60800171]
[516.29101562 347.94238281]
[502.40216064 342.27676392]
[488.45312500 336.76089478]
[474.44558716 331.39541626]
[460.43801880 326.02996826]
[446.43045044 320.66448975]
[432.42288208 315.29901123]
[418.41534424 309.93353271]
[404.95977783 316.21710205]
[390.67767334 310.97531128]
[384.17813110 296.81927490]
[370.17056274 291.45379639]
[364.82949829 299.54653931]
[358.17272949 306.60348511]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 86]
[16 85]
[18 84]
[19 83]
[20 82]
[24 80]
[25 79]
[26 78]
[27 77]
[28 76]
[30 74]
[31 73]
[37 51]
[38 50]
[39 49]
[41 48]
[42 47]
[59 71]
[60 70]
[61 69]
[62 68]
[63 67]
[93 143]
[94 142]
[97 139]
[98 138]
[99 137]
[100 136]
[101 135]
[102 134]
[104 133]
[105 132]
[106 131]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
