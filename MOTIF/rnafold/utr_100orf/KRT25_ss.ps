%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:02:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAAGGCACUCCAUUCUGGCUUUCACAAAUACAGCUCUGCAACGCGUUUGCCCUGAUACCAUGUCUCUUCGACUUUCCAGUGCAUCCAGGAGGUCCUGUCCUCGUCCCACCACUGGAUCACUCAGACUCUAUGGUGGGGGAACCAGCUUUGGUACUGGAA\
) } def
/len { sequence length } bind def

/coor [
[130.38056946 118.32976532]
[121.47680664 132.14979553]
[106.25145721 141.37547302]
[98.50096130 154.21797180]
[90.75047302 167.06048584]
[82.99998474 179.90298462]
[75.24948883 192.74548340]
[67.49900055 205.58799744]
[75.48137665 218.64709473]
[76.46897888 233.92071533]
[70.23485565 247.89906311]
[58.21157837 257.37002563]
[43.16199493 260.15725708]
[28.54439545 255.62026978]
[17.71779442 244.80160522]
[13.17006779 230.18734741]
[15.94624901 215.13571167]
[25.40839195 203.10548401]
[39.38216400 196.86111450]
[54.65649796 197.83749390]
[62.40699005 184.99499512]
[70.15747833 172.15249634]
[77.90796661 159.30998230]
[85.65846252 146.46748352]
[93.40895081 133.62498474]
[89.72210693 127.09373474]
[76.76338959 134.64831543]
[63.80466461 142.20288086]
[53.39570236 153.00350952]
[39.80317688 146.65975952]
[41.39601135 131.74456787]
[56.02093887 128.41401672]
[69.18467712 121.22262573]
[82.34841156 114.03124237]
[78.66156769 107.50000000]
[63.66156769 107.50000000]
[54.65015030 120.13225555]
[39.92405701 125.02325439]
[25.14577484 120.29229736]
[15.99785137 107.75853729]
[15.99785137 92.24146271]
[25.14577484 79.70770264]
[39.92405701 74.97674561]
[54.65015030 79.86774445]
[63.66156769 92.50000000]
[78.66156769 92.50000000]
[82.41156769 86.00480652]
[74.91130066 73.01458740]
[89.91156769 73.01442719]
[93.66156769 66.51924133]
[86.16156769 53.52885818]
[78.66156769 40.53847504]
[65.06078339 32.45582581]
[65.39785004 17.56503487]
[57.89784622 4.57465410]
[50.39784622 -8.41572666]
[38.39662170 -6.87132597]
[26.61603165 -9.47768784]
[16.44505692 -15.90340900]
[9.07471275 -25.36820412]
[5.35860682 -36.73759079]
[5.71411800 -48.65885162]
[10.07565403 -59.72197342]
[17.90519524 -68.62643433]
[11.17320633 -82.03092194]
[4.44121885 -95.43540955]
[-10.27396870 -101.82624817]
[-14.31289577 -117.35256958]
[-4.57724380 -130.10391235]
[11.46462917 -130.29852295]
[21.50676918 -117.78713226]
[17.84570885 -102.16739655]
[24.57769585 -88.76290894]
[31.30968475 -75.35842133]
[49.37569046 -75.16809082]
[64.94059753 -65.82923126]
[73.69149780 -49.82986069]
[73.15332794 -31.51700020]
[63.38822937 -15.91572666]
[70.88822937 -2.92534590]
[78.38822937 10.06503487]
[91.45256042 17.21852493]
[91.65194702 33.03847504]
[99.15194702 46.02885818]
[106.65194702 59.01923752]
[119.41870117 66.89389038]
[134.39332581 67.76605988]
[149.36795044 68.63822937]
[164.34255981 69.51040649]
[179.31718445 70.38257599]
[192.91180420 64.04330444]
[201.86918640 52.01145554]
[210.82656860 39.97960663]
[219.78393555 27.94775963]
[217.24569702 12.34862804]
[226.54881287 -0.42743042]
[242.17390442 -2.80060863]
[254.85089111 6.63705826]
[257.05874634 22.28636932]
[247.48756409 34.86286545]
[231.81579590 36.90513611]
[222.85841370 48.93698502]
[213.90103149 60.96883392]
[204.94364929 73.00067902]
[218.74232483 74.22364044]
[231.80557251 83.61023712]
[246.78019714 84.48240662]
[261.75482178 85.35458374]
[276.72946167 86.22675323]
[291.70407104 87.09892273]
[306.67868042 87.97109985]
[321.65332031 88.84326935]
[336.62792969 89.71543884]
[345.42678833 87.08080292]
[351.88360596 90.75249481]
[366.83850098 91.91488647]
[381.79339600 93.07727051]
[396.74829102 94.23965454]
[411.71374512 95.25698090]
[426.68838501 96.12915802]
[439.58059692 86.58084869]
[455.04626465 90.84619904]
[461.22140503 105.65318298]
[453.36901855 119.64316559]
[437.51275635 122.08422089]
[425.81619263 111.10378265]
[410.84158325 110.23160553]
[403.94726562 112.99571228]
[395.58590698 109.19454956]
[380.63101196 108.03216553]
[365.67611694 106.86978149]
[350.72122192 105.70738983]
[335.75576782 104.69006348]
[320.78112793 103.81789398]
[305.80651855 102.94571686]
[290.83190918 102.07354736]
[275.85726929 101.20137787]
[260.88265991 100.32920074]
[245.90803528 99.45703125]
[230.93341064 98.58485413]
[226.99607849 104.96823120]
[219.12142944 117.73498535]
[215.18411255 124.11835480]
[222.68411255 137.10873413]
[230.18411255 150.09912109]
[237.68411255 163.08950806]
[252.14900208 170.81600952]
[252.41957092 187.21293640]
[238.21749878 195.41250610]
[224.15264893 186.97972107]
[224.69372559 170.58950806]
[217.19372559 157.59912109]
[209.69372559 144.60873413]
[202.19372559 131.61836243]
[175.11947632 113.04467010]
[178.44502258 85.35720062]
[163.47039795 84.48502350]
[148.49577332 83.61285400]
[133.52114868 82.74068451]
[118.54652405 81.86850739]
[127.49893188 90.42400360]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 25]
[4 24]
[5 23]
[6 22]
[7 21]
[8 20]
[35 46]
[36 45]
[50 85]
[51 84]
[52 83]
[54 81]
[55 80]
[56 79]
[64 74]
[65 73]
[66 72]
[86 160]
[87 159]
[88 158]
[89 157]
[90 156]
[91 104]
[92 103]
[93 102]
[94 101]
[106 140]
[107 139]
[108 138]
[109 137]
[110 136]
[111 135]
[112 134]
[113 133]
[115 132]
[116 131]
[117 130]
[118 129]
[119 127]
[120 126]
[143 154]
[144 153]
[145 152]
[146 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
