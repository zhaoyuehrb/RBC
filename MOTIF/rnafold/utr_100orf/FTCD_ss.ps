%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCAUCUGCCCAGAGAGGAGCAUCUGGAUCAAGGUGCUGGCCAUGUCCCAGCUGGUGGAAUGCGUCCCCAACUUUUCGGAGGGGAAGAACCAGGAGGUGAUCGACGCCAUCUCUGGAGCCAUCACACAGACCCCGGGCUGCG\
) } def
/len { sequence length } bind def

/coor [
[127.20298767 322.62207031]
[118.40583038 314.35598755]
[111.70149994 304.30642700]
[107.44107819 292.99203491]
[105.84938049 280.99798584]
[107.01309967 268.94555664]
[110.87607574 257.46002197]
[117.24199677 247.13821411]
[125.78440094 238.51745605]
[136.06336975 232.04766846]
[131.58291626 217.73245239]
[126.94766998 203.46659851]
[122.15814209 189.25180054]
[117.36862183 175.03700256]
[112.57910156 160.82220459]
[107.78957367 146.60740662]
[103.00005341 132.39260864]
[98.21053314 118.17781067]
[88.69801331 116.80649567]
[80.32303619 110.36673737]
[75.77265930 99.78207397]
[61.23586273 103.48093414]
[46.69906616 107.17979431]
[32.16226959 110.87865448]
[17.62547493 114.57752228]
[3.08867955 118.27638245]
[-11.44811630 121.97524261]
[-19.30613899 135.68753052]
[-34.58032608 139.74644470]
[-48.20877457 131.74388123]
[-52.10596848 116.42763519]
[-43.95976639 102.88455963]
[-28.60317230 99.14951324]
[-15.14697742 107.43844604]
[-0.61018175 103.73958588]
[13.92661381 100.04072571]
[28.46340942 96.34186554]
[43.00020599 92.64299774]
[57.53699875 88.94413757]
[72.07379913 85.24527740]
[82.02999115 74.02590942]
[83.97445679 59.15247345]
[85.91892242 44.27904129]
[73.49780273 32.85031509]
[70.34047699 16.43799782]
[77.49154663 1.51543415]
[91.96896362 -6.15059280]
[93.59074402 -21.06266212]
[95.21253204 -35.97473145]
[96.67268372 -50.90349579]
[97.97102356 -65.84719849]
[88.08100128 -77.88153076]
[89.61058044 -93.01807404]
[101.14443207 -102.37254333]
[102.44277191 -117.31624603]
[103.74111176 -132.25994873]
[105.03945923 -147.20365906]
[106.33779907 -162.14735413]
[97.38746643 -166.82012939]
[90.30445862 -173.97383118]
[85.74774933 -182.91717529]
[84.13344574 -192.79371643]
[85.59682465 -202.66371155]
[89.98120880 -211.59364319]
[96.85449982 -218.74446106]
[105.55174255 -223.45042419]
[115.23937988 -225.28106689]
[118.14580536 -239.99679565]
[121.05223846 -254.71252441]
[123.95867157 -269.42825317]
[126.86509705 -284.14398193]
[114.90785980 -293.69818115]
[108.77093506 -307.71948242]
[109.86454773 -322.98587036]
[117.93738556 -335.98925781]
[131.13438416 -343.74154663]
[146.42295837 -344.46130371]
[160.28990173 -337.98318481]
[169.54870605 -325.79574585]
[172.07176208 -310.69964600]
[167.27928162 -296.16378784]
[156.27255249 -285.52844238]
[141.58082581 -281.23754883]
[138.67439270 -266.52182007]
[135.76797485 -251.80609131]
[132.86154175 -237.09036255]
[129.95510864 -222.37463379]
[144.85809326 -208.70129395]
[148.64047241 -188.69363403]
[139.63720703 -170.27774048]
[121.28150177 -160.84901428]
[119.98316193 -145.90531921]
[118.68482208 -130.96160889]
[117.38647461 -116.01790619]
[116.08813477 -101.07419586]
[125.83586121 -89.87074280]
[124.73203278 -74.69720459]
[112.91472626 -64.54885864]
[111.61638641 -49.60515213]
[114.19001770 -42.61743927]
[110.12460327 -34.35294724]
[108.50281525 -19.44087601]
[106.88103485 -4.52880716]
[117.58741760 3.51532793]
[122.94666290 15.90607929]
[121.45286560 29.43241692]
[113.39147186 40.53069305]
[100.79235840 46.22350693]
[98.84789276 61.09694290]
[96.90341949 75.97037506]
[119.24010468 90.98593140]
[112.42533112 113.38829041]
[117.21485138 127.60308838]
[122.00437164 141.81788635]
[126.79389954 156.03268433]
[131.58341980 170.24748230]
[136.37294006 184.46228027]
[141.16246033 198.67707825]
[146.90945435 205.87440491]
[145.89814758 213.25199890]
[150.37858582 227.56723022]
[168.61738586 227.80671692]
[185.68736267 234.17079163]
[199.59680176 245.90060425]
[208.72827148 261.61218262]
[212.02664185 279.45974731]
[209.12106323 297.35250854]
[200.36650085 313.19958496]
[186.80056763 325.15441895]
[192.80249023 338.90130615]
[198.80441284 352.64819336]
[205.15280151 359.32107544]
[204.78387451 366.75854492]
[210.48657227 380.63223267]
[222.10063171 392.98333740]
[213.44728088 407.56262207]
[197.04226685 403.28341675]
[196.61288452 386.33493042]
[190.91018677 372.46124268]
[185.05752563 358.65014648]
[179.05560303 344.90325928]
[173.05368042 331.15637207]
[161.17024231 333.05563354]
[149.15594482 332.21679688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 121]
[11 120]
[12 118]
[13 117]
[14 116]
[15 115]
[16 114]
[17 113]
[18 112]
[21 40]
[22 39]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[41 110]
[42 109]
[43 108]
[47 103]
[48 102]
[49 101]
[50 99]
[51 98]
[54 95]
[55 94]
[56 93]
[57 92]
[58 91]
[67 87]
[68 86]
[69 85]
[70 84]
[71 83]
[129 142]
[130 141]
[131 140]
[133 139]
[134 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
