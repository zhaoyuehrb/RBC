%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:06:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACUCUGCCUUUGGACGUGAGAGAGAGCGCACCUUUCACUUGAGCUUCAACAUGGGAAAGGGAAAUGAAGACUCCGAUCUCCACUGCUCCUCCAUCCAGUGCUCCACUGACCAGCCCCCUUUCCAACAGAUCUCCUUUACAGAAAAGGGCU\
) } def
/len { sequence length } bind def

/coor [
[65.83728790 422.41162109]
[56.36829758 434.50433350]
[42.11556625 440.22756958]
[26.91300583 438.04174805]
[14.85002804 428.53491211]
[9.17151260 414.26431274]
[11.40495300 399.06866455]
[20.94956398 387.03555298]
[35.23789215 381.40179443]
[37.37261581 366.55447388]
[39.50733948 351.70715332]
[41.64206314 336.85983276]
[43.77678299 322.01251221]
[45.91150665 307.16519165]
[34.11919785 298.06536865]
[28.42718315 284.19247437]
[30.45677567 269.23428345]
[39.76213455 257.22149658]
[53.92334747 251.44160461]
[56.05807114 236.59428406]
[58.19279480 221.74696350]
[60.32751846 206.89964294]
[62.46223831 192.05232239]
[56.61497498 178.35345459]
[66.23748779 165.79489136]
[68.37220764 150.94757080]
[70.50693512 136.10023499]
[60.56890488 124.86477661]
[45.57202530 125.17076111]
[30.57514763 125.47673798]
[16.93567657 133.49392700]
[4.05322361 126.01786041]
[-10.94365501 126.32383728]
[-18.93004417 139.52311707]
[-32.79473114 146.28877258]
[-48.11354446 144.46188354]
[-59.99830627 134.62542725]
[-64.65663147 119.91816711]
[-60.60207367 105.03314209]
[-49.12841415 94.72010040]
[-33.89686584 92.26991272]
[-19.76775551 98.46440887]
[-11.24963379 111.32695770]
[3.74724555 111.02098083]
[16.31403923 103.02567291]
[30.26917076 110.47985840]
[45.26604843 110.17388153]
[60.26292801 109.86790466]
[59.57178497 99.96833801]
[61.27915955 90.32005310]
[65.22346497 81.48804474]
[71.11396027 73.97454834]
[78.55141449 68.19049072]
[87.05468750 64.43320465]
[96.09169769 62.87148666]
[105.11257172 63.53881073]
[113.58312225 66.33484650]
[121.94845581 53.88409042]
[130.31378174 41.43333817]
[138.67912292 28.98258400]
[147.04444885 16.53182983]
[155.40977478 4.08107710]
[163.77510071 -8.36967564]
[172.14044189 -20.82042885]
[159.80903625 -39.39128876]
[159.55146790 -62.83936310]
[172.70132446 -83.63833618]
[196.09313965 -94.43998718]
[195.78715515 -109.43686676]
[187.76997375 -123.07633972]
[195.24603271 -135.95878601]
[194.94006348 -150.95567322]
[194.63407898 -165.95254517]
[183.06098938 -176.71540833]
[182.57156372 -192.51211548]
[193.45617676 -203.97076416]
[209.25717163 -204.29315186]
[220.60011292 -193.28799438]
[220.75541687 -177.48448181]
[209.63096619 -166.25852966]
[209.93693542 -151.26164246]
[210.24291992 -136.26477051]
[218.23822021 -123.69797516]
[210.78404236 -109.74284363]
[211.09001160 -94.74596405]
[217.44044495 -90.75572205]
[224.36181641 -104.06341553]
[231.28318787 -117.37110901]
[238.20454407 -130.67880249]
[238.97615051 -145.65895081]
[250.57165527 -155.17442322]
[265.41433716 -153.00762939]
[273.80569458 -140.57440186]
[270.26263428 -125.99884033]
[257.10156250 -118.80502319]
[248.11480713 -106.79509735]
[239.12806702 -94.78517151]
[230.14131165 -82.77524567]
[236.49174500 -78.78500366]
[250.13623047 -85.01622772]
[263.78070068 -91.24745178]
[277.42517090 -97.47867584]
[291.06967163 -103.70990753]
[302.96569824 -115.78965759]
[317.86654663 -107.70252991]
[314.22039795 -91.14529419]
[297.30090332 -90.06542206]
[283.65640259 -83.83419800]
[270.01193237 -77.60297394]
[256.36746216 -71.37174988]
[242.72296143 -65.14052582]
[244.82719421 -51.79433441]
[243.00485229 -38.70991135]
[237.58499146 -26.99222565]
[229.19294739 -17.57999420]
[218.68305969 -11.17079353]
[207.05404663 -8.17052555]
[195.35501099 -8.67079449]
[184.59118652 -12.45509911]
[176.22586060 -0.00434588]
[167.86053467 12.44640732]
[159.49519348 24.89715958]
[151.12986755 37.34791183]
[142.76454163 49.79866791]
[134.39921570 62.24942017]
[126.03388214 74.70017242]
[133.48414612 84.53647614]
[137.29658508 96.47720337]
[136.91331482 109.20127106]
[132.24838257 121.25516510]
[123.71225739 131.21900940]
[112.17871857 137.87358093]
[98.89646912 140.34866333]
[85.35425568 138.23497009]
[83.21953583 153.08229065]
[81.08480835 167.92961121]
[86.77938843 182.69044495]
[77.30956268 194.18704224]
[75.17483521 209.03436279]
[73.04011536 223.88168335]
[70.90539551 238.72900391]
[68.77066803 253.57632446]
[80.72987366 263.11178589]
[86.27390289 277.25958252]
[84.00708008 292.18365479]
[74.63718414 303.89096069]
[60.75882721 309.29992676]
[58.62410736 324.14724731]
[56.48938370 338.99456787]
[54.35466003 353.84188843]
[52.21993637 368.68920898]
[50.08521652 383.53652954]
[62.20755386 392.96755981]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 152]
[10 151]
[11 150]
[12 149]
[13 148]
[14 147]
[19 142]
[20 141]
[21 140]
[22 139]
[23 138]
[25 136]
[26 135]
[27 134]
[28 48]
[29 47]
[30 46]
[32 44]
[33 43]
[57 126]
[58 125]
[59 124]
[60 123]
[61 122]
[62 121]
[63 120]
[64 119]
[68 85]
[69 84]
[71 82]
[72 81]
[73 80]
[99 111]
[100 110]
[101 109]
[102 108]
[103 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
