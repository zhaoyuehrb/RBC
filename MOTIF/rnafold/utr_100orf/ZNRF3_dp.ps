%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:18:34 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (ZNRF3)
} def

/sequence { (\
AUGAGGCCGCGCUCGGGCGGGCGCCCAGGGGCCACGGGCCGCCGCCGCCGCCGCCUGCGCCGCCGCCCCCGCGGCCUCCGGUGCAGCCGCCUGCCGCCGC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
3 78 0.995486085 ubox
3 79 0.021358827 ubox
4 77 0.999383796 ubox
5 76 0.999985248 ubox
6 75 0.999994755 ubox
7 74 0.999994814 ubox
8 73 0.999975651 ubox
9 72 0.999970614 ubox
10 71 0.999963164 ubox
11 70 0.997615743 ubox
11 72 0.004480697 ubox
12 71 0.004833653 ubox
14 65 0.003268441 ubox
15 67 0.003842400 ubox
15 68 0.998010295 ubox
15 69 0.051043806 ubox
16 64 0.015369348 ubox
16 67 0.998800661 ubox
16 68 0.046064629 ubox
17 63 0.015544390 ubox
17 66 0.999049838 ubox
17 67 0.040414005 ubox
18 62 0.015661487 ubox
18 65 0.999063023 ubox
19 61 0.012908054 ubox
19 64 0.964285500 ubox
20 60 0.009206912 ubox
20 61 0.227862819 ubox
20 63 0.902072486 ubox
20 64 0.259820459 ubox
21 60 0.319516391 ubox
21 63 0.365390092 ubox
22 59 0.320340074 ubox
22 62 0.446502201 ubox
23 58 0.319263520 ubox
23 60 0.890733679 ubox
23 61 0.320628696 ubox
24 57 0.293625870 ubox
24 59 0.942961267 ubox
26 57 0.954613040 ubox
27 56 0.984427738 ubox
28 43 0.003577596 ubox
28 52 0.142124034 ubox
28 55 0.989411865 ubox
28 56 0.004385746 ubox
29 42 0.003591528 ubox
29 51 0.142111236 ubox
29 52 0.003915394 ubox
29 54 0.988524727 ubox
29 55 0.004243685 ubox
29 56 0.023436353 ubox
30 40 0.012588227 ubox
30 49 0.159329578 ubox
30 51 0.003192046 ubox
30 52 0.985892353 ubox
30 54 0.003295613 ubox
30 55 0.023841230 ubox
31 39 0.012610985 ubox
31 48 0.159549103 ubox
31 51 0.986756094 ubox
31 54 0.023930094 ubox
32 38 0.012614329 ubox
32 47 0.159491573 ubox
32 50 0.985805925 ubox
32 53 0.023982038 ubox
33 37 0.012526533 ubox
35 44 0.190003530 ubox
35 47 0.777415095 ubox
35 50 0.019881213 ubox
35 53 0.003898306 ubox
36 43 0.191020879 ubox
36 46 0.734899820 ubox
36 49 0.036079871 ubox
36 52 0.003694465 ubox
37 42 0.190872909 ubox
37 43 0.020600570 ubox
37 45 0.686550807 ubox
37 46 0.641583935 ubox
37 48 0.028133125 ubox
37 49 0.100030867 ubox
37 52 0.018250330 ubox
38 42 0.027153626 ubox
38 45 0.693109795 ubox
38 48 0.100370227 ubox
38 51 0.018425699 ubox
39 44 0.738553718 ubox
39 47 0.095739547 ubox
39 50 0.018564211 ubox
40 47 0.031517988 ubox
41 46 0.041960774 ubox
41 48 0.019586640 ubox
41 51 0.004725914 ubox
41 54 0.005011954 ubox
42 47 0.019581559 ubox
42 50 0.004513213 ubox
42 53 0.006330948 ubox
44 51 0.008869804 ubox
45 50 0.008972733 ubox
79 89 0.005077575 ubox
79 93 0.004614386 ubox
79 96 0.023256906 ubox
79 99 0.964014724 ubox
80 88 0.005444178 ubox
80 91 0.008826235 ubox
80 92 0.004514088 ubox
80 95 0.024093202 ubox
80 98 0.999516847 ubox
81 87 0.005443208 ubox
81 90 0.008841249 ubox
81 91 0.004525546 ubox
81 94 0.023648814 ubox
81 97 0.999589091 ubox
82 86 0.005092069 ubox
82 89 0.008826548 ubox
82 93 0.022388697 ubox
82 96 0.994355394 ubox
83 88 0.008527752 ubox
83 90 0.023815340 ubox
83 92 0.005881597 ubox
83 94 0.708819788 ubox
83 95 0.704139359 ubox
84 89 0.023982589 ubox
84 93 0.997942327 ubox
84 96 0.003722180 ubox
85 92 0.995564039 ubox
86 91 0.979718503 ubox
86 94 0.053504314 ubox
87 93 0.053622153 ubox
93 100 0.003921066 ubox
94 99 0.003966412 ubox
3 78 0.9500000 lbox
4 77 0.9500000 lbox
5 76 0.9500000 lbox
6 75 0.9500000 lbox
7 74 0.9500000 lbox
8 73 0.9500000 lbox
9 72 0.9500000 lbox
10 71 0.9500000 lbox
11 70 0.9500000 lbox
15 68 0.9500000 lbox
16 67 0.9500000 lbox
17 66 0.9500000 lbox
18 65 0.9500000 lbox
19 64 0.9500000 lbox
20 63 0.9500000 lbox
23 60 0.9500000 lbox
24 59 0.9500000 lbox
26 57 0.9500000 lbox
27 56 0.9500000 lbox
28 55 0.9500000 lbox
29 54 0.9500000 lbox
30 52 0.9500000 lbox
31 51 0.9500000 lbox
32 50 0.9500000 lbox
35 47 0.9500000 lbox
36 46 0.9500000 lbox
37 45 0.9500000 lbox
79 99 0.9500000 lbox
80 98 0.9500000 lbox
81 97 0.9500000 lbox
82 96 0.9500000 lbox
83 95 0.9500000 lbox
84 93 0.9500000 lbox
85 92 0.9500000 lbox
86 91 0.9500000 lbox
showpage
end
%%EOF
