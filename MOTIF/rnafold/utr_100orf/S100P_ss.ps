%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:49:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGGCUGCCUUAUAAAGCACCAAGAGGCUGCCAGUGGGACAUUUUCUCGGCCCUGCCAGCCCCCAGGAGGAAGGUGGGUCUGAAUCUAGCACCAUGACGGAACUAGAGACAGCCAUGGGCAUGAUCAUAGACGUCUUUUCCCGAUAUUCGGGCAGCGAGGGCAGCACGCAGACCCUGACCAAGGGGGAGCUCA\
) } def
/len { sequence length } bind def

/coor [
[328.35253906 412.46234131]
[327.16610718 404.33712769]
[328.42651367 396.18890381]
[332.04193115 388.74118042]
[337.71060181 382.66110229]
[332.05416870 368.76849365]
[326.39776611 354.87588501]
[320.74133301 340.98324585]
[315.08489990 327.09063721]
[309.42849731 313.19802856]
[303.77206421 299.30538940]
[298.11563110 285.41278076]
[280.22103882 290.42114258]
[262.14752197 287.56924438]
[247.13987732 277.60916138]
[237.79226685 262.54708862]
[235.60081482 245.24351501]
[240.72831726 228.87094116]
[228.95791626 219.57266235]
[221.75077820 217.89106750]
[217.07438660 210.02856445]
[205.45532227 200.54188538]
[193.83624268 191.05520630]
[183.78689575 192.99353027]
[174.12963867 188.98982239]
[168.15327454 180.14570618]
[168.03598022 169.25254822]
[156.72856140 159.39646912]
[145.42114258 149.54040527]
[134.11372375 139.68432617]
[122.80629730 129.82824707]
[112.81847382 136.30699158]
[101.02665710 139.44541931]
[88.54600525 138.75706482]
[76.61611176 134.12673950]
[66.47797394 125.83940125]
[59.24536133 114.56871033]
[44.50207520 117.33193970]
[29.75878525 120.09516907]
[15.01549625 122.85839844]
[4.80509377 135.23284912]
[-11.23268032 134.82133484]
[-20.79501915 121.93951416]
[-16.54651260 106.46923065]
[-1.74625325 100.27795410]
[12.25226784 108.11510468]
[26.99555588 105.35187531]
[41.73884583 102.58864594]
[56.48213196 99.82541656]
[59.12651062 85.06034851]
[46.25864029 77.35205078]
[33.39077377 69.64374542]
[20.52290154 61.93544388]
[7.65503216 54.22714233]
[-1.32811141 52.49777603]
[-5.35662937 46.28958511]
[-18.09864807 38.37498093]
[-30.84066772 30.46037674]
[-46.04630280 33.84066772]
[-58.85577774 25.63261795]
[-61.98465729 11.11553478]
[-74.72667694 3.20093107]
[-89.52851105 8.24472523]
[-104.09069824 2.54589152]
[-111.53742218 -11.20475483]
[-108.35256958 -26.51457977]
[-96.03993225 -36.15475082]
[-80.41315460 -35.57347488]
[-68.85072327 -25.04521370]
[-66.81207275 -9.54108810]
[-54.07005692 -1.62648439]
[-39.66985703 -5.25551891]
[-26.63489151 2.58949971]
[-22.92606354 17.71835709]
[-10.18404484 25.63296127]
[2.55797434 33.54756546]
[15.36333466 41.35927200]
[28.23120499 49.06757355]
[41.09907532 56.77587509]
[53.96694565 64.48417664]
[66.83481598 72.19248199]
[71.53132629 68.93881226]
[76.49584198 66.42140961]
[81.61848450 64.65287018]
[86.79084778 63.62996292]
[91.90826416 63.33427429]
[91.66661072 48.33621979]
[91.42496490 33.33816910]
[91.18331146 18.34011459]
[90.94165802 3.34206152]
[79.86917114 -7.61410713]
[79.83775330 -22.82770729]
[90.35102081 -33.31612015]
[90.10936737 -48.31417465]
[79.63053894 -60.46216202]
[82.73625946 -76.20172882]
[97.04409027 -83.45883179]
[111.57828522 -76.66643524]
[115.18946075 -61.03509140]
[105.10742188 -48.55582428]
[105.34907532 -33.55776978]
[116.19477844 -23.41349792]
[116.65349579 -8.20678043]
[105.93971252 3.10041094]
[106.18136597 18.09846497]
[106.42301941 33.09651947]
[106.66466522 48.09457016]
[106.90631866 63.09262466]
[127.42400360 74.35285950]
[137.28666687 95.57775879]
[132.66236877 118.52082825]
[143.96978760 128.37690735]
[155.27722168 138.23297119]
[166.58464050 148.08905029]
[177.89205933 157.94512939]
[197.82293701 160.90672302]
[203.32292175 179.43612671]
[214.94200134 188.92280579]
[226.56106567 198.40950012]
[238.25619507 207.80227661]
[250.02658081 217.10054016]
[256.37268066 212.22392273]
[263.62109375 208.67596436]
[271.49447632 206.62188721]
[279.68566895 206.16921997]
[287.86956787 207.36244202]
[295.71615601 210.18017578]
[302.90374756 214.53504944]
[309.13214111 220.27615356]
[314.13516235 227.19412231]
[317.69195557 235.02880859]
[319.63665771 243.47892761]
[319.86599731 252.21368408]
[334.86160278 251.85122681]
[343.37835693 248.51168823]
[350.10128784 251.60568237]
[365.10079956 251.48484802]
[372.28103638 243.29225159]
[382.57501221 240.46919250]
[392.51211548 243.71665955]
[398.87875366 251.72993469]
[413.87435913 252.09239197]
[428.86999512 252.45484924]
[443.86560059 252.81730652]
[458.86123657 253.17976379]
[474.84182739 247.51791382]
[484.70626831 261.30664062]
[474.18716431 274.60269165]
[458.49877930 268.17538452]
[443.50314331 267.81292725]
[428.50753784 267.45046997]
[413.51190186 267.08801270]
[398.51629639 266.72555542]
[382.27902222 277.21078491]
[365.22161865 266.48437500]
[350.22210693 266.60519409]
[335.22406006 266.84683228]
[320.22845459 267.20928955]
[312.00827026 279.75634766]
[317.66467285 293.64898682]
[323.32110596 307.54159546]
[328.97753906 321.43420410]
[334.63394165 335.32684326]
[340.29037476 349.21945190]
[345.94680786 363.11206055]
[351.60321045 377.00469971]
[372.98196411 383.93859863]
[382.15997314 404.15255737]
[373.52630615 424.30599976]
[380.49713135 437.58786011]
[395.72067261 439.94366455]
[406.51184082 450.68630981]
[408.88015747 465.54748535]
[402.12432861 478.79501343]
[409.09518433 492.07684326]
[416.06600952 505.35870361]
[423.03686523 518.64056396]
[437.86410522 524.76696777]
[442.18029785 540.21850586]
[432.67443848 553.14202881]
[416.63864136 553.62377930]
[406.37414551 541.29412842]
[409.75503540 525.61138916]
[402.78417969 512.32952881]
[395.81332397 499.04769897]
[388.84249878 485.76586914]
[374.10223389 483.80035400]
[363.21707153 473.40914917]
[360.50613403 458.42568970]
[367.21530151 444.55868530]
[360.24444580 431.27685547]
[352.21975708 431.81149292]
[344.35980225 429.95501709]
[337.36407471 425.85226440]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 166]
[6 165]
[7 164]
[8 163]
[9 162]
[10 161]
[11 160]
[12 159]
[18 121]
[19 120]
[21 119]
[22 118]
[23 117]
[27 115]
[28 114]
[29 113]
[30 112]
[31 111]
[37 49]
[38 48]
[39 47]
[40 46]
[50 81]
[51 80]
[52 79]
[53 78]
[54 77]
[56 76]
[57 75]
[58 74]
[61 71]
[62 70]
[86 108]
[87 107]
[88 106]
[89 105]
[90 104]
[93 101]
[94 100]
[133 158]
[134 157]
[136 156]
[137 155]
[141 153]
[142 152]
[143 151]
[144 150]
[145 149]
[169 191]
[170 190]
[174 186]
[175 185]
[176 184]
[177 183]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
