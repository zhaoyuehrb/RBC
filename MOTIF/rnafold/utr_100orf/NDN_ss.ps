%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:31:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCCUCUCCAGGAAUCCGCGGAGGGAGCGCAGGCUCGAAGAGCUCCUGGACGCAGAGGCCCUGCCCUUGCCAGACGGCGCAGACAUGUCAGAACAAAGUAAGGAUCUGAGCGACCCUAACUUUGCAGCCGAGGCCCCCAACUCCGAGGUGCACAGCAGCCCUGGGGUUUCGGAGGGGGUUCCUC\
) } def
/len { sequence length } bind def

/coor [
[106.12052917 265.73831177]
[104.86201477 250.79119873]
[103.60350037 235.84408569]
[102.34497833 220.89698792]
[101.08646393 205.94987488]
[99.82794952 191.00276184]
[98.56943512 176.05564880]
[97.31092072 161.10853577]
[83.94010162 154.30990601]
[71.12097168 162.09898376]
[58.30183029 169.88806152]
[45.48269653 177.67713928]
[32.66355896 185.46621704]
[19.84442139 193.25529480]
[7.02528524 201.04437256]
[5.05803156 204.96836853]
[2.22271061 207.76918030]
[-1.01675212 209.31135559]
[-4.20042276 209.62554932]
[-6.92665529 208.89251709]
[-20.23988914 215.80320740]
[-19.86479378 231.02230835]
[-26.10925484 244.83872986]
[-37.68590927 254.53414917]
[-52.26420975 258.22659302]
[-66.93947601 255.23562622]
[-78.81164551 246.20693970]
[-92.12488556 253.11764526]
[-105.43811798 260.02835083]
[-118.75135040 266.93905640]
[-127.11791992 281.04339600]
[-143.51049805 280.57937622]
[-151.06581116 266.02432251]
[-142.01159668 252.35124207]
[-125.66204834 253.62580872]
[-112.34881592 246.71511841]
[-99.03558350 239.80441284]
[-85.72235107 232.89370728]
[-86.27383423 217.98863220]
[-80.27448273 204.26576233]
[-68.86514282 194.46841431]
[-54.27391052 190.58047485]
[-39.38107300 193.42485046]
[-27.15059090 202.48997498]
[-13.83735752 195.57928467]
[-0.76379275 188.22523499]
[12.05534363 180.43615723]
[24.87448120 172.64707947]
[37.69361877 164.85800171]
[50.51275253 157.06892395]
[63.33189011 149.27984619]
[76.15102386 141.49076843]
[45.87385178 123.64686584]
[31.50070572 84.29885864]
[17.96282959 77.83929443]
[4.42495537 71.37973022]
[-9.11291981 64.92017365]
[-24.65543365 68.89633179]
[-37.36732864 59.10923004]
[-37.49712753 43.06670380]
[-24.94525909 33.07519913]
[-9.34044170 36.79934692]
[-2.65335822 51.38229752]
[10.88451672 57.84185791]
[24.42239189 64.30142212]
[37.96026611 70.76097870]
[42.82393646 65.05180359]
[31.40573311 55.32428741]
[41.13342667 43.90623093]
[52.55128098 53.63344955]
[57.41495132 47.92427063]
[48.88600540 35.58502197]
[40.35705948 23.24577332]
[25.31312752 16.71797180]
[23.71347618 0.39702889]
[37.20368576 -8.92746735]
[51.90618896 -1.66327536]
[52.69630814 14.71682739]
[61.22525406 27.05607605]
[69.75419617 39.39532471]
[83.34585571 33.04970932]
[79.36224365 18.58835220]
[75.37863159 4.12699509]
[63.32823944 -6.99595499]
[67.19925690 -22.93167686]
[83.00952148 -27.28686714]
[94.49478149 -15.58127689]
[89.83998871 0.14338358]
[93.82360077 14.60474014]
[97.80721283 29.06609726]
[105.21189880 30.25801849]
[102.90290833 15.43679905]
[116.28529358 8.66097641]
[126.86473083 19.29467010]
[120.02126312 32.64186478]
[127.42594147 33.83378601]
[135.74639893 21.35299683]
[144.06684875 8.87220955]
[152.38729858 -3.60857749]
[160.70774841 -16.08936501]
[169.02821350 -28.57015228]
[170.24528503 -44.34447861]
[183.74290466 -50.64237976]
[192.06335449 -63.12316513]
[200.38380432 -75.60395050]
[201.60087585 -91.37828064]
[215.09849548 -97.67617798]
[223.41894531 -110.15696716]
[221.69519043 -126.10714722]
[233.19177246 -137.29679871]
[249.08947754 -135.14219666]
[257.19296265 -121.29614258]
[251.28593445 -106.38016510]
[235.89973450 -101.83651733]
[227.57928467 -89.35572815]
[226.95735168 -74.47411346]
[212.86459351 -67.28350067]
[204.54414368 -54.80271149]
[196.22369385 -42.32192612]
[195.60174561 -27.44031143]
[181.50900269 -20.24969864]
[173.18853760 -7.76891184]
[164.86808777 4.71187592]
[156.54763794 17.19266319]
[148.22718811 29.67345047]
[139.90672302 42.15423965]
[154.46127319 63.08731842]
[159.77070618 86.35652161]
[156.21293640 108.31293488]
[145.47251892 125.91860199]
[130.14779663 137.16676331]
[143.99391174 142.93609619]
[157.84001160 148.70544434]
[171.68612671 154.47477722]
[185.53222656 160.24412537]
[199.37834167 166.01345825]
[213.22444153 171.78280640]
[227.07055664 177.55213928]
[240.91665649 183.32148743]
[234.44851685 169.78770447]
[237.04273987 155.01374817]
[247.73471069 144.49320984]
[262.54867554 142.13807678]
[275.97613525 148.82411194]
[283.02420044 162.06513977]
[281.07208252 176.93757629]
[270.84564209 187.91117859]
[256.14739990 190.90548706]
[269.09558105 198.47811890]
[282.04376221 206.05075073]
[291.05203247 207.68775940]
[295.14431763 213.86091614]
[307.96343994 221.64999390]
[323.25564575 217.65946960]
[336.84814453 225.72294617]
[340.67675781 241.05647278]
[332.47003174 254.56295776]
[317.09689331 258.22924805]
[303.67791748 249.88018799]
[300.17437744 234.46913147]
[287.35522461 226.68005371]
[274.47113037 218.99893188]
[261.52294922 211.42630005]
[248.57476807 203.85366821]
[235.14732361 197.16758728]
[221.30120850 191.39825439]
[207.45510864 185.62890625]
[193.60899353 179.85957336]
[179.76289368 174.09022522]
[165.91677856 168.32089233]
[152.07067871 162.55154419]
[138.22456360 156.78221130]
[124.37845612 151.01286316]
[112.25802612 159.85002136]
[113.51654816 174.79713440]
[114.77506256 189.74424744]
[116.03357697 204.69136047]
[117.29209137 219.63845825]
[118.55060577 234.58557129]
[119.80912781 249.53268433]
[121.06764221 264.47979736]
[133.30139160 274.48535156]
[134.79382324 290.21899414]
[124.65948486 302.34628296]
[108.91092682 303.67227173]
[96.89146423 293.41030884]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 181]
[2 180]
[3 179]
[4 178]
[5 177]
[6 176]
[7 175]
[8 174]
[9 52]
[10 51]
[11 50]
[12 49]
[13 48]
[14 47]
[15 46]
[20 45]
[21 44]
[27 38]
[28 37]
[29 36]
[30 35]
[54 66]
[55 65]
[56 64]
[57 63]
[71 80]
[72 79]
[73 78]
[81 90]
[82 89]
[83 88]
[96 126]
[97 125]
[98 124]
[99 123]
[100 122]
[101 121]
[103 119]
[104 118]
[105 117]
[107 115]
[108 114]
[131 173]
[132 172]
[133 171]
[134 170]
[135 169]
[136 168]
[137 167]
[138 166]
[139 165]
[148 164]
[149 163]
[150 162]
[152 161]
[153 160]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
