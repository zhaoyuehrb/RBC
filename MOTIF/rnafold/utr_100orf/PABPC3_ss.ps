%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:52:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCUCUACUCCUGUAACGGAAAGGUCGCGGCUUGUGUGCCUGCGGGCAGCCGUGCCGAGAAUGAACCCCAGCACCCCCAGCUACCCAACGGCCUCGCUCUACGUGGGGGACCUCCACCCCGACGUGACUGAGGCGAUGCUCUACGAGAAGUUCAGCCCGG\
) } def
/len { sequence length } bind def

/coor [
[97.12688446 190.62907410]
[96.47534943 196.94129944]
[94.07859802 202.77323914]
[90.15399933 207.65626526]
[85.04067230 211.20510864]
[79.17021179 213.14811707]
[73.03034210 213.34802246]
[66.55954742 226.88053894]
[60.08875656 240.41305542]
[61.89833450 256.71206665]
[48.52924728 266.20941162]
[33.73447418 259.13504028]
[32.73360062 242.76646423]
[46.55624771 233.94226074]
[53.02703857 220.40974426]
[59.49782944 206.87724304]
[54.51259995 183.67095947]
[74.30752563 169.34974670]
[78.88741302 155.06604004]
[83.46730804 140.78231812]
[65.41422272 129.77200317]
[54.04428864 111.04309082]
[52.49789047 88.42146301]
[61.81815338 66.91522980]
[46.81815338 66.91522980]
[38.18738937 70.05702209]
[31.52798843 66.76696777]
[16.53080940 66.47609711]
[1.53362906 66.18522644]
[-13.46355057 65.89435577]
[-28.46072960 65.60348511]
[-43.45790863 65.31261444]
[-58.45508957 65.02174377]
[-50.33327866 77.63270569]
[-54.94024658 91.90771484]
[-68.90183258 97.39170074]
[-81.99251556 90.06818390]
[-84.62463379 75.30092621]
[-74.87107086 63.90581512]
[-89.76965332 62.16442108]
[-104.66822815 60.42302704]
[-119.50367737 67.41169739]
[-132.81759644 57.83717346]
[-130.91377258 41.54891205]
[-115.75069427 35.30287552]
[-102.92683411 45.52445221]
[-88.02825928 47.26584625]
[-73.12968445 49.00724030]
[-58.16421890 50.02456665]
[-43.16703796 50.31543732]
[-28.16986084 50.60630798]
[-13.17268085 50.89717865]
[1.82449901 51.18804932]
[16.82167816 51.47891617]
[31.81885910 51.76978683]
[46.81815338 51.91522980]
[61.81815338 51.91522980]
[66.69454193 46.21691132]
[53.53080368 39.02552795]
[40.36706543 31.83414459]
[25.39351654 30.94372368]
[13.85785580 21.35578537]
[10.24442673 6.79751921]
[15.95790195 -7.07173443]
[28.77724266 -14.86047840]
[43.71908951 -13.54093742]
[54.97499084 -3.62606645]
[58.16920090 11.03139973]
[67.30825806 22.92583656]
[76.44731903 34.82027054]
[81.32370758 29.12195396]
[79.00592041 14.30210495]
[76.68814087 -0.51774240]
[63.20716858 -8.44222355]
[58.02264786 -23.19535065]
[63.58254623 -37.81114578]
[77.26165771 -45.38848114]
[92.60111237 -42.34956741]
[102.35810089 -30.12928963]
[101.92566681 -14.49768639]
[91.50798798 -2.83552432]
[93.82576752 11.98432350]
[96.14355469 26.80417061]
[102.52692413 30.74149513]
[107.59789276 16.62465096]
[110.35542297 1.88029552]
[124.07228851 -4.18993282]
[136.83935547 3.68420696]
[137.57211304 18.66629791]
[125.63310242 27.74893379]
[115.29367828 38.61614609]
[121.67705536 42.55346680]
[135.96076965 37.97357941]
[150.24449158 33.39368820]
[164.52821350 28.81379890]
[178.81192017 24.23390961]
[193.09564209 19.65401840]
[203.87443542 8.07263947]
[218.35635376 11.55450058]
[232.64006042 6.97461033]
[239.89941406 1.34765208]
[247.24536133 2.44730806]
[261.61520386 -1.85474050]
[275.98504639 -6.15678883]
[290.35488892 -10.45883751]
[301.35623169 -21.82902336]
[315.76791382 -18.06699371]
[330.13775635 -22.36904335]
[344.50759888 -26.67109108]
[358.87744141 -30.97313881]
[364.90460205 -45.40252304]
[378.82037354 -52.53590775]
[394.05413818 -49.00513077]
[403.41299438 -36.47731400]
[402.47793579 -20.86771202]
[391.69052124 -9.54670048]
[376.14419556 -7.85971403]
[363.17947388 -16.60329628]
[348.80963135 -12.30124855]
[334.43978882 -7.99919987]
[320.06994629 -3.69715142]
[310.09643555 7.36532354]
[294.65695190 3.91100526]
[280.28710938 8.21305370]
[265.91723633 12.51510239]
[251.54740906 16.81715012]
[237.21995544 21.25832939]
[222.93623352 25.83821869]
[213.17912292 37.09201431]
[197.67553711 33.93773651]
[183.39181519 38.51762772]
[169.10809326 43.09751511]
[154.82438660 47.67740631]
[140.54066467 52.25729752]
[126.25694275 56.83718872]
[142.18576050 75.28412628]
[147.23384094 98.31452942]
[140.91888428 120.20379639]
[125.49210358 135.87031555]
[133.24259949 148.71282959]
[140.99308777 161.55532837]
[156.07312012 165.45793152]
[163.75027466 178.59246826]
[159.93679810 192.94491577]
[167.68728638 205.78742981]
[182.85346985 211.01873779]
[188.08341980 226.18537903]
[179.36518860 239.65281677]
[163.38662720 241.08996582]
[152.40515137 229.39439392]
[154.84478760 213.53791809]
[147.09429932 200.69541931]
[132.61854553 197.38055420]
[124.57550049 184.46684265]
[128.15057373 169.30581665]
[120.40009308 156.46331787]
[112.64959717 143.62080383]
[97.75102234 145.36219788]
[93.17113495 159.64591980]
[88.59124756 173.92964172]
[93.03903961 178.62469482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 16]
[8 15]
[9 14]
[18 160]
[19 159]
[20 158]
[24 57]
[25 56]
[27 55]
[28 54]
[29 53]
[30 52]
[31 51]
[32 50]
[33 49]
[39 48]
[40 47]
[41 46]
[71 83]
[72 82]
[73 81]
[92 135]
[93 134]
[94 133]
[95 132]
[96 131]
[97 130]
[99 128]
[100 127]
[102 126]
[103 125]
[104 124]
[105 123]
[107 121]
[108 120]
[109 119]
[110 118]
[139 157]
[140 156]
[141 155]
[144 152]
[145 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
