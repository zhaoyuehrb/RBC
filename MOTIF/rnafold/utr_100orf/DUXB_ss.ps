%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUACUCGCUGAUCUCCGUGGAGUCCAGGUCUUCUGCCCAAGAUGAAUUUGGAGGGCACUUCAGGUGGCAUACUUCAAAAAGAAUUCUGGAGAAACAGAAUUCAGUAUAACCAGAGUCAAAAGGAUAUCCUCCAAUCAUGGU\
) } def
/len { sequence length } bind def

/coor [
[189.69551086 252.26164246]
[179.71348572 248.71548462]
[171.47634888 241.99372864]
[165.96060181 232.85983276]
[163.83131409 222.36505127]
[165.36204529 211.72755432]
[170.39996338 202.19094849]
[161.15922546 190.37532043]
[151.91850281 178.55970764]
[142.67776489 166.74409485]
[133.43702698 154.92846680]
[118.66742706 153.38108826]
[109.12769318 141.53001404]
[110.85087585 126.04878235]
[101.61013794 114.23316193]
[88.71691132 108.82424927]
[86.57424164 95.00757599]
[77.33350372 83.19195557]
[63.58765030 84.70036316]
[50.99944305 79.24401093]
[42.83280563 68.35478973]
[41.14697266 54.95758438]
[46.27814102 42.58504868]
[37.30105591 30.56789589]
[28.32397079 18.55074310]
[19.34688568 6.53359079]
[10.36980152 -5.48356152]
[1.39271700 -17.50071335]
[-11.28546429 -20.13907814]
[-18.50892639 -30.39926720]
[-16.82778168 -42.42839432]
[-25.53682518 -54.64119720]
[-34.24586868 -66.85399628]
[-42.95491028 -79.06680298]
[-59.35770416 -77.30590820]
[-74.33409882 -83.99768066]
[-83.85621643 -97.23924255]
[-85.41514587 -113.38031769]
[-78.68135071 -128.02931213]
[-87.65843964 -140.04646301]
[-96.63552094 -152.06361389]
[-105.74498749 -163.98072815]
[-114.98571777 -175.79635620]
[-124.22645569 -187.61196899]
[-141.43605042 -194.05894470]
[-143.29280090 -211.47547913]
[-152.79264832 -223.08378601]
[-162.29251099 -234.69209290]
[-171.79237366 -246.30039978]
[-181.29222107 -257.90869141]
[-190.79208374 -269.51699829]
[-200.29194641 -281.12530518]
[-209.79179382 -292.73361206]
[-225.31480408 -298.02212524]
[-228.23043823 -314.16000366]
[-215.53935242 -324.54598999]
[-200.29704285 -318.49584961]
[-198.18348694 -302.23345947]
[-188.68363953 -290.62515259]
[-179.18377686 -279.01687622]
[-169.68392944 -267.40856934]
[-160.18406677 -255.80024719]
[-150.68420410 -244.19195557]
[-141.18435669 -232.58364868]
[-131.68449402 -220.97534180]
[-119.63571167 -219.44140625]
[-111.63027191 -209.77896118]
[-112.41083527 -196.85270691]
[-103.17009735 -185.03707886]
[-93.92936707 -173.22146606]
[-87.27846527 -169.86384583]
[-84.61837006 -161.04069519]
[-75.64128876 -149.02354431]
[-66.66419983 -137.00639343]
[-53.19469070 -139.50473022]
[-39.90343475 -135.92234802]
[-29.41332436 -126.90686798]
[-23.82004929 -114.18383789]
[-24.27355194 -100.22666168]
[-30.74210930 -87.77584839]
[-22.03306580 -75.56304169]
[-13.32402134 -63.35023880]
[-4.61497831 -51.13743591]
[11.70420265 -44.77600098]
[13.40986919 -26.47779846]
[22.38695335 -14.46064568]
[31.36403847 -2.44349384]
[40.34112167 9.57365894]
[49.31820679 21.59081078]
[58.29529190 33.60796356]
[74.65720367 32.84909821]
[88.40087128 42.06077957]
[94.02876282 57.79547501]
[89.14912415 73.95121765]
[98.38986206 85.76683807]
[111.28308868 91.17575073]
[113.42575836 104.99242401]
[122.66649628 116.80804443]
[138.10676575 118.86611938]
[147.30986023 130.98048401]
[145.25265503 145.68774414]
[154.49339294 157.50335693]
[163.73411560 169.31896973]
[172.97485352 181.13459778]
[182.21557617 192.95021057]
[202.02743530 191.10659790]
[218.87805176 201.41809082]
[226.14764404 219.63418579]
[221.10009766 238.43945312]
[231.34893799 249.39213562]
[241.59776306 260.34481812]
[251.84660339 271.29751587]
[262.21597290 282.13616943]
[272.70458984 292.85943604]
[284.93917847 288.46029663]
[297.88064575 289.04092407]
[309.58700562 294.47854614]
[318.31506348 303.92407227]
[322.78018188 315.93472290]
[322.34515381 328.69418335]
[317.11099243 340.28729248]
[327.11502075 351.46405029]
[337.11904907 362.64077759]
[352.86077881 367.23748779]
[356.48739624 383.23059082]
[344.26815796 394.16775513]
[328.77313232 388.79776001]
[325.94232178 372.64480591]
[315.93829346 361.46807861]
[305.93426514 350.29135132]
[289.29244995 354.44381714]
[272.74148560 349.61657715]
[260.81958008 337.04022217]
[256.84240723 320.08285522]
[261.98132324 303.34805298]
[251.49269104 292.62478638]
[244.51177979 290.02191162]
[240.89392090 281.54635620]
[230.64508057 270.59365845]
[220.39624023 259.64096069]
[210.14739990 248.68829346]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 105]
[8 104]
[9 103]
[10 102]
[11 101]
[14 98]
[15 97]
[17 95]
[18 94]
[23 90]
[24 89]
[25 88]
[26 87]
[27 86]
[28 85]
[31 83]
[32 82]
[33 81]
[34 80]
[39 74]
[40 73]
[41 72]
[42 70]
[43 69]
[44 68]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[53 58]
[109 141]
[110 140]
[111 139]
[112 138]
[113 136]
[114 135]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
