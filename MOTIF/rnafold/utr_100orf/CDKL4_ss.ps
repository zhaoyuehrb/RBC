%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:55:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCAGCAUUGUACUGCAAGUCAAUCGAUACAAUAAUUUAAGUCACUUCAGCUAUAAUGGAAAAGUAUGAAAAAUUAGCUAAGACUGGAGAAGGGUCUUAUGGGGUUGUAUUCAAAUGCAGAAACAAAACCUCUGGACAAGUAGUAGCUGUUAAAA\
) } def
/len { sequence length } bind def

/coor [
[87.14108276 381.19110107]
[91.13978577 366.19808960]
[103.20865631 356.44503784]
[102.30873871 341.47207642]
[101.40882111 326.49908447]
[100.50890350 311.52609253]
[99.60899353 296.55313110]
[97.54270172 294.58078003]
[96.15602112 291.64837646]
[95.82726288 288.01916504]
[96.82929993 284.09124756]
[99.28484344 280.35607910]
[99.58497620 265.35906982]
[99.88510895 250.36209106]
[100.18524170 235.36508179]
[100.48536682 220.36808777]
[100.78549957 205.37109375]
[90.31320953 194.84176636]
[90.40395355 179.62840271]
[101.51908112 168.71549988]
[101.81921387 153.71849060]
[102.11934662 138.72149658]
[83.02436066 133.65426636]
[69.41521454 120.11585999]
[64.54289246 102.12730408]
[69.17422485 84.65341187]
[81.52884674 72.23424530]
[76.24217224 58.19675827]
[70.95549774 44.15927124]
[65.66881561 30.12178421]
[60.38214111 16.08429718]
[55.09546280 2.04681039]
[49.80878830 -11.99067688]
[44.52210999 -26.02816391]
[29.44759560 -28.61781311]
[17.77038193 -38.34095383]
[12.56245041 -52.50936508]
[15.12847233 -67.28337860]
[24.68064499 -78.71235657]
[19.39396858 -92.74984741]
[14.10729218 -106.78733063]
[8.82061577 -120.82482147]
[3.39375949 -134.80871582]
[-2.17273235 -148.73760986]
[-8.29712582 -155.59179688]
[-7.70817852 -163.00131226]
[-12.99485588 -177.03880310]
[-18.28153229 -191.07629395]
[-23.56820869 -205.11378479]
[-30.09577560 -218.61898804]
[-37.81133652 -231.48251343]
[-45.52690125 -244.34602356]
[-53.24246597 -257.20953369]
[-60.95802689 -270.07305908]
[-75.51599121 -266.07702637]
[-90.61221313 -266.15802002]
[-105.12646484 -270.30999756]
[-117.98168182 -278.22491455]
[-128.22393799 -289.31539917]
[-135.09317017 -302.75848389]
[-138.07965088 -317.55657959]
[-136.96174622 -332.61157227]
[-131.82243347 -346.80627441]
[-123.04306793 -359.08740234]
[-111.27514648 -368.54351807]
[-97.39192200 -374.47299194]
[-82.42362213 -376.43579102]
[-67.48099518 -374.28625488]
[-53.67287827 -368.18392944]
[-42.02393723 -358.58160400]
[-33.39859009 -346.19183350]
[-28.43689728 -331.93405151]
[-27.50705338 -316.86627197]
[-30.67805481 -302.10662842]
[-37.71459198 -288.75036621]
[-48.09450912 -277.78863525]
[-40.37894821 -264.92510986]
[-32.66338348 -252.06159973]
[-24.94782066 -239.19807434]
[-17.23225784 -226.33456421]
[-14.78690338 -241.13389587]
[-4.83494568 -252.35700989]
[9.56556225 -256.55526733]
[23.98960876 -252.43861389]
[34.00495148 -241.27201843]
[36.53405762 -226.48677063]
[30.79977989 -212.62609863]
[18.56415558 -203.94914246]
[3.58696985 -203.12217712]
[-9.53072166 -210.40045166]
[-4.24404478 -196.36296082]
[1.04263175 -182.32548523]
[6.32930851 -168.28799438]
[11.75616455 -154.30410767]
[17.32265663 -140.37519836]
[22.75563049 -135.30265808]
[22.85810280 -126.11149597]
[28.14477921 -112.07401276]
[33.43145752 -98.03652191]
[38.71813202 -83.99903107]
[53.43644333 -81.71059418]
[65.11078644 -72.29965973]
[70.54301453 -58.21572495]
[68.18078613 -43.20517349]
[58.55959702 -31.31484032]
[63.84627533 -17.27735329]
[69.13294983 -3.23986626]
[74.41962433 10.79762077]
[79.70630646 24.83510780]
[84.99298096 38.87259674]
[90.27965546 52.91008377]
[95.56633759 66.94757080]
[105.89622498 66.38893127]
[116.13661957 69.05436707]
[125.28383636 74.83042908]
[132.39752197 83.29249573]
[136.69657898 93.73370361]
[137.64295959 105.22312164]
[135.00480652 116.68859863]
[148.98870850 122.11544800]
[162.97259521 127.54230499]
[176.95649719 132.96916199]
[189.36677551 123.80464935]
[204.76315308 122.82727814]
[218.23268127 130.34892273]
[225.47729492 143.96946716]
[224.18525696 159.34263611]
[214.76885986 171.56289673]
[200.23283386 176.73083496]
[185.21557617 173.19735718]
[174.50903320 162.08998108]
[171.52963257 146.95304871]
[157.54574585 141.52619934]
[143.56184387 136.09934998]
[129.57795715 130.67248535]
[117.11634827 139.02163696]
[116.81621552 154.01863098]
[116.51608276 169.01562500]
[127.18569183 180.36450195]
[126.66767883 195.56932068]
[115.78250122 205.67121887]
[115.48236847 220.66822815]
[115.18223572 235.66522217]
[114.88210297 250.66221619]
[114.58197021 265.65921021]
[114.28183746 280.65621948]
[114.58197021 295.65319824]
[115.48188782 310.62619019]
[116.38180542 325.59918213]
[117.28171539 340.57214355]
[118.18163300 355.54513550]
[131.33177185 363.78244019]
[137.09744263 378.18859863]
[133.26162720 393.22409058]
[121.29926300 403.10748291]
[105.81013489 404.03842163]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[12 146]
[13 145]
[14 144]
[15 143]
[16 142]
[17 141]
[20 138]
[21 137]
[22 136]
[27 112]
[28 111]
[29 110]
[30 109]
[31 108]
[32 107]
[33 106]
[34 105]
[39 100]
[40 99]
[41 98]
[42 97]
[43 95]
[44 94]
[46 93]
[47 92]
[48 91]
[49 90]
[50 80]
[51 79]
[52 78]
[53 77]
[54 76]
[119 135]
[120 134]
[121 133]
[122 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
