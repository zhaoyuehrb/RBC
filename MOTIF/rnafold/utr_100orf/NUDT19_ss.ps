%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGCAGCUCCCUGCGGCCGGGCCCCAGCCGCUGGCGGCGGGCGGCCAGCAUCGUCCUGGCGGCUGGCUGGUCGCGCCCGGAGACCGCCACCCCGCCGU\
) } def
/len { sequence length } bind def

/coor [
[116.29555511 255.09028625]
[127.72128296 244.90641785]
[124.02709961 230.36842346]
[119.24471283 224.55857849]
[120.45159912 215.32083130]
[117.21133423 200.67498779]
[102.70117950 192.33264160]
[98.54945374 175.77238464]
[107.76263428 161.00213623]
[104.06845093 146.46415710]
[100.37426758 131.92616272]
[96.68008423 117.38818359]
[82.98685455 104.89117432]
[87.95227814 87.02991486]
[83.36141968 72.74971771]
[78.77056122 58.46952057]
[74.17970276 44.18932343]
[69.58884430 29.90912819]
[64.99798584 15.62893105]
[60.40712738 1.34873462]
[55.81626511 -12.93146229]
[51.22540665 -27.21165848]
[47.07478714 -30.94256592]
[45.09694672 -35.46733856]
[45.21464157 -39.77324295]
[46.93993378 -43.04102707]
[43.69966888 -57.68686676]
[40.45940018 -72.33271027]
[37.21913147 -86.97854614]
[33.97886658 -101.62438965]
[30.73859787 -116.27023315]
[27.49833107 -130.91607666]
[24.25806236 -145.56192017]
[21.01779556 -160.20776367]
[17.77752876 -174.85359192]
[14.53726101 -189.49943542]
[9.54620361 -197.36595154]
[11.43146801 -204.65095520]
[8.64825153 -219.39048767]
[5.86503506 -234.13000488]
[3.08181858 -248.86953735]
[0.29860234 -263.60906982]
[-2.71350384 -278.30352783]
[-5.95377111 -292.94937134]
[-18.65308952 -302.75277710]
[-18.76229095 -318.79547119]
[-6.19760466 -328.77084351]
[9.40241718 -325.02667236]
[16.07077217 -310.43515015]
[8.69207001 -296.18963623]
[11.93233776 -281.54379272]
[16.53172493 -275.58804321]
[15.03813076 -266.39227295]
[17.82134819 -251.65275574]
[20.60456276 -236.91322327]
[23.38777924 -222.17369080]
[26.17099571 -207.43417358]
[29.18310165 -192.73970032]
[32.42337036 -178.09387207]
[35.66363525 -163.44802856]
[38.90390396 -148.80218506]
[42.14417267 -134.15634155]
[45.38443756 -119.51049805]
[48.62470627 -104.86465454]
[51.86497498 -90.21881866]
[55.10523987 -75.57297516]
[58.34550858 -60.92713547]
[61.58577728 -46.28129196]
[65.50560760 -31.80251694]
[70.09646606 -17.52232170]
[74.68732452 -3.24212408]
[79.27818298 11.03807259]
[83.86904144 25.31826973]
[88.45989990 39.59846497]
[93.05075836 53.87866211]
[97.64161682 68.15885925]
[102.23247528 82.43905640]
[111.52082062 86.55970764]
[117.01314545 95.10882568]
[116.89978027 105.26955414]
[111.21807098 113.69400024]
[114.91225433 128.23197937]
[118.60643768 142.76997375]
[122.30062103 157.30795288]
[134.68054199 162.87686157]
[141.44432068 174.42033386]
[140.28494263 187.55268860]
[131.85717773 197.43472290]
[135.09744263 212.08056641]
[138.56509399 226.67424011]
[142.25927734 241.21223450]
[157.16062927 244.70623779]
[168.72378540 254.73381042]
[174.29159546 268.99066162]
[172.58464050 284.20068359]
[163.99514771 296.86874390]
[150.49693298 304.08377075]
[135.19177246 304.18783569]
[121.59670258 297.15701294]
[112.83574677 284.60693359]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 91]
[3 90]
[5 89]
[6 88]
[9 84]
[10 83]
[11 82]
[12 81]
[14 77]
[15 76]
[16 75]
[17 74]
[18 73]
[19 72]
[20 71]
[21 70]
[22 69]
[26 68]
[27 67]
[28 66]
[29 65]
[30 64]
[31 63]
[32 62]
[33 61]
[34 60]
[35 59]
[36 58]
[38 57]
[39 56]
[40 55]
[41 54]
[42 53]
[43 51]
[44 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
