%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:14:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUCUGAACCAGAUUCACAUGUUUGAUAUUUGGAUGCAGAGAAAAUGGGGCAGAAAGCAUCGCAACAGUUGGCUCUGAAGGACAGCAAAGAGGUGCCCGUCGUCUGUGAGGUGGUCAGUGAAGCUAUAGUCCAUGCAGCUCAGA\
) } def
/len { sequence length } bind def

/coor [
[-151.56225586 370.41213989]
[-162.33981323 380.84500122]
[-173.11735535 391.27786255]
[-183.89489746 401.71072388]
[-194.67245483 412.14355469]
[-205.44999695 422.57641602]
[-216.22753906 433.00927734]
[-227.00509644 443.44213867]
[-231.57415771 463.02578735]
[-250.43678284 467.07748413]
[-260.75225830 477.96743774]
[-271.06774902 488.85736084]
[-281.38323975 499.74728394]
[-291.69873047 510.63720703]
[-291.02029419 526.42694092]
[-301.76696777 538.01507568]
[-317.56298828 538.52655029]
[-329.03683472 527.65795898]
[-329.38125610 511.85739136]
[-318.39196777 500.49911499]
[-302.58868408 500.32171631]
[-292.27319336 489.43179321]
[-281.95770264 478.54187012]
[-271.64221191 467.65194702]
[-261.32672119 456.76199341]
[-262.51907349 446.52252197]
[-257.74301147 437.13891602]
[-248.37860107 431.86032104]
[-237.43794250 432.66458130]
[-226.66040039 422.23171997]
[-215.88285828 411.79888916]
[-205.10530090 401.36602783]
[-194.32775879 390.93316650]
[-183.55021667 380.50030518]
[-172.77265930 370.06744385]
[-161.99511719 359.63458252]
[-162.84761047 341.40225220]
[-149.93579102 328.05624390]
[-131.05055237 328.31393433]
[-120.73506165 317.42398071]
[-110.41957092 306.53405762]
[-116.57936096 292.93310547]
[-117.06391144 277.96945190]
[-111.76827240 263.92233276]
[-101.47027588 252.94332886]
[-87.71645355 246.72673035]
[-72.58985138 246.24824524]
[-58.39453888 251.61189270]
[-48.07904816 240.72196960]
[-37.76355743 229.83203125]
[-27.44806480 218.94210815]
[-31.10323906 206.05899048]
[-27.87113571 192.95152283]
[-18.49614334 183.08731079]
[-5.36213446 179.13059998]
[8.11308002 182.22325134]
[18.66207504 171.55935669]
[29.21107101 160.89544678]
[32.66107941 146.40591431]
[47.86692810 142.03639221]
[58.41592407 131.37249756]
[68.96492004 120.70859528]
[79.51391602 110.04470062]
[78.59534454 92.09958649]
[90.95234680 79.05445862]
[108.92087555 79.00015259]
[118.99802399 67.88929749]
[122.53791046 52.46918488]
[136.81941223 48.23978806]
[146.89656067 37.12893295]
[150.43644714 21.70882225]
[164.71795654 17.47942352]
[174.79510498 6.36856747]
[173.63575745 -4.54018307]
[178.60728455 -14.07114887]
[187.83076477 -19.14960098]
[198.10356140 -18.29059029]
[208.65255737 -28.95448685]
[209.37590027 -41.88079834]
[218.44395447 -50.54913330]
[230.58616638 -50.67966843]
[241.36370850 -61.11252213]
[252.14125061 -71.54537964]
[256.74398804 -89.33958435]
[273.87173462 -93.01379395]
[284.42071533 -103.67769623]
[294.96972656 -114.34159088]
[294.63348389 -130.14230347]
[305.62869263 -141.49487305]
[321.43209839 -141.66401672]
[332.66778564 -130.54939270]
[332.66983032 -114.74510956]
[321.43704224 -103.62755585]
[305.63360596 -103.79259491]
[295.08462524 -93.12870026]
[284.53561401 -82.46479797]
[284.27355957 -70.32472229]
[275.50750732 -61.35109711]
[262.57409668 -60.76782990]
[251.79656982 -50.33497620]
[241.01901245 -39.90211868]
[237.15948486 -22.81520462]
[219.31645203 -18.40549088]
[208.76745605 -7.74159479]
[205.33081055 11.24272060]
[185.90596008 16.44571304]
[175.82881165 27.55657005]
[173.00970459 42.18195724]
[158.00741577 47.20607758]
[147.93026733 58.31693268]
[145.11117554 72.94232178]
[130.10887146 77.96643829]
[120.03173065 89.07730103]
[122.81596375 100.08677673]
[119.94806671 111.07476807]
[112.13848877 119.31922913]
[101.32188416 122.77780151]
[90.17781067 120.59369659]
[79.62881470 131.25759888]
[69.07981873 141.92149353]
[58.53082657 152.58538818]
[54.32628250 167.83767700]
[39.87496567 171.44444275]
[29.32597160 182.10833740]
[18.77697754 192.77224731]
[21.74897003 209.38751221]
[14.33018875 224.36398315]
[-0.39348021 231.91607666]
[-16.55813217 229.25759888]
[-26.87362289 240.14752197]
[-37.18911743 251.03746033]
[-47.50460815 261.92739868]
[-41.38029861 275.81149292]
[-41.03915024 290.94183350]
[-46.50201416 305.01202393]
[-56.90740585 315.88931274]
[-70.64720154 321.93768311]
[-85.61513519 322.26397705]
[-99.52964020 316.84954834]
[-109.84513092 327.73947144]
[-120.16062164 338.62942505]
[-117.52084351 350.31155396]
[-120.84797668 361.69146729]
[-129.19392395 369.94244385]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[8 29]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[39 141]
[40 140]
[41 139]
[48 132]
[49 131]
[50 130]
[51 129]
[56 125]
[57 124]
[58 123]
[60 121]
[61 120]
[62 119]
[63 118]
[66 113]
[67 112]
[69 110]
[70 109]
[72 107]
[73 106]
[77 104]
[78 103]
[81 101]
[82 100]
[83 99]
[85 96]
[86 95]
[87 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
