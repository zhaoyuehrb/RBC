%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAGGGCUGGAGGUGCUGCUUUCAGGCCUGGCCAGCCCACCAUGCACGCCCACUGCCUGCCCUUCCUUCUGCACGCCUGGUGGGCCCUACUCCAGGCGGGUGCUGCGACGGUGGCCACUGCGCUCCUGCGUACGCGGGGGC\
) } def
/len { sequence length } bind def

/coor [
[108.05101013 159.08715820]
[93.68161011 158.69349670]
[79.96938324 154.89154053]
[67.70196533 147.97212219]
[57.56647491 138.40292358]
[45.22171783 146.92390442]
[32.87695694 155.44487000]
[20.53219986 163.96583557]
[8.18744278 172.48681641]
[-4.15731525 181.00778198]
[-16.50207329 189.52874756]
[-28.65666962 198.31884766]
[-40.61523438 207.37384033]
[-52.57380295 216.42881775]
[-64.53237152 225.48379517]
[-69.53471375 233.22126770]
[-76.85456085 234.60290527]
[-89.00915527 243.39300537]
[-101.16374969 252.18309021]
[-107.36930847 267.36279297]
[-123.65243530 269.31005859]
[-133.26245117 256.02172852]
[-126.31337738 241.16769409]
[-109.95384979 240.02850342]
[-97.79925537 231.23840332]
[-85.64466095 222.44830322]
[-73.58734894 213.52522278]
[-61.62878418 204.47024536]
[-49.67021561 195.41526794]
[-37.71165085 186.36029053]
[-36.17824936 181.76278687]
[-31.69566727 178.11256409]
[-25.02304459 177.18399048]
[-12.67828655 168.66302490]
[-0.33352867 160.14205933]
[12.01122952 151.62107849]
[24.35598755 143.10011292]
[36.70074463 134.57914734]
[49.04550171 126.05816650]
[45.30979538 116.86328125]
[43.21879578 107.16126251]
[42.83538818 97.24387360]
[44.17110825 87.40937805]
[47.18577957 77.95352173]
[51.78874969 69.16067505]
[57.84158325 61.29526138]
[65.16225433 54.59382629]
[73.53061676 49.25790024]
[82.69499207 45.44795609]
[80.07224274 30.67902946]
[77.44949341 15.91010284]
[74.82674408 1.14117622]
[72.20398712 -13.62775040]
[69.58123779 -28.39667702]
[66.95848846 -43.16560364]
[64.01194000 -57.87334824]
[60.74300385 -72.51281738]
[50.18421936 -84.29512024]
[54.96191025 -98.40266418]
[51.69297791 -113.04213715]
[48.42404556 -127.68161011]
[33.74517059 -132.20114136]
[23.30441856 -143.46551514]
[19.91030502 -158.44468689]
[24.47582436 -173.10932922]
[35.77288055 -183.51472473]
[50.76261520 -186.86186218]
[65.41287231 -182.25039673]
[75.78279877 -170.92079163]
[79.08293915 -155.92063904]
[74.42557526 -141.28491211]
[63.06351471 -130.95054626]
[66.33245087 -116.31107330]
[69.60137939 -101.67160034]
[79.92635345 -90.93641663]
[75.38247681 -75.78175354]
[78.65140533 -61.14228058]
[82.19644928 -57.83758163]
[83.65467072 -52.24372482]
[81.72741699 -45.78835297]
[84.35016632 -31.01942635]
[86.97291565 -16.25049973]
[89.59566498 -1.48157406]
[92.21841431 13.28735256]
[94.84117126 28.05627823]
[97.46392059 42.82520294]
[107.23202515 42.89756775]
[116.90102386 44.63610840]
[126.18720245 48.00898743]
[134.81483459 52.93614197]
[142.52438354 59.29109192]
[149.08030701 66.90413666]
[154.27818298 75.56684875]
[157.95114136 85.03776550]
[159.97508240 95.04911041]
[160.27281189 105.31436920]
[158.81681824 115.53646088]
[173.74357605 117.01696777]
[188.67033386 118.49747467]
[203.59709167 119.97798157]
[215.75115967 110.23546600]
[230.86791992 111.94954681]
[240.08102417 123.59662628]
[255.00778198 125.07713318]
[269.93453979 126.55763245]
[284.86129761 128.03814697]
[299.78805542 129.51864624]
[314.49896240 122.27153015]
[327.97836304 131.61167908]
[326.35974121 147.93075562]
[311.30825806 154.44108582]
[298.30755615 144.44540405]
[283.38079834 142.96490479]
[268.45404053 141.48439026]
[253.52726746 140.00389099]
[238.60050964 138.52337646]
[227.27900696 148.13374329]
[212.12005615 146.84494019]
[202.11659241 134.90473938]
[187.18983459 133.42424011]
[172.26307678 131.94372559]
[157.33631897 130.46322632]
[148.81535339 142.80798340]
[155.49273682 156.23974609]
[162.17013550 169.67150879]
[168.84753418 183.10328674]
[175.52493286 196.53504944]
[182.20233154 209.96681213]
[188.87973022 223.39857483]
[195.55712891 236.83035278]
[209.51336670 245.44169617]
[208.76344299 261.82369995]
[194.07881165 269.12393188]
[180.56576538 259.83255005]
[182.12536621 243.50775146]
[175.44796753 230.07597351]
[168.77056885 216.64421082]
[162.09317017 203.21244812]
[155.41577148 189.78068542]
[148.73837280 176.34890747]
[142.06097412 162.91714478]
[135.38357544 149.48538208]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 39]
[6 38]
[7 37]
[8 36]
[9 35]
[10 34]
[11 33]
[12 30]
[13 29]
[14 28]
[15 27]
[17 26]
[18 25]
[19 24]
[49 86]
[50 85]
[51 84]
[52 83]
[53 82]
[54 81]
[55 80]
[56 77]
[57 76]
[59 74]
[60 73]
[61 72]
[97 122]
[98 121]
[99 120]
[100 119]
[103 116]
[104 115]
[105 114]
[106 113]
[107 112]
[123 142]
[124 141]
[125 140]
[126 139]
[127 138]
[128 137]
[129 136]
[130 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
