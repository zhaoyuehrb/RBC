%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:12:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUGGGUCCAGCUUACAACCACACAAUGGAAACCCCUGCCUCCUUCCUCCUUGUGGGUAUCCCAGGACUGCAAUCUUCACAUCUUUGGCUGGCUAUCU\
) } def
/len { sequence length } bind def

/coor [
[88.40263367 281.48828125]
[73.80007935 276.90310669]
[63.00921631 266.04879761]
[58.50971603 251.41963196]
[61.33552170 236.37724304]
[70.83728790 224.37828064]
[84.83158112 218.18002319]
[85.76412201 203.20904541]
[82.98937225 196.21430969]
[86.96562958 187.78923035]
[88.36331940 172.85447693]
[89.76100159 157.91973877]
[91.15869141 142.98500061]
[92.55638123 128.05026245]
[93.95407104 113.11552429]
[90.11541748 111.27729034]
[86.85300446 108.30449677]
[84.50362396 104.38299561]
[83.34281158 99.79848480]
[83.55541992 94.91606903]
[85.21303558 90.15120697]
[75.73098755 78.52835083]
[66.24894714 66.90549469]
[56.76689911 55.28263474]
[47.28485107 43.65977859]
[32.17052078 46.00588989]
[18.00472260 40.50798798]
[8.55562496 28.73594475]
[6.28281784 13.91399193]
[11.69771481 0.03795237]
[2.21566892 -11.58490467]
[-7.26637745 -23.20776176]
[-16.74842453 -34.83061600]
[-31.57810974 -31.21908569]
[-46.50439072 -34.40796661]
[-58.56363678 -43.76410294]
[-65.36148071 -57.42982864]
[-65.54821014 -72.69180298]
[-59.08673859 -86.51975250]
[-47.26000214 -96.16812134]
[-32.41621017 -99.72122955]
[-17.50260353 -96.47359467]
[-5.48029280 -87.07004547]
[1.26368451 -73.37765503]
[1.39030647 -58.11505890]
[-5.12556744 -44.31266403]
[4.35647917 -32.68980789]
[13.83852577 -21.06694984]
[23.32057190 -9.44409370]
[38.00131607 -11.96228790]
[52.06496429 -6.75942230]
[61.69977188 4.86111355]
[64.24109650 19.84238434]
[58.90770721 34.17773056]
[68.38975525 45.80059052]
[77.87180328 57.42344666]
[87.35384369 69.04630280]
[96.83589172 80.66915894]
[111.68919373 82.76188660]
[124.01352692 74.21140289]
[136.33786011 65.66091919]
[148.52772522 56.91980362]
[160.58018494 47.99017334]
[166.61033630 32.73995209]
[182.86993408 30.60509300]
[192.63249207 43.78175735]
[185.85513306 58.71492386]
[169.50981140 60.04262543]
[157.45736694 68.97225952]
[153.89411926 75.60013580]
[144.88835144 77.98525238]
[132.56401062 86.53573608]
[120.23967743 95.08621979]
[132.69030762 86.72070312]
[147.28572083 83.26039124]
[162.16671753 85.14607239]
[175.43772888 92.13753510]
[185.40821838 103.34419250]
[190.80815125 117.33850861]
[190.94964600 132.33784485]
[185.81468201 146.43153381]
[176.05737305 157.82427979]
[162.92062378 165.06486511]
[148.07785034 167.23094177]
[133.41973877 164.04658508]
[120.81352234 155.91743469]
[111.86498260 143.87901306]
[107.71402740 129.46479797]
[108.88880920 114.51321411]
[107.49111938 129.44795227]
[106.09343719 144.38269043]
[104.69574738 159.31742859]
[103.29805756 174.25216675]
[101.90036774 189.18692017]
[100.73510742 204.14158630]
[99.80256653 219.11256409]
[112.91947937 226.99958801]
[120.85874176 240.08494568]
[121.79596710 255.36174011]
[115.51577759 269.31945801]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 96]
[8 95]
[10 94]
[11 93]
[12 92]
[13 91]
[14 90]
[15 89]
[21 58]
[22 57]
[23 56]
[24 55]
[25 54]
[30 49]
[31 48]
[32 47]
[33 46]
[59 73]
[60 72]
[61 71]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
