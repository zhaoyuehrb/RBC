%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:12:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGAAGUUUUGCUGCUAGUCGCGGACGCAAUGGCUUCAAGGUUACUUCGCGGAGCUGGAACGCUGGCCGCGCAGGCCCUGAGGGCUCGCGGCCCCAGUGGCGCGGCCGCGAUGCGCUCCAUGGCAUCUG\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 509.48495483]
[92.50000000 494.48495483]
[92.50000000 479.48495483]
[92.50000000 464.48495483]
[84.76270294 451.75769043]
[92.50000000 437.95751953]
[92.50000000 422.95751953]
[92.50000000 407.95751953]
[84.76270294 395.23022461]
[92.50000000 381.43005371]
[92.50000000 366.43005371]
[81.81912994 356.11239624]
[81.60544586 340.90023804]
[92.50000000 329.76712036]
[92.50000000 314.76712036]
[81.81912994 304.44943237]
[81.60544586 289.23730469]
[92.50000000 278.10418701]
[92.50000000 263.10418701]
[92.50000000 248.10418701]
[92.50000000 233.10418701]
[92.50000000 218.10418701]
[92.50000000 203.10418701]
[92.50000000 188.10418701]
[84.76270294 175.37692261]
[92.50000000 161.57673645]
[92.50000000 146.57673645]
[92.50000000 131.57673645]
[80.40373993 125.87136078]
[71.63518524 115.77269745]
[67.68333435 102.99562073]
[69.21926880 89.70984650]
[56.47724915 81.79524231]
[43.73522949 73.88063812]
[30.99320984 65.96603394]
[18.25119019 58.05143356]
[5.50917149 50.13682938]
[-7.51131153 42.68921280]
[-20.79315186 35.71836472]
[-34.07499313 28.74751663]
[-50.43013000 29.94813156]
[-59.42241287 16.23423576]
[-51.80134964 1.71351230]
[-35.40683746 1.32363498]
[-27.10414505 15.46567631]
[-13.82230473 22.43652344]
[-0.54046398 29.40737152]
[3.00165892 28.65006065]
[7.09186554 29.63622475]
[10.87565708 32.60609055]
[13.42377567 37.39480972]
[26.16579437 45.30941391]
[38.90781403 53.22401810]
[51.64983368 61.13862228]
[64.39185333 69.05322266]
[77.13387299 76.96782684]
[83.67501068 71.94940948]
[91.26958466 68.74107361]
[99.42752838 67.54983521]
[107.62240601 68.45258331]
[115.32542419 71.39104462]
[125.27226257 60.16338730]
[135.21910095 48.93572617]
[145.16593933 37.70806503]
[154.83857727 26.24332809]
[164.23135376 14.54821301]
[173.62413025 2.85309792]
[183.01690674 -8.84201717]
[192.40968323 -20.53713226]
[201.80245972 -32.23224640]
[211.19525146 -43.92736435]
[212.61274719 -50.55354691]
[216.61071777 -54.77111053]
[221.33532715 -55.94615936]
[231.28216553 -67.17382050]
[241.22900391 -78.40148163]
[251.17585754 -89.62914276]
[261.12268066 -100.85680389]
[267.10021973 -116.72203064]
[284.00018311 -115.37003326]
[287.37939453 -98.75626373]
[272.35034180 -90.90996552]
[262.40350342 -79.68230438]
[252.45666504 -68.45464325]
[242.50982666 -57.22698212]
[232.56298828 -45.99932098]
[222.89036560 -34.53458405]
[213.49758911 -22.83946991]
[204.10479736 -11.14435482]
[194.71202087 0.55076051]
[185.31924438 12.24587536]
[175.92646790 23.94099045]
[166.53369141 35.63610458]
[166.17083740 40.49110413]
[162.68655396 45.14206696]
[156.39360046 47.65490341]
[146.44676208 58.88256454]
[136.49992371 70.11022949]
[126.55308533 81.33789062]
[132.43244934 101.21532440]
[125.08194733 120.59700775]
[107.50000000 131.57673645]
[107.50000000 146.57673645]
[107.50000000 161.57673645]
[115.23729706 175.37692261]
[107.50000000 188.10418701]
[107.50000000 203.10418701]
[107.50000000 218.10418701]
[107.50000000 233.10418701]
[107.50000000 248.10418701]
[107.50000000 263.10418701]
[107.50000000 278.10418701]
[118.39455414 289.23730469]
[118.18087006 304.44943237]
[107.50000000 314.76712036]
[107.50000000 329.76712036]
[118.39455414 340.90023804]
[118.18087006 356.11239624]
[107.50000000 366.43005371]
[107.50000000 381.43005371]
[115.23729706 395.23022461]
[107.50000000 407.95751953]
[107.50000000 422.95751953]
[107.50000000 437.95751953]
[115.23729706 451.75769043]
[107.50000000 464.48495483]
[107.50000000 479.48495483]
[107.50000000 494.48495483]
[107.50000000 509.48495483]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 129]
[2 128]
[3 127]
[4 126]
[6 124]
[7 123]
[8 122]
[10 120]
[11 119]
[14 116]
[15 115]
[18 112]
[19 111]
[20 110]
[21 109]
[22 108]
[23 107]
[24 106]
[26 104]
[27 103]
[28 102]
[32 56]
[33 55]
[34 54]
[35 53]
[36 52]
[37 51]
[38 47]
[39 46]
[40 45]
[61 99]
[62 98]
[63 97]
[64 96]
[65 93]
[66 92]
[67 91]
[68 90]
[69 89]
[70 88]
[71 87]
[74 86]
[75 85]
[76 84]
[77 83]
[78 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
