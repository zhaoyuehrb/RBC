%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:31:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCGCCCUACCUCGGAGUGUGUGGCGCCAUGAUGCAGGGAAGAUGGCUUCGUUUCGGAAGCUAACGCUUUCUGAAAAAGUGCCGCCAAAUCAUCCCAGUCGGAAAAAGGUUAACUUCCUAGAUAUGUCUCUAGACGACAUUA\
) } def
/len { sequence length } bind def

/coor [
[99.46965027 115.91858673]
[91.96965027 128.90896606]
[84.46965027 141.89935303]
[76.96965027 154.88973999]
[69.46965027 167.88011169]
[61.96965027 180.87049866]
[54.61179733 193.94190979]
[47.39696884 207.09281921]
[52.05952835 222.19367981]
[44.60476303 236.12931824]
[29.45544815 240.63195801]
[15.59940624 233.03027344]
[11.25717926 217.83419800]
[19.00493431 204.05931091]
[34.24606705 199.87799072]
[41.46089554 186.72708130]
[41.92401505 179.29365540]
[48.97927094 173.37049866]
[56.47927094 160.38011169]
[63.97927094 147.38973999]
[71.47927094 134.39935303]
[78.97927094 121.40897369]
[86.47927094 108.41858673]
[85.00901031 93.49082184]
[75.11882782 82.21321869]
[65.22863770 70.93562317]
[55.33845139 59.65802765]
[40.42215729 54.38406372]
[37.84769440 39.71363831]
[27.95750618 28.43604088]
[18.06731796 17.15844536]
[3.67671490 21.97365189]
[-11.42040062 20.91529274]
[-24.92564392 14.17570496]
[-34.79493713 2.80976105]
[-39.54786301 -11.43013096]
[-38.48969269 -26.36417580]
[-31.81273651 -39.71885681]
[-41.70292282 -50.99645233]
[-51.59310913 -62.27405167]
[-61.48329926 -73.55165100]
[-71.37348175 -84.82924652]
[-81.26367188 -96.10684204]
[-100.59832001 -101.63162231]
[-103.72129822 -120.66906738]
[-114.09399414 -131.50453186]
[-124.46669006 -142.33998108]
[-134.83938599 -153.17544556]
[-145.21208191 -164.01091003]
[-155.58477783 -174.84635925]
[-165.95747375 -185.68182373]
[-181.76147461 -185.77597046]
[-192.81044006 -197.07623291]
[-192.54920959 -212.87837219]
[-181.13275146 -223.80723572]
[-165.33427429 -223.37895203]
[-154.52671814 -211.84759521]
[-155.12200928 -196.05451965]
[-144.74931335 -185.21905518]
[-134.37661743 -174.38360596]
[-124.00392151 -163.54814148]
[-113.63122559 -152.71267700]
[-103.25852966 -141.87722778]
[-92.88583374 -131.04176331]
[-82.59830475 -131.73204041]
[-73.45819092 -126.50097656]
[-68.64463043 -116.88697052]
[-69.98607635 -105.99703217]
[-60.09589005 -94.71942902]
[-50.20569992 -83.44183350]
[-40.31551361 -72.16423798]
[-30.42532730 -60.88664246]
[-20.53513908 -49.60904312]
[-6.42319107 -54.48574448]
[8.52120972 -53.58557510]
[22.01889610 -47.01463318]
[31.99940109 -35.74621964]
[36.91854095 -21.47682381]
[35.99728012 -6.37072182]
[29.34491539 7.26825762]
[39.23510361 18.54585457]
[49.12528992 29.82345200]
[63.33417511 34.29076385]
[66.61605072 49.76784134]
[76.50623322 61.04543686]
[86.39642334 72.32303619]
[96.28661346 83.60063171]
[89.71140289 70.11854553]
[89.46663666 55.12054062]
[95.59839630 41.43107605]
[106.95194244 31.62817001]
[121.38916016 27.55792999]
[136.19119263 29.98686790]
[148.57049561 38.45756149]
[156.19580078 51.37479782]
[157.63105774 66.30596924]
[152.60600281 80.43922424]
[142.06694031 91.11294556]
[127.99700165 96.31727600]
[141.30216980 103.24349976]
[154.60733032 110.16973114]
[167.91249084 117.09596252]
[174.40266418 109.78185272]
[184.13732910 105.21756744]
[195.85997009 104.79536438]
[207.74369812 109.31225586]
[217.67427063 118.74942017]
[232.44638062 121.35414886]
[247.21849060 123.95886993]
[261.13204956 115.97181702]
[275.99792480 122.00377655]
[280.41235352 137.42753601]
[270.98892212 150.41131592]
[254.95649719 150.99507141]
[244.61376953 138.73098755]
[229.84165955 136.12626648]
[215.06953430 133.52154541]
[207.99827576 146.75094604]
[200.92764282 159.97917175]
[211.30033875 170.81463623]
[221.67303467 181.65010071]
[232.04573059 192.48554993]
[242.41842651 203.32101440]
[258.22244263 203.41516113]
[269.27139282 214.71542358]
[269.01016235 230.51756287]
[257.59371948 241.44642639]
[241.79522705 241.01814270]
[230.98767090 229.48678589]
[231.58296204 213.69371033]
[221.21026611 202.85824585]
[210.83757019 192.02279663]
[200.46487427 181.18733215]
[190.09217834 170.35186768]
[162.95481873 155.41323853]
[160.98626709 130.40112305]
[147.68109131 123.47489166]
[134.37593079 116.54866791]
[121.07077026 109.62243652]
[131.71733093 120.18892670]
[131.09690857 135.17608643]
[119.61344147 144.82646179]
[104.74327850 142.85713196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[5 19]
[6 18]
[7 16]
[8 15]
[24 87]
[25 86]
[26 85]
[27 84]
[29 82]
[30 81]
[31 80]
[38 73]
[39 72]
[40 71]
[41 70]
[42 69]
[43 68]
[45 64]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[99 139]
[100 138]
[101 137]
[102 136]
[107 117]
[108 116]
[109 115]
[119 134]
[120 133]
[121 132]
[122 131]
[123 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
