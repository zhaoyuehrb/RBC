%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAACCCGUUGGCUGUUCCUUUUGGUACGCUCCAAGAUGGCUGCCUCCAUAGUGCGGCGCGGGAUGCUCCUGGCGCGGCAAGUGGUUCUUCCUCAGCUCUCUCCUGCAGGUAAAAGAUACCUGCUUUCUUCAGCCU\
) } def
/len { sequence length } bind def

/coor [
[109.47394562 221.90480042]
[103.12377930 235.78421021]
[91.37493134 245.52728271]
[76.56016541 249.19952393]
[61.62094879 246.07180786]
[49.52348328 236.76515198]
[42.66972351 223.12738037]
[42.42049026 207.86628723]
[48.82527161 194.01199341]
[60.61238861 184.31526184]
[75.44150543 180.70140076]
[78.51530457 166.01971436]
[81.58910370 151.33802795]
[84.66291046 136.65635681]
[87.73670959 121.97467041]
[82.28359222 116.82554626]
[72.54730225 128.23626709]
[65.53723907 141.49745178]
[50.69028473 139.36021423]
[47.70528793 124.66021729]
[60.54323578 116.90137482]
[71.37735748 106.52728271]
[65.92424011 101.37815857]
[51.44279861 105.28812408]
[36.96135712 109.19808960]
[29.30366707 123.02326202]
[14.09014797 127.30396271]
[0.34671330 119.50052643]
[-3.77290225 104.24259949]
[4.17539692 90.58243561]
[19.47602463 86.62436676]
[33.05139160 94.71664429]
[47.53283310 90.80667877]
[62.01427460 86.89671326]
[71.13432312 74.98769379]
[71.13432312 59.98769379]
[71.13432312 44.98769379]
[63.39702225 31.18752289]
[71.13432312 18.46025085]
[71.13432312 3.46025133]
[71.13432312 -11.53974819]
[71.13432312 -26.53974915]
[71.13432312 -41.53974915]
[53.66804886 -52.49450302]
[46.25241852 -71.58590698]
[51.67193222 -91.19547272]
[67.62364197 -103.60188293]
[65.90756226 -118.50338745]
[64.19147491 -133.40490723]
[62.47539139 -148.30641174]
[52.84030151 -156.96733093]
[51.76074600 -169.47436523]
[59.27304077 -179.02557373]
[57.89908981 -193.96250916]
[56.52513885 -208.89944458]
[47.55631256 -221.93289185]
[54.09531021 -235.31538391]
[52.72135925 -250.25231934]
[51.34740829 -265.18927002]
[49.97345734 -280.12622070]
[41.00463104 -293.15966797]
[47.54362869 -306.54214478]
[46.16967773 -321.47906494]
[33.85899353 -331.38980103]
[32.24506378 -347.11148071]
[42.28540039 -359.31668091]
[58.02325058 -360.76431274]
[70.12162781 -350.59548950]
[71.40277863 -334.84323120]
[61.10662079 -322.85302734]
[62.48057175 -307.91607666]
[71.35112000 -295.95101929]
[64.91040039 -281.50015259]
[66.28434753 -266.56320190]
[67.65830231 -251.62626648]
[69.03224945 -236.68933105]
[77.90280151 -224.72427368]
[71.46208191 -210.27340698]
[72.83602905 -195.33645630]
[74.20998383 -180.39952087]
[85.10623169 -166.69102478]
[77.37689972 -150.02249146]
[79.09298706 -135.12098694]
[80.80906677 -120.21947479]
[82.52515411 -105.31796265]
[92.07044983 -102.70478058]
[100.38860321 -97.28821564]
[106.67682648 -89.56938171]
[110.32164764 -80.27259064]
[110.95875549 -70.27738953]
[108.50932312 -60.53538895]
[103.18922424 -51.97961426]
[95.49018860 -45.43518829]
[86.13432312 -41.53974915]
[86.13432312 -26.53974915]
[86.13432312 -11.53974819]
[86.13432312 3.46025133]
[86.13432312 18.46025085]
[93.87162018 31.18752289]
[86.13432312 44.98769379]
[86.13432312 59.98769379]
[86.13432312 74.98769379]
[100.53376770 69.04794312]
[117.14739990 71.43698883]
[131.19062805 82.68787384]
[138.02590942 100.63573456]
[150.72023010 108.62660980]
[163.41455078 116.61749268]
[176.10887146 124.60837555]
[188.80319214 132.59925842]
[201.49752808 140.59013367]
[214.19184875 148.58100891]
[230.09143066 146.44030762]
[241.57821655 157.64001465]
[239.84051514 173.58868408]
[226.21133423 182.05184937]
[211.14582825 176.53730774]
[206.20095825 161.27532959]
[193.50663757 153.28445435]
[180.81231689 145.29357910]
[168.11799622 137.30268860]
[155.42367554 129.31181335]
[142.72935486 121.32093811]
[130.03503418 113.33005524]
[123.13086700 116.25965881]
[135.10917664 125.28849792]
[133.27903748 140.17643738]
[119.47058105 146.03533936]
[107.49246216 137.00624084]
[109.32254791 122.11886597]
[102.41838837 125.04846954]
[99.34458923 139.73014832]
[96.27079010 154.41183472]
[93.19698334 169.09352112]
[90.12318420 183.77519226]
[102.25720978 193.03414917]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 135]
[12 134]
[13 133]
[14 132]
[15 131]
[23 34]
[24 33]
[25 32]
[35 102]
[36 101]
[37 100]
[39 98]
[40 97]
[41 96]
[42 95]
[43 94]
[47 85]
[48 84]
[49 83]
[50 82]
[53 80]
[54 79]
[55 78]
[57 76]
[58 75]
[59 74]
[60 73]
[62 71]
[63 70]
[106 124]
[107 123]
[108 122]
[109 121]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
