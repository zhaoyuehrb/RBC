%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:12:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUGCUGGGGUAAGGCACGUGAGGAGGAGGUGGCUUGAGGCAACCAUGGCGGGAGGAAUGAAAGUGGCGGUCUCGCCGGCAGUUGGUCCCGGGCCCUGGGGCUCGGGAGUCGGGGGCGGUGGGACAGUGCGGCUACUCUUGAUCC\
) } def
/len { sequence length } bind def

/coor [
[-22.29956055 205.12733459]
[-33.74516678 197.22238159]
[-46.40320969 205.27059937]
[-59.06125259 213.31883240]
[-71.71929169 221.36705017]
[-84.37734222 229.41528320]
[-97.03538513 237.46350098]
[-97.85397339 246.98348999]
[-102.92351532 254.91926575]
[-110.97742462 259.52639771]
[-120.11145782 259.86340332]
[-128.23338318 255.98144531]
[-141.38107300 263.20211792]
[-154.52874756 270.42282104]
[-167.67643738 277.64349365]
[-176.04789734 291.06845093]
[-190.92808533 290.41323853]
[-204.07575989 297.63394165]
[-217.22344971 304.85461426]
[-216.87034607 320.15606689]
[-223.67900085 333.86373901]
[-236.08485413 342.82775879]
[-251.23710632 344.98825073]
[-265.65390015 339.84872437]
[-276.02236938 328.59024048]
[-279.95986938 313.79989624]
[-276.56164551 298.87640381]
[-266.60858154 287.24905396]
[-252.38777161 281.58978271]
[-237.16709900 283.19900513]
[-224.44413757 291.70693970]
[-211.29644775 284.48623657]
[-198.14875793 277.26556396]
[-190.71772766 264.35708618]
[-174.89712524 264.49581909]
[-161.74943542 257.27511597]
[-148.60174561 250.05444336]
[-135.45407104 242.83375549]
[-126.46035767 224.30015564]
[-105.08361053 224.80546570]
[-92.42556763 216.75723267]
[-79.76752472 208.70901489]
[-67.10947418 200.66078186]
[-54.45143509 192.61256409]
[-41.79339218 184.56433105]
[-43.97604752 168.76733398]
[-39.04939270 153.53933716]
[-27.94715118 141.93051147]
[-12.84524345 136.28910828]
[3.26453447 137.78668213]
[17.16719437 146.17507935]
[29.65035820 137.85818481]
[42.13352203 129.54130554]
[54.61668777 121.22441864]
[67.09985352 112.90753174]
[79.58301544 104.59064484]
[79.16949463 97.99568939]
[80.83291626 91.60057831]
[84.40744019 86.04294586]
[89.53664398 81.87693787]
[95.70912170 79.51792145]
[102.30942535 79.20111084]
[108.67946625 80.95809937]
[114.18410492 84.61369324]
[127.62832642 77.96140289]
[141.07254028 71.30910492]
[150.00999451 58.25412369]
[164.84858704 59.54454803]
[178.29280090 52.89225769]
[191.73703003 46.23996353]
[205.03601074 39.30188751]
[218.18370056 32.08120346]
[231.33139038 24.86051559]
[244.47908020 17.63982964]
[257.62677002 10.41914368]
[270.77444458 3.19845724]
[283.92214966 -4.02222872]
[297.06982422 -11.24291515]
[310.21752930 -18.46360016]
[310.93783569 -32.26855469]
[318.34225464 -43.81337357]
[330.39648438 -50.12524033]
[343.88613892 -49.64229202]
[355.27362061 -42.59867859]
[368.57263184 -49.53675079]
[381.87161255 -56.47482681]
[395.17059326 -63.41290283]
[408.39468384 -70.49268341]
[421.54238892 -77.71337128]
[434.69006348 -84.93405914]
[447.83776855 -92.15474701]
[460.98544312 -99.37542725]
[474.13311768 -106.59611511]
[487.28082275 -113.81680298]
[500.42849731 -121.03749084]
[513.57617188 -128.25817871]
[521.61004639 -142.55464172]
[538.00903320 -142.47476196]
[545.90319824 -128.10070801]
[537.17181396 -114.21926880]
[520.79687500 -115.11048889]
[507.64920044 -107.88980103]
[494.50149536 -100.66911316]
[481.35382080 -93.44842529]
[468.20611572 -86.22774506]
[455.05844116 -79.00705719]
[441.91076660 -71.78636932]
[428.76306152 -64.56568146]
[415.61538696 -57.34499741]
[411.23556519 -51.32564163]
[402.10867310 -50.11391068]
[388.80969238 -43.17583847]
[375.51068115 -36.23776245]
[362.21170044 -29.29968834]
[360.33996582 -13.02367496]
[349.04129028 -0.93192565]
[332.60342407 2.09811187]
[317.43820190 -5.31591320]
[304.29052734 1.90477288]
[291.14282227 9.12545872]
[277.99514771 16.34614563]
[264.84744263 23.56683159]
[251.69976807 30.78751755]
[238.55207825 38.00820160]
[225.40438843 45.22888947]
[212.25669861 52.44957733]
[210.07255554 56.76928329]
[205.11546326 59.72715759]
[198.38931274 59.68418121]
[184.94509888 66.33647156]
[171.50088501 72.98876953]
[163.52505493 85.56793213]
[147.72483826 84.75332642]
[134.28062439 91.40561676]
[120.83640289 98.05791473]
[110.46335602 118.12306213]
[87.89990234 117.07380676]
[75.41674042 125.39069366]
[62.93357468 133.70758057]
[50.45040894 142.02447510]
[37.96724701 150.34135437]
[25.48408127 158.65824890]
[27.97519302 172.60806274]
[24.95741463 186.40907288]
[16.92093658 197.97477722]
[5.11210728 205.56959534]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 45]
[3 44]
[4 43]
[5 42]
[6 41]
[7 40]
[12 38]
[13 37]
[14 36]
[15 35]
[17 33]
[18 32]
[19 31]
[51 142]
[52 141]
[53 140]
[54 139]
[55 138]
[56 137]
[64 135]
[65 134]
[66 133]
[68 131]
[69 130]
[70 129]
[71 126]
[72 125]
[73 124]
[74 123]
[75 122]
[76 121]
[77 120]
[78 119]
[79 118]
[84 114]
[85 113]
[86 112]
[87 111]
[88 109]
[89 108]
[90 107]
[91 106]
[92 105]
[93 104]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
