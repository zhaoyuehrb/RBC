%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:54:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACGGCAGCCCUACACUCGGCCUGGAAGAAUUGUUUUUCUUCUCUGGAAAGGUGAACAUUUAUAGCAUUUAUUUCCCAAAUCUGUUAACAUGGCAAAAUAUGUCAGUCUCACUGAAGCUAACGAAGAACUCAAGGUCUUAAUGGACGAGAACCAGACCAGCCGCCCCGUGGCCGUUCACACCUCCACCG\
) } def
/len { sequence length } bind def

/coor [
[-40.62919617 338.32678223]
[-53.83105850 327.68972778]
[-47.26432800 312.05914307]
[-46.76837921 297.06735229]
[-46.27242661 282.07556152]
[-53.52745819 280.17437744]
[-68.03752136 276.37200928]
[-75.29255676 274.47082520]
[-82.21267700 287.77914429]
[-89.13278961 301.08749390]
[-82.08250427 314.91043091]
[-84.53684998 330.23214722]
[-95.55209351 341.16119385]
[-110.89264679 343.49511719]
[-124.65975189 336.33645630]
[-131.55967712 322.43786621]
[-128.93925476 307.14364624]
[-117.80609894 296.33474731]
[-102.44113159 294.16738892]
[-95.52101898 280.85903931]
[-88.60089874 267.55068970]
[-93.86017609 262.20373535]
[-104.37872314 251.50981140]
[-109.63800049 246.16284180]
[-123.05894470 252.86198425]
[-136.47988892 259.56109619]
[-149.90081787 266.26025391]
[-163.32176208 272.95938110]
[-176.74270630 279.65850830]
[-190.16363525 286.35763550]
[-194.93318176 301.42504883]
[-208.99833679 308.63250732]
[-224.01448059 303.70391846]
[-231.07281494 289.56335449]
[-225.98574829 274.60015869]
[-211.77134705 267.69171143]
[-196.86277771 272.93670654]
[-183.44183350 266.23757935]
[-170.02088928 259.53842163]
[-156.59996033 252.83930969]
[-143.17901611 246.14016724]
[-129.75807190 239.44104004]
[-116.33713531 232.74191284]
[-62.23064423 228.43128967]
[-37.74295425 259.10174561]
[-28.33530998 247.41859436]
[-18.92766571 235.73544312]
[-9.52001953 224.05227661]
[-13.58659458 209.74839783]
[-8.38920975 195.62567139]
[4.27562523 187.17254639]
[19.66737938 187.80505371]
[29.07502556 176.12188721]
[38.48266983 164.43873596]
[47.89031601 152.75556946]
[57.29796219 141.07241821]
[66.70560455 129.38925171]
[59.82988358 118.93691254]
[56.14225769 106.98163605]
[55.93539810 94.47226715]
[59.22572708 82.40160370]
[65.75210571 71.72763824]
[55.96331787 60.36191559]
[46.17453003 48.99619293]
[36.38574219 37.63047028]
[28.39914894 33.15959930]
[26.53096199 25.99494934]
[16.93143272 14.46893311]
[7.33190536 2.94291615]
[-2.26762295 -8.58310032]
[-17.90471840 -8.45962524]
[-29.92981720 -18.45617676]
[-32.66503143 -33.85268784]
[-24.81888008 -47.37940216]
[-10.09607506 -52.64941025]
[4.55172586 -47.17438507]
[12.20827866 -33.53945923]
[9.25839329 -18.18262863]
[18.85792160 -6.65661192]
[28.45745087 4.86940479]
[38.05697632 16.39542198]
[47.75146484 27.84168243]
[57.54025269 39.20740509]
[67.32904053 50.57312775]
[77.11782837 61.93885040]
[83.33204651 53.83384705]
[91.87864685 46.86111450]
[102.52102661 41.62553787]
[102.76903534 26.62758636]
[103.01704407 11.62963772]
[103.26505280 -3.36831188]
[103.51306152 -18.36626244]
[92.34529114 -29.54912758]
[92.43951416 -45.35313416]
[103.73983002 -56.40204620]
[119.54195404 -56.14073944]
[130.47077942 -44.72424316]
[130.04241943 -28.92576027]
[118.51100922 -18.11825180]
[118.26300049 -3.12030292]
[118.01499176 11.87764645]
[117.76698303 26.87559700]
[117.51897430 41.87354660]
[132.08992004 45.43548965]
[138.78906250 32.01454926]
[145.48818970 18.59360886]
[152.18731689 5.17266846]
[153.85137939 -11.69941616]
[170.52474976 -14.77104759]
[178.09199524 0.40041268]
[165.60826111 11.87180042]
[158.90913391 25.29273987]
[152.20999146 38.71368027]
[145.51086426 52.13462067]
[149.08047485 58.73067474]
[161.39384460 50.16442490]
[173.70722961 41.59817886]
[186.02061462 33.03192902]
[198.33399963 24.46568298]
[210.64738464 15.89943409]
[217.86282349 2.74886918]
[231.32701111 -3.86292863]
[246.14482117 -1.53214061]
[256.92901611 8.89384079]
[259.75885010 23.62449074]
[253.60546875 37.30426025]
[240.70606995 44.95965958]
[225.75047302 43.80749130]
[211.84431458 49.43054962]
[197.93815613 55.05360413]
[184.03199768 60.67666245]
[170.12583923 66.29972076]
[156.21968079 71.92278290]
[159.78929138 78.51882935]
[174.68891907 80.25109863]
[189.58856201 81.98337555]
[204.48820496 83.71564484]
[219.38784790 85.44791412]
[223.34538269 83.56435394]
[227.29760742 83.09653473]
[230.79698181 83.86700439]
[233.50061035 85.57037354]
[235.20300293 87.81893158]
[249.95556641 90.53213501]
[261.89212036 80.43000793]
[277.52969360 80.41568756]
[289.48471069 90.49593353]
[292.11239624 105.91116333]
[284.17202759 119.38277435]
[269.41278076 124.54988861]
[254.80355835 118.97274780]
[247.24237061 105.28471375]
[232.48979187 102.57150269]
[217.65557861 100.34754944]
[202.75593567 98.61528015]
[187.85629272 96.88301086]
[172.95664978 95.15074158]
[158.05702209 93.41847229]
[149.85536194 112.58569336]
[136.46563721 125.34762573]
[147.15956116 135.86618042]
[157.85348511 146.38473511]
[168.54740906 156.90328979]
[179.24134827 167.42182922]
[194.77342224 174.21821594]
[192.54235840 191.02471924]
[175.77503967 193.53335571]
[168.72279358 178.11576843]
[158.02886963 167.59721375]
[147.33493042 157.07865906]
[136.64100647 146.56010437]
[125.94708252 136.04154968]
[102.56863403 144.33561707]
[78.38876343 138.79690552]
[68.98111725 150.48005676]
[59.57347488 162.16322327]
[50.16582870 173.84637451]
[40.75818634 185.52954102]
[31.35054016 197.21269226]
[35.25153732 212.11532593]
[29.69434929 226.29174805]
[17.00523949 234.38189697]
[2.16313934 233.45991516]
[-7.24450636 245.14308167]
[-16.65215111 256.82623291]
[-26.05979729 268.50939941]
[-31.28062820 282.57150269]
[-31.77657890 297.56329346]
[-32.27252960 312.55511475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 189]
[4 188]
[5 187]
[8 21]
[9 20]
[10 19]
[24 43]
[25 42]
[26 41]
[27 40]
[28 39]
[29 38]
[30 37]
[45 186]
[46 185]
[47 184]
[48 183]
[52 179]
[53 178]
[54 177]
[55 176]
[56 175]
[57 174]
[62 85]
[63 84]
[64 83]
[65 82]
[67 81]
[68 80]
[69 79]
[70 78]
[88 103]
[89 102]
[90 101]
[91 100]
[92 99]
[104 114]
[105 113]
[106 112]
[107 111]
[134 158]
[135 157]
[136 156]
[137 155]
[138 154]
[143 153]
[144 152]
[160 172]
[161 171]
[162 170]
[163 169]
[164 168]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
