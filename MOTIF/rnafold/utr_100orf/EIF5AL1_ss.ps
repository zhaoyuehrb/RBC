%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGUCGAGUCAGUGCCGUUUGCGCCAGUUGGAAUCGAAGCCUCUUAAAAUGGCAGAUGAUUUGGACUUCGAGACAGGAGAUGCAGGGGCCUCAGCCACCUUCCCAAUGCAGUGCUCAGCAUUACGUAAGAAUGGCUUUGUGGUGCUCA\
) } def
/len { sequence length } bind def

/coor [
[92.96744537 105.45444489]
[78.02005005 106.70960999]
[63.07265854 107.96477509]
[48.12526703 109.21994781]
[33.17787170 110.47511292]
[18.23048019 111.73027802]
[3.29705095 113.14190674]
[-11.62077713 114.70983124]
[-26.53860664 116.27776337]
[-41.45643616 117.84568787]
[-56.37426376 119.41361237]
[-71.29209137 120.98154449]
[-85.89273071 132.15182495]
[-101.64153290 124.47378540]
[-116.52325439 126.35378265]
[-131.40498352 128.23377991]
[-146.28669739 130.11378479]
[-161.16841125 131.99377441]
[-176.05014038 133.87377930]
[-190.93185425 135.75376892]
[-205.81358337 137.63377380]
[-209.88146973 152.25320435]
[-219.21150208 164.16932678]
[-232.35737610 171.58547974]
[-247.30059814 173.39869690]
[-261.76028442 169.36358643]
[-273.54141235 160.12503052]
[-280.86788940 147.11534119]
[-295.74960327 148.99533081]
[-310.63131714 150.87533569]
[-317.98843384 164.53741455]
[-331.98541260 171.23550415]
[-347.24011230 168.39407349]
[-357.88677979 157.10568237]
[-359.83160400 141.71095276]
[-352.32669067 128.12950134]
[-338.25790405 121.58363342]
[-323.03491211 124.59039307]
[-312.51132202 135.99360657]
[-297.62960815 134.11361694]
[-282.74786377 132.23361206]
[-278.88696289 117.81062317]
[-269.77349854 105.93247223]
[-256.77157593 98.42815399]
[-241.84690857 96.46817780]
[-227.26969910 100.38209534]
[-215.26937866 109.60355377]
[-207.69357300 122.75205231]
[-192.81185913 120.87205505]
[-177.93013000 118.99205780]
[-163.04841614 117.11205292]
[-148.16670227 115.23205566]
[-133.28497314 113.35205841]
[-118.40325165 111.47206116]
[-103.52153778 109.59206390]
[-95.82695770 100.20463562]
[-83.39691162 98.55017090]
[-72.86001587 106.06371307]
[-57.94218826 104.49578857]
[-43.02436066 102.92785645]
[-28.10653305 101.35993195]
[-13.18870449 99.79200745]
[1.72912395 98.22407532]
[8.09468079 94.37149048]
[16.97531319 96.78289032]
[31.92270660 95.52771759]
[46.87009811 94.27255249]
[61.81748962 93.01738739]
[76.76488495 91.76221466]
[91.71228027 90.50704956]
[105.35082245 84.26284027]
[116.06790924 73.76789093]
[126.78499603 63.27293777]
[130.76237488 54.97468948]
[137.83815002 52.67335129]
[148.77267456 42.40514374]
[158.92581177 31.36368942]
[168.24302673 19.60828781]
[171.14900208 10.87697411]
[177.88053894 7.70695448]
[187.44189453 -3.85074425]
[188.32583618 -9.13005352]
[190.91993713 -13.11086845]
[194.42518616 -15.35393047]
[197.98474121 -15.80925751]
[208.25296021 -26.74378586]
[218.52116394 -37.67831421]
[228.67430115 -48.71977234]
[238.71125793 -59.86694336]
[248.74821472 -71.01411438]
[251.62667847 -87.15866852]
[267.13745117 -92.48293304]
[279.32440186 -81.50975800]
[275.65063477 -65.52741241]
[259.89538574 -60.97715759]
[249.85842896 -49.82998657]
[239.82147217 -38.68281174]
[237.66882324 -31.56039619]
[229.45568848 -27.41010857]
[219.18748474 -16.47558022]
[208.91928101 -5.54105043]
[198.99960327 5.71061563]
[189.43823242 17.26831436]
[179.99842834 28.92550278]
[170.68121338 40.68090439]
[185.62312317 39.36207581]
[198.01712036 47.81127167]
[202.24975586 62.20171356]
[196.40399170 76.01573181]
[183.12747192 82.99672699]
[168.43336487 79.98288727]
[158.97686768 68.33923340]
[159.04087830 53.33967590]
[148.10635376 63.60787964]
[137.27995300 73.99002838]
[126.56285858 84.48497772]
[115.84577179 94.97992706]
[115.37461090 109.97252655]
[125.41156769 121.11969757]
[135.44853210 132.26687622]
[145.48548889 143.41404724]
[155.52244568 154.56121826]
[165.55940247 165.70838928]
[175.59635925 176.85556030]
[185.63331604 188.00273132]
[195.67027283 199.14990234]
[203.79469299 203.47128296]
[205.79771423 210.63722229]
[215.59901428 221.99214172]
[225.40032959 233.34707642]
[241.23060608 235.95132446]
[248.93847656 250.02143860]
[242.61112976 264.76403809]
[227.10237122 268.86987305]
[214.30917358 259.18927002]
[214.04541016 243.14837646]
[204.24409485 231.79345703]
[194.44277954 220.43853760]
[184.52310181 209.18685913]
[174.48614502 198.03968811]
[164.44918823 186.89251709]
[154.41223145 175.74534607]
[144.37527466 164.59817505]
[134.33831787 153.45100403]
[124.30135345 142.30383301]
[114.26439667 131.15666199]
[104.22743225 120.00948334]
[98.74317169 117.51832581]
[94.94779205 113.77847290]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[3 68]
[4 67]
[5 66]
[6 65]
[7 63]
[8 62]
[9 61]
[10 60]
[11 59]
[12 58]
[14 55]
[15 54]
[16 53]
[17 52]
[18 51]
[19 50]
[20 49]
[21 48]
[28 41]
[29 40]
[30 39]
[71 117]
[72 116]
[73 115]
[75 114]
[76 113]
[77 105]
[78 104]
[80 103]
[81 102]
[85 101]
[86 100]
[87 99]
[88 97]
[89 96]
[90 95]
[118 147]
[119 146]
[120 145]
[121 144]
[122 143]
[123 142]
[124 141]
[125 140]
[126 139]
[128 138]
[129 137]
[130 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
