%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:45:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCUCUUUCCCUCGGAGCGGGCGGCGGCGUUGGCGGCUUGUGCAGCAAUGGCCAAGAUCAAGGCUCGAGAUCUUCGCGGGAAGAAGAAGGAGGAGCUGCUGAAACAGCUGGACGACCUGAAGGUGGAGCUGUCCCAGCUGCGCGUCG\
) } def
/len { sequence length } bind def

/coor [
[214.48822021 161.07447815]
[200.91581726 154.68778992]
[187.34341431 148.30110168]
[173.77101135 141.91441345]
[160.19859314 135.52772522]
[146.62619019 129.14103699]
[132.98765564 122.89682007]
[119.28446960 116.79576874]
[105.58128357 110.69472504]
[91.75334167 104.88198853]
[77.80669403 99.36012268]
[63.86004639 93.83824921]
[49.91339874 88.31638336]
[34.23403168 90.43016052]
[25.24880409 78.55097961]
[11.30215740 73.02911377]
[-2.64449024 67.50724030]
[-16.59113693 61.98537445]
[-30.53778458 56.46350479]
[-44.70343018 51.53050613]
[-59.06322479 47.19503021]
[-73.42301178 42.85955048]
[-87.78280640 38.52407455]
[-102.14260101 34.18859863]
[-114.49197388 43.39724350]
[-129.71777344 43.56647873]
[-141.97865295 34.84097290]
[-146.69413757 20.73769760]
[-161.05392456 16.40222168]
[-174.86074829 23.61396217]
[-189.36186218 19.01261139]
[-196.15206909 5.80546570]
[-210.51185608 1.46998882]
[-224.87165833 -2.86548805]
[-239.23144531 -7.20096493]
[-253.59124756 -11.53644180]
[-264.68682861 -3.83122945]
[-277.99993896 -3.94316745]
[-288.64776611 -11.60616207]
[-292.85479736 -23.82583237]
[-307.12063599 -28.46108818]
[-321.38647461 -33.09634399]
[-335.65234375 -37.73159790]
[-352.58465576 -36.87574768]
[-358.09442139 -52.90943527]
[-344.21258545 -62.64241791]
[-331.01708984 -51.99744415]
[-316.75122070 -47.36219025]
[-302.48538208 -42.72693634]
[-288.21954346 -38.09168243]
[-273.61038208 -46.36257172]
[-257.20761108 -41.44229126]
[-249.25576782 -25.89623451]
[-234.89596558 -21.56075668]
[-220.53617859 -17.22528076]
[-206.17639160 -12.88980389]
[-191.81658936 -8.55432701]
[-178.85215759 -15.79719639]
[-164.22753906 -11.60496616]
[-156.71844482 2.04242849]
[-142.35865784 6.37790537]
[-130.62640381 -2.75950861]
[-115.58542633 -3.24209428]
[-102.99719238 5.32469082]
[-97.80712128 19.82880592]
[-83.44733429 24.16428375]
[-69.08753967 28.49975967]
[-54.72774506 32.83523560]
[-40.36795425 37.17071533]
[-37.79644775 35.90460968]
[-34.55251694 35.61560059]
[-31.01886749 36.57120132]
[-27.66991997 38.89065552]
[-25.01591682 42.51685715]
[-11.06926918 48.03872681]
[2.87737799 53.56059647]
[16.82402611 59.08246231]
[30.77067184 64.60433197]
[45.45248032 62.09559250]
[55.43526459 74.36973572]
[69.38191223 79.89160156]
[83.32855988 85.41347504]
[97.27520752 90.93534088]
[102.50508881 89.97692108]
[107.88950348 92.05403900]
[111.68233490 96.99153900]
[125.38552094 103.09259033]
[139.08869934 109.19364166]
[148.26838684 109.83692169]
[153.01287842 115.56862640]
[166.58528137 121.95531464]
[180.15769958 128.34201050]
[193.73010254 134.72869873]
[207.30250549 141.11538696]
[220.87490845 147.50207520]
[244.31222534 143.05583191]
[257.48077393 162.08932495]
[271.74661255 166.72457886]
[287.26232910 163.63046265]
[296.97570801 174.92201233]
[311.24157715 179.55726624]
[325.50741577 184.19252014]
[339.77325439 188.82777405]
[353.72808838 181.90676880]
[368.12966919 186.81079102]
[374.64178467 200.15724182]
[388.90762329 204.79249573]
[403.17349243 209.42774963]
[417.43933105 214.06301880]
[431.70516968 218.69827271]
[445.97103882 223.33352661]
[454.05899048 216.20031738]
[464.31091309 213.12588501]
[474.82879639 214.60859680]
[483.69479370 220.30961609]
[489.32098389 229.12722778]
[490.73352051 239.40914917]
[504.68017578 244.93101501]
[518.62683105 250.45288086]
[534.76214600 247.52326965]
[545.15911865 260.20535278]
[539.12219238 275.45291138]
[522.86163330 277.58053589]
[513.10491943 264.39953613]
[499.15829468 258.87765503]
[485.21163940 253.35580444]
[468.03298950 262.42294312]
[449.40420532 255.93209839]
[441.33578491 237.59936523]
[427.06991577 232.96411133]
[412.80407715 228.32885742]
[398.53823853 223.69360352]
[384.27236938 219.05834961]
[370.00653076 214.42309570]
[356.89328003 221.39286804]
[342.35964966 216.89527893]
[335.13800049 203.09362793]
[320.87216187 198.45837402]
[306.60632324 193.82312012]
[292.34045410 189.18786621]
[277.84515381 192.61352539]
[267.11135864 180.99043274]
[252.84552002 176.35517883]
[247.97668457 180.92855835]
[241.87022400 183.76196289]
[235.13121033 184.53869629]
[228.43872070 183.14772034]
[222.47753906 179.69805908]
[217.86799622 174.51107788]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 95]
[2 94]
[3 93]
[4 92]
[5 91]
[6 90]
[7 88]
[8 87]
[9 86]
[10 83]
[11 82]
[12 81]
[13 80]
[15 78]
[16 77]
[17 76]
[18 75]
[19 74]
[20 69]
[21 68]
[22 67]
[23 66]
[24 65]
[28 61]
[29 60]
[32 57]
[33 56]
[34 55]
[35 54]
[36 53]
[40 50]
[41 49]
[42 48]
[43 47]
[97 143]
[98 142]
[100 140]
[101 139]
[102 138]
[103 137]
[106 134]
[107 133]
[108 132]
[109 131]
[110 130]
[111 129]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
