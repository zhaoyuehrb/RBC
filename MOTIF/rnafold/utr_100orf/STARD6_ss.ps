%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACUUCAAGGCAAUUGCCCAACAAACUGCCCAAGAAGUUUUAGGUUAUAAUCGAGAUACAUCAGGCUGGAAAGUGGUUAAAACUUCAAAAAAGAUAA\
) } def
/len { sequence length } bind def

/coor [
[74.95828247 133.48028564]
[80.85363770 119.68735504]
[91.21536255 108.84463501]
[76.36206818 110.93737030]
[61.50876999 113.03009796]
[46.65547180 115.12282562]
[31.80217171 117.21556091]
[16.94887352 119.30828857]
[2.09557390 121.40101624]
[-8.07962036 135.52575684]
[-24.97769165 137.96171570]
[-38.19800568 127.69708252]
[-52.97903824 130.25073242]
[-67.76007080 132.80439758]
[-82.54109955 135.35804749]
[-94.82259369 145.33178711]
[-108.68129730 139.87417603]
[-123.46232605 142.42782593]
[-130.19163513 156.40982056]
[-143.87010193 163.73643494]
[-159.23806763 161.59045410]
[-170.38623047 150.79702759]
[-173.02792358 135.50646973]
[-166.14732361 121.59830475]
[-152.39018250 114.42050171]
[-137.04640198 116.73307800]
[-126.01597595 127.64679718]
[-111.23494720 125.09313965]
[-100.01069641 115.30205536]
[-85.09474945 120.57701874]
[-70.31372070 118.02336121]
[-55.53269196 115.46971130]
[-40.75165939 112.91605377]
[-34.80208969 101.37116241]
[-23.08942986 95.31999207]
[-9.84347916 97.20294189]
[0.00284391 106.54772186]
[14.85614300 104.45498657]
[29.70944214 102.36225891]
[44.56274033 100.26953125]
[59.41603851 98.17679596]
[74.26934052 96.08406830]
[89.12263489 93.99134064]
[95.61242676 88.42584229]
[104.12810516 88.38249969]
[116.71240234 80.21943665]
[129.29669189 72.05637360]
[141.88098145 63.89331055]
[154.46527100 55.73025131]
[161.83230591 41.72890854]
[176.72055054 41.29390335]
[189.30484009 33.13084030]
[201.88912964 24.96777725]
[214.47341919 16.80471611]
[227.05772400 8.64165211]
[239.64201355 0.47858977]
[237.80015564 -14.63329220]
[242.68232727 -28.98778534]
[253.26943970 -39.75500870]
[267.42343140 -44.83690262]
[282.31881714 -43.27591324]
[295.00677490 -35.43491745]
[307.59106445 -43.59798050]
[310.63943481 -59.10549545]
[323.80682373 -67.84595490]
[339.28125000 -64.63380432]
[347.88198853 -51.37475586]
[344.50640869 -35.93516159]
[331.15716553 -27.47506523]
[315.75411987 -31.01368904]
[303.16983032 -22.85062599]
[305.15695190 -8.06831169]
[300.50973511 6.16940928]
[290.09899902 17.02194023]
[275.95098877 22.29966164]
[260.85317993 20.90558434]
[247.80506897 13.06288147]
[235.22077942 21.22594452]
[222.63648987 29.38900757]
[210.05220032 37.55207062]
[197.46791077 45.71513367]
[184.88360596 53.87819672]
[178.41670227 67.29566193]
[162.62834167 68.31454468]
[150.04405212 76.47760773]
[137.45976257 84.64067078]
[124.87546539 92.80372620]
[112.29116821 100.96678925]
[127.22677612 102.35520935]
[140.72352600 108.90025330]
[151.06217957 119.76821136]
[156.92575073 133.57467651]
[157.56732178 148.56094360]
[152.90518188 162.81803894]
[143.53318787 174.52981567]
[130.64518738 182.20442200]
[115.88288879 184.86422729]
[101.12676239 182.17042542]
[88.25646973 174.46615601]
[78.91148376 162.73281860]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 43]
[4 42]
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[12 33]
[13 32]
[14 31]
[15 30]
[17 28]
[18 27]
[45 88]
[46 87]
[47 86]
[48 85]
[49 84]
[51 82]
[52 81]
[53 80]
[54 79]
[55 78]
[56 77]
[62 71]
[63 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
