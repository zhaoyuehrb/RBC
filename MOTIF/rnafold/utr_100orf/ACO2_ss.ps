%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:04:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAUCUUUGUCAGUGCACAAAAUGGCGCCCUACAGCCUACUGGUGACUCGGCUGCAGAAAGCUCUGGGUGUGCGGCAGUACCAUGUGGCCUCAGUCCUGUGCCAACGGGCCAAGGUGGCGA\
) } def
/len { sequence length } bind def

/coor [
[-7.61938906 266.43389893]
[-11.20963383 267.01260376]
[-21.04569817 278.33743286]
[-30.88176537 289.66226196]
[-40.71783066 300.98709106]
[-44.03666306 309.62521362]
[-50.95261002 312.47140503]
[-61.07468796 323.54135132]
[-71.19676208 334.61126709]
[-81.31884003 345.68121338]
[-91.44091797 356.75115967]
[-90.48445129 372.52648926]
[-101.02536011 384.30209351]
[-116.80990601 385.09170532]
[-128.47340393 374.42687988]
[-129.09611511 358.63488770]
[-118.30857849 347.08477783]
[-102.51085663 346.62908936]
[-92.38877869 335.55914307]
[-82.26670074 324.48919678]
[-72.14462280 313.41925049]
[-62.02254868 302.34933472]
[-52.04266357 291.15103149]
[-42.20659637 279.82620239]
[-32.37052917 268.50137329]
[-22.53446579 257.17654419]
[-13.13938999 245.48326111]
[-4.19909286 233.43872070]
[4.74120426 221.39416504]
[13.68150139 209.34962463]
[22.46725655 197.19189453]
[31.09703636 184.92294312]
[26.11094666 170.91305542]
[30.38105202 156.48287964]
[42.47073364 147.22583008]
[57.87109375 146.85832214]
[66.50087738 134.58938599]
[75.13065338 122.32044220]
[83.76043701 110.05150604]
[81.37819672 95.75915527]
[89.71428680 83.90775299]
[103.97062683 81.31871796]
[112.60040283 69.04977417]
[121.23018646 56.78083420]
[129.85997009 44.51189423]
[137.85203552 31.81831551]
[145.18553162 18.73321724]
[152.51902771 5.64811754]
[159.85252380 -7.43698215]
[159.14241028 -25.78334808]
[174.45831299 -34.24765778]
[181.45524597 -47.51577759]
[188.45217896 -60.78389740]
[195.44909668 -74.05201721]
[202.44602966 -87.32013702]
[209.44296265 -100.58825684]
[216.43989563 -113.85637665]
[208.37754822 -126.85429382]
[207.90676880 -142.04228210]
[215.05390930 -155.33833313]
[227.81129456 -163.21900940]
[242.70011902 -163.65304565]
[249.69705200 -176.92115784]
[256.69396973 -190.18928528]
[263.52090454 -203.54566956]
[270.17669678 -216.98815918]
[276.83248901 -230.43063354]
[271.53942871 -245.32221985]
[278.40197754 -259.55883789]
[293.34869385 -264.69415283]
[307.51196289 -257.68145752]
[312.48895264 -242.68130493]
[305.32693481 -228.59297180]
[290.27496338 -223.77484131]
[283.61917114 -210.33236694]
[276.96337891 -196.88987732]
[276.81335449 -189.41267395]
[269.96209717 -183.19235229]
[262.96517944 -169.92424011]
[255.96823120 -156.65611267]
[264.01968384 -144.12455750]
[264.72216797 -129.14582825]
[257.78701782 -115.73797607]
[244.98783875 -107.54788971]
[229.70800781 -106.85944366]
[222.71107483 -93.59132385]
[215.71415710 -80.32320404]
[208.71722412 -67.05508423]
[201.72029114 -53.78696823]
[194.72335815 -40.51884842]
[187.72644043 -27.25073051]
[191.00166321 -15.53039074]
[185.18484497 -4.38528204]
[172.93762207 -0.10348533]
[165.60412598 12.98161411]
[158.27062988 26.06671333]
[150.93713379 39.15181351]
[151.65946960 41.97558212]
[151.23956299 45.27053070]
[149.48616028 48.57699966]
[146.38766479 51.37294006]
[142.12890625 53.14167404]
[133.49913025 65.41061401]
[124.86934662 77.67955780]
[116.23956299 89.94849396]
[118.62180328 104.24084473]
[110.28571320 116.09224701]
[96.02937317 118.68128204]
[87.39959717 130.95022583]
[78.76981354 143.21916199]
[70.14003754 155.48809814]
[74.99974823 170.10623169]
[70.37407684 184.61334229]
[58.23662567 193.50976562]
[43.36597824 193.55273438]
[34.73619843 205.82167053]
[32.31565475 214.75323486]
[25.72604752 218.28991699]
[16.78574944 230.33447266]
[7.84545326 242.37901306]
[-1.09484386 254.42355347]
[-1.70592535 259.84448242]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 26]
[3 25]
[4 24]
[5 23]
[7 22]
[8 21]
[9 20]
[10 19]
[11 18]
[27 121]
[28 120]
[29 119]
[30 118]
[31 116]
[32 115]
[36 111]
[37 110]
[38 109]
[39 108]
[42 105]
[43 104]
[44 103]
[45 102]
[46 97]
[47 96]
[48 95]
[49 94]
[51 91]
[52 90]
[53 89]
[54 88]
[55 87]
[56 86]
[57 85]
[62 80]
[63 79]
[64 78]
[65 76]
[66 75]
[67 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
