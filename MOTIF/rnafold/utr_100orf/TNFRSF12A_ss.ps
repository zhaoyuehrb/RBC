%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGCGGGGGCGGGGGCGGGGCGGCGGCCGUGGGUCCCUGCCGGCCGGCGGCGGGCGCAGACAGCGGCGGGCGCAGGACGUGCACUAUGGCUCGGGGCUCGCUGCGCCGGUUGCUGCGGCUCCUCGUGCUGGGGCUCUGGCUGGCGUUGCUGCGCUCCGUGGCCGGGGAGCAAGCGCCAGGCACCG\
) } def
/len { sequence length } bind def

/coor [
[80.12211609 199.79521179]
[87.55062866 186.41329956]
[100.35349274 178.02609253]
[98.84405518 163.10223389]
[97.33461761 148.17837524]
[95.82518005 133.25451660]
[90.29967499 132.08106995]
[85.04972076 129.99635315]
[80.22444153 127.05953979]
[68.88819885 136.88246155]
[57.55195236 146.70536804]
[46.21570969 156.52827454]
[34.87946320 166.35118103]
[23.54322052 176.17410278]
[12.20697784 185.99700928]
[0.87073386 195.81991577]
[-10.46550941 205.64283752]
[-11.08085155 224.56159973]
[-25.07502174 236.82914734]
[-43.27689362 235.02487183]
[-54.27675247 245.22306824]
[-65.27661133 255.42126465]
[-69.59699249 271.24105835]
[-85.52416229 275.14715576]
[-96.67359924 263.12124634]
[-91.57573700 247.53460693]
[-75.47480011 244.42140198]
[-64.47494507 234.22320557]
[-53.47508621 224.02500916]
[-55.52635956 212.77714539]
[-51.84617233 201.82557678]
[-43.24182129 193.93676758]
[-31.77941132 191.16238403]
[-20.28842163 194.30659485]
[-8.95217705 184.48367310]
[2.38406634 174.66076660]
[13.72031021 164.83786011]
[25.05655289 155.01493835]
[36.39279556 145.19203186]
[47.72904205 135.36912537]
[59.06528473 125.54621124]
[70.40152740 115.72329712]
[67.58715820 91.47359467]
[81.96961212 71.74761963]
[105.91819000 67.01111603]
[111.80363464 53.21395493]
[117.68907928 39.41679764]
[123.57452393 25.61964035]
[129.45996094 11.82248211]
[127.75778961 -3.90689111]
[139.86834717 -12.57774067]
[145.75378418 -26.37489700]
[151.63923645 -40.17205429]
[157.52467346 -53.96921158]
[163.29402161 -67.81532288]
[168.94685364 -81.70940399]
[174.59968567 -95.60348511]
[180.25251770 -109.49756622]
[185.90534973 -123.39164734]
[191.55818176 -137.28572083]
[191.89651489 -146.43527222]
[197.42443848 -151.36444092]
[203.30989075 -165.16160583]
[209.19532776 -178.95875549]
[215.08076477 -192.75592041]
[215.57276917 -201.89849854]
[221.18272400 -206.73410034]
[227.29911804 -220.43045044]
[225.86141968 -236.18618774]
[238.11593628 -244.65237427]
[244.23233032 -258.34872437]
[250.34872437 -272.04504395]
[250.99423218 -281.17807007]
[256.68463135 -285.91876221]
[263.03024292 -299.51040649]
[269.37585449 -313.10208130]
[275.72146606 -326.69372559]
[275.18170166 -331.04992676]
[275.98724365 -334.95309448]
[277.82720947 -338.03317261]
[280.30191040 -340.06057739]
[282.97689819 -340.96289062]
[290.22085571 -354.09774780]
[291.63037109 -363.14440918]
[297.69842529 -367.39096069]
[305.16204834 -380.40228271]
[302.54830933 -393.04678345]
[309.04931641 -403.73580933]
[320.70712280 -407.01278687]
[328.38824463 -419.89691162]
[336.06936646 -432.78100586]
[336.49020386 -448.59661865]
[349.65341187 -455.56652832]
[357.33453369 -468.45062256]
[365.01565552 -481.33474731]
[372.69677734 -494.21884155]
[380.37789917 -507.10296631]
[377.09924316 -517.50158691]
[380.03579712 -527.77349854]
[387.98175049 -534.58154297]
[398.14624023 -535.85333252]
[406.25585938 -548.47210693]
[414.36547852 -561.09094238]
[422.47506714 -573.70971680]
[430.58468628 -586.32855225]
[438.58801270 -599.01501465]
[446.48449707 -611.76824951]
[444.22589111 -627.65155029]
[455.34008789 -639.22106934]
[471.30120850 -637.60174561]
[479.86526489 -624.03576660]
[474.46261597 -608.92974854]
[459.23776245 -603.87176514]
[451.34127808 -591.11853027]
[450.49139404 -583.76104736]
[443.20349121 -578.21893311]
[435.09387207 -565.60009766]
[426.98428345 -552.98132324]
[418.87466431 -540.36248779]
[410.76504517 -527.74371338]
[411.28222656 -508.42654419]
[393.26202393 -499.42184448]
[385.58090210 -486.53771973]
[377.89978027 -473.65362549]
[370.21865845 -460.76950073]
[362.53750610 -447.88540649]
[362.66607666 -432.99133301]
[348.95349121 -425.09988403]
[341.27236938 -412.21578979]
[333.59124756 -399.33166504]
[334.30093384 -381.80593872]
[318.17337036 -372.93869019]
[310.70977783 -359.92736816]
[303.35571289 -346.85379028]
[296.11175537 -333.71893311]
[289.31314087 -320.34811401]
[282.96752930 -306.75643921]
[276.62188721 -293.16479492]
[270.27627563 -279.57315063]
[264.04504395 -265.92864990]
[257.92864990 -252.23231506]
[251.81227112 -238.53598022]
[253.68745422 -223.75988770]
[240.99545288 -214.31405640]
[234.87905884 -200.61770630]
[228.87792969 -186.87048340]
[222.99247742 -173.07331848]
[217.10704041 -159.27616882]
[211.22160339 -145.47900391]
[205.45225525 -131.63288879]
[199.79942322 -117.73881531]
[194.14659119 -103.84473419]
[188.49375916 -89.95065308]
[182.84092712 -76.05657196]
[177.18809509 -62.16249084]
[177.58042908 -54.76649094]
[171.32183838 -48.08377075]
[165.43638611 -34.28661346]
[159.55094910 -20.48945427]
[153.66551208 -6.69229698]
[155.78865051 8.05021095]
[143.25712585 17.70792580]
[137.37167358 31.50508308]
[131.48623657 45.30223846]
[125.60079193 59.09939957]
[119.71534729 72.89655304]
[125.65576172 78.43443298]
[130.08973694 85.23857880]
[132.75692749 92.90947723]
[133.50071716 100.99671173]
[132.27745056 109.02541351]
[129.15893555 116.52417755]
[124.32828522 123.05268860]
[118.06914520 128.22760010]
[110.74903870 131.74507141]
[112.25847626 146.66893005]
[113.76791382 161.59278870]
[115.27735138 176.51666260]
[129.50035095 182.17039490]
[139.45797729 193.79383850]
[142.86201477 208.71600342]
[138.93026733 223.50788879]
[128.56620789 234.77043152]
[114.15142059 239.91557312]
[98.99832153 237.76100159]
[86.58898163 228.80181885]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 178]
[4 177]
[5 176]
[6 175]
[9 42]
[10 41]
[11 40]
[12 39]
[13 38]
[14 37]
[15 36]
[16 35]
[17 34]
[20 29]
[21 28]
[22 27]
[45 166]
[46 165]
[47 164]
[48 163]
[49 162]
[51 160]
[52 159]
[53 158]
[54 157]
[55 155]
[56 154]
[57 153]
[58 152]
[59 151]
[60 150]
[62 149]
[63 148]
[64 147]
[65 146]
[67 145]
[68 144]
[70 142]
[71 141]
[72 140]
[74 139]
[75 138]
[76 137]
[77 136]
[82 135]
[83 134]
[85 133]
[86 132]
[89 130]
[90 129]
[91 128]
[93 126]
[94 125]
[95 124]
[96 123]
[97 122]
[101 120]
[102 119]
[103 118]
[104 117]
[105 116]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
