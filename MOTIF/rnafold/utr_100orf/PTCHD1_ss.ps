%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:54:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCUAGGAUGCUGCGGCAGGUUCUGCACAGGGGCUUGAGGACGUGUUUCUCCCGGCUCGGCCACUUCAUUGCCAGUCACCCUGUCUUCUUCGCCUCGGCGCCGGUGC\
) } def
/len { sequence length } bind def

/coor [
[67.34138489 519.68707275]
[67.34138489 504.68704224]
[59.60408401 491.95977783]
[67.34138489 478.15960693]
[67.34138489 463.15960693]
[64.14573669 456.36788940]
[67.56377411 447.72888184]
[67.99604034 432.73510742]
[64.99744415 425.85412598]
[68.66301727 417.31723022]
[69.52719879 402.34213257]
[70.39138031 387.36706543]
[71.25555420 372.39196777]
[72.11973572 357.41687012]
[65.12853241 344.26498413]
[73.64803314 330.93350220]
[74.51221466 315.95840454]
[75.37639618 300.98333740]
[76.02468872 285.99734497]
[76.45695496 271.00357056]
[76.88922882 256.00979614]
[66.71096802 250.85198975]
[59.21394730 242.18130493]
[55.54717255 231.26654053]
[56.29533005 219.72468567]
[61.38595581 209.28143311]
[70.09437561 201.51310730]
[81.14665222 197.60881042]
[82.87213898 182.70837402]
[84.59763336 167.80795288]
[86.32312012 152.90753174]
[88.04860687 138.00709534]
[89.77409363 123.10667419]
[82.01790619 117.75195312]
[76.76353455 109.92743683]
[74.74199677 100.72174072]
[76.23456573 91.41562653]
[81.03356171 83.30384064]
[73.22375488 70.49732208]
[65.41394043 57.69080734]
[57.60412598 44.88429260]
[49.79431152 32.07777786]
[34.60409546 26.91668510]
[29.30404091 11.77439499]
[37.95989609 -1.73322308]
[53.93162918 -3.24427962]
[64.96709442 8.40037823]
[62.60082626 24.26796532]
[70.41063690 37.07448196]
[78.22045135 49.88099670]
[86.03026581 62.68750763]
[93.84008026 75.49402618]
[99.13976288 74.74633789]
[104.47803497 75.13165283]
[109.61540985 76.63268280]
[119.18342590 65.08049774]
[128.75144958 53.52831268]
[138.31947327 41.97612762]
[141.45098877 33.22920227]
[148.33349609 30.23408699]
[158.23045349 18.96242905]
[168.12741089 7.69077349]
[163.77931213 -7.11117411]
[168.14593506 -21.90766907]
[179.83387756 -31.97720337]
[195.11357117 -34.10662460]
[209.10932922 -27.61644554]
[217.35513306 -14.57765388]
[217.21980286 0.84911585]
[208.74652100 13.74123859]
[194.63905334 19.98488617]
[179.39906311 17.58773041]
[169.50210571 28.85938644]
[159.60514832 40.13104248]
[149.87165833 51.54414749]
[140.30363464 63.09633636]
[130.73561096 74.64852142]
[121.16759491 86.20070648]
[123.23899841 109.92150879]
[104.67452240 124.83216095]
[102.94903564 139.73258972]
[101.22354889 154.63301086]
[99.49805450 169.53344727]
[97.77256775 184.43386841]
[96.04708099 199.33428955]
[110.62210846 211.48283386]
[115.07402802 229.77595520]
[107.82553864 246.99218750]
[91.88299561 256.44207764]
[91.45072937 271.43585205]
[91.01845551 286.42962646]
[93.93310547 295.25119019]
[90.35147858 301.84750366]
[89.48730469 316.82260132]
[88.62312317 331.79766846]
[95.55251312 346.02069092]
[87.09482574 358.28106689]
[86.23064423 373.25616455]
[85.36646271 388.23123169]
[84.50228119 403.20632935]
[83.63810730 418.18139648]
[82.98981476 433.16738892]
[82.55754089 448.16116333]
[82.34138489 463.15960693]
[82.34138489 478.15960693]
[90.07868958 491.95977783]
[82.34138489 504.68704224]
[82.34138489 519.68707275]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 108]
[2 107]
[4 105]
[5 104]
[7 103]
[8 102]
[10 101]
[11 100]
[12 99]
[13 98]
[14 97]
[16 95]
[17 94]
[18 93]
[19 91]
[20 90]
[21 89]
[28 85]
[29 84]
[30 83]
[31 82]
[32 81]
[33 80]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[55 78]
[56 77]
[57 76]
[58 75]
[60 74]
[61 73]
[62 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
