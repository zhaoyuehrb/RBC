%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:23:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGGGGCCCAGGGCAAAGACCAUCUCCUCCCUGUUCUUCCUCCUAUGGGUCCUGGCUGAGCCGGCUGAGAACUCGGACUUCUACCUGCCUGGGGAUUACC\
) } def
/len { sequence length } bind def

/coor [
[70.62212372 568.41162109]
[54.29293442 566.89849854]
[47.68548584 551.88940430]
[57.59695816 538.82434082]
[58.98098373 523.88836670]
[46.46232986 510.70809937]
[47.39321136 492.23904419]
[61.65052032 479.97384644]
[62.11244583 464.98095703]
[62.57437134 449.98806763]
[55.23267746 437.02856445]
[63.39128494 423.47320557]
[63.85321045 408.48031616]
[64.31513977 393.48742676]
[64.77706146 378.49456787]
[65.23899078 363.50167847]
[54.77017975 347.36798096]
[65.18763733 330.24627686]
[64.72570801 315.25338745]
[64.26378632 300.26049805]
[56.34636307 297.04415894]
[49.75958633 291.54589844]
[45.14355850 284.27282715]
[42.95511246 275.90582275]
[43.42265701 267.23568726]
[46.52254868 259.08856201]
[51.97932816 252.24700928]
[59.29010010 247.37503052]
[67.77082825 244.95355225]
[70.07170105 230.13107300]
[72.37257385 215.30859375]
[63.40075302 203.47465515]
[65.52301788 188.40977478]
[77.99636078 179.07954407]
[80.29724121 164.25706482]
[82.59811401 149.43457031]
[84.89898682 134.61209106]
[87.19986725 119.78961182]
[89.50074005 104.96713257]
[87.65741730 90.08081818]
[81.81062317 76.26724243]
[67.07094574 70.56484222]
[60.75712585 56.07652664]
[66.61504364 41.39796066]
[81.16929626 35.23767090]
[95.78511047 41.25045013]
[101.79118347 55.86902618]
[95.62420654 70.42044830]
[101.47099304 84.23403168]
[108.96299744 84.58040619]
[117.05490875 71.95024872]
[123.94699097 85.27316284]
[131.43898010 85.61953735]
[138.53538513 72.40435791]
[145.63179016 59.18917084]
[152.72819519 45.97398758]
[159.82460022 32.75880432]
[161.99108887 15.94385242]
[178.74865723 13.37083530]
[185.86007690 28.76122475]
[173.03977966 39.85520935]
[165.94337463 53.07039261]
[158.84696960 66.28557587]
[151.75057983 79.50075531]
[144.65417480 92.71594238]
[132.06036377 107.74149323]
[116.67355347 112.29948425]
[104.32321930 107.26800537]
[102.02234650 122.09048462]
[99.72147369 136.91296387]
[97.42059326 151.73544312]
[95.11972046 166.55793762]
[92.81884766 181.38041687]
[101.87673950 194.05291748]
[99.33217621 209.05224609]
[87.19506073 217.60946655]
[84.89418030 232.43194580]
[82.59330750 247.25442505]
[97.57778168 263.81951904]
[96.02114868 285.84036255]
[79.25666809 299.79855347]
[79.71859741 314.79144287]
[80.18052673 329.78433228]
[88.67811584 336.91903687]
[91.68814850 347.36798096]
[88.42407990 357.50765991]
[80.23187256 363.96359253]
[79.76995087 378.95648193]
[79.30802155 393.94937134]
[78.84609985 408.94226074]
[78.38417053 423.93515015]
[85.69282532 437.96704102]
[77.56725311 450.45001221]
[77.10533142 465.44290161]
[76.64340210 480.43576050]
[86.47284698 487.48379517]
[91.55243683 498.32711792]
[90.69323730 510.14910889]
[84.23238373 519.94201660]
[73.91699982 525.27239990]
[72.53297424 540.20837402]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 101]
[5 100]
[8 95]
[9 94]
[10 93]
[12 91]
[13 90]
[14 89]
[15 88]
[16 87]
[18 83]
[19 82]
[20 81]
[29 78]
[30 77]
[31 76]
[34 73]
[35 72]
[36 71]
[37 70]
[38 69]
[39 68]
[40 49]
[41 48]
[53 65]
[54 64]
[55 63]
[56 62]
[57 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
