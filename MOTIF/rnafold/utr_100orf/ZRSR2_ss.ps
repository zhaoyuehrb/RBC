%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:31:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCCUUUCCUGCCAGACCUGGAGGGGCGGGGCGGUGCCGGCAAGAUGGCUGCGCCCGAGAAGAUGACGUUUCCCGAGAAACCAAGCCACAAAAAGUACAGGGCCGCCCUGAAGAAGGAGAAACGAAAGAAACGUCGGCAGGAAC\
) } def
/len { sequence length } bind def

/coor [
[178.22409058 489.90814209]
[164.78048706 497.65725708]
[149.35313416 495.99102783]
[137.87416077 485.55010986]
[134.75747681 470.34924316]
[141.20149231 456.23352051]
[154.72836304 448.63067627]
[156.33908081 433.71740723]
[157.94981384 418.80413818]
[159.56053162 403.89086914]
[161.17124939 388.97760010]
[162.78196716 374.06433105]
[164.39268494 359.15106201]
[166.00340271 344.23779297]
[150.92523193 333.31423950]
[144.39718628 315.74285889]
[148.74359131 297.37979126]
[162.63949585 284.42785645]
[159.43667603 269.77377319]
[156.23387146 255.11970520]
[139.78860474 248.84254456]
[130.27352905 233.84790039]
[131.62066650 215.98347473]
[143.48199463 202.34945679]
[139.65170288 187.84672546]
[135.82139587 173.34400940]
[131.99110413 158.84129333]
[128.16079712 144.33857727]
[124.33049774 129.83586121]
[64.76306152 113.79871368]
[50.43856049 109.34801483]
[36.11405945 104.89732361]
[21.78955650 100.44663239]
[7.46505594 95.99594116]
[-6.39926147 103.09653473]
[-20.86294174 98.37884521]
[-27.54683304 85.11757660]
[-41.87133408 80.66688538]
[-56.19583511 76.21619415]
[-70.52033997 71.76550293]
[-84.38983917 79.34259796]
[-99.53114319 74.81309509]
[-106.96118164 60.86426163]
[-102.27185059 45.77169037]
[-88.24523926 38.48954010]
[-73.20308685 43.33818054]
[-66.06964111 57.44099808]
[-51.74514389 61.89169312]
[-37.42064285 66.34238434]
[-23.09613991 70.79307556]
[-10.07394505 63.65458679]
[4.51653767 67.96416473]
[11.91574860 81.67144012]
[26.24024963 86.12213135]
[40.56475067 90.57282257]
[54.88925171 95.02351379]
[69.21375275 99.47421265]
[75.48319244 95.35788727]
[65.04603577 84.58450317]
[54.60887909 73.81112671]
[41.94459152 65.77272797]
[38.85886765 51.09355164]
[47.21479034 38.63647842]
[61.96726990 35.92276382]
[74.20915985 44.59086990]
[76.54955292 59.40555191]
[82.28581238 73.26539612]
[88.02207947 87.12524414]
[94.29151917 83.00891876]
[95.90223694 68.09564972]
[97.51295471 53.18238449]
[99.12368011 38.26911545]
[100.73439789 23.35584641]
[93.61594391 8.58223152]
[103.07338715 -4.81511497]
[119.37770844 -3.05415249]
[125.75643158 12.05359173]
[115.64766693 24.96656609]
[114.03694916 39.87983322]
[112.42622375 54.79310226]
[110.81550598 69.70637512]
[109.20478821 84.61964417]
[115.68648529 88.39291382]
[128.70352173 80.93927765]
[128.64988708 95.93945312]
[135.13159180 99.71271515]
[147.30467224 90.94824982]
[159.47775269 82.18377686]
[156.33432007 67.28281403]
[159.52976990 52.39291382]
[168.51045227 40.09384537]
[181.72044373 32.51649857]
[196.87100220 30.97368813]
[211.33721924 35.73271942]
[222.61274719 45.96905899]
[228.74400330 59.90920258]
[228.66871643 75.13793182]
[222.39994812 89.01678467]
[211.02378845 99.14115143]
[196.51123047 103.75694275]
[181.37666321 102.06443024]
[168.24223328 94.35685730]
[156.06915283 103.12133026]
[143.89605713 111.88580322]
[138.83322144 126.00556183]
[142.66351318 140.50828552]
[146.49382019 155.01100159]
[150.32411194 169.51371765]
[154.15441895 184.01643372]
[157.98471069 198.51914978]
[170.21154785 201.49301147]
[179.93904114 209.36048889]
[185.34071350 220.56475830]
[185.43650818 232.93032837]
[180.26992798 244.08541870]
[170.88793945 251.91688538]
[174.09075928 266.57095337]
[177.29357910 281.22503662]
[190.92979431 284.60345459]
[201.84272766 293.33197021]
[208.06811523 305.75991821]
[208.51881409 319.57827759]
[203.17420959 332.24862671]
[213.19517517 343.41018677]
[223.21612549 354.57174683]
[238.83786011 353.86761475]
[251.22590637 363.41070557]
[254.53103638 378.69500732]
[247.19264221 392.50378418]
[232.67572021 398.31692505]
[217.83468628 393.38964844]
[209.67704773 380.04849243]
[212.05456543 364.59271240]
[202.03361511 353.43115234]
[192.01264954 342.26959229]
[186.62896729 344.56845093]
[180.91667175 345.84851074]
[179.30595398 360.76177979]
[177.69523621 375.67504883]
[176.08451843 390.58831787]
[174.47380066 405.50158691]
[172.86308289 420.41485596]
[171.25234985 435.32812500]
[169.64163208 450.24139404]
[181.23320007 460.55715942]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 144]
[8 143]
[9 142]
[10 141]
[11 140]
[12 139]
[13 138]
[14 137]
[18 118]
[19 117]
[20 116]
[24 110]
[25 109]
[26 108]
[27 107]
[28 106]
[29 105]
[30 57]
[31 56]
[32 55]
[33 54]
[34 53]
[37 50]
[38 49]
[39 48]
[40 47]
[69 82]
[70 81]
[71 80]
[72 79]
[73 78]
[86 104]
[87 103]
[88 102]
[123 135]
[124 134]
[125 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
