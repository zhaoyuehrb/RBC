%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:00:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGGAAGACUCACUCUACUUGGGAGGUGAGUGGCAGUUCAACCACUUUUCAAAACUCACAUCUUCUCGGCCCGAUGCAGCUUUUGCUGAAAUCCAGC\
) } def
/len { sequence length } bind def

/coor [
[87.60243225 131.18385315]
[94.92213440 118.08884430]
[85.44009399 129.71170044]
[75.95804596 141.33456421]
[66.47599792 152.95741272]
[56.99395370 164.58027649]
[47.69380951 176.34918213]
[38.57781982 188.26130676]
[36.99607468 204.58399963]
[21.95931625 211.12829590]
[8.93607044 201.16200256]
[11.32353592 184.93757629]
[26.66569328 179.14532471]
[35.78168488 167.23320007]
[37.37492752 159.87879944]
[45.37109375 155.09822083]
[54.85314178 143.47537231]
[64.33518982 131.85250854]
[73.81723785 120.22965240]
[83.29927826 108.60679626]
[86.53955078 93.96096039]
[82.84536743 79.42297363]
[71.94769287 67.95339203]
[76.31221771 53.71260071]
[72.61803436 39.17461395]
[68.92385101 24.63662910]
[65.22966766 10.09864426]
[61.53548050 -4.43934059]
[57.84129715 -18.97732544]
[54.14711380 -33.51531219]
[50.45293045 -48.05329514]
[44.12540436 -61.65338516]
[35.38428879 -73.84325409]
[26.64317322 -86.03311920]
[17.90205765 -98.22299194]
[9.16094208 -110.41285706]
[-6.35608625 -110.37472534]
[-18.91229057 -119.49181366]
[-23.67955208 -134.25842285]
[-18.82476425 -148.99649048]
[-6.21469069 -158.03892517]
[9.30183792 -157.90873718]
[21.75839996 -148.65597534]
[26.36519241 -133.83851624]
[21.35081100 -119.15397644]
[30.09192657 -106.96410370]
[38.83304214 -94.77423859]
[47.57415771 -82.58436584]
[56.31527328 -70.39450073]
[57.58406830 -85.34074402]
[65.05804443 -98.34611511]
[77.33304596 -106.96726990]
[92.10294342 -109.58454132]
[106.59288788 -105.70620728]
[118.08062744 -96.06090546]
[124.40792847 -82.46071625]
[124.38607788 -67.46073151]
[118.01918030 -53.87903214]
[106.50338745 -44.26723862]
[92.00220490 -40.43113708]
[77.23999023 -43.09142303]
[64.99091339 -51.74747849]
[68.68509674 -37.20949554]
[72.37928009 -22.67150879]
[76.07346344 -8.13352394]
[79.76764679 6.40446091]
[83.46183014 20.94244576]
[87.15601349 35.48043060]
[90.85019684 50.01841736]
[101.48364258 60.44814301]
[97.38334656 75.72879028]
[101.07752991 90.26677704]
[106.75865936 87.80912018]
[114.19121552 88.78880310]
[121.41046143 94.01312256]
[126.17784119 103.24417114]
[138.23030090 112.17379761]
[150.28274536 121.10343170]
[168.54544067 122.69124603]
[175.05870056 138.90478516]
[187.38302612 147.45527649]
[199.70736694 156.00575256]
[212.03170776 164.55624390]
[228.41040039 165.37496948]
[235.64889526 180.09013367]
[226.30085754 193.56404114]
[209.98272705 191.93588257]
[203.48121643 176.88058472]
[191.15687561 168.33009338]
[178.83255005 159.77960205]
[166.50820923 151.22912598]
[154.43864441 153.05763245]
[144.06784058 145.88330078]
[141.35311890 133.15588379]
[129.30065918 124.22625732]
[117.24820709 115.29662323]
[127.56670380 126.18370819]
[127.92094421 141.17951965]
[118.12803650 152.54170227]
[103.24407959 154.40391541]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 20]
[3 19]
[4 18]
[5 17]
[6 16]
[7 14]
[8 13]
[21 72]
[22 71]
[24 69]
[25 68]
[26 67]
[27 66]
[28 65]
[29 64]
[30 63]
[31 62]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[76 96]
[77 95]
[78 94]
[80 91]
[81 90]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
