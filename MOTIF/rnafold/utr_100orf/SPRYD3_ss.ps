%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:53:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCUAGGAGUGAAGGAAAGGCGGGGACCCGGAUGUGUGUGGUGGCGGCGGCCGAAGAGCUUGUGUGCGGAGCUGAGAGGCCUAUGGAUGAGGAGGACGCGGCGGCCCCGGUUUGUUCUCAUGAACAAGAUGGAUGACCUCAACCUGCACUACCGGUUUCUGAAUUGGCGCCGGCGGAUCCGGGAGA\
) } def
/len { sequence length } bind def

/coor [
[15.92035770 283.62124634]
[9.37985802 297.12020874]
[2.83935809 310.61917114]
[-3.70114183 324.11813354]
[7.22091484 334.58538818]
[14.37205601 347.91641235]
[17.05168533 362.80517578]
[14.99727821 377.79299927]
[8.41010761 391.41152954]
[-2.06448436 402.32656860]
[-15.40030384 409.46878052]
[-30.29084206 412.13842773]
[-45.27727890 410.07397461]
[-58.89139175 403.47766113]
[-69.79940796 392.99575806]
[-76.93267822 379.65518188]
[-79.59235382 364.76284790]
[-77.51786041 349.77780151]
[-70.91244507 336.16809082]
[-60.42323685 325.26712036]
[-47.07785797 318.14279175]
[-32.18375397 315.49310303]
[-17.20009995 317.57760620]
[-10.65959930 304.07867432]
[-4.11910009 290.57971191]
[2.42139983 277.08074951]
[-0.89175826 256.72018433]
[16.97835922 244.91670227]
[22.83419991 231.10696411]
[28.69003868 217.29721069]
[34.54587555 203.48745728]
[40.40171814 189.67771912]
[46.25755692 175.86796570]
[52.11339569 162.05821228]
[49.95864105 147.32029724]
[62.46942520 137.63572693]
[68.32526398 123.82598114]
[74.18109894 110.01622772]
[92.43667603 86.85240173]
[93.43856049 71.88590240]
[94.44045258 56.91939926]
[95.44234467 41.95289612]
[96.44422913 26.98639107]
[97.44612122 12.01988792]
[87.31951141 0.18394910]
[88.54876709 -14.97994137]
[99.89493561 -24.56117821]
[100.89682770 -39.52768326]
[85.05225372 -52.84642792]
[86.26226807 -76.89450836]
[74.18621826 -85.79220581]
[62.11016464 -94.68989563]
[50.03411484 -103.58759308]
[35.97904205 -97.55417633]
[20.89072800 -99.35406494]
[8.80946541 -108.40445709]
[2.91980219 -122.19458771]
[4.71140146 -136.98159790]
[-7.36464930 -145.87930298]
[-19.44070053 -154.77699280]
[-31.51675034 -163.67469788]
[-43.59280014 -172.57238770]
[-58.74721527 -168.71522522]
[-72.81299591 -175.54806519]
[-79.14871979 -189.84466553]
[-74.76284027 -204.85459900]
[-61.72624588 -213.49063110]
[-46.19441223 -211.67509460]
[-35.50099564 -200.26524353]
[-34.69510651 -184.64843750]
[-22.61905479 -175.75074768]
[-10.54300404 -166.85304260]
[1.53304684 -157.95535278]
[13.60909748 -149.05764771]
[27.20140457 -155.14984131]
[42.11735916 -153.61029053]
[54.34078979 -144.75285339]
[60.53017044 -130.87524414]
[58.93180847 -115.66364288]
[71.00785828 -106.76595306]
[83.08391571 -97.86825562]
[95.15996552 -88.97055817]
[85.01477051 -100.01931763]
[84.89750671 -115.01885986]
[94.86872101 -126.22488403]
[109.78023529 -127.85169983]
[121.93321991 -119.05937195]
[125.05305481 -104.38740540]
[117.52736664 -91.40968323]
[127.40184021 -102.70104218]
[137.27630615 -113.99240112]
[147.15078735 -125.28376007]
[157.02525330 -136.57511902]
[150.98228455 -149.17475891]
[150.07720947 -163.07035828]
[154.40429688 -176.25465393]
[163.30464172 -186.83676147]
[175.46620178 -193.31332397]
[189.11718750 -194.78199768]
[193.32130432 -209.18080139]
[188.90733337 -224.97474670]
[200.57012939 -236.50347900]
[216.31199646 -231.90721130]
[219.93905640 -215.91419983]
[207.72010803 -204.97668457]
[203.51599121 -190.57788086]
[206.34544373 -188.88502502]
[209.00856018 -186.94096375]
[220.62356567 -196.43261719]
[232.23857117 -205.92428589]
[238.02853394 -220.64796448]
[252.77967834 -222.71023560]
[264.39468384 -232.20190430]
[276.00970459 -241.69355774]
[287.62469482 -251.18521118]
[299.23971558 -260.67687988]
[310.85470581 -270.16854858]
[322.46972656 -279.66018677]
[327.76919556 -295.17944336]
[343.90914917 -298.08370972]
[354.28613281 -285.38528442]
[348.22525024 -270.14724731]
[331.96139526 -268.04519653]
[320.34637451 -258.55352783]
[308.73135376 -249.06187439]
[297.11636353 -239.57020569]
[285.50134277 -230.07855225]
[273.88635254 -220.58689880]
[262.27133179 -211.09523010]
[257.31216431 -197.05044556]
[241.73023987 -194.30926514]
[230.11521912 -184.81761169]
[218.50021362 -175.32595825]
[222.63771057 -157.48521423]
[217.48097229 -139.83058167]
[204.27940369 -126.91253662]
[186.36611938 -122.09969330]
[168.31661987 -126.70064545]
[158.44213867 -115.40928650]
[148.56767273 -104.11792755]
[138.69319153 -92.82656860]
[128.81872559 -81.53520966]
[134.64517212 -53.88248825]
[115.86332703 -38.52579117]
[114.86144257 -23.55928993]
[124.82931519 -12.55124474]
[124.02645874 2.64119029]
[112.41262817 13.02177811]
[111.41073608 27.98828125]
[110.40884399 42.95478439]
[109.40695953 57.92128754]
[108.40506744 72.88778687]
[107.40317535 87.85429382]
[112.91105652 101.80647278]
[123.86615753 112.05272675]
[134.82125854 122.29898834]
[145.77635193 132.54524231]
[161.14039612 136.32106018]
[165.15040588 150.66572571]
[176.10549927 160.91197205]
[191.89060974 160.13345337]
[203.54660034 170.80647278]
[204.15818787 186.59892273]
[193.36253357 198.14141846]
[177.56449890 198.58601379]
[166.13677979 187.66893005]
[165.85923767 171.86708069]
[154.90414429 161.62081909]
[140.32368469 158.57788086]
[135.53009033 143.50035095]
[124.57499695 133.25408936]
[113.61989594 123.00782776]
[102.66480255 112.76156616]
[87.99085236 115.87207031]
[82.13500977 129.68182373]
[76.27917480 143.49156189]
[78.01507568 159.21725464]
[65.92314148 167.91406250]
[60.06730270 181.72380066]
[54.21146393 195.53355408]
[48.35562515 209.34330750]
[42.49978638 223.15304565]
[36.64394760 236.96279907]
[30.78810883 250.77255249]
[35.47256470 258.99639893]
[35.83036041 268.31622314]
[31.90771675 276.62579346]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[3 24]
[4 23]
[28 184]
[29 183]
[30 182]
[31 181]
[32 180]
[33 179]
[34 178]
[36 176]
[37 175]
[38 174]
[39 153]
[40 152]
[41 151]
[42 150]
[43 149]
[44 148]
[47 145]
[48 144]
[50 82]
[51 81]
[52 80]
[53 79]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
[89 142]
[90 141]
[91 140]
[92 139]
[93 138]
[99 106]
[100 105]
[108 133]
[109 132]
[110 131]
[112 129]
[113 128]
[114 127]
[115 126]
[116 125]
[117 124]
[118 123]
[154 173]
[155 172]
[156 171]
[157 170]
[159 168]
[160 167]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
