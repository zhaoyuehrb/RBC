%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:27:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUUACCAUAUCAGAUUCACAUUCAGUCCUCAGCAAAAUGAAGGGCUCCAUUUUCACUCUGUUUUUAUUCUCUGUCCUAUUUGCCAUCUCAGAAGUGCGGAGCAAGGAGUCUGUGAGACUCUGUGGGCUAGAAUACA\
) } def
/len { sequence length } bind def

/coor [
[84.24739838 264.54211426]
[77.98736572 250.77014160]
[76.29151154 235.73753357]
[79.32597351 220.91703796]
[86.79346466 207.76060486]
[97.96240997 197.55717468]
[111.73857117 191.30636597]
[110.04707336 176.40205383]
[108.35557556 161.49772644]
[106.66407776 146.59339905]
[81.84545135 141.67588806]
[63.98591614 125.01487732]
[57.82189941 102.28808594]
[42.93764496 100.42827606]
[28.05338669 98.56845856]
[13.16913128 96.70864105]
[6.97665167 111.12284851]
[-3.00445485 123.20752716]
[-15.96500397 131.99572754]
[-30.85783768 136.78721619]
[-46.48243332 137.20428467]
[-61.58168030 133.22154236]
[-74.94300842 125.16719818]
[-85.49578094 113.69616699]
[-92.39709473 99.73670197]
[-95.09905243 84.41537476]
[-110.02153778 82.89241028]
[-124.94402313 81.36944580]
[-139.86651611 79.84648132]
[-154.78900146 78.32351685]
[-169.71148682 76.80055237]
[-184.65022278 75.44631195]
[-199.60331726 74.26097870]
[-211.46261597 84.70763397]
[-227.22979736 83.62538147]
[-237.55049133 71.65630341]
[-236.30160522 55.90143585]
[-224.22407532 45.70786667]
[-208.48329163 47.12326050]
[-198.41798401 59.30788422]
[-183.46488953 60.49322128]
[-176.48966980 57.86389542]
[-168.18852234 61.87806320]
[-153.26603699 63.40102768]
[-138.34355164 64.92399597]
[-123.42105865 66.44696045]
[-108.49857330 67.96992493]
[-93.57608795 69.49288940]
[-88.41639709 56.07622910]
[-79.94097900 44.45099258]
[-68.72679901 35.41931152]
[-55.54007721 29.60639954]
[-41.28392029 27.41726685]
[-26.93647003 29.00850677]
[-13.48379612 34.27711868]
[-1.85212314 42.86714172]
[7.15594053 54.19370651]
[12.91678047 67.48284149]
[15.02894688 81.82438660]
[29.91320419 83.68420410]
[44.79745865 85.54401398]
[59.68171692 87.40383148]
[63.17148590 79.31454468]
[68.26332092 72.12509155]
[74.73571777 66.14820862]
[82.30712891 61.64390945]
[90.64819336 58.80811691]
[99.39606476 57.76420212]
[108.17021179 58.55756760]
[116.58894348 61.15370941]
[124.28604889 65.43968964]
[134.95240784 54.89318466]
[145.61877441 44.34668350]
[156.28514099 33.80018234]
[166.95150757 23.25367928]
[177.61785889 12.70717716]
[181.99095154 -2.49764919]
[196.48129272 -5.94427204]
[207.14764404 -16.49077415]
[211.09465027 -24.82407379]
[218.17625427 -27.15168762]
[229.07824707 -37.45444107]
[239.98022461 -47.75719833]
[250.88221741 -58.05995178]
[251.07806396 -73.86302948]
[262.44918823 -84.83904266]
[278.24932861 -84.47612000]
[289.10449219 -72.98958588]
[288.57455444 -57.19417953]
[276.97387695 -46.46105194]
[261.18496704 -47.15796661]
[250.28298950 -36.85521317]
[239.38099670 -26.55245781]
[228.47901917 -16.24970436]
[217.69415283 -5.82441044]
[207.02778625 4.72209120]
[203.41763306 19.17256165]
[188.16436768 23.37354088]
[177.49800110 33.92004013]
[166.83163452 44.46654510]
[156.16528320 55.01304626]
[145.49891663 65.55954742]
[134.83255005 76.10604858]
[141.21141052 86.24285126]
[144.61231995 98.07468414]
[144.59025574 110.71971893]
[140.96289062 123.18182373]
[154.22650146 130.18728638]
[167.49012756 137.19274902]
[180.75373840 144.19819641]
[194.01734924 151.20365906]
[207.28097534 158.20912170]
[220.54458618 165.21458435]
[237.37402344 167.26553345]
[240.06208801 184.00502014]
[224.72091675 191.22198486]
[213.53912354 178.47819519]
[200.27551270 171.47274780]
[187.01190186 164.46728516]
[173.74827576 157.46182251]
[160.48466492 150.45635986]
[147.22103882 143.45089722]
[133.95742798 136.44543457]
[121.56839752 144.90190125]
[123.25989532 159.80622864]
[124.95139313 174.71055603]
[126.64289093 189.61486816]
[141.46946716 192.61953735]
[154.64088440 200.06057739]
[164.86674500 211.20896912]
[171.14521790 224.97254944]
[172.86122131 240.00286865]
[169.84661865 254.82742310]
[162.39677429 267.99383545]
[151.24151611 278.21224976]
[137.47373962 284.48150635]
[122.44226837 286.18740845]
[107.61974335 283.16290283]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 127]
[8 126]
[9 125]
[10 124]
[13 62]
[14 61]
[15 60]
[16 59]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[32 41]
[33 40]
[71 103]
[72 102]
[73 101]
[74 100]
[75 99]
[76 98]
[78 96]
[79 95]
[81 94]
[82 93]
[83 92]
[84 91]
[107 123]
[108 122]
[109 121]
[110 120]
[111 119]
[112 118]
[113 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
