%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:30:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGGGGGCUUCUCGGCACCCGACUGGGACGCCCCGGCAGCUCCUUGUGGCGCUCGCCUGCCUGCUCUUGAGUCGCCCCGCGCUGCAGGGACGGGCAU\
) } def
/len { sequence length } bind def

/coor [
[121.87921906 150.61874390]
[110.04618073 159.83715820]
[95.09683228 161.06880188]
[81.91461945 153.91134644]
[74.80573273 140.70286560]
[76.09239960 125.75815582]
[85.35301971 113.96004486]
[70.65856171 116.97215271]
[55.96409988 119.98426056]
[41.26963806 122.99636841]
[26.57517433 126.00847626]
[14.60980511 136.35934448]
[0.58807325 131.33537292]
[-14.10638905 134.34747314]
[-28.80085182 137.35958862]
[-43.49531174 140.37168884]
[-58.18977356 143.38378906]
[-72.88423920 146.39590454]
[-80.16602325 160.23460388]
[-94.65903473 166.10713196]
[-109.52011108 161.24067688]
[-117.73230743 147.93301392]
[-115.41807556 132.46763611]
[-103.67012787 122.14678955]
[-88.03548431 121.84368896]
[-75.89634705 131.70144653]
[-61.20188141 128.68933105]
[-46.50741959 125.67723083]
[-31.81295776 122.66512299]
[-17.11849403 119.65301514]
[-2.42403293 116.64090729]
[8.49029064 106.50548553]
[23.56306839 111.31401062]
[38.25753021 108.30190277]
[52.95199203 105.28979492]
[67.64645386 102.27769470]
[82.34091949 99.26558685]
[91.27055359 87.21313477]
[89.87286377 72.27838898]
[88.47517395 57.34365082]
[86.84539032 42.43245316]
[84.98390961 27.54840660]
[83.12242889 12.66435814]
[73.73235321 -0.06894799]
[79.83040619 -13.65802574]
[77.96892548 -28.54207420]
[67.64426422 -41.28308868]
[73.76782227 -56.49604797]
[90.04019928 -58.53116226]
[99.72177887 -45.29487991]
[92.85297394 -30.40355492]
[94.71445465 -15.51950741]
[103.97138214 -3.85080791]
[98.00647736 10.80287647]
[99.86795807 25.68692398]
[101.72943878 40.57097244]
[105.75386047 46.92939377]
[103.40991211 55.94596100]
[104.80760193 70.88069916]
[106.20529175 85.81544495]
[115.86694336 97.28942871]
[130.34571838 101.20925903]
[144.82449341 105.12908936]
[159.30326843 109.04891968]
[173.78204346 112.96875000]
[188.26081848 116.88857269]
[202.79881287 120.58275604]
[217.39248657 124.05040741]
[231.98616028 127.51805115]
[246.57984924 130.98568726]
[259.92996216 122.95996857]
[274.68063354 126.68454742]
[282.24966431 139.46130371]
[296.84332275 142.92893982]
[306.09872437 141.86585999]
[311.83349609 146.73802185]
[326.31228638 150.65785217]
[340.79104614 154.57768250]
[357.65985107 152.88055420]
[363.96038818 168.62030029]
[350.57992554 179.03181458]
[336.87121582 169.05645752]
[322.39245605 165.13662720]
[307.91366577 161.21679688]
[293.37567139 157.52261353]
[278.78201294 154.05497742]
[266.27465820 162.06132507]
[251.42518616 158.75253296]
[243.11219788 145.57937622]
[228.51852417 142.11172485]
[213.92483521 138.64408875]
[199.33116150 135.17643738]
[191.96615601 136.71987915]
[184.34098816 131.36735535]
[169.86221313 127.44752502]
[155.38343811 123.52769470]
[140.90466309 119.60786438]
[126.42589569 115.68803406]
[111.94712067 111.76820374]
[123.01523590 121.89227295]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 37]
[8 36]
[9 35]
[10 34]
[11 33]
[13 31]
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[38 60]
[39 59]
[40 58]
[41 56]
[42 55]
[43 54]
[45 52]
[46 51]
[61 99]
[62 98]
[63 97]
[64 96]
[65 95]
[66 94]
[67 92]
[68 91]
[69 90]
[70 89]
[73 86]
[74 85]
[76 84]
[77 83]
[78 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
