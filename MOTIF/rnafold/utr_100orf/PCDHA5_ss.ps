%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUAUAUUCCCGGAGAGGAAGUCUGGGAUCCCGGCUCCUGCUGCUCUGGCUUCUCCUUGCCUACUGGAAGGCAGGGAGCGGCCAGCUCCACUACUCGA\
) } def
/len { sequence length } bind def

/coor [
[96.61431122 181.17559814]
[107.99658203 170.86349487]
[104.75631714 156.21765137]
[101.51604462 141.57180786]
[93.91612244 141.15216064]
[86.51987457 139.35479736]
[79.57492065 136.23989868]
[73.31376648 131.91172791]
[67.94602966 126.51522064]
[63.65140915 120.23101044]
[49.44433594 125.04339600]
[35.23726273 129.85578918]
[21.03018761 134.66816711]
[6.82311392 139.48056030]
[-7.38395929 144.29293823]
[-21.59103203 149.10533142]
[-27.09916496 163.74072266]
[-40.75136566 171.36642456]
[-56.10148621 168.38182068]
[-65.90166473 156.19615173]
[-65.52456665 140.56312561]
[-55.14823151 128.86416626]
[-39.67205811 126.62316132]
[-26.40341949 134.89825439]
[-12.19634628 130.08587646]
[2.01072741 125.27348328]
[16.21780014 120.46109772]
[30.42487526 115.64871216]
[44.63194656 110.83632660]
[58.83901978 106.02394104]
[58.49475861 97.20195770]
[60.01998138 88.50600433]
[63.34598160 80.32775879]
[68.32295990 73.03559875]
[58.84091187 61.41273880]
[49.35886383 49.78988266]
[39.87681961 38.16702652]
[24.36194420 32.85471344]
[21.47105598 16.71238136]
[34.17805099 6.34588385]
[49.41106415 12.41938114]
[51.49967575 28.68498039]
[60.98171997 40.30783844]
[70.46376801 51.93069458]
[79.94581604 63.55355072]
[98.20115662 58.43946457]
[116.83010101 61.95710373]
[131.96359253 73.37589264]
[145.03103638 66.01098633]
[158.09848022 58.64607239]
[171.16592407 51.28116226]
[184.23336792 43.91624832]
[197.30081177 36.55133820]
[205.52403259 23.03508759]
[220.41053772 23.52651978]
[233.47798157 16.16160965]
[246.54542542 8.79669762]
[259.61285400 1.43178689]
[272.68029785 -5.93312454]
[285.74774170 -13.29803562]
[298.81518555 -20.66294670]
[311.88262939 -28.02785873]
[324.95007324 -35.39276886]
[338.01751709 -42.75767899]
[342.02407837 -58.04568100]
[355.70938110 -65.95062256]
[370.95416260 -61.78264618]
[378.71398926 -48.01453781]
[374.38507080 -32.81467056]
[360.53567505 -25.20085526]
[345.38244629 -29.69023705]
[332.31500244 -22.32532501]
[319.24755859 -14.96041393]
[306.18011475 -7.59550333]
[293.11267090 -0.23059195]
[280.04522705 7.13431931]
[266.97778320 14.49923038]
[253.91032410 21.86414146]
[240.84288025 29.22905350]
[227.77543640 36.59396362]
[220.48689270 49.58342743]
[204.66572571 49.61878204]
[191.59828186 56.98369217]
[178.53083801 64.34860229]
[165.46339417 71.71351624]
[152.39595032 79.07843018]
[139.32850647 86.44333649]
[141.00473022 107.00896454]
[132.59266663 125.85018921]
[116.16188812 138.33154297]
[119.40215302 152.97738647]
[122.64242554 167.62322998]
[137.31242371 172.17149353]
[147.73109436 183.45628357]
[151.09588623 198.44207764]
[146.50166321 213.09774780]
[135.18426514 223.48100281]
[120.18800354 226.79879761]
[105.54680634 222.15866089]
[95.19907379 210.80876160]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 92]
[3 91]
[4 90]
[10 30]
[11 29]
[12 28]
[13 27]
[14 26]
[15 25]
[16 24]
[34 45]
[35 44]
[36 43]
[37 42]
[48 87]
[49 86]
[50 85]
[51 84]
[52 83]
[53 82]
[55 80]
[56 79]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
[62 73]
[63 72]
[64 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
