%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:57:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGUCUCCCAGACAGUGGCUCAGCCUUCAGGACUCUCUUCCAGCAUGGCCGAAGACACCUAUUCACACAAGAUGGUAAAAACAAAUCAUAGGCGCUGUCGCACAAAAUUCACAGAAGAACAGUUGAAAAUCCUCAUCAAUACCU\
) } def
/len { sequence length } bind def

/coor [
[111.48686218 128.03326416]
[109.87614441 113.11999512]
[102.41950989 113.92535400]
[96.75389099 127.81422424]
[91.08827209 141.70309448]
[85.42265320 155.59196472]
[79.75703430 169.48083496]
[79.37291718 186.43043518]
[62.97938919 190.75344849]
[54.28713608 176.19731140]
[65.86815643 163.81521606]
[71.53378296 149.92634583]
[77.19940186 136.03747559]
[82.86502075 122.14860535]
[88.53063965 108.25973511]
[86.91991425 93.34646606]
[78.41938782 80.98761749]
[69.91886139 68.62877655]
[61.41833878 56.26992798]
[52.91781235 43.91108322]
[37.52215576 43.38195419]
[25.53030586 33.99851608]
[21.41189957 19.52430916]
[26.54476547 5.56752920]
[18.04423904 -6.79131603]
[9.54371357 -19.15016174]
[1.04318714 -31.50900650]
[-8.85339355 -26.23340797]
[-22.17521858 -26.64124107]
[-35.56972885 -34.45492554]
[-49.45859909 -40.12054443]
[-63.34747314 -45.78616333]
[-73.27609253 -39.09160614]
[-85.08604431 -38.06587601]
[-95.80039978 -42.85035706]
[-102.77511597 -52.13650894]
[-104.35131073 -63.52133179]
[-117.98357391 -69.77923584]
[-131.61584473 -76.03713989]
[-145.24810791 -82.29504395]
[-158.88037109 -88.55294800]
[-171.27134705 -84.80475616]
[-182.52095032 -90.35363770]
[-186.80392456 -101.71504974]
[-200.29838562 -108.26481628]
[-217.18789673 -109.74151611]
[-220.44439697 -126.37977600]
[-205.35784912 -134.11492920]
[-193.74862671 -121.75927734]
[-180.25415039 -115.20951080]
[-162.87846375 -117.43845367]
[-152.62246704 -102.18521118]
[-138.99020386 -95.92730713]
[-125.35793304 -89.66940308]
[-111.72566986 -83.41149902]
[-98.09340668 -77.15359497]
[-81.41119385 -84.56255341]
[-64.28986359 -77.36969757]
[-57.68185043 -59.67503738]
[-43.79298019 -54.00941849]
[-29.90410805 -48.34379959]
[-23.02223206 -51.32537079]
[-32.49462128 -62.95609665]
[-46.07543564 -69.32488251]
[-52.95933533 -82.65199280]
[-50.29280472 -97.41307831]
[-39.18117523 -107.48937225]
[-24.23043633 -108.70404053]
[-11.63797188 -100.55358887]
[-6.62361240 -86.41654205]
[-11.26541233 -72.15364838]
[-9.25847721 -57.28850937]
[-2.37660003 -60.27008057]
[2.98887348 -74.27764130]
[8.35434723 -88.28520203]
[13.71982098 -102.29275513]
[19.08529472 -116.30031586]
[10.51218891 -129.23405457]
[11.21229267 -144.73532104]
[20.91640282 -156.84358215]
[35.89308929 -160.90295410]
[50.38351440 -155.35252380]
[58.81580734 -142.32653809]
[57.94758606 -126.83377838]
[48.11269379 -114.83150482]
[33.09285355 -110.93484497]
[27.72737885 -96.92728424]
[22.36190605 -82.91972351]
[16.99643135 -68.91217041]
[11.63095856 -54.90460968]
[13.40203190 -40.00953293]
[21.90255928 -27.65068817]
[30.40308571 -15.29184246]
[38.90361023 -2.93299723]
[53.77298737 -2.73394322]
[65.81639862 6.28937674]
[70.28953552 20.84425163]
[65.27665710 35.41055679]
[73.77718353 47.76940155]
[82.27770996 60.12824631]
[90.77823639 72.48709106]
[99.27876282 84.84593964]
[97.74399567 69.92465973]
[94.82654572 55.21111298]
[95.79239655 40.24224091]
[100.57653046 26.02563095]
[108.85693359 13.51823425]
[120.07621765 3.56194925]
[133.47920227 -3.17304397]
[148.16369629 -6.23339891]
[163.14125061 -5.41311646]
[177.40368652 -0.76741165]
[189.99099731 7.39100361]
[200.05587769 18.51296806]
[206.92085266 31.84983826]
[210.12382507 46.50388336]
[209.44918823 61.48870468]
[204.94235229 75.79563904]
[196.90669250 88.46166992]
[185.88310242 98.63420105]
[172.61360168 105.62850952]
[157.98994446 108.97392273]
[144.60488892 102.20338440]
[153.10542297 114.56223297]
[161.60594177 126.92107391]
[170.10647583 139.27992249]
[178.60699463 151.63876343]
[194.02323914 151.05322266]
[207.29714966 158.91496277]
[214.19306946 172.71531677]
[212.51052856 188.05065918]
[202.78643799 200.02752686]
[188.12368774 204.82414246]
[173.20114136 200.90994263]
[162.78051758 189.53390503]
[160.18698120 174.32611084]
[166.24815369 160.13929749]
[157.74761963 147.78044128]
[149.24710083 135.42160034]
[140.74656677 123.06275940]
[132.24604797 110.70391083]
[124.78941345 111.50926971]
[126.40013123 126.42253876]
[132.54029846 140.10823059]
[121.42172241 150.17686462]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 15]
[4 14]
[5 13]
[6 12]
[7 11]
[16 102]
[17 101]
[18 100]
[19 99]
[20 98]
[24 94]
[25 93]
[26 92]
[27 91]
[30 61]
[31 60]
[32 59]
[37 56]
[38 55]
[39 54]
[40 53]
[41 52]
[44 50]
[45 49]
[73 90]
[74 89]
[75 88]
[76 87]
[77 86]
[123 141]
[124 140]
[125 139]
[126 138]
[127 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
