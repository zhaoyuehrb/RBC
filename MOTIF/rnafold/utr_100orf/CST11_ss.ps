%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:24:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAACACUCUUCCUGUUCCUCUGCAGCUGAAGGAUGAUGGCUGAGCCCUGGCAGGCCCUACAGCUCCUGUUGGCCAUUCUAUUGACUCUGAUGGCCCUCCCCUACCAAGCAAGGAAGAAAACCUUUCUAAGCG\
) } def
/len { sequence length } bind def

/coor [
[152.42951965 139.74256897]
[141.76139832 129.19786072]
[131.09326172 118.65313721]
[114.55459595 131.39965820]
[94.67260742 132.52513123]
[78.45951843 122.72026825]
[65.83213806 130.81652832]
[58.39102554 144.77864075]
[43.50067902 145.13473511]
[30.87330437 153.23100281]
[18.24592972 161.32725525]
[5.61855555 169.42352295]
[-7.00881863 177.51977539]
[-19.44438171 185.90766907]
[-31.68140030 194.58265686]
[-43.91841888 203.25764465]
[-56.15543747 211.93261719]
[-58.56182098 227.55264282]
[-71.35762787 236.82856750]
[-86.95132446 234.25718689]
[-96.09145355 221.36402893]
[-93.35533905 205.79838562]
[-80.36627197 196.79507446]
[-64.83042145 199.69560242]
[-52.59340668 191.02061462]
[-40.35638809 182.34564209]
[-28.11936760 173.67065430]
[-26.44126320 169.11004639]
[-21.82850838 165.59585571]
[-15.10507870 164.89239502]
[-2.47770429 156.79614258]
[10.14966965 148.69987488]
[22.77704430 140.60362244]
[35.40441895 132.50735474]
[41.94234085 119.12435913]
[57.73588181 118.18915558]
[70.36325836 110.09289551]
[68.75365448 101.96703339]
[69.33150482 93.70346069]
[72.05633545 85.88069153]
[60.67863464 76.10582733]
[49.30093002 66.33097076]
[37.92322540 56.55611420]
[24.96654892 56.73921204]
[15.68157959 48.28697968]
[14.71497917 36.17161179]
[3.56780720 26.13465118]
[-12.57674408 23.25619507]
[-17.90100479 7.74541569]
[-6.92783403 -4.44152594]
[9.05451298 -0.76774907]
[13.60476589 14.98747921]
[24.75193787 25.02443886]
[42.05706787 27.69419479]
[47.69808578 45.17840958]
[59.07579041 54.95326996]
[70.45349121 64.72812653]
[81.83119965 74.50298309]
[84.53454590 72.77825928]
[87.40013885 71.33911133]
[90.39791107 70.20062256]
[89.35156250 55.23715973]
[88.30521393 40.27370071]
[87.25886536 25.31023788]
[80.12237549 9.93146038]
[92.92456818 -1.18340516]
[107.14905548 8.04157066]
[102.22232819 24.26389122]
[103.26867676 39.22735214]
[104.31502533 54.19081116]
[105.36137390 69.15427399]
[119.43391418 72.36557007]
[131.51889038 82.07541656]
[142.42948914 71.78179932]
[153.34010315 61.48817062]
[164.25070190 51.19454575]
[175.16130066 40.90092087]
[186.07191467 30.60729790]
[196.98251343 20.31367302]
[192.79461670 5.59225512]
[195.93916321 -9.38674545]
[205.69354248 -21.18126488]
[219.81626892 -27.08100700]
[235.06205750 -25.73025703]
[247.92753601 -17.43940544]
[255.45629883 -4.11362934]
[255.91830444 11.18490505]
[249.20738220 24.94070625]
[236.86564636 33.99279022]
[221.72914124 36.26105881]
[207.27613831 31.22427750]
[196.36553955 41.51790237]
[185.45492554 51.81152725]
[174.54432678 62.10515213]
[163.63372803 72.39877319]
[152.72311401 82.69239807]
[141.81251526 92.98602295]
[141.63798523 107.98500824]
[152.30610657 118.52972412]
[162.97424316 129.07444763]
[170.45095825 126.08599091]
[178.43334961 125.26316071]
[186.30902100 126.65412903]
[193.47782898 130.13781738]
[199.39761353 135.43421936]
[203.62525940 142.12693787]
[205.84979248 149.69583130]
[205.91522217 157.55744934]
[203.83140564 165.11000061]
[199.77215576 171.77943420]
[208.58894348 183.91468811]
[225.55624390 190.95950317]
[226.80923462 208.42446899]
[235.90599060 220.35127258]
[245.00276184 232.27809143]
[254.09953308 244.20489502]
[263.19628906 256.13171387]
[272.29306030 268.05853271]
[287.93688965 271.61523438]
[294.77987671 286.12567139]
[287.57266235 300.45870972]
[271.84399414 303.61923218]
[259.65957642 293.18276978]
[260.36624146 277.15530396]
[251.26948547 265.22848511]
[242.17271423 253.30166626]
[233.07594299 241.37486267]
[223.97918701 229.44804382]
[214.88241577 217.52124023]
[202.88584900 215.57214355]
[195.21705627 205.63029480]
[196.45367432 192.73146057]
[187.63690186 180.59620667]
[165.15124512 179.78729248]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 100]
[2 99]
[3 98]
[6 37]
[7 36]
[9 34]
[10 33]
[11 32]
[12 31]
[13 30]
[14 27]
[15 26]
[16 25]
[17 24]
[40 58]
[41 57]
[42 56]
[43 55]
[46 53]
[47 52]
[61 71]
[62 70]
[63 69]
[64 68]
[73 97]
[74 96]
[75 95]
[76 94]
[77 93]
[78 92]
[79 91]
[110 133]
[111 132]
[113 129]
[114 128]
[115 127]
[116 126]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
