%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:06:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUGCGGGGCGCGCCAGGACUAGGCCUCACGGCGCGGAAGGGGGCCGAGGACUCUGCGGAGGACUUGGGGGGCCCCUGCCCCGAGCCCGGGGGCGAUU\
) } def
/len { sequence length } bind def

/coor [
[123.75160217 246.05741882]
[126.35225677 238.58805847]
[131.51063538 232.50163269]
[126.91977692 218.22143555]
[122.32891846 203.94123840]
[117.19458771 198.43995667]
[117.82483673 189.14503479]
[113.68030548 174.72897339]
[109.53578186 160.31291199]
[105.39125824 145.89685059]
[101.24672699 131.48078918]
[97.10220337 117.06472015]
[85.04975128 108.13508606]
[70.05156708 108.36836243]
[55.05337906 108.60164642]
[40.05519104 108.83492279]
[25.05700493 109.06819916]
[10.08602142 110.00074005]
[-4.82517576 111.63052368]
[-19.73637390 113.26030731]
[-29.43463516 125.73905945]
[-45.12632751 127.62223816]
[-57.50184631 117.79257965]
[-59.21901703 102.08185577]
[-49.25907135 89.81095886]
[-33.53107071 88.25998688]
[-21.36615562 98.34910583]
[-6.45495844 96.71932983]
[8.45623970 95.08954620]
[10.99776459 92.40706635]
[15.03828907 90.91414642]
[19.95841599 91.33576965]
[24.82372856 94.07001495]
[39.82191467 93.83673096]
[54.82009888 93.60345459]
[69.81828308 93.37017822]
[84.81647491 93.13690186]
[88.04765320 90.15705872]
[91.71778107 88.33692932]
[95.46109772 87.68410492]
[98.94168091 88.10028839]
[101.88204956 89.39804840]
[110.62316895 77.20818329]
[119.36428070 65.01831055]
[128.10539246 52.82844162]
[136.84651184 40.63857651]
[145.58763123 28.44870567]
[154.32875061 16.25883675]
[162.29510498 3.54911685]
[169.45591736 -9.63128471]
[176.61671448 -22.81168556]
[172.35853577 -37.79520035]
[179.80836487 -51.05999374]
[194.11911011 -55.02716827]
[201.27990723 -68.20757294]
[208.44070435 -81.38796997]
[207.47499084 -97.75865936]
[221.31657410 -106.55314636]
[235.72639465 -98.72441101]
[235.88087463 -82.32598877]
[221.62109375 -74.22717285]
[214.46029663 -61.04677200]
[207.29949951 -47.86637115]
[211.75918579 -33.70138550]
[204.68489075 -20.23257828]
[189.79710388 -15.65088749]
[182.63630676 -2.47048616]
[175.47550964 10.70991516]
[176.28787231 13.57075405]
[175.91133118 16.95116615]
[174.13160706 20.35814476]
[170.93315125 23.22727966]
[166.51861572 24.99995232]
[157.77749634 37.18982315]
[149.03637695 49.37969208]
[140.29527283 61.56955719]
[131.55415344 73.75942993]
[122.81303406 85.94929504]
[114.07192230 98.13916779]
[111.51826477 112.92019653]
[115.66279602 127.33625793]
[119.80731964 141.75231934]
[123.95184326 156.16838074]
[128.09637451 170.58445740]
[132.24089050 185.00051880]
[136.60911560 199.35038757]
[141.19998169 213.63058472]
[145.79083252 227.91078186]
[164.50892639 241.51473999]
[160.26806641 263.53994751]
[167.01548767 276.93667603]
[181.01649475 285.47506714]
[180.35209656 301.86074829]
[165.70578003 309.23754883]
[152.14440918 300.01684570]
[153.61877441 283.68411255]
[146.87133789 270.28738403]
[139.32434082 269.79028320]
[132.39875793 266.58221436]
[127.04297638 261.04763794]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 88]
[4 87]
[5 86]
[7 85]
[8 84]
[9 83]
[10 82]
[11 81]
[12 80]
[13 37]
[14 36]
[15 35]
[16 34]
[17 33]
[18 29]
[19 28]
[20 27]
[42 79]
[43 78]
[44 77]
[45 76]
[46 75]
[47 74]
[48 73]
[49 68]
[50 67]
[51 66]
[54 63]
[55 62]
[56 61]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
