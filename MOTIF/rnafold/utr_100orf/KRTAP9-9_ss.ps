%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:58:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUGACCCACUGUUGCUCCCCUUGCUGUCAGCCUACCUGCUGCAGGACCACCUGCUGCAGGACCACCUGCUGGAAGCCCACCACUGUGACCACCUGCAGCA\
) } def
/len { sequence length } bind def

/coor [
[93.16138458 239.36808777]
[91.50312042 254.54084778]
[83.41857147 267.48699951]
[70.51293182 275.63607788]
[55.34862900 277.37005615]
[40.93654633 272.34466553]
[30.13820648 261.55767822]
[25.09763527 247.15090942]
[26.81563759 231.98478699]
[34.95110321 219.07057190]
[47.88873291 210.97238159]
[63.05974579 209.29814148]
[67.99850464 195.13450623]
[72.93726349 180.97085571]
[77.87602234 166.80722046]
[82.81478882 152.64358521]
[87.75354767 138.47994995]
[76.86943817 131.62306213]
[69.00018311 121.93856812]
[64.78635406 110.60315704]
[64.44374847 98.90001678]
[67.76398468 88.07460022]
[74.16133881 79.20218658]
[82.75857544 73.08127594]
[92.50000000 70.16337585]
[92.50000000 55.16337967]
[92.50000000 40.16337967]
[84.76270294 26.36320686]
[92.50000000 13.63593388]
[92.50000000 -1.36406577]
[92.50000000 -16.36406517]
[92.50000000 -31.36406517]
[92.50000000 -46.36406708]
[75.80183411 -56.96701431]
[68.68534851 -75.27271271]
[73.76450348 -94.10025024]
[88.90364838 -106.16882324]
[87.07813263 -121.05732727]
[85.25260925 -135.94583130]
[83.42709351 -150.83433533]
[81.60157776 -165.72283936]
[72.24229431 -178.47879028]
[78.37315369 -192.05308533]
[76.54763794 -206.94158936]
[74.72212219 -221.83009338]
[72.89660645 -236.71859741]
[71.07109070 -251.60710144]
[60.77724075 -264.37301636]
[66.93753052 -279.57113647]
[83.21478271 -281.56692505]
[92.86434937 -268.30731201]
[85.95958710 -253.43261719]
[87.78510284 -238.54411316]
[89.61062622 -223.65560913]
[91.43614197 -208.76710510]
[93.26165771 -193.87861633]
[102.49037170 -182.18757629]
[96.49008179 -167.54835510]
[98.31559753 -152.65985107]
[100.14111328 -137.77134705]
[101.96662903 -122.88284302]
[103.79214478 -107.99433899]
[114.07337189 -104.96643829]
[122.73923492 -98.59412384]
[128.73733521 -89.61851501]
[131.32810974 -79.09878540]
[130.17594910 -68.28719330]
[125.39247894 -58.48004150]
[117.52624512 -50.86221695]
[107.50000000 -46.36406708]
[107.50000000 -31.36406517]
[107.50000000 -16.36406517]
[107.50000000 -1.36406577]
[107.50000000 13.63593388]
[115.23729706 26.36320686]
[107.50000000 40.16337967]
[107.50000000 55.16337967]
[107.50000000 70.16337585]
[132.37275696 85.25343323]
[136.00938416 118.27583313]
[149.56616211 124.69562531]
[163.12295532 131.11541748]
[179.41502380 129.24447632]
[188.96264648 142.57769775]
[181.94404602 157.39901733]
[165.57934570 158.46151733]
[156.70315552 144.67219543]
[143.14637756 138.25241089]
[129.58959961 131.83261108]
[122.67149353 134.72914124]
[135.82749939 141.93466187]
[138.39680481 156.71298218]
[128.44470215 167.93598938]
[113.46517181 167.15274048]
[104.73781586 154.95301819]
[108.83528900 140.52218628]
[101.91718292 143.41870117]
[96.97842407 157.58235168]
[92.03966522 171.74598694]
[87.10090637 185.90962219]
[82.16213989 200.07325745]
[77.22338104 214.23689270]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 102]
[13 101]
[14 100]
[15 99]
[16 98]
[17 97]
[25 78]
[26 77]
[27 76]
[29 74]
[30 73]
[31 72]
[32 71]
[33 70]
[37 62]
[38 61]
[39 60]
[40 59]
[41 58]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
[80 89]
[81 88]
[82 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
