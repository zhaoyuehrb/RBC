%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:11:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACCCCGCGAGCUCCCACAGUGCUCAGCGGCAGCCACUAUGGAGGCCGCCAGGACCGCUGUACUCCGGGUGAAGCGGAAGCGCAGUGCGGAGCCGGCGGAGGCUCUUGUGCUCGCUUGUAAACGCCUCCGGAGCGACG\
) } def
/len { sequence length } bind def

/coor [
[317.18127441 387.31414795]
[311.71096802 370.79071045]
[312.95385742 353.39474487]
[320.74884033 337.75433350]
[310.62878418 326.68255615]
[300.38513184 315.72500610]
[290.01919556 304.88308716]
[279.65325928 294.04116821]
[269.28732300 283.19924927]
[254.43707275 283.12283325]
[243.77008057 272.27523804]
[243.95092773 256.69946289]
[233.58497620 245.85754395]
[223.21903992 235.01560974]
[212.85310364 224.17369080]
[202.48716736 213.33177185]
[192.00022888 202.60682678]
[181.39363098 192.00022888]
[170.78703308 181.39363098]
[156.31639099 177.86518860]
[152.02929688 162.63589478]
[141.42268372 152.02929688]
[130.81608582 141.42268372]
[120.20948792 130.81608582]
[109.60288239 120.20948792]
[94.61856842 126.09092712]
[76.77342987 120.38782501]
[64.92427826 102.57965851]
[50.16533279 99.90129852]
[35.40639114 97.22294617]
[20.64744759 94.54459381]
[5.88850307 91.86624146]
[-7.01100540 100.59781647]
[-21.94051933 97.67134094]
[-30.18524742 85.31982422]
[-44.94419098 82.64146423]
[-59.70313644 79.96311188]
[-76.36734009 83.08409882]
[-83.97946930 67.93511200]
[-71.52975464 56.42681122]
[-57.02478409 65.20417023]
[-42.26583862 67.88252258]
[-27.50689507 70.56087494]
[-15.44787884 61.89394379]
[-0.44205707 64.39992523]
[8.56685638 77.10729980]
[23.32579994 79.78565216]
[38.08474350 82.46400452]
[52.84368896 85.14235687]
[67.60263062 87.82070923]
[73.02359009 82.63774109]
[59.81474686 75.52954865]
[62.49346924 60.77066803]
[77.35779572 58.75772858]
[83.86551666 72.27180481]
[89.28647614 67.08882904]
[87.27297974 52.22458649]
[85.25947571 37.36034012]
[83.24597931 22.49609184]
[81.23248291 7.63184595]
[71.71276093 -5.00482845]
[77.67161560 -18.65551758]
[75.65811920 -33.51976395]
[73.64461517 -48.38401031]
[71.63111877 -63.24825668]
[63.51336288 -78.13242340]
[75.56862640 -90.05328369]
[90.36084747 -81.76915741]
[86.49536896 -65.26175690]
[88.50886536 -50.39751053]
[90.52236176 -35.53326416]
[92.53586578 -20.66901779]
[101.91156006 -9.09553337]
[96.09672546 5.61834717]
[98.11022949 20.48259354]
[100.12372589 35.34683990]
[102.13722229 50.21108627]
[104.15072632 65.07533264]
[125.18865967 86.09317017]
[120.20948792 109.60288239]
[130.81608582 120.20948792]
[141.42268372 130.81608582]
[152.02929688 141.42268372]
[162.63589478 152.02929688]
[177.86518860 156.31639099]
[181.39363098 170.78703308]
[192.00022888 181.39363098]
[202.60682678 192.00022888]
[210.96073914 195.89913940]
[213.32908630 202.96583557]
[223.69502258 213.80775452]
[234.06095886 224.64967346]
[244.42691040 235.49160767]
[254.79284668 246.33352661]
[270.36105347 246.85166931]
[280.71914673 257.99459839]
[280.12924194 272.83331299]
[290.49517822 283.67523193]
[300.86111450 294.51715088]
[311.22705078 305.35906982]
[319.49136353 309.44445801]
[321.70056152 316.56250000]
[331.82061768 327.63427734]
[343.55261230 322.32843018]
[356.28921509 320.56549072]
[368.98571777 322.47976685]
[380.60372925 327.90435791]
[390.19586182 336.38568115]
[396.98324585 347.22143555]
[400.41854858 359.51858521]
[400.23019409 372.26721191]
[396.44381714 384.42312622]
[389.37927246 394.99374390]
[398.73162842 406.72122192]
[408.08398438 418.44869995]
[417.43630981 430.17617798]
[426.78866577 441.90365601]
[436.14102173 453.63110352]
[450.86941528 449.75888062]
[465.89840698 452.21844482]
[478.62411499 460.58358765]
[486.84176636 473.40509033]
[489.12756348 488.46148682]
[485.08551025 503.14416504]
[475.41586304 514.90930176]
[461.79403687 521.71850586]
[446.58001709 522.39202881]
[432.40975952 516.81317139]
[421.73834229 505.94851685]
[416.41464233 491.68041992]
[417.36102295 476.48092651]
[424.41354370 462.98345947]
[415.06118774 451.25598145]
[405.70886230 439.52850342]
[396.35650635 427.80105591]
[387.00415039 416.07357788]
[377.65179443 404.34609985]
[361.22512817 409.66299438]
[343.97708130 408.31494141]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 103]
[5 102]
[6 100]
[7 99]
[8 98]
[9 97]
[12 94]
[13 93]
[14 92]
[15 91]
[16 90]
[17 88]
[18 87]
[19 86]
[21 84]
[22 83]
[23 82]
[24 81]
[25 80]
[28 50]
[29 49]
[30 48]
[31 47]
[32 46]
[35 43]
[36 42]
[37 41]
[56 78]
[57 77]
[58 76]
[59 75]
[60 74]
[62 72]
[63 71]
[64 70]
[65 69]
[113 137]
[114 136]
[115 135]
[116 134]
[117 133]
[118 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
