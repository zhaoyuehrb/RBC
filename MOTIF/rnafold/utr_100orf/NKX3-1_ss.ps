%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:45:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGUGCGGGCCGGGCGGGUGCAUUCAGGCCAAGGCGGGGCCGCCGGGAUGCUCAGGGUUCCGGAGCCGCGGCCCGGGGAGGCGAAAGCGGAGGGGGCCGCGCCGCCGACCCCGUCCAAGCCGCUCACGUCCUUCCUCAUCCAGGACA\
) } def
/len { sequence length } bind def

/coor [
[270.76086426 340.93441772]
[263.49023438 327.81427002]
[256.21963501 314.69412231]
[248.94903564 301.57397461]
[241.67842102 288.45382690]
[227.33506775 284.60626221]
[219.77473450 271.40414429]
[223.90763855 256.38558960]
[216.63702393 243.26545715]
[209.36642456 230.14530945]
[202.09580994 217.02516174]
[189.15917969 209.64323425]
[189.23776245 193.82223511]
[181.96716309 180.70208740]
[174.69654846 167.58193970]
[167.28804016 154.53916931]
[159.74243164 141.57521057]
[152.19683838 128.61126709]
[137.77554321 125.06698608]
[129.93855286 112.02719879]
[133.75389099 96.92485046]
[126.20829773 83.96090698]
[129.35581970 99.80934143]
[124.05859375 114.29731750]
[112.57099915 123.46023560]
[98.71852112 125.21326447]
[86.64772797 119.79296112]
[79.58705139 109.47650146]
[64.65451813 110.89757538]
[49.72198486 112.31864929]
[34.78945160 113.73971558]
[26.06748199 126.71897888]
[11.02890301 131.00559998]
[-3.22552752 124.57557678]
[-9.96530342 110.46496582]
[-6.00810862 95.33636475]
[6.77759075 86.33303070]
[22.35477829 87.70607758]
[33.36838150 98.80718231]
[48.30091476 97.38611603]
[63.23344803 95.96504211]
[78.16598511 94.54396820]
[79.13349152 83.47724915]
[85.91506195 72.69172668]
[74.50383759 62.95602036]
[63.09261322 53.22031021]
[51.68139267 43.48460388]
[40.27016830 33.74889755]
[28.85894585 24.01319122]
[17.44772339 14.27748394]
[2.05695057 17.04481888]
[-11.48610306 9.22690964]
[-16.78682327 -5.48486710]
[-11.34237003 -20.14406013]
[2.27655005 -27.82904816]
[17.63949966 -24.91121101]
[27.49256516 -12.76826668]
[27.18342972 2.86626077]
[38.59465408 12.60196781]
[50.00587463 22.33767509]
[61.41709900 32.07338333]
[72.82832336 41.80908966]
[84.23954773 51.54479599]
[95.65076447 61.28050232]
[102.98467255 59.71085358]
[99.84560394 45.04299164]
[114.51351929 41.90414810]
[117.65248871 56.57155991]
[124.98639679 55.00191116]
[131.41311646 41.44841766]
[137.83984375 27.89492226]
[144.26657104 14.34142876]
[150.69329834 0.78793418]
[157.12002563 -12.76556015]
[163.54675293 -26.31905365]
[154.23559570 -36.99888992]
[149.72396851 -50.38446808]
[150.66473389 -64.43506622]
[156.88209534 -77.02188873]
[167.40336609 -86.25062561]
[180.61097717 -90.74652100]
[194.49108887 -89.85907745]
[201.20213318 -103.27406311]
[199.68345642 -119.60273743]
[213.21974182 -128.86021423]
[227.88603210 -121.52317810]
[228.59489441 -105.13935852]
[214.61712646 -96.56301880]
[207.90608215 -83.14803314]
[217.90794373 -70.72554779]
[221.52003479 -55.13186264]
[217.97317505 -39.46368790]
[207.92506409 -26.85513496]
[193.33894348 -19.85080528]
[177.10025024 -19.89233017]
[170.67352295 -6.33883524]
[164.24679565 7.21465921]
[157.82006836 20.76815414]
[151.39334106 34.32164764]
[144.96661377 47.87514114]
[138.53988647 61.42863464]
[139.17224121 76.41529846]
[146.71784973 89.37924957]
[161.73400879 93.52079773]
[169.20164490 106.77557373]
[165.16078186 121.06566620]
[172.70637512 134.02961731]
[180.25198364 146.99356079]
[187.32225037 152.88600159]
[187.81669617 160.31132507]
[195.08731079 173.43147278]
[202.35791016 186.55162048]
[215.81459045 194.87197876]
[215.21595764 209.75454712]
[222.48657227 222.87469482]
[229.75717163 235.99484253]
[237.02778625 249.11499023]
[251.95329285 253.57220459]
[259.13983154 266.98147583]
[254.79856873 281.18319702]
[262.06918335 294.30334473]
[269.33978271 307.42349243]
[276.61038208 320.54364014]
[283.88101196 333.66378784]
[295.80776978 334.66986084]
[305.64962769 341.26776123]
[311.00091553 351.70428467]
[310.62210083 363.30633545]
[304.72488403 373.16506958]
[311.43591309 386.58004761]
[318.14697266 399.99502563]
[324.85800171 413.41003418]
[331.56903076 426.82501221]
[346.91830444 428.37551880]
[358.97839355 437.99621582]
[363.90103149 452.61712646]
[360.11535645 467.57281494]
[348.82943726 478.09094238]
[333.64453125 480.81524658]
[319.40606689 474.87637329]
[310.65753174 462.16943359]
[310.19052124 446.74914551]
[318.15405273 433.53607178]
[311.44302368 420.12106323]
[304.73196411 406.70608521]
[298.02093506 393.29110718]
[291.30987549 379.87609863]
[273.66094971 375.20376587]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 124]
[2 123]
[3 122]
[4 121]
[5 120]
[8 117]
[9 116]
[10 115]
[11 114]
[13 112]
[14 111]
[15 110]
[16 108]
[17 107]
[18 106]
[21 103]
[22 102]
[28 42]
[29 41]
[30 40]
[31 39]
[44 64]
[45 63]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[69 101]
[70 100]
[71 99]
[72 98]
[73 97]
[74 96]
[75 95]
[82 89]
[83 88]
[129 147]
[130 146]
[131 145]
[132 144]
[133 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
