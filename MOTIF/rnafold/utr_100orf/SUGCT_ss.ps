%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUCGCCGCUUGCACCGGGACCGAUGCCAUCUGAGACGCACGCGAUGCUGGCGACGCUGGCGAGGGUGGCAGCUCUGCGCAGAACCUGCCUCUUCUCCGGCCGGGGCGGCGGGAGGGGGCUGU\
) } def
/len { sequence length } bind def

/coor [
[199.77348328 195.44442749]
[200.92988586 184.64231873]
[188.90638733 175.67373657]
[176.88288879 166.70516968]
[164.85937500 157.73658752]
[150.20291138 160.12902832]
[137.88160706 151.20489502]
[135.47157288 135.81564331]
[123.44807434 126.84706116]
[111.42456818 117.87848663]
[100.15179443 124.08460999]
[85.77414703 122.89320374]
[73.17977142 113.03778076]
[60.31687546 120.75437164]
[47.45397568 128.47096252]
[39.60033035 142.20526123]
[24.70598412 142.11773682]
[11.84308434 149.83432007]
[4.36000299 164.42663574]
[-12.03007698 164.97189331]
[-20.46644783 150.90919495]
[-12.27049255 136.70501709]
[4.12649107 136.97142029]
[16.98939133 129.25483704]
[23.92299271 116.07247925]
[39.73738098 115.60806274]
[52.60028076 107.89147186]
[65.46318054 100.17488098]
[50.70239639 102.84307098]
[38.77672577 93.74481201]
[37.45042801 78.80356598]
[47.58699799 67.74689484]
[62.58697510 67.77330017]
[72.68441010 78.86516571]
[67.16254425 64.91851807]
[61.64067459 50.97187424]
[47.41279984 44.63110733]
[42.01151657 30.40856361]
[48.14414597 16.88353539]
[42.62228012 2.93688750]
[36.48617554 -3.98375845]
[37.14173889 -11.43027115]
[31.97209740 -25.51127815]
[26.80245209 -39.59228516]
[10.83209038 -46.59875488]
[4.93323421 -62.65274811]
[12.27363205 -77.72776794]
[6.75176382 -91.67441559]
[1.22989535 -105.62106323]
[-4.29197311 -119.56770325]
[-9.81384087 -133.51435852]
[-15.33570957 -147.46099854]
[-20.85757828 -161.40765381]
[-32.31009674 -173.90869141]
[-23.46796799 -188.37428284]
[-7.11995983 -183.88217163]
[-6.91093063 -166.92951965]
[-1.38906217 -152.98286438]
[4.13280630 -139.03622437]
[9.65467453 -125.08957672]
[15.17654228 -111.14292908]
[20.69841003 -97.19628143]
[26.22027969 -83.24963379]
[38.70384216 -79.80503082]
[47.02107239 -69.62543488]
[47.93481064 -56.31612778]
[40.88346100 -44.76193237]
[46.05310440 -30.68092346]
[51.22274780 -16.59991455]
[56.56892776 -2.58498096]
[62.09079361 11.36166668]
[75.81980896 17.02291298]
[81.61844635 31.08813477]
[75.58732605 45.45000458]
[81.10919189 59.39665222]
[86.63105774 73.34329987]
[116.29810333 80.36334991]
[120.39314270 105.85498047]
[132.41664124 114.82355499]
[144.44015503 123.79212952]
[159.87800598 121.71596527]
[171.94378662 130.98265076]
[173.82795715 145.71308899]
[185.85145569 154.68165588]
[197.87496948 163.65023804]
[209.89846802 172.61880493]
[229.47108459 168.57698059]
[245.56578064 179.91107178]
[248.27175903 199.10575867]
[260.93667603 207.14315796]
[273.60159302 215.18055725]
[286.26651001 223.21797180]
[298.93142700 231.25537109]
[311.59634399 239.29277039]
[324.26126099 247.33016968]
[336.92617798 255.36756897]
[345.95825195 257.35977173]
[349.80484009 263.76947021]
[362.26376343 272.12258911]
[374.72271729 280.47573853]
[383.70187378 282.69430542]
[387.38616943 289.19860840]
[399.63125610 297.86221313]
[411.87634277 306.52578735]
[428.29864502 310.73818970]
[428.79702759 327.68481445]
[412.65066528 332.85501099]
[403.21273804 318.77090454]
[390.96765137 310.10729980]
[378.72256470 301.44369507]
[366.36956787 292.93466187]
[353.91064453 284.58154297]
[341.45169067 276.22839355]
[328.88879395 268.03250122]
[316.22387695 259.99508667]
[303.55895996 251.95768738]
[290.89401245 243.92028809]
[278.22909546 235.88288879]
[265.56417847 227.84548950]
[252.89927673 219.80807495]
[240.23434448 211.77067566]
[231.01371765 216.70295715]
[220.49278259 217.30815125]
[210.61602783 213.40589905]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 86]
[3 85]
[4 84]
[5 83]
[8 80]
[9 79]
[10 78]
[13 28]
[14 27]
[15 26]
[17 24]
[18 23]
[34 76]
[35 75]
[36 74]
[39 71]
[40 70]
[42 69]
[43 68]
[44 67]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[52 58]
[53 57]
[89 121]
[90 120]
[91 119]
[92 118]
[93 117]
[94 116]
[95 115]
[96 114]
[98 113]
[99 112]
[100 111]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
