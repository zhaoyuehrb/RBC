%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:45:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCAGCUGCCUGAAGGAGCCAUCUCAUCCACAGCUCUUCCUUGAGCAGCCAUGGCCAGCUCCAGGCGAGGCCUCCUGCUCCUGCUGCUGCUGACUGCCCACCUUGGACCCUCAGAGGCUCAGCACUGGUCCCAUGGCUGGUACCCUGGAG\
) } def
/len { sequence length } bind def

/coor [
[121.32131958 274.56072998]
[121.32131958 259.56072998]
[113.58401489 246.83346558]
[121.32131958 233.03329468]
[121.32131958 218.03329468]
[121.32131958 203.03329468]
[111.73044586 188.36914062]
[120.98667908 172.48431396]
[120.67667389 157.48751831]
[120.36666870 142.49072266]
[120.05666351 127.49391937]
[113.35313416 124.13049316]
[106.62605286 137.53744507]
[93.21921539 130.81015015]
[99.94606781 117.40363312]
[93.24253845 114.04020691]
[81.03480530 122.75636292]
[68.82707214 131.47251892]
[69.68312836 146.87611389]
[62.05560684 160.28596497]
[48.37841797 167.42306519]
[33.01590729 166.00996399]
[20.87019730 156.49758911]
[15.81693745 141.92131042]
[19.46860504 126.93235016]
[30.65996552 116.31363678]
[45.81989670 113.45357513]
[60.11092377 119.26477814]
[72.31865692 110.54862976]
[84.52638245 101.83247375]
[82.61020660 94.58139038]
[68.13469696 90.64952087]
[78.77785492 80.07921600]
[76.86167908 72.82812500]
[61.94170380 71.28075409]
[47.02172852 69.73339081]
[32.10175705 68.18601990]
[19.99277115 78.34220123]
[4.25644064 76.87815094]
[-5.77115154 64.66246796]
[-4.14081240 48.94249725]
[8.18020630 39.04461670]
[23.88206291 40.84106445]
[33.64912415 53.26604080]
[48.56909943 54.81341171]
[63.48907471 56.36078262]
[78.40904999 57.90815353]
[92.38291931 52.45553207]
[102.31188965 41.21207047]
[112.24086761 29.96861076]
[122.16984558 18.72514915]
[132.09881592 7.48168850]
[142.02780151 -3.76177287]
[151.95677185 -15.00523376]
[161.88575745 -26.24869537]
[158.46028137 -35.47757339]
[158.66680908 -45.26129532]
[162.43362427 -54.23010635]
[169.19357300 -61.14406967]
[177.96902466 -65.06446838]
[187.51310730 -65.48110962]
[196.48681641 -62.37835693]
[207.31036377 -72.76348877]
[218.13391113 -83.14862061]
[228.95744324 -93.53375244]
[239.67309570 -104.03017426]
[250.27969360 -114.63677979]
[250.44839478 -130.21269226]
[261.35607910 -140.81820679]
[276.20431519 -140.56138611]
[286.81091309 -151.16799927]
[297.41751099 -161.77459717]
[308.02410889 -172.38119507]
[318.63070679 -182.98779297]
[329.23730469 -193.59440613]
[333.12597656 -201.93118286]
[340.17443848 -204.30776978]
[350.99798584 -214.69290161]
[355.59631348 -235.58061218]
[375.74584961 -239.88801575]
[385.90505981 -250.92387390]
[396.06430054 -261.95974731]
[389.15255737 -275.43020630]
[387.27005005 -290.42446899]
[390.62484741 -305.13043213]
[398.79321289 -317.77749634]
[410.77307129 -326.84967041]
[425.10690308 -331.26739502]
[440.05895996 -330.51596069]
[453.82565308 -324.70529175]
[463.98486328 -335.74114990]
[464.76119995 -351.76541138]
[477.85726929 -361.03216553]
[493.22686768 -356.43276978]
[499.07977295 -341.49545288]
[490.92614746 -327.67889404]
[475.02072144 -325.58193970]
[464.86151123 -314.54608154]
[471.78915405 -301.30624390]
[473.77276611 -286.46728516]
[470.55380249 -271.81762695]
[462.50189209 -259.12951660]
[450.57257080 -249.94465637]
[436.19387817 -245.38691711]
[421.09536743 -246.02476501]
[407.10015869 -251.80050659]
[396.94091797 -240.76464844]
[386.78170776 -229.72879028]
[388.60382080 -220.92681885]
[386.09808350 -212.15072632]
[379.71289062 -205.43733215]
[370.81164551 -202.40602112]
[361.38308716 -203.86935425]
[350.55957031 -193.48422241]
[339.84390259 -182.98779297]
[329.23730469 -172.38119507]
[318.63070679 -161.77459717]
[308.02410889 -151.16799927]
[297.41751099 -140.56138611]
[286.81091309 -129.95478821]
[287.06771851 -115.10656738]
[276.46221924 -104.19886780]
[260.88629150 -104.03017426]
[250.27969360 -93.42357635]
[247.75794983 -86.42574310]
[239.34257507 -82.71020508]
[228.51904297 -72.32507324]
[217.69549561 -61.93994522]
[206.87194824 -51.55481339]
[208.26506042 -31.21644020]
[194.09523010 -16.15900993]
[173.12921143 -16.31971931]
[163.20024109 -5.07625723]
[153.27125549 6.16720390]
[143.34228516 17.41066551]
[133.41331482 28.65412712]
[123.48432922 39.89758682]
[113.55535126 51.14104843]
[103.62638092 62.38451004]
[135.05346680 127.18391418]
[135.36346436 142.18070984]
[135.67347717 157.17750549]
[135.98347473 172.17430115]
[144.75474548 181.68711853]
[144.66941833 194.22456360]
[136.32131958 203.03329468]
[136.32131958 218.03329468]
[136.32131958 233.03329468]
[144.05862427 246.83346558]
[136.32131958 259.56072998]
[136.32131958 274.56072998]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[4 148]
[5 147]
[6 146]
[8 143]
[9 142]
[10 141]
[11 140]
[16 30]
[17 29]
[18 28]
[34 47]
[35 46]
[36 45]
[37 44]
[48 139]
[49 138]
[50 137]
[51 136]
[52 135]
[53 134]
[54 133]
[55 132]
[62 129]
[63 128]
[64 127]
[65 126]
[66 124]
[67 123]
[70 120]
[71 119]
[72 118]
[73 117]
[74 116]
[75 115]
[77 114]
[78 113]
[80 108]
[81 107]
[82 106]
[90 98]
[91 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
