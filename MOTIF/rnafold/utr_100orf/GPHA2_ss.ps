%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:45:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGCAGGAGGCACAGGAAAACUGCAAGCCGCUCUGUUCCUGGGCCUCGGAAGUGAUGCCUAUGGCGUCCCCUCAAACCCUGGUCCUCUAUCUGCUGGUCCUGGCAGUCACUGAAGCCUGGGGCCAGGAGGCAGUCAUCCCAGGCUGCCACUUGC\
) } def
/len { sequence length } bind def

/coor [
[227.88517761 140.94972229]
[214.20668030 134.79353333]
[200.52818298 128.63734436]
[186.84968567 122.48114777]
[173.17118835 116.32495117]
[159.49269104 110.16876221]
[145.81419373 104.01257324]
[83.38844299 134.05545044]
[69.83668518 140.48583984]
[56.28493118 146.91622925]
[42.73317337 153.34661865]
[29.18141747 159.77699280]
[20.03056908 172.68330383]
[5.21518660 171.14912415]
[-8.33656979 177.57951355]
[-21.88832664 184.00988770]
[-35.44008255 190.44027710]
[-48.99184036 196.87066650]
[-62.54359436 203.30105591]
[-63.87667847 218.53819275]
[-72.59996033 230.98010254]
[-86.28870392 237.34284973]
[-101.22441101 236.00843811]
[-113.40479279 227.43499756]
[-126.95655060 233.86538696]
[-133.67501831 248.43389893]
[-149.28782654 252.12442017]
[-161.81814575 242.10591125]
[-161.65379333 226.06370544]
[-148.92085266 216.30400085]
[-133.38693237 220.31362915]
[-119.83518219 213.88323975]
[-118.77278900 199.02601624]
[-110.36041260 186.61280823]
[-96.77440643 180.03352356]
[-81.61984253 181.14526367]
[-68.97398376 189.74929810]
[-55.42222977 183.31890869]
[-41.87047195 176.88851929]
[-28.31871414 170.45814514]
[-14.76695824 164.02775574]
[-1.21520185 157.59736633]
[6.96633434 145.15100098]
[22.75102997 146.22525024]
[36.30278397 139.79486084]
[49.85454178 133.36447144]
[63.40629959 126.93407440]
[76.95805359 120.50369263]
[78.75292206 113.22162628]
[64.34512329 117.39478302]
[53.52723312 107.00376129]
[57.11728668 92.43971252]
[71.52517700 88.26686859]
[82.34265900 98.65750122]
[84.13752747 91.37543488]
[75.12638855 79.38379669]
[66.11525726 67.39215088]
[57.10412216 55.40050888]
[48.09299088 43.40887070]
[39.08185577 31.41722870]
[24.73291588 22.38703918]
[29.43802071 6.09905815]
[46.39196396 6.11132240]
[51.07349777 22.40609360]
[60.08462906 34.39773560]
[69.09576416 46.38937759]
[78.10689545 58.38101959]
[87.11803436 70.37265778]
[96.12916565 82.36430359]
[103.19392395 79.84651947]
[124.38818359 72.29316711]
[123.78419495 57.30533218]
[110.42878723 49.58286285]
[103.38890076 35.85538864]
[104.91095734 20.50328827]
[114.50925446 8.42536831]
[129.12101746 3.47564554]
[144.08369446 7.23355913]
[154.62274170 18.49997330]
[157.37518311 33.67981339]
[151.46273804 47.92925262]
[138.77203369 56.70134354]
[139.37602234 71.68917847]
[141.77824402 56.88278198]
[152.08491516 45.98450089]
[166.73432922 42.76047897]
[180.66407776 48.32485199]
[189.06040955 60.75472260]
[189.02177429 75.75467682]
[180.56153870 88.14113617]
[166.60331726 93.63368225]
[151.97038269 90.33406830]
[165.64888000 96.49026489]
[179.32737732 102.64645386]
[193.00587463 108.80265045]
[206.68437195 114.95883942]
[220.36286926 121.11503601]
[234.04136658 127.27122498]
[248.87060547 129.52819824]
[263.76123047 127.72013855]
[278.65185547 125.91209412]
[293.54251099 124.10404205]
[308.43313599 122.29598999]
[323.32376099 120.48793793]
[338.21438599 118.67989349]
[346.79934692 109.00366211]
[359.27850342 107.83205414]
[368.87829590 115.25099945]
[383.80233765 113.74317169]
[398.72634888 112.23533630]
[406.42230225 98.76122284]
[420.58215332 92.41470337]
[435.76113892 95.63615417]
[446.12265015 107.18685913]
[447.68246460 122.62533569]
[439.84078979 136.01518250]
[425.61291504 142.20771790]
[410.46978760 138.82179260]
[400.23419189 127.15936279]
[385.31015015 128.66719055]
[370.38613892 130.17501831]
[356.75671387 141.19082642]
[340.02246094 133.57052612]
[325.13180542 135.37857056]
[310.24118042 137.18663025]
[295.35055542 138.99467468]
[280.45989990 140.80271912]
[265.56927490 142.61077881]
[250.67864990 144.41882324]
[244.93840027 158.27702332]
[254.18917847 170.08476257]
[263.43997192 181.89251709]
[272.69073486 193.70027161]
[281.94152832 205.50802612]
[291.19232178 217.31578064]
[300.44308472 229.12353516]
[316.16040039 230.77947998]
[326.03817749 243.11660767]
[324.21615601 258.81552124]
[311.77526855 268.56231689]
[296.09649658 266.57443237]
[286.48178101 254.03118896]
[288.63534546 238.37431335]
[279.38455200 226.56655884]
[270.13378906 214.75880432]
[260.88299561 202.95106506]
[251.63221741 191.14331055]
[242.38142395 179.33555603]
[233.13064575 167.52780151]
[235.58802795 182.32513428]
[222.51943970 189.68800354]
[207.61897278 187.96290588]
[196.57838440 177.80880737]
[193.61505127 163.10444641]
[199.86091614 149.46664429]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 98]
[2 97]
[3 96]
[4 95]
[5 94]
[6 93]
[7 92]
[8 48]
[9 47]
[10 46]
[11 45]
[12 44]
[14 42]
[15 41]
[16 40]
[17 39]
[18 38]
[19 37]
[24 32]
[25 31]
[55 69]
[56 68]
[57 67]
[58 66]
[59 65]
[60 64]
[71 83]
[72 82]
[99 129]
[100 128]
[101 127]
[102 126]
[103 125]
[104 124]
[105 123]
[108 121]
[109 120]
[110 119]
[130 149]
[131 148]
[132 147]
[133 146]
[134 145]
[135 144]
[136 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
