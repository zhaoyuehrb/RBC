%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:11:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUCCAGGACCCUUCUCCUCGGCCCUCCUCUCGCCGCCGCCCGCUGCCCUGCCCUUUCUGCUGCUGCUCUGGGCGGGGGCAUCUCGUGGCCAGCCCU\
) } def
/len { sequence length } bind def

/coor [
[85.57711029 185.64077759]
[82.21823120 169.95327759]
[92.50000000 157.63804626]
[92.50000000 142.63804626]
[92.50000000 127.63805389]
[92.50000000 112.63805389]
[85.85491180 109.16057587]
[72.56474304 102.20561981]
[65.91966248 98.72814941]
[53.59532547 107.27863312]
[41.27098846 115.82911682]
[28.94665527 124.37960052]
[26.38204384 139.97441101]
[13.49286175 149.12014771]
[-2.07396913 146.39080811]
[-11.08292389 133.40565491]
[-8.18914890 117.86854553]
[4.89053011 108.99738312]
[20.39617157 112.05525970]
[32.72050476 103.50477600]
[45.04484177 94.95429230]
[57.36917496 86.40380859]
[82.27445984 79.44915771]
[98.46850586 90.59203339]
[106.03574371 77.64070892]
[113.60298920 64.68938446]
[121.17023468 51.73805618]
[111.71527100 40.85342789]
[106.11662292 27.59049988]
[104.91563416 13.26613808]
[108.21773529 -0.70191061]
[115.68332672 -12.93533421]
[126.56265259 -22.23126793]
[139.77108765 -27.68055916]
[153.99725342 -28.75667000]
[167.83320618 -25.36653519]
[175.79957581 -38.07625580]
[183.76594543 -50.78597641]
[184.53916931 -66.58827972]
[197.85443115 -73.26306915]
[205.82080078 -85.97279358]
[213.78717041 -98.68251038]
[221.75354004 -111.39223480]
[229.71989441 -124.10195160]
[237.68626404 -136.81167603]
[245.65263367 -149.52139282]
[242.33422852 -164.74066162]
[250.59431458 -177.51663208]
[265.12399292 -180.58644104]
[273.09036255 -193.29615784]
[266.56246948 -208.80784607]
[270.46383667 -225.00898743]
[283.08486938 -235.63595581]
[299.38430786 -236.69984436]
[306.95156860 -249.65116882]
[301.50946045 -264.31121826]
[306.81253052 -279.02215576]
[320.35684204 -286.83789062]
[335.74716187 -284.06808472]
[345.71667480 -272.02056885]
[345.55807495 -256.38378906]
[335.34622192 -244.54096985]
[319.90289307 -242.08392334]
[312.33563232 -229.13259888]
[318.84323120 -217.36364746]
[318.63900757 -203.80807495]
[311.66888428 -192.05326843]
[299.68353271 -185.26380920]
[285.80007935 -185.32978821]
[277.83370972 -172.62007141]
[281.40414429 -158.20523071]
[273.50616455 -145.20228577]
[258.36236572 -141.55502319]
[250.39598083 -128.84530640]
[242.42962646 -116.13558197]
[234.46325684 -103.42586517]
[226.49688721 -90.71614838]
[218.53051758 -78.00642395]
[210.56414795 -65.29670715]
[210.36073303 -50.40348816]
[196.47566223 -42.81961060]
[188.50929260 -30.10988998]
[180.54292297 -17.40016937]
[190.33743286 -5.17755556]
[195.39289856 9.67515659]
[195.08781433 25.38837624]
[189.44049072 40.08344650]
[179.10902405 51.99725342]
[165.31469727 59.69375992]
[149.69757080 62.23709106]
[134.12155151 59.30529785]
[126.55431366 72.25662231]
[118.98706818 85.20794678]
[111.41983032 98.15927887]
[107.50000000 112.63805389]
[107.50000000 127.63805389]
[107.50000000 142.63804626]
[107.50000000 157.63804626]
[117.78176880 169.95327759]
[114.42288971 185.64077759]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 98]
[4 97]
[5 96]
[6 95]
[9 22]
[10 21]
[11 20]
[12 19]
[24 94]
[25 93]
[26 92]
[27 91]
[36 83]
[37 82]
[38 81]
[40 79]
[41 78]
[42 77]
[43 76]
[44 75]
[45 74]
[46 73]
[49 70]
[50 69]
[54 64]
[55 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
