%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACAGCAGCGGGUUAAGUGCCGCCCGCGCGGAGACGGCUGAGUCCGGAGCCGCGGCUCCGAGCUCGCAUUCGGAUCCGCUAGAGCAGGAAGAUGGCGACGGACGGCGCGAGCUGCGAGCCCGACUUGUCCCGGGCCCCGGAGGACGCGGCGGGGGCCGCGGCGGAGGCGGCGAAAAAAGAGUUUGAUGUGG\
) } def
/len { sequence length } bind def

/coor [
[7.82362938 508.76962280]
[-0.59261030 509.26486206]
[-9.00588894 508.74984741]
[-17.29540253 507.23242188]
[-25.34217072 504.73477173]
[-33.03075409 501.29315186]
[-41.32620621 513.79058838]
[-43.46999741 522.68585205]
[-49.85977173 526.42242432]
[-58.35754395 538.78314209]
[-66.85531616 551.14385986]
[-75.35308075 563.50463867]
[-83.85085297 575.86535645]
[-92.34862518 588.22607422]
[-87.04415131 602.80834961]
[-91.35632324 617.71423340]
[-103.62702942 627.21209717]
[-119.13793182 627.64984131]
[-131.92477417 618.85913086]
[-137.07073975 604.22015381]
[-132.59712219 589.36199951]
[-120.22409821 579.99780273]
[-104.70936584 579.72833252]
[-96.21159363 567.36761475]
[-87.71382141 555.00683594]
[-79.21605682 542.64611816]
[-70.71828461 530.28533936]
[-62.22051239 517.92462158]
[-53.82362747 505.49514771]
[-45.52817535 492.99771118]
[-60.57505417 475.71463013]
[-69.27114105 454.49581909]
[-70.68299103 431.59140015]
[-64.65018463 409.43386841]
[-51.80349350 390.37969971]
[-33.49894333 376.45886230]
[-11.67468071 369.15850830]
[11.35424232 369.26400757]
[15.45227909 354.83465576]
[19.55031586 340.40530396]
[23.64835358 325.97598267]
[16.19263458 313.13278198]
[20.14307594 298.44097900]
[33.66476059 290.70782471]
[37.76279831 276.27847290]
[41.86083221 261.84912109]
[40.46058655 258.59753418]
[40.57486343 254.50352478]
[42.58355713 250.29049683]
[46.52717209 246.82466125]
[51.32467270 232.61254883]
[56.12217331 218.40043640]
[60.91967392 204.18833923]
[65.71717072 189.97622681]
[70.51467896 175.76411438]
[75.31217957 161.55201721]
[80.10968018 147.33990479]
[84.90718079 133.12780762]
[89.70468140 118.91569519]
[94.50218201 104.70359039]
[88.44931030 105.88444519]
[81.82108307 104.34574890]
[75.58100128 99.95423889]
[70.70568085 92.88088989]
[68.09548187 83.59549713]
[61.27474976 70.23594666]
[54.45401764 56.87639236]
[47.63328552 43.51684189]
[32.86779022 38.55519485]
[26.14090919 24.90954781]
[30.96207619 10.86348248]
[24.14134407 -2.49606872]
[13.59941769 -5.25150776]
[6.46740055 -13.19619465]
[4.92620134 -23.53854370]
[9.24677086 -32.81888199]
[2.86450052 -46.39336395]
[-3.51777005 -59.96784973]
[-10.01030827 -73.48993683]
[-16.61268425 -86.95874023]
[-30.52067757 -95.64780426]
[-29.67938805 -112.02536011]
[-14.95426273 -119.24358368]
[-1.49324894 -109.87698364]
[-3.14388275 -93.56111908]
[3.45849347 -80.09231567]
[9.23437977 -75.46305084]
[10.05671406 -66.35012054]
[16.43898392 -52.77563477]
[22.82125473 -39.20115280]
[39.46129990 -29.36973000]
[37.50089264 -9.31680202]
[44.32162857 4.04274940]
[58.52601624 8.37529755]
[65.63352203 21.82661819]
[60.99283600 36.69610977]
[67.81356812 50.05566025]
[74.63430023 63.41521072]
[81.45503235 76.77476501]
[88.66970825 78.82378387]
[92.76798248 64.39450073]
[107.19719696 68.49301910]
[103.09905243 82.92182159]
[110.31372833 84.97084045]
[123.13829041 77.19068909]
[130.92387390 63.41769791]
[145.81846619 63.43152237]
[158.64302063 55.65137482]
[171.46759033 47.87122345]
[184.29214478 40.09107590]
[188.15988159 25.00206184]
[201.27664185 17.29457474]
[215.63787842 21.07486534]
[228.46243286 13.29471684]
[236.24801636 -0.47827339]
[251.14260864 -0.46444815]
[263.96716309 -8.24459743]
[272.44000244 -24.58580017]
[289.98019409 -24.29920006]
[302.67639160 -32.28706360]
[315.37261963 -40.27492905]
[328.06884766 -48.26279068]
[340.76507568 -56.25065613]
[341.66546631 -71.74158478]
[351.52529907 -83.72339630]
[366.55319214 -87.58883667]
[380.97067261 -81.85157013]
[389.23388672 -68.71768951]
[388.16546631 -53.23743820]
[378.17626953 -41.36329269]
[363.10729980 -37.66110229]
[348.75292969 -43.55443192]
[336.05670166 -35.56657028]
[323.36047363 -27.57870674]
[310.66427612 -19.59084320]
[297.96804810 -11.60297966]
[294.97338867 0.12684143]
[284.44827271 6.88318872]
[271.74731445 4.57996035]
[258.92276001 12.36010933]
[252.05447388 25.57661057]
[236.24258423 26.11927414]
[223.41802979 33.89942551]
[220.13662720 48.38279343]
[207.24153137 56.45566177]
[192.07229614 52.91563416]
[179.24774170 60.69578171]
[166.42317200 68.47592926]
[153.59861755 76.25608063]
[146.73033142 89.47257996]
[130.91844177 90.01524353]
[118.09387970 97.79539490]
[108.71428680 109.50109100]
[103.91678619 123.71319580]
[99.11928558 137.92530823]
[94.32178497 152.13740540]
[89.52428436 166.34951782]
[84.72678375 180.56163025]
[79.92928314 194.77372742]
[75.13178253 208.98583984]
[70.33428192 223.19793701]
[65.53678131 237.41004944]
[60.73927689 251.62216187]
[56.29018402 265.94714355]
[52.19214630 280.37649536]
[48.09410858 294.80584717]
[55.53259659 308.49185181]
[51.17105484 323.06689453]
[38.07770157 330.07400513]
[33.97966385 344.50335693]
[29.88162804 358.93270874]
[25.78359032 373.36206055]
[33.42948151 377.00582886]
[40.58308029 381.53717041]
[47.14187241 386.89059448]
[53.01192856 392.98889160]
[58.10924911 399.74420166]
[62.36096573 407.05926514]
[65.70638275 414.82876587]
[68.09783936 422.94097900]
[69.50139618 431.27926636]
[69.89731598 439.72381592]
[69.28033447 448.15332031]
[67.65973663 456.44674683]
[65.05921173 464.48504639]
[61.51651382 472.15295410]
[57.08290482 479.34048462]
[51.82242203 485.94464111]
[45.81094742 491.87081909]
[39.13511276 497.03427124]
[31.89105988 501.36111450]
[24.18304062 504.78958130]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 30]
[7 29]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[38 172]
[39 171]
[40 170]
[41 169]
[44 166]
[45 165]
[46 164]
[50 163]
[51 162]
[52 161]
[53 160]
[54 159]
[55 158]
[56 157]
[57 156]
[58 155]
[59 154]
[60 153]
[65 99]
[66 98]
[67 97]
[68 96]
[71 93]
[72 92]
[76 90]
[77 89]
[78 88]
[79 86]
[80 85]
[104 152]
[105 151]
[107 149]
[108 148]
[109 147]
[110 146]
[113 143]
[114 142]
[116 140]
[117 139]
[119 136]
[120 135]
[121 134]
[122 133]
[123 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
