%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:09:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUCUGCUCAUUCCGCGGCGUCGGCUGCGGCUGCAGUGGUGGUGGCGGGUACCGCACGGGGUAUGGUCCCCGGGUCCGAGGGCCCGGCCCGCGCCGGGAGCGUGGUGGCCGACGUGGUGUUUGUGAUUGAGGGUACGGCCAACCUGGGACCCUACUUCGAGG\
) } def
/len { sequence length } bind def

/coor [
[-87.87152863 238.75915527]
[-95.49673462 241.75280762]
[-103.61593628 242.61199951]
[-111.64499664 241.28945923]
[-119.01014709 237.89437866]
[-129.81796265 248.29586792]
[-140.62579346 258.69735718]
[-151.43360901 269.09884644]
[-148.95657349 279.55966187]
[-151.05422974 290.02050781]
[-157.27767944 298.58648682]
[-166.43698120 303.73477173]
[-176.82827759 304.58520508]
[-186.55049133 301.04998779]
[-197.93789673 310.81353760]
[-209.32530212 320.57708740]
[-220.71270752 330.34063721]
[-232.10011292 340.10418701]
[-243.48751831 349.86773682]
[-254.87493896 359.63128662]
[-259.80609131 375.27148438]
[-275.87286377 378.55642700]
[-286.54714966 366.10684204]
[-280.84811401 350.72979736]
[-264.63848877 348.24389648]
[-253.25108337 338.48034668]
[-241.86366272 328.71679688]
[-230.47625732 318.95321655]
[-219.08885193 309.18966675]
[-207.70144653 299.42611694]
[-196.31404114 289.66256714]
[-196.30435181 270.22097778]
[-181.82737732 256.79421997]
[-161.83509827 258.29101562]
[-151.02728271 247.88954163]
[-140.21945190 237.48805237]
[-129.41163635 227.08656311]
[-131.63092041 222.20472717]
[-132.95260620 217.00755310]
[-133.33508301 211.65859985]
[-147.79887390 207.68388367]
[-162.26268005 203.70915222]
[-176.72648621 199.73443604]
[-191.19029236 195.75971985]
[-205.65408325 191.78498840]
[-220.25357056 198.43591309]
[-234.49024963 191.04020691]
[-237.44296265 175.27120972]
[-226.84664917 163.22557068]
[-210.82989502 164.14364624]
[-201.67936707 177.32118225]
[-187.21556091 181.29591370]
[-172.75175476 185.27062988]
[-158.28796387 189.24536133]
[-143.82415771 193.22007751]
[-129.36035156 197.19479370]
[-107.10072327 181.76097107]
[-80.96363068 190.29255676]
[-68.07008362 182.62727356]
[-55.17654037 174.96200562]
[-42.28299713 167.29672241]
[-29.38945389 159.63143921]
[-16.49590874 151.96615601]
[-3.60236526 144.30087280]
[3.38370585 131.14625549]
[19.19981956 130.74485779]
[32.09336472 123.07958221]
[44.98690796 115.41429901]
[57.88045120 107.74901581]
[70.77399445 100.08374023]
[83.66754150 92.41845703]
[90.45178223 79.04034424]
[89.01727295 64.10909271]
[87.58276367 49.17784500]
[86.14825439 34.24659348]
[84.71375275 19.31534576]
[83.27924347 4.38409758]
[73.32366180 -8.64734364]
[79.88033295 -23.67871284]
[96.20431519 -25.24702644]
[105.50289917 -11.73893833]
[98.21048737 2.94958925]
[99.64499664 17.88083839]
[101.07950592 32.81208801]
[102.51401520 47.74333572]
[103.94852448 62.67458344]
[105.38303375 77.60583496]
[112.63363647 79.52383423]
[127.13484192 83.35984039]
[134.38545227 85.27784729]
[143.01522827 73.00891113]
[151.64500427 60.73996735]
[160.27479553 48.47102737]
[168.90457153 36.20208740]
[177.53434753 23.93314552]
[176.20976257 7.94486761]
[187.98240662 -2.95396638]
[203.82130432 -0.40270382]
[211.57620239 13.64154530]
[205.29823303 28.40523529]
[189.80328369 32.56292725]
[181.17350769 44.83186722]
[172.54373169 57.10080719]
[163.91395569 69.36974335]
[155.28416443 81.63868713]
[146.65438843 93.90763092]
[153.18113708 107.41324615]
[168.15637207 108.27478790]
[183.13160706 109.13633728]
[198.10684204 109.99788666]
[213.08207703 110.85943604]
[228.05731201 111.72098541]
[243.04011536 112.43905640]
[258.02911377 113.01360321]
[263.01968384 98.74525452]
[271.99554443 86.58279419]
[284.15853882 77.60769653]
[298.42721558 72.61802673]
[313.53274536 72.05744934]
[328.13198853 75.97582245]
[340.92675781 84.02472687]
[350.77938843 95.48845673]
[356.81378174 109.34765625]
[358.49337769 124.36998749]
[355.66876221 139.21968079]
[348.59118652 152.57627869]
[337.88992310 163.25216675]
[324.51654053 170.29801941]
[309.66018677 173.08732605]
[294.64187622 171.37208557]
[280.79705811 165.30479431]
[269.35675049 155.42497253]
[261.33825684 142.61109924]
[257.45455933 128.00259399]
[242.46557617 127.42805481]
[235.62928772 130.32774353]
[227.19577026 126.69622040]
[212.22053528 125.83467102]
[197.24530029 124.97312164]
[182.27005005 124.11157990]
[167.29481506 123.25003052]
[152.31958008 122.38848114]
[131.67991638 135.47294617]
[110.98123932 136.59942627]
[95.80127716 128.55569458]
[89.24918365 116.28559113]
[91.33281708 105.31200409]
[78.43927765 112.97727966]
[65.54573059 120.64256287]
[52.65218735 128.30784607]
[39.75864410 135.97312927]
[26.86509895 143.63839722]
[18.95679665 157.34129333]
[4.06291485 157.19442749]
[-8.83062935 164.85971069]
[-21.72417259 172.52497864]
[-34.61771774 180.19026184]
[-47.51126099 187.85554504]
[-60.40480423 195.52082825]
[-73.29834747 203.18611145]
[-72.08084106 211.42480469]
[-73.09072876 219.66406250]
[-76.24118805 227.31439209]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 37]
[6 36]
[7 35]
[8 34]
[14 31]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
[45 51]
[58 160]
[59 159]
[60 158]
[61 157]
[62 156]
[63 155]
[64 154]
[66 152]
[67 151]
[68 150]
[69 149]
[70 148]
[71 147]
[72 87]
[73 86]
[74 85]
[75 84]
[76 83]
[77 82]
[90 106]
[91 105]
[92 104]
[93 103]
[94 102]
[95 101]
[107 142]
[108 141]
[109 140]
[110 139]
[111 138]
[112 137]
[113 135]
[114 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
