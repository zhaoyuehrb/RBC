%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:15:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGGUGGGAAGUACCUGCCGCCAUCUUGCUCACCAGCCUCCAAAAUGCGGCUGGGGCUCCUGAGCGUGGCGCUGUUGUUUGUGGGGAGCUCUCACUUAUACUCAGACCACUACUCGCCCUCUGGAAGGCACAGGCUCGGCCCCU\
) } def
/len { sequence length } bind def

/coor [
[168.40229797 240.72167969]
[160.81057739 227.78469849]
[153.21885681 214.84770203]
[145.62712097 201.91072083]
[138.03540039 188.97372437]
[130.44366455 176.03674316]
[122.85194397 163.09974670]
[115.26021576 150.16276550]
[107.66848755 137.22576904]
[100.07675934 124.28878784]
[99.25189972 139.26608276]
[92.02020264 152.40773010]
[79.80928802 161.11941528]
[65.02969360 163.68136597]
[50.59906006 159.58786011]
[39.36613464 149.64695740]
[33.54840088 135.82112122]
[34.29433823 120.83967590]
[41.45668793 107.66011810]
[53.62153625 98.88421631]
[68.38742065 96.24441528]
[82.84054565 100.26244354]
[69.44665527 93.50939178]
[56.05276871 86.75633240]
[42.65888214 80.00328064]
[29.26499367 73.25022125]
[15.87110519 66.49716187]
[10.52115059 66.80955505]
[6.05905819 65.16188812]
[3.09235358 62.23781967]
[1.86031938 58.86423874]
[-11.07666969 51.27251053]
[-24.01365852 43.68078232]
[-36.95064545 36.08905411]
[-49.88763428 28.49732971]
[-65.00347137 32.25886536]
[-78.01527405 24.37548447]
[-81.50817108 9.94166088]
[-94.44515991 2.34993339]
[-107.38214874 -5.24179363]
[-120.31913757 -12.83352089]
[-129.37281799 -14.49778938]
[-133.44770813 -20.72617531]
[-146.22064209 -28.59078598]
[-158.99357605 -36.45539474]
[-172.85571289 -29.68449783]
[-188.17521667 -31.50558090]
[-200.06369019 -41.33753967]
[-204.72758484 -56.04303741]
[-200.67866516 -70.92960358]
[-189.20890808 -81.24697876]
[-173.97828674 -83.70293427]
[-159.84683228 -77.51378632]
[-151.32383728 -64.65446472]
[-151.12896729 -49.22833252]
[-138.35603333 -41.36372375]
[-125.58309937 -33.49911118]
[-112.72740936 -25.77050972]
[-99.79042053 -18.17878151]
[-86.85343170 -10.58705521]
[-73.91644287 -2.99532843]
[-59.61204529 -6.98528194]
[-46.38395309 0.52951628]
[-42.29590988 15.56033993]
[-29.35892105 23.15206718]
[-16.42193222 30.74379349]
[-3.48494267 38.33552170]
[9.45204639 45.92724991]
[22.62416077 53.10327530]
[36.01804733 59.85633469]
[49.41193771 66.60939026]
[62.80582428 73.36244202]
[76.19971466 80.11550140]
[89.59359741 86.86856079]
[104.35010529 84.17678070]
[114.49698639 73.12957764]
[124.64387512 62.08237457]
[128.19715881 44.04698563]
[145.08323669 39.37891388]
[154.99336243 28.11882973]
[164.90348816 16.85874367]
[164.08061218 1.30366004]
[174.29129028 -9.97449303]
[189.12576294 -10.66310883]
[199.03587341 -21.92319298]
[208.94599915 -33.18327713]
[218.85612488 -44.44336319]
[228.76623535 -55.70344543]
[229.18435669 -71.74105072]
[242.07011414 -81.29808807]
[257.53863525 -77.04322052]
[263.72384644 -62.24041748]
[255.88092041 -48.24512100]
[240.02632141 -45.79332733]
[230.11621094 -34.53324127]
[220.20608521 -23.27315712]
[210.29595947 -12.01307297]
[200.38584900 -0.75298810]
[201.58705139 14.04879189]
[191.69717407 25.60929298]
[176.16355896 26.76886559]
[166.25344849 38.02894974]
[156.34332275 49.28903580]
[156.78938293 61.42074203]
[148.56492615 70.88917542]
[135.69108582 72.22926331]
[125.54418945 83.27646637]
[115.39730072 94.32366943]
[130.00477600 90.91458130]
[141.24392700 100.84842682]
[139.65493774 115.76402283]
[126.57521057 123.10711670]
[113.01374817 116.69705963]
[120.60547638 129.63404846]
[128.19720459 142.57102966]
[135.78892517 155.50802612]
[143.38066101 168.44500732]
[150.97238159 181.38200378]
[158.56411743 194.31898499]
[166.15583801 207.25598145]
[173.74755859 220.19296265]
[181.33929443 233.12995911]
[194.71765137 235.01455688]
[204.41110229 244.14349365]
[207.01647949 257.00262451]
[201.79818726 268.82781982]
[209.11361694 281.92303467]
[214.68005371 285.69436646]
[217.09152222 290.93685913]
[216.44812012 295.73294067]
[223.20117188 309.12680054]
[229.95423889 322.52069092]
[245.30827332 324.02310181]
[257.39846802 333.60592651]
[262.36688232 348.21136475]
[258.62814331 363.17883301]
[247.37521362 373.73226929]
[232.19891357 376.50415039]
[217.94190979 370.60995483]
[209.15357971 357.93048096]
[208.63824463 342.51171875]
[216.56034851 329.27377319]
[209.80728149 315.87988281]
[203.05422974 302.48599243]
[196.01840210 289.23843384]
[188.70298767 276.14324951]
[172.36610413 272.28390503]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 122]
[2 121]
[3 120]
[4 119]
[5 118]
[6 117]
[7 116]
[8 115]
[9 114]
[10 113]
[22 74]
[23 73]
[24 72]
[25 71]
[26 70]
[27 69]
[31 68]
[32 67]
[33 66]
[34 65]
[35 64]
[38 61]
[39 60]
[40 59]
[41 58]
[43 57]
[44 56]
[45 55]
[75 108]
[76 107]
[77 106]
[79 103]
[80 102]
[81 101]
[84 98]
[85 97]
[86 96]
[87 95]
[88 94]
[126 146]
[127 145]
[130 144]
[131 143]
[132 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
