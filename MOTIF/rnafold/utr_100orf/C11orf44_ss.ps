%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:33:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUGUCCUUGUGAGUUUCUGACAUGGUCCUCCUCUGUCUCUUCCUCGCCAGCUUGGCUGCCACCCCUCGGGCUGGGGUCACUGGGGCAUGGCCCACCAGCGGCCUCUCCAUUCUGGCCCAGC\
) } def
/len { sequence length } bind def

/coor [
[128.26666260 176.63505554]
[116.78462982 186.28715515]
[102.59501648 191.15077209]
[87.60619354 190.57182312]
[73.83401489 184.62815857]
[63.13071060 174.11915588]
[56.93577194 160.45816040]
[56.08236313 145.48245239]
[60.68525314 131.20613098]
[70.12540436 119.54922485]
[83.13160706 112.08002472]
[68.15085602 112.83975983]
[53.17011261 113.59950256]
[38.18936539 114.35923767]
[23.20861626 115.11897278]
[17.23137093 129.12019348]
[5.81436157 139.09710693]
[-8.74267197 143.11119080]
[-23.53818893 140.41792297]
[-35.64717484 131.60418701]
[-42.69939041 118.46144867]
[-57.68013763 119.22119141]
[-72.66088867 119.98092651]
[-87.64163208 120.74066162]
[-102.79437256 131.11016846]
[-118.11370850 122.65007019]
[-133.07040405 123.78906250]
[-146.29614258 133.48503113]
[-161.19493103 126.63243103]
[-162.44017029 110.28063202]
[-148.75086975 101.25096130]
[-134.20939636 108.83237457]
[-119.25270844 107.69337463]
[-111.07522583 98.68293762]
[-98.54550171 97.67369080]
[-88.40137482 105.75991821]
[-73.42062378 105.00017548]
[-58.43987656 104.24044037]
[-43.45912933 103.48070526]
[-37.77272415 89.69193268]
[-26.61753654 79.69837189]
[-12.17040443 75.52207947]
[2.71804118 78.04286957]
[15.08582211 86.81356049]
[22.44887924 100.13822937]
[37.42962646 99.37848663]
[52.41037369 98.61875153]
[67.39112091 97.85901642]
[82.37187195 97.09927368]
[92.84326172 86.35916901]
[93.22325134 71.36398315]
[93.60324097 56.36879730]
[93.98323822 41.37361145]
[94.36322784 26.37842369]
[94.74321747 11.38323784]
[95.12320709 -3.61194801]
[95.50319672 -18.60713387]
[82.35913086 -26.55251312]
[74.96278381 -40.01317978]
[75.30373383 -55.36828995]
[83.29027557 -68.48738861]
[96.77406311 -75.84150696]
[112.12802124 -75.45242310]
[125.22202301 -67.42480469]
[132.53384399 -53.91802979]
[132.09663391 -38.56536102]
[124.02800751 -25.49658775]
[110.49838257 -18.22714424]
[110.11839294 -3.23195720]
[109.73840332 11.76322937]
[109.35841370 26.75841522]
[108.97842407 41.75360107]
[108.59842682 56.74878693]
[108.21843719 71.74397278]
[107.83844757 86.73915863]
[116.86904907 98.71614838]
[131.39019775 102.47593689]
[145.91136169 106.23572540]
[160.43251038 109.99551392]
[174.95367432 113.75530243]
[189.47482300 117.51509094]
[208.53117371 111.17720795]
[221.87574768 125.07732391]
[236.56869507 128.09680176]
[251.26165771 131.11628723]
[265.95458984 134.13575745]
[280.64755249 137.15524292]
[289.49069214 130.57855225]
[300.27639771 130.03132629]
[309.36001587 135.45292664]
[313.80792236 144.80679321]
[328.32907104 148.56658936]
[342.85021973 152.32637024]
[357.37139893 156.08616638]
[369.99887085 146.86222839]
[385.59753418 147.96466064]
[396.80221558 158.87289429]
[398.32235718 174.43641663]
[389.44021606 187.30659485]
[374.34967041 191.40653992]
[360.17599487 184.80036926]
[353.61160278 170.60731506]
[339.09045410 166.84753418]
[324.56927490 163.08773804]
[310.04812622 159.32795715]
[291.94577026 165.93067932]
[277.62808228 151.84819031]
[262.93511963 148.82870483]
[248.24217224 145.80923462]
[233.54922485 142.78974915]
[218.85627747 139.77027893]
[210.74353027 146.20939636]
[200.20057678 147.07655334]
[190.75811768 141.83528137]
[185.71504211 132.03625488]
[171.19387817 128.27645874]
[156.67272949 124.51667023]
[142.15156555 120.75688171]
[127.63041687 116.99709320]
[113.10926056 113.23730469]
[125.50211334 121.68817902]
[134.01496887 134.03852844]
[137.50292969 148.62736511]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 49]
[12 48]
[13 47]
[14 46]
[15 45]
[21 39]
[22 38]
[23 37]
[24 36]
[26 33]
[27 32]
[50 75]
[51 74]
[52 73]
[53 72]
[54 71]
[55 70]
[56 69]
[57 68]
[76 120]
[77 119]
[78 118]
[79 117]
[80 116]
[81 115]
[83 111]
[84 110]
[85 109]
[86 108]
[87 107]
[91 105]
[92 104]
[93 103]
[94 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
