%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:24:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCAGAGAUGAAUAAACAAAGAGGAACCUUCUCAGAAGUGAGUCUGGCCCAGGACCCAAAGCGGCAGCAAAGGAAACCUAAAGGCAAUAAAAGCUCCAUUUCAGGAA\
) } def
/len { sequence length } bind def

/coor [
[93.73527527 253.75419617]
[85.69954681 240.66516113]
[85.30096436 225.31144714]
[92.64673615 211.82310486]
[105.76088715 203.82844543]
[105.32461548 188.83479309]
[104.88835144 173.84114075]
[104.45207977 158.84748840]
[104.01580811 143.85383606]
[103.57953644 128.86018372]
[98.04995728 123.79325104]
[91.24447632 137.16058350]
[87.56677246 151.70274353]
[74.38259125 158.85656738]
[60.18609238 154.01307678]
[54.12364578 140.29277039]
[60.10110092 126.53523254]
[74.26747131 121.60401917]
[86.99079895 113.65940094]
[81.46121979 108.59246826]
[66.48659515 109.46464539]
[51.51197052 110.33681488]
[36.53734970 111.20899200]
[21.56272697 112.08116150]
[6.10195494 119.03823853]
[-4.86320162 106.10758972]
[4.52665567 91.99139404]
[20.69055367 97.10653687]
[35.66517639 96.23436737]
[50.63979721 95.36219025]
[65.61441803 94.49002075]
[80.58904266 93.61785126]
[85.51380157 79.44933319]
[74.30842590 69.47740173]
[63.10305023 59.50545883]
[51.89767456 49.53352356]
[36.13668060 50.70255280]
[24.22005653 40.32133484]
[23.21772575 24.54886436]
[33.72435379 12.74266434]
[49.50653839 11.90714550]
[61.20099640 22.53800583]
[61.86960983 38.32814789]
[73.07498932 48.30008316]
[84.28036499 58.27202225]
[95.48574066 68.24395752]
[110.44609070 67.15409088]
[120.08790588 55.66342545]
[129.72972107 44.17275620]
[132.16358948 24.26626396]
[150.39724731 18.11265945]
[159.35461426 6.08081198]
[168.31199646 -5.95103598]
[165.42953491 -23.12969589]
[175.60060120 -36.85495758]
[192.20880127 -39.01008987]
[200.81243896 -51.29737091]
[195.92163086 -65.90511322]
[200.51640320 -80.42204285]
[212.63490295 -89.34426880]
[227.50541687 -89.41889191]
[236.10906982 -101.70617676]
[236.99853516 -118.08118439]
[251.74484253 -125.25604248]
[265.17822266 -115.84988403]
[263.47961426 -99.53894043]
[248.39634705 -93.10252380]
[239.79269409 -80.81524658]
[244.80859375 -66.81600189]
[240.56921387 -52.37676620]
[228.49926758 -43.09400177]
[213.09971619 -42.69372177]
[204.49607849 -30.40644264]
[208.49429321 -18.06277275]
[204.54794312 -5.49731350]
[193.89883423 2.58044410]
[180.34384155 3.00634265]
[171.38647461 15.03819084]
[162.42909241 27.07003784]
[164.83152771 37.19649887]
[161.10676575 47.15156937]
[152.28724670 53.47228622]
[141.22038269 53.81457138]
[131.57856750 65.30523682]
[121.93675995 76.79590607]
[134.68272400 68.88765717]
[149.49841309 66.54340363]
[164.06323242 70.13034058]
[176.09588623 79.08663177]
[183.71170044 92.00945282]
[185.71780396 106.87469482]
[181.79998779 121.35401917]
[172.57189941 133.17950439]
[159.47892761 140.49894714]
[144.57183838 142.16586304]
[130.18553162 137.91920471]
[118.57318878 128.42390442]
[119.00946045 143.41755676]
[119.44573212 158.41120911]
[119.88200378 173.40487671]
[120.31827545 188.39852905]
[120.75454712 203.39218140]
[134.31135559 210.61079407]
[142.42898560 223.64918518]
[142.92381287 239.00010681]
[135.66273499 252.53422546]
[122.59896088 260.61093140]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 102]
[6 101]
[7 100]
[8 99]
[9 98]
[10 97]
[20 32]
[21 31]
[22 30]
[23 29]
[24 28]
[33 46]
[34 45]
[35 44]
[36 43]
[47 85]
[48 84]
[49 83]
[51 79]
[52 78]
[53 77]
[56 73]
[57 72]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
