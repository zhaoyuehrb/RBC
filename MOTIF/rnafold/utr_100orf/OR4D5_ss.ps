%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAUCCAGCAAAUCAUUCCCAGGUGGCAGGAUUUGUUCUACUGGGGCUCUCUCAGGUUUGGGAGCUUCGGUUUGUUUUCUUCACUGUUUUCUCUGCUG\
) } def
/len { sequence length } bind def

/coor [
[79.05113983 243.36535645]
[71.23950958 256.77276611]
[57.02556610 262.99716187]
[41.87485504 259.64520264]
[31.61314201 248.00575256]
[30.18625832 232.55442810]
[38.14287186 219.23257446]
[52.42350388 213.16270447]
[55.66376877 198.51686096]
[58.90403748 183.87101746]
[62.14430618 169.22518921]
[65.38457489 154.57934570]
[52.84223938 162.80673218]
[37.88872147 163.98666382]
[24.21124649 157.82820129]
[15.18240261 145.84988403]
[13.02851963 131.00534058]
[18.28070068 116.95490265]
[29.64386368 107.16314697]
[44.31608582 104.04450989]
[58.67949677 108.36798859]
[69.19236755 119.06749725]
[73.26242065 133.50354004]
[80.42321777 120.32313538]
[87.58401489 107.14273834]
[87.41364288 93.16194153]
[99.23558807 85.69646454]
[106.39638519 72.51606750]
[113.55718231 59.33566284]
[120.71797943 46.15526199]
[127.87877655 32.97486115]
[134.83372498 19.68469238]
[141.58116150 6.28796673]
[130.34338379 -4.72711515]
[123.04359436 -18.64562988]
[120.37780762 -34.11491394]
[122.59233093 -49.63570786]
[129.46107483 -63.70745850]
[140.30856323 -74.97339630]
[154.07632446 -82.35134888]
[169.42620850 -85.13767242]
[184.87040710 -83.07437134]
[191.19793701 -96.67446136]
[197.52545166 -110.27454376]
[203.85298157 -123.87463379]
[210.18051147 -137.47473145]
[216.50802612 -151.07481384]
[222.83555603 -164.67489624]
[229.16308594 -178.27499390]
[235.49061584 -191.87507629]
[241.81813049 -205.47517395]
[248.14566040 -219.07525635]
[254.47319031 -232.67535400]
[246.82119751 -246.17448425]
[248.59864807 -261.58941650]
[259.12207031 -272.99279785]
[274.34500122 -275.99978638]
[288.41390991 -269.45416260]
[295.91900635 -255.87280273]
[293.97445679 -240.47805786]
[283.32794189 -229.18949890]
[268.07327271 -226.34782410]
[261.74575806 -212.74772644]
[255.41822815 -199.14764404]
[249.09069824 -185.54756165]
[242.76316833 -171.94746399]
[236.43565369 -158.34738159]
[230.10812378 -144.74728394]
[223.78059387 -131.14720154]
[217.45306396 -117.54711151]
[211.12554932 -103.94702148]
[204.79801941 -90.34693146]
[198.47048950 -76.74684143]
[209.19857788 -67.22889709]
[216.79763794 -55.04708099]
[220.63679504 -41.19561768]
[220.39245605 -26.80803108]
[216.07560730 -13.06438255]
[208.03158569 -1.09449327]
[196.91256714 8.11493874]
[183.62461853 13.80167294]
[169.25390625 15.49100685]
[154.97787476 13.03539276]
[148.23045349 26.43211746]
[148.02946472 33.95442581]
[141.05917358 40.13566208]
[133.89837646 53.31606293]
[126.73757935 66.49645996]
[119.57678223 79.67686462]
[112.41598511 92.85726166]
[112.58635712 106.83805847]
[100.76441193 114.30353546]
[93.60361481 127.48393250]
[86.44281769 140.66433716]
[86.55701447 151.16514587]
[80.03041077 157.81961060]
[76.79014587 172.46545410]
[73.54988098 187.11129761]
[70.30960846 201.75714111]
[67.06934357 216.40296936]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 100]
[9 99]
[10 98]
[11 97]
[12 96]
[23 94]
[24 93]
[25 92]
[27 90]
[28 89]
[29 88]
[30 87]
[31 86]
[32 84]
[33 83]
[42 73]
[43 72]
[44 71]
[45 70]
[46 69]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
