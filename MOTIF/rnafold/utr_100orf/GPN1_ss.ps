%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGCGGAAGUUUCUCUACCCAUGCGGUGUCUCUAUGGUCGGGUGGGUGGGGCCAGGAGGAAGAUGGCGGCGUCCGCAGCUGCCGCUGAGCUCCAGGCUUCUGGGGGUCCGCGGCACCCAG\
) } def
/len { sequence length } bind def

/coor [
[234.75297546 188.65715027]
[234.67726135 181.45750427]
[221.62298584 174.06927490]
[208.56871033 166.68106079]
[195.51443481 159.29283142]
[182.46015930 151.90461731]
[169.40586853 144.51640320]
[156.35159302 137.12817383]
[141.46424866 137.59303284]
[133.26515198 124.06213379]
[120.21087646 116.67391205]
[107.15659332 109.28569031]
[100.80437469 115.53003693]
[89.81963348 116.48861694]
[78.74362946 109.30930328]
[63.86779022 107.38332367]
[48.99194717 105.45735168]
[34.11610794 103.53137207]
[19.24026871 101.60540009]
[4.36442852 99.67942047]
[-10.51141167 97.75344849]
[-25.38725090 95.82747650]
[-40.26309204 93.90149689]
[-54.94249344 99.80283356]
[-66.57096100 90.49541473]
[-81.44680023 88.56944275]
[-96.32263947 86.64346313]
[-102.74397278 88.89447021]
[-108.44583893 87.66258240]
[-111.90719604 84.21623993]
[-126.66416168 81.52702332]
[-140.62318420 89.43432617]
[-155.45431519 83.31739807]
[-159.78041077 67.86862946]
[-150.28283691 54.93898773]
[-134.24732971 54.44699097]
[-123.97495270 66.77005768]
[-109.21797943 69.45926666]
[-94.39666748 71.76762390]
[-79.52082825 73.69360352]
[-64.64498138 75.61957550]
[-51.02960205 69.58048248]
[-38.33711624 79.02565765]
[-23.46127701 80.95162964]
[-8.58543587 82.87760925]
[6.29040384 84.80358124]
[21.16624451 86.72956085]
[36.04208374 88.65553284]
[50.91792297 90.58151245]
[65.79376221 92.50748444]
[80.66960144 94.43345642]
[91.67788696 84.24436188]
[90.90570068 69.26425171]
[90.13352203 54.28413773]
[89.36134338 39.30402756]
[75.92008972 31.73195267]
[68.72657013 18.08436012]
[70.07620239 2.71614456]
[79.53833008 -9.46875095]
[94.09362030 -14.58217144]
[109.09753418 -10.99244213]
[119.76237488 0.15496637]
[122.68502808 15.30295658]
[116.93289185 29.61786079]
[104.34145355 38.53184509]
[105.11363220 53.51195526]
[105.88581848 68.49206543]
[106.65799713 83.47217560]
[114.54481506 96.23141479]
[127.59909821 103.61963654]
[140.65338135 111.00785828]
[156.47445679 111.07144165]
[163.73982239 124.07389832]
[176.79409790 131.46211243]
[189.84837341 138.85034180]
[202.90264893 146.23855591]
[215.95693970 153.62678528]
[229.01121521 161.01499939]
[242.06549072 168.40322876]
[265.74661255 165.52474976]
[277.84786987 185.26855469]
[291.88363647 190.55984497]
[305.91940308 195.85112000]
[319.95513916 201.14241028]
[333.99090576 206.43368530]
[348.02664185 211.72496033]
[363.66903687 209.35308838]
[372.84881592 221.08258057]
[386.88458252 226.37385559]
[402.52697754 224.00198364]
[411.70675659 235.73147583]
[425.74249268 241.02275085]
[439.77825928 246.31402588]
[453.81399536 251.60531616]
[467.84976196 256.89660645]
[481.88549805 262.18786621]
[497.97039795 258.99276733]
[508.57492065 271.50177002]
[502.79010010 286.84674072]
[486.56683350 289.24206543]
[476.59423828 276.22363281]
[462.55847168 270.93234253]
[448.52273560 265.64105225]
[434.48696899 260.34979248]
[420.45123291 255.05850220]
[406.41546631 249.76722717]
[391.77700806 252.51757812]
[381.59329224 240.40960693]
[367.55752563 235.11833191]
[352.91906738 237.86868286]
[342.73535156 225.76071167]
[328.69961548 220.46943665]
[314.66384888 215.17816162]
[300.62811279 209.88687134]
[286.59234619 204.59559631]
[272.55661011 199.30430603]
[267.36584473 203.75144958]
[260.98077393 206.33352661]
[254.05383301 206.75096130]
[247.30429077 204.92713928]
[241.44358826 201.01997375]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 79]
[3 78]
[4 77]
[5 76]
[6 75]
[7 74]
[8 73]
[10 71]
[11 70]
[12 69]
[15 51]
[16 50]
[17 49]
[18 48]
[19 47]
[20 46]
[21 45]
[22 44]
[23 43]
[25 41]
[26 40]
[27 39]
[30 38]
[31 37]
[52 68]
[53 67]
[54 66]
[55 65]
[81 116]
[82 115]
[83 114]
[84 113]
[85 112]
[86 111]
[88 109]
[89 108]
[91 106]
[92 105]
[93 104]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
