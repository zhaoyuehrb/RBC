%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:23:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUCCGAGGAGACCAUGGCCUGGCCCCUGUGCACCCUGCUGCUCCUGCUGGCCACCCAGGCUGUGGCCCUGGCCUGGAGCCCCCAGGAGGAGGACAGGAUAAUCGAGGGUGGCA\
) } def
/len { sequence length } bind def

/coor [
[31.74592400 294.71920776]
[17.59882164 304.49264526]
[0.54435176 305.82803345]
[-5.38302612 319.60723877]
[-11.31040478 333.38641357]
[-8.85392475 349.60055542]
[-21.83464622 359.62216187]
[-36.89911652 353.14190674]
[-38.55029678 336.82608032]
[-25.08959770 327.45904541]
[-19.16222000 313.67984009]
[-13.23484230 299.90066528]
[-21.92050552 290.52770996]
[-26.38908577 278.50567627]
[-25.93078232 265.64111328]
[-20.57906342 253.88189697]
[-11.11103249 245.02220154]
[1.06521392 240.42878723]
[14.11994076 240.83032227]
[20.78461647 227.39222717]
[27.44929123 213.95414734]
[26.74962616 209.10644531]
[29.18312454 203.78437805]
[34.85594559 199.98371887]
[42.23836899 186.92616272]
[49.62079239 173.86860657]
[57.00321960 160.81105042]
[56.53174210 145.92390442]
[70.05900574 137.71881104]
[77.44142914 124.66124725]
[68.98331451 112.45114899]
[66.65114594 97.78188324]
[70.90555573 83.55071259]
[80.90626526 72.56835175]
[94.67808533 67.00389099]
[109.50100708 67.95632935]
[116.88343048 54.89876938]
[124.26586151 41.84121323]
[131.64828491 28.78365707]
[138.67440796 15.53097534]
[145.33908081 2.09289169]
[144.53903198 -13.70807266]
[157.12553406 -21.67230988]
[163.79022217 -35.11039352]
[170.45489502 -48.54847717]
[177.11956787 -61.98656082]
[183.78424072 -75.42464447]
[190.44891357 -88.86273193]
[185.63536072 -103.67716217]
[192.58572388 -117.21035004]
[206.73869324 -121.70803833]
[213.40336609 -135.14611816]
[220.06803894 -148.58421326]
[215.95544434 -158.83456421]
[218.19274902 -169.42413330]
[225.78344727 -176.82583618]
[235.99099731 -178.71463013]
[243.37342834 -191.77218628]
[250.75584412 -204.82974243]
[258.13827515 -217.88729858]
[265.52069092 -230.94487000]
[272.90313721 -244.00242615]
[280.28555298 -257.05996704]
[273.72418213 -271.12155151]
[276.71417236 -286.34783936]
[288.10580444 -296.88400269]
[303.51873779 -298.67868042]
[317.02642822 -291.04174805]
[323.43484497 -276.90982056]
[320.27984619 -261.71688843]
[308.77459717 -251.30491638]
[293.34310913 -249.67755127]
[285.96069336 -236.61999512]
[278.57824707 -223.56243896]
[271.19583130 -210.50488281]
[263.81341553 -197.44732666]
[256.43096924 -184.38977051]
[249.04855347 -171.33221436]
[250.77136230 -152.15203857]
[233.50611877 -141.91952515]
[226.84144592 -128.48144531]
[220.17677307 -115.04336548]
[225.16120911 -101.05440521]
[218.59370422 -87.33133698]
[203.88700867 -82.19805145]
[197.22232056 -68.75997162]
[190.55764771 -55.32188416]
[183.89297485 -41.88380051]
[177.22830200 -28.44571877]
[170.56362915 -15.00763416]
[171.84037781 -0.16785125]
[158.77717590 8.75756741]
[152.11248779 22.19565201]
[152.81216431 27.04335594]
[150.37866211 32.36542130]
[144.70584106 36.16608047]
[137.32341003 49.22363663]
[129.94099426 62.28119659]
[122.55857086 75.33875275]
[131.01669312 87.54885101]
[133.34884644 102.21811676]
[129.09445190 116.44928741]
[119.09373474 127.43164825]
[105.32191467 132.99610901]
[90.49899292 132.04367065]
[83.11656952 145.10122681]
[83.05999756 160.92233276]
[70.06077576 168.19346619]
[62.67835236 181.25102234]
[55.29592514 194.30857849]
[47.91350174 207.36614990]
[40.88737488 220.61882019]
[34.22269821 234.05691528]
[27.55802345 247.49499512]
[37.60258102 261.77529907]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 12]
[4 11]
[5 10]
[19 114]
[20 113]
[21 112]
[24 111]
[25 110]
[26 109]
[27 108]
[29 106]
[30 105]
[36 99]
[37 98]
[38 97]
[39 96]
[40 93]
[41 92]
[43 90]
[44 89]
[45 88]
[46 87]
[47 86]
[48 85]
[51 82]
[52 81]
[53 80]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
[62 73]
[63 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
