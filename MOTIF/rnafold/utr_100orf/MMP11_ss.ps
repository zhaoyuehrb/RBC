%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:42:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAGGGGCGGCGGCCCGGAGCGGCCCAGCAAGCCCAGCAGCCCCGGGGCGGAUGGCUCCGGCCGCCUGGCUCCGCAGCGCGGCCGCGCGCGCCCUCCUGCCCCCGAUGCUGCUGCUGCUGCUCCAGCCGCCGCCGCUGCUGGCCCGGGCUC\
) } def
/len { sequence length } bind def

/coor [
[137.10156250 555.90283203]
[144.09800720 542.63446045]
[158.37010193 538.01843262]
[171.81190491 544.67724609]
[168.45265198 530.05822754]
[158.06158447 519.38696289]
[162.51181030 504.20455933]
[159.15255737 489.58554077]
[155.79328918 474.96655273]
[152.43403625 460.34753418]
[149.07476807 445.72851562]
[145.71551514 431.10952759]
[142.35626221 416.49050903]
[138.99699402 401.87149048]
[135.63774109 387.25250244]
[125.52957153 380.53778076]
[122.63801575 368.33901978]
[129.05427551 357.10357666]
[125.99588013 342.41867065]
[122.93748474 327.73376465]
[119.87908936 313.04888916]
[116.82069397 298.36398315]
[113.76229858 283.67907715]
[110.70390320 268.99417114]
[107.64550781 254.30928040]
[104.16143036 250.96109009]
[102.78247833 245.36766052]
[104.77607727 238.95921326]
[102.32315063 224.16114807]
[99.87022400 209.36306763]
[97.41729736 194.56498718]
[87.51863861 205.83514404]
[72.56349945 206.99440002]
[61.04629135 197.38430786]
[59.50870895 182.46331787]
[68.82408142 170.70645142]
[83.70134735 168.79151917]
[95.69072723 177.80686951]
[95.07490540 162.81950378]
[94.45907593 147.83215332]
[93.84325409 132.84480286]
[93.22742462 117.85745239]
[82.64117432 107.96414185]
[82.04631042 93.48683929]
[91.78521729 82.75837708]
[91.16939545 67.77101898]
[90.55356598 52.78366852]
[89.93774414 37.79631424]
[89.16808319 22.81607437]
[88.24466705 7.84452438]
[87.16760254 -7.11675644]
[85.93698883 -22.06619072]
[84.70637512 -37.01562500]
[75.86297607 -50.13450241]
[82.53003693 -63.45364380]
[81.29943085 -78.40307617]
[80.06881714 -93.35251617]
[64.08222961 -105.42683411]
[62.06055450 -125.05427551]
[74.85178375 -139.67805481]
[72.70320892 -154.52337646]
[70.55462646 -169.36869812]
[68.40605164 -184.21401978]
[66.25746918 -199.05934143]
[64.10888672 -213.90467834]
[61.96031189 -228.75000000]
[59.65943527 -243.57247925]
[57.20650864 -258.37054443]
[54.75357819 -273.16864014]
[41.75696945 -282.16107178]
[39.00782013 -297.72439575]
[48.13714981 -310.62521362]
[63.72869110 -313.20965576]
[76.53225708 -303.94445801]
[78.95172119 -288.32644653]
[69.55165863 -275.62155151]
[72.00458527 -260.82348633]
[74.45751190 -246.02540588]
[78.68008423 -239.90313721]
[76.80563354 -230.89857483]
[78.95421600 -216.05325317]
[81.10279083 -201.20793152]
[83.25137329 -186.36260986]
[85.39994812 -171.51728821]
[87.54853058 -156.67195129]
[89.69710541 -141.82662964]
[99.36712646 -138.07904053]
[106.64223480 -130.57467651]
[110.14203644 -120.64010620]
[109.16197205 -110.07133484]
[103.81395721 -100.80924225]
[95.01824951 -94.58312988]
[96.24886322 -79.63368988]
[97.47947693 -64.68425751]
[106.23484802 -52.63466263]
[99.65580750 -38.24623871]
[100.88642120 -23.29680443]
[102.11703491 -8.34736919]
[105.82308960 -1.89932060]
[103.21621704 6.92111063]
[104.13963318 21.89266014]
[107.71251678 28.41544151]
[104.92509460 37.18048859]
[105.54092407 52.16784286]
[106.15674591 67.15519714]
[106.77257538 82.14254761]
[117.35882568 92.03585815]
[117.95368958 106.51316071]
[108.21478271 117.24162292]
[108.83060455 132.22897339]
[109.44643402 147.21632385]
[110.06225586 162.20368958]
[110.67808533 177.19104004]
[112.21537781 192.11206055]
[114.66830444 206.91014099]
[117.12123108 221.70820618]
[119.57415771 236.50628662]
[122.33040619 251.25088501]
[125.38880157 265.93579102]
[128.44718933 280.62069702]
[131.50558472 295.30557251]
[134.56398010 309.99047852]
[137.62237549 324.67538452]
[140.68077087 339.36026001]
[143.73916626 354.04516602]
[156.31953430 367.45281982]
[150.25674438 383.89324951]
[153.61599731 398.51223755]
[156.97526550 413.13125610]
[160.33451843 427.75027466]
[163.69378662 442.36926270]
[167.05303955 456.98828125]
[170.41229248 471.60726929]
[173.77156067 486.22628784]
[177.13081360 500.84530640]
[187.76214600 512.56219482]
[183.07165527 526.69897461]
[186.43090820 541.31799316]
[190.68376160 555.70245361]
[195.81405640 569.79785156]
[200.94436646 583.89324951]
[215.37203979 590.34442139]
[220.93412781 605.13763428]
[214.33076477 619.49627686]
[199.47958374 624.90167236]
[185.19154358 618.14685059]
[179.94348145 603.23937988]
[186.84896851 589.02349854]
[181.71867371 574.92816162]
[176.58836365 560.83276367]
[168.92913818 573.72985840]
[154.44165039 577.61743164]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 138]
[5 137]
[7 135]
[8 134]
[9 133]
[10 132]
[11 131]
[12 130]
[13 129]
[14 128]
[15 127]
[18 125]
[19 124]
[20 123]
[21 122]
[22 121]
[23 120]
[24 119]
[25 118]
[28 117]
[29 116]
[30 115]
[31 114]
[38 113]
[39 112]
[40 111]
[41 110]
[42 109]
[45 106]
[46 105]
[47 104]
[48 103]
[49 101]
[50 100]
[51 98]
[52 97]
[53 96]
[55 94]
[56 93]
[57 92]
[60 86]
[61 85]
[62 84]
[63 83]
[64 82]
[65 81]
[66 80]
[67 78]
[68 77]
[69 76]
[139 150]
[140 149]
[141 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
