%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGGGCGGGCGCGCCGGGCGGCAGGUGUCGGCGUCGGCGGCAUUCGGCGGCGAUGGAGCGGCCCUGGGGAGCUGCGGACGGCCUCUCGCGCUGGCCCCAUGGCCUCGGCCUCCUCCUCCUCCUGCAGCUGCUGCCGCCGUCGACCCUCAGCC\
) } def
/len { sequence length } bind def

/coor [
[-95.21620941 619.00128174]
[-96.83138275 627.13543701]
[-101.50609589 633.87066650]
[-108.40089417 638.12963867]
[-116.32932281 639.26800537]
[-122.56054688 652.91253662]
[-128.79177856 666.55700684]
[-135.02299500 680.20147705]
[-132.92637634 696.46606445]
[-146.12594604 706.19757080]
[-161.04313660 699.38513184]
[-162.33241272 683.03674316]
[-148.66748047 673.97021484]
[-142.43624878 660.32574463]
[-136.20503235 646.68127441]
[-129.97380066 633.03680420]
[-134.27902222 611.84741211]
[-116.07549286 598.83166504]
[-110.97714996 584.72467041]
[-105.87881470 570.61773682]
[-112.94129181 559.79864502]
[-112.45691681 546.69250488]
[-104.37853241 536.11431885]
[-91.49010468 532.08013916]
[-86.10506439 518.08007812]
[-80.72002411 504.08004761]
[-81.25729370 496.66336060]
[-75.07970428 489.85119629]
[-69.41020203 475.96389771]
[-63.74070358 462.07662964]
[-58.07120132 448.18933105]
[-52.40170288 434.30203247]
[-46.73220062 420.41476440]
[-41.06270218 406.52746582]
[-43.41555786 391.81988525]
[-31.03620911 381.96783447]
[-25.36670876 368.08056641]
[-19.69720840 354.19326782]
[-14.02770805 340.30599976]
[-8.35820770 326.41870117]
[-2.68870711 312.53140259]
[2.98079324 298.64413452]
[8.65029335 284.75683594]
[0.57942033 274.08013916]
[-1.16075623 260.70043945]
[3.99272752 248.11372375]
[14.78731823 239.66259766]
[28.45748711 237.64849854]
[34.40908813 223.87976074]
[40.36069107 210.11100769]
[46.31229019 196.34225464]
[46.07798386 188.90983582]
[52.52828979 182.35530090]
[58.75951385 168.71083069]
[58.67686844 161.27517700]
[65.25953674 154.85357666]
[71.76779175 141.33905029]
[78.27604675 127.82451630]
[84.78430176 114.30998230]
[80.35590363 92.90052032]
[97.44837189 79.26880646]
[101.08380127 64.71601868]
[104.71922302 50.16323090]
[108.35465240 35.61043930]
[104.19266510 20.34648132]
[114.78388977 9.87388706]
[118.41931152 -4.67890263]
[122.05474091 -19.23169136]
[125.69017029 -33.78448105]
[129.32559204 -48.33726883]
[132.66340637 -62.96118927]
[135.70222473 -77.65015411]
[138.74102783 -92.33911133]
[137.41239929 -101.43872833]
[141.99455261 -107.29531860]
[145.33236694 -121.91923523]
[148.67018127 -136.54315186]
[152.00799561 -151.16706848]
[141.69767761 -162.76350403]
[140.20617676 -178.20872498]
[148.10699463 -191.56375122]
[162.36212158 -197.69329834]
[177.49014282 -194.24041748]
[187.67405701 -182.53282166]
[188.99792480 -167.07232666]
[180.95268250 -153.80380249]
[166.63191223 -147.82925415]
[163.29409790 -133.20533752]
[159.95628357 -118.58142090]
[156.61846924 -103.95750427]
[153.42999268 -89.30030060]
[150.39118958 -74.61133575]
[147.35237122 -59.92237473]
[149.21517944 -55.46521759]
[148.25491333 -49.78679657]
[143.87838745 -44.70184326]
[140.24295044 -30.14905548]
[136.60752869 -15.59626579]
[132.97210693 -1.04347634]
[129.33668518 13.50931263]
[133.75869751 27.73235893]
[122.90744019 39.24586868]
[119.27201843 53.79865646]
[115.63658905 68.35144806]
[112.00115967 82.90423584]
[114.20753479 84.68859863]
[116.15169525 86.75553894]
[117.79776764 89.06690979]
[132.54566956 86.32836151]
[147.01470947 77.49189758]
[159.51127625 88.94931030]
[151.96101379 104.12922668]
[135.28421021 101.07625580]
[120.53631592 103.81480408]
[116.33032227 113.02358246]
[108.28807831 119.17292023]
[98.29883575 120.81823730]
[91.79058075 134.33277893]
[85.28232574 147.84730530]
[78.77407074 161.36184692]
[72.40399933 174.94204712]
[66.17276764 188.58653259]
[60.08103943 202.29385376]
[54.12944031 216.06260681]
[48.17783737 229.83135986]
[42.22623825 243.60011292]
[51.03505325 258.00595093]
[49.55858994 274.66043091]
[38.57287598 287.04382324]
[22.53758240 290.42633057]
[16.86808205 304.31362915]
[11.19858074 318.20089722]
[5.52907991 332.08819580]
[-0.14042042 345.97549438]
[-5.80992079 359.86276245]
[-11.47942162 373.75006104]
[-17.14892197 387.63735962]
[-15.20158672 403.33825684]
[-27.17541313 412.19696045]
[-32.84491348 426.08425903]
[-38.51441193 439.97155762]
[-44.18391418 453.85882568]
[-49.85341644 467.74612427]
[-55.52291489 481.63339233]
[-61.19241714 495.52069092]
[-66.71997070 509.46508789]
[-72.10501099 523.46514893]
[-77.49005127 537.46520996]
[-70.09106445 553.28497314]
[-76.27277374 569.25811768]
[-91.77182770 575.71606445]
[-96.87017059 589.82305908]
[-101.96851349 603.92999268]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 16]
[6 15]
[7 14]
[8 13]
[18 153]
[19 152]
[20 151]
[24 148]
[25 147]
[26 146]
[28 145]
[29 144]
[30 143]
[31 142]
[32 141]
[33 140]
[34 139]
[36 137]
[37 136]
[38 135]
[39 134]
[40 133]
[41 132]
[42 131]
[43 130]
[48 126]
[49 125]
[50 124]
[51 123]
[53 122]
[54 121]
[56 120]
[57 119]
[58 118]
[59 117]
[61 105]
[62 104]
[63 103]
[64 102]
[66 100]
[67 99]
[68 98]
[69 97]
[70 96]
[71 93]
[72 92]
[73 91]
[75 90]
[76 89]
[77 88]
[78 87]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
