%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:47:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUCUAGCUGAUCAUGUGACAAUCCAAGAUGGCGGUGCCCGGCGAGGCGGAGGAGGAGGCGACAGUUUACCUGGUAGUGAGCGGUAUCCCCUCCGUGUUGCGCUCGGCCCAUUUACGGAGCUAUUUUA\
) } def
/len { sequence length } bind def

/coor [
[104.89088440 190.09284973]
[102.72354889 175.25025940]
[100.55621338 160.40765381]
[98.38887787 145.56506348]
[96.22154236 130.72245789]
[94.05420685 115.87986755]
[94.96446228 112.88858032]
[95.95822906 109.92691803]
[83.21620941 117.84152222]
[70.47418976 125.75612640]
[64.76296997 133.01756287]
[57.32726288 133.70372009]
[44.39771652 141.30812073]
[31.46817207 148.91250610]
[23.49534416 162.57795715]
[8.60232067 162.36085510]
[-4.32722473 169.96525574]
[-10.21224117 177.08657837]
[-17.66235352 177.59284973]
[-30.77187538 184.88259888]
[-41.67634964 197.86447144]
[-57.16953659 190.97987366]
[-54.84294128 174.18632507]
[-38.06162643 171.77308655]
[-24.95210648 164.48333740]
[-11.93162251 157.03572083]
[0.99792272 149.43132019]
[8.04594421 136.30978394]
[23.86377525 135.98297119]
[36.79331970 128.37857056]
[49.72286606 120.77416992]
[62.55958557 113.01410675]
[75.30160522 105.09950256]
[88.04362488 97.18489838]
[97.71625519 85.72016144]
[103.37268066 71.82754517]
[103.72498322 62.59593964]
[109.33728790 57.67023468]
[115.32775116 43.91835022]
[121.31822205 30.16646957]
[113.69043732 12.91199875]
[120.87618256 -4.18828344]
[137.94645691 -10.59260750]
[143.26553345 -24.61785126]
[148.58460999 -38.64309692]
[153.90368652 -52.66833878]
[151.56278992 -68.31540680]
[163.31044006 -77.47193146]
[168.62951660 -91.49717712]
[173.94859314 -105.52241516]
[179.26766968 -119.54766083]
[184.58673096 -133.57290649]
[189.90580750 -147.59814453]
[195.22488403 -161.62339783]
[195.35401917 -170.86080933]
[200.84565735 -175.92068481]
[206.50207520 -189.81330872]
[212.15850830 -203.70593262]
[203.51884460 -212.30030823]
[198.33840942 -223.29222107]
[197.21540833 -235.35670471]
[200.26049805 -247.04846191]
[207.08648682 -256.97491455]
[216.85728455 -263.96218872]
[228.39031982 -267.19375610]
[240.29966736 -266.30590820]
[246.94754028 -279.75231934]
[253.59541321 -293.19873047]
[260.24328613 -306.64514160]
[266.89114380 -320.09155273]
[273.53903198 -333.53793335]
[268.23721313 -348.42639160]
[275.09133911 -362.66705322]
[290.03503418 -367.81118774]
[304.20242310 -360.80685425]
[309.18826294 -345.80960083]
[302.03454590 -331.71707153]
[286.98544312 -326.89007568]
[280.33755493 -313.44366455]
[273.68969727 -299.99725342]
[267.04180908 -286.55084229]
[260.39395142 -273.10446167]
[253.74606323 -259.65805054]
[264.46395874 -245.18600464]
[266.45526123 -227.20318604]
[259.09521484 -210.58319092]
[244.30503845 -199.87310791]
[226.05111694 -198.04951477]
[220.39469910 -184.15689087]
[214.73828125 -170.26426697]
[209.25012207 -156.30432129]
[203.93106079 -142.27906799]
[198.61198425 -128.25382996]
[193.29290771 -114.22858429]
[187.97383118 -100.20334625]
[182.65475464 -86.17810059]
[177.33569336 -72.15285492]
[180.05703735 -57.50896454]
[167.92892456 -47.34926605]
[162.60984802 -33.32402039]
[157.29077148 -19.29877853]
[151.97171021 -5.27353430]
[158.85536194 3.97246027]
[160.39068604 15.51841259]
[156.07411194 26.46626282]
[146.88586426 34.01050186]
[135.07009888 36.15693665]
[129.07963562 49.90882111]
[123.08916473 63.66070175]
[117.26529694 77.48396301]
[111.60887146 91.37658691]
[124.67550659 84.01022339]
[139.30860901 87.30755615]
[147.95307922 99.56614685]
[146.14575195 114.45687103]
[134.81977844 124.29160309]
[119.82274628 123.99266052]
[108.89679718 113.71253204]
[111.06413269 128.55513000]
[113.23146820 143.39772034]
[115.39880371 158.24032593]
[117.56613922 173.08291626]
[119.73347473 187.92550659]
[133.13337708 195.98632812]
[138.16798401 210.79129028]
[132.46011353 225.34994507]
[118.70484161 232.78813171]
[103.39699554 229.59376526]
[93.76446533 217.27514648]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 123]
[2 122]
[3 121]
[4 120]
[5 119]
[6 118]
[8 34]
[9 33]
[10 32]
[12 31]
[13 30]
[14 29]
[16 27]
[17 26]
[19 25]
[20 24]
[35 111]
[36 110]
[38 109]
[39 108]
[40 107]
[43 102]
[44 101]
[45 100]
[46 99]
[48 97]
[49 96]
[50 95]
[51 94]
[52 93]
[53 92]
[54 91]
[56 90]
[57 89]
[58 88]
[66 83]
[67 82]
[68 81]
[69 80]
[70 79]
[71 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
