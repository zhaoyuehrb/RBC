%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGAGGGAGCUGCGCGCAGAGGCGCCGGGCCGGCCCGCGGCAGGUGCUAUUUCCUUUGCUGCUGCCUUUGUUCUACCCCACCCUGAGUGAGCCGAUCC\
) } def
/len { sequence length } bind def

/coor [
[187.87344360 286.21722412]
[198.25065613 275.24041748]
[190.68341064 262.28909302]
[183.11618042 249.33776855]
[175.54893494 236.38644409]
[161.12173462 232.86625671]
[153.26298523 219.83956909]
[157.05310059 204.73086548]
[149.48587036 191.77954102]
[141.91862488 178.82821655]
[134.35137939 165.87689209]
[126.78413391 152.92556763]
[108.00028229 144.62005615]
[107.49180603 123.31786346]
[98.75069427 111.12799835]
[89.82106018 99.07553864]
[80.70507050 87.16341400]
[71.40492249 75.39450073]
[61.92287827 63.77164459]
[52.44083023 52.14878845]
[42.95878601 40.52593231]
[33.47673798 28.90307617]
[23.99469185 17.28022003]
[13.47089005 6.59145975]
[1.99690211 -3.07019639]
[-9.47708607 -12.73185253]
[-20.95107460 -22.39350891]
[-32.42506027 -32.05516434]
[-45.43529510 -31.75407028]
[-54.81277084 -40.18541336]
[-55.82398987 -52.35074997]
[-66.99195099 -62.36457443]
[-78.15991211 -72.37839508]
[-89.32787323 -82.39221954]
[-105.36092377 -82.95861816]
[-114.79840088 -95.93219757]
[-110.40067291 -111.36072540]
[-95.54130554 -117.40876770]
[-81.61913300 -109.43676758]
[-79.31405640 -93.56018066]
[-68.14609528 -83.54635620]
[-56.97813034 -73.53253174]
[-45.81016922 -63.51871109]
[-28.53010941 -60.93007660]
[-22.76340485 -43.52915192]
[-11.28941727 -33.86749649]
[0.18457028 -24.20584106]
[11.65855789 -14.54418468]
[23.13254547 -4.88252831]
[24.10753822 -19.85080719]
[35.19014359 -29.95901680]
[50.18473434 -29.55625534]
[60.70872879 -18.86768341]
[60.87878036 -3.86864686]
[50.59983063 7.05578327]
[35.61754990 7.79817295]
[45.09959412 19.42103004]
[54.58164215 31.04388618]
[64.06369019 42.66674423]
[73.54573822 54.28960037]
[83.02777863 65.91245270]
[89.81463623 69.16270447]
[92.61719513 78.04742432]
[101.73318481 89.95954895]
[108.87052155 94.02813721]
[110.94055939 102.38687897]
[119.68167877 114.57675171]
[129.42190552 114.87293243]
[137.75782776 119.64529419]
[142.79618835 127.65904236]
[143.46417236 136.96173096]
[139.73545837 145.35832214]
[147.30270386 158.30964661]
[154.86994934 171.26097107]
[162.43719482 184.21229553]
[170.00442505 197.16362000]
[185.02749634 201.28009033]
[192.51725769 214.52236938]
[188.50025940 228.81919861]
[196.06750488 241.77052307]
[203.63475037 254.72184753]
[211.20198059 267.67318726]
[225.85971069 264.02246094]
[240.95216370 264.65057373]
[255.25587463 269.50659180]
[267.61126709 278.19686890]
[277.01678467 290.01687622]
[282.70996094 304.00845337]
[284.22924805 319.03738403]
[281.45150757 333.88531494]
[274.60192871 347.34857178]
[264.23574829 358.33581543]
[251.19331360 365.95626831]
[236.53192139 369.59225464]
[221.44010925 368.94897461]
[207.14129639 364.07858276]
[194.79461670 355.37591553]
[185.40098572 343.54647827]
[179.72187805 329.54916382]
[178.21768188 314.51873779]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 82]
[3 81]
[4 80]
[5 79]
[8 76]
[9 75]
[10 74]
[11 73]
[12 72]
[14 67]
[15 66]
[16 64]
[17 63]
[18 61]
[19 60]
[20 59]
[21 58]
[22 57]
[23 56]
[24 49]
[25 48]
[26 47]
[27 46]
[28 45]
[31 43]
[32 42]
[33 41]
[34 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
