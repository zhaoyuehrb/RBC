%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:20:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGAGCAGGGAAGCCAACCUGAGCAAACACAGCAGCCCGAGUGUUCCCAAGGCCAAAAUGCUGAGAACGUCCACUCCUAAUCUGUGUGGUGGUCUGCAUUGCCGGGCCCCCUGGCUCUCUUCUGGCAUUCUCUGCCUCUGCCUCAUAUUCUUGUUGG\
) } def
/len { sequence length } bind def

/coor [
[217.36634827 447.34402466]
[212.70291138 433.08737183]
[208.03947449 418.83071899]
[203.37603760 404.57406616]
[198.71261597 390.31738281]
[194.04917908 376.06072998]
[189.24513245 361.85083008]
[184.30093384 347.68908691]
[179.35675049 333.52734375]
[174.41255188 319.36560059]
[169.46835327 305.20385742]
[164.52415466 291.04211426]
[159.57997131 276.88037109]
[154.49610901 262.76818848]
[149.27308655 248.70687866]
[144.05006409 234.64558411]
[138.82704163 220.58428955]
[122.85710907 218.28575134]
[110.14277649 208.20109558]
[104.20070648 192.99922180]
[106.73490143 176.78039551]
[117.14933014 163.97032166]
[111.64951324 150.01496887]
[106.14969635 136.05961609]
[100.64987946 122.10425568]
[82.66168976 116.80484772]
[73.87031555 98.41359711]
[82.26747894 78.06030273]
[71.00209808 68.15619659]
[59.73672485 58.25209045]
[48.47135162 48.34798431]
[37.20597458 38.44387817]
[25.94060135 28.53977203]
[13.12044811 34.55509186]
[-0.98183537 35.21778488]
[-14.22793102 30.46053314]
[-24.62199974 21.03532600]
[-30.61139488 8.39480495]
[-31.31854439 -5.53156710]
[-26.66938210 -18.63199425]
[-37.73688126 -28.75673866]
[-48.80437851 -38.88148499]
[-59.87187958 -49.00622940]
[-71.33073425 -58.68582916]
[-83.16304779 -67.90517426]
[-94.99536133 -77.12451935]
[-106.82768250 -86.34386444]
[-118.17713165 -82.59722137]
[-129.80255127 -84.79680634]
[-138.81372070 -92.27726746]
[-143.02792358 -103.07530212]
[-141.49807739 -114.44387054]
[-152.95692444 -124.12347412]
[-164.41577148 -133.80307007]
[-180.14137268 -132.22790527]
[-192.32179260 -142.29830933]
[-193.73060608 -158.03968811]
[-183.53199768 -170.11294556]
[-167.77661133 -171.35525513]
[-155.81184387 -161.02957153]
[-154.73617554 -145.26193237]
[-143.27732849 -135.58232117]
[-131.81846619 -125.90272522]
[-113.74573517 -128.56347656]
[-99.18465424 -117.01377869]
[-97.60833740 -98.17617798]
[-85.77601624 -88.95683289]
[-73.94370270 -79.73748779]
[-62.11138916 -70.51814270]
[-59.26807785 -70.76370239]
[-56.15433884 -69.86725616]
[-53.21613312 -67.71923065]
[-50.93091583 -64.37757874]
[-49.74713516 -60.07372665]
[-38.67963409 -49.94898224]
[-27.61213493 -39.82423782]
[-16.54463577 -29.69949341]
[-1.85303760 -35.92247772]
[14.14039421 -35.12535477]
[28.24232864 -27.41664886]
[37.61506653 -14.28993511]
[40.34752274 1.66529655]
[35.84470749 17.27439690]
[47.11008453 27.17850494]
[58.37545776 37.08261108]
[69.64083099 46.98671722]
[80.90620422 56.89082336]
[92.17158508 66.79492950]
[107.17085266 66.64674377]
[118.23834991 56.52199936]
[123.19802856 41.49827957]
[137.81118774 38.61642456]
[148.87867737 28.49168015]
[159.94618225 18.36693573]
[171.01367188 8.24218941]
[182.08117676 -1.88255525]
[193.14868164 -12.00730038]
[193.60057068 -27.80512619]
[205.14807129 -38.59544373]
[220.94023132 -37.97654724]
[231.60786438 -26.31561661]
[230.82203674 -10.53087616]
[219.04896545 0.01286785]
[203.27342224 -0.93980104]
[192.20591736 9.18494415]
[181.13842773 19.30968857]
[170.07092285 29.43443489]
[159.00343323 39.55917740]
[147.93592834 49.68392563]
[143.76786804 63.98345566]
[128.36309814 67.58950043]
[117.29559326 77.71424103]
[124.81505585 91.66392517]
[123.31777954 106.26904297]
[114.60523987 116.60443878]
[120.10505676 130.55979919]
[125.60487366 144.51515198]
[131.10469055 158.47050476]
[145.05618286 159.82250977]
[157.00108337 167.02931213]
[164.62931824 178.63034058]
[166.49453735 192.32191467]
[162.28808594 205.41453552]
[152.88833618 215.36126709]
[158.11135864 229.42256165]
[163.33438110 243.48385620]
[168.55740356 257.54513550]
[174.51016235 264.54522705]
[173.74171448 271.93618774]
[178.68589783 286.09793091]
[183.63009644 300.25967407]
[188.57429504 314.42141724]
[193.51847839 328.58316040]
[198.46267700 342.74490356]
[203.40687561 356.90664673]
[209.22016907 364.02294922]
[208.30584717 371.39730835]
[212.96926880 385.65396118]
[217.63270569 399.91061401]
[222.29614258 414.16726685]
[226.95957947 428.42395020]
[231.62300110 442.68060303]
[246.76364136 442.87985229]
[261.01840210 447.98678589]
[272.84100342 457.44750977]
[280.94903564 470.23571777]
[284.46298218 484.96429443]
[283.00170898 500.03555298]
[276.72369385 513.81475830]
[266.30993652 524.80712891]
[252.89006042 531.82037354]
[237.91973877 534.09368896]
[223.02284241 531.38055420]
[209.81527710 523.97528076]
[199.72969055 512.68103027]
[193.86009216 498.72299194]
[192.84320068 483.61523438]
[196.78927612 468.99649048]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 142]
[2 141]
[3 140]
[4 139]
[5 138]
[6 137]
[7 135]
[8 134]
[9 133]
[10 132]
[11 131]
[12 130]
[13 129]
[14 127]
[15 126]
[16 125]
[17 124]
[22 118]
[23 117]
[24 116]
[25 115]
[28 88]
[29 87]
[30 86]
[31 85]
[32 84]
[33 83]
[40 77]
[41 76]
[42 75]
[43 74]
[44 69]
[45 68]
[46 67]
[47 66]
[52 63]
[53 62]
[54 61]
[89 112]
[90 111]
[92 109]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
