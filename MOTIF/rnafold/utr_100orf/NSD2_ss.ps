%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUUCUAAGAACGGAAGCAUCUGGGCUGGAUGGAAUUUAGCAUCAAGCAGAGUCCCCUUUCUGUUCAGAGUGUUGUAAAGUGCAUAAAGAUGAAGCAGGCACCAGAAAUCCUCGGCAGUGCCAACGGGA\
) } def
/len { sequence length } bind def

/coor [
[90.37564850 116.95958710]
[89.12833405 111.28511810]
[89.92797852 106.22362518]
[92.35514832 102.38927460]
[77.63459778 99.50737000]
[62.91404724 96.62547302]
[56.38810349 98.44967651]
[50.79568481 96.86964417]
[47.55959702 93.23228455]
[32.99546814 89.64254761]
[18.43134117 86.05281830]
[3.86721396 82.46308136]
[-10.69691372 78.87334442]
[-25.26103973 75.28360748]
[-39.82516861 71.69387817]
[-54.38929367 68.10414124]
[-68.95342255 64.51440430]
[-82.36206055 76.59362030]
[-100.17458344 78.26974487]
[-115.33457184 69.06568146]
[-121.94779205 52.77768707]
[-136.66835022 49.89578629]
[-149.68719482 58.44840240]
[-164.57487488 55.31604767]
[-172.64825439 42.85185623]
[-187.36880493 39.96995544]
[-202.08935547 37.08805466]
[-217.11897278 42.02982712]
[-228.12260437 31.99142265]
[-242.84315491 29.10952187]
[-257.56372070 26.22762108]
[-272.28427124 23.34572029]
[-283.55477905 34.01130676]
[-298.94622803 35.98190689]
[-312.54025269 28.49978447]
[-319.10968018 14.44196701]
[-316.12844849 -0.78602666]
[-304.74285889 -11.32872295]
[-289.33096313 -13.13223934]
[-275.81890869 -5.50308800]
[-269.40234375 8.62516785]
[-254.68180847 11.50706863]
[-239.96125793 14.38896942]
[-225.24070740 17.27087021]
[-211.26399231 12.12296391]
[-199.20745850 22.36750031]
[-184.48690796 25.24940109]
[-169.76635742 28.13130188]
[-157.58880615 19.63171577]
[-142.61901855 22.34467316]
[-133.78643799 35.17523193]
[-119.06589508 38.05713272]
[-111.41771698 28.48368645]
[-100.34204102 23.07456017]
[-87.94440460 22.92718697]
[-76.61138916 28.13206673]
[-68.55125427 37.74338150]
[-65.36368561 49.95027924]
[-50.79956055 53.54001236]
[-36.23543167 57.12974930]
[-21.67130470 60.71948242]
[-7.10717821 64.30921936]
[7.45694876 67.89895630]
[22.02107620 71.48868561]
[36.58520508 75.07842255]
[51.14933014 78.66815948]
[65.79594421 81.90492249]
[80.51650238 84.78681946]
[95.23705292 87.66872406]
[109.99134827 84.96489716]
[122.73336792 77.05029297]
[135.47538757 69.13568878]
[148.21740723 61.22108459]
[160.86286926 53.15310287]
[173.40991211 44.93291473]
[185.95697021 36.71272659]
[186.83250427 21.33288193]
[196.48348999 9.55528069]
[211.04673767 5.76371765]
[224.88444519 11.20943642]
[237.43148804 2.98924875]
[238.04663086 -12.51562881]
[247.68424988 -24.67688179]
[262.63845825 -28.81826210]
[277.15908813 -23.34732437]
[285.66262817 -10.36775398]
[284.87933350 5.12953806]
[275.11035156 17.18552780]
[260.11209106 21.16443825]
[245.65167236 15.53630066]
[233.10462952 23.75648880]
[232.57092285 38.61761856]
[223.27880859 50.45486832]
[208.62693787 54.59926224]
[194.17715454 49.25977707]
[181.63011169 57.47996521]
[169.08305359 65.70015717]
[165.17253113 72.06162262]
[156.13200378 73.96310425]
[143.38998413 81.87770844]
[130.64796448 89.79231262]
[117.90595245 97.70691681]
[131.76522827 91.96927643]
[145.89418030 97.00638580]
[152.99801636 110.21757507]
[149.40899658 124.78188324]
[136.98014832 133.17971802]
[122.12850952 131.07525635]
[112.52134705 119.55310822]
[120.12574768 132.48265076]
[127.73014832 145.41220093]
[135.33454895 158.34173584]
[153.28945923 167.35733032]
[152.85743713 186.62907410]
[161.07762146 199.17613220]
[169.29782104 211.72317505]
[183.03544617 221.65867615]
[177.29118347 237.60983276]
[160.37322998 236.50579834]
[156.75076294 219.94335938]
[148.53057861 207.39631653]
[140.31039429 194.84925842]
[130.03915405 193.64176941]
[121.99562073 186.79524231]
[119.04154968 176.42407227]
[122.40499878 165.94613647]
[114.80059814 153.01660156]
[107.19620514 140.08705139]
[99.59180450 127.15750122]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 69]
[5 68]
[6 67]
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[15 60]
[16 59]
[17 58]
[21 52]
[22 51]
[25 48]
[26 47]
[27 46]
[29 44]
[30 43]
[31 42]
[32 41]
[70 102]
[71 101]
[72 100]
[73 99]
[74 97]
[75 96]
[76 95]
[80 91]
[81 90]
[109 129]
[110 128]
[111 127]
[112 126]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
