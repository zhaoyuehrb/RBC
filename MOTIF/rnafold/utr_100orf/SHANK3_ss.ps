%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:46:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACGGCCCCGGGGCCAGCGCCGUGGUCGUGCGCGUCGGCAUCCCGGACCUGCAGCAGACGAAGUGCCUGCGCCUGGACCCGGCCGCGCCCGUGUGGG\
) } def
/len { sequence length } bind def

/coor [
[72.93829346 340.95672607]
[67.10245514 355.23773193]
[54.45904922 364.07785034]
[39.04253006 364.65625000]
[25.77226257 356.78836060]
[18.88273621 342.98483276]
[20.57237434 327.65026855]
[30.30202103 315.67788696]
[44.96697998 310.88806152]
[48.66116333 296.35006714]
[52.35534668 281.81210327]
[55.82299042 267.21841431]
[59.06325912 252.57257080]
[62.07536697 237.87811279]
[64.85858154 223.13858032]
[67.64179993 208.39906311]
[70.42501068 193.65953064]
[68.41362762 189.14897156]
[69.34355927 183.31417847]
[73.86682892 178.10272217]
[77.56101227 163.56474304]
[81.25519562 149.02674866]
[84.72283936 134.43307495]
[87.96310425 119.78723145]
[91.20336914 105.14138794]
[89.71833038 97.06118774]
[94.77886963 90.09379578]
[98.47306061 75.55580902]
[102.16724396 61.01782608]
[105.86142731 46.47983932]
[96.64823914 31.70959091]
[100.79997253 15.14934349]
[115.31011963 6.80698729]
[118.55039215 -7.83885384]
[121.79065704 -22.48469543]
[125.03092194 -37.13053513]
[128.27119446 -51.77637863]
[126.57565308 -58.46549606]
[128.36978149 -64.09495544]
[132.19514465 -67.21862030]
[136.33967590 -81.63468933]
[140.48420715 -96.05075073]
[144.62872314 -110.46681213]
[148.77325439 -124.88288116]
[141.37892151 -138.59278870]
[145.78741455 -153.15368652]
[158.90328979 -160.11856079]
[163.04782104 -174.53462219]
[157.13684082 -183.92964172]
[157.46827698 -194.80258179]
[163.68208313 -203.45954895]
[173.46176147 -207.09739685]
[178.49452209 -221.22790527]
[183.52726746 -235.35841370]
[183.14570618 -252.30807495]
[199.32733154 -257.36685181]
[208.66793823 -243.21803284]
[197.65777588 -230.32566833]
[192.62503052 -216.19515991]
[187.59228516 -202.06463623]
[192.61808777 -183.50247192]
[177.46388245 -170.39010620]
[173.31935120 -155.97404480]
[180.73364258 -143.10687256]
[176.73585510 -128.42788696]
[163.18931580 -120.73834991]
[159.04479980 -106.32228851]
[154.90026855 -91.90622711]
[150.75573730 -77.49015808]
[146.61122131 -63.07409668]
[142.91703796 -48.53610992]
[139.67675781 -33.89027023]
[136.43649292 -19.24442863]
[133.19622803 -4.59858656]
[129.95596313 10.04725456]
[138.38374329 19.92928886]
[139.54312134 33.06164551]
[132.77932739 44.60512161]
[120.39940643 50.17402267]
[116.70522308 64.71200562]
[113.01103973 79.24999237]
[109.31685638 93.78797913]
[105.84921265 108.38166046]
[102.60894775 123.02749634]
[99.36867523 137.67333984]
[100.57556152 146.91108704]
[95.79317474 152.72093201]
[92.09899139 167.25892639]
[88.40480804 181.79690552]
[85.16454315 196.44274902]
[82.38132477 211.18228149]
[79.59811401 225.92179871]
[76.81489563 240.66133118]
[78.30848694 249.85708618]
[73.70909882 255.81285095]
[70.46883392 270.45867920]
[71.67572021 279.69644165]
[66.89333344 285.50628662]
[63.19915009 300.04425049]
[59.50496674 314.58224487]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 100]
[10 99]
[11 98]
[12 96]
[13 95]
[14 93]
[15 92]
[16 91]
[17 90]
[20 89]
[21 88]
[22 87]
[23 85]
[24 84]
[25 83]
[27 82]
[28 81]
[29 80]
[30 79]
[33 75]
[34 74]
[35 73]
[36 72]
[37 71]
[40 70]
[41 69]
[42 68]
[43 67]
[44 66]
[47 63]
[48 62]
[52 60]
[53 59]
[54 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
