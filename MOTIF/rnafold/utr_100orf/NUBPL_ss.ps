%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:32:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCGCGCCACCCGCGACAGUUUCCCAGCAGGGCUCACAGCAGCGUUCCGCGUCAUGGGGAUUUGGCAGCGUCUGCUGCUUUUUGGUGGGGUGUCGCUCCGGGCUGGUGGCGGGGCCACUGCCCCGCUUGGGGGAAGCCGAGCGAUGGUUUGUG\
) } def
/len { sequence length } bind def

/coor [
[229.30052185 253.29101562]
[228.77024841 240.36625671]
[218.37939453 229.54821777]
[207.98852539 218.73017883]
[197.59765625 207.91213989]
[187.20678711 197.09410095]
[176.81593323 186.27607727]
[166.31666565 175.56320190]
[155.71006775 164.95660400]
[145.10345459 154.35000610]
[134.49685669 143.74340820]
[123.78399658 133.24414062]
[112.96595764 122.85327148]
[102.14791870 112.46240234]
[91.02098846 102.40301514]
[79.59529877 92.68428802]
[68.16961670 82.96555328]
[56.74393082 73.24682617]
[45.31824493 63.52809525]
[33.89256287 53.80936432]
[28.64354897 52.85546875]
[24.70812607 50.21912766]
[22.51152992 46.69804001]
[22.09349060 43.14233017]
[11.27545357 32.75146484]
[0.45741698 22.36059761]
[-10.36061954 11.96973324]
[-21.17865562 1.57886755]
[-36.49119186 -2.40068793]
[-40.31031418 -16.79733849]
[-51.12834930 -27.18820381]
[-61.94638824 -37.57907104]
[-72.76442719 -47.96993637]
[-83.58245850 -58.36080170]
[-95.26281738 -55.80448151]
[-106.60327911 -59.19545746]
[-114.79492188 -67.57219696]
[-117.86791229 -78.75372314]
[-115.16439056 -89.90660858]
[-125.55525208 -100.72463989]
[-135.94612122 -111.54267883]
[-146.33699036 -122.36071777]
[-156.72784424 -133.17875671]
[-167.11871338 -143.99679565]
[-177.61798096 -154.70965576]
[-188.22457886 -165.31625366]
[-198.83119202 -175.92285156]
[-209.43778992 -186.52944946]
[-220.15065002 -197.02871704]
[-230.96868896 -207.41958618]
[-241.78672791 -217.81045532]
[-257.09924316 -221.79000854]
[-260.91836548 -236.18666077]
[-271.73641968 -246.57752991]
[-282.55444336 -256.96838379]
[-298.55865479 -258.08419800]
[-307.54574585 -271.37374878]
[-302.62158203 -286.64242554]
[-287.56356812 -292.17739868]
[-273.92291260 -283.73272705]
[-272.16357422 -267.78643799]
[-261.34555054 -257.39556885]
[-250.52751160 -247.00469971]
[-235.98875427 -243.76837158]
[-231.39585876 -228.62849426]
[-220.57781982 -218.23762512]
[-209.75978088 -207.84675598]
[-202.71678162 -205.46771240]
[-198.83119202 -197.13606262]
[-188.22457886 -186.52944946]
[-177.61798096 -175.92285156]
[-167.01138306 -165.31625366]
[-160.01771545 -162.79586792]
[-156.30067444 -154.38764954]
[-145.90982056 -143.56961060]
[-135.51895142 -132.75158691]
[-125.12808228 -121.93354797]
[-114.73722076 -111.11550903]
[-104.34635162 -100.29747009]
[-86.09811401 -101.06830597]
[-72.81341553 -88.07521820]
[-73.19159698 -69.17884064]
[-62.37355804 -58.78797150]
[-51.55552292 -48.39710617]
[-40.73748398 -38.00624084]
[-29.91944885 -27.61537552]
[-15.38069248 -24.37904549]
[-10.78779125 -9.23916912]
[0.03024558 1.15169609]
[10.84828186 11.54256153]
[21.66631889 21.93342590]
[32.48435593 32.32429123]
[43.61129379 42.38367844]
[55.03697586 52.10240936]
[66.46266174 61.82114029]
[77.88834381 71.53987122]
[89.31403351 81.25860596]
[100.73971558 90.97733307]
[104.65386963 91.20404816]
[108.44109344 93.18379974]
[111.30817413 96.81613159]
[112.53878784 101.64437103]
[123.35682678 112.03523254]
[134.17486572 122.42610168]
[142.58306885 126.14313507]
[145.10345459 133.13679504]
[155.71006775 143.74340820]
[166.31666565 154.35000610]
[176.92326355 164.95660400]
[185.25492859 168.84220886]
[187.63397217 175.88520813]
[198.02482605 186.70324707]
[208.41569519 197.52127075]
[218.80656433 208.33930969]
[229.19743347 219.15734863]
[239.58828735 229.97538757]
[257.37014771 234.65617371]
[260.96069336 251.80892944]
[271.56729126 262.41552734]
[282.17388916 273.02212524]
[300.04641724 277.34390259]
[303.98162842 294.42086792]
[314.79965210 304.81173706]
[325.61767578 315.20260620]
[343.57360840 319.16360474]
[347.85189819 336.15786743]
[358.87698364 346.32879639]
[369.90206909 356.49969482]
[380.92715454 366.67062378]
[391.95223999 376.84152222]
[402.97732544 387.01245117]
[414.00241089 397.18334961]
[429.78179932 396.29663086]
[441.51068115 406.88949585]
[442.23052979 422.67736816]
[431.51425171 434.29360962]
[415.71963501 434.84649658]
[404.21734619 424.00802612]
[403.83148193 408.20843506]
[392.80639648 398.03753662]
[381.78131104 387.86660767]
[370.75622559 377.69570923]
[359.73114014 367.52478027]
[348.70605469 357.35388184]
[337.68096924 347.18295288]
[325.54962158 347.34698486]
[316.27706909 338.91357422]
[315.22683716 326.02066040]
[304.40878296 315.62979126]
[293.59075928 305.23892212]
[281.45855713 305.15863037]
[272.35769653 296.54022217]
[271.56729126 283.62875366]
[260.96069336 273.02212524]
[250.35408020 262.41552734]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 116]
[3 115]
[4 114]
[5 113]
[6 112]
[7 111]
[8 109]
[9 108]
[10 107]
[11 106]
[12 104]
[13 103]
[14 102]
[15 98]
[16 97]
[17 96]
[18 95]
[19 94]
[20 93]
[24 92]
[25 91]
[26 90]
[27 89]
[28 88]
[30 86]
[31 85]
[32 84]
[33 83]
[34 82]
[39 79]
[40 78]
[41 77]
[42 76]
[43 75]
[44 74]
[45 72]
[46 71]
[47 70]
[48 69]
[49 67]
[50 66]
[51 65]
[53 63]
[54 62]
[55 61]
[118 155]
[119 154]
[120 153]
[122 150]
[123 149]
[124 148]
[126 145]
[127 144]
[128 143]
[129 142]
[130 141]
[131 140]
[132 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
