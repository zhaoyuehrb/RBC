%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:20:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUGCGGAGCCAGGCGGCAGCAUGGACCGGGCUGGGGCAGACAUGUGGGCCAGCACCUUCACCCUGGCCAUGGCCGAGAGGAAGCCCCAGGACGUCUGGGUUCUGCUACCUGAGCACAGCC\
) } def
/len { sequence length } bind def

/coor [
[89.96413422 384.08969116]
[74.81027985 387.94906616]
[60.74350739 381.11825562]
[54.40571976 366.82257080]
[58.78942490 351.81201172]
[71.82476807 343.17407227]
[73.34229279 328.25103760]
[62.13524246 318.47659302]
[58.79322052 303.80364990]
[64.80223846 289.81274414]
[78.05044556 281.95202637]
[79.56797028 267.02899170]
[80.89633942 252.08790588]
[82.03533173 237.13121033]
[83.17433167 222.17453003]
[84.31332397 207.21783447]
[77.56478882 193.93978882]
[86.32763672 180.76696777]
[87.46663666 165.81027222]
[88.60562897 150.85359192]
[89.74462891 135.89689636]
[90.88362885 120.94020081]
[78.56925964 107.89453125]
[79.47789764 89.97785950]
[93.04888153 78.24494934]
[93.42887115 63.24976349]
[93.80886841 48.25457764]
[94.18885803 33.25939178]
[91.25205231 24.48645782]
[94.77320099 17.89047623]
[95.53294373 2.90972900]
[85.21625519 -8.76090622]
[86.20014191 -23.94269180]
[97.38989258 -33.70615387]
[98.14962769 -48.68690109]
[98.90936279 -63.66764832]
[99.66909790 -78.64839935]
[100.42884064 -93.62914276]
[101.18857574 -108.60989380]
[101.94831085 -123.59063721]
[88.35365295 -128.50140381]
[76.71614838 -137.04759216]
[67.98099518 -148.52386475]
[62.85448456 -161.98738098]
[61.74691391 -176.33523560]
[64.73973083 -190.39479065]
[71.57965088 -203.01954651]
[81.70004272 -213.18264771]
[94.26788330 -220.06030273]
[108.25228119 -223.09872437]
[109.39128113 -238.05541992]
[110.53027344 -253.01211548]
[111.66927338 -267.96881104]
[112.80826569 -282.92550659]
[101.15464783 -293.00018311]
[97.70815277 -307.83172607]
[103.58634949 -321.68493652]
[116.34202576 -329.32891846]
[117.48102570 -344.28561401]
[105.56950378 -354.23022461]
[101.81082153 -369.28518677]
[107.65028381 -383.66156006]
[120.84248352 -391.83135986]
[136.31475830 -390.65310669]
[148.11770630 -380.57986450]
[151.71284485 -365.48501587]
[145.71777344 -351.17282104]
[132.43771362 -343.14663696]
[131.29872131 -328.18994141]
[142.74978638 -318.70251465]
[146.46244812 -304.11895752]
[140.80978394 -289.98031616]
[127.76496124 -281.78649902]
[126.62596130 -266.82980347]
[125.48696899 -251.87310791]
[124.34796906 -236.91641235]
[123.20897675 -221.95973206]
[137.71162415 -216.18379211]
[149.74594116 -206.21041870]
[158.13481140 -192.99963379]
[162.05297852 -177.82884216]
[161.10810852 -162.16938782]
[155.38012695 -147.54373169]
[145.41458130 -135.37756348]
[132.17070007 -126.86071777]
[116.92906189 -122.83090210]
[116.16932678 -107.85015106]
[115.40958405 -92.86940765]
[114.64984894 -77.88865662]
[113.89011383 -62.90791321]
[113.13037109 -47.92716217]
[112.37063599 -32.94641495]
[122.51522064 -22.10099983]
[121.95814514 -6.89756870]
[110.51368713 3.66946650]
[109.75395203 18.65021324]
[109.18404388 33.63938522]
[108.80405426 48.63457108]
[108.42405701 63.62975693]
[108.04406738 78.62493896]
[117.37563324 85.17813873]
[122.37586975 95.42607880]
[121.79832458 106.81418610]
[115.78697968 116.50367737]
[105.84031677 122.07919312]
[104.70132446 137.03588867]
[103.56232452 151.99258423]
[102.42333221 166.94927979]
[101.28433228 181.90597534]
[107.95140839 196.25381470]
[99.27001953 208.35682678]
[98.13102722 223.31352234]
[96.99202728 238.27021790]
[95.85302734 253.22691345]
[98.34172058 262.13732910]
[94.49101257 268.54650879]
[92.97348785 283.46954346]
[104.36814880 293.83621216]
[107.43781281 308.75030518]
[101.21056366 322.45016479]
[88.26533508 329.76855469]
[86.74781036 344.69158936]
[97.77751923 355.77670288]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 122]
[7 121]
[11 117]
[12 116]
[13 114]
[14 113]
[15 112]
[16 111]
[18 109]
[19 108]
[20 107]
[21 106]
[22 105]
[25 100]
[26 99]
[27 98]
[28 97]
[30 96]
[31 95]
[34 92]
[35 91]
[36 90]
[37 89]
[38 88]
[39 87]
[40 86]
[50 77]
[51 76]
[52 75]
[53 74]
[54 73]
[58 69]
[59 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
