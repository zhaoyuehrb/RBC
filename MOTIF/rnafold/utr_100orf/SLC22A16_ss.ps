%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCGGGGCGCGCUACCCGCAGUCCCCGGAGCUCGGCUAACUCGGCGCCCAGUGCACGGCCGCACCAUGGGGUCCCGCCACUUCGAGGGGAUUUAUGACCACGUGGGGCACUUCGGCAGAUUCCAGAGAGUCCUCUAUUUCAUAUGUGCCUUCCAGAACAUCUCUU\
) } def
/len { sequence length } bind def

/coor [
[224.53480530 120.83406830]
[220.68881226 112.67389679]
[218.35777283 103.95306396]
[203.36039734 104.23355103]
[188.36300659 104.51403046]
[173.36563110 104.79451752]
[158.36825562 105.07499695]
[143.37088013 105.35548401]
[128.37350464 105.63596344]
[113.37612915 105.91645050]
[100.18051147 113.04916382]
[91.73070526 125.44274902]
[83.28090668 137.83633423]
[84.83869171 153.80357361]
[73.22637177 164.87306213]
[57.35192871 162.55323792]
[49.39287567 148.62365723]
[55.45471573 133.76991272]
[70.88732910 129.38652039]
[79.33712769 116.99294281]
[87.78692627 104.59936523]
[85.17789459 97.56779480]
[71.11467743 102.78564453]
[65.89704895 88.72234344]
[79.95983124 83.50466156]
[77.35079956 76.47309113]
[62.86191559 72.59080505]
[48.37302780 68.70851898]
[33.88414001 64.82623291]
[23.89221382 76.31199646]
[9.96104336 82.29609680]
[-5.12507010 81.64083862]
[-18.37620735 74.52969360]
[-27.18940735 62.42032242]
[-29.85992241 47.74606323]
[-44.34881210 43.86377716]
[-58.83769608 39.98149109]
[-73.32658386 36.09920502]
[-68.42823029 50.27687073]
[-76.29618073 63.04774857]
[-91.16209412 65.04894257]
[-102.12709045 54.81327820]
[-101.15225220 39.84498978]
[-88.95398712 31.11830521]
[-103.01712799 25.90024185]
[-117.12843323 20.81389427]
[-131.28668213 15.85970879]
[-145.44493103 10.90552330]
[-159.60317993 5.95133734]
[-176.55046082 6.42704248]
[-181.69905090 -9.72623539]
[-167.60231018 -19.14528656]
[-154.64900208 -8.20691299]
[-140.49075317 -3.25272679]
[-126.33249664 1.70145917]
[-112.17424774 6.65564489]
[-104.79140472 5.89356709]
[-97.79906464 11.83710480]
[-83.73592377 17.05516815]
[-69.44429779 21.61031914]
[-54.95541382 25.49260521]
[-40.46652603 29.37489128]
[-25.97763634 33.25717545]
[-16.32777405 21.88415527]
[-2.64063215 15.80372810]
[12.39076138 16.27086639]
[25.78334999 23.24645042]
[34.85604477 35.39442062]
[37.76642609 50.33734512]
[52.25531387 54.21963120]
[66.74420166 58.10191727]
[81.23308563 61.98420334]
[113.09564209 90.91906738]
[128.09301758 90.63858795]
[143.09039307 90.35810089]
[158.08776855 90.07762146]
[173.08515930 89.79713440]
[188.08253479 89.51665497]
[203.07991028 89.23616791]
[218.07728577 88.95568848]
[225.69728088 68.35778809]
[241.32510376 52.98501968]
[261.96878052 45.73197937]
[283.69656372 47.94334030]
[302.38589478 59.16470337]
[314.50552368 77.23545074]
[329.12942505 73.89763641]
[343.75335693 70.55982208]
[358.37725830 67.22200775]
[373.00119019 63.88419342]
[384.73364258 53.27005386]
[398.86352539 57.98128128]
[413.48745728 54.64346695]
[425.21990967 44.02932739]
[439.34979248 48.74055481]
[453.97372437 45.40274048]
[468.59762573 42.06492615]
[483.22155762 38.72711182]
[497.84545898 35.38929749]
[500.46926880 21.47945976]
[508.17965698 9.66034317]
[519.78161621 1.70329487]
[533.49981689 -1.21427524]
[547.25042725 1.31697977]
[558.95764160 8.88126755]
[566.86682129 20.30553818]
[581.55059814 17.24175835]
[596.23437500 14.17797852]
[610.91815186 11.11419868]
[625.60186768 8.05041885]
[637.53076172 -2.34247875]
[651.57012939 2.63213587]
[666.25384521 -0.43164390]
[680.93762207 -3.49542356]
[692.86651611 -13.88832092]
[706.90582275 -8.91370678]
[721.58959961 -11.97748661]
[730.03601074 -25.33542061]
[745.47210693 -28.72686768]
[758.73999023 -20.13974190]
[761.96807861 -4.66863346]
[753.24114990 8.50772381]
[737.73675537 11.57203102]
[724.65338135 2.70628881]
[709.96960449 5.77006865]
[699.09100342 15.94382381]
[684.00140381 11.18835163]
[669.31762695 14.25213146]
[654.63385010 17.31591034]
[643.75524902 27.48966599]
[628.66564941 22.73419380]
[613.98187256 25.79797363]
[599.29815674 28.86175346]
[584.61437988 31.92553329]
[569.93060303 34.98931122]
[566.39160156 50.55255127]
[556.39129639 63.06615448]
[541.88671875 70.00007629]
[525.75201416 69.92424011]
[511.20892334 62.80317688]
[501.18328857 50.01321793]
[486.55935669 53.35103226]
[471.93545532 56.68884659]
[457.31152344 60.02666092]
[442.68762207 63.36447144]
[432.00115967 73.73986816]
[416.82525635 69.26738739]
[402.20135498 72.60520172]
[391.51489258 82.98059082]
[376.33898926 78.50811005]
[361.71508789 81.84592438]
[347.09115601 85.18373871]
[332.46725464 88.52155304]
[317.84332275 91.85936737]
[317.73199463 100.79121399]
[316.02886963 109.56591034]
[312.78646851 117.90187073]
[308.10675049 125.53122711]
[302.13784790 132.20841980]
[295.06942749 137.71806335]
[287.12677002 141.88198853]
[278.56332397 144.56486511]
[269.65289307 145.67872620]
[260.68075562 145.18582153]
[251.93449402 143.09980774]
[243.69488525 139.48548889]
[236.22676086 134.45675659]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 80]
[4 79]
[5 78]
[6 77]
[7 76]
[8 75]
[9 74]
[10 73]
[11 21]
[12 20]
[13 19]
[26 72]
[27 71]
[28 70]
[29 69]
[35 63]
[36 62]
[37 61]
[38 60]
[44 59]
[45 58]
[46 56]
[47 55]
[48 54]
[49 53]
[86 154]
[87 153]
[88 152]
[89 151]
[90 150]
[92 148]
[93 147]
[95 145]
[96 144]
[97 143]
[98 142]
[99 141]
[106 135]
[107 134]
[108 133]
[109 132]
[110 131]
[112 129]
[113 128]
[114 127]
[116 125]
[117 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
