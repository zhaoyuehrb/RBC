%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:40:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGCACCGCCUGCCGAAUCAAUUCAACAUGGCAGCCAUGCGCUGGCGAUGGUGGCAGCGGCUGUUACCUUGGAGGUUGCUGCAGGCCCGUGGCUUUCCACAAAAUUCUGCACCCAGCCUGGGCCUAG\
) } def
/len { sequence length } bind def

/coor [
[89.59474945 155.50039673]
[76.71067047 147.81922913]
[71.02879333 133.93699646]
[74.83007050 119.42664337]
[86.58905029 110.11306763]
[71.72340393 112.11622620]
[56.85776138 114.11938477]
[41.99211502 116.12253571]
[27.20954895 118.66728210]
[12.52978325 121.75021362]
[-2.14998221 124.83314514]
[-14.06529617 135.24160767]
[-28.11109352 130.28530884]
[-42.79085922 133.36824036]
[-47.78110886 152.31875610]
[-71.18762970 162.13088989]
[-83.79744720 170.25447083]
[-96.40726471 178.37803650]
[-103.42035675 193.20196533]
[-119.78465271 194.27053833]
[-128.66596985 180.48452759]
[-120.92796326 166.02577209]
[-104.53083801 165.76821899]
[-91.92102051 157.64463806]
[-79.31120300 149.52107239]
[-81.11971283 142.24238586]
[-84.73672485 127.68500519]
[-86.54522705 120.40631866]
[-101.49076843 119.12931061]
[-116.43631744 117.85230255]
[-131.38185120 116.57529449]
[-146.32739258 115.29828644]
[-162.62377930 119.97422791]
[-171.62826538 105.60914612]
[-160.31727600 92.97991180]
[-145.05039978 100.35274506]
[-130.10484314 101.62975311]
[-115.15930939 102.90676117]
[-100.21376038 104.18376160]
[-85.26821899 105.46076965]
[-59.02701187 103.24401093]
[-45.87379456 118.68847656]
[-31.19402695 115.60553741]
[-20.32870865 105.41760254]
[-5.23291636 110.15338135]
[9.44684887 107.07044983]
[24.12661552 103.98751068]
[26.37597275 101.14590454]
[30.16015244 99.30068207]
[34.97224045 99.18259430]
[39.98896027 101.25689697]
[54.85460281 99.25373840]
[69.72024536 97.25057983]
[84.58589172 95.24742889]
[95.63476562 85.10235596]
[98.89621735 70.46121979]
[102.15766907 55.82007980]
[105.41912079 41.17893982]
[108.68057251 26.53780365]
[111.94202423 11.89666557]
[115.20347595 -2.74447298]
[118.46492767 -17.38561058]
[121.72638702 -32.02674866]
[110.00369263 -41.86733246]
[104.20764160 -56.03293610]
[105.67012024 -71.26840973]
[114.05506134 -84.07276154]
[127.43567657 -91.50363159]
[142.73718262 -91.85346985]
[156.44342041 -85.04187775]
[165.40478516 -72.63411713]
[167.56202698 -57.48140335]
[162.41941833 -43.06570816]
[151.15872192 -32.69965744]
[136.36752319 -28.76529694]
[133.10606384 -14.12415886]
[129.84461975 0.51697975]
[126.58316040 15.15811825]
[123.32170868 29.79925537]
[120.06025696 44.44039536]
[116.79880524 59.08153152]
[113.53735352 73.72267151]
[110.27590179 88.36380768]
[117.13453674 101.70394135]
[130.93972778 107.57051086]
[144.74491882 113.43708038]
[158.55010986 119.30364990]
[172.35530090 125.17022705]
[186.16050720 131.03678894]
[199.96569824 136.90336609]
[209.19297791 137.39604187]
[214.03285217 143.08454895]
[227.69110107 149.28555298]
[241.34934998 155.48655701]
[255.00758362 161.68756104]
[266.74441528 151.99177551]
[281.46704102 148.36811829]
[296.24255371 151.48333740]
[308.15133667 160.66711426]
[314.86407471 174.05549622]
[315.09719849 188.96894836]
[328.75546265 195.16995239]
[343.46105957 189.38020325]
[357.91989136 195.76119995]
[363.55383301 210.52717590]
[357.02035522 224.91777039]
[342.19561768 230.39527893]
[327.87490845 223.71000671]
[322.55444336 208.82818604]
[308.89620972 202.62719727]
[297.51528931 212.26773071]
[283.01760864 216.02633667]
[268.26531982 213.10566711]
[256.19479370 204.03247070]
[249.23237610 190.56355286]
[248.80657959 175.34579468]
[235.14834595 169.14479065]
[221.49009705 162.94378662]
[207.83186340 156.74279785]
[194.09912109 150.70855713]
[180.29393005 144.84199524]
[166.48873901 138.97541809]
[152.68354797 133.10884094]
[138.87835693 127.24227905]
[125.07315826 121.37570190]
[111.26796722 115.50913239]
[118.06679535 128.87983704]
[115.46567535 143.65258789]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 54]
[6 53]
[7 52]
[8 51]
[9 47]
[10 46]
[11 45]
[13 43]
[14 42]
[16 25]
[17 24]
[18 23]
[28 40]
[29 39]
[30 38]
[31 37]
[32 36]
[55 83]
[56 82]
[57 81]
[58 80]
[59 79]
[60 78]
[61 77]
[62 76]
[63 75]
[84 126]
[85 125]
[86 124]
[87 123]
[88 122]
[89 121]
[90 120]
[92 119]
[93 118]
[94 117]
[95 116]
[101 110]
[102 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
