%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:26:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUGAGCAGACGUGUGGUUCGGCAAAGCAAGUUCCGCCAUGUGUUUGGGCAGGCAGCAAAGGCCGACCAGGCCUACGAGGACAUCCGUGUGUCCAAGGUCA\
) } def
/len { sequence length } bind def

/coor [
[105.94149017 153.50631714]
[92.65199280 160.46257019]
[77.68171692 159.51876831]
[65.37108612 150.94856262]
[59.28940964 137.23677063]
[61.19998550 122.35894775]
[70.54887390 110.62871552]
[84.62303925 105.44729614]
[69.76410675 103.39495087]
[54.90517426 101.34259796]
[40.04624557 99.29024506]
[25.18731308 97.23789215]
[10.32838154 95.18553925]
[-4.53055048 93.13318634]
[-19.38948250 91.08083344]
[-34.24841309 89.02848053]
[-49.10734558 86.97612762]
[-63.96627808 84.92377472]
[-78.82521057 82.87142181]
[-91.34426117 92.14024353]
[-106.38409424 89.84719086]
[-115.14334869 77.85507202]
[-130.00227356 75.80271912]
[-144.86120605 73.75036621]
[-156.33518982 84.37495422]
[-171.95655823 85.08689880]
[-184.34938049 75.55004120]
[-187.66217041 60.26738739]
[-180.33070374 46.45494080]
[-165.81668091 40.63452148]
[-150.97319031 45.55434799]
[-142.80885315 58.89143372]
[-127.94992828 60.94378662]
[-113.09099579 62.99613953]
[-101.40895081 53.82741547]
[-86.31064606 55.69712067]
[-76.77285767 68.01248932]
[-61.91392517 70.06484222]
[-47.05499268 72.11719513]
[-32.19606018 74.16954803]
[-17.33712959 76.22190094]
[-2.47819781 78.27425385]
[12.38073349 80.32660675]
[27.23966599 82.37895966]
[42.09859848 84.43131256]
[56.95752716 86.48366547]
[71.81645966 88.53601837]
[86.67539215 90.58837128]
[99.92437744 83.55527496]
[106.55015564 70.09796906]
[101.69377899 55.29751968]
[108.60496521 41.74428558]
[122.74486542 37.20568085]
[129.37063599 23.74837685]
[135.99642944 10.29107285]
[129.52420044 -3.94424963]
[133.76626587 -18.99546051]
[146.71963501 -27.75583649]
[162.26812744 -26.08899879]
[173.07022095 -14.78197479]
[174.02549744 0.82640368]
[164.68290710 13.36633682]
[149.45372009 16.91685295]
[142.82794189 30.37415695]
[136.20216370 43.83146286]
[141.22703552 57.80594635]
[134.69926453 71.54795074]
[120.00746155 76.72374725]
[113.38168335 90.18105316]
[114.29132843 95.28521729]
[113.50018311 99.94197845]
[126.41363525 107.57366180]
[139.32710266 115.20534515]
[152.24055481 122.83702850]
[165.15400696 130.46871948]
[174.17611694 126.81738281]
[183.71736145 127.81880951]
[191.55374146 133.10804749]
[195.92050171 141.33615112]
[195.90896606 150.51190186]
[208.07106018 159.29162598]
[220.23315430 168.07135010]
[232.39523315 176.85107422]
[244.55732727 185.63079834]
[256.71942139 194.41052246]
[273.07992554 195.53575134]
[280.04165649 210.38386536]
[270.44299316 223.68038940]
[254.15820312 221.74700928]
[247.93969727 206.57261658]
[235.77760315 197.79289246]
[223.61550903 189.01316833]
[211.45343018 180.23344421]
[199.29133606 171.45372009]
[187.12924194 162.67399597]
[166.58708191 162.67143250]
[157.52233887 143.38217163]
[144.60887146 135.75048828]
[131.69541931 128.11880493]
[118.78195190 120.48712158]
[105.86849976 112.85543823]
[113.67015076 125.66692352]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 48]
[9 47]
[10 46]
[11 45]
[12 44]
[13 43]
[14 42]
[15 41]
[16 40]
[17 39]
[18 38]
[19 37]
[22 34]
[23 33]
[24 32]
[49 69]
[50 68]
[53 65]
[54 64]
[55 63]
[71 101]
[72 100]
[73 99]
[74 98]
[75 97]
[80 95]
[81 94]
[82 93]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
