%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCUGGCCAUGGCGCGGGCGGCGGGCGCGCGGGGCCCUGCCGGGUGGUGCAGGAGGCGCGGGCGCUGCGGGCGGGGCACGCUCCUCGCCUUCGCCGCGUGGACCGCGG\
) } def
/len { sequence length } bind def

/coor [
[84.73429108 351.99185181]
[81.37541199 336.30435181]
[91.65718079 323.98910522]
[91.65718079 308.98910522]
[88.46251678 302.19934082]
[91.87748718 293.56231689]
[92.30583191 278.56842041]
[92.52001953 263.56994629]
[92.52001953 248.56994629]
[92.52001953 233.56994629]
[92.52001953 218.56994629]
[92.52001953 203.56994629]
[81.83914948 193.25227356]
[81.62546539 178.04013062]
[92.52001953 166.90701294]
[92.52001953 151.90701294]
[92.52001953 136.90701294]
[92.52001953 121.90701294]
[92.52001953 106.90701294]
[89.33182526 99.36184692]
[92.74033356 91.48020172]
[93.16867065 76.48632050]
[93.59701538 61.49243546]
[94.02535248 46.49855423]
[94.45369720 31.50467110]
[94.88203430 16.51078796]
[84.51102448 7.77764082]
[81.15937805 -5.15792942]
[85.84558868 -17.46301460]
[96.62789154 -24.67462921]
[97.48422241 -39.65016556]
[98.34055328 -54.62570190]
[90.30951691 -64.84277344]
[91.42082214 -77.38642120]
[100.52221680 -85.49564362]
[101.80583954 -100.44062042]
[103.08946991 -115.38559723]
[104.37309265 -130.33056641]
[105.65671539 -145.27554321]
[106.94034576 -160.22052002]
[108.22396851 -175.16549683]
[109.50759125 -190.11047363]
[101.77158356 -200.55271912]
[103.24063873 -213.05950928]
[112.56989288 -220.90553284]
[114.27976227 -235.80775452]
[115.98963165 -250.70997620]
[117.69950104 -265.61221313]
[119.40937042 -280.51443481]
[121.11924744 -295.41665649]
[122.82911682 -310.31887817]
[110.14012146 -318.87738037]
[102.89212799 -332.35794067]
[102.75067139 -347.66278076]
[109.74824524 -361.27502441]
[122.27687836 -370.06661987]
[137.45756531 -372.01733398]
[151.80189514 -366.67892456]
[162.01365662 -355.27810669]
[165.74626160 -340.43472290]
[162.14198303 -325.55966187]
[152.02905273 -314.07107544]
[137.73133850 -308.60900879]
[136.02146912 -293.70678711]
[134.31159973 -278.80456543]
[132.60173035 -263.90234375]
[130.89186096 -249.00010681]
[129.18199158 -234.09788513]
[127.47211456 -219.19566345]
[135.34837341 -203.58515930]
[124.45256805 -188.82684326]
[123.16894531 -173.88188171]
[121.88532257 -158.93690491]
[120.60169220 -143.99192810]
[119.31806946 -129.04695129]
[118.03444672 -114.10196686]
[116.75081635 -99.15699768]
[115.46719360 -84.21202087]
[123.78601074 -68.83280945]
[113.31609344 -53.76937103]
[112.45976257 -38.79383469]
[111.60343170 -23.81829834]
[123.30776978 -11.83607197]
[122.78658295 5.24182081]
[109.87591553 16.93912888]
[109.44757843 31.93301010]
[109.01923370 46.92689514]
[108.59089661 61.92077637]
[108.16255188 76.91465759]
[107.73421478 91.90853882]
[107.52001953 106.90701294]
[107.52001953 121.90701294]
[107.52001953 136.90701294]
[107.52001953 151.90701294]
[107.52001953 166.90701294]
[118.41457367 178.04013062]
[118.20089722 193.25227356]
[107.52001953 203.56994629]
[107.52001953 218.56994629]
[107.52001953 233.56994629]
[107.52001953 248.56994629]
[107.52001953 263.56994629]
[110.68695831 272.30099487]
[107.29971313 278.99676514]
[106.87136841 293.99066162]
[106.65718079 308.98910522]
[106.65718079 323.98910522]
[116.93894958 336.30435181]
[113.58006287 351.99185181]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 107]
[4 106]
[6 105]
[7 104]
[8 102]
[9 101]
[10 100]
[11 99]
[12 98]
[15 95]
[16 94]
[17 93]
[18 92]
[19 91]
[21 90]
[22 89]
[23 88]
[24 87]
[25 86]
[26 85]
[30 82]
[31 81]
[32 80]
[35 78]
[36 77]
[37 76]
[38 75]
[39 74]
[40 73]
[41 72]
[42 71]
[45 69]
[46 68]
[47 67]
[48 66]
[49 65]
[50 64]
[51 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
