%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:25:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAUUGGCCGGAGCGCCCGCCGCUCACGGUCAGGGGUUGCCGGAUCCCGUCCGCGGGCGAUGCUGCUGCGGAGGGUGGUCGAGGGAGGCCGGGCGGUAGCCGCCGCGGUCCGUGGCUCGGCAAGUACCAGGACGGGUCUUGGCAGCGCCGAAGGGCACG\
) } def
/len { sequence length } bind def

/coor [
[-135.60467529 724.68414307]
[-149.38323975 718.75531006]
[-160.36470032 708.53729248]
[-167.26934814 695.22088623]
[-169.29252625 680.35797119]
[-166.19938660 665.68286133]
[-176.54414368 676.54498291]
[-186.88891602 687.40710449]
[-197.23367310 698.26922607]
[-207.57844543 709.13140869]
[-217.92320251 719.99353027]
[-228.16149902 730.95605469]
[-238.29235840 742.01794434]
[-248.42321777 753.07989502]
[-258.55407715 764.14178467]
[-268.68493652 775.20367432]
[-269.42010498 791.22985840]
[-282.49234009 800.53021240]
[-297.87371826 795.97027588]
[-303.76495361 781.04809570]
[-295.64682007 767.21063232]
[-279.74682617 765.07281494]
[-269.61596680 754.01092529]
[-259.48510742 742.94903564]
[-249.35426331 731.88708496]
[-239.22340393 720.82519531]
[-237.01379395 713.73260498]
[-228.78533936 709.64874268]
[-218.44056702 698.78662109]
[-208.09580994 687.92449951]
[-197.75103760 677.06237793]
[-187.40628052 666.20025635]
[-177.06150818 655.33807373]
[-168.53128052 642.99975586]
[-162.02302551 629.48522949]
[-163.47193909 614.66125488]
[-150.51319885 605.58477783]
[-144.00494385 592.07025146]
[-137.49668884 578.55572510]
[-130.98843384 565.04119873]
[-124.48017120 551.52667236]
[-117.97191620 538.01214600]
[-111.46366119 524.49761963]
[-104.95539856 510.98306274]
[-110.10186005 497.05291748]
[-103.69408417 483.25454712]
[-89.04795074 477.95089722]
[-82.53969574 464.43637085]
[-76.03143311 450.92184448]
[-69.52317810 437.40731812]
[-63.01492310 423.89279175]
[-56.50666809 410.37823486]
[-49.99841309 396.86370850]
[-53.69754028 385.31341553]
[-48.34489822 373.98458862]
[-36.32734680 369.21029663]
[-29.55663872 355.82531738]
[-22.91683960 342.37493896]
[-16.40858459 328.86041260]
[-20.10771370 317.31011963]
[-14.75506878 305.98129272]
[-2.73752046 301.20700073]
[4.03318930 287.82202148]
[10.80389881 274.43704224]
[17.57460785 261.05206299]
[24.08286476 247.53753662]
[30.32618904 233.89859009]
[36.56951523 220.25964355]
[42.81283951 206.62069702]
[49.05616379 192.98175049]
[55.29948807 179.34280396]
[61.54281235 165.70385742]
[67.78614044 152.06491089]
[62.36885452 138.23780823]
[68.50617981 124.31703949]
[83.04604340 118.72864532]
[89.28936768 105.08969879]
[57.86396027 73.75297546]
[60.19602203 58.93536377]
[62.52808380 44.11775589]
[64.86014557 29.30014992]
[55.35669327 16.67240334]
[57.64860153 1.03518200]
[70.37611389 -8.33422947]
[85.98823547 -5.87712479]
[95.22255707 6.94873953]
[92.60053253 22.53400612]
[79.67774963 31.63221169]
[77.34568787 46.44981766]
[75.01363373 61.26742554]
[72.68157196 76.08503723]
[79.47026062 79.27307892]
[99.83634186 88.83721924]
[109.74943542 77.57975006]
[119.66252136 66.32228088]
[129.57560730 55.06480789]
[139.48869324 43.80733871]
[145.41857910 27.92423820]
[162.32252502 29.22550011]
[165.75158691 45.82904816]
[150.74617004 53.72042847]
[140.83308411 64.97789764]
[130.91999817 76.23536682]
[121.00690460 87.49284363]
[111.09381104 98.75031281]
[102.92832184 111.33302307]
[96.68499756 124.97197723]
[101.95716095 139.62945557]
[95.43125153 153.37236023]
[81.42508698 158.30822754]
[75.18176270 171.94718933]
[68.93843842 185.58613586]
[62.69511032 199.22508240]
[56.45178604 212.86402893]
[50.20846176 226.50297546]
[43.96513748 240.14192200]
[37.72181320 253.78086853]
[37.96653366 260.46966553]
[35.18396378 265.49783325]
[30.95958138 267.82278442]
[24.18887138 281.20776367]
[17.41816139 294.59274292]
[10.64745235 307.97769165]
[12.11112022 326.31015015]
[-2.89405131 335.36865234]
[-9.40230751 348.88317871]
[-10.31667423 358.02374268]
[-16.17166710 362.59603882]
[-22.94237518 375.98101807]
[-21.47870827 394.31347656]
[-36.48387909 403.37197876]
[-42.99213409 416.88650513]
[-49.50039291 430.40103149]
[-56.00864792 443.91555786]
[-62.51690292 457.43011475]
[-69.02516174 470.94464111]
[-75.53341675 484.45916748]
[-70.54824829 499.21673584]
[-77.34106445 512.82965088]
[-91.44087219 517.49133301]
[-97.94912720 531.00585938]
[-104.45738220 544.52038574]
[-110.96563721 558.03491211]
[-117.47389221 571.54943848]
[-123.98214722 585.06402588]
[-130.49040222 598.57855225]
[-136.99865723 612.09307861]
[-136.01525879 627.88366699]
[-148.50848389 635.99346924]
[-155.01673889 649.50799561]
[-142.37768555 641.42999268]
[-127.75792694 638.07397461]
[-112.86119843 639.83111572]
[-99.42349243 646.49652100]
[-89.01078796 657.29357910]
[-82.83653259 670.96392822]
[-81.62024689 685.91448975]
[-85.50367737 700.40307617]
[-94.03426361 712.74121094]
[-106.21788025 721.49102783]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 33]
[7 32]
[8 31]
[9 30]
[10 29]
[11 28]
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[34 150]
[35 149]
[37 147]
[38 146]
[39 145]
[40 144]
[41 143]
[42 142]
[43 141]
[44 140]
[47 137]
[48 136]
[49 135]
[50 134]
[51 133]
[52 132]
[53 131]
[56 129]
[57 128]
[58 126]
[59 125]
[62 123]
[63 122]
[64 121]
[65 120]
[66 117]
[67 116]
[68 115]
[69 114]
[70 113]
[71 112]
[72 111]
[73 110]
[76 107]
[77 106]
[78 91]
[79 90]
[80 89]
[81 88]
[93 105]
[94 104]
[95 103]
[96 102]
[97 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
