%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:00:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAUUUUGGGAAGUCCAAAAUGAUUAGCUCAGUAAAACUCAAUCUCAUCCUAGUUCUGUCGCUGUCCACAAUGCAUGUGUUUUGGUGUUAUCCAGUUCCAUCUUCUAAGGUGUCUGGAA\
) } def
/len { sequence length } bind def

/coor [
[95.95653534 146.80917358]
[83.27525330 138.79762268]
[86.97552490 124.26185608]
[79.49132538 124.74832916]
[70.11724091 136.45843506]
[60.74316406 148.16854858]
[51.36908340 159.87866211]
[41.99500275 171.58876038]
[32.62092209 183.29887390]
[23.24684143 195.00897217]
[23.57728958 211.04862976]
[11.15137672 221.19635010]
[-4.49879980 217.66767883]
[-11.36776447 203.16950989]
[-4.18623447 188.82359314]
[11.53673458 185.63490295]
[20.91081429 173.92478943]
[30.28489494 162.21467590]
[39.65897369 150.50457764]
[49.03305435 138.79446411]
[58.40713501 127.08435822]
[67.78121185 115.37425232]
[81.81772614 91.43639374]
[71.00660706 81.03833008]
[60.19549179 70.64026642]
[51.73276901 66.88500214]
[49.24311066 59.82914734]
[38.70557785 49.15392303]
[28.16804504 38.47869873]
[10.34621525 34.07453918]
[6.45763063 17.01491928]
[-4.35348654 6.61685371]
[-15.16460323 -3.78121114]
[-20.47327614 -5.07778883]
[-24.30367851 -8.04143715]
[-26.26107597 -11.79488945]
[-26.37237549 -15.43420124]
[-36.34162140 -26.64197350]
[-46.31086349 -37.84974670]
[-56.28010941 -49.05751801]
[-70.94223022 -44.81664276]
[-85.99095154 -47.36586761]
[-98.43835449 -56.19903946]
[-105.81298828 -69.56233215]
[-106.65061951 -84.80244446]
[-100.78492737 -98.89344788]
[-89.38056183 -109.03756714]
[-74.70185089 -113.22067261]
[-59.66328049 -110.61220551]
[-47.25075912 -101.73008728]
[-39.92880630 -88.33786011]
[-39.15119934 -73.09455872]
[-45.07233429 -59.02676392]
[-35.10309219 -47.81899261]
[-25.13384628 -36.61121750]
[-15.16460323 -25.40344429]
[-4.76653814 -14.59232807]
[6.04457855 -4.19426298]
[16.85569572 6.20380211]
[29.02753067 6.30372715]
[38.12576675 14.98386860]
[38.84326935 27.94116592]
[49.38080215 38.61639023]
[59.91833496 49.29161453]
[70.59355927 59.82914734]
[81.40467072 70.22721100]
[92.21578979 80.62527466]
[107.19557190 79.84671783]
[116.87049866 68.38391876]
[126.54541779 56.92111206]
[136.22033691 45.45830917]
[136.30639648 29.41548538]
[148.99157715 19.59376907]
[164.54486084 23.52754021]
[171.03514099 38.19914627]
[163.48359680 52.35378647]
[147.68315125 55.13323212]
[138.00822449 66.59603119]
[128.33329773 78.05883789]
[118.65837860 89.52164459]
[132.64448547 84.10048676]
[143.15045166 73.39421082]
[157.56346130 69.23902893]
[172.15647888 72.70941162]
[183.15599060 82.90797424]
[187.71769714 97.19750977]
[184.66197205 111.88296509]
[174.77900696 123.16689301]
[160.62438965 128.13143921]
[145.85829163 125.49284363]
[134.29895020 115.93334961]
[119.82621002 111.99131775]
[130.63732910 122.38938141]
[141.44844055 132.78744507]
[152.25956726 143.18551636]
[163.07067871 153.58357239]
[174.06794739 152.74449158]
[183.48493958 158.04879761]
[188.26708984 167.49421692]
[187.02084351 177.78495789]
[197.27769470 188.73014832]
[207.53453064 199.67532349]
[217.79138184 210.62051392]
[228.04823303 221.56570435]
[243.89089966 225.80146790]
[247.88206482 241.70751953]
[235.91595459 252.92108154]
[220.30226135 247.90661621]
[217.10304260 231.82255554]
[206.84619141 220.87736511]
[196.58935547 209.93217468]
[186.33250427 198.98698425]
[176.07565308 188.04179382]
[157.25184631 183.94352722]
[152.67260742 164.39468384]
[141.86149597 153.99662781]
[131.05038452 143.59855652]
[120.23926544 133.20050049]
[109.42814636 122.80242920]
[101.94393921 123.28890991]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 22]
[5 21]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[23 67]
[24 66]
[25 65]
[27 64]
[28 63]
[29 62]
[31 59]
[32 58]
[33 57]
[37 56]
[38 55]
[39 54]
[40 53]
[68 80]
[69 79]
[70 78]
[71 77]
[92 119]
[93 118]
[94 117]
[95 116]
[96 115]
[100 113]
[101 112]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
