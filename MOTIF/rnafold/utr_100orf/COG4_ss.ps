%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:25:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGUGCCGAAUGGGGACCAAGAUGGCGGACCUUGAUUCGCCUCCGAAGCUGUCAGGGGUGCAGCAGCCGUCUGAGGGGGUGGGAGGUGGCCGCUGCUCCGAAAUCUCCG\
) } def
/len { sequence length } bind def

/coor [
[25.64612770 290.80294800]
[18.92216301 296.08950806]
[10.94514084 299.08007812]
[2.47117472 299.51330566]
[-5.70317316 297.36914062]
[-15.05552006 309.09661865]
[-17.61052132 324.71014404]
[-31.59511185 329.83660889]
[-40.94746017 341.56408691]
[-40.58726501 357.60308838]
[-52.99433899 367.77383423]
[-68.65103149 364.27420044]
[-75.54687500 349.78878784]
[-68.39196014 335.42959595]
[-52.67493057 332.21173096]
[-43.32258224 320.48425293]
[-41.43652344 305.70956421]
[-26.78299332 299.74426270]
[-17.43064499 288.01678467]
[-22.42029953 266.75546265]
[-10.30541420 248.26878357]
[11.69932175 244.26316833]
[18.95510483 231.13482666]
[26.21088791 218.00646973]
[33.46667099 204.87811279]
[29.10937881 190.68130493]
[36.28075790 177.26393127]
[51.20122910 172.78985596]
[58.45701218 159.66149902]
[65.71279144 146.53315735]
[72.96857452 133.40480042]
[63.17863083 122.15322876]
[57.82423019 108.23304749]
[57.55037308 93.32110596]
[62.39004517 79.21371460]
[71.76025391 67.61026001]
[84.53225708 59.90851212]
[99.16752625 57.03622818]
[113.90306854 59.33941650]
[121.15885162 46.21106339]
[128.41464233 33.08271027]
[135.67042542 19.95436096]
[142.92620850 6.82600927]
[150.18199158 -6.30234194]
[157.43777466 -19.43069267]
[164.69355774 -32.55904388]
[156.88766479 -45.71257019]
[156.71482849 -60.90687943]
[164.12133789 -74.06020355]
[177.03080750 -81.68918610]
[191.92529297 -81.83115387]
[199.18107605 -94.95950317]
[199.08460999 -110.78041840]
[212.01289368 -118.17694855]
[219.26867676 -131.30529785]
[226.52445984 -144.43365479]
[233.78024292 -157.56199646]
[241.03602600 -170.69035339]
[248.10697937 -183.91917419]
[254.99171448 -197.24584961]
[261.87643433 -210.57254028]
[256.83883667 -225.55247498]
[263.94387817 -239.66963196]
[278.97622681 -244.54855347]
[293.01748657 -237.29467773]
[297.73721313 -222.21157837]
[290.33526611 -208.24780273]
[275.20312500 -203.68780518]
[268.31838989 -190.36112976]
[261.43365479 -177.03443909]
[261.15560913 -169.54005432]
[254.16438293 -163.43457031]
[246.90859985 -150.30621338]
[239.65281677 -137.17787170]
[232.39703369 -124.04951477]
[225.14125061 -110.92116547]
[225.75669861 -96.03927612]
[212.30941772 -87.70372009]
[205.05363464 -74.57537079]
[212.85777283 -61.88832474]
[213.26638794 -46.89869690]
[206.06964111 -33.62943268]
[193.11230469 -25.69192123]
[177.82189941 -25.30326080]
[170.56611633 -12.17490959]
[163.31033325 0.95344132]
[156.05455017 14.08179283]
[148.79876709 27.21014404]
[141.54298401 40.33849716]
[134.28720093 53.46684647]
[127.03142548 66.59519958]
[136.82136536 77.84677124]
[142.17576599 91.76695251]
[142.44963074 106.67889404]
[137.60995483 120.78628540]
[128.23974609 132.38973999]
[115.46774292 140.09149170]
[100.83247375 142.96377563]
[86.09693146 140.66058350]
[78.84114838 153.78894043]
[71.58536530 166.91728210]
[64.32958221 180.04563904]
[68.47944641 195.05950928]
[60.93402863 208.27017212]
[46.59502411 212.13389587]
[39.33924103 225.26225281]
[32.08345795 238.39060974]
[24.82767296 251.51895142]
[29.99208260 258.55020142]
[32.77427292 266.78274536]
[32.93265533 275.43707275]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 19]
[6 18]
[8 16]
[9 15]
[22 108]
[23 107]
[24 106]
[25 105]
[28 102]
[29 101]
[30 100]
[31 99]
[39 91]
[40 90]
[41 89]
[42 88]
[43 87]
[44 86]
[45 85]
[46 84]
[51 79]
[52 78]
[54 76]
[55 75]
[56 74]
[57 73]
[58 72]
[59 70]
[60 69]
[61 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
