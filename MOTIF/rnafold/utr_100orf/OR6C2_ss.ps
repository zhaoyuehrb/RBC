%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:26:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAAAACCACACAGUAAUAAGAACUUUUAUCCUGCUGGGACUGACAGGUGACCCACACCUGCAAGUUCUGCUUUUUAUCUUUCUAUUUCUCACCUACA\
) } def
/len { sequence length } bind def

/coor [
[100.64099884 278.43603516]
[89.38953400 268.51611328]
[79.55195618 257.19259644]
[71.30180359 244.66523743]
[64.78461456 231.15501404]
[60.11535645 216.90025330]
[57.37639999 202.15245056]
[56.61606216 187.17172241]
[57.84775543 172.22238159]
[61.04975510 157.56813049]
[66.16557312 143.46746826]
[73.10495758 130.16917419]
[81.74549866 117.90780640]
[91.94003296 106.89470673]
[76.98536682 105.72944641]
[62.03069305 104.56419373]
[47.07602310 103.39893341]
[32.12135315 102.23367310]
[17.13767624 101.53407288]
[2.13949060 101.30078888]
[-12.85869503 101.06751251]
[-27.85688210 100.83423615]
[-42.85506821 100.60095978]
[-56.91192245 109.04707336]
[-71.12176514 100.86096954]
[-70.86672974 84.46380615]
[-56.40917206 76.72357941]
[-42.62179184 85.60277557]
[-27.62360382 85.83605194]
[-12.62541771 86.06932831]
[2.37276793 86.30260468]
[17.37095451 86.53588104]
[21.47323608 83.78597260]
[27.38117981 83.70898438]
[33.28660965 87.27900696]
[48.24127960 88.44425964]
[63.19595337 89.60951996]
[78.15061951 90.77478027]
[93.10529327 91.94003296]
[105.42962646 83.38954926]
[109.57415009 68.97348785]
[113.71868134 54.55742264]
[117.86320496 40.14136124]
[122.00772858 25.72529602]
[114.61339569 12.01538849]
[119.02189636 -2.54550982]
[132.13777161 -9.51039028]
[136.28228760 -23.92645454]
[140.42681885 -38.34251785]
[144.57135010 -52.75858307]
[148.71586609 -67.17464447]
[152.86039734 -81.59071350]
[146.38160706 -96.26738739]
[153.94421387 -110.41611481]
[169.74682617 -113.18320465]
[181.66703796 -102.44597626]
[180.56068420 -86.44111633]
[167.27645874 -77.44618225]
[163.13192749 -63.03012085]
[158.98741150 -48.61405563]
[154.84288025 -34.19799423]
[150.69834900 -19.78192902]
[146.55383301 -5.36586428]
[153.96810913 7.50130320]
[149.97033691 22.18028259]
[136.42379761 29.86982155]
[132.27926636 44.28588486]
[128.13475037 58.70195007]
[123.99021912 73.11801147]
[119.84569550 87.53408051]
[133.72419739 81.84310913]
[148.23448181 78.04158783]
[163.12057495 76.19657898]
[178.11988831 76.34062958]
[192.96780396 78.47119904]
[207.40240479 82.55070496]
[221.16905212 88.50717926]
[234.02488708 96.23554230]
[245.74311829 105.59946442]
[256.11703491 116.43375397]
[264.96362305 128.54728699]
[272.12683105 141.72637939]
[277.48031616 155.73852539]
[280.92959595 170.33654785]
[282.41384888 185.26293945]
[281.90689087 200.25436401]
[279.41763306 215.04638672]
[274.99002075 229.37803650]
[268.70217896 242.99652100]
[260.66497803 255.66157532]
[251.02024841 267.14978027]
[239.93809509 277.25848389]
[227.61404419 285.80935669]
[214.26547241 292.65158081]
[200.12788391 297.66439819]
[185.45065308 300.75942993]
[170.49272156 301.88204956]
[155.51795959 301.01248169]
[140.79051208 298.16601562]
[126.57019043 293.39291382]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 39]
[15 38]
[16 37]
[17 36]
[18 35]
[19 32]
[20 31]
[21 30]
[22 29]
[23 28]
[40 70]
[41 69]
[42 68]
[43 67]
[44 66]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[52 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
