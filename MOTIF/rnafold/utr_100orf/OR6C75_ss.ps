%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:20:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGAAAUUCCACAGCAGUAACAGACUUUAUUCUUCUUGGAUUGACAAGUGACCCACAGUGGCAGGUUGUACUUUUCAUAUUUCUUCUUGUUACCUACA\
) } def
/len { sequence length } bind def

/coor [
[98.51383972 236.68994141]
[106.20230865 223.62612915]
[117.89717102 213.98216248]
[112.86441803 199.85165405]
[107.83167267 185.72114563]
[102.79891968 171.59062195]
[97.76617432 157.46011353]
[92.73342133 143.32960510]
[87.70066833 129.19908142]
[75.64821625 120.26945496]
[60.66453934 119.56984711]
[45.68086243 118.87023926]
[30.69718742 118.17063141]
[13.41609573 128.31698608]
[-2.55243158 117.60162354]
[-17.55061722 117.83489990]
[-26.25913239 121.14463806]
[-33.01716995 117.83489990]
[-48.01535797 117.60162354]
[-63.01354218 117.36834717]
[-78.01172638 117.13506317]
[-93.00991821 116.90178680]
[-104.18180847 128.08053589]
[-119.98590088 128.00183105]
[-131.04591370 116.71237946]
[-130.80012512 100.91000366]
[-119.39436340 89.96997833]
[-103.59546661 90.38282013]
[-92.77664185 101.90360260]
[-77.77845001 102.13687897]
[-62.78026581 102.37015533]
[-47.78208160 102.60343170]
[-32.78389359 102.83671570]
[-17.78389549 102.83671570]
[-2.78570867 102.60343170]
[3.79740787 94.50782776]
[13.99029350 91.39987946]
[24.39480972 94.57428741]
[31.39679337 103.18695831]
[46.38047028 103.88656616]
[61.36414719 104.58616638]
[76.34782410 105.28577423]
[85.27744293 84.63282776]
[104.75954437 82.30134583]
[114.24158478 70.67848969]
[123.72363281 59.05562973]
[126.45192719 43.47143936]
[140.49259949 38.50065231]
[149.97463989 26.87779617]
[159.45669556 15.25493908]
[168.93873596 3.63208270]
[178.05473328 -8.28004169]
[186.79583740 -20.46991158]
[195.53695679 -32.65977859]
[204.27807617 -44.84964752]
[197.87088013 -58.80827713]
[199.31736755 -74.09890747]
[208.22845459 -86.60842133]
[222.20710754 -92.97183990]
[237.49311829 -91.47742462]
[249.97463989 -82.52716064]
[256.29421997 -68.52864075]
[254.75189209 -53.24738312]
[245.76255798 -40.79397583]
[231.74429321 -34.51831818]
[216.46794128 -36.10853195]
[207.72682190 -23.91866302]
[198.98571777 -11.72879505]
[190.24459839 0.46107346]
[190.16555786 5.39913940]
[186.86108398 10.29712105]
[180.56159973 13.11412907]
[171.07954407 24.73698616]
[161.59750366 36.35984421]
[152.11544800 47.98270035]
[150.06538391 62.73554611]
[135.34649658 68.53767395]
[125.86444855 80.16053772]
[116.38240051 91.78339386]
[118.51969910 110.48448181]
[101.83118439 124.16633606]
[106.86393738 138.29684448]
[111.89668274 152.42736816]
[116.92943573 166.55787659]
[121.96218872 180.68838501]
[126.99493408 194.81890869]
[132.02767944 208.94941711]
[147.18583679 209.02935791]
[161.40141296 214.29179382]
[172.95782471 224.10124207]
[180.45956421 237.27316284]
[183.00077820 252.21699524]
[180.27459717 267.12817383]
[172.61021423 280.20614624]
[160.93315125 289.87164307]
[146.65345764 294.95751953]
[131.49548340 294.84963989]
[117.28962708 289.56103516]
[105.75131226 279.73031616]
[98.27384949 266.54458618]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 87]
[4 86]
[5 85]
[6 84]
[7 83]
[8 82]
[9 81]
[10 42]
[11 41]
[12 40]
[13 39]
[15 35]
[16 34]
[18 33]
[19 32]
[20 31]
[21 30]
[22 29]
[44 79]
[45 78]
[46 77]
[48 75]
[49 74]
[50 73]
[51 72]
[52 69]
[53 68]
[54 67]
[55 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
