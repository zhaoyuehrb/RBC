%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:37:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCCGCCCCCCAGUCCUCCCUCCCCUCCCCUCCAGCAUGGUGCUCGCGGCCCCGCUGCUGCUGGGCUUCCUGCUCCUCGCCCUGGAGCUGCGGCCCCGGGGGGAGGCGGCCGAGGGCCCCGCGGCGGCGGCGGCGG\
) } def
/len { sequence length } bind def

/coor [
[115.19241333 592.36358643]
[117.82105255 573.16101074]
[118.16250610 558.16485596]
[118.33323669 543.16583252]
[118.33323669 528.16583252]
[118.33323669 513.16583252]
[118.33323669 498.16583252]
[118.33323669 483.16583252]
[118.16250610 468.16680908]
[117.82105255 453.17071533]
[117.30893707 438.17944336]
[116.62622070 423.19500732]
[103.08183289 406.35324097]
[113.19886017 386.40832520]
[111.15636444 371.54803467]
[109.11386108 356.68774414]
[107.07136536 341.82745361]
[105.02886200 326.96716309]
[102.98636627 312.10687256]
[91.69323730 305.79953003]
[86.03469849 293.95117188]
[88.29347229 280.81863403]
[97.86157990 271.26593018]
[96.15788269 256.36297607]
[94.28466034 241.48040771]
[92.24215698 226.62011719]
[90.19965363 211.75982666]
[88.15715790 196.89953613]
[86.11465454 182.03924561]
[84.07215881 167.17897034]
[82.02965546 152.31867981]
[79.98715973 137.45838928]
[77.94465637 122.59809875]
[70.00552368 109.87134552]
[57.55724716 101.50233459]
[45.10896683 93.13332367]
[32.66068649 84.76431274]
[20.21240807 76.39530182]
[7.66967583 68.16852570]
[-4.96588373 60.08504486]
[-17.60144234 52.00156403]
[-33.39592361 51.08234787]
[-39.94738388 37.70596313]
[-52.58294296 29.62248230]
[-65.21849823 21.53900337]
[-81.81928253 18.09657478]
[-83.10694122 1.19159734]
[-67.21907806 -4.72550201]
[-57.13502121 8.90344429]
[-44.49946213 16.98692322]
[-31.86390305 25.07040215]
[-16.97320175 25.41143799]
[-9.51796341 39.36600494]
[3.11759591 47.44948578]
[15.75315475 55.53296661]
[23.14637566 56.49605942]
[28.58141899 63.94702530]
[41.02969742 72.31603241]
[53.47797775 80.68504333]
[65.92625427 89.05405426]
[78.37453461 97.42306519]
[83.63144684 88.19669342]
[92.08658600 83.18692017]
[101.12408447 83.05302429]
[108.62408447 70.06264496]
[116.12408447 57.07226181]
[123.62408447 44.08187866]
[131.12408447 31.09149933]
[124.58096313 18.90458870]
[124.93374634 5.18532848]
[131.98220825 -6.46347332]
[143.78193665 -13.03602886]
[157.17944336 -12.89891720]
[164.97320557 -25.71520805]
[172.76695251 -38.53149796]
[180.56071472 -51.34778976]
[188.35447693 -64.16408539]
[183.17094421 -78.91755676]
[188.73181152 -93.53298187]
[202.41143799 -101.10939789]
[217.75068665 -98.06946564]
[227.50686646 -85.84853363]
[227.07337952 -70.21695709]
[216.65492249 -58.55549240]
[201.17076111 -56.37032318]
[193.37701416 -43.55403137]
[185.58325195 -30.73773956]
[177.78948975 -17.92144966]
[169.99572754 -5.10515833]
[176.81178284 9.78523922]
[173.40563965 25.97268677]
[160.91928101 37.07376099]
[144.11447144 38.59149933]
[136.61447144 51.58187866]
[129.11447144 64.57225800]
[121.61447144 77.56264496]
[114.11447144 90.55302429]
[115.32496643 111.86514282]
[92.80494690 120.55559540]
[94.84745026 135.41587830]
[96.88994598 150.27616882]
[98.93244934 165.13645935]
[100.97494507 179.99674988]
[103.01744843 194.85704041]
[105.05994415 209.71733093]
[107.10244751 224.57762146]
[109.14494324 239.43791199]
[113.44688416 247.59571838]
[111.06081390 254.65928650]
[112.76451111 269.56222534]
[126.63803101 280.15011597]
[128.56678772 297.15661621]
[117.84665680 310.06439209]
[119.88915253 324.92468262]
[121.93165588 339.78497314]
[123.97415161 354.64526367]
[126.01665497 369.50555420]
[128.05915833 384.36584473]
[135.70393372 388.17114258]
[141.12062073 394.64996338]
[143.45829773 402.66635132]
[142.39739990 410.85351562]
[138.19119263 417.84710693]
[131.61067200 422.51226807]
[132.29339600 437.49673462]
[135.83567810 446.01193237]
[132.81716919 452.82925415]
[133.15861511 467.82537842]
[136.50614929 476.41900635]
[133.33323669 483.16583252]
[133.33323669 498.16583252]
[133.33323669 513.16583252]
[133.33323669 528.16583252]
[133.33323669 543.16583252]
[136.48428345 551.83343506]
[133.15861511 558.50634766]
[132.81716919 573.50244141]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 137]
[3 136]
[4 134]
[5 133]
[6 132]
[7 131]
[8 130]
[9 128]
[10 127]
[11 125]
[12 124]
[14 118]
[15 117]
[16 116]
[17 115]
[18 114]
[19 113]
[23 110]
[24 109]
[25 107]
[26 106]
[27 105]
[28 104]
[29 103]
[30 102]
[31 101]
[32 100]
[33 99]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[39 55]
[40 54]
[41 53]
[43 51]
[44 50]
[45 49]
[64 97]
[65 96]
[66 95]
[67 94]
[68 93]
[73 89]
[74 88]
[75 87]
[76 86]
[77 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
