%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCUUCCUCUGACUCUCAGUGUCCCUGCUUAACUUACACUCUUCUCUUCGCCAAGCUCCUUACCAUGAGCAGACAAGCCAGCAAGACAUCUGGUGGCGGGAGCCAGGGUUUCUCCGGCCGCUCUGCUGUGGUCUCCGGCAGCAGCAGGAUGAGCUGUGUGGCCC\
) } def
/len { sequence length } bind def

/coor [
[293.78945923 269.00662231]
[280.89996338 267.57849121]
[268.81286621 262.84234619]
[258.36251831 255.11759949]
[250.27241516 244.93019104]
[245.10478210 232.97688293]
[243.22178650 220.07754517]
[244.75994873 207.11892700]
[249.62042236 194.99369812]
[237.84286499 185.70451355]
[226.06529236 176.41534424]
[214.28771973 167.12615967]
[202.51014709 157.83697510]
[187.72550964 156.03036499]
[181.68156433 141.40910339]
[169.90399170 132.11991882]
[158.12641907 122.83074188]
[146.34884644 113.54156494]
[134.57127380 104.25238800]
[82.88718414 135.69059753]
[69.09743500 141.59338379]
[55.30768967 147.49617004]
[41.51794434 153.39895630]
[27.72819901 159.30174255]
[27.55076408 174.52963257]
[21.18903160 188.36611938]
[9.74521160 198.41394043]
[-4.79798651 202.93226624]
[-19.92086411 201.13827515]
[-33.00329208 193.34275818]
[-41.77866364 180.89636230]
[-44.72658539 165.95549011]
[-41.33631897 151.10874939]
[-32.19524765 138.92840576]
[-18.88711357 131.52479553]
[-3.71763301 130.18063354]
[10.68498802 135.12879944]
[21.82541084 145.51200867]
[35.61515808 139.60920715]
[49.40490341 133.70642090]
[63.19464874 127.80363464]
[76.98439026 121.90084839]
[78.66312408 114.59114075]
[63.73153687 113.16016388]
[48.79994965 111.72919464]
[33.86836243 110.29822540]
[19.66245079 115.11404419]
[5.73777056 109.53701019]
[-1.21623695 96.24634552]
[2.14114738 81.62690735]
[14.19702911 72.70190430]
[29.15974045 73.75891876]
[39.84126282 84.29037476]
[53.90103531 89.51748657]
[67.96080780 94.74460602]
[82.02058411 99.97171783]
[83.69931793 92.66201019]
[73.86671448 81.33416748]
[64.03411102 70.00633240]
[54.20151520 58.67848969]
[38.75472260 60.15369415]
[25.40804100 52.23878479]
[19.29354477 37.97720718]
[22.76238060 22.85283089]
[34.48071289 12.68128395]
[49.94259644 11.37373447]
[63.20262909 19.43296242]
[69.16205597 33.76002884]
[65.52935028 48.84589005]
[75.36195374 60.17372894]
[85.19455719 71.50157166]
[95.02715302 82.82940674]
[102.28659058 80.94510651]
[98.51799011 66.42623901]
[94.74963379 51.90730286]
[109.26863098 48.13918304]
[113.03686523 62.65763855]
[116.80546570 77.17650604]
[124.06490326 75.29221344]
[127.14676666 60.61222076]
[130.22862244 45.93222809]
[133.31048584 31.25223923]
[128.57360840 16.15679169]
[138.76075745 5.29073048]
[141.84262085 -9.38925934]
[132.04263306 -21.57508278]
[132.41999817 -37.20811462]
[142.79650879 -48.90690994]
[158.27272034 -51.14765930]
[171.54122925 -42.87234879]
[176.33705139 -27.98832703]
[170.39573669 -13.52337265]
[156.52261353 -6.30739546]
[153.44075012 8.37259483]
[158.39807129 22.41802979]
[147.99047852 34.33410263]
[144.90861511 49.01409149]
[141.82675171 63.69408417]
[138.74488831 78.37407684]
[143.86045837 92.47481537]
[155.63803101 101.76399231]
[167.41560364 111.05317688]
[179.19317627 120.34235382]
[190.97073364 129.63153076]
[206.59777832 132.10258484]
[211.79933167 146.05941772]
[223.57690430 155.34858704]
[235.35446167 164.63777161]
[247.13203430 173.92694092]
[258.90960693 183.21612549]
[273.37072754 173.86567688]
[290.12841797 170.00689697]
[307.17385864 172.08520508]
[322.46960449 179.83532715]
[334.19308472 192.31503296]
[340.95373535 208.01968384]
[341.95806885 225.06361389]
[337.10260010 241.40650940]
[349.38537598 250.01658630]
[361.66815186 258.62664795]
[373.95092773 267.23672485]
[386.23373413 275.84677124]
[398.51651001 284.45684814]
[411.48330688 291.99752808]
[425.04125977 298.41485596]
[438.59921265 304.83215332]
[452.15716553 311.24948120]
[465.71511841 317.66677856]
[479.27307129 324.08410645]
[492.83102417 330.50140381]
[506.38897705 336.91873169]
[522.17260742 335.82925415]
[530.36614990 348.26770020]
[543.92413330 354.68502808]
[557.48205566 361.10232544]
[574.38525391 362.41357422]
[577.80450439 379.01916504]
[562.79443359 386.90167236]
[551.06475830 374.66027832]
[537.50683594 368.24298096]
[523.94885254 361.82565308]
[509.13497925 363.37414551]
[499.97167969 350.47668457]
[486.41372681 344.05935669]
[472.85577393 337.64205933]
[459.29782104 331.22473145]
[445.73986816 324.80743408]
[432.18191528 318.39010620]
[418.62396240 311.97280884]
[405.06600952 305.55548096]
[411.35455322 319.17364502]
[409.41525269 334.04776001]
[399.84518433 345.59823608]
[385.59088135 350.26882935]
[371.04104614 346.62152100]
[360.67547607 335.77926636]
[357.68557739 321.08026123]
[362.99191284 307.05020142]
[374.96075439 298.00875854]
[389.90643311 296.73962402]
[377.62365723 288.12957764]
[365.34088135 279.51950073]
[353.05807495 270.90942383]
[340.77529907 262.29937744]
[328.49252319 253.68930054]
[318.43173218 261.80758667]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 110]
[10 109]
[11 108]
[12 107]
[13 106]
[15 104]
[16 103]
[17 102]
[18 101]
[19 100]
[20 42]
[21 41]
[22 40]
[23 39]
[24 38]
[57 72]
[58 71]
[59 70]
[60 69]
[79 99]
[80 98]
[81 97]
[82 96]
[84 94]
[85 93]
[118 165]
[119 164]
[120 163]
[121 162]
[122 161]
[123 160]
[124 150]
[125 149]
[126 148]
[127 147]
[128 146]
[129 145]
[130 144]
[131 143]
[133 141]
[134 140]
[135 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
