%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:11:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCUAGUUCUUAUCCCUGGACCUGAACCCAGGCGCACAUCUGGAUUAGAAGAUGCCAGGCUCAGAGGAUCUUCGUAAAGGCAAGGACCAGAUGCAUUCACACAGGAAACGAACCAUGUUCACUAAGAAGCAACUGGAAGAUCUGAACAUCU\
) } def
/len { sequence length } bind def

/coor [
[55.28344345 311.87078857]
[42.15211868 303.90435791]
[34.77734756 290.43188477]
[35.14289856 275.07733154]
[43.15044403 261.97103882]
[56.64599609 254.63853455]
[56.95599747 239.64173889]
[57.26600266 224.64494324]
[57.57600403 209.64814758]
[47.11064911 199.11192322]
[47.21139908 183.89862061]
[58.33371353 172.99302673]
[58.64371872 157.99623108]
[58.95372009 142.99943542]
[45.76161575 135.86022949]
[33.37635422 144.32221985]
[20.99109650 152.78422546]
[8.60583687 161.24621582]
[-3.77942181 169.70820618]
[-4.09373093 185.22210693]
[-13.49365807 197.56799316]
[-28.36473846 201.99862671]
[-42.98873901 196.81034851]
[-51.74243164 183.99815369]
[-51.25984573 168.48858643]
[-41.72654343 156.24539185]
[-26.80827332 151.97633362]
[-12.24141693 157.32295227]
[0.14384270 148.86096191]
[12.52910233 140.39895630]
[24.91436195 131.93696594]
[37.29962158 123.47496796]
[36.21831131 116.05332947]
[21.37499428 118.21571350]
[19.21283722 103.37236786]
[34.05569458 101.21004486]
[32.97438812 93.78840637]
[18.68950272 89.21215820]
[4.40461540 84.63591003]
[-9.88027096 80.05966949]
[-24.16515732 75.48342133]
[-36.60084915 84.76422119]
[-52.11704636 84.92935944]
[-64.74745178 75.91534424]
[-69.63542175 61.18824387]
[-64.90142059 46.41093445]
[-52.36578369 37.26558685]
[-36.84870911 37.26877975]
[-24.31682968 46.41928101]
[-19.58891296 61.19853592]
[-5.30402613 65.77478027]
[8.98086071 70.35102844]
[23.26574707 74.92726898]
[37.55063248 79.50351715]
[48.48091888 69.23078918]
[44.79863358 54.68978500]
[31.50443268 46.57178879]
[27.97721672 31.77268600]
[35.79841614 19.14872360]
[32.11613464 4.60771942]
[28.43385124 -9.93328476]
[10.67342567 -19.19994545]
[5.43500853 -38.22176743]
[15.62987995 -54.75916672]
[11.05363464 -69.04405212]
[6.47738934 -83.32894135]
[-6.02119350 -93.94578552]
[-2.81024599 -110.02751160]
[12.80708504 -115.03060913]
[24.76502800 -103.80832672]
[20.76227570 -87.90518188]
[25.33852005 -73.62030029]
[29.91476631 -59.33541107]
[40.07415771 -57.23945236]
[48.49254227 -51.04055023]
[53.58818054 -41.81924438]
[54.36865997 -31.23129845]
[50.62345505 -21.21052361]
[42.97485352 -13.61556721]
[46.65713882 0.92543709]
[50.33942032 15.46644115]
[63.22629929 22.84640503]
[67.16780090 37.54059601]
[59.33963776 51.00750351]
[63.02192307 65.54850769]
[108.35877228 59.67552185]
[129.98840332 89.34963989]
[144.90837097 87.80226898]
[159.82835388 86.25489807]
[174.74832153 84.70752716]
[187.67671204 75.58790588]
[201.13424683 81.97100830]
[216.05421448 80.42363739]
[230.97419739 78.87626648]
[239.24830627 74.85597992]
[246.21803284 77.45436859]
[261.16680908 76.21567535]
[276.11557007 74.97698975]
[281.92947388 64.52094269]
[291.98214722 58.25908279]
[303.69015503 57.66328049]
[314.11050415 62.76654434]
[320.68038940 72.18393707]
[335.66757202 71.56405640]
[346.34097290 60.21873856]
[361.54891968 59.80359268]
[372.29919434 70.04896545]
[387.28637695 69.42909241]
[402.27355957 68.80921173]
[417.26074219 68.18933868]
[429.14056396 57.40742874]
[444.95346069 60.11515427]
[452.56915283 74.23538971]
[446.14550781 88.93628693]
[430.61022949 92.94058990]
[417.88061523 83.17652893]
[402.89343262 83.79640198]
[387.90625000 84.41627502]
[372.91906738 85.03614807]
[363.05157471 96.13427734]
[347.86126709 96.97641754]
[336.28744507 86.55124664]
[321.30026245 87.17111969]
[309.79714966 101.35266113]
[291.26882935 102.70967102]
[277.35427856 89.92575836]
[262.40548706 91.16444397]
[247.45672607 92.40313721]
[232.52156067 93.79624176]
[217.60159302 95.34361267]
[202.68161011 96.89098358]
[190.82040405 105.89992523]
[176.29568481 99.62750244]
[161.37571716 101.17487335]
[146.45574951 102.72224426]
[131.53576660 104.26960754]
[126.68666077 127.13964844]
[105.20397949 143.99440002]
[73.95051575 143.30944824]
[73.64051056 158.30624390]
[73.33051300 173.30303955]
[83.99265289 184.65893555]
[83.46463013 199.86340332]
[72.57279968 209.95814514]
[72.26279449 224.95494080]
[71.95279694 239.95173645]
[71.64279175 254.94853210]
[84.82379913 262.83248901]
[92.28288269 276.25848389]
[92.01359558 291.61502075]
[84.08837128 304.77124023]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 147]
[7 146]
[8 145]
[9 144]
[12 141]
[13 140]
[14 139]
[15 32]
[16 31]
[17 30]
[18 29]
[19 28]
[37 54]
[38 53]
[39 52]
[40 51]
[41 50]
[55 85]
[56 84]
[59 81]
[60 80]
[61 79]
[64 73]
[65 72]
[66 71]
[87 136]
[88 135]
[89 134]
[90 133]
[92 131]
[93 130]
[94 129]
[96 128]
[97 127]
[98 126]
[103 123]
[104 122]
[107 119]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
