%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:17:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCAGGUGCCCGUCUGAUGGGGAGAUGGCUGAUGCCCAGAACAUUUCACUGGACAGCCCAGGGAGUGUGGGGGCCGUGGCAGUGCCUGUGGUCUUUGCCCUAAUCUUCCUGCUGGGCACAGUGG\
) } def
/len { sequence length } bind def

/coor [
[74.15660095 430.70480347]
[61.13526535 419.84750366]
[67.96360779 404.32943726]
[68.71129608 389.34808350]
[69.45898438 374.36672974]
[60.60220337 359.27108765]
[70.57785797 343.85375977]
[70.95182037 328.85842896]
[71.32577515 313.86309814]
[71.69973755 298.86773682]
[72.07369995 283.87240601]
[72.44766235 268.87707520]
[72.63465118 253.87823486]
[72.63465118 238.87823486]
[59.99250793 246.95141602]
[45.71791840 242.34315491]
[40.18272018 228.40179443]
[47.40875626 215.25704956]
[62.14562988 212.45980835]
[73.68545532 222.04220581]
[75.55061340 207.15863037]
[77.41577148 192.27503967]
[79.28092194 177.39144897]
[81.14608002 162.50785828]
[83.01123810 147.62426758]
[84.87638855 132.74069214]
[86.74154663 117.85709381]
[77.09973145 106.36643219]
[62.11837769 105.61874390]
[47.13702393 104.87105560]
[32.79867935 112.82994080]
[18.87804413 104.16114807]
[19.69547462 87.78238678]
[34.41006851 80.54272461]
[47.88471222 89.88970184]
[62.86606598 90.63739014]
[77.84741974 91.38507843]
[82.22550201 85.29553986]
[70.04656982 76.53918457]
[78.80313110 64.36040497]
[90.98165131 73.11647034]
[95.35973358 67.02693939]
[89.87961578 53.06383133]
[84.39949799 39.10072327]
[78.91938782 25.13761711]
[73.43927002 11.17451096]
[67.95915222 -2.78859520]
[62.47903824 -16.75170135]
[56.36497498 -23.68884277]
[57.04113388 -31.13185310]
[51.91083145 -45.22724152]
[46.78052902 -59.32263184]
[41.65022659 -73.41802216]
[27.77647018 -81.47397614]
[25.56734848 -97.36420441]
[36.71751022 -108.89907837]
[52.67350769 -107.23004150]
[61.19526672 -93.63742065]
[55.74561691 -78.54832458]
[60.87591934 -64.45293427]
[66.00622559 -50.35754395]
[71.13652039 -36.26215363]
[76.44214630 -22.23181725]
[81.92226410 -8.26871109]
[87.40237427 5.69439554]
[92.88249207 19.65750122]
[98.36260986 33.62060928]
[103.84272003 47.58371353]
[109.32283783 61.54682159]
[123.28594208 67.02693939]
[136.80047607 60.51868057]
[150.31500244 54.01042557]
[163.48832703 46.83661270]
[176.28768921 39.01508713]
[189.08706665 31.19355774]
[201.88642883 23.37203026]
[214.68579102 15.55050182]
[223.04974365 -0.79732901]
[240.55136108 -0.67496258]
[253.15174866 -8.81315613]
[265.75213623 -16.95135117]
[275.77700806 -30.62389374]
[291.69036865 -24.77574348]
[290.47604370 -7.86534166]
[273.89035034 -4.35096169]
[261.28994751 3.78723240]
[248.68955994 11.92542648]
[245.80433655 23.74354553]
[235.27864075 30.61025429]
[222.50730896 28.34986496]
[209.70794678 36.17139435]
[196.90858459 43.99291992]
[184.10922241 51.81444931]
[171.30986023 59.63597870]
[170.55543518 62.44468689]
[168.58102417 65.10503387]
[165.44444275 67.12674713]
[161.38859558 68.05263519]
[156.82327271 67.52495575]
[143.30873108 74.03321075]
[129.79420471 80.54146576]
[130.13514709 103.34336090]
[117.46399689 117.96496582]
[101.62513733 119.72225189]
[99.75997925 134.60583496]
[97.89482117 149.48942566]
[96.02967072 164.37301636]
[94.16451263 179.25660706]
[92.29935455 194.14019775]
[90.43420410 209.02377319]
[88.56904602 223.90736389]
[87.63465118 238.87823486]
[87.63465118 253.87823486]
[90.79164886 262.56954956]
[87.44299316 269.25103760]
[87.06903839 284.24636841]
[86.69507599 299.24169922]
[86.32111359 314.23706055]
[85.94715118 329.23239136]
[85.57319641 344.22772217]
[93.91641235 354.15780640]
[93.23252106 366.70669556]
[84.44033813 375.11444092]
[83.69264984 390.09579468]
[82.94496155 405.07714844]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 125]
[4 124]
[5 123]
[7 120]
[8 119]
[9 118]
[10 117]
[11 116]
[12 115]
[13 113]
[14 112]
[20 111]
[21 110]
[22 109]
[23 108]
[24 107]
[25 106]
[26 105]
[27 104]
[28 37]
[29 36]
[30 35]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[50 62]
[51 61]
[52 60]
[53 59]
[70 101]
[71 100]
[72 99]
[73 94]
[74 93]
[75 92]
[76 91]
[77 90]
[79 87]
[80 86]
[81 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
