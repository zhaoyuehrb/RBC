%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCCAAGCUUACCACCUGCACCCGGAGAGCUGUGUCACCAUGUGGGUCCCGGUUGUCUUCCUCACCCUGUCCGUGACGUGGAUUGGUGCUGCACCCCUCAUCCUGUCUCGGAUUGUGGGAGGCUGGGAGUGCGAGAAGC\
) } def
/len { sequence length } bind def

/coor [
[120.69994354 327.90805054]
[132.82725525 318.57064819]
[130.18623352 303.80499268]
[127.38202667 289.06942749]
[124.41500092 274.36581421]
[121.44797516 259.66217041]
[118.48094177 244.95854187]
[114.03947449 238.97679138]
[115.61470795 229.89698792]
[112.97367859 215.13131714]
[110.33264923 200.36566162]
[98.00201416 192.08972168]
[95.11329651 177.15286255]
[103.87745667 164.27546692]
[101.23643494 149.50979614]
[98.59540558 134.74412537]
[95.95437622 119.97846222]
[82.78541565 114.31005096]
[75.61571503 100.39129639]
[79.17594147 83.79055023]
[64.35546112 81.47682190]
[49.53498077 79.16308594]
[34.70649719 84.67912292]
[23.32501602 75.07125854]
[8.50453568 72.75752258]
[-6.31594515 70.44378662]
[-21.13642502 68.13005066]
[-30.17914963 69.90576172]
[-36.25769806 65.59770966]
[-51.02336884 62.95668030]
[-65.97024536 68.14333344]
[-77.13639832 58.28603363]
[-91.90206909 55.64500427]
[-106.72254944 53.33127213]
[-121.59058380 51.34596252]
[-136.45861816 49.36065674]
[-151.40660095 56.10527039]
[-164.56184387 46.31385803]
[-162.39135742 30.05898094]
[-147.12794495 24.06226540]
[-134.47331238 34.49261856]
[-119.60527802 36.47792435]
[-104.73723602 38.46323395]
[-100.41078186 36.27573395]
[-94.65531921 36.83892059]
[-89.26103973 40.87933731]
[-74.49536896 43.52036667]
[-60.60462952 38.14480972]
[-48.38233948 48.19101334]
[-33.61667252 50.83203888]
[-18.82269096 53.30957413]
[-4.00221109 55.62330627]
[10.81826973 57.93704224]
[25.63875008 60.25077438]
[39.40717316 54.56924057]
[51.84871292 64.34260559]
[66.66919708 66.65634155]
[81.48967743 68.97006989]
[67.26617432 64.20646667]
[56.35280609 53.91577148]
[50.76276398 39.99630737]
[51.52724075 25.01580048]
[58.50521469 11.73770332]
[70.40946198 2.61142373]
[85.04399872 -0.67951310]
[99.70919800 2.47197104]
[111.69977570 11.48452282]
[118.80382538 24.69559669]
[119.71086884 39.66814804]
[114.25357819 53.64019012]
[103.44126892 64.03270721]
[115.84374237 55.59596634]
[128.24621582 47.15922928]
[140.64869690 38.72248840]
[153.05117798 30.28574944]
[160.10975647 16.12640572]
[174.98490906 15.36540699]
[187.38739014 6.92866755]
[199.78985596 -1.50807190]
[212.19233704 -9.94481087]
[217.58187866 -17.41989136]
[224.96382141 -18.42744446]
[237.54989624 -26.58775139]
[250.13597107 -34.74805832]
[262.72204590 -42.90836334]
[271.14428711 -62.55649185]
[291.73416138 -63.05329895]
[303.75131226 -72.03038025]
[315.76846313 -81.00746918]
[327.78561401 -89.98455048]
[336.85647583 -104.30782318]
[353.13104248 -99.55653381]
[353.07070923 -82.60269928]
[336.76272583 -77.96739960]
[324.74557495 -68.99031830]
[312.72842407 -60.01322937]
[300.71124268 -51.03614426]
[300.88058472 -42.02146149]
[296.77957153 -33.83675766]
[289.23266602 -28.41418076]
[279.89331055 -27.09995461]
[270.88235474 -30.32228279]
[258.29629517 -22.16197586]
[245.71020508 -14.00167084]
[233.12411499 -5.84136486]
[220.62907410 2.45766568]
[208.22660828 10.89440536]
[195.82412720 19.33114433]
[183.42164612 27.76788330]
[177.25016785 41.32377625]
[161.48791504 42.68822479]
[149.08543396 51.12496567]
[136.68295288 59.56170273]
[124.28047943 67.99844360]
[111.87800598 76.43518066]
[123.36449432 98.98426819]
[110.72004700 117.33743286]
[113.36107635 132.10310364]
[116.00209808 146.86877441]
[118.64312744 161.63444519]
[131.32768250 170.67546082]
[133.79571533 185.68756104]
[125.09832001 197.72462463]
[127.73934937 212.49029541]
[130.38037109 227.25596619]
[133.18457031 241.99151611]
[136.15159607 256.69515991]
[139.11863708 271.39877319]
[142.08566284 286.10241699]
[146.88580322 293.96896362]
[144.95190430 301.16397095]
[147.59292603 315.92962646]
[162.20501709 320.48434448]
[173.01849365 331.31610107]
[177.54850769 345.93588257]
[174.75408936 360.98413086]
[165.27735901 373.00286865]
[151.29603577 379.23031616]
[136.02288818 378.23541260]
[122.96760559 370.24679565]
[115.13017273 357.10018921]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 132]
[3 131]
[4 129]
[5 128]
[6 127]
[7 126]
[9 125]
[10 124]
[11 123]
[14 120]
[15 119]
[16 118]
[17 117]
[20 58]
[21 57]
[22 56]
[24 54]
[25 53]
[26 52]
[27 51]
[29 50]
[30 49]
[32 47]
[33 46]
[34 43]
[35 42]
[36 41]
[71 115]
[72 114]
[73 113]
[74 112]
[75 111]
[77 109]
[78 108]
[79 107]
[80 106]
[82 105]
[83 104]
[84 103]
[85 102]
[87 97]
[88 96]
[89 95]
[90 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
