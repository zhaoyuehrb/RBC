%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGCCCUGAGAACCAGAGCAGCGUGUCCGAGUUCCUCCUUCUGGGCCUCCCCAUCCGGCCAGAGCAGCAGGCUGUGUUCUUCACCCUGUUCCUGGGCA\
) } def
/len { sequence length } bind def

/coor [
[108.19932556 218.26071167]
[92.46379852 216.78807068]
[82.44287109 204.56692505]
[84.08178711 188.84783936]
[96.40820312 178.95668030]
[97.80589294 164.02194214]
[99.20358276 149.08720398]
[100.60127258 134.15246582]
[85.41508484 128.75186157]
[75.22209930 117.47686768]
[71.82648468 103.60461426]
[56.97318649 101.51188660]
[42.11988831 99.41915894]
[27.26658821 97.32642365]
[18.78813171 104.49034119]
[7.97528219 105.67908478]
[-1.46393228 100.73384094]
[-6.43061352 91.55732727]
[-21.12507629 88.54522705]
[-35.81953812 85.53311920]
[-50.89231491 90.34164429]
[-61.80664062 80.20622253]
[-76.50109863 77.19411469]
[-91.19556427 74.18200684]
[-102.56007385 84.74739838]
[-117.96835327 86.58166504]
[-131.49560547 78.97949219]
[-137.94032288 64.86406708]
[-134.82438660 49.66306305]
[-123.34593201 39.22157288]
[-107.91866302 37.55456543]
[-94.47467041 45.30303955]
[-88.18345642 59.48754501]
[-73.48899841 62.49964905]
[-58.79453278 65.51175690]
[-44.77280045 60.48778534]
[-32.80743027 70.83865356]
[-18.11297035 73.85076141]
[-3.41850758 76.86286926]
[14.26094151 69.29650116]
[29.35931969 82.47312927]
[44.21261597 84.56585693]
[59.06591797 86.65858459]
[73.91921234 88.75131989]
[83.80927277 76.66332245]
[98.59490204 71.63160706]
[101.83517456 56.98576355]
[105.07543945 42.33992004]
[108.31570435 27.69408035]
[97.37281036 16.81949234]
[94.06862640 1.75012195]
[99.45750427 -12.70544910]
[111.81987762 -21.93450165]
[127.21094513 -22.99207878]
[140.71948242 -15.54070950]
[148.03497314 -1.95810080]
[146.82304382 13.42158699]
[137.47044373 25.69075203]
[122.96154785 30.93434715]
[119.72128296 45.58018875]
[116.48101044 60.22602844]
[113.24074554 74.87187195]
[125.04602051 82.90959167]
[132.03849792 96.40505981]
[131.78018188 112.52089691]
[146.25895691 116.44072723]
[161.60151672 112.57856750]
[171.86460876 123.37292480]
[186.34338379 127.29275513]
[200.82215881 131.21258545]
[215.30093384 135.13241577]
[229.77970886 139.05224609]
[244.25848389 142.97207642]
[251.01940918 141.59036255]
[256.55905151 143.64509583]
[259.50091553 147.61199951]
[273.70797729 152.42437744]
[287.91506958 157.23677063]
[302.87792969 151.44955444]
[316.65853882 159.66383362]
[318.68557739 175.57830811]
[307.40408325 186.98477173]
[291.46823120 185.13313293]
[283.10266113 171.44384766]
[268.89559937 166.63145447]
[254.68852234 161.81906128]
[240.33866882 157.45085144]
[225.85987854 153.53102112]
[211.38110352 149.61119080]
[196.90232849 145.69136047]
[182.42355347 141.77153015]
[167.94477844 137.85169983]
[153.63783264 141.99423218]
[142.33912659 130.91949463]
[127.86034393 126.99967194]
[115.53601074 135.55015564]
[114.13832092 150.48489380]
[112.74063110 165.41963196]
[111.34294891 180.35437012]
[121.62003326 192.36091614]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 99]
[6 98]
[7 97]
[8 96]
[11 44]
[12 43]
[13 42]
[14 41]
[18 39]
[19 38]
[20 37]
[22 35]
[23 34]
[24 33]
[46 62]
[47 61]
[48 60]
[49 59]
[65 95]
[66 94]
[68 92]
[69 91]
[70 90]
[71 89]
[72 88]
[73 87]
[76 86]
[77 85]
[78 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
