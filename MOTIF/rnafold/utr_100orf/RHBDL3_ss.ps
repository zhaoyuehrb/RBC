%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCGUCUCGGCCAUGGGCGAGCACCCCAGCCCGGGCCCCGCGGUGGCCGCCUGCGCCGAGGCGGAGCGCAUCGAGGAGCUGGAACCCGAGGCCGAGGAGCGGCUGCCCGCGG\
) } def
/len { sequence length } bind def

/coor [
[134.79597473 326.50018311]
[131.82955933 321.07565308]
[130.40875244 315.02474976]
[130.65332031 308.78131104]
[132.56306458 302.79760742]
[136.01646423 297.51190186]
[140.77833557 293.31613159]
[137.12742615 278.76721191]
[133.47650146 264.21829224]
[129.82559204 249.66938782]
[126.17468262 235.12046814]
[122.52376556 220.57156372]
[118.87285614 206.02264404]
[115.22193909 191.47373962]
[104.61957550 181.01242065]
[108.76531219 165.74403381]
[105.11440277 151.19512939]
[101.46348572 136.64620972]
[97.81257629 122.09730530]
[88.73741150 120.86658478]
[80.38420105 115.84946442]
[74.34009552 107.47126770]
[71.94766235 96.81842041]
[56.98262787 97.84205627]
[46.78620529 109.91717529]
[31.03104210 111.16233826]
[19.06440163 100.83881378]
[17.98587990 85.07137299]
[28.43534279 73.21454620]
[44.21331024 72.30278778]
[55.95899200 82.87702179]
[70.92402649 81.85338593]
[81.45793915 71.17459869]
[82.27707672 56.19697952]
[83.09621429 41.21936035]
[83.91535187 26.24174309]
[73.64502716 14.53028870]
[74.68911743 -0.64747566]
[85.91748810 -10.36648750]
[86.73662567 -25.34410477]
[87.35111237 -40.33151245]
[87.76083374 -55.32591629]
[77.17444611 -66.75247192]
[77.80356598 -81.95308685]
[88.76227570 -91.97517395]
[89.17199707 -106.96958160]
[89.58171844 -121.96398163]
[80.42134857 -137.86515808]
[90.02363586 -152.48446655]
[90.02363586 -167.48446655]
[90.02363586 -182.48446655]
[90.02363586 -197.48446655]
[90.02363586 -212.48446655]
[90.02363586 -227.48446655]
[78.67249298 -238.48115540]
[78.50540161 -254.28456116]
[89.62149048 -265.51879883]
[105.42578125 -265.51879883]
[116.54186249 -254.28456116]
[116.37477112 -238.48115540]
[105.02363586 -227.48446655]
[105.02363586 -212.48446655]
[105.02363586 -197.48446655]
[105.02363586 -182.48446655]
[105.02363586 -167.48446655]
[105.02363586 -152.48446655]
[113.39363098 -143.63394165]
[113.43556976 -131.04989624]
[104.57612610 -121.55426025]
[104.16640472 -106.55986023]
[103.75668335 -91.56545258]
[114.15174103 -80.95987701]
[113.94982910 -65.74758148]
[102.75524139 -54.91619492]
[102.34552002 -39.92179108]
[105.34911346 -33.05662918]
[101.71424866 -24.52496529]
[100.89510345 -9.54734898]
[110.99659729 1.33821070]
[110.37924194 16.53931236]
[98.89297485 27.06088257]
[98.07383728 42.03849792]
[97.25469971 57.01611710]
[96.43555450 71.99373627]
[118.17953491 81.10126495]
[124.12098694 102.12336731]
[112.36148834 118.44638824]
[116.01239777 132.99530029]
[119.66331482 147.54421997]
[123.31422424 162.09312439]
[134.17773438 173.59507751]
[129.77085876 187.82283020]
[133.42176819 202.37173462]
[137.07267761 216.92063904]
[140.72358704 231.46955872]
[144.37451172 246.01846313]
[148.02542114 260.56738281]
[151.67633057 275.11630249]
[155.32723999 289.66519165]
[175.05426025 305.04531860]
[169.69416809 328.80932617]
[176.41258240 342.22061157]
[183.13101196 355.63189697]
[189.84942627 369.04321289]
[203.83192444 377.61184692]
[203.13208008 393.99606323]
[188.46981812 401.34115601]
[174.92843628 392.09112549]
[176.43814087 375.76162720]
[169.71971130 362.35034180]
[163.00129700 348.93902588]
[156.28286743 335.52774048]
[150.23164368 335.58093262]
[144.35343933 334.01089478]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 99]
[8 98]
[9 97]
[10 96]
[11 95]
[12 94]
[13 93]
[14 92]
[16 90]
[17 89]
[18 88]
[19 87]
[23 32]
[24 31]
[33 84]
[34 83]
[35 82]
[36 81]
[39 78]
[40 77]
[41 75]
[42 74]
[45 71]
[46 70]
[47 69]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[101 112]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
