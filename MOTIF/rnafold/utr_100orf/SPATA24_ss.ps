%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:10:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCCAACUAGCUGGCGGGGGCGGAAGAUGGCGACGCCCCUCGGGUGGUCGAAGGCGGGGUCAGGAUCUGUGUGUCUCGCUUUAGAUCAACUGCGGGACGUGAUUGAGUCUCAGGAGGAACUAAUCC\
) } def
/len { sequence length } bind def

/coor [
[97.99429321 226.41976929]
[109.67574310 216.34269714]
[107.47478485 201.50505066]
[105.27383423 186.66740417]
[103.07287598 171.82975769]
[90.99369049 163.19096375]
[88.55023956 148.17481995]
[97.69330597 135.56364441]
[95.49234772 120.72599030]
[96.94087219 135.65588379]
[88.94729614 148.34851074]
[74.85678864 153.49220276]
[60.56599808 148.93441772]
[52.05539703 136.58250427]
[52.88653183 121.60554504]
[62.71157837 110.27115631]
[77.42017365 107.32275391]
[62.58252716 109.52371216]
[47.74488068 111.72467041]
[32.90723419 113.92562866]
[18.06958580 116.12658691]
[3.23193836 118.32754517]
[-11.60570908 120.52850342]
[-16.59274673 134.99874878]
[-27.74115753 145.48547363]
[-42.48911667 149.57891846]
[-57.44765472 146.33842468]
[-69.17940521 136.50865173]
[-74.98849487 122.34838104]
[-73.54004669 107.11156464]
[-65.16690063 94.29950714]
[-51.79313660 86.85631561]
[-36.49195480 86.49238586]
[-22.77945518 93.29135132]
[-13.80666637 105.69084930]
[1.03098118 103.48989868]
[15.86862850 101.28894043]
[30.70627594 99.08798218]
[45.54392242 96.88702393]
[60.38157272 94.68606567]
[75.21922302 92.48510742]
[85.95518494 82.00946808]
[88.51960754 67.23030090]
[91.08403778 52.45113754]
[85.81995392 37.53135300]
[95.61921692 26.31423950]
[98.18364716 11.53507423]
[100.74807739 -3.24409080]
[103.31250763 -18.02325630]
[105.87693024 -32.80242157]
[100.61284637 -47.72220612]
[110.41211700 -58.93931961]
[112.97654724 -73.71848297]
[115.54096985 -88.49765015]
[118.10540009 -103.27680969]
[120.66983032 -118.05597687]
[123.23426056 -132.83514404]
[125.79868317 -147.61430359]
[128.36311340 -162.39346313]
[130.92753601 -177.17263794]
[129.30323792 -186.27134705]
[133.74052429 -192.28114319]
[136.66688538 -206.99291992]
[125.49395752 -217.63102722]
[121.86830139 -232.62629700]
[126.94684601 -247.19380188]
[139.10903931 -256.68508911]
[154.47398376 -258.07153320]
[168.13876343 -250.91072083]
[175.74301147 -237.48764038]
[174.86022949 -222.08555603]
[165.77212524 -209.61920166]
[151.37866211 -204.06657410]
[148.45230103 -189.35478210]
[145.70671082 -174.60820007]
[143.14227295 -159.82904053]
[140.57785034 -145.04988098]
[138.01342773 -130.27070618]
[135.44898987 -115.49154663]
[132.88456726 -100.71238708]
[130.32012939 -85.93321991]
[127.75570679 -71.15405273]
[125.19127655 -56.37488937]
[130.63879395 -42.51221085]
[120.65609741 -30.23799133]
[118.09166718 -15.45882702]
[115.52724457 -0.67966241]
[112.96281433 14.09950256]
[110.39838409 28.87866783]
[115.84589386 42.74134827]
[105.86320496 55.01556396]
[103.29877472 69.79473114]
[100.73434448 84.57389069]
[114.30791473 83.74699402]
[127.43947601 95.15724945]
[141.43437195 100.55567169]
[155.42926025 105.95410156]
[169.42414856 111.35252380]
[183.41905212 116.75095367]
[196.37292480 108.20831299]
[211.87249756 108.94489288]
[223.95788574 118.67747498]
[227.98199463 133.66368103]
[222.39747620 148.14099121]
[209.35169983 156.54260254]
[193.86100769 155.63792419]
[181.88192749 145.77481079]
[178.02061462 130.74584961]
[164.02572632 125.34741974]
[150.03083801 119.94898987]
[136.03594971 114.55056763]
[122.04105377 109.15214539]
[110.32999420 118.52503204]
[112.53095245 133.36268616]
[124.94115448 142.77674866]
[126.96186829 157.85557556]
[117.91052246 169.62879944]
[120.11148071 184.46644592]
[122.31243896 199.30409241]
[124.51338959 214.14173889]
[138.61706543 220.39395142]
[147.08253479 233.29121399]
[147.20849609 248.71806335]
[138.95477295 261.75183105]
[124.95508575 268.23352051]
[109.67668915 266.09484863]
[97.99485779 256.01821899]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 120]
[3 119]
[4 118]
[5 117]
[8 114]
[9 113]
[17 41]
[18 40]
[19 39]
[20 38]
[21 37]
[22 36]
[23 35]
[42 93]
[43 92]
[44 91]
[46 89]
[47 88]
[48 87]
[49 86]
[50 85]
[52 83]
[53 82]
[54 81]
[55 80]
[56 79]
[57 78]
[58 77]
[59 76]
[60 75]
[62 74]
[63 73]
[95 112]
[96 111]
[97 110]
[98 109]
[99 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
