%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:31:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUUCUUCAUUCUGCAGUUGGUGCCAGAACUCUGGAUCCUGAACUGGAAGAAAAUGUCUAUCCAGGUUGAGCAUCCUGCUGGUGGUUACAAGAAACUGUUUGAAACUGUGGAGGAACUGUCCUCGCCGCUCACAGCUCAUGUAACAGGCAGGA\
) } def
/len { sequence length } bind def

/coor [
[284.23541260 293.44000244]
[273.79125977 282.67340088]
[263.34710693 271.90679932]
[252.90296936 261.14019775]
[242.45881653 250.37359619]
[232.01467896 239.60699463]
[216.47433472 243.93560791]
[200.77693176 239.82925415]
[189.21414185 228.31311035]
[184.99620056 212.45135498]
[189.36100769 196.53221130]
[178.70080566 185.97947693]
[168.04058838 175.42675781]
[150.87031555 171.92396545]
[146.09794617 154.16714478]
[135.22605896 143.83264160]
[124.35415649 133.49813843]
[113.48226929 123.16363525]
[102.61037445 112.82913208]
[91.32860565 102.94371033]
[79.65548706 93.52360535]
[64.14974976 95.01015472]
[52.44573975 85.29054260]
[51.12410355 70.49903107]
[39.45098495 61.07892609]
[27.77786827 51.65882111]
[16.10475159 42.23871994]
[3.77599072 49.43012619]
[-10.23931408 51.96641159]
[-24.24746513 49.56186676]
[-36.56272888 42.52661896]
[-45.71020889 31.72678947]
[-50.60245514 18.47791672]
[-50.66872406 4.38472509]
[-45.92148972 -8.85324097]
[-57.40129089 -18.50798798]
[-68.88109589 -28.16273499]
[-80.36089325 -37.81748199]
[-95.90255737 -40.77844620]
[-100.66287994 -54.89186478]
[-112.14268494 -64.54660797]
[-127.68434906 -67.50757599]
[-132.44467163 -81.62099457]
[-143.92448425 -91.27574158]
[-155.40428162 -100.93048859]
[-166.98133850 -110.46840668]
[-178.65444946 -119.88850403]
[-190.32756042 -129.30860901]
[-202.00068665 -138.72871399]
[-213.76866150 -148.03002930]
[-225.63029480 -157.21162415]
[-237.49194336 -166.39321899]
[-253.52404785 -165.80087280]
[-263.87335205 -178.05940247]
[-260.60073853 -193.76512146]
[-246.21667480 -200.86993408]
[-231.75540161 -193.92364502]
[-228.31034851 -178.25485229]
[-216.44871521 -169.07325745]
[-204.58708191 -159.89167786]
[-197.32997131 -158.27485657]
[-192.58058167 -150.40182495]
[-180.90747070 -140.98171997]
[-169.23434448 -131.56163025]
[-157.56123352 -122.14151764]
[-150.33839417 -120.37795258]
[-145.74952698 -112.41029358]
[-134.26972961 -102.75554657]
[-122.78992462 -93.10079956]
[-108.06938171 -90.83040619]
[-102.48793793 -76.02641296]
[-91.00814056 -66.37166595]
[-76.28759003 -64.10127258]
[-70.70614624 -49.29728317]
[-59.22634506 -39.64253616]
[-47.74654388 -29.98779106]
[-36.26674271 -20.33304405]
[-22.34299088 -27.84300613]
[-6.56628990 -29.45059586]
[8.65971470 -24.88127518]
[21.00392532 -14.80384350]
[28.56468010 -0.73272693]
[30.16268349 15.19956303]
[25.52485466 30.56560135]
[37.19797134 39.98570633]
[48.87108994 49.40580750]
[60.54420471 58.82591248]
[75.28116608 56.99354935]
[87.25356293 66.38058472]
[89.07559204 81.85048676]
[100.74871063 91.27059174]
[103.86074829 91.18043518]
[107.07326508 92.24847412]
[109.94696808 94.51342010]
[112.03488922 97.84732056]
[112.94487762 101.95724487]
[123.81677246 112.29174805]
[134.68865967 122.62625122]
[145.56056213 132.96075439]
[156.43244934 143.29525757]
[169.36071777 143.75856018]
[178.20700073 152.63934326]
[178.59330750 164.76655579]
[189.25352478 175.31927490]
[199.91374207 185.87199402]
[213.22886658 181.48292542]
[227.06842041 183.26322937]
[238.72790527 190.80732727]
[245.95382690 202.58895874]
[247.37907410 216.26966858]
[242.78128052 229.16284180]
[253.22543335 239.92945862]
[263.66958618 250.69606018]
[274.11370850 261.46264648]
[284.55786133 272.22924805]
[295.00201416 282.99588013]
[304.46923828 281.87237549]
[313.24978638 285.21560669]
[319.38903809 292.14434814]
[321.58422852 300.99536133]
[319.45941162 309.72137451]
[329.22998047 321.10272217]
[339.00057983 332.48410034]
[348.77117920 343.86547852]
[356.78491211 348.37335205]
[358.62161255 355.57794189]
[368.15951538 367.15499878]
[377.69741821 378.73205566]
[392.80029297 376.31317139]
[406.99240112 381.74279785]
[416.49807739 393.46920776]
[418.84225464 408.28002930]
[413.49423218 422.18197632]
[423.03216553 433.75903320]
[432.57006836 445.33609009]
[448.33636475 448.30325317]
[455.71902466 462.54669189]
[449.05471802 477.14007568]
[433.45574951 480.88861084]
[420.88827515 470.91671753]
[420.99301147 454.87402344]
[411.45510864 443.29696655]
[401.91717529 431.71990967]
[387.24874878 434.30877686]
[373.16018677 429.17370605]
[363.46954346 417.59970093]
[360.85607910 402.63085938]
[366.12036133 388.26998901]
[356.58245850 376.69293213]
[347.04455566 365.11587524]
[337.38980103 353.63607788]
[327.61920166 342.25469971]
[317.84863281 330.87332153]
[308.07803345 319.49194336]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 116]
[2 115]
[3 114]
[4 113]
[5 112]
[6 111]
[11 105]
[12 104]
[13 103]
[15 100]
[16 99]
[17 98]
[18 97]
[19 96]
[20 91]
[21 90]
[24 87]
[25 86]
[26 85]
[27 84]
[35 77]
[36 76]
[37 75]
[38 74]
[40 72]
[41 71]
[43 69]
[44 68]
[45 67]
[46 65]
[47 64]
[48 63]
[49 62]
[50 60]
[51 59]
[52 58]
[121 154]
[122 153]
[123 152]
[124 151]
[126 150]
[127 149]
[128 148]
[133 143]
[134 142]
[135 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
