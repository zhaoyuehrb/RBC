%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:12:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUGUGGGAAAACCAGACCUUCAACUCCAUCUUCAUCCUGCUGGGAAUCUUCAAUCACAGUCCCACCCACACCUUCCUUUUUUCUCUGGUCCUGGGCA\
) } def
/len { sequence length } bind def

/coor [
[90.33679962 144.57986450]
[82.99327850 131.50038147]
[87.69654846 117.25724792]
[77.51025391 128.26812744]
[67.32395935 139.27900696]
[63.63208771 154.66343689]
[49.30953979 158.75169373]
[39.12324905 169.76257324]
[28.93695450 180.77345276]
[28.12127495 196.79576111]
[15.00249863 206.03031921]
[-0.35577300 201.39318848]
[-6.17198753 186.44155884]
[2.01555681 172.64505005]
[17.92607689 170.58715820]
[28.11236954 159.57627869]
[38.29866409 148.56539917]
[41.26194763 133.96855164]
[56.31308365 129.09271240]
[66.49937439 118.08183289]
[76.68566895 107.07095337]
[63.73376846 114.63720703]
[49.31452560 118.77066803]
[34.32111740 119.21529388]
[19.68227577 115.94355011]
[6.30477333 109.15808868]
[-4.98274899 99.27922821]
[-13.48110867 86.91889191]
[-18.66389465 72.84272003]
[-20.21006775 57.92261887]
[-18.02385712 43.08279419]
[-12.24067879 29.24245834]
[-3.21876240 17.25892830]
[8.48304939 7.87449408]
[22.13991356 1.67045653]
[36.90588379 -0.96888840]
[51.86631012 0.11994759]
[66.09450531 4.86951876]
[78.70913696 12.98562336]
[88.92881012 23.96552658]
[96.12049103 37.12910080]
[99.83871460 51.66095734]
[99.85314941 66.66094971]
[96.16240692 81.20122528]
[100.75326538 66.92102814]
[105.34412384 52.64083481]
[109.93498230 38.36063766]
[114.52584076 24.08044052]
[102.91369629 14.27093029]
[95.94385529 0.76205492]
[94.67916107 -14.38617897]
[99.31247711 -28.86377716]
[109.13725281 -40.46300888]
[122.65528107 -47.41507721]
[137.80517578 -48.65984344]
[152.27665710 -44.00748444]
[163.86296082 -34.16745758]
[170.79724121 -20.64029312]
[172.02206421 -5.48878384]
[167.35067749 8.97657394]
[157.49542236 20.54991722]
[143.95915222 27.46639633]
[128.80604553 28.67129898]
[124.21517944 42.95149612]
[119.62432098 57.23169327]
[115.03346252 71.51188660]
[110.44260406 85.79208374]
[116.34410858 99.58238220]
[129.84414673 106.12065125]
[143.34419250 112.65891266]
[156.84422302 119.19718170]
[175.08441162 117.36882019]
[184.49295044 132.09230042]
[198.18978882 138.20755005]
[211.88664246 144.32281494]
[222.89976501 133.84523010]
[237.08595276 128.38441467]
[252.28192139 128.77310181]
[266.17037964 134.95201111]
[276.63345337 145.97889709]
[282.07562256 160.17225647]
[281.66693115 175.36770630]
[275.46975708 189.24803162]
[264.42910767 199.69659424]
[250.22862244 205.12007141]
[235.03372192 204.69140625]
[221.16156006 198.47598267]
[210.72752380 187.42160034]
[205.32273865 173.21397400]
[205.77139282 158.01965332]
[192.07453918 151.90440369]
[178.37768555 145.78915405]
[166.85697937 149.82539368]
[155.33508301 144.69992065]
[150.30595398 132.69721985]
[136.80592346 126.15895081]
[123.30588531 119.62068939]
[109.80583954 113.08242035]
[119.37916565 124.63021088]
[117.31038666 139.48686218]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 21]
[4 20]
[5 19]
[7 17]
[8 16]
[9 15]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[68 98]
[69 97]
[70 96]
[71 95]
[73 92]
[74 91]
[75 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
