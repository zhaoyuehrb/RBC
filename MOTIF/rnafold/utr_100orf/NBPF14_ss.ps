%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:33:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUGGUAUCAGCCGGCCCUUGGUCCAGCGAGAAGGCAGAGAUGAACAUUCUAGAAAUCAACGAGAAAUUGCGCCCCCAGUUGGCAGAGAACAAACAGC\
) } def
/len { sequence length } bind def

/coor [
[91.72286224 248.68856812]
[99.94934082 234.50205994]
[99.48284912 219.50932312]
[89.42498779 205.22152710]
[98.03152466 189.03590393]
[97.09897614 174.06491089]
[84.44997406 166.24566650]
[78.76345062 152.31269836]
[82.41423798 137.53010559]
[94.20574188 127.61714935]
[93.27319336 112.64616394]
[85.70376587 100.89051819]
[91.75582123 88.28637695]
[90.82327271 73.31539917]
[89.89073181 58.34440994]
[88.95819092 43.37342834]
[88.02564240 28.40244293]
[87.09310150 13.43145943]
[83.98916626 8.79325676]
[83.18659973 3.92075157]
[84.36112213 -0.22353883]
[86.83805847 -2.96576881]
[87.30455780 -17.95851326]
[87.77105713 -32.95125580]
[74.82353210 -41.09428024]
[67.73709106 -54.53597641]
[68.32631683 -69.61971283]
[76.33289337 -82.29846954]
[89.52187347 -89.22063446]
[89.98837280 -104.21337891]
[90.45487213 -119.20612335]
[90.92136383 -134.19886780]
[76.58850098 -138.93688965]
[64.18398285 -147.51303101]
[54.70824051 -159.22521973]
[48.92257309 -173.11889648]
[47.28796768 -188.06480408]
[49.92840576 -202.85075378]
[56.62148285 -216.27995300]
[66.81712341 -227.26788330]
[79.68278503 -234.92987061]
[94.17142487 -238.65232849]
[94.63792419 -253.64506531]
[95.10442352 -268.63781738]
[81.37318420 -275.22363281]
[71.51270294 -286.82925415]
[67.23137665 -301.44396973]
[69.27096558 -316.53570557]
[77.27810669 -329.48968506]
[89.86550903 -338.06155396]
[104.85232544 -340.76623535]
[119.64199829 -337.13507080]
[131.67213440 -327.79721069]
[138.85844421 -314.37048340]
[139.95584106 -299.18115234]
[134.77420044 -284.86087036]
[124.21128845 -273.89071655]
[110.09716797 -268.17132568]
[109.63066864 -253.17857361]
[109.16416931 -238.18582153]
[123.39336395 -233.56982422]
[135.75779724 -225.12280273]
[145.25059509 -213.52226257]
[151.09584045 -199.70294189]
[152.81193542 -184.78143311]
[150.25131226 -169.96606445]
[143.61306763 -156.45895386]
[133.42752075 -145.35852051]
[120.51381683 -137.57015991]
[105.91410828 -133.73236084]
[105.44761658 -118.73962402]
[104.98111725 -103.74687958]
[104.51461792 -88.75413513]
[117.24773407 -81.02540588]
[124.45059204 -67.87341309]
[124.10092163 -52.78222275]
[116.19252777 -39.80708694]
[102.76380157 -32.48476028]
[102.29730225 -17.49201584]
[101.83080292 -2.49927092]
[102.06407928 12.49891472]
[102.99662781 27.46989822]
[103.92916870 42.44088364]
[104.86171722 57.41186523]
[105.79425812 72.38285065]
[106.72680664 87.35383606]
[114.29623413 99.10948181]
[108.24417877 111.71362305]
[109.17672729 126.68460083]
[122.10726166 135.05761719]
[127.56432343 149.27288818]
[123.65083313 163.80383301]
[112.06996155 173.13237000]
[113.00250244 188.10334778]
[122.20285034 197.30718994]
[122.57793427 209.91210938]
[114.47559357 219.04281616]
[114.94208527 234.03556824]
[124.03462982 247.68319702]
[116.52017975 262.25936890]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 98]
[3 97]
[5 94]
[6 93]
[10 89]
[11 88]
[13 86]
[14 85]
[15 84]
[16 83]
[17 82]
[18 81]
[22 80]
[23 79]
[24 78]
[29 73]
[30 72]
[31 71]
[32 70]
[42 60]
[43 59]
[44 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
