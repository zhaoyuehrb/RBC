%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:15:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUUAAAUUAGCAAGCCUUCAAAACCAAAAAUGGGGUCGAAAAGAGGCAUAUCUUCUAGGCAUCAUUCUCUCAGCUCCUAUGAAAUCAUGUUUGCAGCUCUCUUUGCCAUAUUGGUAGUGCUCUGUGCUG\
) } def
/len { sequence length } bind def

/coor [
[62.50316238 412.38366699]
[59.28545380 427.40173340]
[48.97790527 438.78811646]
[34.35319901 443.47998047]
[19.34530640 440.21520996]
[7.99127388 429.87200928]
[3.34527993 415.23269653]
[6.65707350 400.23510742]
[17.03579903 388.91354370]
[31.68963242 384.31344604]
[34.87810898 369.65625000]
[38.06658936 354.99905396]
[41.25506973 340.34185791]
[44.44355011 325.68463135]
[47.10684586 310.92297363]
[49.24156952 296.07565308]
[51.37629318 281.22833252]
[53.33418655 266.35665894]
[55.11497116 251.46273804]
[41.63496399 258.04220581]
[27.98343277 251.82644653]
[24.09549904 237.33908081]
[32.80067062 225.12351990]
[47.76361465 224.06983948]
[58.09501266 234.94548035]
[61.63139725 220.36830139]
[65.16777802 205.79112244]
[68.70416260 191.21395874]
[72.24054718 176.63677979]
[66.19910431 166.08665466]
[69.09700775 153.86595154]
[79.90222168 146.70675659]
[83.78450775 132.21786499]
[87.66679382 117.72898102]
[91.54907990 103.24008942]
[90.04914856 99.56875610]
[90.22546387 95.24532318]
[92.33423615 91.05673981]
[96.25991058 87.87527466]
[101.16592407 73.70025635]
[106.07194519 59.52524567]
[110.97796631 45.35023499]
[108.17980194 29.77843857]
[119.65424347 20.28177834]
[124.56026459 6.10676622]
[129.46627808 -8.06824589]
[134.37229919 -22.24325752]
[138.25459290 -36.73214722]
[141.09335327 -51.46107483]
[143.93212891 -66.19001007]
[146.77088928 -80.91893768]
[136.34339905 -92.25797272]
[134.61236572 -107.38598633]
[142.03340149 -120.47766876]
[155.57823181 -126.61573029]
[158.41699219 -141.34465027]
[161.25576782 -156.07359314]
[163.91906738 -170.83525085]
[166.40650940 -185.62756348]
[168.89396667 -200.41989136]
[171.38140869 -215.21220398]
[158.18194580 -222.66539001]
[148.33000183 -234.18559265]
[143.01525879 -248.38168335]
[142.87948608 -263.53942871]
[147.93908691 -277.82846069]
[157.58308411 -289.52328491]
[170.64691162 -297.21173096]
[185.55307007 -299.96536255]
[200.50154114 -297.45162964]
[213.68725586 -289.97415161]
[223.51794434 -278.43582153]
[228.80651855 -264.22994995]
[228.91436768 -249.07196045]
[223.82844543 -234.79228210]
[214.16291809 -223.11523438]
[201.08493042 -215.45089722]
[186.17372131 -212.72474670]
[183.68627930 -197.93243408]
[181.19882202 -183.14012146]
[178.71138000 -168.34780884]
[180.72409058 -161.16001892]
[175.98469543 -153.23481750]
[173.14591980 -138.50588989]
[170.30715942 -123.77695465]
[180.60044861 -113.04447937]
[182.62422180 -98.13246155]
[175.39466858 -84.73145294]
[161.49981689 -78.08016968]
[158.66105652 -63.35123825]
[155.82228088 -48.62230682]
[152.98352051 -33.89337540]
[166.29093933 -40.81525040]
[180.65982056 -36.50999069]
[187.96853638 -23.41103172]
[184.08602905 -8.92220592]
[171.20677185 -1.23293328]
[156.61044312 -4.68936968]
[148.54731750 -17.33723831]
[143.64129639 -3.16222668]
[138.73527527 11.01278591]
[133.82925415 25.18779755]
[136.97833252 39.74570465]
[125.15297699 50.25625610]
[120.24695587 64.43126678]
[115.34094238 78.60627747]
[110.43492126 92.78128815]
[106.03796387 107.12237549]
[102.15567780 121.61126709]
[98.27339172 136.10015869]
[94.39110565 150.58903503]
[99.59573364 168.20527649]
[86.81772614 180.17317200]
[83.28134155 194.75033569]
[79.74495697 209.32751465]
[76.20857239 223.90469360]
[72.67218781 238.48185730]
[70.00888824 253.24353027]
[68.22810364 268.13745117]
[70.32933044 277.12942505]
[66.22360992 283.36306763]
[64.08889008 298.21038818]
[61.95417023 313.05770874]
[63.97871780 318.08139038]
[63.82164001 322.88223267]
[61.95222855 326.64569092]
[59.10074997 328.87313843]
[55.91227341 343.53033447]
[52.72379303 358.18753052]
[49.53531265 372.84472656]
[46.34683609 387.50192261]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 131]
[11 130]
[12 129]
[13 128]
[14 127]
[15 123]
[16 122]
[17 121]
[18 119]
[19 118]
[25 117]
[26 116]
[27 115]
[28 114]
[29 113]
[32 111]
[33 110]
[34 109]
[35 108]
[39 107]
[40 106]
[41 105]
[42 104]
[44 102]
[45 101]
[46 100]
[47 99]
[48 92]
[49 91]
[50 90]
[51 89]
[55 85]
[56 84]
[57 83]
[58 81]
[59 80]
[60 79]
[61 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
