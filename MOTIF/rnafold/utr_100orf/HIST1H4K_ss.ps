%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCUGGCCGCGGCAAAGGCGGGAAGGGUCUUGGCAAAGGCGGCGCUAAGCGCCACCGUAAAGUACUGCGCGACAAUAUCCAGGGCAUCACCAAGCCGG\
) } def
/len { sequence length } bind def

/coor [
[133.38720703 175.62597656]
[140.47752380 158.01448059]
[130.63858032 146.69213867]
[120.79965973 135.36979675]
[110.96073151 124.04744720]
[92.20048523 127.28055573]
[74.74211884 116.77253723]
[67.96620178 96.13917542]
[52.96801758 96.37245178]
[37.96983337 96.60572815]
[29.00284386 109.13167572]
[14.54852676 113.91979218]
[0.21591586 109.33282471]
[-8.56232643 97.32947540]
[-23.56051254 97.56275177]
[-37.23868561 105.51373291]
[-50.08474731 97.97530365]
[-65.08293152 98.20858002]
[-80.08112335 98.44185638]
[-95.07930756 98.67513275]
[-110.07749176 98.90840912]
[-119.80057526 111.15568542]
[-135.13154602 114.23710632]
[-148.83160400 106.69770813]
[-154.43199158 92.09738159]
[-149.28839111 77.32994080]
[-135.82942200 69.36812592]
[-120.41003418 71.97126007]
[-110.31076813 83.91022491]
[-95.31258392 83.67694855]
[-80.31439972 83.44367218]
[-65.31621552 83.21039581]
[-50.31802750 82.97711945]
[-37.71262360 75.04281616]
[-23.79379082 82.56456757]
[-8.79560375 82.33129120]
[-0.39491010 70.06074524]
[13.78811359 65.03025055]
[28.38434982 69.36653137]
[37.73655701 81.60754395]
[52.73474121 81.37426758]
[67.73292542 81.14099121]
[77.74674988 69.97303009]
[76.34906006 55.03828430]
[74.95137024 40.10354614]
[73.55368042 25.16880608]
[72.15599060 10.23406506]
[64.66007996 -4.97276306]
[77.19754791 -16.38540077]
[91.63488770 -7.49723911]
[87.09073639 8.83637619]
[88.48842621 23.77111626]
[89.88610840 38.70585632]
[91.28379822 53.64059830]
[92.68148804 68.57534027]
[101.26864624 69.70694733]
[108.72370911 73.00077820]
[114.55334473 77.94058990]
[126.02733612 68.27893066]
[137.50132751 58.61727905]
[148.97531128 48.95561981]
[150.07565308 33.18968201]
[162.05656433 22.88273048]
[177.80998230 24.14969635]
[187.98968506 36.23891068]
[186.55624390 51.97805786]
[174.36007690 62.02938080]
[158.63696289 60.42960739]
[147.16297913 70.09126282]
[135.68899536 79.75292206]
[124.21500397 89.41458130]
[126.34772491 102.05299377]
[122.28307343 114.20851898]
[132.12200928 125.53086090]
[141.96093750 136.85321045]
[151.79986572 148.17555237]
[162.76119995 144.23312378]
[174.37834167 143.90463257]
[185.49322510 147.20597839]
[195.00309753 153.79208374]
[201.96994019 162.99285889]
[205.71295166 173.88134766]
[205.87506104 185.36708069]
[202.45692444 196.30537415]
[195.81520081 205.61125183]
[204.17298889 218.06707764]
[212.53077698 230.52288818]
[228.04147339 230.96736145]
[240.30807495 240.47053528]
[244.61378479 255.37826538]
[239.30299377 269.95822144]
[226.41780090 278.60409546]
[210.91282654 277.99142456]
[198.75004578 268.35571289]
[194.60630798 253.40216064]
[200.07495117 238.88067627]
[191.71716309 226.42486572]
[183.35939026 213.96903992]
[164.84794617 216.38417053]
[147.51593018 209.23776245]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 76]
[3 75]
[4 74]
[5 73]
[8 42]
[9 41]
[10 40]
[14 36]
[15 35]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
[58 71]
[59 70]
[60 69]
[61 68]
[85 98]
[86 97]
[87 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
