%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCAAUGCUGGGGCGAGGGUUAGCCGCGCAGGUGCGGUGAAGGGAGGAUGGCGGAGUUGGUACCUUUUGCGGUUCCCAUCGAGAGUGACAAAACCUUGCUAGUGUGGGAGCUGAGCUCCGGACCCACGGCCGAGGCUUUGCAUCAUU\
) } def
/len { sequence length } bind def

/coor [
[118.06733704 424.28283691]
[117.12548065 409.31243896]
[108.60430145 397.09609985]
[115.45980835 382.83734131]
[114.51795197 367.86694336]
[113.57609558 352.89651489]
[112.63423920 337.92611694]
[104.11305237 325.70980835]
[110.96856689 311.45101929]
[110.02671051 296.48062134]
[109.08484650 281.51022339]
[98.59177399 267.47909546]
[106.82831573 251.04397583]
[105.57314301 236.09657288]
[96.79798889 224.06138611]
[103.35338593 209.66217041]
[102.09822083 194.71478271]
[93.32306671 182.67958069]
[99.87846375 168.28036499]
[98.62329102 153.33297729]
[97.36812592 138.38558960]
[96.11296082 123.43819427]
[94.85778809 108.49079895]
[90.47564697 111.17035675]
[85.17828369 112.56758118]
[70.50606537 115.68625641]
[55.83385468 118.80493164]
[41.16164017 121.92360687]
[26.48942566 125.04228210]
[18.09307480 138.43171692]
[2.66975141 141.88087463]
[-10.63015842 133.34342957]
[-13.91605473 117.88449860]
[-5.23847389 104.67559052]
[10.25432968 101.55332184]
[23.37075043 110.37007141]
[38.04296494 107.25139618]
[52.71517944 104.13272095]
[67.38739014 101.01404572]
[82.05960846 97.89537048]
[67.14842224 99.52529907]
[52.80136108 95.14788818]
[41.33985138 85.47142792]
[34.61843491 72.06163788]
[33.72468185 57.08828735]
[38.80320358 42.97415924]
[49.03226471 32.00299835]
[62.75674057 25.95001030]
[77.75593567 25.79459763]
[91.60289001 31.56190872]
[102.05708313 42.31875992]
[107.42696381 56.32463074]
[106.84365845 71.31328583]
[100.39997864 84.86154175]
[108.17038727 72.03107452]
[115.94079590 59.20061493]
[123.71119690 46.37015152]
[131.48159790 33.53968430]
[139.25201416 20.70922279]
[147.02241516 7.87875843]
[133.09436035 13.44735432]
[118.16107941 12.03410339]
[105.52494049 3.95153451]
[97.98029327 -9.01296902]
[97.19557953 -23.99242973]
[103.34432220 -37.67427826]
[115.06678009 -47.03290176]
[129.77066040 -49.99873352]
[144.20431519 -45.91590118]
[155.17588806 -35.68728638]
[160.25912476 -21.57485580]
[158.32939148 -6.69811153]
[168.82434082 -17.41520119]
[179.31929016 -28.13229179]
[189.81423950 -38.84938049]
[200.30918884 -49.56647110]
[210.80413818 -60.28356171]
[221.29908752 -71.00065613]
[231.79403687 -81.71774292]
[242.28898621 -92.43482971]
[252.78395081 -103.15192413]
[262.70361328 -114.40358734]
[272.02084351 -126.15898895]
[281.33804321 -137.91439819]
[290.65527344 -149.66979980]
[293.56124878 -158.40110779]
[300.29278564 -161.57112122]
[309.85412598 -173.12882996]
[308.11749268 -188.83740234]
[318.06222534 -201.12065125]
[333.78826904 -202.69111633]
[345.96569824 -192.61709595]
[347.36981201 -176.87530518]
[337.16760254 -164.80506897]
[321.41183472 -163.56745911]
[311.85046387 -152.00976562]
[302.41067505 -140.35258484]
[293.09344482 -128.59718323]
[283.77624512 -116.84177399]
[274.45901489 -105.08637238]
[289.40469360 -103.81068420]
[297.90362549 -91.45076752]
[293.74523926 -77.03869629]
[279.96823120 -71.10619354]
[266.64028931 -77.98847198]
[263.50103760 -92.65697479]
[253.00608826 -81.93988037]
[242.51113892 -71.22279358]
[232.01618958 -60.50570297]
[221.52124023 -49.78861237]
[211.02627563 -39.07152176]
[200.53132629 -28.35443306]
[190.03637695 -17.63734245]
[179.54142761 -6.92025185]
[169.04647827 3.79683828]
[159.85287476 15.64916325]
[152.08247375 28.47962761]
[144.31207275 41.31009293]
[136.54165649 54.14055634]
[128.77125549 66.97101593]
[121.00085449 79.80148315]
[113.23044586 92.63195038]
[109.80518341 107.23563385]
[111.06034851 122.18302155]
[112.31552124 137.13041687]
[113.57068634 152.07780457]
[114.82585144 167.02520752]
[123.69078827 180.12953186]
[117.04561615 193.45960999]
[118.30078125 208.40699768]
[127.16571045 221.51133728]
[120.52053833 234.84141541]
[121.77571106 249.78880310]
[131.13058472 258.73117065]
[131.83457947 271.25106812]
[124.05525208 280.56835938]
[124.99710846 295.53875732]
[125.93896484 310.50918579]
[134.52751160 323.79629517]
[127.60463715 336.98428345]
[128.54649353 351.95468140]
[129.48835754 366.92507935]
[130.43020630 381.89547729]
[139.01876831 395.18258667]
[132.09588623 408.37057495]
[133.03773499 423.34097290]
[142.55862427 436.69329834]
[135.51034546 451.50051880]
[119.14356232 452.53024292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 146]
[2 145]
[4 143]
[5 142]
[6 141]
[7 140]
[9 138]
[10 137]
[11 136]
[13 133]
[14 132]
[16 130]
[17 129]
[19 127]
[20 126]
[21 125]
[22 124]
[23 123]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[54 122]
[55 121]
[56 120]
[57 119]
[58 118]
[59 117]
[60 116]
[72 115]
[73 114]
[74 113]
[75 112]
[76 111]
[77 110]
[78 109]
[79 108]
[80 107]
[81 106]
[82 100]
[83 99]
[84 98]
[85 97]
[87 96]
[88 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
