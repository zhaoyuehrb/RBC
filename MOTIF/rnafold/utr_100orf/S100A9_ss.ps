%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:48:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACACUCUGUGUGGCUCCUCGGCUUUGACAGAGUGCAAGACGAUGACUUGCAAAAUGUCGCAGCUGGAACGCAACAUAGAGACCAUCAUCAACACCUUCCACCAAUACUCUGUGAAGCUGGGGCACCCAGACACCCUGAACC\
) } def
/len { sequence length } bind def

/coor [
[33.38278198 134.29742432]
[29.28601265 124.28591156]
[26.68087578 113.81076813]
[25.61534882 103.09243011]
[26.10507202 92.35548401]
[28.13317490 81.82395172]
[14.03778553 76.69364929]
[-0.05760356 71.56334686]
[-14.15299320 66.43304443]
[-28.24838257 61.30273819]
[-42.34377289 56.17243576]
[-56.43915939 51.04213715]
[-70.53455353 45.91183472]
[-86.14878082 48.46258163]
[-95.46219635 36.83891296]
[-109.55758667 31.70861053]
[-122.40174103 40.21353531]
[-137.61323547 39.53258133]
[-149.36795044 30.13625717]
[-153.28880310 15.79174995]
[-167.38418579 10.66144753]
[-181.47958374 5.53114557]
[-195.57496643 0.40084341]
[-209.67034912 -4.72945881]
[-223.76574707 -9.85976124]
[-239.37997437 -7.30901384]
[-248.69338989 -18.93268204]
[-262.78878784 -24.06298256]
[-276.88415527 -29.19328499]
[-290.97955322 -34.32358932]
[-305.07495117 -39.45388794]
[-317.91909790 -30.94896317]
[-333.13061523 -31.62991905]
[-344.88531494 -41.02624130]
[-348.80615234 -55.37075043]
[-362.90155029 -60.50105286]
[-376.99694824 -65.63135529]
[-391.09231567 -70.76165771]
[-405.18771362 -75.89196014]
[-419.28311157 -81.02226257]
[-432.73428345 -73.04730225]
[-448.15621948 -75.63537598]
[-458.26712036 -87.56446838]
[-458.29296875 -103.20202637]
[-448.22155762 -115.16448212]
[-432.80825806 -117.80352020]
[-419.33081055 -109.87306976]
[-414.15280151 -95.11765289]
[-400.05740356 -89.98735046]
[-385.96203613 -84.85704803]
[-371.86663818 -79.72674561]
[-357.77124023 -74.59644318]
[-343.67587280 -69.46614075]
[-331.45184326 -77.93439484]
[-316.40737915 -77.57661438]
[-304.31698608 -68.32049561]
[-299.94464111 -53.54927826]
[-285.84924316 -48.41897583]
[-271.75387573 -43.28867340]
[-257.65847778 -38.15837097]
[-243.56307983 -33.02807236]
[-228.95704651 -35.94577026]
[-218.63543701 -23.95515060]
[-204.54005432 -18.82484818]
[-190.44467163 -13.69454575]
[-176.34927368 -8.56424332]
[-162.25389099 -3.43394160]
[-148.15849304 1.69636059]
[-135.93447876 -6.77189445]
[-120.89000702 -6.41411734]
[-108.79961395 2.84200406]
[-104.42728424 17.61322212]
[-90.33189392 22.74352264]
[-75.72585297 19.82582283]
[-65.40425110 31.81644440]
[-51.30885696 36.94674683]
[-37.21347046 42.07704926]
[-23.11808014 47.20735168]
[-9.02269077 52.33765411]
[5.07269859 57.46795273]
[19.16808701 62.59825516]
[33.26347733 67.72856140]
[40.16064835 55.90377808]
[49.13649750 45.51856995]
[59.89605331 36.93515778]
[72.08185577 30.45620728]
[85.28582764 26.31419945]
[99.06290436 24.66308784]
[112.94608307 25.57262993]
[126.46221161 29.02554512]
[139.14816284 34.91764069]
[150.56661987 43.06091309]
[160.32124329 53.18950272]
[168.07037354 64.96837616]
[173.53897095 78.00440216]
[176.52839661 91.85943604]
[176.92359924 106.06509399]
[191.92002869 105.73786926]
[206.91645813 105.41064453]
[221.91288757 105.08342743]
[236.90486145 104.59263611]
[251.89057922 103.93834686]
[259.56817627 90.55709076]
[273.27194214 83.47117615]
[288.62905884 84.94168854]
[300.73913574 94.49939728]
[305.73788452 109.09446716]
[302.03021240 124.06967163]
[290.79922485 134.64646912]
[275.62872314 137.44984436]
[261.35949707 131.58526611]
[252.54487610 118.92407227]
[237.55914307 119.57836151]
[230.96397400 123.03869629]
[222.24011230 120.07985687]
[207.24368286 120.40707397]
[192.24725342 120.73429871]
[177.25082397 121.06152344]
[171.96707153 135.10011292]
[183.02622986 145.23396301]
[194.08538818 155.36781311]
[205.14454651 165.50167847]
[216.20370483 175.63552856]
[231.96638489 181.87846375]
[230.33097839 198.75334167]
[213.66284180 201.85327148]
[206.06985474 186.69468689]
[195.01069641 176.56083679]
[183.95153809 166.42698669]
[172.89237976 156.29312134]
[161.83322144 146.15927124]
[154.42184448 154.47642517]
[145.90655518 161.62345886]
[136.46951294 167.45614624]
[126.31137848 171.85829163]
[115.64699554 174.74404907]
[104.70089722 176.05952454]
[93.70256042 175.78384399]
[82.88157654 173.92941284]
[72.46289062 170.54151917]
[62.66211319 165.69728088]
[53.68104553 159.50384521]
[45.70354462 152.09608459]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 82]
[7 81]
[8 80]
[9 79]
[10 78]
[11 77]
[12 76]
[13 75]
[15 73]
[16 72]
[20 68]
[21 67]
[22 66]
[23 65]
[24 64]
[25 63]
[27 61]
[28 60]
[29 59]
[30 58]
[31 57]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[97 118]
[98 117]
[99 116]
[100 115]
[101 113]
[102 112]
[119 131]
[120 130]
[121 129]
[122 128]
[123 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
