%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:04:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCACUUUCACUCUCCGUCAGCCGCAUUGCCCGCUCGGCGUCCGGCCCCCGACCCGCGCUCGUCCGCCCGCCCGCCCGCCCGCCCGCGCCAUGAACGCCAAGGUCGUGGUCGUGCUGGUCCUCGUGCUGACCGCGCUCUGCCUCAGCGACGGGAAGCCCGUCAGCCUGAGCUACAGAUGCCCAUGCCGAU\
) } def
/len { sequence length } bind def

/coor [
[-9.47339725 287.70648193]
[-16.07577324 301.17529297]
[-15.20255756 316.97238159]
[-27.75205040 324.99481201]
[-34.35442734 338.46362305]
[-23.64392471 349.16705322]
[-16.99139214 362.76934814]
[-15.11844635 377.79504395]
[-18.22825050 392.61419678]
[-25.98347664 405.61938477]
[-37.54289627 415.39993286]
[-51.65262604 420.89483643]
[-66.78215790 421.50811768]
[-81.29034424 417.17321777]
[-93.60344696 408.36038208]
[-102.38583374 396.02554321]
[-106.68485260 381.50668335]
[-106.03419495 366.37872314]
[-100.50441742 352.28262329]
[-90.69535828 340.74740601]
[-77.67103577 333.02432251]
[-62.84422684 329.95117188]
[-47.82323074 331.86123657]
[-41.22085190 318.39242554]
[-42.56631470 303.55871582]
[-29.54457474 294.57290649]
[-22.94219971 281.10409546]
[-27.90539551 275.43017578]
[-31.17432213 268.60754395]
[-32.49579239 261.13113403]
[-31.75847435 253.54763794]
[-29.00212288 246.41551208]
[-24.41570663 240.26388550]
[-18.32452011 235.55329895]
[-11.16714764 232.64122009]
[-3.46389151 231.75498962]
[4.22104979 232.97406006]
[12.31198025 220.34327698]
[20.40291023 207.71247864]
[28.49384117 195.08169556]
[36.58477020 182.45089722]
[44.67570114 169.82011414]
[52.76663208 157.18931580]
[50.48582840 145.30006409]
[57.13598633 134.70751953]
[69.60989380 131.38780212]
[77.90534210 118.89038086]
[86.20079041 106.39295959]
[73.53256226 114.42514801]
[58.53553009 114.72348785]
[45.55788040 107.20148468]
[38.36231232 94.04003143]
[39.03508377 79.05512238]
[47.38113403 66.59143829]
[60.98063660 60.26265717]
[75.89060211 61.90372086]
[87.78807068 71.03882599]
[93.22329712 85.01693726]
[93.95550537 70.03482056]
[94.68770599 55.05270004]
[95.41991425 40.07057953]
[87.34499359 30.00011063]
[88.27227020 17.52747154]
[97.15952301 9.30716801]
[98.13549042 -5.66104794]
[99.11146545 -20.62926292]
[92.28845978 -34.90361786]
[100.83746338 -47.10049820]
[101.81343842 -62.06871414]
[94.99043274 -76.34307098]
[103.53943634 -88.53994751]
[104.51540375 -103.50816345]
[92.75270844 -113.45528412]
[89.14482880 -128.24841309]
[94.87174225 -142.16481018]
[107.54337311 -149.94734192]
[108.51934814 -164.91555786]
[109.49531555 -179.88377380]
[102.67231750 -194.15812683]
[111.22132111 -206.35501099]
[112.19728851 -221.32322693]
[105.37429047 -235.59757996]
[113.92329407 -247.79444885]
[114.89926147 -262.76266479]
[108.07626343 -277.03701782]
[116.62525940 -289.23391724]
[117.60123444 -304.20211792]
[118.57720184 -319.17034912]
[119.55317688 -334.13854980]
[120.52914429 -349.10678101]
[121.38326263 -364.08242798]
[122.11547089 -379.06454468]
[115.06102753 -393.22595215]
[123.41036987 -405.56036377]
[124.14257050 -420.54248047]
[114.47421265 -433.34490967]
[118.59485626 -448.84976196]
[133.34349060 -455.16299438]
[147.40623474 -447.44168091]
[149.99536133 -431.60894775]
[139.12469482 -419.81027222]
[138.39248657 -404.82815552]
[145.49929810 -391.73837280]
[137.09757996 -378.33233643]
[136.36538696 -363.35021973]
[139.18330383 -356.50549316]
[135.49736023 -348.13079834]
[134.52139282 -333.16256714]
[133.54542542 -318.19436646]
[132.56944275 -303.22613525]
[131.59347534 -288.25793457]
[138.48628235 -275.05419922]
[129.86747742 -261.78671265]
[128.89151001 -246.81848145]
[135.78431702 -233.61476135]
[127.16550446 -220.34724426]
[126.18953705 -205.37902832]
[133.08233643 -192.17530823]
[124.46353149 -178.90780640]
[123.48756409 -163.93959045]
[122.51158905 -148.97137451]
[134.06535339 -139.60928345]
[137.93667603 -125.06703949]
[132.43840027 -110.86766052]
[119.48361969 -102.53218842]
[118.50765228 -87.56397247]
[125.40045929 -74.36024475]
[116.78165436 -61.09274292]
[115.80567932 -46.12452698]
[122.69848633 -32.92079926]
[114.07968140 -19.65329361]
[113.10370636 -4.68507719]
[112.12773895 10.28313828]
[120.73455048 25.56918716]
[110.40203094 40.80278778]
[109.66983032 55.78490448]
[108.93762207 70.76702118]
[108.20542145 85.74913788]
[115.77579498 98.69863892]
[129.19041443 105.41041565]
[142.60502625 112.12219238]
[156.01965332 118.83396912]
[176.05596924 116.71041870]
[186.02249146 133.26989746]
[199.64846802 139.54147339]
[213.27444458 145.81306458]
[226.90042114 152.08464050]
[240.57699585 158.24511719]
[254.30325317 164.29406738]
[268.07827759 170.23110962]
[281.90118408 176.05584717]
[295.72406006 181.88058472]
[309.54696655 187.70532227]
[323.36987305 193.53005981]
[337.19274902 199.35479736]
[354.13684082 199.93351746]
[358.27130127 216.37561035]
[343.61630249 224.90014648]
[331.36801147 213.17768860]
[317.54513550 207.35295105]
[303.72222900 201.52821350]
[289.89932251 195.70349121]
[276.07644653 189.87875366]
[262.25354004 184.05401611]
[254.85754395 184.35426331]
[248.25428772 178.02032471]
[234.52803040 171.97137451]
[227.12812805 172.15119934]
[220.62884521 165.71061707]
[207.00286865 159.43904114]
[193.37689209 153.16746521]
[179.75091553 146.89587402]
[170.50604248 151.29183960]
[160.15148926 149.83485413]
[152.14901733 142.76774597]
[149.30787659 132.24859619]
[135.89324951 125.53681183]
[122.47863770 118.82503510]
[109.06401825 112.11325836]
[104.08496857 114.36809540]
[98.69821167 114.68840790]
[90.40276337 127.18582916]
[82.10731506 139.68325806]
[81.39263916 158.07653809]
[65.39742279 165.28025818]
[57.30649185 177.91104126]
[49.21556091 190.54182434]
[41.12462997 203.17262268]
[33.03369904 215.80340576]
[24.94277000 228.43420410]
[16.85183907 241.06498718]
[23.86664963 263.03598022]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[4 24]
[5 23]
[37 191]
[38 190]
[39 189]
[40 188]
[41 187]
[42 186]
[43 185]
[46 183]
[47 182]
[48 181]
[58 138]
[59 137]
[60 136]
[61 135]
[64 133]
[65 132]
[66 131]
[68 129]
[69 128]
[71 126]
[72 125]
[76 121]
[77 120]
[78 119]
[80 117]
[81 116]
[83 114]
[84 113]
[86 111]
[87 110]
[88 109]
[89 108]
[90 107]
[91 105]
[92 104]
[94 102]
[95 101]
[139 179]
[140 178]
[141 177]
[142 176]
[144 172]
[145 171]
[146 170]
[147 169]
[148 167]
[149 166]
[150 164]
[151 163]
[152 162]
[153 161]
[154 160]
[155 159]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
