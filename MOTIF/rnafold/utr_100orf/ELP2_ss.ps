%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:24:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUCCGCUCCGAGGGCGGAAGUGCGCGUCUCUUGUUUGUGCGGCUGACCAGUUGGCGACAUGGUGGCACCCGUGCUGGAGACUUCUCACGUGUUUUGCUGCCCAAACCGGGUGCGGGGAGUCCUGAACUGGAGCUCUGGGCCCAGAGGACUUCUGGCCU\
) } def
/len { sequence length } bind def

/coor [
[225.58737183 300.37631226]
[230.30447388 286.13732910]
[241.01441956 275.63507080]
[255.34303284 271.19766235]
[270.11318970 273.80841064]
[259.76840210 262.94625854]
[249.42364502 252.08413696]
[239.07888794 241.22201538]
[228.62864685 230.46131897]
[218.07389832 219.80310059]
[207.51916504 209.14488220]
[196.96443176 198.48667908]
[176.66821289 194.89384460]
[171.36093140 174.16621399]
[160.20069885 164.14376831]
[149.04048157 154.12132263]
[137.88026428 144.09886169]
[126.72004700 134.07641602]
[115.55982971 124.05397034]
[101.48354340 128.60945129]
[87.01158142 125.53433990]
[76.00382996 115.64881897]
[71.39624023 101.58950806]
[74.41772461 87.10625458]
[63.25750351 77.08380127]
[52.09728622 67.06135559]
[40.93706512 57.03890228]
[29.77684593 47.01645279]
[18.61662674 36.99400330]
[4.50675058 42.71001434]
[-10.62401676 41.73694992]
[-23.77801704 34.32126236]
[-32.37253571 21.98046684]
[-34.74685287 7.19290304]
[-30.48291588 -7.09990406]
[-41.64313507 -17.12235260]
[-52.80335617 -27.14480400]
[-63.96357727 -37.16725159]
[-75.41232300 -46.85880280]
[-87.13980103 -56.21114731]
[-98.86727142 -65.56349945]
[-110.59474182 -74.91584015]
[-122.32221222 -84.26818848]
[-134.04968262 -93.62053680]
[-149.66322327 -96.17553711]
[-154.78967285 -110.16012573]
[-166.51715088 -119.51247406]
[-175.22506714 -122.43788147]
[-178.37986755 -129.16351318]
[-189.92262268 -138.74290466]
[-201.46537781 -148.32228088]
[-218.82553101 -146.37310791]
[-231.98168945 -157.34693909]
[-233.13229370 -174.10249329]
[-244.85975647 -183.45483398]
[-261.14755249 -185.36264038]
[-267.38989258 -200.52723694]
[-257.16519165 -213.34860229]
[-240.99176025 -210.63722229]
[-235.50741577 -195.18231201]
[-223.77993774 -185.82997131]
[-211.27340698 -189.05050659]
[-199.01823425 -184.39555359]
[-191.58566284 -173.36096191]
[-191.88598633 -159.86505127]
[-180.34323120 -150.28565979]
[-168.80047607 -140.70626831]
[-157.16481018 -131.23994446]
[-145.43733215 -121.88760376]
[-130.66262817 -120.00154114]
[-124.69734192 -105.34800720]
[-112.96986389 -95.99565887]
[-101.24239349 -86.64331818]
[-89.51492310 -77.29096985]
[-77.78745270 -67.93862152]
[-66.05997467 -58.58627319]
[-62.48664093 -58.63797760]
[-58.71427536 -56.92948151]
[-55.58525467 -53.38828278]
[-53.94112396 -48.32747269]
[-42.78090668 -38.30502319]
[-31.62068558 -28.28257370]
[-20.46046638 -18.26012421]
[-6.70662642 -24.03050995]
[8.25018501 -23.25383377]
[21.44058609 -16.03065300]
[30.22260666 -3.74666882]
[32.81081390 11.19281387]
[28.63907623 25.83378410]
[39.79929352 35.85623169]
[50.95951462 45.87868118]
[62.11973572 55.90113068]
[73.27995300 65.92358398]
[84.44017029 75.94602966]
[98.51645660 71.39054871]
[112.98841858 74.46566010]
[123.99617004 84.35118103]
[128.60375977 98.41049194]
[125.58227539 112.89374542]
[136.74249268 122.91619873]
[147.90270996 132.93864441]
[159.06292725 142.96109009]
[170.22315979 152.98355103]
[181.38337708 163.00599670]
[190.73637390 161.23625183]
[199.71369934 163.95811462]
[206.31185913 170.43061829]
[209.12049866 179.09129333]
[207.62265015 187.93194580]
[218.17738342 198.59014893]
[228.73211670 209.24836731]
[239.28684998 219.90658569]
[247.59342957 223.82914734]
[249.94100952 230.87724304]
[260.28576660 241.73937988]
[270.63055420 252.60150146]
[280.97531128 263.46362305]
[292.42407227 273.15518188]
[304.84506226 281.56463623]
[317.26605225 289.97409058]
[329.68704224 298.38354492]
[342.10803223 306.79296875]
[354.52905273 315.20242310]
[366.95004272 323.61187744]
[379.37103271 332.02133179]
[384.67910767 332.39459229]
[388.87115479 334.57580566]
[391.44009399 337.82391357]
[392.25289917 341.30395508]
[404.16061401 350.42572021]
[416.06832886 359.54745483]
[427.97604370 368.66918945]
[436.73937988 371.42413330]
[440.02481079 378.08691406]
[451.75228882 387.43927002]
[463.47976685 396.79162598]
[479.63311768 401.93994141]
[479.15771484 418.88720703]
[462.74111938 423.12185669]
[454.12741089 408.51910400]
[442.39993286 399.16674805]
[430.67248535 389.81439209]
[418.85430908 380.57690430]
[406.94659424 371.45516968]
[395.03887939 362.33343506]
[383.13116455 353.21166992]
[370.96157837 344.44232178]
[358.54058838 336.03286743]
[346.11959839 327.62344360]
[333.69857788 319.21398926]
[321.27758789 310.80453491]
[308.85659790 302.39508057]
[296.43560791 293.98562622]
[284.01461792 285.57617188]
[289.02816772 299.71350098]
[287.01690674 314.57806396]
[278.42663574 326.87469482]
[265.16165161 333.87756348]
[250.16247559 334.03427124]
[236.75407410 327.31008911]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 117]
[6 116]
[7 115]
[8 114]
[9 112]
[10 111]
[11 110]
[12 109]
[14 104]
[15 103]
[16 102]
[17 101]
[18 100]
[19 99]
[24 94]
[25 93]
[26 92]
[27 91]
[28 90]
[29 89]
[35 83]
[36 82]
[37 81]
[38 80]
[39 76]
[40 75]
[41 74]
[42 73]
[43 72]
[44 71]
[46 69]
[47 68]
[49 67]
[50 66]
[51 65]
[54 61]
[55 60]
[118 154]
[119 153]
[120 152]
[121 151]
[122 150]
[123 149]
[124 148]
[125 147]
[129 146]
[130 145]
[131 144]
[132 143]
[134 142]
[135 141]
[136 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
