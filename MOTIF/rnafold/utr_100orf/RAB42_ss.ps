%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGGCGGACGCGGCCAUGGAGGCCGAGGGCUGCCGCUACCAAUUUCGGGUCGCGCUGCUGGGGGACGCGGCGGUGGGCAAGACGUCGCUGCUGCGGAGCUACGUGGCAGGCGCGC\
) } def
/len { sequence length } bind def

/coor [
[91.83575439 124.16633606]
[81.67425537 115.87463379]
[67.85457611 121.70700073]
[54.03489685 127.53936005]
[40.21521759 133.37171936]
[26.39553833 139.20408630]
[12.57585812 145.03645325]
[-1.24382186 150.86880493]
[-15.06350136 156.70117188]
[-21.08451653 171.06729126]
[-35.18272018 176.78526306]
[-48.84150696 170.95660400]
[-62.66118622 176.78897095]
[-76.15087128 183.34858704]
[-89.27231598 190.61685181]
[-102.39376068 197.88511658]
[-115.51520538 205.15336609]
[-121.30606842 220.11483765]
[-136.65646362 224.77799988]
[-149.79087830 215.56568909]
[-150.63371277 199.54478455]
[-138.53842163 189.00517273]
[-122.78347015 192.03192139]
[-109.66202545 184.76365662]
[-96.54058075 177.49540710]
[-83.41912842 170.22714233]
[-82.55113220 167.43267822]
[-80.45188904 164.83871460]
[-77.20156860 162.94422913]
[-73.06980133 162.20576477]
[-68.49354553 162.96929932]
[-54.67387009 157.13693237]
[-49.32104874 143.28475952]
[-35.38901138 137.17303467]
[-20.89586449 142.88150024]
[-7.07618427 137.04913330]
[6.74349499 131.21676636]
[20.56317520 125.38440704]
[34.38285446 119.55204773]
[48.20253372 113.71968079]
[62.02221298 107.88732147]
[75.84189606 102.05495453]
[76.57099152 90.56988525]
[82.66840363 80.26396179]
[93.16971588 73.59292603]
[106.01850891 72.36133575]
[118.46534729 77.25527191]
[123.55392456 63.14476395]
[117.08220673 48.97597504]
[122.44376373 34.73840714]
[135.99142456 28.65592766]
[141.08000183 14.54542351]
[146.16859436 0.43491992]
[146.14915466 -8.83096218]
[151.58500671 -13.98042297]
[157.04742432 -27.95046616]
[162.50982666 -41.92050934]
[167.97224426 -55.89055252]
[173.43464661 -69.86059570]
[178.89704895 -83.83063507]
[184.35946655 -97.80068207]
[189.82186890 -111.77072144]
[182.16744995 -125.40683746]
[185.11972046 -140.76321411]
[197.28472900 -150.58901978]
[212.91853333 -150.24482727]
[224.63931274 -139.89314270]
[226.91288757 -124.42172241]
[218.66572571 -111.13568878]
[203.79191589 -106.30831146]
[198.32951355 -92.33827209]
[192.86709595 -78.36822510]
[187.40469360 -64.39818573]
[181.94227600 -50.42814255]
[176.47987366 -36.45809937]
[171.01747131 -22.48805809]
[165.55505371 -8.51801491]
[160.27909851 5.52350283]
[155.19050598 19.63400650]
[150.10192871 33.74451065]
[156.64926147 47.07372284]
[151.68972778 61.45627213]
[137.66442871 68.23334503]
[132.57585144 82.34384918]
[136.90623474 96.70518494]
[148.94689941 105.65069580]
[160.98757935 114.59620667]
[176.42141724 112.49044800]
[188.50494385 121.73399353]
[190.41734314 136.46078491]
[202.45802307 145.40629578]
[214.49868774 154.35180664]
[226.53936768 163.29731750]
[238.58004761 172.24282837]
[250.62071228 181.18833923]
[262.66140747 190.13385010]
[274.70205688 199.07936096]
[290.29867554 196.52572632]
[303.08392334 205.81623840]
[305.47250366 221.43898010]
[296.04733276 234.12527466]
[280.40020752 236.34855652]
[267.81427002 226.78979492]
[265.75656128 211.12002563]
[253.71588135 202.17451477]
[241.67520142 193.22900391]
[229.63453674 184.28349304]
[217.59385681 175.33798218]
[205.55317688 166.39247131]
[193.51251221 157.44697571]
[181.47183228 148.50146484]
[166.81999207 150.92199707]
[154.48159790 142.02149963]
[152.04206848 126.63687897]
[140.00138855 117.69136810]
[127.96071625 108.74585724]
[118.83025360 120.76813507]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 42]
[3 41]
[4 40]
[5 39]
[6 38]
[7 37]
[8 36]
[9 35]
[12 32]
[13 31]
[14 26]
[15 25]
[16 24]
[17 23]
[47 84]
[48 83]
[51 80]
[52 79]
[53 78]
[55 77]
[56 76]
[57 75]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
[85 116]
[86 115]
[87 114]
[90 111]
[91 110]
[92 109]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
