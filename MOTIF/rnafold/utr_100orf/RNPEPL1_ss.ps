%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:37:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCGCGCAGUGCUGCUGCCGCCAGGCGCCCGGCGCCGAGGCCGCGCCCGUCCGCCCGCCGCCCGAGCCGCCGCCCGCCCUGGACGUGGCCUCGGCCU\
) } def
/len { sequence length } bind def

/coor [
[89.04798889 188.33276367]
[81.53354645 173.75659180]
[90.62608337 160.10896301]
[91.09258270 145.11621094]
[91.55908203 130.12347412]
[92.02558136 115.13072205]
[78.84517670 107.96992493]
[66.52084351 116.52040863]
[54.19651031 125.07089233]
[42.00664139 133.81201172]
[29.95418549 142.74163818]
[17.90173149 151.67127991]
[5.84927702 160.60090637]
[-3.27797794 174.88830566]
[-19.53368759 170.07289124]
[-19.40649033 153.11941528]
[-3.08035588 148.54846191]
[8.97209835 139.61882019]
[21.02455330 130.68919373]
[33.07700729 121.75955963]
[36.64025879 115.13168335]
[45.64602661 112.74655914]
[57.97035980 104.19607544]
[70.29469299 95.64559174]
[69.82842255 88.16010284]
[68.89587402 73.18911743]
[68.42960358 65.70362091]
[55.13943481 58.74867249]
[41.84926605 51.79372025]
[28.55909348 44.83876419]
[15.26892376 37.88381195]
[-1.56819487 35.89691162]
[-4.31991959 19.16776276]
[10.99369240 11.89248848]
[22.22387695 24.59364319]
[35.51404572 31.54859543]
[48.80421829 38.50354767]
[62.09438705 45.45849991]
[75.38455963 52.41345596]
[107.42115784 89.69770813]
[120.48860168 82.33279419]
[133.55604553 74.96788025]
[146.62348938 67.60297394]
[159.69093323 60.23806000]
[172.75837708 52.87314987]
[185.82582092 45.50823593]
[198.89326477 38.14332581]
[211.96070862 30.77841568]
[220.18392944 17.26216316]
[235.07043457 17.75359726]
[248.13787842 10.38868523]
[261.20532227 3.02377439]
[263.34555054 -10.38123703]
[272.72039795 -19.92655945]
[285.69940186 -22.23924065]
[297.44039917 -16.68671036]
[310.73059082 -23.64166260]
[315.54324341 -38.45638275]
[329.12045288 -45.32037354]
[343.21435547 -40.64093018]
[356.50454712 -47.59588242]
[365.14413452 -60.84985733]
[380.00814819 -59.89569092]
[393.29830933 -66.85064697]
[396.47299194 -82.16259003]
[408.77920532 -91.81095886]
[424.40634155 -91.24008942]
[435.97579956 -80.71952820]
[438.02478027 -65.21675873]
[429.58581543 -52.05172348]
[414.64355469 -47.44054413]
[400.25326538 -53.56047440]
[386.96310425 -46.60552216]
[379.27410889 -33.84901428]
[363.45950317 -34.30571365]
[350.16931152 -27.35075951]
[345.98007202 -13.10345364]
[332.60101318 -5.86081839]
[317.68554688 -10.35149288]
[304.39535522 -3.39653945]
[300.13470459 12.78944874]
[285.23483276 21.12446976]
[268.57022095 16.09121895]
[255.50279236 23.45612907]
[242.43534851 30.82104111]
[235.14678955 43.81050491]
[219.32562256 43.84585953]
[206.25817871 51.21076965]
[193.19073486 58.57567978]
[180.12329102 65.94058990]
[167.05584717 73.30550385]
[153.98840332 80.67041779]
[140.92095947 88.03532410]
[127.85350800 95.40023804]
[114.78606415 102.76515198]
[107.01832581 115.59722137]
[106.55182648 130.58996582]
[106.08532715 145.58271790]
[105.61882782 160.57545471]
[113.84531403 174.76196289]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 99]
[4 98]
[5 97]
[6 96]
[7 24]
[8 23]
[9 22]
[10 20]
[11 19]
[12 18]
[13 17]
[27 39]
[28 38]
[29 37]
[30 36]
[31 35]
[40 95]
[41 94]
[42 93]
[43 92]
[44 91]
[45 90]
[46 89]
[47 88]
[48 87]
[50 85]
[51 84]
[52 83]
[56 80]
[57 79]
[60 76]
[61 75]
[63 73]
[64 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
