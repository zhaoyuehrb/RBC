%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUUUGGGCUGUUCGGCCUCUGGAGAACCUUCGACAGUGUGGUCUUCUACCUGACGCUGAUCGUGGGCCUCGGGGGACCGGUAGGUAACGGGCUGGUGC\
) } def
/len { sequence length } bind def

/coor [
[117.98457336 408.44265747]
[122.67853546 393.74673462]
[134.58711243 383.93911743]
[132.72563171 369.05505371]
[130.86413574 354.17102051]
[129.00265503 339.28695679]
[127.14118195 324.40292358]
[115.79575348 311.11447144]
[122.85668182 294.19729614]
[120.53320312 279.37835693]
[118.20973206 264.55938721]
[106.05958557 256.02069092]
[103.49214935 241.02525330]
[112.53070831 228.33895874]
[110.20723724 213.52000427]
[107.88376617 198.70103455]
[105.56029510 183.88208008]
[95.94494629 172.50691223]
[101.45124054 157.67481995]
[99.12776947 142.85586548]
[96.80429077 128.03689575]
[94.48081970 113.21794128]
[85.84893799 102.21875000]
[90.70021820 89.10552979]
[88.37674713 74.28656769]
[86.05327606 59.46761322]
[73.56571198 50.15640640]
[71.42048645 35.09477997]
[80.37425232 23.24718094]
[78.05078125 8.42822456]
[68.03285980 0.12171234]
[66.48488617 -12.39341259]
[73.70118713 -22.23937607]
[71.83970642 -37.12342453]
[69.97822571 -52.00747299]
[67.88549805 -66.86077118]
[65.56201935 -81.67972565]
[63.23854828 -96.49868774]
[60.91507721 -111.31764221]
[58.59160614 -126.13659668]
[56.26813126 -140.95555115]
[53.48491669 -155.69508362]
[50.24464798 -170.34092712]
[47.00437927 -184.98677063]
[34.30506134 -194.79017639]
[34.19586182 -210.83285522]
[46.76054764 -220.80824280]
[62.36056900 -217.06405640]
[69.02892303 -202.47253418]
[61.65022278 -188.22703552]
[64.89048767 -173.58119202]
[68.13076019 -158.93534851]
[71.75453186 -155.57991028]
[73.19520569 -149.84979248]
[71.08708954 -143.27902222]
[73.41056061 -128.46006775]
[75.73403168 -113.64111328]
[78.05750275 -98.82215881]
[80.38098145 -84.00319672]
[82.70445251 -69.18424225]
[86.92467499 -62.95405960]
[84.86227417 -53.86895370]
[86.72375488 -38.98490524]
[88.58523560 -24.10085678]
[99.93066406 -10.81241131]
[92.86973572 6.10475159]
[95.19320679 20.92370796]
[107.34336090 29.46241188]
[109.91078949 44.45784378]
[100.87223053 57.14414215]
[103.19570923 71.96309662]
[105.51918030 86.78205872]
[114.15106201 97.78125000]
[109.29978180 110.89447021]
[111.62325287 125.71343231]
[113.94672394 140.53237915]
[116.27019501 155.35134888]
[126.05173492 167.78645325]
[120.37924957 181.55860901]
[122.70272064 196.37756348]
[125.02619171 211.19651794]
[127.34967041 226.01548767]
[139.83723450 235.32669067]
[141.98245239 250.38832092]
[133.02868652 262.23590088]
[135.35215759 277.05487061]
[137.67562866 291.87384033]
[147.69355774 300.18032837]
[149.24153137 312.69546509]
[142.02522278 322.54144287]
[143.88670349 337.42547607]
[145.74818420 352.30953979]
[147.60966492 367.19357300]
[149.47116089 382.07760620]
[163.42834473 388.65032959]
[171.59701538 401.73757935]
[171.37059021 417.16329956]
[162.82131958 430.00515747]
[148.67724609 436.16537476]
[133.45167542 433.67828369]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 94]
[4 93]
[5 92]
[6 91]
[7 90]
[9 87]
[10 86]
[11 85]
[14 82]
[15 81]
[16 80]
[17 79]
[19 77]
[20 76]
[21 75]
[22 74]
[24 72]
[25 71]
[26 70]
[29 67]
[30 66]
[33 64]
[34 63]
[35 62]
[36 60]
[37 59]
[38 58]
[39 57]
[40 56]
[41 55]
[42 52]
[43 51]
[44 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
