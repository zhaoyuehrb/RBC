%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCAUCUUCUGCAGAGCUGGACUUCAACCUGCAGGCUCUUCUGGAGCAGCUCAGCCAGGAUGAGUUGAGCAAGUUCAAGUCUCUGAUCAGAACAAUCU\
) } def
/len { sequence length } bind def

/coor [
[97.55414581 449.82153320]
[82.83753967 446.10858154]
[70.45823669 437.32693481]
[62.09045029 424.66421509]
[58.86584473 409.83294678]
[61.22052002 394.83895874]
[68.83603668 381.71002197]
[80.68244171 372.22177124]
[95.15762329 367.65737915]
[96.09016418 352.68640137]
[97.02271271 337.71542358]
[97.95525360 322.74444580]
[98.88780212 307.77343750]
[99.35430145 292.78070068]
[99.35430145 277.78070068]
[99.35430145 262.78070068]
[99.35430145 247.78070068]
[99.35430145 232.78070068]
[99.12102509 217.78251648]
[98.65452576 202.78977966]
[97.95491791 187.80610657]
[97.02236938 172.83511353]
[96.08982849 157.86413574]
[95.15728760 142.89314270]
[94.22473907 127.92216492]
[93.29219818 112.95117950]
[87.89400482 126.94616699]
[76.42950439 136.61907959]
[61.72560883 139.58477783]
[47.40799332 135.11198425]
[37.00709152 124.30359650]
[33.08755493 109.82474518]
[36.61586380 95.24561310]
[46.72200394 84.16112518]
[60.91400909 79.30448151]
[75.69242096 81.87323761]
[87.41245270 91.23301697]
[80.66502380 77.83629608]
[73.91760254 64.43956757]
[67.17017365 51.04284286]
[60.42274857 37.64611816]
[47.89778137 26.21976662]
[55.41033173 11.02114964]
[72.09465790 14.03271008]
[73.81947327 30.89869118]
[80.56690216 44.29541779]
[87.31432343 57.69214249]
[94.06175232 71.08886719]
[100.80917358 84.48559570]
[101.06916809 86.37014008]
[101.23117828 88.25639343]
[110.71322632 76.63353729]
[120.19527435 65.01068115]
[129.67732239 53.38782501]
[139.15936279 41.76496887]
[148.64141846 30.14211082]
[158.12345886 18.51925468]
[167.42359924 6.75034046]
[176.53959656 -5.16178417]
[181.36390686 -21.41485786]
[198.31730652 -21.27838326]
[202.87933350 -4.94974995]
[188.45172119 3.95420647]
[179.33572388 15.86633110]
[177.74247742 23.22072220]
[169.74632263 28.00130081]
[160.26426697 39.62415695]
[150.78222656 51.24701309]
[141.30017090 62.86986923]
[131.81813049 74.49272919]
[122.33608246 86.11558533]
[112.85403442 97.73844147]
[108.26317596 112.01863861]
[109.19572449 126.98962402]
[110.12826538 141.96060181]
[111.06081390 156.93159485]
[111.99335480 171.90257263]
[112.92590332 186.87355042]
[116.63821411 195.41822815]
[113.64727020 202.32327271]
[114.11376190 217.31602478]
[117.55854034 225.97201538]
[114.35430145 232.78070068]
[114.35430145 247.78070068]
[114.35430145 262.78070068]
[114.35430145 277.78070068]
[114.35430145 292.78070068]
[117.45477295 298.94561768]
[116.91906738 304.82974243]
[113.85878754 308.70599365]
[112.92623901 323.67697144]
[111.99369812 338.64797974]
[111.06114960 353.61895752]
[110.12860870 368.58993530]
[123.92545319 374.91537476]
[134.50280762 385.80041504]
[140.43017578 399.77291870]
[140.90591431 414.94323730]
[135.86569214 429.25967407]
[125.99115753 440.78607178]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 94]
[10 93]
[11 92]
[12 91]
[13 90]
[14 87]
[15 86]
[16 85]
[17 84]
[18 83]
[19 81]
[20 80]
[21 78]
[22 77]
[23 76]
[24 75]
[25 74]
[26 73]
[37 49]
[38 48]
[39 47]
[40 46]
[41 45]
[51 72]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[58 64]
[59 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
