%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:08:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGGAUAGCAAUAACCUGUGAAAAUGCUCCCCCGGCUAAUUUGUAUCAAUGAUUAUGAACAACAUGCUAAAUCAGUACUUCCAAAGUCUAUAUAUGACUAUUACAGGUCUGGGGCAAAUGAUG\
) } def
/len { sequence length } bind def

/coor [
[69.25033569 132.29347229]
[57.22683334 141.26203918]
[45.20332718 150.23062134]
[33.17982483 159.19918823]
[21.15631866 168.16777039]
[18.74628258 183.55702209]
[6.42497730 192.48115540]
[-8.23148251 190.08871460]
[-20.25498772 199.05729675]
[-32.27849197 208.02586365]
[-44.30199814 216.99444580]
[-40.53403854 231.72097778]
[-42.69345093 246.76776123]
[-50.45093918 259.84024048]
[-62.62354279 268.94497681]
[-77.35502625 272.69354248]
[-92.39894104 270.51434326]
[-105.46121216 262.73968506]
[-114.54992676 250.55509949]
[-118.27912903 235.81871033]
[-116.08013153 220.77766418]
[-108.28828430 207.72563171]
[-96.09176636 198.65295410]
[-81.35047150 194.94314575]
[-66.31233978 197.16192627]
[-53.27057266 204.97093201]
[-41.24706650 196.00236511]
[-29.22356224 187.03378296]
[-17.20005798 178.06521606]
[-15.31589127 163.33479309]
[-3.25010824 154.06809998]
[12.18774414 156.14425659]
[24.21125031 147.17568970]
[36.23475266 138.20710754]
[48.25825882 129.23854065]
[60.28176498 120.26995850]
[56.72260284 110.74600220]
[55.41334915 100.66337585]
[56.42206192 90.54626465]
[59.69630814 80.92063904]
[65.06586456 72.28690338]
[72.25157166 65.09391785]
[65.02526855 51.94932175]
[57.79896164 38.80472183]
[50.57265854 25.66012001]
[43.61755371 19.56310272]
[43.33465195 12.09314442]
[36.44095230 -1.22890258]
[29.54725647 -14.55094910]
[14.25009060 -17.79606056]
[4.65847635 -30.14656448]
[5.30127954 -45.77093124]
[15.87498856 -57.29180908]
[31.38702202 -59.26939774]
[44.51306915 -50.76993561]
[49.05541611 -35.80661011]
[42.86930466 -21.44464684]
[49.76300049 -8.12260056]
[56.65670013 5.19944620]
[63.71725845 18.43381500]
[70.94356537 31.57841492]
[78.16986847 44.72301483]
[85.39617157 57.86761475]
[109.17028809 56.36153793]
[130.32728577 67.30954742]
[142.82908630 87.58715820]
[157.73326111 85.89431763]
[172.63743591 84.20146942]
[187.54159546 82.50862122]
[191.91220093 79.25936127]
[196.62200928 78.19852448]
[200.75158691 79.07350159]
[203.62648010 81.29354858]
[218.61581421 80.72819519]
[233.60516357 80.16284180]
[248.59449768 79.59748840]
[259.30911255 68.29106903]
[274.51846313 67.93125153]
[285.23138428 78.21566010]
[300.22073364 77.65030670]
[306.37908936 63.72780609]
[317.92456055 53.89982224]
[332.53244019 50.07489014]
[347.29177856 52.95985031]
[359.28540039 61.92991257]
[366.16656494 75.16303253]
[381.15588379 74.59767914]
[396.14523315 74.03232574]
[411.13458252 73.46697235]
[420.58407593 61.00738144]
[435.84304810 57.58721924]
[449.70669556 64.82137299]
[455.62902832 79.29410553]
[450.81372070 94.17182922]
[437.53436279 102.42974091]
[422.06109619 100.16870117]
[411.69992065 88.45631409]
[396.71060181 89.02166748]
[381.72125244 89.58702087]
[366.73190308 90.15237427]
[360.86712646 103.86622620]
[349.58325195 113.71424866]
[335.08316040 117.70278168]
[320.22866821 114.98908234]
[307.97567749 106.05870056]
[300.78610229 92.63964844]
[285.79675293 93.20500183]
[275.88894653 104.26715851]
[260.69567871 105.05403900]
[249.15985107 94.58683014]
[234.17051697 95.15218353]
[219.18116760 95.71753693]
[204.19183350 96.28289032]
[189.23445129 97.41279602]
[174.33027649 99.10563660]
[159.42610168 100.79848480]
[144.52194214 102.49133301]
[142.48280334 113.55068207]
[137.74166870 123.74817657]
[130.60008240 132.43524170]
[121.51225281 139.05934143]
[111.05620575 143.19918823]
[99.89694977 144.59146118]
[88.74425507 143.14762878]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 33]
[5 32]
[8 29]
[9 28]
[10 27]
[11 26]
[42 63]
[43 62]
[44 61]
[45 60]
[47 59]
[48 58]
[49 57]
[66 117]
[67 116]
[68 115]
[69 114]
[73 113]
[74 112]
[75 111]
[76 110]
[79 107]
[80 106]
[86 100]
[87 99]
[88 98]
[89 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
