%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGGAAGAGAUGGGCCUGCUGGAGCGGAAGUGACGCUCCCGGCGGCUGUGGCGGCGGCUGCGGGAGAAGGAGGAGGAGGAGCCGGAGGAAGAGGGCUG\
) } def
/len { sequence length } bind def

/coor [
[124.36022949 280.66079712]
[116.96508026 279.78897095]
[109.82209778 277.66470337]
[103.14192963 274.34851074]
[97.12197876 269.93618774]
[91.94047546 264.55590820]
[87.75126648 258.36453247]
[84.67922974 251.54310608]
[82.81654358 244.29141235]
[82.21990967 236.82229614]
[82.90886688 229.35528564]
[84.86513519 222.11019897]
[88.03308868 215.30065918]
[92.32135010 209.12782288]
[97.60540771 203.77438354]
[103.73125458 199.39920044]
[110.51985931 196.13258362]
[107.73664093 181.39306641]
[104.95343018 166.65353394]
[94.98896790 155.58290100]
[100.03131866 140.58673096]
[97.24810791 125.84720612]
[74.49494934 114.16567230]
[70.87538910 85.90394592]
[57.17853546 79.78869629]
[43.48168945 73.67343903]
[29.78483963 67.55818176]
[16.08798981 61.44293213]
[2.10601139 68.44566345]
[-13.09401608 64.77235413]
[-22.33510399 52.15743256]
[-21.25389099 36.55727386]
[-10.36089611 25.33779526]
[5.20054340 23.79649544]
[18.08279228 32.66112518]
[22.20324516 47.74608231]
[35.90009308 53.86133575]
[49.59694290 59.97658920]
[63.29379272 66.09184265]
[76.99063873 72.20709991]
[90.28080750 65.25214386]
[93.06402588 50.51261902]
[88.02167511 35.51644135]
[97.98613739 24.44581604]
[100.76934814 9.70628738]
[103.55256653 -5.03324175]
[106.33578491 -19.77276993]
[109.11899567 -34.51229858]
[111.90221405 -49.25182724]
[114.68543243 -63.99135590]
[117.46865082 -78.73088837]
[111.53891754 -94.02043915]
[122.02465820 -106.62921143]
[138.13903809 -103.58638763]
[143.30496216 -88.02215576]
[132.20817566 -75.94766998]
[129.42495728 -61.20814133]
[126.64174652 -46.46861267]
[123.85852814 -31.72908211]
[121.07530975 -16.98955345]
[118.29209900 -2.25002527]
[115.50888062 12.48950291]
[112.72566223 27.22903252]
[117.96708679 41.17093658]
[107.80355835 53.29583359]
[105.02033997 68.03536224]
[115.45761871 72.61379242]
[123.37923431 80.35294342]
[127.92529297 90.09651184]
[128.71609497 100.49580383]
[125.87527466 110.19513702]
[119.98577881 118.00841522]
[111.98763275 123.06398773]
[114.77085114 137.80351257]
[124.93438721 149.92840576]
[119.69295502 163.87031555]
[122.47617340 178.60984802]
[125.25939178 193.34938049]
[149.44821167 200.36238098]
[165.73240662 219.45303345]
[168.82078552 244.26138306]
[157.79620361 266.59591675]
[166.91218567 278.50805664]
[176.02818298 290.42016602]
[185.14416504 302.33230591]
[200.36367798 300.26776123]
[214.57032776 306.10443115]
[223.94261169 318.27224731]
[225.95944214 333.49813843]
[220.07827759 347.68643188]
[207.88113403 357.02053833]
[192.64900208 358.98962402]
[178.47921753 353.06402588]
[169.18338013 340.83767700]
[167.26205444 325.59942627]
[173.23204041 311.44830322]
[164.11605835 299.53616333]
[155.00006104 287.62405396]
[145.88407898 275.71191406]
[139.03527832 278.58984375]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 78]
[18 77]
[19 76]
[21 74]
[22 73]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[41 66]
[42 65]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
[51 56]
[82 99]
[83 98]
[84 97]
[85 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
