%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:33:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUAAGAGGCAGACAGAUACAUUGUUCUUCACUGGUCAGCUGAAAGUCAAUUCAUCAUCAGUGAUAUUCAAAAAUCACAAGUCUUUGCUGGCAUGCCAAGUGCAAUAGAGGCAAUAUAUAUUAUUUUAAUUGCUGGUGAAUUGACCAUAGGGAUUUGGGGAAAUGGAUUCAUUGUACUAGUUAACUGCAUUG\
) } def
/len { sequence length } bind def

/coor [
[124.69408417 864.40753174]
[110.22730255 869.07452393]
[95.07617188 867.84503174]
[81.55112457 860.90661621]
[71.71463013 849.31732178]
[67.06668854 834.84442139]
[68.31607819 819.69494629]
[75.27227020 806.17901611]
[86.87450409 796.35778809]
[101.35351562 791.72888184]
[102.56671906 776.77801514]
[103.77992249 761.82714844]
[104.99313354 746.87628174]
[105.84284973 731.90039062]
[106.32858276 716.90826416]
[106.69290161 701.91265869]
[106.93579865 686.91467285]
[103.89631653 680.16613770]
[107.30602264 671.67626953]
[107.79174805 656.68408203]
[108.27748108 641.69195557]
[108.76320648 626.69982910]
[101.44210052 613.72869873]
[109.62221527 600.18634033]
[110.10794830 585.19415283]
[109.74362183 570.19860840]
[108.53041840 555.24774170]
[107.31720734 540.29687500]
[106.10400391 525.34600830]
[104.89079285 510.39517212]
[103.67758942 495.44430542]
[102.46437836 480.49346924]
[99.45906067 476.76504517]
[98.77339935 471.10546875]
[101.46199036 465.04013062]
[100.73355865 450.05783081]
[100.00511932 435.07553101]
[99.27668762 420.09323120]
[90.52682495 411.72769165]
[89.80531311 399.24203491]
[98.04446411 389.30624390]
[97.55873871 374.31411743]
[97.07300568 359.32199097]
[86.52550507 351.90625000]
[82.11337280 339.58416748]
[85.66028595 326.78363037]
[96.08609009 318.24270630]
[95.84319305 303.24465942]
[95.60029602 288.24664307]
[95.35739899 273.24859619]
[95.11450195 258.25057983]
[94.87161255 243.25253296]
[94.62871552 228.25450134]
[94.38581848 213.25646973]
[94.14292145 198.25843811]
[93.90002441 183.26040649]
[93.65712738 168.26237488]
[93.41423035 153.26434326]
[85.47185516 140.66403198]
[92.98467255 126.74037170]
[92.74177551 111.74234009]
[86.39027405 98.15342712]
[75.03958130 88.34722137]
[63.68888855 78.54100800]
[52.33819580 68.73479462]
[40.98750687 58.92858505]
[25.91014290 62.59638596]
[11.56924438 56.67031860]
[3.47917891 43.42907715]
[4.75074100 27.96418953]
[14.89498901 16.22221947]
[30.01125336 12.71819401]
[44.28702164 18.79948425]
[52.23296738 32.12770844]
[50.79371643 47.57789230]
[62.14440918 57.38410187]
[73.49510193 67.19031525]
[84.84579468 76.99652863]
[96.19648743 86.80273438]
[103.04147339 83.73742676]
[116.73145294 77.60680389]
[123.57643890 74.54148865]
[123.81933594 59.54345703]
[124.06223297 44.54542542]
[124.30513000 29.54739189]
[124.54802704 14.54935837]
[124.79091644 -0.44867456]
[125.03381348 -15.44670773]
[114.60800934 -23.98761940]
[111.06109619 -36.78817368]
[115.47323608 -49.11026382]
[126.02073669 -56.52598953]
[126.50646210 -71.51812744]
[126.99219513 -86.51025391]
[127.47792053 -101.50238800]
[117.60033417 -114.14410400]
[121.46544647 -129.71459961]
[136.10827637 -136.26953125]
[150.29609680 -128.78051758]
[153.14521790 -112.99248505]
[142.47004700 -101.01666260]
[141.98432922 -86.02452850]
[141.49859619 -71.03239441]
[141.01286316 -56.04026031]
[153.02574158 -44.27957153]
[152.81869507 -27.13182831]
[140.03184509 -15.20381165]
[139.78895569 -0.20577854]
[139.54605103 14.79225445]
[139.30316162 29.79028893]
[139.06027222 44.78832245]
[138.81736755 59.78635406]
[138.57447815 74.78438568]
[145.97807312 61.73882675]
[160.51405334 58.03676605]
[175.50477600 58.56450653]
[189.74443054 63.27959442]
[202.08766174 71.80277252]
[211.54164124 83.44847870]
[217.34591675 97.27997589]
[219.03361511 112.18473053]
[216.46900940 126.96386719]
[209.85836792 140.42861938]
[199.73342896 151.49592590]
[186.90859985 159.27561951]
[172.41543579 163.14190674]
[157.41970825 162.78381348]
[143.12760925 158.23013306]
[130.68873596 149.84716797]
[121.10359955 138.30917358]
[115.14340973 124.54500580]
[107.73980713 111.49944305]
[107.98270416 126.49747467]
[115.94245911 140.17054749]
[108.41226959 153.02143860]
[108.65515900 168.01947021]
[108.89805603 183.01750183]
[109.14095306 198.01553345]
[109.38385010 213.01358032]
[109.62674713 228.01161194]
[109.86964417 243.00964355]
[110.11254120 258.00765991]
[110.35543060 273.00570679]
[110.59832764 288.00375366]
[110.84122467 303.00177002]
[111.08412170 317.99981689]
[123.87097168 329.92782593]
[124.07801056 347.07556152]
[112.06513977 358.83624268]
[112.55087280 373.82839966]
[113.03659821 388.82052612]
[123.11711121 404.22253418]
[114.25899506 419.36480713]
[114.98742676 434.34710693]
[115.71585846 449.32940674]
[116.44429016 464.31170654]
[117.41523743 479.28024292]
[118.62844849 494.23110962]
[119.84165192 509.18197632]
[121.05485535 524.13281250]
[122.26806641 539.08367920]
[123.48126984 554.03454590]
[124.69448090 568.98541260]
[134.42312622 557.56817627]
[149.19128418 554.94104004]
[162.26049805 562.30285645]
[167.66751099 576.29443359]
[162.94520569 590.53167725]
[150.24827576 598.51843262]
[135.37011719 596.61041260]
[125.10008240 585.67993164]
[124.61434937 600.67205811]
[131.90071106 614.71551514]
[123.75534058 627.18554688]
[123.26961517 642.17773438]
[122.78388214 657.16986084]
[122.29815674 672.16198730]
[121.93383026 687.15753174]
[121.69093323 702.15557861]
[124.68432617 710.80102539]
[121.32070923 717.39398193]
[120.83498383 732.38610840]
[123.31345367 737.01239014]
[123.71916962 741.66058350]
[122.39314270 745.53436279]
[119.94399261 748.08953857]
[118.73078156 763.04034424]
[117.51757812 777.99121094]
[116.30436707 792.94207764]
[129.84762573 799.84490967]
[139.71456909 811.40826416]
[144.40057373 825.86889648]
[143.19105530 841.02160645]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 189]
[11 188]
[12 187]
[13 186]
[14 182]
[15 181]
[16 179]
[17 178]
[19 177]
[20 176]
[21 175]
[22 174]
[24 172]
[25 171]
[26 163]
[27 162]
[28 161]
[29 160]
[30 159]
[31 158]
[32 157]
[35 156]
[36 155]
[37 154]
[38 153]
[41 151]
[42 150]
[43 149]
[47 146]
[48 145]
[49 144]
[50 143]
[51 142]
[52 141]
[53 140]
[54 139]
[55 138]
[56 137]
[57 136]
[58 135]
[60 133]
[61 132]
[62 79]
[63 78]
[64 77]
[65 76]
[66 75]
[82 113]
[83 112]
[84 111]
[85 110]
[86 109]
[87 108]
[88 107]
[92 104]
[93 103]
[94 102]
[95 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
