%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:03:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACACCAUGACCCACUGUUGCUCCCCUUGCUGUCAGCCUACCUGCUGCAGGACCACCUGCUGCAGGACCACCUGCUGGAAGCCCACCACUGUGACCACCUGCAGCA\
) } def
/len { sequence length } bind def

/coor [
[81.67725372 235.69818115]
[83.40517426 250.74122620]
[80.15257263 265.52969360]
[72.27226257 278.45950317]
[60.61903763 288.12805176]
[46.45695877 293.48663330]
[31.32221985 293.95391846]
[16.85652351 289.47930908]
[4.62900066 280.54809570]
[-4.03399801 268.12911987]
[-8.19277573 253.56945801]
[-7.39621830 238.44848633]
[-1.73073196 224.40635681]
[8.18913460 212.96630859]
[21.28734970 205.36923218]
[36.14311218 202.43922424]
[51.14498901 204.49409485]
[57.87697601 191.08959961]
[64.60896301 177.68511963]
[71.34095001 164.28062439]
[78.07293701 150.87612915]
[84.80492401 137.47164917]
[74.17255402 129.59086609]
[66.93625641 118.96865082]
[63.69465637 106.92613983]
[64.56800842 94.86811829]
[69.21074677 84.11981201]
[76.87660980 75.78125763]
[86.52642822 70.61521912]
[96.96370697 68.98014832]
[99.13768768 54.13852310]
[101.31166077 39.29689789]
[95.65614319 24.52105331]
[105.15633392 13.04954147]
[107.33031464 -1.79208362]
[109.50428772 -16.63370895]
[111.67826843 -31.47533226]
[113.85224915 -46.31695557]
[98.86302185 -59.25433350]
[94.51180267 -78.42695618]
[102.33564758 -96.31045532]
[119.12666321 -105.98737335]
[119.56292725 -120.98102570]
[119.99919891 -135.97468567]
[120.43547058 -150.96833801]
[120.87174225 -165.96199036]
[113.53909302 -179.98135376]
[121.64328766 -192.47821045]
[122.07955933 -207.47186279]
[122.51583099 -222.46551514]
[122.95209503 -237.45916748]
[123.38836670 -252.45281982]
[115.13330078 -266.62271118]
[123.51100159 -280.72045898]
[139.90321350 -280.24349976]
[147.44703674 -265.68249512]
[138.38201904 -252.01655579]
[137.94575500 -237.02290344]
[137.50947571 -222.02925110]
[137.07321167 -207.03559875]
[136.63694763 -192.04193115]
[144.00079346 -179.09501648]
[135.86540222 -165.52571106]
[135.42912292 -150.53205872]
[134.99285889 -135.53840637]
[134.55657959 -120.54475403]
[134.12031555 -105.55110168]
[143.79870605 -101.02628326]
[151.38980103 -93.45337677]
[155.97077942 -83.71583557]
[156.97215271 -72.96238708]
[154.24842834 -62.47152328]
[148.09861755 -53.49951553]
[139.23355103 -47.12997055]
[128.69386292 -44.14297867]
[126.51988983 -29.30135536]
[124.34591675 -14.45973015]
[122.17193604 0.38189432]
[119.99795532 15.22351933]
[125.80897522 28.93779373]
[116.15328979 41.47087860]
[113.97930908 56.31250000]
[111.80532837 71.15412903]
[134.16194153 89.28909302]
[133.93992615 121.97943878]
[147.14294434 129.09844971]
[160.34597778 136.21745300]
[176.71351624 135.19989014]
[185.55180359 149.01353455]
[177.76876831 163.44807434]
[161.37092590 163.65451050]
[153.22695923 149.42047119]
[140.02394104 142.30146790]
[126.82092285 135.18246460]
[119.66804504 137.43775940]
[132.11413574 145.81001282]
[133.32861328 160.76077271]
[122.39695740 171.03202820]
[107.55076599 168.88949585]
[99.96927643 155.94650269]
[105.36228943 141.94833374]
[98.20941162 144.20362854]
[91.47742462 157.60812378]
[84.74543762 171.01261902]
[78.01345062 184.41709900]
[71.28146362 197.82159424]
[64.54947662 211.22608948]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 107]
[18 106]
[19 105]
[20 104]
[21 103]
[22 102]
[30 83]
[31 82]
[32 81]
[34 79]
[35 78]
[36 77]
[37 76]
[38 75]
[42 67]
[43 66]
[44 65]
[45 64]
[46 63]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
[85 94]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
