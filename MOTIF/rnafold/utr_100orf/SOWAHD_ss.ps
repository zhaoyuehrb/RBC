%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:12:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAAGGGCAGCUAACGCUGGACACUGGGACGGCCGCGGCGGCAGCUUCAAGACCAUGGCCCAGCUCGGAGGGGCCGCGAACCGGGCACCCACGGCCUCUCUCGCGCCGACCUCGCAGAGCCUGCGGUGCGCCCCGCAGCCCCGCCCCUCGAGAG\
) } def
/len { sequence length } bind def

/coor [
[-18.89030647 156.83828735]
[-33.58716583 159.83868408]
[-48.28402710 162.83906555]
[-57.01296616 175.74035645]
[-71.96041870 178.57380676]
[-84.20603180 170.17259216]
[-98.90289307 173.17297363]
[-113.59975433 176.17337036]
[-128.29661560 179.17375183]
[-142.57176208 183.78025818]
[-156.25025940 189.93646240]
[-169.92875671 196.09265137]
[-183.60725403 202.24884033]
[-189.28828430 216.75276184]
[-203.24792480 222.80116272]
[-217.04019165 217.29577637]
[-230.71868896 223.45198059]
[-244.39718628 229.60816956]
[-258.07568359 235.76435852]
[-271.75418091 241.92054749]
[-259.04095459 249.88133240]
[-257.13323975 264.75952148]
[-267.42672729 275.67025757]
[-282.39071655 274.63125610]
[-291.07754517 262.40264893]
[-287.13131714 247.93013000]
[-301.35937500 252.68014526]
[-315.58743286 257.43017578]
[-324.01293945 271.08264160]
[-339.95675659 272.86434937]
[-351.18811035 261.40850830]
[-349.09130859 245.50306702]
[-335.27478027 237.34931946]
[-320.33743286 243.20211792]
[-306.10940552 238.45210266]
[-291.88134766 233.70207214]
[-277.91036987 228.24205017]
[-264.23187256 222.08586121]
[-250.55337524 215.92967224]
[-236.87487793 209.77348328]
[-223.19638062 203.61727905]
[-218.17124939 189.64288330]
[-204.38700867 183.20477295]
[-189.76344299 188.57034302]
[-176.08494568 182.41415405]
[-162.40644836 176.25796509]
[-148.72795105 170.10176086]
[-163.37687683 166.87541199]
[-174.92817688 157.30633545]
[-180.82389832 143.51356506]
[-179.75845337 128.55145264]
[-171.96777344 115.73329163]
[-159.17707825 107.89760590]
[-144.21881104 106.77957153]
[-130.40539551 112.62677765]
[-120.79577637 124.14437866]
[-117.51795197 138.78186035]
[-121.29778290 153.29782104]
[-131.29699707 164.47688293]
[-116.60013580 161.47650146]
[-101.90327454 158.47612000]
[-87.20642090 155.47573853]
[-79.23369598 142.94691467]
[-64.37173462 139.69473267]
[-51.28441238 148.14219666]
[-36.58755112 145.14181519]
[-21.89069366 142.14143372]
[-7.56988001 137.67889404]
[6.22981167 131.79939270]
[14.90587711 119.69256592]
[30.63451576 121.40151215]
[44.43420792 115.52201843]
[58.23389816 109.64251709]
[72.03359222 103.76301575]
[85.83328247 97.88352203]
[94.38549042 86.82226562]
[108.28721619 88.31678772]
[122.08691406 82.43729401]
[135.88659668 76.55779266]
[138.23823547 67.32133484]
[144.51007080 60.32905579]
[153.17872620 57.08774185]
[162.22535706 58.21567917]
[169.60554504 63.32905197]
[183.73504639 58.29348373]
[197.81314087 53.11590195]
[211.83839417 47.79682922]
[225.86363220 42.47775269]
[239.88887024 37.15867996]
[253.91412354 31.83960724]
[267.88510132 26.37958336]
[281.80038452 20.77916145]
[288.64077759 14.63723278]
[296.05270386 15.20918274]
[310.07794189 9.89010906]
[324.10317993 4.57103634]
[331.06588745 -1.43190193]
[338.46478271 -0.71081328]
[352.59429932 -5.74638081]
[366.72381592 -10.78194904]
[370.17440796 -14.85077953]
[374.42526245 -16.94078636]
[378.57290649 -17.08255005]
[381.86126709 -15.66672611]
[396.26904297 -19.83998871]
[410.67681885 -24.01325035]
[416.83288574 -38.38811111]
[430.81195068 -45.39665985]
[446.01351929 -41.72967911]
[455.25985718 -29.11860085]
[454.18511963 -13.51799107]
[443.29681396 -2.29398274]
[427.73602295 -0.74620795]
[414.85006714 -9.60547924]
[400.44229126 -5.43221664]
[386.03454590 -1.25895488]
[371.75936890 3.34756160]
[357.62988281 8.38312912]
[343.50036621 13.41869640]
[329.42227173 18.59627914]
[315.39703369 23.91535378]
[301.37176514 29.23442650]
[287.40081787 34.69445038]
[273.48550415 40.29487228]
[268.42553711 45.74099350]
[259.23318481 45.86485291]
[245.20794678 51.18392563]
[231.18270874 56.50299835]
[217.15745544 61.82207108]
[203.13221741 67.14114380]
[197.96359253 72.48426819]
[188.77061462 72.42299652]
[174.64111328 77.45856476]
[162.78825378 94.31678009]
[141.76609802 90.35748291]
[127.96640778 96.23698425]
[114.16671753 102.11647797]
[105.61450958 113.17773438]
[91.71278381 111.68321228]
[77.91308594 117.56270599]
[64.11339569 123.44220734]
[50.31370544 129.32170105]
[36.51401520 135.20120239]
[26.85090256 147.72857666]
[12.10931110 145.59907532]
[-1.69038069 151.47857666]
[12.78229809 155.42085266]
[23.43914986 165.97697449]
[27.51871109 180.41156006]
[23.96386147 194.98423767]
[13.69575405 205.91885376]
[-0.62487990 210.38197327]
[-15.28719425 207.21708679]
[-26.49180603 197.24429321]
[-31.33531189 183.04779053]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[3 65]
[6 62]
[7 61]
[8 60]
[9 59]
[10 47]
[11 46]
[12 45]
[13 44]
[16 41]
[17 40]
[18 39]
[19 38]
[20 37]
[26 36]
[27 35]
[28 34]
[68 146]
[69 145]
[71 143]
[72 142]
[73 141]
[74 140]
[75 139]
[77 137]
[78 136]
[79 135]
[84 133]
[85 132]
[86 130]
[87 129]
[88 128]
[89 127]
[90 126]
[91 124]
[92 123]
[94 122]
[95 121]
[96 120]
[98 119]
[99 118]
[100 117]
[104 116]
[105 115]
[106 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
