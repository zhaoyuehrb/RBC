%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGGACUGUGGAACAUCUCAGAGCCUCUCAGUAGGAGCAGAAAAGUUACUGGGGAGUACAGAUGCAUGUAUGUGAUCUGCAGAAGCUGGUCAGGAUCCAACUUGCAUUUACUACAUUUCCAUGGAUGUUCAGUUGCCAUCUUCUGCCUACUCCUGAGCUUU\
) } def
/len { sequence length } bind def

/coor [
[27.87680054 360.22067261]
[16.01124382 351.04412842]
[12.66179276 336.42453003]
[4.46394110 348.98620605]
[-3.73391128 361.54785156]
[-5.81931877 370.49142456]
[-12.21275997 374.27050781]
[-20.65118217 386.67184448]
[-22.01777267 402.43389893]
[-35.57450104 408.60354614]
[-44.01292419 421.00488281]
[-52.45134735 433.40618896]
[-49.25304794 448.88348389]
[-58.00529099 462.04302979]
[-73.51552582 465.07751465]
[-86.58181000 456.18664551]
[-89.45214081 440.64520264]
[-80.42360687 427.67364502]
[-64.85267639 424.96777344]
[-56.41425705 412.56643677]
[-47.97583389 400.16513062]
[-47.21281433 385.29006958]
[-33.05251312 378.23339844]
[-24.61409187 365.83206177]
[-16.29556847 353.35000610]
[-8.09771538 340.78836060]
[0.10013633 328.22668457]
[7.43260765 315.14102173]
[13.86634445 301.59085083]
[20.30008125 288.04067993]
[26.73381805 274.49050903]
[33.16755676 260.94033813]
[31.63703537 246.12458801]
[44.54559326 236.97692871]
[50.97933197 223.42675781]
[44.66051102 207.86447144]
[51.66885757 192.23007202]
[68.12580872 186.36605835]
[74.29721069 172.69442749]
[80.46860504 159.02278137]
[86.64000702 145.35113525]
[92.81140137 131.67948914]
[83.67827606 127.38027954]
[76.46894073 120.58934784]
[71.81475067 112.06311798]
[70.07221985 102.70036316]
[71.29786682 93.44792938]
[75.25386047 85.20506287]
[81.44287872 78.73603058]
[89.16763306 74.59950256]
[97.60803986 73.10115051]
[100.48120880 58.37889481]
[103.35438538 43.65663528]
[106.22755432 28.93437767]
[109.10072327 14.21212006]
[111.97389221 -0.51013863]
[114.70505524 -15.25940132]
[117.29396057 -30.03429794]
[119.88286591 -44.80919647]
[113.15561676 -61.92672348]
[124.88384247 -74.95361328]
[127.18751526 -89.77565765]
[129.49119568 -104.59770203]
[131.79486084 -119.41975403]
[134.09854126 -134.24179077]
[136.40222168 -149.06384277]
[138.70590210 -163.88589478]
[133.17979431 -178.71063232]
[142.77993774 -190.09863281]
[145.08361816 -204.92066956]
[143.30471802 -213.93022156]
[147.57716370 -220.00506592]
[150.16607666 -234.77995300]
[148.56114197 -243.82211304]
[152.94987488 -249.81349182]
[155.82304382 -264.53573608]
[158.69621277 -279.25799561]
[161.56938171 -293.98025513]
[164.44255066 -308.70251465]
[167.03146362 -323.47741699]
[169.33512878 -338.29946899]
[158.23669434 -349.14401245]
[155.66532898 -364.44656372]
[162.60978699 -378.32293701]
[176.39978027 -385.43743896]
[191.73277283 -383.05435181]
[202.71290588 -372.09002686]
[205.11811829 -356.76049805]
[198.02352905 -342.96026611]
[184.15718079 -335.99578857]
[181.85350037 -321.17373657]
[183.92825317 -316.82366943]
[183.25849915 -311.11938477]
[179.16481018 -305.82934570]
[176.29164124 -291.10708618]
[173.41847229 -276.38482666]
[170.54530334 -261.66256714]
[167.67213440 -246.94032288]
[164.94096375 -232.19105530]
[162.35206604 -217.41615295]
[159.90565491 -202.61700439]
[157.60198975 -187.79495239]
[163.29286194 -174.03039551]
[153.52793884 -161.58221436]
[151.22427368 -146.76016235]
[148.92059326 -131.93812561]
[146.61691284 -117.11607361]
[144.31323242 -102.29402924]
[142.00956726 -87.47198486]
[139.70588684 -72.64993286]
[146.59892273 -62.67298889]
[144.76818848 -50.27947235]
[134.65776062 -42.22029114]
[132.06886292 -27.44539452]
[129.47994995 -12.67049694]
[131.43237305 -5.50491858]
[126.69615173 2.36303186]
[123.82298279 17.08529091]
[120.94981384 31.80754852]
[118.07663727 46.52980804]
[115.20346832 61.25206375]
[112.33029938 75.97432709]
[128.88751221 92.90974426]
[126.52783966 118.74938202]
[140.25831604 124.78874969]
[153.98880005 130.82810974]
[167.71928406 136.86747742]
[181.44976807 142.90682983]
[194.25282288 134.29954529]
[209.67733765 134.00334167]
[222.80142212 142.11273193]
[229.43721008 156.04003906]
[227.46725464 171.34111023]
[217.52015686 183.13343811]
[202.77000427 187.65411377]
[187.92350769 183.46063232]
[177.71815491 171.89109802]
[175.41040039 156.63731384]
[161.67991638 150.59794617]
[147.94944763 144.55859375]
[134.21896362 138.51922607]
[120.48847961 132.47985840]
[106.48304749 137.85089111]
[100.31165314 151.52253723]
[94.14025116 165.19416809]
[87.96885681 178.86581421]
[81.79745483 192.53746033]
[87.98652649 204.53257751]
[86.14846039 217.70779419]
[77.17933655 227.26667786]
[64.52949524 229.86048889]
[58.09576035 243.41065979]
[59.16609573 259.19561768]
[46.71772385 267.37408447]
[40.28398514 280.92425537]
[33.85025024 294.47442627]
[27.41651154 308.02459717]
[20.98277473 321.57473755]
[35.20213699 316.79879761]
[49.22316742 322.12896729]
[56.67888260 335.14480591]
[54.18361664 349.93582153]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 27]
[4 26]
[5 25]
[7 24]
[8 23]
[10 21]
[11 20]
[12 19]
[28 158]
[29 157]
[30 156]
[31 155]
[32 154]
[34 152]
[35 151]
[38 147]
[39 146]
[40 145]
[41 144]
[42 143]
[51 122]
[52 121]
[53 120]
[54 119]
[55 118]
[56 117]
[57 115]
[58 114]
[59 113]
[61 110]
[62 109]
[63 108]
[64 107]
[65 106]
[66 105]
[67 104]
[69 102]
[70 101]
[72 100]
[73 99]
[75 98]
[76 97]
[77 96]
[78 95]
[79 94]
[80 91]
[81 90]
[124 142]
[125 141]
[126 140]
[127 139]
[128 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
