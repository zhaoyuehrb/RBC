%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGCUGAGUGGCACCAUGCAGCUUCAGGCCUCUCUCUCGUUUCUCCUGAUUCUCACUCUCUGCCUAGAGCUUCGAUCAGAACUAGCACGAGACACUAUCAAGGAUCUCCUCCCAA\
) } def
/len { sequence length } bind def

/coor [
[75.27765656 144.91244507]
[69.60359192 141.28414917]
[64.45411682 136.94335938]
[52.58452988 146.11468506]
[40.71494675 155.28599548]
[28.84536171 164.45730591]
[17.22628784 173.94398499]
[5.86610031 183.73919678]
[-5.49408770 193.53440857]
[-16.85427475 203.32960510]
[-22.25321388 218.20112610]
[-36.94472504 220.65240479]
[-48.30491257 230.44761658]
[-59.66510010 240.24282837]
[-67.71245575 255.16517639]
[-84.27935791 251.56321716]
[-85.40435791 234.64663696]
[-69.46031189 228.88262939]
[-58.10012436 219.08743286]
[-46.73993301 209.29222107]
[-42.15355301 195.12132263]
[-26.64948463 191.96942139]
[-15.28929710 182.17420959]
[-3.92910957 172.37899780]
[7.43107796 162.58380127]
[8.66894817 157.84727478]
[12.97518253 153.88940430]
[19.67404938 152.58772278]
[31.54363441 143.41641235]
[43.41321945 134.24508667]
[55.28280258 125.07378387]
[48.82383347 103.05320740]
[52.61877823 80.42087555]
[65.90726471 61.71151733]
[86.02674866 50.67383575]
[108.94598389 49.51939392]
[113.69600677 35.29134750]
[118.44602203 21.06330109]
[123.19604492 6.83525419]
[127.94606018 -7.39279222]
[132.69609070 -21.62083817]
[120.21467590 -33.24849319]
[114.02988434 -49.08736801]
[115.32093811 -65.98690033]
[123.78505707 -80.60762787]
[137.70672607 -90.08103943]
[154.30519104 -92.57238007]
[158.28465271 -107.03488159]
[162.26411438 -121.49738312]
[166.24356079 -135.95988464]
[170.22302246 -150.42237854]
[174.20248413 -164.88488770]
[163.53323364 -175.84454346]
[159.80682373 -190.57583618]
[163.92697144 -205.09791565]
[174.69079590 -215.53802490]
[189.13781738 -219.16419983]
[193.11727905 -233.62669373]
[197.09674072 -248.08920288]
[201.07618713 -262.55169678]
[193.04919434 -276.16577148]
[197.08068848 -291.44720459]
[210.77886963 -299.32983398]
[226.01683044 -295.13699341]
[233.75418091 -281.35623169]
[229.40046692 -266.16345215]
[215.53869629 -258.57223511]
[211.55923462 -244.10974121]
[207.57977295 -229.64723206]
[203.60031128 -215.18473816]
[214.15861511 -204.67817688]
[218.06631470 -190.20109558]
[214.17724609 -175.61541748]
[203.43914795 -164.86415100]
[188.66497803 -160.90542603]
[184.68553162 -146.44291687]
[180.70606995 -131.98042297]
[176.72660828 -117.51792145]
[172.74714661 -103.05542755]
[168.76768494 -88.59292603]
[179.32240295 -80.78549194]
[186.57980347 -69.80672455]
[189.64242554 -56.97430038]
[188.11784363 -43.83748245]
[182.16885376 -31.99005890]
[172.49635315 -22.87698364]
[160.25682068 -17.61815643]
[146.92413330 -16.87081909]
[142.17411804 -2.64277244]
[137.42408752 11.58527470]
[132.67407227 25.81332016]
[127.92404938 40.04136658]
[123.17403412 54.26941299]
[132.51544189 60.36329269]
[140.31790161 68.33316040]
[146.21214294 77.80180359]
[149.91918945 88.32107544]
[151.26356506 99.39311218]
[150.18168640 110.49386597]
[146.72471619 121.09795380]
[141.05628967 130.70347595]
[133.44468689 138.85583496]
[141.46166992 151.53367615]
[149.47865295 164.21153259]
[164.24293518 171.34933472]
[165.17352295 187.72206116]
[151.31312561 196.48684692]
[136.92012024 188.62722778]
[136.80081177 172.22851562]
[128.78381348 159.55067444]
[120.76683044 146.87281799]
[114.44326782 149.19059753]
[107.87044525 150.65943909]
[101.16178894 151.25399780]
[94.43309021 150.96401978]
[87.80046082 149.79450989]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 31]
[4 30]
[5 29]
[6 28]
[7 25]
[8 24]
[9 23]
[10 22]
[12 20]
[13 19]
[14 18]
[36 93]
[37 92]
[38 91]
[39 90]
[40 89]
[41 88]
[47 80]
[48 79]
[49 78]
[50 77]
[51 76]
[52 75]
[57 70]
[58 69]
[59 68]
[60 67]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
