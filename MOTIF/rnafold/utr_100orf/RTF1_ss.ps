%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGGAGCGCGCAUGCGCGGUCGCCUUUGUGUGGGUCGAGCAGCGGCGGCGGCGGCGGCAGUGGCGGUCCCACUGGCAGGCGGGCAAGAGGGGAGUCCGGGCGGCGGCCGGC\
) } def
/len { sequence length } bind def

/coor [
[64.87187958 459.74557495]
[67.59719849 440.55645752]
[68.01416779 425.56225586]
[57.88542938 417.46597290]
[54.25749969 404.81341553]
[58.68649292 392.21121216]
[69.75147247 384.38442993]
[70.58509064 369.40762329]
[67.77523804 362.45657349]
[71.65577698 354.02783203]
[72.90540314 339.07998657]
[74.15502930 324.13211060]
[71.53948975 317.10565186]
[75.65283203 308.78802490]
[77.31749725 293.88070679]
[78.98216248 278.97335815]
[72.70510101 265.46603394]
[81.92611694 252.60977173]
[83.59078979 237.70242310]
[85.25545502 222.79508972]
[86.50508118 207.84722900]
[87.33869934 192.87040710]
[80.32067108 179.73280334]
[88.81295776 166.38395691]
[89.64657593 151.40715027]
[90.48020172 136.43032837]
[91.31381989 121.45350647]
[92.14744568 106.47669220]
[89.38526154 98.77309418]
[93.21812439 91.09690094]
[94.46775818 76.14904785]
[95.71738434 61.20118713]
[85.78818512 49.19915390]
[87.26841736 34.05770493]
[98.77171326 24.66569519]
[100.02133942 9.71783829]
[101.27096558 -5.23001862]
[89.69220734 -15.39065266]
[86.35554504 -30.24730301]
[92.33607483 -44.05662155]
[105.14795685 -51.60603333]
[106.39758301 -66.55388641]
[107.64720917 -81.50174713]
[101.08647919 -95.89852905]
[109.85717010 -107.93697357]
[111.10679626 -122.88483429]
[108.67961884 -131.84089661]
[112.60459900 -138.22891235]
[114.26926422 -153.13626099]
[115.93392944 -168.04360962]
[109.77593994 -182.61720276]
[118.87789154 -194.40718079]
[120.54255676 -209.31452942]
[114.38455963 -223.88812256]
[123.48651123 -235.67811584]
[125.15117645 -250.58544922]
[118.08621979 -265.38473511]
[127.59207153 -278.74777222]
[143.88992310 -276.92782593]
[150.21394348 -261.79708862]
[140.05851746 -248.92079163]
[138.39385986 -234.01344299]
[144.67091370 -220.50611877]
[135.44990540 -207.64985657]
[133.78523254 -192.74252319]
[140.06228638 -179.23519897]
[130.84127808 -166.37893677]
[129.17660522 -151.47158813]
[127.51194000 -136.56425476]
[126.05465698 -121.63520813]
[124.80503082 -106.68734741]
[131.45513916 -93.35974121]
[122.59506989 -80.25212097]
[121.34544373 -65.30426025]
[120.09581757 -50.35640717]
[131.47637939 -40.78452682]
[135.08102417 -26.17389870]
[129.32391357 -12.07748032]
[116.21882629 -3.98039198]
[114.96920013 10.96746540]
[113.71957397 25.91532326]
[123.50376129 37.08694458]
[122.44940186 52.26399994]
[110.66523743 62.45081329]
[109.41561127 77.39867401]
[108.16598511 92.34652710]
[107.12425995 107.31031036]
[106.29064178 122.28713226]
[105.45701599 137.26394653]
[104.62339783 152.24076843]
[103.78977203 167.21759033]
[110.74817657 181.42642212]
[102.31552124 193.70402527]
[101.48189545 208.68084717]
[104.21099854 214.95414734]
[103.38010406 220.75704956]
[100.16279602 224.45974731]
[98.49813080 239.36709595]
[96.83346558 254.27444458]
[102.99145508 268.84802246]
[93.88951111 280.63803101]
[92.22483826 295.54534912]
[90.56017303 310.45269775]
[89.10289001 325.38174438]
[87.85326385 340.32958984]
[86.60363770 355.27746582]
[85.56191254 370.24124146]
[84.72828674 385.21804810]
[96.61097717 397.96380615]
[95.68811798 415.02859497]
[83.00837708 425.97921753]
[82.59140015 440.97341919]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 112]
[3 111]
[7 108]
[8 107]
[10 106]
[11 105]
[12 104]
[14 103]
[15 102]
[16 101]
[18 99]
[19 98]
[20 97]
[21 94]
[22 93]
[24 91]
[25 90]
[26 89]
[27 88]
[28 87]
[30 86]
[31 85]
[32 84]
[35 81]
[36 80]
[37 79]
[41 75]
[42 74]
[43 73]
[45 71]
[46 70]
[48 69]
[49 68]
[50 67]
[52 65]
[53 64]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
