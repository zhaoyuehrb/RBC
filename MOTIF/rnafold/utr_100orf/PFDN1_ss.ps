%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACUGCGCAGGCGCUUACAGUGCACCAAGAUGGCCGCCCCCGUGGAUCUAGAGCUGAAGAAGGCCUUCACAGAGCUUCAAGCCAAAGUUAUUGACACUCAACAGAAGGUGAAGCUCGCAGACAUACAGA\
) } def
/len { sequence length } bind def

/coor [
[75.09906769 213.39761353]
[73.31428528 198.30181885]
[77.44708252 183.67347717]
[86.86723328 171.74330139]
[100.13823700 164.33055115]
[98.35745239 149.43663025]
[96.57666779 134.54270935]
[94.79588318 119.64879608]
[87.86678314 116.77867126]
[82.12630463 130.63676453]
[68.26830292 124.89605713]
[74.00859070 111.03842163]
[67.07949829 108.16829681]
[55.28870010 117.44068146]
[43.49790573 126.71306610]
[31.70710754 135.98544312]
[19.91631126 145.25782776]
[11.20351124 159.80168152]
[-5.18389893 155.45552063]
[-5.54407215 138.50540161]
[10.64392662 133.46704102]
[22.43472290 124.19464874]
[34.22551727 114.92226410]
[46.01631546 105.64987946]
[57.80711365 96.37749481]
[56.65148544 88.96706390]
[41.83058167 91.27808380]
[39.51979065 76.45714569]
[54.34023666 74.14619446]
[53.18461227 66.73576355]
[39.13036728 61.49380112]
[25.07612038 56.25183487]
[11.02187443 51.00987244]
[4.29240656 51.74562073]
[-0.96435004 49.28006744]
[-3.56643534 45.16959381]
[-17.35533905 39.26484299]
[-31.14424515 33.36008835]
[-44.93314743 27.45533562]
[-61.14321518 29.93842506]
[-71.18613434 16.97417068]
[-64.73060608 1.89908588]
[-48.41752625 0.22112525]
[-39.02839661 13.66643143]
[-25.23949051 19.57118416]
[-11.45058632 25.47593689]
[2.33831811 31.38069153]
[16.26383781 36.95562744]
[30.31808281 42.19758987]
[44.37232971 47.43955231]
[58.42657471 52.68151474]
[99.51842499 63.34960556]
[106.60539246 92.07099152]
[118.61351013 83.08182526]
[130.62162781 74.09265900]
[142.62974548 65.10349274]
[154.63786316 56.11432648]
[152.96424866 47.08548737]
[154.36380005 38.05443954]
[158.65040588 30.03290176]
[165.31622314 23.90980530]
[173.59162903 20.35278702]
[182.53402710 19.73547935]
[191.13523865 22.09845352]
[198.43510437 27.14790154]
[211.42549133 19.64790154]
[224.41587830 12.14790154]
[237.40625000 4.64790154]
[250.39663696 -2.85209846]
[263.38702393 -10.35209846]
[264.90197754 -27.15171814]
[275.99465942 -39.63836288]
[292.17474365 -43.05370712]
[307.06646729 -36.25303268]
[319.87466431 -44.06005096]
[332.68289185 -51.86706924]
[336.51898193 -66.96415710]
[349.61956787 -74.69912720]
[363.98867798 -70.94895172]
[376.79690552 -78.75596619]
[389.60513306 -86.56298065]
[402.41336060 -94.37000275]
[401.96762085 -109.72241974]
[409.27197266 -123.23324585]
[422.36151123 -131.26812744]
[437.71527100 -131.66571045]
[451.20312500 -124.31906891]
[459.19692993 -111.20439911]
[459.54638672 -95.84947968]
[452.15750122 -82.38471985]
[439.01785278 -74.43205261]
[423.66189575 -74.13072205]
[410.22036743 -81.56178284]
[397.41213989 -73.75476074]
[384.60391235 -65.94774628]
[371.79571533 -58.14072800]
[368.54467773 -43.65050888]
[355.66653442 -35.55062866]
[340.48989868 -39.05884933]
[327.68170166 -31.25183105]
[314.87347412 -23.44481468]
[315.02322388 -10.04121876]
[308.45617676 1.76873302]
[296.80557251 8.82640648]
[283.08007812 9.18341637]
[270.88702393 2.63828254]
[257.89663696 10.13828278]
[244.90625000 17.63828278]
[231.91587830 25.13828278]
[218.92549133 32.63828278]
[205.93510437 40.13828278]
[202.58351135 61.03915024]
[184.79205322 73.01252747]
[163.62702942 68.12244415]
[151.61891174 77.11161041]
[139.61079407 86.10077667]
[127.60267639 95.08994293]
[115.59455109 104.07910919]
[109.68980408 117.86801147]
[111.47058868 132.76193237]
[113.25137329 147.65585327]
[115.03215790 162.54975891]
[129.67669678 166.62480164]
[141.64395142 175.99780273]
[149.10902405 189.23945618]
[150.93351746 204.33049011]
[146.83921814 218.96966553]
[137.45048523 230.92457581]
[124.19902802 238.37222290]
[109.10559082 240.17686462]
[94.47182465 236.06330872]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 122]
[6 121]
[7 120]
[8 119]
[13 25]
[14 24]
[15 23]
[16 22]
[17 21]
[30 51]
[31 50]
[32 49]
[33 48]
[36 47]
[37 46]
[38 45]
[39 44]
[53 118]
[54 117]
[55 116]
[56 115]
[57 114]
[65 111]
[66 110]
[67 109]
[68 108]
[69 107]
[70 106]
[74 101]
[75 100]
[76 99]
[79 96]
[80 95]
[81 94]
[82 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
