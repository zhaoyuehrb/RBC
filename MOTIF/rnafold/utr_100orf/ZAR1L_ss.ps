%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:27:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGACUGCGCCUGAGCACCUGAGAGCGGAUGGAGCGCUUUGUCCGUGUUCCCUAUGGCUUGUACCAGGGUUAUGGGAGCACAGUGCCUUUGGGCCAGCCUGGACUCUCAGGGCACAAACAGCCCGACU\
) } def
/len { sequence length } bind def

/coor [
[256.27279663 328.38513184]
[247.45602417 316.24987793]
[238.63925171 304.11462402]
[229.82247925 291.97937012]
[216.08197021 286.23065186]
[214.23002625 270.51821899]
[205.41325378 258.38296509]
[196.59648132 246.24769592]
[190.05349731 242.64907837]
[187.71746826 233.71098328]
[179.19648743 221.36622620]
[170.67552185 209.02146912]
[162.15455627 196.67671204]
[153.63357544 184.33195496]
[145.11260986 171.98719788]
[136.29582214 159.85194397]
[127.18839264 147.93327332]
[118.08095551 136.01461792]
[108.97351837 124.09594727]
[98.83591461 125.68625641]
[88.88372040 123.18549347]
[80.70201874 116.99195862]
[75.59392548 108.09210205]
[60.59830475 108.45455933]
[45.60268402 108.81701660]
[30.60706329 109.17947388]
[15.61144352 109.54193115]
[0.61582345 109.90438843]
[-9.00140285 122.23495483]
[-24.30526924 125.44831085]
[-38.06975937 118.02720642]
[-43.79570389 103.47565460]
[-38.77947998 88.66445923]
[-25.38960266 80.58701324]
[-9.94835949 83.05723572]
[0.25336730 94.90876770]
[15.24898720 94.54631042]
[30.24460793 94.18385315]
[45.24022675 93.82139587]
[60.23584747 93.45893860]
[75.23146820 93.09648132]
[76.99166107 88.52154541]
[79.58806610 84.36377716]
[82.92631531 80.77429199]
[86.88509369 77.88353729]
[91.32051849 75.79658508]
[90.59581757 60.81410217]
[89.87111664 45.83161926]
[89.14641571 30.84913635]
[88.42171478 15.86665249]
[87.69701385 0.88416934]
[86.97231293 -14.09831429]
[86.24761200 -29.08079720]
[82.67690277 -37.60116196]
[85.69085693 -44.43318939]
[85.32839966 -59.42881012]
[84.96594238 -74.42443085]
[84.60348511 -89.42005157]
[84.24102783 -104.41567230]
[83.87857819 -119.41128540]
[83.51612091 -134.40690613]
[71.90257263 -145.12609863]
[71.35366058 -160.92085266]
[82.19503784 -172.42042542]
[97.99471283 -172.80230713]
[109.37901306 -161.83996582]
[109.59384155 -146.03712463]
[98.51174164 -134.76936340]
[98.87419891 -119.77374268]
[99.23664856 -104.77812195]
[99.59910583 -89.78250122]
[99.96156311 -74.78688812]
[100.32402039 -59.79126358]
[100.68647766 -44.79564285]
[101.23009491 -29.80549812]
[101.95479584 -14.82301521]
[102.67949677 0.15946862]
[103.40419769 15.14195156]
[104.12889862 30.12443542]
[104.85359955 45.10691833]
[105.57830048 60.08940125]
[106.30300140 75.07188416]
[124.15013123 91.17333221]
[120.89218140 114.98851013]
[129.99961853 126.90717316]
[139.10705566 138.82583618]
[148.21449280 150.74450684]
[154.30889893 153.70657349]
[157.44712830 158.59770203]
[157.45736694 163.46623230]
[165.97833252 175.81098938]
[174.49931335 188.15574646]
[183.02027893 200.50050354]
[191.54124451 212.84526062]
[200.06222534 225.19001770]
[208.73173523 237.43092346]
[217.54850769 249.56617737]
[226.36528015 261.70141602]
[240.73643494 268.31811523]
[241.95773315 283.16256714]
[250.77450562 295.29782104]
[259.59127808 307.43307495]
[268.40805054 319.56835938]
[281.31503296 316.26773071]
[294.54046631 317.57821655]
[306.49081421 323.31985474]
[315.73373413 332.78005981]
[321.16967773 344.80209351]
[322.16284180 357.92633057]
[318.61523438 370.56765747]
[310.97610474 381.20672607]
[319.19628906 393.75378418]
[327.41650391 406.30084229]
[335.63668823 418.84786987]
[351.18554688 420.51129150]
[361.99011230 431.81594849]
[362.94882202 447.42410278]
[353.60897827 459.96609497]
[338.38058472 463.51995850]
[324.45401001 456.40768433]
[318.40496826 441.98745728]
[323.08963013 427.06805420]
[314.86944580 414.52102661]
[306.64926147 401.97396851]
[298.42904663 389.42691040]
[281.83947754 392.13760376]
[265.66680908 387.35681152]
[253.13606262 375.98812866]
[246.76760864 360.25372314]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 103]
[2 102]
[3 101]
[4 100]
[6 98]
[7 97]
[8 96]
[10 95]
[11 94]
[12 93]
[13 92]
[14 91]
[15 90]
[16 87]
[17 86]
[18 85]
[19 84]
[23 41]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[46 82]
[47 81]
[48 80]
[49 79]
[50 78]
[51 77]
[52 76]
[53 75]
[55 74]
[56 73]
[57 72]
[58 71]
[59 70]
[60 69]
[61 68]
[111 125]
[112 124]
[113 123]
[114 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
