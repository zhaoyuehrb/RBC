%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCCGCCCCUCUCCCCGCCCAGAGGCGCCCCGGGGGCACCAUGCAGGCGCAGCAGCUGCCCUACGAGUUUUUCAGCGAAGAGAACGCGCCCAAGUGGCGGGGACUACUGGUGCCUGCGCUGAAAAAGGUCCAGGGGCAAG\
) } def
/len { sequence length } bind def

/coor [
[93.62355804 259.98831177]
[79.03156281 254.98062134]
[69.48130035 242.86468506]
[68.02021790 227.50665283]
[75.11455536 213.80725098]
[88.50053406 206.13787842]
[89.16403198 191.15255737]
[89.82752991 176.16723633]
[90.49102783 161.18191528]
[91.15453339 146.19659424]
[91.81803131 131.21128845]
[72.81021118 108.48840332]
[81.25418854 83.91313171]
[73.37431335 71.14961243]
[65.49443817 58.38608932]
[57.61455536 45.62256622]
[49.73467636 32.85904312]
[41.85479736 20.09552002]
[33.97491837 7.33199787]
[26.09504128 -5.43152523]
[9.61157608 -4.76238537]
[-4.88802242 -12.43270969]
[-13.51095867 -26.27664757]
[-13.99592876 -42.48557663]
[-6.30539942 -56.65571213]
[-14.46570587 -69.24179077]
[-22.62601089 -81.82787323]
[-30.78631783 -94.41394806]
[-38.94662476 -107.00003052]
[-55.71681213 -97.12246704]
[-72.31862640 -104.27441406]
[-76.02740479 -120.54845428]
[-88.42987823 -128.98518372]
[-100.92491913 -137.28422546]
[-113.51100159 -145.44451904]
[-126.09708405 -153.60482788]
[-138.68316650 -161.76513672]
[-151.26924133 -169.92544556]
[-163.85531616 -178.08575439]
[-176.66461182 -173.77157593]
[-189.42640686 -177.59146118]
[-197.51824951 -187.92672729]
[-198.14547729 -200.84257507]
[-210.54795837 -209.27931213]
[-222.95043945 -217.71604919]
[-237.94888306 -213.29106140]
[-252.26194763 -219.58950806]
[-259.13143921 -233.63743591]
[-255.31376648 -248.80184937]
[-242.61154175 -257.92257690]
[-227.02236938 -256.69308472]
[-215.90696716 -245.69390869]
[-214.51370239 -230.11853027]
[-202.11122131 -221.68177795]
[-189.70874023 -213.24504089]
[-173.37702942 -217.10687256]
[-159.00184631 -207.81126404]
[-155.69500732 -190.67182922]
[-143.10893250 -182.51152039]
[-130.52285767 -174.35121155]
[-117.93677521 -166.19091797]
[-105.35069275 -158.03060913]
[-92.76461792 -149.87030029]
[-85.38268280 -148.86274719]
[-79.99314117 -141.38766479]
[-67.59066010 -132.95092773]
[-56.30516815 -137.62631226]
[-43.14875031 -133.91650391]
[-39.21306610 -148.39097595]
[-35.27738190 -162.86544800]
[-31.34169769 -177.33992004]
[-27.40601349 -191.81439209]
[-23.47032928 -206.28886414]
[-32.54037857 -219.02732849]
[-31.24879456 -234.61148071]
[-20.20542336 -245.68296814]
[-4.62460423 -247.01417542]
[8.13687325 -237.97654724]
[12.05343056 -222.83737183]
[5.27578878 -208.74491882]
[-8.99585629 -202.35317993]
[-12.93154049 -187.87870789]
[-16.86722565 -173.40423584]
[-20.80290985 -158.92976379]
[-24.73859406 -144.45529175]
[-28.67427826 -129.98081970]
[-26.36054420 -115.16033936]
[-18.20023727 -102.57425690]
[-10.03993130 -89.98817444]
[-1.87962556 -77.40209961]
[6.28068018 -64.81601715]
[19.88623047 -66.41551208]
[32.91062927 -61.95950699]
[42.77970886 -52.26814270]
[47.51683807 -39.20215607]
[46.13865280 -25.30579185]
[38.85856247 -13.31140327]
[46.73844147 -0.54788095]
[54.61832047 12.21564198]
[62.49819946 24.97916412]
[70.37808228 37.74268723]
[78.25795746 50.50621033]
[86.13783264 63.26973343]
[94.01771545 76.03325653]
[103.35368347 74.25479889]
[113.13939667 76.15744781]
[121.91418457 81.80367279]
[128.24560547 90.67645264]
[130.95783997 101.71424866]
[129.33583069 113.43492889]
[141.35299683 122.41201782]
[150.17613220 125.07211304]
[153.53375244 131.72300720]
[165.34936523 140.96374512]
[177.16499329 150.20448303]
[188.98060608 159.44520569]
[203.19374084 153.62434387]
[218.41093445 155.70578003]
[230.53886414 165.12963867]
[236.31515503 179.36094666]
[234.18601990 194.57154846]
[224.72419739 206.66986084]
[210.47485352 212.40151978]
[195.27099609 210.22471619]
[183.20239258 200.72502136]
[177.51544189 186.45777893]
[179.73988342 171.26083374]
[167.92425537 162.02009583]
[156.10864258 152.77935791]
[144.29301453 143.53863525]
[132.37590027 134.42916870]
[120.35874939 125.45207977]
[106.80335236 131.87478638]
[106.13984680 146.86010742]
[105.47634888 161.84541321]
[104.81285095 176.83073425]
[104.14935303 191.81605530]
[103.48584747 206.80137634]
[116.14161682 215.62379456]
[121.99744415 229.89659119]
[119.18473816 245.06538391]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 138]
[7 137]
[8 136]
[9 135]
[10 134]
[11 133]
[13 104]
[14 103]
[15 102]
[16 101]
[17 100]
[18 99]
[19 98]
[20 97]
[25 91]
[26 90]
[27 89]
[28 88]
[29 87]
[32 66]
[33 65]
[34 63]
[35 62]
[36 61]
[37 60]
[38 59]
[39 58]
[43 55]
[44 54]
[45 53]
[68 86]
[69 85]
[70 84]
[71 83]
[72 82]
[73 81]
[110 132]
[111 131]
[113 130]
[114 129]
[115 128]
[116 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
