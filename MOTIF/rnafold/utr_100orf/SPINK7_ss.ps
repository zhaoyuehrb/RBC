%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:37:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGAUGCAGCUGUAGUGACAAUCUCAGAGCAGCUUCUACACCACAGCCAUUUCCAGCAUGAAGAUCACUGGGGGUCUCCUUCUGCUCUGUACAGUGGUCUAUUUCUGUAGCAGCUCAGAAGCUGCUAGUCUGUCUCCAAAAAAAGUGGACUGCAGCA\
) } def
/len { sequence length } bind def

/coor [
[107.15941620 255.21662903]
[97.73420715 267.34350586]
[83.50225830 273.11819458]
[68.29189301 270.98736572]
[56.19462585 261.52420044]
[50.46455765 247.27423096]
[52.64304733 232.07061768]
[62.14409637 220.00306702]
[76.41196442 214.31770325]
[78.49299622 199.46275330]
[80.57402802 184.60781860]
[82.65505981 169.75286865]
[84.73609924 154.89793396]
[86.81713104 140.04298401]
[88.89816284 125.18804932]
[90.97919464 110.33310699]
[90.97919464 95.33310699]
[88.89816284 80.47816467]
[86.81713104 65.62322235]
[84.73609924 50.76827621]
[72.40233612 41.25427628]
[70.50348663 26.15960884]
[79.64964294 14.45988846]
[77.56861115 -0.39505342]
[74.28341675 -4.59141970]
[73.09382629 -9.17171192]
[73.78840637 -13.25958633]
[75.83384705 -16.19472694]
[74.64209747 -31.14731026]
[73.45034790 -46.09989166]
[72.25859070 -61.05247498]
[71.06684113 -76.00505829]
[69.87508392 -90.95764160]
[68.68333435 -105.91022491]
[67.49158478 -120.86280823]
[66.29982758 -135.81538391]
[65.10807800 -150.76797485]
[58.79063416 -153.80258179]
[53.77943039 -158.62786865]
[50.55662918 -164.73449707]
[49.41809845 -171.49234009]
[50.44651031 -178.21540833]
[53.50621796 -184.23152161]
[58.26014328 -188.94946289]
[64.20662689 -191.91709900]
[64.80297852 -206.90524292]
[65.39932251 -221.89338684]
[52.65140533 -228.06195068]
[43.25355911 -238.59828186]
[38.60514450 -251.88372803]
[39.37928009 -265.89413452]
[45.42557526 -278.50833130]
[55.79795074 -287.82916260]
[68.90249634 -292.46881104]
[69.79672241 -307.44213867]
[70.69094849 -322.41546631]
[58.60836029 -329.52206421]
[50.81354904 -341.09274292]
[48.78596497 -354.82891846]
[52.86619949 -368.03158569]
[62.20032883 -378.13134766]
[74.91790771 -383.18859863]
[76.10965729 -398.14117432]
[77.30140686 -413.09378052]
[78.49316406 -428.04635620]
[79.68491364 -442.99893188]
[80.87666321 -457.95150757]
[82.06842041 -472.90411377]
[83.26016998 -487.85668945]
[84.45192719 -502.80926514]
[85.19725037 -517.79071045]
[85.49548340 -532.78778076]
[85.79371643 -547.78479004]
[86.09194946 -562.78186035]
[86.39018250 -577.77886963]
[73.93958282 -587.03967285]
[69.34234619 -601.86010742]
[74.36618805 -616.54138184]
[87.07935333 -625.43829346]
[102.59336090 -625.12982178]
[114.94276428 -615.73449707]
[119.37895966 -600.86505127]
[114.19614410 -586.23913574]
[101.38721466 -577.48065186]
[101.08898163 -562.48358154]
[100.79074860 -547.48657227]
[100.49251556 -532.48956299]
[100.19428253 -517.49249268]
[102.41106415 -514.68450928]
[103.34811401 -510.64532471]
[102.43369293 -506.00225830]
[99.40450287 -501.61752319]
[98.21275330 -486.66491699]
[97.02100372 -471.71234131]
[95.82924652 -456.75976562]
[94.63749695 -441.80718994]
[93.44574738 -426.85461426]
[92.25399017 -411.90200806]
[91.06224060 -396.94943237]
[89.87048340 -381.99685669]
[103.38246155 -373.18051147]
[110.66051483 -358.67657471]
[109.64100647 -342.38717651]
[100.50704956 -328.74816895]
[85.66426849 -321.52124023]
[84.77004242 -306.54791260]
[83.87581635 -291.57458496]
[97.96183014 -284.08242798]
[107.41530609 -271.15814209]
[110.30955505 -255.35018921]
[106.01747131 -239.80296326]
[95.34653473 -227.63143921]
[80.38746643 -221.29702759]
[79.79111481 -206.30888367]
[79.19477081 -191.32075500]
[92.44477844 -172.34797668]
[80.06066132 -151.95971680]
[81.25241089 -137.00714111]
[82.44416809 -122.05455780]
[83.63591766 -107.10197449]
[84.82766724 -92.14939117]
[86.01942444 -77.19680786]
[87.21117401 -62.24422836]
[88.40292358 -47.29164505]
[89.59468079 -32.33906174]
[90.78643036 -17.38648033]
[92.42355347 -2.47608638]
[94.50458527 12.37885571]
[106.51359558 21.11494255]
[108.83567810 36.15032196]
[99.59104156 48.68724442]
[101.67207336 63.54218674]
[103.75310516 78.39712524]
[105.83413696 93.25206757]
[118.78081512 91.34444427]
[132.43795776 99.81123352]
[141.35098267 111.87597656]
[150.26399231 123.94072723]
[165.88180542 124.72679901]
[177.30522156 135.40571594]
[179.14047241 150.93524170]
[170.52098083 163.98278809]
[155.51663208 168.38771057]
[141.21200562 162.07014465]
[134.36131287 148.01304626]
[138.19924927 132.85374451]
[129.28622437 120.78899384]
[120.37321472 108.72424316]
[105.83413696 112.41413879]
[103.75310516 127.26908112]
[101.67207336 142.12402344]
[99.59104156 156.97895813]
[97.51000214 171.83390808]
[95.42897034 186.68884277]
[93.34793854 201.54379272]
[91.26690674 216.39872742]
[103.42326355 225.78588867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 156]
[10 155]
[11 154]
[12 153]
[13 152]
[14 151]
[15 150]
[16 149]
[17 134]
[18 133]
[19 132]
[20 131]
[23 128]
[24 127]
[28 126]
[29 125]
[30 124]
[31 123]
[32 122]
[33 121]
[34 120]
[35 119]
[36 118]
[37 117]
[45 115]
[46 114]
[47 113]
[54 107]
[55 106]
[56 105]
[62 100]
[63 99]
[64 98]
[65 97]
[66 96]
[67 95]
[68 94]
[69 93]
[70 92]
[71 88]
[72 87]
[73 86]
[74 85]
[75 84]
[136 148]
[137 147]
[138 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
