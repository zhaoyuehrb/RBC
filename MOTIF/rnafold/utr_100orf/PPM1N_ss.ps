%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:19:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGGUCCUGGCCCGCCAGCUGCAGCGUCUCCUCUGGACCGCUUGCAAGAAAAAGGAGAGGGAGAAGGAGGGGAGGGAGGAAGAGGAGGAGGAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[87.24291992 190.60322571]
[87.71590424 175.61132812]
[78.23385620 187.23417664]
[68.75180817 198.85704041]
[59.26976395 210.47988892]
[49.78771591 222.10275269]
[40.30567169 233.72560120]
[43.41127396 249.05171204]
[35.89350510 262.76364136]
[21.30203056 268.38705444]
[6.52649355 263.26675415]
[-1.45654726 249.82037354]
[1.12225556 234.39689636]
[13.04526997 224.27880859]
[28.68281364 224.24356079]
[38.16485977 212.62071228]
[47.64690781 200.99784851]
[57.12895203 189.37500000]
[66.61100006 177.75213623]
[76.09304810 166.12927246]
[76.84555817 158.63981628]
[82.46765900 152.42797852]
[85.25087738 137.68844604]
[71.99752045 129.22013855]
[62.97309113 116.33901978]
[59.54045486 100.99037933]
[62.21800995 85.49217224]
[70.60139465 72.18493652]
[83.42455292 63.07832336]
[98.75092316 59.54761505]
[101.07439423 44.72865677]
[103.39787292 29.90970230]
[105.72134399 15.09074497]
[108.04481506 0.27178881]
[110.36828613 -14.54716778]
[112.69176483 -29.36612511]
[115.01523590 -44.18508148]
[101.85016632 -56.43492889]
[98.56723785 -73.95782471]
[106.27003479 -89.86367035]
[121.77897644 -98.00917816]
[123.17666626 -112.94392395]
[116.75891876 -127.40500641]
[125.64847565 -139.35595703]
[127.04616547 -154.29069519]
[128.44384766 -169.22543335]
[115.57856750 -177.51657104]
[108.05009460 -190.84251404]
[107.58843231 -206.14105225]
[114.29966736 -219.89671326]
[126.64160156 -228.94851685]
[141.77815247 -231.21646118]
[156.23103333 -226.17935181]
[166.67910767 -214.99470520]
[170.72148132 -200.23266602]
[167.42921448 -185.28543091]
[157.55888367 -173.58778381]
[143.37860107 -167.82774353]
[141.98091125 -152.89300537]
[140.58322144 -137.95826721]
[147.10093689 -124.56540680]
[138.11140442 -111.54623413]
[136.71371460 -96.61148834]
[147.06779480 -89.90194702]
[153.56488037 -79.32764435]
[154.88682556 -66.91418457]
[150.71397400 -55.07132721]
[141.79946899 -46.12523651]
[129.83419800 -41.86160660]
[127.51071930 -27.04265213]
[125.18724823 -12.22369480]
[122.86376953 2.59526157]
[120.54029846 17.41421890]
[118.21682739 32.23317337]
[115.89335632 47.05213165]
[113.56988525 61.87108612]
[125.82115936 68.83554077]
[134.94169617 79.57859802]
[139.82565308 92.79769135]
[139.88085938 106.89003754]
[135.10063171 120.14699554]
[126.06455231 130.96118164]
[113.86821747 138.02142334]
[99.99040985 140.47166443]
[97.20719147 155.21119690]
[108.37087250 145.19259644]
[122.13178253 139.22290039]
[137.07475281 137.91603088]
[151.66300964 141.40637207]
[164.39631653 149.33499146]
[173.96516418 160.88648987]
[179.38546753 174.87292480]
[180.09982300 189.85589600]
[176.03475952 204.29457092]
[167.60833740 216.70405579]
[155.68711853 225.80815125]
[141.49708557 230.67057800]
[126.49757385 230.79130554]
[112.23113251 226.15788269]
[100.16491699 217.24684143]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 20]
[3 19]
[4 18]
[5 17]
[6 16]
[7 15]
[22 85]
[23 84]
[30 76]
[31 75]
[32 74]
[33 73]
[34 72]
[35 71]
[36 70]
[37 69]
[41 63]
[42 62]
[44 60]
[45 59]
[46 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
