%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:39:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCACCACCUCCUGGAGCAGUCGGCGGACAUGGCGACCGCGCUGCUGGCGGGAGAGAAGCUGCGGGAGCUGAUCCUGCCGGGCGCGCAGGACGACAAGG\
) } def
/len { sequence length } bind def

/coor [
[92.35015869 130.48635864]
[96.55590057 116.08621979]
[87.07385254 127.70907593]
[77.59180450 139.33193970]
[74.86351776 154.91612244]
[60.82284546 159.88691711]
[51.34079742 171.50976562]
[41.85874939 183.13262939]
[42.04074860 199.17465210]
[29.52145958 209.20693970]
[13.90460777 205.53358459]
[7.17010736 190.97247314]
[14.48408985 176.69363403]
[30.23589516 173.65057373]
[39.71794128 162.02772522]
[49.19998550 150.40486145]
[51.25005722 135.65202332]
[65.96894836 129.84988403]
[75.45099640 118.22702789]
[84.93304443 106.60417175]
[80.34218597 92.32397461]
[65.86341095 88.40414429]
[51.38463211 84.48432159]
[36.90585709 80.56449127]
[21.56329155 84.42664337]
[11.30019760 73.63228607]
[-3.17857814 69.71245575]
[-18.88256836 74.43651581]
[-30.63866997 63.00296402]
[-26.35321236 47.17366028]
[-10.43470860 43.23243332]
[0.74125075 55.23368073]
[15.22002602 59.15351105]
[29.52697372 55.01098251]
[40.82568741 66.08571625]
[55.30446243 70.00554657]
[69.78324127 73.92536926]
[84.26201630 77.84519958]
[95.80479431 81.09877014]
[102.07653046 88.64156342]
[113.24449158 78.62773895]
[124.41245270 68.61391449]
[135.58041382 58.60009384]
[136.59629822 43.05642319]
[148.06484985 33.06007385]
[162.87710571 34.12435150]
[174.04505920 24.11052895]
[185.21302795 14.09670734]
[196.38098145 4.08288479]
[207.54895020 -5.93093729]
[218.71690369 -15.94475937]
[229.88487244 -25.95858192]
[241.05282593 -35.97240448]
[252.22079468 -45.98622513]
[250.53645325 -57.96749496]
[254.88026428 -69.13018799]
[264.03314209 -76.66773224]
[275.58349609 -78.74731445]
[286.56182861 -74.95446014]
[298.33074951 -84.25460815]
[310.09967041 -93.55474854]
[321.86856079 -102.85489655]
[325.15621948 -118.55746460]
[339.54708862 -125.64850616]
[354.00170898 -118.68836212]
[357.43173218 -103.01627350]
[347.20596313 -90.65451813]
[331.16873169 -91.08597565]
[319.39981079 -81.78583527]
[307.63088989 -72.48569489]
[295.86196899 -63.18555069]
[294.95614624 -45.03275681]
[280.94744873 -32.96495819]
[262.23461914 -34.81826401]
[251.06665039 -24.80444145]
[239.89869690 -14.79061985]
[228.73072815 -4.77679777]
[217.56277466 5.23702431]
[206.39480591 15.25084686]
[195.22685242 25.26466942]
[184.05888367 35.27849197]
[172.89091492 45.29231262]
[172.33950806 60.13251114]
[161.15626526 70.44704437]
[145.59423828 69.76805878]
[134.42626953 79.78187561]
[123.25831604 89.79570007]
[112.09034729 99.80952454]
[126.27690125 94.93698120]
[141.25839233 95.68198395]
[154.89154053 101.93795013]
[165.22598267 112.80990601]
[170.78326416 126.74248505]
[170.76832581 141.74247742]
[165.18333435 155.66397095]
[154.82728577 166.51533508]
[141.18170166 172.74415588]
[126.19876862 173.45933533]
[112.02194214 168.55857849]
[100.67937469 158.74295044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 20]
[3 19]
[4 18]
[6 16]
[7 15]
[8 14]
[21 38]
[22 37]
[23 36]
[24 35]
[26 33]
[27 32]
[40 88]
[41 87]
[42 86]
[43 85]
[46 82]
[47 81]
[48 80]
[49 79]
[50 78]
[51 77]
[52 76]
[53 75]
[54 74]
[59 71]
[60 70]
[61 69]
[62 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
