%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:27:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGGCCGCAUGGGCCGCCGGGAUGUGUAGUCCGCAGGAGUCCGGCAUGACCGCCUUGAGCGCGAGGAUGCUGACCCGGAGCCGGAGCCUGGGACCCGGGGCUGGGCCGCGGGGGUGUAGGG\
) } def
/len { sequence length } bind def

/coor [
[85.86042023 155.99790955]
[78.19513702 168.89146423]
[70.52986145 181.78500366]
[63.02985764 194.77537537]
[55.69636154 207.86048889]
[48.36286545 220.94558716]
[41.02936935 234.03068542]
[43.97765732 249.80050659]
[33.37795639 261.84317017]
[17.36145210 260.92059326]
[8.21463490 247.74047852]
[12.95415974 232.41349792]
[27.94426918 226.69718933]
[35.27776718 213.61209106]
[42.61126328 200.52699280]
[49.94475937 187.44187927]
[50.47639465 179.98210144]
[57.63631439 174.11972046]
[65.30159760 161.22618103]
[72.96687317 148.33262634]
[64.33709717 136.06369019]
[49.61146927 138.91955566]
[34.88584518 141.77542114]
[20.16022110 144.63128662]
[10.02781868 157.06970215]
[-6.01222610 156.75901794]
[-15.65536404 143.93757629]
[-11.50420475 128.44088745]
[3.25683713 122.15667725]
[17.30435371 129.90567017]
[32.02997971 127.04980469]
[46.75560379 124.19393158]
[61.48122787 121.33806610]
[66.50968170 84.02008820]
[94.75983429 70.27777863]
[95.90807343 55.32179260]
[97.05631256 40.36580658]
[98.20455170 25.40981865]
[90.38365936 15.05791092]
[91.71909332 2.55729771]
[100.94115448 -5.38292408]
[102.47097015 -20.30470848]
[104.00079346 -35.22649384]
[105.53060913 -50.14827728]
[107.06043243 -65.07006073]
[108.59024811 -79.99184418]
[101.56867981 -86.59154510]
[98.48461914 -95.57441711]
[99.92884827 -104.82111359]
[105.43949127 -112.21315002]
[113.63829041 -116.11824799]
[116.30587006 -130.87913513]
[118.97345734 -145.64002991]
[119.93061066 -160.60946655]
[119.16469574 -175.58990479]
[118.39878845 -190.57032776]
[117.63288116 -205.55076599]
[116.86697388 -220.53120422]
[107.50361633 -233.99446106]
[114.72537994 -248.71784973]
[131.10313416 -249.55520630]
[139.78884888 -235.64512634]
[131.84741211 -221.29710388]
[132.61331177 -206.31668091]
[133.37922668 -191.33624268]
[134.14512634 -176.35580444]
[134.91104126 -161.37538147]
[144.45320129 -172.94892883]
[158.68133545 -177.69869995]
[173.26234436 -174.17817688]
[183.75569153 -163.45951843]
[186.96569824 -148.80700684]
[181.91477966 -134.68298340]
[170.14114380 -125.38880920]
[155.23039246 -123.75497437]
[141.72348022 -130.27903748]
[133.73434448 -142.97245789]
[131.06677246 -128.21156311]
[128.39918518 -113.45066833]
[137.19639587 -94.85179138]
[123.51203156 -78.46202850]
[121.98221588 -63.54024124]
[120.45239258 -48.61845779]
[118.92257690 -33.69667435]
[117.39275360 -18.77488899]
[115.86293793 -3.85310459]
[123.91992950 11.68092728]
[113.16053772 26.55805779]
[112.01230621 41.51404572]
[110.86406708 56.47003174]
[109.71582794 71.42601776]
[126.13571930 78.81407928]
[136.84356689 95.58286285]
[136.66249084 117.37384033]
[123.62859344 137.15776062]
[136.00672913 145.63015747]
[148.38488770 154.10255432]
[160.76303101 162.57495117]
[176.52130127 163.98475647]
[182.65373230 177.55834961]
[195.03187561 186.03074646]
[207.41001892 194.50314331]
[223.89575195 198.46000671]
[224.65724182 215.39685059]
[208.59309387 220.81715393]
[198.93762207 206.88128662]
[186.55947876 198.40888977]
[174.18133545 189.93649292]
[159.30842590 189.13269043]
[152.29063416 174.95309448]
[139.91249084 166.48069763]
[127.53433990 158.00830078]
[115.15619659 149.53590393]
[107.83225250 151.15139771]
[114.63320923 164.52102661]
[125.91041565 174.41166687]
[127.64615631 189.31089783]
[118.94461060 201.52903748]
[104.29674530 204.76014709]
[91.26251984 197.33660889]
[86.56906128 183.08979797]
[92.63893890 169.37249756]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[4 16]
[5 15]
[6 14]
[7 13]
[21 33]
[22 32]
[23 31]
[24 30]
[35 91]
[36 90]
[37 89]
[38 88]
[41 86]
[42 85]
[43 84]
[44 83]
[45 82]
[46 81]
[51 79]
[52 78]
[53 77]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
[95 113]
[96 112]
[97 111]
[98 110]
[100 108]
[101 107]
[102 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
