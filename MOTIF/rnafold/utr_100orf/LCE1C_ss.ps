%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:06:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGAAGGACCCUGUGCUGCCUGUGACCCCGCUCCUGAAUCCGCCACCAAGAUGUCCUGCCAGCAGAGCCAGCAGCAGUGCCAGCCCCCUCCCAAGUGCACCCCCAAGUGCCCUCCCAAGUGCCCCACCCCAAAGUGUCCCCCAAAGUGUC\
) } def
/len { sequence length } bind def

/coor [
[88.49417114 302.95520020]
[87.56468964 287.98400879]
[86.63520813 273.01284790]
[71.33602142 264.29248047]
[64.22780609 248.01007080]
[68.30499268 230.55718994]
[82.13056183 218.90763855]
[80.58319092 203.98765564]
[79.03582001 189.06768799]
[77.48844910 174.14770508]
[68.47950745 162.28649902]
[74.75193024 147.76179504]
[73.20455933 132.84181213]
[64.23797607 120.81682587]
[50.37978363 115.07657623]
[36.52159119 109.33632660]
[22.66339684 103.59607697]
[8.80520439 97.85581970]
[-5.05298901 92.11557007]
[-18.91118240 86.37532043]
[-28.10149002 85.97300720]
[-32.99449539 80.37056732]
[-46.73109436 74.34513855]
[-60.46769333 68.31970978]
[-68.21154022 74.39744568]
[-77.59183502 77.18561554]
[-87.28225708 76.33460999]
[-95.92895508 72.00626373]
[-102.33968353 64.84522247]
[-105.64820099 55.88326263]
[-105.43109894 46.39076614]
[-118.62320709 39.25155258]
[-131.81530762 32.11234283]
[-145.00741577 24.97313118]
[-154.10719299 23.62491417]
[-158.39616394 17.54761124]
[-171.43789673 10.13728619]
[-182.10772705 16.78773689]
[-194.52375793 18.23683548]
[-206.30107117 14.26848984]
[-215.20391846 5.70127630]
[-219.57019043 -5.77953768]
[-218.62152100 -17.95326805]
[-231.34588623 -25.89621353]
[-251.46083069 -25.61762238]
[-259.92120361 -42.96368027]
[-272.96295166 -50.37400436]
[-288.13171387 -45.93736649]
[-301.95452881 -53.59931564]
[-306.23056030 -68.81414795]
[-298.42288208 -82.55518341]
[-283.16369629 -86.67009735]
[-269.50598145 -78.71759796]
[-265.55261230 -63.41574860]
[-252.51087952 -56.00542068]
[-242.86721802 -59.61015701]
[-232.62471008 -57.22870636]
[-225.25785828 -49.41889191]
[-223.40293884 -38.62058258]
[-210.67857361 -30.67763901]
[-194.69151306 -38.06166077]
[-177.30967712 -34.38534164]
[-165.47483826 -20.92566109]
[-164.02757263 -2.90445757]
[-150.98583984 4.50586843]
[-137.86820984 11.78102589]
[-124.67610168 18.92023659]
[-111.48399353 26.05944633]
[-98.29188538 33.19865799]
[-79.34814453 25.66706848]
[-60.68558884 34.56760788]
[-54.44226456 54.58310699]
[-40.70566177 60.60853958]
[-26.96906281 66.63397217]
[-13.17092991 72.51712799]
[0.68726265 78.25737762]
[14.54545593 83.99762726]
[28.40364838 89.73787689]
[42.26184082 95.47813416]
[56.12003326 101.21838379]
[69.97822571 106.95863342]
[60.56854248 95.27712250]
[48.13699341 86.88327789]
[39.19055939 74.84328461]
[34.74080276 60.51849747]
[35.29084396 45.52858353]
[40.77849960 31.56843948]
[50.58328247 20.21651268]
[63.59658051 12.75635052]
[78.34700012 10.03146076]
[93.16674042 12.34994411]
[106.38014984 19.44965172]
[116.49320984 30.52783203]
[122.36343384 44.33605576]
[112.95375061 56.01757050]
[126.81194305 50.27732086]
[136.60070801 37.84788895]
[151.32009888 40.12570572]
[165.17829895 34.38545609]
[179.03649902 28.64520264]
[192.89468384 22.90495110]
[198.71040344 8.20961571]
[213.24690247 2.00754094]
[227.87992859 7.97830820]
[233.92797852 22.57956696]
[227.80282593 37.14865112]
[213.13844299 43.04197693]
[198.63493347 36.76314545]
[184.77674866 42.50339508]
[170.91854858 48.24364853]
[157.06036377 53.98389816]
[148.26283264 66.00274658]
[132.55220032 64.13551331]
[118.69400024 69.87576294]
[118.61649323 77.37536621]
[132.92948914 72.88780212]
[141.62034607 85.11354828]
[132.67857361 97.15699768]
[118.46148682 92.37456512]
[118.38397980 99.87416077]
[132.12057495 105.89959717]
[145.85717773 111.92502594]
[162.79101562 112.75045776]
[166.68560791 129.25102234]
[151.90802002 137.56120300]
[139.83175659 125.66162109]
[126.09514618 119.63619232]
[112.35855103 113.61076355]
[106.30004883 118.03168488]
[118.45348358 126.82337952]
[113.84767914 141.09877014]
[98.84770966 141.12969971]
[94.18303680 126.87352753]
[88.12453461 131.29444885]
[89.67190552 146.21441650]
[98.79152679 159.14280701]
[92.40842438 172.60034180]
[93.95579529 187.52030945]
[95.50316620 202.44029236]
[97.05053711 217.36026001]
[108.66298676 222.17945862]
[117.05700684 231.44219971]
[120.67089081 243.33305359]
[118.87171173 255.55683899]
[112.06520844 265.78155518]
[101.60638428 272.08334351]
[102.53585815 287.05453491]
[103.46533966 302.02569580]
[112.97518921 315.38589478]
[105.91466522 330.18728638]
[89.54703522 331.20346069]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[7 140]
[8 139]
[9 138]
[10 137]
[12 135]
[13 134]
[14 81]
[15 80]
[16 79]
[17 78]
[18 77]
[19 76]
[20 75]
[22 74]
[23 73]
[24 72]
[31 69]
[32 68]
[33 67]
[34 66]
[36 65]
[37 64]
[43 60]
[44 59]
[46 55]
[47 54]
[95 114]
[96 113]
[98 111]
[99 110]
[100 109]
[101 108]
[120 128]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
