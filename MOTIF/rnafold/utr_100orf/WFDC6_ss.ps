%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACCGGGGCAGGCAAAGUGCAGAUGUAGGAGCUGCUGAGGAGCAGUUCUUAGUUUUGGUGCCAUCAACCAGGCCAGUACUUCCUAAAAUGGGACUCUCAGGACUUCUGCCAAUCCUGGUACCAUUCAUCCUUUUGGGGGACAUCCAGGAACCUGGGCACGCUGAAGGCAUCCUUGGCAAGCCGUGUC\
) } def
/len { sequence length } bind def

/coor [
[112.12029266 353.54760742]
[97.62132263 347.68978882]
[90.32547760 333.85852051]
[93.67763519 318.58444214]
[106.09500122 309.07955933]
[106.59357452 294.08782959]
[99.28358459 281.11041260]
[107.47530365 267.57504272]
[107.97387695 252.58334351]
[108.47245026 237.59162903]
[98.14041901 226.92463684]
[98.43247986 211.71380615]
[109.69106293 200.94894409]
[110.18963623 185.95722961]
[102.87963867 172.97982788]
[111.07135773 159.44444275]
[111.56993103 144.45274353]
[112.06850433 129.46102905]
[106.20477295 124.78485107]
[94.47729492 115.43250275]
[88.61356354 110.75633240]
[74.10866547 114.57837677]
[59.60377121 118.40041351]
[45.09887695 122.22245789]
[37.10918427 135.59416199]
[22.34471321 139.26364136]
[9.64606953 131.56428528]
[-4.85882568 135.38632202]
[-19.36371994 139.20837402]
[-33.86861420 143.03041077]
[-48.37351227 146.85244751]
[-62.87840652 150.67449951]
[-77.38330078 154.49653625]
[-91.88819885 158.31858826]
[-106.39308929 162.14062500]
[-120.89798737 165.96267700]
[-135.40287781 169.78471375]
[-146.65956116 181.71028137]
[-162.55111694 177.66172791]
[-166.72966003 161.80386353]
[-154.89668274 150.44990540]
[-139.22492981 155.27981567]
[-124.72003174 151.45777893]
[-110.21513367 147.63572693]
[-95.71024323 143.81369019]
[-81.20534515 139.99165344]
[-66.70044708 136.16960144]
[-52.19555283 132.34756470]
[-37.69065857 128.52551270]
[-23.18576431 124.70347595]
[-8.68086815 120.88143158]
[5.82402658 117.05938721]
[13.07963562 104.10208130]
[27.73521614 100.01936340]
[41.27683258 107.71756744]
[55.78172684 103.89552307]
[70.28662109 100.07347870]
[84.79151917 96.25143433]
[97.39190674 88.11324310]
[106.84140015 76.46390533]
[116.29089355 64.81455994]
[125.74037933 53.16522217]
[135.18986511 41.51588058]
[137.87454224 25.92411995]
[151.90126038 20.91406822]
[161.35075378 9.26472855]
[170.80024719 -2.38461161]
[163.62866211 -15.75786972]
[162.12756348 -30.81740952]
[166.49470520 -45.26530457]
[176.03479004 -56.90893936]
[189.26998901 -63.99373627]
[204.16876221 -65.46753693]
[218.45770264 -61.13675690]
[227.90718079 -72.78609467]
[237.35667419 -84.43544006]
[246.80616760 -96.08477783]
[245.05290222 -106.84368134]
[249.43009949 -116.58657837]
[258.26699829 -122.18531799]
[268.50650024 -121.98960114]
[278.33798218 -133.31842041]
[288.16946411 -144.64723206]
[298.00094604 -155.97605896]
[307.83239746 -167.30487061]
[292.83929443 -167.75895691]
[284.52609253 -180.24458313]
[289.88992310 -194.25276184]
[304.41613770 -197.99301147]
[315.87823486 -188.31712341]
[316.12753296 -203.31504822]
[316.37686157 -218.31298828]
[316.62619019 -233.31091309]
[310.84396362 -249.24835205]
[324.55786133 -259.21655273]
[337.93289185 -248.79803467]
[331.62411499 -233.06158447]
[331.37478638 -218.06365967]
[331.12548828 -203.06573486]
[330.87615967 -188.06781006]
[344.10864258 -181.00372314]
[356.43157959 -189.55624390]
[368.75448608 -198.10874939]
[371.68896484 -213.40667725]
[384.30798340 -221.90460205]
[398.87414551 -219.01277161]
[411.19708252 -227.56527710]
[423.51998901 -236.11778259]
[430.44567871 -250.34260559]
[445.31304932 -251.24287415]
[457.63598633 -259.79537964]
[469.95892334 -268.34790039]
[482.28182983 -276.90042114]
[482.07916260 -288.80975342]
[487.60195923 -299.22744751]
[497.37182617 -305.61218262]
[508.89102173 -306.47021484]
[519.28082275 -301.70336914]
[531.88122559 -309.84158325]
[531.03552246 -325.17715454]
[537.98522949 -338.87377930]
[550.86090088 -347.24707031]
[566.19903564 -348.04470825]
[579.87384033 -341.05209351]
[588.20672607 -328.15023804]
[588.95629883 -312.80963135]
[581.92083740 -299.15686035]
[568.99291992 -290.86444092]
[553.65002441 -290.16299438]
[540.01940918 -297.24118042]
[527.41900635 -289.10299683]
[524.66729736 -271.01864624]
[509.31860352 -260.49240112]
[490.83435059 -264.57748413]
[478.51141357 -256.02496338]
[466.18850708 -247.47245789]
[453.86557007 -238.91995239]
[447.82131958 -225.30685425]
[432.07250977 -223.79486084]
[419.74957275 -215.24235535]
[407.42666626 -206.68983459]
[405.04028320 -192.03239441]
[392.66491699 -183.18338013]
[377.30700684 -185.78582764]
[364.98406982 -177.23330688]
[352.66116333 -168.68080139]
[319.16122437 -157.47340393]
[309.32974243 -146.14457703]
[299.49829102 -134.81576538]
[289.66680908 -123.48694611]
[279.83532715 -112.15812683]
[277.58142090 -92.96480560]
[258.45550537 -86.63528442]
[249.00601196 -74.98594666]
[239.55653381 -63.33660507]
[230.10704041 -51.68726730]
[237.29226685 -38.59904099]
[238.92356873 -23.71669197]
[234.72137451 -9.30466652]
[225.29615784 2.43215203]
[212.05989075 9.68575859]
[197.01460266 11.32350922]
[182.44958496 7.06487942]
[173.00009155 18.71422005]
[163.55059814 30.36355972]
[161.54180908 45.12208176]
[146.83921814 50.96537399]
[137.38972473 62.61471176]
[127.94023132 74.26405334]
[118.49073792 85.91339111]
[109.04124451 97.56273651]
[123.85434723 107.02619171]
[127.06021881 129.95959473]
[126.56164551 144.95130920]
[126.06307220 159.94302368]
[133.33740234 173.99273682]
[125.18134308 186.45581055]
[124.68276978 201.44752502]
[135.20126343 212.93661499]
[134.48207092 228.13323975]
[123.46415710 238.09020996]
[122.96558380 253.08190918]
[122.46701050 268.07363892]
[129.74134827 282.12335205]
[121.58528900 294.58642578]
[121.08671570 309.57812500]
[132.84513855 319.88702393]
[135.17507935 335.35006714]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 186]
[6 185]
[8 183]
[9 182]
[10 181]
[13 178]
[14 177]
[16 175]
[17 174]
[18 173]
[21 58]
[22 57]
[23 56]
[24 55]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
[59 171]
[60 170]
[61 169]
[62 168]
[63 167]
[65 165]
[66 164]
[67 163]
[74 156]
[75 155]
[76 154]
[77 153]
[81 151]
[82 150]
[83 149]
[84 148]
[85 147]
[90 100]
[91 99]
[92 98]
[93 97]
[101 146]
[102 145]
[103 144]
[106 141]
[107 140]
[108 139]
[110 137]
[111 136]
[112 135]
[113 134]
[118 131]
[119 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
