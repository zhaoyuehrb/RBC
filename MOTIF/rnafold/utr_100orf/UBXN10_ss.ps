%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGCCCGGGAGACCAGGGUUGUUUACCAGCAGGACAGAGCCCGGGCGCAGGCGGCGGAUGGAGCGGAACGGCUAGGGGUCUUGAGAAGCAAUGGCCACAGAAGCCCCUGUGAAUAUAGCACCACCUGAGUGUAGCACUGUUGUCAGCACAGCAGUUGACAGCCUCAUUUGGCAGCCAAACUCACUAAAUA\
) } def
/len { sequence length } bind def

/coor [
[140.24452209 303.02935791]
[136.59982300 288.47891235]
[132.95510864 273.92843628]
[129.31040955 259.37796021]
[125.66571045 244.82749939]
[122.02100372 230.27702332]
[106.61096954 224.64083862]
[97.50080109 210.79457092]
[98.44227600 194.08047485]
[109.26230621 181.08958435]
[105.38002014 166.60069275]
[101.49773407 152.11180115]
[80.36546326 130.54977417]
[81.11751556 107.97451782]
[68.64546967 116.30807495]
[61.46965790 130.40837097]
[46.58870697 131.04592896]
[34.11666107 139.37948608]
[21.64461708 147.71304321]
[9.17257309 156.04658508]
[-3.29947162 164.38014221]
[-1.66189241 178.28071594]
[-6.15512419 191.46669006]
[-15.84731579 201.38034058]
[-28.80410767 206.12474060]
[-42.47452164 204.82658386]
[-54.19316483 197.79627991]
[-66.79989624 205.92465210]
[-73.80734253 220.75123596]
[-90.17123413 221.82604980]
[-99.05779266 208.04341125]
[-91.32529449 193.58172607]
[-74.92826843 193.31793213]
[-62.32154083 185.18954468]
[-63.51086807 169.08181763]
[-56.37779236 154.48617554]
[-42.78215408 145.42361450]
[-26.37829399 144.44372559]
[-11.63302517 151.90809631]
[0.83901918 143.57455444]
[13.31106377 135.24099731]
[25.78310776 126.90744019]
[38.25514984 118.57388306]
[44.53887939 105.06966400]
[60.31191635 103.83602905]
[72.78395844 95.50247192]
[76.07048035 80.86694336]
[68.35894012 68.00101471]
[60.64739609 55.13508606]
[52.93585587 42.26915359]
[45.22431183 29.40322685]
[37.51277161 16.53729630]
[30.40501022 10.77372074]
[29.78229523 3.39716792]
[22.28229523 -9.59321308]
[14.78229523 -22.58359337]
[-0.52376211 -24.32450867]
[-11.73873711 -34.62391281]
[-14.70352268 -49.37769318]
[-8.48659801 -62.88650131]
[-15.98659801 -75.87688446]
[-35.09696198 -74.37052155]
[-52.01289368 -92.58747864]
[-63.76219559 -101.91238403]
[-75.51149750 -111.23729706]
[-91.18161011 -109.18231201]
[-103.66408539 -118.87577820]
[-105.55328369 -134.56674194]
[-95.72837830 -146.94604492]
[-80.01831818 -148.66923523]
[-67.74359131 -138.71400452]
[-66.18658447 -122.98659515]
[-54.43728638 -113.66168976]
[-42.68798447 -104.33677673]
[-36.45196152 -108.50355530]
[-37.43304062 -123.47143555]
[-23.97991753 -116.83711243]
[-17.74389648 -121.00389099]
[-21.86272430 -135.42730713]
[-25.98155403 -149.85073853]
[-30.10038376 -164.27416992]
[-34.33707428 -178.66342163]
[-38.69134521 -193.01751709]
[-43.04561615 -207.37162781]
[-56.45957565 -216.17192078]
[-57.79916382 -232.15895081]
[-46.03676605 -243.06883240]
[-30.19548035 -240.53244019]
[-22.42739296 -226.49546814]
[-28.69151115 -211.72589111]
[-24.33724022 -197.37179565]
[-19.98296928 -183.01768494]
[-15.02477169 -177.52062988]
[-15.67695618 -168.39299011]
[-11.55812740 -153.96957397]
[-7.43929815 -139.54614258]
[-3.32046890 -125.12271881]
[7.50475931 -100.86197662]
[-2.99621725 -83.37688446]
[4.50378275 -70.38649750]
[19.31121445 -69.01611328]
[30.60597038 -59.07164001]
[33.91802979 -44.20948792]
[27.77267647 -30.08359337]
[35.27267838 -17.09321213]
[42.77267838 -4.10283184]
[50.37870026 8.82575607]
[58.09024429 21.69168472]
[65.80178070 34.55761337]
[73.51332855 47.42354202]
[81.22486877 60.28947067]
[88.93640900 73.15540314]
[96.21163940 74.97775269]
[92.09272003 60.55435181]
[102.52423096 49.77549744]
[117.07476807 53.41993332]
[121.19395447 67.84326172]
[110.76210785 78.62245178]
[118.03734589 80.44480896]
[130.90327454 72.73326874]
[134.85154724 57.66512680]
[148.00929260 50.02780533]
[162.35012817 53.88474655]
[175.21604919 46.17320633]
[188.08198547 38.46166611]
[195.57080078 23.87229538]
[211.96109009 23.33346939]
[220.39193726 37.39948654]
[212.19039917 51.60043335]
[195.79353333 51.32759476]
[182.92759705 59.03913498]
[170.06166077 66.75067902]
[166.70295715 81.21631622]
[153.76493835 89.22019196]
[138.61482239 85.59919739]
[125.74888611 93.31073761]
[126.84936523 100.72956085]
[140.79963684 106.24227142]
[129.05032349 115.56720734]
[130.15080261 122.98603058]
[144.70126343 126.63073730]
[159.25173950 130.27543640]
[173.80220032 133.92013550]
[188.35267639 137.56483459]
[202.90313721 141.20954895]
[217.45361328 144.85424805]
[232.00408936 148.49894714]
[246.55455017 152.14364624]
[259.97979736 143.80467224]
[275.35018921 147.48249817]
[283.54675293 160.99514771]
[279.70663452 176.32580566]
[266.10806274 184.37905884]
[250.81887817 180.37705994]
[242.90985107 166.69412231]
[228.35937500 163.04942322]
[213.80891418 159.40470886]
[199.25843811 155.76000977]
[184.70797729 152.11531067]
[170.15750122 148.47061157]
[155.60704041 144.82591248]
[141.05656433 141.18119812]
[126.50609589 137.53649902]
[115.98662567 148.22952271]
[119.86891174 162.71841431]
[123.75119781 177.20729065]
[136.95953369 181.17993164]
[146.40217590 191.08460999]
[149.68737793 204.25735474]
[146.05990601 217.22756958]
[136.57147217 226.63232422]
[140.21617126 241.18278503]
[143.86088562 255.73326111]
[147.50558472 270.28372192]
[151.15028381 284.83419800]
[154.79498291 299.38467407]
[169.87457275 300.92800903]
[183.51554871 307.53857422]
[194.07069397 318.41812134]
[200.26541138 332.25292969]
[201.35168457 347.37231445]
[197.19833374 361.95056152]
[188.30688477 374.22726440]
[175.75102234 382.72000122]
[161.04695129 386.40316772]
[145.97023010 384.83206177]
[132.34146118 378.19635010]
[121.80638885 367.29736328]
[115.63716888 353.45120239]
[114.57875824 338.32983398]
[118.75897217 323.75924683]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 176]
[2 175]
[3 174]
[4 173]
[5 172]
[6 171]
[10 166]
[11 165]
[12 164]
[14 46]
[15 45]
[17 43]
[18 42]
[19 41]
[20 40]
[21 39]
[27 34]
[28 33]
[47 112]
[48 111]
[49 110]
[50 109]
[51 108]
[52 107]
[54 106]
[55 105]
[56 104]
[60 100]
[61 99]
[63 74]
[64 73]
[65 72]
[78 97]
[79 96]
[80 95]
[81 94]
[82 92]
[83 91]
[84 90]
[119 136]
[120 135]
[123 132]
[124 131]
[125 130]
[140 163]
[141 162]
[142 161]
[143 160]
[144 159]
[145 158]
[146 157]
[147 156]
[148 155]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
