%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUAACUUUUCUGCCCAUCAUUUUUUCCAUUCUAAUAGUGGUUAUAUUUGUUAUUGGAAAUUUUGCUAAUGGCUUCAUAGCAUUGGUAAAUUCCAUUG\
) } def
/len { sequence length } bind def

/coor [
[73.24112701 127.33286285]
[77.92704773 113.08358002]
[90.53811646 104.95951843]
[76.18824768 100.59129333]
[61.83838272 96.22307587]
[47.48851776 91.85485077]
[33.13865280 87.48663330]
[18.78878593 83.11841583]
[10.09698391 95.48409271]
[-1.97501194 104.54551697]
[-16.23740005 109.42533875]
[-31.28934860 109.65756226]
[-45.65657806 105.23203278]
[-57.93576431 96.59417725]
[-66.93161011 84.60022736]
[-71.77318573 70.43232727]
[-71.99826050 55.48206711]
[-86.34812927 51.11384583]
[-100.69799042 46.74562454]
[-115.04785919 42.37740707]
[-130.50311279 45.76054001]
[-140.42553711 34.65222168]
[-154.77540588 30.28400230]
[-169.12527466 25.91578293]
[-179.83096313 36.85409546]
[-194.39724731 41.55327225]
[-209.47686768 38.93347549]
[-221.60467529 29.59671402]
[-227.99375916 15.68850994]
[-227.17596436 0.40486467]
[-219.33921814 -12.74215126]
[-206.28434753 -20.73144913]
[-191.01126099 -21.72714806]
[-177.02960205 -15.50044441]
[-167.55226135 -3.48218656]
[-164.75704956 11.56591606]
[-150.40718079 15.93413734]
[-136.05732727 20.30235672]
[-121.62846375 16.60677910]
[-110.67963409 28.02754021]
[-96.32977295 32.39575958]
[-81.97990417 36.76398087]
[-67.63004303 41.13220215]
[-59.11307144 28.84309006]
[-47.19853592 19.77589989]
[-33.04563522 14.82862186]
[-18.03626060 14.49763775]
[-3.64004350 18.82794380]
[8.72952080 27.40750694]
[17.85387230 39.40644836]
[22.82941818 53.65728760]
[23.15700531 68.76854706]
[37.50687027 73.13676453]
[51.85673904 77.50498962]
[66.20660400 81.87320709]
[80.55647278 86.24143219]
[94.90633392 90.60964966]
[109.64586639 93.39286804]
[124.60053253 94.55812836]
[139.55520630 95.72338104]
[154.50987244 96.88864136]
[160.89701843 94.27645111]
[166.72172546 95.26763153]
[170.34854126 98.61979675]
[185.20184326 100.71252441]
[200.05514526 102.80525208]
[214.90844727 104.89798737]
[229.76173401 106.99071503]
[244.61503601 109.08344269]
[259.46832275 111.17617798]
[274.32162476 113.26890564]
[289.17492676 115.36163330]
[304.02822876 117.45436859]
[313.14431763 115.53350067]
[319.30810547 119.85010529]
[334.08914185 122.40376282]
[349.28463745 116.23696899]
[362.05496216 126.52535248]
[359.26309204 142.68510437]
[343.78109741 148.09245300]
[331.53549194 137.18478394]
[316.75445557 134.63113403]
[301.93551636 132.30766296]
[287.08221436 130.21493530]
[272.22891235 128.12220764]
[257.37561035 126.02947235]
[242.52230835 123.93674469]
[227.66900635 121.84401703]
[212.81570435 119.75128174]
[197.96241760 117.65855408]
[183.10911560 115.56582642]
[168.25581360 113.47309113]
[153.34461975 111.84330750]
[138.38995361 110.67805481]
[123.43527985 109.51279449]
[108.48060608 108.34753418]
[117.26048279 120.50952148]
[116.42865753 135.48643494]
[106.35597229 146.60133362]
[91.53299713 148.89901733]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 57]
[4 56]
[5 55]
[6 54]
[7 53]
[8 52]
[17 43]
[18 42]
[19 41]
[20 40]
[22 38]
[23 37]
[24 36]
[58 96]
[59 95]
[60 94]
[61 93]
[64 92]
[65 91]
[66 90]
[67 89]
[68 88]
[69 87]
[70 86]
[71 85]
[72 84]
[73 83]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
