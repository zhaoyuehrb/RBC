%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:56:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGUCGGGAGUGCCAUGGUGCCAGCUGGGGAUCAAGACCGCGCGCCACACAGGGGGAAGCCGGCCCAGGCUGGGGCUCGCACCUCACGUGCCUCCCGGGCCCUGCGAUCCUGGA\
) } def
/len { sequence length } bind def

/coor [
[91.03813171 307.42620850]
[75.28598022 306.14355469]
[65.11832428 294.04418945]
[66.56744385 278.30648804]
[78.77362061 268.26730347]
[79.99099731 253.31680298]
[81.20838165 238.36628723]
[82.42575836 223.41575623]
[83.64314270 208.46524048]
[84.86051941 193.51472473]
[78.18167114 180.20149231]
[87.01345825 167.07479858]
[88.23083496 152.12426758]
[89.44821930 137.17375183]
[74.92710876 129.40371704]
[64.96034241 116.29265594]
[61.35832596 100.22213745]
[46.62707138 97.39545441]
[31.89581680 94.56877899]
[17.16456223 91.74209595]
[2.43330622 88.91542053]
[-12.29794884 86.08873749]
[-18.86717224 87.95185089]
[-24.49886322 86.36113739]
[-27.74064636 82.68954468]
[-42.29726410 79.06947327]
[-51.51783752 80.03565216]
[-57.19638443 75.14926147]
[-71.64963531 71.13633728]
[-83.08961487 81.48671722]
[-98.31309509 83.98654938]
[-112.46231842 77.83813477]
[-121.02232361 65.00341797]
[-121.26164246 49.57791519]
[-113.10389709 36.48383713]
[-99.15221405 29.89946175]
[-83.85851288 31.92584038]
[-72.10295868 41.91636276]
[-67.63671112 56.68308640]
[-53.18345642 60.69601059]
[-38.67719650 64.51285553]
[-24.12057686 68.13292694]
[-9.47126865 71.35748291]
[5.25998640 74.18416595]
[19.99124146 77.01084137]
[34.72249603 79.83752441]
[49.45375061 82.66419983]
[64.18500519 85.49088287]
[67.52067566 79.06386566]
[71.99682617 73.37199402]
[77.45628357 68.61514282]
[83.70734406 64.96034241]
[90.53050232 62.53592682]
[97.68617249 61.42702484]
[99.71117401 46.56434250]
[101.73616791 31.70165634]
[90.43609619 21.06737900]
[87.57789612 5.81580973]
[94.26061249 -8.18850803]
[107.91460419 -15.56062984]
[123.28962708 -13.46582508]
[134.47367859 -2.70958734]
[137.16625977 12.57208920]
[130.33201599 26.50308800]
[116.59885406 33.72665787]
[114.57385254 48.58934021]
[112.54885101 63.45202637]
[128.05413818 73.42570496]
[137.17375183 89.44821930]
[152.12426758 88.23083496]
[167.07479858 87.01345825]
[182.02531433 85.79607391]
[195.15200806 76.96429443]
[208.46524048 83.64314270]
[223.41575623 82.42575836]
[238.36628723 81.20838165]
[245.90336609 69.94972229]
[258.38232422 65.19748688]
[271.12075806 68.49295807]
[279.47747803 78.40199280]
[294.45547485 77.58991241]
[309.43347168 76.77783203]
[324.41146851 75.96574402]
[336.15200806 65.03232574]
[351.99832153 67.53697205]
[359.79452515 81.55834961]
[353.56002808 96.34044647]
[338.07736206 100.54370117]
[325.22357178 90.94374847]
[310.24557495 91.75582886]
[295.26757812 92.56791687]
[280.28955078 93.37999725]
[269.67291260 106.34529877]
[252.63418579 107.71173096]
[239.58366394 96.15889740]
[224.63314819 97.37627411]
[209.68263245 98.59365845]
[197.62528992 107.33836365]
[183.24269104 100.74658966]
[168.29217529 101.96397400]
[153.34165955 103.18135071]
[138.39114380 104.39873505]
[132.70649719 120.57944489]
[120.57944489 132.70649719]
[104.39873505 138.39114380]
[103.18135071 153.34165955]
[101.96397400 168.29217529]
[108.55574799 182.67477417]
[99.81104279 194.73210144]
[98.59365845 209.68263245]
[97.37627411 224.63314819]
[96.15889740 239.58366394]
[94.94151306 254.53417969]
[93.72413635 269.48471069]
[104.14534760 281.36636353]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 114]
[6 113]
[7 112]
[8 111]
[9 110]
[10 109]
[12 107]
[13 106]
[14 105]
[17 48]
[18 47]
[19 46]
[20 45]
[21 44]
[22 43]
[25 42]
[26 41]
[28 40]
[29 39]
[54 67]
[55 66]
[56 65]
[69 102]
[70 101]
[71 100]
[72 99]
[74 97]
[75 96]
[76 95]
[80 92]
[81 91]
[82 90]
[83 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
