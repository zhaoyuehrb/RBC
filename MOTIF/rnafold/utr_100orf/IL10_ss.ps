%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:33:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACAUCAGGGGCUUGCUCUUGCAAAACCAAACCACAAGACAGACUUGCAAAAGAAGGCAUGCACAGCUCAGCACUGCUCUGUUGCCUGGUCCUCCUGACUGGGGUGAGGGCCAGCCCAGGCCAGGGCACCCAGUCUGAGAACAGCUGCACCCACUUCC\
) } def
/len { sequence length } bind def

/coor [
[106.29897308 331.45675659]
[91.50106812 328.08236694]
[78.92359924 319.58697510]
[70.26755524 307.11950684]
[66.70359802 292.36611938]
[68.71372986 277.32205200]
[76.02608490 264.02191162]
[87.65174103 254.26441956]
[102.01840973 249.36920166]
[102.60730743 234.38076782]
[103.19620514 219.39233398]
[103.63793182 204.39883423]
[103.93243408 189.40173340]
[95.76217651 180.43734741]
[95.91617584 167.90777588]
[104.85887146 158.56614685]
[105.44776917 143.57771301]
[106.03666687 128.58927917]
[83.60509491 127.83649445]
[66.16963196 110.39678192]
[51.40323639 113.03372955]
[36.63683701 115.67066956]
[21.87043762 118.30761719]
[7.10403967 120.94455719]
[-7.66235876 123.58150482]
[-9.29015732 138.59906006]
[-15.08422565 152.54916382]
[-24.57486725 164.30094910]
[-36.99271393 172.90174866]
[-51.33111191 177.65432739]
[-66.42771149 178.17343140]
[-81.05869293 174.41696167]
[-94.03798676 166.68943787]
[-104.31343079 155.61732483]
[-111.05203247 142.09814453]
[-113.70752716 127.22787476]
[-112.06464386 112.21196747]
[-106.25656128 98.26768494]
[-96.75411987 86.52544403]
[-84.32763672 77.93712616]
[-69.98447418 73.19895172]
[-54.88736725 72.69501495]
[-40.26016617 76.46618652]
[-27.28863525 84.20673370]
[-17.02432060 95.28917694]
[-10.29930305 108.81510162]
[4.46709538 106.17816162]
[19.23349380 103.54121399]
[33.99989319 100.90427399]
[48.76629257 98.26732635]
[63.53268814 95.63038635]
[67.38845825 89.19741821]
[54.52265167 81.48567963]
[62.23458862 68.61998749]
[75.09999847 76.33148956]
[78.95577240 69.89852905]
[74.32051849 55.63267899]
[69.68526459 41.36682892]
[65.05001068 27.10098267]
[60.41475296 12.83513451]
[54.75822830 5.59534597]
[55.83151627 -1.75651586]
[51.47724533 -16.11062050]
[47.12297440 -30.46472549]
[35.71286011 -41.42464828]
[39.42246628 -55.84990692]
[35.06819534 -70.20401001]
[30.71392441 -84.55812073]
[16.00972939 -89.51455688]
[7.05458021 -102.18676758]
[7.29191494 -117.70202637]
[16.63047218 -130.09440613]
[31.47938728 -134.59877014]
[46.12894821 -129.48310852]
[54.94610214 -116.71450043]
[54.54047012 -101.20272827]
[45.06803131 -88.91238403]
[49.42229843 -74.55828094]
[53.77656937 -60.20417786]
[64.87523651 -50.27095795]
[61.47708130 -34.81899643]
[65.83135223 -20.46489143]
[70.18562317 -6.11078596]
[74.68060303 8.19987965]
[79.31585693 22.46572685]
[83.95111084 36.73157501]
[88.58636475 50.99742508]
[93.22161865 65.26326752]
[121.87867737 76.23055267]
[129.04330444 103.20536041]
[143.90184021 101.15017700]
[156.51176453 91.59505463]
[170.17912292 97.51558685]
[185.03765869 95.46040344]
[199.89619446 93.40522003]
[208.31631470 83.58994293]
[220.77046204 82.20856476]
[230.49249268 89.46082306]
[245.38851929 87.69776154]
[260.28454590 85.93470764]
[275.18057251 84.17164612]
[290.07659912 82.40858459]
[304.97262573 80.64552307]
[319.86865234 78.88246155]
[334.74664307 76.97324371]
[349.60519409 74.91806030]
[356.98260498 61.39475250]
[370.74749756 54.88464737]
[385.53149414 57.69487000]
[395.70410156 68.54180908]
[410.56265259 66.48662567]
[425.42117310 64.43143463]
[440.27972412 62.37625504]
[449.61746216 49.62548065]
[465.24893188 47.29470444]
[477.90026855 56.76672745]
[480.06564331 72.42197418]
[470.46038818 84.97245789]
[454.78314209 86.97219849]
[442.33489990 77.23479462]
[427.47637939 79.28997803]
[412.61782837 81.34516144]
[397.75927734 83.40035248]
[390.91290283 96.60129547]
[377.44677734 103.31898499]
[362.43157959 100.78964996]
[351.66036987 89.77660370]
[336.80184937 91.83178711]
[330.57464600 95.88441467]
[321.63171387 93.77848816]
[306.73568726 95.54154968]
[291.83966064 97.30461121]
[276.94363403 99.06767273]
[262.04760742 100.83073425]
[247.15158081 102.59378815]
[232.25555420 104.35684967]
[218.81321716 115.60385895]
[201.95138550 108.26376343]
[187.09284973 110.31894684]
[172.23429871 112.37413025]
[160.68716431 121.78225708]
[145.95703125 116.00872040]
[131.09849548 118.06390381]
[121.02510834 129.17817688]
[120.43621063 144.16661072]
[119.84731293 159.15504456]
[128.80480957 175.21621704]
[118.92954254 189.69622803]
[118.63504028 204.69334412]
[121.60738373 213.38677979]
[118.18464661 219.98123169]
[117.59574890 234.96966553]
[117.00685120 249.95809937]
[130.94515991 255.96542358]
[141.76940918 266.60498047]
[148.01571655 280.43783569]
[148.83929443 295.59323120]
[144.12879944 310.02151489]
[134.52125549 321.77139282]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 153]
[10 152]
[11 151]
[12 149]
[13 148]
[16 146]
[17 145]
[18 144]
[20 51]
[21 50]
[22 49]
[23 48]
[24 47]
[25 46]
[56 88]
[57 87]
[58 86]
[59 85]
[60 84]
[62 83]
[63 82]
[64 81]
[66 79]
[67 78]
[68 77]
[90 143]
[91 142]
[93 140]
[94 139]
[95 138]
[98 136]
[99 135]
[100 134]
[101 133]
[102 132]
[103 131]
[104 130]
[105 128]
[106 127]
[110 123]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
