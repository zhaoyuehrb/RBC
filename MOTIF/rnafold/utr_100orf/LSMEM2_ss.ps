%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUUUUAGGCCAAGGCUGGGAGGCAGCCAGGCCUUCCCUGGGCUCACAAAGGAGCCACUGCUGCAUUUGUCCAGUCCUGCUACUGGAUGCCAUCAUUGGCCCCCGACUGCCCACUGCUUGCCAUGCCUGAGGAGACCCAAGAAGACUCCGUGGCGCCAAUGAUGCCCAGCCAGAGGAGCAGGGGGC\
) } def
/len { sequence length } bind def

/coor [
[133.58499146 179.20979309]
[136.06385803 194.00355530]
[130.51167297 207.93815613]
[118.53824615 216.97346497]
[103.61508179 218.48980713]
[90.06896973 212.04753113]
[81.82742310 199.51451111]
[81.27939606 184.52687073]
[71.40492249 195.81823730]
[61.53045273 207.10958862]
[51.65597916 218.40095520]
[41.78150558 229.69230652]
[41.86014557 242.60325623]
[33.38658905 251.80657959]
[21.31283951 252.73014832]
[11.25106812 263.85491943]
[1.18929756 274.97970581]
[-8.87247372 286.10449219]
[-18.93424416 297.22927856]
[-19.56961441 313.25973511]
[-32.58366776 322.64132690]
[-47.99313736 318.17724609]
[-53.97719574 303.29202271]
[-45.94538498 289.40426636]
[-30.05902672 287.16751099]
[-19.99725533 276.04272461]
[-9.93548393 264.91793823]
[0.12628695 253.79315186]
[10.18805790 242.66838074]
[12.93445206 225.34419250]
[30.49014664 219.81784058]
[40.36462021 208.52647400]
[50.23909378 197.23512268]
[60.11356735 185.94377136]
[69.98803711 174.65240479]
[71.88668823 164.13078308]
[82.42001343 158.35697937]
[90.70138550 145.85021973]
[98.98276520 133.34347534]
[95.71251678 126.59399414]
[89.17201233 113.09503937]
[85.90176392 106.34555817]
[70.95409393 105.09371948]
[56.00642014 103.84188080]
[41.05875015 102.59004211]
[26.11107635 101.33821106]
[14.20543003 111.73200989]
[-1.55678940 110.57963562]
[-11.82413673 98.56476593]
[-10.50517750 82.81560516]
[1.61757457 72.67586517]
[17.35190392 74.16125488]
[27.36291504 86.39053345]
[42.31058502 87.64237213]
[57.25825882 88.89421082]
[72.20593262 90.14604950]
[87.15360260 91.39788818]
[90.08152008 84.49301147]
[81.04982758 72.51684570]
[95.93736267 70.68326569]
[98.86528015 63.77838898]
[87.57392120 53.90391541]
[76.28256226 44.02944183]
[64.99120331 34.15496826]
[49.89200211 37.73179245]
[35.58709717 31.71936607]
[27.57701492 18.42958450]
[28.94180107 2.97264576]
[39.15666580 -8.70794487]
[54.29378128 -12.12076187]
[68.53262329 -5.95350647]
[76.39806366 7.42238569]
[74.86567688 22.86361122]
[86.15703583 32.73808289]
[97.44839478 42.61255646]
[108.73975372 52.48703003]
[123.50944519 55.10546494]
[137.50715637 49.71434784]
[151.50486755 44.32323074]
[165.50257874 38.93211365]
[179.50028992 33.54100037]
[193.49798584 28.14988136]
[205.42221069 11.91253948]
[224.37362671 15.69219971]
[238.18336487 9.83636093]
[251.99311829 3.98052168]
[265.80285645 -1.87531757]
[275.48742676 -14.38610172]
[290.22534180 -12.23134708]
[304.03509521 -18.08718681]
[314.76602173 -33.04012680]
[332.08172607 -30.24074936]
[345.79168701 -36.32653046]
[359.50164795 -42.41230774]
[373.21163940 -48.49808884]
[386.92160034 -54.58386993]
[400.63156128 -60.66965103]
[414.34155273 -66.75543213]
[428.05151367 -72.84120941]
[441.76147461 -78.92698669]
[455.47143555 -85.01277161]
[440.53887939 -86.43345642]
[428.98471069 -95.99909210]
[424.80175781 -110.40405273]
[429.43554688 -124.67038727]
[441.28472900 -133.86802673]
[456.25457764 -134.81854248]
[469.17193604 -127.19345093]
[475.57290649 -113.62777710]
[473.24533081 -98.80912018]
[482.54156494 -110.58110809]
[482.10479736 -126.61821747]
[494.46316528 -136.84808350]
[510.13641357 -133.42323303]
[517.10131836 -118.97091675]
[510.01504517 -104.57772064]
[494.31356812 -101.28485870]
[485.01730347 -89.51287079]
[488.62167358 -82.93574524]
[495.83041382 -69.78149414]
[499.43478394 -63.20437241]
[514.35943604 -64.70581055]
[529.28411865 -66.20724487]
[544.20880127 -67.70867920]
[559.13342285 -69.21011353]
[574.05810547 -70.71154785]
[578.32470703 -73.78720856]
[582.88812256 -74.80326843]
[586.90924072 -73.99415588]
[589.76550293 -71.89494324]
[604.74664307 -72.64659882]
[619.72778320 -73.39826202]
[624.80090332 -87.72766876]
[634.97521973 -99.02157593]
[648.69915771 -105.55773926]
[663.88000488 -106.33943939]
[678.20269775 -101.24747467]
[689.48321533 -91.05834198]
[696.00134277 -77.32579041]
[696.76306152 -62.14395523]
[691.65228271 -47.82794571]
[681.44830322 -36.56084824]
[667.70715332 -30.06081581]
[652.52435303 -29.31905556]
[638.21508789 -34.44868088]
[626.96142578 -44.66746521]
[620.47949219 -58.41711044]
[605.49829102 -57.66544724]
[590.51715088 -56.91378403]
[575.55957031 -55.78688431]
[560.63488770 -54.28544617]
[545.71020508 -52.78401184]
[530.78552246 -51.28257751]
[515.86090088 -49.78113937]
[500.93621826 -48.27970505]
[461.55722046 -71.30280304]
[447.84725952 -65.21701813]
[434.13729858 -59.13124084]
[420.42730713 -53.04545975]
[406.71734619 -46.95967865]
[393.00738525 -40.87389755]
[379.29739380 -34.78812027]
[365.58743286 -28.70233917]
[351.87747192 -22.61655998]
[338.16751099 -16.53077888]
[333.52075195 -5.34882832]
[322.13201904 -0.17201236]
[309.89093018 -4.27743816]
[296.08120728 1.57840097]
[287.38439941 13.67033577]
[271.65869141 11.93443108]
[257.84896851 17.79026985]
[244.03921509 23.64610863]
[230.22946167 29.50194740]
[227.25541687 39.30324173]
[219.20166016 45.98144913]
[208.58218384 47.13745499]
[198.88911438 42.14759064]
[184.89140320 47.53870773]
[170.89369202 52.92982483]
[156.89598083 58.32094193]
[142.89826965 63.71205902]
[128.90055847 69.10317230]
[111.48951721 141.62484741]
[103.20813751 154.13160706]
[94.92675781 166.63835144]
[109.52909851 163.20735168]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 35]
[9 34]
[10 33]
[11 32]
[12 31]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[37 186]
[38 185]
[39 184]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[61 76]
[62 75]
[63 74]
[64 73]
[77 183]
[78 182]
[79 181]
[80 180]
[81 179]
[82 178]
[84 174]
[85 173]
[86 172]
[87 171]
[89 169]
[90 168]
[92 165]
[93 164]
[94 163]
[95 162]
[96 161]
[97 160]
[98 159]
[99 158]
[100 157]
[101 156]
[110 118]
[111 117]
[121 155]
[122 154]
[123 153]
[124 152]
[125 151]
[126 150]
[130 149]
[131 148]
[132 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
