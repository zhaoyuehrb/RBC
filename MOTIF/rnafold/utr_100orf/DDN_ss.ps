%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:59:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGUGGGGUGGGGCAGGAUGCUGGAUGGCCCACUGUUCUCCGAGGGGCCUGACAGCCCCCGGGAGCUCCAGGAUGAGGAGUCUGGCAGCUGCCUCUGGGUGCAGAAGUCCAAGCUAU\
) } def
/len { sequence length } bind def

/coor [
[107.82604218 144.48982239]
[94.22677612 150.81912231]
[80.62751770 157.14843750]
[67.02825928 163.47773743]
[63.94888306 178.57156372]
[52.70368958 188.83796692]
[37.74643707 190.49462891]
[24.83628464 183.11451721]
[11.23702240 189.44381714]
[-2.36223936 195.77311707]
[-15.96150112 202.10243225]
[-29.56076241 208.43173218]
[-43.16002655 214.76103210]
[-52.40672302 227.59883118]
[-67.21026611 225.95437622]
[-80.80953217 232.28367615]
[-82.07942200 247.58998108]
[-90.84551239 260.20153809]
[-104.74977112 266.72589111]
[-120.05201721 265.40802002]
[-132.63603210 256.60244751]
[-139.11677551 242.67781067]
[-137.75094604 227.37977600]
[-128.90597534 214.82342529]
[-114.96108246 208.38635254]
[-99.66739655 209.80012512]
[-87.13883209 218.68441772]
[-73.53957367 212.35511780]
[-65.26558685 199.97003174]
[-49.48932648 201.16177368]
[-35.89006805 194.83247375]
[-22.29080391 188.50315857]
[-8.69154263 182.17385864]
[4.90771961 175.84455872]
[18.50698090 169.51525879]
[21.17343712 154.88555908]
[32.07208252 144.50848389]
[47.16781235 142.51542664]
[60.69895172 149.87847900]
[74.29821777 143.54916382]
[87.89747620 137.21986389]
[101.49674225 130.89056396]
[79.59564972 120.29924011]
[73.40126801 98.57347870]
[84.58395386 80.96831512]
[79.16532898 66.98123169]
[73.74670410 52.99414825]
[68.32807922 39.00706482]
[62.90945053 25.01997948]
[48.35236740 18.86637497]
[42.48770905 4.19049978]
[48.79487610 -10.30071163]
[63.53193665 -16.00987816]
[77.95565033 -9.54985523]
[83.50868988 5.24674225]
[76.89653015 19.60135460]
[82.31516266 33.58843994]
[87.73378754 47.57552338]
[93.15241241 61.56260681]
[98.57103729 75.54969025]
[121.00978851 81.93344116]
[130.25550842 106.40867615]
[142.68615723 98.01348877]
[149.79208374 83.87784576]
[164.66969299 83.16663361]
[177.10032654 74.77144623]
[189.53097534 66.37625885]
[201.96160889 57.98106766]
[214.28036499 49.42253494]
[226.48506165 40.70214081]
[238.68975830 31.98174858]
[250.89447021 23.26135635]
[263.09918213 14.54096413]
[263.08740234 -0.97610676]
[272.22579956 -13.51680279]
[287.00048828 -18.25897026]
[301.73028564 -13.37914848]
[310.75128174 -0.75372958]
[310.59472656 14.76255608]
[301.32083130 27.20337868]
[286.49554443 31.78499031]
[271.81954956 26.74566650]
[259.61486816 35.46605682]
[247.41015625 44.18645096]
[235.20545959 52.90684509]
[223.00074768 61.62723541]
[219.34184265 68.15793610]
[210.35679626 70.41171265]
[197.92616272 78.80690002]
[185.49552917 87.20208740]
[173.06488037 95.59727478]
[166.84808350 109.13243103]
[151.08134460 110.44412994]
[138.65069580 118.83931732]
[138.65069580 133.83932495]
[151.08134460 142.23451233]
[163.51197815 150.62969971]
[175.94262695 159.02488708]
[192.33030701 159.63804626]
[199.75285339 174.26124573]
[190.57458496 187.85136414]
[174.23731995 186.42807007]
[167.54743958 171.45552063]
[155.11679077 163.06033325]
[142.68615723 154.66514587]
[130.25550842 146.26995850]
[137.13955688 159.59700012]
[146.84782410 171.03157043]
[150.93457031 185.46412659]
[148.66253662 200.29104614]
[140.44160461 212.83761597]
[127.75481415 220.84045410]
[112.89083099 222.85585022]
[98.53107452 218.52024841]
[87.26602173 208.61576843]
[81.12785339 194.92918396]
[81.22389221 179.92948914]
[87.53680420 166.32260132]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[4 39]
[8 35]
[9 34]
[10 33]
[11 32]
[12 31]
[13 30]
[15 28]
[16 27]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[62 94]
[63 93]
[65 91]
[66 90]
[67 89]
[68 88]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
