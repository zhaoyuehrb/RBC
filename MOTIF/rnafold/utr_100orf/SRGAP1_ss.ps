%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAACGGGUUGUGACCACUGAACAAAACUUGCCCAUUGAAAGCAAACCCGGAACAGCUGGAUAAUGUCCACCCCGAGCCGAUUCAAGAAGGACAAAGAGAUCAUAGCCGAGUAUGAAAGUCAAGUCAAAGAAAUUCGAGCUCAACUGGUAGAACAACAAAAAU\
) } def
/len { sequence length } bind def

/coor [
[46.35486603 230.33947754]
[39.93414688 216.78314209]
[37.16127777 202.04165649]
[38.21755981 187.07890320]
[43.03393173 172.87316895]
[51.29306412 160.35610962]
[38.02656937 167.35612488]
[24.76007462 174.35614014]
[11.49358177 181.35614014]
[-1.77291262 188.35615540]
[-15.03940678 195.35617065]
[-28.23866081 202.48214722]
[-41.36947632 209.73347473]
[-43.40148544 225.00360107]
[-53.91254425 236.02046204]
[-68.72009277 238.70381165]
[-82.10809326 232.23083496]
[-95.23890686 239.48214722]
[-103.57903290 252.92657471]
[-118.46070862 252.30607605]
[-131.59152222 259.55740356]
[-136.07067871 274.47634888]
[-149.49047852 281.64315796]
[-163.68582153 277.28103638]
[-176.81663513 284.53234863]
[-189.94744873 291.78369141]
[-200.88990784 304.73355103]
[-216.36286926 297.80361938]
[-213.98709106 281.01693726]
[-197.19877625 278.65286255]
[-184.06796265 271.40155029]
[-170.93713379 264.15023804]
[-167.06852722 249.81253052]
[-153.85530090 242.27160645]
[-138.84284973 246.42657471]
[-125.71202850 239.17526245]
[-118.31110382 226.24948120]
[-102.49022675 226.35133362]
[-89.35941315 219.10000610]
[-87.70735168 204.32135010]
[-77.54964447 193.21797180]
[-62.62712860 190.18946838]
[-48.62079620 196.60264587]
[-35.48997879 189.35133362]
[-31.13506126 183.33772278]
[-22.03941727 182.08967590]
[-8.77292252 175.08966064]
[4.49357128 168.08964539]
[17.76006508 161.08964539]
[31.02655983 154.08963013]
[44.29305267 147.08961487]
[45.58962250 143.23770142]
[48.41235352 139.80302429]
[52.59471512 137.38772583]
[57.73704147 136.51715088]
[67.66742706 125.27493286]
[77.59780884 114.03271484]
[73.57642365 99.24514008]
[78.43545532 84.71125793]
[69.16307068 72.92045593]
[59.89068604 61.12966156]
[50.61830139 49.33886337]
[41.34591675 37.54806900]
[26.80207253 28.83526802]
[31.14823532 12.44785881]
[48.09835815 12.08768559]
[53.13671494 28.27568436]
[62.40909958 40.06647873]
[71.68148041 51.85727692]
[80.95387268 63.64807129]
[90.22625732 75.43887329]
[95.92210388 73.88207245]
[101.82143402 73.62847137]
[107.62987518 74.69070435]
[113.05760956 77.01578522]
[117.83382416 80.48769379]
[130.67906189 72.74173737]
[143.52429199 64.99577332]
[156.36953735 57.24981308]
[169.14044189 49.38191605]
[181.83587646 41.39279938]
[194.53131104 33.40368271]
[190.74075317 19.49059105]
[191.03102112 5.08924294]
[195.36953735 -8.62940884]
[203.39489746 -20.55246353]
[214.44702148 -29.71535110]
[227.62138367 -35.37985992]
[241.84306335 -37.09361649]
[255.95449829 -34.72618866]
[268.80960083 -28.47896957]
[279.36688232 -18.86808586]
[292.21212769 -26.61404610]
[305.05737305 -34.36000824]
[306.77719116 -47.74613953]
[315.77230835 -57.54473877]
[328.58190918 -60.31821442]
[340.46572876 -55.27015305]
[353.45611572 -62.77015305]
[357.65597534 -79.72956848]
[372.51818848 -88.25638580]
[388.63177490 -83.51264954]
[401.47702026 -91.25860596]
[414.32226562 -99.00457001]
[427.16748047 -106.75053406]
[440.01272583 -114.49649048]
[443.56802368 -129.89569092]
[457.01498413 -138.19961548]
[472.37573242 -134.48170471]
[480.53701782 -120.94771576]
[476.65692139 -105.62713623]
[463.03738403 -97.60938263]
[447.75869751 -101.65126038]
[434.91345215 -93.90529633]
[422.06820679 -86.15933228]
[409.22299194 -78.41337585]
[396.37774658 -70.66741180]
[395.05187988 -57.82411957]
[386.43154907 -47.95150375]
[373.50555420 -44.81415558]
[360.95611572 -49.77977371]
[347.96572876 -42.27977371]
[344.32867432 -25.88090134]
[329.67968750 -16.99274254]
[312.80331421 -21.51477432]
[299.95809937 -13.76881123]
[287.11285400 -6.02284956]
[290.81967163 9.17372227]
[289.65469360 24.79187012]
[283.71969604 39.30625916]
[273.58285522 51.29564667]
[260.22448730 59.58205032]
[244.94215393 63.34648132]
[229.22463989 62.20988083]
[214.60696411 56.27123642]
[202.52043152 46.09911728]
[189.82499695 54.08823395]
[177.12956238 62.07735062]
[173.12506104 68.32976532]
[164.11549377 70.09504700]
[151.27026367 77.84101105]
[138.42501831 85.58696747]
[125.57978821 93.33293152]
[123.21221161 112.64785767]
[108.26576233 125.10881042]
[88.84002686 123.96310425]
[78.90964508 135.20532227]
[68.97925568 146.44754028]
[83.09425354 141.37142944]
[98.03512573 140.04089355]
[112.82498169 142.54292297]
[126.49680328 148.71392822]
[138.15667725 158.15042114]
[147.04223633 170.23539734]
[152.57249451 184.17872620]
[154.38587952 199.06871033]
[152.36381531 213.93179321]
[146.63850403 227.79617310]
[137.58432007 239.75534058]
[125.79322815 249.02734375]
[112.03619385 255.00596619]
[97.21269226 257.30029297]
[82.29195404 255.76031494]
[68.24954987 250.48672485]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 51]
[7 50]
[8 49]
[9 48]
[10 47]
[11 46]
[12 44]
[13 43]
[17 39]
[18 38]
[20 36]
[21 35]
[24 32]
[25 31]
[26 30]
[55 148]
[56 147]
[57 146]
[59 71]
[60 70]
[61 69]
[62 68]
[63 67]
[76 143]
[77 142]
[78 141]
[79 140]
[80 138]
[81 137]
[82 136]
[92 127]
[93 126]
[94 125]
[98 122]
[99 121]
[102 117]
[103 116]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
