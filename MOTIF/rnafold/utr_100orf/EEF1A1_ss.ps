%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:21:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUUCGCAACGGGUUUGCCGCCAGAACACAGGUGUCGUGAAAACUACCCCUAAAAGCCAAAAUGGGAAAGGAAAAGACUCAUAUCAACAUUGUCGUCAUUGGACACGUAGAUUCGGGCAAGUCCACCACUACUGGCCAUCUGAUCUAUAAAUGCGGUGGCA\
) } def
/len { sequence length } bind def

/coor [
[210.43028259 122.07759094]
[195.45504761 122.93914032]
[180.47981262 123.80068970]
[165.50456238 124.66223907]
[150.52932739 125.52378082]
[135.55409241 126.38533020]
[120.57885742 127.24687958]
[107.75932312 135.03530884]
[100.09403992 147.92884827]
[92.42876434 160.82238770]
[84.76348114 173.71592712]
[87.30806732 189.55590820]
[76.40427399 201.32394409]
[60.41655350 199.99263000]
[51.60932159 186.58322144]
[56.73873138 171.38227844]
[71.86993408 166.05065918]
[79.53521729 153.15710449]
[87.20050049 140.26356506]
[94.86577606 127.37001801]
[84.56828308 116.46306610]
[71.25576019 123.37513733]
[57.94322968 130.28720093]
[44.63070679 137.19926453]
[42.45405579 152.56291199]
[31.63841629 163.68952942]
[16.34261703 166.30070496]
[2.44820809 159.39236450]
[-4.70212793 145.62094116]
[-2.35894108 130.28179932]
[8.57676601 119.27317047]
[23.89999008 116.82808685]
[37.71863937 123.88674164]
[51.03116608 116.97467804]
[64.34368896 110.06260681]
[77.65621948 103.15054321]
[76.08750916 95.81643677]
[72.95010376 81.14821625]
[71.38139343 73.81410217]
[56.40615845 72.95256042]
[42.00772858 80.80222321]
[28.15339279 72.02786255]
[29.09530258 55.65578842]
[43.86450195 48.52818298]
[57.26770782 57.97731781]
[72.24294281 58.83886719]
[74.97982025 51.85606384]
[65.62187958 40.13305283]
[80.45356750 37.89046097]
[83.19043732 30.90765953]
[71.61810303 21.36402321]
[60.04576111 11.82038593]
[46.43431091 18.65033722]
[31.22133827 19.34704781]
[17.04258919 13.78980541]
[6.35461330 2.94143820]
[1.00916982 -11.31851006]
[1.93238783 -26.51941681]
[8.96431446 -40.02763367]
[20.88662529 -49.50277710]
[35.63370895 -53.30322647]
[50.65054321 -50.77052689]
[63.33537292 -42.34348679]
[71.49047089 -29.48213768]
[73.70291901 -14.41479015]
[69.58940125 0.24804796]
[81.16173553 9.79168415]
[92.73407745 19.33532143]
[129.81269836 40.50177002]
[144.36970520 72.67699432]
[137.66589355 100.08953094]
[119.71730804 112.27164459]
[134.69255066 111.41009521]
[149.66778564 110.54854584]
[164.64302063 109.68699646]
[179.61825562 108.82545471]
[194.59349060 107.96390533]
[209.56874084 107.10235596]
[196.26318359 100.17687225]
[185.66609192 89.56077576]
[178.76443481 76.24284363]
[176.20106506 61.46349335]
[178.21470642 46.59926605]
[184.61781311 33.03459930]
[194.81401062 22.03289413]
[207.85363770 14.61883736]
[222.52218628 11.48296833]
[237.45344543 12.91736031]
[251.25672913 18.78841400]
[262.64642334 28.54930687]
[270.56167603 41.29091644]
[274.26528931 55.82649994]
[273.41232300 70.80222321]
[268.08218384 84.82327271]
[258.77136230 96.58373260]
[246.34701538 104.98824310]
[231.96560669 109.25411987]
[246.50288391 112.95105743]
[261.04016113 116.64800262]
[275.57745361 120.34494019]
[290.11474609 124.04187775]
[304.65203857 127.73882294]
[319.18930054 131.43576050]
[329.03375244 119.82333374]
[342.88735962 113.66181183]
[357.98062134 114.12436676]
[371.32147217 121.06571198]
[380.28860474 133.06155396]
[383.14630127 147.70050049]
[397.68359375 151.39744568]
[412.22085571 155.09439087]
[426.75814819 158.79133606]
[441.29544067 162.48826599]
[455.83270264 166.18521118]
[470.36999512 169.88215637]
[486.22616577 159.58079529]
[504.27957153 164.01707458]
[513.24310303 179.93980408]
[527.91137695 183.07722473]
[542.57958984 186.21463013]
[557.69281006 181.53492737]
[568.52026367 191.76312256]
[583.18847656 194.90054321]
[597.85668945 198.03794861]
[609.31097412 187.56993103]
[624.73431396 185.86724854]
[638.19622803 193.58459473]
[644.52020264 207.75450134]
[641.27465820 222.92835999]
[629.70751953 233.27149963]
[614.26660156 234.80677795]
[600.88922119 226.94384766]
[594.71929932 212.70617676]
[580.05108643 209.56875610]
[565.38287354 206.43135071]
[551.31872559 211.33546448]
[539.44213867 200.88284302]
[524.77392578 197.74543762]
[510.10571289 194.60803223]
[502.05773926 202.77131653]
[490.94772339 206.04937744]
[479.52273560 203.51036072]
[470.66683960 195.67599487]
[466.67306519 184.41943359]
[452.13577271 180.72248840]
[437.59848022 177.02555847]
[423.06121826 173.32861328]
[408.52392578 169.63166809]
[393.98663330 165.93473816]
[379.44934082 162.23779297]
[369.94552612 173.73312378]
[356.33712769 179.98783875]
[341.30099487 179.71269226]
[327.82043457 172.90870667]
[318.59332275 160.87759399]
[315.49237061 145.97305298]
[300.95507812 142.27610779]
[286.41781616 138.57916260]
[271.88052368 134.88221741]
[257.34323120 131.18528748]
[242.80595398 127.48834229]
[228.26866150 123.79140472]
[223.01051331 126.33363342]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 75]
[5 74]
[6 73]
[7 72]
[8 20]
[9 19]
[10 18]
[11 17]
[21 36]
[22 35]
[23 34]
[24 33]
[39 46]
[40 45]
[50 68]
[51 67]
[52 66]
[97 162]
[98 161]
[99 160]
[100 159]
[101 158]
[102 157]
[103 156]
[109 150]
[110 149]
[111 148]
[112 147]
[113 146]
[114 145]
[115 144]
[118 139]
[119 138]
[120 137]
[122 135]
[123 134]
[124 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
