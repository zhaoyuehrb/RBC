%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:46:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCCAUAAACAUAGUCAUCAGAAGCCUACUCAGCUCAUGAUUCAGCCUAUGGCGUCACCCAGCAACAGCUCCACUGUCCCAGUCUCUGAAUUCCUCCUCAUCUGCUUCCCCAACUUCCAGAGUUGGCAGCACUGGC\
) } def
/len { sequence length } bind def

/coor [
[88.30661774 187.83929443]
[90.93526459 168.63667297]
[91.27671051 153.64056396]
[91.61815643 138.64445496]
[83.98777771 136.88288879]
[76.73270416 133.60577393]
[70.15539551 128.89424133]
[64.54054260 122.89002991]
[60.14286804 115.79148865]
[57.17588425 107.84720612]
[55.80197525 99.34741974]
[40.94168854 101.38991547]
[26.08139801 103.43241882]
[11.22110844 105.47491455]
[-3.63918066 107.51741791]
[-14.79035473 124.13298035]
[-34.24630737 127.28101349]
[-49.59111786 115.39900970]
[-64.27738190 118.45085144]
[-78.96363831 121.50269318]
[-93.64990234 124.55453491]
[-102.33360291 137.48631287]
[-117.27103424 140.37210083]
[-129.54600525 132.01382446]
[-144.23226929 135.06567383]
[-158.91851807 138.11750793]
[-166.16285706 151.97584534]
[-180.63992310 157.88757324]
[-195.51411438 153.06132507]
[-203.76226807 139.77592468]
[-201.48988342 124.30432892]
[-189.76989746 113.95175171]
[-174.13612366 113.60636139]
[-161.97036743 123.43124390]
[-147.28410339 120.37940979]
[-132.59783936 117.32756805]
[-124.66905212 104.77089691]
[-109.81857300 101.46669006]
[-96.70174408 109.86827087]
[-82.01548004 106.81642914]
[-67.32921600 103.76458740]
[-52.64295959 100.71275330]
[-49.47748566 90.79295349]
[-42.39144897 83.05286407]
[-32.63911819 78.96331024]
[-21.98945045 79.33989716]
[-12.40530968 84.18132782]
[-5.68168068 92.65712738]
[9.17860889 90.61463165]
[24.03889847 88.57212830]
[38.89918900 86.52963257]
[53.75947571 84.48712921]
[60.66044998 71.16885376]
[53.75947571 57.85057449]
[38.39764023 55.66112900]
[27.28003883 44.83622360]
[24.68161392 29.53825760]
[31.60151482 15.64960670]
[45.37889481 8.51074314]
[60.71607590 10.86670494]
[71.71559143 21.81157684]
[74.14791107 37.13683319]
[67.07775116 50.94959641]
[73.97872925 64.26787567]
[85.96379852 60.54969406]
[97.85655975 60.51513290]
[99.89905548 45.65484619]
[101.94155884 30.79455566]
[103.98405457 15.93426609]
[95.47497559 2.33371139]
[100.93869019 -12.75030041]
[116.18389893 -17.74660683]
[129.51579285 -8.82246780]
[130.70727539 7.17627907]
[118.84434509 17.97676659]
[116.80184937 32.83705521]
[114.75934601 47.69734573]
[112.71685028 62.55763245]
[120.85541534 63.39400864]
[129.09088135 66.03896332]
[137.01826477 70.54918671]
[147.00436401 59.35643387]
[156.99047852 48.16368103]
[163.02354431 32.31948471]
[179.91865540 33.73066711]
[183.23965454 50.35617065]
[168.18322754 58.14978027]
[158.19712830 69.34253693]
[148.21102905 80.53529358]
[148.89303589 88.00421906]
[163.02275085 82.96924591]
[177.15248108 77.93426514]
[187.74165344 67.31027222]
[202.37896729 64.03166962]
[216.48832703 69.12343597]
[225.65870667 80.99374390]
[227.02316284 95.93155670]
[220.15513611 109.26685333]
[207.20176697 116.83060455]
[192.21269226 116.25815582]
[179.87297058 107.72723389]
[165.06501770 105.33465576]
[150.25706482 102.94207001]
[150.93907166 110.41099548]
[162.78720093 119.61000061]
[174.63534546 128.80900574]
[186.48348999 138.00799561]
[197.28689575 136.01727295]
[207.18035889 140.25949097]
[212.94451904 149.08839417]
[212.85197449 159.41127014]
[224.26914978 169.14001465]
[235.68632507 178.86874390]
[247.10348511 188.59747314]
[258.52066040 198.32620239]
[269.93783569 208.05493164]
[281.35501099 217.78366089]
[297.33242798 223.45449829]
[296.30618286 240.37736511]
[279.76058960 244.07595825]
[271.62628174 229.20083618]
[260.20910645 219.47210693]
[248.79193115 209.74337769]
[237.37475586 200.01464844]
[225.95758057 190.28590393]
[214.54042053 180.55717468]
[203.12324524 170.82844543]
[183.94204712 168.82321167]
[177.28448486 149.85614014]
[165.43634033 140.65713501]
[153.58821106 131.45812988]
[141.74006653 122.25913239]
[131.34065247 131.89663696]
[119.16770172 137.51728821]
[106.61427307 138.98590088]
[106.27281952 153.98200989]
[105.93137360 168.97813416]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 137]
[3 136]
[4 135]
[11 52]
[12 51]
[13 50]
[14 49]
[15 48]
[18 42]
[19 41]
[20 40]
[21 39]
[24 36]
[25 35]
[26 34]
[53 64]
[54 63]
[66 78]
[67 77]
[68 76]
[69 75]
[81 89]
[82 88]
[83 87]
[104 132]
[105 131]
[106 130]
[107 129]
[111 127]
[112 126]
[113 125]
[114 124]
[115 123]
[116 122]
[117 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
