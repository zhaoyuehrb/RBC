%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:14:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGGUUGCAGGAGGACUUGAACUUGGAGCUGCUGCUCUGCUCUCAGCAUCACCACGUGCUCUUGUCACUCUUUCCACAGGUCCUACUUGCUCUAUAU\
) } def
/len { sequence length } bind def

/coor [
[84.41122437 442.05490112]
[69.65990448 438.63769531]
[56.81873703 430.61376953]
[47.28063965 418.85354614]
[42.08023453 404.63262939]
[41.78161621 389.49362183]
[46.41718292 375.07867432]
[55.48410034 362.95144653]
[67.99885559 354.42736816]
[82.60394287 350.43112183]
[83.53648376 335.46014404]
[84.46903229 320.48916626]
[85.40157318 305.51815796]
[86.33412170 290.54718018]
[87.03372955 275.56350708]
[87.50022125 260.57077026]
[87.96672058 245.57801819]
[88.43321991 230.58528137]
[88.89971924 215.59252930]
[89.36621857 200.59979248]
[89.83271790 185.60704041]
[90.29920959 170.61430359]
[68.74633026 164.06007385]
[50.31534195 151.10693359]
[36.84730911 133.04878235]
[29.68754005 111.68942261]
[29.55121613 89.16240692]
[36.45195389 67.71795654]
[23.86766243 59.55489349]
[11.28337097 51.39183044]
[-1.30092120 43.22876740]
[-13.88521290 35.06570435]
[-30.28145027 34.75674820]
[-37.97409058 20.27381897]
[-29.04960632 6.51570749]
[-12.68874073 7.63558292]
[-5.72215033 22.48141289]
[6.86214161 30.64447594]
[19.44643402 38.80753708]
[32.03072739 46.97060013]
[44.61501694 55.13366318]
[52.28536606 47.04909515]
[61.12211990 40.25893402]
[70.90925598 34.92916870]
[81.40752411 31.19008446]
[92.36029816 29.13308716]
[103.49982452 28.80845833]
[114.55380249 30.22413445]
[119.14466095 15.94393826]
[123.73551941 1.66374207]
[128.32637024 -12.61645508]
[132.91723633 -26.89665031]
[125.47641754 -40.83974457]
[130.15409851 -55.93593216]
[144.17507935 -63.22891617]
[159.22096252 -58.39189911]
[166.36531067 -44.29459763]
[161.36947632 -29.30068779]
[147.19743347 -22.30579185]
[142.60656738 -8.02559566]
[138.01571655 6.25460100]
[133.42485046 20.53479767]
[128.83399963 34.81499481]
[138.60734558 40.08374405]
[147.44387817 46.80636215]
[155.12918091 54.81972504]
[161.47679138 63.92938614]
[166.33265686 73.91430664]
[169.57896423 84.53218842]
[171.13693237 95.52539825]
[170.96876526 106.62718964]
[169.07853699 117.56816864]
[165.51211548 128.08285522]
[160.35604858 137.91610718]
[153.73544312 146.82933044]
[145.81094360 154.60624695]
[136.77484131 161.05813599]
[126.84640503 166.02844238]
[116.26653290 169.39657593]
[105.29195404 171.08079529]
[104.82546234 186.07354736]
[104.35896301 201.06628418]
[103.89246368 216.05903625]
[103.42596436 231.05177307]
[102.95946503 246.04452515]
[102.49296570 261.03726196]
[102.02647400 276.02999878]
[104.92644501 284.88342285]
[101.30510712 291.47973633]
[100.37255859 306.45071411]
[99.44001770 321.42169189]
[98.50746918 336.39266968]
[97.57492828 351.36367798]
[111.57118225 357.14151001]
[122.93137360 367.15274048]
[130.42323303 380.31143188]
[133.23408508 395.19018555]
[131.05905151 410.17510986]
[124.13404083 423.64074707]
[113.21024323 434.12640381]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 93]
[11 92]
[12 91]
[13 90]
[14 89]
[15 87]
[16 86]
[17 85]
[18 84]
[19 83]
[20 82]
[21 81]
[22 80]
[28 41]
[29 40]
[30 39]
[31 38]
[32 37]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
