%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:42:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUGAUGGUUGCCCCAUUUGGACAAUGUGAUAAUGUAGCAGGAAUGCAGAAAUCAUGACUUUGGUUUCUUUUUUCUCUUUCCUCUCCAAGCCAUUGAUAAUGCUCCUUAGCAAUUCAAGCUGGAGGCUAUCCCAGCCUUCUUUUCUCCUGGUAG\
) } def
/len { sequence length } bind def

/coor [
[140.31292725 217.79341125]
[134.15672302 204.11491394]
[130.03599548 201.59884644]
[127.48306274 196.44061279]
[128.04043579 189.75946045]
[122.44001770 175.84416199]
[116.83959198 161.92887878]
[111.23917389 148.01359558]
[105.63874817 134.09829712]
[100.03833008 120.18301392]
[85.85883331 115.28997040]
[72.86845398 122.78997040]
[59.87807083 130.28996277]
[55.68377686 145.29148865]
[42.40284348 152.71250916]
[28.12703323 148.62144470]
[15.13665295 156.12144470]
[2.14627147 163.62144470]
[-10.84410954 171.12144470]
[-12.58502483 186.42749023]
[-22.88442993 197.64247131]
[-37.63821030 200.60725403]
[-51.14701462 194.39033508]
[-64.13739777 201.89033508]
[-74.83132172 215.04618835]
[-90.43340302 208.41207886]
[-88.37765503 191.58323669]
[-71.63739777 188.89994812]
[-58.64701462 181.39994812]
[-57.27662659 166.59251404]
[-47.33215714 155.29776001]
[-32.47000122 151.98570251]
[-18.34411049 158.13105774]
[-5.35372829 150.63105774]
[7.63665247 143.13105774]
[20.62703323 135.63105774]
[24.22197151 121.22231293]
[37.28922653 113.43119049]
[52.37807083 117.29959106]
[65.36845398 109.79959106]
[78.35883331 102.29959106]
[80.61579895 87.47035980]
[70.44488525 76.44527435]
[60.27397156 65.42018890]
[50.10305405 54.39510345]
[34.78850937 56.05970383]
[21.58464813 48.47607422]
[15.45067883 34.73422623]
[18.54759598 20.18956566]
[8.37668133 9.16448212]
[-1.79423332 -1.86060274]
[-11.96514797 -12.88568687]
[-22.13606262 -23.91077232]
[-32.30697632 -34.93585587]
[-42.47789383 -45.96094131]
[-52.64880753 -56.98602676]
[-68.44838715 -57.37189102]
[-79.28687286 -68.87418365]
[-78.73398590 -84.66880035]
[-67.11774445 -95.38507080]
[-51.32985687 -94.66522217]
[-40.73699951 -82.93633270]
[-41.62372208 -67.15693665]
[-31.45280838 -56.13185501]
[-21.28189278 -45.10676956]
[-11.11097908 -34.08168793]
[-0.94006371 -23.05660248]
[9.23085117 -12.03151798]
[19.40176582 -1.00643313]
[29.57268143 10.01865101]
[44.31937408 8.10213470]
[57.52308273 15.32197285]
[64.01965332 29.09324837]
[61.12813950 44.22418594]
[71.29905701 55.24927139]
[81.46997070 66.27435303]
[91.64088440 77.29943848]
[88.00077057 62.74782181]
[89.75739288 47.85103607]
[100.91219330 37.82255173]
[115.91126251 37.65548706]
[127.28666687 47.43302536]
[129.37464905 62.28699112]
[121.13435364 74.82262421]
[112.57071686 87.13782501]
[125.99023438 80.43585205]
[139.40975952 73.73387146]
[152.82926941 67.03189087]
[166.24879456 60.32991791]
[172.57279968 53.65748215]
[180.00669861 53.63116455]
[193.55845642 47.20077515]
[197.67901611 41.91215515]
[203.05303955 39.85186005]
[207.78784180 40.79664993]
[221.58753967 34.91714859]
[235.38723755 29.03765106]
[249.18692017 23.15815163]
[252.75942993 10.13596821]
[263.04153442 1.68663406]
[276.12039185 0.73448414]
[287.18386841 7.40434551]
[301.09915161 1.80392373]
[315.01443481 -3.79649806]
[328.92971802 -9.39692020]
[338.61196899 -22.63272667]
[354.88424683 -20.59681511]
[361.00704956 -5.38355637]
[350.68176270 7.35695314]
[334.53015137 4.51836920]
[320.61486816 10.11879158]
[306.69958496 15.71921253]
[292.78427124 21.31963539]
[286.88449097 37.04099655]
[271.14093018 43.78937531]
[255.06642151 36.95784378]
[241.26672363 42.83734131]
[227.46704102 48.71684265]
[213.66734314 54.59634018]
[199.98884583 60.75253296]
[186.43708801 67.18292236]
[172.95077515 73.74943542]
[159.53125000 80.45141602]
[146.11172485 87.15338898]
[132.69221497 93.85536957]
[119.27268982 100.55734253]
[113.95362091 114.58258820]
[119.55403900 128.49787903]
[125.15446472 142.41316223]
[130.75488281 156.32846069]
[136.35530090 170.24374390]
[141.95573425 184.15904236]
[147.83522034 197.95872498]
[153.99142456 211.63722229]
[170.86251831 222.60122681]
[168.23028564 241.72363281]
[174.93225098 255.14315796]
[181.63423157 268.56268311]
[196.89494324 268.29162598]
[210.75839233 274.67657471]
[220.47196960 286.44982910]
[224.10704041 301.27374268]
[220.94187927 316.20507812]
[211.60490417 328.27917480]
[197.94998169 335.09869385]
[182.68832397 335.30966187]
[168.85012817 328.87014771]
[159.18298340 317.05874634]
[155.60632324 302.22064209]
[158.83026123 287.30187988]
[168.21472168 275.26464844]
[161.51274109 261.84512329]
[154.81076050 248.42561340]
[144.80070496 246.04911804]
[137.62348938 238.37333679]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 134]
[2 133]
[5 132]
[6 131]
[7 130]
[8 129]
[9 128]
[10 127]
[11 41]
[12 40]
[13 39]
[16 36]
[17 35]
[18 34]
[19 33]
[23 29]
[24 28]
[42 77]
[43 76]
[44 75]
[45 74]
[49 70]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[85 126]
[86 125]
[87 124]
[88 123]
[89 122]
[91 121]
[92 120]
[95 119]
[96 118]
[97 117]
[98 116]
[102 113]
[103 112]
[104 111]
[105 110]
[136 153]
[137 152]
[138 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
