%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGCAAGUCAAUAAGACUGUGGUGAGAGAGUUCGUCGUCCUCGGCUUCUCAUCCCUGGCCAGGCUGCAGCAGCUGCUCUUUGUUAUCUUCCUGCUCC\
) } def
/len { sequence length } bind def

/coor [
[107.86556244 253.54197693]
[94.97923279 242.52476501]
[101.99858856 227.09217834]
[102.93113708 212.12118530]
[103.86367798 197.15020752]
[104.79622650 182.17922974]
[105.72876740 167.20823669]
[106.66131592 152.23725891]
[93.48091125 145.07646179]
[81.42845917 154.00608826]
[69.37599945 162.93572998]
[57.32354736 171.86535645]
[53.54912949 187.45808411]
[38.94470596 194.09814453]
[24.71353722 186.69183350]
[21.77256012 170.92065430]
[32.37784195 158.88288879]
[48.39391708 159.81289673]
[60.44636917 150.88327026]
[72.49882507 141.95362854]
[84.55127716 133.02400208]
[71.15954590 117.29296112]
[69.24676514 98.36933899]
[77.67115784 83.16321564]
[68.55516815 71.25109100]
[59.43917847 59.33897018]
[50.32318878 47.42684555]
[41.20719910 35.51472092]
[32.09120560 23.60259628]
[22.97521591 11.69047070]
[13.85922527 -0.22165415]
[9.87606144 -1.55150700]
[6.74750280 -3.78895688]
[4.64499521 -6.58497334]
[3.61925435 -9.57069397]
[3.60350180 -12.39542103]
[4.42788649 -14.76113892]
[-2.73291159 -27.94153976]
[-9.89370918 -41.12194061]
[-17.05450821 -54.30234146]
[-31.31428146 -62.40116119]
[-31.15979767 -78.79958344]
[-16.74997520 -86.62831116]
[-2.90840459 -77.83383179]
[-3.87410665 -61.46313858]
[3.28669143 -48.28273773]
[10.44748974 -35.10233688]
[17.60828781 -21.92193604]
[25.77135086 -9.33764458]
[34.88734055 2.57448006]
[44.00333023 14.48660469]
[53.11932373 26.39872932]
[62.23531342 38.31085587]
[71.35130310 50.22298050]
[80.46729279 62.13510513]
[89.58328247 74.04722595]
[107.74181366 70.92440033]
[125.27542114 80.03080750]
[134.32318115 99.08209229]
[129.77485657 121.04058075]
[143.82539368 115.78868103]
[157.87591553 110.53678894]
[162.56506348 105.47406769]
[168.26428223 103.91567993]
[172.96667480 105.42507172]
[187.31654358 101.05685425]
[201.66639709 96.68862915]
[216.01626587 92.32041168]
[230.36613464 87.95218658]
[243.75798035 77.55532074]
[257.45578003 87.54566956]
[251.64776611 103.47374725]
[234.73435974 102.30205536]
[220.38449097 106.67027283]
[206.03462219 111.03849792]
[191.68475342 115.40671539]
[177.33489990 119.77494049]
[163.12782288 124.58732605]
[149.07728577 129.83921814]
[135.02674866 135.09112549]
[149.87515259 137.21833801]
[164.52420044 133.99259949]
[179.26139832 136.78810120]
[191.71156311 145.15431213]
[199.86808777 157.74284363]
[202.41639709 172.52479553]
[198.94577026 187.11776733]
[190.01559448 199.16981506]
[177.06510925 206.73849487]
[162.18156433 208.60398865]
[147.76373291 204.46560669]
[136.13533020 194.99035645]
[129.17051697 181.70535278]
[127.99138641 166.75515747]
[121.63229370 153.16979980]
[120.69975281 168.14077759]
[119.76720428 183.11177063]
[118.83466339 198.08274841]
[117.90211487 213.05374146]
[116.96957397 228.02471924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 100]
[4 99]
[5 98]
[6 97]
[7 96]
[8 95]
[9 21]
[10 20]
[11 19]
[12 18]
[24 56]
[25 55]
[26 54]
[27 53]
[28 52]
[29 51]
[30 50]
[31 49]
[37 48]
[38 47]
[39 46]
[40 45]
[60 80]
[61 79]
[62 78]
[65 77]
[66 76]
[67 75]
[68 74]
[69 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
