%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:46:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGUUCUUUUUUCUUGUGCCAAACAGGUAAACAGGCAAAAAUAUCAAUGGGAGAAGAAAACCAAACCUUUGUGUCCAAGUUUAUCUUCCUGGGUCUUU\
) } def
/len { sequence length } bind def

/coor [
[91.69551849 162.63087463]
[81.16915131 160.30746460]
[71.19097900 156.22837830]
[62.05149078 150.51239014]
[54.01676178 143.32588196]
[47.32068634 134.87808228]
[42.15820694 125.41491699]
[38.67961121 115.21186829]
[36.98617172 104.56597900]
[22.00249290 103.86637115]
[7.01881742 103.16677094]
[-7.96485853 102.46716309]
[-22.94853401 101.76755524]
[-37.09455872 108.85279083]
[-49.44710922 100.53030396]
[-64.43078613 99.83069611]
[-79.41445923 99.13109589]
[-94.39813995 98.43148804]
[-109.38181305 97.73188019]
[-124.38000488 97.49860382]
[-139.37818909 97.73188019]
[-154.37637329 97.96515656]
[-166.53021240 108.43721008]
[-182.26803589 105.32270050]
[-189.51715088 91.01081848]
[-182.71664429 76.48041534]
[-167.08328247 72.87797546]
[-154.60964966 82.96697235]
[-139.61146545 82.73369598]
[-124.61328125 82.50041962]
[-120.59850311 79.62425232]
[-114.69580841 79.36357117]
[-108.68221283 82.74820709]
[-93.69853210 83.44781494]
[-78.71485901 84.14741516]
[-63.73118210 84.84702301]
[-48.74750519 85.54663086]
[-35.67321396 78.41135406]
[-22.24892807 86.78388214]
[-7.26525259 87.48348236]
[7.71842337 88.18309021]
[22.70209885 88.88269806]
[37.68577576 89.58230591]
[44.13156509 70.49900818]
[56.25603104 54.41429901]
[72.82680511 42.96309662]
[92.15956116 37.30934143]
[112.28925323 38.02770615]
[131.16981506 45.04516602]
[146.88215637 57.64844894]
[157.82922363 74.55650330]
[172.17909241 70.18827820]
[186.52896118 65.82006073]
[200.87881470 61.45183945]
[215.22868347 57.08361816]
[229.57855225 52.71539688]
[240.52737427 41.29463577]
[254.95623779 44.99021530]
[269.30609131 40.62199402]
[283.65597534 36.25377274]
[285.08642578 20.32294083]
[292.47070312 6.17774010]
[304.66503906 -4.05413008]
[319.80477905 -8.84621334]
[335.58929443 -7.50097513]
[349.63168335 -0.25117692]
[359.81973267 11.77977085]
[374.02679443 6.96738482]
[384.43502808 -5.70545387]
[400.56777954 -2.76149988]
[405.82904053 12.77075958]
[394.80648804 24.91306686]
[378.83920288 21.17445755]
[364.63211060 25.98684502]
[364.22290039 40.10436249]
[358.98132324 53.25148010]
[349.52520752 63.82283020]
[336.98837280 70.51998138]
[322.88464355 72.51086426]
[308.92514038 69.53312683]
[296.81057739 61.92848206]
[288.02420044 50.60363770]
[273.67431641 54.97185898]
[259.32446289 59.34008026]
[249.40203857 70.44839478]
[233.94677734 67.06526184]
[219.59690857 71.43347931]
[205.24703979 75.80170441]
[190.89717102 80.16992188]
[176.54731750 84.53814697]
[162.19744873 88.90636444]
[163.17802429 99.64141083]
[162.31936646 110.38690186]
[159.64646912 120.83000183]
[155.23716736 130.66670227]
[149.21978760 139.61064148]
[141.76954651 147.40144348]
[133.10330200 153.81228638]
[123.47335815 158.65657043]
[113.16006470 161.79322815]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 43]
[10 42]
[11 41]
[12 40]
[13 39]
[15 37]
[16 36]
[17 35]
[18 34]
[19 33]
[20 30]
[21 29]
[22 28]
[51 91]
[52 90]
[53 89]
[54 88]
[55 87]
[56 86]
[58 84]
[59 83]
[60 82]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
