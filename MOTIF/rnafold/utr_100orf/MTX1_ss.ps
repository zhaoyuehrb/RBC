%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCCCCAGCCCGGCCUCCGCUCCGGCCGCCGCCACCGCCCCUGUUUUGUUUCCAUGGCGACAGGCGGCGCAGGGCCCGCUCCAAACAUAACGCGCUGUGGAAAACAUGCUGCUCGGGGGACCCCCCCGCAGUCCCCGCUCGGGGACGAGCCCCAAGGGGCCCUGGAGCAGUACAGGCCACGUGCAGUUUGGCAAGAGCCCCCAGA\
) } def
/len { sequence length } bind def

/coor [
[202.71507263 80.87627411]
[196.54936218 77.05094910]
[191.50068665 71.80888367]
[177.52574158 77.25871277]
[163.55078125 82.70854187]
[149.57582092 88.15837097]
[144.42765808 99.10691071]
[132.82691956 103.76063538]
[120.79115295 99.11776733]
[106.73509979 104.35488129]
[110.72122192 111.56694794]
[111.23855591 120.66409302]
[107.70012665 130.31083679]
[98.95718384 142.49938965]
[90.21423340 154.68794250]
[81.47128296 166.87649536]
[86.48345947 181.56179810]
[81.87444305 196.37855530]
[69.41648865 205.62945557]
[53.89994049 205.75732422]
[41.29122543 196.71298218]
[36.43865204 181.97418213]
[41.20813370 167.20829773]
[53.76570892 158.09309387]
[69.28273010 158.13356018]
[78.02568054 145.94500732]
[86.76862335 133.75643921]
[95.51157379 121.56789398]
[88.11036682 108.52097321]
[73.16259003 109.77159882]
[58.21481705 111.02223206]
[43.26704407 112.27286530]
[28.31927109 113.52349091]
[13.37149811 114.77412415]
[2.32432461 128.33609009]
[-14.77652264 129.68733215]
[-27.31275368 118.47866821]
[-42.23982620 119.95600891]
[-57.16689682 121.43334198]
[-72.09397125 122.91068268]
[-75.82627106 137.60237122]
[-84.36090088 150.12977600]
[-96.66726685 158.98014832]
[-111.25931549 163.08476257]
[-126.37498474 161.94798279]
[-140.18899536 155.70704651]
[-151.03321838 145.11560059]
[-157.59815979 131.45262146]
[-159.09109497 116.36796570]
[-155.33174133 101.68317413]
[-146.77403259 89.17151642]
[-134.45137024 80.34384155]
[-119.85178375 76.26612091]
[-104.73823547 77.43076324]
[-90.93576050 83.69714355]
[-80.11106873 94.30854797]
[-73.57130432 107.98361206]
[-58.64423370 106.50627136]
[-43.71716309 105.02893829]
[-28.79009056 103.55159760]
[-22.09367943 92.54093933]
[-10.09876347 87.32056427]
[2.90386128 90.00229645]
[12.12086773 99.82634735]
[27.06863976 98.57572174]
[42.01641464 97.32508850]
[56.96418762 96.07445526]
[71.91195679 94.82382965]
[86.85973358 93.57319641]
[101.49798584 90.29882812]
[115.55403900 85.06171417]
[126.94850922 70.59816742]
[144.12599182 74.18341827]
[158.10095215 68.73358917]
[172.07591248 63.28376007]
[186.05085754 57.83393097]
[193.35479736 35.40333939]
[214.61343384 25.79885674]
[235.79174805 34.93613434]
[249.00375366 27.83383179]
[262.21575928 20.73152924]
[275.42779541 13.62922764]
[275.99459839 -1.65560019]
[284.08258057 -14.51956272]
[297.43478394 -21.56118393]
[312.41864014 -20.97791862]
[325.01388550 -13.02647114]
[338.22589111 -20.12877274]
[344.30526733 -26.95063591]
[351.69274902 -27.23687744]
[365.01104736 -34.13785172]
[378.32931519 -41.03882980]
[391.59484863 -48.04066849]
[404.80685425 -55.14297104]
[418.01885986 -62.24526978]
[431.23089600 -69.34757233]
[437.31024170 -76.16943359]
[444.69772339 -76.45568085]
[458.01602173 -83.35665131]
[471.33428955 -90.25762939]
[484.65255737 -97.15860748]
[484.01223755 -110.06050873]
[488.28457642 -122.20182037]
[496.80130005 -131.78979492]
[508.27017212 -137.42292786]
[520.97113037 -138.29574585]
[533.01403809 -134.31379700]
[542.62017822 -126.10243225]
[556.14178467 -132.59603882]
[569.66333008 -139.08963013]
[583.18493652 -145.58323669]
[596.70648193 -152.07684326]
[610.22808838 -158.57043457]
[623.74969482 -165.06404114]
[637.27124023 -171.55764771]
[646.36169434 -184.50653076]
[661.18408203 -183.04154968]
[674.70568848 -189.53515625]
[688.22729492 -196.02876282]
[701.74884033 -202.52235413]
[708.13244629 -209.06045532]
[715.52526855 -209.01016235]
[729.14385986 -215.29780579]
[742.76239014 -221.58544922]
[756.38098145 -227.87310791]
[759.37438965 -245.75334167]
[772.38592529 -258.15042114]
[790.07769775 -260.23919678]
[805.34661865 -251.37098694]
[818.76806641 -258.06903076]
[828.56463623 -273.65930176]
[846.02545166 -271.91571045]
[859.34375000 -278.81668091]
[872.66198730 -285.71765137]
[885.98028564 -292.61865234]
[899.29858398 -299.51962280]
[912.61682129 -306.42059326]
[920.99371338 -320.51882935]
[937.38592529 -320.04281616]
[944.93060303 -305.48226929]
[935.86639404 -291.81579590]
[919.51782227 -293.10232544]
[906.19952393 -286.20132446]
[892.88122559 -279.30035400]
[879.56298828 -272.39938354]
[866.24468994 -265.49841309]
[852.92639160 -258.59744263]
[848.96820068 -247.16471863]
[837.92639160 -241.30712891]
[825.46612549 -244.64756775]
[812.04467773 -237.94950867]
[811.84234619 -225.80784607]
[806.46405029 -214.84001160]
[796.87579346 -207.15539551]
[784.85955811 -204.26089478]
[772.68243408 -206.76576233]
[762.66864014 -214.25453186]
[749.05004883 -207.96688843]
[735.43151855 -201.67922974]
[721.81292725 -195.39158630]
[708.24243164 -189.00077820]
[694.72088623 -182.50717163]
[681.19927979 -176.01358032]
[667.67773438 -169.51997375]
[659.55438232 -157.03555298]
[643.76483154 -158.03605652]
[630.24328613 -151.54246521]
[616.72167969 -145.04885864]
[603.20013428 -138.55525208]
[589.67852783 -132.06166077]
[576.15692139 -125.56805420]
[562.63537598 -119.07445526]
[549.11376953 -112.58084869]
[548.43395996 -95.37947083]
[539.08917236 -80.81584930]
[523.57702637 -72.94918823]
[506.12826538 -74.02620697]
[491.55355835 -83.84032440]
[478.23526001 -76.93935394]
[464.91699219 -70.03837585]
[451.59872437 -63.13739777]
[438.33319092 -56.13555908]
[425.12118530 -49.03325653]
[411.90914917 -41.93095779]
[398.69714355 -34.82865524]
[394.29269409 -28.89084816]
[385.23028564 -27.72055054]
[371.91201782 -20.81957436]
[358.59371948 -13.91859913]
[345.32821655 -6.91675854]
[332.11618042 0.18554284]
[331.80065918 15.07735348]
[324.02175903 27.89705276]
[310.78302002 35.14977646]
[295.59176636 34.79988861]
[282.53009033 26.84124184]
[269.31808472 33.94354248]
[256.10604858 41.04584503]
[242.89404297 48.14814758]
[243.69633484 55.16058350]
[242.74357605 62.17634583]
[240.08375549 68.76160431]
[235.87077332 74.50648499]
[230.35549927 79.05053711]
[223.87097168 82.10536957]
[216.81219482 83.47293854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 76]
[4 75]
[5 74]
[6 73]
[9 71]
[10 70]
[13 28]
[14 27]
[15 26]
[16 25]
[29 69]
[30 68]
[31 67]
[32 66]
[33 65]
[34 64]
[37 60]
[38 59]
[39 58]
[40 57]
[79 199]
[80 198]
[81 197]
[82 196]
[87 191]
[88 190]
[90 189]
[91 188]
[92 187]
[93 185]
[94 184]
[95 183]
[96 182]
[98 181]
[99 180]
[100 179]
[101 178]
[108 173]
[109 172]
[110 171]
[111 170]
[112 169]
[113 168]
[114 167]
[115 166]
[117 164]
[118 163]
[119 162]
[120 161]
[122 160]
[123 159]
[124 158]
[125 157]
[129 151]
[130 150]
[132 147]
[133 146]
[134 145]
[135 144]
[136 143]
[137 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
