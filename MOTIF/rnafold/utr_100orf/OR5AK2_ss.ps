%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:32:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACACUAGGAAACAGCACUGAAGUCACUGAAUUCUAUCUUCUGGGAUUUGGUGCCCAGCAUGAGUUUUGGUGUAUCCUCUUCAUUGUAUUCCUUCUCA\
) } def
/len { sequence length } bind def

/coor [
[55.13328171 420.55114746]
[57.92197418 401.37112427]
[58.38847351 386.37838745]
[58.85496902 371.38565063]
[49.27193069 364.82250977]
[44.06684494 354.30383301]
[44.67443848 342.46234131]
[51.05772018 332.32687378]
[61.68733597 326.54766846]
[63.08502579 311.61294556]
[64.48271179 296.67819214]
[65.88040161 281.74343872]
[67.27809143 266.80871582]
[59.94568634 259.38494873]
[57.96361160 248.91473389]
[62.24969864 238.91671753]
[71.57216644 232.89198303]
[73.89563751 218.07301331]
[76.21910858 203.25405884]
[70.54662323 189.48190308]
[80.32816315 177.04679871]
[82.65163422 162.22782898]
[84.97510529 147.40887451]
[87.29857635 132.58992004]
[89.62205505 117.77096558]
[79.48285675 98.40132141]
[92.50000000 80.83599854]
[92.50000000 65.83599854]
[92.50000000 50.83599472]
[92.50000000 35.83599472]
[92.50000000 20.83599663]
[92.50000000 5.83599567]
[92.50000000 -9.16400433]
[92.26672363 -24.16218948]
[91.80022430 -39.15493393]
[91.33372498 -54.14767838]
[87.88895416 -62.80366898]
[91.09319305 -69.61236572]
[91.09319305 -84.61236572]
[82.81646729 -92.00842285]
[80.13079071 -102.54967499]
[83.71075439 -112.58650970]
[92.10459137 -118.78488159]
[93.03713226 -133.75585938]
[93.96968079 -148.72685242]
[94.90222168 -163.69783020]
[95.83477020 -178.66882324]
[83.78718567 -188.44815063]
[79.82116699 -203.44982910]
[85.46173096 -217.90539551]
[98.53997040 -226.25640869]
[114.02702332 -225.29171753]
[125.96781921 -215.38226318]
[129.77085876 -200.33845520]
[123.97381592 -185.94491577]
[110.80575562 -177.73626709]
[109.87320709 -162.76528931]
[108.94066620 -147.79431152]
[108.00811768 -132.82331848]
[107.07557678 -117.85233307]
[117.03450012 -101.40142059]
[106.09319305 -84.61236572]
[106.09319305 -69.61236572]
[106.32646942 -54.61417770]
[106.79296875 -39.62143326]
[107.25946808 -24.62868881]
[110.67391205 -17.92293930]
[107.50000000 -9.16400433]
[107.50000000 5.83599567]
[107.50000000 20.83599663]
[107.50000000 35.83599472]
[107.50000000 50.83599472]
[107.50000000 65.83599854]
[107.50000000 80.83599854]
[113.83790588 84.76775360]
[118.35820770 90.70025635]
[120.46717072 97.85428619]
[119.88777161 105.29014587]
[116.69612122 112.03115082]
[111.31143951 117.19187164]
[104.44100952 120.09443665]
[102.11753845 134.91339111]
[99.79405975 149.73234558]
[97.47058868 164.55131531]
[95.14711761 179.37026978]
[100.65341187 194.20237732]
[91.03806305 205.57752991]
[88.71459198 220.39649963]
[86.39112091 235.21545410]
[94.59976959 253.49665833]
[82.21282959 268.20639038]
[80.81514740 283.14114380]
[79.41745758 298.07586670]
[78.01976776 313.01062012]
[76.62207794 327.94537354]
[89.25110626 341.87777710]
[87.89417267 360.31777954]
[73.84771729 371.85214233]
[73.38121796 386.84487915]
[72.91471863 401.83761597]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 100]
[3 99]
[4 98]
[9 95]
[10 94]
[11 93]
[12 92]
[13 91]
[17 89]
[18 88]
[19 87]
[21 85]
[22 84]
[23 83]
[24 82]
[25 81]
[27 74]
[28 73]
[29 72]
[30 71]
[31 70]
[32 69]
[33 68]
[34 66]
[35 65]
[36 64]
[38 63]
[39 62]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
