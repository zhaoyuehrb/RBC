%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUUCCCUUGGGGGCUGAGCUGCCUGUCAGUGCUGGGGGCGGCGGGCACUGCUCUCCUGUGCGCGGGCCUGCUGCUCAGCCUGGCCCAGCACCUCUGGA\
) } def
/len { sequence length } bind def

/coor [
[63.31158447 326.27087402]
[48.12831116 331.45236206]
[34.68879318 322.69116211]
[33.30267334 306.70809937]
[45.03326797 295.76400757]
[46.89474869 280.87997437]
[48.75622940 265.99591064]
[46.73395538 262.90310669]
[46.21554947 258.62692261]
[47.76316833 253.93753052]
[51.54808807 249.83610535]
[54.78835678 235.19026184]
[58.02862549 220.54441833]
[61.26889038 205.89857483]
[64.50915527 191.25274658]
[58.38953400 184.40026855]
[56.17830658 175.33955383]
[58.52223206 166.16833496]
[64.99752045 159.07371521]
[74.17970276 155.81066895]
[78.77056122 141.53047180]
[83.36141968 127.25028229]
[87.95227814 112.97008514]
[82.80530548 104.20870209]
[83.32384491 94.06059265]
[89.33704376 85.86946106]
[98.86360168 82.33423615]
[104.33337402 68.36707306]
[109.80314636 54.39990997]
[115.27291870 40.43275070]
[120.74269104 26.46558952]
[120.98128510 17.15238953]
[126.60588074 12.15345192]
[132.50738525 -1.63684392]
[138.40888977 -15.42713928]
[144.31039429 -29.21743584]
[143.88545227 -36.10499954]
[146.69296265 -41.30381393]
[151.03149414 -43.66344452]
[157.77891541 -57.06016922]
[164.52633667 -70.45689392]
[171.27377319 -83.85362244]
[178.02119446 -97.25034332]
[184.76861572 -110.64707184]
[191.51605225 -124.04380035]
[198.26347351 -137.44052124]
[205.01089478 -150.83724976]
[211.75831604 -164.23397827]
[212.86367798 -173.48442078]
[218.92959595 -177.93751526]
[226.09039307 -191.11791992]
[233.25119019 -204.29832458]
[240.41198730 -217.47871399]
[232.32206726 -230.53431702]
[231.85983276 -245.88626099]
[239.14962769 -259.40493774]
[252.23052979 -267.45388794]
[267.58383179 -267.86801147]
[281.07958984 -260.53585815]
[289.08749390 -247.42980957]
[289.45349121 -232.07527161]
[282.07910156 -218.60256958]
[268.94799805 -210.63577271]
[253.59239197 -210.31791687]
[246.43159485 -197.13751221]
[239.27079773 -183.95712280]
[232.11000061 -170.77671814]
[225.15504456 -157.48654175]
[218.40762329 -144.08982849]
[211.66020203 -130.69309998]
[204.91276550 -117.29637146]
[198.16534424 -103.89964294]
[191.41792297 -90.50292206]
[184.67048645 -77.10619354]
[177.92306519 -63.70946884]
[171.17564392 -50.31274414]
[164.42822266 -36.91601944]
[158.10069275 -23.31593132]
[152.19918823 -9.52563572]
[146.29768372 4.26465988]
[140.39617920 18.05495644]
[134.70985413 31.93536186]
[129.24008179 45.90252304]
[123.77030945 59.86968613]
[118.30053711 73.83684540]
[112.83076477 87.80400848]
[116.67615509 105.93940735]
[102.23247528 117.56094360]
[97.64161682 131.84114075]
[93.05075836 146.12133789]
[88.45989990 160.40153503]
[94.49550629 180.83711243]
[79.15499878 194.49301147]
[75.91473389 209.13885498]
[72.67446899 223.78469849]
[69.43419647 238.43052673]
[66.19393158 253.07637024]
[63.64027786 267.85739136]
[61.77879715 282.74145508]
[59.91731644 297.62548828]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 100]
[6 99]
[7 98]
[11 97]
[12 96]
[13 95]
[14 94]
[15 93]
[20 91]
[21 90]
[22 89]
[23 88]
[27 86]
[28 85]
[29 84]
[30 83]
[31 82]
[33 81]
[34 80]
[35 79]
[36 78]
[39 77]
[40 76]
[41 75]
[42 74]
[43 73]
[44 72]
[45 71]
[46 70]
[47 69]
[48 68]
[50 67]
[51 66]
[52 65]
[53 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
