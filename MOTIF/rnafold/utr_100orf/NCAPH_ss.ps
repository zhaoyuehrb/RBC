%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:46:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCGCCGGCGACGUCACGCGGCCGUUACGGCGCUCAGGCGUCUCGACGCGCGCGAUUUAAAACCAGCUCAGGAGACGCCAAGGAAAGAUGGGACCUCCCGGCCCAGCACUGCCAGCCACAAUGAAUAACUCUUCUUCAGAGACGCGAGGACACCCCCACAGUGCCUCCUCUCCUUCAGAGCGUGUGU\
) } def
/len { sequence length } bind def

/coor [
[-78.17366791 365.74740601]
[-84.42539215 379.38250732]
[-90.67712402 393.01757812]
[-96.92884827 406.65267944]
[-103.06764221 420.33901978]
[-109.09307098 434.07562256]
[-105.95740509 453.97677612]
[-121.98694611 464.77209473]
[-127.55490875 478.70040894]
[-124.67866516 494.84533691]
[-137.39506531 505.20031738]
[-152.62255859 499.11297607]
[-154.69641113 482.84548950]
[-141.48321533 473.13244629]
[-135.91525269 459.20413208]
[-140.77853394 450.19244385]
[-139.84960938 439.77374268]
[-133.19511414 431.42053223]
[-122.82967377 428.05017090]
[-116.80423737 414.31356812]
[-116.99686432 406.91186523]
[-110.56394958 400.40097046]
[-104.31222534 386.76586914]
[-98.06049347 373.13076782]
[-91.80876923 359.49566650]
[-97.21752930 345.66522217]
[-91.07162476 331.74826050]
[-76.52832031 326.16882324]
[-70.27658844 312.53372192]
[-64.02486420 298.89862061]
[-57.77313232 285.26351929]
[-57.84335327 277.85964966]
[-51.30366516 271.45599365]
[-44.82735062 257.92611694]
[-38.35103607 244.39625549]
[-31.87471962 230.86637878]
[-25.39840508 217.33651733]
[-31.74804688 203.56669617]
[-25.34486961 187.88212585]
[-39.08147049 181.85670471]
[-52.81806946 175.83126831]
[-66.55467224 169.80583191]
[-80.29126740 163.78041077]
[-94.02787018 157.75497437]
[-107.76447296 151.72953796]
[-121.50106812 145.70411682]
[-135.97575378 154.43849182]
[-152.63961792 152.84669495]
[-164.95213318 141.75222778]
[-168.19917297 125.66918945]
[-182.03352356 119.87170410]
[-192.30221558 131.02201843]
[-205.76669312 137.98504639]
[-220.80105591 139.91993713]
[-235.58982849 136.59306335]
[-248.34718323 128.40614319]
[-257.53262329 116.34781647]
[-262.03695679 101.87415314]
[-261.31628418 86.73294067]
[-255.45758057 72.75254059]
[-245.16835022 61.62116241]
[-231.69107056 54.68297195]
[-216.65316772 52.77578735]
[-201.87054443 56.12990952]
[-189.12829590 64.34031677]
[-179.96508789 76.41555786]
[-175.48744202 90.89749146]
[-176.23603821 106.03735352]
[-162.40168762 111.83483887]
[-151.67251587 103.87290192]
[-138.30245972 102.24363708]
[-125.77533722 107.47944641]
[-117.40876770 118.30975342]
[-115.47563934 131.96751404]
[-101.73903656 137.99293518]
[-88.00244141 144.01837158]
[-74.26583862 150.04380798]
[-60.52923965 156.06922913]
[-46.79263687 162.09466553]
[-33.05603790 168.12010193]
[-19.31943893 174.14552307]
[-4.31995106 174.02151489]
[9.31514645 167.76979065]
[22.95024490 161.51806641]
[36.58534241 155.26634216]
[50.22043991 149.01460266]
[58.56484604 136.67686462]
[74.33406067 137.95845032]
[87.96916199 131.70672607]
[62.14586639 121.50395966]
[47.65221786 90.74932098]
[59.34559250 52.15853500]
[60.08934784 37.17698669]
[60.83310699 22.19543648]
[52.87045288 7.85918140]
[61.53559113 -6.06372881]
[77.91456604 -5.25059748]
[85.15809631 9.46209526]
[75.81465149 22.93919373]
[75.07089996 37.92074203]
[74.32714081 52.90229034]
[88.73844910 57.06333542]
[96.09480286 43.99107361]
[103.45114899 30.91880798]
[98.35076141 18.44120026]
[101.33021545 5.49452972]
[111.08169556 -3.23855162]
[123.89054871 -4.73246241]
[131.46203613 -17.68130875]
[134.23753357 -34.40652847]
[151.07746887 -36.36948776]
[157.62547302 -20.73107529]
[144.41087341 -10.10982609]
[136.83940125 2.83902073]
[141.79653931 18.90118408]
[133.44625854 33.87788010]
[116.52341461 38.27516174]
[109.16706085 51.34742355]
[101.81071472 64.41968536]
[106.16878510 70.52355194]
[118.37651825 61.80739975]
[130.58424377 53.09124756]
[142.79197693 44.37509537]
[151.70880127 32.31315994]
[165.93582153 37.06624222]
[165.81173706 52.06573105]
[151.50813293 56.58282852]
[139.30039978 65.29898071]
[127.09266663 74.01512909]
[114.88494110 82.73128510]
[119.24301910 88.83515167]
[133.99559021 86.12194061]
[148.74816895 83.40873718]
[163.50074768 80.69552612]
[173.75305176 68.35576630]
[189.78935242 68.82168579]
[199.30793762 81.73586273]
[195.00698853 97.19165039]
[180.18580627 103.33268738]
[166.21395874 95.44810486]
[151.46138000 98.16130829]
[136.70880127 100.87451935]
[121.95622253 103.58772278]
[120.66064453 110.97497559]
[135.43510437 113.56637573]
[132.84346008 128.34078979]
[118.06949615 125.74948120]
[116.77391815 133.13673401]
[129.72276306 140.70822144]
[142.67161560 148.27969360]
[155.62046814 155.85118103]
[164.62600708 157.48655701]
[168.71932983 163.65641785]
[181.54122925 171.44096375]
[194.36311340 179.22549438]
[209.11285400 174.03135681]
[223.73226929 179.58172607]
[231.31852722 193.25588989]
[228.28961182 208.59733582]
[216.07569885 218.36228943]
[200.44381714 217.94003296]
[188.77487183 207.52996826]
[186.57856750 192.04739380]
[173.75668335 184.26284790]
[160.93478394 176.47830200]
[148.04898071 168.80003357]
[135.10012817 161.22854614]
[122.15128326 153.65705872]
[109.20243835 146.08557129]
[94.22088623 145.34182739]
[80.58579254 151.59355164]
[71.26610565 164.37846375]
[56.47216797 162.64970398]
[42.83707047 168.90142822]
[29.20197296 175.15316772]
[15.56687450 181.40489197]
[1.93177664 187.65661621]
[9.43021393 203.86645508]
[2.76964307 219.09327698]
[-11.86853600 223.81283569]
[-18.34485054 237.34269714]
[-24.82116699 250.87257385]
[-31.29748154 264.40243530]
[-37.77379608 277.93231201]
[-44.13803482 291.51525879]
[-50.38976288 305.15036011]
[-56.64149094 318.78546143]
[-62.89321899 332.42053223]
[-57.63008499 347.08126831]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 22]
[5 20]
[6 19]
[8 15]
[9 14]
[28 188]
[29 187]
[30 186]
[31 185]
[33 184]
[34 183]
[35 182]
[36 181]
[37 180]
[39 81]
[40 80]
[41 79]
[42 78]
[43 77]
[44 76]
[45 75]
[46 74]
[50 69]
[51 68]
[82 177]
[83 176]
[84 175]
[85 174]
[86 173]
[88 171]
[89 170]
[92 101]
[93 100]
[94 99]
[102 119]
[103 118]
[104 117]
[108 114]
[109 113]
[131 143]
[132 142]
[133 141]
[134 140]
[148 169]
[149 168]
[150 167]
[151 166]
[153 165]
[154 164]
[155 163]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
