%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGAGCCUGCGGCGGGCGGCUGUGACGGCCCCGGCGCUGACGGCGGCGGCCGGGGGGGCGGUGUCGACGCCCGCGGCGCCGGCUGGGGCAUCACCGCGGGCCUCGACCCCGAAAUGGCGCUGCUGGCCGAACACUUGCUGAAGCCGCUGCCCGCGGACAAGCAGAUCGAGACCGGGCCCUUCCUCGAGGCGGUGUCCCACCUGCCGCCCUUCU\
) } def
/len { sequence length } bind def

/coor [
[69.75209808 401.84649658]
[61.99828339 387.39624023]
[70.86450958 373.60049438]
[71.08367920 358.60211182]
[71.30285645 343.60369873]
[71.52202606 328.60531616]
[63.77495956 321.94796753]
[60.90938950 311.91506958]
[64.10305786 301.75140381]
[72.53234100 294.88311768]
[73.18967438 279.89755249]
[73.84700012 264.91195679]
[74.50433350 249.92636108]
[75.16166687 234.94076538]
[75.81900024 219.95518494]
[76.47633362 204.96958923]
[77.13366699 189.98399353]
[69.96153259 176.92988586]
[78.29615021 163.48204041]
[78.95348358 148.49644470]
[67.84779358 121.18675232]
[75.85643005 100.09515381]
[91.78940582 94.68195343]
[80.69124603 84.59082031]
[69.59309387 74.49968719]
[51.51302338 71.00055695]
[46.83062744 54.08644485]
[35.58621216 44.15855026]
[24.34179688 34.23065186]
[13.09738159 24.30275726]
[1.85296547 14.37486076]
[-16.27630424 11.14028263]
[-21.20534134 -5.70360804]
[-32.59361649 -15.46614552]
[-43.98189545 -25.22868347]
[-55.37017059 -34.99122238]
[-66.75845337 -44.75375748]
[-78.14672852 -54.51629639]
[-89.53500366 -64.27883148]
[-107.53847504 -55.13673782]
[-129.40252686 -58.57291412]
[-146.52844238 -75.49587250]
[-161.27891541 -72.77131653]
[-176.02940369 -70.04676819]
[-190.77989197 -67.32221222]
[-202.89843750 -56.27355194]
[-218.44198608 -61.50135803]
[-221.42068481 -77.62771606]
[-208.77027893 -88.06320953]
[-193.50444031 -82.07270050]
[-178.75395203 -84.79724884]
[-164.00347900 -87.52180481]
[-149.25299072 -90.24636078]
[-146.47169495 -97.21158600]
[-161.31712341 -95.06381989]
[-170.59977722 -106.84653473]
[-165.03688049 -120.77686310]
[-150.19139099 -122.92430115]
[-140.90908813 -111.14203644]
[-138.12777710 -118.10726166]
[-146.94456482 -130.24250793]
[-155.76133728 -142.37776184]
[-170.13249207 -148.99447632]
[-171.35377502 -163.83892822]
[-180.17056274 -175.97418213]
[-188.98733521 -188.10943604]
[-197.80412292 -200.24468994]
[-206.62089539 -212.37994385]
[-220.99203491 -218.99664307]
[-222.21333313 -233.84109497]
[-231.03012085 -245.97634888]
[-239.84689331 -258.11160278]
[-248.66368103 -270.24685669]
[-257.48043823 -282.38211060]
[-266.29724121 -294.51736450]
[-275.11401367 -306.65261841]
[-283.93078613 -318.78787231]
[-304.00131226 -326.30252075]
[-305.27172852 -346.90386963]
[-314.61184692 -358.64111328]
[-323.95193481 -370.37832642]
[-339.68133545 -371.91497803]
[-349.65243530 -384.17681885]
[-347.94958496 -399.88909912]
[-335.58300781 -409.73001099]
[-319.88961792 -407.86111450]
[-310.17999268 -395.39120483]
[-312.21472168 -379.71844482]
[-302.87460327 -367.98120117]
[-293.53451538 -356.24398804]
[-284.67224121 -356.69104004]
[-276.47235107 -352.95452881]
[-270.82510376 -345.75692749]
[-269.09558105 -336.63327026]
[-271.79553223 -327.60464478]
[-262.97875977 -315.46939087]
[-254.16197205 -303.33413696]
[-245.34519958 -291.19888306]
[-236.52841187 -279.06362915]
[-227.71163940 -266.92837524]
[-218.89486694 -254.79312134]
[-210.07807922 -242.65786743]
[-196.33757019 -236.90916443]
[-194.48564148 -221.19671631]
[-185.66886902 -209.06146240]
[-176.85208130 -196.92620850]
[-168.03530884 -184.79095459]
[-159.21852112 -172.65570068]
[-145.47801208 -166.90699768]
[-143.62608337 -151.19454956]
[-134.80931091 -139.05929565]
[-125.99253082 -126.92403412]
[-106.14555359 -129.12895203]
[-88.58504486 -121.85003662]
[-77.32327271 -107.74412537]
[-74.44773102 -90.89640045]
[-79.77246857 -75.66711426]
[-68.38418579 -65.90457153]
[-56.99591064 -56.14203644]
[-45.60763550 -46.37949753]
[-34.21935654 -36.61696243]
[-22.83107948 -26.85442352]
[-11.44280338 -17.09188461]
[0.63622880 -17.70642281]
[10.20356750 -9.66892529]
[11.78086090 3.13044548]
[23.02527618 13.05834103]
[34.26969147 22.98623657]
[45.51410675 32.91413116]
[56.75852585 42.84202957]
[68.84524536 42.40404892]
[78.29412079 50.58048248]
[79.68422699 63.40153503]
[90.78238678 73.49266815]
[101.88053894 83.58380127]
[116.54511261 86.73819733]
[130.81095886 82.10294342]
[145.07681274 77.46768951]
[159.34265137 72.83243561]
[173.60850525 68.19718170]
[176.88000488 54.80909348]
[186.26454163 44.86412811]
[199.23365784 40.88595963]
[212.36917114 43.81123734]
[222.26402283 52.77166367]
[236.59606934 48.34534836]
[250.92813110 43.91903687]
[265.26019287 39.49272156]
[273.99298096 26.03472710]
[289.97308350 24.61485481]
[300.94192505 36.32230759]
[298.48510742 52.17613220]
[284.48733521 60.01462936]
[269.68649292 53.82477570]
[255.35444641 58.25108719]
[241.02238464 62.67740250]
[226.69033813 67.10371399]
[221.88932800 82.80318451]
[208.54228210 92.64516449]
[191.79277039 92.59066010]
[178.24375916 82.46302795]
[163.97790527 87.09828186]
[149.71206665 91.73353577]
[135.44621277 96.36878967]
[121.18036652 101.00405121]
[119.98005676 108.40737152]
[131.60287476 117.88945770]
[117.57943726 123.21402740]
[116.37912750 130.61735535]
[128.44964600 139.52256775]
[144.14813232 141.48924255]
[149.79629517 155.27137756]
[161.86682129 164.17657471]
[173.93733215 173.08178711]
[186.00784302 181.98698425]
[191.18917847 182.56840515]
[195.22700500 184.84951782]
[197.66566467 188.11085510]
[198.40069580 191.55644226]
[210.06936646 200.98204041]
[221.73805237 210.40763855]
[233.40672302 219.83325195]
[249.68225098 221.84300232]
[255.82951355 237.04640198]
[245.52471924 249.80348206]
[229.36856079 246.99087524]
[223.98112488 231.50192261]
[212.31243896 222.07632446]
[200.64376831 212.65071106]
[188.97509766 203.22511292]
[177.10264587 194.05751038]
[165.03213501 185.15229797]
[152.96160889 176.24710083]
[140.89109802 167.34188843]
[126.05596924 166.01217651]
[119.54443359 151.59307861]
[107.47392273 142.68786621]
[93.93907928 149.15377808]
[93.28174591 164.13937378]
[100.40686035 178.26535034]
[92.11925507 190.64132690]
[91.46192169 205.62692261]
[90.80458832 220.61251831]
[90.14725494 235.59809875]
[89.48992920 250.58369446]
[88.83259583 265.56927490]
[88.17526245 280.55487061]
[87.51792908 295.54046631]
[97.61841583 312.98815918]
[86.52042389 328.82449341]
[86.30125427 343.82287598]
[86.08208466 358.82128906]
[85.86290741 373.81967163]
[94.32223511 387.86859131]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 213]
[4 212]
[5 211]
[6 210]
[10 208]
[11 207]
[12 206]
[13 205]
[14 204]
[15 203]
[16 202]
[17 201]
[19 199]
[20 198]
[23 135]
[24 134]
[25 133]
[27 130]
[28 129]
[29 128]
[30 127]
[31 126]
[33 123]
[34 122]
[35 121]
[36 120]
[37 119]
[38 118]
[39 117]
[42 53]
[43 52]
[44 51]
[45 50]
[60 112]
[61 111]
[62 110]
[64 108]
[65 107]
[66 106]
[67 105]
[68 104]
[70 102]
[71 101]
[72 100]
[73 99]
[74 98]
[75 97]
[76 96]
[77 95]
[79 90]
[80 89]
[81 88]
[136 165]
[137 164]
[138 163]
[139 162]
[140 161]
[145 157]
[146 156]
[147 155]
[148 154]
[169 197]
[170 196]
[172 194]
[173 193]
[174 192]
[175 191]
[179 190]
[180 189]
[181 188]
[182 187]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
