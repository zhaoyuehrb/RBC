%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:09:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCCGCUAAACAAGAUGGCGACCUCCGAGAGGGCUCUCCUGAGGACCAGAGCUGCCUCUCUCCUGAGAGGCUUGGGCAGAUCCCGAACUGGAGCCCGAUCGUUACAGUUUCGCG\
) } def
/len { sequence length } bind def

/coor [
[71.49349213 378.15283203]
[58.97369385 387.79806519]
[43.31162643 385.68261719]
[33.79930878 373.06155396]
[36.08023453 357.42269897]
[48.80116653 348.04437256]
[50.80896378 333.17935181]
[52.81676102 318.31433105]
[46.85267258 304.66592407]
[56.36754227 292.02560425]
[58.37533951 277.16058350]
[60.38313675 262.29556274]
[62.39093399 247.43054199]
[53.57085419 239.95617676]
[49.46811295 229.01847839]
[51.23274994 217.34858704]
[58.53374863 207.92202759]
[69.61351013 203.20014954]
[72.41632080 188.46432495]
[75.21912384 173.72851562]
[78.02192688 158.99269104]
[80.82473755 144.25688171]
[83.62754059 129.52107239]
[73.98573303 118.03039551]
[58.98708344 118.23177338]
[43.98843384 118.43315887]
[28.98978615 118.63453674]
[13.23325348 124.89297485]
[2.85755563 111.48471832]
[12.86952877 97.80273438]
[28.78840637 103.63588715]
[43.78705597 103.43450928]
[58.78570175 103.23313141]
[73.78435516 103.03175354]
[79.66384888 89.23205566]
[69.41915894 78.27549744]
[59.17446136 67.31893921]
[48.92976761 56.36237717]
[38.25220490 45.82721329]
[27.15909386 35.73053360]
[16.06598282 25.63385773]
[0.28243703 19.44386482]
[1.86120188 2.56358576]
[18.51883888 -0.59227461]
[26.16266060 14.54074669]
[37.25577164 24.63742447]
[48.34888077 34.73410034]
[51.99618530 34.88293457]
[55.73783875 36.88994598]
[58.66129684 40.77156830]
[59.88632965 46.11767960]
[70.13101959 57.07424164]
[80.37571716 68.03079987]
[90.62041473 78.98736572]
[105.27631378 75.78979492]
[119.93092346 72.59252167]
[124.68093872 58.36447144]
[129.43095398 44.13642502]
[134.18098450 29.90837860]
[138.93099976 15.68033123]
[143.68101501 1.45228469]
[148.43104553 -12.77576160]
[144.62242126 -28.72651482]
[156.71626282 -39.80221176]
[172.27145386 -34.60912704]
[175.28614807 -18.48945999]
[162.65908813 -8.02574158]
[157.90907288 6.20230484]
[153.15904236 20.43035126]
[148.40902710 34.65839767]
[143.65901184 48.88644409]
[138.90898132 63.11449051]
[134.15896606 77.34253693]
[143.17010498 89.33418274]
[158.15794373 88.73018646]
[173.14576721 88.12619781]
[188.13360596 87.52220917]
[203.12144470 86.91822052]
[218.10928345 86.31423187]
[222.73611450 83.36906433]
[227.54338074 82.65925598]
[231.61643982 83.85851288]
[234.31726074 86.31423187]
[249.30508423 86.91822052]
[264.29293823 87.52220917]
[275.73776245 76.62306976]
[291.53506470 77.09245300]
[302.31262207 88.65187836]
[301.67623901 104.44335175]
[290.00350952 115.09806824]
[274.21963501 114.29476929]
[263.68893433 102.51004791]
[248.70109558 101.90605927]
[233.71327209 101.30207062]
[218.71327209 101.30207062]
[203.72543335 101.90605927]
[188.73759460 102.51004791]
[173.74975586 103.11403656]
[158.76193237 103.71802521]
[143.77409363 104.32201385]
[98.36335754 132.32386780]
[95.56055450 147.05969238]
[92.75774384 161.79550171]
[89.95494080 176.53132629]
[87.15213013 191.26713562]
[84.34932709 206.00294495]
[95.60344696 221.11454773]
[92.42728424 239.36633301]
[77.25595093 249.43833923]
[75.24815369 264.30337524]
[73.24035645 279.16836548]
[71.23255920 294.03338623]
[77.05303955 308.74505615]
[67.68177795 320.32211304]
[65.67398071 335.18713379]
[63.66618347 350.05215454]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 116]
[7 115]
[8 114]
[10 112]
[11 111]
[12 110]
[13 109]
[18 106]
[19 105]
[20 104]
[21 103]
[22 102]
[23 101]
[24 34]
[25 33]
[26 32]
[27 31]
[35 54]
[36 53]
[37 52]
[38 51]
[39 47]
[40 46]
[41 45]
[56 73]
[57 72]
[58 71]
[59 70]
[60 69]
[61 68]
[62 67]
[74 100]
[75 99]
[76 98]
[77 97]
[78 96]
[79 95]
[83 94]
[84 93]
[85 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
