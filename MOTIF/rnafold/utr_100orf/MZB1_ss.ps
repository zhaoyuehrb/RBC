%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:18:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCACACACACAUCUGCACCUCAACCACAGACUACACUUGCUGAACUGGCUCCUGGGGCCAUGAGGCUGUCACUGCCACUGCUGCUGCUGCUGCUGGGAGCCUGGGCCAUCCCAGGGGGCCUCGGGGACAGGGCGCCACUCACAGCCACAGCCCCACAAC\
) } def
/len { sequence length } bind def

/coor [
[76.57539368 131.11694336]
[65.41516876 141.13938904]
[54.25495148 151.16184998]
[43.09473038 161.18429565]
[48.75728607 174.37408447]
[50.06017685 188.64718628]
[46.88883591 202.60232544]
[39.56731033 214.87359619]
[28.82517052 224.26412964]
[15.72487068 229.86279297]
[1.55664074 231.13264465]
[-12.28856850 227.96235657]
[-24.45564461 220.67585754]
[-35.80929565 230.47863770]
[-47.16294479 240.28143311]
[-58.51659775 250.08421326]
[-54.98155594 264.97589111]
[-58.78317261 279.80175781]
[-69.04786682 291.15493774]
[-83.41688538 296.42654419]
[-98.58833313 294.40521240]
[-111.07592010 285.55541992]
[-118.01009369 271.91079712]
[-117.79743195 256.60678101]
[-110.48680115 243.16009521]
[-97.75812531 234.66070557]
[-82.53637695 233.06172180]
[-68.31938171 238.73056030]
[-56.96573257 228.92778015]
[-45.61207962 219.12500000]
[-34.25843048 209.32220459]
[-40.03253937 194.69964600]
[-40.46021652 178.95733643]
[-35.47161865 163.99200439]
[-25.65056801 151.61299133]
[-12.16630363 143.32353210]
[3.36570358 140.13822937]
[19.07728767 142.45893860]
[33.07228088 150.02407837]
[44.23250198 140.00163269]
[55.39272308 129.97917175]
[66.55294037 119.95672607]
[61.77313614 107.46214294]
[61.50304031 94.08723450]
[65.77451324 81.40987396]
[74.08364868 70.92562103]
[85.45018768 63.87134552]
[98.53320312 61.07924271]
[100.86526489 46.26163864]
[103.19732666 31.44402885]
[105.52938843 16.62642288]
[107.86145020 1.80881476]
[110.19351196 -13.00879288]
[112.38089752 -27.84844780]
[114.42339325 -42.70873642]
[116.46589661 -57.56902695]
[118.50839233 -72.42931366]
[120.11512756 -87.34300995]
[121.28472137 -102.29734802]
[122.45430756 -117.25167847]
[114.87992096 -125.14629364]
[112.96847534 -135.69488525]
[117.11740112 -145.34057617]
[125.72132874 -150.96638489]
[127.47348785 -165.86370850]
[129.22564697 -180.76101685]
[130.97781372 -195.65832520]
[132.72996521 -210.55564880]
[126.65764618 -225.16514587]
[135.82865906 -236.90148926]
[137.58082581 -251.79879761]
[139.33297729 -266.69610596]
[137.04556274 -272.98635864]
[138.14915466 -278.62619019]
[141.45518494 -282.13629150]
[143.78724670 -296.95391846]
[131.95596313 -306.64761353]
[126.60064697 -320.86791992]
[129.06581116 -335.76052856]
[138.59063721 -347.34213257]
[152.53971863 -352.56597900]
[154.87178040 -367.38357544]
[148.47817993 -382.48504639]
[158.57420349 -395.40795898]
[174.77394104 -392.85836792]
[180.41249084 -377.45907593]
[169.68939209 -365.05151367]
[167.35733032 -350.23391724]
[179.02752686 -340.97799683]
[184.53448486 -327.03060913]
[182.30606079 -312.10076904]
[172.84172058 -300.21282959]
[158.60485840 -294.62185669]
[156.27279663 -279.80422974]
[154.23030090 -264.94393921]
[152.47813416 -250.04663086]
[150.72596741 -235.14932251]
[156.92362976 -221.60537720]
[147.62728882 -208.80348206]
[145.87512207 -193.90617371]
[144.12295532 -179.00885010]
[142.37080383 -164.11154175]
[140.61863708 -149.21423340]
[149.57723999 -132.11177063]
[137.40864563 -116.08208466]
[136.23904419 -101.12775421]
[135.06945801 -86.17342377]
[137.11560059 -83.24344635]
[137.81575012 -79.16184235]
[136.63761902 -74.58550262]
[133.36868286 -70.38681793]
[131.32618713 -55.52652740]
[129.28367615 -40.66623688]
[127.24118042 -25.80594826]
[129.45706177 -18.71533966]
[125.01111603 -10.67673111]
[122.67905426 4.14087629]
[120.34699249 18.95848274]
[118.01493073 33.77609253]
[115.68286896 48.59369659]
[113.35081482 63.41130447]
[131.36491394 76.90846252]
[138.90290833 98.11835480]
[133.44705200 119.95672607]
[144.60728455 129.97917175]
[155.76750183 140.00163269]
[166.92771912 150.02407837]
[181.49981689 145.37635803]
[196.34375000 148.62512207]
[207.49440002 158.80004883]
[212.02462769 173.09455872]
[208.81321716 187.63940430]
[219.97343445 197.66184998]
[231.13365173 207.68429565]
[245.70954895 202.84292603]
[260.75009155 205.95384216]
[272.20944214 216.18022156]
[277.00509644 230.77122498]
[273.84704590 245.80194092]
[263.58480835 257.22918701]
[248.97885132 261.97906494]
[233.95811462 258.77392578]
[222.56309509 248.47592163]
[217.85899353 233.85514832]
[221.11120605 218.84452820]
[209.95098877 208.82206726]
[198.79077148 198.79962158]
[184.67359924 203.55053711]
[169.97607422 200.57754517]
[158.66528320 190.58093262]
[153.84518433 176.17039490]
[156.90527344 161.18429565]
[145.74504089 151.16184998]
[134.58482361 141.13938904]
[123.42460632 131.11694336]
[117.32311249 134.88389587]
[110.63444519 137.46846008]
[103.58532715 138.78302002]
[96.41467285 138.78302002]
[89.36555481 137.46846008]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[4 39]
[13 31]
[14 30]
[15 29]
[16 28]
[48 121]
[49 120]
[50 119]
[51 118]
[52 117]
[53 116]
[54 114]
[55 113]
[56 112]
[57 111]
[58 107]
[59 106]
[60 105]
[64 103]
[65 102]
[66 101]
[67 100]
[68 99]
[70 97]
[71 96]
[72 95]
[75 94]
[76 93]
[81 88]
[82 87]
[124 155]
[125 154]
[126 153]
[127 152]
[132 147]
[133 146]
[134 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
