%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:54:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAAUCUCUGAUGCCCUGCGAUGCCCACACUCAAUACUUCUGCCUCUCCACCCACAUUCUUCUGGGCCAAUGCCUCCGGAGGCAGUGUGCUGAGUGCUGAUGAUGCUCCGAUGCCUGUCA\
) } def
/len { sequence length } bind def

/coor [
[78.24814606 326.50485229]
[74.76726532 341.46408081]
[64.26140594 352.66775513]
[49.55657959 357.10214233]
[34.60831833 353.57440186]
[23.43762398 343.03347778]
[19.04936028 328.31481934]
[22.62394714 313.37768555]
[33.19984055 302.24008179]
[47.93217468 297.89797974]
[51.37749100 283.29901123]
[54.82280731 268.70004272]
[58.26812363 254.10107422]
[61.33640289 239.41824341]
[64.02561188 224.66127014]
[55.56745911 216.80017090]
[51.96916199 205.70106506]
[54.25281143 194.13592529]
[61.95581818 185.05354309]
[73.21885681 180.82769775]
[76.66416931 166.22872925]
[68.63870239 153.73364258]
[71.92478180 138.87913513]
[85.08519745 130.54600525]
[88.53051758 115.94703674]
[80.67501831 96.47834778]
[94.89316559 81.03220367]
[96.81913757 66.15636444]
[98.55342865 51.25695801]
[100.09574127 36.33646011]
[101.63805389 21.41596413]
[103.18037415 6.49546528]
[104.72268677 -8.42503262]
[106.26499939 -23.34553146]
[99.98765564 -37.86811829]
[108.99257660 -49.73237610]
[110.53489685 -64.65287781]
[112.07720947 -79.57337189]
[104.53146362 -90.12935638]
[106.19758606 -102.59167480]
[115.62832642 -110.28514099]
[117.55429840 -125.16098022]
[119.48027802 -140.03681946]
[121.40625000 -154.91265869]
[123.33222961 -169.78849792]
[125.25820160 -184.66433716]
[127.18418121 -199.54017639]
[129.11015320 -214.41601562]
[111.46739197 -228.10571289]
[105.27812958 -249.43562317]
[112.77072906 -270.21444702]
[130.94760132 -282.54959106]
[129.78996277 -297.50485229]
[128.63233948 -312.46011353]
[127.47470093 -327.41537476]
[114.18466187 -335.42501831]
[108.17176056 -349.72973633]
[111.74808502 -364.82907104]
[123.53846741 -374.91699219]
[139.00926208 -376.11453247]
[152.21163940 -367.96118164]
[158.06900024 -353.59210205]
[154.32908630 -338.53247070]
[142.42996216 -328.57302856]
[143.58760071 -313.61776733]
[144.74522400 -298.66250610]
[145.90286255 -283.70724487]
[154.26083374 -281.56967163]
[161.86953735 -277.47003174]
[168.27522278 -271.64404297]
[173.09375000 -264.43069458]
[176.03369141 -256.25247192]
[176.91389465 -247.59054565]
[175.67463684 -238.95658875]
[172.38162231 -230.86247253]
[167.22256470 -223.78991699]
[160.49645996 -218.16183472]
[152.59626770 -214.31710815]
[143.98599243 -212.49005127]
[142.06001282 -197.61421204]
[140.13404846 -182.73835754]
[138.20806885 -167.86251831]
[136.28208923 -152.98667908]
[134.35612488 -138.11083984]
[132.43014526 -123.23500061]
[130.50416565 -108.35916138]
[138.14587402 -92.61778259]
[126.99771118 -78.03105927]
[125.45539093 -63.11056137]
[123.91307831 -48.19005966]
[130.30073547 -34.73468781]
[121.18550110 -21.80321503]
[119.64318848 -6.88271761]
[118.10086823 8.03778076]
[116.55855560 22.95827866]
[115.01624298 37.87877655]
[113.47392273 52.79927444]
[115.94516754 59.85972595]
[111.69497681 68.08233643]
[109.76900482 82.95817566]
[115.75450897 88.26746368]
[119.12629700 95.52320099]
[119.32498169 103.52165222]
[116.31760406 110.93585968]
[110.60308075 116.53577423]
[103.12948608 119.39235687]
[99.68416595 133.99131775]
[107.73030090 147.32913208]
[104.02829742 162.08547974]
[91.26313782 169.67405701]
[87.81782532 184.27302551]
[98.39843750 199.87524414]
[94.40453339 217.97520447]
[78.78258514 227.35049438]
[76.09337616 242.10745239]
[78.01083374 248.63615417]
[76.48705292 254.26704407]
[72.86708832 257.54638672]
[69.42177582 272.14535522]
[65.97645569 286.74432373]
[62.53113937 301.34329224]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 121]
[11 120]
[12 119]
[13 118]
[14 115]
[15 114]
[20 111]
[21 110]
[24 107]
[25 106]
[27 100]
[28 99]
[29 97]
[30 96]
[31 95]
[32 94]
[33 93]
[34 92]
[36 90]
[37 89]
[38 88]
[41 86]
[42 85]
[43 84]
[44 83]
[45 82]
[46 81]
[47 80]
[48 79]
[52 67]
[53 66]
[54 65]
[55 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
