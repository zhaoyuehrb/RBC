%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUGGGAUGUUAGCGGUGGGGGCAAUGGAGGGCACCCGGCAGAGCGCAUUCCUGCUCAGCAGCCCUCCCCUGGCCGCCCUGCACAGCAUGGCCGAGAUGAAGACCC\
) } def
/len { sequence length } bind def

/coor [
[149.53175354 350.78918457]
[157.33084106 337.76849365]
[169.30929565 328.44747925]
[164.96820068 314.08938599]
[160.62709045 299.73129272]
[147.20550537 288.53079224]
[151.34236145 270.66287231]
[146.58163452 256.43841553]
[141.82090759 242.21394348]
[137.06016541 227.98948669]
[132.29943848 213.76501465]
[118.55483246 202.96334839]
[122.16535950 184.98168945]
[116.98910522 170.90310669]
[111.81284332 156.82453918]
[106.63658905 142.74595642]
[101.29024506 137.47114563]
[101.52166748 128.17738342]
[96.76094055 113.95291901]
[86.41663361 104.54616547]
[89.01459503 90.80781555]
[84.25386810 76.58334351]
[79.49313354 62.35887909]
[63.35690689 57.54659271]
[53.32101059 44.23189545]
[53.14240265 27.72470474]
[62.69478607 14.46405983]
[57.51852798 0.38548192]
[52.34226990 -13.69309616]
[47.16601181 -27.77167320]
[41.98975372 -41.85025024]
[36.81349564 -55.92882919]
[31.63723755 -70.00740814]
[23.19768906 -72.12406158]
[16.41819000 -77.42475128]
[12.41780758 -84.93651581]
[11.81680489 -93.33040619]
[14.64160728 -101.15641022]
[20.33346176 -107.09389496]
[16.84248734 -121.68200684]
[6.10591078 -133.30253601]
[10.66871452 -147.48103333]
[7.17774105 -162.06915283]
[3.68676758 -176.65727234]
[0.19579421 -191.24537659]
[-3.29517937 -205.83349609]
[-16.89390373 -213.88645935]
[-20.73435974 -229.21702576]
[-12.53807163 -242.72985840]
[2.83224726 -246.40802002]
[16.25765991 -238.06932068]
[19.77310753 -222.66096497]
[11.29293633 -209.32446289]
[14.78390980 -194.73635864]
[18.27488327 -180.14823914]
[21.76585579 -165.56011963]
[25.25683022 -150.97201538]
[35.74370956 -140.39492798]
[31.43060303 -125.17298126]
[34.92157745 -110.58486938]
[51.48368073 -96.74788666]
[45.71581650 -75.18366241]
[50.89207458 -61.10508728]
[56.06833267 -47.02650833]
[61.24459076 -32.94793320]
[66.42084503 -18.86935425]
[71.59710693 -4.79077625]
[76.77336121 9.28780174]
[89.98332977 11.75198364]
[100.30738068 20.52264214]
[104.94828796 33.36519241]
[102.57849884 46.92378998]
[93.71760559 57.59815216]
[98.47833252 71.82261658]
[103.23905945 86.04708099]
[113.58336639 95.45383453]
[110.98540497 109.19218445]
[115.74613190 123.41665649]
[120.71516418 137.56970215]
[125.89141846 151.64828491]
[131.06767273 165.72685242]
[136.24394226 179.80543518]
[147.68302917 185.98454285]
[151.65443420 197.94056702]
[146.52391052 209.00428772]
[151.28463745 223.22874451]
[156.04536438 237.45321655]
[160.80609131 251.67768860]
[165.56683350 265.90216064]
[176.81959534 272.41439819]
[180.43829346 284.48187256]
[174.98519897 295.39019775]
[179.32629395 309.74829102]
[183.66738892 324.10638428]
[198.80354309 325.22943115]
[212.51022339 331.74795532]
[222.93371582 342.78042603]
[228.66432190 356.83477783]
[228.92701721 372.01025391]
[223.68629456 386.25451660]
[213.65090942 397.64117432]
[200.17805481 404.63021851]
[185.08984375 406.27645874]
[170.42681885 402.35726929]
[158.17202759 393.40267944]
[149.98284912 380.62371826]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 94]
[4 93]
[5 92]
[7 89]
[8 88]
[9 87]
[10 86]
[11 85]
[13 82]
[14 81]
[15 80]
[16 79]
[18 78]
[19 77]
[21 75]
[22 74]
[23 73]
[27 68]
[28 67]
[29 66]
[30 65]
[31 64]
[32 63]
[33 62]
[39 60]
[40 59]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
