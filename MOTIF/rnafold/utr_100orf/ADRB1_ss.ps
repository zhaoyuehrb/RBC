%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:37:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACCACGCCGCCCGGGCUUCUGGGGUGUUCCCCAACCACGGCCCAGCCCUGCCACACCCCCCGCCCCCGGCCUCCGCAGCUCGGCAUGGGCGCGGGGGUGCUCGUCCUGGGCGCCUCCGAGCCCGGUAACCUGUCGUCGGCCGCACCGCUCCCCGACGGCGCGGCCACCGCGGCGCGGCUGCUGG\
) } def
/len { sequence length } bind def

/coor [
[103.55470276 273.89096069]
[102.79902649 258.91000366]
[102.04334259 243.92904663]
[101.16185760 228.95497131]
[100.15461731 213.98883057]
[91.58015442 201.80982971]
[98.37331390 187.52125549]
[97.36608124 172.55511475]
[96.35884094 157.58895874]
[95.35160065 142.62281799]
[94.34436035 127.65667725]
[93.33712006 112.69053650]
[87.10589600 99.04605103]
[76.45484161 88.48409271]
[65.80378723 77.92213440]
[55.15272903 67.36016846]
[44.50167465 56.79821014]
[33.85061646 46.23625183]
[23.19956207 35.67428970]
[12.54850674 25.11232948]
[-6.14632797 29.10800743]
[-23.36782455 21.48056602]
[-35.63499832 30.11285973]
[-47.90216827 38.74515533]
[-60.16934204 47.37744522]
[-72.43651581 56.00973892]
[-78.83771515 71.10797119]
[-95.14464569 72.84465790]
[-104.58213043 59.43325043]
[-97.44169617 44.67024994]
[-81.06880951 43.74256897]
[-68.80163574 35.11027527]
[-56.53446198 26.47798157]
[-44.26729202 17.84568787]
[-32.00011826 9.21339512]
[-33.55587006 3.47424746]
[-33.96055222 -2.45823979]
[-33.19857788 -8.35549068]
[-31.29930305 -13.99028683]
[-28.33590698 -19.14552116]
[-24.42256737 -23.62256813]
[-31.66653252 -36.75744247]
[-38.91049576 -49.89231873]
[-43.41676331 -52.60853195]
[-46.14440155 -56.40745163]
[-46.97934341 -60.42456055]
[-46.16946030 -63.87646866]
[-52.74251175 -77.35960388]
[-59.31556320 -90.84274292]
[-65.88861084 -104.32588196]
[-83.08976746 -114.81076050]
[-80.95369720 -134.01641846]
[-87.97598267 -147.27113342]
[-104.78069305 -152.09523010]
[-112.74961853 -167.27674866]
[-107.39032745 -183.20787048]
[-114.63429260 -196.34274292]
[-121.87825775 -209.47761536]
[-129.12222290 -222.61250305]
[-136.36619568 -235.74737549]
[-143.61015320 -248.88224792]
[-150.85412598 -262.01712036]
[-158.20816040 -275.09069824]
[-165.67175293 -288.10202026]
[-173.13536072 -301.11334229]
[-180.59895325 -314.12469482]
[-188.06254578 -327.13601685]
[-195.85162354 -339.95513916]
[-203.96124268 -352.57394409]
[-212.07084656 -365.19274902]
[-220.28617859 -377.74298096]
[-228.60662842 -390.22378540]
[-244.16831970 -391.76257324]
[-255.06312561 -402.98028564]
[-256.14685059 -418.58026123]
[-246.90780640 -431.19668579]
[-231.70837402 -434.87243652]
[-217.72526550 -427.87197876]
[-211.56086731 -413.50067139]
[-216.12583923 -398.54421997]
[-207.80538940 -386.06344604]
[-201.46585083 -382.23394775]
[-199.45205688 -373.30236816]
[-191.34243774 -360.68356323]
[-183.23281860 -348.06475830]
[-179.86224365 -346.96441650]
[-176.86274719 -344.16488647]
[-175.03254700 -339.86114502]
[-175.05122375 -334.59960938]
[-167.58761597 -321.58828735]
[-160.12402344 -308.57693481]
[-152.66043091 -295.56561279]
[-145.19682312 -282.55429077]
[-139.12875366 -278.30773926]
[-137.71923828 -269.26107788]
[-130.47528076 -256.12622070]
[-123.23131561 -242.99133301]
[-115.98735046 -229.85646057]
[-108.74338531 -216.72158813]
[-101.49942017 -203.58671570]
[-94.25545502 -190.45182800]
[-81.48654175 -188.63615417]
[-71.95708466 -179.65884399]
[-69.30552673 -166.63931274]
[-74.72126770 -154.29341125]
[-67.69898224 -141.03869629]
[-57.67701721 -138.91856384]
[-50.33029938 -131.46789551]
[-48.26590729 -120.98581696]
[-52.40547562 -110.89893341]
[-45.83242416 -97.41579437]
[-39.25937271 -83.93265533]
[-32.68632126 -70.44951630]
[-25.77562141 -57.13628387]
[-18.53165627 -44.00140762]
[-11.28769112 -30.86653328]
[6.41023302 -30.34933090]
[20.92778778 -19.98322487]
[27.25607681 -3.16254306]
[23.11046791 14.46127319]
[33.76152420 25.02323341]
[44.41257858 35.58519363]
[55.06363297 46.14715576]
[65.71469116 56.70911789]
[76.36574554 67.27108002]
[87.01679993 77.83303833]
[97.66785431 88.39499664]
[87.20680237 77.64482117]
[82.91106415 63.27308655]
[85.75677490 48.54549789]
[95.09728241 36.80859756]
[108.81016541 30.72937012]
[123.77941895 31.68919754]
[136.60359192 39.46997833]
[144.36865234 52.30368423]
[145.31011963 67.27410889]
[139.21299744 80.98091888]
[152.85746765 87.21215057]
[161.98474121 87.93435669]
[166.67745972 93.66436768]
[180.21533203 100.12393188]
[193.75321960 106.58349609]
[207.29109192 113.04305267]
[220.82896423 119.50261688]
[234.36683655 125.96218109]
[250.15380859 124.92194366]
[258.30853271 137.38589478]
[271.84640503 143.84545898]
[285.38427734 150.30500793]
[298.95721436 142.78474426]
[314.35412598 144.71209717]
[325.65457153 155.34599304]
[328.51330566 170.59745789]
[321.83105469 184.60200500]
[308.17733765 191.97459412]
[292.80224609 189.88032532]
[281.61782837 179.12446594]
[278.92471313 163.84289551]
[265.38684082 157.38333130]
[251.84895325 150.92376709]
[237.03030396 152.42602539]
[227.90727234 139.50006104]
[214.36940002 133.04049683]
[200.83152771 126.58093262]
[187.29365540 120.12136841]
[173.75578308 113.66180420]
[160.21789551 107.20224762]
[146.62625122 100.85662842]
[132.98176575 94.62540436]
[126.81214142 98.88987732]
[108.30326843 111.68329620]
[109.31050110 126.64943695]
[110.31774139 141.61558533]
[111.32498169 156.58172607]
[112.33222198 171.54786682]
[113.33946228 186.51400757]
[121.98596954 199.76348877]
[115.12075806 212.98158264]
[116.12799835 227.94772339]
[119.83323669 236.32029724]
[117.02429962 243.17337036]
[117.77997589 258.15432739]
[118.53565216 273.13528442]
[127.88981628 286.60491943]
[120.65799713 301.32339478]
[104.27967834 302.14953613]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 183]
[2 182]
[3 181]
[4 179]
[5 178]
[7 176]
[8 175]
[9 174]
[10 173]
[11 172]
[12 171]
[13 127]
[14 126]
[15 125]
[16 124]
[17 123]
[18 122]
[19 121]
[20 120]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[41 116]
[42 115]
[43 114]
[47 113]
[48 112]
[49 111]
[50 110]
[52 106]
[53 105]
[56 101]
[57 100]
[58 99]
[59 98]
[60 97]
[61 96]
[62 95]
[63 93]
[64 92]
[65 91]
[66 90]
[67 89]
[68 85]
[69 84]
[70 83]
[71 81]
[72 80]
[137 169]
[138 168]
[140 167]
[141 166]
[142 165]
[143 164]
[144 163]
[145 162]
[147 160]
[148 159]
[149 158]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
