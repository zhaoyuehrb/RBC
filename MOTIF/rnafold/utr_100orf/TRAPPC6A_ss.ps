%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:18:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUUUAGGCGUGCGAGGAGGGGGCAUGGCGGAUACUGUGUUGUUUGAGUUUCUUCACACGGAGAUGGUGGCUGAGCUGUGGGCUCACGACCCCGACCCCGGCCCGGGGGUGAGCGCCGGGCUCC\
) } def
/len { sequence length } bind def

/coor [
[74.03005219 104.93877411]
[59.10459137 103.44525146]
[44.17913055 101.95173645]
[29.25366974 100.45821381]
[14.32820797 98.96469879]
[10.21867180 101.02198792]
[6.09075546 101.53912354]
[2.45186734 100.71210480]
[-0.31336290 98.88748169]
[-1.98292887 96.50618744]
[-16.68551636 93.53399658]
[-31.38810349 90.56180573]
[-46.09069061 87.58961487]
[-61.15035629 92.43905640]
[-72.09216309 82.33330536]
[-86.79474640 79.36111450]
[-101.49733734 76.38891602]
[-116.19992065 73.41672516]
[-130.90251160 70.44453430]
[-145.60510254 67.47234344]
[-160.30767822 64.50015259]
[-175.11112976 62.07978439]
[-189.99472046 60.21463013]
[-204.87829590 58.34947205]
[-219.76188660 56.48431778]
[-234.64547729 54.61916351]
[-247.04687500 64.04483032]
[-262.11437988 61.94127655]
[-271.02389526 50.06035614]
[-285.90747070 48.19520187]
[-300.79104614 46.33004379]
[-315.67465210 44.46488953]
[-332.14266968 48.49480820]
[-340.57391357 33.78594589]
[-328.77386475 21.61239052]
[-313.80947876 29.58130264]
[-298.92590332 31.44645691]
[-284.04232788 33.31161118]
[-269.15872192 35.17676926]
[-257.59301758 25.86172676]
[-242.47238159 27.54123688]
[-232.78031921 39.73557281]
[-217.89672852 41.60073090]
[-203.01315308 43.46588516]
[-188.12956238 45.33103943]
[-173.24597168 47.19619751]
[-170.19033813 45.23620605]
[-166.00323486 44.72335815]
[-161.40632629 46.18654633]
[-157.33549500 49.79756546]
[-142.63290405 52.76975632]
[-127.93032074 55.74194717]
[-113.22772980 58.71414185]
[-98.52514648 61.68633270]
[-83.82255554 64.65852356]
[-69.11997223 67.63071442]
[-55.11193085 62.56868744]
[-43.11849976 72.88702393]
[-28.41591072 75.85922241]
[-13.71332455 78.83141327]
[0.98926324 81.80360413]
[15.82172585 84.03923798]
[30.74718666 85.53275299]
[45.67264938 87.02627563]
[60.59811020 88.51979065]
[75.52357483 90.01330566]
[80.19143677 82.49427795]
[87.07944489 76.93728638]
[95.41558838 73.96516418]
[104.26555634 73.91102600]
[112.63743591 76.78093719]
[119.59291077 82.25325012]
[124.35241699 89.71460724]
[126.38249969 98.32875824]
[141.00642395 101.66657257]
[155.63034058 105.00438690]
[170.25425720 108.34220123]
[184.87817383 111.68001556]
[194.05409241 110.53617096]
[199.82289124 115.28763580]
[214.35905457 118.98899841]
[228.89521790 122.69035339]
[243.47639465 126.21022034]
[258.10031128 129.54803467]
[272.72421265 132.88584900]
[287.34814453 136.22366333]
[301.97207642 139.56147766]
[316.59597778 142.89929199]
[323.18875122 141.27536011]
[328.73785400 143.03695679]
[331.85693359 146.78520203]
[346.29629517 150.84780884]
[360.73565674 154.91041565]
[375.17501831 158.97302246]
[389.61437988 163.03562927]
[401.08990479 152.72465515]
[416.32189941 150.27719116]
[430.44989014 156.47422791]
[438.96569824 169.33830261]
[439.15194702 184.76454163]
[430.94924927 197.83049011]
[416.97497559 204.36683655]
[401.68835449 202.28788757]
[389.96722412 192.25698853]
[385.55178833 177.47499084]
[371.11242676 173.41238403]
[356.67306519 169.34977722]
[342.23370361 165.28717041]
[327.79431152 161.22456360]
[313.25817871 157.52320862]
[298.63424683 154.18539429]
[284.01031494 150.84757996]
[269.38641357 147.50976562]
[254.76249695 144.17195129]
[240.13858032 140.83413696]
[232.83740234 142.43054199]
[225.19384766 137.22651672]
[210.65769958 133.52516174]
[196.12153625 129.82379150]
[181.54035950 126.30393219]
[166.91644287 122.96611786]
[152.29252625 119.62830353]
[137.66860962 116.29048920]
[123.04468536 112.95267487]
[106.40867615 125.64680481]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 66]
[2 65]
[3 64]
[4 63]
[5 62]
[10 61]
[11 60]
[12 59]
[13 58]
[15 56]
[16 55]
[17 54]
[18 53]
[19 52]
[20 51]
[21 50]
[22 46]
[23 45]
[24 44]
[25 43]
[26 42]
[29 39]
[30 38]
[31 37]
[32 36]
[74 124]
[75 123]
[76 122]
[77 121]
[78 120]
[80 119]
[81 118]
[82 117]
[83 115]
[84 114]
[85 113]
[86 112]
[87 111]
[88 110]
[91 109]
[92 108]
[93 107]
[94 106]
[95 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
