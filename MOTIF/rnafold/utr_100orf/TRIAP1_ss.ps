%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:10:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAGAGUGCGCCGUCGUCGCCGCCGCCACCACUGUCGCCAUGAACAGUGUGGGGGAGGCAUGCACGGACAUGAAGCGCGAGUACGACCAGUGCUUCAAUCGCUGGUUCGCCGAGAAAUUUCUCAAGGGGGACAGCUCCG\
) } def
/len { sequence length } bind def

/coor [
[98.07146454 154.14610291]
[90.20507050 153.28768921]
[82.54760742 151.29261780]
[75.26242065 148.20343018]
[68.50490570 144.08602905]
[62.41920853 139.02822876]
[57.13513947 133.13793945]
[52.76541138 126.54077911]
[49.40324020 119.37747955]
[47.12033463 111.80084991]
[45.96539688 103.97249603]
[45.96306229 96.05940247]
[31.29783249 92.90804291]
[16.63260460 89.75668335]
[1.96737468 86.60532379]
[-12.73205090 83.61753845]
[-27.46384811 80.79368591]
[-42.19564819 77.96983337]
[-51.29603195 79.43250275]
[-57.22257996 74.91548157]
[-71.88780975 71.76412201]
[-86.55303955 68.61276245]
[-101.67075348 73.27809143]
[-112.48844147 63.03959656]
[-127.15367126 59.88823700]
[-142.27137756 64.55356598]
[-153.08906555 54.31507111]
[-167.75430298 51.16371155]
[-182.41952515 48.01235580]
[-197.08476257 44.86099625]
[-206.21546936 46.12054825]
[-212.03991699 41.47261047]
[-226.63130188 37.99530792]
[-241.22267151 34.51800537]
[-255.81405640 31.04070473]
[-270.40542603 27.56340218]
[-282.09979248 37.76251221]
[-297.55853271 39.10646439]
[-310.83752441 31.07848167]
[-316.83065796 16.76548576]
[-313.23348999 1.67111707]
[-301.42919922 -8.40053272]
[-285.95675659 -9.57670784]
[-272.76565552 -1.40514588]
[-266.92813110 12.97202206]
[-252.33674622 16.44932365]
[-237.74537659 19.92662621]
[-223.15399170 23.40392876]
[-208.56260681 26.88123131]
[-193.93339539 30.19576645]
[-179.26817322 33.34712601]
[-164.60295105 36.49848557]
[-149.93771362 39.64984131]
[-135.86895752 34.75910187]
[-124.00231171 45.22300720]
[-109.33708191 48.37436676]
[-95.26832581 43.48362732]
[-83.40167999 53.94753265]
[-68.73645020 57.09889221]
[-54.07122040 60.25024796]
[-39.37179565 63.23803711]
[-24.63999939 66.06188965]
[-9.90820026 68.88574219]
[-2.68852830 67.04080200]
[5.11873341 71.94010162]
[19.78396225 75.09145355]
[34.44919205 78.24281311]
[49.11442184 81.39417267]
[61.57478714 61.80285263]
[81.09159088 49.22607803]
[104.08074188 45.97346497]
[126.32050323 52.64231873]
[135.35217285 40.66613770]
[144.38385010 28.68995857]
[153.41552734 16.71377945]
[162.44720459 4.73760033]
[171.47886658 -7.23857927]
[180.51054382 -19.21475983]
[189.54222107 -31.19093895]
[187.54725647 -46.63949585]
[196.87727356 -58.65638351]
[211.61740112 -60.46306992]
[220.64907837 -72.43924713]
[225.35852051 -88.72597504]
[242.31246948 -88.70917511]
[246.98963928 -72.41315460]
[232.62524414 -63.40757370]
[223.59358215 -51.43139648]
[225.90892029 -36.76255798]
[216.92012024 -24.48834991]
[201.51840210 -22.15926552]
[192.48672485 -10.18308544]
[183.45504761 1.79309380]
[174.42338562 13.76927376]
[165.39170837 25.74545288]
[156.36003113 37.72163391]
[147.32835388 49.69781113]
[138.29669189 61.67399216]
[148.14643860 75.15168762]
[153.42570496 90.98820496]
[153.63333130 107.68020630]
[148.74957275 123.64312744]
[161.21000671 131.99404907]
[173.67042542 140.34495544]
[186.13085938 148.69587708]
[195.08013916 150.90196228]
[198.77301025 157.37422180]
[211.04429626 166.00067139]
[223.31558228 174.62710571]
[239.05500793 176.23376465]
[245.01730347 189.88294983]
[257.28860474 198.50939941]
[269.74902344 206.86030579]
[282.39239502 214.93154907]
[295.03579712 223.00277710]
[307.67916870 231.07402039]
[324.07720947 231.26359558]
[331.87509155 245.69013977]
[323.05099487 259.51284790]
[306.68240356 258.51211548]
[299.60794067 243.71739197]
[286.96453857 235.64616394]
[274.32116699 227.57492065]
[261.67779541 219.50369263]
[256.83078003 219.66271973]
[251.84835815 216.72282410]
[248.66213989 210.78068542]
[236.39085388 202.15423584]
[221.52917480 201.16459656]
[214.68913269 186.89839172]
[202.41786194 178.27195740]
[190.14657593 169.64550781]
[177.77995300 161.15629578]
[165.31951904 152.80538940]
[152.85908508 144.45446777]
[140.39866638 136.10356140]
[134.70892334 141.60299683]
[128.27880859 146.21501160]
[121.24549103 149.84123230]
[113.75898743 152.40428162]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 68]
[13 67]
[14 66]
[15 65]
[16 63]
[17 62]
[18 61]
[20 60]
[21 59]
[22 58]
[24 56]
[25 55]
[27 53]
[28 52]
[29 51]
[30 50]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[72 98]
[73 97]
[74 96]
[75 95]
[76 94]
[77 93]
[78 92]
[79 91]
[82 88]
[83 87]
[102 136]
[103 135]
[104 134]
[105 133]
[107 132]
[108 131]
[109 130]
[111 128]
[112 127]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
