%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:10:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCUCUUCGGGGGCCGCGGGGAAGGGUCGGCGCGGACGGAGCUCGGGGCAUGUGGGACCCCCGCGCGUUCGAGCGGCGCUGGCGGGCCGAGUUCCCCGGGGCGGAGGCGCCGGUCCCGAGGCUGGAGUCGGUGCGGGACGCGGAGCGGG\
) } def
/len { sequence length } bind def

/coor [
[265.56188965 297.32235718]
[267.09268188 290.98660278]
[256.00137329 280.88796997]
[244.91006470 270.78930664]
[233.81874084 260.69067383]
[222.72743225 250.59202576]
[211.63612366 240.49336243]
[210.82553101 255.47145081]
[199.79072571 265.63183594]
[184.79676819 265.20590210]
[174.35655212 254.43550110]
[174.39752197 239.43556213]
[184.89643860 228.72235107]
[199.89393616 228.37889099]
[190.14628601 216.97787476]
[180.39863586 205.57685852]
[166.24702454 200.93128967]
[163.15994263 185.41418457]
[153.41229248 174.01316833]
[143.66464233 162.61215210]
[133.91699219 151.21113586]
[124.16933441 139.81010437]
[114.42168427 128.40908813]
[104.67402649 117.00806427]
[86.83480835 111.73876953]
[83.63684082 93.41456604]
[73.42336273 82.42890167]
[63.20988083 71.44323730]
[52.99640274 60.45757294]
[37.93325806 55.61895370]
[34.93389893 41.02946854]
[24.72042084 30.04380226]
[16.52942276 25.85340691]
[14.41166973 18.72173309]
[4.42894363 7.52596760]
[-5.55378294 -3.66979814]
[-13.65583134 -8.02968979]
[-15.62476063 -15.20387745]
[-25.37241364 -26.60489845]
[-40.88780212 -27.98707581]
[-50.61089706 -39.68819046]
[-49.19758606 -54.47122955]
[-58.94523621 -65.87224579]
[-68.69288635 -77.27326965]
[-78.44054413 -88.67429352]
[-88.18819427 -100.07530975]
[-97.93584442 -111.47633362]
[-105.94544220 -116.00382996]
[-107.76469421 -123.21743011]
[-117.27304840 -134.81877136]
[-132.00505066 -140.58753967]
[-134.08854675 -155.33569336]
[-143.59690857 -166.93704224]
[-153.10527039 -178.53837585]
[-162.61361694 -190.13972473]
[-172.12197876 -201.74105835]
[-181.63034058 -213.34240723]
[-196.34700012 -221.76004028]
[-192.33230591 -238.23178101]
[-175.39289856 -238.93382263]
[-170.02899170 -222.85076904]
[-160.52064514 -211.24942017]
[-151.01228333 -199.64808655]
[-141.50392151 -188.04673767]
[-131.99555969 -176.44540405]
[-122.48720551 -164.84405518]
[-108.43530273 -159.90510559]
[-105.67170715 -144.32713318]
[-96.16335297 -132.72578430]
[-86.53482056 -121.22398376]
[-76.78717041 -109.82295990]
[-67.03952026 -98.42194366]
[-57.29186630 -87.02091980]
[-47.54421616 -75.61990356]
[-37.79656219 -64.21887970]
[-22.97349548 -63.31763458]
[-12.92557907 -51.89423752]
[-13.97139168 -36.35255051]
[-4.22374010 -24.95152855]
[5.64198303 -13.65252495]
[15.62470913 -2.45675874]
[25.60743523 8.73900700]
[35.70608521 19.83032227]
[45.91956711 30.81598663]
[60.25217438 34.86883926]
[63.98206711 50.24409485]
[74.19554901 61.22975922]
[84.40902710 72.21542358]
[94.62250519 83.20108795]
[104.64363098 82.98361206]
[113.16519165 88.26123047]
[117.43531036 97.32965851]
[116.07505035 107.26041412]
[125.82270050 118.66143799]
[135.57035828 130.06245422]
[145.31800842 141.46347046]
[155.06565857 152.86450195]
[164.81330872 164.26551819]
[174.56095886 175.66653442]
[189.40979004 181.12757874]
[191.79965210 195.82920837]
[201.54730225 207.23022461]
[211.29495239 218.63124084]
[221.73477173 229.40205383]
[232.82608032 239.50070190]
[243.91740417 249.59934998]
[255.00871277 259.69799805]
[266.10003662 269.79666138]
[277.19134521 279.89529419]
[301.50534058 282.36849976]
[308.90988159 304.93173218]
[321.34933472 313.31387329]
[333.78875732 321.69604492]
[346.31472778 329.94833374]
[358.92584229 338.06985474]
[371.53698730 346.19140625]
[384.14810181 354.31295776]
[396.75924683 362.43447876]
[409.37036133 370.55603027]
[422.16149902 368.59619141]
[432.51235962 375.67279053]
[435.15286255 387.51910400]
[447.59231567 395.90124512]
[460.03176880 404.28338623]
[472.47119141 412.66552734]
[488.85949707 413.26153564]
[496.29739380 427.87692261]
[487.13339233 441.47665405]
[470.79464722 440.07049561]
[464.08905029 425.10498047]
[451.64962769 416.72283936]
[439.21017456 408.34069824]
[426.77072144 399.95855713]
[409.25097656 399.71847534]
[401.24880981 383.16714478]
[388.63769531 375.04562378]
[376.02658081 366.92407227]
[363.41543579 358.80252075]
[350.80432129 350.68099976]
[338.19317627 342.55944824]
[330.81903076 341.57574463]
[325.40661621 334.13546753]
[312.96716309 325.75332642]
[300.52774048 317.37118530]
[295.09140015 320.33837891]
[288.99594116 321.64511108]
[282.74011230 321.16079712]
[276.84259033 318.90249634]
[271.79888916 315.03518677]
[268.03973389 309.86010742]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 109]
[3 108]
[4 107]
[5 106]
[6 105]
[7 104]
[14 103]
[15 102]
[16 101]
[18 99]
[19 98]
[20 97]
[21 96]
[22 95]
[23 94]
[24 93]
[26 89]
[27 88]
[28 87]
[29 86]
[31 84]
[32 83]
[34 82]
[35 81]
[36 80]
[38 79]
[39 78]
[42 75]
[43 74]
[44 73]
[45 72]
[46 71]
[47 70]
[49 69]
[50 68]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
[57 61]
[111 144]
[112 143]
[113 142]
[114 140]
[115 139]
[116 138]
[117 137]
[118 136]
[119 135]
[122 133]
[123 132]
[124 131]
[125 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
