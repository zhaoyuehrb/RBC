%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACAAUUUAUCUGCACGAAUACCCCGUGCUACCAGAAUGGCUGUCUCAGUACUUCGCCUGACAGUUGUCCUGGGACUGCUUGUCUUAUUCCUGACCUGCUAUGCAGACGACAAACCAGACAAGCCAGACGACAAGC\
) } def
/len { sequence length } bind def

/coor [
[160.69918823 242.04603577]
[147.06764221 248.30551147]
[132.32115173 251.05163574]
[117.35020447 250.11862183]
[103.05879211 245.56277466]
[90.30992126 237.65921021]
[79.87342072 226.88519287]
[72.37950134 213.89131165]
[68.28067780 199.46218872]
[67.82446289 184.46913147]
[71.03839874 169.81748962]
[77.72841644 156.39199829]
[87.49053955 145.00337219]
[99.73123169 136.34146118]
[87.09567261 144.42494202]
[74.46011353 152.50842285]
[61.82455063 160.59190369]
[49.18899155 168.67538452]
[47.35685730 184.20526123]
[35.93556976 194.88647461]
[20.31791115 195.67567444]
[7.87806654 186.20021057]
[4.48974657 170.93412781]
[11.75281334 157.08560181]
[26.23786736 151.19346619]
[41.10551071 156.03982544]
[53.74106979 147.95634460]
[66.37663269 139.87286377]
[79.01219177 131.78938293]
[91.64775085 123.70590973]
[81.48789215 114.38751221]
[78.32964325 101.94054413]
[82.21848297 90.69615173]
[72.48974609 79.27898407]
[62.76101685 67.86180878]
[53.03228760 56.44464111]
[38.19253540 50.95898438]
[35.82706070 36.25341797]
[26.09833145 24.83624458]
[16.36959839 13.41907501]
[6.64086771 2.00190401]
[-3.08786345 -9.41526699]
[-12.81659508 -20.83243752]
[-22.54532623 -32.24960709]
[-32.27405930 -43.66677856]
[-42.00278854 -55.08395004]
[-56.45426178 -50.36978149]
[-71.60932922 -51.54977798]
[-85.15695190 -58.44400406]
[-95.03121948 -70.00113678]
[-99.72637177 -84.45879364]
[-98.52643585 -99.61229706]
[-91.61439514 -113.15084076]
[-80.04428864 -123.00989532]
[-65.58045959 -127.68602753]
[-50.42855072 -126.46616364]
[-36.89911270 -119.53631592]
[-27.05528831 -107.95324707]
[-22.39818573 -93.48328400]
[-23.63798332 -78.33299255]
[-30.58561897 -64.81268311]
[-20.85688591 -53.39551163]
[-11.12815571 -41.97834015]
[-1.39942420 -30.56116867]
[8.32930756 -19.14399719]
[18.05803871 -7.72682714]
[27.78676987 3.69034338]
[37.51550293 15.10751438]
[47.24423218 26.52468491]
[61.38811874 31.19370651]
[64.44945526 46.71590805]
[74.17819214 58.13307953]
[83.90692139 69.55024719]
[93.63565063 80.96742249]
[110.70209503 81.05705261]
[122.88273621 94.89322662]
[120.49427032 114.55043030]
[135.47872925 113.86771393]
[150.46318054 113.18499756]
[165.43888855 112.33176422]
[180.40391541 111.30812836]
[195.36895752 110.28449249]
[210.33398438 109.26085663]
[225.29901123 108.23722076]
[240.26405334 107.21357727]
[255.22908020 106.18994141]
[258.16165161 91.39686584]
[264.81835938 77.87748718]
[274.74008179 66.55074310]
[287.24597168 58.18476486]
[301.48019409 53.34485245]
[316.47052002 52.35523987]
[331.19470215 55.27738571]
[344.65020752 61.90620804]
[355.92251587 71.78445435]
[364.24716187 84.23424530]
[369.06164551 98.40357971]
[384.02667236 97.37994385]
[398.99172974 96.35630798]
[413.95675659 95.33267212]
[429.34634399 88.21952820]
[440.44177246 101.03857422]
[431.19522095 115.24904633]
[414.98037720 110.29770660]
[400.01535034 111.32134247]
[385.05032349 112.34497833]
[370.08529663 113.36861420]
[367.24502563 128.06155396]
[360.69317627 141.52891541]
[350.87094116 152.85006714]
[338.44338989 161.24934387]
[324.25424194 166.14921570]
[309.26879883 167.21000671]
[294.50811768 164.35339355]
[280.97955322 157.76823425]
[269.60791016 147.89797974]
[261.17230225 135.41096497]
[256.25271606 121.15497589]
[241.28768921 122.17861176]
[226.32264709 123.20224762]
[211.35762024 124.22588348]
[196.39259338 125.24951935]
[181.42755127 126.27315521]
[166.46252441 127.29679108]
[159.94793701 130.92272949]
[151.14588928 128.16944885]
[136.16143799 128.85217285]
[121.17698669 129.53488159]
[136.17697144 129.55300903]
[150.71966553 133.22865295]
[163.92687988 140.33985901]
[175.00111389 150.45722961]
[183.27366638 162.96981812]
[188.24497986 177.12207031]
[189.61486816 192.05938721]
[187.30059814 206.87977600]
[181.44194031 220.68833923]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[33 74]
[34 73]
[35 72]
[36 71]
[38 69]
[39 68]
[40 67]
[41 66]
[42 65]
[43 64]
[44 63]
[45 62]
[46 61]
[77 128]
[78 127]
[79 126]
[80 124]
[81 123]
[82 122]
[83 121]
[84 120]
[85 119]
[86 118]
[97 107]
[98 106]
[99 105]
[100 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
