%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:40:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUACAAGGACUGCAUCGAGUCCACUGGAGACUAUUUUCUUCUCUGUGACGCCGAGGGGCCAUGGGGCAUCAUUCUGGAGUCCCUGGCCAUACUUGGCA\
) } def
/len { sequence length } bind def

/coor [
[146.94171143 143.75511169]
[136.46098328 152.80747986]
[124.28215027 159.40042114]
[110.97241974 163.22689819]
[97.15165710 164.10865784]
[83.46355438 162.00466919]
[70.54561615 157.01292419]
[58.99946213 149.36587524]
[49.36284637 139.41969299]
[36.53076935 147.18743896]
[23.69869423 154.95518494]
[10.86662006 162.72293091]
[-1.96545517 170.49067688]
[-5.49462938 185.89588928]
[-18.92746544 194.22261047]
[-34.29450226 190.53076172]
[-42.47874832 177.01063538]
[-38.62463379 161.68350220]
[-25.01873970 153.64265442]
[-9.73319912 157.65859985]
[3.09887552 149.89085388]
[15.93095016 142.12310791]
[28.76302528 134.35536194]
[41.59510040 126.58762360]
[36.98616791 112.13634491]
[35.89792633 97.00699615]
[38.39117432 82.04486847]
[44.32661438 68.08592987]
[32.27415848 59.15629578]
[20.22170639 50.22666168]
[8.16925144 41.29702759]
[-3.88320279 32.36739731]
[-19.47644424 34.94157410]
[-32.27390289 25.66792488]
[-34.68307495 10.04833984]
[-25.27464294 -2.65035796]
[-9.63045979 -4.89425659]
[2.96805668 4.64790916]
[5.04643011 20.31494141]
[17.09888458 29.24457550]
[29.15133858 38.17420578]
[41.20379257 47.10383987]
[53.25624847 56.03347397]
[65.61161804 45.81999588]
[80.11286163 38.98741531]
[95.85507965 35.96209335]
[111.85595703 36.93281174]
[127.11700439 41.83900070]
[140.68591309 50.37450027]
[151.71597290 62.00669479]
[159.51890564 76.00971222]
[163.60777283 91.50975800]
[178.60597229 91.27648163]
[193.60415649 91.04320526]
[208.60234070 90.80992889]
[223.60052490 90.57664490]
[238.59870911 90.34336853]
[255.21557617 79.14228821]
[271.81939697 88.84416962]
[286.77404785 87.67890930]
[301.72872925 86.51364899]
[316.68341064 85.34839630]
[331.63806152 84.18313599]
[340.12396240 80.33839417]
[347.07470703 83.22158813]
[362.05838013 82.52198029]
[377.04205322 81.82237244]
[392.02572632 81.12277222]
[407.00939941 80.42316437]
[420.43368530 72.05063629]
[433.50799561 79.18591309]
[448.49166870 78.48630524]
[463.47534180 77.78669739]
[479.01522827 71.00819397]
[489.83068848 84.06430817]
[480.27883911 98.07139587]
[464.17495728 92.77037811]
[449.19125366 93.46998596]
[434.20758057 94.16958618]
[421.85504150 102.49207306]
[407.70901489 95.40683746]
[392.72534180 96.10644531]
[377.74166870 96.80605316]
[362.75799561 97.50565338]
[347.77432251 98.20526123]
[332.80331421 99.13780975]
[317.84866333 100.30306244]
[302.89398193 101.46832275]
[287.93930054 102.63358307]
[272.98464966 103.79883575]
[266.91757202 112.28804779]
[256.93762207 116.02368164]
[246.35586548 113.50225830]
[238.83198547 105.34156036]
[223.83380127 105.57483673]
[208.83561707 105.80811310]
[193.83743286 106.04138947]
[178.83924866 106.27466583]
[163.84104919 106.50794220]
[160.95814514 120.05341339]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
[52 99]
[53 98]
[54 97]
[55 96]
[56 95]
[57 94]
[59 90]
[60 89]
[61 88]
[62 87]
[63 86]
[65 85]
[66 84]
[67 83]
[68 82]
[69 81]
[71 79]
[72 78]
[73 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
