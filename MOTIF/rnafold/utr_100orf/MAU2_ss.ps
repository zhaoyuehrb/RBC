%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUCCCUGUGGCGGCGGCUUGUUGUUGUGGAGGCCAAAAUGGCGGCUCAGGCGGCGGCAGCGGCCCAGGCGGCGGCGGCCCAGGCUGCGCAGGCCGAGGCGGCCGACUCGUGGUACCUGGCGCUUCUGGGCUUCGCUG\
) } def
/len { sequence length } bind def

/coor [
[143.32205200 112.42868042]
[128.41636658 110.74921417]
[113.51068878 109.06974792]
[103.93520355 115.78965759]
[92.32601929 114.34953308]
[84.68272400 105.49362946]
[69.81847382 103.48013306]
[54.95422745 101.46662903]
[40.08998108 99.45313263]
[31.08148384 101.41177368]
[24.91624451 97.22406769]
[10.10091877 94.87754822]
[-4.71440649 92.53103638]
[-19.55505562 98.01425171]
[-30.91525459 88.38122559]
[-45.73057938 86.03470612]
[-60.57122803 91.51792908]
[-71.93142700 81.88490295]
[-86.74674988 79.53838348]
[-101.56208038 77.19187164]
[-110.61225128 78.94788361]
[-116.68197632 74.62289429]
[-131.44091797 71.94454193]
[-146.19985962 69.26618958]
[-160.95881653 66.58783722]
[-175.71775818 63.90948105]
[-190.47669983 61.23112869]
[-203.37620544 69.96270752]
[-218.30572510 67.03622437]
[-226.55044556 54.68470764]
[-241.30938721 52.00635147]
[-254.20890808 60.73793030]
[-269.13842773 57.81145096]
[-277.38314819 45.45993423]
[-292.14208984 42.78157806]
[-306.90103149 40.10322571]
[-321.65997314 37.42487335]
[-338.32418823 40.54585648]
[-345.93630981 25.39686966]
[-333.48660278 13.88856983]
[-318.98162842 22.66592789]
[-304.22268677 25.34428215]
[-289.46374512 28.02263451]
[-274.70480347 30.70098877]
[-262.64578247 22.03405571]
[-247.63995361 24.54003906]
[-238.63104248 37.24740982]
[-223.87210083 39.92576218]
[-211.81307983 31.25882912]
[-196.80725098 33.76481247]
[-187.79833984 46.47218323]
[-173.03939819 49.15053558]
[-158.28045654 51.82889175]
[-143.52151489 54.50724411]
[-128.76257324 57.18559647]
[-114.00362396 59.86394882]
[-99.21556091 62.37654495]
[-84.40023804 64.72306061]
[-69.58490753 67.06958008]
[-55.80395126 61.41852188]
[-43.38406372 71.21938324]
[-28.56873703 73.56590271]
[-14.78777885 67.91484070]
[-2.36788964 77.71570587]
[12.44743538 80.06222534]
[27.26276016 82.40874481]
[42.10348129 84.58889008]
[56.96772766 86.60238647]
[71.83197021 88.61588287]
[86.69622040 90.62938690]
[102.00327301 83.85113525]
[115.19015503 94.16406250]
[130.09584045 95.84352875]
[145.00152588 97.52299500]
[159.94113159 98.86758423]
[174.90716553 99.87662506]
[189.87318420 100.88565826]
[204.83920288 101.89469147]
[219.82409668 102.56766510]
[234.82032776 102.90423584]
[249.81654358 103.24080658]
[264.81277466 103.57737732]
[279.80899048 103.91394806]
[294.80520630 104.25051880]
[309.80145264 104.58708954]
[319.69476318 96.22777557]
[332.22869873 96.86454010]
[340.66488647 105.60578156]
[355.64978027 106.27875519]
[370.63467407 106.95172882]
[385.61956787 107.62470245]
[400.61108398 108.12950134]
[415.60729980 108.46607208]
[430.60351562 108.80264282]
[449.27255249 96.48565674]
[467.53823853 108.04073334]
[482.50427246 107.03170013]
[497.47030640 106.02266693]
[512.43634033 105.01362610]
[520.57757568 91.80379486]
[534.94128418 85.93326569]
[550.00433350 89.65938568]
[559.97467041 101.54938507]
[561.01849365 117.03131104]
[552.73443604 130.15205383]
[538.30786133 135.86640930]
[523.28613281 131.97711182]
[513.44537354 119.97965240]
[498.47933960 120.98868561]
[483.51330566 121.99771881]
[468.54727173 123.00675964]
[464.65676880 130.06402588]
[458.18893433 135.02809143]
[450.18197632 137.00666809]
[441.95999146 135.59452820]
[434.91406250 130.95370483]
[430.26693726 123.79887390]
[415.27072144 123.46229553]
[400.27450562 123.12572479]
[393.46060181 126.14529419]
[384.94659424 122.60959625]
[369.96170044 121.93662262]
[354.97680664 121.26364899]
[339.99191284 120.59068298]
[324.92401123 129.51759338]
[309.46487427 119.58331299]
[294.46865845 119.24674225]
[279.47241211 118.91017151]
[264.47619629 118.57360077]
[249.47998047 118.23703003]
[234.48374939 117.90045929]
[219.48753357 117.56388855]
[215.42599487 120.21682739]
[209.63911438 120.28932953]
[203.83016968 116.86071777]
[188.86415100 115.85167694]
[173.89813232 114.84264374]
[158.93209839 113.83361053]
[154.75563049 116.30165863]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 74]
[2 73]
[3 72]
[6 70]
[7 69]
[8 68]
[9 67]
[11 66]
[12 65]
[13 64]
[15 62]
[16 61]
[18 59]
[19 58]
[20 57]
[22 56]
[23 55]
[24 54]
[25 53]
[26 52]
[27 51]
[30 48]
[31 47]
[34 44]
[35 43]
[36 42]
[37 41]
[75 138]
[76 137]
[77 136]
[78 135]
[79 132]
[80 131]
[81 130]
[82 129]
[83 128]
[84 127]
[85 126]
[88 124]
[89 123]
[90 122]
[91 121]
[92 119]
[93 118]
[94 117]
[96 111]
[97 110]
[98 109]
[99 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
