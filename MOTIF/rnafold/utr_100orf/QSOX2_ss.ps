%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:00:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGGGUGAAAGUUCAGCGCGCCGGCGGCACUUCCAACAUGGCGGCGGCCGGGGCGGCGGUGGCGCGCAGCCCGGGAAUCGGAGCGGGACCUGCGCUGAGAGCCCGGCGCUCGCCCCCGCCGCGGGCCGCACGGCUGC\
) } def
/len { sequence length } bind def

/coor [
[3.24571943 198.93469238]
[-9.14331341 207.39115906]
[-21.53234673 215.84764099]
[-22.11628723 231.24130249]
[-31.54236221 243.19967651]
[-46.03114319 247.26652527]
[-59.96955872 242.08398438]
[-72.35858917 250.54046631]
[-79.39463043 264.71102905]
[-94.26854706 265.49569702]
[-106.65758514 273.95214844]
[-119.04661560 282.40863037]
[-131.43565369 290.86511230]
[-131.33268738 302.85348511]
[-137.00703430 313.27755737]
[-146.92790222 319.56976318]
[-158.53587341 320.24523926]
[-168.90263367 315.25067139]
[-181.66114807 323.13870239]
[-194.41964722 331.02670288]
[-201.70681763 345.71780396]
[-218.08813477 346.48233032]
[-226.71189880 332.53375244]
[-218.70672607 318.22119141]
[-202.30764771 318.26818848]
[-189.54914856 310.38018799]
[-176.79063416 302.49218750]
[-173.73428345 284.50524902]
[-158.28439331 274.21731567]
[-139.89212036 278.47607422]
[-127.50308228 270.01959229]
[-115.11405182 261.56314087]
[-102.72502136 253.10665894]
[-96.57512665 239.54096985]
[-80.81505585 238.15142822]
[-68.42602539 229.69496155]
[-68.17403412 214.82638550]
[-59.10788727 202.81518555]
[-44.53717804 198.39389038]
[-29.98881531 203.45860291]
[-17.59978294 195.00213623]
[-5.21074963 186.54566956]
[6.57687092 177.26924133]
[17.70890808 167.21549988]
[28.72662163 157.03660583]
[39.62860489 146.73384094]
[50.53059006 136.43109131]
[61.43257523 126.12833405]
[72.33455658 115.82558441]
[83.23654175 105.52282715]
[82.93887329 95.47969055]
[88.17023468 86.90145874]
[97.23528290 82.56809235]
[107.19629669 83.88390350]
[118.55270386 74.08431244]
[129.90910339 64.28471375]
[141.26550293 54.48511124]
[152.62190247 44.68551636]
[163.97831726 34.88591766]
[175.33471680 25.08631897]
[179.83723450 17.03958511]
[187.06028748 15.19711399]
[198.63525391 5.65666723]
[203.31848145 -2.28625751]
[210.58131409 -3.96502042]
[222.36894226 -13.24144268]
[234.15655518 -22.51786423]
[239.01809692 -30.35292244]
[246.31701660 -31.86712074]
[258.31127930 -40.87477875]
[270.30551147 -49.88243866]
[282.19720459 -59.02506256]
[293.98483276 -68.30148315]
[305.77246094 -77.57790375]
[317.56008911 -86.85432434]
[329.34768677 -96.13075256]
[331.07260132 -113.49832916]
[344.53366089 -124.07044220]
[361.14852905 -121.72410583]
[372.72351074 -131.26455688]
[384.29846191 -140.80499268]
[395.87344360 -150.34544373]
[401.60137939 -165.09336853]
[416.34371948 -167.21768188]
[427.91870117 -176.75813293]
[439.49365234 -186.29858398]
[451.06863403 -195.83903503]
[459.44546509 -210.57893372]
[475.92828369 -206.60987854]
[476.67721558 -189.67247009]
[460.60906982 -184.26405334]
[449.03411865 -174.72361755]
[437.45913696 -165.18316650]
[425.88415527 -155.64271545]
[420.98413086 -141.57719421]
[405.41387939 -138.77047729]
[393.83892822 -129.23002625]
[382.26394653 -119.68958282]
[370.68896484 -110.14913940]
[371.25033569 -97.22724152]
[364.13854980 -86.19102478]
[351.77725220 -81.21754456]
[338.62411499 -84.34313202]
[326.83648682 -75.06670380]
[315.04888916 -65.79028320]
[303.26126099 -56.51386261]
[291.47363281 -47.23744202]
[288.13449097 -40.57283020]
[279.31317139 -37.88818741]
[267.31893921 -28.88052750]
[255.32467651 -19.87286758]
[243.43298340 -10.73024368]
[231.64535522 -1.45382202]
[219.85774231 7.82259989]
[208.17568970 17.23163414]
[196.60072327 26.77208138]
[185.13430786 36.44272232]
[173.77790833 46.24232101]
[162.42150879 56.04191589]
[151.06510925 65.84151459]
[139.70870972 75.64111328]
[128.35229492 85.44071198]
[116.99589539 95.24031067]
[111.82976532 113.09854126]
[93.53929901 116.42481232]
[82.63731384 126.72756958]
[71.73532867 137.03031921]
[60.83334351 147.33306885]
[49.93135834 157.63583374]
[39.02937698 167.93858337]
[34.89505768 176.18055725]
[27.76265144 178.34753418]
[16.63061523 188.40127563]
[31.43803406 190.79718018]
[40.38286972 202.83834839]
[38.40030289 217.70675659]
[26.61292076 226.98347473]
[11.69506931 225.41578674]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[7 36]
[8 35]
[10 33]
[11 32]
[12 31]
[13 30]
[18 27]
[19 26]
[20 25]
[43 133]
[44 132]
[45 130]
[46 129]
[47 128]
[48 127]
[49 126]
[50 125]
[54 123]
[55 122]
[56 121]
[57 120]
[58 119]
[59 118]
[60 117]
[62 116]
[63 115]
[65 114]
[66 113]
[67 112]
[69 111]
[70 110]
[71 109]
[72 107]
[73 106]
[74 105]
[75 104]
[76 103]
[79 99]
[80 98]
[81 97]
[82 96]
[84 94]
[85 93]
[86 92]
[87 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
