%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCCGUGAGCGGAAGCGGCGCCAUUCGUCUUCCGAGCGCUACUGCCAGCUGAUGCCGGGAGCUAACUACCGCGCCGGGGCCGGGGCCGGGGCCGGGGCCCGACGUCCCCGCGGGGCCCGGGACCGCGAGGAGGACGGCGGGGGCCUGGAGC\
) } def
/len { sequence length } bind def

/coor [
[47.91941071 417.91973877]
[42.24990845 431.80700684]
[36.58041000 445.69430542]
[38.52774429 461.39520264]
[26.55391693 470.25390625]
[20.88441658 484.14120483]
[15.21491623 498.02850342]
[17.97320557 514.19403076]
[5.18154430 524.45587158]
[-10.00110054 518.25750732]
[-11.95612717 501.97534180]
[1.32762873 492.35900879]
[6.99712944 478.47171021]
[12.66662979 464.58441162]
[10.31377411 449.87683105]
[22.69312096 440.02481079]
[28.36262131 426.13751221]
[34.03211975 412.25021362]
[38.69646835 397.99386597]
[42.33189392 383.44107056]
[45.96731949 368.88827515]
[41.54530334 354.66525269]
[52.39655685 343.15173340]
[56.03198624 328.59893799]
[48.17016220 316.00024414]
[51.64969254 301.18984985]
[64.91767883 293.02908325]
[68.55310059 278.47628784]
[72.18852997 263.92349243]
[75.82395935 249.37071228]
[79.45938110 234.81791687]
[83.09481049 220.26512146]
[86.73023224 205.71234131]
[90.36566162 191.15954590]
[94.00108337 176.60676575]
[86.13926697 164.00805664]
[89.61879730 149.19766235]
[102.88677979 141.03689575]
[106.52220917 126.48410034]
[94.88309479 128.56579590]
[82.73124695 125.46189117]
[72.38854980 117.16237640]
[66.06724548 104.69248199]
[65.41419983 90.00619507]
[53.13668060 81.38863373]
[37.39610672 79.79336548]
[31.42392921 66.14849854]
[19.14640617 57.53092957]
[3.40583229 55.93566132]
[-2.56634498 42.29079437]
[-14.84386730 33.67322922]
[-31.21785545 32.76519394]
[-38.37600327 18.01077271]
[-28.95462036 4.58804750]
[-12.64561844 6.30516720]
[-6.22630072 21.39570618]
[6.05122137 30.01327324]
[20.91362572 30.99215698]
[27.76397324 45.25340652]
[40.04149628 53.87097549]
[54.90390015 54.84985733]
[61.75424576 69.11110687]
[74.03176880 77.72867584]
[80.91614532 74.75287628]
[74.27308655 61.30409241]
[67.63002777 47.85530853]
[58.74133301 35.77262878]
[66.75714111 23.09403229]
[81.48429108 25.94203377]
[84.19531250 40.69489288]
[89.44010162 54.74808121]
[94.68489075 68.80127716]
[101.56926727 65.82546997]
[103.70398712 50.97815323]
[98.00941467 36.21731186]
[107.47924042 24.72071838]
[109.61396027 9.87339687]
[111.74868011 -4.97392464]
[105.15473175 -19.98897743]
[115.07794189 -33.04508209]
[131.31016541 -30.71124268]
[137.15309143 -15.38830757]
[126.59600830 -2.83920217]
[124.46128082 12.00811958]
[122.32656097 26.85544014]
[128.17382812 40.55430222]
[118.55130768 53.11287308]
[116.41658783 67.96019745]
[128.37019348 85.99646759]
[126.83342743 104.89018250]
[141.13662720 100.37149048]
[148.47062683 86.62921906]
[163.04048157 82.25037384]
[176.09643555 89.32691956]
[190.39962769 84.80822754]
[204.70283508 80.28953552]
[219.00602722 75.77084351]
[233.30921936 71.25215149]
[244.13749695 59.71702576]
[258.60437012 63.26085663]
[272.90756226 58.74216461]
[287.21075439 54.22347260]
[301.51394653 49.70478058]
[308.80700684 44.10300064]
[316.15521240 45.24301147]
[330.54760742 41.01702499]
[341.46655273 28.78147316]
[357.46505737 32.38423920]
[362.08523560 48.11910629]
[350.57421875 59.79939270]
[334.77359009 55.40942001]
[320.38119507 59.63540649]
[306.03265381 64.00797272]
[291.72946167 68.52666473]
[277.42626953 73.04536438]
[263.12307739 77.56405640]
[253.31785583 88.77597046]
[237.82791138 85.55534363]
[223.52471924 90.07403564]
[209.22152710 94.59272766]
[194.91833496 99.11142731]
[180.61512756 103.63011932]
[173.99430847 116.92298889]
[159.55320740 121.70933533]
[145.65531921 114.67469025]
[131.35212708 119.19338226]
[121.07499695 130.11952209]
[117.43956757 144.67231750]
[125.31106567 158.11393738]
[121.41692352 172.82075500]
[108.55387878 180.24218750]
[104.91844940 194.79496765]
[101.28302765 209.34776306]
[97.64759827 223.90055847]
[94.01216888 238.45333862]
[90.37674713 253.00613403]
[86.74131775 267.55892944]
[83.10589600 282.11172485]
[79.47046661 296.66448975]
[87.34196472 310.10610962]
[83.44781494 324.81292725]
[70.58477020 332.23437500]
[66.94934845 346.78717041]
[71.11133575 362.05111694]
[60.52011108 372.52371216]
[56.88468552 387.07650757]
[53.24925995 401.62930298]
[66.29328918 394.22299194]
[81.07632446 396.76501465]
[90.89714813 408.10308838]
[91.30393982 423.09756470]
[82.11230469 434.95141602]
[67.48884583 438.29122925]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[5 14]
[6 13]
[7 12]
[19 147]
[20 146]
[21 145]
[23 143]
[24 142]
[27 139]
[28 138]
[29 137]
[30 136]
[31 135]
[32 134]
[33 133]
[34 132]
[35 131]
[38 128]
[39 127]
[44 63]
[45 62]
[47 60]
[48 59]
[50 57]
[51 56]
[73 88]
[74 87]
[76 85]
[77 84]
[78 83]
[90 126]
[91 125]
[94 122]
[95 121]
[96 120]
[97 119]
[98 118]
[100 116]
[101 115]
[102 114]
[103 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
