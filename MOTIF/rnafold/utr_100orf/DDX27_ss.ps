%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGCACUCUUAAGAGGUCGAACGGGGAGGGCGGCAGGGGCUCUGGAACGGAAGUGACGCAUGGUACUUGCGCAAAGACGACGAGGAGGCUGCGAAAAGUUAAGGGCCGGACCGCAGGCUGUGCUCGCUUCCGGAAGUGGCUUCUGCGACAACAUGCUUG\
) } def
/len { sequence length } bind def

/coor [
[-71.27707672 552.26617432]
[-77.89612579 538.80554199]
[-79.87055206 523.93603516]
[-76.99333954 509.21371460]
[-87.07345581 520.32189941]
[-97.15357208 531.43005371]
[-100.69758606 546.84918213]
[-114.98022461 551.07476807]
[-125.06034088 562.18292236]
[-135.14045715 573.29107666]
[-145.22058105 584.39929199]
[-155.30070496 595.50744629]
[-149.12194824 609.42657471]
[-149.14530945 624.65545654]
[-155.36672974 638.55560303]
[-166.70829773 648.71868896]
[-181.20503235 653.38397217]
[-196.34529114 651.74304199]
[-209.50592041 644.08032227]
[-218.40676880 631.72332764]
[-221.50570679 616.81304932]
[-218.26582336 601.93273926]
[-209.24845886 589.66058350]
[-196.01591492 582.12268066]
[-180.86080933 580.62512207]
[-166.40885925 585.42730713]
[-156.32873535 574.31915283]
[-146.24862671 563.21099854]
[-136.16850281 552.10284424]
[-126.08838654 540.99468994]
[-123.26537323 526.37005615]
[-108.26173401 521.34991455]
[-98.18161774 510.24176025]
[-88.10150146 499.13360596]
[-79.98076630 486.52194214]
[-74.03957367 472.74871826]
[-68.09837341 458.97546387]
[-62.15717697 445.20223999]
[-56.21598053 431.42898560]
[-50.27478409 417.65573120]
[-44.33358765 403.88250732]
[-38.39239120 390.10925293]
[-32.45119476 376.33602905]
[-26.64382553 362.50582886]
[-20.97082710 348.61996460]
[-27.58965111 339.25677490]
[-28.85746193 327.73977661]
[-24.34119606 316.93923950]
[-15.06399727 309.60369873]
[-3.27593303 307.66070557]
[2.93122792 294.00524902]
[9.13838863 280.34982300]
[15.34554958 266.69436646]
[21.55270958 253.03892517]
[27.75987053 239.38348389]
[33.96703339 225.72804260]
[40.17419434 212.07258606]
[46.38135529 198.41714478]
[46.28594971 190.98997498]
[52.84355927 184.55889893]
[59.31435013 171.02638245]
[65.78514099 157.49388123]
[72.25593567 143.96136475]
[78.72672272 130.42884827]
[85.19751740 116.89634705]
[91.66830444 103.36383057]
[73.83333588 97.92175293]
[62.72871780 77.54486084]
[60.41093445 62.72500992]
[58.09315491 47.90516281]
[55.77537155 33.08531570]
[53.31400299 18.28863716]
[50.70928192 3.51652002]
[37.62103653 -5.34200144]
[34.71224976 -20.87630272]
[43.70865250 -33.87015915]
[59.27283859 -36.61454391]
[72.17085266 -27.48126411]
[74.75053406 -11.88893318]
[65.48139954 0.91179734]
[68.08612061 15.68391323]
[72.36566162 21.75495911]
[70.59522247 30.76753235]
[72.91300201 45.58737946]
[75.23078156 60.40722656]
[77.54856873 75.22707367]
[84.51866913 77.99612427]
[90.05699921 64.05599976]
[103.99702454 69.59455872]
[98.45888519 83.53421021]
[105.42899323 86.30326080]
[117.28488159 77.11425018]
[129.14077759 67.92523956]
[140.99665833 58.73623657]
[152.85255432 49.54722595]
[154.38072205 45.36310577]
[156.92451477 42.22387695]
[160.02064514 40.32277679]
[163.19105530 39.67899323]
[166.00221252 40.14841843]
[178.53453064 31.90578461]
[191.06683350 23.66314888]
[191.65423584 8.15719604]
[201.27005005 -4.02129078]
[216.21684265 -8.18943310]
[230.74722290 -2.74449635]
[239.27400208 10.21983051]
[238.51843262 25.71850014]
[228.77105713 37.79195786]
[213.77993774 41.79771042]
[199.30947876 36.19546509]
[186.77716064 44.43810272]
[174.24484253 52.68073654]
[162.04156494 61.40311813]
[150.18566895 70.59212494]
[138.32977295 79.78113556]
[126.47389221 88.97013855]
[114.61799622 98.15914917]
[105.20082092 109.83462524]
[98.73002625 123.36713409]
[92.25923920 136.89964294]
[85.78844452 150.43215942]
[79.31765747 163.96467590]
[72.84686279 177.49717712]
[66.37606812 191.02969360]
[60.03679657 204.62431335]
[53.82963562 218.27975464]
[47.62247467 231.93519592]
[41.41531372 245.59063721]
[35.20815277 259.24609375]
[29.00099373 272.90151978]
[22.79383278 286.55697632]
[16.58667183 300.21240234]
[10.37951088 313.86785889]
[17.71820259 331.29205322]
[10.16688251 348.27764893]
[-7.08496714 354.29296875]
[-12.75796509 368.17880249]
[-13.11368942 377.35675049]
[-18.67795372 382.27722168]
[-24.61915016 396.05044556]
[-30.56034660 409.82369995]
[-36.50154114 423.59695435]
[-42.44273758 437.37017822]
[-48.38393402 451.14343262]
[-54.32513046 464.91665649]
[-60.26632690 478.68991089]
[-66.20752716 492.46313477]
[-53.99625015 483.75195312]
[-39.64266586 479.39599609]
[-24.64957619 479.85128784]
[-10.58675385 485.07019043]
[1.07343197 494.50631714]
[9.11016750 507.17163086]
[12.68201065 521.74017334]
[11.41499138 536.68658447]
[5.44176626 550.44592285]
[-4.61227131 561.57769775]
[-17.69446945 568.91638184]
[-32.43513107 571.69360352]
[-47.29091644 569.61859131]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 34]
[5 33]
[6 32]
[8 30]
[9 29]
[10 28]
[11 27]
[12 26]
[35 148]
[36 147]
[37 146]
[38 145]
[39 144]
[40 143]
[41 142]
[42 141]
[43 140]
[44 138]
[45 137]
[50 134]
[51 133]
[52 132]
[53 131]
[54 130]
[55 129]
[56 128]
[57 127]
[58 126]
[60 125]
[61 124]
[62 123]
[63 122]
[64 121]
[65 120]
[66 119]
[68 86]
[69 85]
[70 84]
[71 83]
[72 81]
[73 80]
[91 118]
[92 117]
[93 116]
[94 115]
[95 114]
[100 113]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
