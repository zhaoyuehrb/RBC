%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCAGACGGCUGUUGUCCUGGAAACACCACAGCCAUUCCAGCUGUGCCCACCAUCACCACAUACCCAGUUAAAGGUGGAUUUCGACAUGCUCUCUGUU\
) } def
/len { sequence length } bind def

/coor [
[86.84255219 363.69296265]
[72.88434601 355.78424072]
[70.50724792 339.91827393]
[81.53475952 328.26608276]
[82.46730804 313.29507446]
[83.39984894 298.32409668]
[84.33239746 283.35311890]
[85.26493835 268.38214111]
[78.33385468 255.19845581]
[86.91413879 241.90600586]
[87.84668732 226.93501282]
[88.77922821 211.96403503]
[89.47883606 196.98036194]
[89.94533539 181.98760986]
[90.41182709 166.99487305]
[90.87832642 152.00212097]
[91.34482574 137.00938416]
[81.65542603 133.28788757]
[73.33409882 127.08387756]
[67.00143433 118.86004639]
[63.12969589 109.22969055]
[48.14601898 109.92929840]
[34.64144897 119.23297882]
[19.95016289 111.94612885]
[19.18530083 95.56482697]
[33.13368607 86.94075775]
[47.44641495 94.94561768]
[62.43009186 94.24600983]
[65.05725098 85.04638672]
[69.89849854 76.79426575]
[60.05957031 65.47192383]
[50.22063828 54.14957809]
[40.38171005 42.82723618]
[30.54278183 31.50489044]
[20.70385361 20.18254662]
[5.07277727 20.63364410]
[-7.15914106 10.89125252]
[-10.21636486 -4.44456768]
[-2.65536594 -18.13271332]
[11.95378304 -23.71005821]
[26.71308899 -18.54315186]
[34.65365601 -5.07165003]
[32.02619553 10.34361744]
[41.86512756 21.66596222]
[51.70405579 32.98830414]
[61.54298401 44.31064987]
[71.38191223 55.63299179]
[81.22084045 66.95533752]
[103.54155731 62.15737915]
[124.58442688 71.01358032]
[136.35333252 61.71343613]
[148.12225342 52.41329575]
[159.89117432 43.11315155]
[171.66007996 33.81300735]
[165.83169556 19.88704300]
[163.97776794 4.90486908]
[166.23587036 -10.02173615]
[172.43843079 -23.78512001]
[182.12519836 -35.36394882]
[194.57733154 -43.89899445]
[208.87080383 -48.75690460]
[223.94493103 -49.57718277]
[238.68115234 -46.29896545]
[251.98590088 -39.16551208]
[262.87188721 -28.70618057]
[270.53131104 -15.69711494]
[274.39578247 -1.10367739]
[274.17855835 13.99120235]
[269.89572144 28.46738243]
[261.86508179 41.25063705]
[250.68258667 51.39236069]
[237.17807007 58.13997650]
[222.35362244 60.99275589]
[207.30932617 59.73901367]
[193.16157532 54.47177887]
[180.96022034 45.58192062]
[169.19131470 54.88206482]
[157.42239380 64.18220520]
[145.65348816 73.48235321]
[133.88456726 82.78249359]
[137.83499146 96.37782288]
[136.53581238 110.47572327]
[130.16731262 123.12012482]
[119.61309052 132.55661011]
[106.33757019 137.47587585]
[105.87107086 152.46862793]
[105.40457153 167.46136475]
[104.93807983 182.45411682]
[104.47158051 197.44685364]
[107.37155151 206.30026245]
[103.75021362 212.89657593]
[102.81766510 227.86756897]
[101.88512421 242.83854675]
[108.74950409 257.09304810]
[100.23592377 269.31466675]
[99.30337524 284.28567505]
[98.37083435 299.25665283]
[97.43828583 314.22763062]
[96.50574493 329.19860840]
[106.00199127 342.12924194]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 99]
[5 98]
[6 97]
[7 96]
[8 95]
[10 93]
[11 92]
[12 91]
[13 89]
[14 88]
[15 87]
[16 86]
[17 85]
[21 28]
[22 27]
[30 48]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[50 80]
[51 79]
[52 78]
[53 77]
[54 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
