%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGCAGAGGCACAGGUGGUGGCAGACAGUAGAGGCGCCCCAUGGGGAACAUACUGACCUGUUGUGUGCACCCUAGCGUCAGCCUCGAGUUUGACCAGCAACAGGGGUCGGUGUGUCCCUCUGAAUCUGAGAUCUAUGAGG\
) } def
/len { sequence length } bind def

/coor [
[177.17759705 358.26379395]
[189.38081360 349.27172852]
[185.12588501 334.88787842]
[171.76966858 323.55673218]
[176.11863708 305.70120239]
[171.54653931 291.41497803]
[166.97445679 277.12875366]
[162.40237427 262.84252930]
[157.83027649 248.55632019]
[153.25819397 234.27011108]
[148.37118530 220.08853149]
[143.17164612 206.01852417]
[137.97210693 191.94853210]
[132.77256775 177.87854004]
[110.22934723 171.00056458]
[99.62335968 149.67732239]
[107.90892029 127.08744049]
[100.02904510 114.32391357]
[87.81173706 107.52472687]
[87.20743561 93.55596161]
[79.32755280 80.79244232]
[71.44767761 68.02891541]
[63.42709351 55.35334015]
[55.26678467 42.76726151]
[47.10647964 30.18118095]
[38.94617462 17.59510040]
[30.78586769 5.00902128]
[18.80460548 4.82838678]
[8.52183437 -1.08579147]
[2.46511245 -11.14499950]
[2.05746222 -22.75934410]
[7.28464031 -33.00397110]
[-0.31095415 -45.93869019]
[-7.90654850 -58.87340927]
[-15.50214291 -71.80812836]
[-23.09773827 -84.74284363]
[-38.13669586 -82.71666718]
[-52.76622772 -86.59221649]
[-64.76499939 -95.74880981]
[-72.32347107 -108.76637268]
[-74.31678772 -123.64560699]
[-70.47206116 -138.11500549]
[-61.40526962 -149.97766113]
[-69.00086212 -162.91236877]
[-76.59645844 -175.84709167]
[-84.19205475 -188.78181458]
[-91.78765106 -201.71653748]
[-106.81969452 -205.80007935]
[-114.33844757 -219.02592468]
[-110.35276794 -233.33151245]
[-117.94836426 -246.26623535]
[-125.54396057 -259.20095825]
[-133.13955688 -272.13568115]
[-140.73515320 -285.07040405]
[-156.15382385 -285.58804321]
[-168.83197021 -294.37826538]
[-174.72404480 -308.63613892]
[-171.94990540 -323.81201172]
[-161.39476013 -335.06335449]
[-146.42672729 -338.79986572]
[-131.82205200 -333.82928467]
[-122.24102783 -321.73764038]
[-120.74092865 -306.38339233]
[-127.80043030 -292.66598511]
[-120.20483398 -279.73126221]
[-112.60923767 -266.79653931]
[-105.01364136 -253.86183167]
[-97.41805267 -240.92710876]
[-82.98318481 -237.43852234]
[-75.09590912 -224.42909241]
[-78.85292816 -209.31211853]
[-71.25733185 -196.37741089]
[-63.66173935 -183.44268799]
[-56.06614685 -170.50796509]
[-48.47055054 -157.57325745]
[-33.69373703 -159.71217346]
[-19.18448257 -156.02069092]
[-7.16145802 -147.03115845]
[0.52457231 -134.08850098]
[2.67560244 -119.14906311]
[-1.06697345 -104.48494720]
[-10.16301918 -92.33843994]
[-2.56742454 -79.40372467]
[5.02817011 -66.46900177]
[12.62376404 -53.53428650]
[20.21935844 -40.59956741]
[38.13516998 -37.13045883]
[48.06337357 -21.44224930]
[43.37194824 -3.15128469]
[51.53225327 9.43479538]
[59.69255829 22.02087593]
[67.85286713 34.60695648]
[76.01316833 47.19303513]
[82.34130096 51.12532043]
[84.21119690 60.14904022]
[92.09107971 72.91255951]
[99.97095490 85.67608643]
[112.18826294 92.47527313]
[112.79256439 106.44403839]
[120.67244720 119.20755768]
[127.76540375 117.94338989]
[134.93881226 118.37489319]
[141.79397583 120.46949005]
[147.95188904 124.10236359]
[153.07421875 129.06394958]
[156.88186646 135.07192993]
[159.17021179 141.78733826]
[159.82002258 148.83367920]
[158.80369568 155.81799316]
[156.18632507 162.35284424]
[152.12153625 168.07771301]
[146.84257507 172.67900085]
[152.04211426 186.74899292]
[157.24165344 200.81898499]
[162.44119263 214.88899231]
[167.36824036 219.48760986]
[168.93598938 225.05400085]
[167.54441833 229.69801331]
[172.11650085 243.98423767]
[176.68858337 258.27044678]
[181.26068115 272.55667114]
[185.83276367 286.84289551]
[190.40484619 301.12911987]
[201.53170776 307.75408936]
[205.01826477 319.80786133]
[199.50975037 330.63293457]
[203.76467896 345.01681519]
[218.89593506 345.92300415]
[232.80348206 351.95257568]
[243.80793762 362.37744141]
[250.58044434 375.93875122]
[252.30320740 390.99890137]
[248.76817322 405.73928833]
[240.40223694 418.37997437]
[228.21560669 427.39450073]
[213.67988586 431.69436646]
[198.55033875 430.76028442]
[184.65391541 424.70507812]
[173.66870117 414.25994873]
[166.92118835 400.68618774]
[165.22618103 385.62289429]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 127]
[3 126]
[5 123]
[6 122]
[7 121]
[8 120]
[9 119]
[10 118]
[11 115]
[12 114]
[13 113]
[14 112]
[17 100]
[18 99]
[20 97]
[21 96]
[22 95]
[23 93]
[24 92]
[25 91]
[26 90]
[27 89]
[32 86]
[33 85]
[34 84]
[35 83]
[36 82]
[43 75]
[44 74]
[45 73]
[46 72]
[47 71]
[50 68]
[51 67]
[52 66]
[53 65]
[54 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
