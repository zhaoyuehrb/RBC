%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:46:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGCCAGCCUGCCAUCAGGCCUCUAUUGCAGCCCUGAACCAUGAUCCAGGGCACCUUGGAGCCAGAUGGUCCCCUCUGGGGCUGGGACUGGGACAGUGACAAUGACUGGGAUAGUGCUGUGCUGGCCCUCCUGGCGCUGG\
) } def
/len { sequence length } bind def

/coor [
[106.61163330 207.03709412]
[91.62425995 212.76055908]
[77.87873840 204.48770142]
[75.91946411 188.56474304]
[87.24942017 177.20640564]
[88.57511902 162.26510620]
[89.90081787 147.32380676]
[91.22652435 132.38250732]
[92.55222321 117.44120026]
[86.54275513 113.49781799]
[82.40624237 107.57563019]
[80.75592041 100.50588226]
[66.28144836 96.57019806]
[51.80697632 92.63451385]
[37.33250427 88.69882965]
[22.85802841 84.76314545]
[8.38355541 80.82746124]
[-6.96323156 84.67281342]
[-17.21449661 73.86721802]
[-31.68897057 69.93153381]
[-46.16344452 65.99584961]
[-55.34692764 66.76245117]
[-60.91273880 61.80968857]
[-75.29660797 57.55476379]
[-89.68047333 53.29983521]
[-104.06433868 49.04491043]
[-113.72836304 59.21701431]
[-126.77625275 64.19303131]
[-140.62739563 63.05010223]
[-152.56866455 56.06959915]
[-160.28587341 44.67067337]
[-162.31224060 31.12211990]
[-176.59844971 26.55003357]
[-190.88467407 21.97794724]
[-205.17088318 17.40586090]
[-219.45710754 12.83377457]
[-233.74331665 8.26168728]
[-245.05751038 18.64844513]
[-260.05273438 21.97088051]
[-274.69537354 17.33527565]
[-285.04663086 5.98858643]
[-288.32205200 -9.01698685]
[-283.64056396 -23.64501953]
[-272.26147461 -33.96064377]
[-257.24569702 -37.18900681]
[-242.63243103 -32.46170044]
[-232.35252380 -21.05034256]
[-229.17123413 -6.02453041]
[-214.88502502 -1.45244384]
[-200.59880066 3.11964273]
[-186.31257629 7.69172907]
[-172.02636719 12.26381588]
[-157.74014282 16.83590317]
[-146.08428955 5.69686556]
[-130.31600952 1.91196311]
[-114.69461060 6.60043669]
[-103.48863220 18.57950974]
[-99.80941010 34.66104126]
[-85.42554474 38.91596985]
[-71.04167938 43.17089462]
[-56.65781403 47.42582321]
[-42.22776031 51.52137756]
[-27.75328636 55.45706177]
[-13.27881336 59.39274597]
[1.03266227 55.26589203]
[12.31923962 66.35298920]
[26.79371262 70.28867340]
[41.26818848 74.22435760]
[55.74266052 78.16004181]
[70.21713257 82.09572601]
[84.69160461 86.03141022]
[97.62632751 78.43581390]
[101.24084473 63.87781906]
[104.85535431 49.31982422]
[99.80213165 33.71863937]
[110.98596191 21.72472191]
[126.90187836 25.67638588]
[131.17695618 41.50849915]
[119.41335297 52.93433762]
[115.79883575 67.49233246]
[112.18432617 82.05033112]
[120.75773621 94.35872650]
[135.66606140 96.01463318]
[150.57437134 97.67054749]
[165.48269653 99.32645416]
[180.39100647 100.98236847]
[195.29933167 102.63827515]
[210.20765686 104.29418182]
[216.52647400 101.94988251]
[222.20527649 103.04243469]
[225.73352051 106.36733246]
[240.55400085 108.68106842]
[255.37448120 110.99479675]
[270.20294189 105.47875977]
[281.58444214 115.08663177]
[296.40490723 117.40036011]
[311.22540283 119.71409607]
[326.04586792 122.02783203]
[335.08859253 120.25212097]
[341.16714478 124.56017303]
[355.93283081 127.20120239]
[370.69848633 129.84222412]
[380.83245850 120.89835358]
[394.07693481 119.47047424]
[405.54345703 125.85907745]
[411.13021851 137.52101135]
[425.83383179 140.48803711]
[440.53747559 143.45506287]
[455.24111938 146.42208862]
[471.96325684 143.62821960]
[479.27709961 158.92346191]
[466.60427856 170.18560791]
[452.27407837 161.12571716]
[437.57043457 158.15869141]
[422.86682129 155.19166565]
[408.16317749 152.22463989]
[394.60702515 162.11749268]
[377.75198364 159.12380981]
[368.05746460 144.60789490]
[353.29177856 141.96687317]
[338.52612305 139.32585144]
[323.73214722 136.84831238]
[308.91165161 134.53457642]
[294.09118652 132.22084045]
[279.27069092 129.90710449]
[265.50228882 135.58863831]
[253.06074524 125.81527710]
[238.24026489 123.50154877]
[223.41978455 121.18781281]
[208.55174255 119.20250702]
[193.64341736 117.54659271]
[178.73510742 115.89068604]
[163.82678223 114.23477173]
[148.91847229 112.57886505]
[134.01014709 110.92295074]
[119.10182953 109.26704407]
[107.49352264 118.76689911]
[106.16782379 133.70820618]
[104.84212494 148.64950562]
[103.51641846 163.59080505]
[102.19071960 178.53210449]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 141]
[6 140]
[7 139]
[8 138]
[9 137]
[12 71]
[13 70]
[14 69]
[15 68]
[16 67]
[17 66]
[19 64]
[20 63]
[21 62]
[23 61]
[24 60]
[25 59]
[26 58]
[32 53]
[33 52]
[34 51]
[35 50]
[36 49]
[37 48]
[72 81]
[73 80]
[74 79]
[82 136]
[83 135]
[84 134]
[85 133]
[86 132]
[87 131]
[88 130]
[91 129]
[92 128]
[93 127]
[95 125]
[96 124]
[97 123]
[98 122]
[100 121]
[101 120]
[102 119]
[106 116]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
