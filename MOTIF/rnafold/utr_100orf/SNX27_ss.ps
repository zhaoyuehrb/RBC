%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGCCUGCUCGCAAGAUGGCGGACGAGGACGGGGAAGGGAUUCAUCCCUCAGCCCCUCACAGGAACGGAGGUGGCGGCGGCGGCGGGGGGUCUGGGCUCCACUGCGCCGGGAACG\
) } def
/len { sequence length } bind def

/coor [
[66.73071289 133.59696960]
[54.61917496 142.44630432]
[42.50763702 151.29563904]
[30.39609909 160.14497375]
[18.40445900 169.15609741]
[6.53487396 178.32740784]
[-5.33471060 187.49871826]
[-7.19855881 204.82942200]
[-20.71401596 215.29643250]
[-37.29493332 212.86250305]
[-48.91400528 222.34918213]
[-60.53308105 231.83586121]
[-72.15215302 241.32254028]
[-73.49127197 257.07000732]
[-85.62699127 267.19421387]
[-101.35940552 265.68869019]
[-111.35475922 253.44660950]
[-109.68297577 237.73098755]
[-97.33589935 227.86563110]
[-81.63883972 229.70347595]
[-70.01976013 220.21679688]
[-58.40068817 210.73011780]
[-46.78161240 201.24342346]
[-47.27766418 188.29199219]
[-40.08217239 177.27774048]
[-27.65906525 172.38542175]
[-14.50602245 175.62913513]
[-2.63643813 166.45782471]
[9.23314571 157.28651428]
[12.64654160 150.61999512]
[21.54676819 148.03343201]
[33.65830612 139.18409729]
[45.76984406 130.33476257]
[57.88137817 121.48543549]
[53.01665497 105.30728912]
[54.14984512 88.45160675]
[61.13629150 73.07019806]
[50.31825256 62.67933273]
[39.50021744 52.28846741]
[28.68218040 41.89760208]
[17.86414337 31.50673866]
[1.82070458 28.10966492]
[-3.00109982 12.43540955]
[8.35898876 0.60830474]
[24.21468544 4.79506016]
[28.25500870 20.68870163]
[39.07304382 31.07956696]
[49.89108276 41.47043228]
[60.70911789 51.86129761]
[71.52715302 62.25216293]
[82.61493683 56.02999115]
[94.95982361 52.98724747]
[107.66915894 53.34395981]
[112.41917419 39.11591339]
[117.16919708 24.88786507]
[121.72777557 10.59733200]
[126.09408569 -3.75311470]
[130.46040344 -18.10356140]
[134.82672119 -32.45400620]
[124.76011658 -44.14448166]
[122.63453674 -59.42470932]
[129.12823486 -73.41883087]
[142.16909790 -81.66136932]
[157.59582520 -81.52216339]
[170.48582458 -73.04563141]
[176.72592163 -58.93660355]
[174.32493591 -43.69721985]
[164.04901123 -32.19031143]
[149.17715454 -28.08769417]
[144.81085205 -13.73724747]
[140.44453430 0.61319840]
[136.07821655 14.96364498]
[137.15567017 22.37532234]
[131.39724731 29.63788605]
[126.64722443 43.86593246]
[121.89720154 58.09397888]
[137.39717102 71.06810760]
[146.06245422 89.32981110]
[146.30940247 109.54158783]
[160.33464050 114.86065674]
[174.35987854 120.17973328]
[188.38513184 125.49880981]
[202.41036987 130.81788635]
[211.67788696 130.95054626]
[216.73757935 136.47262573]
[230.61495972 142.16633606]
[244.49234009 147.86004639]
[258.44491577 153.36692810]
[272.47015381 158.68600464]
[286.49539185 164.00506592]
[300.52062988 169.32414246]
[314.54586792 174.64321899]
[330.63705444 171.47996521]
[341.21679688 184.00996399]
[335.40158081 199.34344482]
[319.17358398 201.70661926]
[309.22680664 188.66845703]
[295.20156860 183.34939575]
[281.17633057 178.03031921]
[267.15106201 172.71124268]
[253.12583923 167.39216614]
[245.65856934 167.97003174]
[238.79862976 161.73742676]
[224.92124939 156.04371643]
[211.04386902 150.35000610]
[197.09129333 144.84312439]
[183.06605530 139.52404785]
[169.04081726 134.20497131]
[155.01556396 128.88591003]
[140.99032593 123.56683350]
[134.58052063 132.24577332]
[126.37007141 139.24565125]
[116.78651428 144.20198059]
[106.32886505 146.85667419]
[95.54167175 147.07148743]
[84.98662567 144.83526611]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 31]
[5 29]
[6 28]
[7 27]
[10 23]
[11 22]
[12 21]
[13 20]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[53 76]
[54 75]
[55 74]
[56 72]
[57 71]
[58 70]
[59 69]
[79 110]
[80 109]
[81 108]
[82 107]
[83 106]
[85 105]
[86 104]
[87 103]
[88 101]
[89 100]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
