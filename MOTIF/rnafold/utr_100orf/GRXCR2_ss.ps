%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGGACCCUGAGAAAAAGCUGAAUCAGAAGAGUGAUGGCAAACCCCGGAAAGUACGAUUUAAAAUCUCCUCCUCCUACAGCGGUCGAGUAUUGAAGC\
) } def
/len { sequence length } bind def

/coor [
[204.37005615 309.31777954]
[199.46900940 293.39053345]
[205.01992798 277.50302124]
[196.27882385 265.31314087]
[187.53770447 253.12327576]
[178.79658508 240.93341064]
[170.05546570 228.74353027]
[161.31436157 216.55366516]
[152.12709045 216.53529358]
[143.90492249 212.13278198]
[138.64144897 204.26507568]
[137.68209839 194.70773315]
[141.38258362 185.69294739]
[133.81533813 172.74162292]
[126.24810028 159.79029846]
[118.68085480 146.83897400]
[97.05344391 150.34065247]
[75.98223877 144.33972168]
[59.44477463 129.96893311]
[50.56277466 109.94103241]
[51.01285172 88.03659821]
[37.13244629 82.35027313]
[23.25203896 76.66394806]
[16.37191391 77.19595337]
[11.13007069 74.46963501]
[8.70324993 70.16832733]
[-4.79678965 63.63005829]
[-18.29682922 57.09179306]
[-31.79686928 50.55352402]
[-46.64170456 55.97629547]
[-60.93764496 49.23822021]
[-66.20316315 34.33688354]
[-59.31431961 20.11297989]
[-44.35814285 15.00530243]
[-30.20786858 22.04414558]
[-25.25860214 37.05348587]
[-11.75856304 43.59175110]
[1.74147654 50.13001633]
[15.24151611 56.66828537]
[28.93836594 62.78353882]
[42.81877136 68.46986389]
[56.69918060 74.15618896]
[61.28250122 67.69181824]
[66.82193756 62.02527618]
[73.18068695 57.29650879]
[80.20173645 53.62228775]
[87.71168518 51.09334564]
[95.52510071 49.77212906]
[103.44901276 49.69127274]
[106.68928528 35.04543304]
[97.02150726 22.75445366]
[97.56771851 7.12641287]
[108.07001495 -4.45960712]
[123.56952667 -6.53304148]
[136.74786377 1.88512206]
[141.38261414 16.82008362]
[135.28540039 31.22001266]
[121.33512115 38.28570175]
[118.09485626 52.93154144]
[128.47160339 58.37991714]
[137.31036377 66.07655334]
[144.13366699 75.60568237]
[148.57293701 86.45255280]
[150.38836670 98.03124237]
[149.48188782 109.71627808]
[145.90246582 120.87645721]
[139.84347534 130.90892029]
[131.63218689 139.27172852]
[139.19943237 152.22305298]
[146.76666260 165.17437744]
[154.33390808 178.12570190]
[173.57814026 187.27456665]
[173.50422668 207.81254578]
[182.24534607 220.00242615]
[190.98645020 232.19229126]
[199.72756958 244.38215637]
[208.46868896 256.57202148]
[217.20980835 268.76190186]
[231.06230164 267.83291626]
[243.44654846 273.86410522]
[251.13398743 285.16284180]
[252.18055725 298.67950439]
[246.41723633 310.83026123]
[254.77502441 323.28607178]
[267.36196899 326.59146118]
[274.04479980 337.28558350]
[271.65533447 349.25674438]
[279.62170410 361.96646118]
[287.58807373 374.67617798]
[295.55444336 387.38589478]
[309.08963013 397.59545898]
[303.02593994 413.42797852]
[286.13360596 411.98416138]
[282.84472656 395.35226440]
[274.87835693 382.64254761]
[266.91198730 369.93283081]
[258.94561768 357.22311401]
[243.05351257 349.96072388]
[242.31919861 331.64385986]
[233.96142578 319.18804932]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 78]
[4 77]
[5 76]
[6 75]
[7 74]
[8 73]
[13 71]
[14 70]
[15 69]
[16 68]
[21 42]
[22 41]
[23 40]
[26 39]
[27 38]
[28 37]
[29 36]
[49 59]
[50 58]
[83 100]
[84 99]
[87 97]
[88 96]
[89 95]
[90 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
