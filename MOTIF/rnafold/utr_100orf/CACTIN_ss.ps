%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAGCGCAGGCUUCGGCUAUUGGUGUUGGUGCCGCGGCCACUGGCCCAGCCGAUGGGUCGGGACACACGCUCGCGCUCGCGGUCCGCGGGUCGCCGGGGCCGAAGGCGGCAGAGUCAGAGCGGGAGCCGAAGUCGGAGCAGGAGCCAUGGGC\
) } def
/len { sequence length } bind def

/coor [
[108.34387970 411.27786255]
[108.03790283 396.28100586]
[107.73192596 381.28411865]
[107.42594910 366.28723145]
[106.81411743 351.29971313]
[105.89669800 336.32778931]
[92.50539398 329.80563354]
[84.12093353 317.37353516]
[83.07810211 302.31436157]
[89.75686646 288.66552734]
[102.45349884 280.13659668]
[101.53607941 265.16467285]
[100.61865234 250.19274902]
[99.70122528 235.22084045]
[98.78379822 220.24891663]
[97.86637878 205.27699280]
[96.94895172 190.30508423]
[96.03152466 175.33316040]
[95.11410522 160.36125183]
[91.54438019 153.83798218]
[94.33383942 145.07514954]
[93.72200775 130.08763123]
[93.11017609 115.10012054]
[83.87793732 103.27786255]
[69.48554230 99.05187988]
[55.09314728 94.82588959]
[40.70075226 90.59989929]
[26.30835724 86.37390900]
[11.33644009 85.45648956]
[-3.46424747 87.89363098]
[-18.26493454 90.33077240]
[-27.27121735 103.31777954]
[-42.83748627 106.05033112]
[-55.72854996 96.90724182]
[-58.29637146 81.31295776]
[-49.01750183 68.51927948]
[-33.39693832 66.11647034]
[-20.70207596 75.53008270]
[-5.90138960 73.09294128]
[8.89929771 70.65579987]
[11.78824902 55.93595123]
[14.67695808 41.21741104]
[1.89535677 33.36689377]
[-10.88624477 25.51637268]
[-23.66784668 17.66585350]
[-36.44944763 9.81533337]
[-49.23104858 1.96481335]
[-62.01264954 -5.88570642]
[-74.79425049 -13.73622608]
[-90.66928864 -11.42045593]
[-102.27877808 -22.49291420]
[-100.71691132 -38.45975876]
[-87.18182373 -47.07259369]
[-72.05647278 -41.72438812]
[-66.94373322 -26.51782799]
[-54.16213226 -18.66730881]
[-41.38053131 -10.81678867]
[-28.59892845 -2.96626854]
[-15.81732655 4.88425112]
[-3.03572512 12.73477077]
[9.74587631 20.58529091]
[22.52747726 28.43581009]
[30.53434563 71.98151398]
[44.92674255 76.20750427]
[59.31913376 80.43349457]
[73.71153259 84.65948486]
[88.10392761 88.88546753]
[94.17520142 86.34796906]
[100.17152405 86.59600067]
[104.97657776 89.11634064]
[116.70404816 79.76399231]
[128.43151855 70.41164398]
[140.15899658 61.05929565]
[146.12426758 46.40576553]
[160.89898682 44.51970673]
[172.62644958 35.16735840]
[184.35392761 25.81501198]
[196.08140564 16.46266556]
[207.80886841 7.11031771]
[205.18176270 -14.31298161]
[226.44818115 -32.22607040]
[235.06575012 -44.50358963]
[243.68331909 -56.78111267]
[252.30088806 -69.05863190]
[260.91845703 -81.33615875]
[269.53601074 -93.61367798]
[271.92691040 -102.49353790]
[278.45669556 -106.05131531]
[287.32290649 -118.15049744]
[296.18914795 -130.24967957]
[297.43099976 -146.60173035]
[312.32833862 -153.45742798]
[325.55609131 -143.76420593]
[323.50665283 -127.49362183]
[308.28833008 -121.38346100]
[299.42208862 -109.28427887]
[290.55587769 -97.18509674]
[281.81353760 -84.99610901]
[273.19598389 -72.71858978]
[264.57839966 -60.44106674]
[255.96083069 -48.16354752]
[247.34327698 -35.88602448]
[238.72570801 -23.60850143]
[242.71594238 -17.25806999]
[250.69642639 -4.55720758]
[254.68666077 1.79322386]
[269.48736572 -0.64391816]
[284.28802490 -3.08106017]
[293.29431152 -16.06806946]
[308.86059570 -18.80061913]
[321.75164795 -9.65753365]
[324.31948853 5.93675566]
[315.04061890 18.73043251]
[299.42004395 21.13323784]
[286.72518921 11.71962643]
[271.92449951 14.15676880]
[257.12380981 16.59391022]
[234.66114807 27.23432541]
[217.16122437 18.83778954]
[205.43374634 28.19013786]
[193.70626831 37.54248428]
[181.97880554 46.89483261]
[170.25132751 56.24717712]
[165.12487793 70.23176575]
[149.51133728 72.78676605]
[137.78385925 82.13911438]
[126.05639648 91.49146271]
[114.32891846 100.84381104]
[108.09769440 114.48828888]
[108.70952606 129.47579956]
[109.32135010 144.46331787]
[110.08602142 159.44381714]
[111.00344849 174.41574097]
[111.92086792 189.38764954]
[112.83829498 204.35957336]
[113.75572205 219.33149719]
[114.67314148 234.30340576]
[115.59056854 249.27532959]
[116.50799561 264.24725342]
[117.42542267 279.21917725]
[131.06840515 286.13409424]
[139.36363220 298.86538696]
[140.16725159 313.93923950]
[133.36340332 327.30200195]
[120.86861420 335.41036987]
[121.78604126 350.38229370]
[125.16065979 356.18081665]
[125.06807709 361.93911743]
[122.42282867 365.98126221]
[122.72880554 380.97814941]
[123.03478241 395.97500610]
[123.34075928 410.97189331]
[125.92397308 430.18066406]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 146]
[6 145]
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[21 131]
[22 130]
[23 129]
[24 67]
[25 66]
[26 65]
[27 64]
[28 63]
[29 40]
[30 39]
[31 38]
[42 62]
[43 61]
[44 60]
[45 59]
[46 58]
[47 57]
[48 56]
[49 55]
[70 128]
[71 127]
[72 126]
[73 125]
[75 123]
[76 122]
[77 121]
[78 120]
[79 119]
[81 103]
[82 102]
[83 101]
[84 100]
[85 99]
[86 98]
[88 97]
[89 96]
[90 95]
[106 117]
[107 116]
[108 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
