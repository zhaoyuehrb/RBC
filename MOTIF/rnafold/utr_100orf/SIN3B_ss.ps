%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:44:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGCGGGGCGGGGCGCAGCUCCGACUUCGGACAUGGCGCACGCUGGCGGUGGCAGCGGUGGCAGCGGUGCCGGCGGCCCCGCGGGCCGGGGGCUGAGCGGCGCCCGCUGGGGUCGCUCGGGCUCCGCAGGCC\
) } def
/len { sequence length } bind def

/coor [
[220.63845825 163.99938965]
[212.59532166 162.08477783]
[205.92141724 157.04585266]
[201.78479004 149.66937256]
[200.94729614 141.15863037]
[187.78590393 133.96293640]
[174.62452698 126.76724243]
[161.46315002 119.57154846]
[148.30177307 112.37584686]
[135.14038086 105.18015289]
[121.97900391 97.98445129]
[118.02877045 110.86508942]
[107.69979858 118.48876953]
[95.49686432 118.46525574]
[86.21875763 111.55556488]
[71.75270081 115.52207947]
[57.28664780 119.48859406]
[42.82059097 123.45510101]
[37.09937286 139.32594299]
[23.20247078 148.59587097]
[6.68240213 147.79769897]
[-5.99952459 137.44068909]
[-20.36936760 141.74273682]
[-34.73920822 146.04478455]
[-49.10905075 150.34683228]
[-59.96313095 162.63995361]
[-75.98046875 159.12185669]
[-80.68379211 143.41165161]
[-69.23473358 131.67063904]
[-53.41110229 135.97698975]
[-39.04125977 131.67494202]
[-24.67141533 127.37289429]
[-10.30157280 123.07084656]
[-7.04725313 110.07073212]
[2.29743576 100.31411743]
[15.35328865 96.44061279]
[28.71830368 99.57174683]
[38.85408020 108.98904419]
[53.32013702 105.02253723]
[67.78619385 101.05602264]
[82.25225067 97.08950806]
[88.97778320 83.27778625]
[105.30445099 78.57567596]
[100.17414856 64.48028564]
[95.04384613 50.38489532]
[89.91354370 36.28950500]
[84.78324127 22.19411469]
[79.65293884 8.09872627]
[74.52263641 -5.99666357]
[69.39233398 -20.09205246]
[56.56254959 -24.36863136]
[48.67733002 -35.11458588]
[48.45370483 -48.24615097]
[55.74851608 -58.93193054]
[50.94758606 -73.14287567]
[39.20038605 -83.74069977]
[42.45716476 -98.27488708]
[37.65623474 -112.48583984]
[24.99179459 -122.90428162]
[27.94875717 -139.03463745]
[43.48525238 -144.28338623]
[55.61866760 -133.25105286]
[51.86718369 -117.28676605]
[56.66811371 -103.07582092]
[68.07192230 -93.49446106]
[65.15853882 -77.94380951]
[69.95946503 -63.73285675]
[85.31021881 -56.96512604]
[91.17359161 -40.88800430]
[83.48772430 -25.22235489]
[88.61802673 -11.12696552]
[93.74832916 2.96842384]
[98.87863159 17.06381226]
[104.00893402 31.15920258]
[109.13923645 45.25459290]
[114.26953888 59.34997940]
[119.39984131 73.44537354]
[129.17469788 84.82307434]
[142.33607483 92.01876831]
[155.49746704 99.21446991]
[168.65884399 106.41016388]
[181.82022095 113.60585785]
[194.98159790 120.80155945]
[208.14299011 127.99725342]
[230.37786865 125.62515259]
[241.32400513 144.25798035]
[255.09724426 150.19917297]
[268.87048340 156.14036560]
[282.64373779 162.08155823]
[296.61593628 167.53846741]
[310.77005005 172.50440979]
[324.92419434 177.47036743]
[339.07830811 182.43630981]
[354.66180420 179.70407104]
[364.10983276 191.21858215]
[378.26394653 196.18453979]
[392.41809082 201.15048218]
[406.57220459 206.11643982]
[420.72634888 211.08238220]
[434.88046265 216.04833984]
[449.03460693 221.01428223]
[463.18872070 225.98023987]
[477.34286499 230.94619751]
[486.57055664 230.84288025]
[491.76623535 236.19587708]
[505.80099487 241.48983765]
[519.83575439 246.78379822]
[536.78955078 246.71665955]
[541.54736328 262.98931885]
[527.22772217 272.06591797]
[514.54174805 260.81854248]
[500.50701904 255.52458191]
[486.47229004 250.23062134]
[472.37689209 245.10032654]
[458.22277832 240.13436890]
[444.06863403 235.16841125]
[429.91452026 230.20246887]
[415.76040649 225.23651123]
[401.60626221 220.27056885]
[387.45214844 215.30461121]
[373.29800415 210.33865356]
[359.14389038 205.37271118]
[344.57278442 208.46015930]
[334.11236572 196.59043884]
[319.95822144 191.62449646]
[305.80410767 186.65853882]
[291.64996338 181.69259644]
[288.26281738 182.94940186]
[284.08535767 182.57043457]
[279.92044067 180.19688416]
[276.70254517 175.85481262]
[262.92929077 169.91360474]
[249.15605164 163.97241211]
[235.38281250 158.03121948]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 84]
[6 83]
[7 82]
[8 81]
[9 80]
[10 79]
[11 78]
[15 41]
[16 40]
[17 39]
[18 38]
[22 33]
[23 32]
[24 31]
[25 30]
[43 77]
[44 76]
[45 75]
[46 74]
[47 73]
[48 72]
[49 71]
[50 70]
[54 67]
[55 66]
[57 64]
[58 63]
[86 134]
[87 133]
[88 132]
[89 131]
[90 127]
[91 126]
[92 125]
[93 124]
[95 122]
[96 121]
[97 120]
[98 119]
[99 118]
[100 117]
[101 116]
[102 115]
[103 114]
[105 113]
[106 112]
[107 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
