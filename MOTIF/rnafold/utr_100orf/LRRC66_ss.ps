%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCAUUAUGAAAAACCUCUAUUUCAGAGUCAUUACCAUAGUUAUAGGUCUUUAUUUUACUGGAAUAAUGACAAAUGCAUCAAGAAAAAGCAAUAUUUUAUUCAAUU\
) } def
/len { sequence length } bind def

/coor [
[137.36930847 188.72999573]
[143.44906616 174.96949768]
[151.95399475 162.56059265]
[141.34739685 151.95399475]
[130.74079895 141.34739685]
[120.13419342 130.74079895]
[109.52758789 120.13419342]
[97.41407013 122.12404633]
[86.08596039 117.39425659]
[73.31921387 125.26890564]
[60.55246353 133.14355469]
[47.78571320 141.01820374]
[35.01896286 148.89285278]
[33.98083496 164.37516785]
[24.01486969 176.26882935]
[8.95318508 180.00047302]
[-5.41269493 174.13523865]
[-13.55879593 160.92839050]
[-12.35277653 145.45825195]
[-2.25837398 133.67340088]
[12.84290600 130.10536194]
[27.14431381 136.12609863]
[39.91106415 128.25144958]
[52.67781448 120.37680817]
[65.44456482 112.50215912]
[78.21131134 104.62751007]
[78.17707062 95.53676605]
[81.77775574 87.18943787]
[88.41362762 80.97589874]
[85.38036346 66.28578949]
[82.34709930 51.59567642]
[79.31383514 36.90556717]
[76.28057098 22.21545792]
[73.24730682 7.52534914]
[70.21404266 -7.16476011]
[56.23247528 -13.63175106]
[48.82636642 -26.93599701]
[50.65279007 -41.87347031]
[60.80328369 -52.74110413]
[57.77001953 -67.43121338]
[54.73675919 -82.12132263]
[51.70349503 -96.81143188]
[37.59809875 -111.06731415]
[44.08027649 -129.18675232]
[40.19799042 -143.67564392]
[36.31570435 -158.16453552]
[32.43341827 -172.65342712]
[20.46117973 -183.86045837]
[24.44365311 -199.76869202]
[40.28401184 -204.01309204]
[51.68705368 -192.22740173]
[46.92230606 -176.53570557]
[50.80459213 -162.04681396]
[54.68687820 -147.55793762]
[58.56916428 -133.06904602]
[68.00259399 -128.67276001]
[73.50128174 -119.57652283]
[72.98916626 -108.73800659]
[66.39360046 -99.84469604]
[69.42686462 -85.15458679]
[72.46012878 -70.46447754]
[75.49339294 -55.77436829]
[89.11819458 -49.81593704]
[96.71167755 -36.82351685]
[95.18080902 -21.67393494]
[84.90415192 -10.19802380]
[87.93741608 4.49208593]
[90.97068024 19.18219566]
[94.00394440 33.87230301]
[97.03720856 48.56241226]
[100.07047272 63.25252151]
[103.10373688 77.94263458]
[119.60618591 89.42843628]
[120.13419342 109.52758789]
[130.74079895 120.13419342]
[141.34739685 130.74079895]
[151.95399475 141.34739685]
[162.56059265 151.95399475]
[174.96949768 143.44906616]
[188.72999573 137.36930847]
[203.37339783 133.92178345]
[218.40095520 133.22390747]
[233.30084229 135.29946899]
[247.56558228 140.07775879]
[260.70928955 147.39602661]
[272.28436279 157.00503540]
[281.89648438 168.57749939]
[289.21829224 181.71923828]
[294.00042725 195.98268127]
[296.07998657 210.88201904]
[295.38616943 225.90977478]
[291.94259644 240.55409241]
[285.86654663 254.31622314]
[277.36495972 266.72741699]
[266.72741699 277.36495972]
[254.31622314 285.86654663]
[240.55409241 291.94259644]
[225.90977478 295.38616943]
[210.88201904 296.07998657]
[195.98268127 294.00042725]
[181.71923828 289.21829224]
[168.57749939 281.89648438]
[157.00503540 272.28436279]
[147.39602661 260.70928955]
[140.07775879 247.56558228]
[135.29946899 233.30084229]
[133.22390747 218.40095520]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 78]
[4 77]
[5 76]
[6 75]
[7 74]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[29 72]
[30 71]
[31 70]
[32 69]
[33 68]
[34 67]
[35 66]
[39 62]
[40 61]
[41 60]
[42 59]
[44 55]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
