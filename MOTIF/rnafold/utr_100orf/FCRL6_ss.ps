%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:17:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACACCCACAGGACCUGCAGCUGAACGAAGUUGAAGACAACUCAGGAGAUCUGUUGGAAAGAGAACGAUAGAGGAAAAUAUAUGAAUGUUGCCAUCUUUAGGCCCCAUGCUGCUCUGGACGGCUGUGCUGCUCUUUGUUCCCUGUGUUGGGAAAACUGUCUGGCUGUACCUCCAAGCCUGGCCAA\
) } def
/len { sequence length } bind def

/coor [
[123.65930939 157.54409790]
[110.19440460 164.15441895]
[95.25353241 162.82388306]
[83.16860199 153.93824768]
[77.44348145 140.07379150]
[79.73809052 125.25034332]
[89.38510895 113.76712799]
[75.99732971 120.53227997]
[67.17001343 133.66198730]
[52.32108688 132.49642944]
[38.93330383 139.26158142]
[25.54552078 146.02673340]
[12.15773869 152.79188538]
[-1.23004413 159.55703735]
[-11.46908760 176.90638733]
[-30.70364952 175.04266357]
[-43.85789871 182.25138855]
[-57.01214600 189.46011353]
[-70.16639709 196.66885376]
[-82.74190521 204.84544373]
[-94.66758728 213.94367981]
[-106.59327698 223.04193115]
[-118.51895905 232.14016724]
[-130.44464111 241.23840332]
[-132.30249023 256.93310547]
[-144.76556396 266.65151978]
[-160.43975830 264.62783813]
[-170.02584839 252.06271362]
[-167.83656311 236.41078186]
[-155.17079163 226.95808411]
[-139.54289246 229.31272888]
[-127.61720276 220.21447754]
[-115.69152069 211.11624146]
[-103.76583099 202.01799011]
[-91.84014893 192.91975403]
[-106.83317566 192.46249390]
[-119.26605988 184.07063293]
[-125.29773712 170.33677673]
[-123.06475830 155.50392151]
[-113.25698853 144.15457153]
[-98.90447235 139.79505920]
[-84.44133759 143.77221680]
[-74.33588409 154.85733032]
[-71.71012115 169.62571716]
[-77.37512207 183.51460266]
[-64.22087097 176.30587769]
[-51.06662369 169.09715271]
[-37.91237640 161.88841248]
[-35.93434525 151.83866882]
[-28.58948898 144.38784790]
[-18.13905525 142.17468262]
[-7.99519587 146.16925049]
[5.39258671 139.40409851]
[18.78036880 132.63894653]
[32.16815186 125.87379456]
[45.55593491 119.10864258]
[53.42566299 106.46282959]
[69.23217773 107.14450073]
[82.61995697 100.37934875]
[87.42176819 86.16869354]
[80.88127136 72.66973877]
[74.34076691 59.17077637]
[67.80027008 45.67182159]
[61.25976944 32.17286301]
[46.11977768 29.32912636]
[35.67934799 18.24531746]
[33.78975677 3.31570101]
[40.96774292 -9.70791340]
[34.42724228 -23.20687103]
[27.88674355 -36.70582962]
[21.34624290 -50.20478821]
[14.80574322 -63.70374298]
[-0.27109113 -62.13375854]
[-14.97489452 -65.81804657]
[-27.53011131 -74.31170654]
[-36.42063522 -86.58910370]
[-40.57289886 -101.16766357]
[-39.48548889 -116.28697205]
[-33.28971863 -130.12127686]
[-22.73375702 -141.00004578]
[-9.09228802 -147.60958862]
[5.98741436 -149.15179443]
[20.68440247 -145.44041443]
[33.22394562 -136.92362976]
[42.09183121 -124.62987518]
[46.21721649 -110.04368591]
[45.10194778 -94.92640686]
[38.88069153 -81.10353851]
[28.30470085 -70.24424744]
[34.84519958 -56.74528503]
[41.38570023 -43.24633026]
[47.92620087 -29.74737167]
[54.46670151 -16.24841309]
[69.13617706 -13.81030750]
[79.68186188 -3.07473063]
[81.90997314 11.98810196]
[74.75872803 25.63236237]
[81.29922485 39.13132095]
[87.83972931 52.63027954]
[94.38022614 66.12923431]
[100.92072296 79.62819672]
[109.93864441 85.94541931]
[113.00749207 94.72984314]
[127.93215942 96.23127747]
[142.85682678 97.73271179]
[157.78149414 99.23414612]
[165.36375427 90.04663086]
[176.33085632 85.71311188]
[187.90728760 87.20560455]
[197.22306824 94.03718567]
[202.02531433 104.41190338]
[216.89147949 106.41120911]
[231.75764465 108.41051483]
[239.72526550 96.90040588]
[251.81924438 89.98289490]
[265.64782715 88.96025085]
[278.50445557 93.97539520]
[287.89739990 103.99507904]
[292.03271484 117.02222443]
[306.86340332 119.26966095]
[321.71234131 121.39310455]
[336.57849121 123.39240265]
[351.44464111 125.39170837]
[366.31082153 127.39101410]
[381.17697144 129.39031982]
[396.04315186 131.38961792]
[410.90930176 133.38893127]
[425.61761475 127.56004333]
[437.20004272 136.92468262]
[452.06622314 138.92399597]
[456.99902344 129.46641541]
[464.35678101 121.77275085]
[473.54843140 116.44406891]
[483.84027100 113.89215851]
[494.41455078 114.30770111]
[504.43441772 117.64606476]
[513.11022949 123.63176727]
[519.76159668 131.78120422]
[523.87103271 141.44165039]
[525.12396240 151.84358215]
[539.77142334 155.07658386]
[554.41882324 158.30957031]
[569.06628418 161.54257202]
[583.71374512 164.77557373]
[596.89849854 156.06137085]
[612.36651611 159.30436707]
[620.94079590 172.58053589]
[617.53448486 188.01336670]
[604.16839600 196.44683838]
[588.77239990 192.87751770]
[580.48071289 179.42301941]
[565.83331299 176.19001770]
[551.18585205 172.95703125]
[536.53839111 169.72402954]
[521.89093018 166.49102783]
[509.61013794 181.72482300]
[491.23083496 188.66535950]
[471.79104614 185.32504272]
[456.66259766 172.54612732]
[450.06692505 153.79016113]
[435.20074463 151.79084778]
[421.55575562 157.76274109]
[408.91000366 148.25509644]
[394.04382324 146.25578308]
[379.17767334 144.25648499]
[364.31152344 142.25717163]
[349.44534302 140.25787354]
[334.57919312 138.25857544]
[319.71301270 136.25926208]
[312.65072632 138.48812866]
[304.61596680 134.10034180]
[289.78527832 131.85290527]
[280.02011108 144.71595764]
[265.01632690 150.94033813]
[248.82740784 148.74205017]
[235.87884521 138.62657166]
[229.75833130 123.27667236]
[214.89216614 121.27736664]
[200.02600098 119.27806854]
[186.18621826 131.23840332]
[167.67985535 129.27079773]
[156.28005981 114.15881348]
[141.35539246 112.65737915]
[126.43072510 111.15594482]
[111.50605774 109.65451050]
[124.63737488 116.90492249]
[132.10517883 129.91383362]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 59]
[8 58]
[10 56]
[11 55]
[12 54]
[13 53]
[14 52]
[16 48]
[17 47]
[18 46]
[19 45]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[60 101]
[61 100]
[62 99]
[63 98]
[64 97]
[68 93]
[69 92]
[70 91]
[71 90]
[72 89]
[103 185]
[104 184]
[105 183]
[106 182]
[111 179]
[112 178]
[113 177]
[119 172]
[120 171]
[121 169]
[122 168]
[123 167]
[124 166]
[125 165]
[126 164]
[127 163]
[129 161]
[130 160]
[140 155]
[141 154]
[142 153]
[143 152]
[144 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
