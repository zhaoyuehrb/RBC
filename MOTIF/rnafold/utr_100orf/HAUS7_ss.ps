%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:33:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGGAGGUUGAUUGGCGGUCUUGCCGGCCAGUGAAGCCAGGGCAUGGGCGGGGCGCGGCUCGGAGCGCGAAACAUGGCGGGGCAGGACGCUGGCUGCGGCCGUGGCGGCGACGACUACUCAGAGGACGAGGGCGACAGCAGCG\
) } def
/len { sequence length } bind def

/coor [
[88.93898010 277.06695557]
[88.61400604 262.07046509]
[88.28903961 247.07398987]
[87.96407318 232.07751465]
[77.47338867 224.52218628]
[73.20795441 212.11151123]
[76.94672394 199.32879639]
[87.53317261 190.93019104]
[87.53317261 175.93019104]
[87.53317261 160.93019104]
[87.53317261 145.93019104]
[72.87957764 127.57373047]
[71.41254425 108.27060699]
[79.70734406 95.23905182]
[91.21212769 91.93530273]
[80.21109009 81.73838043]
[69.21004486 71.54146576]
[58.20900726 61.34454727]
[49.72095490 57.76929855]
[47.08313751 50.80556488]
[36.30558777 40.37270737]
[25.52804184 29.93985367]
[14.75049496 19.50699615]
[3.97294807 9.07414150]
[-6.80459929 -1.35871458]
[-17.58214569 -11.79157066]
[-35.51651382 -15.81368923]
[-39.74532700 -32.81298065]
[-50.74636459 -43.00989532]
[-61.74740601 -53.20681381]
[-72.74844360 -63.40373230]
[-83.85929871 -73.48088074]
[-95.07866669 -83.43707275]
[-110.15097046 -80.25401306]
[-124.04508972 -86.48352814]
[-131.51846313 -99.54541016]
[-129.88697815 -114.32634735]
[-141.10633850 -124.28253937]
[-160.99243164 -121.95223999]
[-176.02896118 -134.71083069]
[-176.93902588 -154.10733032]
[-188.78138733 -163.31378174]
[-200.62374878 -172.52021790]
[-212.46611023 -181.72665405]
[-221.23176575 -184.55380249]
[-224.46243286 -191.26307678]
[-236.10255432 -200.72390747]
[-251.69169617 -203.42378235]
[-256.68807983 -217.45536804]
[-268.32821655 -226.91621399]
[-284.43307495 -232.21429443]
[-283.80029297 -249.15643311]
[-267.34509277 -253.23844910]
[-258.86737061 -238.55633545]
[-247.22724915 -229.09548950]
[-232.47068787 -227.07232666]
[-226.64172363 -212.36404419]
[-215.00160217 -202.90319824]
[-203.25965881 -193.56901550]
[-191.41729736 -184.36257935]
[-179.57495117 -175.15614319]
[-167.73258972 -165.94969177]
[-158.14620972 -169.96165466]
[-147.67959595 -169.59042358]
[-138.25659180 -164.83628845]
[-131.63764954 -156.51136780]
[-129.09100342 -146.10163879]
[-131.15014648 -135.50190735]
[-119.93078613 -125.54571533]
[-105.44861603 -128.92282104]
[-91.59091949 -123.05527496]
[-83.75381470 -110.00026703]
[-85.12247467 -94.65644073]
[-73.90310669 -84.70024872]
[-66.75955200 -82.59757233]
[-62.55152893 -74.40476990]
[-51.55048752 -64.20785522]
[-40.54944992 -54.01093674]
[-29.54840851 -43.81401825]
[-17.40622711 -43.94656754]
[-8.15250015 -35.47672272]
[-7.14929056 -22.56911659]
[3.62825680 -12.13626194]
[14.40580368 -1.70340586]
[25.18335152 8.72945023]
[35.96089935 19.16230583]
[46.73844528 29.59516144]
[57.51599121 40.02801895]
[68.40592194 50.34350967]
[79.40696716 60.54042816]
[90.40800476 70.73734283]
[101.40904236 80.93426514]
[116.28247833 82.87873077]
[129.53515625 75.85260010]
[142.78784180 68.82647705]
[151.03153992 54.64996338]
[167.42753601 54.97152710]
[175.10902405 69.46037292]
[166.17396545 83.21161652]
[149.81396484 82.07915497]
[136.56127930 89.10528564]
[123.30860138 96.13140869]
[126.21503448 110.84713745]
[141.14379883 112.30728912]
[156.07255554 113.76743317]
[171.00132751 115.22758484]
[185.94502258 116.52593231]
[200.90191650 117.66231537]
[215.44206238 110.07836151]
[229.13294983 119.10563660]
[227.89056396 135.45765686]
[212.99296570 142.31286621]
[199.76553345 132.61920166]
[184.80863953 131.48281860]
[177.84922791 134.13198853]
[169.54116821 130.15634155]
[154.61241150 128.69619751]
[139.68365479 127.23604584]
[124.75488281 125.77590179]
[119.19945526 130.81446838]
[131.60064697 139.25311279]
[144.00183105 147.69174194]
[158.88543701 149.55677795]
[170.40875244 159.15954590]
[174.92712402 173.46284485]
[171.01145935 187.94274902]
[159.90023804 198.01948547]
[145.10775757 200.50593567]
[131.31265259 194.61566162]
[122.87812042 182.21168518]
[122.47136688 167.21910095]
[115.27998352 154.05535889]
[108.08860016 140.89161682]
[102.53317261 145.93019104]
[102.53317261 160.93019104]
[102.53317261 175.93019104]
[102.53317261 190.93019104]
[115.11617279 203.03175354]
[115.09161377 220.15287781]
[102.96055603 231.75254822]
[103.28552246 246.74902344]
[103.61048889 261.74551392]
[103.93545532 276.74197388]
[106.54299164 295.94747925]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 143]
[2 142]
[3 141]
[4 140]
[8 137]
[9 136]
[10 135]
[11 134]
[15 92]
[16 91]
[17 90]
[18 89]
[20 88]
[21 87]
[22 86]
[23 85]
[24 84]
[25 83]
[26 82]
[28 79]
[29 78]
[30 77]
[31 76]
[32 74]
[33 73]
[37 69]
[38 68]
[41 62]
[42 61]
[43 60]
[44 59]
[46 58]
[47 57]
[49 55]
[50 54]
[93 102]
[94 101]
[95 100]
[103 119]
[104 118]
[105 117]
[106 116]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
