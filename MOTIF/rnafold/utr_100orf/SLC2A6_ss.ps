%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:48:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGGGCGGAGCCUGGCCGGUGCCCUCGGAGCUGCUGGCCCCGGGCGGCUGCUCCAGUCUGAGCGCCCUCCGCUCGCCCCGAGAGAGACCCGGCCAUGCAGGAGCCGCUGCUGGGAGCCGAGGGCCCGGACUACGACACCUUCCCCGAGAAGCCGCCCCCGUCGCCAGGGGACAGGGCGCGGGUCGGGACCCUGC\
) } def
/len { sequence length } bind def

/coor [
[93.81983948 1057.92321777]
[81.84004974 1068.23144531]
[66.08648682 1066.96618652]
[55.90546036 1054.87805176]
[57.33718872 1039.13879395]
[69.53225708 1029.08618164]
[70.73310852 1014.13427734]
[71.81409454 999.17327881]
[72.77515411 984.20410156]
[62.77727890 973.22326660]
[63.53868103 958.02868652]
[75.12415314 947.61645508]
[76.08520508 932.64727783]
[77.04625702 917.67810059]
[78.00731659 902.70892334]
[78.96836853 887.73974609]
[79.92942047 872.77056885]
[80.89047241 857.80139160]
[73.98451233 844.60455322]
[82.59009552 831.32843018]
[83.55114746 816.35925293]
[84.51219940 801.39007568]
[85.47325134 786.42089844]
[86.43430328 771.45172119]
[87.39535522 756.48254395]
[88.35641479 741.51336670]
[79.73497772 735.90258789]
[74.18260956 727.14758301]
[72.76083374 716.79669189]
[75.79350281 706.71405029]
[82.79612732 698.74353027]
[92.55195618 694.37188721]
[94.23142242 679.46618652]
[87.96777344 665.95263672]
[97.20155334 653.10552979]
[98.88101959 638.19989014]
[100.56049347 623.29418945]
[102.23995972 608.38848877]
[103.91942596 593.48278809]
[90.34811401 582.19805908]
[86.22209167 564.87548828]
[93.37408447 548.39624023]
[109.11789703 539.42309570]
[110.31874847 524.47125244]
[111.51959991 509.51940918]
[112.72045898 494.56756592]
[113.92131042 479.61569214]
[115.12216187 464.66384888]
[116.32302094 449.71197510]
[117.52387238 434.76013184]
[110.83031464 421.45428467]
[119.64757538 408.31784058]
[120.84842682 393.36599731]
[122.04928589 378.41412354]
[117.53958893 369.52062988]
[121.58337402 359.03964233]
[119.66522217 344.16278076]
[117.74706268 329.28594971]
[115.82890320 314.40908813]
[113.91074371 299.53222656]
[111.99259186 284.65539551]
[103.36217499 279.15631104]
[99.09992981 269.61154175]
[100.83710480 259.08093262]
[108.23752594 251.08821106]
[106.79718018 236.15753174]
[105.35683441 221.22683716]
[103.91648865 206.29615784]
[102.47614288 191.36546326]
[101.03579712 176.43478394]
[92.11214447 164.50927734]
[98.48855591 150.02992249]
[97.04821014 135.09922791]
[95.60786438 120.16854858]
[94.16751862 105.23786163]
[87.26594543 106.91996002]
[79.58518982 105.51436615]
[72.21230316 100.83003235]
[66.26138306 93.01682281]
[60.63238144 79.11307526]
[55.00337601 65.20932007]
[39.82484436 62.44966507]
[28.56343842 51.90526962]
[24.81263161 36.94081116]
[29.76929474 22.33139610]
[41.85177231 12.73883343]
[57.20458984 11.22407627]
[70.92871857 18.27047729]
[78.64484406 31.62955666]
[77.89076996 47.03847885]
[68.90712738 59.58031464]
[74.53613281 73.48406982]
[80.16513824 87.38781738]
[95.09582520 85.94747162]
[97.96320343 71.22408295]
[100.83058167 56.50069809]
[99.39863586 47.46630478]
[103.86371613 41.56514740]
[106.96671295 26.88961029]
[110.06970978 12.21407127]
[113.17269897 -2.46146679]
[104.34194183 -15.56845856]
[107.44765472 -31.06459045]
[120.64727783 -39.75627899]
[136.10971069 -36.48690414]
[144.66136169 -23.19612503]
[141.22868347 -7.76912594]
[127.84824371 0.64152849]
[124.74524689 15.31706619]
[121.64225006 29.99260521]
[118.53925323 44.66814423]
[115.55397034 59.36807632]
[112.68659210 74.09146881]
[109.81921387 88.81484985]
[109.09820557 103.79751587]
[110.53855133 118.72820282]
[111.97889709 133.65888977]
[113.41924286 148.58956909]
[122.44592285 161.58302307]
[115.96648407 174.99443054]
[117.40682983 189.92512512]
[118.84717560 204.85580444]
[120.28752136 219.78649902]
[121.72786713 234.71717834]
[123.16821289 249.64787292]
[135.61070251 265.49777222]
[126.86943817 282.73724365]
[128.78759766 297.61407471]
[130.70574951 312.49093628]
[132.62391663 327.36779785]
[134.54206848 342.24462891]
[136.46022034 357.12149048]
[143.03660583 343.63995361]
[154.14971924 333.56530762]
[168.20971680 328.33880615]
[183.20516968 328.70819092]
[196.99079895 334.62057495]
[207.59442139 345.23016357]
[213.49906921 359.01910400]
[213.86001587 374.01477051]
[208.62561035 388.07183838]
[198.54472351 399.17929077]
[185.05950928 405.74807739]
[170.09919739 406.83847046]
[155.80401611 402.29449463]
[144.21905518 392.76617432]
[137.00114441 379.61499023]
[135.80027771 394.56683350]
[134.59942627 409.51867676]
[141.20709229 423.89398193]
[132.47572327 435.96099854]
[131.27487183 450.91284180]
[130.07402039 465.86468506]
[128.87316895 480.81655884]
[127.67230988 495.76840210]
[126.47145844 510.72027588]
[125.27060699 525.67211914]
[124.06974792 540.62396240]
[134.56285095 547.44439697]
[141.11816406 558.02026367]
[142.54164124 570.30853271]
[138.62373352 581.96606445]
[130.16754150 590.79602051]
[118.82511139 595.16229248]
[117.14563751 610.06793213]
[115.46617126 624.97363281]
[113.78670502 639.87933350]
[112.10723877 654.78503418]
[118.25076294 669.36468506]
[109.13710785 681.14562988]
[107.45764160 696.05133057]
[120.80220795 711.05596924]
[118.85979462 730.73577881]
[103.32559204 742.47442627]
[102.36454010 757.44360352]
[101.40348816 772.41278076]
[100.44243622 787.38195801]
[99.48137665 802.35113525]
[98.52032471 817.32031250]
[97.55927277 832.28948975]
[104.39649963 846.55706787]
[95.85965729 858.76245117]
[94.89859772 873.73162842]
[93.93754578 888.70080566]
[92.97649384 903.66998291]
[92.01544189 918.63916016]
[91.05438995 933.60833740]
[90.09333038 948.57751465]
[100.25220490 960.38580322]
[99.06431580 975.55297852]
[87.74433136 985.16516113]
[86.78327942 1000.13433838]
[89.35876465 1008.91143799]
[85.68496704 1015.33514404]
[84.48410797 1030.28698730]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 195]
[7 194]
[8 192]
[9 191]
[12 188]
[13 187]
[14 186]
[15 185]
[16 184]
[17 183]
[18 182]
[20 180]
[21 179]
[22 178]
[23 177]
[24 176]
[25 175]
[26 174]
[32 171]
[33 170]
[35 168]
[36 167]
[37 166]
[38 165]
[39 164]
[43 158]
[44 157]
[45 156]
[46 155]
[47 154]
[48 153]
[49 152]
[50 151]
[52 149]
[53 148]
[54 147]
[56 132]
[57 131]
[58 130]
[59 129]
[60 128]
[61 127]
[65 125]
[66 124]
[67 123]
[68 122]
[69 121]
[70 120]
[72 118]
[73 117]
[74 116]
[75 115]
[79 93]
[80 92]
[81 91]
[94 114]
[95 113]
[96 112]
[98 111]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
