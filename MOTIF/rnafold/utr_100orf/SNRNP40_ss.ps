%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGGCAGCGCGGUCAGUGGCGGCGCUGAAGAGACCGGUUGCCGCCAUGAUAGAACAGCAGAAGCGUAAGGGCCCAGAGUUGCCGCUGGUUCCAGUCAAGCGGCAGCGGCAUGAGUUGCUGUUGGGAGCGGGGUCUGGCCCAGGAG\
) } def
/len { sequence length } bind def

/coor [
[67.76150513 124.78973389]
[60.44847107 112.31656647]
[47.79042816 120.36479187]
[35.13238525 128.41302490]
[22.47434044 136.46124268]
[9.81629753 144.50947571]
[-2.84174609 152.55769348]
[-15.49978924 160.60592651]
[-28.15783310 168.65414429]
[-33.77067184 175.95240784]
[-41.17348862 176.73574829]
[-54.00063324 184.51164246]
[-66.82777405 192.28753662]
[-79.65491486 200.06341553]
[-92.48205566 207.83930969]
[-104.87564087 216.28910828]
[-116.80028534 225.38870239]
[-128.72494507 234.48831177]
[-140.64959717 243.58790588]
[-146.46295166 258.92208862]
[-162.69064331 261.28723145]
[-172.63902283 248.25028992]
[-166.07403564 233.22254944]
[-149.74919128 231.66325378]
[-137.82453918 222.56365967]
[-125.89988708 213.46405029]
[-113.97523499 204.36445618]
[-128.13786316 199.42279053]
[-133.31068420 185.34295654]
[-125.71588898 172.40776062]
[-110.90011597 170.06408691]
[-99.68365479 180.02355957]
[-100.25794220 195.01216125]
[-87.43080139 187.23628235]
[-74.60366058 179.46038818]
[-61.77651978 171.68449402]
[-48.94937897 163.90861511]
[-36.20605850 155.99610901]
[-23.54801559 147.94787598]
[-10.88997173 139.89965820]
[1.76807177 131.85142517]
[14.42611504 123.80319977]
[27.08415794 115.75497437]
[39.74220276 107.70674896]
[52.40024567 99.65852356]
[37.43324280 100.65291595]
[24.76268768 108.68143463]
[9.82141113 110.00742340]
[-4.06499004 104.33574677]
[-13.80570984 92.92880249]
[-17.23267937 78.32552338]
[-13.58313179 63.77626801]
[-3.66937447 52.51938248]
[10.30200863 47.06040573]
[25.22129822 48.61437988]
[37.76778793 56.83542252]
[45.14892197 69.89377594]
[57.87458801 77.83464813]
[50.51382446 64.76486969]
[36.13232422 56.88422775]
[36.03696823 40.48535919]
[50.32585144 32.43800735]
[64.29979706 41.02060318]
[63.58360291 57.40410233]
[70.94436646 70.47388458]
[84.67134094 62.82296753]
[99.81324768 60.99898148]
[114.06964874 64.92707062]
[125.40517426 73.68402863]
[132.33978271 85.68511200]
[147.03169250 82.66056824]
[161.72360229 79.63602448]
[176.41551208 76.61148071]
[191.10742188 73.58693695]
[198.94747925 68.75972748]
[206.14546204 70.65827942]
[220.89863586 67.94839478]
[235.65182495 65.23850250]
[240.40846252 54.25107956]
[249.80308533 47.02450562]
[261.40505981 45.28125000]
[272.28311157 49.34372330]
[279.74594116 58.08226395]
[294.60144043 56.00524902]
[309.45693970 53.92823410]
[324.31243896 51.85121918]
[339.16793823 49.77420425]
[343.39004517 46.46847534]
[347.99893188 45.28179932]
[352.10452271 45.99775696]
[355.03845215 48.07184601]
[369.99652100 46.95089722]
[384.95455933 45.82994461]
[399.91262817 44.70899200]
[390.73895264 32.84123611]
[394.08471680 18.21913147]
[407.50640869 11.52153111]
[421.20190430 17.63984299]
[425.16903687 32.10572433]
[416.51092529 44.35420990]
[431.50320435 44.83498383]
[446.49551392 45.31575775]
[461.48779297 45.79653168]
[476.48010254 46.27730560]
[491.47238159 46.75807953]
[506.46469116 47.23885345]
[521.45697021 47.71962738]
[531.75189209 35.94896698]
[547.21215820 33.60066605]
[560.53790283 41.78351974]
[565.43707275 56.63383865]
[559.59649658 71.13975525]
[545.77386475 78.45201111]
[530.49584961 75.11799622]
[520.97619629 62.71192169]
[505.98391724 62.23114777]
[490.99160767 61.75037384]
[475.99932861 61.26959991]
[461.00701904 60.78882599]
[446.01473999 60.30805206]
[431.02243042 59.82727814]
[416.03015137 59.34650421]
[401.03356934 59.66704941]
[386.07553101 60.78800201]
[371.11746216 61.90895462]
[356.15939331 63.02990341]
[341.24496460 64.62970734]
[326.38946533 66.70672607]
[311.53396606 68.78373718]
[296.67843628 70.86075592]
[281.82293701 72.93776703]
[271.76361084 88.17066193]
[253.46363831 91.33833313]
[238.36170959 79.99169159]
[223.60853577 82.70157623]
[208.85534668 85.41146851]
[194.13195801 88.27884674]
[179.44004822 91.30339050]
[164.74813843 94.32793427]
[150.05622864 97.35247803]
[135.36433411 100.37701416]
[133.75309753 112.87039185]
[127.77780914 124.26107025]
[118.01978302 133.04434204]
[105.57118225 137.98927307]
[91.91413116 138.30888367]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 45]
[3 44]
[4 43]
[5 42]
[6 41]
[7 40]
[8 39]
[9 38]
[11 37]
[12 36]
[13 35]
[14 34]
[15 33]
[16 27]
[17 26]
[18 25]
[19 24]
[58 65]
[59 64]
[70 141]
[71 140]
[72 139]
[73 138]
[74 137]
[76 136]
[77 135]
[78 134]
[83 131]
[84 130]
[85 129]
[86 128]
[87 127]
[91 126]
[92 125]
[93 124]
[94 123]
[100 122]
[101 121]
[102 120]
[103 119]
[104 118]
[105 117]
[106 116]
[107 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
