%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCUGCUGAACUGAGCUGGGGCGCAGCCGCCUGUCUGCACCGGCAGCACCAUGUCGCUCAUGGUCGUCAGCAUGGCGUGUGUUGGGUUCUUCUUGCUGGAGGGGCCCUGGCCACAUGUGGGUGGUCAGGACAAGCCCUUCCUCUCUGCCU\
) } def
/len { sequence length } bind def

/coor [
[83.76722717 134.55885315]
[87.27435303 119.97667694]
[74.49700165 127.83409882]
[61.71964264 135.69152832]
[48.94228363 143.54895020]
[36.16492844 151.40637207]
[23.38756943 159.26380920]
[10.61021233 167.12123108]
[8.68242741 177.90867615]
[1.26136196 185.66957092]
[-8.99908352 187.98092651]
[-18.61914062 184.30854797]
[-31.71229553 191.62765503]
[-30.86673164 206.82786560]
[-36.68093491 220.83079529]
[-47.95222473 230.87957764]
[-62.40936661 235.02110291]
[-77.17011261 232.48538208]
[-89.31581116 223.82815552]
[-102.40896606 231.14726257]
[-115.50212097 238.46636963]
[-128.59527588 245.78547668]
[-141.68843079 253.10458374]
[-149.61482239 267.46090698]
[-166.01391602 267.50405884]
[-174.01571655 253.18960571]
[-165.38867188 239.24307251]
[-149.00753784 240.01142883]
[-135.91438293 232.69232178]
[-122.82122803 225.37321472]
[-109.72807312 218.05410767]
[-96.63491821 210.73500061]
[-97.64707947 195.85411072]
[-92.07496643 181.95227051]
[-80.97406769 171.80677795]
[-66.51004791 167.46946716]
[-51.53637314 169.85192871]
[-39.03140259 178.53450012]
[-25.93824768 171.21539307]
[-17.35880470 153.92889404]
[2.75278616 154.34387207]
[15.53014374 146.48645020]
[28.30750084 138.62901306]
[41.08485794 130.77159119]
[53.86221695 122.91416931]
[66.63957214 115.05673981]
[79.41693115 107.19931793]
[80.97451019 92.28040314]
[70.09568787 81.95320129]
[59.21686172 71.62599182]
[48.33803558 61.29878998]
[37.45920944 50.97158432]
[26.58038521 40.64438248]
[10.56991005 39.62249374]
[1.50500119 26.38591766]
[6.33948040 11.08861828]
[21.36474800 5.46537590]
[35.05470657 13.82986069]
[36.90758896 29.76555634]
[47.78641510 40.09276199]
[58.66524124 50.41996384]
[69.54406738 60.74716949]
[80.42288971 71.07437897]
[91.30171967 81.40158081]
[98.22332764 78.51344299]
[112.06654358 72.73717499]
[118.98815155 69.84903717]
[119.30020905 54.85228348]
[119.61226654 39.85552979]
[119.92432404 24.85877419]
[120.23637390 9.86202049]
[120.54843140 -5.13473320]
[120.86048889 -20.13148689]
[110.83715057 -32.65794754]
[114.52165985 -48.27216721]
[129.08758545 -54.99625778]
[143.36119080 -47.67206573]
[146.39299011 -31.91809082]
[135.85723877 -19.81943130]
[135.54518127 -4.82267666]
[135.23312378 10.17407703]
[134.92108154 25.17082977]
[134.60902405 40.16758347]
[134.29696655 55.16433716]
[133.98490906 70.16109467]
[141.44859314 57.14981079]
[143.69752502 42.31935883]
[152.40966797 30.10876465]
[165.70176697 23.15749741]
[180.70057678 22.96815681]
[194.16390991 29.58167458]
[203.18150330 41.56845474]
[205.80410767 56.33740616]
[201.46479797 70.69604492]
[191.10157776 81.54056549]
[176.95457458 86.52678680]
[162.08149719 84.57675934]
[147.51119995 88.14134216]
[162.00679016 91.99849701]
[176.50239563 95.85565948]
[190.99798584 99.71282196]
[205.49359131 103.56997681]
[219.98918152 107.42713928]
[234.48478699 111.28429413]
[248.98037720 115.14145660]
[263.62387085 118.39228058]
[278.38992310 121.03114319]
[293.15597534 123.67001343]
[307.92205811 126.30887604]
[322.68811035 128.94773865]
[337.45416260 131.58660889]
[352.22021484 134.22546387]
[366.98626709 136.86433411]
[381.75231934 139.50318909]
[394.57443237 130.26367188]
[410.16076660 132.87939453]
[419.26422119 145.79849243]
[416.48385620 161.35629272]
[403.46923828 170.32263184]
[387.94171143 167.37794495]
[379.11346436 154.26925659]
[364.34741211 151.63038635]
[349.58135986 148.99151611]
[334.81527710 146.35266113]
[320.04922485 143.71379089]
[305.28317261 141.07493591]
[290.51712036 138.43606567]
[275.75106812 135.79719543]
[260.98501587 133.15834045]
[258.57864380 134.71290588]
[255.39205933 135.37603760]
[251.77369690 134.83818054]
[248.17994690 132.92610168]
[245.12321472 129.63705444]
[230.62762451 125.77989197]
[216.13201904 121.92273712]
[201.63642883 118.06557465]
[187.14082336 114.20841217]
[172.64523315 110.35125732]
[158.14964294 106.49409485]
[143.65403748 102.63694000]
[154.75073242 112.72967529]
[161.27494812 126.23651123]
[162.28245544 141.20263672]
[157.62744141 155.46205139]
[147.98361206 166.95103455]
[134.74668884 174.00680542]
[119.83242035 175.60821533]
[105.39929962 171.52348328]
[93.53618622 162.34379578]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 47]
[3 46]
[4 45]
[5 44]
[6 43]
[7 42]
[8 41]
[12 39]
[13 38]
[19 32]
[20 31]
[21 30]
[22 29]
[23 28]
[48 64]
[49 63]
[50 62]
[51 61]
[52 60]
[53 59]
[67 85]
[68 84]
[69 83]
[70 82]
[71 81]
[72 80]
[73 79]
[98 141]
[99 140]
[100 139]
[101 138]
[102 137]
[103 136]
[104 135]
[105 134]
[106 129]
[107 128]
[108 127]
[109 126]
[110 125]
[111 124]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
