%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:49:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCAGGGGGCAGAGCAGACGGAGUGUGGGCCAUCGUCCCCAGUGGUGACCAGCCCUGCCAUGGGAAACUAUAGUUCCCACAAAAGGACCAAAGCACCCAAGCAGGCCCGCAAGGAGAGGCCGGCUGACAUGGACAAGGCCUGGUGGAAAUCGUUCCUCA\
) } def
/len { sequence length } bind def

/coor [
[77.04791260 279.16571045]
[73.56758118 293.75634766]
[70.08724976 308.34701538]
[66.60691833 322.93768311]
[68.81322479 339.74743652]
[53.27115250 346.52093506]
[42.45989227 333.46133423]
[52.01625824 319.45733643]
[55.49658966 304.86666870]
[58.97692108 290.27603149]
[62.45725250 275.68536377]
[56.53428650 259.18899536]
[69.23905945 245.89201355]
[72.43403625 231.23622131]
[75.62901306 216.58044434]
[69.35090637 206.20362854]
[71.92894745 193.94203186]
[82.51080322 186.50968933]
[85.99113464 171.91903687]
[89.47146606 157.32836914]
[92.95179749 142.73771667]
[72.40825653 130.45953369]
[62.44657516 110.07724762]
[65.08693695 88.80010986]
[78.13088989 73.38277435]
[71.36017609 59.99780273]
[64.58946991 46.61283112]
[57.81875992 33.22785950]
[51.04804993 19.84288597]
[44.27733994 6.45791245]
[37.50662994 -6.92706013]
[30.73591995 -20.31203270]
[14.01431274 -22.07399559]
[1.24613440 -32.79053116]
[-3.30881238 -48.67507553]
[1.75070822 -64.25407410]
[-7.94084120 -75.70281982]
[-17.63239098 -87.15157318]
[-27.32394028 -98.60031891]
[-44.14828491 -97.10971832]
[-58.41423416 -105.83824921]
[-64.62158203 -121.18922424]
[-60.51525497 -137.05920410]
[-70.42834473 -148.31666565]
[-80.34143066 -159.57414246]
[-90.25452423 -170.83161926]
[-105.18151093 -176.07524109]
[-107.78578186 -190.74040222]
[-117.69887543 -201.99787903]
[-127.61196136 -213.25535583]
[-146.96701050 -218.76965332]
[-150.06976318 -237.82545471]
[-160.41452026 -248.68759155]
[-171.07273865 -259.24230957]
[-182.03527832 -269.48062134]
[-192.99781799 -279.71890259]
[-208.78234863 -278.92892456]
[-220.44610596 -289.59347534]
[-221.06916809 -305.38546753]
[-210.28190613 -316.93582153]
[-194.48419189 -317.39187622]
[-183.04855347 -306.48309326]
[-182.75952148 -290.68145752]
[-171.79698181 -280.44314575]
[-160.83444214 -270.20486450]
[-157.26795959 -269.97778320]
[-153.64028931 -267.98034668]
[-150.79692078 -264.20596313]
[-149.55239868 -259.03234863]
[-139.20762634 -248.17022705]
[-128.94929504 -248.83631897]
[-119.84049225 -243.61300659]
[-115.03639984 -234.02932739]
[-116.35449219 -223.16844177]
[-106.44140625 -211.91096497]
[-96.52831268 -200.65350342]
[-82.31037903 -196.21507263]
[-78.99705505 -180.74470520]
[-69.08396149 -169.48722839]
[-59.17087173 -158.22976685]
[-49.25778198 -146.97229004]
[-36.11029816 -149.44842529]
[-23.35806465 -145.05743408]
[-14.37900162 -134.84898376]
[-11.60750771 -121.42829895]
[-15.87519073 -108.29187012]
[-6.18364096 -96.84312439]
[3.50790858 -85.39437103]
[13.19945812 -73.94562531]
[17.71365738 -75.56393433]
[22.43831825 -76.38522339]
[27.23383141 -76.38522339]
[31.95849228 -75.56393433]
[36.47269058 -73.94562531]
[46.16424179 -85.39437103]
[44.60548401 -101.12160492]
[54.68858337 -113.29151154]
[70.43141174 -114.68390656]
[82.49403381 -104.47270203]
[83.71990967 -88.71602631]
[73.38174438 -76.76203918]
[57.61299133 -75.70281982]
[47.92144012 -64.25407410]
[53.01818848 -45.13979721]
[44.12089157 -27.08274269]
[50.89160156 -13.69776917]
[57.66231155 -0.31279674]
[64.43302155 13.07217598]
[71.20372772 26.45714951]
[77.97444153 39.84212112]
[84.74514771 53.22709274]
[91.51586151 66.61206818]
[104.52839661 64.35985565]
[117.98524475 67.20341492]
[129.88912964 75.13133240]
[138.32672119 87.35224915]
[141.77062988 102.36159515]
[139.34109497 118.12366486]
[153.37431335 123.42168427]
[167.40753174 128.71969604]
[181.44073486 134.01771545]
[195.47395325 139.31571960]
[205.58033752 127.99206543]
[219.09661865 121.08739471]
[234.19483948 119.53551483]
[248.83306885 123.54631042]
[261.03161621 132.57734680]
[269.14074707 145.40725708]
[272.06375122 160.30090332]
[269.40530396 175.24403381]
[261.52496338 188.21571350]
[249.48844910 197.46162415]
[234.92362976 201.73135376]
[219.80027771 200.44744873]
[206.16368103 193.78352356]
[195.85809326 182.64085388]
[190.27725220 168.52636719]
[190.17593384 153.34893799]
[176.14271545 148.05091858]
[162.10951233 142.75291443]
[148.07629395 137.45489502]
[134.04309082 132.15687561]
[127.41793060 135.67216492]
[137.19322205 147.04949951]
[149.91949463 154.98941040]
[152.52497864 169.76138306]
[143.28305054 181.57608032]
[128.31831360 182.60389709]
[117.54785919 172.16371155]
[118.10846710 157.17582703]
[114.16761017 142.70275879]
[107.54245758 146.21804810]
[104.06212616 160.80870056]
[100.58179474 175.39936829]
[97.10146332 189.99002075]
[102.77871704 207.48258972]
[90.28480530 219.77542114]
[87.08982849 234.43121338]
[83.89484406 249.08699036]
[90.20398712 260.37460327]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[4 8]
[13 159]
[14 158]
[15 157]
[18 155]
[19 154]
[20 153]
[21 152]
[25 112]
[26 111]
[27 110]
[28 109]
[29 108]
[30 107]
[31 106]
[32 105]
[36 89]
[37 88]
[38 87]
[39 86]
[43 81]
[44 80]
[45 79]
[46 78]
[48 76]
[49 75]
[50 74]
[52 70]
[53 69]
[54 65]
[55 64]
[56 63]
[94 103]
[95 102]
[118 142]
[119 141]
[120 140]
[121 139]
[122 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
