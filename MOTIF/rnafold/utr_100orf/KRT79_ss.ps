%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:34:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCUCAUCCUGCCCUCCGGCCCCUCUGCAGCUAUGAGGUCCUCCGUCUCUCGGCAAACAUACUCCACAAAAGGGGGCUUCAGCUCCAACUCUGCCAGCGGAGGGAGUGGGUCCCAGGCCCGCACCAGCUUCA\
) } def
/len { sequence length } bind def

/coor [
[106.64479065 253.43038940]
[92.16471863 249.51535034]
[79.67378998 241.21012878]
[70.46164703 229.37220764]
[65.47941589 215.22380066]
[65.24148560 200.22569275]
[69.77242279 185.92637634]
[78.60748291 173.79916382]
[82.66156769 159.35740662]
[86.71565247 144.91564941]
[90.76973724 130.47389221]
[94.82382202 116.03213501]
[84.34227753 126.76233673]
[73.86074066 137.49253845]
[70.32876587 153.50682068]
[54.61448669 158.19654846]
[42.88340378 146.73731995]
[47.20345306 130.91741943]
[63.13053513 127.01100159]
[73.61207581 116.28079224]
[84.09362030 105.55059052]
[88.59488678 91.24189758]
[86.14422607 76.44344330]
[83.69356537 61.64499283]
[81.24290466 46.84653854]
[78.79224396 32.04808044]
[76.34158325 17.24962807]
[73.89092255 2.45117259]
[71.44026184 -12.34728241]
[66.93899536 -26.65597153]
[60.47603989 -40.19222641]
[54.01308060 -53.72848129]
[47.55012512 -67.26473236]
[42.20495605 -71.40845490]
[40.13779068 -76.82896423]
[41.11821365 -81.59035492]
[35.29683685 -95.41466522]
[29.47546005 -109.23897552]
[23.65408134 -123.06328583]
[17.83270454 -136.88760376]
[12.01132584 -150.71191406]
[6.18994808 -164.53622437]
[-0.08255484 -171.30769348]
[0.39835131 -178.75349426]
[-5.09734917 -192.71047974]
[-19.38716507 -192.55059814]
[-32.83992004 -197.28268433]
[-43.83649445 -206.31546021]
[-51.06084824 -218.54138184]
[-53.65748215 -232.47236633]
[-51.33272552 -246.42091370]
[-44.38778305 -258.70458984]
[-33.67987823 -267.84881592]
[-38.84688187 -281.93078613]
[-53.99285507 -284.47933960]
[-65.82515717 -294.27178955]
[-71.16095734 -308.67404175]
[-68.56494904 -323.81195068]
[-58.73545074 -335.61349487]
[-44.31654739 -340.90411377]
[-29.18684769 -338.26068115]
[-17.41616821 -328.39422607]
[-12.17076111 -313.95883179]
[-14.86161518 -298.83749390]
[-24.76490402 -287.09777832]
[-19.59790039 -273.01580811]
[-3.79890561 -272.62112427]
[10.68186951 -266.19564819]
[21.62851906 -254.69047546]
[27.35366058 -239.83644104]
[26.95849419 -223.88377380]
[20.47378159 -209.26118469]
[8.85963058 -198.20617676]
[14.35533047 -184.24919128]
[20.01425934 -170.35760498]
[25.83563614 -156.53329468]
[31.65701485 -142.70898438]
[37.47839355 -128.88467407]
[43.29977036 -115.06035614]
[49.12114716 -101.23604584]
[54.94252396 -87.41173553]
[61.08638000 -73.72769165]
[67.54933929 -60.19143677]
[74.01229095 -46.65518188]
[80.47525024 -33.11892700]
[83.42806244 -47.82541656]
[92.36094666 -59.87546539]
[105.57394409 -66.97592926]
[120.55261230 -67.77558136]
[134.44648743 -62.12224197]
[144.61154175 -51.09175491]
[149.11335754 -36.78323364]
[147.09521484 -21.91961670]
[138.94117737 -9.32947159]
[126.20298004 -1.40872133]
[111.30471039 0.33530286]
[97.08154297 -4.42928982]
[86.23871613 -14.79794216]
[88.68937683 0.00051219]
[91.14003754 14.79896736]
[93.59069824 29.59742165]
[96.04135895 44.39587784]
[98.49201965 59.19433212]
[100.94268036 73.99278259]
[103.39334106 88.79124451]
[116.12715149 89.39740753]
[126.71588135 103.04956055]
[138.38044739 112.48024750]
[150.04499817 121.91094208]
[161.70956421 131.34164429]
[173.37413025 140.77232361]
[185.03869629 150.20301819]
[196.70326233 159.63371277]
[212.82177734 164.89012146]
[212.23283386 181.83383179]
[195.78825378 185.95840454]
[187.27256775 171.29827881]
[175.60800171 161.86758423]
[163.94343567 152.43688965]
[152.27886963 143.00619507]
[140.61431885 133.57550049]
[128.94975281 124.14481354]
[117.28518677 114.71411896]
[123.00048828 128.58262634]
[128.71578979 142.45112610]
[134.43109131 156.31962585]
[140.14639282 170.18812561]
[150.33679199 181.19520569]
[156.51026917 194.86590576]
[158.02946472 209.78877258]
[154.73748779 224.42309570]
[146.97425842 237.25788879]
[135.54129028 246.96804810]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 21]
[13 20]
[14 19]
[22 105]
[23 104]
[24 103]
[25 102]
[26 101]
[27 100]
[28 99]
[29 98]
[30 85]
[31 84]
[32 83]
[33 82]
[36 81]
[37 80]
[38 79]
[39 78]
[40 77]
[41 76]
[42 75]
[44 74]
[45 73]
[53 66]
[54 65]
[107 123]
[108 122]
[109 121]
[110 120]
[111 119]
[112 118]
[113 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
