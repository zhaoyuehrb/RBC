%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:33:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACGCCGAUUUGCCCUUUUGAUUCUUCCACAAUCAGGGUGAGACUGCUCCCAGUGCCAUGAACGGAGACGACGCCUUUGCAAGGAGACCCAGGGAUGAUGCUCAAAUAUCAGAGAAGUUACGAAAGGCCUUCGAUGAUAUUGCCAAAUACUUCUCUA\
) } def
/len { sequence length } bind def

/coor [
[267.68630981 259.72061157]
[253.02375793 250.34042358]
[243.03897095 236.03994751]
[239.26977539 218.97486877]
[242.31454468 201.73019409]
[229.47488403 193.97500610]
[224.65812683 194.24572754]
[219.62963867 191.45669556]
[216.28973389 185.65124512]
[203.76647949 177.39486694]
[191.24320984 169.13847351]
[176.75012207 172.37664795]
[163.93214417 164.18190002]
[160.63391113 148.95825195]
[148.11064148 140.70185852]
[135.58738708 132.44548035]
[123.06412506 124.18909454]
[110.30522919 131.79415894]
[95.51100159 133.11970520]
[81.60337067 127.90394592]
[71.32917023 117.17700958]
[66.71760559 103.05753326]
[68.67948914 88.33416748]
[56.15622711 80.07778168]
[43.63296509 71.82139587]
[31.10970306 63.56501007]
[18.58644104 55.30862427]
[2.80608726 54.17240524]
[-3.56090069 40.70723724]
[-16.08416176 32.45085144]
[-15.97684860 47.45046616]
[-27.50857162 57.04314041]
[-42.23799515 54.20693970]
[-49.38304138 41.01799393]
[-43.71346664 27.13073540]
[-29.37941360 22.71078110]
[-41.02727127 13.25946331]
[-52.67512894 3.80814600]
[-64.32299042 -5.64317179]
[-75.97084808 -15.09448910]
[-87.61870575 -24.54580688]
[-99.24202728 -18.78414345]
[-112.13570404 -17.86852074]
[-124.36759949 -21.90049744]
[-134.11830139 -30.24289513]
[-139.95166016 -41.62020874]
[-141.02633667 -54.31354141]
[-137.21694946 -66.42026520]
[-148.48231506 -76.32437134]
[-159.74769592 -86.22847748]
[-171.01307678 -96.13258362]
[-177.49356079 -97.82412720]
[-181.50941467 -101.93962860]
[-182.51789856 -106.65740204]
[-193.38319397 -116.99883270]
[-208.90161133 -115.07195282]
[-221.99981689 -123.61426544]
[-226.49322510 -138.59236145]
[-220.26020813 -152.93403625]
[-206.24378967 -159.86758423]
[-191.06210327 -156.11920166]
[-181.88346863 -143.45875549]
[-183.04176331 -127.86413574]
[-172.17646790 -117.52270508]
[-161.10896301 -107.39795685]
[-149.84358215 -97.49385071]
[-138.57821655 -87.58974457]
[-127.31283569 -77.68563843]
[-111.26139832 -83.79148102]
[-94.23571777 -80.94361877]
[-80.90883636 -69.83290863]
[-74.98433685 -53.43049240]
[-78.16738129 -36.19366455]
[-66.51952362 -26.74234772]
[-54.87166977 -17.29102898]
[-43.22381210 -7.83971214]
[-31.57595253 1.61160576]
[-19.92809486 11.06292343]
[-7.82777596 19.92758751]
[4.69548559 28.18397522]
[19.58009148 28.72964287]
[26.84282684 42.78536224]
[39.36608887 51.04174805]
[51.88935089 59.29813385]
[64.41261292 67.55451965]
[76.93587494 75.81090546]
[89.69477081 68.20584869]
[104.48899841 66.88029480]
[118.39662933 72.09605408]
[128.67082214 82.82299042]
[133.28239441 96.94246674]
[131.32051086 111.66583252]
[143.84378052 119.92221832]
[156.36703491 128.17860413]
[168.89030457 136.43498230]
[184.18180847 133.46725464]
[196.76455688 142.01881409]
[199.49960327 156.61521912]
[212.02285767 164.87159729]
[224.54612732 173.12799072]
[237.23007202 181.13534546]
[250.06973267 188.89053345]
[259.78317261 180.50912476]
[271.45211792 175.22006226]
[284.12203979 173.44485474]
[296.75967407 175.31800842]
[308.33731079 180.67695618]
[317.91632080 189.07603455]
[324.72326660 199.82359314]
[328.21237183 212.03890991]
[328.10925293 224.72436523]
[324.43240356 236.84695435]
[336.79010010 245.34915161]
[349.14779663 253.85134888]
[361.50549316 262.35354614]
[373.86318970 270.85574341]
[386.22088623 279.35794067]
[398.57858276 287.86013794]
[410.93627930 296.36233521]
[421.11254883 289.80355835]
[432.87588501 287.09082031]
[444.82778931 288.52246094]
[455.55554199 293.90551758]
[463.79919434 302.58145142]
[468.59948730 313.50650024]
[469.40948486 325.37728882]
[466.15670776 336.78631592]
[477.98901367 346.00567627]
[489.82135010 355.22500610]
[503.23834229 348.02056885]
[518.42614746 346.90261841]
[532.75341797 352.06488037]
[543.73785400 362.61294556]
[549.47637939 376.71932983]
[548.97467041 391.93997192]
[542.31970215 405.63784790]
[530.66448975 415.43966675]
[516.02838135 419.64724731]
[500.94711304 417.53158569]
[488.03369141 409.45922852]
[479.52536011 396.82876587]
[476.89630127 381.82852173]
[480.60198975 367.05731201]
[468.76968384 357.83798218]
[456.93734741 348.61865234]
[440.54226685 356.19873047]
[422.47976685 354.44836426]
[407.70819092 343.76220703]
[400.32583618 326.99960327]
[402.43408203 308.72003174]
[390.07638550 300.21783447]
[377.71868896 291.71563721]
[365.36099243 283.21343994]
[353.00329590 274.71124268]
[340.64559937 266.20904541]
[328.28790283 257.70684814]
[315.93020630 249.20465088]
[301.72268677 259.07766724]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 102]
[6 101]
[9 100]
[10 99]
[11 98]
[14 95]
[15 94]
[16 93]
[17 92]
[23 86]
[24 85]
[25 84]
[26 83]
[27 82]
[29 80]
[30 79]
[36 78]
[37 77]
[38 76]
[39 75]
[40 74]
[41 73]
[48 68]
[49 67]
[50 66]
[51 65]
[54 64]
[55 63]
[112 157]
[113 156]
[114 155]
[115 154]
[116 153]
[117 152]
[118 151]
[119 150]
[127 145]
[128 144]
[129 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
