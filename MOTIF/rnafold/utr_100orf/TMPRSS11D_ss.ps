%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:05:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUGAGUGGGAAUCUCAAAGCAGUUGAGUAGGCAGAAAAAAGAACCUCUUCAUUAAGGAUUAAAAUGUAUAGGCCAGCACGUGUAACUUCGACUUCAAGAUUUCUGAAUCCAUAUGUAGUAUGUUUCAUUGUCGUCGCAGGGGUAGUGAUCCUGGCAGUCACCA\
) } def
/len { sequence length } bind def

/coor [
[86.82745361 193.63026428]
[68.73994446 189.23538208]
[62.67349243 202.95390320]
[56.60703659 216.67243958]
[50.54058456 230.39097595]
[44.47413254 244.10951233]
[38.40768051 257.82803345]
[45.46014786 271.78500366]
[41.84098053 286.99801636]
[29.25903511 296.28396606]
[13.65512562 295.25830078]
[2.39693832 284.40530396]
[0.80024630 268.84945679]
[9.61895847 255.93572998]
[24.68914795 251.76159668]
[30.75559998 238.04306030]
[36.82205200 224.32452393]
[42.88850403 210.60598755]
[48.95495605 196.88745117]
[55.02140808 183.16893005]
[42.84733963 175.32408142]
[32.01415634 165.71202087]
[22.77602959 154.55824280]
[15.34969616 142.12445068]
[9.90938854 128.70236206]
[6.58274651 114.60686493]
[-8.37429428 115.74129486]
[-23.33133507 116.87572479]
[-38.28837585 118.01015472]
[-51.46386337 126.76898956]
[-64.73984528 120.01639557]
[-79.69688416 121.15082550]
[-94.65393066 122.28525543]
[-100.16935730 136.51701355]
[-111.31938171 146.94004822]
[-125.89015198 151.48487854]
[-140.98863220 149.24909973]
[-153.61700439 140.67665100]
[-161.26789856 127.46959686]
[-162.42224121 112.25019073]
[-156.85079956 98.04026794]
[-145.65982056 87.66121674]
[-131.07127380 83.17380524]
[-115.98171234 85.46901703]
[-103.38719177 94.09112549]
[-95.78836060 107.32821655]
[-80.83132172 106.19378662]
[-65.87427521 105.05935669]
[-53.76861954 96.38166809]
[-39.42280579 103.05311584]
[-24.46576691 101.91868591]
[-9.50872517 100.78425598]
[5.44831514 99.64982605]
[6.28425837 87.44995880]
[8.68771839 75.46001434]
[12.61849499 63.88052750]
[18.01083946 52.90518951]
[24.77455902 42.71757126]
[32.79652023 33.48807526]
[41.94254684 25.37107849]
[52.05966187 18.50234604]
[62.97863770 12.99676704]
[74.51684570 8.94643021]
[86.48129272 6.41908169]
[98.67185211 5.45699501]
[110.88463593 6.07626247]
[122.91535187 8.26652622]
[134.56278992 11.99114990]
[145.63211060 17.18783569]
[155.93817139 23.76966286]
[165.30860901 31.62653923]
[173.58665466 40.62705231]
[180.63388062 50.62065125]
[186.33241272 61.44018555]
[200.47044373 56.42862320]
[214.60848999 51.41706085]
[228.74653625 46.40549850]
[242.88458252 41.39393616]
[256.87466431 35.98309708]
[270.70556641 30.17734337]
[284.53643799 24.37158966]
[284.72640991 10.21643162]
[290.28790283 -2.75461912]
[300.34835815 -12.59044838]
[313.36120605 -17.82532501]
[327.34356689 -17.69726181]
[340.17843628 -12.25875950]
[349.93524170 -2.36383605]
[363.87350464 -7.90681362]
[373.83770752 -20.19605637]
[388.52328491 -17.70954895]
[402.46157837 -23.25252533]
[416.39984131 -28.79550362]
[430.33810425 -34.33848190]
[436.65731812 -48.57593918]
[450.87167358 -53.99875259]
[464.40597534 -47.88660431]
[478.34423828 -53.42958069]
[492.28253174 -58.97256088]
[479.10937500 -66.14669037]
[474.69973755 -80.48387909]
[481.56433105 -93.82094574]
[495.79467773 -98.56411743]
[509.28836060 -92.01277924]
[514.36248779 -77.89707184]
[508.12786865 -64.25397491]
[522.60443115 -68.18193817]
[537.08099365 -72.10990906]
[551.55761719 -76.03787231]
[558.65753174 -86.84054565]
[570.82910156 -89.79737854]
[581.39373779 -83.84897614]
[595.94207764 -87.50228882]
[610.49035645 -91.15559387]
[625.03869629 -94.80889893]
[639.58703613 -98.46220398]
[653.47656250 -108.18415833]
[666.66357422 -97.52870178]
[660.07507324 -81.90731049]
[643.24029541 -83.91389465]
[628.69201660 -80.26058960]
[614.14367676 -76.60728455]
[599.59539795 -72.95397186]
[585.04705811 -69.30066681]
[573.14825439 -56.42718887]
[555.48553467 -61.56130600]
[541.00897217 -57.63333893]
[526.53240967 -53.70537186]
[512.05584717 -49.77740479]
[497.82550049 -45.03428650]
[483.88723755 -39.49131012]
[469.94894409 -33.94833374]
[464.30850220 -20.21076202]
[450.25207520 -14.39083862]
[435.88110352 -20.40020943]
[421.94281006 -14.85723209]
[408.00454712 -9.31425476]
[394.06628418 -3.77127767]
[385.09902954 8.12149334]
[369.41650391 6.03145742]
[355.47821045 11.57443523]
[354.66839600 27.51327896]
[346.97003174 41.55947876]
[333.87557983 50.88471603]
[317.96966553 53.58621597]
[302.41906738 49.07480240]
[290.34219360 38.20246887]
[276.51132202 44.00822449]
[262.68041992 49.81397629]
[261.01248169 52.96768570]
[257.71118164 55.45411682]
[253.11460876 56.50401306]
[247.89613342 55.53197861]
[233.75810242 60.54354095]
[219.62005615 65.55510712]
[205.48200989 70.56666565]
[191.34396362 75.57823181]
[194.35833740 93.94631958]
[193.71588135 112.54901886]
[189.44148254 130.66539001]
[181.70079041 147.59332275]
[170.79380798 162.67678833]
[157.14323425 175.33123779]
[141.27809143 185.06622314]
[123.81321716 191.50450134]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 20]
[3 19]
[4 18]
[5 17]
[6 16]
[7 15]
[26 53]
[27 52]
[28 51]
[29 50]
[31 48]
[32 47]
[33 46]
[74 157]
[75 156]
[76 155]
[77 154]
[78 153]
[79 149]
[80 148]
[81 147]
[88 141]
[89 140]
[91 138]
[92 137]
[93 136]
[94 135]
[97 132]
[98 131]
[99 130]
[106 129]
[107 128]
[108 127]
[109 126]
[112 124]
[113 123]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
