%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCUUGGGCGCCAGAGGCGGAGUCGGGGAGGAGGUGGCUCCAGAGAUGGCAGUGAGCGAGAGGAGGGGGCUCGGCCGCGGGAGCCCCGCGGAGUGGGGGCAGCGGCUACUUCUGGUGCUGCUGCUGGGUGGCUGCUCCGGGCGCA\
) } def
/len { sequence length } bind def

/coor [
[102.87896729 381.54864502]
[102.70830536 365.74526978]
[113.82186127 354.50851440]
[113.50131226 339.51193237]
[113.18076324 324.51538086]
[112.86022186 309.51879883]
[112.53967285 294.52221680]
[112.21912384 279.52563477]
[111.73834991 264.53335571]
[111.09740448 249.54705811]
[110.29636383 234.56846619]
[109.33531189 219.59927368]
[108.37425232 204.63009644]
[107.41320038 189.66091919]
[94.33241272 179.14157104]
[92.84351349 162.08377075]
[104.34765625 148.95028687]
[103.06693268 134.00506592]
[101.78621674 119.05984497]
[89.57603455 110.34712219]
[75.02677917 113.99668884]
[60.47753143 117.64624786]
[45.92827988 121.29580688]
[31.37902832 124.94536591]
[16.82977867 128.59492493]
[2.28052711 132.24449158]
[-2.55427885 146.89468384]
[-14.55643940 156.58755493]
[-29.89611053 158.23013306]
[-43.67845535 151.29829407]
[-51.50558090 138.00393677]
[-50.87987900 122.58927155]
[-42.00100708 109.97304535]
[-27.70218468 104.18105316]
[-12.54611015 107.06150055]
[-1.36903405 117.69524384]
[13.18021679 114.04567719]
[27.72946739 110.39611816]
[42.27871704 106.74655914]
[56.82796860 103.09699249]
[71.37722015 99.44743347]
[85.92646790 95.79787445]
[71.57654572 91.42984009]
[63.86013412 78.56683350]
[66.76123047 63.85005188]
[78.78199005 54.87780380]
[93.71607971 56.28247833]
[103.85298157 67.33884430]
[103.95827484 82.34038544]
[111.59665680 69.43088531]
[119.23503876 56.52138901]
[126.87342072 43.61189270]
[134.51179504 30.70239258]
[142.15017700 17.79289436]
[142.60997009 11.08234692]
[145.93000793 6.36015177]
[150.40086365 4.50493193]
[158.58389282 -8.06639004]
[159.62782288 -23.85311699]
[173.05554199 -30.29872513]
[181.23855591 -42.87004852]
[189.42158508 -55.44136810]
[197.60459900 -68.01268768]
[205.78762817 -80.58401489]
[213.83586121 -93.24205780]
[221.74836731 -105.98537445]
[214.40383911 -122.49851227]
[218.35371399 -139.97416687]
[231.84861755 -151.52015686]
[249.41299438 -152.69767761]
[256.77374268 -165.76745605]
[264.13452148 -178.83724976]
[271.49526978 -191.90702820]
[265.01803589 -210.85577393]
[274.32034302 -228.24719238]
[293.09283447 -233.22274780]
[299.60107422 -246.73727417]
[306.10934448 -260.25180054]
[312.61758423 -273.76635742]
[319.12585449 -287.28088379]
[325.63409424 -300.79541016]
[332.14236450 -314.30993652]
[333.56713867 -331.20391846]
[350.19531250 -334.51153564]
[357.97680664 -319.44885254]
[345.65689087 -307.80169678]
[339.14862061 -294.28717041]
[332.64038086 -280.77261353]
[326.13211060 -267.25808716]
[319.62387085 -253.74356079]
[313.11560059 -240.22901917]
[306.60736084 -226.71449280]
[312.54397583 -218.19180298]
[314.38473511 -207.88726807]
[311.72515869 -197.67922974]
[304.98739624 -189.45736694]
[295.35494995 -184.77293396]
[284.56506348 -184.54626465]
[277.20428467 -171.47648621]
[269.84353638 -158.40669250]
[262.48275757 -145.33691406]
[269.15377808 -135.09938049]
[270.82125854 -122.92131805]
[267.10415649 -111.12915802]
[258.65612793 -102.00232697]
[247.05137634 -97.33266449]
[234.49168396 -98.07286835]
[226.57917786 -85.32954407]
[225.71678162 -77.93552399]
[218.35894775 -72.40098572]
[210.17593384 -59.82966614]
[201.99290466 -47.25834656]
[193.80987549 -34.68702316]
[185.62686157 -22.11570168]
[185.16822815 -7.22815895]
[171.15521240 0.11663387]
[162.97218323 12.68795586]
[155.05967712 25.43127632]
[147.42129517 38.34077454]
[139.78291321 51.25027084]
[132.14453125 64.15976715]
[124.50615692 77.06926727]
[116.86777496 89.97876740]
[116.73143768 117.77912140]
[118.01216125 132.72434998]
[119.29288483 147.66957092]
[130.55636597 155.13224792]
[135.37350464 167.54678345]
[132.18606567 180.27507019]
[122.38238525 188.69985962]
[123.34343719 203.66905212]
[124.30448914 218.63822937]
[125.26554108 233.60740662]
[128.96066284 242.04035950]
[126.08370972 248.90611267]
[126.72465515 263.89239502]
[130.23870850 272.40240479]
[127.21569824 279.20510864]
[127.53624725 294.20169067]
[127.85679626 309.19824219]
[128.17733765 324.19482422]
[128.49787903 339.19140625]
[128.81843567 354.18798828]
[140.40197754 364.93957520]
[140.90673828 380.73580933]
[130.03326416 392.20504761]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 143]
[4 142]
[5 141]
[6 140]
[7 139]
[8 138]
[9 136]
[10 135]
[11 133]
[12 132]
[13 131]
[14 130]
[17 126]
[18 125]
[19 124]
[20 42]
[21 41]
[22 40]
[23 39]
[24 38]
[25 37]
[26 36]
[49 123]
[50 122]
[51 121]
[52 120]
[53 119]
[54 118]
[57 117]
[58 116]
[60 114]
[61 113]
[62 112]
[63 111]
[64 110]
[65 108]
[66 107]
[70 101]
[71 100]
[72 99]
[73 98]
[76 92]
[77 91]
[78 90]
[79 89]
[80 88]
[81 87]
[82 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
