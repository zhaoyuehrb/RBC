%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:49:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUGUCUCUGAGCCAUGGAGCCCACUGUGGCUGACGUACACCUCGUGCCCAGGACAACCAAGGAAGUCCCCGCUCUGGAUGCCGCGUGCUGUCGAGCGGCCAGCAUUGGCGUGG\
) } def
/len { sequence length } bind def

/coor [
[144.41755676 130.40080261]
[130.97946167 123.73612976]
[117.54138184 117.07145691]
[89.37758636 131.22772217]
[58.78648376 104.80478668]
[45.34840012 111.46945953]
[31.91031837 118.13414001]
[29.49696732 122.11054230]
[26.23178482 124.76391602]
[22.66574287 125.98847198]
[19.32399559 125.87911224]
[16.63914299 124.70331573]
[2.55925512 129.87600708]
[-11.52063274 135.04870605]
[-25.60051918 140.22140503]
[-39.68040848 145.39408875]
[-53.76029587 150.56678772]
[-67.84017944 155.73948669]
[-81.92006683 160.91218567]
[-88.32781219 175.35919189]
[-103.10420227 180.96578979]
[-117.48267365 174.40565491]
[-122.93272400 159.57081604]
[-116.22093964 145.26251221]
[-101.32930756 139.96960449]
[-87.09276581 146.83229065]
[-73.01287842 141.65959167]
[-58.93299103 136.48690796]
[-44.85310364 131.31420898]
[-30.77321434 126.14151764]
[-16.69332695 120.96881866]
[-2.61343956 115.79612732]
[11.46644783 110.62342834]
[25.24564171 104.69605255]
[38.68372726 98.03137970]
[52.12181091 91.36669922]
[54.34787750 76.53279877]
[43.45794678 66.21730804]
[32.56801605 55.90181732]
[21.67808151 45.58632660]
[5.66651678 44.58166885]
[-3.41263151 31.35485458]
[1.40538275 16.05236244]
[16.42459106 10.41295338]
[30.12354279 18.76270103]
[31.99357414 34.69639206]
[42.88350677 45.01188278]
[53.77343750 55.32737732]
[64.66336823 65.64286804]
[71.80254364 63.34456635]
[74.96063995 48.68078613]
[86.08089447 58.74796677]
[93.22006989 56.44966507]
[96.04674530 41.71840668]
[98.87342834 26.98715401]
[101.70011139 12.25589848]
[90.03204346 2.26831174]
[84.93613434 -12.22055531]
[87.78314972 -27.31327057]
[97.80726624 -38.94997025]
[112.31203461 -44.00043869]
[127.39575195 -41.10612869]
[139.00097656 -31.04559135]
[144.00595093 -16.52506256]
[141.06437683 -1.45049155]
[130.96751404 10.12313843]
[116.43136597 15.08257771]
[113.60468292 29.81383324]
[110.77800751 44.54508972]
[107.95132446 59.27634430]
[126.95090485 80.98277283]
[124.20606232 103.63336945]
[137.64414978 110.29804230]
[151.08222961 116.96272278]
[161.43101501 109.68356323]
[173.83035278 107.56090546]
[185.87117004 110.94389343]
[195.24110413 119.11806488]
[200.16860962 130.45518494]
[199.75765991 142.73728943]
[212.81523132 150.11970520]
[225.87278748 157.50213623]
[238.93034363 164.88455200]
[251.98789978 172.26698303]
[265.04544067 179.64939880]
[274.18841553 181.18521118]
[278.35272217 187.41265869]
[291.20559692 195.14596558]
[304.05844116 202.87928772]
[316.91131592 210.61259460]
[329.76416016 218.34590149]
[342.61703491 226.07920837]
[355.57342529 233.63775635]
[368.63098145 241.02018738]
[385.01565552 240.33116150]
[393.57504272 254.31932068]
[385.50402832 268.59484863]
[369.10534668 268.47229004]
[361.24853516 254.07774353]
[348.19097900 246.69532776]
[340.72045898 246.13517761]
[334.88372803 238.93206787]
[322.03085327 231.19876099]
[309.17800903 223.46543884]
[296.32513428 215.73213196]
[283.47229004 207.99882507]
[270.61941528 200.26551819]
[257.66302490 192.70697021]
[244.60546875 185.32453918]
[231.54791260 177.94210815]
[218.49035645 170.55969238]
[205.43280029 163.17726135]
[192.37524414 155.79484558]
[176.78979492 163.87098694]
[159.30683899 161.04954529]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 74]
[2 73]
[3 72]
[5 36]
[6 35]
[7 34]
[12 33]
[13 32]
[14 31]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[37 49]
[38 48]
[39 47]
[40 46]
[53 70]
[54 69]
[55 68]
[56 67]
[80 113]
[81 112]
[82 111]
[83 110]
[84 109]
[85 108]
[87 107]
[88 106]
[89 105]
[90 104]
[91 103]
[92 102]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
