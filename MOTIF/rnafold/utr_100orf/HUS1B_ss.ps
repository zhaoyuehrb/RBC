%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:12:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCCUUCCCUGUGGCAUCAUGAAGUUUCGCGCCAAGAUCACCGGCAAAGGCUGUCUAGAGCUGUUCAUUCACGUCAGCGGCACCGUCGCGAGGCUAGCGAAGGUCUGCGUGCUCCGCG\
) } def
/len { sequence length } bind def

/coor [
[-4.48749208 249.04721069]
[-22.69597816 261.54629517]
[-44.65271759 260.96337891]
[-52.43200684 273.78845215]
[-60.21129227 286.61352539]
[-67.99057770 299.43862915]
[-61.86342239 313.69476318]
[-65.31882477 328.82220459]
[-77.02812195 339.00415039]
[-92.48883820 340.32543945]
[-105.75602722 332.27798462]
[-111.72817230 317.95620728]
[-108.10886383 302.86712646]
[-96.28980255 292.81280518]
[-80.81565857 291.65933228]
[-73.03636932 278.83425903]
[-65.25708771 266.00915527]
[-57.47779846 253.18408203]
[-63.02795792 246.56703186]
[-66.82220459 238.79087830]
[-68.62888336 230.31289673]
[-68.33345795 221.63365173]
[-65.94573975 213.26753235]
[-61.59977722 205.71221924]
[-55.54633331 199.41906738]
[-48.13845062 194.76618958]
[-39.81083679 192.03570557]
[-31.05438423 191.39665222]
[-22.38722038 192.89457703]
[-14.32404995 196.44828796]
[-4.06720448 185.50309753]
[6.18964052 174.55792236]
[16.44648552 163.61273193]
[16.41934013 160.69369507]
[17.61854172 157.58969116]
[20.12011147 154.79571533]
[23.80915260 152.82435608]
[28.37987900 152.13526917]
[39.71612167 142.31234741]
[44.26789856 128.13031006]
[59.76422882 124.94057465]
[71.10047150 115.11766052]
[82.43671417 105.29475403]
[84.57143402 90.44743347]
[76.46182251 77.82862854]
[68.35221100 65.20982361]
[60.24259949 52.59102249]
[45.42645264 45.56152344]
[44.37598419 29.19605446]
[58.17182541 20.33000755]
[72.62199402 28.08400917]
[72.86140442 44.48140717]
[80.97101593 57.10021210]
[89.08062744 69.71901703]
[97.19023895 82.33781433]
[104.66750336 81.75422668]
[103.50057220 66.79969025]
[118.45513153 65.63300323]
[119.62202454 80.58705139]
[127.09928131 80.00345612]
[133.15286255 66.27923584]
[127.67791748 51.69627380]
[134.01261902 37.86419678]
[147.94897461 32.73455429]
[154.00256348 19.01033211]
[148.05480957 4.36793470]
[154.27973938 -10.15879345]
[168.98419189 -15.95140266]
[183.44430542 -9.57323837]
[189.08111572 5.19164562]
[182.55043030 19.58350563]
[167.72677612 25.06390762]
[161.67320251 38.78812790]
[167.28172302 52.53876877]
[161.33804321 66.54331207]
[146.87707520 72.33280945]
[140.82350159 86.05702972]
[125.58081818 93.09938812]
[109.65935516 98.06356049]
[124.37586212 100.96603394]
[139.09237671 103.86851501]
[153.80888367 106.77098846]
[162.95841980 105.35482788]
[168.86753845 109.94458008]
[183.50373840 113.22812653]
[198.13993835 116.51167297]
[213.29913330 111.98293304]
[224.02400208 122.31861877]
[238.66020203 125.60217285]
[253.29640198 128.88572693]
[267.93258667 132.16926575]
[280.25210571 122.53787231]
[295.87844849 123.13028717]
[307.43338013 133.66677856]
[309.46099854 149.17236328]
[301.00390625 162.32574463]
[286.05529785 166.91633606]
[271.67346191 160.77656555]
[264.64904785 146.80546570]
[250.01284790 143.52192688]
[235.37664795 140.23837280]
[220.74044800 136.95481873]
[206.62814331 141.71842957]
[194.85638428 131.14787292]
[180.22019958 127.86432648]
[165.58399963 124.58077240]
[150.90640259 121.48750305]
[136.18989563 118.58502197]
[121.47338867 115.68254852]
[106.75688171 112.78006744]
[92.25962830 116.63099670]
[80.92337799 126.45390320]
[69.58713531 136.27680969]
[64.22451782 151.16146851]
[49.53903198 153.64860535]
[38.20278931 163.47151184]
[27.39167213 173.86956787]
[17.13482857 184.81475830]
[6.87798309 195.75994873]
[-3.37886214 206.70513916]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 18]
[4 17]
[5 16]
[6 15]
[30 120]
[31 119]
[32 118]
[33 117]
[38 116]
[39 115]
[41 113]
[42 112]
[43 111]
[44 55]
[45 54]
[46 53]
[47 52]
[60 77]
[61 76]
[64 73]
[65 72]
[79 110]
[80 109]
[81 108]
[82 107]
[84 106]
[85 105]
[86 104]
[88 102]
[89 101]
[90 100]
[91 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
