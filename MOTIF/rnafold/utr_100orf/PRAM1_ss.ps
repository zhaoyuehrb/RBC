%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:49:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGAGCAGAAGCCACAGUCACUUCCUGAAGGCAGCGGCCCCAGCUCGGGUCCCACUCAUCCCAUGGCCCAUCACCUGCCUGCAGCCAUGGAGAGCCAUCAGGACUUCCGGAGCAUCAAAGCAAAGUUCCAGGCCUCUCAGCCGGAGCCCAGCGACCUGCCCA\
) } def
/len { sequence length } bind def

/coor [
[92.87264252 144.54997253]
[88.07373047 158.76159668]
[83.27481842 172.97323608]
[78.47590637 187.18486023]
[87.56124115 199.76406860]
[87.48389435 215.28094482]
[78.27361298 227.76895142]
[63.47192764 232.42617798]
[48.77039719 227.46185303]
[39.82205963 214.78482056]
[40.06772995 199.26969910]
[49.41294479 186.88233948]
[64.26427460 182.38595581]
[69.06318665 168.17431641]
[73.86209869 153.96269226]
[78.66101074 139.75105286]
[70.36289978 134.01678467]
[63.54614258 126.58223724]
[58.55146408 117.81903076]
[55.62851334 108.16516876]
[54.92338943 98.10319519]
[56.47133255 88.13602448]
[60.19497681 78.76184845]
[65.90820312 70.44922638]
[56.36456299 58.87689209]
[46.82092667 47.30455399]
[37.27729034 35.73221588]
[27.73365402 24.15987778]
[18.19001770 12.58754063]
[3.44051838 6.86365604]
[1.31213117 -7.87809563]
[-8.23150539 -19.45043373]
[-17.77514267 -31.02277184]
[-21.82313347 -24.03437805]
[-28.88351059 -18.31880569]
[-38.50305939 -14.88931942]
[-49.92586899 -14.59879780]
[-64.79121399 -16.60416222]
[-79.65656281 -18.60952377]
[-94.52190399 -20.61488724]
[-109.38725281 -22.62025070]
[-121.80277252 -12.84116745]
[-137.48664856 -14.78834629]
[-147.13392639 -27.30656052]
[-145.02102661 -42.96897507]
[-132.40151978 -52.48336029]
[-116.76232147 -50.20499420]
[-107.38188934 -37.48559570]
[-92.51654053 -35.48023224]
[-77.65119934 -33.47487259]
[-62.78585052 -31.46950722]
[-47.92050552 -29.46414375]
[-42.77175903 -34.91762161]
[-54.85590363 -43.80431747]
[-67.65785217 -51.62161636]
[-65.21514130 -66.42138672]
[-50.58012390 -69.71018982]
[-42.04036331 -57.37834930]
[-32.47426224 -45.82457352]
[-27.32551575 -51.27804947]
[-30.18138313 -66.00367737]
[-33.17815781 -80.70127106]
[-36.31557083 -95.36949158]
[-39.45298004 -110.03771210]
[-42.59038925 -124.70592499]
[-45.72779846 -139.37414551]
[-48.86521149 -154.04237366]
[-52.00262070 -168.71058655]
[-67.01954651 -170.77645874]
[-80.42282104 -177.85656738]
[-90.59393311 -189.09597778]
[-96.30467987 -203.13745117]
[-96.86544800 -218.28543091]
[-92.20853424 -232.71072388]
[-82.89627838 -244.67140198]
[-70.05317688 -252.72314453]
[-55.23010254 -255.89367676]
[-40.21701431 -253.80014038]
[-26.82680893 -246.69532776]
[-16.67642403 -235.43721008]
[-10.99156666 -221.38522339]
[-10.45871162 -206.23623657]
[-15.14220238 -191.81954956]
[-24.47648621 -179.87605286]
[-37.33440018 -171.84799194]
[-34.19699097 -157.17977905]
[-31.05957985 -142.51155090]
[-27.92217064 -127.84333801]
[-24.78475952 -113.17511749]
[-21.64735031 -98.50689697]
[-18.50993919 -83.83867645]
[-14.01480484 -77.92794037]
[-15.45575809 -68.85954285]
[-12.59989166 -54.13391495]
[-6.20280457 -40.56640625]
[3.34083223 -28.99407005]
[12.88446903 -17.42173195]
[26.95134354 -12.52557850]
[29.76235390 3.04390407]
[39.30599213 14.61624146]
[48.84962845 26.18857956]
[58.39326477 37.76091766]
[67.93690491 49.33325577]
[77.48053741 60.90559387]
[94.66478729 55.20006180]
[112.70835876 56.71031952]
[128.70503235 65.19310760]
[140.07827759 79.28212738]
[144.99624634 96.70811462]
[142.66680908 114.66431427]
[155.84449768 121.83011627]
[164.92504883 123.19243622]
[169.20404053 129.26147461]
[182.24205017 136.67837524]
[195.28005981 144.09527588]
[206.98927307 136.39682007]
[220.80854797 134.51350403]
[234.02464294 138.75738525]
[244.06756592 148.24317932]
[249.01039124 161.07215881]
[247.93875122 174.71211243]
[260.83230591 182.37738037]
[275.03552246 176.41293335]
[289.85415649 179.91450500]
[299.65359497 191.33534241]
[300.83474731 206.15905762]
[313.72830200 213.82434082]
[326.62185669 221.48962402]
[339.51538086 229.15490723]
[352.40893555 236.82019043]
[361.43063354 238.52932739]
[365.47402954 244.75779724]
[378.21838379 252.66865540]
[390.96273804 260.57949829]
[406.29226685 256.73483276]
[419.80734253 264.92742920]
[423.48968506 280.29675293]
[415.15466309 293.72445679]
[399.74728394 297.24411011]
[386.40847778 288.76757812]
[383.05187988 273.32385254]
[370.30755615 265.41299438]
[357.56320190 257.50213623]
[344.74365234 249.71372986]
[331.85012817 242.04844666]
[318.95657349 234.38316345]
[306.06301880 226.71789551]
[293.16949463 219.05261230]
[279.58239746 225.09651184]
[264.86767578 221.94355774]
[254.71232605 210.59797668]
[253.16700745 195.27093506]
[240.27346802 187.60565186]
[226.39710999 195.84375000]
[210.16636658 195.97401428]
[195.99685669 187.86660767]
[187.79092407 173.64558411]
[187.86315918 157.13328552]
[174.82514954 149.71638489]
[161.78713989 142.29948425]
[148.67869568 135.00779724]
[135.50100708 127.84200287]
[123.61788177 138.44079590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[24 104]
[25 103]
[26 102]
[27 101]
[28 100]
[29 99]
[31 97]
[32 96]
[33 95]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[60 94]
[61 93]
[62 91]
[63 90]
[64 89]
[65 88]
[66 87]
[67 86]
[68 85]
[110 162]
[111 161]
[113 160]
[114 159]
[115 158]
[121 153]
[122 152]
[126 148]
[127 147]
[128 146]
[129 145]
[130 144]
[132 143]
[133 142]
[134 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
