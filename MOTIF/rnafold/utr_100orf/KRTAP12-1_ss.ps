%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUGCCCUCUGCCUCGACCUUAUCCAGCCACACGCCACCAUGUGCCACACCAGCUGCUCCUCGGGCUGCCAGCCAGCCUGCUGCGCGCCCAGCCCCUGCCAGGCAUCCUGUUACAUCCCCGUGGGCUGCCAGUCCUCCG\
) } def
/len { sequence length } bind def

/coor [
[28.14679527 583.62194824]
[17.66018486 594.47064209]
[4.72255945 602.23468018]
[-9.78397465 606.38470459]
[-24.87033844 606.63781738]
[-39.50791550 602.97668457]
[-52.69869614 595.65100098]
[-63.54330826 585.16021729]
[-71.30234528 572.21960449]
[-75.44679260 557.71148682]
[-75.69406128 542.62500000]
[-72.02730560 527.98883057]
[-64.69651794 514.80090332]
[-54.20153427 503.96032715]
[-41.25791550 496.20629883]
[-26.74818230 492.06744385]
[-11.66162777 491.82598877]
[-8.02199078 477.27426147]
[-4.38235378 462.72253418]
[-13.13076019 455.58425903]
[-18.57453156 445.63327026]
[-19.87924576 434.31390381]
[-16.81450653 423.28591919]
[-9.79349041 414.18112183]
[0.18231124 408.36175537]
[11.66580677 406.71694946]
[16.26926422 392.44082642]
[20.87272263 378.16467285]
[25.47618103 363.88854980]
[30.07963943 349.61239624]
[29.13105583 342.22134399]
[34.94795227 335.07150269]
[39.86832809 320.90145874]
[44.78870010 306.73144531]
[49.70907211 292.56140137]
[38.04803085 274.04254150]
[43.71139145 252.62507629]
[63.47647095 242.03640747]
[66.46425629 227.33697510]
[56.28018188 216.50080872]
[54.40754318 201.56906128]
[61.77244568 188.24195862]
[75.73393250 181.73173523]
[78.72172546 167.03230286]
[81.70951080 152.33288574]
[84.69730377 137.63345337]
[87.68509674 122.93402863]
[77.97451782 113.87460327]
[73.99659729 101.20398712]
[76.78667450 88.22000122]
[85.61857605 78.30204773]
[98.19358063 74.03149414]
[101.50811768 59.40227890]
[104.82265472 44.77306747]
[96.65748596 31.50778389]
[100.22729492 16.71889877]
[112.92403412 9.01640511]
[116.23857117 -5.61280727]
[119.55310059 -20.24201965]
[118.04399872 -24.51079369]
[118.02565765 -28.61330032]
[119.25194550 -32.08751678]
[121.34845734 -34.60420990]
[123.86911011 -35.99797821]
[128.47256470 -50.27412033]
[133.07601929 -64.55026245]
[137.67947388 -78.82640076]
[137.34019470 -88.03733063]
[142.54779053 -93.36728668]
[147.46817017 -107.53732300]
[152.23037720 -121.76129150]
[156.83383179 -136.03742981]
[161.43730164 -150.31356812]
[166.04075623 -164.58970642]
[158.61224365 -178.53936768]
[163.30323792 -193.63142395]
[177.33064270 -200.91203308]
[192.37226868 -196.06173706]
[199.50416565 -181.95812988]
[194.49511719 -166.96864319]
[180.31689453 -159.98625183]
[175.71343994 -145.71011353]
[171.10997009 -131.43397522]
[166.50651550 -117.15783691]
[167.45510864 -109.76678467]
[161.63819885 -102.61695099]
[156.71783447 -88.44691467]
[151.95562744 -74.22293854]
[147.35215759 -59.94680023]
[142.74870300 -45.67066193]
[138.14524841 -31.39452171]
[134.18231201 -16.92748260]
[130.86778259 -2.29827118]
[127.55324554 12.33094120]
[135.69020081 24.75372124]
[132.53720093 39.63703918]
[119.45186615 48.08760071]
[116.13732910 62.71681595]
[112.82279968 77.34602356]
[123.74724579 89.33721924]
[125.45029449 105.46892548]
[117.27062225 119.47696686]
[102.38452148 125.92182159]
[99.39672852 140.62124634]
[96.40893555 155.32066345]
[93.42115021 170.02009583]
[90.43335724 184.71952820]
[100.74547577 196.16357422]
[102.32321930 211.30834961]
[94.76998138 224.32420349]
[81.16368103 230.32476807]
[78.17589569 245.02420044]
[85.04616547 250.07072449]
[90.07621002 256.91094971]
[92.82350159 264.90884399]
[93.05661011 273.32827759]
[90.77453613 281.40054321]
[86.20498657 288.39483643]
[79.78179932 293.68417358]
[72.10382080 296.80169678]
[63.87910843 297.48178101]
[58.95873642 311.65182495]
[54.03836441 325.82183838]
[49.11798859 339.99188232]
[44.35577774 354.21585083]
[39.75231934 368.49200439]
[35.14886475 382.76812744]
[30.54540443 397.04428101]
[25.94194603 411.32040405]
[37.86864853 426.17901611]
[38.52266693 445.07235718]
[27.82146072 460.47610474]
[10.16938305 466.36215210]
[6.52974606 480.91390991]
[2.89010930 495.46563721]
[16.08654213 502.78112793]
[26.93925095 513.26354980]
[34.70828247 526.19818115]
[38.86392593 540.70312500]
[39.12284851 555.78936768]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 135]
[18 134]
[19 133]
[26 129]
[27 128]
[28 127]
[29 126]
[30 125]
[32 124]
[33 123]
[34 122]
[35 121]
[38 112]
[39 111]
[43 107]
[44 106]
[45 105]
[46 104]
[47 103]
[52 99]
[53 98]
[54 97]
[57 94]
[58 93]
[59 92]
[64 91]
[65 90]
[66 89]
[67 88]
[69 87]
[70 86]
[71 84]
[72 83]
[73 82]
[74 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
