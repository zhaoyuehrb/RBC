%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:16:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUGGGUCGGGUGCAGACUGCGGAGCGGGCCCUACCGUGUGCGCAGAAAGAGGAGGCGCUUGCCUUCAGCUUGUGGGAAAUCCCGAAGAUGGCCAAAGACAACUCAACUGUUCGUUGCUUCCAGGGCCUGCUGAUUUUUGGAAAUGUGAUUAUUGGUUGUUGCGGCAUUGCCCUGACUGCGGAGUGCA\
) } def
/len { sequence length } bind def

/coor [
[98.30306244 339.36849976]
[110.14801788 329.34469604]
[108.90933228 314.39593506]
[97.41291046 304.99551392]
[95.94374847 289.85296631]
[105.88172913 277.85821533]
[104.64303589 262.90945435]
[103.40435028 247.96067810]
[102.16565704 233.01191711]
[100.92696381 218.06314087]
[99.68827820 203.11437988]
[98.44958496 188.16560364]
[94.75735474 181.74768066]
[97.31608582 172.95977783]
[96.32472992 157.99256897]
[95.33336639 143.02537537]
[82.32191467 142.59782410]
[69.26189423 138.11233521]
[57.44179153 129.54037476]
[44.13344955 136.46049500]
[30.82510567 143.38059998]
[17.51676369 150.30072021]
[4.20842123 157.22084045]
[-0.74598068 173.98904419]
[-15.99057674 181.83958435]
[-31.88005829 176.35408020]
[-45.07216644 183.49328613]
[-58.26427078 190.63249207]
[-71.45637512 197.77171326]
[-75.72513580 212.98858643]
[-89.54428864 220.65713501]
[-104.71517944 216.22772217]
[-112.23719025 202.32827759]
[-107.64764404 187.20506287]
[-93.66943359 179.83041382]
[-78.59558868 184.57960510]
[-65.40348053 177.44039917]
[-52.21137619 170.30117798]
[-39.01927185 163.16197205]
[-37.10267258 150.40951538]
[-28.05194855 140.95211792]
[-15.01384640 138.40234375]
[-2.71169615 143.91250610]
[10.59664631 136.99238586]
[23.90498924 130.07226562]
[37.21332932 123.15214539]
[50.52167130 116.23203278]
[50.33567810 108.73433685]
[36.18910599 113.72177887]
[27.07438850 101.80867767]
[35.58797073 89.45882416]
[49.96368408 93.73895264]
[49.77768707 86.24125671]
[36.14258957 79.98953247]
[22.50749207 73.73780060]
[8.87239361 67.48607635]
[-4.76270437 61.23434448]
[-18.39780235 54.98261642]
[-34.66550446 57.05479050]
[-44.37720490 43.84059525]
[-37.54233551 28.93366432]
[-21.19202805 27.66896820]
[-12.14607430 41.34751892]
[1.48902369 47.59924698]
[15.12412167 53.85097504]
[28.75922012 60.10270309]
[42.39431763 66.35443115]
[56.02941513 72.60615540]
[61.67142105 69.53195953]
[67.41103363 67.36491394]
[73.11769867 66.08390045]
[65.97848511 52.89179611]
[58.83927536 39.69968796]
[51.99011612 33.62817001]
[51.69313431 26.22991753]
[44.77301788 12.92157555]
[37.85290146 -0.38676676]
[30.93278313 -13.69510937]
[16.82252502 -22.05170250]
[17.27495575 -38.44460678]
[31.82465363 -46.01020813]
[45.50413513 -36.96566391]
[44.24112701 -20.61522675]
[51.16124344 -7.30688429]
[58.08135986 6.00145817]
[65.00148010 19.30980110]
[72.03137970 32.56047821]
[79.17059326 45.75258255]
[86.30980682 58.94469070]
[100.19110870 56.72271347]
[114.05224609 59.06719971]
[126.43064880 65.73075867]
[136.02018738 76.01028442]
[149.75677490 69.98485565]
[163.49337769 63.95942307]
[166.91726685 50.92171860]
[177.08041382 42.36578751]
[190.12297058 41.24784470]
[201.25761414 47.75308990]
[215.09194946 41.95560074]
[228.92630005 36.15811539]
[242.76065063 30.36062813]
[256.59500122 24.56313896]
[270.42935181 18.76565170]
[277.14938354 12.55152512]
[284.54067993 12.98877048]
[298.46899414 7.42081213]
[312.39727783 1.85285330]
[319.21917725 -4.24931574]
[326.60220337 -3.68992257]
[340.62066650 -9.02683067]
[350.76495361 -21.16785240]
[365.41229248 -18.46513176]
[379.43075562 -23.80204010]
[393.44921875 -29.13894653]
[396.05715942 -42.68405151]
[404.95046997 -53.08619690]
[417.72177124 -57.69442368]
[430.99462891 -55.40422058]
[441.31579590 -46.92008209]
[455.42059326 -52.02447891]
[469.52539062 -57.12887573]
[483.63015747 -62.23327637]
[497.73495483 -67.33766937]
[511.83975220 -72.44207001]
[525.94451904 -77.54647064]
[540.04931641 -82.65086365]
[543.37542725 -97.71540833]
[554.33416748 -108.57405853]
[569.42858887 -111.76185608]
[583.84216309 -106.26158142]
[592.97552490 -93.82836151]
[593.91430664 -78.42958832]
[586.35888672 -64.97895050]
[572.72021484 -57.76850510]
[557.35034180 -59.09907150]
[545.15374756 -68.54607391]
[531.04895020 -63.44167709]
[516.94415283 -58.33728027]
[502.83935547 -53.23287964]
[488.73455811 -48.12848282]
[474.62979126 -43.02408600]
[460.52499390 -37.91968918]
[446.42019653 -32.81529236]
[442.37969971 -16.91303444]
[429.53222656 -6.44271755]
[412.80993652 -5.67913151]
[398.78613281 -15.12048054]
[384.76766968 -9.78357220]
[370.74920654 -4.44666481]
[361.60760498 7.31262589]
[345.95758057 4.99163675]
[331.93911743 10.32854462]
[317.96524048 15.78116417]
[304.03692627 21.34912300]
[290.10864258 26.91708183]
[276.22683716 32.59999847]
[262.39248657 38.39748764]
[248.55813599 44.19497299]
[234.72378540 49.99246216]
[220.88943481 55.78994751]
[207.05509949 61.58743668]
[201.36212158 77.40377045]
[185.68647766 84.35377502]
[169.51881409 77.69602203]
[155.78221130 83.72145081]
[142.04560852 89.74688721]
[141.54368591 112.12771606]
[129.92579651 131.26350403]
[110.30057526 142.03401184]
[111.29193115 157.00122070]
[112.28328705 171.96841431]
[113.39835358 186.92691040]
[114.63704681 201.87568665]
[115.87573242 216.82444763]
[117.11442566 231.77322388]
[118.35311127 246.72198486]
[119.59180450 261.67074585]
[120.83049774 276.61950684]
[132.60720825 286.81494141]
[133.65046692 301.99276733]
[123.85809326 313.15722656]
[125.09678650 328.10601807]
[138.43005371 336.04348755]
[144.52041626 350.31536865]
[141.02600098 365.43386841]
[129.29048157 375.58557129]
[113.82640076 376.86697388]
[100.58002472 368.78530884]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 183]
[3 182]
[6 179]
[7 178]
[8 177]
[9 176]
[10 175]
[11 174]
[12 173]
[14 172]
[15 171]
[16 170]
[19 47]
[20 46]
[21 45]
[22 44]
[23 43]
[26 39]
[27 38]
[28 37]
[29 36]
[53 68]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
[71 89]
[72 88]
[73 87]
[75 86]
[76 85]
[77 84]
[78 83]
[93 167]
[94 166]
[95 165]
[99 162]
[100 161]
[101 160]
[102 159]
[103 158]
[104 157]
[106 156]
[107 155]
[108 154]
[110 153]
[111 152]
[113 150]
[114 149]
[115 148]
[120 144]
[121 143]
[122 142]
[123 141]
[124 140]
[125 139]
[126 138]
[127 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
