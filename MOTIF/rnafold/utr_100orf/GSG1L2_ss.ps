%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:03:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACAGGGCCAAGCAGCAGCAGGCGCUGCUCCUCCUCCCUGUCUGCCUCGCCCUCACCUUCUCCCUCACCGCCGUGGUCAGCAGCCACUGGUGUGAGG\
) } def
/len { sequence length } bind def

/coor [
[91.09271240 143.45390320]
[68.86077118 131.59004211]
[56.67859650 109.53089905]
[41.69491959 110.23050690]
[26.71124458 110.93011475]
[11.72756767 111.62971497]
[-3.25610852 112.32932281]
[-18.23978424 113.02893066]
[-33.22346115 113.72853088]
[-48.20713806 114.42813873]
[-56.78023148 127.22689819]
[-71.07865143 132.46223450]
[-85.54698181 128.32322693]
[-94.69428253 116.59867859]
[-109.67795563 117.29828644]
[-123.10224152 125.67081451]
[-136.17652893 118.53553772]
[-151.16020203 119.23514557]
[-166.14389038 119.93474579]
[-181.12756348 120.63435364]
[-196.11123657 121.33396149]
[-211.09490967 122.03356934]
[-224.59948730 131.33724976]
[-239.29077148 124.05039978]
[-240.05563354 107.66909790]
[-226.10725403 99.04502869]
[-211.79452515 107.04988861]
[-196.81083679 106.35028076]
[-181.82716370 105.65068054]
[-166.84349060 104.95107269]
[-151.85981750 104.25146484]
[-136.87614441 103.55186462]
[-124.52359009 95.22937775]
[-110.37756348 102.31461334]
[-95.39388275 101.61500549]
[-87.37886810 89.08913422]
[-73.35915375 83.61998749]
[-58.63512039 87.50022125]
[-48.90674210 99.44446564]
[-33.92306519 98.74485779]
[-18.93939018 98.04524994]
[-3.95571446 97.34564972]
[11.02796173 96.64604187]
[26.01163864 95.94643402]
[40.99531555 95.24682617]
[55.97898865 94.54722595]
[57.47216797 87.39183807]
[60.12017822 80.57882690]
[63.85111237 74.29319000]
[68.56365967 68.70561981]
[74.12984467 63.96783066]
[80.39852905 60.20848846]
[87.19948578 57.52967072]
[94.34803772 56.00411987]
[101.65006256 55.67326736]
[108.90728760 56.54608917]
[115.92263031 58.59889221]
[122.50560760 61.77592468]
[128.47744751 65.99092102]
[133.67599487 71.12943268]
[137.96006775 77.05190277]
[141.21336365 83.59752655]
[143.34751892 90.58855438]
[144.30458069 97.83515167]
[144.05856323 105.14052582]
[142.61614990 112.30632019]
[156.11619568 118.84458160]
[169.61624146 125.38285065]
[183.11627197 131.92111206]
[196.61631775 138.45938110]
[210.11634827 144.99765015]
[219.38287354 145.95899963]
[223.92976379 151.95494080]
[237.21994019 158.90989685]
[250.51010132 165.86485291]
[263.90682983 172.61227417]
[277.40686035 179.15054321]
[290.90692139 185.68881226]
[304.40695190 192.22708130]
[317.90698242 198.76533508]
[333.47238159 194.87973022]
[346.12710571 204.74067688]
[346.16348267 220.78369141]
[333.55368042 230.70195007]
[317.97079468 226.88700867]
[311.36871338 212.26538086]
[297.86868286 205.72711182]
[284.36865234 199.18884277]
[270.86859131 192.65057373]
[257.36856079 186.11231995]
[249.84403992 186.02833557]
[243.55516052 179.15501404]
[230.26498413 172.20007324]
[216.97480774 165.24511719]
[203.57809448 158.49768066]
[190.07804871 151.95942688]
[176.57800293 145.42115784]
[163.07797241 138.88288879]
[149.57792664 132.34461975]
[136.07788086 125.80635834]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 46]
[4 45]
[5 44]
[6 43]
[7 42]
[8 41]
[9 40]
[10 39]
[14 35]
[15 34]
[17 32]
[18 31]
[19 30]
[20 29]
[21 28]
[22 27]
[66 100]
[67 99]
[68 98]
[69 97]
[70 96]
[71 95]
[73 94]
[74 93]
[75 92]
[76 90]
[77 89]
[78 88]
[79 87]
[80 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
