%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUAGCUGCGGCCGCAGCAGCGGCGGCGGGCAUGGCAGAGGCGCGAUCCCAGCCCUCGGCGGGGCCGCAGCUCAACGCGCUACCGGACCACUCUCCGUUGCUGCAGCCGGGCCUGGCGGCGCUGCGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[27.03270149 495.77066040]
[25.31099892 510.97900391]
[16.70923424 523.63873291]
[3.20402980 530.84069824]
[-12.10121822 530.92987061]
[-25.68947601 523.88592529]
[-34.43825912 511.32733154]
[-36.33716583 496.14007568]
[-30.94983673 481.81405640]
[-19.51424217 471.64126587]
[-4.65819931 467.95935059]
[-1.14790618 453.37585449]
[2.36238670 438.79238892]
[0.85483503 431.48345947]
[6.13164616 423.90789795]
[9.98540401 409.41140747]
[5.77767372 395.12350464]
[16.80076027 383.77441406]
[20.65451813 369.27789307]
[24.50827789 354.78140259]
[28.36203575 340.28491211]
[32.21579361 325.78839111]
[36.06954956 311.29190063]
[31.86182022 297.00399780]
[42.88490677 285.65487671]
[46.73866653 271.15838623]
[42.53093338 256.87048340]
[53.55402374 245.52137756]
[57.40777969 231.02487183]
[61.26153946 216.52838135]
[65.11529541 202.03187561]
[68.96905518 187.53536987]
[64.76132202 173.24746704]
[75.78440857 161.89836121]
[79.63816833 147.40185547]
[83.49192810 132.90536499]
[87.34568787 118.40885925]
[77.78736877 102.37001038]
[83.74645233 84.67551422]
[76.92081451 71.31846619]
[70.09517670 57.96142197]
[55.32786179 53.00519562]
[48.59597015 39.36201859]
[53.41197968 25.31418419]
[46.58634186 11.95713711]
[39.76070404 -1.39990819]
[26.59120750 -10.16774368]
[27.68959045 -25.02179337]
[20.86395264 -38.37884140]
[14.03831482 -51.73588562]
[7.21267700 -65.09293365]
[0.45628303 -71.38457489]
[0.38777804 -78.84703827]
[-6.12047815 -92.36157227]
[-12.62873459 -105.87610626]
[-24.94864082 -117.52326202]
[-17.16714859 -132.58595276]
[-0.53897935 -129.27833557]
[0.88579887 -112.38436127]
[7.39405489 -98.86982727]
[13.90231133 -85.35529327]
[20.56972313 -71.91857147]
[27.39536095 -58.56152344]
[34.22099686 -45.20447922]
[41.04663467 -31.84743118]
[53.72791672 -24.03498268]
[53.11775208 -8.22554588]
[59.94338608 5.13149977]
[66.76902771 18.48854637]
[80.97500610 22.81587791]
[88.08744812 36.26458740]
[83.45222473 51.13578415]
[90.27786255 64.49282837]
[97.10350037 77.84987640]
[102.49987793 77.80161285]
[107.75036621 79.04887390]
[112.54853821 81.51887512]
[116.61435699 85.06745148]
[130.48944092 79.36814117]
[144.29623413 73.50536346]
[158.03283691 67.47993469]
[161.47718811 54.39976501]
[171.69705200 45.84016037]
[184.78956604 44.77585983]
[195.92187500 51.37351990]
[209.79695129 45.67420959]
[223.67202759 39.97490311]
[237.54711914 34.27559280]
[243.40620422 19.59749413]
[257.96093750 13.43836689]
[272.57629395 19.45231438]
[278.58117676 34.07136536]
[272.41305542 48.62230301]
[257.73132324 54.47230530]
[243.24642944 48.15067673]
[229.37133789 53.84998322]
[215.49626160 59.54929352]
[201.62118530 65.24860382]
[195.84999084 80.99924469]
[180.18330383 87.88016510]
[164.05827332 81.21652985]
[150.32167053 87.24196625]
[145.41313171 92.86328888]
[136.18875122 93.24322510]
[122.31365967 98.94253540]
[116.78787994 114.73719788]
[101.84218597 122.26261902]
[97.98842621 136.75912476]
[94.13467407 151.25561523]
[90.28091431 165.75212097]
[94.21299744 181.07691956]
[83.46555328 191.38912964]
[79.61180115 205.88563538]
[75.75804138 220.38212585]
[71.90428162 234.87863159]
[68.05052185 249.37513733]
[71.98260498 264.69992065]
[61.23516846 275.01214600]
[57.38140869 289.50863647]
[61.31349182 304.83343506]
[50.56605148 315.14566040]
[46.71229553 329.64215088]
[42.85853577 344.13864136]
[39.00477982 358.63516235]
[35.15102005 373.13165283]
[31.29726219 387.62817383]
[35.22934723 402.95294189]
[24.48190498 413.26516724]
[20.62814713 427.76165771]
[16.94586563 442.30267334]
[13.43557262 456.88613892]
[9.92527962 471.46963501]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 132]
[12 131]
[13 130]
[15 129]
[16 128]
[18 126]
[19 125]
[20 124]
[21 123]
[22 122]
[23 121]
[25 119]
[26 118]
[28 116]
[29 115]
[30 114]
[31 113]
[32 112]
[34 110]
[35 109]
[36 108]
[37 107]
[39 74]
[40 73]
[41 72]
[44 69]
[45 68]
[46 67]
[48 65]
[49 64]
[50 63]
[51 62]
[53 61]
[54 60]
[55 59]
[78 105]
[79 104]
[80 102]
[81 101]
[85 98]
[86 97]
[87 96]
[88 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
