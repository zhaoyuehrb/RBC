%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:33:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUGUCCCCUGGCUAGUGCUACUCUUGGCAUUGCCCAUCUUUUUCCUGGGGGUCUUUGUCUGGGCUGUCUUUGAGCACUUCCUCACCACGGAUAUCC\
) } def
/len { sequence length } bind def

/coor [
[84.58468628 312.11822510]
[71.69835663 301.10101318]
[78.71771240 285.66842651]
[79.65025330 270.69744873]
[72.71916962 257.51376343]
[81.29945374 244.22131348]
[82.23200226 229.25033569]
[83.16454315 214.27934265]
[84.09709167 199.30836487]
[85.02963257 184.33737183]
[77.21517181 174.95909119]
[77.98209381 162.37194824]
[87.46421814 153.45869446]
[88.86190796 138.52394104]
[90.25959778 123.58921051]
[76.22756958 109.28427124]
[76.85075378 89.25576782]
[91.74497223 75.85086823]
[91.27847290 60.85811996]
[90.81197357 45.86537552]
[90.34548187 30.87263298]
[89.87898254 15.87988853]
[89.41248322 0.88714415]
[77.33298492 -4.20515490]
[68.15466309 -13.49869442]
[63.24898911 -25.55341339]
[63.32931137 -38.52068710]
[68.34731293 -50.42679596]
[77.50587463 -59.47335434]
[89.38546753 -64.30892181]
[89.85196686 -79.30166626]
[90.31846619 -94.29441071]
[90.78496552 -109.28715515]
[87.87771606 -115.54551697]
[88.59615326 -121.41011810]
[91.77551270 -125.18933105]
[93.17320251 -140.12406921]
[94.57089233 -155.05880737]
[95.96858215 -169.99354553]
[97.36627197 -184.92828369]
[82.99981689 -191.62252808]
[71.79054260 -202.79013062]
[65.06554413 -217.08328247]
[63.61226654 -232.78569031]
[67.58634186 -248.01867676]
[76.49515533 -260.96594238]
[89.25879669 -270.09008789]
[104.34099579 -274.31524658]
[105.27354431 -289.28622437]
[97.49223328 -303.72171021]
[106.33219147 -317.53427124]
[122.69961548 -316.51473999]
[129.75711060 -301.71191406]
[120.24452972 -288.35366821]
[119.31198120 -273.38269043]
[132.53144836 -268.07492065]
[143.46536255 -258.91024780]
[151.02377319 -246.78474426]
[154.44783020 -232.89050293]
[153.38587952 -218.59840393]
[147.92959595 -205.32289124]
[138.60621643 -194.38194275]
[126.32757568 -186.86628723]
[112.30101013 -183.53060913]
[110.90332031 -168.59585571]
[109.50563049 -153.66111755]
[108.10794067 -138.72637939]
[106.71025085 -123.79164124]
[105.77770996 -108.82065582]
[105.31121063 -93.82791138]
[104.84471130 -78.83516693]
[104.37821198 -63.84242249]
[119.23760223 -55.44203949]
[127.93183899 -40.65072632]
[128.04443359 -23.40599823]
[119.45707703 -8.34988403]
[104.40522766 0.42064622]
[104.87172699 15.41339016]
[105.33822632 30.40613556]
[105.80471802 45.39888000]
[106.27121735 60.39162445]
[106.73771667 75.38436890]
[115.41500854 79.66029358]
[121.87756348 86.85852051]
[125.19686127 95.94484711]
[124.89601135 105.61379242]
[121.01824188 114.47618103]
[114.12068176 121.25870514]
[105.19433594 124.98690033]
[103.79664612 139.92163086]
[102.39895630 154.85638428]
[110.49795532 171.30183411]
[100.00061798 185.26992798]
[99.06807709 200.24090576]
[98.13552856 215.21188354]
[97.20298767 230.18287659]
[96.27043915 245.15385437]
[103.13481903 259.40835571]
[94.62123871 271.62997437]
[93.68869019 286.60098267]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 100]
[4 99]
[6 97]
[7 96]
[8 95]
[9 94]
[10 93]
[13 91]
[14 90]
[15 89]
[18 82]
[19 81]
[20 80]
[21 79]
[22 78]
[23 77]
[30 72]
[31 71]
[32 70]
[33 69]
[36 68]
[37 67]
[38 66]
[39 65]
[40 64]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
