%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUGCUGAGCCCCGUCACCUCCACCCCCUUCUCGGUCAAGGACAUCCUGCGACUGGAGCGCGAGCGGAGCUGCCCCGCGGCUUCGCCACAUCCGCGGG\
) } def
/len { sequence length } bind def

/coor [
[87.58962250 155.26603699]
[84.77650452 158.52809143]
[81.37397003 159.96954346]
[74.62654114 173.36627197]
[67.87911224 186.76300049]
[69.35347748 203.09573364]
[55.79211044 212.31643677]
[41.14578247 204.93963623]
[40.48138428 188.55393982]
[54.48239136 180.01556396]
[61.22981644 166.61883545]
[67.97724152 153.22212219]
[74.09249878 139.52526855]
[79.56227112 125.55810547]
[85.03204346 111.59095001]
[73.53565216 121.22593689]
[62.80755997 131.70964050]
[49.13133621 137.87088013]
[34.17092896 138.96003723]
[19.74653435 134.84458923]
[7.61313057 126.02526855]
[-0.75304550 113.57508850]
[-4.33410215 99.00881958]
[-2.69434142 84.09871674]
[3.96673059 70.65885162]
[14.83867931 60.32440567]
[28.59874344 54.35275269]
[43.57277298 53.47044754]
[57.93891525 57.78483200]
[69.94927979 66.77099609]
[78.14260864 79.33563232]
[89.01776123 89.66670990]
[84.42690277 75.38651276]
[78.72456360 68.01928711]
[79.92281342 60.59031296]
[75.77828979 46.17424774]
[71.63375854 31.75818443]
[67.48923492 17.34211922]
[63.34470749 2.92605591]
[49.80651093 -9.43372726]
[54.48756409 -26.26789474]
[49.89670563 -40.54809189]
[45.30584717 -54.82828903]
[32.79640579 -65.43234253]
[35.99089813 -81.51734161]
[51.60310364 -86.53642273]
[63.57252121 -75.32637787]
[59.58604431 -59.41914749]
[64.17690277 -45.13895035]
[68.76776123 -30.85875320]
[79.46395111 -24.97577667]
[83.33976746 -12.97566605]
[77.76077271 -1.21846998]
[81.90529633 13.19759369]
[86.04982758 27.61365891]
[90.19435120 42.02972412]
[94.33887482 56.44578552]
[98.70709991 70.79565430]
[103.29795837 85.07585144]
[114.62030029 94.91477966]
[129.40133667 97.46842957]
[144.18235779 100.02208710]
[153.35377502 98.38565826]
[159.38034058 102.89186859]
[174.07479858 105.90397644]
[188.92810059 107.99670410]
[203.88276672 109.16196442]
[218.83744812 110.32721710]
[233.79211426 111.49247742]
[248.74678040 112.65773773]
[263.70144653 113.82299042]
[278.65612793 114.98825073]
[293.61080933 116.15351105]
[308.56546021 117.31876373]
[323.52014160 118.48402405]
[339.78109741 113.68640137]
[348.89273071 127.98377228]
[337.67645264 140.69720459]
[322.35488892 133.43869019]
[307.40020752 132.27343750]
[292.44552612 131.10818481]
[277.49087524 129.94291687]
[262.53619385 128.77766418]
[247.58152771 127.61240387]
[232.62686157 126.44715118]
[217.67218018 125.28189087]
[202.71751404 124.11663055]
[187.76284790 122.95137787]
[185.48173523 124.85948181]
[182.24148560 125.89378357]
[178.40493774 125.65765381]
[174.48109436 123.90676880]
[171.06269836 120.59843445]
[156.36824036 117.58633423]
[141.62870789 114.80311584]
[126.84767914 112.24945831]
[112.06665039 109.69580841]
[98.99920654 117.06072235]
[93.52942657 131.02787781]
[88.05965424 144.99504089]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 12]
[4 11]
[5 10]
[13 100]
[14 99]
[15 98]
[32 59]
[33 58]
[35 57]
[36 56]
[37 55]
[38 54]
[39 53]
[41 50]
[42 49]
[43 48]
[60 97]
[61 96]
[62 95]
[64 94]
[65 93]
[66 88]
[67 87]
[68 86]
[69 85]
[70 84]
[71 83]
[72 82]
[73 81]
[74 80]
[75 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
