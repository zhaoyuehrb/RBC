%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCGGGUCUAUGGGAAGUUCGGGGACUUGACAGCCGCUGCCGCCGCAGGGCAUUUUUGGUCGAAGAGAGCUGAAGUAAUGAGAAGACAUCAUGGAGGCCCAGUCCCACAGCUCCACGACCACUGAAAAGAAAAAAGUUGAGAAUUCCAUAGUGAAGUGCUCCACUCGAACAGAUGUGAGCGAGAAAGCCG\
) } def
/len { sequence length } bind def

/coor [
[246.18464661 452.84152222]
[256.74954224 442.19342041]
[271.67846680 443.64709473]
[264.39202881 430.53573608]
[249.49725342 430.42855835]
[236.56997681 422.82980347]
[229.13275146 409.69381714]
[229.27006531 394.49914551]
[237.04519653 381.32739258]
[229.75874329 368.21603394]
[222.47229004 355.10470581]
[215.18583679 341.99334717]
[207.89939880 328.88198853]
[200.61294556 315.77062988]
[193.32649231 302.65927124]
[189.04678345 300.50677490]
[186.08178711 295.63479614]
[186.02415466 288.99755859]
[179.17059326 275.65481567]
[172.31703186 262.31207275]
[165.46347046 248.96934509]
[152.75627136 246.77909851]
[143.49607849 237.52825928]
[141.22633362 224.43963623]
[146.99765015 212.25907898]
[140.36332703 198.80598450]
[133.72900391 185.35289001]
[127.09466553 171.89979553]
[120.46033478 158.44670105]
[100.75773621 161.91986084]
[80.97605133 158.92988586]
[63.18005753 149.78889465]
[49.22728348 135.45100403]
[40.57410049 117.41278839]
[25.77444839 119.85621643]
[10.97479916 122.29965210]
[3.00235772 126.79178619]
[-4.08682108 124.65991974]
[-18.92446899 126.86087799]
[-33.76211548 129.06182861]
[-48.59976578 131.26278687]
[-61.10163498 141.87576294]
[-76.45049286 136.10128784]
[-78.85674286 119.87963104]
[-65.84504700 109.89826202]
[-50.80072021 116.42514801]
[-35.96307373 114.22418976]
[-21.12542534 112.02323151]
[-6.28777790 109.82227325]
[8.53136635 107.50000000]
[23.33101654 105.05657196]
[38.13066483 102.61313629]
[39.00694656 89.29998779]
[42.71458054 76.48355103]
[49.08145523 64.75875854]
[57.81201935 54.66990662]
[68.50099182 46.68531799]
[80.65217590 41.17564774]
[77.72582245 26.46386719]
[74.79946899 11.75208855]
[71.87310791 -2.95969105]
[68.94675446 -17.67147064]
[66.02040100 -32.38325119]
[55.02193069 -36.94689941]
[47.67321396 -46.16355896]
[45.71377945 -57.66560745]
[49.51735306 -68.56900787]
[58.02720642 -76.19641876]
[55.58377457 -90.99607086]
[53.14034271 -105.79571533]
[50.69691086 -120.59536743]
[48.25347900 -135.39501953]
[45.81004715 -150.19467163]
[37.18546295 -151.82228088]
[29.31022644 -156.63114929]
[23.36413193 -164.26756287]
[20.35943413 -173.94140625]
[20.98101425 -184.50453186]
[25.46249771 -194.58677673]
[20.64090538 -208.79072571]
[15.81931305 -222.99467468]
[10.99772167 -237.19863892]
[-3.64123034 -242.69728088]
[-11.27578163 -256.34454346]
[-8.30113125 -271.69659424]
[3.87818146 -281.50466919]
[19.51145744 -281.13769531]
[31.21714401 -270.76895142]
[33.46817017 -255.29421997]
[25.20167351 -242.02021790]
[30.02326584 -227.81626892]
[34.84485626 -213.61231995]
[39.66645050 -199.40837097]
[54.60574722 -200.75645447]
[56.80670547 -215.59410095]
[54.96870422 -224.55851746]
[59.16697693 -230.65571594]
[61.61040878 -245.45536804]
[64.05384064 -260.25500488]
[60.66838074 -276.86752319]
[75.69446564 -284.71945190]
[87.39919281 -272.45422363]
[78.85349274 -257.81158447]
[76.41005707 -243.01193237]
[73.96662903 -228.21228027]
[71.64435577 -213.39314270]
[69.44339752 -198.55549622]
[77.21325684 -171.13296509]
[60.60969543 -152.63809204]
[63.05312729 -137.83845520]
[65.49655914 -123.03880310]
[67.93999481 -108.23915100]
[70.38342285 -93.43949890]
[72.82685852 -78.63984680]
[88.31777954 -68.90734863]
[91.85200500 -50.63243866]
[80.73217773 -35.30960464]
[83.65853119 -20.59782600]
[86.58489227 -5.88604593]
[89.51124573 8.82573318]
[92.43759918 23.53751183]
[95.36395264 38.24929047]
[107.89901733 38.58136749]
[120.11019135 41.43189240]
[131.49674988 46.68397903]
[141.59179688 54.12227249]
[149.98138428 63.44176483]
[156.32150269 74.26031494]
[160.35217285 86.13430786]
[161.90814209 98.57685852]
[160.92558289 111.07776642]
[157.44477844 123.12443542]
[151.60848999 134.22290039]
[143.65600586 143.91806030]
[133.91342163 151.81237793]
[140.54776001 165.26547241]
[147.18208313 178.71855164]
[153.81642151 192.17164612]
[160.45074463 205.62474060]
[177.11001587 210.93688965]
[184.63229370 226.34707642]
[178.80621338 242.11578369]
[185.65977478 255.45852661]
[192.51333618 268.80126953]
[199.36689758 282.14401245]
[206.43785095 295.37283325]
[213.72428894 308.48419189]
[221.01074219 321.59552002]
[228.29719543 334.70687866]
[235.58364868 347.81823730]
[242.87010193 360.92959595]
[250.15655518 374.04095459]
[265.44781494 374.39385986]
[278.42367554 382.30108643]
[285.65139771 395.55346680]
[285.27783203 410.54400635]
[277.50338745 423.24926758]
[284.78982544 436.36062622]
[292.60638428 449.16302490]
[300.93994141 461.63507080]
[309.27346802 474.10711670]
[322.70782471 475.19927979]
[332.90802002 483.70925903]
[336.28939819 496.35424805]
[331.83258057 508.45413208]
[339.96096802 521.06085205]
[348.08935547 533.66760254]
[356.21771240 546.27429199]
[371.40698242 549.72747803]
[379.47070312 562.62823486]
[376.08505249 577.08764648]
[384.21343994 589.69433594]
[399.04000854 596.70178223]
[400.11483765 613.06567383]
[386.33218384 621.95227051]
[371.87048340 614.21972656]
[371.60668945 597.82269287]
[363.47833252 585.21600342]
[348.91055298 582.33239746]
[340.48764038 569.66314697]
[343.61099243 554.40270996]
[335.48260498 541.79595947]
[327.35424805 529.18920898]
[319.22586060 516.58251953]
[302.65673828 513.74365234]
[293.07226562 499.52410889]
[296.80142212 482.44067383]
[288.46789551 469.96862793]
[280.13433838 457.49658203]
[274.60592651 471.44064331]
[260.30697632 475.97271729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 158]
[4 157]
[9 152]
[10 151]
[11 150]
[12 149]
[13 148]
[14 147]
[15 146]
[18 145]
[19 144]
[20 143]
[21 142]
[25 139]
[26 138]
[27 137]
[28 136]
[29 135]
[34 52]
[35 51]
[36 50]
[38 49]
[39 48]
[40 47]
[41 46]
[58 122]
[59 121]
[60 120]
[61 119]
[62 118]
[63 117]
[68 114]
[69 113]
[70 112]
[71 111]
[72 110]
[73 109]
[79 93]
[80 92]
[81 91]
[82 90]
[94 107]
[95 106]
[97 105]
[98 104]
[99 103]
[159 189]
[160 188]
[161 187]
[165 184]
[166 183]
[167 182]
[168 181]
[171 178]
[172 177]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
