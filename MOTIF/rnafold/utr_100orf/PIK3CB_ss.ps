%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:57:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCCGUGGUUAUGAAUGUGCUUCAGUUUCAUAAUGCCUCCUGCUAUGGCAGACAUCCUUGACAUCUGGGCGGUGGAUUCACAGAUAGCAUCUGAUGGCUCCAUACCUGUGGAUU\
) } def
/len { sequence length } bind def

/coor [
[85.69342804 116.28649902]
[72.50637054 123.43502808]
[59.31931305 130.58355713]
[73.02344513 136.68247986]
[78.63172150 150.59460449]
[72.98882294 164.49272156]
[59.26954269 170.55749512]
[45.19260788 165.37677002]
[38.67795944 151.86531067]
[43.39187241 137.62373352]
[29.22887802 142.56433105]
[15.06588364 147.50494385]
[0.90288931 152.44554138]
[-13.26010513 157.38615417]
[-27.42309952 162.32675171]
[-41.58609390 167.26736450]
[-55.74908829 172.20797729]
[-62.67259979 186.16156006]
[-77.10626984 190.97027588]
[-90.36621857 184.28378296]
[-104.52921295 189.22438049]
[-117.49301147 200.15032959]
[-131.58070374 190.71777344]
[-126.41663361 174.56944275]
[-109.46982574 175.06138611]
[-95.30683136 170.12078857]
[-89.08287811 156.63754272]
[-74.78996277 151.42530823]
[-60.68969345 158.04498291]
[-46.52669907 153.10437012]
[-32.36370468 148.16375732]
[-18.20071220 143.22315979]
[-4.03771687 138.28254700]
[10.12527752 133.34194946]
[24.28827095 128.40133667]
[38.45126724 123.46073151]
[52.17078018 117.39649963]
[65.35784149 110.24797058]
[78.54489899 103.09943390]
[78.00018311 91.08343506]
[84.23991394 79.57513428]
[96.42578888 72.37159729]
[88.07131195 59.91355896]
[79.71684265 47.45551682]
[71.36236572 34.99747467]
[56.41178131 28.25863266]
[55.04194641 11.91679668]
[68.66203308 2.78304863]
[83.26085663 10.25340462]
[83.82041168 26.64300346]
[92.17488098 39.10104370]
[100.52935791 51.55908585]
[108.88382721 64.01712799]
[102.56000519 50.41531372]
[103.00412750 35.42189026]
[110.12195587 22.21823311]
[122.40319061 13.60596085]
[137.24194336 11.41246510]
[151.48965454 16.10317421]
[162.12316895 26.68278885]
[166.88623047 40.90647888]
[164.76817322 55.75618362]
[156.21842957 68.08103180]
[143.05111694 75.26586914]
[128.06033325 75.78621674]
[142.95097351 77.59426880]
[157.84159851 79.40232086]
[172.73223877 81.21037292]
[187.66604614 82.61798859]
[202.63226318 83.62415314]
[217.59848022 84.63031769]
[227.88423157 76.70732880]
[240.40527344 77.93271637]
[248.42851257 87.09452057]
[263.36233521 88.50213623]
[278.29614258 89.90975189]
[293.22994995 91.31735992]
[308.16375732 92.72497559]
[322.62908936 86.31684113]
[334.57412720 95.21434021]
[349.50793457 96.62195587]
[364.44174194 98.02957153]
[379.39309692 99.23656464]
[394.35931396 100.24272919]
[409.32553101 101.24889374]
[424.29174805 102.25506592]
[439.25796509 103.26123047]
[455.46701050 98.29095459]
[464.73013306 112.49062347]
[453.64968872 125.32261658]
[438.25180054 118.22743988]
[423.28558350 117.22127533]
[408.31936646 116.21511078]
[393.35314941 115.20894623]
[378.38693237 114.20278168]
[371.41125488 116.92925262]
[363.03414917 112.96337891]
[348.10034180 111.55576324]
[333.16653442 110.14814758]
[319.76934814 116.65696716]
[306.75613403 107.65878296]
[291.82232666 106.25117493]
[276.88851929 104.84355927]
[261.95471191 103.43594360]
[247.02090454 102.02832794]
[231.56195068 110.21526337]
[216.59231567 99.59653473]
[201.62609863 98.59037018]
[186.65988159 97.58420563]
[182.45205688 100.08641815]
[176.60691833 99.87932587]
[170.92417908 96.10100555]
[156.03355408 94.29295349]
[141.14291382 92.48490143]
[126.25228119 90.67685699]
[122.17561340 113.18323517]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 39]
[2 38]
[3 37]
[10 36]
[11 35]
[12 34]
[13 33]
[14 32]
[15 31]
[16 30]
[17 29]
[20 26]
[21 25]
[42 53]
[43 52]
[44 51]
[45 50]
[65 115]
[66 114]
[67 113]
[68 112]
[69 109]
[70 108]
[71 107]
[74 105]
[75 104]
[76 103]
[77 102]
[78 101]
[80 99]
[81 98]
[82 97]
[83 95]
[84 94]
[85 93]
[86 92]
[87 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
