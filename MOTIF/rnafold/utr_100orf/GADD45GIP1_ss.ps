%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:36:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACAGCCCGGCGGGCCUGUGAGGACCCCGCACAGCCAAGAUGGCGGCGUCCGUGCGACAGGCACGCAGCCUACUAGGUGUGGCGGCGACCCUGGCCCCGGGUUCCCGUGGCUACCGGGCGCGGCCGCCCCCGCGCCGCA\
) } def
/len { sequence length } bind def

/coor [
[76.24526978 233.05793762]
[62.12996292 227.98268127]
[52.87565994 216.17768860]
[51.31700134 201.25889587]
[57.93141556 187.79600525]
[70.69286346 179.91276550]
[85.69245911 180.02388000]
[98.33649445 188.09617615]
[94.11050415 173.70378113]
[89.88452148 159.31138611]
[85.65853119 144.91899109]
[81.43254089 130.52659607]
[70.53870392 120.21522522]
[55.93602371 116.78569031]
[41.33334351 113.35614777]
[26.12968445 117.73328400]
[15.50855923 107.29101562]
[0.90587932 103.86147308]
[-13.69680023 100.43193817]
[-28.29948044 97.00239563]
[-42.90216064 93.57285309]
[-57.50484085 90.14331055]
[-73.89073181 101.64385223]
[-93.18257141 97.57152557]
[-103.21016693 80.94660187]
[-118.00701141 78.48624420]
[-132.80386353 76.02587891]
[-147.60070801 73.56551361]
[-162.48307800 78.93445587]
[-173.76887512 69.21436310]
[-188.56571960 66.75399780]
[-203.36256409 64.29364014]
[-218.15940857 61.83327103]
[-227.21752930 63.51921844]
[-233.25277710 59.15290451]
[-247.99200439 56.36808395]
[-259.97747803 66.41212463]
[-275.61492920 66.35050964]
[-287.52087402 56.21232224]
[-290.07363892 40.78451157]
[-282.06793213 27.35161781]
[-267.28378296 22.25624084]
[-252.70181274 27.90426064]
[-245.20718384 41.62885666]
[-230.46795654 44.41367722]
[-215.69903564 47.03642654]
[-200.90219116 49.49679184]
[-186.10534668 51.95715714]
[-171.30850220 54.41752243]
[-157.48449707 48.87259293]
[-145.14033508 58.76866531]
[-130.34349060 61.22903061]
[-115.54665375 63.68939590]
[-100.74980927 66.14975739]
[-94.22447205 58.05455780]
[-84.83662415 53.39885712]
[-74.28079987 53.09889221]
[-64.49436951 57.27770233]
[-57.30194855 65.23007965]
[-54.07529831 75.54063416]
[-39.47261810 78.97017670]
[-24.86993980 82.39971924]
[-10.26725960 85.82925415]
[4.33542013 89.25879669]
[18.93809891 92.68833923]
[33.09727859 88.06589508]
[44.76288223 98.75347137]
[59.36556244 102.18300629]
[73.96824646 105.61254883]
[77.20754242 82.99638367]
[97.68732452 69.84603119]
[100.63387299 55.13828278]
[103.58042908 40.43053818]
[106.52697754 25.72278976]
[103.70983124 9.00453568]
[118.99486542 1.66941106]
[130.27465820 14.32653618]
[121.23472595 28.66934204]
[118.28817749 43.37709045]
[115.34162140 58.08483887]
[112.39507294 72.79258728]
[124.04880524 82.23665619]
[137.82687378 76.30667114]
[147.44404602 63.74400711]
[162.19334412 65.81951141]
[175.97142029 59.88952255]
[189.74948120 53.95953369]
[203.52755737 48.02954483]
[213.14472961 35.46688461]
[227.89402771 37.54238510]
[241.67208862 31.61239815]
[255.45016479 25.68240929]
[269.22824097 19.75242233]
[283.00631714 13.82243443]
[287.32980347 -1.20558190]
[300.33044434 -9.89568233]
[315.86968994 -8.14466667]
[326.61038208 3.22068906]
[327.48110962 18.83401108]
[318.07073975 31.32316780]
[302.82257080 34.79115677]
[288.93630981 27.60050583]
[275.15823364 33.53049469]
[261.38015747 39.46047974]
[247.60208130 45.39046860]
[233.82400513 51.32045746]
[225.19233704 63.45896530]
[209.45755005 61.80761719]
[195.67947388 67.73760223]
[181.90139771 73.66759491]
[168.12333679 79.59757996]
[159.49165344 91.73609161]
[143.75686646 90.08473969]
[129.97879028 96.01473236]
[127.72826385 109.58866119]
[119.85180664 120.35988617]
[108.33799744 126.24020386]
[95.82493591 126.30060577]
[100.05092621 140.69300842]
[104.27691650 155.08538818]
[108.50289917 169.47778320]
[112.72888947 183.87017822]
[118.35477448 197.77519226]
[125.32562256 211.05703735]
[132.29647827 224.33888245]
[139.26731873 237.62071228]
[146.23817444 250.90255737]
[153.05033875 257.10629272]
[153.21263123 264.55361938]
[159.89002991 277.98538208]
[173.84626770 286.59674072]
[173.09634399 302.97872925]
[158.41169739 310.27896118]
[144.89865112 300.98760986]
[146.45826721 284.66278076]
[139.78086853 271.23101807]
[132.95632935 257.87341309]
[125.98548126 244.59156799]
[119.01463318 231.30972290]
[112.04378510 218.02789307]
[105.07293701 204.74604797]
[101.59988403 219.33843994]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 122]
[9 121]
[10 120]
[11 119]
[12 118]
[13 69]
[14 68]
[15 67]
[17 65]
[18 64]
[19 63]
[20 62]
[21 61]
[22 60]
[25 54]
[26 53]
[27 52]
[28 51]
[30 49]
[31 48]
[32 47]
[33 46]
[35 45]
[36 44]
[71 81]
[72 80]
[73 79]
[74 78]
[82 114]
[83 113]
[85 111]
[86 110]
[87 109]
[88 108]
[90 106]
[91 105]
[92 104]
[93 103]
[94 102]
[123 141]
[124 140]
[125 139]
[126 138]
[127 137]
[129 136]
[130 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
