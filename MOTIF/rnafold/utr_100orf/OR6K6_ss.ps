%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:10:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGCAAUAUUCAGUGGGUAAUCAACAUUCCAAUUAUAGGAGUCUCUUGUUUCCUUUUCUGUGUUCACAGAUGACACAGUUGACGGCCAGUGGGAAUC\
) } def
/len { sequence length } bind def

/coor [
[67.99636841 391.80865479]
[54.12734222 397.85061646]
[39.06985474 399.30911255]
[24.29907227 396.04119873]
[11.26209354 388.36706543]
[1.23614538 377.03854370]
[-4.79653072 363.16546631]
[-6.24491453 348.10699463]
[-2.96710873 333.33840942]
[4.71576071 320.30657959]
[16.05100441 310.28820801]
[29.92811203 304.26483154]
[44.98754501 302.82653809]
[48.22780991 288.18069458]
[51.46807861 273.53488159]
[46.66277695 259.43670654]
[57.19847870 247.63374329]
[60.43874741 232.98791504]
[63.67901230 218.34207153]
[53.88174438 209.12957764]
[49.92737198 196.16197205]
[52.96538925 182.83798218]
[62.29762268 172.70614624]
[75.53504944 168.51982117]
[79.22923279 153.98184204]
[82.92341614 139.44384766]
[86.61759949 124.90586853]
[90.31178284 110.36788177]
[85.55995941 124.59532928]
[75.39578247 135.62663269]
[61.60404205 141.52473450]
[46.60648346 141.25399780]
[33.03661346 134.86192322]
[23.27722549 123.47094727]
[19.04202080 109.08126068]
[21.07468224 94.21961975]
[29.01828194 81.49565887]
[41.47796631 73.14363098]
[56.26587296 70.63011932]
[70.78521729 74.39643097]
[68.92373657 59.51237869]
[67.06225586 44.62833023]
[65.20077515 29.74428368]
[63.33929443 14.86023521]
[49.68637848 7.48612452]
[43.00570297 -6.51916695]
[45.86611938 -21.77031898]
[57.16774750 -32.40295029]
[72.56487274 -34.32860184]
[86.13699341 -26.80681610]
[92.66534424 -12.72987652]
[89.63964844 2.48934770]
[78.22334290 12.99875355]
[80.08482361 27.88280106]
[81.94630432 42.76684952]
[83.80778503 57.65089798]
[85.66926575 72.53494263]
[91.96141052 76.61647797]
[100.12468719 64.03231812]
[112.70870209 72.19580078]
[104.54570770 84.77954102]
[110.83785248 88.86106873]
[125.18771362 84.49285126]
[139.53758240 80.12463379]
[153.88745117 75.75640869]
[168.23731995 71.38819122]
[182.58717346 67.01996613]
[188.54780579 52.56296539]
[202.43055725 45.36552811]
[217.68043518 48.82606888]
[227.09690857 61.31062698]
[226.23379517 76.92436981]
[215.49864197 88.29497528]
[199.96026611 90.05358124]
[186.95539856 81.36983490]
[172.60552979 85.73805237]
[158.25567627 90.10627747]
[143.90580750 94.47449493]
[129.55593872 98.84272003]
[115.20606995 103.21093750]
[104.84976959 114.06206512]
[101.15558624 128.60005188]
[97.46140289 143.13803101]
[93.76721954 157.67602539]
[90.07303619 172.21400452]
[101.03515625 184.98342896]
[102.27947235 201.60116577]
[93.51653290 215.58094788]
[78.32485199 221.58233643]
[75.08458710 236.22817993]
[71.84432220 250.87402344]
[76.41785431 266.01974487]
[66.11392212 276.77514648]
[62.87365341 291.42098999]
[59.63338470 306.06680298]
[72.68063354 313.72348022]
[82.72175598 325.03854370]
[88.77301788 338.90353394]
[90.24158478 353.96002197]
[86.98357391 368.73300171]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 95]
[14 94]
[15 93]
[17 91]
[18 90]
[19 89]
[24 85]
[25 84]
[26 83]
[27 82]
[28 81]
[40 57]
[41 56]
[42 55]
[43 54]
[44 53]
[62 80]
[63 79]
[64 78]
[65 77]
[66 76]
[67 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
