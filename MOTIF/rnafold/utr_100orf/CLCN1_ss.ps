%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:16:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAAGAGCAGAGGCUUAAGGAGCUACACUGGGGGAAGGACAGGGGCAAGCAGGCCAAGGCCUGGCCGGGGCUCGGGGGGAGGGAAUAUGGAGCAAUCCCGGUCACAGCAGCGUGGGGGUGAACAAAGCUGGUGGGGUAGUGACCCCCAGUACCAGUAUAUGCCCUUUGAACACUGCACCAGCUACG\
) } def
/len { sequence length } bind def

/coor [
[105.61563873 198.62831116]
[104.86397552 183.64715576]
[104.11231232 168.66600037]
[96.71678925 167.41853333]
[81.92573547 164.92359924]
[74.53020477 163.67611694]
[68.90594482 177.58178711]
[63.28167725 191.48745728]
[57.65741730 205.39314270]
[60.46831131 221.54959106]
[47.71012497 231.85301208]
[32.50738144 225.70414734]
[30.49936295 209.42839050]
[43.75174713 199.76887512]
[49.37600708 185.86320496]
[55.00027084 171.95753479]
[60.62453461 158.05186462]
[55.27710724 152.79306030]
[48.57913589 166.21456909]
[33.74472809 163.99188232]
[31.27458000 149.19665527]
[44.58225632 142.27545166]
[39.23483276 137.01663208]
[25.42508316 142.87248230]
[11.61533451 148.72831726]
[8.11663723 159.05369568]
[-0.32053992 165.60531616]
[-10.75241470 166.40377808]
[-19.70400810 161.42590332]
[-33.70171738 166.81701660]
[-47.69942474 172.20814514]
[-50.71748734 187.33740234]
[-61.45236588 198.41738892]
[-76.47859955 201.91249084]
[-91.00138092 196.70744324]
[-100.38652802 184.46316528]
[-101.63928986 169.08674622]
[-94.35990906 155.48475647]
[-80.87120056 147.99754333]
[-65.47737885 149.01423645]
[-53.09054184 158.21043396]
[-39.09283447 152.81930542]
[-25.09512520 147.42819214]
[-14.09999180 131.53640747]
[5.75949526 134.91856384]
[19.56924438 129.06272888]
[33.37899017 123.20689392]
[33.95845032 109.99276733]
[36.99901581 97.80323792]
[42.14211273 87.06912994]
[48.95902634 78.12444305]
[34.87318802 72.96797180]
[20.78734779 67.81150818]
[6.70150900 62.65504456]
[-7.38433075 57.49858093]
[-23.43783188 60.84777832]
[-34.16182327 48.44100189]
[-28.52438354 33.04128647]
[-12.32482433 30.49053383]
[-2.22786593 43.41274261]
[11.85797310 48.56920624]
[25.94381332 53.72566986]
[40.02965164 58.88213730]
[54.11548996 64.03859711]
[64.81034088 53.52098846]
[59.88996887 39.35095215]
[54.96959686 25.18091774]
[50.04922485 11.01088047]
[45.12885284 -3.15915585]
[40.20848083 -17.32919312]
[34.93450546 -31.37145615]
[29.31024170 -45.27712631]
[23.68597794 -59.18279648]
[18.06171608 -73.08847046]
[2.91368532 -72.52900696]
[-11.51119995 -77.18717194]
[-23.47106361 -86.50046539]
[-31.52169800 -99.34426117]
[-34.69094467 -114.16761017]
[-32.59610367 -129.18052673]
[-25.49014091 -142.57011414]
[-14.23113155 -152.71951294]
[-0.17865646 -158.40315247]
[14.97037888 -158.93470764]
[29.38665390 -154.24995422]
[41.32933426 -144.91464233]
[49.35628510 -132.05603027]
[52.49821091 -117.22686768]
[50.37570953 -102.21784210]
[43.24507904 -88.84137726]
[31.96738625 -78.71273041]
[37.59164810 -64.80706024]
[43.21591187 -50.90139008]
[48.84017563 -36.99571991]
[51.94666290 -35.28845215]
[54.37322235 -31.98152161]
[55.37244797 -27.41442299]
[54.37851715 -22.24956512]
[59.29888916 -8.07952881]
[64.21926117 6.09050751]
[69.13963318 20.26054382]
[74.06000519 34.43058014]
[78.98037720 48.60061646]
[99.14305115 45.30456924]
[118.81980133 49.52111816]
[135.34931946 60.45153046]
[146.57960510 76.40499878]
[151.14735413 95.05682373]
[166.12850952 95.80848694]
[181.10966492 96.56015015]
[196.09082031 97.31181335]
[210.26136780 90.27577209]
[222.58493042 98.64112091]
[237.56608582 99.39278412]
[252.56137085 99.76873016]
[267.56137085 99.76873016]
[282.56137085 99.76873016]
[297.56137085 99.76873016]
[312.56137085 99.76873016]
[327.56137085 99.76873016]
[332.20272827 88.64665985]
[340.30563354 79.77245331]
[350.89971924 74.17407990]
[362.72805786 72.48931122]
[374.39605713 74.89311981]
[384.53610229 81.07984161]
[391.96774292 90.30181122]
[395.83511353 101.45967865]
[410.81625366 102.21134186]
[425.79742432 102.96299744]
[440.77856445 103.71466064]
[455.75973511 104.46632385]
[470.74087524 105.21798706]
[485.73880005 105.46863556]
[500.73669434 105.21798706]
[515.73461914 104.96733856]
[530.73248291 104.71669006]
[545.73040771 104.46604156]
[559.50750732 95.57088470]
[573.97399902 103.29436493]
[574.24804688 119.69122314]
[560.04766846 127.89377594]
[545.98107910 119.46395111]
[530.98315430 119.71459961]
[515.98522949 119.96524811]
[500.98733521 120.21589661]
[485.98944092 120.46653748]
[483.93994141 122.40663147]
[480.99087524 123.64342499]
[477.40933228 123.82736969]
[473.58483887 122.71308899]
[469.98922729 120.19914246]
[455.00805664 119.44747925]
[440.02691650 118.69581604]
[425.04574585 117.94415283]
[410.06460571 117.19249725]
[395.08343506 116.44083405]
[385.97921753 132.08361816]
[370.12963867 140.99736023]
[351.86386108 140.64860535]
[336.22134399 131.04750061]
[327.56137085 114.76873016]
[312.56137085 114.76873016]
[297.56137085 114.76873016]
[282.56137085 114.76873016]
[267.56137085 114.76873016]
[252.56137085 114.76873016]
[249.81388855 117.00844574]
[245.83836365 118.01803589]
[241.22979736 117.23192596]
[236.81442261 114.37393951]
[221.83326721 113.62227631]
[208.73426819 120.71208191]
[195.33915710 112.29296875]
[180.35800171 111.54130554]
[165.37684631 110.78964233]
[150.39569092 110.03797913]
[150.49443054 122.34588623]
[147.48158264 135.10609436]
[141.18486023 147.51875305]
[131.63827515 158.73588562]
[119.09346771 167.91433716]
[119.84513092 182.89549255]
[120.59679413 197.87664795]
[129.94734192 211.34881592]
[122.71157837 226.06533813]
[106.33303833 226.88710022]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 184]
[2 183]
[3 182]
[6 17]
[7 16]
[8 15]
[9 14]
[23 47]
[24 46]
[25 45]
[29 43]
[30 42]
[31 41]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
[65 103]
[66 102]
[67 101]
[68 100]
[69 99]
[70 98]
[71 94]
[72 93]
[73 92]
[74 91]
[108 177]
[109 176]
[110 175]
[111 174]
[113 172]
[114 171]
[115 167]
[116 166]
[117 165]
[118 164]
[119 163]
[120 162]
[128 157]
[129 156]
[130 155]
[131 154]
[132 153]
[133 152]
[134 147]
[135 146]
[136 145]
[137 144]
[138 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
