%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:15:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUUCUUUAUUAUUCAUUCUUUGGUUACUUCUGUUUUUCUAACAGCUUUGGGACCCCAGAACAGAACAAUGCAUUUUGUGACUGAGUUUGUCCUCCUGG\
) } def
/len { sequence length } bind def

/coor [
[89.48800659 312.77301025]
[74.61679840 315.21102905]
[59.58424377 314.15319824]
[45.20102692 309.65655518]
[32.24281693 301.96359253]
[21.40843582 291.48919678]
[13.28216743 278.79824829]
[8.30224895 264.57513428]
[6.73724270 249.58688354]
[8.67154694 234.64181519]
[14.00084782 220.54588318]
[22.43774223 208.05926514]
[33.52724075 197.85536194]
[46.67129517 190.48443604]
[61.16107178 186.34400940]
[76.21514893 185.65736389]
[78.99836731 170.91783142]
[70.41738892 158.79750061]
[73.02999115 143.80987549]
[85.80109406 134.89154053]
[88.58430481 120.15200806]
[91.36752319 105.41247559]
[89.63191223 97.38236237]
[94.47332001 90.26096344]
[97.71358490 75.61511993]
[100.95384979 60.96928024]
[104.19412231 46.32344055]
[107.43438721 31.67759895]
[110.67465210 17.03175735]
[111.37425995 2.04808092]
[109.51277924 -12.83596706]
[107.65129852 -27.72001457]
[105.78981781 -42.60406494]
[103.92833710 -57.48810959]
[102.06685638 -72.37216187]
[100.20537567 -87.25621033]
[98.34388733 -102.14025879]
[95.33178711 -116.83471680]
[91.18725586 -131.25077820]
[87.04273224 -145.66683960]
[82.89820862 -160.08291626]
[78.75367737 -174.49897766]
[74.60915375 -188.91503906]
[61.32492828 -197.90997314]
[60.21857071 -213.91482544]
[72.13878632 -224.65205383]
[87.94140625 -221.88496399]
[95.50401306 -207.73623657]
[89.02521515 -193.05957031]
[93.16974640 -178.64349365]
[97.31427002 -164.22743225]
[101.45879364 -149.81137085]
[105.60332489 -135.39530945]
[109.74784851 -120.97924042]
[111.99504852 -119.87184906]
[113.96561432 -117.84793854]
[115.32942963 -115.00071716]
[115.79286194 -111.53323364]
[115.13327026 -107.74390411]
[113.22793579 -104.00173950]
[115.08941650 -89.11769104]
[116.95090485 -74.23364258]
[118.81238556 -59.34959412]
[120.67386627 -44.46554565]
[122.53534698 -29.58149719]
[124.39682770 -14.69744873]
[126.25830841 0.18659958]
[134.72581482 -12.19489098]
[147.88710022 -19.39076424]
[162.88047791 -19.83641052]
[176.44590759 -13.43492985]
[185.63385010 -1.57820892]
[188.44653320 13.15572453]
[184.27239990 27.56324387]
[174.01904297 38.51169968]
[159.91586304 43.62054443]
[145.02934265 41.77895737]
[132.59628296 33.38735580]
[125.32049561 20.27202415]
[122.08023071 34.91786575]
[118.83995819 49.56370544]
[115.59969330 64.20954895]
[112.35942841 78.85539246]
[109.11915588 93.50122833]
[106.10705566 108.19569397]
[103.32383728 122.93521881]
[100.54061890 137.67474365]
[109.18026733 150.63601685]
[106.14772034 165.54434204]
[93.73789215 173.70104980]
[90.95467377 188.44058228]
[104.72180176 194.56944275]
[116.70405579 203.70849609]
[126.25524902 215.36488342]
[132.86030579 228.90998840]
[136.16299438 243.61335754]
[135.98524475 258.68203735]
[132.33662415 273.30340576]
[125.41388702 286.68893433]
[115.59038544 298.11676025]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 91]
[17 90]
[20 87]
[21 86]
[22 85]
[24 84]
[25 83]
[26 82]
[27 81]
[28 80]
[29 79]
[30 67]
[31 66]
[32 65]
[33 64]
[34 63]
[35 62]
[36 61]
[37 60]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[43 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
