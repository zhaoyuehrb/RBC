%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:22:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGGACCAGCCCGGGCUGCACCAGUGGGAGUGGCUCCACCCUUCCCACCUCAGAGCCAUGGGGAGCCAGGGCUCUGGCGGGGUGCCCUUGGUGCAGGCUCCCUACACAGUCCUGCUGCUGCCGCUGGGGACAAGCCGCCAAGACCCAGGGGCCCAGA\
) } def
/len { sequence length } bind def

/coor [
[82.86909485 141.27354431]
[81.98603058 126.29956055]
[74.27449036 113.43363190]
[61.48488617 105.59615326]
[48.69528580 97.75867462]
[35.90568161 89.92119598]
[23.11608124 82.08371735]
[10.25015163 74.37217712]
[-2.69086456 66.78731537]
[-18.50917053 66.48439789]
[-25.57700348 53.37351990]
[-38.51801682 45.78866196]
[-51.53287506 38.33121109]
[-64.62031555 31.00189209]
[-77.70775604 23.67257500]
[-90.79519653 16.34325600]
[-103.88263702 9.01393700]
[-116.52023315 11.75785065]
[-127.28392029 5.34247351]
[-130.65835571 -6.30769348]
[-143.59936523 -13.89255428]
[-156.54039001 -21.47741508]
[-169.48139954 -29.06227493]
[-182.42242432 -36.64713669]
[-204.18389893 -31.45596695]
[-220.64790344 -45.80499268]
[-235.60166931 -44.62810516]
[-250.55541992 -43.45122147]
[-265.50918579 -42.27433395]
[-280.46295166 -41.09744644]
[-295.41671753 -39.92056274]
[-310.37045288 -38.74367523]
[-323.52102661 -29.94747734]
[-336.81613159 -36.66235733]
[-351.76989746 -35.48546982]
[-363.24044800 -24.26915359]
[-379.14312744 -26.38685608]
[-387.27874756 -40.21405411]
[-381.40634155 -55.14370728]
[-366.03073120 -59.72306061]
[-352.94677734 -50.43922806]
[-337.99301147 -51.61611557]
[-325.91204834 -60.32813263]
[-311.54736328 -53.69743347]
[-296.59359741 -54.87432098]
[-281.63983154 -56.05120850]
[-266.68606567 -57.22809219]
[-251.73231506 -58.40497971]
[-236.77854919 -59.58186722]
[-221.82479858 -60.75875473]
[-220.06573486 -65.52770996]
[-217.32504272 -69.80857086]
[-225.41210938 -82.44183350]
[-233.49919128 -95.07508850]
[-241.58625793 -107.70835114]
[-249.67333984 -120.34160614]
[-257.76040649 -132.97486877]
[-265.84747314 -145.60812378]
[-273.93457031 -158.24137878]
[-287.89123535 -165.69265747]
[-288.23651123 -180.58325195]
[-296.32360840 -193.21650696]
[-304.41067505 -205.84977722]
[-319.21423340 -212.90570068]
[-320.23550415 -229.27302551]
[-306.42385864 -238.11442566]
[-291.98754883 -230.33464050]
[-291.77740479 -213.93684387]
[-283.69033813 -201.30358887]
[-275.60327148 -188.67033386]
[-262.22500610 -182.12268066]
[-261.30130005 -166.32846069]
[-253.21423340 -153.69520569]
[-245.12715149 -141.06193542]
[-237.04008484 -128.42868042]
[-228.95300293 -115.79542542]
[-220.86592102 -103.16216278]
[-212.77885437 -90.52890778]
[-204.69177246 -77.89565277]
[-192.73574829 -78.06682587]
[-182.08789062 -72.31101227]
[-175.52503967 -61.96651459]
[-174.83755493 -49.58815002]
[-161.89654541 -42.00329208]
[-148.95552063 -34.41843033]
[-136.01451111 -26.83357048]
[-123.07349396 -19.24870872]
[-105.56744385 -20.10297203]
[-96.55331421 -4.07350349]
[-83.46587372 3.25581527]
[-70.37843323 10.58513355]
[-57.29099655 17.91445351]
[-44.20355606 25.24377060]
[-36.79249191 25.77099228]
[-30.93315887 32.84764481]
[-17.99214172 40.43250656]
[-3.09946418 40.19290924]
[4.89399624 53.84630203]
[17.83501244 61.43116379]
[25.23429489 62.10379028]
[30.95355797 69.29412079]
[43.74316025 77.13159943]
[56.53276443 84.96907806]
[69.32236481 92.80655670]
[82.11196899 100.64403534]
[78.80517578 88.15554047]
[84.88275146 73.32583618]
[101.11060333 62.97629929]
[123.63472748 63.57544708]
[138.22027588 60.07376480]
[152.80581665 56.57208633]
[167.39137268 53.07040405]
[181.38137817 43.49355316]
[194.45678711 54.28569031]
[187.70603943 69.83766174]
[170.89305115 67.65595245]
[156.30751038 71.15763092]
[141.72195435 74.65931702]
[127.13640594 78.16099548]
[125.38556671 85.45376587]
[121.88388824 100.03931427]
[120.13304138 107.33209229]
[131.53913879 117.07381439]
[142.94522095 126.81553650]
[158.46392822 129.89454651]
[163.11685181 144.04373169]
[174.52293396 153.78544617]
[185.92903137 163.52717590]
[197.33511353 173.26889038]
[208.74121094 183.01062012]
[222.08798218 175.78372192]
[237.14463806 173.87013245]
[251.87486267 177.52865601]
[264.28652954 186.26448059]
[272.70108032 198.89619446]
[275.98046875 213.71543884]
[273.68121338 228.71803284]
[266.11428833 241.87501526]
[254.30303955 251.40698242]
[239.84481812 256.02484131]
[224.69502258 255.10404968]
[210.90251160 248.76914978]
[200.33261108 237.87687683]
[194.41481018 223.90031433]
[193.94946289 208.72969055]
[198.99948120 194.41670227]
[187.59339905 184.67498779]
[176.18730164 174.93325806]
[164.78121948 165.19154358]
[153.37513733 155.44981384]
[138.67225647 153.06761169]
[133.20350647 138.22161865]
[121.79741669 128.47990417]
[110.39132690 118.73818207]
[96.96001434 125.41650391]
[97.84307861 140.39048767]
[107.31146240 153.78010559]
[100.20508575 168.55952454]
[83.83437347 169.52496338]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 105]
[4 104]
[5 103]
[6 102]
[7 101]
[8 99]
[9 98]
[11 96]
[12 95]
[13 93]
[14 92]
[15 91]
[16 90]
[17 89]
[20 87]
[21 86]
[22 85]
[23 84]
[24 83]
[26 50]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
[34 42]
[35 41]
[52 79]
[53 78]
[54 77]
[55 76]
[56 75]
[57 74]
[58 73]
[59 72]
[61 70]
[62 69]
[63 68]
[109 119]
[110 118]
[111 117]
[112 116]
[122 154]
[123 153]
[124 152]
[126 150]
[127 149]
[128 148]
[129 147]
[130 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
