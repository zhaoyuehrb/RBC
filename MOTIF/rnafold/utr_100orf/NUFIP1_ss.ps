%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:48:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGCUCCACAGUCGCGUGCUAGACUCCGGACCCGCCAGUGGUAUGGCUGAGCCGACUAGUGAUUUCGAGACUCCUAUCGGGUGGCAUGCGUCUCCCGAGCUGACUCCCACGUUAGGGCCCCUGAGCGACACUGCCCCGCCGC\
) } def
/len { sequence length } bind def

/coor [
[59.64475632 91.51715088]
[74.64442444 91.61634827]
[87.69326782 99.00879669]
[76.14397430 89.43728638]
[64.59468079 79.86577606]
[53.04538727 70.29425812]
[38.08921432 73.98465729]
[23.99258804 68.22804260]
[16.08223915 55.42607880]
[17.21348763 40.59846115]
[5.66419649 31.02694702]
[-9.89846325 28.17840195]
[-14.76068401 14.09976196]
[-26.30997658 4.52824974]
[-37.85926819 -5.04326296]
[-49.40855789 -14.61477566]
[-60.95785141 -24.18628883]
[-72.50714111 -33.75780106]
[-84.05643463 -43.32931519]
[-95.60572815 -52.90082550]
[-107.15502167 -62.47233963]
[-122.03373718 -51.18582916]
[-146.51411438 -56.02262497]
[-161.03793335 -59.77212143]
[-175.56175232 -63.52161789]
[-194.64866638 -57.19732285]
[-207.95271301 -71.16661835]
[-222.62721252 -74.27454376]
[-237.30171204 -77.38247681]
[-247.60408020 -66.07723999]
[-262.08630371 -61.47702026]
[-276.82867432 -64.72182465]
[-287.89346313 -74.84241486]
[-292.37664795 -89.04686737]
[-307.05114746 -92.15480042]
[-321.72564697 -95.26273346]
[-336.40014648 -98.37065887]
[-349.51010132 -89.54431152]
[-365.00518799 -92.65523529]
[-373.69244385 -105.85778046]
[-370.41784668 -121.31910706]
[-357.12420654 -129.86628723]
[-341.69836426 -126.42842865]
[-333.29220581 -113.04515076]
[-318.61770630 -109.93722534]
[-303.94320679 -106.82929230]
[-289.26873779 -103.72136688]
[-279.41201782 -114.88875580]
[-265.19436646 -119.65474701]
[-250.40232849 -116.64441681]
[-239.02847290 -106.56809998]
[-234.19377136 -92.05696869]
[-219.51928711 -88.94904327]
[-204.84478760 -85.84111023]
[-196.73260498 -92.20853424]
[-186.23185730 -93.03533173]
[-176.83763123 -87.80155945]
[-171.81225586 -78.04543304]
[-157.28843689 -74.29593658]
[-142.76461792 -70.54644012]
[-136.73596191 -75.00798035]
[-138.43495178 -89.91145325]
[-124.67865753 -83.93106079]
[-118.65000153 -88.39260101]
[-117.99114227 -103.37812042]
[-117.33227539 -118.36363983]
[-116.67341614 -133.34916687]
[-116.01454926 -148.33468628]
[-128.23880005 -157.89227295]
[-132.47824097 -172.81898499]
[-127.10272217 -187.37519836]
[-114.17924500 -195.96376038]
[-98.67714691 -195.28218079]
[-86.55729675 -185.59255981]
[-82.48003387 -170.62072754]
[-88.01313782 -156.12368774]
[-101.02902985 -147.67582703]
[-101.68788910 -132.69030762]
[-102.34675598 -117.70478058]
[-103.00561523 -102.71925354]
[-103.66448212 -87.73373413]
[-97.58350372 -74.02162933]
[-86.03421783 -64.45011902]
[-74.48492432 -54.87860489]
[-62.93563080 -45.30709457]
[-51.38633728 -35.73558044]
[-39.83704758 -26.16406822]
[-28.28775406 -16.59255600]
[-16.73846245 -7.02104235]
[-5.18917084 2.55047035]
[9.54740524 4.71439743]
[15.23570919 19.47765541]
[26.78500175 29.04916763]
[41.14482117 25.18476868]
[55.19281769 30.58085251]
[63.46645355 43.36366653]
[62.61690140 58.74496841]
[74.16619110 68.31648254]
[85.71548462 77.88799286]
[97.26477814 87.45951080]
[111.34760284 92.62419891]
[126.34669495 92.78896332]
[141.34579468 92.95373535]
[156.34487915 93.11849976]
[167.46559143 81.88883209]
[183.26988220 81.89533997]
[194.38134766 93.13416290]
[194.20774841 108.93750000]
[182.85208130 119.92951202]
[167.05146790 119.58883667]
[156.18011475 108.11759186]
[141.18103027 107.95282745]
[126.18193054 107.78806305]
[111.18283844 107.62329865]
[105.25284576 121.40136719]
[115.68325043 132.18128967]
[126.11366272 142.96119690]
[136.54406738 153.74111938]
[149.99420166 152.41566467]
[161.57069397 159.00453186]
[167.13377380 170.89241028]
[164.84445190 183.61822510]
[175.03553772 194.62466431]
[190.94694519 196.67562866]
[199.14048767 210.46858215]
[193.33078003 225.42272949]
[177.97453308 230.06655884]
[164.85173035 220.83769226]
[164.02908325 204.81575012]
[153.83799744 193.80929565]
[137.05541992 193.90441895]
[125.13530731 181.61654663]
[125.76414490 164.17152405]
[115.33374023 153.39161682]
[104.90333557 142.61169434]
[94.47293091 131.83177185]
[85.41870880 143.79092407]
[71.68530273 149.82362366]
[56.75290298 148.40115356]
[44.40554047 139.88395691]
[37.77216721 126.43038940]
[38.53374863 111.44973755]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 100]
[4 99]
[5 98]
[6 97]
[10 93]
[11 92]
[13 90]
[14 89]
[15 88]
[16 87]
[17 86]
[18 85]
[19 84]
[20 83]
[21 82]
[23 60]
[24 59]
[25 58]
[27 54]
[28 53]
[29 52]
[34 47]
[35 46]
[36 45]
[37 44]
[64 81]
[65 80]
[66 79]
[67 78]
[68 77]
[101 114]
[102 113]
[103 112]
[104 111]
[115 136]
[116 135]
[117 134]
[118 133]
[122 130]
[123 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
