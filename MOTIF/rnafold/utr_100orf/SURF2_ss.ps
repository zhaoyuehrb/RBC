%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:26:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUUCUGCGAGCGGCUUCCGCCGGGCUGCUCCGCGGGCGCGUCGGCCAUGAGCGAGUUGCCGGGCGACGUGCGGGCGUUUCUGCGGGAGCACCCGAGCCUGCGGCUCCAGACGGACGCCCGCAAGGUGAGGUGCAUCCUGACAGGUC\
) } def
/len { sequence length } bind def

/coor [
[107.85056305 137.32196045]
[97.57582092 138.57444763]
[87.20424652 137.01298523]
[77.50226593 132.67869568]
[69.20649719 125.82018280]
[62.96788406 116.88029480]
[51.15638351 126.12628937]
[39.34488297 135.37228394]
[27.53337860 144.61827087]
[15.72187710 153.86427307]
[4.00850296 163.23426819]
[-7.60544109 172.72723389]
[-19.21938515 182.22018433]
[-30.83332825 191.71315002]
[-42.44727325 201.20611572]
[-54.06121826 210.69908142]
[-65.67516327 220.19203186]
[-77.28910828 229.68499756]
[-80.31736755 245.43965149]
[-94.58932495 252.76704407]
[-109.15676117 246.04621887]
[-112.84477997 230.43283081]
[-102.82424927 217.90412903]
[-86.78206635 218.07104492]
[-75.16812134 208.57809448]
[-63.55417633 199.08512878]
[-51.94023514 189.59216309]
[-40.32629013 180.09921265]
[-28.71234512 170.60624695]
[-17.09840202 161.11328125]
[-5.48445797 151.62033081]
[-2.27428198 144.90655518]
[6.47588253 142.05276489]
[18.28738403 132.80677795]
[30.09888649 123.56078339]
[41.91038895 114.31478882]
[53.72188950 105.06879425]
[54.51219559 90.08962250]
[43.73920059 79.65206909]
[32.96620560 69.21451569]
[22.19320869 58.77695465]
[11.42021465 48.33940125]
[0.64721990 37.90184402]
[-10.12577534 27.46428680]
[-20.89876938 17.02673149]
[-29.30005836 13.26803684]
[-31.78594017 6.25373602]
[-42.33648682 -4.40862703]
[-50.65666199 -8.34360981]
[-52.99411011 -15.40876102]
[-63.31751633 -26.29119110]
[-71.55287933 -30.40071297]
[-73.74085236 -37.51357269]
[-83.83253479 -48.61123276]
[-99.72485352 -50.80522156]
[-107.79401398 -64.67130280]
[-101.85004425 -79.57260132]
[-86.45264435 -84.07812500]
[-73.41339111 -74.73160553]
[-72.73487091 -58.70291138]
[-62.64319611 -47.60525131]
[-52.43508530 -36.61459732]
[-42.11167908 -25.73216820]
[-31.67412186 -14.95917320]
[-21.12357712 -4.29681015]
[-10.46121407 6.25373602]
[0.31178129 16.69129181]
[11.08477592 27.12884903]
[21.85777092 37.56640625]
[32.63076782 48.00395966]
[43.40375900 58.44151688]
[54.17675400 68.87907410]
[64.94975281 79.31662750]
[73.28670502 70.06368256]
[83.89454651 63.88182831]
[95.70912933 61.26649475]
[107.58223724 62.36149979]
[118.39313507 66.95527649]
[127.15431213 74.51114655]
[133.10160828 84.22779846]
[135.76031494 95.12329102]
[150.71949768 96.22922516]
[165.67866516 97.33515930]
[180.63784790 98.44109344]
[195.60784912 99.38925934]
[210.58700562 100.17956543]
[225.56617737 100.96987152]
[240.54534912 101.76016998]
[255.52450562 102.55047607]
[270.51116943 103.18282318]
[285.50366211 103.65714264]
[300.49618530 104.13146973]
[315.48867798 104.60578918]
[330.48117065 105.08011627]
[339.20733643 94.76696014]
[352.09753418 91.43252563]
[364.36532593 96.08252716]
[371.58859253 106.80011749]
[386.56774902 107.59042358]
[401.54693604 108.38072968]
[416.52609253 109.17102814]
[431.51275635 109.80337524]
[446.50524902 110.27770233]
[461.49774170 110.75202179]
[476.49441528 111.06826782]
[491.49359131 111.22640228]
[506.49359131 111.22640228]
[521.49273682 111.06826782]
[536.49194336 110.91013336]
[550.32360840 102.10012817]
[564.74218750 109.91268921]
[564.91510010 126.31092834]
[550.66442871 134.42573547]
[536.65002441 125.90930176]
[521.65087891 126.06743622]
[506.65173340 126.22556305]
[499.95104980 129.46301270]
[491.33544922 126.22556305]
[476.33630371 126.06743622]
[469.56884766 129.16288757]
[461.02343750 125.74452209]
[446.03094482 125.27020264]
[431.03842163 124.79587555]
[424.20724487 127.74796295]
[415.73577881 124.15019989]
[400.75662231 123.35989380]
[385.77746582 122.56958771]
[370.79827881 121.77928925]
[358.82427979 133.54510498]
[341.70782471 133.03306580]
[330.00683594 120.07260895]
[315.01434326 119.59828949]
[300.02185059 119.12397003]
[285.02935791 118.64964294]
[270.03686523 118.17532349]
[263.20565796 121.12741089]
[254.73420715 117.52964020]
[239.75503540 116.73934174]
[224.77587891 115.94903564]
[209.79670715 115.15872955]
[194.81753540 114.36843109]
[187.92562866 117.17583466]
[179.53190613 113.40026855]
[164.57273865 112.29433441]
[149.61355591 111.18840027]
[134.65438843 110.08246613]
[131.14344788 119.23218536]
[125.23096466 127.21988678]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 37]
[7 36]
[8 35]
[9 34]
[10 33]
[11 31]
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[17 25]
[18 24]
[38 73]
[39 72]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[47 65]
[48 64]
[50 63]
[51 62]
[53 61]
[54 60]
[81 146]
[82 145]
[83 144]
[84 143]
[85 141]
[86 140]
[87 139]
[88 138]
[89 137]
[90 135]
[91 134]
[92 133]
[93 132]
[94 131]
[98 128]
[99 127]
[100 126]
[101 125]
[102 123]
[103 122]
[104 121]
[105 119]
[106 118]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
