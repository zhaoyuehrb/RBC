%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:33:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCUCCGGCCGGCGGCCCCCGAGCGCCGCGUCCCGCCGCGCUGCCCCGCAGCCUGUCCCGCCUGCGCGAGUGCCCGGGCCGCUCCCGCAUCGUGCUGG\
) } def
/len { sequence length } bind def

/coor [
[113.55018616 421.92990112]
[103.41329956 433.83691406]
[87.98577118 436.39138794]
[74.55200195 428.38714600]
[69.45501709 413.60354614]
[75.10145569 399.02096558]
[88.82523346 391.52484131]
[91.60845184 376.78530884]
[94.39166260 362.04577637]
[97.17488098 347.30624390]
[99.95809937 332.56671143]
[102.51174927 317.78567505]
[104.83522797 302.96673584]
[105.30171967 287.97399902]
[103.90402985 273.03924561]
[102.50634766 258.10452271]
[101.10865784 243.16976929]
[99.71096802 228.23503113]
[98.31327820 213.30029297]
[96.91558838 198.36555481]
[86.59214783 193.04238892]
[80.12194824 183.25097656]
[79.25532532 171.42562866]
[84.33146667 160.57633972]
[94.16172791 153.52268982]
[93.69522858 138.52993774]
[93.22872925 123.53720093]
[92.76222992 108.54445648]
[92.06262207 93.56078339]
[91.13008118 78.58979797]
[90.19753265 63.61881256]
[89.26499176 48.64782715]
[88.33244324 33.67684555]
[75.04083252 22.43513489]
[73.92494965 5.39889574]
[85.18556213 -6.98407364]
[83.78787994 -21.91881371]
[71.32978058 -37.61532211]
[79.71249390 -54.92263412]
[77.38902283 -69.74159241]
[67.60748291 -82.17670441]
[73.27996826 -95.94886017]
[70.95649719 -110.76781464]
[68.63301849 -125.58677673]
[66.30954742 -140.40573120]
[63.98607635 -155.22468567]
[55.55926132 -169.93608093]
[67.36295319 -182.10609436]
[82.32494354 -174.13269043]
[78.80503082 -157.54815674]
[81.12850952 -142.72920227]
[83.45198059 -127.91024780]
[85.77545166 -113.09129333]
[88.09892273 -98.27233124]
[97.71427155 -86.89717102]
[92.20797729 -72.06506348]
[94.53144836 -57.24610901]
[103.46632385 -51.85683441]
[107.96594238 -42.19724274]
[106.27416992 -31.45160675]
[98.72261810 -23.31650352]
[100.12030792 -8.38176250]
[111.16812134 -1.55331850]
[116.29112244 10.59402275]
[113.38487244 23.65367126]
[103.30342865 32.74430084]
[104.23597717 47.71528244]
[105.16851807 62.68626785]
[106.10106659 77.65724945]
[107.03360748 92.62823486]
[110.69341278 99.98356628]
[107.75497437 108.07795715]
[108.22147369 123.07070160]
[108.68797302 138.06344604]
[109.15446472 153.05619812]
[123.41487122 165.31364441]
[124.35681152 183.77951050]
[111.85032654 196.96786499]
[113.24801636 211.90260315]
[114.64570618 226.83734131]
[116.04339600 241.77207947]
[117.44108582 256.70681763]
[118.83877563 271.64157104]
[120.23646545 286.57629395]
[130.16174316 275.32955933]
[144.74832153 271.83218384]
[158.69445801 277.35534668]
[166.93116760 289.89157104]
[166.46467590 304.88430786]
[157.46453857 316.88421631]
[143.20202637 321.52969360]
[128.86108398 317.13226318]
[119.65418243 305.29019165]
[117.33071136 320.10916138]
[119.10956573 329.25399780]
[114.69762421 335.34994507]
[111.91441345 350.08947754]
[109.13119507 364.82897949]
[106.34797668 379.56851196]
[103.56475830 394.30804443]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 100]
[8 99]
[9 98]
[10 97]
[11 96]
[12 94]
[13 93]
[14 84]
[15 83]
[16 82]
[17 81]
[18 80]
[19 79]
[20 78]
[25 75]
[26 74]
[27 73]
[28 72]
[29 70]
[30 69]
[31 68]
[32 67]
[33 66]
[36 62]
[37 61]
[39 57]
[40 56]
[42 54]
[43 53]
[44 52]
[45 51]
[46 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
