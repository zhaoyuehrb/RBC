%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:37:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACAGAGUUGGGAGUGACUCCAGAGCCUCCAGCGAGAUGCUGCUGAUUCUGCUGUCAGUGGCCCUGCUGGCCCUGAGCUCAGCUGAGAGUUCAAGUGAAGAUGUCAGCCAGGAAGAAUCUCUCUUCCUAAUAUCAG\
) } def
/len { sequence length } bind def

/coor [
[108.71524811 171.97277832]
[110.09536743 160.06150818]
[98.67819977 150.33277893]
[87.26103210 140.60404968]
[72.27657318 141.28677368]
[61.79138565 152.01341248]
[57.98596573 160.41432190]
[50.94332886 162.86146545]
[40.21668625 173.34664917]
[29.49004555 183.83183289]
[24.98030281 201.64407349]
[7.87862206 205.41378784]
[-2.60656476 216.14042664]
[-13.09175110 226.86706543]
[-23.57693863 237.59370422]
[-30.32489395 253.14689636]
[-47.13827133 250.96820068]
[-49.69912720 234.20877075]
[-34.30358124 227.10852051]
[-23.81839371 216.38188171]
[-13.33320713 205.65524292]
[-2.84802055 194.92860413]
[-2.65615439 182.77969360]
[6.06671906 173.75341797]
[19.00485802 173.10519409]
[29.73150063 162.62001038]
[40.45814514 152.13482666]
[51.06474686 141.52822876]
[61.54993057 130.80157471]
[61.03781509 115.81032562]
[49.84505844 105.82422638]
[38.65230560 95.83811951]
[27.45954895 85.85202026]
[16.26679420 75.86592102]
[7.70138550 72.44680786]
[4.93623352 65.52285004]
[-6.02630615 55.28454971]
[-18.97584724 54.93100739]
[-27.90192795 46.10562897]
[-28.37029266 33.96424866]
[-39.09693527 23.47905922]
[-49.82357788 12.99387360]
[-60.55022049 2.50868678]
[-71.27686310 -7.97650003]
[-82.00350189 -18.46168709]
[-92.73014832 -28.94687271]
[-103.45678711 -39.43206024]
[-114.18343353 -49.91724777]
[-129.98185730 -49.48676300]
[-141.39982605 -60.41405106]
[-141.66325378 -76.21614075]
[-130.61585999 -87.51794434]
[-114.81185913 -87.61428833]
[-103.62749481 -76.44802094]
[-103.69824982 -60.64389038]
[-92.97160339 -50.15870285]
[-82.24496460 -39.67351532]
[-71.51831818 -29.18832970]
[-60.79167557 -18.70314217]
[-50.06503296 -8.21795559]
[-39.33839035 2.26723099]
[-28.61174774 12.75241756]
[-17.88510513 23.23760414]
[-0.70204502 26.61704636]
[4.21199131 44.32201004]
[15.17453098 54.56030655]
[26.25289536 64.67316437]
[37.44565201 74.65926361]
[48.63840485 84.64536285]
[59.83116150 94.63146973]
[71.02391815 104.61756897]
[74.04485321 89.97579193]
[83.54862976 79.47354889]
[96.31923676 75.48731232]
[108.57814026 78.36942291]
[118.30686951 66.95225525]
[128.03559875 55.53507996]
[137.76432800 44.11790848]
[147.49305725 32.70074081]
[157.22180176 21.28356934]
[166.95053101 9.86639786]
[165.44291687 -5.86581993]
[175.56555176 -18.00287247]
[191.31282043 -19.34405899]
[203.34217834 -9.09368134]
[204.51679993 6.66689682]
[194.13981628 18.58720207]
[178.36769104 19.59512901]
[168.63896179 31.01230049]
[158.91023254 42.42947006]
[149.18150330 53.84664154]
[139.45277405 65.26380920]
[129.72404480 76.68098450]
[119.99530792 88.09815216]
[122.17033386 114.15836334]
[96.98976135 129.18687439]
[108.40692902 138.91560364]
[119.82410431 148.64433289]
[138.56396484 146.36911011]
[152.83023071 158.24194336]
[153.95680237 176.45054626]
[165.80493164 185.64955139]
[177.65307617 194.84854126]
[189.50120544 204.04754639]
[201.34934998 213.24655151]
[209.47616577 210.62396240]
[217.87847900 211.47070312]
[225.15371704 215.56921387]
[230.11799622 222.16552734]
[231.99870300 230.10690308]
[230.55390930 238.04287720]
[241.51644897 248.28117371]
[252.47898865 258.51947021]
[263.44152832 268.75775146]
[274.40408325 278.99606323]
[285.36660767 289.23434448]
[296.32916260 299.47265625]
[312.34741211 300.36416626]
[321.51977539 313.52648926]
[316.80999756 328.86264038]
[301.83102417 334.60803223]
[288.07342529 326.35528564]
[286.09085083 310.43518066]
[275.12832642 300.19689941]
[264.16577148 289.95858765]
[253.20323181 279.72030640]
[242.24069214 269.48199463]
[231.27815247 259.24371338]
[220.31561279 249.00541687]
[198.85729980 246.42941284]
[192.15034485 225.09468079]
[180.30221558 215.89569092]
[168.45407104 206.69668579]
[156.60594177 197.49768066]
[144.75779724 188.29867554]
[133.91696167 192.16386414]
[122.44461060 190.25737000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 98]
[3 97]
[4 96]
[5 29]
[6 28]
[8 27]
[9 26]
[10 25]
[12 22]
[13 21]
[14 20]
[15 19]
[30 71]
[31 70]
[32 69]
[33 68]
[34 67]
[36 66]
[37 65]
[40 63]
[41 62]
[42 61]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[75 94]
[76 93]
[77 92]
[78 91]
[79 90]
[80 89]
[81 88]
[101 135]
[102 134]
[103 133]
[104 132]
[105 131]
[111 129]
[112 128]
[113 127]
[114 126]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
