%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCGAGCACCUUCUCUUCACUCAGCCAACUGCUCGCUCGCUCACCUCCCUCCUCUGCACCAUGACCACCUGCAGCCGCCAGUUCACCUCCUCCAGCUCCAUGAAGGGCUCCUGCGGCAUCGGGGGCGGCAUCGGGGGCGGCUCCAGCCGCAUCUCCUCCG\
) } def
/len { sequence length } bind def

/coor [
[72.19792175 143.24163818]
[76.28125763 128.80812073]
[80.36459351 114.37460327]
[72.87340546 114.01113892]
[62.37014389 124.72008514]
[51.86688232 135.42903137]
[41.36362076 146.13796997]
[30.86036301 156.84692383]
[20.35710144 167.55586243]
[24.95624733 183.41363525]
[20.96763039 199.33926392]
[9.56790161 211.02310181]
[-6.07407618 215.35246277]
[-21.67770004 211.24049377]
[-31.97132492 222.15110779]
[-28.96696281 237.37455750]
[-35.51504135 251.44233704]
[-49.09768677 258.94509888]
[-64.49209595 256.99786377]
[-75.77880859 246.34939575]
[-78.61785126 231.09425354]
[-71.91754913 217.09832764]
[-58.25431061 209.74336243]
[-42.88193130 211.85748291]
[-32.58830643 200.94686890]
[-37.36380386 188.12388611]
[-36.13212967 174.42953491]
[-29.07750511 162.55052185]
[-17.53216934 154.84211731]
[-3.72511578 152.86132812]
[9.64815617 157.05261230]
[20.15141678 146.34365845]
[30.65467644 135.63471985]
[41.15793610 124.92576599]
[51.66119766 114.21681976]
[62.16445541 103.50787354]
[47.65520859 99.70238495]
[35.50994110 90.89940643]
[27.37842751 78.29470825]
[24.36523056 63.60046768]
[26.87965012 48.81271362]
[34.58013916 35.94016647]
[46.42068481 26.73139191]
[60.79290009 22.43728447]
[75.74451447 23.64114189]
[89.24453735 30.17943573]
[99.45917511 41.16402435]
[105.00090027 55.10279465]
[105.11694336 70.10234833]
[99.79003906 84.12763214]
[106.78069305 70.85620117]
[113.77133942 57.58477783]
[120.76199341 44.31335068]
[116.31143188 29.38585091]
[123.59000397 16.02632141]
[137.84852600 11.87538147]
[144.83917236 -1.39604521]
[151.82983398 -14.66747189]
[151.48957825 -19.10891724]
[152.50631714 -23.01939964]
[154.53822327 -26.03130531]
[157.15803528 -27.92933273]
[159.91145325 -28.66526604]
[167.90953064 -41.35506439]
[169.85357666 -50.33178711]
[176.18772888 -54.21128082]
[184.43037415 -66.74359894]
[186.54812622 -75.68093872]
[192.95632935 -79.43687439]
[201.44042969 -91.80699921]
[209.92453003 -104.17712402]
[218.40863037 -116.54724884]
[215.72114563 -131.89048767]
[224.50144958 -144.31469727]
[239.14544678 -146.78225708]
[247.62954712 -159.15238953]
[256.11364746 -171.52250671]
[264.59774780 -183.89263916]
[273.08184814 -196.26275635]
[275.37252808 -205.15734863]
[281.85235596 -208.78831482]
[290.57473755 -220.99159241]
[285.07595825 -231.14546204]
[283.79299927 -242.56933594]
[286.87481689 -253.59078979]
[293.83419800 -262.61083984]
[303.62432861 -268.33593750]
[314.79617310 -269.96340942]
[325.71276855 -267.29385376]
[335.12997437 -278.96932983]
[344.54714966 -290.64480591]
[353.96432495 -302.32028198]
[356.60580444 -317.91943359]
[370.61856079 -322.96832275]
[380.03576660 -334.64379883]
[378.10427856 -350.32962036]
[387.89578247 -362.73532104]
[403.60116577 -364.50085449]
[415.90264893 -354.57873535]
[417.50204468 -338.85559082]
[407.45040894 -326.65966797]
[391.71124268 -325.22662354]
[382.29403687 -313.55114746]
[380.32614136 -298.78710938]
[365.63980103 -292.90310669]
[356.22262573 -281.22763062]
[346.80541992 -269.55215454]
[337.38824463 -257.87667847]
[343.31826782 -240.20524597]
[337.40759277 -222.37010193]
[321.85250854 -211.56755066]
[302.77801514 -212.26921082]
[294.05563354 -200.06593323]
[285.45199585 -187.77865601]
[276.96786499 -175.40852356]
[268.48376465 -163.03840637]
[259.99966431 -150.66827393]
[251.51556396 -138.29815674]
[254.48806763 -123.74824524]
[246.06019592 -111.08232117]
[230.77876282 -108.06314850]
[222.29466248 -95.69302368]
[213.81054688 -83.32289886]
[205.32644653 -70.95276642]
[196.96269226 -58.50096512]
[188.72004700 -45.96864700]
[180.59931946 -33.35699844]
[172.60125732 -20.66720009]
[165.10125732 -7.67681932]
[158.11059570 5.59460735]
[151.11994934 18.86603355]
[155.76148987 32.97247696]
[148.86102295 46.53117371]
[134.03341675 51.30400085]
[127.04277039 64.57543182]
[120.05211639 77.84685516]
[113.06146240 91.11828613]
[114.51362610 106.04782867]
[123.93080902 117.72329712]
[133.34799194 129.39877319]
[142.76516724 141.07424927]
[152.18235779 152.74972534]
[167.66740417 158.14834595]
[170.46836853 174.30651855]
[157.70384216 184.60209656]
[142.50489807 178.44387817]
[140.50688171 162.16690063]
[131.08970642 150.49142456]
[121.67251587 138.81594849]
[112.25533295 127.14048004]
[102.83815002 115.46500397]
[95.34696960 115.10153961]
[98.01380157 129.86256409]
[100.68063354 144.62359619]
[109.99318695 156.38270569]
[111.45396423 171.31140137]
[104.59749603 184.65264893]
[91.60860443 192.15522766]
[76.62622070 191.42843628]
[64.42451477 182.70385742]
[58.89157104 168.76159668]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 36]
[5 35]
[6 34]
[7 33]
[8 32]
[9 31]
[14 25]
[15 24]
[50 137]
[51 136]
[52 135]
[53 134]
[56 131]
[57 130]
[58 129]
[63 128]
[64 127]
[66 126]
[67 125]
[69 124]
[70 123]
[71 122]
[72 121]
[75 118]
[76 117]
[77 116]
[78 115]
[79 114]
[81 113]
[82 112]
[89 108]
[90 107]
[91 106]
[92 105]
[94 103]
[95 102]
[138 151]
[139 150]
[140 149]
[141 148]
[142 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
