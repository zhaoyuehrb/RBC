%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:46:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAACAAACAUUGAUUGCUUUCCUAUCUUACAUUUUUUUAGGAGUGCGAAAUAAGUGAGUCAUCAUGAAUUGGGAAAAUGAGAGCUCCCCAAAAGAGUUUAUACUACUUGGCUUCUCAGAUAGGGCUUGGCUACAAAUGCCCCUUUUUGUGGUCCUGUUAAUAU\
) } def
/len { sequence length } bind def

/coor [
[158.37147522 205.27993774]
[149.89872742 217.65783691]
[138.55189514 227.46852112]
[125.07994843 234.06445312]
[110.37205505 237.01028442]
[95.39900208 236.11157227]
[81.14906311 231.42762756]
[68.56278992 223.26762390]
[58.47092056 212.17013550]
[51.53955841 198.86766052]
[48.22619247 184.23817444]
[48.74952316 169.24731445]
[53.07500458 154.88450623]
[60.91714478 142.09776306]
[71.76115417 131.72895813]
[81.97548676 120.74409485]
[67.74514008 125.48720551]
[53.51478958 130.23033142]
[39.28443909 134.97343445]
[28.63894844 146.67745972]
[14.11811924 143.36161804]
[-0.11223076 148.10473633]
[-14.34258080 152.84785461]
[-28.57293129 157.59095764]
[-42.80327988 162.33407593]
[-57.03363037 167.07719421]
[-58.46878052 182.23834229]
[-65.95210266 195.50181580]
[-78.18706512 204.56964111]
[-93.05389404 207.87077332]
[-107.97680664 204.83326721]
[-120.37033081 195.98336792]
[-128.08720398 182.85441589]
[-129.79043579 167.72103882]
[-125.18494415 153.20521545]
[-115.06863403 141.82188416]
[-101.19422913 135.54327393]
[-85.96556091 135.45721436]
[-72.02107239 141.57858276]
[-61.77674484 152.84684753]
[-47.54639435 148.10372925]
[-33.31604385 143.36061096]
[-19.08569527 138.61749268]
[-4.85534573 133.87438965]
[9.37500381 129.13127136]
[19.00264549 117.76651001]
[34.54132462 120.74308777]
[48.77167511 115.99997711]
[63.00202560 111.25685883]
[77.23237610 106.51374054]
[80.47126770 91.86759949]
[69.56788635 81.56632996]
[58.66449738 71.26506042]
[43.09006500 71.53854370]
[32.17922592 60.93626404]
[32.01448441 46.08673859]
[21.11109543 35.78546906]
[10.20770931 25.48419952]
[-0.69567758 15.18292904]
[-16.76659393 11.91831875]
[-21.71753693 -3.71562457]
[-10.45540142 -15.63604069]
[5.43429375 -11.58022785]
[9.60559177 4.27954245]
[20.50897980 14.58081245]
[31.41236496 24.88208199]
[42.31575394 35.18334961]
[57.15069962 34.50518799]
[68.35503387 44.79681778]
[68.96576691 60.36167145]
[79.86915588 70.66294098]
[90.77253723 80.96421051]
[98.23899078 80.25557709]
[87.82029724 69.46433258]
[89.76113129 54.59042358]
[102.60003662 46.83396912]
[116.66925812 52.03561401]
[121.37460327 66.27849579]
[113.17188263 78.83829498]
[120.63832855 78.12966156]
[129.40911865 65.96112061]
[138.17990112 53.79257965]
[146.95068359 41.62403870]
[155.72146606 29.45549965]
[164.37670898 17.20450974]
[172.91563416 4.87217045]
[181.45457458 -7.46016979]
[166.51260376 -6.14197445]
[154.90324402 -15.64054489]
[153.23654175 -30.54766083]
[162.46147156 -42.37562561]
[177.32560730 -44.38992691]
[189.36573792 -35.44367599]
[191.72650146 -20.63045311]
[201.60778809 -31.91584396]
[211.48907471 -43.20123672]
[221.26313782 -54.57962799]
[230.92909241 -66.04999542]
[240.59504700 -77.52036285]
[242.94245911 -93.75063324]
[258.27026367 -99.58074951]
[270.81054688 -89.01319122]
[267.66293335 -72.91894531]
[252.06541443 -67.85440063]
[242.39945984 -56.38403702]
[232.73350525 -44.91366959]
[230.81944275 -37.74073029]
[222.77447510 -33.31994629]
[212.89318848 -22.03455353]
[203.01188660 -10.74916077]
[193.78691101 1.07876372]
[185.24798584 13.41110420]
[176.70904541 25.74344444]
[175.48127747 33.06514740]
[167.88999939 38.22628403]
[159.11921692 50.39482117]
[150.34843445 62.56336212]
[141.57765198 74.73190308]
[132.80686951 86.90044403]
[135.48921204 101.65866089]
[147.98094177 109.96268463]
[160.47265625 118.26670837]
[172.96438599 126.57073975]
[185.45610046 134.87475586]
[197.94783020 143.17878723]
[210.43955994 151.48281860]
[222.93127441 159.78683472]
[235.42300415 168.09086609]
[235.32029724 153.09121704]
[246.86038208 143.50859070]
[261.58572388 146.36592102]
[268.70437622 159.56912231]
[262.99926758 173.44181824]
[248.65113831 177.81689453]
[260.30236816 187.26405334]
[271.95361328 196.71121216]
[283.60482788 206.15837097]
[295.25607300 215.60552979]
[310.21160889 211.46891785]
[324.73046875 216.94448853]
[333.22988892 229.92677307]
[332.44161987 245.42381287]
[322.66882324 257.47668457]
[307.66928101 261.45080566]
[293.21066284 255.81805420]
[284.85256958 242.74433899]
[285.80889893 227.25675964]
[274.15768433 217.80960083]
[262.50643921 208.36244202]
[250.85520935 198.91528320]
[239.20397949 189.46812439]
[227.11897278 180.58259583]
[214.62725830 172.27856445]
[202.13552856 163.97453308]
[189.64379883 155.67051697]
[177.15208435 147.36648560]
[164.66035461 139.06245422]
[152.16864014 130.75843811]
[139.67691040 122.45440674]
[127.18518829 114.15038300]
[134.16654968 127.42670441]
[146.32830811 136.20689392]
[155.85165405 147.79592896]
[162.10801697 161.42889404]
[164.68446350 176.20596313]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 50]
[17 49]
[18 48]
[19 47]
[21 45]
[22 44]
[23 43]
[24 42]
[25 41]
[26 40]
[51 72]
[52 71]
[53 70]
[56 67]
[57 66]
[58 65]
[59 64]
[80 119]
[81 118]
[82 117]
[83 116]
[84 115]
[85 113]
[86 112]
[87 111]
[94 110]
[95 109]
[96 108]
[97 106]
[98 105]
[99 104]
[120 160]
[121 159]
[122 158]
[123 157]
[124 156]
[125 155]
[126 154]
[127 153]
[128 152]
[134 151]
[135 150]
[136 149]
[137 148]
[138 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
