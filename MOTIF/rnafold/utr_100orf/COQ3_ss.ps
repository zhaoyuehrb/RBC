%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:57:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGAGGUGGGAUCGUUUGUCGCGAUGUGGAGUGGCCGUAAGCUGGGCUCCUCCGGGGGUUGGUUUUUAAGAGUGCUGGGGCCUGGAGGCUGUAAUACAAAAGCUGCGCGUCCCUUAAUUUCCU\
) } def
/len { sequence length } bind def

/coor [
[96.01367950 243.22340393]
[95.64556122 228.22792053]
[95.27744293 213.23243713]
[94.90932465 198.23695374]
[94.54120636 183.24148560]
[83.61033630 173.18902588]
[83.02339935 157.98672485]
[93.64144897 146.58958435]
[93.27333069 131.59410095]
[92.90521240 116.59861755]
[86.42541504 112.82207489]
[78.87213898 125.78155518]
[65.91278076 118.22808075]
[73.46582794 105.26900482]
[66.98603058 101.49246216]
[53.75720978 108.56341553]
[40.52838898 115.63436890]
[27.29957008 122.70531464]
[14.07075214 129.77627563]
[8.05648518 144.64933777]
[-7.36201525 149.08210754]
[-20.35699654 139.67411804]
[-20.95981789 123.64240265]
[-8.70805073 113.28509521]
[6.99980116 116.54744720]
[20.22862053 109.47650146]
[33.45743942 102.40554810]
[46.68625641 95.33459473]
[59.91507721 88.26364899]
[60.37498093 80.77776337]
[61.29479218 65.80598450]
[61.75469971 58.32010269]
[49.49092865 49.68297958]
[37.22715378 41.04585648]
[24.96338272 32.40873337]
[9.22537041 30.78838158]
[3.27494693 17.13401413]
[-8.98882580 8.49689102]
[-21.25259781 -0.14023174]
[-33.51636887 -8.77735424]
[-48.15772629 -3.63825965]
[-63.01383209 -8.11886120]
[-72.37220764 -20.49627686]
[-72.63436890 -36.01113892]
[-63.69950867 -48.69766235]
[-49.00326538 -53.67762375]
[-34.19664001 -49.03612518]
[-24.97308731 -36.55791855]
[-24.87924767 -21.04112625]
[-12.61547470 -12.40400410]
[-0.35170251 -3.76688099]
[11.91206932 4.87024164]
[26.77289391 5.87280989]
[33.60050583 20.14496231]
[45.86427689 28.78208351]
[58.12804794 37.41920853]
[70.39182281 46.05633163]
[109.35621643 89.90032959]
[122.91605377 83.48700714]
[136.47589111 77.07367706]
[145.64297485 64.17890930]
[160.45642090 65.73173523]
[174.01626587 59.31840897]
[187.49636841 52.73916245]
[200.89474487 45.99499512]
[214.29310608 39.25082397]
[227.69146729 32.50665283]
[241.08982849 25.76248360]
[254.48820496 19.01831436]
[267.88656616 12.27414417]
[281.28491211 5.52997398]
[283.64566040 1.59863198]
[286.84466553 -1.04764867]
[290.35156250 -2.30260539]
[293.65863037 -2.25144482]
[296.34381104 -1.14517307]
[310.33871460 -6.54359865]
[324.33358765 -11.94202423]
[334.42443848 -24.12748337]
[349.08352661 -21.48912048]
[363.07839966 -26.88754463]
[373.16925049 -39.07300568]
[387.82830811 -36.43463898]
[401.82321167 -41.83306503]
[415.81811523 -47.23149109]
[429.81298828 -52.62991714]
[439.68579102 -65.72419739]
[455.92687988 -63.45297241]
[461.82885742 -48.15268707]
[451.32025146 -35.56296158]
[435.21142578 -38.63502502]
[421.21652222 -33.23659897]
[407.22164917 -27.83817482]
[393.22674561 -22.43974876]
[384.13690186 -10.64042091]
[368.47683716 -12.89265347]
[354.48193359 -7.49422789]
[345.39208984 4.30509996]
[329.73202515 2.05286789]
[315.73712158 7.45129347]
[301.74224854 12.84971905]
[288.02908325 18.92833900]
[274.63073730 25.67250824]
[261.23236084 32.41667938]
[247.83399963 39.16084671]
[234.43563843 45.90501785]
[221.03727722 52.64918900]
[207.63891602 59.39336014]
[194.24053955 66.13752747]
[189.63192749 72.01697540]
[180.42958069 72.87825012]
[166.86975098 79.29157257]
[158.67254639 91.72762299]
[142.88922119 90.63351440]
[129.32937622 97.04684448]
[115.76953888 103.46016693]
[107.90069580 116.23049927]
[108.26881409 131.22598267]
[108.63693237 146.22146606]
[119.80142212 157.08386230]
[119.96113586 172.29666138]
[109.53668976 182.87335205]
[109.90480804 197.86883545]
[110.27292633 212.86431885]
[110.64104462 227.85980225]
[111.00916290 242.85528564]
[113.67195129 262.05319214]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 126]
[2 125]
[3 124]
[4 123]
[5 122]
[8 119]
[9 118]
[10 117]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[32 57]
[33 56]
[34 55]
[35 54]
[37 52]
[38 51]
[39 50]
[40 49]
[58 116]
[59 115]
[60 114]
[62 112]
[63 111]
[64 109]
[65 108]
[66 107]
[67 106]
[68 105]
[69 104]
[70 103]
[71 102]
[76 101]
[77 100]
[78 99]
[80 97]
[81 96]
[83 94]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
