%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:21:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCAUAGACCGGCGGCGCGAGGCGGCGGGCGGCGGGCCUGGGCGGCAGCCGGCCCCGGCCGAGGAGAACGGCUCCCUGCCGCCCGGGGACGCGGCGG\
) } def
/len { sequence length } bind def

/coor [
[89.47743988 184.09432983]
[78.71611786 172.51980591]
[79.37461090 156.72924805]
[91.06225586 146.09089661]
[91.52875519 131.09815979]
[91.99525452 116.10540771]
[86.25825500 111.27458191]
[80.61511230 125.17259979]
[65.65348816 124.10034943]
[62.04988480 109.53964233]
[74.78427124 101.61292267]
[69.04727936 96.78209686]
[54.35281372 99.79420471]
[42.38744354 110.14507294]
[28.36571312 105.12110138]
[13.67125034 108.13320923]
[1.70588088 118.48407745]
[-12.31585121 113.46010590]
[-27.01031303 116.47221375]
[-37.01003647 129.01753235]
[-53.05247498 128.87722778]
[-62.83124542 116.15892792]
[-58.84490967 100.61901855]
[-44.15144730 94.17839813]
[-30.02241898 101.77774811]
[-15.32795715 98.76564026]
[-4.41363430 88.63021851]
[10.65914440 93.43874359]
[25.35360527 90.42663574]
[36.26792908 80.29121399]
[51.34070969 85.09973907]
[66.03517151 82.08763123]
[84.57172394 75.65417480]
[99.14965820 80.77203369]
[104.43527985 91.40626526]
[116.20419312 82.10612488]
[127.97310638 72.80597687]
[129.95336914 57.35553360]
[142.02119446 48.09151840]
[156.73863220 50.07460785]
[168.50755310 40.77446365]
[180.27647400 31.47432137]
[192.04537964 22.17417908]
[203.81430054 12.87403488]
[215.58320618 3.57389212]
[227.35212708 -5.72625113]
[239.12103271 -15.02639484]
[250.88995361 -24.32653809]
[262.65887451 -33.62668228]
[274.42776489 -42.92682266]
[286.19668579 -52.22696686]
[272.78863525 -66.60137939]
[274.11685181 -92.57504272]
[281.27764893 -105.75544739]
[288.43844604 -118.93584442]
[295.59924316 -132.11624146]
[294.63354492 -148.48693848]
[308.47509766 -157.28141785]
[322.88494873 -149.45268250]
[323.03942871 -133.05427551]
[308.77963257 -124.95545197]
[301.61883545 -111.77504730]
[294.45803833 -98.59465027]
[287.29724121 -85.41424561]
[291.85525513 -79.45818329]
[305.52923584 -61.58999634]
[320.12289429 -65.05764008]
[334.71658325 -68.52528381]
[349.31027222 -71.99293518]
[358.91497803 -84.84317780]
[374.95404053 -85.20185852]
[385.12362671 -72.79382324]
[381.62249756 -57.13746262]
[367.13644409 -50.24298859]
[352.77792358 -57.39925385]
[338.18423462 -53.93161011]
[323.59054565 -50.46396255]
[308.99688721 -46.99631882]
[295.49682617 -40.45805359]
[283.72793579 -31.15790939]
[271.95901489 -21.85776711]
[260.19009399 -12.55762386]
[248.42117310 -3.25748038]
[236.65226746 6.04266262]
[224.88334656 15.34280586]
[213.11444092 24.64295006]
[201.34552002 33.94309235]
[189.57661438 43.24323654]
[177.80769348 52.54338074]
[166.03878784 61.84352112]
[164.56582642 76.62073517]
[152.76296997 86.22005463]
[137.27325439 84.57489777]
[125.50433350 93.87503815]
[113.73542023 103.17517853]
[106.98799896 116.57190704]
[106.52149963 131.56465149]
[106.05500031 146.55738831]
[117.05865479 157.90177917]
[116.73418427 173.70274353]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 98]
[5 97]
[6 96]
[12 32]
[13 31]
[15 29]
[16 28]
[18 26]
[19 25]
[35 95]
[36 94]
[37 93]
[40 90]
[41 89]
[42 88]
[43 87]
[44 86]
[45 85]
[46 84]
[47 83]
[48 82]
[49 81]
[50 80]
[51 79]
[53 64]
[54 63]
[55 62]
[56 61]
[66 78]
[67 77]
[68 76]
[69 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
