%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:20:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAACUUCCGGUCACCAUCUUGAGUGACGACAGAGGCGGAGCUCCAACUGACAUGUUCAUUAAGGGCAGGGCUCCGAGGGCGCCACCUCGAGAGCGACGGCGGGCUACCCGGGGCGGGCUGAGGCAGGUUGUAGCCCCGCCCCGGGCCUUGG\
) } def
/len { sequence length } bind def

/coor [
[73.67576599 183.30740356]
[73.67576599 168.30740356]
[73.67576599 153.30740356]
[73.67576599 138.30740356]
[59.98514175 132.17822266]
[48.79684830 142.16932678]
[37.60855103 152.16041565]
[26.42025375 162.15151978]
[26.11474037 181.04582214]
[12.37419605 193.55096436]
[-5.83175611 192.12959290]
[-16.60043526 202.57159424]
[-27.36911392 213.01361084]
[-38.13779068 223.45561218]
[-48.90647125 233.89762878]
[-59.56737900 244.44964600]
[-70.11939240 255.11054993]
[-76.96441650 270.62124634]
[-93.76384735 268.33752441]
[-96.21991730 251.56242371]
[-80.78030396 244.55853271]
[-70.22828674 233.89762878]
[-67.74283600 226.88800049]
[-59.34848022 223.12895203]
[-48.57980347 212.68693542]
[-37.81112289 202.24491882]
[-27.04244423 191.80291748]
[-16.27376556 181.36090088]
[-18.57964516 170.11395264]
[-15.10722733 159.04466248]
[-6.61618996 150.96418762]
[4.84424877 147.98358154]
[16.42915726 150.96322632]
[27.61745262 140.97212219]
[38.80575180 130.98103333]
[49.99404526 120.98992920]
[50.14804459 105.99072266]
[39.16724014 95.77201843]
[28.18643951 85.55330658]
[17.20563698 75.33460236]
[6.22483349 65.11589813]
[-4.75596905 54.89718628]
[-15.73677158 44.67847824]
[-26.71757317 34.45977402]
[-25.01378632 49.36269379]
[-31.50609016 62.88489914]
[-44.20113754 70.87463379]
[-59.20113754 70.87878418]
[-71.90060425 62.89608002]
[-78.40039062 49.37747192]
[-76.70485687 34.47360992]
[-67.33457947 22.76045799]
[-53.16654205 17.83433533]
[-38.55239487 21.20682526]
[-47.46854782 9.14439297]
[-56.38469696 -2.91803837]
[-65.30084991 -14.98046970]
[-74.21699524 -27.04290199]
[-89.80550385 -30.83475113]
[-96.42922211 -45.44659424]
[-89.00700378 -59.66947174]
[-73.23254395 -62.59281158]
[-61.20665359 -51.97407532]
[-62.15456772 -35.95905304]
[-53.23841476 -23.89661980]
[-44.32226562 -11.83418941]
[-35.40611649 0.22824223]
[-26.48996353 12.29067326]
[-16.49886703 23.47896957]
[-5.51806402 33.69767761]
[5.46273851 43.91638565]
[16.44354057 54.13509369]
[27.42434311 64.35379791]
[38.40514755 74.57250977]
[49.38594818 84.79121399]
[60.36675262 95.00991821]
[72.91866302 75.11597443]
[93.00145721 67.12709808]
[112.08189392 72.05889893]
[121.24382782 60.18207550]
[130.40576172 48.30525208]
[133.19490051 39.54074860]
[139.87976074 36.28119659]
[149.28363037 24.59498596]
[151.90730286 8.99284267]
[165.91430664 3.92796969]
[175.31816101 -7.75823879]
[184.60154724 -19.54037666]
[193.76348877 -31.41720009]
[202.92543030 -43.29402161]
[204.57020569 -59.61047745]
[219.63212585 -66.09664917]
[232.61677551 -56.08012390]
[230.16665649 -39.86503983]
[214.80224609 -34.13208771]
[205.64030457 -22.25526428]
[196.47837830 -10.37844086]
[194.87316895 -3.11652017]
[187.00437927 1.64561820]
[177.60052490 13.33182716]
[175.64947510 28.09809494]
[160.96983337 33.99884415]
[151.56597900 45.68505096]
[142.28259277 57.46718979]
[133.12065125 69.34400940]
[123.95871735 81.22083282]
[129.80189514 93.79321289]
[129.46368408 107.65297699]
[142.60531616 114.88468170]
[155.74694824 122.11638641]
[168.88858032 129.34808350]
[182.03021240 136.57978821]
[195.17184448 143.81149292]
[208.31347656 151.04319763]
[221.45510864 158.27490234]
[234.59674072 165.50660706]
[247.73837280 172.73829651]
[260.88000488 179.97000122]
[274.09518433 187.06640625]
[287.38253784 194.02676392]
[300.66986084 200.98712158]
[313.60144043 192.70039368]
[328.94464111 192.00570679]
[342.57214355 199.08992004]
[350.81829834 212.04740906]
[351.46490479 227.39268494]
[344.33801270 240.99794006]
[331.35473633 249.20343018]
[316.00750732 249.80192566]
[302.42465210 242.63243103]
[294.25988770 229.62348938]
[293.70950317 214.27445984]
[280.42218018 207.31410217]
[267.13482666 200.35374451]
[259.70449829 200.03395081]
[253.64830017 193.11163330]
[240.50666809 185.87992859]
[227.36503601 178.64823914]
[214.22340393 171.41653442]
[201.08177185 164.18482971]
[187.94013977 156.95312500]
[174.79850769 149.72142029]
[161.65687561 142.48971558]
[148.51525879 135.25801086]
[135.37362671 128.02632141]
[122.23198700 120.79460907]
[114.62060547 130.26293945]
[102.98717499 136.65638733]
[88.67576599 138.30740356]
[88.67576599 153.30740356]
[88.67576599 168.30740356]
[88.67576599 183.30740356]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 36]
[6 35]
[7 34]
[8 33]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[16 22]
[17 21]
[37 76]
[38 75]
[39 74]
[40 73]
[41 72]
[42 71]
[43 70]
[44 69]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
[79 106]
[80 105]
[81 104]
[83 103]
[84 102]
[86 100]
[87 99]
[88 97]
[89 96]
[90 95]
[108 146]
[109 145]
[110 144]
[111 143]
[112 142]
[113 141]
[114 140]
[115 139]
[116 138]
[117 137]
[118 136]
[119 134]
[120 133]
[121 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
