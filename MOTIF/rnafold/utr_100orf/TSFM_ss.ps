%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:48:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGGUUUGUUGCCUCACCAGUGCGCCCGCCGGAGGGUGUUUAUCGCGGCUAGAGAGAUGUCGCUGCUGCGGUCGCUGCGCGUGUUUCUGGUCGCGCGGACCGGGAGCUACCCGGCUGGGUCUCUUCUGCGUCAGUCGCCCCAGCCAAGGCACACAU\
) } def
/len { sequence length } bind def

/coor [
[95.03728485 296.26956177]
[83.64173126 306.66885376]
[68.42910004 309.23385620]
[54.25366974 303.14608765]
[45.63877869 290.34814453]
[45.33340454 274.92379761]
[53.43498611 261.79492188]
[67.35834503 255.15084839]
[69.14362335 240.25746155]
[70.92889404 225.36408997]
[72.56601715 210.45368958]
[74.05482483 195.52775574]
[75.54362488 180.60182190]
[77.03243256 165.67590332]
[78.52124023 150.74996948]
[72.67081451 146.05715942]
[64.20838928 158.44212341]
[57.97936630 172.08760071]
[43.01593399 171.04086304]
[38.74737167 156.66104126]
[50.71620941 147.61962891]
[60.96995163 136.67153931]
[55.11952209 131.97871399]
[40.87221909 136.67066956]
[26.62491798 141.36262512]
[12.37761688 146.05456543]
[-1.86968505 150.74652100]
[-16.11698723 155.43846130]
[-23.01126671 169.65972900]
[-37.96939468 174.76168823]
[-52.11697769 167.71743774]
[-57.06050491 152.70620728]
[-49.86706924 138.63389587]
[-34.80441284 133.84934998]
[-20.80893517 141.19116211]
[-6.56163406 136.49922180]
[7.68566799 131.80726624]
[21.93297005 127.11531830]
[36.18027115 122.42337036]
[50.42757416 117.73142242]
[49.00928879 103.15795898]
[51.66296005 89.20102692]
[57.93681717 76.94129944]
[67.10869598 67.25903320]
[78.26091003 60.77144241]
[73.28662109 46.62024307]
[68.31233215 32.46904373]
[63.33804321 18.31784248]
[58.36375427 4.16664314]
[53.38946533 -9.98455620]
[48.41517639 -24.13575554]
[43.44088745 -38.28695679]
[38.46659851 -52.43815613]
[33.49230957 -66.58935547]
[28.51801872 -80.74055481]
[23.54372978 -94.89175415]
[11.66785431 -105.34518433]
[14.74671745 -119.91809845]
[9.77242851 -134.06929016]
[4.79813910 -148.22048950]
[-1.03104389 -155.32560730]
[-0.13132142 -162.70278931]
[-4.82327032 -176.95008850]
[-9.51521969 -191.19738770]
[-21.18091011 -201.88487244]
[-17.81291389 -216.39369202]
[-22.50486374 -230.64099121]
[-37.09309769 -236.27282715]
[-44.60296249 -249.98908997]
[-41.48852921 -265.31338501]
[-29.22034073 -275.01007080]
[-13.59105682 -274.50064087]
[-1.98034954 -264.02563477]
[0.12956063 -248.53105164]
[-8.25756168 -235.33294678]
[-3.56561232 -221.08564758]
[7.76447868 -211.41722107]
[4.73208237 -195.88934326]
[9.42403126 -181.64204407]
[14.11598015 -167.39474487]
[18.94933891 -153.19477844]
[23.92362785 -139.04357910]
[28.89791679 -124.89238739]
[40.41799927 -115.45114899]
[37.69492722 -99.86604309]
[42.66921616 -85.71484375]
[47.64350891 -71.56364441]
[52.61779785 -57.41244507]
[57.59208679 -43.26124573]
[62.56637573 -29.11004448]
[67.54066467 -14.95884514]
[72.51495361 -0.80764592]
[77.48924255 13.34355354]
[82.46353149 27.49475288]
[87.43782043 41.64595413]
[92.41210938 55.79715347]
[100.85279846 54.48571014]
[109.51564789 54.79550934]
[118.08761597 56.76283264]
[126.25010681 60.36323166]
[133.69079590 65.51081848]
[140.11552429 72.05977631]
[145.25979614 79.80826569]
[158.97105408 73.72538757]
[172.68231201 67.64250946]
[179.76994324 53.24997330]
[195.47174072 49.95859528]
[207.74261475 60.29323959]
[207.16941833 76.32604980]
[194.19184875 85.75802612]
[178.76518250 81.35376740]
[165.05392456 87.43664551]
[151.34266663 93.51952362]
[151.04443359 108.51655579]
[164.50302124 115.13973999]
[177.96160889 121.76292419]
[191.42018127 128.38610840]
[204.87876892 135.00929260]
[218.33735657 141.63247681]
[231.79594421 148.25566101]
[226.44609070 134.24211121]
[230.20649719 119.72112274]
[241.68574524 110.06570435]
[256.63626099 108.84854126]
[269.52612305 116.52001953]
[275.58584595 130.24153137]
[272.57315063 144.93588257]
[261.60287476 155.16587830]
[246.73396301 157.14619446]
[258.97354126 165.81758118]
[271.21310425 174.48895264]
[287.20578003 173.21865845]
[298.06460571 185.02822876]
[295.45959473 200.85836792]
[281.38909912 208.56555176]
[266.64678955 202.23748779]
[262.54171753 186.72853088]
[250.30215454 178.05714417]
[238.06257629 169.38577271]
[225.17276001 161.71423340]
[211.71417236 155.09104919]
[198.25558472 148.46786499]
[184.79701233 141.84469604]
[171.33842468 135.22151184]
[157.87983704 128.59832764]
[144.42126465 121.97514343]
[124.19971466 145.01089478]
[93.44717407 152.23876953]
[91.95836639 167.16470337]
[90.46955872 182.09063721]
[88.98075104 197.01657104]
[87.49194336 211.94250488]
[89.76239777 220.84794617]
[85.82227325 227.14935303]
[84.03700256 242.04273987]
[82.25173187 256.93612671]
[94.21034241 266.68267822]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 156]
[9 155]
[10 154]
[11 152]
[12 151]
[13 150]
[14 149]
[15 148]
[23 40]
[24 39]
[25 38]
[26 37]
[27 36]
[28 35]
[45 96]
[46 95]
[47 94]
[48 93]
[49 92]
[50 91]
[51 90]
[52 89]
[53 88]
[54 87]
[55 86]
[56 85]
[58 83]
[59 82]
[60 81]
[62 80]
[63 79]
[64 78]
[66 76]
[67 75]
[103 113]
[104 112]
[105 111]
[114 146]
[115 145]
[116 144]
[117 143]
[118 142]
[119 141]
[120 140]
[129 139]
[130 138]
[131 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
