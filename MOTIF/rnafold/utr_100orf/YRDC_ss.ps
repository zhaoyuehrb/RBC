%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:30:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGCCUGGGCGGAUGUCUCCGGCGCGUCGGUGCAGGGGGAUGAGGGCCGCGGUGGCUGCCAGCGUGGGGUUGAGCGAGGGGCCUGCUGGCUCCCGGAGCGGUCGCCUCUUCC\
) } def
/len { sequence length } bind def

/coor [
[62.51906204 143.77992249]
[55.84809494 148.99363708]
[47.73044586 151.04013062]
[39.57241821 149.64410400]
[32.75551605 145.11991882]
[19.01891708 151.14535522]
[5.28231812 157.17079163]
[-8.45428181 163.19621277]
[-17.98407364 175.82530212]
[-32.74740601 173.85217285]
[-46.48400879 179.87760925]
[-56.01379776 192.50668335]
[-70.77713013 190.53355408]
[-84.51373291 196.55899048]
[-98.25033569 202.58441162]
[-111.98693085 208.60984802]
[-125.72353363 214.63528442]
[-129.94267273 229.69293213]
[-142.88270569 238.47300720]
[-158.43371582 236.82984924]
[-169.25300598 225.53927612]
[-170.23204041 209.93237305]
[-160.90853882 197.37823486]
[-145.68478394 193.80453491]
[-131.74896240 200.89868164]
[-118.01236725 194.87324524]
[-104.27576447 188.84782410]
[-90.53916168 182.82238770]
[-76.80256653 176.79695129]
[-68.25531006 164.59886169]
[-52.50943756 166.14100647]
[-38.77283859 160.11557007]
[-30.22558212 147.91746521]
[-14.47971344 149.45962524]
[-0.74311340 143.43418884]
[12.99348640 137.40875244]
[26.73008728 131.38333130]
[37.45296097 112.64385223]
[59.70069885 114.60655975]
[72.69107819 107.10655975]
[85.68145752 99.60655975]
[92.83802795 87.59510040]
[106.81854248 87.40306091]
[119.80892181 79.90306091]
[132.79930115 72.40306091]
[145.78968811 64.90306091]
[158.56848145 57.04796600]
[171.12597656 48.84374237]
[183.68347168 40.63952255]
[196.24096680 32.43529892]
[208.79846191 24.23107719]
[212.15998840 9.02128029]
[225.01194763 0.87991798]
[239.49143982 4.17834949]
[252.04895020 -4.02587318]
[264.60644531 -12.23009491]
[267.96795654 -27.43989182]
[280.81991577 -35.58125305]
[295.29943848 -32.28282166]
[307.85693359 -40.48704529]
[320.41442871 -48.69126892]
[332.97192383 -56.89548874]
[345.52941895 -65.09970856]
[358.08691406 -73.30393219]
[360.55517578 -78.21963501]
[364.33108521 -81.29909515]
[368.45474243 -82.35266113]
[372.03771973 -81.61682129]
[385.22982788 -88.75602722]
[398.42193604 -95.89524078]
[411.61404419 -103.03445435]
[424.80615234 -110.17366028]
[426.71917725 -125.57236481]
[437.34252930 -136.88270569]
[452.59133911 -139.75564575]
[466.60208130 -133.08645630]
[473.98739624 -119.43959808]
[471.90747070 -104.06256104]
[461.16201782 -92.86811829]
[445.88296509 -90.16077423]
[431.94537354 -96.98155975]
[418.75326538 -89.84234619]
[405.56115723 -82.70313263]
[392.36904907 -75.56392670]
[379.17694092 -68.42471313]
[366.29113770 -60.74643707]
[353.73364258 -52.54221344]
[341.17614746 -44.33799362]
[328.61865234 -36.13376999]
[316.06115723 -27.92954826]
[303.50366211 -19.72532463]
[300.70791626 -5.14041996]
[288.08969116 3.35871434]
[272.81066895 0.32740182]
[260.25317383 8.53162384]
[247.69566345 16.73584747]
[244.89993286 31.32075119]
[232.28172302 39.81988525]
[217.00268555 36.78857422]
[204.44519043 44.99279785]
[191.88769531 53.19701767]
[179.33020020 61.40124130]
[166.77268982 69.60546112]
[164.91752625 74.14365387]
[160.11515808 77.49945831]
[153.28968811 77.89344025]
[140.29930115 85.39344025]
[127.30892181 92.89344025]
[114.31854248 100.39344025]
[107.16197205 112.40489960]
[93.18145752 112.59693909]
[80.19107819 120.09693909]
[67.20069885 127.59693909]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 37]
[6 36]
[7 35]
[8 34]
[10 32]
[11 31]
[13 29]
[14 28]
[15 27]
[16 26]
[17 25]
[39 113]
[40 112]
[41 111]
[43 109]
[44 108]
[45 107]
[46 106]
[47 103]
[48 102]
[49 101]
[50 100]
[51 99]
[54 96]
[55 95]
[56 94]
[59 91]
[60 90]
[61 89]
[62 88]
[63 87]
[64 86]
[68 85]
[69 84]
[70 83]
[71 82]
[72 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
