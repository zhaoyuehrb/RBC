%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUGUCUUCUGCACAGCUGGACUUCAACCUGCAGGCUCUUCUGGGACAGCUCAGCCAGGAUGACUUGUGCAAGUUCAAGUCUCUGAUCAGGACCGUCU\
) } def
/len { sequence length } bind def

/coor [
[77.03964233 389.65829468]
[76.10709381 374.68731689]
[75.17455292 359.71633911]
[74.24200439 344.74536133]
[73.30946350 329.77438354]
[71.10176849 327.78176880]
[69.62551880 324.71752930]
[69.32408142 320.88555908]
[70.51040649 316.75579834]
[73.30946350 312.90927124]
[74.24200439 297.93829346]
[75.17455292 282.96731567]
[76.10709381 267.99633789]
[66.08833313 257.03457642]
[66.82079315 241.83859253]
[78.38641357 231.40431213]
[79.31896210 216.43331909]
[80.25150299 201.46234131]
[77.69591522 197.23626709]
[77.89456940 191.33116150]
[81.73612976 185.59866333]
[83.59761047 170.71461487]
[85.45909119 155.83056641]
[87.32057190 140.94651794]
[89.18205261 126.06246948]
[91.04353333 111.17842102]
[85.78678131 98.22241974]
[94.07241821 86.96009827]
[95.93389893 72.07604980]
[97.79537964 57.19199753]
[91.83047485 42.53831482]
[101.08740234 30.86961555]
[102.94888306 15.98556709]
[104.81036377 1.10151851]
[106.67184448 -13.78252983]
[94.20980072 -25.09285164]
[90.91286469 -41.42771149]
[97.87318420 -56.38689804]
[112.20265961 -64.22716522]
[113.60034943 -79.16191101]
[114.76560974 -94.11657715]
[115.69815826 -109.08756256]
[116.63069916 -124.05854797]
[117.56324005 -139.02952576]
[118.49578857 -154.00051880]
[119.42832947 -168.97149658]
[106.58611298 -177.39604187]
[99.69103241 -191.12023926]
[100.59783936 -206.45233154]
[109.06259918 -219.26808167]
[122.80833435 -226.12011719]
[138.13751221 -225.16525269]
[150.92666626 -216.66036987]
[157.73558044 -202.89321899]
[156.73268127 -187.56710815]
[148.18774414 -174.80467224]
[134.39932251 -168.03895569]
[133.46676636 -153.06796265]
[132.53422546 -138.09698486]
[131.60168457 -123.12599945]
[130.66914368 -108.15501404]
[129.73658752 -93.18403625]
[132.51133728 -86.18930054]
[128.53509521 -77.76422119]
[127.13740540 -62.82947922]
[138.00219727 -54.90402603]
[143.53526306 -42.52740097]
[142.17422485 -28.92939186]
[134.17147827 -17.71775627]
[121.55589294 -11.92104816]
[119.69441223 2.96299982]
[117.83293152 17.84704781]
[115.97145081 32.73109436]
[122.06949615 46.32017517]
[112.67942810 59.05347824]
[110.81794739 73.93753052]
[108.95646667 88.82157898]
[114.21321869 101.77758026]
[105.92758179 113.03990173]
[104.06610107 127.92395020]
[102.20462036 142.80799866]
[100.34313965 157.69204712]
[98.48165894 172.57609558]
[96.62017822 187.46014404]
[95.22248840 202.39488220]
[94.28994751 217.36587524]
[93.35739899 232.33685303]
[103.53873444 244.12574768]
[102.37973785 259.29516602]
[91.07807922 268.92886353]
[90.14553070 283.89984131]
[89.21298981 298.87084961]
[88.28044128 313.84182739]
[88.28044128 328.84182739]
[89.21298981 343.81280518]
[90.14553070 358.78378296]
[91.07807922 373.75479126]
[92.01062012 388.72576904]
[99.02998352 404.15835571]
[86.14364624 415.17556763]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 98]
[2 97]
[3 96]
[4 95]
[5 94]
[10 93]
[11 92]
[12 91]
[13 90]
[16 87]
[17 86]
[18 85]
[21 84]
[22 83]
[23 82]
[24 81]
[25 80]
[26 79]
[28 77]
[29 76]
[30 75]
[32 73]
[33 72]
[34 71]
[35 70]
[39 65]
[40 64]
[41 62]
[42 61]
[43 60]
[44 59]
[45 58]
[46 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
