%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGACAGCAGGGAACAUCACCCUCUUCAGACUGGAGUCAGUGGGAACAGACCCAAGAUGUUGGGGAGGAACACUUGGAAGACCUCAGCUUUCUCCUUCUUGGUUGAGCAGAUGUGGGCCCCUCUCUGGAGUCGUUCGAUGAGGCCAGGGCGAUGGU\
) } def
/len { sequence length } bind def

/coor [
[86.85381317 361.77304077]
[82.06114960 376.13650513]
[72.86237335 388.16403198]
[60.25530243 396.55096436]
[45.60745621 400.38754272]
[30.50772285 399.25759888]
[16.59400749 393.28372192]
[5.37556791 383.11389160]
[-1.93070459 369.85125732]
[-4.53227997 354.93447876]
[-2.14695907 339.98159790]
[4.96651649 326.61456299]
[16.03652954 316.28338623]
[29.86228943 310.10867310]
[44.94408035 308.76022339]
[48.51139450 294.19058228]
[52.07870483 279.62094116]
[55.64601898 265.05130005]
[51.15752029 250.84910583]
[61.95479965 239.28495789]
[65.52210999 224.71533203]
[69.08942413 210.14569092]
[72.65673828 195.57604980]
[75.93181610 180.93795776]
[78.91334534 166.23725891]
[81.89488220 151.53657532]
[84.87641144 136.83587646]
[87.85794067 122.13517761]
[81.70699310 117.40003967]
[77.28536224 111.02001190]
[62.45396423 113.26271057]
[47.62256622 115.50540924]
[32.79117203 117.74811554]
[20.31921577 128.39622498]
[4.95417166 122.66495514]
[2.50228024 106.45014191]
[15.48583698 96.43218994]
[30.54847145 102.91671753]
[45.37986755 100.67401886]
[60.21126175 98.43131256]
[75.04265594 96.18861389]
[80.32922363 84.17419434]
[90.93299866 76.43763733]
[103.98766327 75.07021332]
[110.65001678 61.63098145]
[117.31237793 48.19174957]
[123.97473145 34.75251770]
[124.99474335 25.61754990]
[130.90721130 21.11304283]
[137.83714294 7.80980539]
[144.76705933 -5.49343157]
[151.56355286 -18.86533546]
[158.22590637 -32.30456924]
[164.88825989 -45.74380112]
[165.90827942 -54.87876892]
[171.82073975 -59.38327789]
[178.75067139 -72.68651581]
[178.38758850 -77.14177704]
[179.39236450 -81.06898499]
[181.42158508 -84.09580994]
[184.04486084 -86.00374603]
[186.80398560 -86.74330902]
[194.77537537 -99.44987488]
[202.74678040 -112.15644073]
[210.71818542 -124.86299896]
[212.64552307 -133.85040283]
[218.97836304 -137.74182129]
[227.20240784 -150.28634644]
[224.19523621 -165.57014465]
[232.71429443 -178.17492676]
[247.30360413 -180.94761658]
[255.52764893 -193.49212646]
[263.75170898 -206.03665161]
[256.46026611 -215.40701294]
[252.11262512 -226.43460083]
[251.05117798 -238.22122192]
[253.35115051 -249.81018066]
[258.81530762 -260.26388550]
[266.99096680 -268.73968506]
[277.20730591 -274.55795288]
[288.63049316 -277.25634766]
[300.33181763 -276.62664795]
[311.36297607 -272.73083496]
[320.56369019 -284.57763672]
[329.76440430 -296.42443848]
[338.96511841 -308.27124023]
[348.16586304 -320.11804199]
[357.36657715 -331.96487427]
[366.56729126 -343.81167603]
[360.16870117 -357.71548462]
[360.97604370 -372.99969482]
[368.80380249 -386.15206909]
[381.85317993 -394.15029907]
[397.12561035 -395.15643311]
[411.11151123 -388.93930054]
[420.59707642 -376.92752075]
[423.40255737 -361.88131714]
[418.88333130 -347.25823975]
[408.07781982 -336.41851807]
[393.46908569 -331.85302734]
[378.41409302 -334.61093140]
[369.21337891 -322.76412964]
[360.01266479 -310.91732788]
[350.81195068 -299.07052612]
[341.61120605 -287.22372437]
[332.41049194 -275.37692261]
[323.20977783 -263.53012085]
[332.12277222 -247.52047729]
[333.19628906 -229.17788696]
[326.17321777 -212.14448547]
[312.40844727 -199.82154846]
[294.60784912 -194.69035339]
[276.29623413 -197.81260681]
[268.07217407 -185.26808167]
[259.84811401 -172.72355652]
[263.12368774 -158.23886108]
[254.96202087 -145.39978027]
[239.74693298 -142.06228638]
[231.52287292 -129.51777649]
[223.42474365 -116.89159393]
[215.45333862 -104.18503571]
[207.48194885 -91.47846985]
[199.51054382 -78.77191162]
[192.05390930 -65.75658417]
[185.12397766 -52.45335007]
[178.32749939 -39.08144379]
[171.66514587 -25.64221191]
[165.00277710 -12.20297909]
[164.84869385 -4.77168369]
[158.07029724 1.43649495]
[151.14038086 14.73973179]
[144.21044922 28.04296875]
[137.41397095 41.41487503]
[130.75161743 54.85410690]
[124.08925629 68.29334259]
[117.42689514 81.73257446]
[125.21572876 98.74990082]
[119.14826202 116.45417023]
[102.55863953 125.11670685]
[99.57710266 139.81739807]
[96.59557343 154.51809692]
[93.61404419 169.21879578]
[90.63251495 183.91949463]
[92.39276123 190.38629150]
[90.81993103 195.92079163]
[87.22637177 199.14337158]
[83.65905762 213.71301270]
[80.09175110 228.28263855]
[76.52443695 242.85227966]
[80.75777435 258.09658813]
[70.21565247 268.61862183]
[66.64834595 283.18826294]
[63.08102798 297.75790405]
[59.51371765 312.32751465]
[72.26651764 320.49114990]
[81.67565155 332.35482788]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 154]
[16 153]
[17 152]
[18 151]
[20 149]
[21 148]
[22 147]
[23 146]
[24 143]
[25 142]
[26 141]
[27 140]
[28 139]
[30 41]
[31 40]
[32 39]
[33 38]
[44 136]
[45 135]
[46 134]
[47 133]
[49 132]
[50 131]
[51 130]
[52 128]
[53 127]
[54 126]
[56 125]
[57 124]
[62 123]
[63 122]
[64 121]
[65 120]
[67 119]
[68 118]
[71 115]
[72 114]
[73 113]
[83 107]
[84 106]
[85 105]
[86 104]
[87 103]
[88 102]
[89 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
