%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAGUACCCCCCCUCCCCUUCCCUCCCUAGACCUUGGAGAAGUACCCUCCAUUACUUUCCCAAGAUGGCAGACCCCAUCAUGGAUCUGUUCGAUGACCCAAAUUUAUUUGGCCUGGACUCUCUGACUGAUGACAGCUUUAACCAGGUCACACAAGACCCCAUUG\
) } def
/len { sequence length } bind def

/coor [
[8.77079105 128.77978516]
[-5.84404993 132.15711975]
[-20.45889091 135.53446960]
[-35.07373047 138.91180420]
[-20.09406281 139.69248962]
[-6.47585392 145.98092651]
[3.83265471 156.87747192]
[9.35671616 170.82325745]
[9.30605221 185.82316589]
[3.68791032 199.73130798]
[-6.69397116 210.55796814]
[-20.35434723 216.75427246]
[-35.33895111 217.43376160]
[-49.50406265 212.49922180]
[-60.82320786 202.65661621]
[-67.67705536 189.31402588]
[-69.08508301 174.38024902]
[-64.84585571 159.99174500]
[-55.56450653 148.20579529]
[-67.73304749 156.97657776]
[-66.80795288 172.37617493]
[-74.37529755 185.82009888]
[-88.02035522 193.01841736]
[-103.38904572 191.67419434]
[-115.57727051 182.21635437]
[-120.69581604 167.66287231]
[-117.11137390 152.65769958]
[-105.96772003 141.98892212]
[-90.82075500 139.06094360]
[-76.50382996 144.80802917]
[-64.33528900 136.03724670]
[-65.53657532 128.63407898]
[-67.93915558 113.82774353]
[-69.14044189 106.42457581]
[-83.45800018 101.95160675]
[-97.77556610 97.47863770]
[-112.09312439 93.00566864]
[-126.41068268 88.53269958]
[-141.89025879 91.80280304]
[-151.73123169 80.62226868]
[-166.04879761 76.14929962]
[-180.36636353 71.67633820]
[-194.68392944 67.20336914]
[-209.00148010 62.73039627]
[-223.31904602 58.25742722]
[-235.68739319 67.62778473]
[-251.20199585 67.90496826]
[-263.89715576 58.98239899]
[-268.89135742 44.29098129]
[-264.26419067 29.47987175]
[-251.79492188 20.24423981]
[-236.27822876 20.13537407]
[-223.68060303 29.19513893]
[-218.84606934 43.93986893]
[-204.52851868 48.41283798]
[-190.21095276 52.88580322]
[-175.89338684 57.35877228]
[-161.57583618 61.83174133]
[-147.25827026 66.30471039]
[-132.80279541 62.71467209]
[-121.93771362 74.21514130]
[-107.62015533 78.68811035]
[-93.30259705 83.16107941]
[-78.98503113 87.63404846]
[-64.66747284 92.10701752]
[-42.83167267 105.51145935]
[-38.45107269 124.29695892]
[-23.83622932 120.91962433]
[-9.22138882 117.54228210]
[5.39345217 114.16493988]
[4.48216057 94.76676178]
[7.50721598 75.58423615]
[14.34395504 57.40790558]
[24.71063042 40.98682022]
[38.18002701 26.99770164]
[54.19705963 16.01705360]
[72.10166168 8.49739170]
[91.15596771 4.74860811]
[110.57474518 4.92519140]
[113.39662170 -9.80698586]
[116.21849060 -24.53916168]
[119.04036713 -39.27133942]
[114.03736877 -54.28068924]
[124.03083801 -65.32514191]
[126.85270691 -80.05731964]
[119.07131958 -94.08691406]
[125.32144165 -108.86241913]
[140.80850220 -113.04933167]
[153.65217590 -103.43580627]
[153.99987793 -87.39652252]
[141.58488464 -77.23544312]
[138.76301575 -62.50326538]
[143.96784973 -48.54766083]
[133.77253723 -36.44946671]
[130.95066833 -21.71728897]
[128.12879944 -6.98511267]
[125.30692291 7.74706411]
[135.30020142 11.09026718]
[144.86512756 15.51233673]
[153.88563538 20.95961571]
[162.25228882 27.36600113]
[169.86354065 34.65375900]
[176.62702942 42.73445511]
[182.46070862 51.51003265]
[187.29376221 60.87400818]
[191.06756592 70.71275330]
[193.73631287 80.90689087]
[195.26763916 91.33270264]
[195.64292908 101.86368561]
[194.85766602 112.37206268]
[209.53379822 115.47222137]
[224.20994568 118.57238007]
[238.88607788 121.67254639]
[253.56221008 124.77270508]
[268.23834229 127.87286377]
[282.91448975 130.97302246]
[297.59063721 134.07318115]
[307.40652466 121.12301636]
[321.83078003 113.76669312]
[337.96090698 113.42766571]
[352.57586670 120.12300873]
[362.77920532 132.47016907]
[366.57305908 147.97207642]
[381.30523682 150.79394531]
[396.03741455 153.61581421]
[407.26437378 142.90437317]
[422.64764404 140.87106323]
[436.27206421 148.29769897]
[442.89874268 162.32862854]
[439.97958374 177.56864929]
[428.63708496 188.15766907]
[413.23266602 190.02398682]
[399.68960571 182.44998169]
[393.21554565 168.34799194]
[378.48336792 165.52612305]
[363.75119019 162.70425415]
[356.03009033 174.25799561]
[344.44747925 182.01396179]
[330.73886108 184.77015686]
[316.97354126 182.07679749]
[305.24237061 174.30920410]
[297.33999634 162.61601257]
[294.49047852 148.74932861]
[279.81433105 145.64916992]
[265.13818359 142.54899597]
[250.46205139 139.44883728]
[235.78591919 136.34867859]
[221.10977173 133.24851990]
[206.43363953 130.14836121]
[191.75750732 127.04819489]
[186.68669128 140.45321655]
[179.67007446 152.95021057]
[170.86514282 164.25865173]
[160.46955872 174.12474060]
[148.71665955 182.32698059]
[135.87023926 188.68128967]
[122.21865845 193.04501343]
[108.06835175 195.32023621]
[93.73694611 195.45584106]
[79.54611969 193.44882202]
[65.81440735 189.34422302]
[52.85003662 183.23416138]
[40.94401169 175.25579834]
[30.36358070 165.58821106]
[21.34623337 154.44841003]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[3 68]
[4 67]
[19 31]
[20 30]
[34 65]
[35 64]
[36 63]
[37 62]
[38 61]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[79 97]
[80 96]
[81 95]
[82 94]
[84 92]
[85 91]
[110 150]
[111 149]
[112 148]
[113 147]
[114 146]
[115 145]
[116 144]
[117 143]
[123 136]
[124 135]
[125 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
