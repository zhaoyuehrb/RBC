%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCGUGCCCGCGGAGAGAGCGCGGCGCGGGAGGCCGGCGGCCGGCCGGCUGCAUGGCGCGCUGCGAGAGGCUGCGCGGAGCGGCCCUGCGCGACGUGCUGGGCCGGGCGCAGGGGGUCCUGUUCGACUGUGACGGGGUGCUGUGGAACGGCG\
) } def
/len { sequence length } bind def

/coor [
[71.75331116 205.35372925]
[71.75331116 190.35372925]
[71.75331116 175.35372925]
[71.75331116 160.35372925]
[71.75331116 145.35372925]
[71.75331116 130.35372925]
[62.52106476 118.53147125]
[47.96827698 114.89604187]
[33.37916183 111.40924072]
[18.75524521 108.07142639]
[4.13132620 104.73361206]
[-10.49259281 101.39579773]
[-25.11651230 98.05798340]
[-40.29239655 102.53047180]
[-50.97885895 92.15507507]
[-65.60277557 88.81726074]
[-76.69726562 101.03857422]
[-92.34617615 105.98587799]
[-108.26688385 102.40415955]
[-120.15200043 91.35911560]
[-124.83470917 75.92247772]
[-139.52366638 72.88366699]
[-154.21263123 69.84485626]
[-168.90159607 66.80604553]
[-183.59056091 63.76723099]
[-198.27952576 60.72841644]
[-212.96847534 57.68960190]
[-227.65744019 54.65079117]
[-242.34640503 51.61197662]
[-255.86097717 65.07421112]
[-274.60134888 67.72245026]
[-291.05593872 58.67561340]
[-298.73730469 41.70436478]
[-313.58462524 39.56964493]
[-328.43194580 37.43492126]
[-343.27926636 35.30019760]
[-358.12658691 33.16547775]
[-372.97390747 31.03075409]
[-387.82122803 28.89603043]
[-401.47433472 37.32050705]
[-416.52413940 31.76325035]
[-421.42572021 16.48731232]
[-412.41897583 3.21108508]
[-396.41311646 2.11895466]
[-385.68649292 14.04870987]
[-370.83917236 16.18343163]
[-355.99185181 18.31815529]
[-341.14453125 20.45287704]
[-326.29721069 22.58759880]
[-311.44989014 24.72232246]
[-296.60256958 26.85704422]
[-290.41629028 17.45261002]
[-281.10876465 11.03026390]
[-270.02044678 8.56190395]
[-258.76586914 10.44659233]
[-248.99879456 16.44662476]
[-242.16911316 25.71673775]
[-239.30760193 36.92301559]
[-224.61863708 39.96182632]
[-209.92967224 43.00064087]
[-195.24070740 46.03945541]
[-180.55174255 49.07826614]
[-165.86277771 52.11708069]
[-151.17381287 55.15589142]
[-136.48486328 58.19470596]
[-121.79589844 61.23352051]
[-113.38053131 50.43645859]
[-101.06932068 44.30065536]
[-87.24929047 44.07971573]
[-74.62775421 49.87415695]
[-65.70194244 60.60048294]
[-62.26496124 74.19334412]
[-47.64104462 77.53115845]
[-33.51115799 72.81993103]
[-21.77869797 83.43406677]
[-7.15477848 86.77188110]
[7.46914005 90.10969543]
[22.09305954 93.44750977]
[36.71697617 96.78532410]
[43.98170471 95.19802094]
[51.60370255 100.34325409]
[66.15649414 103.97868347]
[101.48720551 62.30617142]
[111.07682800 50.77191544]
[120.66645813 39.23765564]
[130.25607300 27.70339966]
[139.84570312 16.16914177]
[142.71867371 0.61097151]
[156.80491638 -4.22915077]
[166.39454651 -15.76340866]
[175.98416138 -27.29766655]
[185.57379150 -38.83192444]
[191.05053711 -54.87690735]
[207.98460388 -54.05588150]
[211.88346863 -37.55633545]
[197.10804749 -29.24230003]
[187.51843262 -17.70804214]
[177.92880249 -6.17378426]
[168.33917236 5.36047363]
[166.15213013 20.09363556]
[151.37995911 25.75876617]
[141.79034424 37.29302216]
[132.20071411 48.82728195]
[122.61109161 60.36153793]
[113.02146149 71.89579773]
[114.54087067 79.24028015]
[128.78129578 83.95304108]
[117.57968140 93.92923737]
[119.09909058 101.27371979]
[132.47805786 108.05629730]
[145.85700989 114.83888245]
[159.23597717 121.62145996]
[172.61494446 128.40403748]
[183.04443359 122.54977417]
[194.88423157 122.48625183]
[205.16494751 128.11283875]
[211.36466980 137.91645813]
[212.02732849 149.37651062]
[225.11849976 156.69915771]
[238.20968628 164.02180481]
[251.30085754 171.34445190]
[264.39202881 178.66708374]
[277.48321533 185.98973083]
[290.57440186 193.31237793]
[305.12963867 187.59587097]
[319.93759155 192.62170410]
[328.00634766 206.01681519]
[325.52612305 221.45645142]
[313.66796875 231.65048218]
[298.03097534 231.78561401]
[285.99844360 221.79801941]
[283.25173950 206.40354919]
[270.16058350 199.08091736]
[257.06939697 191.75827026]
[243.97821045 184.43562317]
[230.88703918 177.11297607]
[217.79586792 169.79034424]
[204.70468140 162.46769714]
[187.47471619 168.52111816]
[170.98133850 159.96594238]
[165.83236694 141.78300476]
[152.45339966 135.00042725]
[139.07443237 128.21783447]
[125.69547272 121.43526459]
[112.31651306 114.65268707]
[105.92571259 118.57794189]
[93.14411163 126.42846680]
[86.75331116 130.35372925]
[86.75331116 145.35372925]
[86.75331116 160.35372925]
[86.75331116 175.35372925]
[86.75331116 190.35372925]
[86.75331116 205.35372925]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 82]
[8 81]
[9 79]
[10 78]
[11 77]
[12 76]
[13 75]
[15 73]
[16 72]
[21 66]
[22 65]
[23 64]
[24 63]
[25 62]
[26 61]
[27 60]
[28 59]
[29 58]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
[83 105]
[84 104]
[85 103]
[86 102]
[87 101]
[89 99]
[90 98]
[91 97]
[92 96]
[109 145]
[110 144]
[111 143]
[112 142]
[113 141]
[118 138]
[119 137]
[120 136]
[121 135]
[122 134]
[123 133]
[124 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
