%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:20:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAAGGUUACCCAUCUCAAGUAGCCUAGCAAUAUUGGCAACAUCCCAAUGGCCCUGUCCUUUUCUUUACUGAUGGCCGUGCUGGUGCUCAGCUACAAAUCCAUCUGUUCUCUGGGCUGUGAUCUGCCUCAGACCCACAGCCUGGGUA\
) } def
/len { sequence length } bind def

/coor [
[106.61378479 169.48985291]
[92.54321289 164.29187012]
[87.83414459 150.05021667]
[96.03371429 137.48815918]
[88.56745148 138.19869995]
[79.19744873 149.91206360]
[69.82745361 161.62544250]
[60.45745468 173.33882141]
[51.08745575 185.05218506]
[41.71745682 196.76556396]
[32.34745789 208.47894287]
[37.36932755 223.06607056]
[33.68540192 238.04713440]
[22.47120857 248.64172363]
[7.30515432 251.46914673]
[-6.97332716 245.62719727]
[-15.80802441 232.97999573]
[-16.37981796 217.56323242]
[-8.50625038 204.29634094]
[5.30025148 197.41271973]
[20.63408279 199.10894775]
[30.00408173 187.39556885]
[39.37408066 175.68218994]
[48.74407959 163.96882629]
[58.11407852 152.25544739]
[67.48407745 140.54206848]
[76.85407257 128.82870483]
[65.68917084 106.33013153]
[71.68241882 83.43035126]
[56.86957550 81.06822205]
[50.46414948 83.10408783]
[44.85588837 81.75378418]
[41.48746872 78.28156281]
[26.78737259 75.29707336]
[12.08727741 72.31257629]
[-2.61281753 69.32808685]
[-17.31291389 66.34359741]
[-32.01300812 63.35910034]
[-44.13360596 73.23963928]
[-59.76879501 72.96591949]
[-71.53610992 62.66716766]
[-73.87939453 47.20615005]
[-65.69221497 33.88308334]
[-50.84030533 28.98871422]
[-36.33628845 34.83401108]
[-29.02851486 48.65900803]
[-14.32842064 51.64349747]
[0.37167495 54.62799072]
[15.07177067 57.61248398]
[29.77186584 60.59697723]
[44.47196198 63.58147049]
[59.23171234 66.25537872]
[74.04455566 68.61750793]
[62.17752838 59.44288635]
[47.68913651 55.55875015]
[35.67295837 46.58036041]
[27.84133911 33.78717041]
[25.31030846 19.00225067]
[28.44054413 4.33249807]
[36.78598022 -8.13159752]
[49.15736771 -16.61386299]
[63.79173660 -19.90554810]
[78.60364532 -17.53757858]
[91.48235321 -9.84739399]
[100.59259796 2.06912613]
[104.63613892 16.51383972]
[103.03676605 31.42832947]
[96.02311707 44.68632126]
[94.66946411 59.62511826]
[103.01944733 47.16406631]
[104.27386475 31.39266777]
[117.78635406 25.12674332]
[126.13633728 12.66569138]
[134.48631287 0.20463948]
[142.83630371 -12.25641251]
[151.18627930 -24.71746445]
[146.77751160 -43.08784866]
[156.96286011 -58.62071228]
[174.94264221 -61.78974533]
[182.75988770 -74.59172821]
[190.44174194 -87.47540283]
[197.98735046 -100.43934631]
[205.53294373 -113.40329742]
[213.07855225 -126.36724091]
[210.38745117 -142.18298340]
[221.18185425 -154.05143738]
[237.18121338 -152.86816406]
[246.11218262 -139.54086304]
[241.12370300 -124.29309082]
[226.04249573 -118.82164001]
[218.49688721 -105.85768890]
[210.95129395 -92.89374542]
[203.40568542 -79.92980194]
[202.75479126 -72.51654816]
[195.56187439 -66.77448273]
[187.74462891 -53.97249985]
[192.79042053 -43.65203476]
[192.19055176 -32.05932999]
[185.97912598 -22.11065865]
[175.61645508 -16.36527252]
[163.64733887 -16.36748123]
[155.29734802 -3.90643048]
[146.94737244 8.55462074]
[138.59738159 21.01567268]
[130.24740601 33.47672272]
[129.59024048 48.35682297]
[115.48049927 55.51404953]
[107.13051605 67.97509766]
[126.88227081 78.86401367]
[135.57695007 100.68043518]
[128.16822815 123.94533539]
[139.57945251 133.68104553]
[150.99066162 143.41674805]
[162.40188599 153.15245056]
[173.81311035 162.88816833]
[185.22433472 172.62387085]
[196.63555908 182.35957336]
[208.04678345 192.09527588]
[219.45800781 201.83099365]
[230.86923218 211.56669617]
[242.28045654 221.30239868]
[260.43441772 224.19389343]
[265.71600342 240.89895630]
[277.32995605 250.39190674]
[288.94390869 259.88485718]
[300.55783081 269.37783813]
[316.64801025 274.72039795]
[315.96844482 291.66070557]
[299.50201416 295.69726562]
[291.06488037 280.99179077]
[279.45092773 271.49880981]
[267.83697510 262.00585938]
[256.22305298 252.51289368]
[244.11665344 253.40119934]
[234.35482788 245.52880859]
[232.54473877 232.71362305]
[221.13351440 222.97792053]
[209.72230530 213.24221802]
[198.31108093 203.50650024]
[186.89985657 193.77079773]
[175.48863220 184.03509521]
[164.07740784 174.29937744]
[152.66618347 164.56367493]
[141.25495911 154.82797241]
[129.84373474 145.09226990]
[118.43251801 135.35655212]
[110.96624756 136.06709290]
[121.38769531 146.85566711]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 27]
[6 26]
[7 25]
[8 24]
[9 23]
[10 22]
[11 21]
[29 53]
[30 52]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[69 108]
[70 107]
[72 105]
[73 104]
[74 103]
[75 102]
[76 101]
[79 96]
[80 95]
[81 93]
[82 92]
[83 91]
[84 90]
[111 146]
[112 145]
[113 144]
[114 143]
[115 142]
[116 141]
[117 140]
[118 139]
[119 138]
[120 137]
[121 136]
[123 133]
[124 132]
[125 131]
[126 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
