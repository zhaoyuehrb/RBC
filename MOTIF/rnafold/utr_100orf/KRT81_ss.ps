%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:53:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCAGGUCCCCUAUCCUGUCCUCUGCAACCCAAACGUCCAGGAGGAUCAUGACCUGCGGAUCAGGAUUUGGUGGGCGCGCCUUCAGCUGCAUCUCGGCCUGCGGGCCGCGGCCCGGCCGCUGCUGCAUCACCGCCGCCCCCUACCGUG\
) } def
/len { sequence length } bind def

/coor [
[77.06004333 125.20880890]
[71.37807465 118.50704956]
[67.59806824 110.57546997]
[52.66376114 111.97777557]
[37.72945404 113.38008118]
[24.71305466 122.37362671]
[11.31818581 115.86004639]
[-3.61612201 117.26235199]
[-18.55043030 118.66465759]
[-33.48473740 120.06695557]
[-48.41904449 121.46926117]
[-55.13422394 136.54524231]
[-68.44859314 146.13810730]
[-84.68854523 147.71730042]
[-99.43138123 140.94744873]
[-108.70971680 127.75411987]
[-123.61162567 129.46681213]
[-136.43811035 138.72920227]
[-149.96557617 132.49569702]
[-164.86747742 134.20837402]
[-179.75076294 136.07598877]
[-194.61381531 138.09832764]
[-209.47685242 140.12066650]
[-224.33990479 142.14300537]
[-239.20295715 144.16532898]
[-254.06599426 146.18766785]
[-261.47329712 159.69464111]
[-275.25253296 166.17430115]
[-290.03027344 163.33139038]
[-300.17889404 152.46200562]
[-315.04193115 154.48432922]
[-324.40783691 167.21443176]
[-340.04443359 169.51065063]
[-352.67480469 160.01068115]
[-354.80557251 144.35069275]
[-345.17257690 131.82147217]
[-329.49093628 129.85638428]
[-317.06427002 139.62129211]
[-302.20123291 137.59895325]
[-295.32568359 124.41316986]
[-281.84472656 117.72526550]
[-266.83517456 120.28778839]
[-256.08834839 131.32461548]
[-241.22528076 129.30229187]
[-226.36224365 127.27995300]
[-211.49919128 125.25761414]
[-196.63613892 123.23528290]
[-181.77310181 121.21294403]
[-175.52899170 117.16859436]
[-166.58016968 119.30648041]
[-151.67826843 117.59378815]
[-139.91767883 108.45389557]
[-125.32431030 114.56490326]
[-110.42240906 112.85221100]
[-105.80917358 99.96122742]
[-96.03517151 90.27887726]
[-82.97605133 85.74378967]
[-69.17292786 87.29901886]
[-57.33794022 94.69659424]
[-49.82135010 106.53495789]
[-34.88703918 105.13265228]
[-19.95273399 103.73034668]
[-5.01842546 102.32804108]
[9.91588211 100.92574310]
[21.86407852 92.03249359]
[36.32714844 98.44577026]
[51.26145554 97.04346466]
[66.19576263 95.64116669]
[75.44292450 76.36367798]
[94.35313416 66.38692474]
[115.48534393 69.63670349]
[130.52416992 84.83423615]
[145.09687805 81.27947235]
[152.75129700 76.17440033]
[160.00970459 77.80569458]
[174.65321350 74.55487061]
[189.29670715 71.30404663]
[203.94021606 68.05322266]
[218.58370972 64.80239105]
[226.34268188 59.85766983]
[233.56558228 61.63961029]
[248.27354431 58.69412994]
[252.17475891 42.92947006]
[262.51123047 30.47879410]
[277.18341064 23.79196930]
[293.24530029 24.15608597]
[307.49603271 31.44804001]
[317.11755371 44.16913605]
[331.76107788 40.91830826]
[343.55642700 30.37409973]
[357.65805054 35.16923523]
[372.30154419 31.91840935]
[386.94503784 28.66758347]
[392.29202271 19.10226631]
[401.84173584 14.19240093]
[412.29418945 15.36073494]
[420.18612671 21.97506142]
[434.95217896 19.33619690]
[449.71823120 16.69733238]
[464.48428345 14.05846786]
[479.25033569 11.41960335]
[483.33489990 7.96475315]
[487.88467407 6.60391665]
[492.00738525 7.15619612]
[495.01773071 9.10692024]
[509.91961670 7.39423037]
[524.82153320 5.68154049]
[539.72344971 3.96885085]
[552.56695557 -6.22800303]
[567.71795654 0.04723182]
[569.59039307 16.33913231]
[556.25805664 25.88798714]
[541.43609619 18.87075233]
[526.53424072 20.58344269]
[511.63232422 22.29613304]
[496.73040771 24.00882149]
[481.88922119 26.18565941]
[467.12313843 28.82452393]
[452.35708618 31.46338844]
[437.59103394 34.10225296]
[422.82498169 36.74111557]
[409.06781006 50.27514267]
[390.19586182 43.31108475]
[375.55236816 46.56191254]
[360.90887451 49.81273651]
[350.16091919 60.12442398]
[335.01190186 55.56180954]
[320.36837769 58.81263733]
[317.85763550 72.49097443]
[310.28924561 84.20972443]
[298.78295898 92.17391968]
[285.06472778 95.14864349]
[271.20767212 92.65043640]
[259.31887817 85.02548218]
[251.21902466 73.40209198]
[236.51106262 76.34757233]
[221.83453369 79.44589233]
[207.19104004 82.69672394]
[192.54753113 85.94754791]
[177.90403748 89.19837189]
[163.26052856 92.44919586]
[148.65164185 95.85217285]
[134.07893372 99.40693665]
[133.09825134 108.13829803]
[129.91812134 116.32884979]
[124.74990845 123.43433380]
[117.93701935 128.98257446]
[109.93218231 132.60487366]
[101.26734924 134.06053162]
[92.51829529 133.25282288]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 68]
[4 67]
[5 66]
[7 64]
[8 63]
[9 62]
[10 61]
[11 60]
[16 54]
[17 53]
[19 51]
[20 50]
[21 48]
[22 47]
[23 46]
[24 45]
[25 44]
[26 43]
[30 39]
[31 38]
[72 143]
[73 142]
[75 141]
[76 140]
[77 139]
[78 138]
[79 137]
[81 136]
[82 135]
[88 128]
[89 127]
[91 125]
[92 124]
[93 123]
[97 121]
[98 120]
[99 119]
[100 118]
[101 117]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
