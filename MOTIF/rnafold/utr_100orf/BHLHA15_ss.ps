%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:46:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUCCAAGGGCCUCACCUUCCUGCCGCCACCUCCUAGGACAGCCAGUCCAGGGCCAUGAAGACCAAGAACCGGCCCCCACGGCGCCGGGCCCCGGUGCAGGACACAGAGGCCACCCCCGGGGAGGGGACGCCCGACGGGUCCCUGCCGAACCCGG\
) } def
/len { sequence length } bind def

/coor [
[283.87680054 392.96273804]
[273.79104614 392.53918457]
[264.14068604 389.51953125]
[255.58348083 384.10031128]
[248.70501709 376.64193726]
[243.97871399 367.64471436]
[241.73324585 357.71527100]
[242.12965393 347.52569580]
[245.14984131 337.76803589]
[250.59725952 329.10723877]
[241.16133118 317.44689941]
[231.72541809 305.78659058]
[222.28950500 294.12625122]
[212.85359192 282.46591187]
[203.41766357 270.80557251]
[188.72705078 273.26556396]
[174.68414307 268.00701904]
[165.09544373 256.34838867]
[162.61351013 241.35717773]
[168.00366211 227.04307556]
[158.56773376 215.38273621]
[149.13182068 203.72239685]
[139.69590759 192.06205750]
[130.25997925 180.40171814]
[120.82406616 168.74137878]
[114.13421631 165.50196838]
[111.31881714 156.75202942]
[102.11809540 144.90522766]
[92.91738129 133.05842590]
[96.85461426 147.53247070]
[91.97876740 161.71789551]
[79.97478485 170.71258545]
[64.99092865 171.40823364]
[52.20519257 163.56445312]
[46.03598022 149.89181519]
[48.61520386 135.11523438]
[59.05155182 124.34106445]
[73.73886108 121.29261017]
[59.00906754 118.45830536]
[44.27927780 115.62400055]
[29.54948616 112.78969574]
[15.51333046 120.55924988]
[0.74310356 114.29666138]
[-3.43074059 98.80606842]
[6.19361448 85.97052002]
[22.23318672 85.63635254]
[32.38378906 98.05990601]
[47.11357880 100.89421082]
[61.84337234 103.72851562]
[76.57315826 106.56282043]
[79.93064880 93.52958679]
[88.86442566 86.05637360]
[85.29711151 71.48674011]
[81.72979736 56.91710663]
[78.16248322 42.34746933]
[74.59516907 27.77783394]
[69.75925446 41.97691345]
[60.19545364 53.53259659]
[47.15091705 60.93799973]
[32.32666397 63.22745132]
[17.65580750 60.10239792]
[5.05144739 51.97035599]
[-3.84278631 39.89175415]
[-7.86707115 25.44166374]
[-6.49663448 10.50439739]
[0.08981694 -2.97219872]
[11.03339958 -13.23075676]
[24.90705109 -18.93354225]
[39.90162659 -19.33690453]
[54.06180954 -14.38824463]
[65.54108429 -4.73287439]
[72.84296417 8.37137604]
[73.74288177 -6.60160446]
[74.64279938 -21.57458496]
[75.54271698 -36.54756546]
[76.29278564 -51.52880096]
[76.89292908 -66.51679230]
[68.79324341 -80.77607727]
[77.32455444 -94.78138733]
[93.71057129 -94.12526703]
[101.09476471 -79.48266602]
[91.88091278 -65.91664886]
[91.28076935 -50.92865753]
[94.17172241 -44.08100891]
[90.51569366 -35.64765167]
[89.61577606 -20.67466927]
[88.71586609 -5.70168877]
[87.81594849 9.27129173]
[89.16481018 24.21052170]
[92.73212433 38.78015518]
[96.29943085 53.34979248]
[99.86674500 67.91942596]
[103.43405914 82.48906708]
[121.08657837 99.96365356]
[104.76418304 123.85770416]
[113.96490479 135.70449829]
[123.16561890 147.55131531]
[132.48440552 159.30546570]
[141.92031860 170.96580505]
[151.35624695 182.62614441]
[160.79216003 194.28648376]
[170.22807312 205.94682312]
[179.66398621 217.60714722]
[194.78750610 215.32095337]
[208.93141174 220.87493896]
[218.33378601 232.68432617]
[220.54783630 247.51516724]
[215.07800293 261.36965942]
[224.51391602 273.02999878]
[233.94984436 284.69030762]
[243.38575745 296.35064697]
[252.82167053 308.01098633]
[262.25759888 319.67132568]
[282.20214844 315.25051880]
[301.59356689 321.43377686]
[315.19665527 336.47244263]
[319.37881470 356.23782349]
[313.07995605 375.35461426]
[323.84454346 385.80087280]
[334.60910034 396.24710083]
[345.37368774 406.69332886]
[356.13827515 417.13955688]
[377.03784180 415.37695312]
[392.31091309 429.32406616]
[392.44448853 449.71597290]
[404.00982666 459.26809692]
[415.57519531 468.82019043]
[427.14053345 478.37231445]
[438.70587158 487.92440796]
[450.27124023 497.47650146]
[458.93273926 500.55322266]
[461.96994019 507.33728027]
[473.34182739 517.11889648]
[489.54751587 519.63049316]
[495.22213745 535.01654053]
[484.52813721 547.44921875]
[468.46658325 544.13879395]
[463.56024170 528.49078369]
[452.18832397 518.70922852]
[440.71911621 509.04187012]
[429.15377808 499.48974609]
[417.58843994 489.93765259]
[406.02307129 480.38552856]
[394.45773315 470.83343506]
[382.89239502 461.28134155]
[374.18899536 465.03662109]
[364.65649414 465.33459473]
[355.62609863 462.09088135]
[348.37457275 455.71871948]
[343.94375610 447.07678223]
[342.99102783 437.35360718]
[345.69204712 427.90414429]
[334.92745972 417.45791626]
[324.16287231 407.01168823]
[313.39828491 396.56542969]
[302.63372803 386.11920166]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 113]
[11 112]
[12 111]
[13 110]
[14 109]
[15 108]
[20 103]
[21 102]
[22 101]
[23 100]
[24 99]
[25 98]
[27 97]
[28 96]
[29 95]
[38 50]
[39 49]
[40 48]
[41 47]
[52 93]
[53 92]
[54 91]
[55 90]
[56 89]
[72 88]
[73 87]
[74 86]
[75 85]
[76 83]
[77 82]
[118 156]
[119 155]
[120 154]
[121 153]
[122 152]
[125 145]
[126 144]
[127 143]
[128 142]
[129 141]
[130 140]
[132 139]
[133 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
