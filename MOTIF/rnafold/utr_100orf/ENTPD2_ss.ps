%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:02:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCCCCGCACUCUCCGGGUCCACGCAUCGUCCUCCCGCGCGCCCGCCCGCCCAUGGCCGGGAAGGUGCGGUCACUGCUGCCGCCGCUGCUGCUGGCCGCCGCGGGCCUCGCCGGCCUCCUACUGCUGUGCGUCCCCACCCGCGACGUCCGGG\
) } def
/len { sequence length } bind def

/coor [
[81.57840729 531.81634521]
[69.38280487 541.86834717]
[53.65960693 540.26947021]
[43.73710251 527.96826172]
[45.50214005 512.26281738]
[57.90755463 502.47094727]
[59.42507935 487.54791260]
[60.94260406 472.62487793]
[62.46013260 457.70184326]
[56.05012512 444.25708008]
[65.14386749 431.31048584]
[66.66139221 416.38745117]
[59.24834061 406.78198242]
[60.42898941 394.30276489]
[70.11247253 385.72460938]
[71.93212891 370.83538818]
[73.60080719 355.92849731]
[75.11833191 341.00543213]
[76.63585663 326.08239746]
[78.15338135 311.15936279]
[79.67090607 296.23632812]
[67.26914978 282.82919312]
[68.56830597 264.29342651]
[83.21131897 252.34535217]
[84.12283325 237.37307739]
[85.03434753 222.40080261]
[85.94586182 207.42851257]
[86.85736847 192.45623779]
[87.76888275 177.48396301]
[80.81929016 164.31002808]
[89.38088989 151.00553894]
[90.29240417 136.03326416]
[73.48401642 126.25901031]
[63.87391281 109.35623169]
[64.07095337 89.91352081]
[74.02165222 73.20898438]
[91.02468109 63.77739716]
[90.41680145 48.78971863]
[89.80891418 33.80204010]
[86.31715393 25.29623413]
[89.34371185 18.50509453]
[89.03970337 3.50817513]
[88.73570251 -11.48874378]
[77.98740387 -19.66413498]
[73.98670959 -32.35783386]
[77.98617554 -44.84737015]
[88.30493164 -52.62119293]
[88.30493164 -67.62119293]
[88.30493164 -82.62119293]
[88.30493164 -97.62119293]
[88.30493164 -112.62119293]
[88.30493164 -127.62119293]
[77.72453308 -136.01274109]
[73.98191833 -148.78491211]
[78.23369598 -161.19082642]
[88.70788574 -168.75392151]
[89.01188660 -183.75083923]
[89.31589508 -198.74775696]
[89.61989594 -213.74467468]
[89.92390442 -228.74159241]
[90.22790527 -243.73851013]
[90.53191376 -258.73544312]
[76.92990875 -268.74206543]
[72.00049591 -284.71939087]
[77.49020386 -300.33731079]
[91.05787659 -309.53033447]
[91.05787659 -324.53033447]
[91.05787659 -339.53033447]
[91.05787659 -354.53033447]
[90.90586853 -369.52957153]
[90.60186768 -384.52648926]
[90.29785919 -399.52340698]
[89.99385834 -414.52032471]
[77.70086670 -424.18554688]
[74.54718018 -439.50183105]
[82.02188110 -453.23727417]
[96.59564209 -458.90646362]
[111.38717651 -453.83255005]
[119.41236877 -440.41128540]
[116.88198090 -424.97979736]
[104.99077606 -414.82434082]
[105.29478455 -399.82742310]
[105.59878540 -384.83050537]
[105.90278625 -369.83358765]
[109.20207214 -363.17068481]
[106.05787659 -354.53033447]
[106.05787659 -339.53033447]
[106.05787659 -324.53033447]
[106.05787659 -309.53033447]
[117.56488800 -302.69674683]
[124.23313141 -290.96820068]
[124.22019958 -277.36816406]
[117.42212677 -265.46401978]
[105.52883148 -258.43142700]
[105.22482300 -243.43450928]
[104.92082214 -228.43759155]
[104.61681366 -213.44067383]
[104.31281281 -198.44375610]
[104.00880432 -183.44683838]
[103.70480347 -168.44992065]
[115.85393524 -156.85914612]
[115.89025879 -139.73091125]
[103.30493164 -127.62119293]
[103.30493164 -112.62119293]
[103.30493164 -97.62119293]
[103.30493164 -82.62119293]
[103.30493164 -67.62119293]
[103.30493164 -52.62119293]
[115.68647766 -41.27903366]
[116.06993103 -24.15505028]
[103.73262024 -11.79274845]
[104.03662109 3.20417094]
[104.34062958 18.20108986]
[104.79659271 33.19415665]
[105.40447998 48.18183517]
[106.01235962 63.16951370]
[116.08536530 66.32665253]
[124.87128448 72.17819977]
[131.66709900 80.25594330]
[135.92904663 89.91352081]
[137.31608582 100.37818146]
[135.71723938 110.81257629]
[131.26045227 120.38179779]
[124.30231476 128.32014465]
[115.39960480 133.99243164]
[105.26468658 136.94477844]
[104.35317230 151.91705322]
[111.23757172 166.16189575]
[102.74116516 178.39547729]
[101.82965088 193.36775208]
[100.91813660 208.34002686]
[100.00662231 223.31231689]
[99.09510803 238.28459167]
[98.18360138 253.25686646]
[107.69707489 260.50253296]
[112.45747375 271.34149170]
[111.37811279 283.00970459]
[104.84561157 292.59274292]
[94.59394836 297.75384521]
[93.07642365 312.67687988]
[91.55889893 327.59991455]
[90.04136658 342.52297974]
[88.52384186 357.44601440]
[90.77777863 366.36010742]
[86.82135010 372.65502930]
[85.00169373 387.54425049]
[92.60922241 404.28359985]
[81.58443451 417.90496826]
[80.06690979 432.82800293]
[86.36837006 447.34014893]
[77.38317108 459.21936035]
[75.86564636 474.14239502]
[74.34812164 489.06542969]
[72.83059692 503.98846436]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 154]
[7 153]
[8 152]
[9 151]
[11 149]
[12 148]
[15 146]
[16 145]
[17 143]
[18 142]
[19 141]
[20 140]
[21 139]
[24 134]
[25 133]
[26 132]
[27 131]
[28 130]
[29 129]
[31 127]
[32 126]
[37 116]
[38 115]
[39 114]
[41 113]
[42 112]
[43 111]
[47 108]
[48 107]
[49 106]
[50 105]
[51 104]
[52 103]
[56 100]
[57 99]
[58 98]
[59 97]
[60 96]
[61 95]
[62 94]
[66 89]
[67 88]
[68 87]
[69 86]
[70 84]
[71 83]
[72 82]
[73 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
