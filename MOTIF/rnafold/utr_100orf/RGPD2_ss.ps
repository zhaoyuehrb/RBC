%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGUUUCACGCGUCUCGGGAGCCAGGUUGGCGGUGCGAUGAGGCGCAGCAAAGCCUACGGGGAGCGGUACCUCGCCUCGGUGCAGGGCUCCGCCCCGUCGCCUGGAAAGAAGUUGAGAGGAUUCUAUUUUGCAAAGC\
) } def
/len { sequence length } bind def

/coor [
[96.55923462 143.73814392]
[87.96330261 156.03082275]
[79.36737061 168.32351685]
[70.77143860 180.61619568]
[62.17551041 192.90887451]
[53.57957840 205.20155334]
[44.98364639 217.49423218]
[36.38771820 229.78691101]
[34.00362015 238.69413757]
[27.45601845 242.25727844]
[18.58447647 254.35255432]
[19.59152794 270.36398315]
[7.60493517 281.02703857]
[-8.18021488 278.16198730]
[-15.65490532 263.96661377]
[-9.08519459 249.33039856]
[6.48919868 245.48101807]
[15.36074162 233.38574219]
[24.09503746 221.19097900]
[32.69096756 208.89830017]
[41.28689957 196.60562134]
[49.88282776 184.31294250]
[58.47875977 172.02026367]
[67.07469177 159.72758484]
[75.67062378 147.43490601]
[84.26654816 135.14222717]
[72.49230194 125.30432892]
[65.79661560 112.00489044]
[64.96085358 97.59266663]
[69.76496887 84.46070862]
[79.08123779 74.64920807]
[91.11402893 69.52921295]
[90.43621826 54.54453278]
[89.75840759 39.55985641]
[86.21943665 31.04525566]
[89.23847961 24.22965431]
[88.89949036 9.23348618]
[88.56050110 -5.76268291]
[88.22150421 -20.75885201]
[87.88251495 -35.75502014]
[87.54352570 -50.75119019]
[79.49632263 -64.37297821]
[86.94401550 -77.27185822]
[86.60502625 -92.26802826]
[86.26602936 -107.26419830]
[85.92704010 -122.26036835]
[77.87983704 -135.88215637]
[85.32753754 -148.78103638]
[84.98854065 -163.77720642]
[84.64955139 -178.77337646]
[72.06070709 -187.65184021]
[67.17082214 -202.07205200]
[71.65664673 -216.43664551]
[83.59782410 -225.29927063]
[83.25882721 -240.29544067]
[80.09196472 -246.25439453]
[80.42439270 -252.03440857]
[83.25882721 -255.97343445]
[83.59782410 -270.96960449]
[76.17437744 -284.94110107]
[84.19732666 -297.49026489]
[84.53631592 -312.48645020]
[84.87531281 -327.48260498]
[81.92135620 -336.21740723]
[85.39523315 -342.81280518]
[86.07304382 -357.79748535]
[86.75085449 -372.78216553]
[87.42866516 -387.76684570]
[79.40299225 -402.06790161]
[88.00676727 -416.02880859]
[104.38916779 -415.28778076]
[111.69738007 -400.60711670]
[102.41334534 -387.08901978]
[101.73553467 -372.10433960]
[101.05772400 -357.11965942]
[100.37991333 -342.13497925]
[99.87148285 -327.14361572]
[99.53248596 -312.14743042]
[99.19349670 -297.15127563]
[106.64118958 -284.25238037]
[98.59399414 -270.63061523]
[98.25499725 -255.63442993]
[98.25499725 -240.63442993]
[98.59399414 -225.63825989]
[110.92344666 -217.32427979]
[116.05378723 -203.17706299]
[111.82050323 -188.55062866]
[99.64572144 -179.11236572]
[99.98471069 -164.11619568]
[100.32369995 -149.12002563]
[108.34665680 -136.57086182]
[100.92321014 -122.59935760]
[101.26219940 -107.60318756]
[101.60119629 -92.60701752]
[101.94018555 -77.61084747]
[109.96314240 -65.06169128]
[102.53968811 -51.09018326]
[102.87868500 -36.09401321]
[103.21767426 -21.09784317]
[103.55666351 -6.10167456]
[103.89566040 8.89449406]
[104.23464966 23.89066315]
[104.74308777 38.88204575]
[105.42089844 53.86672211]
[106.09870911 68.85140228]
[122.41254425 75.19471741]
[133.60853577 89.80181122]
[135.69706726 108.99372101]
[127.14891052 127.30300140]
[139.53794861 135.75946045]
[151.92697144 144.21594238]
[164.31600952 152.67240906]
[178.12251282 145.94366455]
[193.44253540 147.03565979]
[206.15507507 155.65464783]
[212.84049988 169.48217773]
[211.70050049 184.79870605]
[203.04168701 197.48416138]
[189.19328308 204.12622070]
[173.88040161 202.93820190]
[161.22215271 194.23968506]
[154.62353516 180.37051392]
[155.85954285 165.06143188]
[143.47050476 156.60496521]
[131.08146667 148.14849854]
[118.69243622 139.69203186]
[125.51058960 153.05290222]
[132.32875061 166.41377258]
[143.20425415 176.74446106]
[147.95062256 190.97372437]
[145.45478821 205.76463318]
[136.30204773 217.64854431]
[122.63881683 223.83854675]
[107.66928101 222.88301086]
[94.90397644 215.00602722]
[87.33650208 202.05484009]
[86.74151611 187.06663513]
[93.25880432 173.55604553]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[3 24]
[4 23]
[5 22]
[6 21]
[7 20]
[8 19]
[10 18]
[11 17]
[32 105]
[33 104]
[34 103]
[36 102]
[37 101]
[38 100]
[39 99]
[40 98]
[41 97]
[43 95]
[44 94]
[45 93]
[46 92]
[48 90]
[49 89]
[50 88]
[54 84]
[55 83]
[58 82]
[59 81]
[61 79]
[62 78]
[63 77]
[65 76]
[66 75]
[67 74]
[68 73]
[109 126]
[110 125]
[111 124]
[112 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
