%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUCCGCAAGGUGAGAAGCUGGACAGAAAUCUGGCGGUGGGCUACCCUUUUGUUCCUCUUUUACCACCUGGGUUACGUUUGUGGGCAGAUCCGCUACC\
) } def
/len { sequence length } bind def

/coor [
[157.72576904 286.65734863]
[169.10279846 276.53396606]
[164.51194763 262.25375366]
[159.92108154 247.97357178]
[154.78675842 242.47229004]
[155.41699219 233.17736816]
[151.27247620 218.76130676]
[147.12794495 204.34524536]
[142.98341370 189.92918396]
[138.83889771 175.51312256]
[132.51136780 161.91302490]
[124.15357971 149.45721436]
[115.79579926 137.00138855]
[107.43801117 124.54557037]
[99.08023071 112.08975220]
[90.33911133 99.89987946]
[81.22312164 87.98775482]
[72.10713196 76.07563019]
[62.99114227 64.16350555]
[53.87515259 52.25138092]
[38.45737076 50.03107834]
[29.38215256 37.82062912]
[31.59388542 23.13581276]
[22.47789383 11.22368908]
[13.36190319 -0.68843603]
[4.24591303 -12.60056114]
[-4.87007761 -24.51268578]
[-13.98606777 -36.42480850]
[-23.10205841 -48.33693695]
[-32.21804810 -60.24906158]
[-47.62073517 -59.99720383]
[-60.07275772 -68.76078796]
[-64.91947174 -83.00765991]
[-60.50058365 -97.20665741]
[-69.61657715 -109.11878204]
[-78.73256683 -121.03090668]
[-87.84855652 -132.94302368]
[-103.49810028 -136.47450256]
[-110.36447906 -150.97389221]
[-103.18038177 -165.31851196]
[-87.45684814 -168.50440979]
[-75.25561523 -158.08761597]
[-75.93643188 -142.05902100]
[-66.82044220 -130.14689636]
[-57.70444870 -118.23477173]
[-48.58845901 -106.32264709]
[-33.72810364 -106.87747955]
[-21.24284172 -98.47615814]
[-16.03775787 -84.16670227]
[-20.30592346 -69.36505127]
[-11.18993378 -57.45292664]
[-2.07394314 -45.54080200]
[7.04204750 -33.62867737]
[16.15803719 -21.71655083]
[25.27402878 -9.80442619]
[34.39001846 2.10769820]
[43.50600815 14.01982307]
[58.25852585 15.72240829]
[67.67313385 27.67313576]
[65.78727722 43.13539124]
[74.90326691 55.04751587]
[84.01925659 66.95964050]
[93.13524628 78.87176514]
[102.25123596 90.78388977]
[107.34628296 92.68617249]
[110.93599701 97.37989807]
[111.53604889 103.73196411]
[119.89383698 116.18778229]
[128.25161743 128.64360046]
[136.60940552 141.09942627]
[144.96717834 153.55523682]
[147.30099487 138.73791504]
[156.57104492 126.94527435]
[170.41819763 121.17842865]
[185.31849670 122.90497589]
[197.47999573 131.68551636]
[203.80770874 145.28552246]
[202.69131470 160.24391174]
[194.41491699 172.75396729]
[181.08477783 179.63198853]
[166.09326172 179.12762451]
[153.25495911 171.36859131]
[157.39947510 185.78465271]
[161.54400635 200.20071411]
[165.68853760 214.61677551]
[169.83305359 229.03285217]
[174.20127869 243.38270569]
[178.79214478 257.66290283]
[183.38299561 271.94311523]
[198.52795410 273.54010010]
[211.71073914 281.16464233]
[220.64738464 293.49575806]
[223.78953552 308.39700317]
[220.59281921 323.28662109]
[211.61106873 335.58493042]
[198.40043640 343.16113281]
[183.24974060 344.70263672]
[168.78392029 339.94238281]
[157.50929260 329.70504761]
[151.37922668 315.76440430]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 89]
[3 88]
[4 87]
[6 86]
[7 85]
[8 84]
[9 83]
[10 82]
[11 71]
[12 70]
[13 69]
[14 68]
[15 67]
[16 64]
[17 63]
[18 62]
[19 61]
[20 60]
[23 57]
[24 56]
[25 55]
[26 54]
[27 53]
[28 52]
[29 51]
[30 50]
[34 46]
[35 45]
[36 44]
[37 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
