%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:58:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUGGUUUUACUGAAAAAUUGAGUGGGCUCAGUUUCUGCAGCGCUUUCUUCCACUGCAAGAUGAACACCAUUCUGCCUUGCCAAGACCAGUACUUUGUAGGAGGCCAGAGCUAUAAUUGCCCGUAUUCCACUACAACGUCAGAAUCUAGUGUUGACGUUU\
) } def
/len { sequence length } bind def

/coor [
[170.04086304 505.63851929]
[167.43614197 490.86642456]
[164.83142090 476.09429932]
[162.22669983 461.32217407]
[159.62197876 446.55007935]
[157.01724243 431.77795410]
[147.27189636 424.55984497]
[145.00416565 412.23794556]
[151.97308350 401.34631348]
[149.65530396 386.52648926]
[145.49429321 380.37359619]
[147.43916321 371.39703369]
[145.40919495 356.53503418]
[143.37922668 341.67303467]
[141.34925842 326.81103516]
[130.93559265 322.01168823]
[124.07913208 312.67156982]
[122.59006500 301.05990601]
[126.95658875 290.06854248]
[136.19384766 282.49182129]
[134.74168396 267.56228638]
[133.28952026 252.63273621]
[131.69267273 237.71797180]
[129.95127869 222.81939697]
[128.20988464 207.92082214]
[126.46849060 193.02224731]
[124.72709656 178.12367249]
[120.70450592 163.67311096]
[114.49734497 150.01766968]
[108.29018402 136.36222839]
[102.08302307 122.70677948]
[84.97574615 117.15250397]
[77.21668243 100.92580414]
[83.63359070 84.12305450]
[76.90160370 70.71856689]
[70.16961670 57.31407928]
[63.43762589 43.90958786]
[56.70563889 30.50509834]
[49.97365189 17.10060883]
[43.24166107 3.69611931]
[36.50967407 -9.70837021]
[29.77768707 -23.11285973]
[12.45535278 -33.35968018]
[14.29296780 -52.57956314]
[7.04627895 -65.71293640]
[-0.20040996 -78.84631348]
[-16.17325401 -87.96287537]
[-15.20561600 -105.46416473]
[-22.70561600 -118.45454407]
[-30.20561600 -131.44493103]
[-37.70561600 -144.43530273]
[-53.85223770 -153.24041748]
[-53.22415543 -170.75718689]
[-60.97464752 -183.59968567]
[-76.05467987 -187.50228882]
[-83.73183441 -200.63682556]
[-79.91836548 -214.98928833]
[-87.66885376 -227.83178711]
[-95.41934204 -240.67428589]
[-109.17430878 -248.49168396]
[-109.12606049 -263.38619995]
[-116.87654877 -276.22869873]
[-124.62703705 -289.07122803]
[-132.37753296 -301.91372681]
[-147.54371643 -307.14501953]
[-152.77366638 -322.31167603]
[-144.05541992 -335.77911377]
[-128.07687378 -337.21627808]
[-117.09538269 -325.52069092]
[-119.53502655 -309.66421509]
[-111.78453827 -296.82171631]
[-104.03404236 -283.97921753]
[-96.28355408 -271.13668823]
[-83.08296204 -264.23788452]
[-82.57684326 -248.42477417]
[-74.82635498 -235.58227539]
[-67.07585907 -222.73977661]
[-52.60011292 -219.42491150]
[-44.55706406 -206.51119995]
[-48.13214111 -191.35017395]
[-40.38165283 -178.50767517]
[-28.69056892 -175.28407288]
[-22.13697052 -164.60597229]
[-24.71523476 -151.93530273]
[-17.21523476 -138.94493103]
[-9.71523476 -125.95454407]
[-2.21523476 -112.96416473]
[9.41114044 -109.51447296]
[15.75644302 -98.71128845]
[12.93296337 -86.09300232]
[20.17965317 -72.95962524]
[27.42634201 -59.82625198]
[37.51593781 -57.86554718]
[44.99888992 -50.50181580]
[47.21264267 -40.01418686]
[43.18217850 -29.84484863]
[49.91416550 -16.44035721]
[56.64615250 -3.03586841]
[63.37813950 10.36862087]
[70.11013031 23.77311134]
[76.84211731 37.17760086]
[83.57410431 50.58208847]
[90.30609131 63.98657990]
[97.03807831 77.39106750]
[108.28275299 78.75540924]
[117.48349762 85.36224365]
[122.36987305 95.58121490]
[121.73606110 106.89060974]
[115.73847198 116.49961853]
[121.94563293 130.15505981]
[128.15278625 143.81050110]
[134.35995483 157.46594238]
[136.23608398 142.58374023]
[143.00917053 129.19996643]
[153.88972473 118.87458801]
[167.60957336 112.81110382]
[182.56956482 111.71624756]
[197.02600098 115.71764374]
[209.29391479 124.34888458]
[217.94337463 136.60395813]
[221.96624756 151.05444336]
[220.89361572 166.01605225]
[214.85052490 179.74488831]
[204.54133606 190.64077759]
[191.16763306 197.43373108]
[176.28822327 199.33197021]
[161.63742065 196.11427307]
[148.92283630 188.15565491]
[139.62567139 176.38227844]
[141.36706543 191.28085327]
[143.10845947 206.17942810]
[144.84985352 221.07800293]
[146.59124756 235.97657776]
[150.71376038 244.18424988]
[148.21907043 251.18057251]
[149.67123413 266.11010742]
[151.12339783 281.03964233]
[166.19097900 292.46011353]
[168.14414978 310.94573975]
[156.21125793 324.78106689]
[158.24122620 339.64306641]
[160.27119446 354.50506592]
[162.30116272 369.36706543]
[164.47514343 384.20870972]
[166.79292297 399.02853394]
[178.68444824 413.05834961]
[171.78936768 429.17321777]
[174.39408875 443.94534302]
[176.99880981 458.71746826]
[179.60353088 473.48956299]
[182.20825195 488.26168823]
[184.81297302 503.03381348]
[199.27285767 508.21139526]
[209.19445801 519.93560791]
[211.90888977 535.05273438]
[206.68601990 549.49633789]
[194.93074036 559.38110352]
[179.80519104 562.04815674]
[165.37805176 556.78002930]
[155.53015137 544.99383545]
[152.91053772 529.85998535]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[9 145]
[10 144]
[12 143]
[13 142]
[14 141]
[15 140]
[20 137]
[21 136]
[22 135]
[23 133]
[24 132]
[25 131]
[26 130]
[27 129]
[28 112]
[29 111]
[30 110]
[31 109]
[34 104]
[35 103]
[36 102]
[37 101]
[38 100]
[39 99]
[40 98]
[41 97]
[42 96]
[44 92]
[45 91]
[46 90]
[48 87]
[49 86]
[50 85]
[51 84]
[53 81]
[54 80]
[57 77]
[58 76]
[59 75]
[61 73]
[62 72]
[63 71]
[64 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
