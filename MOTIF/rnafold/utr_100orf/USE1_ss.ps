%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:48:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACUUCCGCCCUCUCUUAACAUGGAGCCGGCGGAAGGGGUGGUGUAGGGCCGGGCGAUAAUGGCGGCGUCGAGGCUGGAGCUAAACCUGGUGCGGCUGCUAUCCCGCUGCGAGGCGAUGGCAGCGGAGAAACGGGACCCGGACGAGUGGCGCCUGGAGA\
) } def
/len { sequence length } bind def

/coor [
[73.92435455 100.22936249]
[59.52076721 96.04168701]
[45.11717987 91.85400391]
[30.71359253 87.66632843]
[16.31000328 83.47865295]
[1.75399518 87.10116577]
[-9.00669003 97.55141449]
[-19.76737595 108.00166321]
[-30.52806091 118.45191193]
[-41.28874588 128.90216064]
[-52.04943085 139.35240173]
[-52.44604874 154.92417908]
[-63.50778198 165.36892700]
[-78.35065460 164.89485168]
[-89.11134338 175.34509277]
[-99.87202454 185.79534912]
[-110.63271332 196.24559021]
[-110.61335754 212.04986572]
[-121.83397675 223.17970276]
[-137.63757324 223.03196716]
[-148.64816284 211.69429016]
[-148.33334351 195.89314270]
[-136.87989807 185.00305176]
[-121.08295441 185.48490906]
[-110.32227325 175.03465271]
[-99.56158447 164.58441162]
[-88.80090332 154.13417053]
[-88.84039307 139.28378296]
[-78.07640076 128.53245544]
[-62.49967957 128.59172058]
[-51.73899078 118.14147186]
[-40.97830582 107.69122314]
[-30.21762276 97.24097443]
[-19.45693588 86.79073334]
[-8.69625092 76.34048462]
[-7.96480417 61.35832977]
[-17.65635300 49.90958023]
[-27.34790230 38.46083069]
[-42.85631943 37.00247955]
[-52.52183533 25.25375748]
[-51.03594971 10.47784138]
[-60.72749710 -0.97090870]
[-70.41904449 -12.41965866]
[-80.11059570 -23.86840820]
[-93.77134705 -21.82813072]
[-106.55027771 -26.77735901]
[-115.13619232 -37.31862640]
[-117.36151123 -50.62081146]
[-112.74868774 -63.17905807]
[-122.21500397 -74.81472778]
[-131.68132019 -86.45039368]
[-141.14764404 -98.08606720]
[-158.48651123 -104.21669769]
[-160.64739990 -121.61043549]
[-170.33895874 -133.05918884]
[-180.03050232 -144.50793457]
[-189.72206116 -155.95668030]
[-204.82142639 -153.14515686]
[-219.29826355 -158.27511597]
[-229.25839233 -169.96662903]
[-232.02258301 -185.07473755]
[-226.84725952 -199.53543091]
[-215.12458801 -209.45886230]
[-200.00790405 -212.17567444]
[-185.56349182 -206.95506287]
[-175.67684937 -195.20133972]
[-173.00744629 -180.07620239]
[-178.27330017 -165.64823914]
[-168.58175659 -154.19949341]
[-158.89021301 -142.75073242]
[-149.19865417 -131.30198669]
[-137.14321899 -129.97554016]
[-128.97714233 -120.47249603]
[-129.51197815 -107.55238342]
[-120.04565430 -95.91671753]
[-110.57933807 -84.28104401]
[-101.11302185 -72.64537811]
[-84.78287506 -74.07520294]
[-70.66740417 -65.41857910]
[-64.41397858 -49.90731430]
[-68.66184998 -33.55995941]
[-58.97029877 -22.11120796]
[-49.27874756 -10.66245842]
[-39.58720016 0.78629160]
[-24.76873589 1.76031506]
[-14.77703476 13.23291588]
[-15.89915276 28.76927948]
[-6.20760393 40.21802902]
[3.48394561 51.66677856]
[20.49768066 69.07506561]
[34.90126801 73.26274109]
[49.30485916 77.45041656]
[63.70844650 81.63809204]
[78.11203766 85.82577515]
[100.61387634 68.26463318]
[132.16026306 80.89704895]
[145.97608948 75.05554962]
[159.79190063 69.21405029]
[173.60772705 63.37254333]
[187.42353821 57.53104019]
[201.23936462 51.68954086]
[215.05517578 45.84803772]
[228.87100220 40.00653458]
[242.68681335 34.16503143]
[256.44497681 28.18901634]
[270.14419556 22.07905388]
[274.27047729 6.99569225]
[287.15615845 -1.86396122]
[302.71697998 -0.31664836]
[313.60565186 10.90703678]
[314.68084717 26.50761414]
[305.43487549 39.11896515]
[290.23342896 42.78639984]
[276.25415039 35.77826309]
[262.55496216 41.88822556]
[257.70257568 47.51329422]
[248.52832031 47.98085022]
[234.71249390 53.82235336]
[220.89668274 59.66385651]
[207.08085632 65.50535583]
[193.26504517 71.34686279]
[179.44921875 77.18836212]
[165.63340759 83.02986908]
[151.81758118 88.87136841]
[138.00177002 94.71286774]
[136.04884338 101.95414734]
[150.97393799 103.45140076]
[165.91371155 104.79418182]
[170.60525513 119.04161072]
[159.38627625 128.99822998]
[145.79701233 122.64702606]
[132.14300537 116.43670654]
[130.19009399 123.67797852]
[139.19522095 135.67413330]
[148.20034790 147.67027283]
[157.20549011 159.66642761]
[172.60202026 162.02960205]
[181.56361389 174.32368469]
[179.21578979 188.98736572]
[188.22093201 200.98352051]
[197.22605896 212.97966003]
[212.90583801 214.95962524]
[222.52691650 227.49797058]
[220.38128662 243.15594482]
[207.74191284 252.64392090]
[192.10751343 250.33287048]
[182.75369263 237.59388733]
[185.22991943 221.98480225]
[176.22477722 209.98864746]
[167.21965027 197.99249268]
[152.48355103 196.15318298]
[143.18017578 184.11566162]
[145.20933533 168.67155457]
[136.20420837 156.67541504]
[127.19907379 144.67926025]
[118.19393921 132.68312073]
[105.76247406 135.04716492]
[93.91216278 133.07389832]
[84.03532410 127.43427277]
[77.14367676 119.20404053]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 94]
[2 93]
[3 92]
[4 91]
[5 90]
[6 35]
[7 34]
[8 33]
[9 32]
[10 31]
[11 30]
[14 27]
[15 26]
[16 25]
[17 24]
[36 89]
[37 88]
[38 87]
[41 84]
[42 83]
[43 82]
[44 81]
[49 77]
[50 76]
[51 75]
[52 74]
[54 71]
[55 70]
[56 69]
[57 68]
[96 125]
[97 124]
[98 123]
[99 122]
[100 121]
[101 120]
[102 119]
[103 118]
[104 117]
[105 115]
[106 114]
[133 156]
[134 155]
[135 154]
[136 153]
[139 150]
[140 149]
[141 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
