%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:00:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCUGGGCUUCACCGUCCCUCCAGUGGACUUGGGGGCUGAGCAUAAAGAUGCCUAGGAGAGGCUACUCCAAGCCUGGGUCCUGGGGCAGCUUCUGGGCCAUGCUGACCUUGGUGGGCCUGGUCACCCAUGCAGCACAGAGAGCCGAUG\
) } def
/len { sequence length } bind def

/coor [
[339.20425415 578.70104980]
[332.53472900 565.26538086]
[325.86520386 551.82971191]
[318.91574097 538.53662109]
[311.68945312 525.39202881]
[304.46313477 512.24743652]
[297.23684692 499.10284424]
[290.01052856 485.95822144]
[282.78424072 472.81362915]
[275.55792236 459.66903687]
[269.53961182 455.29379272]
[268.32119751 446.17260742]
[261.37176514 432.87957764]
[254.42233276 419.58651733]
[247.47288513 406.29345703]
[240.52345276 393.00039673]
[225.78997803 395.54711914]
[210.97064209 393.41229248]
[197.51853943 386.79251099]
[186.75665283 376.32482910]
[179.74768066 363.02532959]
[177.18916321 348.19061279]
[179.34408569 333.27133179]
[186.01383972 319.73040771]
[196.55654907 308.89947510]
[189.60710144 295.60641479]
[182.65765381 282.31335449]
[175.70822144 269.02032471]
[169.78286743 264.51998901]
[168.75573730 255.37530518]
[162.08621216 241.93962097]
[155.41668701 228.50395203]
[148.74716187 215.06826782]
[142.07763672 201.63259888]
[135.40809631 188.19691467]
[128.73857117 174.76124573]
[122.06904602 161.32556152]
[115.39952087 147.88989258]
[108.72998810 134.45420837]
[102.06046295 121.01853943]
[82.01131439 117.97258759]
[70.40684509 97.07221222]
[56.70365906 90.97116089]
[43.00047684 84.87010956]
[29.29729652 78.76905823]
[13.05342388 81.02042389]
[3.19665575 67.91408539]
[9.86678982 52.93272018]
[26.20216370 51.48787308]
[35.39834595 65.06587982]
[49.10152817 71.16693115]
[62.80471039 77.26797485]
[76.50788879 83.36902618]
[88.06558990 73.80767059]
[84.64032745 59.20398331]
[81.21506500 44.60029984]
[77.78980255 29.99661636]
[74.36454010 15.39293385]
[70.93927765 0.78925020]
[56.47576523 -13.18982601]
[62.69593048 -31.45740891]
[58.66213608 -45.90484619]
[54.62833786 -60.35228348]
[50.59453964 -74.79972076]
[46.56074142 -89.24716187]
[32.67052460 -96.78621674]
[28.25973701 -111.96253204]
[35.94522476 -125.77227020]
[51.16732407 -130.02235413]
[64.89503479 -122.19129181]
[68.98394775 -106.92510223]
[61.00818253 -93.28096008]
[65.04197693 -78.83351898]
[69.07577515 -64.38608551]
[73.10957336 -49.93864441]
[77.14337158 -35.49120712]
[86.52977753 -31.25264740]
[92.12045288 -22.34182549]
[91.84165955 -11.60560417]
[85.54296112 -2.63601279]
[88.96822357 11.96767044]
[92.39348602 26.57135391]
[95.81874847 41.17503738]
[99.24401093 55.77872086]
[102.66927338 70.38240814]
[119.86992645 81.91944885]
[123.99184418 100.10434723]
[115.49613953 114.34900665]
[122.16566467 127.78468323]
[128.83518982 141.22036743]
[135.50473022 154.65603638]
[142.17425537 168.09172058]
[148.84378052 181.52738953]
[155.51330566 194.96307373]
[162.18283081 208.39874268]
[168.85235596 221.83442688]
[175.52189636 235.27009583]
[182.19142151 248.70578003]
[189.00126648 262.07086182]
[195.95071411 275.36392212]
[202.90016174 288.65698242]
[209.84959412 301.95004272]
[224.76026917 299.47424316]
[239.68591309 301.72537231]
[253.16670227 308.47052002]
[263.88803101 319.03781128]
[270.80880737 332.38342285]
[273.26239014 347.19461060]
[271.02090454 362.01876831]
[264.31631470 375.40603638]
[253.81649780 386.05096436]
[260.76593018 399.34402466]
[267.71539307 412.63708496]
[274.66482544 425.93011475]
[281.61425781 439.22317505]
[288.70251465 452.44271851]
[295.92883301 465.58734131]
[303.15512085 478.73193359]
[310.38143921 491.87652588]
[317.60775757 505.02111816]
[324.83404541 518.16571045]
[332.06036377 531.31030273]
[337.59689331 535.11657715]
[339.97296143 540.37084961]
[339.30087280 545.16015625]
[345.97039795 558.59582520]
[352.63992310 572.03149414]
[367.38986206 568.88665771]
[382.45846558 569.50952148]
[396.89849854 573.86108398]
[409.80227661 581.66772461]
[420.35864258 592.43865967]
[427.90402222 605.49694824]
[431.96408081 620.02160645]
[432.28363037 635.09973145]
[428.84259033 649.78338623]
[421.85720825 663.14959717]
[411.76666260 674.35815430]
[399.20520020 682.70440674]
[384.96249390 687.66381836]
[369.93380737 688.92462158]
[355.06387329 686.40747070]
[341.28744507 680.27062988]
[329.47048950 670.89990234]
[320.35586548 658.88433838]
[314.51647949 644.97918701]
[312.31945801 630.05859375]
[313.90286255 615.06048584]
[319.16717529 600.92761230]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 127]
[2 126]
[3 125]
[4 122]
[5 121]
[6 120]
[7 119]
[8 118]
[9 117]
[10 116]
[12 115]
[13 114]
[14 113]
[15 112]
[16 111]
[25 102]
[26 101]
[27 100]
[28 99]
[30 98]
[31 97]
[32 96]
[33 95]
[34 94]
[35 93]
[36 92]
[37 91]
[38 90]
[39 89]
[40 88]
[42 53]
[43 52]
[44 51]
[45 50]
[54 85]
[55 84]
[56 83]
[57 82]
[58 81]
[59 80]
[61 76]
[62 75]
[63 74]
[64 73]
[65 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
