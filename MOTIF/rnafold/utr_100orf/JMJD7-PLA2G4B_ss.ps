%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:22:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGGGGAAAGGCGGGGUCUCGGCCGGCGCUGACGCAGCCAUGGCGGAGGCGGCUUUGGAAGCCGUGCGGAGCGAGUUACGAGAAUUCCCGGCCGCUGCAAGGGAGCUCUGCGUGCCUCUUGCUGUGCCCUACCUGGACA\
) } def
/len { sequence length } bind def

/coor [
[94.75132751 268.62445068]
[94.41714478 253.62817383]
[94.08296204 238.63189697]
[86.06403351 226.08015442]
[93.49195862 212.11103821]
[93.15777588 197.11476135]
[92.82359314 182.11848450]
[84.27575684 173.48791504]
[83.92137909 160.94390869]
[92.50000000 151.24166870]
[92.50000000 136.24166870]
[92.50000000 121.24167633]
[87.05107117 116.08811188]
[76.74376678 126.98579407]
[65.84626007 116.67831421]
[76.15322113 105.78099060]
[70.70429230 100.62742615]
[55.72755432 101.46252441]
[40.75082016 102.29762268]
[25.77408409 103.13272095]
[10.79734802 103.96781921]
[-2.55066061 112.46141815]
[-15.68895340 105.44468689]
[-30.66568947 106.27978516]
[-45.64242554 107.11488342]
[-60.59683609 108.28343964]
[-75.52150726 109.78487396]
[-90.44617462 111.28630829]
[-105.35318756 112.95391846]
[-120.24069977 114.78748322]
[-133.00105286 125.08823395]
[-148.20249939 118.93616486]
[-150.20709229 102.65999603]
[-136.95268250 93.00325775]
[-122.07426453 99.89997101]
[-107.18675232 98.06640625]
[-100.88169098 94.09480286]
[-91.94760895 96.36164093]
[-77.02294159 94.86020660]
[-62.09827423 93.35877228]
[-58.39291382 90.23004150]
[-52.66069794 89.44941711]
[-46.47752380 92.13814545]
[-31.50078773 91.30304718]
[-16.52405167 90.46794891]
[-4.24727917 82.03408813]
[9.96224976 88.99108124]
[24.93898582 88.15599060]
[39.91572189 87.32089233]
[54.89245605 86.48579407]
[69.86919403 85.65069580]
[76.78306580 72.33910370]
[68.85317993 59.60659027]
[60.92329788 46.87407684]
[52.99341202 34.14156342]
[45.06352615 21.40904808]
[31.55768585 11.16070175]
[37.66673660 -4.65434980]
[54.55488205 -3.16208696]
[57.79603958 13.47916317]
[65.72592926 26.21167755]
[73.65581512 38.94419098]
[81.58569336 51.67670822]
[89.51557922 64.40921783]
[105.20216370 71.81708527]
[112.25869751 83.92595673]
[110.59809113 94.87734222]
[124.59580231 89.48622131]
[138.59350586 84.09510803]
[148.69071960 71.91491699]
[163.34840393 74.56093597]
[177.34611511 69.16982269]
[191.34382629 63.77870560]
[205.34153748 58.38758850]
[219.33924866 52.99647141]
[233.33694458 47.60535431]
[245.18812561 31.36450195]
[264.13327026 34.98977280]
[277.87692261 28.98045349]
[291.62057495 22.97113419]
[305.36422729 16.96181679]
[319.04010010 10.79976368]
[332.64645386 4.48574257]
[346.25280762 -1.82827890]
[355.51391602 -14.65568638]
[370.31561279 -12.99460220]
[383.92199707 -19.30862427]
[397.52835083 -25.62264442]
[411.13470459 -31.93666649]
[424.74108887 -38.25068665]
[434.92901611 -53.54480362]
[452.31137085 -51.39728928]
[465.77368164 -58.01287842]
[474.44909668 -71.92938995]
[490.82745361 -71.10417175]
[498.06011963 -56.38613510]
[488.70675659 -42.91593933]
[472.38928223 -44.55056000]
[458.92697144 -37.93497086]
[454.69631958 -26.54840469]
[443.46694946 -20.94674683]
[431.05508423 -24.64432526]
[417.44873047 -18.33030319]
[403.84237671 -12.01628113]
[390.23599243 -5.70226002]
[376.62963867 0.61176133]
[368.34173584 12.98754692]
[352.56683350 11.77808475]
[338.96047974 18.09210587]
[325.35412598 24.40612793]
[320.57217407 30.12107658]
[311.37356567 30.70547295]
[297.62988281 36.71479034]
[283.88623047 42.72410965]
[270.14257812 48.73342896]
[267.24713135 58.63563919]
[259.18252563 65.41793823]
[248.49212646 66.62236023]
[238.72807312 61.60306549]
[224.73036194 66.99417877]
[210.73265076 72.38529968]
[196.73493958 77.77641296]
[182.73722839 83.16753387]
[168.73951721 88.55864716]
[159.64352417 100.35322571]
[143.98461914 98.09281921]
[129.98690796 103.48393250]
[115.98920441 108.87504578]
[107.50000000 121.24167633]
[107.50000000 136.24166870]
[107.50000000 151.24166870]
[117.08469391 166.92088318]
[107.81987000 181.78428650]
[108.15405273 196.78056335]
[108.48823547 211.77684021]
[116.53106689 225.40121460]
[109.07923889 238.29771423]
[109.41342163 253.29399109]
[109.74760437 268.29025269]
[112.36694336 287.49414062]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 139]
[2 138]
[3 137]
[5 135]
[6 134]
[7 133]
[10 131]
[11 130]
[12 129]
[17 51]
[18 50]
[19 49]
[20 48]
[21 47]
[23 45]
[24 44]
[25 43]
[26 40]
[27 39]
[28 38]
[29 36]
[30 35]
[52 64]
[53 63]
[54 62]
[55 61]
[56 60]
[67 128]
[68 127]
[69 126]
[71 124]
[72 123]
[73 122]
[74 121]
[75 120]
[76 119]
[78 115]
[79 114]
[80 113]
[81 112]
[82 110]
[83 109]
[84 108]
[86 106]
[87 105]
[88 104]
[89 103]
[90 102]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
