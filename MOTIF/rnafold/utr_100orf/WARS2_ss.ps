%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAACAAGACGGCUCCGCCCUUCUCAAGAUGGCGCUGCACUCAAUGCGGAAAGCGCGUGAGCGCUGGAGCUUCAUCCGGGCACUUCAUAAGGGAUCCGCAGCUGCUCCCGCUCUCCAGAAAGACAGCA\
) } def
/len { sequence length } bind def

/coor [
[120.28319550 224.26266479]
[106.99839020 217.29747009]
[95.63254547 207.50883484]
[86.77439117 195.40374756]
[80.88275909 181.60922241]
[78.26280975 166.83979797]
[79.05025482 151.86048889]
[83.20433044 137.44711304]
[69.12988281 142.63458252]
[62.45138550 156.70709229]
[48.10399628 161.76742554]
[34.72916794 155.31378174]
[20.65471840 160.50125122]
[13.97622299 174.57376099]
[-0.37116793 179.63409424]
[-13.74599552 173.18045044]
[-27.82044601 178.36791992]
[-41.89489365 183.55538940]
[-55.96934509 188.74285889]
[-62.11587524 200.15904236]
[-74.02608490 204.15745544]
[-85.08430481 199.09661865]
[-99.28089905 203.93983459]
[-109.66159821 216.63522339]
[-125.80068970 213.72628784]
[-131.09565735 198.20547485]
[-120.09948730 186.03927612]
[-104.12410736 189.74322510]
[-89.92751312 184.90002441]
[-79.17102051 171.09007263]
[-61.15681839 174.66841125]
[-47.08236694 169.48094177]
[-33.00791550 164.29347229]
[-18.93346786 159.10600281]
[-12.94620228 145.51599121]
[1.25339365 140.05465698]
[15.46724606 146.42680359]
[29.54169655 141.23933411]
[35.52896118 127.64932251]
[49.72855759 122.18799591]
[63.94240952 128.56013489]
[78.01686096 123.37265778]
[80.08998871 116.16487885]
[86.30938721 94.54153442]
[77.14178467 82.66908264]
[67.97417450 70.79663849]
[58.80657196 58.92419052]
[49.63896561 47.05174255]
[33.97423935 43.58823395]
[27.04499817 29.11877632]
[34.16676331 14.74310207]
[49.87632751 11.48899746]
[62.12265396 21.85273361]
[61.51141357 37.88413620]
[70.67901611 49.75658417]
[79.84662628 61.62903214]
[89.01422882 73.50148010]
[98.18183136 85.37392426]
[112.89804840 88.27788544]
[125.88843536 80.77788544]
[138.87881470 73.27788544]
[151.86920166 65.77788544]
[164.85957336 58.27788544]
[168.58221436 52.61193466]
[173.83906555 50.12851334]
[178.67010498 50.74668884]
[192.01023865 43.88805389]
[205.35037231 37.02941895]
[218.69050598 30.17078400]
[232.03062439 23.31214905]
[231.12733459 9.15329552]
[235.69340515 -4.23360491]
[245.00321960 -14.82408142]
[257.61645508 -21.03001022]
[271.60089111 -21.93772507]
[284.82827759 -17.44238472]
[295.29840088 -8.25887585]
[308.80157471 -14.79063129]
[322.30477905 -21.32238579]
[335.80795288 -27.85414124]
[341.08609009 -42.50947952]
[354.87332153 -48.94124985]
[368.81240845 -43.81903076]
[382.31558228 -50.35078812]
[395.81878662 -56.88254166]
[404.58056641 -70.74484253]
[420.95349121 -69.81780243]
[428.09451294 -55.05508041]
[418.65753174 -41.64329910]
[402.35055542 -43.37934875]
[388.84735107 -36.84759521]
[375.34414673 -30.31583977]
[370.70703125 -16.20794487]
[357.10592651 -9.39145756]
[342.33972168 -14.35095024]
[328.83651733 -7.81919527]
[315.33334351 -1.28744006]
[301.83013916 5.24431515]
[302.17703247 21.17254639]
[295.54129028 35.72062302]
[283.19662476 45.97470474]
[267.56561279 49.85696793]
[251.74435425 46.54650497]
[238.88926697 36.65227890]
[225.54913330 43.51091385]
[212.20899963 50.36954880]
[198.86886597 57.22818375]
[185.52873230 64.08682251]
[172.35957336 71.26826477]
[159.36920166 78.76826477]
[146.37881470 86.26826477]
[133.38842773 93.76826477]
[120.39804840 101.26826477]
[134.92074585 97.51444244]
[149.91612244 97.14158630]
[164.60742188 100.16901398]
[178.23371887 106.43991852]
[190.08917236 115.62947845]
[199.55973816 127.26170349]
[206.15483093 140.73406982]
[209.53286743 155.34875488]
[209.51885986 170.34873962]
[206.11354065 184.95709229]
[199.49328613 198.41711426]
[190.00102234 210.03163147]
[178.12841797 219.19903564]
[164.49044800 225.44447327]
[149.79350281 228.44447327]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 42]
[9 41]
[12 38]
[13 37]
[16 34]
[17 33]
[18 32]
[19 31]
[22 29]
[23 28]
[44 58]
[45 57]
[46 56]
[47 55]
[48 54]
[59 113]
[60 112]
[61 111]
[62 110]
[63 109]
[66 108]
[67 107]
[68 106]
[69 105]
[70 104]
[77 98]
[78 97]
[79 96]
[80 95]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
