%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCGGGCCCAGGUACAGCGGCCCUGCGGCUGGCGCGGCGGACGGGAUGAGGCGCUGCAGUCUCUGCGCUUUCGACGCCGCCCGGGGGCCCAGGCGGCUGAUGCGUGUGGGCCUCGCGCUGAUCUUGGUGGGCCACGUGAACCUGC\
) } def
/len { sequence length } bind def

/coor [
[139.96922302 377.76095581]
[152.30645752 368.88058472]
[148.83573914 354.28762817]
[145.36502075 339.69467163]
[141.89431763 325.10171509]
[131.73196411 318.46063232]
[128.75067139 306.27850342]
[135.09036255 294.99398804]
[131.93017578 280.33065796]
[128.76998901 265.66732788]
[118.52497864 254.85581970]
[123.18120575 239.73529053]
[120.02101898 225.07197571]
[116.86082458 210.40864563]
[113.70063782 195.74531555]
[109.18554688 189.82826233]
[110.63248444 180.73731995]
[107.78424072 166.01022339]
[104.93599701 151.28312683]
[102.08775330 136.55601501]
[99.23950958 121.82891846]
[85.84562683 115.07585907]
[72.31141663 121.54310608]
[58.77721024 128.01034546]
[49.94938660 141.83068848]
[33.58107376 140.82551575]
[26.51058769 126.02889252]
[36.01144028 112.66229248]
[52.30996704 114.47614288]
[65.84416962 108.00889587]
[79.37837982 101.54165649]
[82.84909058 86.94870758]
[73.67562866 75.08078766]
[64.50215912 63.21286392]
[56.72188950 58.29288483]
[55.26313400 50.99428558]
[46.34363556 38.93432617]
[37.42413712 26.87437057]
[28.50464058 14.81441307]
[19.58514214 2.75445604]
[10.66564465 -9.30550098]
[-1.99379385 -12.00185108]
[-9.16892338 -22.28826714]
[-7.44019985 -34.30445480]
[-16.10171127 -46.55101395]
[-20.25928307 -48.27504349]
[-23.30821228 -50.98594666]
[-25.07180977 -54.19939423]
[-25.55419731 -57.42425919]
[-24.92608833 -60.22393036]
[-32.51781464 -73.16091919]
[-40.10954285 -86.09790802]
[-47.70126724 -99.03489685]
[-55.29299545 -111.97188568]
[-62.88472366 -124.90887451]
[-70.47644806 -137.84585571]
[-85.83418274 -137.65695190]
[-99.22096252 -145.18621826]
[-107.03581238 -158.40830994]
[-107.17657471 -173.76655579]
[-99.60539246 -187.12966919]
[-86.35887146 -194.90303040]
[-71.00025940 -194.99565125]
[-57.66094589 -187.38262939]
[-49.92913818 -174.11180115]
[-49.88465500 -158.75297546]
[-57.53945923 -145.43759155]
[-49.94773483 -132.50059509]
[-42.35600662 -119.56361389]
[-34.76427841 -106.62662506]
[-27.17255211 -93.68963623]
[-19.58082581 -80.75264740]
[-11.98909855 -67.81565857]
[-3.85515094 -55.21252441]
[4.80636024 -42.96596527]
[21.10291100 -36.53532410]
[22.72560120 -18.22499847]
[31.64509964 -6.16504145]
[40.56459808 5.89491510]
[49.48409271 17.95487213]
[58.40359116 30.01482964]
[67.32308960 42.07478714]
[76.37007904 54.03939819]
[85.54354858 65.90731812]
[94.71701050 77.77523804]
[109.27230072 81.40063477]
[122.94072723 75.22211456]
[136.60916138 69.04359436]
[150.27758789 62.86507797]
[163.94601440 56.68656158]
[177.61444092 50.50804138]
[191.28286743 44.32952118]
[204.95129395 38.15100479]
[214.33940125 25.41624641]
[229.12385559 27.22431564]
[242.79228210 21.04579735]
[256.46072388 14.86727905]
[260.51138306 -0.23656693]
[273.35250854 -9.16066742]
[288.92089844 -7.69133472]
[299.86566162 3.47765684]
[301.01898193 19.07265091]
[291.83633423 31.73016930]
[276.65344238 35.47371674]
[262.63922119 28.53570557]
[248.97080994 34.71422577]
[235.30238342 40.89274216]
[226.89192200 53.18556976]
[211.12980652 51.81943130]
[197.46138000 57.99795151]
[183.79295349 64.17646790]
[170.12452698 70.35498810]
[156.45610046 76.53350830]
[142.78767395 82.71202850]
[129.11924744 88.89054108]
[115.45082092 95.06906128]
[118.92095184 106.13925934]
[113.96661377 118.98067474]
[116.81485748 133.70777893]
[119.66310120 148.43487549]
[122.51133728 163.16197205]
[125.35958099 177.88908386]
[128.36396790 192.58512878]
[131.52415466 207.24844360]
[134.68434143 221.91177368]
[137.84452820 236.57510376]
[148.31558228 248.43545532]
[143.43331909 262.50714111]
[146.59350586 277.17047119]
[149.75369263 291.83380127]
[162.42668152 305.14907837]
[156.48725891 321.63101196]
[159.95797729 336.22396851]
[163.42869568 350.81692505]
[166.89939880 365.40985107]
[181.91362000 367.78512573]
[194.87335205 375.72952271]
[203.80235291 388.03161621]
[207.33900452 402.81539917]
[204.94400024 417.82647705]
[196.98255920 430.77575684]
[184.66873169 439.68856812]
[169.88031006 443.20578003]
[154.87239075 440.79101562]
[141.93359375 432.81256104]
[133.03698730 420.48703003]
[129.53924561 405.69396973]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 135]
[3 134]
[4 133]
[5 132]
[8 130]
[9 129]
[10 128]
[12 126]
[13 125]
[14 124]
[15 123]
[17 122]
[18 121]
[19 120]
[20 119]
[21 118]
[22 31]
[23 30]
[24 29]
[32 85]
[33 84]
[34 83]
[36 82]
[37 81]
[38 80]
[39 79]
[40 78]
[41 77]
[44 75]
[45 74]
[50 73]
[51 72]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[86 116]
[87 115]
[88 114]
[89 113]
[90 112]
[91 111]
[92 110]
[93 109]
[95 107]
[96 106]
[97 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
