%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:58:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGAACAGAACUCCACCCUCUACCCCUGACACCAUGACCCACUGUUGUUCCCCUUGCUGUCAGCCUACGUGCUGCAGGACCACCUGCUGGAAGCCCACCACUGUGACCACCUGCAGCAGCACACCCUGCUGCC\
) } def
/len { sequence length } bind def

/coor [
[160.58410645 277.99807739]
[150.12068176 266.18243408]
[144.31068420 251.47933960]
[143.86943054 235.64930725]
[148.86825562 220.59460449]
[158.72361755 208.13052368]
[150.77482605 195.40980530]
[142.82603455 182.68908691]
[134.87724304 169.96835327]
[124.92061615 174.10098267]
[114.49015045 176.82466125]
[103.78417206 178.08760071]
[93.00623322 177.86578369]
[82.36128235 176.16343689]
[72.05170441 173.01292419]
[62.27354050 168.47413635]
[53.21269989 162.63339233]
[45.04147339 155.60174561]
[37.91522598 147.51289368]
[31.96945190 138.52061462]
[27.31720734 128.79592896]
[24.04694939 118.52371216]
[22.22085762 107.89928436]
[21.87365341 97.12465668]
[23.01193810 86.40470886]
[25.61406898 75.94325256]
[29.63056946 65.93921661]
[16.81822395 58.13897324]
[4.00587702 50.33873367]
[-8.80646992 42.53849030]
[-21.61881638 34.73824692]
[-34.43116379 26.93800545]
[-50.24219131 26.37055969]
[-57.08974838 13.14330769]
[-69.90209961 5.34306526]
[-82.19165802 14.24488354]
[-96.91340637 17.75388908]
[-111.81676483 15.36565781]
[-124.63561249 7.47486496]
[-133.43289185 -4.68953705]
[-136.89328003 -19.25563431]
[-134.51972961 -33.99658203]
[-147.33207703 -41.79682541]
[-163.73045349 -41.63727188]
[-171.83367920 -55.89453888]
[-163.30586243 -69.90197754]
[-146.91967773 -69.24993134]
[-139.53184509 -54.60917282]
[-126.71949768 -46.80892944]
[-114.71421814 -55.68601227]
[-100.18553162 -59.30025101]
[-85.33986664 -57.07066727]
[-72.44409180 -49.30622482]
[-63.47938538 -37.16342163]
[-59.83687592 -22.47413254]
[-62.10185623 -7.46928120]
[-49.28950882 0.33096057]
[-34.39490509 0.34048235]
[-26.63092041 14.12565899]
[-13.81857395 21.92590141]
[-1.00622761 29.72614288]
[11.80611897 37.52638626]
[24.61846542 45.32662582]
[37.43081284 53.12686920]
[44.61811447 44.43233109]
[53.00952148 36.83442688]
[62.43844604 30.49928284]
[72.71546173 25.56781578]
[83.63214111 22.15261650]
[94.96524048 20.33539391]
[106.48130798 20.16506004]
[117.94143677 21.65648460]
[129.10629272 24.78994370]
[139.74102783 29.51130486]
[149.62030029 35.73291779]
[158.71707153 23.80610466]
[167.81384277 11.87929249]
[176.91059875 -0.04751954]
[186.00737000 -11.97433186]
[187.56278992 -28.29954910]
[202.58897400 -34.86809540]
[215.62828064 -24.92281532]
[213.26698303 -8.69455910]
[197.93418884 -2.87756515]
[188.83741760 9.04924679]
[179.74064636 20.97605896]
[170.64389038 32.90287018]
[161.54711914 44.82968140]
[170.50450134 56.86153030]
[184.53924561 51.56757355]
[198.57398987 46.27361298]
[208.54409790 33.25328827]
[224.76782227 35.64550781]
[230.55558777 50.98936462]
[219.95343018 63.50040817]
[203.86793518 60.30835724]
[189.83320618 65.60231781]
[175.79846191 70.89627075]
[180.35543823 96.30902100]
[176.69657898 121.62349701]
[165.34573364 144.27565002]
[147.59796143 162.01957703]
[155.54675293 174.74029541]
[163.49554443 187.46101379]
[171.44433594 200.18173218]
[185.43353271 196.87522888]
[199.73750305 198.06242371]
[212.95051575 203.61328125]
[223.77822876 212.96957397]
[231.16442871 225.20103455]
[234.39408875 239.09779358]
[233.16252136 253.29005432]
[227.60415649 266.38317871]
[218.27790833 277.09457397]
[225.92855835 289.99682617]
[233.57919312 302.89904785]
[241.22982788 315.80130005]
[248.88046265 328.70352173]
[256.53109741 341.60577393]
[264.18173218 354.50799561]
[279.55419922 358.17724609]
[287.75833130 371.68530273]
[283.92678833 387.01809692]
[270.33273315 395.07894897]
[255.04130554 391.08551025]
[247.12461853 377.40701294]
[251.27951050 362.15866089]
[243.62887573 349.25640869]
[235.97822571 336.35418701]
[228.32759094 323.45193481]
[220.67695618 310.54968262]
[213.02632141 297.64746094]
[205.37567139 284.74520874]
[189.98423767 287.85479736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 105]
[7 104]
[8 103]
[9 102]
[27 64]
[28 63]
[29 62]
[30 61]
[31 60]
[32 59]
[34 57]
[35 56]
[42 49]
[43 48]
[75 88]
[76 87]
[77 86]
[78 85]
[79 84]
[89 98]
[90 97]
[91 96]
[114 133]
[115 132]
[116 131]
[117 130]
[118 129]
[119 128]
[120 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
