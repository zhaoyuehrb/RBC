%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:16:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAACCAAUCAGGCACGAACCAAUCAAGUUUAUCAGACUCGAACCAAGCAGGCAUAAACCAGCCAAGCACAAACUCACUUGGUAUGAACCAAAUGGACA\
) } def
/len { sequence length } bind def

/coor [
[74.75188446 399.92593384]
[60.25218582 394.65695190]
[50.92107391 382.37142944]
[49.73608017 366.98965454]
[57.07532883 353.41986084]
[70.59689331 345.99215698]
[71.52943420 331.02117920]
[72.46198273 316.05020142]
[61.35596085 308.46646118]
[55.44065857 296.26791382]
[56.37814713 282.63415527]
[64.02834320 271.17904663]
[76.45755005 264.99279785]
[77.85523224 250.05805969]
[68.18222809 238.79003906]
[69.38693237 223.62417603]
[81.27146149 213.55462646]
[82.66915131 198.61988831]
[76.15142822 185.22703552]
[85.14096069 172.20785522]
[86.53865051 157.27311707]
[87.93634033 142.33837891]
[89.33402252 127.40364075]
[90.73171234 112.46889496]
[83.98429108 99.07217407]
[71.15221405 91.30442810]
[55.33979797 90.77705383]
[48.45873642 77.56719971]
[35.62666321 69.79945374]
[22.79458809 62.03171158]
[9.96251202 54.26396942]
[-2.86956263 46.49622345]
[-19.55058670 43.46640778]
[-21.25694275 26.59854698]
[-5.52065229 20.28938866]
[4.89818192 33.66415024]
[17.73025703 41.43189240]
[30.56233215 49.19963837]
[43.39440536 56.96738052]
[56.22648239 64.73512268]
[71.12106323 64.70690155]
[78.91996002 78.47235107]
[91.75203705 86.24009705]
[99.02102661 84.39300537]
[91.01531982 71.70802307]
[100.60569763 60.17439651]
[114.53835297 65.73147583]
[113.55901337 80.69882202]
[120.82800293 78.85173035]
[128.39524841 65.90040588]
[127.98937988 47.57331467]
[143.39926147 39.33698273]
[150.56005859 26.15657997]
[157.72085571 12.97617912]
[150.92289734 -0.97256434]
[153.65525818 -16.24717903]
[164.86726379 -26.97426414]
[180.24769592 -29.02903748]
[193.88244629 -21.62139320]
[200.52868652 -7.59972620]
[197.63078308 7.64434958]
[186.30307007 18.24917412]
[170.90126038 20.13697815]
[163.74044800 33.31737900]
[156.57965088 46.49777985]
[159.70872498 58.29722595]
[153.70367432 69.38613892]
[141.34657288 73.46765137]
[133.77932739 86.41897583]
[148.72105408 87.73982239]
[161.55442810 95.50543976]
[169.65681458 108.12887573]
[171.37246704 123.03044128]
[166.35076904 137.16488647]
[155.61793518 147.64373779]
[141.36730957 152.32556152]
[126.51109314 150.25360107]
[114.08528137 141.85128784]
[106.62915802 128.83566284]
[105.66645813 113.86658478]
[104.26876831 128.80133057]
[102.87107849 143.73606873]
[101.47338867 158.67080688]
[100.07569885 173.60554504]
[106.49344635 188.06663513]
[97.60388947 200.01757812]
[96.20619965 214.95231628]
[106.01598358 227.05215454]
[104.38577271 242.17819214]
[92.78997803 251.45574951]
[91.39228821 266.39050293]
[104.20005798 277.30776978]
[108.00341034 293.53219604]
[101.51168060 308.70062256]
[87.43296814 316.98272705]
[86.50041962 331.95373535]
[85.56787872 346.92471313]
[98.06314850 355.97302246]
[103.66166687 370.34869385]
[100.57697296 385.46450806]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 97]
[7 96]
[8 95]
[13 91]
[14 90]
[17 87]
[18 86]
[20 84]
[21 83]
[22 82]
[23 81]
[24 80]
[25 43]
[26 42]
[28 40]
[29 39]
[30 38]
[31 37]
[32 36]
[49 69]
[50 68]
[52 65]
[53 64]
[54 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
