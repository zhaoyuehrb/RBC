%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:30:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGAUGGGAAAACUAUGCCUGGGGCCGACGCUCUGCCCGGCUGCUGCCGCUGAGGAAAGCCGGGACGCGGAGCCCCGCCGAGAGCUUCUUUGCUCCGGACGCC\
) } def
/len { sequence length } bind def

/coor [
[90.21343231 126.70506287]
[98.49993896 114.20027924]
[89.32407379 126.06634521]
[87.00292969 141.71635437]
[73.09658813 147.05143738]
[63.92072678 158.91751099]
[54.74486160 170.78356934]
[45.56899643 182.64962769]
[46.16908264 198.68145752]
[33.91555023 209.03666687]
[18.20825386 205.77163696]
[11.09649277 191.39100647]
[18.03579903 176.92637634]
[33.70293045 173.47377014]
[42.87879562 161.60771179]
[52.05466080 149.74163818]
[61.23052597 137.87557983]
[62.89535141 123.07430267]
[77.45800781 116.89048004]
[86.63387299 105.02441406]
[90.19007874 90.45206451]
[87.51172638 75.69312286]
[84.83337402 60.93417740]
[82.15501404 46.17523193]
[79.47666168 31.41629028]
[76.79830933 16.65734482]
[64.83992004 10.24931812]
[58.89024353 -1.72557127]
[60.94569397 -14.74014664]
[70.02276611 -24.01887131]
[67.78713226 -38.85133362]
[65.55149841 -53.68379593]
[54.62678909 -58.84785461]
[47.68597412 -68.59127045]
[46.40116119 -80.36325836]
[50.98229599 -91.15187836]
[60.15354538 -98.25463867]
[58.80895615 -113.19425201]
[57.46436691 -128.13386536]
[56.11977768 -143.07348633]
[54.77518845 -158.01309204]
[53.43059540 -172.95271301]
[52.08600616 -187.89231873]
[41.48968124 -193.70048523]
[35.14398956 -203.84155273]
[34.56548691 -215.66929626]
[39.78362656 -226.16464233]
[49.36323547 -232.70620728]
[48.91450500 -247.69949341]
[38.26892090 -259.70162964]
[41.15700150 -275.48257446]
[55.36325836 -282.93655396]
[69.98986053 -276.34552002]
[73.81654358 -260.76553345]
[63.90779114 -248.14822388]
[64.35652161 -233.15493774]
[78.39132690 -221.59103394]
[79.70497894 -203.13774109]
[67.02561951 -189.23690796]
[68.37020874 -174.29730225]
[69.71479797 -159.35768127]
[71.05938721 -144.41807556]
[72.40398407 -129.47845459]
[73.74857330 -114.53884125]
[75.09316254 -99.59922791]
[89.79441071 -88.89535522]
[92.20929718 -70.55364990]
[80.38396454 -55.91942978]
[82.61959839 -41.08696747]
[84.85523224 -26.25450706]
[98.76654053 -16.93714714]
[101.77211761 -0.12484239]
[91.55725098 13.97899246]
[94.23561096 28.73793602]
[96.91396332 43.49687958]
[99.59231567 58.25582504]
[102.27066803 73.01477051]
[104.94902039 87.77371216]
[129.38288879 98.58103943]
[141.64868164 107.21529388]
[153.91447449 115.84954834]
[162.89128113 118.29114532]
[166.41279602 124.93011475]
[178.41479492 133.92744446]
[190.41680908 142.92477417]
[202.41880798 151.92210388]
[218.02629089 149.43572998]
[230.77134705 158.78126526]
[233.09257507 174.41415405]
[223.61280823 187.05970764]
[207.95625305 189.21551514]
[195.41163635 179.60258484]
[193.42147827 163.92410278]
[181.41947937 154.92677307]
[169.41746521 145.92944336]
[157.41546631 136.93211365]
[145.28021240 128.11534119]
[133.01441956 119.48108673]
[120.74863434 110.84683228]
[132.35217285 120.35249329]
[135.70907593 134.97204590]
[129.41453552 148.58743286]
[116.10270691 155.50083923]
[101.34437561 152.81910706]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 20]
[3 19]
[5 17]
[6 16]
[7 15]
[8 14]
[21 78]
[22 77]
[23 76]
[24 75]
[25 74]
[26 73]
[30 70]
[31 69]
[32 68]
[37 65]
[38 64]
[39 63]
[40 62]
[41 61]
[42 60]
[43 59]
[48 56]
[49 55]
[79 99]
[80 98]
[81 97]
[83 96]
[84 95]
[85 94]
[86 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
