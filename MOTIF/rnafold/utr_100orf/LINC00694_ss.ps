%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:34:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUGAGUUCUCCCUGUGUUGCCCAAGCUGGUCUGGAACUCCUGGGCUCAAGCAAUCCUCCCACCUCCCAGUGUUGAGAUUAUAGGUAUGUCUAGAGGUCAGUUUGGACAGGGACAGGAACCUCUAGACAUGUUUUUCUGGGUGAACGAGAUAAGCGGAGAAAUCACCUACCCCCCGCAGAAGGCAG\
) } def
/len { sequence length } bind def

/coor [
[219.44145203 465.83502197]
[214.99731445 451.50848389]
[203.83662415 441.64501953]
[207.13787842 426.17205811]
[202.69374084 411.84552002]
[198.24961853 397.51898193]
[187.08891296 387.65551758]
[190.39018250 372.18255615]
[185.94604492 357.85601807]
[181.50190735 343.52947998]
[177.05778503 329.20294189]
[172.61364746 314.87640381]
[168.16950989 300.54986572]
[163.60583496 286.26095581]
[158.92292786 272.01068115]
[154.12112427 257.80004883]
[149.20074463 243.63000488]
[137.71669006 234.14497375]
[140.49908447 218.57034302]
[135.57870483 204.40031433]
[130.18759155 190.40260315]
[124.33175659 176.59284973]
[118.47591400 162.78309631]
[112.62007904 148.97335815]
[106.76423645 135.16360474]
[72.05210114 134.21897888]
[47.44806290 100.57949829]
[32.85668182 104.05680084]
[18.26530266 107.53410339]
[3.73406506 111.25473785]
[-10.73297310 115.21767426]
[-25.20001030 119.18060303]
[-39.66704941 123.14353180]
[-54.13408661 127.10646820]
[-68.60112000 131.06939697]
[-83.06816101 135.03233337]
[-92.22942352 148.20240784]
[-108.24692535 149.10742188]
[-118.83341980 137.05314636]
[-115.86784363 121.28656769]
[-101.62514496 113.90246582]
[-87.03108978 120.56529236]
[-72.56405640 116.60235596]
[-58.09701538 112.63942719]
[-43.62997818 108.67649841]
[-29.16294098 104.71356201]
[-14.69590378 100.75063324]
[-0.22886604 96.78770447]
[2.88025284 93.13864899]
[8.32219028 91.41594696]
[14.78800011 92.94272614]
[29.37938118 89.46542358]
[43.97076035 85.98812103]
[45.70941162 78.69242859]
[31.11808968 75.21488953]
[34.59587479 60.62362289]
[49.18671417 64.10105133]
[50.92536545 56.80535889]
[39.47058105 47.12094116]
[28.01579857 37.43652344]
[9.83026600 34.60290527]
[4.51920748 17.88577271]
[-7.09580088 8.39411449]
[-18.71080971 -1.09754384]
[-34.40866089 0.73357260]
[-46.75150681 -9.13707733]
[-48.41655350 -24.85341072]
[-38.41595840 -37.09120941]
[-22.68289948 -38.59000015]
[-10.55151939 -28.46057892]
[-9.21915150 -12.71255207]
[2.39585733 -3.22089410]
[14.01086617 6.27076435]
[26.08670235 5.37490892]
[35.84353638 13.20475864]
[37.70021820 25.98174095]
[49.15499878 35.66616058]
[60.60978317 45.35057831]
[67.99462891 44.04135895]
[62.58506775 30.05076790]
[54.69772720 17.29185677]
[60.82573700 3.60070992]
[75.59554291 0.98289514]
[86.05570984 11.73393440]
[83.03473663 26.42536163]
[82.76432037 41.42292404]
[90.14916992 40.11370468]
[97.57669067 27.08175087]
[105.00421906 14.04979420]
[112.43173981 1.01783884]
[119.85926819 -12.01411724]
[127.28678894 -25.04607201]
[134.71430969 -38.07802963]
[142.14184570 -51.10998535]
[149.56936646 -64.14193726]
[156.99688721 -77.17389679]
[164.42442322 -90.20584869]
[171.85194397 -103.23780823]
[179.17031860 -116.33136749]
[186.37904358 -129.48561096]
[185.53358459 -147.87115479]
[200.85784912 -156.40560913]
[207.84576416 -169.67848206]
[214.83367920 -182.95135498]
[221.82159424 -196.22421265]
[216.90037537 -211.24278259]
[224.11471558 -225.30438232]
[239.18446350 -230.06654358]
[253.16900635 -222.70394897]
[257.77157593 -207.58468628]
[250.26153564 -193.67875671]
[235.09445190 -189.23629761]
[228.10653687 -175.96343994]
[221.11862183 -162.69056702]
[214.13070679 -149.41769409]
[217.41395569 -137.76228333]
[211.68443298 -126.64136505]
[199.53329468 -122.27688599]
[192.32456970 -109.12264252]
[191.86625671 -101.73117828]
[184.88389587 -95.81027985]
[177.45637512 -82.77832794]
[170.02885437 -69.74636841]
[162.60131836 -56.71441650]
[155.17379761 -43.68246078]
[147.74627686 -30.65050316]
[140.31874084 -17.61854744]
[132.89122009 -4.58659220]
[125.46369934 8.44536400]
[118.03617096 21.47731972]
[110.60865021 34.50927734]
[103.18112183 47.54123306]
[120.14588928 54.06044769]
[133.11659241 65.57189178]
[140.81880188 80.17624664]
[142.77334595 95.73447418]
[139.29766846 110.17316437]
[131.39793396 121.75921631]
[120.57398224 129.30776978]
[126.42982483 143.11750793]
[132.28565979 156.92726135]
[138.14151001 170.73701477]
[143.99734497 184.54675293]
[147.59411621 187.05902100]
[149.95523071 190.26741028]
[151.01370239 193.69390869]
[150.86605835 196.88839722]
[149.74874878 199.47993469]
[154.66911316 213.64996338]
[166.50511169 224.14854431]
[163.37077332 238.70962524]
[168.29115295 252.87966919]
[174.07365417 259.97708130]
[173.17320251 267.32778931]
[177.85610962 281.57806396]
[183.51919556 288.77108765]
[182.49604797 296.10574341]
[186.94018555 310.43228149]
[191.38432312 324.75881958]
[195.82844543 339.08535767]
[200.27258301 353.41189575]
[204.71672058 367.73843384]
[216.19528198 378.62661743]
[212.57615662 393.07485962]
[217.02027893 407.40139771]
[221.46441650 421.72793579]
[232.94299316 432.61611938]
[229.32385254 447.06436157]
[233.76799011 461.39089966]
[247.56254578 463.77325439]
[258.92813110 471.83175659]
[265.67669678 483.94509888]
[266.53930664 497.71826172]
[261.40435791 510.45614624]
[251.32826233 519.69085693]
[255.53237915 534.08966064]
[269.51065063 541.46411133]
[274.10034180 556.58728027]
[266.57846069 570.48681641]
[251.40760803 574.91638184]
[237.58839417 567.24798584]
[233.31948853 552.03112793]
[241.13357544 538.29376221]
[236.92945862 523.89495850]
[221.15098572 520.45153809]
[209.18930054 509.46182251]
[204.36888123 493.85168457]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 169]
[2 168]
[4 166]
[5 165]
[6 164]
[8 162]
[9 161]
[10 160]
[11 159]
[12 158]
[13 157]
[14 155]
[15 154]
[16 152]
[17 151]
[19 149]
[20 148]
[21 143]
[22 142]
[23 141]
[24 140]
[25 139]
[27 53]
[28 52]
[29 51]
[30 48]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[58 78]
[59 77]
[60 76]
[62 73]
[63 72]
[64 71]
[87 132]
[88 131]
[89 130]
[90 129]
[91 128]
[92 127]
[93 126]
[94 125]
[95 124]
[96 123]
[97 122]
[98 121]
[99 119]
[100 118]
[102 115]
[103 114]
[104 113]
[105 112]
[175 184]
[176 183]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
