%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:06:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCACUCAUUGGACUUCAGCAUGACUACUCAGUUGCCAGCUUACGUGGCAAUUUUGCUUUUCUAUGUCUCAAGAGCCAGCUGCCAGGACACUUUCACUGCAGCUGUUUAUGAGCAUGCAG\
) } def
/len { sequence length } bind def

/coor [
[51.18846130 281.56497192]
[48.04095078 296.32965088]
[41.02567673 309.69708252]
[30.66321373 320.67535400]
[17.72253227 328.44973755]
[3.16391110 332.44338989]
[-11.93230057 332.35989380]
[-26.44586372 328.20550537]
[-39.29977798 320.28848267]
[-49.54019547 309.19628906]
[-56.40720749 295.75207520]
[-59.39123917 280.95349121]
[-58.27085495 265.89868164]
[-53.12919617 251.70481873]
[-44.34780502 239.42517090]
[-32.57831955 229.97097778]
[-18.69411278 224.04379272]
[-3.72548962 222.08346558]
[11.21678257 224.23547363]
[17.27035713 210.51124573]
[23.32393265 196.78703308]
[29.37750816 183.06280518]
[35.43108368 169.33859253]
[34.43881989 166.59324646]
[34.54245377 163.26725769]
[35.97764206 159.80253601]
[38.80570984 156.72074890]
[42.89034653 154.55693054]
[50.33406448 141.53421021]
[57.77777863 128.51150513]
[65.22149658 115.48878479]
[61.93794632 100.85258484]
[49.64446640 92.25780487]
[37.35098267 83.66302490]
[25.05749893 75.06823730]
[12.76401711 66.47345734]
[0.47053465 57.87867355]
[-11.82294750 49.28389359]
[-26.87680435 53.51655197]
[-41.10808182 47.03543854]
[-47.79720306 32.90074158]
[-43.78577042 17.78643036]
[-30.96786118 8.82901955]
[-15.39569759 10.25792599]
[-4.42198181 21.39846230]
[-3.22816539 36.99040985]
[9.06531715 45.58519363]
[21.35879898 54.17997360]
[33.65228271 62.77475739]
[45.94576645 71.36953735]
[58.23924637 79.96432495]
[70.53273010 88.55910492]
[76.56266022 78.39667511]
[85.97017670 71.08434296]
[97.49514771 67.69279480]
[109.56002045 68.76132965]
[113.78601074 54.36893463]
[118.01200104 39.97653961]
[122.23798370 25.58414650]
[126.46397400 11.19175243]
[130.68995667 -3.20064259]
[120.50969696 -14.79226875]
[118.23502350 -30.05101776]
[124.59177399 -44.10787582]
[137.55152893 -52.47735214]
[152.97889709 -52.48877716]
[165.95103455 -44.13850784]
[172.32859802 -30.09107780]
[170.07652283 -14.82897758]
[159.91345215 -3.22228527]
[145.08235168 1.02534580]
[140.85636902 15.41774082]
[136.63038635 29.81013489]
[132.40438843 44.20252991]
[128.17840576 58.59492493]
[123.95241547 72.98731995]
[132.86344910 85.05353546]
[147.86218262 85.24825287]
[162.86091614 85.44297791]
[177.85964966 85.63769531]
[192.85839844 85.83242035]
[207.85713196 86.02713776]
[222.85586548 86.22186279]
[231.59875488 83.17527771]
[238.24012756 86.62138367]
[253.22874451 87.20541382]
[268.22369385 87.59482574]
[283.22244263 87.78954315]
[295.67007446 77.66851044]
[311.31265259 81.23075867]
[318.15048218 95.74362946]
[310.93820190 110.07409668]
[295.20843506 113.22904968]
[283.02770996 102.78827667]
[268.02896118 102.59355927]
[261.21768188 105.69030762]
[252.64471436 102.19403839]
[237.65608215 101.61000824]
[222.66114807 101.22059631]
[207.66241455 101.02587128]
[192.66366577 100.83115387]
[177.66493225 100.63642883]
[162.66619873 100.44171143]
[147.66746521 100.24698639]
[132.66873169 100.05226898]
[128.97796631 114.61984253]
[119.20215607 125.90449524]
[105.49008942 131.55975342]
[90.79621887 130.46197510]
[78.24420929 122.93250275]
[70.80049133 135.95521545]
[63.35677719 148.97793579]
[55.91305923 162.00064087]
[49.15530396 175.39216614]
[43.10173035 189.11637878]
[37.04815292 202.84060669]
[30.99457741 216.56481934]
[24.94100189 230.28904724]
[36.60521317 239.87281799]
[45.25026321 252.24884033]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 118]
[20 117]
[21 116]
[22 115]
[23 114]
[28 113]
[29 112]
[30 111]
[31 110]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[56 76]
[57 75]
[58 74]
[59 73]
[60 72]
[61 71]
[77 105]
[78 104]
[79 103]
[80 102]
[81 101]
[82 100]
[83 99]
[85 98]
[86 97]
[87 95]
[88 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
