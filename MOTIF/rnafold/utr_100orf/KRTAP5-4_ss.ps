%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:07:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCAUCUGCUCCUCUACCUGCUCCACCCUCAAUCCACCAGAACCAUGGGCUGCUGUGGCUGCUCUGGAGGCUGUGGCUCCGGCUGUGGGGGCUGUGGCUCCGGCUGUGGGGGCUGUGGCUCUGGCUGUGGGGGCUGUGGCUCCG\
) } def
/len { sequence length } bind def

/coor [
[62.04912186 452.53350830]
[56.15015411 466.40069580]
[47.21171188 478.53332520]
[35.71583557 488.27713013]
[22.28248596 495.10659790]
[7.63610554 498.65347290]
[-7.43344641 498.72644043]
[-22.11348724 495.32156372]
[-35.61233902 488.62249756]
[-47.20203018 478.99047852]
[-56.25753784 466.94494629]
[-62.29051590 453.13552856]
[-64.97560883 438.30694580]
[-64.16800690 423.25888062]
[-59.91127777 408.80282593]
[-52.43497467 395.71844482]
[-42.14228058 384.71130371]
[-29.58827400 376.37500000]
[-15.44997311 371.15914917]
[-0.48983991 369.34500122]
[14.48534489 371.03039551]
[19.54818916 356.91064453]
[24.61103249 342.79089355]
[21.62352180 328.19897461]
[33.56465149 317.82012939]
[38.62749481 303.70037842]
[43.53813553 289.52697754]
[48.29600525 275.30154419]
[53.05387497 261.07611084]
[57.81174469 246.85069275]
[62.56961441 232.62527466]
[67.32748413 218.39985657]
[66.03570557 215.04544067]
[66.34960938 210.88763428]
[68.63352203 206.70922852]
[72.87849426 203.42762756]
[78.54411316 189.53875732]
[84.05998230 175.58973694]
[89.42545319 161.58216858]
[94.79092407 147.57461548]
[100.15640259 133.56706238]
[105.52187347 119.55950165]
[86.42891693 112.39791107]
[84.64637756 94.12527466]
[74.62541962 82.96371460]
[64.60446167 71.80216217]
[56.48089218 67.46551514]
[54.49113846 60.29095840]
[44.71265411 48.91637421]
[34.93416977 37.54178619]
[25.15568542 26.16719818]
[10.29212666 20.74638557]
[7.86247063 6.05128384]
[-1.91601408 -5.32330370]
[-17.56266403 -10.23394489]
[-20.86867332 -26.29639626]
[-8.43310452 -36.98698425]
[6.95139599 -31.30814743]
[9.45857334 -15.10178852]
[19.23705864 -3.72720122]
[33.40119171 0.88002467]
[36.53027344 16.38871384]
[46.30875778 27.76330185]
[56.08724213 39.13788986]
[65.86573029 50.51247406]
[75.76602173 61.78120041]
[85.78697968 72.94275665]
[95.80793762 84.10431671]
[106.32215118 83.43108368]
[115.87617493 89.50942230]
[120.30897522 100.78137970]
[132.66781616 92.28085327]
[145.02667236 83.78032684]
[157.38551331 75.27980042]
[169.74435425 66.77927399]
[182.10321045 58.27874756]
[194.46205139 49.77822113]
[206.82089233 41.27769470]
[219.17973328 32.77716827]
[231.53858948 24.27664375]
[243.89743042 15.77611637]
[250.88296509 1.58059525]
[265.75399780 0.74296761]
[278.11285400 -7.75755882]
[285.09838867 -21.95308113]
[299.96942139 -22.79070854]
[312.32824707 -31.29123497]
[319.31381226 -45.48675537]
[334.18484497 -46.32438278]
[346.54367065 -54.82490921]
[358.90252686 -63.32543564]
[371.26138306 -71.82596588]
[383.62020874 -80.32649231]
[390.18261719 -95.35535431]
[406.50720215 -96.91744232]
[415.80062866 -83.40580750]
[408.50262451 -68.72006226]
[392.12072754 -67.96764374]
[379.76190186 -59.46711731]
[367.40304565 -50.96659088]
[355.04421997 -42.46606445]
[342.68536377 -33.96553802]
[336.58380127 -20.37803078]
[320.82879639 -18.93239021]
[308.46994019 -10.43186283]
[302.36837769 3.15564418]
[286.61337280 4.60128641]
[274.25451660 13.10181236]
[268.15298462 26.68931961]
[252.39794922 28.13496208]
[240.03910828 36.63548660]
[227.68026733 45.13601303]
[215.32142639 53.63653946]
[202.96257019 62.13706589]
[190.60372925 70.63759613]
[178.24488831 79.13812256]
[165.88603210 87.63864899]
[153.52719116 96.13917542]
[141.16835022 104.63970184]
[128.80950928 113.14022827]
[119.52943420 124.92497253]
[114.16395569 138.93252563]
[108.79848480 152.94009399]
[103.43301392 166.94764709]
[98.06753540 180.95520020]
[97.91139984 190.16250610]
[92.43298340 195.20437622]
[86.76736450 209.09324646]
[81.55290985 223.15771484]
[76.79503632 237.38314819]
[72.03717041 251.60856628]
[67.27929688 265.83398438]
[62.52142715 280.05941772]
[57.76356125 294.28485107]
[58.00368118 303.49032593]
[52.74725342 308.76321411]
[47.68441010 322.88299561]
[50.30979156 338.48483276]
[38.73079300 347.85372925]
[33.66794968 361.97348022]
[28.60510445 376.09326172]
[41.23924637 384.30758667]
[51.63804626 395.21453857]
[59.24070358 408.22592163]
[63.63721848 422.64004517]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 141]
[22 140]
[23 139]
[25 137]
[26 136]
[27 134]
[28 133]
[29 132]
[30 131]
[31 130]
[32 129]
[36 128]
[37 127]
[38 125]
[39 124]
[40 123]
[41 122]
[42 121]
[44 68]
[45 67]
[46 66]
[48 65]
[49 64]
[50 63]
[51 62]
[53 60]
[54 59]
[71 120]
[72 119]
[73 118]
[74 117]
[75 116]
[76 115]
[77 114]
[78 113]
[79 112]
[80 111]
[81 110]
[83 108]
[84 107]
[86 105]
[87 104]
[89 102]
[90 101]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
