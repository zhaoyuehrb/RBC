%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:31:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGUGCCGCCAGCCAACCGCGCGGCCGCUUGUUGAGCCAGGGCUCCACCGUCGCCAUGACGCCCGGCAAACAUUCCGGAGCCUCGGCCCGAGCCGCUAACGGAGGAGCUUGGGGGUACAGGGACUUCAGAGGCGGCCAAAAAAAGGGGUGGUGCA\
) } def
/len { sequence length } bind def

/coor [
[93.57551575 808.71466064]
[79.44527435 801.11755371]
[76.71672821 785.30828857]
[87.48299408 773.41424561]
[88.08313751 758.42626953]
[88.68328094 743.43829346]
[89.28342438 728.45031738]
[89.88356781 713.46228027]
[90.48371887 698.47430420]
[91.08386230 683.48632812]
[91.68400574 668.49835205]
[89.12155914 664.40777588]
[89.14028168 658.65417480]
[92.61993408 652.92614746]
[93.81925964 637.97418213]
[80.74897766 632.46276855]
[70.00884247 623.16400146]
[62.66143799 610.98022461]
[59.43909836 597.10015869]
[60.67097092 582.88269043]
[66.24942017 569.72412109]
[75.63930511 558.92077637]
[87.92928314 551.54150391]
[101.92024994 548.32177734]
[103.41851044 533.39678955]
[104.91676331 518.47180176]
[106.41502380 503.54678345]
[107.91328430 488.62179565]
[109.41153717 473.69680786]
[110.90979767 458.77182007]
[112.40805817 443.84683228]
[109.93313599 436.83807373]
[114.08853149 428.63925171]
[115.88511658 413.74725342]
[117.68170929 398.85522461]
[119.47830200 383.96319580]
[121.27488708 369.07116699]
[121.42496490 354.07192993]
[119.92670441 339.14694214]
[110.95684814 327.25616455]
[117.27703857 312.75216675]
[115.77877808 297.82717896]
[114.28052521 282.90219116]
[112.78226471 267.97720337]
[111.28400421 253.05221558]
[109.78575134 238.12722778]
[108.28749084 223.20223999]
[99.31763458 211.31144714]
[105.63782501 196.80746460]
[104.13956451 181.88247681]
[102.64131165 166.95748901]
[101.14305115 152.03250122]
[90.13613129 138.39512634]
[97.76902771 121.66590118]
[95.97244263 106.77388000]
[88.90314484 108.61966705]
[80.60214996 105.71360779]
[73.70867157 97.69316864]
[70.84342194 85.50056458]
[66.98530579 71.00522614]
[55.95880508 59.65943909]
[60.16223526 45.37026596]
[56.30411530 30.87492752]
[52.30116272 16.41891098]
[48.15378189 2.00366879]
[44.00639725 -12.41157436]
[39.85901642 -26.82681656]
[25.22762489 -31.99421501]
[16.45565224 -44.79390717]
[16.91609764 -60.30414963]
[26.43191528 -72.56093597]
[41.34407425 -76.85128784]
[55.91854858 -71.52546692]
[64.55115509 -58.63137054]
[63.92247772 -43.12703705]
[54.27426147 -30.97419930]
[58.42164230 -16.55895615]
[62.56902313 -2.14371324]
[66.71640778 12.27152920]
[71.61554718 17.86137009]
[70.79945374 27.01680756]
[74.65757751 41.51214981]
[85.40811920 51.82112885]
[81.48064423 67.14710236]
[85.33876801 81.64244843]
[100.24801636 83.28995514]
[107.17794037 69.98671722]
[114.10787201 56.68347931]
[112.85691071 40.33211136]
[126.54306030 31.29765511]
[141.08717346 38.87398148]
[141.52752686 55.26721573]
[127.41110229 63.61340332]
[120.48117828 76.91664124]
[113.55125427 90.21987915]
[110.86446381 104.97728729]
[112.66104889 119.86930847]
[122.33010864 128.46095276]
[123.49279785 140.94006348]
[116.06803894 150.53424072]
[117.56629181 165.45922852]
[119.06455231 180.38421631]
[120.56281281 195.30920410]
[129.63983154 208.26753235]
[123.21247864 221.70397949]
[124.71073151 236.62896729]
[126.20899200 251.55395508]
[127.70725250 266.47894287]
[129.20550537 281.40393066]
[130.70376587 296.32891846]
[132.20202637 311.25390625]
[141.27905273 324.21221924]
[134.85168457 337.64868164]
[136.34994507 352.57366943]
[144.04458618 339.69763184]
[156.77676392 331.76718140]
[171.72637939 330.53890991]
[185.58222961 336.28482056]
[195.27532959 347.73226929]
[198.65872192 362.34570312]
[194.98301697 376.88836670]
[185.06236267 388.13919067]
[171.09410095 393.60614014]
[156.17210388 392.07836914]
[143.60148621 383.89425659]
[136.16690063 370.86776733]
[134.37031555 385.75979614]
[132.57373047 400.65182495]
[130.77714539 415.54382324]
[128.98054504 430.43585205]
[127.33304596 445.34509277]
[125.83478546 460.27008057]
[124.33652496 475.19506836]
[122.83827209 490.12005615]
[121.34001160 505.04504395]
[119.84175110 519.97003174]
[118.34349060 534.89501953]
[116.84523773 549.82000732]
[131.21261597 556.64562988]
[142.36259460 567.95214844]
[148.96490479 582.36456299]
[150.24081421 598.13903809]
[146.05484009 613.37359619]
[136.92895508 626.23773193]
[123.97751617 635.19226074]
[108.77123260 639.17352295]
[107.57190704 654.12548828]
[106.67198944 669.09851074]
[106.07184601 684.08648682]
[105.47170258 699.07446289]
[104.87155914 714.06243896]
[104.27141571 729.05041504]
[103.67127228 744.03845215]
[103.07112885 759.02642822]
[102.47098541 774.01440430]
[112.25179291 786.73114014]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[11 148]
[14 147]
[15 146]
[24 138]
[25 137]
[26 136]
[27 135]
[28 134]
[29 133]
[30 132]
[31 131]
[33 130]
[34 129]
[35 128]
[36 127]
[37 126]
[38 114]
[39 113]
[41 111]
[42 110]
[43 109]
[44 108]
[45 107]
[46 106]
[47 105]
[49 103]
[50 102]
[51 101]
[52 100]
[54 97]
[55 96]
[59 85]
[60 84]
[62 82]
[63 81]
[64 79]
[65 78]
[66 77]
[67 76]
[86 95]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
