%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:03:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGGAGUUCAUUUUGUGAAGCUGUCACGAGUUUUCCAGUAGACCAUGAGCUUGCUGAUGGCAGGAGCCUGCCUGUCCUUGAUCCUUGUUUCUGUGGGGUCUAUCCCAGUGCCUGGCACAGUGGCUUUGGAGAUGGAAGGAAUAG\
) } def
/len { sequence length } bind def

/coor [
[75.36092377 128.42050171]
[67.02657318 118.09867859]
[52.70207596 122.54936981]
[38.37757492 127.00006104]
[24.10178566 131.60461426]
[9.87636185 136.36248779]
[-4.34906197 141.12034607]
[-18.57448578 145.87821960]
[-32.79990768 150.63609314]
[-47.02533340 155.39395142]
[-61.25075531 160.15182495]
[-75.47618103 164.90969849]
[-82.23925018 183.40930176]
[-105.14275360 189.16744995]
[-117.31584167 197.93191528]
[-129.48892212 206.69639587]
[-141.66201782 215.46086121]
[-153.83509827 224.22534180]
[-166.00817871 232.98980713]
[-169.99485779 248.52963257]
[-184.68846130 254.96994019]
[-198.81732178 247.37028503]
[-201.54298401 231.56047058]
[-190.77456665 219.66842651]
[-174.77265930 220.81672668]
[-162.59957886 212.05226135]
[-150.42648315 203.28778076]
[-138.25340271 194.52331543]
[-126.08031464 185.75883484]
[-113.90722656 176.99436951]
[-118.20355225 162.62280273]
[-133.18966675 161.97747803]
[-148.17578125 161.33213806]
[-163.16188049 160.68681335]
[-174.63674927 171.55433655]
[-190.43270874 171.04138184]
[-201.17831421 159.45225525]
[-200.49836731 143.66259766]
[-188.79629517 133.04013062]
[-173.01470947 133.88696289]
[-162.51655579 145.70069885]
[-147.53044128 146.34602356]
[-132.54432678 146.99136353]
[-117.55821991 147.63670349]
[-96.00994873 139.91560364]
[-80.23404694 150.68428040]
[-66.00862885 145.92640686]
[-51.78320312 141.16853333]
[-37.55777740 136.41065979]
[-23.33235550 131.65280151]
[-9.10693169 126.89492798]
[5.11849213 122.13705444]
[19.34391594 117.37918854]
[24.72868156 112.23743439]
[33.92687988 112.67556000]
[48.25138474 108.22486877]
[62.57588577 103.77417755]
[64.02663422 89.01245880]
[71.07151031 75.95938110]
[82.61496735 66.64479828]
[78.47351837 52.22785187]
[74.33206177 37.81090164]
[70.19060516 23.39395714]
[66.04914856 8.97700977]
[53.87788773 -2.01354980]
[57.57447815 -17.99063492]
[73.33618927 -22.51839066]
[84.94872284 -10.93904877]
[80.46609497 4.83555555]
[84.60755157 19.25250244]
[88.74900818 33.66944885]
[92.89046478 48.08639526]
[97.03191376 62.50334167]
[114.28923798 65.20594025]
[128.46492004 75.41226196]
[136.50184631 90.92120361]
[151.48794556 90.27587128]
[166.47406006 89.63053894]
[181.46017456 88.98520660]
[196.44628906 88.33986664]
[210.14509583 82.22899628]
[220.63696289 71.50888824]
[231.12884521 60.78879166]
[241.62071228 50.06869125]
[252.11259460 39.34859085]
[262.60446167 28.62848854]
[259.06298828 13.61311436]
[264.22317505 -0.92566341]
[276.43841553 -10.34857178]
[291.81088257 -11.64879704]
[305.43530273 -4.41143990]
[312.96411133 9.05408382]
[311.99493408 24.45097542]
[302.83703613 36.86614227]
[288.41265869 42.33794785]
[273.32455444 39.12036514]
[262.83270264 49.84046555]
[252.34082031 60.56056595]
[241.84893799 71.28066254]
[231.35707092 82.00077057]
[220.86518860 92.72087097]
[223.91015625 107.40855408]
[237.79902649 113.07417297]
[251.68789673 118.73979187]
[265.57678223 124.40541077]
[279.52578735 129.92127991]
[293.53335571 135.28675842]
[307.54092407 140.65222168]
[321.54846191 146.01770020]
[337.20321655 143.72862244]
[346.32080078 155.50651550]
[360.32833862 160.87199402]
[374.33590698 166.23747253]
[386.70587158 157.01861572]
[402.09780884 155.97372437]
[415.60021973 163.43623352]
[422.90447998 177.02485657]
[421.67990112 192.40354919]
[412.31716919 204.66499329]
[397.80395508 209.89662170]
[382.77133179 206.42904663]
[372.01620483 195.36874390]
[368.97042847 180.24502563]
[354.96286011 174.87954712]
[340.95532227 169.51408386]
[326.30249023 172.18693542]
[316.18301392 160.02525330]
[302.17544556 154.65979004]
[288.16787720 149.29431152]
[274.16030884 143.92883301]
[266.73519897 144.47743225]
[259.91116333 138.29428101]
[246.02227783 132.62866211]
[232.13340759 126.96304321]
[218.24453735 121.29742432]
[203.18251038 115.21402740]
[197.09161377 103.32598114]
[182.10551453 103.97131348]
[167.11940002 104.61664581]
[152.13328552 105.26197815]
[137.14717102 105.90731812]
[132.78575134 118.43645477]
[124.34581757 128.67211914]
[112.87726593 135.34097290]
[99.80679321 137.61344910]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 57]
[3 56]
[4 55]
[5 53]
[6 52]
[7 51]
[8 50]
[9 49]
[10 48]
[11 47]
[12 46]
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[31 44]
[32 43]
[33 42]
[34 41]
[60 73]
[61 72]
[62 71]
[63 70]
[64 69]
[76 141]
[77 140]
[78 139]
[79 138]
[80 137]
[81 101]
[82 100]
[83 99]
[84 98]
[85 97]
[86 96]
[102 135]
[103 134]
[104 133]
[105 132]
[106 130]
[107 129]
[108 128]
[109 127]
[111 125]
[112 124]
[113 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
