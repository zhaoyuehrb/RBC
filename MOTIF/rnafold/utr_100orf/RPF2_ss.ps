%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:40:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCAGCUUCCGGUUCCGCCUGUUCCGGCGCACGUAAUCGCCGAGGGCACGUGCAUGCCCCCUGGUUAAGAGUUGCAGGUAGCGGUAGCGAUGGACACUCUGGAUCGAGUAGUAAAGCCCAAAACGAAAAGAGCCAAGAGAUUCCUUGAGAAGAGAGAACCGAAACUCAAUGAAAAUAUUAAAAAUGCCA\
) } def
/len { sequence length } bind def

/coor [
[79.59241486 443.02117920]
[75.76226807 428.48739624]
[74.19569397 413.53927612]
[74.92940521 398.52722168]
[77.94621277 383.80310059]
[83.17538452 369.71212769]
[90.49436188 356.58453369]
[99.73155975 344.72811890]
[110.67045593 334.42080688]
[123.05462646 325.90417480]
[136.59375000 319.37789917]
[132.21736145 305.03051758]
[127.84095764 290.68316650]
[123.46456146 276.33578491]
[119.08815765 261.98840332]
[114.71176147 247.64103699]
[105.27913666 243.65805054]
[99.48193359 234.95288086]
[99.44146729 224.27432251]
[105.41312408 215.15757751]
[101.51097870 200.67402649]
[90.72916412 190.39775085]
[94.61006165 175.05992126]
[90.70791626 160.57637024]
[86.80577850 146.09281921]
[73.20825958 139.75975037]
[59.61075211 146.09281921]
[46.01324081 152.42587280]
[32.41572952 158.75894165]
[18.81821632 165.09199524]
[15.98275089 180.34780884]
[4.69853449 190.99891663]
[-10.69542122 192.94975281]
[-24.27982521 185.45018005]
[-30.83119965 171.38394165]
[-27.83040428 156.15979004]
[-16.43130875 145.63171387]
[-1.01709545 143.84799194]
[12.48515415 151.49449158]
[26.08266640 145.16142273]
[39.68017578 138.82836914]
[53.27769089 132.49530029]
[66.87519836 126.16223907]
[54.05693817 118.01239014]
[43.68987656 104.44578552]
[28.87262726 102.11145782]
[14.05537701 99.77712250]
[-0.76187295 97.44279480]
[-15.57912254 95.10845947]
[-28.20832443 104.60997772]
[-43.84519577 102.31567383]
[-53.21265793 89.58672333]
[-50.75315857 73.97498322]
[-37.92588043 64.74262238]
[-22.34101677 67.36703491]
[-13.24479103 80.29120636]
[1.57245898 82.62554169]
[16.38970947 84.95987701]
[31.20695877 87.29420471]
[46.02420807 89.62854004]
[52.46888351 76.08356476]
[41.31071091 66.05883789]
[30.15253830 56.03410721]
[18.99436760 46.00938034]
[4.66837311 51.39681625]
[-10.51889706 49.49802399]
[-23.07752037 40.74933624]
[-30.12161636 27.16113091]
[-30.03250313 11.85588169]
[-22.83065987 -1.64937723]
[-10.17101479 -10.25123692]
[5.03733587 -11.97305298]
[19.29962540 -6.41916466]
[29.33848381 5.13418531]
[32.84705734 20.03212166]
[29.01909637 34.85120773]
[40.17726898 44.87593842]
[51.33544159 54.90066528]
[62.49361038 64.92539978]
[68.75096893 60.79072952]
[81.26568604 52.52139282]
[87.52304077 48.38672256]
[82.67711639 34.19105148]
[69.97973633 23.81278038]
[72.88558960 7.67313719]
[88.40538025 2.37520552]
[100.57368469 13.36904335]
[96.87278748 29.34513283]
[101.71871185 43.54080200]
[108.55878448 48.92272186]
[113.98963928 55.03244019]
[117.95144653 61.59047699]
[120.43358612 68.31604767]
[130.90853882 57.57941055]
[141.38349915 46.84277725]
[141.36003113 31.26595879]
[152.13607788 20.52670288]
[166.98632812 20.60033417]
[177.46128845 9.86369896]
[187.93623352 -0.87293637]
[198.41119385 -11.60957146]
[208.79750061 -22.43198967]
[219.09445190 -33.33945847]
[222.94146729 -48.68582535]
[237.30455017 -52.62927628]
[247.60150146 -63.53674698]
[242.23823547 -77.78443146]
[243.58735657 -92.88631439]
[251.32794189 -105.85179138]
[263.87869263 -114.13668823]
[278.72073364 -116.14244080]
[292.90307617 -111.52430725]
[303.20001221 -122.43177795]
[298.72271729 -137.12358093]
[302.20678711 -152.08209229]
[312.71502686 -163.28352356]
[327.42080688 -167.71476746]
[342.36831665 -164.18382263]
[353.53674316 -153.64050293]
[357.92187500 -138.92091370]
[354.34408569 -123.98455048]
[343.76583862 -112.84921265]
[329.03256226 -108.51025391]
[314.10748291 -112.13482666]
[303.81054688 -101.22735596]
[309.23703003 -87.33424377]
[308.08856201 -72.40137482]
[300.53952026 -59.39472580]
[288.04089355 -50.92097473]
[273.04165649 -48.70516968]
[258.50897217 -53.23979950]
[248.21202087 -42.33232880]
[245.10151672 -27.76613617]
[230.00190735 -23.04251099]
[219.70497131 -12.13504219]
[217.39553833 -5.10095930]
[209.14782715 -1.13461781]
[198.67288208 9.60201740]
[188.19792175 20.33865356]
[177.72296143 31.07528877]
[178.16293335 45.91921234]
[167.69277954 56.95690536]
[152.12013245 57.31772995]
[141.64517212 68.05436707]
[131.17022705 78.79100037]
[138.04730225 93.47187805]
[138.20137024 110.06501770]
[131.28770447 125.56934357]
[118.26824188 137.04957581]
[101.28932953 142.19067383]
[105.19146729 156.67422485]
[109.09361267 171.15777588]
[120.15453339 182.47000122]
[115.99452972 196.77188110]
[119.89667511 211.25543213]
[134.80157471 224.81117249]
[129.05912781 243.26463318]
[133.43553162 257.61199951]
[137.81193542 271.95938110]
[142.18833923 286.30676270]
[146.56472778 300.65414429]
[150.94113159 315.00149536]
[165.81777954 312.86007690]
[180.84696960 313.01477051]
[195.67639160 315.46194458]
[209.95841980 320.14425659]
[223.35827637 326.95193481]
[235.56182861 335.72540283]
[246.28302002 346.25897217]
[255.27053833 358.30578613]
[262.31369019 371.58337402]
[267.24737549 385.78051758]
[269.95593262 400.56442261]
[270.37588501 415.58856201]
[268.49740601 430.50067139]
[264.36450195 444.95126343]
[258.07403564 458.60156250]
[249.77351379 471.13159180]
[239.65747070 482.24761963]
[227.96305847 491.68908691]
[214.96441650 499.23468018]
[200.96624756 504.70748901]
[186.29669189 507.97924805]
[171.29960632 508.97323608]
[156.32656860 507.66616821]
[141.72854614 504.08868408]
[127.84775543 498.32467651]
[115.00957489 490.50921631]
[103.51494598 480.82550049]
[93.63332367 469.50057983]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 162]
[12 161]
[13 160]
[14 159]
[15 158]
[16 157]
[20 155]
[21 154]
[23 152]
[24 151]
[25 150]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[61 79]
[62 78]
[63 77]
[64 76]
[82 89]
[83 88]
[93 145]
[94 144]
[95 143]
[98 140]
[99 139]
[100 138]
[101 137]
[102 135]
[103 134]
[105 132]
[106 131]
[112 125]
[113 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
