%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:34:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACUGUACUGGUUCUGAGAUUCUGUGCAAGCCUCAUGGAAAUGAAGCUGCCAGGCCAGGAAGGGUUUGAAGCCUCCAGUGCUCCUAGAAAUAUUCCUUCAGGGGAGCUGGACAGCAACCCUGACCCUGGCACCG\
) } def
/len { sequence length } bind def

/coor [
[102.27664185 114.88502502]
[96.85801697 128.87211609]
[91.43939209 142.85919189]
[86.02076721 156.84628296]
[80.60214233 170.83335876]
[85.74083710 186.03117371]
[76.94179535 199.44595337]
[60.95489502 200.78703308]
[50.04391479 189.02565002]
[52.57882690 173.18414307]
[66.61505890 165.41473389]
[72.03368378 151.42765808]
[77.45230865 137.44056702]
[82.87093353 123.45348358]
[88.28955841 109.46640015]
[84.71595001 102.87252045]
[78.86170197 116.68294525]
[64.41426086 120.71672058]
[52.25260162 111.93639374]
[51.53451920 96.95359039]
[62.80072403 87.05043030]
[77.56871796 89.68475342]
[73.99510193 83.09087372]
[59.31810379 79.99479675]
[44.64110565 76.89871979]
[35.50597382 78.19302368]
[29.66266251 73.55790710]
[15.06109142 70.12364960]
[0.45952019 66.68939209]
[-8.70306778 67.77234650]
[-14.43776131 63.00349808]
[-28.95611191 59.23289108]
[-44.25811768 63.25274277]
[-54.63176346 52.56458282]
[-69.15011597 48.79397583]
[-83.66846466 45.02336884]
[-98.18681335 41.25276184]
[-113.84135437 46.13819504]
[-125.71450806 34.82624054]
[-121.59218597 18.95366669]
[-105.71508789 14.84881878]
[-94.41620636 26.73440933]
[-79.89785767 30.50501823]
[-65.37950897 34.27562332]
[-50.86115646 38.04623413]
[-36.59759903 33.75667953]
[-25.18550491 44.71453857]
[-10.66715336 48.48514557]
[3.89377856 52.08781815]
[18.49534988 55.52207565]
[33.09692001 58.95633698]
[47.73718262 62.22172165]
[62.41418076 65.31779480]
[77.09117889 68.41387177]
[111.75600433 84.88997650]
[125.47791290 78.83116150]
[139.19981384 72.77234650]
[152.92172241 66.71353149]
[166.64363098 60.65471268]
[180.36553955 54.59589767]
[191.41024780 37.80337143]
[210.50576782 40.48966217]
[223.93322754 33.80358505]
[237.36067200 27.11750984]
[250.78811646 20.43143463]
[264.21557617 13.74535942]
[277.64300537 7.05928421]
[280.00418091 3.17152071]
[283.18618774 0.55396807]
[286.66928101 -0.69091958]
[289.95605469 -0.64690906]
[292.63238525 0.44083512]
[306.61944580 -4.97778988]
[317.77194214 -19.57824135]
[334.97659302 -16.31900787]
[348.83480835 -22.05925941]
[362.69299316 -27.79951096]
[376.55117798 -33.53976440]
[390.40936279 -39.28001404]
[404.26757812 -45.02026749]
[414.05633545 -57.44969559]
[428.77572632 -55.17187881]
[442.63391113 -60.91213226]
[456.49212646 -66.65238190]
[470.35031128 -72.39263153]
[484.20849609 -78.13288879]
[491.01348877 -84.36327362]
[498.45370483 -83.84158325]
[512.44079590 -89.26020813]
[526.42785645 -94.67883301]
[531.30181885 -109.53746033]
[544.61358643 -117.74295044]
[560.07781982 -115.42093658]
[570.39276123 -103.66778564]
[570.68798828 -88.03298950]
[560.82409668 -75.89881897]
[545.45855713 -72.99465179]
[531.84649658 -80.69174957]
[517.85937500 -75.27312469]
[503.87231445 -69.85449982]
[489.94876099 -64.27468872]
[476.09054565 -58.53443909]
[462.23236084 -52.79418945]
[448.37417603 -47.05393600]
[434.51599121 -41.31368637]
[425.71844482 -29.29483604]
[410.00781250 -31.16207314]
[396.14962769 -25.42182159]
[382.29144287 -19.68157005]
[368.43322754 -13.94131851]
[354.57504272 -8.20106697]
[340.71685791 -2.46081543]
[335.76226807 8.63604450]
[324.19000244 13.50465298]
[312.03808594 9.00929356]
[298.05099487 14.42791843]
[284.32910156 20.48673439]
[270.90164185 27.17280960]
[257.47418213 33.85888290]
[244.04673767 40.54496002]
[230.61929321 47.23103333]
[217.19184875 53.91711044]
[214.78894043 63.96144867]
[207.05946350 71.13956451]
[196.42939758 72.86497498]
[186.42436218 68.31781006]
[172.70245361 74.37662506]
[158.98054504 80.43544006]
[145.25863647 86.49425507]
[131.53672791 92.55307007]
[117.81481934 98.61188507]
[132.32315063 102.42082977]
[139.29649353 115.70137024]
[134.19479370 129.80714417]
[120.33955383 135.55451965]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 12]
[5 11]
[23 54]
[24 53]
[25 52]
[27 51]
[28 50]
[29 49]
[31 48]
[32 47]
[34 45]
[35 44]
[36 43]
[37 42]
[55 131]
[56 130]
[57 129]
[58 128]
[59 127]
[60 126]
[62 122]
[63 121]
[64 120]
[65 119]
[66 118]
[67 117]
[72 116]
[73 115]
[75 112]
[76 111]
[77 110]
[78 109]
[79 108]
[80 107]
[82 105]
[83 104]
[84 103]
[85 102]
[86 101]
[88 100]
[89 99]
[90 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
