%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUGGAAACCCAAAUAGAUCCUUCACCCUCUGACACCAUGGUCAACUCCUGUUGUGGCUCCGUGUGCUCUGACCAAGGCUGUGGCCAAGACCUCUGCCAGGAGACCUGCUGCUGCCCCAGCUGCUGUCAGACCACCU\
) } def
/len { sequence length } bind def

/coor [
[106.50566864 126.49000549]
[98.32884979 127.22592926]
[90.30341339 125.49549866]
[83.15638733 121.45545959]
[77.53519440 115.47180176]
[73.94905853 108.08657074]
[58.95283508 108.42314148]
[43.95661163 108.75971222]
[36.83307266 117.11635590]
[26.48533440 120.06697083]
[16.44610786 116.85813141]
[10.00380516 108.79724884]
[-4.99241829 108.46067810]
[-19.98864174 108.12410736]
[-34.98769760 107.95581055]
[-49.98769760 107.95581055]
[-64.98770142 107.95581055]
[-79.98770142 107.95581055]
[-94.98770142 107.95581055]
[-100.07170105 121.30557251]
[-109.39791870 132.08657837]
[-121.82448578 139.01019287]
[-135.84062195 141.25810242]
[-149.75027466 138.57904053]
[-161.87739563 131.31672668]
[-170.76786804 120.36580658]
[-175.36386108 107.06182098]
[-190.36007690 106.72525024]
[-205.35630798 106.38867950]
[-212.84759521 114.41731262]
[-223.31729126 116.90071106]
[-233.20243835 113.24468994]
[-239.27661133 104.90289307]
[-254.24263000 103.89385223]
[-268.71768188 111.60129547]
[-282.48492432 102.69087219]
[-281.38177490 86.32887268]
[-266.54306030 79.34711456]
[-253.23359680 88.92783356]
[-238.26757812 89.93686676]
[-221.66542053 80.11904144]
[-205.01972961 91.39245605]
[-190.02351379 91.72902679]
[-175.02728271 92.06559753]
[-168.88311768 77.49942017]
[-157.60406494 66.36731720]
[-142.88737488 60.38573837]
[-126.96347046 60.49298477]
[-112.25788879 66.70214081]
[-101.02186584 78.09458160]
[-94.98770142 92.95581055]
[-79.98770142 92.95581055]
[-64.98770142 92.95581055]
[-49.98769760 92.95581055]
[-34.98769760 92.95581055]
[-28.24325943 89.78411102]
[-19.65207100 93.12788391]
[-4.65584755 93.46445465]
[10.34037590 93.80102539]
[26.48533440 83.24822998]
[43.62004089 93.76348877]
[58.61626434 93.42691803]
[73.61248779 93.09034729]
[86.96882629 76.03684998]
[108.54296875 74.09513855]
[124.72969055 88.48971558]
[139.54501343 86.14319611]
[154.36033630 83.79667664]
[166.78022766 73.99581909]
[180.56118774 79.64687347]
[195.37651062 77.30035400]
[210.19183350 74.95384216]
[225.00715637 72.60732269]
[239.82247925 70.26080322]
[254.63781738 67.91429138]
[261.74829102 54.24874115]
[275.38269043 47.46963501]
[290.21902466 49.98905182]
[300.60263062 60.63417435]
[315.41796875 58.28765869]
[330.23327637 55.94113922]
[345.04861450 53.59462357]
[359.86395264 51.24810791]
[372.28384399 41.44724274]
[386.06478882 47.09830093]
[400.88012695 44.75178146]
[415.69543457 42.40526581]
[425.67532349 28.08606529]
[442.58459473 25.42618179]
[455.94244385 35.58263779]
[470.70141602 32.90428543]
[481.13430786 15.82457733]
[500.44238281 11.85314655]
[516.27685547 23.07970810]
[530.82220459 19.41460228]
[545.36749268 15.74949551]
[559.91284180 12.08438969]
[571.29772949 0.28114006]
[587.14459229 4.50114632]
[591.15161133 20.40322876]
[579.19665527 31.62868690]
[563.57794189 26.62973213]
[549.03265381 30.29483795]
[534.48730469 33.95994568]
[519.94195557 37.62504959]
[517.19738770 47.66313171]
[510.44793701 55.69046402]
[500.88308716 60.18672943]
[490.23318481 60.26334381]
[480.45666504 55.83818817]
[473.37976074 47.66323090]
[458.62081909 50.34158325]
[452.80529785 61.89337540]
[441.21325684 68.05563354]
[427.99761963 66.36556244]
[418.04196167 57.22059250]
[403.22662354 59.56710815]
[388.41131592 61.91362381]
[377.05111694 71.54665375]
[362.21044922 66.06343079]
[347.39514160 68.40995026]
[332.57980347 70.75646210]
[317.76449585 73.10298157]
[302.94915771 75.44950104]
[296.36328125 88.78232574]
[283.03164673 95.76310730]
[267.96969604 93.52906036]
[256.98431396 82.72961426]
[242.16900635 85.07613373]
[227.35368347 87.42264557]
[212.53834534 89.76916504]
[197.72302246 92.11568451]
[182.90769958 94.46219635]
[171.54750061 104.09522247]
[156.70684814 98.61200714]
[141.89152527 100.95851898]
[127.07620239 103.30503845]
[124.86638641 111.21191406]
[120.40395355 118.10311890]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 63]
[7 62]
[8 61]
[12 59]
[13 58]
[14 57]
[15 55]
[16 54]
[17 53]
[18 52]
[19 51]
[27 44]
[28 43]
[29 42]
[33 40]
[34 39]
[66 137]
[67 136]
[68 135]
[70 133]
[71 132]
[72 131]
[73 130]
[74 129]
[75 128]
[79 124]
[80 123]
[81 122]
[82 121]
[83 120]
[85 118]
[86 117]
[87 116]
[90 112]
[91 111]
[94 105]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
