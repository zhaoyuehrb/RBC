%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:28:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAGAACAGGUGUUCAAGGGGGACCCGGACACCCCUCACUCCAUCUCCUUCUCGGGCAGUGGAUUCCUCUCCUUCUACCAGGCGGGGGCUGUGGACG\
) } def
/len { sequence length } bind def

/coor [
[26.69236946 171.24929810]
[19.18240738 179.31735229]
[10.17947006 185.66397095]
[0.07029865 190.02017212]
[-10.71159363 192.20243835]
[-21.70451927 192.12036133]
[-32.43838120 189.78045654]
[-42.45477676 185.28572083]
[-51.32658005 178.83111572]
[-58.67614365 170.69508362]
[-64.19138336 161.22760010]
[-67.63903046 150.83505249]
[-82.59370422 152.00030518]
[-97.54837799 153.16555786]
[-112.50304413 154.33082581]
[-127.45771790 155.49607849]
[-142.41238403 156.66133118]
[-157.36705017 157.82659912]
[-163.27249146 161.39660645]
[-169.18043518 161.31962585]
[-173.28271484 158.56971741]
[-188.28089905 158.80299377]
[-203.27908325 159.03627014]
[-219.02227783 165.32820129]
[-229.42646790 151.94204712]
[-219.44361877 138.23880005]
[-203.51235962 144.03808594]
[-188.51417542 143.80480957]
[-173.51599121 143.57153320]
[-158.53231812 142.87191772]
[-143.57765198 141.70666504]
[-128.62297058 140.54141235]
[-113.66830444 139.37614441]
[-98.71363068 138.21089172]
[-83.75896454 137.04563904]
[-68.80429077 135.88037109]
[-64.00291443 116.84236145]
[-52.58037567 100.83845520]
[-36.08957672 90.07951355]
[-16.78528214 86.06095123]
[2.68416405 89.35491180]
[19.64017105 99.52888489]
[31.74241257 115.20242310]
[45.94948578 110.39002991]
[60.15655899 105.57764435]
[74.36363220 100.76525879]
[88.57070923 95.95287323]
[102.62123871 90.70097351]
[116.50164795 85.01464844]
[130.38204956 79.32832336]
[144.26246643 73.64199829]
[158.14286804 67.95567322]
[167.97988892 55.56439590]
[182.69032288 57.89942551]
[196.57072449 52.21310043]
[206.40774536 39.82182312]
[221.11817932 42.15685272]
[234.99858093 36.47052765]
[235.99269104 21.27930832]
[243.45352173 8.07995224]
[255.85462952 -0.53588676]
[270.70578003 -2.90329409]
[285.05285645 1.39439845]
[296.06561279 11.45345688]
[309.94604492 5.76713085]
[323.82644653 0.08080488]
[329.69924927 -14.59180737]
[344.25976562 -20.73731613]
[358.86944580 -14.70969963]
[364.86068726 -0.08503554]
[358.67895508 14.46012211]
[343.99176025 20.29638863]
[329.51275635 13.96121216]
[315.63235474 19.64753723]
[301.75195312 25.33386421]
[300.96173096 40.22819138]
[293.75341797 53.35639572]
[281.50979614 62.08878326]
[266.62820435 64.64973450]
[252.05125427 60.47850037]
[240.68490601 50.35093307]
[226.80450439 56.03726196]
[217.96031189 68.02181244]
[202.25704956 66.09350586]
[188.37664795 71.77983093]
[179.53245544 83.76438904]
[163.82919312 81.83608246]
[149.94879150 87.52240753]
[136.06838989 93.20873260]
[122.18797302 98.89505768]
[108.30757141 104.58138275]
[105.13993835 109.00227356]
[99.67124176 111.24067688]
[93.38309479 110.15995026]
[79.17601776 114.97233582]
[64.96894836 119.78472137]
[50.76187134 124.59710693]
[36.55479813 129.40950012]
[37.42792130 140.42649841]
[36.01721573 151.38027954]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 36]
[13 35]
[14 34]
[15 33]
[16 32]
[17 31]
[18 30]
[21 29]
[22 28]
[23 27]
[43 98]
[44 97]
[45 96]
[46 95]
[47 94]
[48 91]
[49 90]
[50 89]
[51 88]
[52 87]
[54 85]
[55 84]
[57 82]
[58 81]
[64 75]
[65 74]
[66 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
