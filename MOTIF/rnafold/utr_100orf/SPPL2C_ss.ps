%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:03:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAGGAACUGAAGAAGAUGGCGUGCCUGGGCUUCCUCCUCCCCGUGGGCUUCCUCCUCCUCAUCAGCACCGUGGCCGGGGGAAAGUACGGCGUGGCCCACGUGGUGUCGGAGAAUU\
) } def
/len { sequence length } bind def

/coor [
[86.55505371 230.50451660]
[84.39282227 245.34785461]
[77.84905243 258.84521484]
[67.53478241 269.73632812]
[54.41310120 277.00415039]
[39.70925522 279.97012329]
[24.79621887 278.35723877]
[11.06650448 272.31613159]
[-0.19787057 262.41088867]
[-7.94509220 249.56640625]
[-11.45176029 234.98205566]
[-10.39043903 220.01965332]
[-4.86022806 206.07630920]
[4.62012815 194.45611572]
[-9.85138988 198.40266418]
[-24.32290840 202.34919739]
[-38.79442596 206.29573059]
[-47.43865204 223.03993225]
[-65.23648071 228.19009399]
[-80.94184113 218.96926880]
[-95.18280792 223.68041992]
[-105.68096924 236.27885437]
[-121.79234314 233.22015381]
[-126.94293213 217.65084839]
[-115.83425140 205.58729553]
[-99.89395905 209.43945312]
[-85.65299225 204.72830200]
[-82.80213165 193.52714539]
[-74.77266693 185.04624939]
[-63.51371002 181.51531982]
[-51.84281921 183.94116211]
[-42.74096298 191.82421875]
[-28.26944733 187.87768555]
[-13.79792881 183.93113708]
[0.67358947 179.98460388]
[13.79503536 172.71633911]
[24.81664848 162.54165649]
[35.83826065 152.36698914]
[46.85987091 142.19230652]
[46.40387726 123.98587036]
[59.53300095 110.91250610]
[78.36877441 111.46427155]
[88.83325195 100.71742249]
[99.15373993 89.83222198]
[109.32841492 78.81060791]
[119.50308990 67.78900146]
[129.67776489 56.76738739]
[139.85244751 45.74577332]
[150.02713013 34.72416306]
[160.20179749 23.70255089]
[170.37648010 12.68093777]
[173.77903748 -7.10169458]
[192.31729126 -12.32630730]
[201.89096069 -23.87381744]
[210.51277161 -36.14835739]
[218.12776184 -49.07167053]
[225.74273682 -61.99497986]
[233.35772705 -74.91828918]
[240.97271729 -87.84160614]
[248.58770752 -100.76491547]
[243.72488403 -113.40757751]
[247.02381897 -126.34381104]
[257.04949951 -134.86067200]
[269.95962524 -135.99060059]
[277.91595459 -148.70661926]
[285.87225342 -161.42262268]
[282.08239746 -176.76577759]
[290.32318115 -190.25151062]
[305.70556641 -193.87895203]
[319.10339355 -185.49603271]
[322.56802368 -170.07617188]
[314.04391479 -156.76770020]
[298.58828735 -153.46630859]
[290.63195801 -140.75030518]
[282.67565918 -128.03428650]
[287.16723633 -111.88762665]
[278.47360229 -97.16735840]
[261.51101685 -93.14992523]
[253.89602661 -80.22661591]
[246.28103638 -67.30330658]
[238.66606140 -54.37999344]
[231.05107117 -41.45668411]
[223.43608093 -28.53337288]
[238.32101440 -30.38773918]
[250.30676270 -21.36876488]
[252.64747620 -6.55252218]
[244.02577209 5.72208786]
[229.29411316 8.54665184]
[216.74378967 0.33144370]
[213.43846130 -14.30015469]
[203.86480713 -2.75264478]
[205.73365784 7.45235634]
[201.52523804 17.17667007]
[192.43486023 23.03965950]
[181.39808655 22.85561562]
[171.22341919 33.87722778]
[161.04873657 44.89883804]
[150.87405396 55.92045212]
[140.69938660 66.94206238]
[130.52470398 77.96367645]
[120.35002899 88.98529053]
[110.17534637 100.00690460]
[107.40802002 107.69664764]
[99.58010101 111.18189240]
[89.11562347 121.92874146]
[91.60112000 133.71044922]
[88.06801605 145.09515381]
[79.52375031 153.23315430]
[68.21429443 156.14762878]
[57.03454971 153.21391296]
[46.01293945 163.38859558]
[34.99132538 173.56327820]
[23.96971321 183.73794556]
[38.85229874 181.86480713]
[53.60571289 184.57345581]
[66.85235596 191.61096191]
[77.35530853 202.32020569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 35]
[15 34]
[16 33]
[17 32]
[20 27]
[21 26]
[36 113]
[37 112]
[38 111]
[39 110]
[42 105]
[43 104]
[44 102]
[45 101]
[46 100]
[47 99]
[48 98]
[49 97]
[50 96]
[51 95]
[53 91]
[54 90]
[55 83]
[56 82]
[57 81]
[58 80]
[59 79]
[60 78]
[64 75]
[65 74]
[66 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
