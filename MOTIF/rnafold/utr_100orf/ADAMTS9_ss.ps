%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGGGGCAGCGGAGGGAGGGGUGGGAAGCACCAUGCAGUUUGUAUCCUGGGCCACACUGCUAACGCUCCUGGUGCGGGACCUGGCCGAGAUGGGGAGCCCAGACGCCGCGGCGGCCGUGCGCAAGGACAGGC\
) } def
/len { sequence length } bind def

/coor [
[75.72031403 113.88667297]
[88.54960632 106.12009430]
[73.67601776 104.17684174]
[58.80242157 102.23358154]
[43.92882919 100.29032898]
[29.05523682 98.34707642]
[14.18164444 96.40381622]
[-0.75145084 94.98867035]
[-15.72530460 94.10339355]
[-30.69915771 93.21812439]
[-45.67301178 92.33284760]
[-60.64686584 91.44757843]
[-78.14110565 101.33555603]
[-93.90104675 90.22931671]
[-108.90000153 90.05216217]
[-121.13785553 102.48823547]
[-138.24772644 102.27801514]
[-149.71601868 90.03596497]
[-164.71496582 90.21311188]
[-179.71391296 90.39026642]
[-194.71287537 90.56742096]
[-209.71182251 90.74457550]
[-224.71078491 90.92173004]
[-238.41860962 98.82147217]
[-251.23637390 91.23502350]
[-266.23532104 91.41217804]
[-281.23428345 91.58933258]
[-296.22485352 92.12068939]
[-311.19873047 93.00596619]
[-326.17257690 93.89123535]
[-341.62725830 100.86183167]
[-352.60372925 87.94078064]
[-343.22622681 73.81637573]
[-327.05786133 78.91738129]
[-312.08398438 78.03211212]
[-297.11013794 77.14683533]
[-293.27072144 74.16219330]
[-287.49212646 73.62236786]
[-281.41143799 76.59037781]
[-266.41247559 76.41322327]
[-251.41352844 76.23606873]
[-238.77851868 68.34899902]
[-224.88793945 75.92277527]
[-209.88897705 75.74562073]
[-194.89002991 75.56846619]
[-179.89106750 75.39131165]
[-164.89212036 75.21415710]
[-149.89315796 75.03701019]
[-142.22509766 64.61308289]
[-129.75805664 60.47549057]
[-117.00561523 64.35975647]
[-108.72284698 75.05321503]
[-93.72389221 75.23036194]
[-86.99741364 67.38430786]
[-76.83634186 64.52584076]
[-66.58560181 67.85003662]
[-59.76159286 76.47372437]
[-44.78773880 77.35899353]
[-29.81388474 78.24427032]
[-14.84003162 79.12953949]
[0.13382183 80.01481628]
[3.04714894 77.87205505]
[7.17291260 77.08791351]
[11.83522129 78.22998810]
[16.12490082 81.53022766]
[30.99849319 83.47348022]
[45.87208557 85.41673279]
[60.74567795 87.35999298]
[75.61927032 89.30324554]
[90.49286652 91.24649811]
[99.86268616 87.22348785]
[109.10635376 91.24649811]
[123.97994232 89.30324554]
[138.85353088 87.35999298]
[153.72712708 85.41673279]
[168.60072327 83.47348022]
[183.45033264 81.35469818]
[198.27388000 79.06069183]
[206.36650085 74.61738586]
[213.47422791 76.89186859]
[228.34782410 74.94860840]
[233.94830322 71.15145111]
[239.74520874 70.86962128]
[243.96772766 73.28202057]
[258.91650391 72.04332733]
[273.86526489 70.80464172]
[288.81402588 69.56594849]
[298.12167358 52.00289917]
[315.95266724 43.54512405]
[335.16461182 47.39299393]
[348.17333984 61.85475540]
[362.93856812 59.21127319]
[377.70379639 56.56778717]
[392.46902466 53.92430496]
[406.99472046 45.18123245]
[419.41720581 56.71890640]
[411.76931763 71.84987640]
[395.11251831 68.68952942]
[380.34729004 71.33301544]
[365.58206177 73.97650146]
[350.81683350 76.61998749]
[348.40701294 86.89345551]
[342.65350342 95.78519440]
[334.20831299 102.23977661]
[324.04464722 105.48067474]
[313.34490967 105.10360718]
[303.36303711 101.12677002]
[295.27761841 93.99177551]
[290.05273438 84.51471710]
[275.10394287 85.75340271]
[260.15518188 86.99209595]
[245.20642090 88.23078918]
[230.29107666 89.82220459]
[215.41749573 91.76545715]
[200.56788635 93.88423920]
[185.74433899 96.17824554]
[179.55635071 100.34979248]
[170.54397583 98.34707642]
[155.67037964 100.29032898]
[140.79679871 102.23358154]
[125.92320251 104.17684174]
[111.04960632 106.12009430]
[123.88111115 113.88877869]
[132.27030945 126.32346344]
[134.66963196 141.13032532]
[130.63648987 155.57795715]
[120.91486359 167.00117493]
[107.29811859 173.29277039]
[92.29811859 173.29211426]
[78.68191528 166.99932861]
[68.96129608 155.57525635]
[64.92941284 141.12727356]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 70]
[3 69]
[4 68]
[5 67]
[6 66]
[7 65]
[8 61]
[9 60]
[10 59]
[11 58]
[12 57]
[14 53]
[15 52]
[18 48]
[19 47]
[20 46]
[21 45]
[22 44]
[23 43]
[25 41]
[26 40]
[27 39]
[28 36]
[29 35]
[30 34]
[72 122]
[73 121]
[74 120]
[75 119]
[76 118]
[77 116]
[78 115]
[80 114]
[81 113]
[84 112]
[85 111]
[86 110]
[87 109]
[91 101]
[92 100]
[93 99]
[94 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
