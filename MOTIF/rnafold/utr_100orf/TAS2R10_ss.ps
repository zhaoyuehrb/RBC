%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:26:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUACGUGUAGUGGAAGGCAUCUUCAUUUUUGUUGUAGUUAGUGAGUCAGUGUUUGGGGUUUUGGGGAAUGGAUUUAUUGGACUUGUAAACUGCAUUG\
) } def
/len { sequence length } bind def

/coor [
[114.74728394 147.63883972]
[98.06533813 149.83169556]
[81.60363007 146.35208130]
[74.03638458 159.30340576]
[66.46913910 172.25473022]
[58.90189743 185.20605469]
[59.35800934 201.59886169]
[45.24962616 209.95861816]
[31.09024429 201.68553162]
[31.44582367 185.29023743]
[45.95057297 177.63880920]
[53.51781464 164.68748474]
[61.08506012 151.73616028]
[68.65230560 138.78483582]
[59.93021393 129.68760681]
[53.76728058 118.69430542]
[39.17360306 122.16194916]
[24.57992363 125.62959290]
[9.98624611 129.09724426]
[-1.55754411 140.74511719]
[-17.34577751 136.31072998]
[-21.13687134 120.35580444]
[-9.03087425 109.29339600]
[6.51860142 114.50356293]
[21.11227989 111.03591156]
[35.70595932 107.56826782]
[50.29963684 104.10062408]
[51.07763672 90.32819366]
[55.59887695 77.29578400]
[63.51741028 66.00055695]
[74.22736359 57.30676270]
[86.90927887 51.87958527]
[100.59281921 50.13428116]
[114.23099518 52.20439148]
[126.78030396 57.93152618]
[137.28054810 66.87747955]
[149.86485291 58.71441269]
[162.44914246 50.55134964]
[175.03343201 42.38828659]
[187.61772156 34.22522736]
[200.20201111 26.06216240]
[212.78630066 17.89909935]
[216.19761658 2.70039105]
[229.07615662 -5.39884710]
[243.54478455 -2.05302501]
[256.12908936 -10.21608734]
[268.71337891 -18.37915039]
[281.29766846 -26.54221344]
[293.88195801 -34.70527649]
[306.46624756 -42.86833954]
[318.92205811 -51.22612381]
[331.24639893 -59.77660751]
[343.57073975 -68.32708740]
[355.89508057 -76.87757111]
[353.13912964 -90.83441925]
[355.93527222 -104.73884583]
[363.82357788 -116.47312927]
[375.57110596 -124.26311493]
[389.36468506 -126.94647217]
[403.09054565 -124.14601135]
[414.65826416 -116.32228851]
[427.24255371 -124.48535156]
[439.82687378 -132.64840698]
[452.41116333 -140.81147766]
[459.37774658 -155.65730286]
[475.73861694 -156.77717590]
[484.66308594 -143.01907349]
[476.97045898 -128.53613281]
[460.57421875 -128.22718811]
[447.98992920 -120.06411743]
[435.40563965 -111.90105438]
[422.82135010 -103.73799133]
[425.15466309 -88.01239777]
[420.41967773 -72.77559662]
[409.50546265 -61.05770493]
[394.53521729 -55.21178436]
[378.45312500 -56.44140625]
[364.44555664 -64.55323792]
[352.12121582 -56.00275421]
[339.79687500 -47.45227051]
[327.47253418 -38.90178680]
[323.70489502 -32.38793564]
[314.62930298 -30.28404617]
[302.04501343 -22.12098312]
[289.46072388 -13.95792103]
[276.87643433 -5.79485846]
[264.29214478 2.36820436]
[251.70783997 10.53126717]
[248.86437988 25.10694122]
[236.21839905 33.56471634]
[220.94937134 30.48339272]
[208.36508179 38.64645386]
[195.78079224 46.80951691]
[183.19648743 54.97257996]
[170.61219788 63.13564301]
[158.02790833 71.29870605]
[145.44361877 79.46176910]
[149.68724060 95.74327850]
[148.27481079 112.50933838]
[141.36712646 127.85143280]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 14]
[4 13]
[5 12]
[6 11]
[16 27]
[17 26]
[18 25]
[19 24]
[36 97]
[37 96]
[38 95]
[39 94]
[40 93]
[41 92]
[42 91]
[45 88]
[46 87]
[47 86]
[48 85]
[49 84]
[50 83]
[51 81]
[52 80]
[53 79]
[54 78]
[61 72]
[62 71]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
