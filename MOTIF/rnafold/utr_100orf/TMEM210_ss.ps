%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:33:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGGGGCCAGGGCUGGACAUGGCCCCCGGUCCCUGGCCUGUGUCCUGCCUGCGUGGUGGCCCCUUGGGCCUCACAUAUUUGUCCCUUCUGCUCAUCCCUGCUGCAGCUGGAACCUACU\
) } def
/len { sequence length } bind def

/coor [
[91.57820129 193.10659790]
[91.57820129 178.10659790]
[91.57820129 163.10659790]
[91.57820129 148.10659790]
[91.57820129 133.10659790]
[91.57820129 118.10660553]
[80.97160339 107.50000000]
[65.97160339 107.50000000]
[59.88559723 110.56034088]
[54.06704712 110.06710815]
[50.19170380 107.08679199]
[35.21226120 106.30175018]
[20.23281670 105.51670837]
[5.25337458 104.73167419]
[-8.93282413 111.73612213]
[-21.23771477 103.34333038]
[-36.21715927 102.55828857]
[-51.19660187 101.77325439]
[-66.17604065 100.98821259]
[-81.15548706 100.20317078]
[-96.13493347 99.41813660]
[-111.12336731 98.82923889]
[-126.11822510 98.43658447]
[-141.11308289 98.04393005]
[-156.10794067 97.65127563]
[-164.06442261 110.78862762]
[-177.53132629 118.17360687]
[-192.88613892 117.81968689]
[-205.99848938 109.82206726]
[-213.34121704 96.33207703]
[-212.93917847 80.97844696]
[-204.90049744 67.89122772]
[-191.38755798 60.59082413]
[-176.03526306 61.04099655]
[-162.97331238 69.12065887]
[-155.71528625 82.65641785]
[-140.72042847 83.04907227]
[-125.72557068 83.44172668]
[-110.73071289 83.83438110]
[-103.87752533 80.82702637]
[-95.34989166 84.43869019]
[-80.37044525 85.22373199]
[-65.39100647 86.00877380]
[-50.41156006 86.79380798]
[-35.43211746 87.57884979]
[-20.45267487 88.36389160]
[-7.33790684 81.30328369]
[6.03841400 89.75222778]
[21.01785660 90.53726959]
[35.99729919 91.32230377]
[50.97674179 92.10734558]
[65.97160339 92.50000000]
[80.97160339 92.50000000]
[92.75135803 83.21359253]
[96.25303650 68.62804413]
[99.75471497 54.04249191]
[103.25640106 39.45694351]
[102.21543884 30.25471306]
[107.04535675 24.53787613]
[110.92764282 10.04898834]
[114.80992889 -4.43989944]
[118.69221497 -18.92878723]
[122.57450104 -33.41767502]
[120.83365631 -50.28200912]
[136.55700684 -56.62333679]
[147.00317383 -43.26990891]
[137.06338501 -29.53538895]
[133.18110657 -15.04650116]
[129.29881287 -0.55761361]
[125.41653442 13.93127346]
[121.53424835 28.42016029]
[117.84194946 42.95862579]
[114.34026337 57.54417419]
[110.83858490 72.12972260]
[107.33690643 86.71527100]
[117.40260315 75.59403992]
[125.50698853 62.97187805]
[139.34381104 57.18029785]
[154.02296448 60.26611328]
[164.35667419 71.13876343]
[166.69287109 85.95571899]
[160.20593262 99.48049164]
[147.18840027 106.93326569]
[132.23907471 105.67942810]
[117.28839874 106.89490509]
[130.99157715 112.99595642]
[145.59341431 107.57154083]
[159.40347290 113.95407867]
[164.48484802 127.90811920]
[178.18803406 134.00917053]
[191.89120483 140.11021423]
[205.59439087 146.21127319]
[217.56488037 136.67366028]
[232.59873962 133.80287170]
[247.24131775 138.25860596]
[258.12783813 149.01695251]
[262.75668335 163.60572815]
[260.06414795 178.67254639]
[250.66899109 190.75514221]
[236.73011780 197.07705688]
[221.45059204 196.18551636]
[208.34155273 188.28543091]
[200.41532898 175.19216919]
[199.49334717 159.91444397]
[185.79016113 153.81340027]
[172.08697510 147.71235657]
[158.38378906 141.61129761]
[144.61381531 147.17218018]
[130.62992859 141.18005371]
[124.89053345 126.69914246]
[111.18735504 120.59809113]
[109.54769897 119.87375641]
[108.00910950 119.04048920]
[106.57820129 118.10660553]
[106.57820129 133.10659790]
[106.57820129 148.10659790]
[106.57820129 163.10659790]
[106.57820129 178.10659790]
[106.57820129 193.10659790]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 119]
[2 118]
[3 117]
[4 116]
[5 115]
[6 114]
[7 53]
[8 52]
[11 51]
[12 50]
[13 49]
[14 48]
[16 46]
[17 45]
[18 44]
[19 43]
[20 42]
[21 41]
[22 39]
[23 38]
[24 37]
[25 36]
[54 75]
[55 74]
[56 73]
[57 72]
[59 71]
[60 70]
[61 69]
[62 68]
[63 67]
[85 111]
[86 110]
[89 107]
[90 106]
[91 105]
[92 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
