%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:10:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUUGAUUCCCGCACGCUGCAGCCUCCCGGUCAGACGAAUUUCUCCCAAUCGGAUGAAGUUCACCCUGGGCCUGGGGUCGCGGGCGUGGAGAGUGUCCUGGGAGGGGGCAGCAGCGGCGGCGGCAGGCCCUGGAGCGGGCGGCAGCGCGCUCC\
) } def
/len { sequence length } bind def

/coor [
[235.48019409 447.01223755]
[222.27316284 441.48941040]
[211.15071106 432.45199585]
[203.02380371 420.62850952]
[198.56130981 406.97622681]
[198.13499451 392.60348511]
[201.78854370 378.67984009]
[209.23332214 366.34085083]
[219.87109375 356.59542847]
[213.40199280 343.06210327]
[206.79608154 329.59503174]
[200.05403137 316.19561768]
[193.31199646 302.79617310]
[186.56994629 289.39675903]
[180.71972656 284.80822754]
[179.83013916 275.65673828]
[173.36103821 262.12341309]
[166.89193726 248.59008789]
[160.42285156 235.05676270]
[153.95375061 221.52343750]
[147.48464966 207.99012756]
[135.01496887 199.84419250]
[136.04408264 184.05648804]
[129.57498169 170.52317810]
[123.10588074 156.98985291]
[116.63677979 143.45652771]
[110.16768646 129.92320251]
[103.69858551 116.38989258]
[90.23152161 109.78397369]
[75.56992340 112.95219421]
[67.21884918 126.36991119]
[51.80726624 129.87115479]
[38.47859192 121.37868500]
[35.14049149 105.93094635]
[43.77340317 92.69280243]
[59.25557327 89.51821136]
[72.40170288 98.29060364]
[87.06329346 95.12238312]
[72.06521606 95.36218262]
[60.77810287 85.48285675]
[59.02952194 70.58512115]
[67.72226715 58.36071396]
[82.36825562 55.12112045]
[95.40573120 62.53894806]
[100.10331726 76.78640747]
[98.28366089 61.89719009]
[96.46400452 47.00797272]
[94.64434814 32.11875153]
[92.82468414 17.22953415]
[89.60826111 12.96957111]
[88.49990082 8.36178875]
[89.27151489 4.28220463]
[91.37541199 1.38373733]
[90.46389771 -13.58854198]
[89.55238342 -28.56082153]
[88.64086914 -43.53310013]
[87.72935486 -58.50537872]
[74.81059265 -66.89655304]
[69.37350464 -81.11946869]
[73.30741119 -95.64491272]
[84.90136719 -104.95716095]
[83.98985291 -119.92944336]
[83.07834625 -134.90171814]
[82.16683197 -149.87399292]
[81.25531769 -164.84628296]
[80.19212341 -179.80854797]
[78.97734833 -194.75927734]
[77.76258087 -209.71000671]
[76.54781342 -224.66073608]
[75.18159485 -239.59838867]
[73.66407013 -254.52143860]
[72.14654541 -269.44448853]
[70.62902069 -284.36752319]
[63.01128769 -299.51367188]
[75.45674133 -311.02658081]
[89.96496582 -302.25460815]
[85.55206299 -285.88504028]
[87.06958771 -270.96200562]
[88.58711243 -256.03897095]
[90.10463715 -241.11592102]
[93.93267822 -234.74209595]
[91.49854279 -225.87551880]
[92.71331024 -210.92477417]
[93.92808533 -195.97404480]
[95.14285278 -181.02331543]
[98.84092712 -174.57321167]
[96.22759247 -165.75779724]
[97.13910675 -150.78550720]
[98.05062103 -135.81323242]
[98.96213531 -120.84095764]
[99.87364960 -105.86867523]
[112.51165771 -98.03166962]
[118.17859650 -84.09072876]
[114.50704956 -69.31327057]
[102.70163727 -59.41689301]
[103.61315155 -44.44461441]
[104.52466583 -29.47233391]
[105.43618011 -14.50005531]
[106.34768677 0.47222394]
[107.71390533 15.40987587]
[109.53356171 30.29909515]
[111.35322571 45.18831253]
[113.17288208 60.07753372]
[114.99253845 74.96675110]
[117.23191071 109.92079163]
[123.70100403 123.45410919]
[130.17010498 136.98742676]
[136.63920593 150.52075195]
[143.10829163 164.05407715]
[149.57739258 177.58740234]
[162.50979614 186.70130920]
[161.01797485 201.52102661]
[167.48707581 215.05433655]
[173.95616150 228.58766174]
[180.42526245 242.12098694]
[186.89436340 255.65431213]
[193.36346436 269.18762207]
[199.96937561 282.65469360]
[206.71142578 296.05413818]
[213.45347595 309.45355225]
[220.19551086 322.85299683]
[226.88778687 329.15814209]
[226.93531799 336.59301758]
[233.40441895 350.12634277]
[249.04875183 347.97817993]
[264.57376099 350.75695801]
[278.46749878 358.17993164]
[289.38064575 369.51257324]
[296.25750732 383.64144897]
[298.43817139 399.18334961]
[295.72189331 414.62097168]
[288.38525391 428.45080566]
[277.15441895 439.32977295]
[283.89645386 452.72918701]
[290.63851929 466.12863159]
[297.38055420 479.52807617]
[304.12258911 492.92749023]
[310.86465454 506.32693481]
[323.97909546 515.17687988]
[322.78793335 530.02380371]
[329.52999878 543.42321777]
[343.52755737 551.96722412]
[342.85659790 568.35260010]
[328.20730591 575.72357178]
[314.64962769 566.49737549]
[316.13055420 550.16528320]
[309.38851929 536.76580811]
[296.75628662 528.87426758]
[297.46520996 513.06896973]
[290.72317505 499.66955566]
[283.98110962 486.27011108]
[277.23907471 472.87066650]
[270.49703979 459.47125244]
[263.75497437 446.07180786]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 124]
[10 123]
[11 121]
[12 120]
[13 119]
[14 118]
[16 117]
[17 116]
[18 115]
[19 114]
[20 113]
[21 112]
[23 110]
[24 109]
[25 108]
[26 107]
[27 106]
[28 105]
[29 38]
[30 37]
[45 104]
[46 103]
[47 102]
[48 101]
[49 100]
[53 99]
[54 98]
[55 97]
[56 96]
[57 95]
[61 91]
[62 90]
[63 89]
[64 88]
[65 87]
[66 85]
[67 84]
[68 83]
[69 82]
[70 80]
[71 79]
[72 78]
[73 77]
[133 154]
[134 153]
[135 152]
[136 151]
[137 150]
[138 149]
[140 147]
[141 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
