%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUUCAGACGACCUGCAAGUCUUCCAGAAUGAGCUCAUUUGCUGCAUUUGCGUGAACUACUUCAUAGAUCCGGUCACCAUUGACUGUGGGCACAGCU\
) } def
/len { sequence length } bind def

/coor [
[98.48477936 117.67722321]
[90.35601044 117.55657196]
[78.03166962 126.10705566]
[65.70733643 134.65754700]
[53.38300323 143.20802307]
[51.02252579 148.26524353]
[47.26984024 151.47503662]
[43.11629105 152.61639404]
[39.48770905 151.91749573]
[26.42026711 159.28240967]
[13.35282326 166.64732361]
[0.28537956 174.01223755]
[-0.50574058 189.41929626]
[-9.51951694 201.93949890]
[-23.87968445 207.57768250]
[-39.00396729 204.53472900]
[-50.06626511 193.78163147]
[-53.53663254 178.74964905]
[-48.30768967 164.23545837]
[-36.04797745 154.87048340]
[-20.66952133 153.64303589]
[-7.07953167 160.94479370]
[5.98791218 153.57987976]
[19.05535507 146.21496582]
[32.12279892 138.85005188]
[44.83251953 130.88369751]
[57.15685272 122.33320618]
[69.48118591 113.78272247]
[81.80552673 105.23223877]
[84.58873749 90.49271393]
[76.23095703 78.03688812]
[67.87316895 65.58106995]
[59.51538849 53.12525177]
[51.15760422 40.66942978]
[42.60712051 28.34509659]
[33.86600494 16.15522766]
[25.12488937 3.96535921]
[9.49207401 1.64358616]
[0.14699158 -11.10180473]
[2.63391447 -26.70919991]
[15.47739506 -35.91900635]
[31.05762291 -33.26721191]
[40.13112640 -20.32707787]
[37.31475830 -4.77575636]
[46.05587387 7.41411257]
[54.79698944 19.60398102]
[61.36864853 23.26987648]
[63.61342239 32.31164551]
[71.97120667 44.76746750]
[80.32899475 57.22328568]
[88.68677521 69.67910767]
[97.04456329 82.13492584]
[110.22496033 89.29572296]
[125.22314453 89.52899933]
[140.22314453 89.52899933]
[155.22132874 89.29572296]
[170.21951294 89.06244659]
[179.84245300 80.30139160]
[192.45114136 80.51461029]
[201.19401550 89.03399658]
[216.19221497 89.26727295]
[231.19039917 89.50054932]
[246.18858337 89.73382568]
[235.10952759 79.62171936]
[229.82023621 65.58522034]
[231.47074890 50.67630768]
[239.70220947 38.13664627]
[252.72482300 30.69276428]
[267.70709229 29.96319580]
[281.39132690 36.10657120]
[290.80221558 47.78712845]
[293.89349365 62.46514130]
[289.99301147 76.94914246]
[279.94888306 88.08985138]
[265.94671631 93.46469116]
[279.99725342 98.71659088]
[294.04779053 103.96848297]
[308.09832764 109.22038269]
[322.14886475 114.47227478]
[338.22473145 111.23205566]
[348.86431885 123.71129608]
[343.12252808 139.07241821]
[326.90603638 141.51321411]
[316.89697266 128.52281189]
[302.84643555 123.27091980]
[288.79589844 118.01902008]
[274.74536133 112.76712799]
[260.69482422 107.51522827]
[245.95530701 104.73200989]
[230.95712280 104.49873352]
[215.95893860 104.26545715]
[200.96073914 104.03218079]
[186.21940613 113.41270447]
[170.45278931 104.06063080]
[155.45460510 104.29390717]
[140.45642090 104.52719116]
[133.69837952 107.83692932]
[124.98986816 104.52719116]
[109.99168396 104.29390717]
[108.95495605 109.64908600]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 29]
[3 28]
[4 27]
[5 26]
[9 25]
[10 24]
[11 23]
[12 22]
[30 52]
[31 51]
[32 50]
[33 49]
[34 48]
[35 46]
[36 45]
[37 44]
[53 99]
[54 98]
[55 96]
[56 95]
[57 94]
[60 92]
[61 91]
[62 90]
[63 89]
[75 88]
[76 87]
[77 86]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
