%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:18:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGAGCGCGGGCGGCGAGGCAAGAUGGCGGCAACCAAGAGGAAACGGCGUGGAGGCUUUGCAGUUCAGGCGAAGAAGCCAAAAAGAAACGAAAUAGAUGCGGAGCCGCCAGCUAAGCGGCACG\
) } def
/len { sequence length } bind def

/coor [
[104.82542419 184.95092773]
[101.12014771 178.32258606]
[99.21812439 170.94807434]
[99.25550842 163.31016541]
[101.24112701 155.91181946]
[105.05513000 149.24310303]
[110.45616913 143.74873352]
[104.58557129 129.94525146]
[98.71496582 116.14177704]
[87.91032410 105.73698425]
[73.89539337 100.39080048]
[59.88045883 95.04462433]
[45.86552429 89.69844818]
[30.21395874 92.00908661]
[21.08016586 80.24375153]
[7.06523180 74.89757538]
[-6.94970226 69.55139160]
[-20.96463585 64.20521545]
[-34.97957230 58.85903549]
[-48.99450302 53.51285934]
[-63.00943756 48.16667938]
[-76.99140930 57.58956146]
[-93.67122650 56.87057877]
[-106.53295135 46.48735809]
[-110.66906738 30.65434456]
[-124.81392670 25.66205215]
[-138.95878601 20.66975784]
[-154.54734802 23.37299347]
[-163.97390747 11.84090710]
[-178.11877441 6.84861374]
[-188.91314697 15.52145195]
[-202.48048401 17.68199921]
[-215.23161316 12.86776447]
[-223.84722900 2.44709659]
[-226.14184570 -10.76760864]
[-240.15678406 -16.11378670]
[-256.25402832 -12.98164749]
[-266.80953979 -25.53208351]
[-260.96469116 -40.85428238]
[-244.73216248 -43.18607712]
[-234.81060791 -30.12872124]
[-220.79566956 -24.78254318]
[-207.39726257 -34.17800522]
[-190.87242126 -33.77236176]
[-177.68980408 -23.52776718]
[-173.12648010 -7.29624462]
[-158.98161316 -2.30395126]
[-144.40480042 -5.36426735]
[-133.96649170 6.52490044]
[-119.82163239 11.51719379]
[-105.67677307 16.50948715]
[-95.37660980 7.91878128]
[-82.06494141 5.54840279]
[-69.22786713 10.12851715]
[-60.28154373 20.55463791]
[-57.66326141 34.15174484]
[-43.64832687 39.49792480]
[-29.63339233 44.84410477]
[-15.61845779 50.19028091]
[-1.60352409 55.53646088]
[12.41141033 60.88263702]
[26.42634392 66.22881317]
[41.07546997 63.53578186]
[51.21170425 75.68350983]
[65.22663879 81.02969360]
[79.24156952 86.37586975]
[93.25650787 91.72204590]
[95.60521698 84.90514374]
[102.42359161 79.37574005]
[110.93262482 67.02275085]
[119.44165802 54.66976547]
[116.33170319 39.17448425]
[125.15888214 26.06507874]
[140.68617249 23.11912537]
[153.70152283 32.08440781]
[156.48315430 47.64198303]
[147.38076782 60.56181335]
[131.79464722 63.17879868]
[123.28561401 75.53179169]
[114.77658081 87.88478088]
[128.16629028 81.12345886]
[137.29318237 69.21968079]
[149.56887817 60.59951782]
[163.86418152 56.05591965]
[178.86410522 56.00684357]
[193.18884277 60.45679474]
[205.52069092 68.99644470]
[214.72526550 80.84024048]
[219.95588684 94.89871216]
[220.73139954 109.87865448]
[216.98045349 124.40209198]
[209.04808044 137.13307190]
[197.66398621 146.90046692]
[183.87535095 152.80584717]
[168.95054626 154.30595398]
[154.26248169 151.26280212]
[141.16226196 143.95634460]
[130.85494995 133.05867004]
[124.28812408 119.57035065]
[112.51844025 110.27117157]
[118.38904572 124.07465363]
[124.25965118 137.87812805]
[146.97976685 144.09223938]
[158.03749084 164.60707092]
[150.89251709 186.52778625]
[159.40155029 198.88078308]
[167.91058350 211.23376465]
[176.41961670 223.58676147]
[184.92864990 235.93974304]
[200.51191711 237.24201965]
[211.57582092 248.29299927]
[212.89634705 263.87472534]
[203.84996033 276.63000488]
[188.70809937 280.53616333]
[174.62028503 273.74884033]
[168.23835754 259.47280884]
[172.57565308 244.44877625]
[164.06661987 232.09579468]
[155.55758667 219.74279785]
[147.04855347 207.38981628]
[138.53952026 195.03681946]
[131.24612427 196.70996094]
[123.74490356 196.47125244]
[116.53014374 194.32514954]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 102]
[8 101]
[9 100]
[10 67]
[11 66]
[12 65]
[13 64]
[15 62]
[16 61]
[17 60]
[18 59]
[19 58]
[20 57]
[21 56]
[25 51]
[26 50]
[27 49]
[29 47]
[30 46]
[35 42]
[36 41]
[69 80]
[70 79]
[71 78]
[105 121]
[106 120]
[107 119]
[108 118]
[109 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
