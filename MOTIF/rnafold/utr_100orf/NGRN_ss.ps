%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCCGCUGCUGUUUCGUAGCCGACUGCUGAAGGCUGGUUUGCGUCGACAUGGCGGUUACCCUGAGUCUCUUGCUGGGCGGGCGCGUUUGCGCCGCCGUCACUCGCUGUGGGUUCGCGACCCGGGGGGUGGCGGGCCCAGGCCCUAUUG\
) } def
/len { sequence length } bind def

/coor [
[-83.30438995 241.15655518]
[-97.60630035 236.63395691]
[-110.90258026 229.69802856]
[-122.78972626 220.56056213]
[-132.90724182 209.50013733]
[-140.94854736 196.85362244]
[-146.67027283 183.00593567]
[-161.31376648 186.25675964]
[-175.95727539 189.50758362]
[-190.60076904 192.75840759]
[-205.24427795 196.00923157]
[-219.88777161 199.26005554]
[-234.53128052 202.51089478]
[-249.17477417 205.76171875]
[-260.97012329 216.30592346]
[-275.07174683 211.51078796]
[-289.71527100 214.76161194]
[-304.35876465 218.01243591]
[-312.86621094 231.06085205]
[-327.76309204 234.14904785]
[-340.15036011 225.95809937]
[-354.79385376 229.20892334]
[-366.58920288 239.75312805]
[-380.69082642 234.95799255]
[-395.33432007 238.20881653]
[-409.97781372 241.45964050]
[-424.62133789 244.71046448]
[-439.23022461 248.11344910]
[-453.80291748 251.66821289]
[-468.37564087 255.22297668]
[-482.33065796 264.85070801]
[-495.44528198 254.10623169]
[-488.75122070 238.52978516]
[-471.93038940 240.65026855]
[-457.35769653 237.09550476]
[-442.78497314 233.54074097]
[-436.99459839 228.86987305]
[-427.87216187 230.06697083]
[-413.22866821 226.81614685]
[-398.58514404 223.56532288]
[-383.94165039 220.31449890]
[-373.19369507 210.00280762]
[-358.04467773 214.56541443]
[-343.40118408 211.31459045]
[-335.64349365 198.65150452]
[-320.83920288 195.14610291]
[-307.60958862 203.36894226]
[-292.96609497 200.11811829]
[-278.32257080 196.86727905]
[-267.57464600 186.55560303]
[-252.42559814 191.11820984]
[-237.78210449 187.86738586]
[-223.13859558 184.61656189]
[-208.49510193 181.36573792]
[-193.85159302 178.11491394]
[-179.20809937 174.86408997]
[-164.56459045 171.61325073]
[-149.92109680 168.36242676]
[-150.59638977 153.39445496]
[-148.66172791 138.53329468]
[-144.17474365 124.23069763]
[-137.27069092 110.92162323]
[-128.15829468 99.01101685]
[-117.11355591 88.86151886]
[-104.47129059 80.78239441]
[-90.61503601 75.02012634]
[-75.96539307 71.75087738]
[-60.96725845 71.07513428]
[-46.07632828 73.01458740]
[-31.74524307 77.51145172]
[-18.40982628 84.43020630]
[-6.47583294 93.56163025]
[3.69339156 104.62918091]
[11.78798103 117.29733276]
[17.56098747 131.18177795]
[32.20448685 127.93094635]
[46.84798813 124.68012238]
[61.49148941 121.42929077]
[76.13499451 118.17846680]
[90.77849579 114.92764282]
[84.60851288 95.67673492]
[99.91767883 85.57220459]
[107.64176941 72.71379852]
[115.36585236 59.85540009]
[123.08993530 46.99699783]
[130.81402588 34.13859558]
[130.55717468 17.74145889]
[144.76611328 9.55377960]
[158.82389832 17.99834061]
[158.26908875 34.38809967]
[143.67242432 41.86267853]
[135.94833374 54.72108078]
[128.22425842 67.57948303]
[120.50016785 80.43788910]
[112.77608490 93.29628754]
[115.61873627 103.41226196]
[110.72172546 113.88939667]
[125.62362671 115.60208893]
[140.52552795 117.31477356]
[155.42742920 119.02746582]
[170.32933044 120.74015808]
[185.23123169 122.45284271]
[200.13313293 124.16553497]
[215.03503418 125.87822723]
[229.93693542 127.59091187]
[244.53030396 121.47990417]
[256.29089355 130.61979675]
[271.19281006 132.33248901]
[286.09469604 134.04518127]
[295.04351807 131.90730286]
[301.28762817 135.95164490]
[316.15066528 137.97398376]
[326.78292847 126.67199707]
[342.03399658 123.81106567]
[356.03948975 130.49127197]
[363.41406250 144.14393616]
[361.32202148 159.51933289]
[350.56777954 170.70532227]
[335.28659058 173.40063477]
[321.35437012 166.56889343]
[314.12835693 152.83702087]
[299.26528931 150.81469727]
[284.38201904 148.94708252]
[269.48010254 147.23439026]
[254.57821655 145.52169800]
[241.05073547 151.75520325]
[228.22425842 142.49281311]
[213.32235718 140.78012085]
[198.42044067 139.06744385]
[183.51853943 137.35475159]
[168.61663818 135.64205933]
[153.71473694 133.92936707]
[138.81283569 132.21667480]
[123.91093445 130.50398254]
[109.00903320 128.79130554]
[94.02931976 129.57113647]
[79.38581848 132.82197571]
[64.74231720 136.07279968]
[50.09881592 139.32362366]
[35.45531464 142.57444763]
[20.81181335 145.82527161]
[21.45619202 160.84825134]
[19.48240662 175.75155640]
[14.95158958 190.08248901]
[8.00252533 203.40591431]
[-1.15259433 215.31752014]
[-12.23465252 225.45605469]
[-24.90611458 233.51429749]
[-38.78131104 239.24836731]
[-53.43817520 242.48509216]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 58]
[8 57]
[9 56]
[10 55]
[11 54]
[12 53]
[13 52]
[14 51]
[16 49]
[17 48]
[18 47]
[21 44]
[22 43]
[24 41]
[25 40]
[26 39]
[27 38]
[28 36]
[29 35]
[30 34]
[75 141]
[76 140]
[77 139]
[78 138]
[79 137]
[80 136]
[82 95]
[83 94]
[84 93]
[85 92]
[86 91]
[97 135]
[98 134]
[99 133]
[100 132]
[101 131]
[102 130]
[103 129]
[104 128]
[105 127]
[107 125]
[108 124]
[109 123]
[111 122]
[112 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
