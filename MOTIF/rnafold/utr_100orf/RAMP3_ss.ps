%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:05:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGUCCCCCAGCCGCGCCCCCAGCGGGACCGAGCGUGACCCAGCUGCGGCCGGCCAGCCAUGGAGACUGGAGCGCUGCGGCGCCCGCAACUUCUCCCGUUGCUGCUGCUGCUCUGCGGUGGGUGUCCCAGAGCAGGCGGCUGCAACGAGACAGGCAUGU\
) } def
/len { sequence length } bind def

/coor [
[93.47727966 132.47387695]
[87.27011871 146.12933350]
[81.06295776 159.78477478]
[74.85579681 173.44021606]
[68.64863586 187.09565735]
[62.44147873 200.75109863]
[70.89122772 213.65867615]
[70.99840546 229.08566284]
[62.72880173 242.10937500]
[48.72122955 248.57400513]
[33.44544220 246.41670227]
[21.77589798 236.32585144]
[17.43630028 221.52140808]
[21.81139946 206.72743225]
[33.50511932 196.66459656]
[48.78603363 194.54394531]
[54.99319458 180.88850403]
[61.20035553 167.23306274]
[67.40751648 153.57760620]
[73.61467743 139.92216492]
[79.82183838 126.26672363]
[72.36573792 118.26052094]
[67.92451477 108.26210785]
[66.98271179 97.36231232]
[69.64305878 86.75028229]
[57.61120987 77.79290009]
[45.57936478 68.83551788]
[33.54751587 59.87814331]
[21.51566696 50.92076492]
[3.20204973 49.23111343]
[-3.15926933 32.89817047]
[-15.36255074 24.17579079]
[-27.56583214 15.45340919]
[-39.85311127 6.84976244]
[-52.22323608 -1.63434052]
[-64.59336090 -10.11844349]
[-76.96348572 -18.60254669]
[-89.33361053 -27.08664894]
[-99.95484161 -24.46949387]
[-110.04640198 -28.08218193]
[-116.32971191 -36.49283981]
[-116.90694427 -46.75495911]
[-128.93879700 -55.71233749]
[-140.97064209 -64.66971588]
[-153.00248718 -73.62709808]
[-165.12062073 -82.46739197]
[-177.32389832 -91.18977356]
[-195.83573914 -87.34649658]
[-211.04772949 -98.02960968]
[-213.62562561 -116.11729431]
[-226.15794373 -124.35993195]
[-238.69026184 -132.60256958]
[-254.11541748 -129.16160583]
[-267.41079712 -137.70611572]
[-270.68847656 -153.16679382]
[-262.00387573 -166.37107849]
[-246.50939941 -169.48512268]
[-233.39767456 -160.66140747]
[-230.44761658 -145.13488770]
[-217.91529846 -136.89224243]
[-205.38299561 -128.64961243]
[-194.91978455 -133.33996582]
[-183.37434387 -132.36454773]
[-173.64660645 -125.85154724]
[-168.23640442 -115.33459473]
[-168.60151672 -103.39305115]
[-156.39823914 -94.67067719]
[-149.09190369 -93.33298492]
[-144.04510498 -85.65894318]
[-132.01325989 -76.70156860]
[-119.98141479 -67.74418640]
[-107.94956207 -58.78680801]
[-88.65781403 -58.00646591]
[-80.84951019 -39.45677567]
[-68.47938538 -30.97267151]
[-56.10926056 -22.48856926]
[-43.73913574 -14.00446510]
[-31.36900902 -5.52036238]
[-24.03810120 -4.32460117]
[-18.84345055 3.25012803]
[-6.64016914 11.97250938]
[5.56311178 20.69489098]
[17.57485390 19.02424622]
[27.82185555 26.23330879]
[30.47304535 38.88891602]
[42.50489426 47.84629440]
[54.53674316 56.80367279]
[66.56858826 65.76105499]
[78.60044098 74.71842957]
[100.38076782 66.87970734]
[121.97512817 75.21708679]
[132.83673096 95.65856171]
[147.76626587 97.11072540]
[162.69581604 98.56288910]
[177.18022156 92.19793701]
[189.09864807 101.13102722]
[204.02819824 102.58319092]
[218.51260376 96.21824646]
[230.43103027 105.15133667]
[245.36058044 106.60350037]
[260.29013062 108.05566406]
[275.21966553 109.50782776]
[290.14920044 110.95999146]
[305.07873535 112.41215515]
[319.56314087 106.04720306]
[331.48159790 114.98030090]
[346.41113281 116.43246460]
[361.34066772 117.88462830]
[376.27020264 119.33679199]
[391.19973755 120.78894806]
[406.14266968 122.09629059]
[421.09756470 123.25867462]
[436.05245972 124.42105865]
[451.00735474 125.58345032]
[465.96224976 126.74583435]
[480.91714478 127.90821838]
[495.87203979 129.07060242]
[504.72030640 126.60708618]
[511.10473633 130.40328979]
[526.03430176 131.85545349]
[537.07098389 120.77731323]
[552.65100098 119.43670654]
[565.41790771 128.46664429]
[569.34356689 143.60345459]
[562.57446289 157.69999695]
[548.30664062 164.10032654]
[533.27703857 159.78239441]
[524.58209229 146.78500366]
[509.65255737 145.33283997]
[494.70965576 144.02549744]
[479.75476074 142.86311340]
[464.79986572 141.70072937]
[449.84497070 140.53834534]
[434.89007568 139.37596130]
[419.93518066 138.21356201]
[404.98028564 137.05117798]
[398.03366089 139.68107605]
[389.74758911 135.71849060]
[374.81805420 134.26632690]
[359.88851929 132.81416321]
[344.95895386 131.36199951]
[330.02941895 129.90983582]
[316.61288452 136.37866211]
[303.62658691 127.34169769]
[288.69705200 125.88953400]
[273.76748657 124.43737030]
[258.83795166 122.98520660]
[243.90841675 121.53304291]
[228.97886658 120.08087921]
[215.56233215 126.54969788]
[202.57603455 117.51273346]
[187.64648438 116.06056976]
[174.22994995 122.52938843]
[161.24365234 113.49243164]
[146.31410217 112.04026794]
[131.38456726 110.58810425]
[128.55130005 116.79052734]
[124.50797272 122.28134155]
[119.42594147 126.82781219]
[113.52059937 130.23727417]
[107.04222107 132.36520386]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[3 19]
[4 18]
[5 17]
[6 16]
[25 89]
[26 88]
[27 87]
[28 86]
[29 85]
[31 82]
[32 81]
[33 80]
[34 78]
[35 77]
[36 76]
[37 75]
[38 74]
[42 72]
[43 71]
[44 70]
[45 69]
[46 67]
[47 66]
[50 61]
[51 60]
[52 59]
[92 156]
[93 155]
[94 154]
[96 152]
[97 151]
[99 149]
[100 148]
[101 147]
[102 146]
[103 145]
[104 144]
[106 142]
[107 141]
[108 140]
[109 139]
[110 138]
[111 136]
[112 135]
[113 134]
[114 133]
[115 132]
[116 131]
[117 130]
[119 129]
[120 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
