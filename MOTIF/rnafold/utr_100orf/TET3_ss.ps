%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:56:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGCCAGUUUCAGGUGCCCCUGGCCGUCCAGCCGGACCUGCCAGGCCUUUAUGACUUCCCUCAGCGCCAGGUGAUGGUAGGGAGCUUCCCGGGGUCUG\
) } def
/len { sequence length } bind def

/coor [
[134.52162170 123.13095093]
[138.93231201 137.46781921]
[137.33697510 152.38273621]
[129.99377441 165.46238708]
[118.09085846 174.59040833]
[103.55420685 178.28982544]
[88.73592377 175.96205139]
[76.03369904 167.98373413]
[67.50283051 155.64581299]
[64.52365875 140.94464111]
[67.57823181 126.25894928]
[76.17230225 113.96496582]
[88.91773987 106.05104065]
[74.06443787 103.95831299]
[59.21113968 101.86558533]
[44.35784149 99.77285004]
[29.50454140 97.68012238]
[20.38846207 99.60098267]
[14.22466183 95.28438568]
[-0.55636829 92.73072815]
[-17.58129501 99.52770233]
[-30.69169235 87.97699738]
[-45.54499054 85.88426208]
[-60.39828873 83.79153442]
[-75.25158691 81.69880676]
[-90.24793243 88.33518982]
[-103.33204651 78.44893646]
[-101.04412079 62.21017456]
[-85.73776245 56.32394791]
[-73.15885925 66.84550476]
[-58.30556107 68.93823242]
[-43.45226288 71.03096771]
[-28.59896278 73.12369537]
[-18.64196396 66.06139374]
[-6.15242529 67.80381012]
[1.99728501 77.94969940]
[16.77831459 80.50334930]
[31.59727097 82.82682800]
[46.45056915 84.91955566]
[61.30386734 87.01228333]
[76.15716553 89.10501862]
[91.01046753 91.19774628]
[99.34111023 87.50527954]
[107.92560577 90.40795898]
[122.51928711 86.94031525]
[137.11296082 83.47266388]
[151.70663452 80.00502014]
[166.30032349 76.53737640]
[180.89399719 73.06973267]
[195.48767090 69.60208893]
[210.08134460 66.13444519]
[216.13079834 51.96721268]
[229.20951843 44.16975403]
[244.19459534 45.55231857]
[255.35852051 55.37600708]
[269.95220947 51.90836334]
[281.58987427 41.19038010]
[295.76104736 45.77584839]
[310.35473633 42.30820084]
[324.94842529 38.84055710]
[339.54208374 35.37291336]
[354.13577271 31.90526772]
[368.72946167 28.43762207]
[372.04330444 25.02458382]
[375.91079712 23.15251350]
[379.73815918 22.79718208]
[383.00900269 23.73021126]
[385.34835815 25.56645012]
[400.25955200 23.93666840]
[415.17074585 22.30688477]
[430.08193970 20.67710304]
[441.20712280 9.11812782]
[457.16668701 10.75264549]
[465.71783447 24.32679367]
[460.30084229 39.42764664]
[445.07116699 44.47112274]
[431.71173096 35.58829880]
[416.80053711 37.21808243]
[401.88931274 38.84786606]
[386.97811890 40.47764587]
[372.19708252 43.03129959]
[357.60342407 46.49894714]
[343.00973511 49.96659088]
[328.41607666 53.43423462]
[313.82238770 56.90187836]
[299.22869873 60.36952591]
[288.63488770 70.83947754]
[273.41983032 66.50204468]
[258.82617188 69.96968842]
[253.27447510 83.76522064]
[240.51298523 91.74072266]
[225.32467651 90.65987396]
[213.54899597 80.72811890]
[198.95532227 84.19576263]
[184.36164856 87.66341400]
[169.76795959 91.13105774]
[155.17428589 94.59870148]
[140.58061218 98.06634521]
[125.98693085 101.53398895]
[111.39324951 105.00163269]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 42]
[14 41]
[15 40]
[16 39]
[17 38]
[19 37]
[20 36]
[22 33]
[23 32]
[24 31]
[25 30]
[44 100]
[45 99]
[46 98]
[47 97]
[48 96]
[49 95]
[50 94]
[51 93]
[55 89]
[56 88]
[58 86]
[59 85]
[60 84]
[61 83]
[62 82]
[63 81]
[68 80]
[69 79]
[70 78]
[71 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
