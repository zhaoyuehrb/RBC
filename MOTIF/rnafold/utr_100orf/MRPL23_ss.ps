%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:05:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCGAGGGGGCGCUGUGCCAGGCGGCGGCCGUGCGGGGCGGGCGCGCUGCUCCUUCCGCCUCGCGGACCCCGGAAGCGCGCGUGGCCGCCAUGGCGCGGAAUGUGGUGUACCCCCUGUACCGGCUGGGUGGCCCACAACUUCGGGUGUUCCGAACCAACUUCUUCAUUCAGCUGGUGCGGCCCGGUGUGG\
) } def
/len { sequence length } bind def

/coor [
[452.64819336 300.93524170]
[450.49749756 286.09024048]
[453.21246338 271.33798218]
[460.50735474 258.23132324]
[471.61425781 248.14982605]
[485.36410522 242.15467834]
[500.30880737 240.87687683]
[486.64584351 234.68626404]
[472.98287964 228.49566650]
[459.31994629 222.30505371]
[445.60678101 216.22644043]
[431.84436035 210.26020813]
[418.08193970 204.29399109]
[404.31954956 198.32775879]
[390.55712891 192.36152649]
[376.47576904 187.19281006]
[362.12167358 182.83853149]
[347.76754761 178.48426819]
[333.41345215 174.13000488]
[319.05935669 169.77572632]
[304.70523071 165.42146301]
[290.31600952 161.18476868]
[275.89257812 157.06593323]
[261.46914673 152.94711304]
[247.04571533 148.82827759]
[232.62228394 144.70944214]
[218.19886780 140.59062195]
[203.83622742 144.53575134]
[192.69108582 133.30648804]
[178.26765442 129.18765259]
[163.81101990 125.18696594]
[149.32212830 121.30467987]
[134.83323669 117.42239380]
[120.34435272 113.54010773]
[105.85546875 109.65782166]
[90.90563965 108.43200684]
[75.97786713 109.90225983]
[61.05009842 111.37252045]
[46.12232590 112.84277344]
[31.19455719 114.31303406]
[16.26678658 115.78329468]
[1.33901477 117.25354767]
[-9.90911961 128.69291687]
[-25.85030174 126.88784790]
[-34.25582123 113.22304535]
[-28.67768288 98.18096924]
[-13.39495659 93.30062103]
[-0.13124236 102.32577515]
[14.79652882 100.85552216]
[29.72430038 99.38526154]
[44.65206909 97.91500854]
[59.57984161 96.44474792]
[74.50761414 94.97449493]
[89.43538666 93.50423431]
[90.77800751 86.12538910]
[94.80588531 63.98885345]
[81.35279846 57.35452271]
[67.89970398 50.72019196]
[54.44661713 44.08586502]
[40.99352264 37.45153427]
[24.11361122 35.86886215]
[20.96160507 19.21049309]
[36.09639740 11.57017517]
[47.62785339 23.99844170]
[61.08094406 30.63277245]
[74.53403473 37.26710129]
[87.98712921 43.90143204]
[101.44021606 50.53576279]
[92.81468964 38.26383591]
[106.52703857 32.18341446]
[121.49277496 33.19668579]
[134.26037598 41.06996155]
[141.88525391 53.98743439]
[142.60890198 68.96997070]
[136.26443481 82.56215668]
[124.31421661 91.62961578]
[109.73775482 95.16893768]
[124.22663879 99.05122375]
[138.71553040 102.93350220]
[153.20442200 106.81578827]
[167.69329834 110.69807434]
[176.80905151 109.89663696]
[182.38648987 114.76422882]
[196.80992126 118.88305664]
[212.20420837 115.23253632]
[222.31768799 126.16719055]
[236.74111938 130.28602600]
[251.16455078 134.40484619]
[265.58798218 138.52368164]
[280.01141357 142.64250183]
[294.43481445 146.76133728]
[303.56246948 146.10916138]
[309.05950928 151.06735229]
[323.41363525 155.42161560]
[337.76773071 159.77589417]
[352.12182617 164.13015747]
[366.47592163 168.48443604]
[380.83004761 172.83869934]
[373.78808594 159.59442139]
[376.77178955 144.89416504]
[388.42010498 135.44343567]
[403.41970825 135.55314636]
[414.92852783 145.17329407]
[417.69683838 159.91561890]
[410.46191406 173.05546570]
[396.52334595 178.59910583]
[410.28576660 184.56533813]
[424.04818726 190.53157043]
[437.81060791 196.49778748]
[451.57302856 202.46401978]
[460.70770264 203.00880432]
[465.51052856 208.64210510]
[479.17349243 214.83270264]
[492.83645630 221.02331543]
[506.49942017 227.21391296]
[520.88867188 231.45060730]
[535.72631836 233.65156555]
[550.56396484 235.85252380]
[565.40161133 238.05348206]
[580.23925781 240.25444031]
[595.07690430 242.45539856]
[609.91455078 244.65635681]
[624.75219727 246.85731506]
[639.58984375 249.05827332]
[654.42749023 251.25921631]
[669.26513672 253.46017456]
[684.10278320 255.66113281]
[698.94042969 257.86209106]
[713.77807617 260.06304932]
[728.61572266 262.26400757]
[743.45336914 264.46496582]
[758.29101562 266.66592407]
[765.26678467 252.47705078]
[776.27038574 241.15046692]
[790.21722412 233.78540039]
[805.73779297 231.09147644]
[821.31237793 233.32031250]
[835.41955566 240.24208069]
[846.68511963 251.16912842]
[854.01580811 265.02429199]
[856.70526123 280.44708252]
[871.57696533 282.40496826]
[886.44860840 284.36285400]
[901.32031250 286.32077026]
[916.19195557 288.27865601]
[929.74389648 279.69229126]
[944.85876465 285.07006836]
[949.94171143 300.28662109]
[941.09362793 313.66906738]
[925.10192871 314.95159912]
[914.23406982 303.15032959]
[899.36242676 301.19244385]
[884.49072266 299.23452759]
[869.61907959 297.27664185]
[854.74737549 295.31875610]
[848.92626953 308.33905029]
[839.65942383 319.20147705]
[827.69213867 327.01858521]
[813.99090576 331.14831543]
[799.66522217 331.24685669]
[785.87786865 327.29721069]
[773.75042725 319.61138916]
[764.27197266 308.80563354]
[758.21868896 295.75106812]
[756.09008789 281.50357056]
[741.25244141 279.30261230]
[726.41479492 277.10165405]
[711.57714844 274.90069580]
[696.73950195 272.69973755]
[681.90185547 270.49877930]
[667.06414795 268.29782104]
[652.22650146 266.09686279]
[637.38885498 263.89590454]
[622.55120850 261.69494629]
[607.71356201 259.49398804]
[592.87591553 257.29302979]
[578.03826904 255.09208679]
[563.20062256 252.89112854]
[548.36297607 250.69017029]
[533.52532959 248.48921204]
[518.68768311 246.28825378]
[530.55603027 255.46116638]
[538.86315918 267.95083618]
[542.73461914 282.44262695]
[541.76293945 297.41113281]
[536.05035400 311.28076172]
[526.19824219 322.59161377]
[513.24359131 330.15313721]
[498.54998779 333.16937256]
[483.66406250 331.32287598]
[470.15274048 324.80798340]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 115]
[8 114]
[9 113]
[10 112]
[11 110]
[12 109]
[13 108]
[14 107]
[15 106]
[16 98]
[17 97]
[18 96]
[19 95]
[20 94]
[21 93]
[22 91]
[23 90]
[24 89]
[25 88]
[26 87]
[27 86]
[29 84]
[30 83]
[31 81]
[32 80]
[33 79]
[34 78]
[35 77]
[36 54]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[56 68]
[57 67]
[58 66]
[59 65]
[60 64]
[116 181]
[117 180]
[118 179]
[119 178]
[120 177]
[121 176]
[122 175]
[123 174]
[124 173]
[125 172]
[126 171]
[127 170]
[128 169]
[129 168]
[130 167]
[131 166]
[132 165]
[141 155]
[142 154]
[143 153]
[144 152]
[145 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
