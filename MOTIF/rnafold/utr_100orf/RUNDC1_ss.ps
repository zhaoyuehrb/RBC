%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGUUUCCGGGAAGAUGGCGGCUGUCGAAGCGGCUGCAGAGCCGGUAACGGUGGUGGCGGCUGUUGGGCCAAAGGCGAAAGACGAAGAGGAGGAGGAAGAGGAGCCGCUGCCAC\
) } def
/len { sequence length } bind def

/coor [
[99.94389343 110.88772583]
[95.19954681 110.78724670]
[90.58951569 108.56768036]
[75.67744446 110.18946075]
[60.76537323 111.81124878]
[45.85330582 113.43302917]
[32.97058105 122.61703491]
[19.48136520 116.30115509]
[4.56929636 117.92293549]
[-10.34277248 119.54472351]
[-25.25484276 121.16651154]
[-28.73218536 132.90097046]
[-35.98941803 142.71261597]
[-46.13355637 149.43429565]
[-57.93003082 152.27659607]
[-69.95293427 150.92050171]
[-80.75733948 145.55300903]
[-89.05298615 136.84178162]
[-93.85834503 125.85211182]
[-108.85284424 126.25830078]
[-123.84734344 126.66448975]
[-138.84184265 127.07067871]
[-153.83634949 127.47686768]
[-168.83084106 127.88306427]
[-183.82534790 128.28924561]
[-198.81983948 128.69544983]
[-212.50393677 137.73301697]
[-227.04977417 130.16000366]
[-227.49385071 113.76686859]
[-213.37933350 105.41746521]
[-199.22602844 113.70094299]
[-184.23153687 113.29475403]
[-169.23703003 112.88856506]
[-154.24253845 112.48236847]
[-139.24803162 112.07617950]
[-124.25353241 111.66999054]
[-109.25903320 111.26380157]
[-94.26453400 110.85761261]
[-86.51146698 94.64333344]
[-71.60145569 84.45909119]
[-53.51086426 83.12256622]
[-37.11553192 91.07814789]
[-26.87662697 106.25444031]
[-11.96455765 104.63265228]
[2.94751143 103.01087189]
[17.85958099 101.38908386]
[29.67569542 92.32108307]
[44.23152161 98.52096558]
[59.14358902 96.89917755]
[74.05565643 95.27738953]
[88.96772766 93.65560913]
[103.80162811 91.42953491]
[118.53288269 88.60285950]
[133.26414490 85.77617645]
[147.99539185 82.94950104]
[162.72665405 80.12281799]
[177.45790100 77.29614258]
[192.18916321 74.46945953]
[206.92041016 71.64277649]
[221.65167236 68.81610107]
[236.38291931 65.98941803]
[251.11418152 63.16273880]
[265.84542847 60.33605957]
[277.94030762 50.13680649]
[291.89761353 55.33708572]
[306.62887573 52.51040649]
[313.29156494 38.62103271]
[326.69848633 31.40247536]
[341.60882568 33.43847656]
[352.33285522 43.74057770]
[367.06411743 40.91389847]
[367.84048462 25.85864449]
[372.19793701 11.42686939]
[379.88311768 -1.54238200]
[390.44921875 -12.29509449]
[403.28195190 -20.20611954]
[417.63525391 -24.81551933]
[432.67459106 -25.85531044]
[447.52566528 -23.26504135]
[461.32498169 -17.19530678]
[473.27032471 -7.99899197]
[482.66720581 3.78924060]
[488.96926880 17.48403931]
[491.81011963 32.28920364]
[491.02462769 47.34398651]
[486.65844727 61.77311707]
[478.96539307 74.73770905]
[468.39276123 85.48400879]
[455.55523682 93.38725281]
[441.19915771 97.98795319]
[426.15917969 99.01862335]
[411.30969238 96.41934967]
[397.51403809 90.34125519]
[385.57427979 81.13769531]
[376.18453979 69.34377289]
[369.89080811 55.64515305]
[355.15954590 58.47183228]
[349.01037598 72.01161957]
[335.91259766 79.42190552]
[320.78601074 77.67845154]
[309.45553589 67.24166107]
[294.72427368 70.06834412]
[283.68310547 80.06541443]
[268.67211914 75.06731415]
[253.94085693 77.89399719]
[239.20960999 80.72067261]
[224.47834778 83.54735565]
[209.74710083 86.37403107]
[195.01583862 89.20071411]
[180.28459167 92.02739716]
[165.55332947 94.85407257]
[150.82206726 97.68075562]
[136.09082031 100.50743103]
[121.35956573 103.33411407]
[106.62831116 106.16079712]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 51]
[4 50]
[5 49]
[6 48]
[8 46]
[9 45]
[10 44]
[11 43]
[19 38]
[20 37]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[52 115]
[53 114]
[54 113]
[55 112]
[56 111]
[57 110]
[58 109]
[59 108]
[60 107]
[61 106]
[62 105]
[63 104]
[65 102]
[66 101]
[70 97]
[71 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
