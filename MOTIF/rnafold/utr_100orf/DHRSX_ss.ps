%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:48:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUCCCGCGGGCGGCGCGGAAGCGGCGGCGGCGCGGCCGGGGCAGCCAUGUCGCCAUUGUCUGCGGCGCGGGCGGCCCUGCGGGUCUACGCGGUAGGCGCCGCGGUGAUCCUGGCGCAGCUGCUGCGGCGCUGCCGCGGGGGCUUCC\
) } def
/len { sequence length } bind def

/coor [
[79.92264557 585.62438965]
[88.29285431 571.52221680]
[87.97871399 556.52551270]
[87.66458130 541.52880859]
[87.35044098 526.53210449]
[87.03630829 511.53536987]
[86.72216797 496.53866577]
[86.40803528 481.54196167]
[83.10161591 474.87634277]
[86.24766541 466.22863770]
[86.24766541 451.22863770]
[86.09059143 436.22946167]
[85.77645874 421.23275757]
[85.46231842 406.23605347]
[85.14818573 391.23931885]
[84.83404541 376.24261475]
[84.51991272 361.24591064]
[84.20577240 346.24920654]
[83.89163971 331.25250244]
[76.47735596 326.16156006]
[72.20654297 318.08969116]
[72.16733551 308.81945801]
[76.49684143 300.46624756]
[84.32067871 294.99551392]
[84.94881439 280.00866699]
[85.57695007 265.02185059]
[86.20508575 250.03498840]
[86.83322144 235.04815674]
[87.46135712 220.06130981]
[88.08949280 205.07446289]
[88.71762848 190.08761597]
[81.52007294 177.04751587]
[89.82847595 163.58345032]
[90.45661163 148.59660339]
[91.08474731 133.60975647]
[91.71288300 118.62291718]
[76.25315094 101.37957764]
[86.14328766 76.60557556]
[77.58258820 64.28833771]
[70.06384277 58.98276901]
[68.97475433 51.62229538]
[60.67388153 39.12847519]
[52.37300873 26.63465881]
[44.07213211 14.14083958]
[35.77125931 1.64702117]
[21.68980026 -5.56567907]
[21.09119606 -20.44824982]
[12.79032326 -32.94207001]
[4.48945045 -45.43588638]
[-12.17411518 -53.19987869]
[-12.66616344 -70.71372986]
[-21.22686768 -83.03096771]
[-29.78757095 -95.34821320]
[-38.34827423 -107.66545105]
[-46.90897751 -119.98268890]
[-55.46968079 -132.29992676]
[-70.98558807 -132.49023438]
[-83.40620422 -141.79119873]
[-87.95555115 -156.62640381]
[-82.88430786 -171.29139709]
[-70.14247894 -180.14720154]
[-54.62954330 -179.78857422]
[-42.31055450 -170.35342407]
[-37.92241287 -155.46974182]
[-43.15244293 -140.86062622]
[-34.59173965 -128.54339600]
[-26.03103638 -116.22615051]
[-17.47033310 -103.90891266]
[-8.90962887 -91.59167480]
[-0.34892547 -79.27443695]
[11.53511333 -76.80462646]
[18.76009750 -66.55558777]
[16.98326874 -53.73676300]
[25.28414154 -41.24294281]
[33.58501434 -28.74912453]
[47.07274246 -22.43006516]
[48.26507950 -6.65385199]
[56.56595230 5.83996630]
[64.86682892 18.33378601]
[73.16770172 30.82760429]
[81.46857452 43.32142258]
[89.89982605 55.72763062]
[98.46052551 68.04486847]
[113.19483185 70.85559082]
[125.68865204 62.55471420]
[138.18246460 54.25384140]
[150.67628479 45.95296860]
[163.17010498 37.65209579]
[166.41416931 22.41681480]
[179.20292664 14.17652702]
[193.70744324 17.36313438]
[206.20126343 9.06226158]
[218.69508362 0.76138848]
[231.18890381 -7.53948498]
[243.68272400 -15.84035778]
[256.17654419 -24.14123154]
[262.97955322 -39.06272888]
[279.32711792 -40.36234283]
[288.40228271 -26.70314598]
[280.86926270 -12.13654518]
[264.47741699 -11.64741230]
[251.98359680 -3.34653926]
[239.48977661 4.95433378]
[226.99595642 13.25520706]
[214.50213623 21.55607986]
[202.00831604 29.85695267]
[199.32521057 44.46299744]
[186.77294922 53.05924225]
[171.47097778 50.14591599]
[158.97715759 58.44678879]
[146.48335266 66.74765778]
[133.98953247 75.04853058]
[121.49570465 83.34941101]
[124.91196442 99.31696320]
[118.64149475 112.86965179]
[106.69972992 119.25105286]
[106.07159424 134.23789978]
[105.44345856 149.22474670]
[104.81532288 164.21157837]
[111.96794128 178.32365417]
[103.70446777 190.71575928]
[103.07633209 205.70260620]
[102.44819641 220.68943787]
[101.82006073 235.67628479]
[101.19192505 250.66313171]
[100.56379700 265.64996338]
[99.93566132 280.63681030]
[99.30752563 295.62365723]
[110.44411469 313.88101196]
[98.88835144 330.93835449]
[99.20248413 345.93505859]
[99.51661682 360.93176270]
[99.83075714 375.92849731]
[100.14488983 390.92520142]
[100.45903015 405.92190552]
[100.77316284 420.91860962]
[101.08730316 435.91531372]
[104.41376495 444.49523926]
[101.24766541 451.22863770]
[101.24766541 466.22863770]
[101.40474701 481.22781372]
[101.71887970 496.22451782]
[102.03302002 511.22122192]
[102.34715271 526.21795654]
[102.66129303 541.21466064]
[102.97542572 556.21136475]
[103.28956604 571.20806885]
[112.24296570 584.94738770]
[104.58080292 599.44647217]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[10 140]
[11 139]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[24 128]
[25 127]
[26 126]
[27 125]
[28 124]
[29 123]
[30 122]
[31 121]
[33 119]
[34 118]
[35 117]
[36 116]
[38 83]
[39 82]
[41 81]
[42 80]
[43 79]
[44 78]
[45 77]
[47 75]
[48 74]
[49 73]
[51 70]
[52 69]
[53 68]
[54 67]
[55 66]
[56 65]
[84 113]
[85 112]
[86 111]
[87 110]
[88 109]
[91 106]
[92 105]
[93 104]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
