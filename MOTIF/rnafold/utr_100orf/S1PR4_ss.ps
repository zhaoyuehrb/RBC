%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:11:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAAGGCGGGUGGCUCCACCCUGCGUCGGGCCUCAGUCAGCCCCCGGGGGAGGCCAUGAACGCCACGGGGACCCCGGUGGCCCCCGAGUCCUGCCAACAGCUGGCGGCCGGCGGGCACAGCCGGCUCAUUGUUCUGCACUACAACCACUCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[120.09677887 132.08215332]
[113.57485962 135.33932495]
[106.54954529 137.28604126]
[99.28135681 137.85008240]
[92.03981781 137.01054382]
[85.09346771 134.79856873]
[76.57249451 147.14332581]
[68.17625427 159.57325745]
[59.90559769 172.08709717]
[51.63494110 184.60093689]
[43.36428452 197.11477661]
[35.09362793 209.62861633]
[34.64410782 226.02160645]
[20.09575462 233.58979797]
[6.41466618 224.54768372]
[7.67477274 208.19702148]
[22.57978630 201.35797119]
[30.85044289 188.84413147]
[39.12109756 176.33027649]
[47.39175415 163.81643677]
[55.66241074 151.30259705]
[56.73294830 143.94613647]
[64.22773743 138.62236023]
[72.74870300 126.27759552]
[65.32360840 115.18856812]
[62.20777893 102.21204376]
[47.35657501 100.10450745]
[32.50537109 97.99697113]
[17.63369751 96.03907776]
[2.74306417 94.23102570]
[-12.14756870 92.42297363]
[-27.03820229 90.61492157]
[-41.92883682 88.80687714]
[-56.81946945 86.99882507]
[-48.76415253 99.65235901]
[-51.83354568 114.33496094]
[-64.28318787 122.70194244]
[-79.03746796 119.99801636]
[-87.71096039 107.75994110]
[-85.37416840 92.94307709]
[-73.35545349 83.96849060]
[-87.91957855 80.37876129]
[-102.48370361 76.78902435]
[-119.30956268 78.86911774]
[-125.96622467 63.27664185]
[-112.82586670 52.56369781]
[-98.89397430 62.22489548]
[-84.32984161 65.81462860]
[-69.76571655 69.40436554]
[-55.01141739 72.10819244]
[-40.12078476 73.91624451]
[-25.23015213 75.72428894]
[-10.33951855 77.53234100]
[4.55111456 79.34039307]
[19.44174767 81.14844513]
[26.50141144 78.81932068]
[34.61290741 83.14576721]
[49.46411133 85.25330353]
[64.31531525 87.36083984]
[68.68688965 78.72480774]
[75.10554504 71.47963715]
[83.15167999 66.09898376]
[79.26939392 51.61009216]
[75.38710785 37.12120819]
[71.50482178 22.63231850]
[67.62253571 8.14343166]
[56.57712936 -3.18395042]
[60.75672913 -17.48011208]
[56.87444305 -31.96899986]
[44.90220261 -43.17602921]
[48.88467789 -59.08426285]
[64.72503662 -63.32867432]
[76.12807465 -51.54297638]
[71.36332703 -35.85128403]
[75.24561310 -21.36239815]
[86.01333618 -11.07135773]
[82.11141968 4.26114607]
[85.99370575 18.75003433]
[89.87599182 33.23892212]
[93.75827789 47.72780991]
[97.64056396 62.21669388]
[123.64594269 70.43626404]
[137.37843323 94.00021362]
[152.36627197 94.60420227]
[167.35411072 95.20819092]
[182.34194946 95.81217957]
[197.32977295 96.41616821]
[212.31761169 97.02015686]
[227.30545044 97.62414551]
[233.79275513 83.05789948]
[246.77926636 72.69201660]
[263.73632812 69.32944489]
[280.98593140 74.32479095]
[292.21359253 64.37795258]
[303.44125366 54.43111420]
[314.66891479 44.48427582]
[317.06893921 28.62175560]
[331.03854370 20.73318100]
[345.86145020 26.86999321]
[350.16680908 42.32455444]
[340.65191650 55.24144363]
[324.61575317 55.71193695]
[313.38809204 65.65877533]
[302.16043091 75.60561371]
[290.93276978 85.55245209]
[296.53320312 99.46774292]
[311.52102661 98.86375427]
[326.50888062 98.25976562]
[341.49670410 97.65577698]
[356.48452759 97.05178833]
[371.47238159 96.44779968]
[386.46020508 95.84381104]
[395.87753296 83.35990906]
[411.12765503 79.90042114]
[425.00991821 87.09881592]
[430.96954346 101.55623627]
[426.19256592 116.44631958]
[412.93457031 124.73843384]
[397.45553589 122.51728821]
[387.06420898 110.83164215]
[372.07635498 111.43563080]
[357.08853149 112.03961945]
[342.10067749 112.64361572]
[327.11285400 113.24760437]
[312.12503052 113.85159302]
[297.13717651 114.45558167]
[293.89480591 118.01937103]
[290.36111450 120.95952606]
[286.63464355 123.25900269]
[297.24127197 133.86560059]
[307.84786987 144.47221375]
[318.45446777 155.07881165]
[333.75885010 152.51849365]
[347.63021851 159.47294617]
[354.73477173 173.26806641]
[352.34060669 188.59933472]
[341.36837769 199.57156372]
[326.03710938 201.96571350]
[312.24200439 194.86117554]
[305.28753662 180.98980713]
[307.84786987 165.68540955]
[297.24127197 155.07881165]
[286.63464355 144.47221375]
[276.02804565 133.86560059]
[256.13894653 138.76576233]
[237.12696838 130.66546631]
[226.70146179 112.61198425]
[211.71362305 112.00799561]
[196.72578430 111.40400696]
[181.73794556 110.80001068]
[166.75012207 110.19602203]
[151.76228333 109.59203339]
[136.77444458 108.98804474]
[134.36982727 115.87008667]
[130.69068909 122.16362762]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 24]
[7 23]
[8 21]
[9 20]
[10 19]
[11 18]
[12 17]
[26 59]
[27 58]
[28 57]
[29 55]
[30 54]
[31 53]
[32 52]
[33 51]
[34 50]
[41 49]
[42 48]
[43 47]
[62 81]
[63 80]
[64 79]
[65 78]
[66 77]
[68 75]
[69 74]
[83 153]
[84 152]
[85 151]
[86 150]
[87 149]
[88 148]
[89 147]
[93 105]
[94 104]
[95 103]
[96 102]
[106 126]
[107 125]
[108 124]
[109 123]
[110 122]
[111 121]
[112 120]
[129 144]
[130 143]
[131 142]
[132 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
