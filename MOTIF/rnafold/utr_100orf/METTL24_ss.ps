%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:30:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCCGGGAGAGGCCGCCCGGGAGGGGCUGCGGCGUCCUGCGCCGGUGUCUACUCGGGGCUGUGCUGUUGUUCGGCCUGCGGCUCUGCGCAGAGCUGC\
) } def
/len { sequence length } bind def

/coor [
[88.99314117 118.24557495]
[82.18495178 112.74546814]
[78.01221466 104.77936554]
[77.33099365 95.57118988]
[80.44335938 86.62311554]
[87.01692963 79.47053528]
[73.51689148 72.93226624]
[60.01684952 66.39399719]
[46.51681137 59.85573196]
[33.01676941 53.31746674]
[19.41668129 46.98994064]
[5.71983242 40.87468719]
[-7.97701645 34.75943375]
[-23.73264503 36.19843674]
[-32.19984436 23.94462967]
[-45.89669037 17.82937431]
[-59.59354019 11.71411991]
[-88.22457886 40.18148804]
[-103.17924500 41.34674454]
[-118.13391876 42.51200104]
[-133.08859253 43.67726135]
[-144.56787109 54.88465118]
[-160.46888733 52.75458527]
[-168.59373474 38.92106247]
[-162.70973206 23.99598312]
[-147.33058167 19.42858505]
[-134.25384521 28.72258949]
[-119.29917145 27.55733109]
[-104.34450531 26.39207458]
[-89.38983154 25.22681618]
[-86.33220673 18.37839127]
[-95.13642120 6.23401976]
[-80.21694946 4.68154335]
[-77.15932465 -2.16688108]
[-86.27531433 -14.07900620]
[-95.39130402 -25.99113083]
[-104.50729370 -37.90325546]
[-113.62328339 -49.81538010]
[-128.05088806 -58.71933746]
[-123.48886871 -75.04796600]
[-106.53546906 -75.18444061]
[-101.71115875 -58.93136978]
[-92.59516907 -47.01924515]
[-83.47917938 -35.10712051]
[-74.36318970 -23.19499588]
[-65.24720001 -11.28287125]
[-53.47828674 -1.98272848]
[-39.78143692 4.13252592]
[-26.08458900 10.24777985]
[-11.30865002 8.37137127]
[-1.86176217 21.06258392]
[11.83508682 27.17783928]
[25.53193474 33.29309464]
[33.05543137 33.14301682]
[39.55503464 39.81742859]
[53.05507660 46.35569382]
[66.55511475 52.89395905]
[80.05515289 59.43222427]
[93.55519867 65.97048950]
[108.54794312 66.43698883]
[122.42834473 60.75066376]
[136.30874634 55.06433868]
[150.18916321 49.37801361]
[164.06956482 43.69168472]
[173.90658569 31.30040932]
[188.61701965 33.63544083]
[202.49742126 27.94911385]
[212.09765625 14.65371323]
[228.38220215 16.58900642]
[234.59892273 31.76412964]
[224.35260010 44.56821442]
[208.18374634 41.82952118]
[194.30334473 47.51584625]
[185.45915222 59.50040054]
[169.75588989 57.57209396]
[155.87548828 63.25841904]
[141.99508667 68.94474792]
[128.11466980 74.63107300]
[114.23426819 80.31739807]
[121.74004364 95.48941803]
[117.29958344 110.26490784]
[126.41557312 122.17703247]
[135.53157043 134.08915710]
[144.64755249 146.00128174]
[153.76354980 157.91340637]
[162.87953186 169.82553101]
[171.99552917 181.73765564]
[181.11152649 193.64978027]
[196.45367432 199.44204712]
[198.84114075 215.66647339]
[185.81790161 225.63276672]
[170.78114319 219.08845520]
[169.19940186 202.76577759]
[160.08340454 190.85365295]
[150.96740723 178.94152832]
[141.85142517 167.02940369]
[132.73542786 155.11727905]
[123.61943817 143.20515442]
[114.50344849 131.29302979]
[105.38745880 119.38089752]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 59]
[7 58]
[8 57]
[9 56]
[10 55]
[11 53]
[12 52]
[13 51]
[15 49]
[16 48]
[17 47]
[18 30]
[19 29]
[20 28]
[21 27]
[34 46]
[35 45]
[36 44]
[37 43]
[38 42]
[60 79]
[61 78]
[62 77]
[63 76]
[64 75]
[66 73]
[67 72]
[81 100]
[82 99]
[83 98]
[84 97]
[85 96]
[86 95]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
