%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:22:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAGCCCUUUUGCGCCCACCAUGUCUUCACCUAAGAGAUCUUCAAAGCCCAGUAUGUCUCUGGCACCCAGUGGAUCCUCCAUGCCCACUGCGGAUCCCAAGCCUCCUGCCUCCUUGAAGU\
) } def
/len { sequence length } bind def

/coor [
[149.24018860 107.93209839]
[151.30343628 122.78952026]
[144.27412415 136.04051208]
[130.81571960 142.66406250]
[116.02866364 140.15089417]
[108.97901917 153.39106750]
[113.83023834 168.43238831]
[106.55049133 182.46025085]
[91.45872498 187.15217590]
[77.50861359 179.72453308]
[72.97651672 164.58399963]
[80.55123901 150.71319580]
[95.73883057 146.34141541]
[102.78848267 133.10124207]
[99.01064301 126.62220001]
[86.47631073 134.86177063]
[75.97724915 145.57482910]
[62.34355545 139.32003784]
[63.61616898 124.37413025]
[78.11042023 120.51419067]
[91.45496368 113.66413116]
[87.67711639 107.18509674]
[72.68209076 106.79887390]
[58.68727493 114.17828369]
[46.16344452 106.11585236]
[31.16841698 105.72962952]
[16.17338943 105.34341431]
[1.17836213 104.95719147]
[-11.39751434 114.91846466]
[-26.99332237 111.15676880]
[-33.64529419 96.55776978]
[-26.25060463 82.32056427]
[-10.48182774 79.36671448]
[1.56458080 89.96216583]
[16.55960846 90.34838104]
[31.55463409 90.73460388]
[46.54966354 91.12081909]
[59.47193527 83.71379089]
[73.06831360 91.80384827]
[88.06333923 92.19006348]
[102.51837158 88.18355560]
[115.17500305 80.13311768]
[127.83163452 72.08267212]
[140.48826599 64.03222656]
[153.14489746 55.98178864]
[165.80152893 47.93134308]
[164.90597534 31.47755432]
[172.35656738 16.88488770]
[186.05201721 8.06234264]
[202.23269653 7.32011509]
[216.51254272 14.76537037]
[228.95770264 6.39171505]
[241.40286255 -1.98194087]
[242.08944702 -17.37137794]
[251.59506226 -29.26661301]
[266.11065674 -33.23673630]
[280.01419067 -27.96136856]
[292.45935059 -36.33502579]
[293.95898438 -47.25887680]
[301.12780762 -55.34347916]
[311.36614990 -58.02690506]
[321.16085815 -54.64204407]
[334.02056885 -62.36393356]
[346.88031006 -70.08582306]
[350.76055908 -87.08503723]
[365.41583252 -95.89648438]
[381.60031128 -91.52641296]
[394.25692749 -99.57685852]
[406.80886841 -107.78958893]
[419.25402832 -116.16324615]
[431.69918823 -124.53690338]
[444.14434814 -132.91055298]
[456.58947754 -141.28421021]
[469.03463745 -149.65786743]
[467.30709839 -164.86557007]
[472.85559082 -179.12995911]
[484.40515137 -189.17317200]
[499.30175781 -192.68737793]
[514.12231445 -188.86500549]
[525.46112061 -178.58444214]
[530.71258545 -164.20805359]
[528.67004395 -149.03944397]
[519.80279541 -136.56425476]
[506.14846802 -129.64918518]
[490.84472656 -129.88327026]
[477.40829468 -137.21270752]
[464.96313477 -128.83905029]
[452.51800537 -120.46540070]
[440.07284546 -112.09174347]
[427.62768555 -103.71808624]
[415.18252563 -95.34443665]
[411.34399414 -88.92393494]
[402.30737305 -86.92022705]
[389.65075684 -78.86978149]
[388.61840820 -65.95700073]
[380.18307495 -55.86988831]
[367.27902222 -52.46924210]
[354.60220337 -57.22610855]
[341.74246216 -49.50421524]
[328.88275146 -41.78232193]
[320.90948486 -24.24343872]
[300.83300781 -23.88986969]
[288.38784790 -15.51621342]
[288.03668213 -0.64965069]
[278.89065552 11.30082321]
[264.29077148 15.62483883]
[249.77650452 10.46321392]
[237.33135986 18.83687019]
[224.88619995 27.21052551]
[226.71632385 40.80822754]
[222.46464539 53.92297363]
[212.91302490 63.95668793]
[199.89918518 68.89561462]
[185.96325684 67.71430969]
[173.85197449 60.58797836]
[161.19534302 68.63842010]
[148.53871155 76.68886566]
[135.88208008 84.73930359]
[123.22544861 92.78974915]
[110.56880951 100.84019470]
[124.11220551 94.39221191]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 14]
[6 13]
[22 40]
[23 39]
[25 37]
[26 36]
[27 35]
[28 34]
[41 120]
[42 119]
[43 118]
[44 117]
[45 116]
[46 115]
[51 109]
[52 108]
[53 107]
[57 103]
[58 102]
[62 100]
[63 99]
[64 98]
[67 94]
[68 93]
[69 91]
[70 90]
[71 89]
[72 88]
[73 87]
[74 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
