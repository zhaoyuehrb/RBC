%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:12:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGAACCAAGGGACACGCACUCAGCAGAUAAGGCAAGUCCUGCUUCUCUUUGUUUUGCUCGGAAUGUCUCAGGCGGGCUCUGAAACCUGGAGCUUUU\
) } def
/len { sequence length } bind def

/coor [
[99.66749573 135.72717285]
[92.32026672 137.23321533]
[86.41876221 151.02351379]
[80.51725769 164.81381226]
[83.00416565 181.02330017]
[70.04227448 191.06925964]
[54.96567154 184.61729431]
[53.28386688 168.30461121]
[66.72695923 158.91230774]
[72.62846375 145.12200928]
[78.52996826 131.33171082]
[67.91331482 102.47676849]
[81.92382812 80.78356171]
[75.17640686 67.38684082]
[68.42897797 53.99011230]
[61.68155289 40.59338760]
[54.93412781 27.19666100]
[48.18670273 13.79993629]
[36.18160629 12.29477501]
[26.54192924 5.18485641]
[21.65815544 -5.61971664]
[22.66919518 -17.31214714]
[29.19912720 -26.91784477]
[23.29762268 -40.70814133]
[10.75486183 -50.35125732]
[12.86083603 -65.09622955]
[6.95933199 -78.88652039]
[1.05782795 -92.67681885]
[-4.84367609 -106.46711731]
[-10.74518013 -120.25740814]
[-16.64668274 -134.04769897]
[-22.76193810 -147.74455261]
[-29.08946419 -161.34463501]
[-35.41698837 -174.94473267]
[-41.74451447 -188.54481506]
[-48.07204056 -202.14491272]
[-63.36134338 -212.25846863]
[-61.34437180 -229.61454773]
[-68.09179688 -243.01127625]
[-74.83922577 -256.40798950]
[-81.58664703 -269.80471802]
[-94.11161804 -281.23107910]
[-86.59906769 -296.42968750]
[-69.91474152 -293.41812134]
[-68.18992615 -276.55215454]
[-61.44249725 -263.15542603]
[-54.69507217 -249.75869751]
[-47.94764709 -236.36196899]
[-36.46928787 -232.20681763]
[-30.78145790 -220.95190430]
[-34.47195053 -208.47244263]
[-28.14442444 -194.87234497]
[-21.81690025 -181.27226257]
[-15.48937416 -167.67216492]
[-9.16184902 -154.07208252]
[-3.38450384 -149.25048828]
[-2.85638809 -139.94920349]
[3.04511595 -126.15891266]
[8.94661999 -112.36861420]
[14.84812355 -98.57832336]
[20.74962807 -84.78802490]
[26.65113068 -70.99773407]
[38.77177811 -62.34098816]
[37.08791733 -46.60964584]
[42.98942184 -32.81934738]
[60.27472305 -27.20126343]
[68.26240540 -10.52576065]
[61.58342743 7.05251074]
[68.33085632 20.44923592]
[75.07827759 33.84596252]
[81.82570648 47.24268723]
[88.57312775 60.63941193]
[95.32055664 74.03614044]
[108.05997467 72.45275116]
[121.09135437 77.25075531]
[131.20198059 88.24697113]
[135.47413635 103.65670776]
[132.06549072 120.35787964]
[142.91662598 130.71417236]
[153.76774597 141.07048035]
[164.61888123 151.42677307]
[175.47001648 161.78308105]
[186.32113647 172.13937378]
[197.17227173 182.49568176]
[208.02340698 192.85197449]
[224.03108215 193.91673279]
[233.06051636 207.17753601]
[228.18508911 222.46183777]
[213.14482117 228.04483032]
[199.47731018 219.64370728]
[197.66709900 203.70310974]
[186.81597900 193.34680176]
[175.96484375 182.99050903]
[165.11370850 172.63420105]
[154.26258850 162.27790833]
[143.41145325 151.92160034]
[132.56031799 141.56530762]
[121.70919037 131.20899963]
[114.36195374 132.71505737]
[117.37381744 147.40957642]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 11]
[3 10]
[4 9]
[13 73]
[14 72]
[15 71]
[16 70]
[17 69]
[18 68]
[23 65]
[24 64]
[26 62]
[27 61]
[28 60]
[29 59]
[30 58]
[31 57]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[38 48]
[39 47]
[40 46]
[41 45]
[78 98]
[79 97]
[80 96]
[81 95]
[82 94]
[83 93]
[84 92]
[85 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
