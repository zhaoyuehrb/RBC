%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:25:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCGGGAAGAAAGGAACAUGGCUCCUGAGGCGCACAGCGCCGAGCGCGGCGCCGCGCACCCGCGCGCCGGACGCCAGUGACCGCGAUGGUGAACUCCAGUCGCGUGCAGCCUCAGCAGCCCGGGGACGCCAAGCGGCCGCCCGCGCCCCGCGCGCCGGACCCGGGCCGGCUGAUGGCUGGCUGCG\
) } def
/len { sequence length } bind def

/coor [
[-7.83054686 169.93385315]
[-21.64029503 175.78968811]
[-35.45004272 181.64552307]
[-49.25979233 187.50135803]
[-63.02013016 193.47238159]
[-76.73010254 199.55816650]
[-90.44007111 205.64393616]
[-104.15003967 211.72972107]
[-102.50474548 220.04888916]
[-103.78514862 229.07693481]
[-108.24611664 237.75648499]
[-115.75639343 244.95242310]
[-125.77971649 249.59242249]
[-137.40664673 250.81015015]
[-147.09106445 262.26492310]
[-156.77548218 273.71972656]
[-166.45989990 285.17449951]
[-163.62355042 300.55270386]
[-171.38063049 314.13067627]
[-186.06848145 319.49734497]
[-200.75195312 314.11871338]
[-208.49795532 300.53442383]
[-205.64906311 285.15853882]
[-193.55044556 275.25109863]
[-177.91468811 275.49008179]
[-168.23027039 264.03530884]
[-158.54585266 252.58052063]
[-148.86143494 241.12573242]
[-152.18797302 234.40380859]
[-167.15722656 233.44392395]
[-158.84101868 220.95997620]
[-162.16755676 214.23805237]
[-177.14871216 214.98971558]
[-192.12986755 215.74137878]
[-207.11102295 216.49304199]
[-213.94598389 224.98641968]
[-224.12118530 228.23835754]
[-234.19177246 225.40205383]
[-240.88661194 217.65031433]
[-255.88452148 217.90095520]
[-270.88241577 218.15161133]
[-285.88034058 218.40225220]
[-300.87823486 218.65290833]
[-315.87612915 218.90354919]
[-329.65322876 227.79870605]
[-344.11975098 220.07522583]
[-344.39376831 203.67837524]
[-330.19342041 195.47581482]
[-316.12680054 203.90563965]
[-301.12887573 203.65499878]
[-286.13098145 203.40434265]
[-271.13305664 203.15370178]
[-256.13516235 202.90306091]
[-241.13725281 202.65240479]
[-225.34918213 191.50886536]
[-207.86268616 201.51188660]
[-192.88153076 200.76022339]
[-177.90037537 200.00856018]
[-162.91921997 199.25689697]
[-133.57402039 183.76812744]
[-110.23582458 198.01974487]
[-96.52584839 191.93397522]
[-82.81587982 185.84819031]
[-69.10591125 179.76240540]
[-64.25824738 174.16384888]
[-55.11563110 173.69161987]
[-41.30588150 167.83576965]
[-27.49613380 161.97993469]
[-13.68638611 156.12409973]
[-11.73257542 147.42749023]
[-5.89859390 140.50737000]
[2.59711099 137.00605774]
[11.88729572 137.83042908]
[19.86608124 142.92109680]
[33.95191956 137.76463318]
[48.03776169 132.60816956]
[53.24854279 127.34589386]
[62.40228271 127.48538208]
[76.57231903 122.56501007]
[90.74235535 117.64463043]
[83.53463745 109.68329620]
[81.72784424 99.55484772]
[85.40406799 90.43012238]
[93.00013733 84.91564178]
[93.50135803 69.92401886]
[94.00258636 54.93239594]
[94.50380707 39.94077301]
[95.00503540 24.94915009]
[95.38098145 9.95386219]
[95.63162994 -5.04404354]
[95.88227844 -20.04194832]
[84.71647644 -31.22677994]
[84.81347656 -47.03076935]
[96.11573792 -58.07769394]
[111.91781616 -57.81361008]
[122.84462738 -46.39518738]
[122.41349030 -30.59678078]
[110.88018036 -19.79130173]
[110.62953186 -4.79339600]
[110.37889099 10.20450974]
[113.41674042 16.95841408]
[109.99665833 25.45037460]
[109.49542999 40.44199753]
[108.99420929 55.43362045]
[108.49298096 70.42524719]
[107.99176025 85.41687012]
[116.20690918 92.81499481]
[118.30998230 104.38177490]
[112.58670044 115.44707489]
[127.45286560 117.44638062]
[142.31903076 119.44567871]
[157.18518066 121.44498444]
[172.05134583 123.44429016]
[186.93370056 125.31931305]
[201.83119202 127.06993103]
[216.72868347 128.82054138]
[231.62617493 130.57115173]
[246.52368164 132.32177734]
[263.25088501 124.64431000]
[276.90853882 135.65058899]
[291.83322144 137.15202332]
[306.75787354 138.65345764]
[321.68255615 140.15489197]
[336.60720825 141.65632629]
[351.53189087 143.15776062]
[366.45654297 144.65919495]
[378.62426758 134.93373108]
[393.73861694 136.66902161]
[402.93536377 148.32899475]
[417.86004639 149.83044434]
[426.87832642 137.47657776]
[440.77758789 131.33595276]
[455.78454590 132.96611023]
[467.87969971 141.82968140]
[473.87390137 155.46548462]
[488.79858398 156.96691895]
[503.72323608 158.46835327]
[518.64788818 159.96978760]
[529.12304688 152.42195129]
[541.53424072 153.99214172]
[549.28527832 163.29533386]
[564.18280029 165.04594421]
[579.02258301 158.06646729]
[592.33056641 167.64923096]
[590.41662598 183.93630981]
[575.24969482 190.17295837]
[562.43218994 179.94345093]
[547.53466797 178.19282532]
[531.82580566 185.99673462]
[517.14648438 174.89445496]
[502.22180176 173.39302063]
[487.29714966 171.89158630]
[472.37246704 170.39015198]
[463.78231812 182.55874634]
[450.16403198 188.83554077]
[435.13305664 187.44384766]
[422.73544312 178.65773010]
[416.35861206 164.75511169]
[401.43392944 163.25366211]
[390.09896851 172.84814453]
[374.94183350 171.53808594]
[364.95510864 159.58386230]
[350.03045654 158.08242798]
[335.10577393 156.58099365]
[320.18112183 155.07955933]
[305.25643921 153.57812500]
[290.33178711 152.07669067]
[275.40710449 150.57525635]
[265.83306885 157.98916626]
[253.37519836 156.84744263]
[244.77305603 147.21926880]
[229.87556458 145.46865845]
[214.97807312 143.71803284]
[200.08058167 141.96742249]
[185.18309021 140.21681213]
[178.15902710 142.56336975]
[170.05204773 138.31045532]
[155.18588257 136.31114197]
[140.31971741 134.31184387]
[125.45355988 132.31254578]
[110.58739471 130.31323242]
[95.66272736 131.81466675]
[81.49269104 136.73504639]
[67.32265472 141.65541077]
[53.19422531 146.69401550]
[39.10838699 151.85047913]
[25.02254677 157.00694275]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[3 67]
[4 66]
[5 64]
[6 63]
[7 62]
[8 61]
[14 28]
[15 27]
[16 26]
[17 25]
[32 59]
[33 58]
[34 57]
[35 56]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
[74 187]
[75 186]
[76 185]
[78 184]
[79 183]
[80 182]
[84 106]
[85 105]
[86 104]
[87 103]
[88 102]
[89 100]
[90 99]
[91 98]
[109 181]
[110 180]
[111 179]
[112 178]
[113 177]
[114 175]
[115 174]
[116 173]
[117 172]
[118 171]
[120 168]
[121 167]
[122 166]
[123 165]
[124 164]
[125 163]
[126 162]
[129 159]
[130 158]
[135 153]
[136 152]
[137 151]
[138 150]
[141 148]
[142 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
