%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:04:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCUUGGAGCCUAGCGGCUCUCCCCGCGUCCAAGAUGGCGGCAGAAGCAGCUGGUGGGAAAUACAGAAGCACAGUCAGCAAAAGCAAAGACCCCUCGGGGCUGCUCAUCUCUGUGAUCAGGACUCUGUCUACUA\
) } def
/len { sequence length } bind def

/coor [
[30.41005707 374.13522339]
[21.46578407 377.62829590]
[12.07089615 379.59204102]
[2.48480940 379.97363281]
[-7.02802229 378.76397705]
[-16.20539665 375.99780273]
[-24.79459381 371.75277710]
[-34.10818863 383.51104736]
[-43.42178345 395.26931763]
[-52.73538208 407.02758789]
[-62.04897690 418.78585815]
[-71.36257172 430.54412842]
[-73.21660614 446.83813477]
[-88.36052704 453.13049316]
[-101.21556854 442.94815063]
[-98.55756378 426.76583862]
[-83.12084198 421.23052979]
[-73.80724335 409.47225952]
[-64.49365234 397.71398926]
[-55.18005753 385.95571899]
[-45.86645889 374.19744873]
[-36.55286407 362.43917847]
[-48.38972855 344.66989136]
[-52.96158600 323.78796387]
[-49.62445450 302.64755249]
[-38.81665421 284.14498901]
[-22.00132751 270.82214355]
[-1.46838176 264.51712036]
[19.97733688 266.11071777]
[25.71758842 252.25251770]
[31.45783997 238.39431763]
[37.19809341 224.53613281]
[32.85483932 213.18605042]
[37.59504700 201.56059265]
[49.36645126 196.14657593]
[55.42526627 182.42468262]
[61.48408127 168.70277405]
[59.54685974 153.93467712]
[72.19907379 144.43562317]
[78.25788879 130.71371460]
[84.31670380 116.99180603]
[90.37551880 103.26989746]
[90.50058746 95.13204956]
[96.73602295 89.30355072]
[103.11016846 75.72525024]
[109.48431396 62.14694977]
[115.54312897 48.42504501]
[121.28337860 34.56684875]
[127.02362823 20.70865631]
[132.76388550 6.85046434]
[138.50413513 -7.00772905]
[144.24438477 -20.86592102]
[149.98463440 -34.72411346]
[140.95892334 -48.97833252]
[142.16256714 -65.64074707]
[152.92771912 -78.19823456]
[168.88771057 -81.85960388]
[174.30633545 -95.84668732]
[179.72496033 -109.83377075]
[167.36444092 -101.33570099]
[152.79499817 -97.76757812]
[137.90638733 -99.59222412]
[124.62973785 -106.57295990]
[114.68711090 -117.80435181]
[109.36811066 -131.82962036]
[109.36264038 -146.82962036]
[114.67141724 -160.85876465]
[124.60585022 -172.09739685]
[137.87741089 -179.08781433]
[152.76467896 -180.92330933]
[167.33671570 -177.36582947]
[179.70344543 -168.87677002]
[188.26081848 -156.55722046]
[191.89892578 -142.00509644]
[190.14512634 -127.10544586]
[199.99182129 -138.42103577]
[209.83851624 -149.73663330]
[212.70053101 -169.63093567]
[231.12770081 -175.31376648]
[240.44129944 -187.07203674]
[242.29533386 -203.36604309]
[257.43923950 -209.65838623]
[270.29428101 -199.47604370]
[267.63629150 -183.29374695]
[252.19956970 -177.75843811]
[242.88597107 -166.00016785]
[244.97908020 -155.88671875]
[241.03250122 -146.10437012]
[232.14315796 -140.02531433]
[221.15409851 -139.88993835]
[211.30740356 -128.57434082]
[201.46070862 -117.25875092]
[193.71205139 -104.41514587]
[188.29342651 -90.42806244]
[182.87480164 -76.44097900]
[191.14390564 -65.89641571]
[193.11619568 -52.53240204]
[188.16676331 -39.84642029]
[177.49653625 -31.21247101]
[163.84283447 -28.98386383]
[158.10258484 -15.12567043]
[152.36231995 -1.26747739]
[146.62207031 12.59071541]
[140.88182068 26.44890785]
[135.14157104 40.30710220]
[129.40132141 54.16529465]
[130.40797424 58.91767502]
[128.37567139 64.34623718]
[123.06261444 68.52109528]
[116.68846893 82.09939575]
[110.31432343 95.67769623]
[104.09742737 109.32871246]
[98.03861237 123.05062103]
[91.97979736 136.77253723]
[85.92098236 150.49444580]
[87.42483521 166.24400330]
[75.20599365 174.76158142]
[69.14717102 188.48348999]
[63.08835983 202.20539856]
[65.52645111 220.41546631]
[51.05628586 230.27638245]
[45.31603241 244.13456726]
[39.57578278 257.99276733]
[33.83552933 271.85095215]
[41.76342392 277.36575317]
[48.66623688 284.11358643]
[54.35455704 291.90740967]
[58.67262650 300.53137207]
[61.50260544 309.74700928]
[62.76778030 319.29971313]
[62.43464661 328.92581177]
[60.51379776 338.35989380]
[57.05959320 347.34197998]
[52.16860962 355.62487793]
[45.97696686 362.98083496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 22]
[8 21]
[9 20]
[10 19]
[11 18]
[12 17]
[29 124]
[30 123]
[31 122]
[32 121]
[35 119]
[36 118]
[37 117]
[39 115]
[40 114]
[41 113]
[42 112]
[44 111]
[45 110]
[46 109]
[47 106]
[48 105]
[49 104]
[50 103]
[51 102]
[52 101]
[53 100]
[57 95]
[58 94]
[59 93]
[75 92]
[76 91]
[77 90]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
