%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:09:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACGGUCCCCCAGCCAUGGGCGCUGCAGCUCCGGCCGAGUCCGCAGACCUCGGGAACUUCUGGAAGGCGGGAGAACCCCUGCUGCAAGGCCCCGACGCCCUGGCGGCUCCCAUGA\
) } def
/len { sequence length } bind def

/coor [
[72.52662659 366.56811523]
[64.52021027 353.46115112]
[64.15598297 338.10656738]
[71.53192139 324.63470459]
[84.66393280 316.66940308]
[84.26120758 301.67483521]
[73.30718231 291.64761353]
[72.68515778 276.44671631]
[83.27688599 265.02511597]
[82.87416077 250.03050232]
[80.45492554 247.29696655]
[79.31045532 243.20816040]
[80.08473969 238.41087341]
[83.09175873 233.82398987]
[83.89691162 218.84561157]
[84.70205688 203.86723328]
[85.50720978 188.88887024]
[82.68733215 181.95040894]
[86.54039001 173.52079773]
[87.74738312 158.56944275]
[88.95438385 143.61807251]
[90.16138458 128.66671753]
[91.36838531 113.71536255]
[83.18191528 101.14627838]
[69.01892090 96.20567322]
[54.85592651 91.26506805]
[40.69293213 86.32446289]
[22.75898361 90.22587585]
[11.74606800 76.63467407]
[-2.54446673 72.07609558]
[-16.83500099 67.51751709]
[-31.12553596 62.95893860]
[-45.98295975 69.01174164]
[-59.90769196 61.04421997]
[-62.21786499 45.16836548]
[-51.14131165 33.56278229]
[-35.17501831 35.13027954]
[-26.56695747 48.66840363]
[-12.27642345 53.22698212]
[2.01411080 57.78556061]
[16.30464554 62.34413528]
[27.27698326 57.06031036]
[39.27640533 60.84080887]
[45.63353729 72.16146851]
[59.79653168 77.10207367]
[73.95952606 82.04267883]
[88.12252045 86.98328400]
[92.58528900 86.21756744]
[96.64915466 86.73733521]
[99.98387909 88.29151917]
[102.35926819 90.55256653]
[113.17729950 80.16169739]
[123.99533844 69.77083588]
[134.81336975 59.37997055]
[145.63140869 48.98910522]
[146.11372375 33.41973877]
[157.23277283 23.03603172]
[172.07281494 23.59179306]
[182.89085388 13.20092773]
[193.70889282 2.81006217]
[198.30178833 -12.32981300]
[212.84054565 -15.56614399]
[223.65858459 -25.95701027]
[234.47662354 -36.34787369]
[239.06951904 -51.48775101]
[253.60827637 -54.72408295]
[264.42630005 -65.11494446]
[275.24435425 -75.50581360]
[279.33712769 -83.82167053]
[286.49508667 -86.02558136]
[297.58819580 -96.12226105]
[299.77505493 -112.01557159]
[313.63748169 -120.09097290]
[328.54147339 -114.15371704]
[333.05392456 -98.75835419]
[323.71328735 -85.71488190]
[307.68487549 -85.02914429]
[296.59176636 -74.93247223]
[285.63522339 -64.68777466]
[274.81716919 -54.29690933]
[263.99914551 -43.90604401]
[260.18002319 -29.50939369]
[244.86747742 -25.52983856]
[234.04945374 -15.13897324]
[223.23141479 -4.74810791]
[219.41229248 9.64854336]
[204.09974670 13.62809849]
[193.28172302 24.01896477]
[182.46368408 34.40982819]
[182.42144775 49.26021194]
[171.59843445 59.95213318]
[156.02227783 59.80714035]
[145.20423889 70.19800568]
[134.38619995 80.58887482]
[123.56816864 90.97973633]
[112.75012970 101.37060547]
[106.31974030 114.92235565]
[105.11274719 129.87371826]
[103.90574646 144.82507324]
[102.69874573 159.77644348]
[101.49174500 174.72779846]
[100.48558044 189.69401550]
[99.68043518 204.67239380]
[98.87528229 219.65075684]
[98.07013702 234.62913513]
[97.86875916 249.62779236]
[98.27147675 264.62237549]
[109.46100616 275.45898438]
[109.65581512 290.67138672]
[99.25580597 301.27209473]
[99.65852356 316.26669312]
[113.19915009 323.51562500]
[121.28757477 336.57214355]
[121.74805450 351.92413330]
[114.45671844 365.44198608]
[101.37490082 373.48944092]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 111]
[6 110]
[9 107]
[10 106]
[14 105]
[15 104]
[16 103]
[17 102]
[19 101]
[20 100]
[21 99]
[22 98]
[23 97]
[24 47]
[25 46]
[26 45]
[27 44]
[29 41]
[30 40]
[31 39]
[32 38]
[51 96]
[52 95]
[53 94]
[54 93]
[55 92]
[58 89]
[59 88]
[60 87]
[62 85]
[63 84]
[64 83]
[66 81]
[67 80]
[68 79]
[70 78]
[71 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
