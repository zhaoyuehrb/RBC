%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:15:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCUUUCUUCUUUGUAGACUUAAGACCCAUGAACAGGUCAGCAACACACAUCGUGACAGAGUUUAUUCUCCUGGGAUUCCCUGGUUGCUGGAAGAUUC\
) } def
/len { sequence length } bind def

/coor [
[110.99733734 247.04919434]
[107.63845825 231.36170959]
[117.92022705 219.04647827]
[117.92022705 204.04647827]
[117.92022705 189.04647827]
[117.92022705 174.04647827]
[117.92022705 159.04647827]
[117.92022705 144.04647827]
[117.92022705 129.04647827]
[111.27513885 125.56900024]
[91.33988190 115.13657379]
[79.01554871 123.68705750]
[66.69121552 132.23753357]
[60.18969727 147.29284668]
[43.87157440 148.92100525]
[34.52352905 135.44709778]
[41.76203156 120.73193359]
[58.14073181 119.91320801]
[70.46506500 111.36272430]
[82.78939819 102.81224060]
[82.43959808 95.32039642]
[68.40539551 100.61579895]
[59.03251266 88.90473175]
[67.27416992 76.37178040]
[81.73999023 80.33672333]
[81.39019012 72.84488678]
[68.32274628 65.47997284]
[55.25530243 58.11506271]
[42.18785858 50.75015259]
[28.13508034 57.33035660]
[12.90480423 54.36078262]
[2.35338378 42.98329926]
[0.53805369 27.57277679]
[8.15684605 14.05487633]
[22.28017998 7.62750673]
[37.47734451 10.76212215]
[47.90472031 22.25339890]
[49.55276871 37.68270874]
[62.62021255 45.04761887]
[75.68765259 52.41252899]
[88.75509644 59.77744293]
[103.74784088 59.31094360]
[116.33213806 51.14788055]
[128.91642761 42.98481750]
[141.50071716 34.82175446]
[154.08500671 26.65869331]
[166.66929626 18.49563026]
[172.29037476 11.06622124]
[179.77433777 10.28148079]
[192.60641479 2.51373601]
[192.39193726 -12.78009415]
[199.81240845 -26.04030800]
[212.78761292 -33.75461197]
[227.78170776 -33.93730164]
[240.76657104 -26.63944054]
[253.59864807 -34.40718460]
[257.48098755 -49.49245071]
[270.60519409 -57.18725204]
[284.96273804 -53.39307404]
[297.79483032 -61.16082001]
[310.62689209 -68.92856598]
[323.33660889 -76.89492798]
[335.92089844 -85.05799103]
[338.96926880 -100.56550598]
[352.13665771 -109.30596924]
[367.61108398 -106.09381866]
[376.21182251 -92.83476257]
[372.83627319 -77.39517212]
[359.48703003 -68.93507385]
[344.08398438 -72.47370148]
[331.49969482 -64.31063843]
[327.53128052 -57.91711044]
[318.39465332 -56.09648895]
[305.56256104 -48.32874298]
[292.73049927 -40.56100082]
[289.43508911 -26.08080864]
[276.53219604 -18.02041245]
[261.36639404 -21.57510948]
[248.53431702 -13.80736637]
[248.97969055 1.08112705]
[241.86561584 14.28135109]
[229.01452637 22.20068550]
[213.82522583 22.62704086]
[200.37416077 15.34581089]
[187.54208374 23.11355591]
[174.83236694 31.07992172]
[162.24807739 39.24298477]
[149.66378784 47.40604782]
[137.07948303 55.56911087]
[124.49520111 63.73217392]
[111.91090393 71.89523315]
[132.92022705 129.04647827]
[132.92022705 144.04647827]
[132.92022705 159.04647827]
[132.92022705 174.04647827]
[132.92022705 189.04647827]
[132.92022705 204.04647827]
[132.92022705 219.04647827]
[143.20199585 231.36170959]
[139.84310913 247.04919434]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 98]
[4 97]
[5 96]
[6 95]
[7 94]
[8 93]
[9 92]
[11 20]
[12 19]
[13 18]
[26 41]
[27 40]
[28 39]
[29 38]
[42 91]
[43 90]
[44 89]
[45 88]
[46 87]
[47 86]
[49 85]
[50 84]
[55 79]
[56 78]
[59 75]
[60 74]
[61 73]
[62 71]
[63 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
