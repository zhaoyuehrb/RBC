%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:13:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCGCCCUCCAGCUUCUGCCCUGCCUGCUGUGUGCGGAGCCGUCCAGCGACCACCAUGGUGAGGCUCGUGCUGCCCAACCCCGGCCUAGACGCCCGGAUCCCGUCCCUGGCUGAGCUGGAGACCAUCGAGCAGGAGGAGGCCAGCUCCCGGCCGA\
) } def
/len { sequence length } bind def

/coor [
[224.60667419 359.27438354]
[214.10929871 355.30264282]
[205.31527710 348.28582764]
[199.08264160 338.88766479]
[196.02587891 328.00503540]
[196.45545959 316.68270874]
[200.34632874 306.01281738]
[207.33880615 297.02960205]
[199.62324524 284.16607666]
[191.90768433 271.30258179]
[184.19212341 258.43905640]
[176.47656250 245.57553101]
[168.76098633 232.71202087]
[161.04542542 219.84849548]
[153.32986450 206.98498535]
[145.61430359 194.12145996]
[133.92826843 190.86383057]
[127.40492249 180.16217041]
[130.02542114 167.49566650]
[122.56879425 154.48034668]
[115.11215973 141.46502686]
[93.68277740 143.67858887]
[73.75871277 135.48408508]
[60.08760452 118.83419037]
[45.63158798 122.83714294]
[31.21634674 126.98452759]
[16.84332085 131.27592468]
[2.47029305 135.56732178]
[-11.90273380 139.85871887]
[-20.76166153 153.23402405]
[-36.75439835 154.50363159]
[-47.61268997 142.69358826]
[-45.00697708 126.86355591]
[-30.93614769 119.15698242]
[-16.19413185 125.48569489]
[-1.82110453 121.19429016]
[12.55192280 116.90289307]
[26.92494965 112.61149597]
[32.46549606 107.65667725]
[41.62863922 108.38112640]
[56.08465576 104.37817383]
[51.73418808 97.40210724]
[48.58235168 89.20653534]
[34.39252853 84.34351349]
[20.20270920 79.48049164]
[4.22217226 83.16213989]
[-6.75699663 70.98059845]
[-1.44037044 55.46720123]
[14.70276165 52.58079910]
[25.06572914 65.29067230]
[39.25555038 70.15369415]
[53.44537354 75.01671600]
[58.72207642 69.68695068]
[48.06254959 59.13354111]
[37.40319443 48.57995605]
[47.95695877 37.92077637]
[58.61595917 48.47401428]
[69.27548218 59.02742004]
[74.55219269 53.69765854]
[69.54744720 39.55720139]
[64.54270172 25.41674232]
[50.55787277 18.55654144]
[45.68378448 4.14481354]
[52.31012344 -9.14530468]
[47.30537796 -23.28576279]
[42.30063248 -37.42621994]
[27.59184647 -42.73522949]
[19.78157043 -56.28268814]
[22.55757904 -71.67189789]
[34.60912704 -81.63654327]
[50.24584198 -81.47162628]
[62.08454132 -71.25502014]
[64.53536224 -55.81068039]
[56.44108963 -42.43096542]
[61.44583511 -28.29050636]
[66.45057678 -14.15005016]
[79.96189880 -7.98727036]
[85.23886108 6.28186941]
[78.68315887 20.41199875]
[83.68790436 34.55245590]
[88.69264984 48.69291306]
[97.27608490 50.33809280]
[105.02783203 53.33527756]
[111.74843597 57.45942688]
[118.14055634 43.88957977]
[124.53267670 30.31972885]
[118.94993591 15.53431129]
[125.53326416 1.16645157]
[140.37687683 -4.25965357]
[154.67433167 2.47520781]
[159.94319153 17.37536240]
[153.05755615 31.60081100]
[138.10252380 36.71184921]
[131.71040344 50.28170013]
[125.31828308 63.85154724]
[128.10423279 65.97239685]
[130.71330261 68.30741882]
[142.83088684 59.46637726]
[154.94847107 50.62533569]
[167.06605530 41.78429031]
[176.29780579 27.56418991]
[192.51777649 32.49863434]
[192.26631165 49.45071793]
[175.90710449 53.90187836]
[163.78952026 62.74292374]
[151.67193604 71.58396912]
[139.55433655 80.42501068]
[144.12925720 99.42132568]
[140.05403137 118.53107452]
[128.12748718 134.00839233]
[135.58412170 147.02371216]
[143.04075623 160.03903198]
[159.15655518 168.89392090]
[158.47781372 186.40589905]
[166.19338989 199.26942444]
[173.90895081 212.13293457]
[181.62451172 224.99645996]
[189.34007263 237.85997009]
[197.05563354 250.72348022]
[204.77119446 263.58700562]
[212.48677063 276.45053101]
[220.20233154 289.31402588]
[239.32217407 288.12411499]
[256.35559082 296.71194458]
[266.68048096 312.65567017]
[267.54144287 331.54992676]
[258.78463745 348.22317505]
[267.50399780 360.42861938]
[276.22338867 372.63403320]
[283.80212402 377.83505249]
[284.99221802 385.17205811]
[293.46560669 397.54953003]
[310.23782349 405.08749390]
[310.96142578 422.59768677]
[319.68078613 434.80313110]
[328.40014648 447.00857544]
[337.11953735 459.21398926]
[352.63659668 459.20352173]
[365.17651367 468.34298706]
[369.91744995 483.11810303]
[365.03640747 497.84747314]
[352.41021729 506.86740112]
[336.89395142 506.70956421]
[324.45388794 497.43460083]
[319.87353516 482.60894775]
[324.91409302 467.93338013]
[316.19473267 455.72793579]
[307.47537231 443.52249146]
[298.75598145 431.31704712]
[286.84692383 429.00421143]
[279.48880005 418.85839844]
[281.08816528 406.02291870]
[272.61474609 393.64547729]
[264.01794434 381.35339355]
[255.29856873 369.14797974]
[246.57920837 356.94253540]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 122]
[9 121]
[10 120]
[11 119]
[12 118]
[13 117]
[14 116]
[15 115]
[16 114]
[19 112]
[20 111]
[21 110]
[24 41]
[25 40]
[26 38]
[27 37]
[28 36]
[29 35]
[43 52]
[44 51]
[45 50]
[59 81]
[60 80]
[61 79]
[64 76]
[65 75]
[66 74]
[84 95]
[85 94]
[86 93]
[97 107]
[98 106]
[99 105]
[100 104]
[127 156]
[128 155]
[129 154]
[131 153]
[132 152]
[134 149]
[135 148]
[136 147]
[137 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
