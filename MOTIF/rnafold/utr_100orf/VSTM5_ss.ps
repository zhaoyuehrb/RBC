%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:45:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGGCCUCUGCCCAGCGGGAGGAGGAAGACCCGAGGCAUCUCCCUAGGACUCUUCGCCCUCUGCCUGGCCGCAGCCCGCUGUCUGCAGAGUCAGGGUG\
) } def
/len { sequence length } bind def

/coor [
[90.02279663 395.17700195]
[83.74260712 381.21929932]
[84.67983246 365.94250488]
[92.61909485 352.85714722]
[105.73600769 344.97012329]
[104.80346680 329.99914551]
[103.87091827 315.02813721]
[100.24958038 308.43182373]
[103.14955902 299.57843018]
[102.68305969 284.58569336]
[102.21656036 269.59292603]
[101.75006104 254.60018921]
[101.28356171 239.60745239]
[89.83508301 224.15606689]
[99.16439819 206.42056274]
[97.76670837 191.48580933]
[96.36901855 176.55107117]
[94.97132874 161.61633301]
[93.57363892 146.68159485]
[92.17594910 131.74685669]
[90.77825928 116.81211853]
[80.63601685 91.45680237]
[73.06877899 78.50547791]
[65.50153351 65.55415344]
[50.47846985 61.43768311]
[42.98870468 48.19540024]
[47.00571060 33.89857101]
[39.43846512 20.94724655]
[31.87122345 7.99592113]
[24.30397987 -4.95540476]
[16.73673820 -17.90673065]
[0.57157665 -26.55164719]
[0.96254832 -44.02014923]
[-7.00381851 -56.72986984]
[-20.88889694 -64.31375122]
[-21.09230995 -79.20696259]
[-29.05867577 -91.91668701]
[-37.02504349 -104.62640381]
[-52.48327637 -107.91557312]
[-61.01790237 -121.21729279]
[-57.56548309 -136.63987732]
[-44.17427826 -145.03340149]
[-28.78904915 -141.41812134]
[-20.53758049 -127.93891907]
[-24.31532288 -112.59277344]
[-16.34895515 -99.88304901]
[-8.38258839 -87.17333221]
[4.93268108 -80.49853516]
[5.70590210 -64.69623566]
[13.67226887 -51.98651886]
[25.48786163 -48.91898727]
[32.19967270 -38.24302673]
[29.68806267 -25.47397232]
[37.25530624 -12.52264786]
[44.82254791 0.42867798]
[52.38979340 13.38000393]
[59.95703506 26.33132935]
[74.38422394 29.85152245]
[82.24298096 42.87820816]
[78.45285797 57.98690796]
[86.02010345 70.93823242]
[93.58734894 83.88955688]
[107.79441833 88.70194244]
[121.67482758 83.01561737]
[135.55523682 77.32929230]
[149.43563843 71.64296722]
[155.30845642 56.97035217]
[169.86895752 50.82484436]
[184.47866821 56.85246277]
[190.46987915 71.47712708]
[184.28814697 86.02228546]
[169.60095215 91.85855103]
[155.12196350 85.52337646]
[141.24156189 91.20970154]
[127.36115265 96.89602661]
[113.48074341 102.58235168]
[105.71299744 115.41442871]
[107.11068726 130.34916687]
[108.50837708 145.28390503]
[109.90606689 160.21864319]
[111.30375671 175.15338135]
[112.70144653 190.08813477]
[114.09913635 205.02287292]
[123.02900696 211.61553955]
[126.68523407 221.86067200]
[124.05606079 232.18742371]
[116.27630615 239.14096069]
[116.74280548 254.13369751]
[117.20930481 269.12643433]
[117.67580414 284.11920166]
[118.14230347 299.11193848]
[118.84190369 314.09561157]
[119.77445221 329.06658936]
[120.70699310 344.03756714]
[134.70127869 350.23583984]
[144.20304871 362.23480225]
[147.02885437 377.27719116]
[142.52935791 391.90637207]
[131.73849487 402.76068115]
[117.13594055 407.34585571]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 94]
[6 93]
[7 92]
[9 91]
[10 90]
[11 89]
[12 88]
[13 87]
[15 83]
[16 82]
[17 81]
[18 80]
[19 79]
[20 78]
[21 77]
[22 62]
[23 61]
[24 60]
[27 57]
[28 56]
[29 55]
[30 54]
[31 53]
[33 50]
[34 49]
[36 47]
[37 46]
[38 45]
[63 76]
[64 75]
[65 74]
[66 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
