%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:31:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGGCUCGGCGCCGCCCGCGCGCCCGCGCCAGAGCAGCCAUGUACCGGCGCAGCUACGUCUUCCAGACCCGCAAGGAGCAGUACGAGCACGCCGACGAGGCUUCGCGCGCCGCCGAGCCCGAGCGCCCGGCCGACGAGG\
) } def
/len { sequence length } bind def

/coor [
[120.75690460 532.85839844]
[125.96655273 518.33728027]
[138.21380615 508.95599365]
[136.87872314 494.01553345]
[135.54364014 479.07504272]
[134.20857239 464.13458252]
[132.87348938 449.19412231]
[124.03410339 437.20602417]
[130.51240540 422.77197266]
[129.17732239 407.83148193]
[127.84224701 392.89102173]
[126.50717163 377.95056152]
[125.17208862 363.01010132]
[111.79867554 347.34796143]
[120.80252075 327.96075439]
[118.47251129 313.14282227]
[108.85214996 301.77188110]
[114.35189819 286.93737793]
[112.02188873 272.11944580]
[107.84181976 265.95059204]
[109.80886078 256.94577026]
[107.80955505 242.07960510]
[105.81025696 227.21343994]
[96.35591888 219.58665466]
[94.60916901 207.15982056]
[102.05597687 196.56401062]
[100.38837433 181.65699768]
[98.72077179 166.74998474]
[97.05316162 151.84297180]
[95.38555908 136.93595886]
[92.21573639 133.26567078]
[91.37130737 127.54251099]
[93.99098969 121.32976532]
[92.98910522 106.36326599]
[89.86735535 102.03958130]
[89.43668365 96.26641083]
[92.29112244 90.71044922]
[91.95693970 75.71417236]
[91.62275696 60.71789551]
[91.28857422 45.72161865]
[83.24573517 32.09725189]
[90.69757080 19.20075989]
[90.36338043 4.20448256]
[90.02919769 -10.79179382]
[86.86694336 -16.74671745]
[87.19863892 -22.52232552]
[90.02919769 -26.46016312]
[90.36338043 -41.45643997]
[90.69757080 -56.45271683]
[91.03175354 -71.44898987]
[91.36593628 -86.44527435]
[83.00559998 -96.33622742]
[83.63935852 -108.86920929]
[92.37734985 -117.30720520]
[93.04555511 -132.29231262]
[93.71375275 -147.27742004]
[90.95304108 -156.07144165]
[94.56745911 -162.58784485]
[95.56935120 -177.55435181]
[96.57123566 -192.52084351]
[97.40633392 -207.49758911]
[98.07453918 -222.48269653]
[98.40872192 -237.47897339]
[98.40872192 -252.47897339]
[98.40872192 -267.47897339]
[85.06759644 -275.08883667]
[77.33262634 -288.35781860]
[77.28448486 -303.71661377]
[84.93611908 -317.03384399]
[98.22927856 -324.72717285]
[113.58817291 -324.72717285]
[126.88133240 -317.03384399]
[134.53295898 -303.71661377]
[134.48481750 -288.35781860]
[126.74985504 -275.08883667]
[113.40872192 -267.47897339]
[113.40872192 -252.47897339]
[113.40872192 -237.47897339]
[116.15085602 -233.47904968]
[116.35379028 -227.69747925]
[113.05964661 -221.81449890]
[112.39144897 -206.82937622]
[115.25901031 -199.95155334]
[111.53774261 -191.51896667]
[110.53585052 -176.55245972]
[109.53396606 -161.58595276]
[108.69886780 -146.60922241]
[108.03066254 -131.62411499]
[107.36245728 -116.63899994]
[116.29384613 -101.57287598]
[106.36221313 -86.11108398]
[106.02803040 -71.11480713]
[105.69384766 -56.11853409]
[105.35965729 -41.12225723]
[105.02547455 -26.12597847]
[105.02547455 -11.12597847]
[105.35965729 3.87029839]
[105.69384766 18.86657524]
[113.71277618 31.41830826]
[106.28485107 45.38743591]
[106.61903381 60.38371277]
[106.95321655 75.37998962]
[107.28739929 90.37626648]
[107.95560455 105.36137390]
[108.95749664 120.32788086]
[110.29257202 135.26834106]
[111.96018219 150.17535400]
[113.62778473 165.08238220]
[115.29538727 179.98939514]
[116.96299744 194.89640808]
[128.23138428 209.41285706]
[120.67641449 225.21412659]
[122.67572021 240.08029175]
[124.67502594 254.94645691]
[126.83981323 269.78942871]
[129.16983032 284.60736084]
[138.95684814 297.03814697]
[133.29043579 310.81280518]
[135.62045288 325.63073730]
[144.03884888 330.18811035]
[149.29774475 338.02087402]
[150.29896545 347.26284790]
[146.94088745 355.78256226]
[140.11256409 361.67501831]
[141.44763184 376.61547852]
[142.78271484 391.55593872]
[144.11779785 406.49639893]
[145.45288086 421.43688965]
[154.38775635 434.49362183]
[147.81394958 447.85903931]
[149.14903259 462.79949951]
[150.48411560 477.73999023]
[151.81919861 492.68045044]
[153.15426636 507.62091064]
[166.87081909 514.68206787]
[174.57257080 528.04943848]
[173.80194092 543.45751953]
[164.80480957 555.98968506]
[150.45214844 561.64697266]
[135.32383728 558.62414551]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 134]
[4 133]
[5 132]
[6 131]
[7 130]
[9 128]
[10 127]
[11 126]
[12 125]
[13 124]
[15 119]
[16 118]
[18 116]
[19 115]
[21 114]
[22 113]
[23 112]
[26 110]
[27 109]
[28 108]
[29 107]
[30 106]
[33 105]
[34 104]
[37 103]
[38 102]
[39 101]
[40 100]
[42 98]
[43 97]
[44 96]
[47 95]
[48 94]
[49 93]
[50 92]
[51 91]
[54 89]
[55 88]
[56 87]
[58 86]
[59 85]
[60 84]
[61 82]
[62 81]
[63 78]
[64 77]
[65 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
