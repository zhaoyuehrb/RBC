%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAACCAGAAAACAUCUGCUCACUUCCUUCAAAAUGGGAAAGAUCACCUUCUACGAGGACAGGGCCUUCCAGGGCCGCAGCUACGAAUGCACCACUGACUGCCCCAACCUACAACCCUAUUUCAGCCGCUGCA\
) } def
/len { sequence length } bind def

/coor [
[94.78792572 197.65817261]
[94.43628693 182.66229248]
[94.08464813 167.66641235]
[85.91961670 166.44906616]
[77.96257019 164.25019836]
[70.33103180 161.10227966]
[62.32929230 173.78974915]
[54.32755280 186.47723389]
[46.32581329 199.16471863]
[48.45291519 215.06613159]
[37.24338531 226.54331970]
[21.29621124 224.79197693]
[12.84470367 211.15556335]
[18.37213516 196.09478760]
[33.63833237 191.16297913]
[41.64007187 178.47549438]
[49.64181137 165.78800964]
[57.64355087 153.10054016]
[50.09471512 146.90080261]
[43.45666885 139.62564087]
[37.88286591 131.40934753]
[33.50688553 122.40814209]
[30.43928909 112.79724884]
[28.76493073 102.76740265]
[13.80201721 103.82154846]
[-1.16089654 104.87568665]
[-16.12380981 105.92983246]
[-31.08672333 106.98397827]
[-40.12462616 119.74525452]
[-55.26388550 123.66149139]
[-69.35620117 116.88354492]
[-75.74761963 102.61176300]
[-71.42031097 87.58483887]
[-58.41748428 78.89803314]
[-42.87868881 80.65298462]
[-32.14086533 92.02105713]
[-17.17795372 90.96691895]
[-2.21503925 89.91277313]
[12.74787426 88.85863495]
[27.71078873 87.80448914]
[31.70618248 73.34638214]
[19.40770721 64.75875092]
[7.10923052 56.17111206]
[-8.40556812 59.18218994]
[-21.45841789 50.27159500]
[-24.30529404 34.72583008]
[-15.25719547 21.76791954]
[0.31780052 19.08556175]
[13.17932606 28.27015114]
[15.69686604 43.87263870]
[27.99534225 52.46027374]
[40.29381943 61.04790878]
[61.11898041 41.25352478]
[87.77298737 31.47566032]
[115.77788544 33.06898117]
[140.54177856 45.50138092]
[150.76890564 34.52841187]
[160.99601746 23.55544090]
[158.18185425 8.40992260]
[164.74870300 -5.32797623]
[177.98913574 -12.48025227]
[192.72584534 -10.48841000]
[202.95295715 -21.46138000]
[213.18008423 -32.43434906]
[223.40719604 -43.40731812]
[219.76937866 -56.75704956]
[223.19944763 -70.04958344]
[232.69128418 -79.81652832]
[245.67182922 -83.56462097]
[258.69796753 -80.41165161]
[269.17950439 -91.14185333]
[279.66107178 -101.87205505]
[290.01611328 -112.72438812]
[300.24322510 -123.69736481]
[300.58468628 -136.65206909]
[309.40719604 -145.58764648]
[321.55300903 -146.06163025]
[332.03454590 -156.79183960]
[342.51608276 -167.52204895]
[339.77655029 -182.79536438]
[346.56793213 -196.74731445]
[360.27880859 -204.01306152]
[375.63708496 -201.79879761]
[386.73718262 -190.95593262]
[389.31088257 -175.65379333]
[382.36856079 -161.77633667]
[368.57965088 -154.65975952]
[353.24630737 -157.04049683]
[342.76477051 -146.31030273]
[332.28320312 -135.58009338]
[328.91363525 -118.39834595]
[311.21618652 -113.47024536]
[300.98907471 -102.49727631]
[298.70855713 -95.39302063]
[290.39126587 -91.39051819]
[279.90972900 -80.66030884]
[269.42819214 -69.93010712]
[272.71408081 -53.89036560]
[265.75296021 -38.88825989]
[251.09255981 -30.88211441]
[234.38017273 -33.18020248]
[224.15304565 -22.20723152]
[213.92593384 -11.23426247]
[203.69882202 -0.26129222]
[206.72137451 14.29900074]
[200.51727295 28.00932884]
[187.27482605 35.52539062]
[171.96899414 33.78255844]
[161.74186707 44.75552750]
[151.51475525 55.72849655]
[155.96092224 61.50180817]
[159.76304626 67.71820068]
[162.87734985 74.30612183]
[165.26799011 81.18975067]
[166.90745544 88.28987122]
[167.77690125 95.52476501]
[167.86628723 102.81115723]
[167.17460632 110.06520081]
[165.70980835 117.20340729]
[163.48875427 124.14361572]
[160.53700256 130.80595398]
[156.88853455 137.11373901]
[152.58534241 142.99440002]
[147.67692566 148.38021851]
[142.21981812 153.20924377]
[136.27677917 157.42587280]
[129.91624451 160.98158264]
[123.21139526 163.83546448]
[116.23941040 165.95466614]
[109.08052826 167.31477356]
[109.43216705 182.31065369]
[109.78380585 197.30653381]
[112.42549133 216.50735474]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 132]
[2 131]
[3 130]
[6 18]
[7 17]
[8 16]
[9 15]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[41 52]
[42 51]
[43 50]
[56 110]
[57 109]
[58 108]
[62 104]
[63 103]
[64 102]
[65 101]
[70 97]
[71 96]
[72 95]
[73 93]
[74 92]
[77 90]
[78 89]
[79 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
