%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:20:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGGGCGGAGCCCCGGCCCGGAGGUCUGUCAUGCUGUUCCCGCUCCAGGUGGCCGCUGUAACCUCUUCGGUCCGCGACGAUCCUCUAGAGCACUGUGUGUCUCCCCGGACGCGAGCCCGCUCCCCUGAAA\
) } def
/len { sequence length } bind def

/coor [
[240.61804199 185.32852173]
[227.45286560 178.13980103]
[214.28767395 170.95106506]
[201.12249756 163.76232910]
[186.94808960 168.19195557]
[173.49430847 161.08911133]
[168.94419861 146.19165039]
[155.77902222 139.00291443]
[141.60461426 143.43255615]
[128.15083313 136.32969666]
[123.60072327 121.43223572]
[110.43553925 114.24349976]
[100.95925903 117.63115692]
[91.17138672 115.29161072]
[84.25134277 107.98483276]
[82.44699860 98.08430481]
[69.63877869 90.27729034]
[56.83055878 82.47027588]
[44.02233887 74.66325378]
[25.65337181 74.69399261]
[17.77024651 59.06183624]
[4.77986574 51.56183624]
[-8.21051502 44.06183624]
[-21.20089531 36.56183624]
[-34.19127655 29.06183434]
[-47.18165970 21.56183434]
[-56.27477264 19.95372009]
[-60.38888931 13.72562218]
[-73.19710541 5.91860533]
[-82.24937439 4.09455204]
[-86.21411133 -2.22968936]
[-98.83291626 -10.33930111]
[-107.83921051 -12.37826157]
[-111.65232849 -18.79506302]
[-124.07456970 -27.20267677]
[-139.83998108 -28.53013992]
[-146.04324341 -42.07151031]
[-158.46548462 -50.47912598]
[-170.88772583 -58.88673782]
[-186.65315247 -60.21420288]
[-192.85641479 -73.75557709]
[-205.27865601 -82.16318512]
[-220.74795532 -78.92647552]
[-233.92918396 -87.64602661]
[-237.00216675 -103.14868927]
[-228.14373779 -116.23699951]
[-212.60946655 -119.14589691]
[-199.61553955 -110.14958954]
[-196.87103271 -94.58542633]
[-184.44879150 -86.17781067]
[-169.57189941 -85.45172119]
[-162.48011780 -71.30897522]
[-150.05787659 -62.90136337]
[-137.63563538 -54.49375153]
[-122.75874329 -53.76765823]
[-115.66695404 -39.62491608]
[-103.24471283 -31.21730232]
[-90.72330475 -22.95810509]
[-78.10449982 -14.84849262]
[-65.39009094 -6.88961411]
[-52.58187103 0.91740310]
[-39.68165970 8.57145405]
[-26.69127655 16.07145309]
[-13.70089626 23.57145309]
[-0.71051514 31.07145309]
[12.27986622 38.57145309]
[25.27024651 46.07145309]
[37.09509277 43.24704361]
[48.00434494 49.47053146]
[51.82935333 61.85503769]
[64.63757324 69.66205597]
[77.44579315 77.46907043]
[90.25401306 85.27608490]
[108.82861328 84.70838928]
[117.62427521 101.07831573]
[130.78945923 108.26705170]
[145.78196716 104.04067230]
[159.03092957 111.51861572]
[162.96775818 125.83773041]
[176.13293457 133.02645874]
[191.12544250 128.80007935]
[204.37442017 136.27803040]
[208.31123352 150.59713745]
[221.47640991 157.78587341]
[234.64160156 164.97460938]
[247.80677795 172.16334534]
[269.09036255 163.40414429]
[289.82189941 172.78823853]
[297.11767578 194.06987000]
[311.29266357 198.97589111]
[325.46768188 203.88191223]
[339.64270020 208.78793335]
[359.15884399 204.00375366]
[371.32650757 218.95791626]
[385.71890259 223.18389893]
[394.93481445 222.60290527]
[400.40130615 227.68550110]
[414.68905640 232.25279236]
[428.97680664 236.82009888]
[443.26455688 241.38739014]
[457.55230713 245.95469666]
[471.84005737 250.52198792]
[486.12780762 255.08927917]
[502.02844238 251.07656860]
[513.25817871 263.02749634]
[508.26489258 278.64794922]
[492.18518066 281.86895752]
[481.56051636 269.37704468]
[467.27276611 264.80972290]
[452.98501587 260.24243164]
[438.69726562 255.67514038]
[424.40951538 251.10784912]
[410.12176514 246.54054260]
[395.83401489 241.97325134]
[381.49291992 237.57629395]
[367.10052490 233.35031128]
[358.50097656 239.08645630]
[347.94308472 239.08967590]
[338.97235107 233.11421204]
[334.73669434 222.96293640]
[320.56167603 218.05691528]
[306.38665771 213.15089417]
[292.21163940 208.24488831]
[286.99780273 214.08398438]
[280.35888672 218.28282166]
[272.79663086 220.50646973]
[264.88729858 220.56994629]
[257.23800659 218.45346069]
[250.43986511 214.30516052]
[245.02252197 208.43075562]
[241.41279602 201.27108765]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 86]
[2 85]
[3 84]
[4 83]
[7 80]
[8 79]
[11 76]
[12 75]
[16 73]
[17 72]
[18 71]
[19 70]
[21 67]
[22 66]
[23 65]
[24 64]
[25 63]
[26 62]
[28 61]
[29 60]
[31 59]
[32 58]
[34 57]
[35 56]
[37 54]
[38 53]
[39 52]
[41 50]
[42 49]
[89 123]
[90 122]
[91 121]
[92 120]
[94 116]
[95 115]
[97 114]
[98 113]
[99 112]
[100 111]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
