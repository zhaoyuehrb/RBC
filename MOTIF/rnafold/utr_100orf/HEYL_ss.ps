%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:57:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGACUGGGAGCCUUAGCCGCGGGGCUGAGACCAGGCAGCCUGCGUUCGCCAUGAAGCGACCCAAGGAGCCGAGCGGCUCCGACGGGGAGUCCGACGGACCCAUCGACGUGGGCCAAGAGGGCCAGCUGAGCCAGAUGGCCAGGCCGCUGU\
) } def
/len { sequence length } bind def

/coor [
[43.97134781 236.14852905]
[39.06374359 250.32299805]
[24.99394608 255.52307129]
[12.04762268 247.94728088]
[9.68932915 233.13316345]
[-1.34652984 243.29238892]
[-12.38238811 253.45161438]
[-23.41824722 263.61083984]
[-22.54197121 273.11193848]
[-26.11902046 281.80822754]
[-33.21517563 287.76516724]
[-42.12967300 289.72225952]
[-50.80182648 287.35821533]
[-62.44599915 296.81408691]
[-74.09017181 306.26995850]
[-85.73434448 315.72579956]
[-97.37850952 325.18167114]
[-109.02268219 334.63751221]
[-120.66685486 344.09338379]
[-126.01408386 359.59625244]
[-142.16287231 362.45080566]
[-152.50074768 349.72052002]
[-146.39297485 334.50119019]
[-130.12271118 332.44921875]
[-118.47854614 322.99334717]
[-106.83437347 313.53750610]
[-95.19020081 304.08163452]
[-83.54602814 294.62576294]
[-71.90185547 285.16992188]
[-60.25768661 275.71405029]
[-54.70998764 255.87016296]
[-33.57746887 252.57496643]
[-22.54161263 242.41575623]
[-11.50575352 232.25653076]
[-0.46989477 222.09730530]
[10.02653217 211.38165283]
[19.95550919 200.13819885]
[29.88448524 188.89472961]
[39.81346130 177.65127563]
[49.74243927 166.40780640]
[49.31577682 154.27923584]
[57.55076599 144.82513428]
[70.42221832 143.50065613]
[80.58144379 132.46479797]
[66.87930298 119.13227081]
[61.33501816 100.61510468]
[65.54646301 81.53379059]
[53.52147675 72.56719971]
[41.49648666 63.60061646]
[29.47150040 54.63402939]
[13.87043190 57.16033173]
[1.10149813 47.84744263]
[-1.25971854 32.22053528]
[8.18764973 19.55077744]
[23.83864784 17.35490990]
[36.40781403 26.93570137]
[38.43808746 42.60903931]
[50.46307373 51.57562637]
[62.48806381 60.54221344]
[74.51304626 69.50879669]
[87.63067627 62.23364258]
[86.39198303 47.28487778]
[85.15329742 32.33610916]
[71.61180115 21.30930710]
[70.23036957 4.23887587]
[81.37548065 -8.31768322]
[79.82810974 -23.23765755]
[78.28074646 -38.15763092]
[76.73337555 -53.07760620]
[75.18600464 -67.99758148]
[73.63863373 -82.91755676]
[63.58479691 -95.87334442]
[70.02762604 -110.95386505]
[86.33927917 -112.64556885]
[95.73973846 -99.20817566]
[88.55860901 -84.46492767]
[90.10597992 -69.54495239]
[91.65335083 -54.62497711]
[93.20071411 -39.70500183]
[94.74808502 -24.78502846]
[96.29545593 -9.86505318]
[107.36295319 -3.19534349]
[112.62868500 8.81812477]
[109.95491791 21.85865402]
[100.10205841 31.09741783]
[101.34075165 46.04618454]
[102.57944489 60.99495316]
[113.98709869 65.73136139]
[122.74629974 73.48313141]
[128.17849731 83.09739685]
[142.46339417 78.52115631]
[156.74827576 73.94490814]
[171.03315735 69.36866760]
[176.08599854 53.25826263]
[189.59785461 43.41270447]
[206.15000916 43.53636551]
[219.24818420 53.38348007]
[233.43544006 48.51298904]
[240.59046936 42.73118973]
[247.96652222 43.69174194]
[262.25140381 39.11549759]
[276.53628540 34.53924942]
[290.82116699 29.96300507]
[305.10607910 25.38676071]
[315.72293091 12.88817787]
[331.80462646 16.09912491]
[336.80773926 31.71645546]
[325.58544922 43.67440033]
[309.68231201 39.67164612]
[295.39743042 44.24789047]
[281.11254883 48.82413864]
[266.82766724 53.40038300]
[252.54277039 57.97662735]
[238.30593872 62.70024872]
[224.11868286 67.57073975]
[221.39067078 80.67539215]
[212.45999146 90.79132080]
[199.58943176 95.19319916]
[186.12126160 92.62443542]
[175.60940552 83.65354919]
[161.32452393 88.22979736]
[147.03962708 92.80603790]
[132.75474548 97.38228607]
[133.36340332 107.05740356]
[131.07374573 116.84138489]
[125.88423920 125.85708618]
[118.06036377 133.23953247]
[127.75485229 144.68579102]
[137.44934082 156.13204956]
[145.43652344 160.69587708]
[147.22293091 167.91651917]
[156.67878723 179.56068420]
[166.13465881 191.20486450]
[181.63752747 196.55209351]
[184.49208069 212.70088196]
[171.76177979 223.03875732]
[156.54246521 216.93098450]
[154.49047852 200.66072083]
[145.03462219 189.01655579]
[135.57876587 177.37237549]
[126.00307465 165.82653809]
[116.30858612 154.38027954]
[106.61409760 142.93402100]
[91.61730194 142.62402344]
[81.45807648 153.65988159]
[77.88154602 171.69355774]
[60.98590088 176.33679199]
[51.05692291 187.58024597]
[41.12794495 198.82371521]
[31.19897079 210.06716919]
[21.26999283 221.31063843]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 35]
[6 34]
[7 33]
[8 32]
[13 30]
[14 29]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[36 151]
[37 150]
[38 149]
[39 148]
[40 147]
[43 145]
[44 144]
[47 60]
[48 59]
[49 58]
[50 57]
[61 87]
[62 86]
[63 85]
[66 81]
[67 80]
[68 79]
[69 78]
[70 77]
[71 76]
[90 123]
[91 122]
[92 121]
[93 120]
[97 115]
[98 114]
[100 113]
[101 112]
[102 111]
[103 110]
[104 109]
[127 143]
[128 142]
[129 141]
[131 140]
[132 139]
[133 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
