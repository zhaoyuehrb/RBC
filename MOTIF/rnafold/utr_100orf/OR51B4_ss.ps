%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:36:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGGUAUAACAACAGUGCUGGCCCCUUCUUGCUGACUGGCUUCUUGGGCUCAGAGGCAGUUCACUACCGGAUCUCUAUGUCCUUCUUUGUCAUCUACU\
) } def
/len { sequence length } bind def

/coor [
[138.73965454 220.12973022]
[150.08001709 210.31156921]
[163.60035706 203.81538391]
[178.35197449 201.09700012]
[193.30030823 202.34727478]
[182.44917297 191.99096680]
[171.59803772 181.63467407]
[160.74691772 171.27836609]
[147.79237366 174.88897705]
[134.65118408 171.55656433]
[124.82612610 162.05780029]
[120.99131775 148.82757568]
[124.26503754 135.33543396]
[113.74123383 124.64667511]
[103.21743774 113.95791626]
[89.79298401 110.04949188]
[86.09380341 96.56587982]
[75.56999969 85.87712097]
[57.77368546 81.47961426]
[53.85049057 64.45287323]
[42.99935913 54.09657288]
[32.14822769 43.74027252]
[21.13735008 33.55397797]
[9.96938896 23.54015732]
[-1.19857311 13.52633476]
[-12.36653423 3.51251292]
[-25.30820847 9.42027760]
[-39.48239517 9.91425610]
[-52.72239685 4.95233870]
[-63.01712418 -4.67613316]
[-68.81654358 -17.47573853]
[-69.26502991 -31.47717476]
[-64.32742310 -44.54022598]
[-75.17855835 -54.89652634]
[-86.02968597 -65.25283051]
[-102.08387756 -68.59870148]
[-106.95566559 -84.25749207]
[-95.63336945 -96.12078094]
[-79.76439667 -91.98462677]
[-75.67338562 -76.10395813]
[-64.82225800 -65.74765778]
[-53.97112274 -55.39135742]
[-39.21091843 -61.29687500]
[-23.29223061 -60.21252823]
[-9.36865234 -52.30286789]
[-0.22031610 -39.08955383]
[2.30116749 -23.15884209]
[-2.35271263 -7.65544844]
[8.81524944 2.35837340]
[19.98321152 12.37219524]
[31.15117264 22.38601685]
[38.35956955 24.54576492]
[42.50452805 32.88914108]
[53.35565948 43.24544144]
[64.20678711 53.60174179]
[76.41391754 53.66485596]
[85.54826355 62.35901260]
[86.25876617 75.35332489]
[96.78256226 86.04208374]
[110.20701599 89.95050812]
[113.90619659 103.43412018]
[124.43000031 114.12287903]
[134.95379639 124.81163788]
[151.55439758 122.04649353]
[166.41476440 129.58750916]
[173.83619690 144.32336426]
[171.10321045 160.42724609]
[181.95434570 170.78353882]
[192.80548096 181.13984680]
[203.65660095 191.49613953]
[217.25669861 197.82366943]
[232.16789246 199.45344543]
[247.07908630 201.08323669]
[261.99029541 202.71301270]
[274.15521240 192.62388611]
[289.88320923 194.17486572]
[299.84313965 206.44577026]
[298.12597656 222.15649414]
[285.75045776 231.98614502]
[270.05877686 230.10296631]
[260.36050415 217.62420654]
[245.44931030 215.99443054]
[230.53811646 214.36465454]
[215.62690735 212.73486328]
[226.21133423 223.36358643]
[233.63375854 236.39845276]
[237.37333679 250.92483521]
[237.16769409 265.92343140]
[233.03125000 280.34179688]
[225.25425720 293.16827393]
[214.38240051 303.50280762]
[201.17854309 310.62026978]
[186.56918335 314.02124023]
[171.57942200 313.46707153]
[157.26107788 308.99664307]
[144.61882019 300.92361450]
[134.53974915 289.81451416]
[127.73108673 276.44882202]
[124.67058563 261.76434326]
[125.57299805 246.79151917]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 70]
[6 69]
[7 68]
[8 67]
[13 63]
[14 62]
[15 61]
[17 59]
[18 58]
[20 55]
[21 54]
[22 53]
[23 51]
[24 50]
[25 49]
[26 48]
[33 42]
[34 41]
[35 40]
[71 84]
[72 83]
[73 82]
[74 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
