%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:44:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGCAGCAAUUCAUCCCUGCUGGUGGCUGUGCAGCUGUGCUACGCGAACGUGAAUGGGUCCUGUGUGAAAAUCCCCUUCUCGCCGGGAUCCCGGGUGA\
) } def
/len { sequence length } bind def

/coor [
[84.48818207 123.98223114]
[73.32021332 133.99604797]
[68.21089172 148.96954346]
[53.56971741 151.70545959]
[42.40175629 161.71928406]
[31.23379517 171.73310852]
[20.06583405 181.74691772]
[8.89787197 191.76074219]
[12.13848019 206.77388000]
[7.42309046 221.39100647]
[-3.97988176 231.68022156]
[-19.00309372 234.87374878]
[-33.60537720 230.11256409]
[-43.85879135 218.67739868]
[-47.00521851 203.64425659]
[-42.19828796 189.05696106]
[-30.73103714 178.83944702]
[-15.68809891 175.74015808]
[-1.11595023 180.59278870]
[10.05201149 170.57896423]
[21.21997261 160.56513977]
[32.38793564 150.55131531]
[43.55589676 140.53749084]
[47.86641312 126.28026581]
[63.30639648 122.82808685]
[74.47435760 112.81427002]
[71.44187164 99.55581665]
[74.88522339 86.39808655]
[64.03409576 76.04178619]
[55.50647354 72.29047394]
[53.01287460 65.19065857]
[42.48907471 54.50189590]
[31.80031395 43.97809219]
[20.94918251 33.62179184]
[10.09805202 23.26549339]
[-5.95614243 19.91961861]
[-10.82792664 4.26082659]
[0.49437264 -7.60245991]
[16.36334610 -3.46630907]
[20.45435143 12.41436195]
[31.30548286 22.77066231]
[42.15661621 33.12696075]
[49.29435730 35.50984573]
[53.17783356 43.97809219]
[63.70163727 54.66685104]
[74.39039612 65.19065857]
[85.24152374 75.54695892]
[101.04875183 71.45767975]
[116.51324463 76.69599152]
[126.58123016 89.55002594]
[141.49243164 87.92024231]
[154.37022400 78.72933197]
[167.86282349 85.03797913]
[182.77403259 83.40819550]
[187.26240540 80.09131622]
[192.09217834 79.06236267]
[196.28674316 80.04232025]
[199.14151001 82.38866425]
[214.13969421 82.15538788]
[229.13789368 81.92211151]
[244.13607788 81.68883514]
[259.13424683 81.45555878]
[274.13244629 81.22228241]
[289.13064575 80.98899841]
[304.12881470 80.75572205]
[312.83734131 77.44598389]
[319.59536743 80.75572205]
[334.59356689 80.98899841]
[349.59173584 81.22228241]
[364.58993530 81.45555878]
[371.85659790 67.98506165]
[384.55740356 59.44412994]
[399.77386475 57.79541397]
[414.00930786 63.41777039]
[423.99252319 75.01922607]
[427.42947388 89.93385315]
[423.53036499 104.73436737]
[413.19116211 116.01973724]
[398.78775024 121.19665527]
[383.62994385 119.07550812]
[371.20086670 110.14371490]
[364.35665894 96.45374298]
[349.35845947 96.22046661]
[334.36029053 95.98719025]
[319.36209106 95.75391388]
[304.36209106 95.75391388]
[289.36392212 95.98719025]
[274.36572266 96.22046661]
[259.36752319 96.45374298]
[244.36935425 96.68701935]
[229.37117004 96.92029572]
[214.37297058 97.15357208]
[199.37478638 97.38684845]
[184.40380859 98.31939697]
[169.49261475 99.94918060]
[157.68136597 109.02351379]
[143.12220764 102.83144379]
[128.21101379 104.46122742]
[122.67052460 117.37271118]
[111.64408875 126.08024597]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[4 23]
[5 22]
[6 21]
[7 20]
[8 19]
[28 47]
[29 46]
[31 45]
[32 44]
[33 42]
[34 41]
[35 40]
[50 98]
[51 97]
[53 95]
[54 94]
[58 93]
[59 92]
[60 91]
[61 90]
[62 89]
[63 88]
[64 87]
[65 86]
[67 85]
[68 84]
[69 83]
[70 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
