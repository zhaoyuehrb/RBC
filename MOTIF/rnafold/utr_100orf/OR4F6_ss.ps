%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:42:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUGAAGCCAAUCACUCUGUGGUCUCUGAGUUUGUGUUCCUGGGACUCUCUGACUCGCGGAAGAUCCAGCUCCUCCUCUUCCUCUUUUUCUCAGUGU\
) } def
/len { sequence length } bind def

/coor [
[143.07299805 230.25917053]
[150.26066589 217.00772095]
[160.41127014 205.86193848]
[152.05349731 193.40611267]
[143.69570923 180.95030212]
[130.17929077 174.69284058]
[128.91499329 158.92222595]
[120.55721283 146.46641541]
[114.10274506 142.59791565]
[112.14025116 133.49070740]
[104.17388153 120.78098297]
[88.07562256 117.52368927]
[79.13733673 103.74430847]
[82.72602844 87.71666718]
[74.36824799 75.26084137]
[66.01045990 62.80502319]
[53.42350769 59.49964905]
[46.74068832 48.80551529]
[49.13013458 36.83436203]
[41.16376877 24.12464142]
[33.19740295 11.41492081]
[25.23103523 -1.29479957]
[17.26466751 -14.00452042]
[9.29830074 -26.71424103]
[1.13523793 -39.29853439]
[-7.22254610 -51.75435257]
[-15.58032990 -64.21017456]
[-30.96887970 -64.91638184]
[-42.85198593 -74.43715668]
[-46.80360413 -88.95778656]
[-41.51051712 -102.85459137]
[-49.86830139 -115.31040955]
[-58.22608566 -127.76622772]
[-66.58386993 -140.22204590]
[-74.94165039 -152.67787170]
[-83.29943848 -165.13369751]
[-98.72139740 -164.72554016]
[-111.90399170 -172.73945618]
[-118.64068604 -186.61824036]
[-116.78183746 -201.93319702]
[-106.92059326 -213.79740906]
[-92.20364380 -218.42503357]
[-77.32711029 -214.33941650]
[-67.03804016 -202.84425354]
[-64.61964417 -187.60762024]
[-70.84361267 -173.49147034]
[-62.48583221 -161.03565979]
[-54.12804794 -148.57983398]
[-45.77026367 -136.12400818]
[-37.41247940 -123.66819763]
[-29.05469513 -111.21237946]
[-14.18859291 -110.84226990]
[-2.24978805 -101.68099976]
[2.05561233 -87.07563019]
[-3.12451053 -72.56795502]
[5.23327351 -60.11213684]
[13.59105778 -47.65631866]
[20.04552841 -43.78781509]
[22.00802040 -34.68060684]
[29.97438812 -21.97088623]
[37.94075394 -9.26116657]
[45.90712357 3.44855404]
[53.87348938 16.15827370]
[61.83985519 28.86799431]
[77.73197174 36.13036728]
[78.46627808 54.44723892]
[86.82406616 66.90306091]
[95.18184662 79.35887909]
[107.92141724 80.33984375]
[117.78244019 88.46504974]
[121.18157196 100.78189850]
[116.88360596 112.81461334]
[124.84997559 125.52433014]
[133.01303101 138.10862732]
[141.37081909 150.56443787]
[155.48503113 157.71282959]
[156.15153503 172.59251404]
[164.50930786 185.04833984]
[172.86709595 197.50415039]
[187.02894592 192.33642578]
[202.01606750 190.70870972]
[216.95715332 192.71563721]
[230.98350525 198.24053955]
[243.27969360 206.96218872]
[253.13081360 218.37355042]
[259.96414185 231.81115723]
[263.38235474 246.49375916]
[263.18679810 261.56774902]
[259.38879395 276.15673828]
[252.20915222 289.41253662]
[242.06530762 300.56448364]
[229.54698181 308.96420288]
[215.38200378 314.12335205]
[200.39390564 315.74197388]
[185.45404053 313.72598267]
[171.43103027 308.19259644]
[159.14013672 299.46347046]
[149.29594421 288.04614258]
[142.47077942 274.60440063]
[139.06143188 259.91970825]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 79]
[4 78]
[5 77]
[7 75]
[8 74]
[10 73]
[11 72]
[14 68]
[15 67]
[16 66]
[19 64]
[20 63]
[21 62]
[22 61]
[23 60]
[24 59]
[25 57]
[26 56]
[27 55]
[31 51]
[32 50]
[33 49]
[34 48]
[35 47]
[36 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
