%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:29:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCACACAGCUGCCUGGAAGGUGACUGGAGGCCUUGAUCGGUUCUCAUUGCGAUUUUGCUGCUGUGGCCCCAACCCUGCCUCCCUCCCCACCCUGCGAUGGCAGAAGAAACUCAACACAACAAAUUGGCUGCAGCCAAGAAAAAGUUAAAAGAAUAUUGGCAGAAAAACAGCCCUAGAGUUCCAGCAGGAGCGAACA\
) } def
/len { sequence length } bind def

/coor [
[80.35342407 356.29559326]
[65.92918396 351.81027222]
[53.35364532 343.44174194]
[43.64625549 331.86834717]
[37.59394073 318.02832031]
[35.68734360 303.04360962]
[38.08102036 288.12896729]
[44.58092880 274.49340820]
[54.66014481 263.24237061]
[67.50159454 255.28788757]
[82.06427765 251.27479553]
[82.30107117 236.27667236]
[82.53786469 221.27853394]
[82.77465820 206.28041077]
[79.73390198 199.53616333]
[83.13543701 191.04788208]
[83.60897064 176.05535889]
[84.08249664 161.06283569]
[84.55602264 146.07031250]
[85.02955627 131.07778931]
[77.34772491 103.89292145]
[62.73900986 100.48918152]
[48.13029480 97.08543396]
[33.52157974 93.68169403]
[20.18253136 105.95091248]
[2.30626750 107.74874878]
[-12.93973923 98.54382324]
[-19.55609894 82.17852020]
[-34.26498413 79.23764801]
[-48.97386932 76.29678345]
[-63.68275070 73.35591125]
[-78.39163971 70.41503906]
[-93.10052490 67.47417450]
[-101.01405334 80.38159180]
[-112.84393311 89.78508759]
[-127.15037537 94.56484222]
[-142.20056152 94.16226959]
[-156.17854309 88.64524841]
[-167.40435791 78.69760132]
[-174.53591919 65.53440094]
[-176.72946167 50.75354767]
[-191.43835449 47.81267548]
[-200.13478088 54.36626816]
[-210.78358459 55.03257751]
[-219.84783936 49.83253098]
[-224.44976807 40.69577789]
[-239.05848694 37.29203796]
[-253.66719055 33.88829422]
[-268.27590942 30.48455238]
[-283.47180176 34.88853836]
[-294.11135864 24.46504974]
[-308.72009277 21.06130791]
[-323.32879639 17.65756607]
[-335.72705078 27.18737602]
[-351.34802246 26.46654510]
[-362.81594849 15.83542633]
[-364.71603394 0.31370991]
[-356.15112305 -12.76972485]
[-341.16528320 -17.23727989]
[-326.83441162 -10.97951221]
[-319.92504883 3.04885101]
[-305.31634521 6.45259285]
[-290.70761108 9.85633469]
[-276.55664062 5.20888996]
[-264.87216187 15.87583828]
[-250.26345825 19.27958107]
[-235.65473938 22.68332291]
[-221.04602051 26.08706284]
[-203.01281738 19.12490654]
[-188.49748230 33.10379028]
[-173.78858948 36.04466248]
[-166.08035278 23.24355316]
[-154.43571472 13.83443069]
[-140.24798584 8.96792793]
[-125.22327423 9.24965763]
[-111.17532349 14.66491413]
[-99.80656433 24.57812119]
[-92.50183105 37.80736160]
[-90.15965271 52.76528931]
[-75.45076752 55.70615768]
[-60.74188232 58.64702606]
[-46.03299713 61.58789825]
[-31.32411385 64.52876282]
[-16.61522865 67.46963501]
[-9.00354481 57.99835587]
[1.97938657 52.63381958]
[14.27329254 52.45072937]
[25.54271698 57.54531097]
[33.62068176 67.00536346]
[36.92532349 79.07298279]
[51.53403473 82.47672272]
[66.14275360 85.88046265]
[80.75146484 89.28420258]
[92.50000000 79.95832825]
[92.50000000 64.95832825]
[92.50000000 49.95833206]
[92.50000000 34.95833206]
[83.83629608 21.03452682]
[91.80042267 6.69909239]
[108.19957733 6.69909239]
[116.16370392 21.03452682]
[107.50000000 34.95833206]
[107.50000000 49.95833206]
[107.50000000 64.95832825]
[107.50000000 79.95832825]
[114.69138336 66.79459381]
[121.88276672 53.63085175]
[129.07414246 40.46711349]
[136.26553345 27.30337715]
[137.81176758 12.38328457]
[144.05203247 -1.25706518]
[154.32978821 -12.18261433]
[167.56376648 -19.24391937]
[182.36163330 -21.69808197]
[197.16658020 -19.28690910]
[210.42100525 -12.26407051]
[220.73045349 -1.36841810]
[227.01029968 12.25374985]
[228.59986877 27.16928864]
[225.33192444 41.80897903]
[217.55027771 54.63262177]
[206.07359314 64.29109192]
[192.10932922 69.76823425]
[177.12754822 70.48793793]
[163.58674622 76.94136810]
[150.04594421 83.39479828]
[136.50514221 89.84822083]
[122.96434021 96.30165100]
[137.94145203 97.13004303]
[152.91856384 97.95842743]
[167.89566040 98.78681946]
[182.87277222 99.61521149]
[197.97003174 83.88358307]
[219.48355103 84.42015839]
[233.40568542 100.45641327]
[248.40147400 100.10124207]
[263.39727783 99.74607086]
[278.39306641 99.39089966]
[293.38885498 99.03572845]
[297.70419312 84.53630829]
[306.29055786 72.08120728]
[318.30673218 62.89063644]
[332.57553101 57.86500549]
[347.69900513 57.49666977]
[362.19552612 61.82171631]
[374.64486694 70.41641998]
[383.82739258 82.43875885]
[388.84344482 96.71090698]
[389.20166016 111.83462524]
[384.86688232 126.32824707]
[376.26385498 138.77183533]
[364.23535156 147.94628906]
[349.95986938 152.95278931]
[334.83590698 153.30085754]
[320.34518433 148.95639038]
[307.90737915 140.34501648]
[298.74096680 128.31037903]
[293.74404907 114.03151703]
[278.74822998 114.38669586]
[263.75244141 114.74186707]
[248.75665283 115.09703827]
[233.76086426 115.45220947]
[230.25372314 123.34902954]
[224.33892822 129.70732117]
[216.63911438 133.81619263]
[207.97856140 135.20375061]
[199.29484558 133.69113159]
[191.53738403 129.41503906]
[185.56364441 122.81581879]
[182.04438782 114.59232330]
[167.06727600 113.76393127]
[152.09016418 112.93553925]
[137.11306763 112.10714722]
[122.13595581 111.27875519]
[116.60748291 116.34689331]
[130.91419983 120.85445404]
[134.16378784 135.49822998]
[123.10662842 145.63426208]
[108.80001831 141.12640381]
[105.55054474 126.48317719]
[100.02207947 131.55131531]
[99.54854584 146.54383850]
[99.07501984 161.53636169]
[98.60149384 176.52888489]
[98.12796783 191.52140808]
[97.77278900 206.51719666]
[97.53599548 221.51533508]
[97.29920197 236.51345825]
[97.06240845 251.51159668]
[111.49114990 255.98240662]
[124.07508850 264.33831787]
[133.79409790 275.90194702]
[139.86032104 289.73587036]
[141.78196716 304.71865845]
[139.40327454 319.63571167]
[132.91706848 333.27777100]
[122.84915924 344.53894043]
[110.01570892 352.50631714]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 189]
[12 188]
[13 187]
[14 186]
[16 185]
[17 184]
[18 183]
[19 182]
[20 181]
[21 93]
[22 92]
[23 91]
[24 90]
[28 84]
[29 83]
[30 82]
[31 81]
[32 80]
[33 79]
[41 71]
[42 70]
[46 68]
[47 67]
[48 66]
[49 65]
[51 63]
[52 62]
[53 61]
[94 105]
[95 104]
[96 103]
[97 102]
[128 174]
[129 173]
[130 172]
[131 171]
[132 170]
[135 162]
[136 161]
[137 160]
[138 159]
[139 158]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
