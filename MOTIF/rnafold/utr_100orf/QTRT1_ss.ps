%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:54:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCACGUGGUUCCGACAGUCAAGAUGGCGGGAGCAGCUACCCAGGCUUCCCUGGAGUCGGCCCCACGGAUCAUGCGGCUGGUGGCCGAAUGCAGCCGCUCCAGGGCCCGGGCAGGCGAGCUGU\
) } def
/len { sequence length } bind def

/coor [
[127.90894318 185.51609802]
[122.08242035 171.69395447]
[116.25589752 157.87181091]
[110.42938232 144.04966736]
[104.60285950 130.22752380]
[79.20306396 122.41376495]
[69.51302338 97.66892242]
[55.29411316 92.89161682]
[41.07520294 88.11431885]
[26.85629272 83.33702087]
[12.63738346 78.55972290]
[-1.38577998 85.34121704]
[-15.73772240 80.29380035]
[-22.11641884 66.88306427]
[-36.33533096 62.10576248]
[-50.55424118 57.32846451]
[-64.77314758 52.55116272]
[-78.99205780 47.77386475]
[-99.62045288 61.70020294]
[-125.72459412 51.61626816]
[-139.94351196 56.39356613]
[-154.16241455 61.17086792]
[-168.38133240 65.94816589]
[-181.47000122 76.72421265]
[-195.44821167 67.13015747]
[-190.09864807 51.04232025]
[-173.15863037 51.72925568]
[-158.93971252 46.95195770]
[-144.72080994 42.17465591]
[-130.50189209 37.39735794]
[-129.00837708 22.47189522]
[-141.99876404 14.97189617]
[-154.98913574 7.47189617]
[-167.97952271 -0.02810385]
[-174.75804138 -0.41957855]
[-179.54139709 -3.73854589]
[-181.41708374 -8.23962402]
[-194.01747131 -16.37781715]
[-206.61785889 -24.51601219]
[-219.21824646 -32.65420532]
[-235.14169312 -30.69883347]
[-246.49723816 -42.03157425]
[-244.57389832 -57.95891571]
[-230.84707642 -66.26277161]
[-215.84681702 -60.57312775]
[-211.08004761 -45.25459671]
[-198.47966003 -37.11640167]
[-185.87927246 -28.97820663]
[-173.27888489 -20.84001350]
[-160.47952271 -13.01848507]
[-147.48913574 -5.51848507]
[-134.49876404 1.98151505]
[-121.50837708 9.48151493]
[-108.13446808 3.39383721]
[-94.08679199 4.04366541]
[-82.43074036 10.71742058]
[-75.45237732 21.44832993]
[-74.21475983 33.55495453]
[-59.99584961 38.33225250]
[-45.77693939 43.10955429]
[-31.55802917 47.88685226]
[-17.33912086 52.66415405]
[-4.15699196 45.82550812]
[10.33105946 50.46781540]
[17.41468239 64.34081268]
[31.63359261 69.11811066]
[45.85250473 73.89540863]
[60.07141495 78.67270660]
[74.29032135 83.45001221]
[79.98944092 76.88145447]
[87.30726624 72.18302155]
[95.65184784 69.73478699]
[104.34815216 69.73478699]
[112.69273376 72.18302155]
[120.01055908 76.88145447]
[125.70967865 83.45001221]
[139.92858887 78.67270660]
[154.14749146 73.89540863]
[168.36640930 69.11811066]
[182.58531189 64.34081268]
[196.80422974 59.56351089]
[211.02313232 54.78620911]
[213.38633728 39.66424561]
[222.51568604 27.37955666]
[236.31332397 20.75507736]
[251.60865784 21.31306267]
[264.88693237 28.92529488]
[273.09689331 41.84253693]
[274.35195923 57.09650040]
[268.36370850 71.18193817]
[256.50820923 80.86211395]
[241.50978088 83.91260529]
[226.81492615 79.63242340]
[215.80043030 69.00511932]
[201.58152771 73.78241730]
[187.36260986 78.55972290]
[173.14370728 83.33702087]
[158.92478943 88.11431885]
[144.70588684 92.89161682]
[130.48696899 97.66892242]
[130.34211731 103.77438354]
[128.98674011 109.72926331]
[126.47493744 115.29599762]
[122.90690613 120.25248718]
[118.42500305 124.40100098]
[124.25151825 138.22314453]
[130.07804871 152.04528809]
[135.90457153 165.86743164]
[141.73109436 179.68957520]
[152.15296936 183.25558472]
[158.70758057 191.83171082]
[159.38395691 202.38319397]
[154.19905090 211.34336853]
[159.32934570 225.43876648]
[164.45965576 239.53414917]
[169.58995056 253.62954712]
[183.46371460 261.68548584]
[185.67283630 277.57571411]
[174.52267456 289.11059570]
[158.56668091 287.44155884]
[150.04492188 273.84893799]
[155.49456787 258.75985718]
[150.36425781 244.66445923]
[145.23396301 230.56906128]
[140.10365295 216.47367859]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 109]
[2 108]
[3 107]
[4 106]
[5 105]
[7 69]
[8 68]
[9 67]
[10 66]
[11 65]
[14 62]
[15 61]
[16 60]
[17 59]
[18 58]
[20 30]
[21 29]
[22 28]
[23 27]
[31 53]
[32 52]
[33 51]
[34 50]
[37 49]
[38 48]
[39 47]
[40 46]
[76 100]
[77 99]
[78 98]
[79 97]
[80 96]
[81 95]
[82 94]
[113 125]
[114 124]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
