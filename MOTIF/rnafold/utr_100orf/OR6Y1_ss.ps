%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:52:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACCACCAUAAUUCUGGAAGUAGAUAAUCAUACAGUGACAACACGUUUCAUUCUUCUGGGGUUUCCAACACGACCAGCCUUCCAGCUUCUCUUUUUCU\
) } def
/len { sequence length } bind def

/coor [
[64.01949310 353.41552734]
[49.16765976 350.96441650]
[35.11337280 345.57351685]
[22.43214417 337.46356201]
[11.64326477 326.96667480]
[3.18853259 314.51263428]
[-2.58583736 300.61151123]
[-5.44338846 285.83248901]
[-5.26710510 270.78079224]
[-2.06420636 256.07275391]
[4.03415108 242.31066895]
[12.77824306 230.05809021]
[23.81000519 219.81675720]
[36.67769241 212.00602722]
[50.85438156 206.94575500]
[65.75955200 204.84315491]
[66.69209290 189.87217712]
[67.62464142 174.90118408]
[68.55718231 159.93020630]
[69.48973083 144.95921326]
[70.42227173 129.98823547]
[71.35482025 115.01725006]
[67.66062927 100.47926331]
[59.69426727 87.76954651]
[51.72789764 75.05982208]
[43.76153183 62.35010529]
[29.33595276 66.74758911]
[14.27533722 67.26069641]
[-0.39347997 63.86043930]
[-13.67193031 56.78446579]
[-24.65769196 46.52041626]
[-32.60600281 33.77234650]
[-36.98015213 19.41242218]
[-37.48771286 4.42126656]
[-34.10008621 -10.17902374]
[-27.05404854 -23.39455223]
[-16.83520317 -34.32728577]
[-24.80157089 -47.03700638]
[-32.76793671 -59.74672699]
[-47.50362778 -66.94335938]
[-48.36892700 -83.31965637]
[-34.47369003 -92.02909851]
[-20.11214256 -84.11215210]
[-20.05821609 -67.71309662]
[-12.09185028 -55.00337601]
[-4.12548304 -42.29365540]
[10.16824245 -46.72523117]
[25.13351059 -47.30624008]
[39.75042343 -43.99107361]
[53.02126694 -36.99985886]
[64.03861237 -26.80384827]
[72.04736328 -14.09366131]
[76.49651337 0.26749325]
[77.07704163 15.30244064]
[73.74337006 29.98653221]
[66.71688843 43.31747437]
[56.47125244 54.38373566]
[64.43762207 67.09346008]
[72.40398407 79.80317688]
[80.37035370 92.51290131]
[95.49668121 81.44354248]
[111.46079254 87.19995880]
[125.34120178 81.51363373]
[139.22160339 75.82730865]
[153.10200500 70.14097595]
[156.65208435 55.03546143]
[168.42489624 44.92703629]
[183.89360046 43.70260239]
[197.11012268 51.83297729]
[202.99246216 66.19186401]
[199.27874756 81.25798035]
[187.39695740 91.23809814]
[171.91589355 92.29465485]
[158.78834534 84.02138519]
[144.90792847 89.70771027]
[131.02752686 95.39403534]
[117.14711761 101.08036804]
[114.79298401 110.49563599]
[107.42842102 117.59092712]
[96.91265869 119.81295776]
[86.32579803 115.94979858]
[85.39325714 130.92077637]
[84.46070862 145.89176941]
[83.52816772 160.86274719]
[82.59561920 175.83372498]
[81.66307831 190.80471802]
[80.73052979 205.77569580]
[95.25955200 209.71176147]
[108.69867706 216.49221802]
[120.49759674 225.83943176]
[130.17314148 237.37063599]
[137.32911682 250.61363220]
[141.67247009 265.02612305]
[143.02536011 280.01794434]
[141.33238220 294.97518921]
[136.66287231 309.28533936]
[129.20802307 322.36242676]
[119.27311707 333.67092896]
[107.26498413 342.74780273]
[93.67534637 349.22134399]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 87]
[17 86]
[18 85]
[19 84]
[20 83]
[21 82]
[22 81]
[23 60]
[24 59]
[25 58]
[26 57]
[37 46]
[38 45]
[39 44]
[62 77]
[63 76]
[64 75]
[65 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
