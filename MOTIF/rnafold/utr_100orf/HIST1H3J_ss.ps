%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCCGGACGAAGCAGACAGCUCGCAAGUCUACCGGCGGCAAGGCACCGCGGAAGCAGCUGGCCACCAAGGCAGCGCGCAAAAGCGCUCCAGCGACUG\
) } def
/len { sequence length } bind def

/coor [
[67.90412903 133.39958191]
[75.56975555 120.50623322]
[88.20138550 112.41696930]
[74.15084839 117.66886902]
[70.12084198 128.01124573]
[61.18715286 134.21771240]
[50.53218079 134.37850952]
[41.78725052 128.68618774]
[27.43738365 133.05441284]
[13.08751869 137.42263794]
[-1.26234734 141.79084778]
[-6.24778366 154.41703796]
[-17.46323204 161.71185303]
[-30.63537407 161.16622925]
[-40.89972687 153.20854187]
[-55.37850189 157.12837219]
[-69.79456329 161.27288818]
[-84.14443207 165.64111328]
[-94.94174957 177.98413086]
[-110.97512817 174.53987122]
[-115.75080109 158.85150146]
[-104.35596466 147.05786133]
[-88.51264954 151.29124451]
[-74.16278839 146.92301941]
[-68.58232117 141.87486267]
[-59.29833221 142.64958191]
[-44.81955719 138.72976685]
[-37.16303635 123.84630585]
[-20.81445122 118.92671967]
[-5.63056803 127.44098663]
[8.71929741 123.07276917]
[23.06916428 118.70454407]
[37.41902924 114.33632660]
[49.34176254 99.24787903]
[68.89894867 103.61833191]
[82.94948578 98.36643219]
[92.43153381 86.74357605]
[94.75500488 71.92462158]
[89.24871826 57.09251785]
[98.86405945 45.71735001]
[101.18753052 30.89839554]
[103.51100922 16.07943916]
[96.51608276 5.10547304]
[98.87274170 -7.28285789]
[108.75617981 -14.44774342]
[111.53939056 -29.18727303]
[114.32260895 -43.92679977]
[107.56193542 -52.73015976]
[106.87879181 -63.58668518]
[112.25891113 -72.78498077]
[121.65708160 -77.31826019]
[125.35126495 -91.85624695]
[120.38355255 -107.48487091]
[131.63288879 -119.41735840]
[147.52693176 -115.37859344]
[151.71524048 -99.52330780]
[139.88925171 -88.16206360]
[136.19506836 -73.62407684]
[142.92861938 -55.61096954]
[129.06213379 -41.14358521]
[126.27892303 -26.40405655]
[123.49570465 -11.66452789]
[130.22967529 4.45859766]
[118.32996368 18.40291023]
[116.00649261 33.22186661]
[113.68301392 48.04082489]
[119.35549927 61.81297684]
[109.57396698 74.24809265]
[107.25048828 89.06704712]
[111.06222534 91.06488037]
[114.26429749 94.40756989]
[116.38498688 98.88648224]
[130.26539612 104.57280731]
[139.57376099 104.95620728]
[144.48461914 110.65786743]
[158.18147278 116.77312469]
[171.87831116 122.88837433]
[185.57516479 129.00363159]
[199.27201843 135.11888123]
[213.94102478 129.23706055]
[228.43960571 135.52728271]
[234.16600037 150.25765991]
[227.72285461 164.68891907]
[212.93275452 170.25926208]
[198.57041931 163.66389465]
[193.15676880 148.81573486]
[179.45991516 142.70048523]
[165.76306152 136.58522034]
[152.06620789 130.46997070]
[138.36936951 124.35471344]
[124.57907104 118.45321655]
[110.69866180 112.76688385]
[123.07273865 121.24522400]
[130.33358765 134.37077332]
[130.94058228 149.35848999]
[124.76490784 163.02819824]
[113.11696625 172.47940063]
[98.46826172 175.70671082]
[83.92703247 172.02531433]
[72.57870483 162.21635437]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 36]
[4 35]
[8 33]
[9 32]
[10 31]
[11 30]
[15 27]
[16 26]
[17 24]
[18 23]
[37 69]
[38 68]
[40 66]
[41 65]
[42 64]
[45 62]
[46 61]
[47 60]
[51 58]
[52 57]
[72 92]
[73 91]
[75 90]
[76 89]
[77 88]
[78 87]
[79 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
