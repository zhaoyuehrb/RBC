%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUACUCGUCAUAUAAACCCAAGGCACAGUCACAUACCCAGGGAUACAAGACACUGCAGACUCCCGAGAGACAUAACACAGAAUUGCACCAUGCCAAACUACAAACUCACUUAUUUUAAUAUGAGGGGGAGAGCAGAAAUUAUUCGUUACAUAUUUGCUUAUUUGGACAUACAGUAUGAAGACCACAGAA\
) } def
/len { sequence length } bind def

/coor [
[79.52248383 324.75332642]
[69.99205017 312.94082642]
[65.37607574 298.48202515]
[66.29883575 283.33233643]
[72.63553619 269.54064941]
[83.52919006 258.97216797]
[97.50652313 253.05621338]
[97.01573944 238.06423950]
[88.86615753 225.59693909]
[96.14778137 211.55099487]
[95.65699768 196.55903625]
[95.16621399 181.56706238]
[94.67542267 166.57508850]
[94.18463898 151.58312988]
[93.69385529 136.59115601]
[84.79631042 136.22760010]
[75.78225708 133.63504028]
[67.22014618 128.75473022]
[59.69559097 121.67394257]
[46.82966232 129.38548279]
[33.96373367 137.09703064]
[30.01545334 152.16516113]
[16.85771751 159.80249023]
[2.51688099 155.94554138]
[-10.34904861 163.65708923]
[-8.90825653 178.85205078]
[-14.21104813 193.16438293]
[-25.20454788 203.75238037]
[-39.70598984 208.51377869]
[-54.83610535 206.50320435]
[-67.59078979 198.11984253]
[-75.43760681 185.02822876]
[-76.81855011 169.82771301]
[-71.45943451 155.53636169]
[-60.42432404 144.99174500]
[-45.90424347 140.28749084]
[-30.78216553 142.35763550]
[-18.06058884 150.79115295]
[-5.19466019 143.07962036]
[-1.83595538 128.61398315]
[11.10207272 120.61009979]
[26.25219154 124.23109436]
[39.11812210 116.51955414]
[51.98405075 108.80801392]
[52.96299744 101.37217712]
[37.97497177 101.97143555]
[22.98694611 102.57069397]
[8.72932243 107.23118591]
[-4.49776888 100.15700531]
[-8.53677082 85.71101379]
[-0.89670545 72.80251312]
[13.71056271 69.39257050]
[26.27644920 77.58444977]
[40.59866714 82.04248047]
[54.92089081 86.50050354]
[55.89983749 79.06466675]
[45.46819687 68.28594208]
[35.03655624 57.50722122]
[24.60491753 46.72849655]
[14.17327785 35.94977188]
[3.34688377 32.51422882]
[-0.74136215 23.29564285]
[-13.07538509 14.75914001]
[-25.40940857 6.22263765]
[-41.78902435 5.42248678]
[-49.04420853 -9.28446102]
[-39.71145248 -22.76895905]
[-23.39149284 -21.15931129]
[-16.87290573 -6.11138535]
[-4.53888321 2.42511654]
[7.79514027 10.96161842]
[2.53573179 -3.08610797]
[3.23706818 -18.06970406]
[9.78566837 -31.56473351]
[21.12193108 -41.38762283]
[35.41158295 -45.94897079]
[50.34247208 -44.51071930]
[63.49869156 -37.30559540]
[72.75149536 -25.49942398]
[76.60371399 -11.00251293]
[74.43204498 3.83944917]
[66.58786774 16.62494659]
[54.34042740 25.28521156]
[39.67142487 28.41896057]
[24.95200157 25.51813316]
[35.38364029 36.29685593]
[45.81528091 47.07558060]
[56.24692154 57.85430527]
[66.67855835 68.63302612]
[90.46186829 58.18895721]
[114.35660553 62.65674591]
[130.38179016 78.65457916]
[144.14421082 72.68834686]
[157.90661621 66.72212219]
[171.61976624 60.64350128]
[185.28273010 54.45289612]
[198.94567871 48.26229095]
[212.60864258 42.07168579]
[226.27159119 35.88108063]
[226.29457092 28.52850342]
[228.26200867 21.48030853]
[232.01438904 15.23876667]
[237.26571655 10.24351311]
[243.62522888 6.84060049]
[250.62646484 5.25855350]
[257.76138306 5.59310532]
[264.51736450 7.80160761]
[274.40756226 -3.47598958]
[284.29772949 -14.75358677]
[287.61074829 -23.28371811]
[294.44320679 -26.13309097]
[304.51657104 -37.24735641]
[314.58996582 -48.36162567]
[324.66336060 -59.47589111]
[334.73672485 -70.59015656]
[333.71102905 -86.36112976]
[344.20013428 -98.18289185]
[359.98104858 -99.04180908]
[371.69125366 -88.42829132]
[372.38330078 -72.63916016]
[361.64657593 -61.04182434]
[345.85101318 -60.51677322]
[335.77761841 -49.40250778]
[325.70422363 -38.28823853]
[315.63085938 -27.17397308]
[305.55746460 -16.05970573]
[295.57534790 -4.86339951]
[285.68515015 6.41419792]
[275.79495239 17.69179535]
[277.31329346 20.44738007]
[278.49349976 23.36384773]
[279.31878662 26.39987755]
[294.26861572 27.62569427]
[309.21844482 28.85151100]
[324.16827393 30.07732582]
[339.11810303 31.30314255]
[354.06793213 32.52895737]
[369.01776123 33.75477600]
[375.32635498 19.97154808]
[385.97085571 9.17940140]
[399.66589355 2.68153834]
[414.75769043 1.26260710]
[429.42385864 5.09395075]
[441.89340210 13.71291637]
[450.66052246 26.07872009]
[454.66659546 40.69813538]
[453.42782593 55.80578995]
[447.09384155 69.57736969]
[436.42947388 80.34987640]
[422.72250366 86.82249451]
[407.62811279 88.21360779]
[392.96902466 84.35524750]
[380.51538086 75.71331787]
[371.77105713 63.33137512]
[367.79193115 48.70460510]
[352.84210205 47.47878647]
[337.89227295 46.25297165]
[322.94244385 45.02715683]
[307.99261475 43.80133820]
[293.04278564 42.57552338]
[278.09295654 41.34970474]
[257.90307617 58.38684082]
[232.46220398 49.54403687]
[218.79924011 55.73464203]
[205.13629150 61.92524719]
[191.47332764 68.11585236]
[177.81037903 74.30645752]
[173.00752258 79.93975067]
[163.87284851 80.48453522]
[150.11042786 86.45076752]
[136.34800720 92.41699219]
[136.53456116 106.62614441]
[131.36990356 119.86476898]
[121.61050415 130.19381714]
[108.68582153 136.10037231]
[109.17660522 151.09233093]
[109.66739655 166.08430481]
[110.15818024 181.07627869]
[110.64896393 196.06823730]
[111.13975525 211.06021118]
[119.32444000 224.59983826]
[112.00770569 237.57345581]
[112.49848938 252.56542969]
[126.83281708 257.55456543]
[138.39436340 267.38793945]
[145.61952209 280.73565674]
[147.53114319 295.79254150]
[143.87069702 310.52230835]
[135.13323975 322.93283081]
[122.50043488 331.34573364]
[107.68077087 334.62319946]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 183]
[8 182]
[10 180]
[11 179]
[12 178]
[13 177]
[14 176]
[15 175]
[19 44]
[20 43]
[21 42]
[24 39]
[25 38]
[56 89]
[57 88]
[58 87]
[59 86]
[60 85]
[62 71]
[63 70]
[64 69]
[92 171]
[93 170]
[94 169]
[95 167]
[96 166]
[97 165]
[98 164]
[99 163]
[107 129]
[108 128]
[109 127]
[111 126]
[112 125]
[113 124]
[114 123]
[115 122]
[132 161]
[133 160]
[134 159]
[135 158]
[136 157]
[137 156]
[138 155]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
