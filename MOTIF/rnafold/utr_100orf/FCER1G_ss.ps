%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:25:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAACGGCCGAUCUCCAGCCCAAGAUGAUUCCAGCAGUGGUCUUGCUCUUACUCCUUUUGGUUGAACAAGCAGCGGCCCUGGGAGAGCCUCAGCUCUGCUAUAUCCUGGAUGCCAUCCUGUUUC\
) } def
/len { sequence length } bind def

/coor [
[68.09030914 332.73193359]
[57.35579300 343.20904541]
[43.02651215 347.64434814]
[28.25020981 345.06347656]
[16.27281761 336.03341675]
[9.72543144 322.53778076]
[10.04652500 307.54046631]
[0.40471122 319.03112793]
[-9.23710251 330.52178955]
[-4.55831528 345.22256470]
[-8.59216213 360.11322021]
[-20.05145836 370.44223022]
[-35.27958298 372.91360474]
[-49.41730118 366.73876953]
[-57.95331192 353.88809204]
[-58.16380692 338.46215820]
[-49.98162079 325.38333130]
[-36.01765823 318.82504272]
[-20.72776985 320.88000488]
[-11.08595562 309.38931274]
[-1.44414127 297.89865112]
[6.53633976 285.19778442]
[12.70564651 271.52520752]
[10.88761425 256.74197388]
[23.61604118 247.34529114]
[29.78534889 233.67269897]
[35.95465469 220.00010681]
[42.12396240 206.32751465]
[35.49820709 190.92395020]
[42.14482880 175.16372681]
[58.42796326 168.91558838]
[64.25448608 155.09344482]
[70.08100891 141.27130127]
[75.90753174 127.44915771]
[81.73405457 113.62701416]
[84.74486542 85.20038605]
[81.77266693 70.49779510]
[78.80047607 55.79520798]
[73.98392487 47.90176010]
[75.94227600 40.68924332]
[73.33755493 25.91712570]
[70.73282623 11.14500999]
[68.12810516 -3.62710619]
[65.33943176 -18.36560249]
[62.36724091 -33.06819153]
[59.39505005 -47.77077866]
[56.42285538 -62.47336578]
[53.45066452 -77.17594910]
[37.70048904 -80.14046478]
[24.31353188 -88.88214111]
[15.30909538 -102.04729462]
[12.03197765 -117.61773682]
[14.95169830 -133.22009277]
[23.59548187 -146.48756409]
[36.62452698 -155.41899109]
[33.28671265 -170.04290771]
[21.74188995 -181.68975830]
[26.31640625 -197.43795776]
[42.30439377 -201.08711243]
[53.25877762 -188.88328552]
[47.91062927 -173.38072205]
[51.24844360 -158.75680542]
[65.21737671 -156.91899109]
[77.73831177 -150.39366150]
[87.28684235 -139.95208740]
[92.69253540 -126.84375763]
[93.28237915 -112.64683533]
[88.96449280 -99.07817078]
[80.24173737 -87.78565979]
[68.15325165 -80.14814758]
[71.12544250 -65.44555664]
[74.09763336 -50.74296951]
[77.06983185 -36.04038239]
[80.04202271 -21.33779526]
[84.50003052 -15.33931637]
[82.90022278 -6.23182869]
[85.50494385 8.54028702]
[88.10967255 23.31240463]
[90.71439362 38.08451843]
[93.50306702 52.82301712]
[96.47525787 67.52560425]
[99.44744873 82.22819519]
[111.62651825 90.98434448]
[126.51010895 89.11919403]
[141.36929321 87.06863403]
[156.20175171 84.83300018]
[171.03421021 82.59736633]
[185.86666870 80.36173248]
[200.69914246 78.12609863]
[213.17616272 67.48393250]
[228.53848267 73.22251892]
[230.98263550 89.43849945]
[217.99430847 99.45026398]
[202.93476868 92.95856476]
[188.10231018 95.19419861]
[173.26985168 97.42983246]
[158.43737793 99.66546631]
[143.60491943 101.90110016]
[137.39169312 106.05456543]
[128.37525940 104.00277710]
[113.49167633 105.86793518]
[127.20645142 111.94287109]
[131.97157288 126.16587067]
[124.68467712 139.27697754]
[110.08993530 142.74015808]
[97.68932343 134.30067444]
[95.55619049 119.45353699]
[89.72967529 133.27568054]
[83.90315247 147.09782410]
[78.07662964 160.91996765]
[72.25010681 174.74211121]
[78.74954224 186.61405945]
[77.21161652 199.86445618]
[68.42664337 209.64152527]
[55.79655075 212.49682617]
[49.62724304 226.16941833]
[43.45793533 239.84201050]
[37.28863144 253.51458740]
[38.66539001 269.27578735]
[26.37823486 277.69451904]
[20.20892715 291.36709595]
[33.58097076 284.57089233]
[48.58090973 284.61398315]
[61.91368103 291.48693848]
[70.65045166 303.67990112]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 21]
[8 20]
[9 19]
[22 121]
[23 120]
[25 118]
[26 117]
[27 116]
[28 115]
[31 111]
[32 110]
[33 109]
[34 108]
[35 107]
[36 82]
[37 81]
[38 80]
[40 79]
[41 78]
[42 77]
[43 76]
[44 74]
[45 73]
[46 72]
[47 71]
[48 70]
[55 62]
[56 61]
[83 101]
[84 100]
[85 98]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
