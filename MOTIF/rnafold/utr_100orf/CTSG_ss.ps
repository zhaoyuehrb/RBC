%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:51:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACAGCAGCAACUGACUGGGCAGCCUUUCAGGAAAGAUGCAGCCACUCCUGCUUCUGCUGGCCUUUCUCCUACCCACUGGGGCUGAGGCAGGGGAGAUCAUCGGAGGCCGGGAGAGCAGGCCCCACUCCCGCCCCU\
) } def
/len { sequence length } bind def

/coor [
[99.55056763 115.52519989]
[94.18669891 113.51351166]
[90.19627380 109.83969879]
[88.01354980 105.20849609]
[73.07569122 106.57251740]
[58.13784027 107.93653870]
[43.19998932 109.30056763]
[28.26213646 110.66458893]
[13.32428265 112.02861023]
[8.60873985 127.79531097]
[-4.79708385 139.59640503]
[-23.80029869 142.76550293]
[-42.92169952 134.90757751]
[-55.73799133 142.70132446]
[-68.55428314 150.49508667]
[-81.37057495 158.28884888]
[-85.22229767 173.38195801]
[-98.33086395 181.10336304]
[-112.69609833 177.33831787]
[-125.51239014 185.13208008]
[-132.90763855 199.76910400]
[-149.29414368 200.41285706]
[-157.81488037 186.40110779]
[-149.70443726 172.14793396]
[-133.30615234 172.31579590]
[-120.48986053 164.52203369]
[-117.22383881 150.03518677]
[-104.33732605 141.94863892]
[-89.16432953 145.47254944]
[-76.34803772 137.67880249]
[-63.53174973 129.88504028]
[-50.71545792 122.09127808]
[-50.71545792 114.59127808]
[-65.69934082 115.28649139]
[-80.14017487 119.34385681]
[-88.79344940 107.09146881]
[-80.14053345 94.83882904]
[-65.69934082 98.89607239]
[-50.71545792 99.59127808]
[-50.71545792 92.09127808]
[-63.53174973 84.29752350]
[-76.34803772 76.50376129]
[-89.16432953 68.70999908]
[-104.45798492 72.69493103]
[-118.04753876 64.62650299]
[-121.87055206 49.29156876]
[-113.65889740 35.78807831]
[-98.28440857 32.12741089]
[-84.86849213 40.48137283]
[-81.37057495 55.89371109]
[-68.55428314 63.68746948]
[-55.73799133 71.48123169]
[-42.92169952 79.27498627]
[-19.31469345 71.49483490]
[1.79713762 79.50595093]
[11.96026039 97.09075928]
[26.89811325 95.72673798]
[41.83596420 94.36270905]
[56.77381897 92.99868774]
[71.71166992 91.63466644]
[86.64952087 90.27064514]
[98.39218903 80.93737793]
[103.09234619 66.69277954]
[107.79250336 52.44818497]
[112.49266815 38.20359039]
[117.19282532 23.95899582]
[113.00217438 6.06900024]
[126.45219421 -5.14595318]
[130.82687378 -19.49384880]
[135.20156860 -33.84174347]
[139.57626343 -48.18964005]
[130.12130737 -60.49344254]
[129.73774719 -76.00577545]
[138.57305908 -88.76183319]
[153.22988892 -93.85664368]
[168.07238770 -89.33114624]
[177.39329529 -76.92549896]
[177.60855103 -61.40991592]
[168.63539124 -48.75046158]
[153.92414856 -43.81494904]
[149.54946899 -29.46705437]
[145.17477417 -15.11915874]
[140.80007935 -0.77126390]
[146.21900940 10.10383320]
[142.62678528 22.13122177]
[131.43742371 28.65915489]
[126.73725891 42.90375137]
[122.03710175 57.14834595]
[117.33694458 71.39294434]
[112.63677979 85.63753510]
[118.29807281 99.52817535]
[131.61634827 106.42915344]
[144.93463135 113.33012390]
[158.25289917 120.23110199]
[171.57118225 127.13208008]
[181.92535400 117.16504669]
[194.83773804 110.90380859]
[209.03303528 108.95195007]
[223.11380005 111.48817444]
[235.69801331 118.25003052]
[245.55477905 128.56098938]
[251.72462463 141.39808655]
[253.61296082 155.49349976]
[251.04733276 169.45960999]
[264.20507812 176.66197205]
[273.32113647 178.05973816]
[277.57763672 184.18098450]
[290.56799316 191.68098450]
[303.55838013 199.18098450]
[316.54876709 206.68098450]
[330.21374512 199.52050781]
[345.57864380 200.90734863]
[357.74060059 210.39894104]
[362.81875610 224.96655273]
[359.19271851 239.96174622]
[348.01953125 250.59956360]
[332.86453247 253.48554993]
[318.56356812 247.69877625]
[309.68011475 235.08580017]
[309.04876709 219.67135620]
[296.05838013 212.17135620]
[283.06799316 204.67135620]
[270.07763672 197.17135620]
[257.00271606 189.81970215]
[243.84497070 182.61735535]
[232.18447876 193.13774109]
[217.60745239 199.05358887]
[201.85975647 199.63661194]
[186.83425903 194.79846191]
[174.34320068 185.10348511]
[165.89974976 171.70297241]
[162.53459167 156.19845581]
[164.67021179 140.45036316]
[151.35192871 133.54937744]
[138.03364563 126.64840698]
[124.71537018 119.74742889]
[111.39709473 112.84645081]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 61]
[5 60]
[6 59]
[7 58]
[8 57]
[9 56]
[13 32]
[14 31]
[15 30]
[16 29]
[19 26]
[20 25]
[40 53]
[41 52]
[42 51]
[43 50]
[62 90]
[63 89]
[64 88]
[65 87]
[66 86]
[68 83]
[69 82]
[70 81]
[71 80]
[91 137]
[92 136]
[93 135]
[94 134]
[95 133]
[104 125]
[105 124]
[107 123]
[108 122]
[109 121]
[110 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
