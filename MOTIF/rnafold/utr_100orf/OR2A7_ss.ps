%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGGGACAAUAUAACAUCCAUCACAGAGUUCCUCCUACUGGGAUUUCCCGUUGGCCCAAGGAUUCAGAUGCUCCUCUUUGGGCUCUUCUCCCUGUUCU\
) } def
/len { sequence length } bind def

/coor [
[85.10455322 212.18331909]
[89.79851532 197.48739624]
[101.70708466 187.67977905]
[99.84560394 172.79573059]
[97.98412323 157.91168213]
[96.12264252 143.02763367]
[94.26116180 128.14358521]
[92.39968109 113.25952911]
[93.67082214 128.20556641]
[90.58354187 142.88442993]
[83.39945984 156.05215454]
[72.72737885 166.59286499]
[59.47169495 173.61332703]
[44.75573349 176.51856995]
[29.82658005 175.06242371]
[15.94938278 169.36827087]
[4.30014133 159.91867065]
[-4.13394547 147.51438904]
[-8.63814449 133.20661926]
[-8.83075333 118.20785522]
[-4.69545031 103.78913879]
[3.41732454 91.17237091]
[14.82006645 81.42673492]
[28.54646873 75.37810516]
[43.43330765 73.53907013]
[58.21901703 76.06547546]
[71.65061188 82.74321747]
[82.59227753 93.00946808]
[72.06847382 82.32070923]
[61.54467392 71.63195038]
[51.02087021 60.94319153]
[40.49707031 50.25443268]
[29.97326660 39.56567383]
[19.44946289 28.87691498]
[3.87666941 30.29891777]
[-8.93726826 21.33582687]
[-12.94200039 6.21973848]
[-6.24661446 -7.91199255]
[7.98753262 -14.38679504]
[23.03951263 -10.14746475]
[31.80224037 2.80431628]
[30.13822365 18.35311317]
[40.66202545 29.04187202]
[51.18582916 39.73063278]
[61.70963287 50.41939163]
[72.23343658 61.10815048]
[82.75723267 71.79691315]
[93.28103638 82.48567200]
[87.42753601 68.67492676]
[92.34615326 54.50428391]
[105.49739075 47.29006577]
[120.09123993 50.75699234]
[128.59286499 63.11508179]
[126.61285400 77.98382568]
[115.17155457 87.68713379]
[129.37863159 82.87474823]
[143.58570862 78.06236267]
[157.79277039 73.24997711]
[171.99984741 68.43759155]
[186.20692444 63.62520218]
[200.41400146 58.81281662]
[214.62106323 54.00043106]
[228.82814026 49.18804550]
[243.03521729 44.37565613]
[244.84455872 29.22016144]
[253.05766296 16.35519028]
[266.04385376 8.33509350]
[281.22467041 6.75226784]
[295.58596802 11.92098331]
[306.27630615 22.81498909]
[311.17312622 37.27127075]
[309.30410767 52.41952515]
[301.04040527 65.25205231]
[288.02273560 73.22094727]
[272.83581543 74.74398041]
[258.49496460 69.51875305]
[247.84761047 58.58272934]
[233.64053345 63.39511871]
[219.43345642 68.20750427]
[205.22637939 73.01988983]
[191.01930237 77.83227539]
[176.81224060 82.64466095]
[162.60516357 87.45704651]
[148.39808655 92.26943970]
[134.19100952 97.08182526]
[119.98394012 101.89421082]
[116.49930573 106.91867065]
[112.01872253 110.11531067]
[107.28372955 111.39804840]
[109.14521027 126.28209686]
[111.00669098 141.16615295]
[112.86817169 156.05020142]
[114.72965240 170.93424988]
[116.59113312 185.81828308]
[130.54832458 192.39100647]
[138.71699524 205.47825623]
[138.49057007 220.90396118]
[129.94129944 233.74581909]
[115.79721832 239.90605164]
[100.57165527 237.41894531]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 94]
[4 93]
[5 92]
[6 91]
[7 90]
[8 89]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[55 86]
[56 85]
[57 84]
[58 83]
[59 82]
[60 81]
[61 80]
[62 79]
[63 78]
[64 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
