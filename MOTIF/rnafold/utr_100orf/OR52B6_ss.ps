%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCACAGGUGAGGGCGCUGCAUAAAAUCAUGGCCCUUUUUUCUGCUAACAGCAUAGGUGCUAUGAACAACUCUGACACUCGCAUAGCAGGCUGCUUCC\
) } def
/len { sequence length } bind def

/coor [
[177.52502441 118.15267181]
[172.07812500 108.62198639]
[157.07994080 108.38871002]
[142.08175659 108.15543365]
[127.08357239 107.92215729]
[112.08538818 107.68888092]
[99.77723694 114.32221222]
[87.68133545 107.30930328]
[72.68315125 107.07602692]
[57.68496704 106.84275055]
[43.76613235 114.36450195]
[31.16073036 106.43019867]
[16.16254425 106.19692230]
[1.16435802 105.96364594]
[-13.83382797 105.73036957]
[-28.83201408 105.49709320]
[-43.83020020 105.26381683]
[-55.13140869 115.98390961]
[-70.33837891 115.53368378]
[-80.48870850 104.69364166]
[-95.48689270 104.46036530]
[-104.69367218 116.95095062]
[-119.49404907 121.61233521]
[-134.19697571 116.65212250]
[-143.14886475 103.97761536]
[-142.90754700 88.46241760]
[-133.56581116 76.07244110]
[-118.71573639 71.57188416]
[-104.06748962 76.69129944]
[-95.25361633 89.46218109]
[-80.25542450 89.69545746]
[-69.77288818 79.17633057]
[-54.55927277 79.19925690]
[-43.59692383 90.26563263]
[-28.59873581 90.49890900]
[-13.60055065 90.73218536]
[1.39763522 90.96546173]
[16.39582062 91.19873810]
[31.39400673 91.43201447]
[44.24007034 83.89358521]
[57.91824341 91.84456635]
[72.91642761 92.07784271]
[87.91461182 92.31111908]
[100.22276306 85.67778778]
[112.31866455 92.69069672]
[127.31684875 92.92397308]
[142.31503296 93.15724945]
[157.31321716 93.39052582]
[172.31140137 93.62380219]
[185.71865845 78.88973236]
[205.33770752 78.48448181]
[218.92317200 92.22887421]
[233.87783813 91.06362152]
[248.83250427 89.89836121]
[263.78717041 88.73310089]
[270.16598511 76.40160370]
[281.73864746 68.93048859]
[295.38534546 68.20513916]
[307.49044800 74.30943298]
[314.90054321 85.53205109]
[329.88421631 84.83245087]
[344.86788940 84.13284302]
[359.85156250 83.43323517]
[374.83523560 82.73362732]
[389.81890869 82.03402710]
[404.80258179 81.33441925]
[409.02551270 66.79324341]
[417.74316406 54.41256714]
[430.00991821 45.53535080]
[444.49520874 41.12452316]
[459.62774658 41.65854263]
[473.76605225 47.07948303]
[485.37655640 56.79932022]
[493.19979858 69.76371765]
[496.38717651 84.56639862]
[494.59295654 99.60166931]
[488.01177979 113.23863220]
[477.35748291 123.99803162]
[463.78579712 130.71278381]
[448.76885986 132.65452576]
[433.93560791 129.61260986]
[420.89501953 121.91702271]
[411.06167603 110.40251923]
[405.50219727 96.31809235]
[390.51852417 97.01770020]
[375.53485107 97.71730804]
[360.55117798 98.41691589]
[345.56747437 99.11651611]
[330.58380127 99.81612396]
[315.60012817 100.51573181]
[307.10006714 114.46394348]
[291.83251953 120.71898651]
[275.66921997 116.66377258]
[264.95242310 103.68777466]
[249.99777222 104.85302734]
[235.04309082 106.01828766]
[220.08842468 107.18354797]
[215.61337280 116.75801086]
[207.44378662 123.59092712]
[197.07098389 126.34479523]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 49]
[3 48]
[4 47]
[5 46]
[6 45]
[8 43]
[9 42]
[10 41]
[12 39]
[13 38]
[14 37]
[15 36]
[16 35]
[17 34]
[20 31]
[21 30]
[52 97]
[53 96]
[54 95]
[55 94]
[60 90]
[61 89]
[62 88]
[63 87]
[64 86]
[65 85]
[66 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
