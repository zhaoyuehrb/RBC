%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:37:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGAUUGGGCAAUGAGAGUUCCCUAAUGGAUUUCAUCCUUCUAGGCUUCUCAGACCACCCUCGUCUGGAGGCUGUUCUCUUUGUAUUUGUCCUUUUCU\
) } def
/len { sequence length } bind def

/coor [
[105.50685883 381.60427856]
[109.00440979 366.48651123]
[120.74202728 356.33721924]
[119.34434509 341.40249634]
[117.94665527 326.46774292]
[116.54896545 311.53302002]
[115.15127563 296.59826660]
[100.82179260 288.75799561]
[93.86147308 273.79879761]
[97.15840912 257.46395874]
[109.62045288 246.15362549]
[107.75897217 231.26957703]
[105.89749146 216.38552856]
[104.03601074 201.50148010]
[94.77908325 189.83277893]
[100.74398804 175.17909241]
[98.88250732 160.29505920]
[97.02102661 145.41101074]
[95.15954590 130.52696228]
[93.29806519 115.64290619]
[91.14595032 130.48771667]
[81.60766602 142.06446838]
[67.44870758 147.01663208]
[52.77428055 143.90840149]
[41.83903885 133.64094543]
[37.81350708 119.19120789]
[41.86484146 104.74867249]
[52.81840515 94.50077820]
[67.49835968 91.41875458]
[81.64644623 96.39479828]
[69.32211304 87.84431458]
[56.99777985 79.29383087]
[44.67344284 70.74333954]
[28.21305084 66.68233490]
[27.55866241 49.74102020]
[43.65674973 44.42238617]
[53.22392654 58.41901016]
[65.54826355 66.96949005]
[77.87259674 75.51997375]
[90.19692993 84.07045746]
[80.80435181 72.37518311]
[83.10393524 57.55250168]
[95.59851837 49.25278854]
[110.15345764 52.87960815]
[117.29268646 66.07170868]
[112.36847687 80.23998260]
[121.10958862 68.05010986]
[129.85070801 55.86024475]
[138.59182739 43.67037582]
[147.33293152 31.48050499]
[156.07405090 19.29063606]
[158.59893799 10.32305241]
[165.28143311 6.86330748]
[174.39741516 -5.04881716]
[183.51341248 -16.96094131]
[192.62940979 -28.87306595]
[201.74539185 -40.78519058]
[198.16465759 -56.00728989]
[205.25234985 -69.94639587]
[219.66188049 -76.02088928]
[234.58950806 -71.36257935]
[242.98686218 -58.17097473]
[240.88897705 -42.67475510]
[229.28640747 -32.19075394]
[213.65751648 -31.66920090]
[204.54153442 -19.75707626]
[195.42553711 -7.84495163]
[186.30953979 4.06717300]
[177.19355774 15.97929764]
[168.26391602 28.03175163]
[159.52281189 40.22162247]
[150.78169250 52.41149139]
[142.04057312 64.60135651]
[133.29945374 76.79122925]
[124.55834198 88.98109436]
[120.47064209 106.48132324]
[108.18211365 113.78142548]
[110.04359436 128.66548157]
[111.90507507 143.54951477]
[113.76655579 158.43356323]
[115.62803650 173.31761169]
[125.01811218 186.05091858]
[118.92005920 199.63999939]
[120.78153992 214.52404785]
[122.64302063 229.40809631]
[124.50450134 244.29214478]
[137.12008667 250.08885193]
[145.12283325 261.30047607]
[146.48387146 274.89849854]
[140.95080566 287.27511597]
[130.08601379 295.20056152]
[131.48370361 310.13531494]
[132.88139343 325.07006836]
[134.27908325 340.00479126]
[135.67677307 354.93954468]
[149.09375000 362.73468018]
[155.33563232 376.94097900]
[152.00228882 392.09579468]
[140.37545776 402.37179565]
[124.92588806 403.81765747]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 95]
[4 94]
[5 93]
[6 92]
[7 91]
[11 86]
[12 85]
[13 84]
[14 83]
[16 81]
[17 80]
[18 79]
[19 78]
[20 77]
[30 40]
[31 39]
[32 38]
[33 37]
[46 75]
[47 74]
[48 73]
[49 72]
[50 71]
[51 70]
[53 69]
[54 68]
[55 67]
[56 66]
[57 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
