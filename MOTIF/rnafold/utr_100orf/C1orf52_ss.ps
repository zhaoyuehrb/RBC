%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:33:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUUCCGGCGGAGUGCUGGGUUGUCGCUCGCAGCCGUCAUGGCAGCGGAGGAGAAGGACCCUCUGAGCUAUUUUGCGGCAUACGGGAGCAGCAGCUCAGGCUCCUCGGACGAGGAGGAUAACAUCGAGCCGGAGGAGA\
) } def
/len { sequence length } bind def

/coor [
[85.96051025 322.04556274]
[85.77295685 306.24240112]
[96.87449646 294.99377441]
[96.53792572 279.99755859]
[96.20135498 265.00134277]
[95.86478424 250.00511169]
[95.52821350 235.00888062]
[95.19164276 220.01266479]
[94.85507202 205.01643372]
[94.51850128 190.02021790]
[82.19038391 181.70423889]
[77.06232452 167.55619812]
[81.29797363 152.93043518]
[93.47428131 143.49414062]
[93.13771057 128.49792480]
[92.80113983 113.50169373]
[88.81058502 99.04225159]
[81.40796661 85.99613953]
[74.00534058 72.95001984]
[66.60271454 59.90390396]
[59.20009232 46.85778427]
[51.79747009 33.81166840]
[44.39484787 20.76555252]
[36.99222565 7.71943521]
[29.58960152 -5.32668209]
[16.04965401 -13.51083851]
[16.49808884 -28.39869118]
[9.09546566 -41.44480896]
[1.69284236 -54.49092484]
[-5.70978069 -67.53704071]
[-24.71922112 -68.79925537]
[-39.07946014 -81.09149170]
[-43.19366837 -99.38893127]
[-35.59865189 -116.37393951]
[-43.86210632 -128.89253235]
[-52.12556076 -141.41113281]
[-60.38901901 -153.92973328]
[-68.65247345 -166.44833374]
[-87.05398560 -174.54481506]
[-87.57386780 -193.82566833]
[-96.39064789 -205.96092224]
[-105.20742798 -218.09617615]
[-114.02420807 -230.23143005]
[-122.84098816 -242.36668396]
[-135.48512268 -245.17404175]
[-142.57144165 -255.53210449]
[-140.72724915 -267.53948975]
[-149.26951599 -279.86953735]
[-157.81178284 -292.19955444]
[-166.35404968 -304.52960205]
[-174.89631653 -316.85961914]
[-183.43858337 -329.18966675]
[-198.95419312 -329.40319824]
[-211.36088562 -338.72271729]
[-215.88803101 -353.56469727]
[-210.79484558 -368.22210693]
[-198.03977966 -377.05883789]
[-182.52740479 -376.67700195]
[-170.22254944 -367.22341919]
[-165.85667419 -352.33319092]
[-171.10855103 -337.73193359]
[-162.56628418 -325.40188599]
[-154.02401733 -313.07186890]
[-145.48175049 -300.74182129]
[-136.93948364 -288.41180420]
[-128.39721680 -276.08175659]
[-112.16675568 -269.50119019]
[-110.70573425 -251.18345642]
[-101.88895416 -239.04820251]
[-93.07217407 -226.91294861]
[-84.25539398 -214.77769470]
[-75.43861389 -202.64244080]
[-65.14376068 -201.93740845]
[-56.78890228 -195.51252747]
[-53.32143784 -185.32632446]
[-56.13387299 -174.71179199]
[-47.87041855 -162.19319153]
[-39.60696411 -149.67459106]
[-31.34350967 -137.15599060]
[-23.08005524 -124.63739014]
[-11.90310764 -126.25939941]
[-0.88749295 -123.54286957]
[8.33733654 -116.84963226]
[14.39180660 -107.13268280]
[16.35247993 -95.80062103]
[13.89271450 -84.51349640]
[7.33633614 -74.93966675]
[14.73895931 -61.89354706]
[22.14158249 -48.84743118]
[29.54420662 -35.80131531]
[42.55466843 -28.55030441]
[42.63571930 -12.72930527]
[50.03834152 0.31681186]
[57.44096375 13.36292839]
[64.84358978 26.40904617]
[72.24620819 39.45516205]
[79.64883423 52.50128174]
[87.05146027 65.54739380]
[94.45407867 78.59351349]
[101.85670471 91.63963318]
[114.01103210 80.35522461]
[133.83554077 79.24372864]
[148.53067017 82.25257111]
[163.22581482 85.26140594]
[177.92094421 88.27024841]
[192.61607361 91.27909088]
[207.31120300 94.28793335]
[222.68984985 88.59328461]
[235.13641357 99.27108002]
[231.84690857 115.33692169]
[216.20532227 120.26364899]
[204.30235291 108.98306274]
[189.60722351 105.97422028]
[174.91209412 102.96537781]
[160.21696472 99.95654297]
[145.52183533 96.94770050]
[130.82670593 93.93885803]
[125.06936646 98.74542236]
[137.77021790 106.72592926]
[134.10507202 121.27125549]
[119.13903809 122.28022003]
[113.55469513 108.35855865]
[107.79736328 113.16512299]
[108.13393402 128.16134644]
[108.47050476 143.15757751]
[121.05791473 152.03807068]
[125.94547272 166.45907593]
[121.45732880 180.82293701]
[109.51472473 189.68363953]
[109.85129547 204.67987061]
[110.18786621 219.67608643]
[110.52443695 234.67231750]
[110.86100769 249.66853333]
[111.19757843 264.66476440]
[111.53414917 279.66098022]
[111.87071991 294.65719604]
[123.46574402 305.39642334]
[123.98739624 321.19210815]
[113.12618256 332.67294312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 136]
[4 135]
[5 134]
[6 133]
[7 132]
[8 131]
[9 130]
[10 129]
[14 125]
[15 124]
[16 123]
[17 100]
[18 99]
[19 98]
[20 97]
[21 96]
[22 95]
[23 94]
[24 93]
[25 92]
[27 90]
[28 89]
[29 88]
[30 87]
[34 80]
[35 79]
[36 78]
[37 77]
[38 76]
[40 72]
[41 71]
[42 70]
[43 69]
[44 68]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[102 117]
[103 116]
[104 115]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
