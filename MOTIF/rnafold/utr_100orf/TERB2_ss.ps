%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:27:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGGCUUGGCGACGCCAUGUUUCAAGGGCAGCGCGGUUGGUUUUGCGGCAGCGUUAGCCAGGAUCUGAGGCAAUUCUGGGUGGCUGAAGGGGGAACGAUCAGUGACCCGCGAGCCG\
) } def
/len { sequence length } bind def

/coor [
[153.53044128 132.57516479]
[148.86950684 122.56918335]
[134.50816345 118.23880005]
[120.14684296 113.90842438]
[105.78550720 109.57804108]
[91.36780548 105.43921661]
[76.89628601 101.49267578]
[62.42477036 97.54614258]
[47.95325470 93.59960175]
[33.48173523 89.65306091]
[19.01021767 85.70652771]
[4.48744774 81.95297241]
[-10.08400059 78.39307404]
[-24.65544891 74.83317566]
[-39.22689819 71.27326965]
[-53.79834747 67.71337128]
[-60.44451523 69.24372864]
[-65.98460388 67.37860870]
[-69.04034424 63.55671692]
[-83.40167236 59.22633743]
[-97.76300049 54.89595795]
[-112.12433624 50.56557846]
[-127.57061768 53.98944092]
[-137.52229309 42.90731812]
[-151.88362122 38.57693863]
[-166.24494934 34.24655914]
[-180.60629272 29.91617966]
[-194.96762085 25.58580208]
[-210.41389465 29.00966454]
[-220.36557007 17.92754173]
[-234.72691345 13.59716225]
[-249.08824158 9.26678371]
[-263.44955444 4.93640423]
[-280.35983276 6.15267277]
[-286.20980835 -9.76003456]
[-272.53839111 -19.78645515]
[-259.11920166 -9.42492676]
[-244.75785828 -5.09454727]
[-230.39653015 -0.76416796]
[-216.03520203 3.56621122]
[-201.61613464 -0.16738969]
[-190.63723755 11.22447109]
[-176.27590942 15.55484962]
[-161.91458130 19.88522911]
[-147.55325317 24.21560860]
[-133.19190979 28.54598808]
[-118.77285004 24.81238747]
[-107.79395294 36.20424652]
[-93.43262482 40.53462601]
[-79.07129669 44.86500549]
[-64.70996094 49.19538498]
[-50.23844528 53.14192200]
[-35.66699600 56.70182419]
[-21.09554863 60.26172256]
[-6.52410030 63.82162476]
[8.04734802 67.38152313]
[15.38563156 65.89318848]
[22.95675659 71.23500824]
[37.42827225 75.18154907]
[51.89979172 79.12808228]
[66.37130737 83.07462311]
[80.84282684 87.02116394]
[95.31434631 90.96769714]
[103.41385651 89.87760925]
[110.11589050 95.21671295]
[124.47721863 99.54708862]
[138.83854675 103.87747192]
[153.19987488 108.20784760]
[172.47860718 102.61671448]
[185.28407288 117.00363922]
[199.85552979 120.56353760]
[214.42697144 124.12344360]
[219.68252563 122.57276154]
[224.49484253 123.21666718]
[228.07676697 125.49044037]
[229.99592590 128.59275818]
[244.23689270 133.30390930]
[258.53930664 137.82507324]
[272.90063477 142.15544128]
[287.26196289 146.48582458]
[301.62329102 150.81620789]
[315.98461914 155.14659119]
[331.43090820 151.72271729]
[341.38259888 162.80484009]
[355.74392700 167.13522339]
[370.10525513 171.46560669]
[384.46658325 175.79597473]
[398.82791138 180.12635803]
[409.50473022 169.15986633]
[424.05856323 164.42230225]
[439.14505005 167.00234985]
[451.29742432 176.30709839]
[457.72314453 190.19842529]
[456.94564819 205.48416138]
[449.14358521 218.65179443]
[436.10983276 226.67547607]
[420.83941650 227.71144104]
[406.84140015 221.52160645]
[397.33239746 209.52836609]
[394.49752808 194.48768616]
[380.13619995 190.15731812]
[365.77487183 185.82693481]
[351.41354370 181.49655151]
[337.05221558 177.16616821]
[322.63314819 180.89978027]
[311.65423584 169.50791931]
[297.29290771 165.17753601]
[282.93157959 160.84715271]
[268.57025146 156.51678467]
[254.20892334 152.18640137]
[246.80183411 153.28205872]
[239.52574158 147.54486084]
[225.28477478 142.83370972]
[210.86708069 138.69488525]
[196.29562378 135.13499451]
[181.72418213 131.57508850]
[173.36396790 137.71849060]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 68]
[3 67]
[4 66]
[5 65]
[6 63]
[7 62]
[8 61]
[9 60]
[10 59]
[11 58]
[12 56]
[13 55]
[14 54]
[15 53]
[16 52]
[19 51]
[20 50]
[21 49]
[22 48]
[24 46]
[25 45]
[26 44]
[27 43]
[28 42]
[30 40]
[31 39]
[32 38]
[33 37]
[70 116]
[71 115]
[72 114]
[76 113]
[77 112]
[78 110]
[79 109]
[80 108]
[81 107]
[82 106]
[84 104]
[85 103]
[86 102]
[87 101]
[88 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
