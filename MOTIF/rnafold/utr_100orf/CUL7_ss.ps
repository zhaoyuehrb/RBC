%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:37:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGGUGCUGCGUCGCCAAGGUGGCAUCCUCGGCUCCGCCCCGGCGCUCUCCCAGGGCCCCUAGCUUUCCGCUGGGUCGGGCGGAAAUGAGCCGUGGCUUUUGGCUGGCGGAGCCGCUGGCAGGGACCGGGCCCCACCCUGCCCCAGUGGCUGCCGACUCACGCGGGUGCAGCUCUGUUCCGCGGA\
) } def
/len { sequence length } bind def

/coor [
[78.67498016 279.72537231]
[90.08048248 269.02731323]
[89.07859039 254.06080627]
[88.07670593 239.09429932]
[86.82486725 224.14663696]
[85.32343292 209.22196960]
[76.35104370 197.33308411]
[82.66814423 182.82774353]
[81.16670990 167.90307617]
[79.66527557 152.97840881]
[78.16384125 138.05374146]
[76.66240692 123.12907410]
[68.27682495 110.69195557]
[55.00395203 103.70404053]
[41.73108292 96.71612549]
[28.40029335 89.83935547]
[15.01251030 83.07420349]
[1.62472749 76.30905151]
[-11.76305485 69.54389954]
[-25.15083694 62.77874756]
[-38.53862000 56.01359558]
[-51.98246002 49.36053848]
[-65.48141479 42.82003784]
[-81.27433777 43.76573563]
[-89.35427094 31.25318718]
[-102.85323334 24.71268845]
[-114.99555206 30.56928062]
[-128.10160828 28.38871956]
[-137.41630554 19.18958664]
[-139.69146729 6.49506283]
[-153.07923889 -0.27008903]
[-166.46702576 -7.03524065]
[-179.85481262 -13.80039215]
[-194.70487976 -9.09795094]
[-208.18562317 -16.14949036]
[-212.57717896 -30.33574867]
[-225.96495056 -37.10090256]
[-239.35273743 -43.86605453]
[-252.74052429 -50.63120651]
[-266.12829590 -57.39635468]
[-279.51608276 -64.16150665]
[-292.90386963 -70.92665863]
[-312.40347290 -61.93090820]
[-333.96496582 -75.18194580]
[-348.75601196 -77.67688751]
[-363.54705811 -80.17182159]
[-378.44195557 -74.83767700]
[-389.70498657 -84.58411407]
[-404.49603271 -87.07905579]
[-418.34988403 -78.98889160]
[-433.26016235 -84.91027832]
[-437.78900146 -100.30083466]
[-428.46228027 -113.35424042]
[-412.43463135 -114.05704498]
[-402.00109863 -101.87010956]
[-387.21005249 -99.37517548]
[-373.37310791 -104.88777161]
[-361.05212402 -94.96287537]
[-346.26107788 -92.46794128]
[-331.47000122 -89.97299957]
[-324.92950439 -103.47195435]
[-336.05429077 -113.53372955]
[-347.17907715 -123.59549713]
[-358.30386353 -133.65727234]
[-369.42864990 -143.71903992]
[-380.55343628 -153.78080750]
[-396.58389282 -154.41618347]
[-405.96545410 -167.43023682]
[-401.50140381 -182.83970642]
[-386.61614990 -188.82376099]
[-372.72842407 -180.79194641]
[-370.49163818 -164.90559387]
[-359.36688232 -154.84382629]
[-348.24209595 -144.78204346]
[-337.11730957 -134.72027588]
[-325.99252319 -124.65850830]
[-314.86773682 -114.59674072]
[-297.23635864 -111.06455231]
[-286.69622803 -98.74842834]
[-286.13870239 -84.31444550]
[-272.75094604 -77.54929352]
[-259.36315918 -70.78414154]
[-245.97537231 -64.01898956]
[-232.58758545 -57.25383377]
[-219.19979858 -50.48868179]
[-205.81202698 -43.72353363]
[-191.78611755 -48.60303116]
[-178.11262512 -41.93292236]
[-173.08966064 -27.18817520]
[-159.70187378 -20.42302322]
[-146.31408691 -13.65787125]
[-132.92631531 -6.89271975]
[-117.19850159 -12.82342052]
[-101.73916626 -5.40675545]
[-96.31272888 11.21372986]
[-82.81377411 17.75423050]
[-67.98639679 16.34071159]
[-58.94091797 29.32107925]
[-45.44195938 35.86157990]
[-38.03681564 35.94892120]
[-31.77346802 42.62581253]
[-18.38568497 49.39096451]
[-4.99790335 56.15611649]
[8.38987923 62.92126846]
[21.77766228 69.68641663]
[35.16544342 76.45156860]
[42.56809616 76.66264343]
[48.71899796 83.44326019]
[61.99186707 90.43117523]
[75.26473236 97.41909027]
[118.99781036 60.42577362]
[133.52905273 56.70513535]
[148.02868652 52.86322021]
[162.49572754 48.90028763]
[176.96276855 44.93735886]
[191.42980957 40.97442627]
[205.89683533 37.01149368]
[220.36387634 33.04856491]
[234.83091736 29.08563232]
[249.22970581 24.88151360]
[263.55624390 20.43737984]
[277.88278198 15.99324608]
[292.20932007 11.54911232]
[306.53585815 7.10497904]
[320.86239624 2.66084528]
[335.18893433 -1.78328860]
[339.70358276 -11.70661354]
[348.75418091 -17.38080025]
[359.21359253 -17.13106537]
[367.62194824 -11.28217506]
[382.08898926 -15.24510670]
[395.76794434 -25.26124001]
[409.17935181 -14.88962078]
[402.92568970 0.86881363]
[386.05194092 -0.77806860]
[371.58489990 3.18486238]
[359.05429077 17.89627266]
[339.63305664 12.54324913]
[325.30654907 16.98738289]
[310.98001099 21.43151665]
[296.65347290 25.87565041]
[282.32693481 30.31978416]
[268.00039673 34.76391602]
[253.67384338 39.20804977]
[250.68840027 42.95895767]
[245.30706787 44.86254120]
[238.79383850 43.55266953]
[224.32681274 47.51560211]
[209.85977173 51.47853088]
[195.39273071 55.44146347]
[180.92568970 59.40439606]
[166.45866394 63.36732483]
[151.99162292 67.33025360]
[146.35984802 72.13930511]
[137.24967957 71.23637390]
[122.71844482 74.95700836]
[118.99765015 89.48889923]
[115.27716827 104.01948547]
[126.23226929 114.26574707]
[137.18736267 124.51200104]
[148.14247131 134.75827026]
[164.22961426 137.94194031]
[169.25918579 153.55076599]
[158.05718994 165.52772522]
[142.14727783 161.55194092]
[137.89620972 145.71336365]
[126.94110870 135.46710205]
[115.98600769 125.22084045]
[105.03091431 114.97458649]
[91.58707428 121.62763977]
[93.08850861 136.55230713]
[94.58994293 151.47697449]
[96.09137726 166.40164185]
[97.59281158 181.32630920]
[106.67259216 194.28269958]
[100.24810028 207.72053528]
[101.74953461 222.64520264]
[105.31278229 228.25242615]
[105.47048187 233.95834351]
[103.04320526 238.09240723]
[104.04509735 253.05891418]
[105.04698181 268.02542114]
[117.77663422 277.10781860]
[121.63997650 292.26068115]
[114.81286621 306.32922363]
[100.51885223 312.67077637]
[85.50713348 308.29101562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 182]
[3 181]
[4 180]
[5 177]
[6 176]
[8 174]
[9 173]
[10 172]
[11 171]
[12 170]
[13 110]
[14 109]
[15 108]
[16 106]
[17 105]
[18 104]
[19 103]
[20 102]
[21 101]
[22 99]
[23 98]
[25 96]
[26 95]
[30 92]
[31 91]
[32 90]
[33 89]
[36 86]
[37 85]
[38 84]
[39 83]
[40 82]
[41 81]
[42 80]
[44 60]
[45 59]
[46 58]
[48 56]
[49 55]
[61 77]
[62 76]
[63 75]
[64 74]
[65 73]
[66 72]
[111 156]
[112 155]
[113 153]
[114 152]
[115 151]
[116 150]
[117 149]
[118 148]
[119 147]
[120 144]
[121 143]
[122 142]
[123 141]
[124 140]
[125 139]
[126 138]
[130 136]
[131 135]
[158 169]
[159 168]
[160 167]
[161 166]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
