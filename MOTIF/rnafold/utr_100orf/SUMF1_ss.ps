%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:26:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACGUGACCAACCGGGUCACAUGGCCCGCGGGACAACAUGGCUGCGCCCGCACUAGGGCUGGUGUGUGGACGUUGCCCUGAGCUGGGUCUCGUCCUCUUGCUGCUGCUGCUCUCGCUGCUGUGUGGAGCGGCAGGGA\
) } def
/len { sequence length } bind def

/coor [
[96.15978241 161.27055359]
[90.54288483 147.36190796]
[97.91603088 134.29765320]
[90.51106262 135.48776245]
[82.71730042 148.30406189]
[74.92354584 161.12034607]
[67.12978363 173.93664551]
[59.33602524 186.75292969]
[51.54226303 199.56921387]
[53.92841339 215.43383789]
[42.90755081 227.09231567]
[26.93393517 225.60127258]
[18.26116180 212.10450745]
[23.54223633 196.95558167]
[38.72597504 191.77546692]
[46.51973343 178.95916748]
[54.31349182 166.14288330]
[62.10725021 153.32658386]
[69.90100861 140.51029968]
[77.69477081 127.69400787]
[69.10060120 112.67674255]
[68.96536255 96.44274902]
[76.29382324 83.16289520]
[62.04922867 78.46273804]
[47.80463028 73.76257324]
[33.56003571 69.06241608]
[19.31544113 64.36225891]
[4.87168121 60.31530380]
[-9.74130535 56.92994690]
[-24.35429192 53.54459381]
[-38.96727753 50.15923691]
[-53.58026505 46.77388000]
[-62.38838196 59.16280746]
[-75.26971436 67.23372650]
[-90.25995636 69.75587463]
[-105.07318878 66.34465790]
[-117.45051575 57.52024460]
[-125.50448608 44.62830734]
[-128.00691223 29.63476562]
[-124.57621002 14.82602787]
[-115.73552704 2.46031904]
[-102.83300018 -5.57668018]
[-87.83618164 -8.05938625]
[-73.03197479 -4.60920382]
[-60.67790222 4.24773884]
[-52.65788269 17.16082191]
[-50.19490814 32.16089630]
[-35.58192062 35.54624939]
[-20.96893501 38.93160629]
[-6.35594940 42.31696320]
[8.25703716 45.70231628]
[10.75063705 44.25057220]
[13.99353313 43.74322128]
[17.61217880 44.48009109]
[21.12835884 46.61397171]
[24.01560020 50.11766052]
[38.26019669 54.81782150]
[52.50479126 59.51797867]
[66.74938965 64.21813965]
[80.99398041 68.91829681]
[95.12789917 63.89510345]
[103.21137238 51.25954437]
[111.29485321 38.62398529]
[119.37833405 25.98842621]
[113.88228607 11.59746933]
[117.86735535 -3.09853649]
[129.60302734 -12.51862431]
[144.45748901 -13.21363926]
[152.54096985 -25.84919739]
[160.62445068 -38.48475647]
[168.70791626 -51.12031555]
[176.79139709 -63.75587463]
[173.61376953 -79.00514984]
[181.99157715 -91.70425415]
[196.54901123 -94.63965607]
[204.63249207 -107.27521515]
[212.71597290 -119.91077423]
[220.79945374 -132.54634094]
[217.16368103 -147.92674255]
[225.53936768 -161.32911682]
[240.95735168 -164.80206299]
[254.27041626 -156.28515625]
[257.58016968 -140.83131409]
[248.92297363 -127.60903168]
[233.43501282 -124.46286011]
[225.35153198 -111.82730103]
[217.26805115 -99.19174194]
[209.18457031 -86.55618286]
[212.62164307 -72.10896301]
[204.60383606 -59.17955399]
[189.42695618 -55.67239761]
[181.34347534 -43.03683853]
[173.26000977 -30.40127754]
[165.17652893 -17.76571846]
[157.09304810 -5.13015938]
[162.68867493 8.64760780]
[159.05545044 23.25115776]
[147.38333130 33.02944565]
[132.01390076 34.07190704]
[123.93041229 46.70746613]
[115.84693146 59.34302521]
[107.76345825 71.97858429]
[130.20956421 88.51728058]
[129.85968018 119.31011963]
[141.27685547 129.03884888]
[152.69403076 138.76757812]
[164.11119080 148.49630737]
[175.52836609 158.22503662]
[186.94554138 167.95378113]
[198.36270142 177.68251038]
[209.77987671 187.41123962]
[221.19705200 197.13996887]
[232.61421204 206.86869812]
[244.14138794 216.46684265]
[255.77705383 225.93316650]
[267.41271973 235.39949036]
[283.68112183 237.46609497]
[289.77523804 252.69088745]
[279.42593384 265.41189575]
[263.27969360 262.54281616]
[257.94641113 247.03515625]
[246.31072998 237.56883240]
[234.67506409 228.10252380]
[227.43907166 226.30593872]
[222.88548279 218.28587341]
[211.46832275 208.55714417]
[200.05114746 198.82841492]
[188.63397217 189.09967041]
[177.21679688 179.37094116]
[165.79963684 169.64221191]
[154.38246155 159.91348267]
[142.96528625 150.18475342]
[131.54812622 140.45602417]
[120.13095093 130.72729492]
[112.72597504 131.91740417]
[123.82089233 142.01210022]
[122.84627533 156.98040771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[23 60]
[24 59]
[25 58]
[26 57]
[27 56]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[61 102]
[62 101]
[63 100]
[64 99]
[68 95]
[69 94]
[70 93]
[71 92]
[72 91]
[75 88]
[76 87]
[77 86]
[78 85]
[104 134]
[105 133]
[106 132]
[107 131]
[108 130]
[109 129]
[110 128]
[111 127]
[112 126]
[113 125]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
