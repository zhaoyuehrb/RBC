%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:54:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCCGCACCAAGCAGACUGCACGCAAGUCCACCGGUGGCAAAGCGCCGCGCAAGCAGCUGGCCACUAAGGCGGCUCGGAAAAGCGCGCCGGCCACCG\
) } def
/len { sequence length } bind def

/coor [
[100.05714417 215.61572266]
[109.55339050 202.68510437]
[108.62084961 187.71412659]
[107.68830109 172.74314880]
[106.75576019 157.77215576]
[105.82321167 142.80117798]
[91.64699554 139.81912231]
[80.08576965 132.57055664]
[69.89947510 143.58143616]
[69.08379364 159.60372925]
[55.96501541 168.83830261]
[40.60674667 164.20117188]
[34.79053116 149.24954224]
[42.97807312 135.45303345]
[58.88859558 133.39514160]
[69.07489014 122.38426208]
[65.14048004 115.56378937]
[62.68899155 108.08123016]
[47.69080734 108.31450653]
[32.69261932 108.54778290]
[17.69443321 108.78105927]
[7.97135448 121.02833557]
[-7.35962343 124.10975647]
[-21.05968094 116.57036591]
[-26.66007042 101.97003174]
[-21.51645851 87.20259094]
[-8.05750179 79.24077606]
[7.36189175 81.84391022]
[17.46115685 93.78287506]
[32.45934296 93.54959869]
[47.45752716 93.31632233]
[62.45571518 93.08304596]
[65.64882660 83.34423065]
[71.31773376 74.80584717]
[79.05386353 68.08328247]
[88.29963684 63.66105270]
[98.38869476 61.85787964]
[100.71217346 47.03892136]
[103.03564453 32.21996689]
[105.35911560 17.40101051]
[107.68258667 2.58205318]
[110.00605774 -12.23690319]
[103.01113892 -23.21086884]
[105.36779022 -35.59920120]
[115.25123596 -42.76408386]
[118.03444672 -57.50361252]
[120.81766510 -72.24314117]
[114.05698395 -81.04650116]
[113.37384796 -91.90303040]
[118.75396729 -101.10131836]
[128.15213013 -105.63459778]
[131.84631348 -120.17258453]
[126.87860107 -135.80120850]
[138.12794495 -147.73370361]
[154.02198792 -143.69493103]
[158.21029663 -127.83965302]
[146.38430786 -116.47840118]
[142.69012451 -101.94041443]
[149.42367554 -83.92730713]
[135.55718994 -69.45993042]
[132.77397156 -54.72039795]
[129.99076843 -39.98086929]
[136.72473145 -23.85774422]
[124.82501984 -9.91343117]
[122.50154114 4.90552568]
[120.17807007 19.72448158]
[117.85459900 34.54343796]
[115.53112793 49.36239624]
[113.20765686 64.18135071]
[131.53564453 75.63883209]
[141.32330322 95.93895721]
[138.67039490 119.24710846]
[152.55079651 124.93343353]
[166.43121338 130.61976624]
[180.31161499 136.30609131]
[194.27877808 141.77586365]
[208.32931519 147.02775574]
[222.37985229 152.27964783]
[236.65481567 145.49725342]
[251.51640320 150.87391663]
[258.14749146 165.21978760]
[252.61399841 180.02371216]
[238.19882202 186.50276184]
[223.45423889 180.81306458]
[217.12794495 166.33018494]
[203.07740784 161.07829285]
[189.02687073 155.82640076]
[181.52726746 156.44390869]
[174.62528992 150.18649292]
[160.74487305 144.50016785]
[146.86447144 138.81384277]
[132.98406982 133.12751770]
[120.79419708 141.86863708]
[121.72674561 156.83961487]
[122.65928650 171.81059265]
[123.59183502 186.78158569]
[124.52437592 201.75256348]
[135.55189514 213.40475464]
[133.17478943 229.27072144]
[119.21658325 237.17945862]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 97]
[3 96]
[4 95]
[5 94]
[6 93]
[8 16]
[9 15]
[18 32]
[19 31]
[20 30]
[21 29]
[37 69]
[38 68]
[39 67]
[40 66]
[41 65]
[42 64]
[45 62]
[46 61]
[47 60]
[51 58]
[52 57]
[72 92]
[73 91]
[74 90]
[75 89]
[76 87]
[77 86]
[78 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
