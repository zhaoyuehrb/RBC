%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCCCCCCACCCGGGAGGGGGGAGAGAGGCAAAAAGUAAGAGAGGAAAAAAAAUAGCAGGAAGAUGGCGCCCACCAAGCCCAGCUUUCAGCAGGAUCCUUCCAGGCGAGAACGAAUAACUGCCCAGCAUCCUCUGCCCAACCAAUCAGAAUGUAGGAAAAUCU\
) } def
/len { sequence length } bind def

/coor [
[78.15252686 346.00842285]
[72.46538544 332.12835693]
[69.50949860 317.42248535]
[69.39207458 302.42010498]
[62.01607895 315.48129272]
[54.64008713 328.54251099]
[47.26409149 341.60369873]
[39.88809967 354.66488647]
[32.51210403 367.72607422]
[39.08038330 381.78442383]
[36.09789276 397.01217651]
[24.71146393 407.55395508]
[9.29940605 409.35620117]
[-4.21202612 401.72595215]
[-10.62741280 387.59716797]
[-7.47990608 372.40264893]
[4.02021265 361.98504639]
[19.45091438 360.35006714]
[26.82690811 347.28887939]
[34.20289993 334.22769165]
[41.57889557 321.16650391]
[48.95489120 308.10531616]
[56.33088303 295.04412842]
[41.72410202 298.45614624]
[29.35312653 289.97329712]
[27.27213287 275.11834717]
[36.83596802 263.56268311]
[51.81804657 262.82971191]
[62.46405792 273.39614868]
[63.03511810 258.40704346]
[63.60617828 243.41790771]
[64.17723846 228.42878723]
[54.52646255 239.91192627]
[40.47061539 245.14959717]
[25.65863419 242.78207397]
[13.93574715 233.42398071]
[8.34525108 219.50469971]
[10.33845234 204.63771057]
[19.39791298 192.68254089]
[33.17176819 186.74276733]
[48.08428955 188.36038208]
[60.26414871 197.11544800]
[66.54946899 210.73542786]
[69.94692230 196.12524414]
[73.34437561 181.51506042]
[76.74182129 166.90489197]
[80.13927460 152.29470825]
[68.55719757 146.26591492]
[58.68824768 137.71636963]
[51.07013702 127.11186981]
[46.11792755 115.03021240]
[44.10143661 102.12963867]
[45.13052750 89.11304474]
[49.14913559 76.68960571]
[55.93830490 65.53621674]
[65.12814331 56.26056290]
[76.21794128 49.36800766]
[71.71870422 35.05868149]
[60.19831848 24.21472931]
[63.76182175 9.75268650]
[59.26258469 -4.55664158]
[54.76334763 -18.86597061]
[50.26411057 -33.17529678]
[45.76487732 -47.48462677]
[34.24448776 -58.32857513]
[37.80799103 -72.79061890]
[33.30875778 -87.09994507]
[28.80952072 -101.40927887]
[23.22568321 -108.69687653]
[24.36364365 -116.03403473]
[20.13765526 -130.42643738]
[5.74035072 -136.52984619]
[-1.31933725 -150.48315430]
[2.29196000 -165.69802856]
[14.86909771 -174.99047852]
[30.47353745 -173.97288513]
[41.73733902 -163.12573242]
[43.34207916 -147.57070923]
[34.53004837 -134.65242004]
[38.75603867 -120.26002502]
[43.11884689 -105.90851593]
[47.61808395 -91.59918213]
[52.11732101 -77.28985596]
[63.31589127 -67.46940613]
[60.07420349 -51.98386383]
[64.57344055 -37.67453384]
[69.07267761 -23.36520576]
[73.57191467 -9.05587769]
[78.07115173 5.25345039]
[89.26972198 15.07390118]
[86.02803040 30.55944443]
[90.52726746 44.86877060]
[108.48771667 44.70855713]
[125.57312012 50.24861526]
[134.15725708 37.94770050]
[142.74140930 25.64678192]
[143.60488892 9.27038479]
[158.33979797 2.07213211]
[171.78810120 11.45697021]
[170.11534119 27.77058220]
[155.04231262 34.23092270]
[146.45817566 46.53183746]
[137.87403870 58.83275604]
[144.29830933 65.84089661]
[149.44305420 73.83570862]
[163.52207947 68.66070557]
[177.60112000 63.48569870]
[191.68016052 58.31069183]
[193.10038757 43.11379623]
[200.98100281 30.04250717]
[213.75732422 21.69214439]
[228.89257812 19.72067642]
[243.38166809 24.51953888]
[254.34776306 35.13591385]
[259.61355591 49.46191788]
[258.13348389 64.65310669]
[250.20144653 77.69325256]
[237.39234924 85.99324036]
[222.24945068 87.90509033]
[207.77937317 83.04920959]
[196.85516357 72.38973236]
[182.77612305 77.56473541]
[168.69709778 82.73974609]
[154.61805725 87.91474915]
[155.68154907 105.36188507]
[151.30830383 122.28548431]
[141.92530823 137.03312683]
[128.44874573 148.16487122]
[112.19442749 154.59378052]
[94.74945068 155.69215393]
[91.35200500 170.30233765]
[87.95455170 184.91252136]
[84.55709839 199.52268982]
[81.15964508 214.13287354]
[79.16636658 228.99984741]
[78.59530640 243.98896790]
[78.02424622 258.97808838]
[77.45318604 273.96722412]
[85.42056274 261.25814819]
[95.65041351 250.28771973]
[107.77256012 241.45292664]
[121.34835815 235.07345581]
[135.88656616 231.38014221]
[150.86111450 230.50663757]
[165.73013306 232.48454285]
[179.95559692 237.24229431]
[193.02275085 244.60774231]
[204.45874023 254.31433105]
[213.84976196 266.01086426]
[220.85600281 279.27407837]
[225.22392273 293.62402344]
[226.79548645 308.54147339]
[225.51382446 323.48660278]
[221.42529297 337.91867065]
[214.67785645 351.31536865]
[205.51567078 363.19201660]
[194.27027893 373.11880493]
[181.34858704 380.73651123]
[167.21815491 385.76953125]
[152.39033508 388.03573608]
[137.40165710 387.45309448]
[122.79449463 384.04272461]
[109.09740448 377.92800903]
[96.80603027 369.33020020]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 23]
[5 22]
[6 21]
[7 20]
[8 19]
[9 18]
[29 138]
[30 137]
[31 136]
[32 135]
[43 134]
[44 133]
[45 132]
[46 131]
[47 130]
[57 92]
[58 91]
[60 89]
[61 88]
[62 87]
[63 86]
[64 85]
[66 83]
[67 82]
[68 81]
[70 80]
[71 79]
[94 103]
[95 102]
[96 101]
[105 124]
[106 123]
[107 122]
[108 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
