%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:01:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCCCGGUGGUCCUAGGGACCCCAUGGCCAUGGUUGAGCGGCCGAGGCCCGAGUGGGCCUCGUAUCACAACUGCAACAGCAACAGCUGCCAGGACCUGGGCAACUCUGUCCUGUUGCUGCUGG\
) } def
/len { sequence length } bind def

/coor [
[92.61278534 131.33666992]
[82.14953613 126.79400635]
[71.15376282 136.99659729]
[60.15798187 147.19918823]
[49.16220474 157.40177917]
[48.41122437 172.96049500]
[37.11460495 183.15074158]
[22.28636932 182.33891296]
[11.29059124 192.54150391]
[7.06670570 200.76734924]
[-0.10882471 202.85716248]
[-11.35554314 212.78245544]
[-22.60226059 222.70773315]
[-33.84897995 232.63302612]
[-45.09569550 242.55831909]
[-52.97080231 257.57226562]
[-69.57805634 254.16120911]
[-70.89764404 237.25869751]
[-55.02098465 231.31159973]
[-43.77426529 221.38630676]
[-32.52754974 211.46101379]
[-21.28083038 201.53573608]
[-10.03411198 191.61044312]
[1.08800006 181.54573059]
[12.08377838 171.34313965]
[12.38233566 156.49569702]
[23.38827896 145.99217224]
[38.95961380 146.40600586]
[49.95539093 136.20341492]
[60.95117188 126.00081635]
[71.94694519 115.79822540]
[67.98797607 103.43336487]
[69.23474121 90.51017761]
[75.48450470 79.13020325]
[85.72093964 71.14404297]
[82.38312531 56.52012634]
[79.04531097 41.89620590]
[75.70749664 27.27228928]
[62.87475204 14.13729286]
[68.56478119 -2.41399455]
[64.86341858 -16.95015335]
[61.16205597 -31.48631287]
[57.46069717 -46.02247238]
[38.37358475 -61.31481934]
[44.16341019 -84.37683105]
[37.99410629 -98.04941559]
[31.82479858 -111.72200012]
[25.65549278 -125.39459229]
[19.48618507 -139.06718445]
[13.31687927 -152.73976135]
[7.14757252 -166.41235352]
[0.97826618 -180.08494568]
[-12.64543056 -189.21330261]
[-11.28205967 -205.55567932]
[3.66585946 -212.30043030]
[16.82118988 -202.50914001]
[14.65085411 -186.25424194]
[20.82015991 -172.58166504]
[26.98946762 -158.90907288]
[33.15877533 -145.23648071]
[39.32807922 -131.56390381]
[45.49738693 -117.89131165]
[51.66669464 -104.21871948]
[57.83599854 -90.54613495]
[64.16838074 -90.20800018]
[70.17282104 -88.04503632]
[75.33163452 -84.21877289]
[79.19286346 -79.03517914]
[81.40988159 -72.92028046]
[81.77241516 -66.38518524]
[80.22624207 -59.98336411]
[76.87978363 -54.26378250]
[71.99685669 -49.72383499]
[75.69821930 -35.18767548]
[79.39957428 -20.65151405]
[83.10093689 -6.11535549]
[93.38475037 0.38353571]
[96.54159546 12.54809380]
[90.33141327 23.93447495]
[93.66922760 38.55839539]
[97.00704193 53.18231201]
[100.34485626 67.80622864]
[118.66985321 73.77035522]
[130.30584717 89.13199615]
[131.08390808 108.38740540]
[144.25723267 115.56121826]
[157.43055725 122.73502350]
[170.60388184 129.90882874]
[186.42387390 129.71376038]
[193.90084839 142.59568787]
[207.07417297 149.76950073]
[220.42225647 156.61265564]
[233.93678284 163.12091064]
[247.45130920 169.62916565]
[260.96585083 176.13743591]
[274.48037720 182.64569092]
[287.99490356 189.15394592]
[302.75247192 184.16876221]
[316.36541748 190.96159363]
[321.02706909 205.06140137]
[334.54162598 211.56965637]
[350.84558105 209.80523682]
[360.30584717 223.20057678]
[353.19052124 237.97570801]
[336.81924438 238.93122864]
[328.03335571 225.08418274]
[314.51882935 218.57592773]
[300.58865356 223.72238159]
[286.79028320 217.31460571]
[281.48666382 202.66847229]
[267.97213745 196.16021729]
[254.45759583 189.65196228]
[240.94305420 183.14370728]
[227.42852783 176.63545227]
[213.91398621 170.12719727]
[209.09521484 170.87371826]
[203.76896667 168.52275085]
[199.90036011 162.94282532]
[186.72703552 155.76901245]
[171.84927368 156.47720337]
[163.43006897 143.08215332]
[150.25674438 135.90835571]
[137.08341980 128.73454285]
[123.91009521 121.56072998]
[114.89133453 128.54479980]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[5 28]
[8 25]
[9 24]
[11 23]
[12 22]
[13 21]
[14 20]
[15 19]
[35 82]
[36 81]
[37 80]
[38 79]
[40 76]
[41 75]
[42 74]
[43 73]
[45 64]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
[85 124]
[86 123]
[87 122]
[88 121]
[90 119]
[91 118]
[92 115]
[93 114]
[94 113]
[95 112]
[96 111]
[97 110]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
