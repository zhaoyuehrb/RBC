%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGGGACCAGAGGGCGGCUCUGCAGGCAGGCGGCAGCGGUGCCCUCAGUUCCCCAGCAUGGCCCCCUCGGCCUGGGCCAUUUGCUGGCUGCUAGGGGGCCUCCUGCUCCAUGGGGGUAGCUCUGGCCCCAGCCCCGGCCCCAGUGUGCCCCGCCUGC\
) } def
/len { sequence length } bind def

/coor [
[57.76067352 211.85554504]
[43.38814163 215.59265137]
[36.01684189 228.65649414]
[28.64554024 241.72033691]
[21.27424049 254.78416443]
[13.90293884 267.84802246]
[13.85984707 283.66915894]
[0.86681968 290.95135498]
[-6.50448179 304.01519775]
[-0.84217352 318.59164429]
[-5.92306042 333.38076782]
[-19.34810257 341.39962769]
[-34.77840805 338.86196899]
[-44.92825317 326.96597290]
[-45.00519562 311.32858276]
[-34.97290421 299.33328247]
[-19.56832123 296.64389038]
[-12.19702053 283.58004761]
[-12.68117332 268.69332886]
[0.83909839 260.47671509]
[8.21039963 247.41287231]
[15.58170128 234.34902954]
[22.95300293 221.28518677]
[30.32430267 208.22134399]
[26.09240532 193.98664856]
[33.38185501 180.63305664]
[48.34120941 176.29075623]
[55.71250916 163.22692871]
[63.08380890 150.16308594]
[70.45510864 137.09924316]
[77.82641602 124.03540039]
[85.19771576 110.97156525]
[86.38198853 96.01838684]
[81.15896606 81.95709229]
[75.93593597 67.89579773]
[70.71291351 53.83449936]
[65.48989105 39.77320480]
[53.43154907 29.53079414]
[56.25299072 14.90585804]
[51.02996445 0.84456360]
[45.07720947 -6.15550280]
[45.84566116 -13.54647446]
[40.90146637 -27.70821762]
[35.95727158 -41.86996078]
[31.01307869 -56.03170013]
[26.06888580 -70.19344330]
[21.12469101 -84.35518646]
[16.04083443 -98.46739197]
[10.81780910 -112.52868652]
[5.59478474 -126.58998108]
[-7.24247646 -130.77062988]
[-15.19813538 -141.43624878]
[-15.53625679 -154.54289246]
[-8.35765934 -165.28036499]
[-13.30185318 -179.44210815]
[-18.24604797 -193.60385132]
[-23.19024086 -207.76559448]
[-28.13443565 -221.92733765]
[-33.07862854 -236.08908081]
[-38.30165482 -250.15037537]
[-43.80146790 -264.10574341]
[-49.30128479 -278.06109619]
[-54.80110168 -292.01644897]
[-60.30091858 -305.97180176]
[-65.80073547 -319.92715454]
[-80.95301819 -322.82748413]
[-92.11614990 -333.47586060]
[-95.72801208 -348.47445679]
[-90.63607025 -363.03726196]
[-78.46514893 -372.51736450]
[-63.09894180 -373.88967896]
[-49.44075012 -366.71630859]
[-41.84885406 -353.28622437]
[-42.74580002 -337.88497925]
[-51.84537506 -325.42697144]
[-46.34556198 -311.47161865]
[-40.84574509 -297.51626587]
[-35.34592819 -283.56091309]
[-29.84611130 -269.60556030]
[-24.34629440 -255.65019226]
[-20.35339737 -252.94258118]
[-18.04887772 -247.67440796]
[-18.91688538 -241.03327942]
[-13.97269249 -226.87153625]
[-9.02849865 -212.70979309]
[-4.08430481 -198.54804993]
[0.85988903 -184.38630676]
[5.80408287 -170.22456360]
[21.23388100 -163.59484863]
[27.23693657 -147.55021667]
[19.65608025 -131.81300354]
[24.87910461 -117.75171661]
[30.10212898 -103.69042206]
[35.40746689 -98.48750305]
[35.28643417 -89.29937744]
[40.23062897 -75.13763428]
[45.17481995 -60.97589493]
[50.11901474 -46.81415176]
[55.06320953 -32.65241241]
[60.00740433 -18.49066734]
[65.09126282 -4.37846088]
[70.31428528 9.68283367]
[81.99903870 18.91948891]
[79.55118561 34.55018234]
[84.77420807 48.61147690]
[89.99723053 62.67277145]
[95.22026062 76.73406982]
[100.44328308 90.79536438]
[103.44909668 89.43704987]
[107.16262054 89.14122772]
[111.20355988 90.16976929]
[115.10884857 92.65108490]
[118.37800598 96.55665588]
[120.52462769 101.69252777]
[133.36430359 109.44771576]
[146.20396423 117.20290375]
[159.04362488 124.95809174]
[171.88330078 132.71328735]
[184.72296143 140.46847534]
[197.63862610 148.09643555]
[210.62899780 155.59643555]
[223.61938477 163.09643555]
[238.70822144 159.22804260]
[251.77548218 167.01916504]
[255.37042236 181.42791748]
[268.36080933 188.92791748]
[281.35116577 196.42791748]
[294.34155273 203.92791748]
[308.46182251 197.49375916]
[323.66046143 200.62107849]
[334.09335327 212.10734558]
[335.74880981 227.53587341]
[327.99029541 240.97404480]
[313.80105591 247.25463867]
[298.63720703 243.96263123]
[288.32955933 232.36386108]
[286.84155273 216.91828918]
[273.85116577 209.41828918]
[260.86080933 201.91828918]
[247.87042236 194.41828918]
[233.59460449 198.50935364]
[220.31367493 191.08834839]
[216.11938477 176.08682251]
[203.12899780 168.58682251]
[190.13862610 161.08682251]
[182.73406982 160.46258545]
[176.96777344 153.30813599]
[164.12811279 145.55294800]
[151.28843689 137.79776001]
[138.44877625 130.04257202]
[125.60910797 122.28738403]
[112.76943970 114.53219604]
[98.26155090 118.34286499]
[90.89025116 131.40670776]
[83.51895142 144.47055054]
[76.14765167 157.53437805]
[68.77635193 170.59822083]
[61.40504837 183.66206360]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 24]
[3 23]
[4 22]
[5 21]
[6 20]
[8 18]
[9 17]
[27 158]
[28 157]
[29 156]
[30 155]
[31 154]
[32 153]
[33 108]
[34 107]
[35 106]
[36 105]
[37 104]
[39 102]
[40 101]
[42 100]
[43 99]
[44 98]
[45 97]
[46 96]
[47 95]
[48 93]
[49 92]
[50 91]
[54 88]
[55 87]
[56 86]
[57 85]
[58 84]
[59 83]
[60 80]
[61 79]
[62 78]
[63 77]
[64 76]
[65 75]
[114 152]
[115 151]
[116 150]
[117 149]
[118 148]
[119 147]
[120 145]
[121 144]
[122 143]
[125 140]
[126 139]
[127 138]
[128 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
