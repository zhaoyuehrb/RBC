%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:45:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCCGCUCCCAUGGGUGUCGCUGGGCCGCGCCAUGCCUAAGGGGGCGCCGCGAUGGGCCAAGGGGACGAGAGCGAGCGCAUCGUGAUCAACGUGGGCGGCACGCGCCACCAGACGUACCGCUCGACCCUGCGCACGCUGCCCGGCACGCGGC\
) } def
/len { sequence length } bind def

/coor [
[-207.68606567 538.00836182]
[-215.18606567 550.99871826]
[-222.68606567 563.98913574]
[-230.18606567 576.97949219]
[-237.68606567 589.96984863]
[-245.18606567 602.96026611]
[-246.78286743 612.01367188]
[-252.97013855 616.13452148]
[-260.73019409 628.97125244]
[-268.49026489 641.80798340]
[-276.25033569 654.64465332]
[-276.03942871 671.04248047]
[-290.27124023 679.19030762]
[-304.30532837 670.70642090]
[-303.70462036 654.31829834]
[-289.08706665 646.88464355]
[-281.32699585 634.04791260]
[-273.56692505 621.21118164]
[-265.80685425 608.37445068]
[-258.17645264 595.46026611]
[-250.67643738 582.46984863]
[-243.17643738 569.47949219]
[-235.67643738 556.48913574]
[-228.17643738 543.49871826]
[-220.67643738 530.50836182]
[-223.50189209 518.70947266]
[-217.31190491 507.81057739]
[-204.96476746 503.95318604]
[-197.20471191 491.11648560]
[-189.44464111 478.27975464]
[-181.68457031 465.44302368]
[-173.92449951 452.60632324]
[-166.16444397 439.76959229]
[-166.68092346 436.22683716]
[-165.47050476 432.25720215]
[-162.35151672 428.69213867]
[-157.52824402 426.41220093]
[-149.00727844 414.06744385]
[-140.48629761 401.72268677]
[-131.96533203 389.37792969]
[-134.71316528 379.46337891]
[-131.45251465 369.47348022]
[-123.03951263 362.81536865]
[-112.12863922 361.90020752]
[-103.11750793 349.90856934]
[-101.65722656 335.08572388]
[-87.18135071 328.70141602]
[-78.17021942 316.70974731]
[-69.15908051 304.71810913]
[-60.14794922 292.72647095]
[-61.53060913 280.67306519]
[-54.07202530 270.59973145]
[-41.34997177 268.25878906]
[-32.09918594 256.45101929]
[-22.84840393 244.64326477]
[-24.89310074 229.93426514]
[-15.67969799 217.82774353]
[-0.23767726 215.78280640]
[9.01310539 203.97505188]
[18.26388931 192.16729736]
[14.00665474 177.91900635]
[19.01497459 163.72813416]
[31.56579208 155.10662842]
[46.96462250 155.53352356]
[56.21540451 143.72576904]
[57.97387695 128.93533325]
[72.57537842 122.84381104]
[81.82616425 111.03605652]
[78.80557251 98.30319977]
[83.81346130 86.21309662]
[94.95282745 79.34548187]
[96.76087952 64.45484924]
[87.28770447 52.08970642]
[89.33345032 37.01424408]
[101.18010712 28.05922699]
[102.98815918 13.16859436]
[104.79620361 -1.72203910]
[106.60425568 -16.61267281]
[97.88188934 -30.07743645]
[103.10720062 -45.24568176]
[118.27177429 -50.48162842]
[131.74266052 -41.76870728]
[133.18612671 -25.79072571]
[121.49488831 -14.80462170]
[119.68683624 0.08601114]
[117.87879181 14.97664452]
[116.07073975 29.86727715]
[125.43007660 41.39716721]
[123.80857849 56.52414322]
[111.65151215 66.26290131]
[109.84346008 81.15353394]
[112.42824554 82.74829102]
[114.75945282 84.69504547]
[128.31120300 78.26465607]
[141.86296082 71.83427429]
[155.41471863 65.40388489]
[165.48556519 50.01939011]
[182.89259338 52.04537201]
[196.31210327 45.34339523]
[205.20120239 32.25544357]
[220.04447937 33.49097443]
[233.46398926 26.78899574]
[246.88351440 20.08701897]
[255.46929932 6.11503744]
[271.85263062 6.83497286]
[279.17974854 21.50621796]
[269.91314697 35.03625488]
[253.58549500 33.50653839]
[240.16596985 40.20851517]
[226.74645996 46.91049194]
[218.81721497 59.51907730]
[203.01408386 58.76291275]
[189.59455872 65.46488953]
[185.44609070 76.86606598]
[174.27264404 82.54552460]
[161.84510803 78.95563507]
[148.29335022 85.38602448]
[134.74159241 91.81641388]
[121.18983459 98.24680328]
[113.28069305 116.60440063]
[93.63391113 120.28684235]
[84.38313293 132.09458923]
[81.96298218 147.72959900]
[68.02315521 152.97656250]
[58.77237320 164.78431702]
[62.87204361 179.63351440]
[57.50466919 193.88288879]
[44.92473221 202.14176941]
[30.07164192 201.41809082]
[20.82085800 213.22584534]
[11.57007504 225.03359985]
[13.28007889 240.51628113]
[3.73026347 252.35923767]
[-11.04065132 253.89405823]
[-20.29143524 265.70181274]
[-29.54221725 277.50955200]
[-31.67817307 295.77270508]
[-48.15630722 301.73760986]
[-57.16744232 313.72924805]
[-66.17857361 325.72088623]
[-75.18971252 337.71252441]
[-77.29452515 353.39309692]
[-91.12586975 358.91970825]
[-100.13700104 370.91134644]
[-101.60094452 390.97872925]
[-119.62057495 397.89889526]
[-128.14154053 410.24365234]
[-136.66250610 422.58840942]
[-145.18348694 434.93316650]
[-153.32771301 447.52966309]
[-161.08778381 460.36639404]
[-168.84785461 473.20309448]
[-176.60792542 486.03982544]
[-184.36798096 498.87652588]
[-192.12805176 511.71325684]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 22]
[5 21]
[6 20]
[8 19]
[9 18]
[10 17]
[11 16]
[28 155]
[29 154]
[30 153]
[31 152]
[32 151]
[33 150]
[37 149]
[38 148]
[39 147]
[40 146]
[44 144]
[45 143]
[47 141]
[48 140]
[49 139]
[50 138]
[53 136]
[54 135]
[55 134]
[58 131]
[59 130]
[60 129]
[64 125]
[65 124]
[67 122]
[68 121]
[71 91]
[72 90]
[75 87]
[76 86]
[77 85]
[78 84]
[93 119]
[94 118]
[95 117]
[96 116]
[98 113]
[99 112]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
