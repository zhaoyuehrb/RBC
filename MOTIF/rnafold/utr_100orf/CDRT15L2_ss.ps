%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGACGCUCAAGAGAGCAAGAUGUUCUCCUGUUGCUUCCCCACUUCGAGAGGUUGCUGCUUCAGGAAUGGAGGGAGUGAGAGCCUUUUCCGACAAUGCCGAAGAAGGCUCAUCCCUCACC\
) } def
/len { sequence length } bind def

/coor [
[96.20481110 147.76023865]
[95.03763580 132.80572510]
[93.87045288 117.85119629]
[87.21912384 114.38568115]
[84.73804474 129.17907715]
[69.90200043 131.39080811]
[63.21394348 117.96435547]
[73.91645813 107.45465851]
[67.26512146 103.98914337]
[54.34013748 111.60128784]
[46.37549973 125.27151489]
[31.48234749 125.06333160]
[18.55736160 132.67547607]
[5.63237476 140.28762817]
[-7.29261160 147.89976501]
[-20.21759796 155.51190186]
[-33.14258575 163.12405396]
[-46.06756973 170.73619080]
[-56.64723587 183.98410034]
[-72.30615234 177.48527527]
[-70.39612579 160.63926697]
[-53.67971420 157.81120300]
[-40.75472641 150.19906616]
[-27.82974052 142.58691406]
[-14.90475464 134.97477722]
[-1.97976840 127.36263275]
[10.94521809 119.75048828]
[23.87020493 112.13834381]
[30.91036224 99.01259613]
[46.72799683 98.67630005]
[59.65298080 91.06415558]
[65.34822845 77.18740845]
[61.49729919 62.69015503]
[57.64636993 48.19290161]
[53.79544449 33.69564819]
[49.94451523 19.19839478]
[46.09358597 4.70114088]
[42.24266052 -9.79611206]
[38.39173126 -24.29336548]
[34.35293198 -38.73940659]
[30.12694359 -53.13180161]
[25.90095520 -67.52419281]
[20.41732216 -74.98405457]
[21.75729752 -82.34529877]
[17.90637016 -96.84255219]
[14.05544186 -111.33980560]
[0.66784507 -119.30284119]
[-3.03102469 -134.05998230]
[4.64301968 -146.77392578]
[0.79209155 -161.27117920]
[-3.05883646 -175.76843262]
[-6.90976429 -190.26568604]
[-10.76069260 -204.76293945]
[-22.70865631 -215.99584961]
[-18.69177246 -231.89543152]
[-2.84226537 -236.10556030]
[8.53524971 -224.29522705]
[3.73656082 -208.61387634]
[7.58748865 -194.11662292]
[11.43841648 -179.61936951]
[15.28934479 -165.12211609]
[19.14027214 -150.62486267]
[32.11200333 -143.39508057]
[36.22391129 -128.74765015]
[28.55269623 -115.19073486]
[32.40362167 -100.69348145]
[36.25455093 -86.19622803]
[40.29335022 -71.75018311]
[44.51933670 -57.35778809]
[48.74532700 -42.96539688]
[53.70869446 -37.36642838]
[52.88898468 -28.14429283]
[56.73991013 -13.64704037]
[60.59083939 0.85021299]
[64.44176483 15.34746647]
[68.29269409 29.84471893]
[72.14362335 44.34197235]
[75.99455261 58.83922577]
[79.84548187 73.33647919]
[134.78100586 82.40200043]
[149.41720581 85.68554688]
[164.05340576 88.96909332]
[178.68960571 92.25264740]
[193.32580566 95.53619385]
[207.96200562 98.81974792]
[222.59820557 102.10329437]
[237.23440552 105.38684845]
[251.87059021 108.67039490]
[267.02978516 104.14165497]
[277.75466919 114.47734070]
[292.39086914 117.76089478]
[304.71035767 108.12949371]
[320.33673096 108.72190857]
[331.89163208 119.25839996]
[333.91925049 134.76397705]
[325.46215820 147.91737366]
[310.51354980 152.50794983]
[296.13171387 146.36819458]
[289.10729980 132.39709473]
[274.47109985 129.11354065]
[260.35879517 133.87713623]
[248.58705139 123.30659485]
[233.95085144 120.02304077]
[219.31465149 116.73949432]
[204.67845154 113.45594788]
[190.04225159 110.17239380]
[175.40605164 106.88884735]
[160.76985168 103.60529327]
[146.13365173 100.32174683]
[131.49746704 97.03819275]
[125.82933807 101.94965363]
[135.65206909 113.28604889]
[124.31552887 123.10860443]
[114.49309540 111.77256012]
[108.82497406 116.68401337]
[109.99215698 131.63853455]
[111.15933228 146.59306335]
[120.88020325 159.80050659]
[114.05569458 174.71217346]
[97.70626831 175.98823547]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 117]
[2 116]
[3 115]
[9 31]
[10 30]
[12 28]
[13 27]
[14 26]
[15 25]
[16 24]
[17 23]
[18 22]
[32 79]
[33 78]
[34 77]
[35 76]
[36 75]
[37 74]
[38 73]
[39 72]
[40 70]
[41 69]
[42 68]
[44 67]
[45 66]
[46 65]
[49 62]
[50 61]
[51 60]
[52 59]
[53 58]
[80 110]
[81 109]
[82 108]
[83 107]
[84 106]
[85 105]
[86 104]
[87 103]
[88 102]
[90 100]
[91 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
