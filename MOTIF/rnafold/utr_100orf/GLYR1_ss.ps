%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUAGCGGCGUGGCCAGUGACAGCCGGCCCCCGUCACGUGGUCGGGCCCACUCCAAUGGGCGGCGCCGGGGCGACUUGCUGUUCCCGGCGGCCCGUGCGUCGGCGGUGGUUGGGUGGUAAGAUGGCGGCUGUGAGUCUGCGGCUCGGCGACUUGG\
) } def
/len { sequence length } bind def

/coor [
[243.69035339 682.79345703]
[233.93138123 671.40209961]
[231.73988342 656.56304932]
[237.78944397 642.83709717]
[250.22071838 634.44281006]
[265.21295166 633.96032715]
[278.15841675 641.53790283]
[273.18411255 627.38671875]
[268.20983887 613.23553467]
[263.23553467 599.08435059]
[258.26126099 584.93310547]
[248.62919617 581.32720947]
[242.46673584 572.81945801]
[242.02507019 562.10314941]
[247.69445801 552.74017334]
[243.28669739 538.40240479]
[238.87895203 524.06457520]
[234.47119141 509.72683716]
[217.60086060 506.52008057]
[204.59001160 495.17715454]
[199.05661011 478.73345947]
[202.59919739 461.65866089]
[214.33633423 448.64181519]
[209.36204529 434.49063110]
[197.84196472 425.04937744]
[200.56503296 409.46426392]
[195.59074402 395.31307983]
[190.61645508 381.16186523]
[185.64216614 367.01068115]
[180.66787720 352.85946655]
[175.69358826 338.70828247]
[164.17350769 329.26702881]
[166.89657593 313.68194580]
[161.92228699 299.53073120]
[156.94799805 285.37954712]
[151.97370911 271.22833252]
[146.99942017 257.07714844]
[141.88468933 242.97608948]
[136.63003540 228.92658997]
[131.37536621 214.87707520]
[126.12070465 200.82757568]
[116.41886139 197.41390991]
[110.08846283 189.03034973]
[109.43381500 178.32493591]
[114.91593170 168.85105896]
[110.22397614 154.60375977]
[105.53202820 140.35646057]
[100.84008026 126.10915375]
[96.14813232 111.86185455]
[87.84560394 99.36913300]
[76.52713013 89.52574921]
[61.03659821 86.30801392]
[56.51046371 72.11775970]
[45.19199371 62.27437210]
[33.87352371 52.43098450]
[17.68177032 49.83115005]
[12.09102535 34.41441727]
[22.85256767 22.04020309]
[38.89584732 25.43803406]
[43.71691132 41.11251450]
[55.03538132 50.95590210]
[66.35385132 60.79928589]
[81.03481293 63.31295776]
[86.37052155 78.20728302]
[97.68898773 88.05066681]
[111.33909607 81.83177185]
[111.33909607 66.83177185]
[111.33909607 51.83177567]
[111.33909607 36.83177567]
[111.33909607 21.83177567]
[111.33909607 6.83177519]
[111.33909607 -8.16822529]
[111.33909607 -23.16822433]
[111.18997192 -38.16748428]
[110.89173889 -53.16452026]
[99.32420349 -63.93334961]
[98.84294128 -79.73030853]
[109.73346710 -91.18334198]
[125.53462982 -91.49756622]
[136.87188721 -80.48655701]
[137.01902771 -64.68295288]
[125.88877106 -53.46274948]
[126.18700409 -38.46571732]
[129.48223877 -31.80434799]
[126.33909607 -23.16822433]
[126.33909607 -8.16822529]
[126.33909607 6.83177519]
[126.33909607 21.83177567]
[126.33909607 36.83177567]
[126.33909607 51.83177567]
[126.33909607 66.83177185]
[126.33909607 81.83177185]
[110.39543152 107.16990662]
[115.08738708 121.41720581]
[119.77933502 135.66450500]
[124.47128296 149.91180420]
[129.16322327 164.15911865]
[144.79489136 176.83068848]
[140.17021179 195.57292175]
[145.42486572 209.62242126]
[150.67953491 223.67192078]
[155.93420410 237.72142029]
[161.90348816 244.70922852]
[161.15061951 252.10284424]
[166.12490845 266.25405884]
[171.09919739 280.40524292]
[176.07348633 294.55645752]
[181.04777527 308.70764160]
[192.92366028 319.16107178]
[189.84478760 333.73397827]
[194.81907654 347.88519287]
[199.79336548 362.03637695]
[204.76765442 376.18759155]
[209.74194336 390.33877563]
[214.71623230 404.48999023]
[226.59211731 414.94342041]
[223.51324463 429.51632690]
[228.48753357 443.66754150]
[241.40844727 444.84558105]
[252.87361145 450.81832886]
[261.18331909 460.66024780]
[265.12094116 472.87521362]
[264.13095093 485.62390137]
[258.39691162 497.00085449]
[248.80895996 505.31909180]
[253.21672058 519.65686035]
[257.62448120 533.99462891]
[262.03222656 548.33239746]
[277.40884399 561.31225586]
[272.41244507 579.95886230]
[277.38674927 594.11004639]
[282.36102295 608.26123047]
[287.33532715 622.41241455]
[292.30960083 636.56365967]
[298.52850342 650.21374512]
[305.94223022 663.25354004]
[313.35598755 676.29333496]
[320.76971436 689.33312988]
[328.18344116 702.37292480]
[335.18423462 708.32702637]
[335.61199951 715.74652100]
[342.76501465 728.93115234]
[357.98635864 733.18402100]
[365.66937256 746.99511719]
[361.25582886 762.17065430]
[347.36425781 769.70721436]
[332.23626709 765.13348389]
[324.84698486 751.16296387]
[329.58038330 736.08416748]
[322.42739868 722.89953613]
[315.14364624 709.78668213]
[307.72991943 696.74688721]
[300.31616211 683.70709229]
[292.90243530 670.66729736]
[285.48870850 657.62750244]
[282.71142578 672.36810303]
[272.50912476 683.36413574]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 134]
[8 133]
[9 132]
[10 131]
[11 130]
[15 128]
[16 127]
[17 126]
[18 125]
[23 118]
[24 117]
[26 115]
[27 114]
[28 113]
[29 112]
[30 111]
[31 110]
[33 108]
[34 107]
[35 106]
[36 105]
[37 104]
[38 102]
[39 101]
[40 100]
[41 99]
[45 97]
[46 96]
[47 95]
[48 94]
[49 93]
[50 65]
[51 64]
[53 62]
[54 61]
[55 60]
[66 92]
[67 91]
[68 90]
[69 89]
[70 88]
[71 87]
[72 86]
[73 85]
[74 83]
[75 82]
[135 155]
[136 154]
[137 153]
[138 152]
[139 151]
[141 150]
[142 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
