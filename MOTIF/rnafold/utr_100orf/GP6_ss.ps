%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:25:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGAGCUCAGGACAGGGCUGAGGAACCAUGUCUCCAUCCCCGACCGCCCUCUUCUGUCUUGGGCUGUGUCUGGGGCGUGUGCCAGCGCAGAGUGGACCGCUCCCCAAGCCCUCCCUCCAGGCUCUGC\
) } def
/len { sequence length } bind def

/coor [
[90.02958679 386.81567383]
[96.07592773 370.97656250]
[96.07592773 355.97656250]
[96.07592773 340.97656250]
[96.07592773 325.97656250]
[96.07592773 310.97656250]
[96.07592773 295.97656250]
[96.07592773 280.97656250]
[87.71566772 272.14465332]
[87.65435028 259.58135986]
[96.47448730 250.07797241]
[96.83975220 235.08241272]
[97.20501709 220.08686829]
[86.67135620 203.94432068]
[97.16430664 186.81242371]
[96.79904175 171.81686401]
[96.43377686 156.82131958]
[96.06851196 141.82575989]
[95.70324707 126.83020782]
[95.33798218 111.83465576]
[89.50989532 117.96294403]
[81.79648590 122.42522430]
[72.59372711 124.80597687]
[57.72808075 126.80913544]
[42.86243439 128.81228638]
[35.61869431 142.53482056]
[21.67766571 149.34858704]
[6.39996195 146.63354492]
[-4.33982801 135.43370056]
[-6.41203594 120.05561066]
[0.98014420 106.41246796]
[14.99426842 99.75034332]
[30.24161911 102.63095093]
[40.85927963 113.94664764]
[55.72492218 111.94348907]
[70.59056854 109.94033051]
[74.41938019 103.49128723]
[59.42049026 103.30853271]
[52.07941437 90.22768402]
[59.73731613 77.32975769]
[74.73619843 77.51283264]
[82.07699585 90.59319305]
[85.90580750 84.14414215]
[80.54734802 70.13390350]
[75.18888092 56.12366104]
[58.97459793 44.26190567]
[62.58659744 25.32799530]
[56.55236435 11.59525967]
[50.51813126 -2.13747549]
[44.48389816 -15.87021065]
[29.21085739 -16.86660385]
[16.15634727 -24.85649681]
[8.32020092 -38.00386810]
[7.50310564 -53.28755188]
[13.89282513 -67.19546509]
[26.02104759 -76.53167725]
[41.10079575 -79.15078735]
[55.66685867 -74.45095062]
[66.37205505 -63.51214600]
[70.75640869 -48.84804153]
[67.81243896 -33.82833481]
[58.21663284 -21.90444565]
[64.25086975 -8.17170906]
[70.28510284 5.56102610]
[76.31933594 19.29376221]
[86.25222015 22.18267822]
[93.05452728 30.26693153]
[94.25213623 40.98646545]
[89.19911957 50.76519775]
[94.55758667 64.77543640]
[99.91605377 78.78568268]
[113.57429504 84.98667908]
[127.64874268 79.79920959]
[141.72319031 74.61174011]
[155.79763794 69.42426300]
[169.87208557 64.23679352]
[180.14494324 52.20438004]
[194.76271057 55.06277084]
[208.83715820 49.87529755]
[222.91160583 44.68782806]
[229.59010315 30.61532021]
[243.93748474 25.55498123]
[257.31231689 32.00862885]
[271.38677979 26.82115936]
[285.46121216 21.63368797]
[289.54797363 6.66444921]
[301.67395020 -3.01750064]
[317.17648315 -3.68925476]
[330.09451294 4.90749025]
[335.46081543 19.46710968]
[331.21191406 34.39113235]
[318.98159790 43.94097137]
[303.47271729 44.44451141]
[290.64868164 35.70813751]
[276.57424927 40.89560699]
[262.49978638 46.08308029]
[256.51251221 59.67308426]
[242.31292725 65.13441467]
[228.09907532 58.76227570]
[214.02462769 63.94974899]
[199.95018005 69.13722229]
[190.68402100 80.79859161]
[175.05957031 78.31124115]
[160.98510742 83.49871826]
[146.91065979 88.68618774]
[132.83621216 93.87365723]
[118.76176453 99.06113434]
[110.33353424 111.46939087]
[110.69879913 126.46494293]
[111.06406403 141.46049500]
[111.42932892 156.45605469]
[111.79459381 171.45159912]
[112.15985870 186.44715881]
[120.54873657 193.57339478]
[123.51292419 203.94432068]
[120.29147339 214.00657654]
[112.20056915 220.45213318]
[111.83530426 235.44767761]
[111.47003937 250.44323730]
[120.67315674 266.33721924]
[111.07592773 280.97656250]
[111.07592773 295.97656250]
[111.07592773 310.97656250]
[111.07592773 325.97656250]
[111.07592773 340.97656250]
[111.07592773 355.97656250]
[111.07592773 370.97656250]
[117.12226868 386.81567383]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 127]
[3 126]
[4 125]
[5 124]
[6 123]
[7 122]
[8 121]
[11 119]
[12 118]
[13 117]
[15 113]
[16 112]
[17 111]
[18 110]
[19 109]
[20 108]
[23 36]
[24 35]
[25 34]
[43 71]
[44 70]
[45 69]
[47 65]
[48 64]
[49 63]
[50 62]
[72 107]
[73 106]
[74 105]
[75 104]
[76 103]
[78 101]
[79 100]
[80 99]
[83 96]
[84 95]
[85 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
