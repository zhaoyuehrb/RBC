%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGCAGAGUGAGGAACCGCGCCACUGCUCAGCGGCGGAGGCGAAAGCGGCCCGGGGAUCCUCCCGCCGCCUGCGCGGCCAUCGCGGUCACGGGCGCCA\
) } def
/len { sequence length } bind def

/coor [
[45.65155411 599.69000244]
[48.44024277 580.51000977]
[48.90674210 565.51727295]
[49.37323761 550.52447510]
[49.60651779 535.52630615]
[49.60651779 520.52630615]
[39.24303436 512.69818115]
[35.27420425 500.12631226]
[39.38470078 487.39428711]
[50.26933670 479.28256226]
[50.73583603 464.28982544]
[51.20233154 449.29708862]
[51.66883087 434.30435181]
[49.65641403 432.11471558]
[48.47211075 428.92623901]
[48.52904510 425.08282471]
[50.09501648 421.08160400]
[53.24030685 417.51263428]
[55.56378174 402.69366455]
[57.88725281 387.87472534]
[60.21072769 373.05575562]
[62.53419876 358.23681641]
[50.57697296 347.10897827]
[47.51516724 330.89636230]
[54.73348618 315.87658691]
[69.59718323 307.98379517]
[71.45866394 293.09973145]
[73.32014465 278.21569824]
[75.18162537 263.33163452]
[69.08358002 249.74256897]
[78.47364807 237.00926208]
[80.33512878 222.12521362]
[82.19661713 207.24116516]
[83.82639313 192.32995605]
[85.22408295 177.39521790]
[86.62177277 162.46047974]
[88.01946259 147.52574158]
[89.41715240 132.59100342]
[90.81484222 117.65626526]
[72.86365509 104.80458832]
[74.01029205 76.23912048]
[70.77001953 61.59328079]
[67.52975464 46.94744110]
[53.57948303 39.88175201]
[47.48226166 25.48182297]
[52.11701584 10.54686069]
[65.29534912 2.12869763]
[80.79486084 4.20213223]
[91.29715729 15.78815174]
[91.84336853 31.41619301]
[82.17559814 43.70717239]
[85.41586304 58.35301208]
[88.65612793 72.99885559]
[96.08277893 74.04521942]
[118.36272430 77.18431854]
[125.52352905 64.00391388]
[124.55782318 47.63322449]
[138.39939880 38.83874130]
[152.80921936 46.66747284]
[152.96369934 63.06589127]
[138.70393372 71.16471100]
[131.54312134 84.34511566]
[129.89816284 103.56834412]
[119.15398407 116.07629395]
[105.74958038 119.05394745]
[104.35189056 133.98869324]
[102.95420074 148.92343140]
[101.55651093 163.85816956]
[100.15882874 178.79290771]
[98.76113892 193.72764587]
[101.10508728 202.74421692]
[97.08065796 209.10264587]
[95.21917725 223.98669434]
[93.35769653 238.87074280]
[99.32260132 253.52442932]
[90.06567383 265.19311523]
[88.20419312 280.07717896]
[86.34271240 294.96121216]
[84.48123169 309.84527588]
[95.28063965 318.57037354]
[100.27570343 331.40759277]
[98.24591827 344.92196655]
[89.83517456 355.55471802]
[77.35315704 360.56027222]
[75.02968597 375.37924194]
[72.70620728 390.19818115]
[70.38273621 405.01715088]
[68.05926514 419.83609009]
[66.66157532 434.77084351]
[66.19507599 449.76358032]
[65.72857666 464.75631714]
[65.26208496 479.74908447]
[77.44837189 492.18038940]
[76.97197723 509.24649048]
[64.60651398 520.52630615]
[64.60651398 535.52630615]
[67.78042603 544.28527832]
[64.36598206 550.99102783]
[63.89948654 565.98376465]
[63.43298721 580.97650146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 100]
[3 99]
[4 98]
[5 96]
[6 95]
[10 92]
[11 91]
[12 90]
[13 89]
[18 88]
[19 87]
[20 86]
[21 85]
[22 84]
[26 79]
[27 78]
[28 77]
[29 76]
[31 74]
[32 73]
[33 72]
[34 70]
[35 69]
[36 68]
[37 67]
[38 66]
[39 65]
[41 53]
[42 52]
[43 51]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
