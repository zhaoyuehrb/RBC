%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:41:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUCUGUAAGGAGACUUGGAGUCGCUGCAGCCAAGGCUGGAGCCAUGAGACGGCCCCCUGGCAAUGGAGAGGCGGCCAGCGAAGGUCCAGGUGGCUGGGGUCUAUGGGGAGUCCAGGAGUCCAGGAGGCUGUGCUGUGCCGGUC\
) } def
/len { sequence length } bind def

/coor [
[239.14744568 129.62821960]
[249.44396973 118.72030640]
[234.48591614 117.59935760]
[219.52786255 116.47840881]
[204.56980896 115.35745239]
[189.61174011 114.23650360]
[174.65368652 113.11555481]
[161.38380432 119.88010406]
[148.20042419 111.13315582]
[133.24237061 110.01219940]
[128.60377502 125.13374329]
[116.95374298 137.81019592]
[99.69302368 144.79602051]
[79.69654083 143.66763306]
[60.83800888 133.47123718]
[49.52087021 143.31614685]
[38.20373154 153.16107178]
[26.88659477 163.00598145]
[18.90473175 177.96347046]
[2.32219720 174.43417358]
[1.12305391 157.52268982]
[17.04167747 151.68884277]
[28.35881615 141.84393311]
[39.67595291 131.99900818]
[50.99309158 122.15409851]
[45.36408615 108.25034332]
[30.38549042 109.05139160]
[15.40689468 109.85243225]
[2.03960991 118.31566620]
[-11.08269596 111.26908112]
[-26.06129074 112.07012939]
[-41.03988647 112.87117004]
[-56.01848221 113.67221832]
[-69.45974731 123.06713104]
[-84.20003510 115.87992096]
[-85.07579803 99.50417328]
[-71.18613434 90.78585815]
[-56.81952667 98.69361877]
[-41.84093094 97.89257812]
[-26.86233711 97.09152985]
[-11.88374138 96.29048157]
[0.41217390 87.88455200]
[14.60584927 94.87384033]
[29.58444405 94.07279205]
[44.56304169 93.27175140]
[47.88918686 86.54963684]
[34.36019135 80.07150269]
[20.83119583 73.59336090]
[6.04182339 71.08847809]
[3.63168192 56.28336716]
[16.86293221 49.21696854]
[27.82708549 59.45473862]
[41.18428421 66.28008270]
[54.54148102 73.10542297]
[57.86763000 66.38331604]
[49.41782761 53.98973083]
[40.96802521 41.59614944]
[25.96618271 34.97220230]
[24.47101593 18.64135551]
[38.02062607 9.40338707]
[52.67633820 16.76152611]
[53.36160660 33.14634705]
[61.81140900 45.53993225]
[70.26120758 57.93351364]
[103.01462555 54.18203354]
[127.38651276 70.41186523]
[134.36331177 95.05414581]
[149.32138062 96.17509460]
[163.66116333 89.49071503]
[175.77464294 98.15749359]
[190.73269653 99.27844238]
[205.69075012 100.39939880]
[220.64881897 101.52034760]
[235.60687256 102.64129639]
[250.56492615 103.76225281]
[265.56405640 103.92253113]
[280.54266357 103.12149048]
[295.52127075 102.32044220]
[310.49044800 101.35939026]
[325.44848633 100.23844147]
[340.40655518 99.11748505]
[355.36462402 97.99653625]
[370.32266235 96.87557983]
[383.50604248 88.12863159]
[396.77593994 94.89318848]
[411.73400879 93.77223206]
[426.65933228 83.04338074]
[442.17208862 91.18350220]
[457.10278320 89.74315643]
[472.03344727 88.30281067]
[485.02691650 79.27613068]
[498.43832397 85.75556946]
[513.36901855 84.31522369]
[521.72265625 69.64659119]
[537.01110840 62.89035797]
[553.15802002 66.51625824]
[563.87316895 78.90973663]
[578.76965332 77.15065002]
[593.66613770 75.39157104]
[608.56262207 73.63249207]
[623.45916748 71.87340546]
[636.25671387 62.57112122]
[649.80352783 68.76248169]
[664.70007324 67.00339508]
[679.59655762 65.24431610]
[692.40826416 55.00752258]
[707.57873535 61.23554993]
[709.50189209 77.52153778]
[696.19934082 87.11186218]
[681.35565186 80.14081573]
[666.45910645 81.89989471]
[651.56262207 83.65897369]
[639.83056641 92.83544159]
[625.21820068 86.76990509]
[610.32171631 88.52899170]
[595.42523193 90.28807068]
[580.52874756 92.04714966]
[565.63226318 93.80623627]
[560.19128418 106.04073334]
[549.31762695 114.03876495]
[535.80236816 115.61404419]
[523.18109131 110.24633026]
[514.80938721 99.24591064]
[499.87866211 100.68625641]
[487.95315552 109.60991669]
[473.47381592 103.23349762]
[458.54312134 104.67384338]
[443.61242676 106.11418915]
[435.64184570 115.27230072]
[423.16516113 116.55702972]
[412.85494995 108.73029327]
[397.89688110 109.85124207]
[385.78341675 118.51802063]
[371.44363403 111.83364105]
[356.48556519 112.95458984]
[341.52749634 114.07554626]
[326.56945801 115.19649506]
[311.61138916 116.31744385]
[305.13040161 119.97970581]
[296.32229614 117.29904175]
[281.34371948 118.10008240]
[266.36511230 118.90113068]
[276.42617798 130.02655029]
[275.87094116 145.01626587]
[265.01434326 155.36685181]
[250.01521301 155.20658875]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 75]
[3 74]
[4 73]
[5 72]
[6 71]
[7 70]
[9 68]
[10 67]
[15 25]
[16 24]
[17 23]
[18 22]
[26 45]
[27 44]
[28 43]
[30 41]
[31 40]
[32 39]
[33 38]
[55 64]
[56 63]
[57 62]
[76 142]
[77 141]
[78 140]
[79 138]
[80 137]
[81 136]
[82 135]
[83 134]
[85 132]
[86 131]
[88 128]
[89 127]
[90 126]
[92 124]
[93 123]
[97 118]
[98 117]
[99 116]
[100 115]
[101 114]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
