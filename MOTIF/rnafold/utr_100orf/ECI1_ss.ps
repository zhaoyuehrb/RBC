%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCGCGACCUUUAUCCCGCGCGUUGCGGUCAAGAUGGCGCUGGUGGCUUCUGUGCGAGUCCCGGCGCGCGUUCUGCUCCGCGCGGGGGCCCGGCUCCCGGGCGCGGCCCUCGGGCGGACGGAGCGGGCGGCCG\
) } def
/len { sequence length } bind def

/coor [
[71.61169434 294.11004639]
[82.74008179 283.12399292]
[81.35605621 268.18798828]
[79.97203064 253.25198364]
[78.58800507 238.31596375]
[77.20397949 223.37995911]
[75.81995392 208.44393921]
[66.68529510 200.42857361]
[65.45771790 187.93402100]
[73.34651184 177.65567017]
[72.30784607 162.69168091]
[58.42144012 138.50074768]
[57.75379944 114.90201569]
[67.14932251 97.73790741]
[81.28755951 90.33838654]
[94.17608643 92.89031982]
[84.32939148 81.57472992]
[74.48268890 70.25914001]
[64.63599396 58.94355011]
[54.78930283 47.62795639]
[44.94260788 36.31236649]
[35.09590912 24.99677658]
[25.24921608 13.68118572]
[15.40252018 2.36559558]
[-0.12433252 1.11875975]
[-9.94908714 -10.49712849]
[-8.66473293 -25.29192543]
[-18.51142883 -36.60751724]
[-28.35812378 -47.92310715]
[-38.20481873 -59.23869705]
[-42.56128311 -60.54676819]
[-45.89465714 -62.96860886]
[-47.97513199 -66.02692413]
[-48.75873947 -69.21921539]
[-48.37868118 -72.08304596]
[-57.13930130 -84.25890350]
[-65.89992523 -96.43476105]
[-74.66054535 -108.61061859]
[-83.56120300 -120.68448639]
[-92.60072327 -132.65473938]
[-101.64024353 -144.62500000]
[-110.67976379 -156.59526062]
[-119.71928406 -168.56552124]
[-128.75880432 -180.53578186]
[-137.79832458 -192.50602722]
[-145.53926086 -197.52636719]
[-146.90458679 -204.85879517]
[-155.66520691 -217.03465271]
[-164.42582703 -229.21051025]
[-173.18644714 -241.38636780]
[-181.94706726 -253.56222534]
[-197.58358765 -255.85897827]
[-206.94905090 -268.58938599]
[-204.48712158 -284.20074463]
[-191.65840149 -293.43109131]
[-176.07394409 -290.80426025]
[-166.97973633 -277.87866211]
[-169.77120972 -262.32284546]
[-161.01058960 -250.14698792]
[-152.24996948 -237.97113037]
[-143.48934937 -225.79527283]
[-134.72872925 -213.61941528]
[-125.82806396 -201.54554749]
[-116.78854370 -189.57530212]
[-107.74902344 -177.60504150]
[-98.70951080 -165.63478088]
[-89.66999054 -153.66452026]
[-80.63047028 -141.69425964]
[-71.59095001 -129.72399902]
[-64.99053955 -126.25079346]
[-62.48468399 -117.37123871]
[-53.72406387 -105.19538116]
[-44.96344376 -93.01952362]
[-36.20282364 -80.84366608]
[-26.88922882 -69.08539581]
[-17.04253387 -57.76980209]
[-7.19583797 -46.45421219]
[2.65085769 -35.13862228]
[17.48122025 -34.36666489]
[27.62836456 -23.03131485]
[26.71811104 -7.48110008]
[36.56480789 3.83449078]
[46.41150284 15.15008163]
[56.25819778 26.46567154]
[66.10488892 37.78126144]
[75.95159149 49.09685135]
[85.79828644 60.41244507]
[95.64498138 71.72803497]
[105.49167633 83.04362488]
[119.76818848 87.64591217]
[134.36976624 84.21165466]
[148.97132874 80.77739716]
[163.57290649 77.34313965]
[178.17446899 73.90888214]
[192.77604675 70.47462463]
[206.81015015 60.96250534]
[219.83555603 71.81493378]
[213.01303101 87.33554840]
[196.21029663 85.07619476]
[181.60873413 88.51045227]
[167.00715637 91.94470978]
[152.40559387 95.37896729]
[137.80401611 98.81322479]
[123.20244598 102.24748230]
[122.25213623 109.68703461]
[134.18753052 118.77254486]
[120.35151672 124.56613159]
[119.40120697 132.00569153]
[132.67063904 139.00012207]
[145.94006348 145.99455261]
[162.29731750 144.82301331]
[171.26521301 158.55285645]
[163.61836243 173.06001282]
[147.22317505 173.42076111]
[138.94563293 159.26399231]
[125.67620087 152.26956177]
[112.40676880 145.27511597]
[106.12303162 149.36959839]
[114.31179047 161.93717957]
[101.74407196 170.12574768]
[93.55557251 157.55854797]
[87.27184296 161.65301514]
[88.31050873 176.61700439]
[98.95858765 191.58929443]
[90.75596619 207.05992126]
[92.13999176 221.99592590]
[93.52401733 236.93194580]
[94.90804291 251.86795044]
[96.29206848 266.80395508]
[97.67609406 281.73999023]
[110.63368225 290.49411011]
[114.88298798 305.54327393]
[108.41762543 319.78170776]
[94.29033661 326.48648071]
[79.17160034 322.49176025]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 130]
[3 129]
[4 128]
[5 127]
[6 126]
[7 125]
[10 123]
[11 122]
[16 89]
[17 88]
[18 87]
[19 86]
[20 85]
[21 84]
[22 83]
[23 82]
[24 81]
[27 78]
[28 77]
[29 76]
[30 75]
[35 74]
[36 73]
[37 72]
[38 71]
[39 69]
[40 68]
[41 67]
[42 66]
[43 65]
[44 64]
[45 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[90 104]
[91 103]
[92 102]
[93 101]
[94 100]
[95 99]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
