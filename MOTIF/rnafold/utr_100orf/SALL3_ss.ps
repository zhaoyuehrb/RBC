%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:53:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCUCGGCGCAAGCAGGCCAAGCCCCAGCACCUCAAGUCGGACGAGGAGCUGCUGCCGCCUGACGGGGCUCCCGAGCACGCCGCCCCGGGGGAAGGUG\
) } def
/len { sequence length } bind def

/coor [
[150.82411194 199.35061646]
[149.96369934 192.50379944]
[141.60592651 180.04798889]
[135.15144348 176.17948914]
[133.18896484 167.07228088]
[125.22258759 154.36256409]
[117.25622559 141.65283203]
[109.28985596 128.94311523]
[101.32348633 116.23339844]
[86.33576202 108.86359406]
[85.71647644 92.17340088]
[77.35868835 79.71758270]
[59.37605667 79.66569519]
[45.06663895 69.03225708]
[39.91949844 52.12556839]
[45.77247238 35.61437607]
[36.65648270 23.70225143]
[27.54049110 11.79012680]
[18.42449951 -0.12199838]
[9.30850983 -12.03412342]
[-1.75921047 -12.87760735]
[-10.29828358 -19.61667633]
[-13.55499458 -29.76301193]
[-10.65605450 -39.78660202]
[-19.01383781 -52.24242401]
[-34.26375961 -55.41694641]
[-42.56230545 -68.16797638]
[-39.44190216 -82.68688965]
[-47.79968643 -95.14270782]
[-56.15747070 -107.59852600]
[-64.51525116 -120.05434418]
[-78.62947083 -127.20272827]
[-79.29595947 -142.08241272]
[-87.65374756 -154.53823853]
[-96.01152802 -166.99404907]
[-104.36931610 -179.44987488]
[-119.79127502 -179.04171753]
[-132.97386169 -187.05564880]
[-139.71057129 -200.93441772]
[-137.85171509 -216.24938965]
[-127.99047089 -228.11360168]
[-113.27352142 -232.74121094]
[-98.39698792 -228.65559387]
[-88.10791779 -217.16044617]
[-85.68952179 -201.92381287]
[-91.91349792 -187.80766296]
[-83.55570984 -175.35183716]
[-75.19792938 -162.89602661]
[-66.84014130 -150.44020081]
[-53.32373047 -144.18273926]
[-52.05943298 -128.41212463]
[-43.70164871 -115.95630646]
[-35.34386444 -103.50048828]
[-26.98608017 -91.04467010]
[-12.36794949 -88.42822266]
[-3.71452975 -75.91530609]
[-6.55801868 -60.60020447]
[1.79976523 -48.14438629]
[19.70632172 -41.13238907]
[21.22063446 -21.15011406]
[30.33662415 -9.23798847]
[39.45261383 2.67413592]
[48.56860733 14.58626080]
[57.68459702 26.49838448]
[69.84145355 24.39228058]
[81.79155731 27.74235153]
[91.19175720 35.95684052]
[96.17095947 47.48391724]
[95.70235443 60.10458755]
[89.81450653 71.35979462]
[98.17229462 83.81562042]
[109.54396820 86.80199432]
[115.94232941 96.66578674]
[114.03321075 108.26702881]
[121.99958038 120.97674561]
[129.96594238 133.68646240]
[137.93231201 146.39619446]
[145.89868164 159.10591125]
[154.06173706 171.69020081]
[162.41952515 184.14602661]
[171.16064453 196.33589172]
[180.27662659 208.24801636]
[189.39262390 220.16014099]
[198.50860596 232.07226562]
[215.62164307 238.64427185]
[217.40150452 256.02627563]
[226.88356018 267.64913940]
[236.36560059 279.27197266]
[251.06314087 287.72293091]
[247.01113892 304.18554688]
[230.07019043 304.84921265]
[224.74273682 288.75402832]
[215.26069641 277.13116455]
[205.77865601 265.50830078]
[193.67372131 263.93078613]
[185.68891907 254.17028809]
[186.59648132 241.18826294]
[177.48049927 229.27613831]
[168.36450195 217.36399841]
[159.24851990 205.45187378]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 80]
[3 79]
[5 78]
[6 77]
[7 76]
[8 75]
[9 74]
[11 71]
[12 70]
[16 64]
[17 63]
[18 62]
[19 61]
[20 60]
[24 58]
[25 57]
[28 54]
[29 53]
[30 52]
[31 51]
[33 49]
[34 48]
[35 47]
[36 46]
[81 100]
[82 99]
[83 98]
[84 97]
[86 94]
[87 93]
[88 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
