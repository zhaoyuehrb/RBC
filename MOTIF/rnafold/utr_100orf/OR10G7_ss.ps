%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:25:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCCAACGCCACCCUACUGACAGCGUUCAUCCUCACGGGCCUUCCCCAUGCCCCAGGGCUGGACGCCCCCCUCUUUGGAAUCUUCCUGGUGGUUUACG\
) } def
/len { sequence length } bind def

/coor [
[88.82618713 309.56219482]
[73.67620087 310.48004150]
[59.21889496 305.85934448]
[47.40949631 296.32507324]
[39.84513092 283.16662598]
[37.54881668 268.16357422]
[40.83111191 253.34497070]
[49.24811172 240.71490479]
[61.66148758 231.98149109]
[76.39243317 228.32585144]
[78.25391388 213.44180298]
[80.11539459 198.55775452]
[81.97687531 183.67370605]
[83.83835602 168.78965759]
[85.69983673 153.90560913]
[72.81496429 148.69583130]
[61.61838531 140.46185303]
[52.80544662 129.71504211]
[46.92346191 117.12282562]
[44.33773041 103.46720886]
[45.20883179 89.59626770]
[49.48266602 76.37144470]
[56.89381409 64.61403656]
[66.98201752 55.05422592]
[79.12075806 48.28571701]
[75.42657471 33.74773026]
[71.73239136 19.20974541]
[68.03820801 4.67176104]
[64.34402466 -9.86622429]
[60.64984512 -24.40420914]
[56.95565796 -38.94219208]
[53.03583145 -53.42097092]
[48.89130402 -67.83703613]
[44.74678040 -82.25309753]
[40.60225296 -96.66915894]
[30.60418892 -101.49042511]
[25.11049271 -110.87925720]
[25.77790260 -121.51451874]
[32.13235092 -129.79083252]
[28.89208412 -144.43666077]
[25.65181732 -159.08250427]
[22.41154861 -173.72834778]
[7.90264654 -178.97193909]
[-1.44995439 -191.24110413]
[-2.66187310 -206.62080383]
[4.65360975 -220.20339966]
[18.16214943 -227.65476990]
[33.55322266 -226.59719849]
[45.91558838 -217.36814880]
[51.30446625 -202.91258240]
[48.00028229 -187.84320068]
[37.05739212 -176.96861267]
[40.29765701 -162.32276917]
[43.53792572 -147.67694092]
[46.77819443 -133.03109741]
[60.89484024 -119.97225952]
[55.01831818 -100.81369019]
[59.16284180 -86.39762115]
[63.30736923 -71.98155975]
[67.45189667 -57.56549454]
[72.41265106 -51.90719604]
[71.49364471 -42.63637924]
[75.18782806 -28.09839249]
[78.88201141 -13.56040764]
[82.57619476 0.97757751]
[86.27037811 15.51556206]
[89.96456146 30.05354691]
[93.65874481 44.59153366]
[103.94388580 44.36947250]
[114.09483337 46.04033279]
[123.76617432 49.54726410]
[132.62882996 54.77092743]
[140.38124084 61.53358841]
[146.75961304 69.60513306]
[151.54692078 78.71090698]
[154.58024597 88.54108429]
[155.75639343 98.76116943]
[155.03533936 109.02340698]
[152.44160461 118.97860718]
[165.73178101 125.93356323]
[179.02194214 132.88851929]
[195.37564087 131.66833496]
[204.38432312 145.37145996]
[196.78063965 159.90129089]
[180.38659668 160.31077576]
[172.06700134 146.17868042]
[158.77682495 139.22372437]
[145.48664856 132.26878357]
[125.85858154 149.41299438]
[100.58388519 155.76708984]
[98.72240448 170.65113831]
[96.86092377 185.53518677]
[94.99944305 200.41923523]
[93.13796234 215.30328369]
[91.27648163 230.18733215]
[104.65338898 237.35830688]
[114.53356171 248.87986755]
[119.58079529 263.19384766]
[119.11248016 278.36437988]
[113.19196320 292.33978271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 95]
[11 94]
[12 93]
[13 92]
[14 91]
[15 90]
[25 68]
[26 67]
[27 66]
[28 65]
[29 64]
[30 63]
[31 62]
[32 60]
[33 59]
[34 58]
[35 57]
[39 55]
[40 54]
[41 53]
[42 52]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
