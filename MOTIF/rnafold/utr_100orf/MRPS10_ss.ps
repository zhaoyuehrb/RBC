%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:07:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCUGUAACCCCGGAAGCAAUCCUGAGAGGUCGGGACCGGCAAGAUGGCGGCGCGGACAGCGUUCGGUGCUGUGUGCCGGCGCCUCUGGCAGGGAUUGGGGAAUUUUUCUGUAAACACUUCUAAGGGCAAUACAGCCAAAAAUG\
) } def
/len { sequence length } bind def

/coor [
[106.41851044 392.70306396]
[108.24255371 377.54931641]
[116.46815491 364.69232178]
[129.46211243 356.68484497]
[127.86230469 341.77038574]
[126.26249695 326.85595703]
[124.66268921 311.94149780]
[123.06288910 297.02706909]
[121.46308136 282.11264038]
[108.92161560 267.44973755]
[117.17153931 249.10795593]
[114.93590546 234.27549744]
[112.70027161 219.44302368]
[101.03044128 206.37696838]
[107.80549622 189.28974915]
[105.25341034 174.50845337]
[102.70132446 159.72715759]
[100.14923096 144.94584656]
[97.59714508 130.16455078]
[86.42141724 128.44331360]
[76.23102570 122.56828308]
[68.56774139 113.05229950]
[64.72084808 100.97669983]
[50.25290680 104.93634033]
[35.78496933 108.89598846]
[21.31702995 112.85562897]
[6.84909201 116.81526947]
[-7.61884642 120.77490997]
[-18.76175117 132.80685425]
[-34.69103622 128.90943909]
[-39.02001953 113.09197998]
[-27.29541397 101.62612915]
[-11.57848835 106.30697632]
[2.88945007 102.34732819]
[17.35738754 98.38768768]
[31.82532692 94.42804718]
[46.29326630 90.46840668]
[60.76120377 86.50876617]
[68.12196350 73.43898010]
[64.00794983 59.01418304]
[52.78241348 47.86528778]
[56.73233795 33.50397491]
[52.61832428 19.07917213]
[41.39278412 7.93027925]
[45.34270859 -6.43103552]
[41.22869492 -20.85583687]
[37.11468506 -35.28063965]
[31.71508026 -42.73804474]
[33.07041931 -50.05776978]
[29.26560211 -64.56719208]
[25.46078300 -79.07661438]
[21.65596390 -93.58603668]
[10.67123604 -104.97227478]
[14.92715645 -119.24590302]
[11.12233734 -133.75532532]
[7.16269588 -148.22326660]
[3.04868293 -162.64805603]
[-8.17685699 -173.79695129]
[-4.22693300 -188.15826416]
[-8.34094620 -202.58306885]
[-12.45495796 -217.00787354]
[-16.56897163 -231.43267822]
[-20.68298340 -245.85748291]
[-24.79699707 -260.28228760]
[-38.06216049 -269.30529785]
[-39.13465118 -285.31246948]
[-27.19174194 -296.02444458]
[-11.39501286 -293.22393799]
[-3.86236238 -279.05923462]
[-10.37219524 -264.39630127]
[-6.25818205 -249.97149658]
[-2.14416957 -235.54669189]
[1.96984315 -221.12188721]
[6.08385563 -206.69708252]
[10.19786835 -192.27227783]
[21.12914658 -182.15515137]
[17.47348404 -166.76206970]
[21.58749771 -152.33728027]
[26.48133850 -146.72784424]
[25.63175964 -137.56013489]
[29.43657875 -123.05072021]
[40.14916229 -112.70229340]
[36.16538620 -97.39086151]
[39.97020721 -82.88143921]
[43.77502441 -68.37200928]
[47.57984161 -53.86259079]
[51.53948593 -39.39465332]
[55.65349579 -24.96985054]
[59.76750946 -10.54504871]
[70.69879150 -0.42791364]
[67.04312897 14.96515942]
[71.15714264 29.38996124]
[82.08841705 39.50709534]
[78.43275452 54.90016937]
[82.54676819 69.32497406]
[101.64465332 66.42510986]
[118.43146515 73.91757202]
[127.99502563 88.51293945]
[142.85052490 86.43592834]
[157.70602417 84.35890961]
[170.30189514 74.78527069]
[183.97793579 80.68572235]
[198.83343506 78.60870361]
[213.68894958 76.53169250]
[228.54444885 74.45467377]
[243.39378357 66.27337646]
[255.36605835 78.27758026]
[247.14523315 93.10507202]
[230.62145996 89.31018066]
[215.76596069 91.38719940]
[200.91046143 93.46421051]
[186.05494690 95.54122162]
[174.52165222 104.96630859]
[159.78305054 99.21441650]
[144.92753601 101.29142761]
[130.07203674 103.36844635]
[128.20133972 110.97077179]
[124.44287109 117.83872223]
[119.04819489 123.51255035]
[112.37844086 127.61245728]
[114.93053436 142.39376831]
[117.48262024 157.17506409]
[120.03471375 171.95635986]
[122.58679962 186.73765564]
[132.68685913 194.83378601]
[134.47636414 207.24812317]
[127.53273773 217.20739746]
[129.76837158 232.03985596]
[132.00399780 246.87231445]
[141.18493652 252.86952209]
[145.42541504 262.74310303]
[143.53202820 273.09658813]
[136.37753296 280.51281738]
[137.97732544 295.42727661]
[139.57713318 310.34170532]
[141.17694092 325.25616455]
[142.77674866 340.17059326]
[144.37655640 355.08505249]
[158.77320862 360.15444946]
[169.53852844 370.97439575]
[174.53503418 385.39651489]
[172.77067566 400.55731201]
[164.59577942 413.44659424]
[151.63345337 421.50518799]
[136.45739746 423.13305664]
[122.08081055 418.00698853]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 138]
[5 137]
[6 136]
[7 135]
[8 134]
[9 133]
[11 129]
[12 128]
[13 127]
[15 124]
[16 123]
[17 122]
[18 121]
[19 120]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[28 33]
[39 95]
[40 94]
[42 92]
[43 91]
[45 89]
[46 88]
[47 87]
[49 86]
[50 85]
[51 84]
[52 83]
[54 81]
[55 80]
[56 78]
[57 77]
[59 75]
[60 74]
[61 73]
[62 72]
[63 71]
[64 70]
[98 116]
[99 115]
[100 114]
[102 112]
[103 111]
[104 110]
[105 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
