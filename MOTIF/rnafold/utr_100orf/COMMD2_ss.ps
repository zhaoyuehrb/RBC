%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGAAGUGGCGAAGGCGGGGUCGGCGCUGCCGGGUGAAAUCGUAGGACAGUGAAGAUGCUGCUGGAAUUGUCCGAGGAGCAUAAGGAACACCUGGCCUUCCUGCCUCAAGUGGACAGCGCGGUGGUCGCCGAGUUUGGGCGGAUUGCUGUGGAAU\
) } def
/len { sequence length } bind def

/coor [
[319.25729370 316.17919922]
[318.71719360 299.00955200]
[324.05865479 282.65719604]
[312.06701660 273.64605713]
[297.24417114 272.18579102]
[290.85986328 257.70989990]
[278.86822510 248.69876099]
[266.87655640 239.68763733]
[254.88493347 230.67649841]
[247.60652161 229.16374207]
[242.74497986 221.36119080]
[230.93722534 212.11041260]
[219.12947083 202.85961914]
[207.32171631 193.60884094]
[195.51397705 184.35806274]
[183.70622253 175.10726929]
[168.91578674 173.34880066]
[162.82424927 158.74729919]
[151.01649475 149.49652100]
[139.20874023 140.24572754]
[127.40099335 130.99494934]
[108.25380707 140.53857422]
[86.89935303 139.24122620]
[69.04831696 127.44985962]
[59.47449875 108.31774902]
[44.47753906 108.61980438]
[29.48057938 108.92185974]
[14.48362160 109.22391510]
[-0.51333672 109.52597046]
[-15.50649357 109.97901917]
[-30.49432755 110.58300781]
[-36.08403778 124.74899292]
[-46.95686340 135.41207886]
[-61.22901917 140.72483826]
[-76.42777252 139.76679993]
[-89.91983795 132.70394897]
[-99.36764526 120.75996399]
[-103.13430023 106.00421143]
[-100.56720734 90.99321747]
[-92.11112976 78.32772827]
[-79.23113251 70.20211792]
[-64.15875244 68.02419281]
[-49.50537872 72.17129517]
[-37.80978775 81.92491150]
[-31.09831810 95.59517670]
[-16.11048317 94.99118805]
[-9.51585579 91.55977631]
[-0.81539249 94.52901459]
[14.18156624 94.22695923]
[29.17852402 93.92490387]
[44.17548370 93.62284851]
[59.17243958 93.32079315]
[61.55210495 84.72711945]
[65.71800995 76.84300995]
[71.47660065 70.03473663]
[78.56035614 64.61860657]
[73.24127960 50.59336090]
[67.92221069 36.56811905]
[62.60313797 22.54287529]
[57.28406143 8.51763153]
[45.15595245 -1.64206934]
[47.87730026 -16.28595924]
[42.55822754 -30.31120300]
[37.09820557 -44.28217697]
[31.49778175 -58.19746780]
[25.89735985 -72.11275482]
[12.66155338 -81.79498291]
[14.69746494 -98.06726074]
[29.91072464 -104.19007111]
[42.65123367 -93.86478424]
[39.81264877 -77.71318054]
[45.41307068 -63.79788971]
[51.01349258 -49.88259888]
[56.45961380 -44.82261658]
[56.58347321 -35.63027573]
[61.90254593 -21.60503387]
[73.65019989 -12.44851208]
[71.30930328 3.19855809]
[76.62837982 17.22380257]
[81.94745636 31.24904633]
[87.26652527 45.27428818]
[92.58560181 59.29953384]
[104.08747101 58.83212662]
[115.27288055 61.55210495]
[125.27579498 67.24888611]
[133.32174683 75.48139191]
[138.78779602 85.61222839]
[141.25073242 96.85703278]
[140.51986694 108.34516907]
[136.65177917 119.18719482]
[148.45953369 128.43797302]
[160.26728821 137.68876648]
[172.07504272 146.93954468]
[187.71003723 149.35969543]
[192.95700073 163.29951477]
[204.76475525 172.55030823]
[216.57250977 181.80108643]
[228.38026428 191.05186462]
[240.18800354 200.30265808]
[251.99575806 209.55343628]
[263.89605713 218.68486023]
[275.88769531 227.69598389]
[287.87933350 236.70712280]
[299.87097168 245.71826172]
[315.55154419 247.82307434]
[321.07815552 261.65441895]
[333.06979370 270.66555786]
[343.56848145 262.85437012]
[355.72653198 258.05191040]
[368.70227051 256.58303833]
[381.59939575 258.54214478]
[393.52886963 263.78698730]
[403.67016602 271.94918823]
[411.32781982 282.45989990]
[415.97906494 294.58953857]
[417.30944824 307.49847412]
[415.23419189 320.29501343]
[409.90350342 332.09719849]
[421.32919312 341.81591797]
[432.75488281 351.53463745]
[444.18054199 361.25338745]
[455.60623169 370.97210693]
[467.03192139 380.69085693]
[478.45761108 390.40957642]
[489.88330078 400.12829590]
[501.30899048 409.84704590]
[512.73468018 419.56576538]
[524.25762939 429.16897583]
[535.87670898 438.65563965]
[547.49578857 448.14233398]
[562.82312012 445.04284668]
[576.53204346 452.56607056]
[582.14965820 467.15979004]
[577.02343750 481.93328857]
[563.57391357 489.91094971]
[548.15142822 487.32598877]
[538.03808594 475.39895630]
[538.00909424 459.76138306]
[526.39001465 450.27471924]
[514.77093506 440.78802490]
[507.55935669 438.98342896]
[503.01593018 430.99145508]
[491.59024048 421.27273560]
[480.16455078 411.55398560]
[468.73886108 401.83526611]
[457.31320190 392.11651611]
[445.88751221 382.39779663]
[434.46182251 372.67907715]
[423.03613281 362.96032715]
[411.61044312 353.24160767]
[400.18475342 343.52288818]
[385.60916138 352.33251953]
[368.88171387 355.66223145]
[351.99511719 353.09832764]
[336.96679688 344.93026733]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 107]
[4 106]
[6 104]
[7 103]
[8 102]
[9 101]
[11 100]
[12 99]
[13 98]
[14 97]
[15 96]
[16 95]
[18 93]
[19 92]
[20 91]
[21 90]
[25 52]
[26 51]
[27 50]
[28 49]
[29 48]
[30 46]
[31 45]
[56 82]
[57 81]
[58 80]
[59 79]
[60 78]
[62 76]
[63 75]
[64 73]
[65 72]
[66 71]
[118 151]
[119 150]
[120 149]
[121 148]
[122 147]
[123 146]
[124 145]
[125 144]
[126 143]
[127 142]
[128 140]
[129 139]
[130 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
