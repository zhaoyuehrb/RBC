%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGCUUAAAAGGGAGAUGAAGCCAGAAAGUGACAGGCCACGGAAAGUCCGGUUUCGGAUCGCGUCCUCUCACAGUGGGCGAGUUCUGAAGGAAGUGUAUG\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 410.74154663]
[92.50000000 395.74154663]
[92.50000000 380.74154663]
[92.50000000 365.74154663]
[92.50000000 350.74154663]
[78.13413239 346.57031250]
[65.51298523 338.51190186]
[55.66399765 327.21218872]
[49.39180374 313.58132935]
[47.21248627 298.72042847]
[49.31111145 283.83258057]
[55.52607346 270.12554932]
[65.36148071 258.71371460]
[78.02671051 250.52751160]
[92.50000000 246.23753357]
[92.50000000 231.23753357]
[92.50000000 216.23753357]
[79.53267670 208.90853882]
[71.92427826 195.98690796]
[71.80444336 180.89215088]
[79.30548859 167.67733765]
[92.50000000 159.94091797]
[92.50000000 144.94091797]
[92.50000000 129.94091797]
[80.29651642 123.75881958]
[71.96343994 112.90969849]
[69.13768005 99.52468109]
[72.37429810 86.23303986]
[81.03751373 75.64568329]
[93.42559052 69.84231567]
[93.88751221 54.84943008]
[94.34944153 39.85654449]
[94.81137085 24.86365700]
[87.50271606 10.83175945]
[95.62828064 -1.65120506]
[96.09020996 -16.64409065]
[96.55213165 -31.63697624]
[93.64532471 -37.88947296]
[94.35919189 -43.75031662]
[97.53241730 -47.53062439]
[98.91644287 -62.46664047]
[100.30046844 -77.40264893]
[90.92355347 -85.04240417]
[86.52112579 -96.17787933]
[88.10646057 -107.92454529]
[95.15792847 -117.30116272]
[105.78189087 -121.98637390]
[108.08276367 -136.80885315]
[110.38363647 -151.63133240]
[112.68451691 -166.45381165]
[114.98538971 -181.27630615]
[108.56001282 -196.36425781]
[118.62882233 -209.30841064]
[134.83389282 -206.79292297]
[140.50483704 -191.40550232]
[129.80787659 -178.97543335]
[127.50699615 -164.15293884]
[125.20612335 -149.33045959]
[122.90524292 -134.50798035]
[120.60437012 -119.68550110]
[132.28788757 -105.75957489]
[130.22180176 -87.38287354]
[115.23648071 -76.01862335]
[113.85245514 -61.08261490]
[112.46842957 -46.14660263]
[111.54502106 -31.17505074]
[111.08309174 -16.18216515]
[110.62117004 -1.18927920]
[117.96286011 11.77022743]
[109.80425262 25.32558441]
[109.34232330 40.31847000]
[108.88040161 55.31135559]
[108.41847229 70.30423737]
[122.14672089 78.50042725]
[129.93229675 92.46563721]
[129.68608093 108.45255280]
[121.47413635 122.17138672]
[107.50000000 129.94091797]
[107.50000000 144.94091797]
[107.50000000 159.94091797]
[120.69451141 167.67733765]
[128.19555664 180.89215088]
[128.07571411 195.98690796]
[120.46732330 208.90853882]
[107.50000000 216.23753357]
[107.50000000 231.23753357]
[107.50000000 246.23753357]
[121.97328949 250.52751160]
[134.63851929 258.71371460]
[144.47392273 270.12554932]
[150.68888855 283.83258057]
[152.78752136 298.72042847]
[150.60820007 313.58132935]
[144.33599854 327.21218872]
[134.48701477 338.51190186]
[121.86586761 346.57031250]
[107.50000000 350.74154663]
[107.50000000 365.74154663]
[107.50000000 380.74154663]
[107.50000000 395.74154663]
[107.50000000 410.74154663]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 101]
[2 100]
[3 99]
[4 98]
[5 97]
[15 87]
[16 86]
[17 85]
[22 80]
[23 79]
[24 78]
[30 73]
[31 72]
[32 71]
[33 70]
[35 68]
[36 67]
[37 66]
[40 65]
[41 64]
[42 63]
[47 60]
[48 59]
[49 58]
[50 57]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
