%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCGUCGACGCUAAUCCUUGGCCGGACGGAUCCACAUCUGUUUUCUGGCUACCGAGAGGGCAGCCAUGAACACCCAAAAGGGUUCCCUCACCAUAAACGUCCACAGAGGUUCCCUCGCCAUGAGCAUCCAAAGGGGUUCCCUCGUCCCCCGGGAUAUGGAUAGCU\
) } def
/len { sequence length } bind def

/coor [
[83.24926758 245.21569824]
[80.42814636 247.39762878]
[77.07068634 262.01705933]
[73.71322632 276.63647461]
[76.06087494 293.42709351]
[60.57633209 300.33108521]
[49.65559006 287.36291504]
[59.09380341 273.27899170]
[62.45126724 258.65957642]
[65.80873108 244.04016113]
[68.75238037 229.33183289]
[71.27987671 214.54631042]
[73.80736542 199.76078796]
[76.33486176 184.97526550]
[74.35381317 177.82150269]
[79.05147552 169.93647766]
[81.85665131 155.20111084]
[84.66182709 140.46574402]
[69.83463287 131.02880859]
[59.98311234 116.47377014]
[45.33275986 119.69357300]
[30.68240547 122.91338348]
[16.03205299 126.13318634]
[1.38169909 129.35299683]
[-13.26865482 132.57279968]
[-27.91900826 135.79260254]
[-42.56936264 139.01240540]
[-57.12303925 142.64427185]
[-71.56845093 146.68531799]
[-86.01386261 150.72636414]
[-100.45927429 154.76741028]
[-114.90469360 158.80845642]
[-125.97966766 170.90295410]
[-141.93064880 167.09529114]
[-146.34863281 151.30245972]
[-134.68876648 139.77076721]
[-118.94573212 144.36303711]
[-104.50032043 140.32199097]
[-90.05490875 136.28096008]
[-75.60949707 132.23991394]
[-61.16408157 128.19886780]
[-59.11719894 125.27828217]
[-55.53381348 123.22229767]
[-50.84449768 122.75132751]
[-45.78916550 124.36205292]
[-31.13881302 121.14225006]
[-16.48845863 117.92243958]
[-1.83810592 114.70263672]
[12.81224728 111.48283386]
[27.46260071 108.26303101]
[42.11295319 105.04322052]
[56.76330948 101.82341766]
[55.75302887 84.74237823]
[61.70772552 67.33432770]
[74.63648224 52.48480225]
[93.35142517 42.99686050]
[115.54885864 41.09960938]
[110.03748322 27.14880943]
[104.52611542 13.19801140]
[99.01473999 -0.75278747]
[93.50337219 -14.70358562]
[87.41399384 -21.57097626]
[88.02225494 -28.96900749]
[82.77428436 -43.02101135]
[77.52631378 -57.07301331]
[72.27834320 -71.12501526]
[57.10137558 -71.28043365]
[43.00687027 -76.91152954]
[31.90098953 -87.25676727]
[25.28571129 -100.91702271]
[24.05570030 -116.04486084]
[28.37730408 -130.59436035]
[37.66606140 -142.59783936]
[50.66574478 -150.43191528]
[65.61825562 -153.03707886]
[80.50138092 -150.06103516]
[93.30231476 -141.90623474]
[102.28982544 -129.67558289]
[106.24842072 -115.02313995]
[104.64275360 -99.93054962]
[97.68995667 -86.43895721]
[86.33034515 -76.37298584]
[91.57831573 -62.32098389]
[96.82628632 -48.26898193]
[102.07425690 -34.21697998]
[107.45417023 -20.21495819]
[112.96553802 -6.26415968]
[118.47691345 7.68663883]
[123.98828888 21.63743782]
[129.49966431 35.58823395]
[136.55003357 38.14601898]
[138.40171814 23.26074982]
[140.25340271 8.37547970]
[142.10508728 -6.50979042]
[138.13633728 -20.97523308]
[142.26538086 -35.39574051]
[153.28880310 -45.56844711]
[167.99383545 -48.52852249]
[182.09469604 -43.41324997]
[191.48165894 -31.71347618]
[193.41893005 -16.83910179]
[187.34185791 -3.12526655]
[175.02053833 5.43151188]
[166.89727783 18.04153633]
[158.77403259 30.65156174]
[150.65077209 43.26158905]
[157.70114136 45.81937027]
[170.87553406 38.64752960]
[184.04992676 31.47568703]
[197.22433472 24.30384254]
[208.24482727 11.42033482]
[223.67562866 18.44364357]
[221.19845581 35.21564484]
[204.39616394 37.47823715]
[191.22177124 44.65008163]
[178.04737854 51.82192230]
[164.87298584 58.99376678]
[169.45452881 73.27695465]
[184.34252930 71.44735718]
[195.31170654 59.74023056]
[211.29176331 61.16058350]
[220.02416992 74.61883545]
[214.81018066 89.79097748]
[199.64950562 95.03823090]
[186.17213440 86.33535767]
[171.28413391 88.16495514]
[167.65226746 102.71862793]
[179.93504333 111.32869720]
[192.21783447 119.93876648]
[204.50061035 128.54882812]
[217.43560791 124.70277405]
[230.03569031 128.95983887]
[237.75784302 139.54797363]
[237.95515442 152.45655823]
[250.07379150 161.29615784]
[262.19244385 170.13574219]
[274.31109619 178.97534180]
[288.66033936 173.30946350]
[303.79046631 176.32322693]
[314.87350464 187.05496216]
[318.37286377 202.08021545]
[313.17193604 216.60446167]
[300.93032837 225.99308777]
[285.55426025 227.25021362]
[271.95019531 219.97468567]
[264.45916748 206.48809814]
[265.47149658 191.09399414]
[253.35284424 182.25439453]
[241.23420715 173.41481018]
[229.11555481 164.57521057]
[212.64759827 167.89115906]
[198.58816528 158.09501648]
[195.89054871 140.83161926]
[183.60775757 132.22154236]
[171.32498169 123.61148071]
[159.04219055 115.00141144]
[142.30253601 135.20771790]
[120.55312347 144.65304565]
[99.39719391 143.27091980]
[96.59201813 158.00628662]
[93.78684235 172.74165344]
[91.12039185 187.50276184]
[88.59289551 202.28828430]
[86.06539917 217.07380676]
[83.53790283 231.85932922]
[85.38451385 236.83334351]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 10]
[3 9]
[4 8]
[11 165]
[12 164]
[13 163]
[14 162]
[16 161]
[17 160]
[18 159]
[20 52]
[21 51]
[22 50]
[23 49]
[24 48]
[25 47]
[26 46]
[27 45]
[28 41]
[29 40]
[30 39]
[31 38]
[32 37]
[57 90]
[58 89]
[59 88]
[60 87]
[61 86]
[63 85]
[64 84]
[65 83]
[66 82]
[107 117]
[108 116]
[109 115]
[110 114]
[118 126]
[119 125]
[127 156]
[128 155]
[129 154]
[130 153]
[134 150]
[135 149]
[136 148]
[137 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
