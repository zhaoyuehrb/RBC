%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:45:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGGGGGCCGGGGAGGGUUCGGGUGGGAGGGGGUGGGGGGGGUGUCCCUGGGCUCAUGGAGCCGGCCGAGCGGGCGGGAGUCGGAGAGCCCCCGGAGCCGGGCGGGCGUCCCGAGCCGGGCCCGCGGGGCUUCGUCCCGCAGAAGGAGAUCGUCU\
) } def
/len { sequence length } bind def

/coor [
[107.44810486 202.10452271]
[104.17302704 216.74261475]
[100.89794922 231.38070679]
[106.31251526 246.86019897]
[95.41056061 259.11087036]
[79.40707397 255.53031921]
[74.76507568 239.80187988]
[86.25984955 228.10563660]
[89.53492737 213.46752930]
[92.81000519 198.82943726]
[95.79153442 184.12873840]
[98.47832489 169.37133789]
[93.14585876 155.46398926]
[103.22990417 143.27290344]
[105.91670227 128.51550293]
[90.74558258 125.28748322]
[80.53070068 115.25269318]
[77.59671021 102.45471191]
[62.99211121 99.03334808]
[48.38751221 95.61198425]
[33.78291702 92.19061279]
[19.17831993 88.76924896]
[4.57372284 85.34788513]
[-10.62748337 89.73352814]
[-21.25445175 79.29721069]
[-35.85905075 75.87583923]
[-50.46364594 72.45447540]
[-62.13961029 85.52463531]
[-78.73204803 90.88639069]
[-95.67534637 87.15843964]
[-108.35469055 75.44780731]
[-113.36294556 59.02315521]
[-128.09274292 56.18885040]
[-142.82252502 53.35454941]
[-157.55232239 50.52024460]
[-174.77467346 56.96375275]
[-187.60836792 45.02949524]
[-202.39192200 42.49048615]
[-217.17547607 39.95147324]
[-231.95903015 37.41246414]
[-246.74258423 34.87345505]
[-261.93194580 41.05529785]
[-274.71246338 30.77956772]
[-271.93661499 14.61705685]
[-256.45996094 9.19437027]
[-244.20356750 20.08990288]
[-229.42001343 22.62891197]
[-214.63645935 25.16792107]
[-199.85290527 27.70693207]
[-185.06936646 30.24594116]
[-174.97912598 23.51077080]
[-162.61198425 25.54387093]
[-154.71801758 35.79045486]
[-139.98822021 38.62475586]
[-125.25843048 41.45906067]
[-110.52864075 44.29336166]
[-103.29298401 33.86238480]
[-92.59985352 26.93353271]
[-80.03081512 24.57398987]
[-67.46104431 27.17197227]
[-56.77957153 34.37336349]
[-49.60543442 45.12952805]
[-47.04227829 57.84987640]
[-32.43768311 61.27124405]
[-17.83308601 64.69261169]
[-3.67649770 60.06224442]
[7.99508953 70.74328613]
[22.59968567 74.16464996]
[37.20428467 77.58602142]
[51.80887985 81.00738525]
[66.41347504 84.42874908]
[81.01807404 87.85012054]
[96.40528870 75.53009796]
[117.54643250 79.57395172]
[129.12242126 99.83927155]
[142.99491882 94.13370514]
[156.86743164 88.42813110]
[170.73994446 82.72256470]
[184.61244202 77.01699066]
[198.48495483 71.31142426]
[202.87762451 66.24957275]
[208.35099792 64.47568512]
[213.02844238 65.66739655]
[227.11811829 60.52142715]
[231.70980835 55.63937759]
[237.24977112 54.08589935]
[241.87579346 55.46380234]
[256.16006470 50.88567352]
[270.44436646 46.30754852]
[284.72863770 41.72942352]
[299.01290894 37.15129852]
[313.29721069 32.57317352]
[327.58148193 27.99504662]
[341.81924438 23.27423859]
[356.00906372 18.41121674]
[370.19891357 13.54819679]
[377.35076904 7.77420521]
[384.72155762 8.73292446]
[399.00582886 4.15479898]
[413.29013062 -0.42332649]
[424.07034302 -12.00337410]
[438.55181885 -8.51972485]
[452.83612061 -13.09784985]
[467.12039185 -17.67597580]
[481.31021118 -22.53899574]
[495.39990234 -27.68496513]
[509.48956299 -32.83093262]
[522.29315186 -43.94417572]
[536.51647949 -34.71739960]
[531.58770752 -18.49570274]
[514.63555908 -18.74125671]
[500.54586792 -13.59528732]
[486.45617676 -8.44931889]
[483.64779663 -4.52355433]
[478.31951904 -2.35236263]
[471.69851685 -3.39169192]
[457.41424561 1.18643367]
[443.12994385 5.76455927]
[433.37145996 17.01714897]
[417.86825562 13.86095715]
[403.58398438 18.43908310]
[389.29968262 23.01720810]
[375.06192017 27.73801804]
[360.87210083 32.60103989]
[346.68228149 37.46405792]
[341.34442139 42.63658905]
[332.15960693 42.27933121]
[317.87533569 46.85745621]
[303.59106445 51.43558121]
[289.30676270 56.01370621]
[275.02249146 60.59183502]
[260.73818970 65.16996002]
[246.45391846 69.74808502]
[232.26409912 74.61110687]
[218.17440796 79.75707245]
[204.19052124 85.18392944]
[190.31800842 90.88950348]
[176.44551086 96.59506989]
[162.57299805 102.30064392]
[148.70050049 108.00621033]
[134.82798767 113.71178436]
[149.52255249 110.70021820]
[163.64860535 115.74547577]
[173.11047363 127.38476562]
[175.16481018 142.24342346]
[169.21600342 156.01338196]
[156.98881531 164.70220947]
[142.02836609 165.79071045]
[128.67222595 158.96328735]
[120.79285431 146.19946289]
[120.67411041 131.20228577]
[117.98731995 145.95970154]
[123.12760925 160.92259216]
[113.23574066 172.05812073]
[110.54895020 186.81553650]
[112.43824005 193.24581909]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[11 155]
[12 154]
[14 152]
[15 151]
[18 72]
[19 71]
[20 70]
[21 69]
[22 68]
[23 67]
[25 65]
[26 64]
[27 63]
[32 56]
[33 55]
[34 54]
[35 53]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[75 141]
[76 140]
[77 139]
[78 138]
[79 137]
[80 136]
[83 135]
[84 134]
[87 133]
[88 132]
[89 131]
[90 130]
[91 129]
[92 128]
[93 127]
[94 125]
[95 124]
[96 123]
[98 122]
[99 121]
[100 120]
[102 118]
[103 117]
[104 116]
[105 113]
[106 112]
[107 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
