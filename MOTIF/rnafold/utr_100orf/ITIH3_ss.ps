%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:23:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUAAGGAGCGUGGGCCAGGCCUGAGUAUUCAGCGAUGGCAUUUGCAUGGUGGCCCUGUCUCAUCUUGGCUCUGCUCUCCAGCUUGGCAGCCUCUGGCUUCCCGAGAAGCCCCUUUCGGCUGCUUGGGAAACGGA\
) } def
/len { sequence length } bind def

/coor [
[106.65904236 139.11486816]
[93.81710815 139.19294739]
[81.62287903 135.16528320]
[71.35379028 127.45378113]
[64.08560944 116.86629486]
[60.57972717 104.51194000]
[61.20341492 91.68492126]
[47.39509583 85.82571411]
[33.58677673 79.96650696]
[19.77845764 74.10729980]
[5.97013807 68.24809265]
[-7.83818102 62.38888168]
[-17.04988289 61.90361786]
[-21.89348984 56.23376465]
[-35.56383133 50.05948257]
[-49.23417282 43.88519669]
[-62.90451431 37.71091461]
[-76.57485199 31.53663254]
[-90.24519348 25.36235046]
[-103.91553497 19.18806648]
[-117.58587646 13.01378441]
[-129.96391296 16.83878517]
[-141.25245667 11.34697914]
[-145.59492493 -0.00217021]
[-159.12008667 -6.48828125]
[-172.64526367 -12.97439289]
[-186.17044067 -19.46050453]
[-195.35020447 -20.36758423]
[-199.92878723 -26.25353813]
[-213.30168152 -33.04806900]
[-227.07868958 -26.15604401]
[-242.09671021 -28.66852188]
[-252.63101196 -39.41527176]
[-254.79135132 -54.12822342]
[-268.16424561 -60.92275238]
[-283.97222900 -60.27579117]
[-291.81414795 -72.93885040]
[-305.18707275 -79.73338318]
[-325.18081665 -77.66603088]
[-335.17684937 -94.15776062]
[-348.84716797 -100.33204651]
[-365.10287476 -98.16762543]
[-374.88937378 -111.32652283]
[-368.13916016 -126.27198792]
[-351.79629517 -127.62940979]
[-342.67288208 -114.00238800]
[-329.00256348 -107.82810211]
[-319.70397949 -112.31731415]
[-309.25756836 -110.86998749]
[-301.19924927 -103.72932434]
[-298.39251709 -93.10627747]
[-285.01962280 -86.31175232]
[-270.16818237 -87.44470215]
[-261.36972046 -74.29564667]
[-247.99681091 -67.50112152]
[-234.83982849 -74.43161011]
[-219.94860840 -72.26011658]
[-209.06414795 -61.61201096]
[-206.50714111 -46.42096329]
[-193.13424683 -39.62643433]
[-179.68432617 -32.98567963]
[-166.15914917 -26.49956703]
[-152.63398743 -20.01345634]
[-139.10881042 -13.52734566]
[-121.75133514 -15.84445667]
[-111.41159821 -0.65655708]
[-97.74125671 5.51772594]
[-84.07091522 11.69200897]
[-70.40057373 17.86629105]
[-56.73023224 24.04057503]
[-43.05989075 30.21485710]
[-29.38954735 36.38914108]
[-15.71920681 42.56342316]
[-1.97897327 48.58056259]
[11.82934570 54.43976974]
[25.63766479 60.29898071]
[39.44598389 66.15818787]
[53.25430298 72.01739502]
[67.06262207 77.87660217]
[78.78304291 66.47156525]
[94.10777283 60.76229858]
[110.43347931 61.71869659]
[124.98674774 69.17828369]
[136.46511841 59.52184296]
[147.94349670 49.86539841]
[153.02096558 34.27208710]
[169.11781311 31.13781357]
[179.67497253 43.68685150]
[173.83215332 59.00982285]
[157.59994507 61.34377289]
[146.12156677 71.00021362]
[134.64318848 80.65666199]
[139.58378601 97.27256775]
[136.96882629 114.40907288]
[149.66314697 122.39995575]
[162.35746765 130.39083862]
[175.05178833 138.38171387]
[187.83746338 136.29055786]
[198.26611328 143.27874756]
[201.01094055 155.11622620]
[213.51870728 163.39607239]
[226.02645874 171.67593384]
[238.53422546 179.95578003]
[251.04197693 188.23562622]
[263.54974365 196.51548767]
[276.05749512 204.79533386]
[288.56527710 213.07518005]
[304.34344482 214.24099731]
[310.68518066 227.71807861]
[323.19296265 235.99792480]
[335.70071411 244.27777100]
[348.20846558 252.55763245]
[363.64379883 249.16253662]
[376.91369629 257.74652100]
[380.14541626 273.21688843]
[371.42160034 286.39529419]
[355.91793823 289.46325684]
[342.83248901 280.60061646]
[339.92861938 265.06539917]
[327.42086792 256.78552246]
[314.91308594 248.50569153]
[302.40533447 240.22583008]
[287.52178955 239.65225220]
[280.28540039 225.58294678]
[267.77764893 217.30310059]
[255.26989746 209.02323914]
[242.76213074 200.74339294]
[230.25437927 192.46354675]
[217.74661255 184.18368530]
[205.23884583 175.90383911]
[192.73109436 167.62399292]
[175.21984863 167.53854370]
[167.06091309 151.07603455]
[154.36659241 143.08515930]
[141.67227173 135.09428406]
[128.97795105 127.10340118]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 79]
[8 78]
[9 77]
[10 76]
[11 75]
[12 74]
[14 73]
[15 72]
[16 71]
[17 70]
[18 69]
[19 68]
[20 67]
[21 66]
[24 64]
[25 63]
[26 62]
[27 61]
[29 60]
[30 59]
[34 55]
[35 54]
[37 52]
[38 51]
[40 47]
[41 46]
[83 92]
[84 91]
[85 90]
[94 136]
[95 135]
[96 134]
[97 133]
[100 131]
[101 130]
[102 129]
[103 128]
[104 127]
[105 126]
[106 125]
[107 124]
[109 122]
[110 121]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
