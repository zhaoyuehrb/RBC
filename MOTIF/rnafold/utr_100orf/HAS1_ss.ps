%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAGAGAGGCUGGGAGAGCAAGCCGGAGAGAAGAGAGAGCCCGGCCAGACCCACUGCGAUGAGACAGCAGGACGCGCCCAAGCCCACUCCUGCAGCCUGCCGCUGCUCCGGCCUGGCCCGGAGGGUGCUGACCAUCGCCUUCGCCCUGCUCAUCCUGG\
) } def
/len { sequence length } bind def

/coor [
[40.28395462 731.34552002]
[39.16967392 746.61041260]
[31.07922935 759.60284424]
[17.87174797 767.33728027]
[2.58221269 768.03631592]
[-11.27595329 761.53942871]
[-20.51824570 749.33947754]
[-23.02085304 734.23999023]
[-18.20869446 719.71063232]
[-7.18756819 709.09020996]
[7.50995064 704.81921387]
[10.43630600 690.10742188]
[13.36266041 675.39562988]
[16.28901482 660.68383789]
[19.21537018 645.97210693]
[22.14172554 631.26031494]
[24.92350769 616.52050781]
[27.56045341 601.75408936]
[30.19739723 586.98773193]
[32.83434296 572.22131348]
[35.47128677 557.45489502]
[25.03208351 546.86431885]
[22.80444527 531.98138428]
[29.84993744 518.48266602]
[43.65245438 511.64187622]
[46.28939819 496.87545776]
[48.92634201 482.10906982]
[51.56328964 467.34268188]
[54.20023346 452.57626343]
[47.33962631 436.44790649]
[59.25839233 422.44287109]
[61.60490799 407.62756348]
[48.81580734 397.78982544]
[42.68389511 382.76403809]
[44.96443939 366.60159302]
[55.13056564 353.71191406]
[70.49114227 347.65948486]
[72.54633331 332.80093384]
[66.62579346 319.13360596]
[76.18091583 306.52368164]
[78.23609924 291.66513062]
[80.29129028 276.80657959]
[82.34647369 261.94805908]
[83.81672668 247.02027893]
[84.69979095 232.04629517]
[85.58285522 217.07231140]
[86.46591949 202.09832764]
[87.34897614 187.12434387]
[88.23204041 172.15036011]
[81.25742340 158.98965454]
[89.79373169 145.66893005]
[90.67679596 130.69494629]
[67.74990082 124.13856506]
[51.51516724 100.44322968]
[54.00108337 66.86527252]
[44.71467590 55.08551788]
[35.42826462 43.30576324]
[26.14185715 31.52600861]
[10.79634190 33.11306381]
[-2.96082687 26.13138580]
[-10.73978806 12.80879879]
[-10.05830479 -2.60350513]
[-1.13383353 -15.18751717]
[13.18585777 -20.92772484]
[28.33140755 -17.99244881]
[39.46992874 -7.31832457]
[43.04715347 7.68857384]
[37.92161179 22.23959923]
[47.20801926 34.01935196]
[56.49443054 45.79910660]
[65.78083801 57.57886124]
[72.84241486 55.05218506]
[75.52736664 40.29444122]
[86.96557617 49.99884033]
[94.02716064 47.47216415]
[93.73265076 32.47505569]
[82.16780090 21.70335007]
[81.69046021 5.90627193]
[92.58383179 -5.54405308]
[108.38507843 -5.85434961]
[119.71958923 5.15947580]
[119.86280823 20.96311569]
[108.72976685 32.18054962]
[109.02426910 47.17765808]
[115.98120880 49.97962189]
[121.58512878 36.06574249]
[127.18905640 22.15186310]
[132.79319763 8.23807144]
[146.70690918 13.84242630]
[141.10293579 27.75578880]
[135.49900818 41.66966629]
[129.89508057 55.58354568]
[136.85202026 58.38550949]
[147.45863342 47.77890778]
[158.06523132 37.17230606]
[168.67182922 26.56570435]
[179.27842712 15.95910168]
[180.71630859 -0.01938612]
[194.18412781 -8.73703098]
[209.35054016 -3.50640130]
[214.58116150 11.66001129]
[205.86352539 25.12783241]
[189.88504028 26.56570435]
[179.27842712 37.17230606]
[168.67182922 47.77890778]
[158.06523132 58.38550949]
[147.45863342 68.99211121]
[150.35263062 95.67810059]
[140.75068665 117.59017944]
[123.74737549 129.96286011]
[105.65077972 131.57800293]
[104.76771545 146.55198669]
[111.67916870 160.78372192]
[103.20602417 173.03341675]
[102.32295990 188.00740051]
[101.43990326 202.98138428]
[100.55683899 217.95536804]
[99.67377472 232.92936707]
[98.79071045 247.90335083]
[100.93891907 251.81254578]
[101.62845612 255.79902649]
[101.01937866 259.38516235]
[99.41309357 262.19720459]
[97.20500946 264.00323486]
[95.14982605 278.86178589]
[93.09464264 293.72030640]
[91.03945923 308.57885742]
[96.81299591 323.30899048]
[87.40486908 334.85614014]
[85.34968567 349.71466064]
[96.84236145 357.73776245]
[103.71437836 369.87750244]
[104.66962433 383.72817993]
[99.57806396 396.57318115]
[89.49006653 405.91787720]
[76.42023468 409.97406006]
[74.07371521 424.78939819]
[81.02211761 435.69616699]
[78.72876740 448.01504517]
[68.96662903 455.21322632]
[66.32968903 469.97961426]
[63.69274139 484.74600220]
[61.05579758 499.51242065]
[58.41885376 514.27880859]
[69.00053406 525.47406006]
[70.93843079 540.57702637]
[63.69724274 553.76904297]
[50.23768234 560.09185791]
[47.60073853 574.85827637]
[44.96379471 589.62463379]
[42.32685089 604.39105225]
[39.68990707 619.15747070]
[41.26570129 628.20886230]
[36.85350418 634.18664551]
[33.92715073 648.89843750]
[31.00079536 663.61022949]
[28.07444000 678.32196045]
[25.14808464 693.03375244]
[22.22172928 707.74554443]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 159]
[12 158]
[13 157]
[14 156]
[15 155]
[16 154]
[17 152]
[18 151]
[19 150]
[20 149]
[21 148]
[25 144]
[26 143]
[27 142]
[28 141]
[29 140]
[31 137]
[32 136]
[37 130]
[38 129]
[40 127]
[41 126]
[42 125]
[43 124]
[44 119]
[45 118]
[46 117]
[47 116]
[48 115]
[49 114]
[51 112]
[52 111]
[55 71]
[56 70]
[57 69]
[58 68]
[75 84]
[76 83]
[93 107]
[94 106]
[95 105]
[96 104]
[97 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
