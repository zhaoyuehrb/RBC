%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCAGAAGAAACUCAACACAACAAAUUGGCUGCAGCCAAGAAAAAGUUAAAAGAAUAUUGGCAGAAAAACAGACCUAGAGUUCCAGCAGGAGUGAACA\
) } def
/len { sequence length } bind def

/coor [
[59.42464828 145.23103333]
[61.70192719 130.40490723]
[70.83008575 118.50210571]
[84.55710602 112.45780945]
[70.50656891 117.70970917]
[56.45603180 122.96160126]
[42.40549850 128.21350098]
[35.79154205 142.31645203]
[21.46748543 147.44247437]
[8.06323147 141.05017090]
[-5.98730469 146.30206299]
[-5.83150482 161.45962524]
[-10.87221718 175.75532532]
[-20.50075340 187.46289062]
[-33.55441666 195.16857910]
[-48.45692062 197.94187927]
[-63.40870667 195.44792175]
[-76.60427856 187.98785400]
[-86.45021057 176.46250916]
[-91.75755310 162.26364136]
[-91.88542175 147.10583496]
[-86.81837463 132.81944275]
[-77.16827393 121.12963867]
[-64.10043335 113.44802094]
[-49.19284439 110.70217896]
[-34.24567795 113.22368622]
[-21.06387520 120.70806122]
[-11.23920155 132.25152588]
[2.81133509 126.99962616]
[8.73627663 113.38233948]
[22.91070366 107.85601044]
[37.15359879 114.16296387]
[51.20413589 108.91106415]
[65.25467682 103.65917206]
[79.30520630 98.40727234]
[85.21340942 89.61498260]
[93.68514252 85.97380066]
[93.68514252 70.97380066]
[93.68514252 55.97380066]
[93.68514252 40.97380066]
[93.68514252 25.97379875]
[79.29196930 21.31635857]
[67.04366302 12.43749332]
[58.14019394 0.20706283]
[53.45383072 -14.17671871]
[53.44369125 -29.30467606]
[58.11077499 -43.69472504]
[66.99784851 -55.93707657]
[79.23423767 -64.83235168]
[93.62116241 -69.50907135]
[108.74912262 -69.50907135]
[123.13603973 -64.83235168]
[135.37243652 -55.93707657]
[144.25950623 -43.69472504]
[148.92658997 -29.30467606]
[148.91644287 -14.17671871]
[144.23008728 0.20706283]
[135.32661438 12.43749332]
[123.07831573 21.31635857]
[108.68514252 25.97379875]
[108.68514252 40.97380066]
[108.68514252 55.97380066]
[108.68514252 70.97380066]
[108.68514252 85.97380066]
[115.87652588 72.81005859]
[119.14682007 58.17089462]
[126.81259155 45.27764130]
[138.11174011 35.41208649]
[151.92095947 29.55500793]
[166.86741638 28.28869438]
[181.46519470 31.73903275]
[194.26306152 39.56300735]
[203.98870850 50.98279953]
[209.67527771 64.86311340]
[210.75741577 79.82402802]
[207.12756348 94.37820435]
[199.14657593 107.07874298]
[187.60786438 116.66301727]
[173.65856934 122.17820740]
[158.68547058 123.07601929]
[144.17709351 119.26719666]
[131.57460022 111.12929535]
[117.21463013 106.79441071]
[127.73843384 117.48316956]
[138.26223755 128.17192078]
[148.78604126 138.86068726]
[164.72840881 142.70422363]
[169.11085510 158.50695801]
[157.42507935 170.01237488]
[141.69241333 165.38470459]
[138.09727478 149.38449097]
[127.57347107 138.69572449]
[117.04967499 128.00697327]
[106.52587128 117.31821442]
[116.42263794 128.59002686]
[119.67728424 143.23268127]
[115.48726654 157.63558960]
[104.88576508 168.24729919]
[90.48689270 172.45115662]
[75.84111786 169.21058655]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 35]
[5 34]
[6 33]
[7 32]
[10 29]
[11 28]
[37 64]
[38 63]
[39 62]
[40 61]
[41 60]
[83 94]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
