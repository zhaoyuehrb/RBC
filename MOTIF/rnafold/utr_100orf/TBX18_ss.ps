%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:55:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUGCCCGCGUGAGUGUAUAUGAGAGAGGGGCGGGCGGGCGCGGGGCGGGGGGGAUGGCCGAGAAGCGAAGGGGCUCGCCGUGCAGCAUGCUAAGCCUCAAGGCGCACGCUUUCUCGGUGGAGGCGCUGAUCGGCGCCGAGAAGCAGCAACAGC\
) } def
/len { sequence length } bind def

/coor [
[184.21836853 170.81643677]
[172.22673035 161.80531311]
[160.23509216 152.79417419]
[148.24345398 143.78303528]
[136.25180054 134.77191162]
[124.26016998 125.76077271]
[112.26852417 116.74964142]
[97.60262299 119.89785767]
[90.36573029 133.03663635]
[83.12883759 146.17539978]
[83.99986267 162.55140686]
[70.10767365 171.26570129]
[55.74335861 163.35379028]
[55.68369675 146.95474243]
[69.99006653 138.93852234]
[77.22695160 125.79974365]
[84.46384430 112.66096497]
[76.43245697 125.32969666]
[63.57435608 133.05429077]
[48.61784744 134.19569397]
[34.73647308 128.51174927]
[24.87564659 117.20846558]
[21.12769127 102.68424988]
[24.28786469 88.02091217]
[33.68562698 76.32980347]
[47.32691193 70.09159088]
[62.31724930 70.62992859]
[75.47591400 77.83059692]
[84.01076508 90.16552734]
[76.25069427 77.32881165]
[68.49063110 64.49208832]
[60.73056030 51.65536880]
[52.97049332 38.81864929]
[36.65158844 30.34530258]
[36.91751480 12.82278728]
[28.90052795 0.14493567]
[20.88354111 -12.53291607]
[12.86655426 -25.21076775]
[-1.04865599 -32.73921204]
[-1.31145835 -47.63150024]
[-9.32844543 -60.30935287]
[-17.47268105 -72.90583801]
[-25.74333763 -85.41967773]
[-34.01399231 -97.93351746]
[-48.07798386 -105.18022919]
[-48.64061737 -120.06420135]
[-56.91127396 -132.57804871]
[-65.18193054 -145.09188843]
[-73.45259094 -157.60572815]
[-81.72324371 -170.11956787]
[-89.99389648 -182.63340759]
[-104.73070526 -179.16183472]
[-119.73790741 -180.93830872]
[-133.20649719 -187.72926331]
[-143.51960754 -198.69784546]
[-149.44656372 -212.50700378]
[-150.28974915 -227.48243713]
[-145.96669006 -241.81561279]
[-137.01760864 -253.78221130]
[-145.28825378 -266.29605103]
[-160.82133484 -269.21133423]
[-169.67437744 -282.30331421]
[-166.59501648 -297.80468750]
[-153.41018677 -306.51882935]
[-137.94221497 -303.27572632]
[-129.36798096 -289.99951172]
[-132.77441406 -274.56671143]
[-124.50376129 -262.05285645]
[-109.98700714 -265.59533691]
[-95.10626984 -263.95434570]
[-81.65968323 -257.30874634]
[-71.27871704 -246.44334412]
[-65.23023987 -232.65617371]
[-64.26193237 -217.60351562]
[-68.50993347 -203.10087585]
[-77.48005676 -190.90406799]
[-69.20940399 -178.39022827]
[-60.93874359 -165.87638855]
[-52.66808701 -153.36254883]
[-44.39743423 -140.84870911]
[-36.12677765 -128.33485413]
[-22.65435982 -121.98322296]
[-21.50015068 -106.20417786]
[-13.22949505 -93.69033813]
[-4.95883846 -81.17649078]
[1.38934505 -77.30812836]
[3.34940553 -68.32633972]
[11.36639309 -55.64848709]
[24.70817375 -49.02684402]
[25.54440498 -33.22775269]
[33.56139374 -20.54990387]
[41.57838058 -7.87205172]
[49.59536743 4.80579948]
[61.35580826 7.78719378]
[68.12967682 18.33313751]
[65.80721283 31.05858421]
[73.56728363 43.89530182]
[81.32734680 56.73202133]
[89.08741760 69.56874084]
[96.84748077 82.40545654]
[108.83750916 82.97187042]
[118.57723236 91.34375763]
[121.27965546 104.75799561]
[133.27130127 113.76913452]
[145.26293945 122.78026581]
[157.25457764 131.79139709]
[169.24623108 140.80253601]
[181.23786926 149.81367493]
[193.22950745 158.82479858]
[206.06622314 166.58486938]
[219.61798096 173.01525879]
[233.16973877 179.44564819]
[246.72149658 185.87603760]
[255.87405396 186.73916626]
[260.47940063 192.57478333]
[273.89892578 199.27676392]
[287.31845093 205.97874451]
[300.73797607 212.68072510]
[314.15747070 219.38269043]
[327.57699585 226.08467102]
[340.99652100 232.78665161]
[355.82427979 228.01426697]
[369.33810425 235.00219727]
[373.79644775 249.16758728]
[387.21597290 255.86956787]
[402.12567139 250.62774658]
[416.33859253 257.53921509]
[421.42248535 272.50347900]
[414.36114502 286.64254761]
[399.34396362 291.56793213]
[385.28036499 284.35751343]
[380.51400757 269.28909302]
[367.09448242 262.58712769]
[353.09173584 267.53265381]
[339.38696289 260.92706299]
[334.29455566 246.20616150]
[320.87503052 239.50419617]
[307.45550537 232.80221558]
[294.03598022 226.10023499]
[280.61645508 219.39825439]
[267.19696045 212.69628906]
[253.77743530 205.99430847]
[240.29110718 199.42779541]
[226.73934937 192.99740601]
[213.18759155 186.56701660]
[199.63583374 180.13662720]
[206.28216553 193.58380127]
[205.44760132 208.56056213]
[197.34840393 221.18605042]
[184.08329773 228.18869019]
[169.08959961 227.75389099]
[156.25256348 219.99433899]
[148.89860535 206.92073059]
[148.93331909 191.92077637]
[156.34771729 178.88134766]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 109]
[2 108]
[3 107]
[4 106]
[5 105]
[6 104]
[7 103]
[8 17]
[9 16]
[10 15]
[29 100]
[30 99]
[31 98]
[32 97]
[33 96]
[35 93]
[36 92]
[37 91]
[38 90]
[40 88]
[41 87]
[42 85]
[43 84]
[44 83]
[46 81]
[47 80]
[48 79]
[49 78]
[50 77]
[51 76]
[59 68]
[60 67]
[110 146]
[111 145]
[112 144]
[113 143]
[115 142]
[116 141]
[117 140]
[118 139]
[119 138]
[120 137]
[121 136]
[124 133]
[125 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
