%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:31:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGGCUGGGCCGGCCUGGGCGGGGCGCGCGACUGCUCCGGGCGGCGAUGGCGGCGGACGGGGACUGGCAGGAUUUCUAUGAGUUCCAGGAGCCGGCCCGGAGCCUCCUGGACCAGGAGAACUGUAACGCGAGCCCCGAGCCUGGGG\
) } def
/len { sequence length } bind def

/coor [
[41.89631271 380.21255493]
[32.32111740 384.01559448]
[27.62533760 398.26165771]
[22.92956161 412.50769043]
[30.26761246 426.50512695]
[25.47902298 441.56649780]
[11.40477467 448.75616455]
[-3.60512829 443.80859375]
[-10.64557743 429.65911865]
[-5.53959894 414.70236206]
[8.68352032 407.81192017]
[13.37929726 393.56585693]
[18.07507515 379.31982422]
[12.70132160 360.78750610]
[27.78709030 347.48544312]
[31.87401772 333.05294800]
[35.96094513 318.62045288]
[40.04787064 304.18795776]
[44.13479614 289.75546265]
[48.22172546 275.32296753]
[52.30865097 260.89047241]
[56.08832169 246.37446594]
[59.55903625 231.78150940]
[63.02974701 217.18856812]
[66.50045776 202.59561157]
[69.97116852 188.00267029]
[65.38867950 173.83050537]
[76.10910797 162.19509888]
[79.57982635 147.60214233]
[83.05053711 133.00920105]
[86.52124786 118.41624451]
[80.94960785 108.53768158]
[81.15747070 98.17920685]
[86.11759949 90.21462250]
[93.60600281 86.38816833]
[90.75775909 71.66107178]
[87.90951538 56.93396759]
[85.06127167 42.20686722]
[82.21303558 27.47976685]
[79.36479187 12.75266457]
[76.51654816 -1.97443664]
[73.66830444 -16.70153809]
[70.82006073 -31.42864037]
[55.01275635 -37.66528702]
[47.57099915 -56.04755020]
[34.32346725 -63.08337402]
[17.96264267 -61.96289062]
[9.03764629 -75.72067261]
[16.72974968 -90.20388794]
[33.12597275 -90.51345062]
[41.35929108 -76.33090973]
[54.60682678 -69.29508209]
[67.37976074 -77.15969086]
[67.06137848 -92.15631104]
[66.74300385 -107.15293884]
[54.11917114 -113.26480865]
[45.41361618 -124.17690277]
[42.28859711 -137.71382141]
[45.30109787 -151.20829773]
[53.80452728 -162.02673340]
[66.08647156 -168.08316040]
[66.08647156 -183.08316040]
[66.08647156 -198.08316040]
[66.08647156 -213.08316040]
[66.08647156 -228.08316040]
[66.08647156 -243.08316040]
[53.70149612 -252.24386597]
[49.13874435 -266.77090454]
[53.94805527 -281.03045654]
[66.08647156 -289.62094116]
[66.08647156 -304.62094116]
[55.80470276 -316.93618774]
[59.16358566 -332.62365723]
[73.58647156 -339.64932251]
[88.00936127 -332.62365723]
[91.36824036 -316.93618774]
[81.08647156 -304.62094116]
[81.08647156 -289.62094116]
[93.22489166 -281.03045654]
[98.03420258 -266.77090454]
[93.47145081 -252.24386597]
[81.08647156 -243.08316040]
[81.08647156 -228.08316040]
[81.08647156 -213.08316040]
[81.08647156 -198.08316040]
[81.08647156 -183.08316040]
[81.08647156 -168.08316040]
[95.25141907 -160.37361145]
[103.66101074 -146.50308228]
[103.94984436 -130.19125366]
[95.94521332 -115.86818695]
[81.73962402 -107.47131348]
[82.05800629 -92.47469330]
[82.37638092 -77.47807312]
[98.17864990 -54.48089218]
[85.54716492 -34.27688217]
[88.39540863 -19.54977989]
[91.24365234 -4.82267904]
[94.09188843 9.90442276]
[96.94013214 24.63152313]
[99.78837585 39.35862350]
[102.63661957 54.08572769]
[105.48486328 68.81282806]
[108.33309937 83.53993225]
[119.69773102 93.32998657]
[134.68421936 93.96660614]
[149.67070007 94.60321808]
[164.65718079 95.23983765]
[179.64367676 95.87645721]
[194.63015747 96.51307678]
[210.71162415 91.14441681]
[220.32228088 105.11122894]
[209.56178284 118.21268463]
[193.99353027 111.49955750]
[179.00704956 110.86294556]
[164.02056885 110.22632599]
[149.03408813 109.58970642]
[134.04759216 108.95308685]
[119.06111145 108.31646729]
[133.97451782 109.92587280]
[145.40679932 119.63685608]
[149.40725708 134.09356689]
[144.59346008 148.30015564]
[132.62890625 157.34722900]
[117.64822388 158.10836792]
[104.82833099 150.32052612]
[98.59942627 136.67498779]
[101.11419678 121.88695526]
[97.64348602 136.47990417]
[94.17277527 151.07286072]
[90.70205688 165.66580200]
[95.03630066 180.88174438]
[84.56411743 191.47337341]
[81.09340668 206.06632996]
[77.62269592 220.65927124]
[74.15198517 235.25222778]
[70.68127441 249.84516907]
[72.22967529 256.38815308]
[70.45935822 261.88040161]
[66.74114990 264.97738647]
[62.65422440 279.40988159]
[58.56729507 293.84237671]
[54.48036957 308.27487183]
[50.39344406 322.70736694]
[46.30651474 337.13989258]
[42.21958923 351.57238770]
[48.10498810 360.82302856]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[15 146]
[16 145]
[17 144]
[18 143]
[19 142]
[20 141]
[21 140]
[22 137]
[23 136]
[24 135]
[25 134]
[26 133]
[28 131]
[29 130]
[30 129]
[31 128]
[35 104]
[36 103]
[37 102]
[38 101]
[39 100]
[40 99]
[41 98]
[42 97]
[43 96]
[45 52]
[46 51]
[53 94]
[54 93]
[55 92]
[61 87]
[62 86]
[63 85]
[64 84]
[65 83]
[66 82]
[70 78]
[71 77]
[105 119]
[106 118]
[107 117]
[108 116]
[109 115]
[110 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
