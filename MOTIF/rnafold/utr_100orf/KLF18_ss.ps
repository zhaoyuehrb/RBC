%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:44:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUUCCAGUCUUCUCCAGGCAAUUGAGGAAAUUGAGAAAUUUUUCCAGCAUCUCUCUGAGCGGCAUACAGAACAGGCAGAAACCCCAGAUGCACCAG\
) } def
/len { sequence length } bind def

/coor [
[-20.65195274 135.65597534]
[-10.43010330 124.67630005]
[-25.41377831 123.97669220]
[-40.39745331 123.27708435]
[-55.38113022 122.57747650]
[-70.37387848 123.04397583]
[-85.28507233 124.67375946]
[-100.19627380 126.30354309]
[-115.08032227 128.16502380]
[-129.93362427 130.25775146]
[-144.78691101 132.35047913]
[-159.64021301 134.44320679]
[-172.22595215 144.03018188]
[-185.90821838 138.14419556]
[-200.76152039 140.23692322]
[-215.61482239 142.32966614]
[-230.46810913 144.42239380]
[-245.32141113 146.51512146]
[-251.67626953 160.57283020]
[-264.63491821 168.94406128]
[-280.06225586 168.95756531]
[-293.03552246 160.60903931]
[-299.41497803 146.56246948]
[-297.16497803 131.30006409]
[-287.00344849 119.69200134]
[-272.17294312 115.44237518]
[-257.40579224 119.90721893]
[-247.41413879 131.66181946]
[-232.56083679 129.56909180]
[-217.70755005 127.47635651]
[-202.85424805 125.38362885]
[-188.00094604 123.29090118]
[-176.47761536 113.85362244]
[-161.73294067 119.58991241]
[-146.87963867 117.49718475]
[-132.02635193 115.40445709]
[-117.17304993 113.31172180]
[-110.87798309 109.18890381]
[-101.82604980 111.39234161]
[-86.91485596 109.76255798]
[-72.00365448 108.13278198]
[-70.52985382 106.10691071]
[-68.20001984 104.50966644]
[-65.16217804 103.65048218]
[-61.66641235 103.78413391]
[-58.04469299 105.07920837]
[-54.68152618 107.59380341]
[-39.69784927 108.29341125]
[-24.71417236 108.99301147]
[-9.73049736 109.69261932]
[5.24048710 108.76007843]
[20.02151680 106.20642090]
[34.80254745 103.65277100]
[49.58357620 101.09911346]
[64.36460876 98.54546356]
[79.14563751 95.99180603]
[88.66867065 74.15928650]
[118.52835846 70.07590485]
[130.85269165 61.52542496]
[143.17703247 52.97494125]
[155.50135803 44.42445755]
[154.85342407 29.01070595]
[162.66136169 15.70508003]
[176.43368530 8.75335693]
[191.77571106 10.37380600]
[203.79183960 20.04934692]
[208.64778137 34.69255066]
[204.79402161 49.63082504]
[193.46026611 60.09741974]
[178.26309204 62.75247955]
[164.05184937 56.74879074]
[151.72750854 65.29927826]
[139.40318298 73.84976196]
[127.07884216 82.40024567]
[127.77768707 89.86761475]
[141.41052246 96.12426758]
[129.17538452 104.80235291]
[129.87422180 112.26972198]
[143.57107544 118.38497925]
[158.24008179 112.50315857]
[172.73866272 118.79337311]
[178.46505737 133.52374268]
[172.02191162 147.95500183]
[157.23181152 153.52534485]
[142.86947632 146.92999268]
[137.45581055 132.08183289]
[123.75896454 125.96657562]
[104.49681091 130.20976257]
[88.84415436 123.36246490]
[81.69929504 110.77284241]
[66.91825867 113.32649231]
[52.13722992 115.88014984]
[37.35620117 118.43379974]
[22.57517052 120.98744965]
[7.79414034 123.54110718]
[19.29882812 133.16618347]
[22.18112183 147.88665771]
[15.15605164 161.13990784]
[1.35550606 167.01739502]
[-13.06800556 162.89886475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 50]
[3 49]
[4 48]
[5 47]
[6 41]
[7 40]
[8 39]
[9 37]
[10 36]
[11 35]
[12 34]
[14 32]
[15 31]
[16 30]
[17 29]
[18 28]
[51 95]
[52 94]
[53 93]
[54 92]
[55 91]
[56 90]
[58 74]
[59 73]
[60 72]
[61 71]
[78 87]
[79 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
