%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:15:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCUCCAGACAAGAUGGCGCGGCCGGUCCGGGGAGGGCUCGGGGCCCCGCGCCGCUCGCCUUGCCUUCUCCUUCUCUGGCUGCUUUUGCUUCGGCUGGAGCCGGUGACCGCCG\
) } def
/len { sequence length } bind def

/coor [
[141.38714600 311.56674194]
[140.57585144 306.76684570]
[141.95401001 301.44729614]
[137.90705872 287.00354004]
[133.86010742 272.55978394]
[129.81315613 258.11599731]
[125.76621246 243.67225647]
[121.71926117 229.22848511]
[117.67230988 214.78472900]
[106.60704041 211.41473389]
[98.50418091 202.99163818]
[95.50398254 191.57057190]
[98.48130798 180.01879883]
[106.79485321 171.29594421]
[103.54270172 156.65274048]
[98.95849609 150.72508240]
[100.40749359 141.56529236]
[97.55653381 126.83871460]
[94.70557404 112.11213684]
[91.05465698 97.56322479]
[86.61469269 83.23539734]
[82.17472076 68.90756989]
[77.73474884 54.57973862]
[73.29477692 40.25191116]
[68.85481262 25.92408180]
[64.41484070 11.59625435]
[59.97486877 -2.73157430]
[43.94197464 -7.91278553]
[34.21187592 -21.46563721]
[34.42502975 -37.98289871]
[44.30197144 -51.01657486]
[39.47229385 -65.21778107]
[34.64262009 -79.41899109]
[29.81294441 -93.62019348]
[24.98326874 -107.82139587]
[20.15359497 -122.02260590]
[15.32391930 -136.22381592]
[10.49424458 -150.42501831]
[5.66456938 -164.62622070]
[0.79302555 -169.41700745]
[-0.60911322 -175.10197449]
[0.98204553 -179.73677063]
[-3.06490612 -194.18052673]
[-7.11185741 -208.62429810]
[-11.15880871 -223.06805420]
[-15.20576096 -237.51181030]
[-27.69672966 -242.76370239]
[-34.74200821 -254.10887146]
[-33.93498993 -267.24340820]
[-25.79898834 -277.33636475]
[-29.44990158 -291.88525391]
[-39.16956329 -305.77642822]
[-28.51194191 -318.96170044]
[-12.89163208 -312.37063599]
[-14.90098953 -295.53616333]
[-11.25007629 -280.98727417]
[3.49980855 -273.03656006]
[8.08919048 -256.57199097]
[-0.76200145 -241.55876160]
[3.28495026 -227.11500549]
[7.33190155 -212.67124939]
[11.37885284 -198.22747803]
[15.42580509 -183.78372192]
[19.86577415 -169.45590210]
[24.69544983 -155.25468445]
[29.52512550 -141.05348206]
[34.35480118 -126.85227966]
[39.18447495 -112.65107727]
[44.01414871 -98.44986725]
[48.84382629 -84.24866486]
[53.67350006 -70.04745483]
[58.50317383 -55.84625244]
[71.63732147 -53.06412888]
[81.73965454 -44.05749512]
[86.07389832 -31.12131500]
[83.39463806 -17.63318634]
[74.30269623 -7.17154455]
[78.74266815 7.15628386]
[83.18264008 21.48411179]
[87.62261200 35.81193924]
[92.06257629 50.13977051]
[96.50254822 64.46759796]
[100.94252014 78.79542542]
[105.38249207 93.12325287]
[108.10693359 94.80256653]
[110.24143219 97.56406403]
[111.36370087 101.17549133]
[111.14968872 105.24448395]
[109.43215179 109.26117706]
[112.28311157 123.98774719]
[115.13407135 138.71432495]
[118.18591309 153.40058899]
[121.43805695 168.04379272]
[137.74832153 177.46911621]
[142.05513000 195.48356628]
[132.11607361 210.73777771]
[136.16302490 225.18153381]
[140.20997620 239.62530518]
[144.25692749 254.06906128]
[148.30387878 268.51281738]
[152.35083008 282.95657349]
[156.39778137 297.40032959]
[161.03303528 311.66619873]
[166.24880981 325.73016357]
[171.46458435 339.79415894]
[176.68035889 353.85815430]
[189.64500427 363.90054321]
[187.16253662 380.11071777]
[171.78671265 385.81301880]
[159.33485413 375.14138794]
[162.61637878 359.07391357]
[157.40060425 345.00991821]
[152.18482971 330.94595337]
[146.96903992 316.88195801]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 102]
[4 101]
[5 100]
[6 99]
[7 98]
[8 97]
[9 96]
[14 93]
[15 92]
[17 91]
[18 90]
[19 89]
[20 84]
[21 83]
[22 82]
[23 81]
[24 80]
[25 79]
[26 78]
[27 77]
[31 72]
[32 71]
[33 70]
[34 69]
[35 68]
[36 67]
[37 66]
[38 65]
[39 64]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[50 56]
[51 55]
[103 114]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
