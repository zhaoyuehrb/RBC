%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUUCCGGUUCCGCCACGGCCCAGAGGCUGUGUUGAGGCUAAUGGCGGUGCCCACGGAACUGGAUGGAGGGAGUGUUAAGGAGACCGCAGCGGAAGAGGAAUCGCGAGUUCUGGCACCUGGCGCCGCCCCGUUCGGAAAUU\
) } def
/len { sequence length } bind def

/coor [
[-24.44674873 191.45262146]
[-30.73427963 177.83399963]
[-28.81597710 162.95716858]
[-19.27846909 151.37832642]
[-34.07531357 153.83868408]
[-48.87215805 156.29905701]
[-63.66900253 158.75941467]
[-78.37674713 161.70596313]
[-92.97943115 165.13551331]
[-107.58210754 168.56504822]
[-119.24771881 179.25262451]
[-133.40689087 174.63018799]
[-148.00956726 178.05972290]
[-162.61225891 181.48925781]
[-177.21493530 184.91880798]
[-191.81761169 188.34834290]
[-206.42028809 191.77787781]
[-219.49493408 204.69360352]
[-236.08305359 199.06837463]
[-250.60687256 202.81787109]
[-265.13070679 206.56736755]
[-279.65451050 210.31686401]
[-294.13626099 214.22567749]
[-308.57421875 218.29331970]
[-323.01214600 222.36096191]
[-328.26034546 236.96356201]
[-341.10833740 245.66465759]
[-356.61578369 245.11848450]
[-368.81979370 235.53506470]
[-373.02764893 220.59942627]
[-367.62136841 206.05461121]
[-354.67974854 197.49340820]
[-339.17913818 198.20776367]
[-327.07980347 207.92300415]
[-312.64184570 203.85536194]
[-298.20391846 199.78771973]
[-292.57513428 194.90858459]
[-283.40402222 195.79304504]
[-268.88018799 192.04354858]
[-254.35636902 188.29405212]
[-239.83255005 184.54455566]
[-233.38336182 174.25338745]
[-221.25428772 171.04273987]
[-209.84983826 177.17520142]
[-195.24714661 173.74566650]
[-180.64447021 170.31611633]
[-166.04179382 166.88658142]
[-151.43911743 163.45704651]
[-136.83644104 160.02749634]
[-126.21530914 149.58523560]
[-111.01165009 153.96237183]
[-96.40896606 150.53283691]
[-81.80628967 147.10328674]
[-79.63052368 144.23614502]
[-75.92246246 142.31524658]
[-71.15895081 142.06532288]
[-66.12936401 143.96257019]
[-51.33252335 141.50221252]
[-36.53567886 139.04183960]
[-21.73883247 136.58148193]
[-7.25707769 132.67266846]
[6.76816607 127.35359955]
[20.79340935 122.03453064]
[34.81865311 116.71545410]
[48.84389877 111.39637756]
[62.86914062 106.07730865]
[76.89438629 100.75823212]
[90.91962433 95.43916321]
[96.79396820 89.82163239]
[105.31183624 90.16100311]
[119.45053864 85.15131378]
[126.30584717 71.16408539]
[140.71586609 66.28495789]
[154.00830078 72.90664673]
[168.14701843 67.89695740]
[182.28572083 62.88726425]
[196.42442322 57.87757111]
[210.56312561 52.86788177]
[224.70182800 47.85818863]
[231.81188965 41.99823380]
[239.20651245 42.89746475]
[253.45185852 38.19957352]
[258.11337280 25.51362991]
[269.08444214 17.95958138]
[282.20855713 18.12597275]
[292.66888428 25.72652245]
[307.01400757 21.34269905]
[321.35910034 16.95887375]
[332.29550171 5.52621126]
[346.72836304 9.20609570]
[361.07348633 4.82227087]
[375.41857910 0.43844607]
[378.96105957 -14.44100380]
[389.40670776 -25.47664833]
[403.87747192 -29.77356529]
[418.45852661 -26.27375793]
[429.25729370 -16.01451874]
[443.60241699 -20.39834213]
[454.38629150 -32.75309372]
[470.42340088 -29.32627678]
[475.21615601 -13.64310837]
[463.83413696 -1.83708799]
[447.98623657 -6.05323648]
[433.64114380 -1.66941154]
[430.42187500 12.87369728]
[420.28799438 23.92632294]
[405.88729858 28.45244789]
[391.05722046 25.14098930]
[379.80239868 14.78355217]
[365.45730591 19.16737747]
[351.11218262 23.55120277]
[341.20184326 34.67030334]
[325.74291992 31.30397987]
[311.39782715 35.68780518]
[297.05270386 40.07162857]
[289.83294678 55.22217941]
[273.58154297 60.60481644]
[258.14974976 52.44491959]
[243.90440369 57.14281082]
[229.71151733 61.99689484]
[215.57281494 67.00658417]
[201.43411255 72.01628113]
[187.29541016 77.02597046]
[173.15670776 82.03565979]
[159.01799011 87.04534912]
[152.85993958 100.55882263]
[138.59265137 105.84077454]
[124.46022797 99.29001617]
[110.32152557 104.29971313]
[96.23870087 109.46440125]
[82.21345520 114.78347778]
[68.18821716 120.10255432]
[54.16297150 125.42162323]
[40.13772583 130.74069214]
[26.11248207 136.05976868]
[12.08723927 141.37884521]
[-1.93800426 146.69792175]
[12.12936306 151.90457153]
[21.27318954 163.79533386]
[22.69267082 178.72802734]
[15.95301247 192.12866211]
[3.11860824 199.89254761]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 60]
[5 59]
[6 58]
[7 57]
[8 53]
[9 52]
[10 51]
[12 49]
[13 48]
[14 47]
[15 46]
[16 45]
[17 44]
[19 41]
[20 40]
[21 39]
[22 38]
[23 36]
[24 35]
[25 34]
[61 137]
[62 136]
[63 135]
[64 134]
[65 133]
[66 132]
[67 131]
[68 130]
[70 129]
[71 128]
[74 125]
[75 124]
[76 123]
[77 122]
[78 121]
[79 120]
[81 119]
[82 118]
[86 115]
[87 114]
[88 113]
[90 111]
[91 110]
[92 109]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
