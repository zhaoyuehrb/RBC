%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUUUCUGGACACACAGACAGAGACAGACAGGAUGGACUUCCUCCGGCUAUACCUCCCUGGGCUGCACCAGGCCUUGAGGGGGGCACUGGAUUCCCUCGGCACCUUUGUCUCCUACCUCCUGGGAGAUGCAG\
) } def
/len { sequence length } bind def

/coor [
[85.56030273 193.73921204]
[93.89521790 179.61613464]
[93.54357910 164.62025452]
[79.34434509 159.78479004]
[69.91365051 171.44935608]
[60.48295975 183.11390686]
[51.05226517 194.77847290]
[41.62157059 206.44303894]
[32.19087982 218.10760498]
[37.78102875 232.41305542]
[35.45365143 247.59457397]
[25.83480453 259.56845093]
[11.51190567 265.11370850]
[-3.66225648 262.73876953]
[-15.60590744 253.08244324]
[-21.10626602 238.74223328]
[-18.68376350 223.57559204]
[-8.99003983 211.66226196]
[5.36734104 206.20687866]
[20.52631569 208.67691040]
[29.95700836 197.01234436]
[39.38770294 185.34777832]
[48.81839371 173.68322754]
[58.24908829 162.01866150]
[67.67977905 150.35409546]
[60.55656815 143.95671082]
[54.63444519 136.59220886]
[50.03714752 128.47779846]
[46.85023880 119.84500122]
[45.11978149 110.93317413]
[44.85207367 101.98287964]
[46.01445770 93.22937775]
[31.51051140 89.40373993]
[17.00656509 85.57809448]
[7.81428337 86.41423798]
[2.20950055 81.48902893]
[-12.20077705 77.32443237]
[-27.98255920 81.78171539]
[-39.54323959 70.15060425]
[-34.99017715 54.39618683]
[-19.00717735 50.72525787]
[-8.03617764 62.91415405]
[6.37410069 67.07875061]
[20.83220673 71.07415009]
[35.33615112 74.89978790]
[49.84009933 78.72543335]
[57.54221344 65.85385895]
[47.31509399 54.88088608]
[31.39704132 52.88210297]
[23.15831375 39.11609650]
[28.91895676 24.14297104]
[44.25989914 19.44882393]
[57.41288376 28.63460350]
[58.28806305 44.65376663]
[68.51518250 55.62673950]
[76.42662811 51.11166763]
[84.96015930 47.98938370]
[93.87336731 46.34061813]
[102.91439056 46.20436096]
[101.86024475 31.24144554]
[100.80610657 16.27853203]
[99.75196075 1.31561887]
[87.65608215 -8.85616779]
[86.37879944 -24.60875893]
[96.67790222 -36.59642029]
[112.44311523 -37.70708466]
[124.32122040 -27.28181648]
[125.26514435 -11.50574017]
[114.71487427 0.26147598]
[115.76902008 15.22439003]
[116.82315826 30.18730354]
[117.87730408 45.15021515]
[131.41355896 51.61317444]
[143.71203613 43.02553940]
[156.01051331 34.43790054]
[159.22528076 28.48756218]
[164.23522949 25.56258583]
[169.09281921 25.75193024]
[181.78030396 17.75019073]
[194.46778870 9.74845219]
[207.15525818 1.74671328]
[219.84274292 -6.25502586]
[232.53022766 -14.25676537]
[245.21771240 -22.25850487]
[246.10118103 -37.75040817]
[255.94789124 -49.74299240]
[270.97155762 -53.62486267]
[285.39529419 -47.90335846]
[293.67285156 -34.77851868]
[292.62136841 -19.29711151]
[282.64517212 -7.41205072]
[267.58026123 -3.69338775]
[253.21945190 -9.57102299]
[240.53196716 -1.56928408]
[227.84448242 6.43245506]
[215.15699768 14.43419456]
[202.46952820 22.43593407]
[189.78204346 30.43767166]
[177.09455872 38.43941116]
[164.59814453 46.73637772]
[152.29966736 55.32401276]
[140.00119019 63.91164780]
[148.25816345 74.19158173]
[153.87451172 86.34819031]
[156.42788696 99.70348358]
[155.66990662 113.48576355]
[151.54649353 126.87420654]
[144.20684814 139.04776001]
[134.00018311 149.23535156]
[143.70172119 160.67562866]
[153.40327454 172.11590576]
[163.10482788 183.55618286]
[172.80636597 194.99645996]
[182.50791931 206.43673706]
[192.20947266 217.87701416]
[201.91101074 229.31729126]
[217.71788025 232.05999756]
[225.30232239 246.19703674]
[218.84617615 260.88369751]
[203.30207825 264.85360718]
[190.59410095 255.06141663]
[190.47073364 239.01884460]
[180.76919556 227.57856750]
[171.06764221 216.13829041]
[161.36608887 204.69801331]
[151.66455078 193.25773621]
[141.96299744 181.81745911]
[132.26144409 170.37716675]
[122.55989838 158.93688965]
[108.53945923 164.26861572]
[108.89109802 179.26449585]
[117.87882996 192.98136902]
[110.25294495 207.49955750]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 131]
[3 130]
[4 25]
[5 24]
[6 23]
[7 22]
[8 21]
[9 20]
[32 46]
[33 45]
[34 44]
[36 43]
[37 42]
[47 55]
[48 54]
[59 72]
[60 71]
[61 70]
[62 69]
[73 102]
[74 101]
[75 100]
[78 99]
[79 98]
[80 97]
[81 96]
[82 95]
[83 94]
[84 93]
[109 129]
[110 128]
[111 127]
[112 126]
[113 125]
[114 124]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
