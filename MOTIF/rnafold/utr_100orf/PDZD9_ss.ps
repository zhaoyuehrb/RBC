%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGGGACUGACUCCAGCCUCUGCUCCGGGAGGCCCUCCCGGGCUGCCUGACCUCCCGGGACCAUGCAGAAGGCCUCCCACAAAAACAAAAAAGGUGAUGUUCUGAUUAGUGUUGGCCAUGCCAAUGUGUUAGGAUAUACUCUUCGAGAAUUUUUACAGCUUU\
) } def
/len { sequence length } bind def

/coor [
[-38.38066483 111.41654968]
[-58.19379807 102.72303009]
[-68.79306030 84.00865936]
[-83.79031372 83.72133636]
[-98.78755951 83.43401337]
[-113.78480530 83.14669037]
[-128.78205872 82.85936737]
[-118.16155243 93.45204926]
[-114.57379150 108.01666260]
[-119.05900574 122.33039856]
[-130.31675720 132.24316406]
[-145.08300781 134.88090515]
[-159.07649231 129.47882080]
[-168.23997498 117.60318756]
[-169.91662598 102.69718933]
[-163.62033081 89.08261871]
[-151.17892456 80.70761108]
[-165.95655823 78.13433075]
[-180.73417664 75.56105804]
[-195.51181030 72.98778534]
[-210.31340027 70.55615997]
[-225.13760376 68.26642609]
[-239.96182251 65.97668457]
[-254.78602600 63.68694687]
[-269.70285034 62.10949326]
[-284.67810059 61.24794388]
[-299.65332031 60.38639832]
[-314.62857056 59.52484894]
[-329.60379028 58.66330338]
[-344.57904053 57.80175400]
[-359.55426025 56.94020462]
[-374.52951050 56.07865906]
[-389.52676392 56.36598206]
[-404.45800781 57.80048752]
[-419.38925171 59.23499680]
[-434.32049561 60.66950607]
[-447.35195923 70.62508392]
[-462.38330078 64.06841278]
[-463.95162964 47.74443054]
[-450.44354248 38.44585037]
[-435.75500488 45.73825836]
[-420.82376099 44.30374908]
[-405.89251709 42.86923981]
[-390.96127319 41.43473053]
[-402.91500854 32.37339020]
[-407.40100098 18.05990601]
[-402.75741577 3.79677248]
[-390.70443726 -5.13217306]
[-375.70718384 -5.41916609]
[-363.32144165 3.04211068]
[-358.13555908 17.11714172]
[-362.07064819 31.59177589]
[-373.66796875 41.10342026]
[-358.69271851 41.96496964]
[-343.71749878 42.82651520]
[-328.74224854 43.68806458]
[-313.76699829 44.54961395]
[-298.79177856 45.41115952]
[-283.81652832 46.27270889]
[-268.84130859 47.13425446]
[-276.49005127 34.23089600]
[-271.35485840 20.13728142]
[-257.19802856 15.17904758]
[-244.39149475 22.98882294]
[-242.31791687 37.84480667]
[-252.49627686 48.86273956]
[-237.67207336 51.15247726]
[-222.84786987 53.44221878]
[-208.02366638 55.73195648]
[-200.89993286 53.63540268]
[-192.93853760 58.21015549]
[-178.16090393 60.78343201]
[-163.38328552 63.35670471]
[-148.60565186 65.92997742]
[-138.81814575 62.13198090]
[-128.49473572 67.86212158]
[-113.49748230 68.14944458]
[-98.50023651 68.43676758]
[-83.50299072 68.72409058]
[-68.50573730 69.01141357]
[-65.40675354 60.83203125]
[-60.31349564 53.69764328]
[-53.55473328 48.08556747]
[-45.57106400 44.37431335]
[-36.88616943 42.81805801]
[-28.07248116 43.52928543]
[-19.71344566 46.47069168]
[-12.36490440 51.45701218]
[-6.51813507 58.16667175]
[-2.56700826 66.16251373]
[-0.78146625 74.92024994]
[14.04273987 77.20999146]
[28.86694717 79.49973297]
[43.69115448 81.78946686]
[57.45035934 76.08565521]
[69.90770721 85.83886719]
[84.73191071 88.12860107]
[119.41453552 59.59190369]
[134.14016724 56.73603821]
[148.86578369 53.88017273]
[163.59141541 51.02430344]
[178.31703186 48.16843796]
[193.04266357 45.31257248]
[207.76828003 42.45670319]
[222.49391174 39.60083771]
[237.21954346 36.74497223]
[251.94515991 33.88910294]
[257.53424072 24.48956680]
[267.18710327 19.83725166]
[277.58532715 21.26180077]
[285.30044556 28.04827499]
[300.12466431 25.75853539]
[314.94885254 23.46879578]
[329.77307129 21.17905617]
[344.59729004 18.88931656]
[359.42147827 16.59957886]
[374.24569702 14.30983925]
[388.97622681 5.91652775]
[401.11932373 17.74788857]
[393.11190796 32.69169235]
[376.53543091 29.13404465]
[361.71121216 31.42378426]
[346.88702393 33.71352386]
[332.06280518 36.00326157]
[317.23861694 38.29300308]
[302.41439819 40.58274078]
[287.59017944 42.87248230]
[273.49667358 56.07142258]
[254.80102539 48.61473083]
[240.07540894 51.47059631]
[225.34977722 54.32646179]
[210.62416077 57.18233109]
[195.89852905 60.03819656]
[181.17289734 62.89406204]
[166.44728088 65.74993134]
[151.72164917 68.60579681]
[136.99603271 71.46166229]
[122.27040100 74.31752777]
[120.00749969 81.46800232]
[113.21878815 102.91941833]
[123.62027740 113.72724152]
[134.02175903 124.53507233]
[149.36164856 131.75477600]
[146.67059326 148.49378967]
[129.84078979 150.54171753]
[123.21393585 134.93655396]
[112.81244659 124.12873077]
[102.41096497 113.32090759]
[107.37042236 127.47731018]
[103.51864624 141.97433472]
[92.18671417 151.80221558]
[77.29061890 153.56471252]
[63.97804260 146.65274048]
[56.84944916 133.45489502]
[58.36828232 118.53198242]
[68.00967407 107.04096222]
[82.44217682 102.95281219]
[67.61796570 100.66307068]
[52.79843521 106.20310974]
[41.40141296 96.61367798]
[26.57720757 94.32393646]
[11.75300121 92.03419495]
[-3.07120538 89.74446106]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 80]
[4 79]
[5 78]
[6 77]
[7 76]
[17 74]
[18 73]
[19 72]
[20 71]
[21 69]
[22 68]
[23 67]
[24 66]
[25 60]
[26 59]
[27 58]
[28 57]
[29 56]
[30 55]
[31 54]
[32 53]
[33 44]
[34 43]
[35 42]
[36 41]
[91 163]
[92 162]
[93 161]
[94 160]
[96 158]
[97 157]
[98 138]
[99 137]
[100 136]
[101 135]
[102 134]
[103 133]
[104 132]
[105 131]
[106 130]
[107 129]
[111 127]
[112 126]
[113 125]
[114 124]
[115 123]
[116 122]
[117 121]
[140 148]
[141 147]
[142 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
