%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:00:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGUCCCCGGCGCGGCCCGCGCGCUCCUCCGCCGCCUCUCGCCUGCGCCAUGGCCGGCCGGUCCCACCCGGGCCCGCUGCGGCCGCUGCUGCCGCUCCUUGUGGUGGCCGCGUGCGUCCUGCCCGGAGCCGGCGGGACAUGCCCGGAGC\
) } def
/len { sequence length } bind def

/coor [
[384.59448242 114.54542542]
[373.39038086 117.91065979]
[361.69308472 118.46609497]
[350.19717407 116.17300415]
[339.58670044 111.16194153]
[330.49438477 103.72539520]
[323.46401978 94.30065155]
[318.91781616 83.44414520]
[304.01589966 85.15682983]
[289.11401367 86.86952209]
[274.21209717 88.58221436]
[259.31021118 90.29489899]
[252.98330688 94.20847321]
[244.08090210 91.88488770]
[229.14660645 93.28719330]
[214.21229553 94.68949890]
[199.27798462 96.09179688]
[184.34367371 97.49410248]
[169.50909424 109.83772278]
[151.28135681 101.32904053]
[136.41831970 103.35137177]
[121.55526733 105.37371063]
[106.69222260 107.39604187]
[92.19662476 111.25320435]
[78.29406738 116.88516235]
[72.36386871 131.53466797]
[57.77942276 137.62315369]
[43.19342422 131.53839111]
[37.25948715 116.89039612]
[43.49810791 102.36954498]
[58.20802689 96.59080505]
[72.66210938 102.98260498]
[86.56466675 97.35064697]
[84.07942963 82.55728149]
[81.59442902 67.76523590]
[66.61471558 66.98538971]
[53.78159714 76.61298370]
[38.28994751 72.44306183]
[32.02362823 57.67441559]
[39.78963089 43.63629532]
[55.63053513 41.09754562]
[67.39456177 52.00567245]
[82.37427521 52.78551865]
[98.10485840 63.51539993]
[105.68550873 78.05410004]
[104.66988373 92.53299713]
[119.53292847 90.51066589]
[134.39598083 88.48832703]
[149.25901794 86.46599579]
[155.38261414 77.37825012]
[165.30738831 73.27919006]
[175.62657166 75.31234741]
[182.94137573 82.55979919]
[197.87568665 81.15749359]
[212.80998230 79.75518799]
[227.74429321 78.35288239]
[242.67860413 76.95058441]
[257.59750366 75.39299774]
[272.49942017 73.68031311]
[287.40130615 71.96762085]
[302.30322266 70.25492859]
[317.20513916 68.54224396]
[321.64941406 50.41206741]
[332.62084961 35.34965897]
[348.45901489 25.59282303]
[366.78280640 22.57957649]
[384.84832764 26.73626709]
[399.95971680 37.41742706]
[409.87164307 53.00587463]
[424.51513672 49.75505066]
[439.15866089 46.50422668]
[453.80215454 43.25339890]
[468.44564819 40.00257492]
[483.08914185 36.75174713]
[490.44207764 18.59823990]
[509.77865601 10.32070637]
[530.68865967 18.58034515]
[542.19049072 8.95181942]
[553.59149170 -0.79583299]
[564.89050293 -10.66155624]
[576.18951416 -20.52727890]
[587.48852539 -30.39300156]
[598.78753662 -40.25872421]
[610.08654785 -50.12444687]
[621.38555908 -59.99016953]
[632.68457031 -69.85589600]
[643.98352051 -79.72161865]
[655.28253174 -89.58734131]
[666.58154297 -99.45306396]
[677.88055420 -109.31878662]
[674.26281738 -124.19058990]
[677.98199463 -139.03735352]
[688.18347168 -150.44738770]
[702.52294922 -155.79876709]
[717.70538330 -153.86177063]
[730.24200439 -145.08151245]
[737.25183105 -131.47563171]
[737.12426758 -116.17064667]
[729.88842773 -102.68355560]
[717.20721436 -94.11357117]
[701.99456787 -92.43002319]
[687.74627686 -98.01978302]
[676.44726562 -88.15406036]
[665.14825439 -78.28833771]
[653.84924316 -68.42261505]
[642.55029297 -58.55688858]
[631.25128174 -48.69116592]
[619.95227051 -38.82544327]
[608.65325928 -28.95972061]
[597.35424805 -19.09399796]
[586.05523682 -9.22827435]
[574.75622559 0.63744867]
[563.45721436 10.50317192]
[560.46801758 17.31567574]
[551.81903076 20.45362282]
[540.31719971 30.08214951]
[540.94116211 45.06916428]
[553.20355225 53.70828247]
[565.46594238 62.34739685]
[577.72827148 70.98651123]
[589.99066162 79.62562561]
[602.25305176 88.26474762]
[614.51538086 96.90386200]
[626.77777100 105.54297638]
[641.84680176 101.36470795]
[656.05456543 107.89716339]
[662.69262695 122.05591583]
[658.62664795 137.15563965]
[645.77648926 146.06671143]
[630.20959473 144.58158875]
[619.27618408 133.40150452]
[618.13867188 117.80534363]
[605.87628174 109.16622925]
[593.61389160 100.52711487]
[581.35156250 91.88800049]
[569.08917236 83.24887848]
[556.82678223 74.60976410]
[544.56445312 65.97064972]
[532.30206299 57.33153152]
[515.45678711 66.59606171]
[497.69970703 63.71209335]
[486.33996582 51.39524841]
[471.69647217 54.64607620]
[457.05297852 57.89690018]
[442.40948486 61.14772797]
[427.76596069 64.39855194]
[413.12246704 67.64937592]
[412.45550537 79.26936340]
[408.99380493 90.39422607]
[402.93753052 100.36140442]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 62]
[9 61]
[10 60]
[11 59]
[12 58]
[14 57]
[15 56]
[16 55]
[17 54]
[18 53]
[20 49]
[21 48]
[22 47]
[23 46]
[24 33]
[25 32]
[35 43]
[36 42]
[69 147]
[70 146]
[71 145]
[72 144]
[73 143]
[74 142]
[77 116]
[78 115]
[79 113]
[80 112]
[81 111]
[82 110]
[83 109]
[84 108]
[85 107]
[86 106]
[87 105]
[88 104]
[89 103]
[90 102]
[117 139]
[118 138]
[119 137]
[120 136]
[121 135]
[122 134]
[123 133]
[124 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
