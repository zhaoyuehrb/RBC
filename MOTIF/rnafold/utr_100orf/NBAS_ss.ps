%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUCCGUAGAGACACUCCUCCGCUGCCUGAGUCCUCGGCGAACAUGGCGGCCCCCGAGUCAGGGCCGGCUUUGAGUCCAGGCACUGCAGAGGGUGAGGAGGAGACGAUUCUCUAUGACUUGUUGGUCAACACCGAGUGGCCAC\
) } def
/len { sequence length } bind def

/coor [
[274.94692993 478.12203979]
[266.19210815 466.99160767]
[261.76458740 453.50903320]
[262.21826172 439.29544067]
[267.51882935 426.06710815]
[277.04550171 415.42843628]
[270.16336060 402.10040283]
[263.28121948 388.77239990]
[256.39907837 375.44436646]
[249.51690674 362.11636353]
[242.63476562 348.78833008]
[235.75260925 335.46032715]
[228.87046814 322.13229370]
[209.96859741 317.68566895]
[200.17930603 300.56701660]
[206.11180115 281.44393921]
[198.37849426 268.59109497]
[190.64518738 255.73823547]
[182.91188049 242.88537598]
[175.17857361 230.03251648]
[167.44525146 217.17965698]
[159.71194458 204.32679749]
[151.70201111 191.64450073]
[143.41918945 179.13870239]
[135.13636780 166.63290405]
[120.53421783 163.92869568]
[111.95611572 151.36404419]
[114.89154053 136.06629944]
[106.60871887 123.56049347]
[98.32590485 111.05470276]
[89.90809631 98.63936615]
[81.35629272 86.31594849]
[72.80448914 73.99253082]
[64.11968231 61.76247787]
[55.30290604 49.62722397]
[46.48612595 37.49196625]
[32.11498260 30.87526512]
[30.89368629 16.03081512]
[22.07690620 3.89556003]
[13.26012802 -8.23969460]
[2.34469533 -9.33433533]
[-5.96901941 -16.14884377]
[-9.05519867 -26.21555328]
[-6.11478233 -36.09595490]
[-14.39760113 -48.60174942]
[-28.46862793 -55.83478165]
[-29.04573441 -70.71820068]
[-37.32855225 -83.22399902]
[-45.61137009 -95.72978973]
[-54.02917862 -108.14512634]
[-62.58098221 -120.46854401]
[-71.13278961 -132.79196167]
[-79.68459320 -145.11538696]
[-88.23639679 -157.43879700]
[-103.75216675 -157.64031982]
[-116.16606140 -166.95025635]
[-120.70469666 -181.78872681]
[-115.62286377 -196.45005798]
[-102.87463379 -205.29666138]
[-87.36196899 -204.92683411]
[-75.04979706 -195.48278809]
[-70.67240143 -180.59594727]
[-75.91297913 -165.99060059]
[-67.36117554 -153.66719055]
[-58.80937195 -141.34376526]
[-50.25756454 -129.02035522]
[-41.70576096 -116.69693756]
[-35.26051331 -112.96726227]
[-33.10557556 -104.01261139]
[-24.82275772 -91.50681305]
[-16.53993797 -79.00102234]
[-3.06135368 -72.66249084]
[-1.89180529 -56.88456726]
[6.39101315 -44.37877274]
[24.27223206 -37.13468552]
[25.39538383 -17.05647469]
[34.21216202 -4.92121887]
[43.02894211 7.21403599]
[56.76945114 12.96274471]
[58.62137985 28.67518997]
[67.43816376 40.81044388]
[76.25493622 52.94569778]
[82.77947235 56.53486633]
[85.12790680 65.44072723]
[93.67971039 77.76414490]
[102.23151398 90.08756256]
[109.10021973 94.42788696]
[110.83169556 102.77188110]
[119.11451721 115.27767944]
[127.39733887 127.78347778]
[142.62791443 131.04954529]
[150.84971619 143.85018921]
[147.64216614 158.35008240]
[155.92498779 170.85588074]
[164.20780945 183.36167908]
[170.04977417 186.70605469]
[172.85015869 191.75846863]
[172.56480408 196.59349060]
[180.29811096 209.44635010]
[188.03141785 222.29920959]
[195.76472473 235.15206909]
[203.49804688 248.00492859]
[211.23135376 260.85778809]
[218.96466064 273.71063232]
[229.76222229 273.62738037]
[239.52957153 278.03720093]
[246.50164795 286.06869507]
[249.44981384 296.20297241]
[247.89807129 306.56057739]
[242.19848633 315.25015259]
[249.08062744 328.57818604]
[255.96278381 341.90618896]
[262.84494019 355.23419189]
[269.72708130 368.56222534]
[276.60922241 381.89022827]
[283.49139404 395.21826172]
[290.37353516 408.54626465]
[306.35079956 407.08993530]
[321.63159180 411.85028076]
[333.89590454 422.07379150]
[341.29364014 436.17987061]
[342.72348022 452.00515747]
[337.99688721 467.13540649]
[327.86218262 479.27359009]
[335.03146362 492.44937134]
[342.20074463 505.62518311]
[349.37002563 518.80096436]
[356.53930664 531.97674561]
[363.70858765 545.15252686]
[379.11160278 547.03045654]
[390.44613647 557.62799072]
[393.35385132 572.87017822]
[386.71664429 586.89611816]
[373.08666992 594.31256104]
[357.70492554 592.26763916]
[346.48599243 581.54779053]
[343.74380493 566.27496338]
[350.53277588 552.32183838]
[343.36349487 539.14605713]
[336.19424438 525.97021484]
[329.02496338 512.79443359]
[321.85568237 499.61865234]
[314.68640137 486.44287109]
[300.75942993 488.45242310]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 117]
[7 116]
[8 115]
[9 114]
[10 113]
[11 112]
[12 111]
[13 110]
[16 104]
[17 103]
[18 102]
[19 101]
[20 100]
[21 99]
[22 98]
[23 95]
[24 94]
[25 93]
[28 90]
[29 89]
[30 88]
[31 86]
[32 85]
[33 84]
[34 82]
[35 81]
[36 80]
[38 78]
[39 77]
[40 76]
[44 74]
[45 73]
[47 71]
[48 70]
[49 69]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
[124 143]
[125 142]
[126 141]
[127 140]
[128 139]
[129 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
