%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:33:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCCUGUACCUGGGCAUCCAGAAAAAUGGUGGUGAUGGCGCGACUCUCGCGGCCCGAGCGGCCGGACCUUGUCUUCGAGGAAGAGGACCUCCCCUAUGAGGAGGAAAUCAUGCGGAACCAAUUCU\
) } def
/len { sequence length } bind def

/coor [
[81.92977142 257.07595825]
[81.09750366 241.92103577]
[85.79974365 227.49005127]
[95.40055847 215.73468018]
[108.60151672 208.24473572]
[106.38335419 193.40963745]
[104.16519165 178.57455444]
[101.94702911 163.73947144]
[99.72887421 148.90438843]
[83.97005463 146.20339966]
[69.92458344 138.56399536]
[58.99513626 148.83761597]
[48.06568909 159.11123657]
[37.13624191 169.38484192]
[32.92477798 185.23399353]
[17.02486038 189.24954224]
[5.79295826 177.30062866]
[10.78349113 161.67929077]
[26.86262703 158.45539856]
[37.79207611 148.18177795]
[48.72152328 137.90817261]
[59.65097046 127.63455200]
[55.59740448 120.49687958]
[52.79471970 112.78179169]
[51.32186890 104.70661926]
[51.22034454 96.49884796]
[52.49301147 88.38971710]
[55.10401154 80.60765839]
[58.97978973 73.37191010]
[47.79957199 63.37177277]
[36.61935806 53.37163544]
[21.17515945 49.93837357]
[16.84718704 35.68642807]
[5.66697073 25.68629074]
[-9.41770649 28.81018257]
[-23.28727341 22.52619743]
[-30.70933914 9.43509579]
[-29.01986504 -5.33933067]
[-40.20008087 -15.33946896]
[-51.38029861 -25.33960724]
[-62.68334198 -35.20070267]
[-74.10748291 -44.92124557]
[-85.53163147 -54.64178848]
[-96.95577240 -64.36232758]
[-112.93725586 -70.02171326]
[-111.92315674 -86.94530487]
[-95.38021851 -90.65575409]
[-87.23522949 -75.78647614]
[-75.81108856 -66.06593323]
[-64.38694000 -56.34538651]
[-52.96279907 -46.62484360]
[-45.75227737 -44.66534424]
[-41.38015747 -36.51982498]
[-30.19994164 -26.51968575]
[-19.01972580 -16.51954651]
[-4.52442074 -19.83980560]
[9.31014729 -13.91792107]
[17.09596252 -0.83226216]
[15.66710854 14.50607395]
[26.84732437 24.50621223]
[41.49184036 27.22419739]
[46.61949539 42.19142151]
[57.79971313 52.19155884]
[68.97992706 62.19169617]
[80.15866852 55.30062485]
[92.76803589 51.63253784]
[105.89885712 51.45191956]
[118.60434723 54.77178955]
[126.37052155 41.93876648]
[134.13668823 29.10573959]
[141.90286255 16.27271271]
[149.66903687 3.43968654]
[149.46591187 -12.95820236]
[163.70159912 -21.09928322]
[177.73164368 -12.60870838]
[177.12313843 3.77914524]
[162.50205994 11.20585918]
[154.73590088 24.03888512]
[146.96972656 36.87191010]
[139.20355225 49.70493698]
[131.43737793 62.53796387]
[140.24661255 72.21650696]
[146.17369080 83.88469696]
[148.79414368 96.70695496]
[163.73796082 98.00402069]
[173.93530273 86.45757294]
[188.80245972 83.16808319]
[202.59272766 89.19241333]
[210.10144043 102.02819824]
[225.04524231 103.32527161]
[239.98905945 104.62233734]
[254.93287659 105.91940308]
[269.87670898 107.21646881]
[280.79776001 96.02432251]
[296.36303711 94.52202606]
[309.22302246 103.41890717]
[313.30566406 118.51414490]
[306.68325806 132.68022156]
[292.48266602 139.22834778]
[277.40902710 135.06669617]
[268.57962036 122.16028595]
[253.63581848 120.86322021]
[238.69200134 119.56615448]
[223.74818420 118.26908112]
[208.80436707 116.97201538]
[199.19641113 128.32212830]
[184.57441711 131.88038635]
[170.49633789 126.07855988]
[162.44088745 112.94783783]
[147.49707031 111.65077209]
[135.63374329 133.49549866]
[114.56395721 146.68623352]
[116.78211975 161.52131653]
[119.00027466 176.35639954]
[121.21843719 191.19148254]
[123.43659973 206.02656555]
[138.25103760 209.32762146]
[150.87043762 217.76060486]
[159.58813477 230.18501282]
[163.22512817 244.92057800]
[161.28955078 259.97442627]
[154.04315186 273.31060791]
[142.46598816 283.12557983]
[128.12373352 288.09188843]
[112.95608521 287.53793335]
[99.01433563 281.53860474]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 116]
[6 115]
[7 114]
[8 113]
[9 112]
[11 22]
[12 21]
[13 20]
[14 19]
[29 64]
[30 63]
[31 62]
[33 60]
[34 59]
[38 55]
[39 54]
[40 53]
[41 51]
[42 50]
[43 49]
[44 48]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
[84 110]
[85 109]
[89 105]
[90 104]
[91 103]
[92 102]
[93 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
