%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCAGCCGCCGCCUGGGCCGCUCCGUGUCCCCGGUGGAGCCGCCGCCGCCGCCGCCGGGAGCUCGAUGCGGACGGAGCCCGGGCCGAGCCAUGGGGAUCCUCAGCAUCACGGACCAGCCGCCCCUGGUCCAGGCCAUCUUUAGCCGAGAUGUGGAGGAAGUGCGUUCCCUACUCUCGCAGAAGGAGAACA\
) } def
/len { sequence length } bind def

/coor [
[48.17263794 163.61227417]
[42.58091354 149.69349670]
[45.77614975 135.03776550]
[56.65416336 124.70970154]
[71.45616150 122.27845764]
[56.46072388 122.64849854]
[41.46884155 123.14185333]
[26.48152161 123.75848389]
[20.67752457 126.98180389]
[14.97581196 126.80395508]
[10.99281502 124.14070129]
[-4.00667810 124.26406097]
[-19.00617027 124.38742065]
[-34.00566483 124.51078033]
[-49.00515747 124.63414001]
[-64.00464630 124.75749969]
[-79.00414276 124.88085938]
[-94.00363159 125.00421906]
[-108.99906921 125.37426758]
[-123.98638916 125.99089813]
[-132.44894409 129.47541809]
[-139.22485352 126.49237061]
[-154.22029114 126.86241150]
[-169.21572876 127.23246002]
[-184.21116638 127.60250092]
[-199.20660400 127.97254944]
[-214.20202637 128.34259033]
[-229.19746399 128.71264648]
[-244.19290161 129.08268738]
[-259.16046143 130.06886292]
[-274.07479858 131.66949463]
[-288.98916626 133.27014160]
[-303.90350342 134.87077332]
[-318.81787109 136.47142029]
[-333.73220825 138.07205200]
[-348.64657593 139.67269897]
[-363.56091309 141.27333069]
[-369.08932495 151.82116699]
[-378.92672729 158.31745911]
[-390.55899048 159.24084473]
[-401.07952881 154.47686768]
[-407.91555786 145.31781006]
[-422.87448120 146.42704773]
[-436.11950684 156.09667969]
[-451.00463867 149.21444702]
[-452.21731567 132.86019897]
[-438.51007080 123.85779572]
[-423.98373413 131.46812439]
[-409.02481079 130.35888672]
[-397.94601440 115.80121613]
[-379.42901611 113.91501617]
[-365.16156006 126.35897827]
[-350.24722290 124.75833893]
[-335.33285522 123.15769958]
[-320.41851807 121.55706024]
[-305.50415039 119.95642090]
[-290.58978271 118.35578156]
[-275.67544556 116.75514221]
[-260.76107788 115.15451050]
[-270.54821777 103.78736877]
[-267.92935181 89.01775360]
[-254.83062744 81.70861053]
[-240.88607788 87.23577118]
[-236.35182190 101.53404236]
[-244.56294250 114.08724976]
[-229.56752014 113.71720123]
[-214.57208252 113.34716034]
[-199.57664490 112.97711182]
[-184.58120728 112.60707092]
[-169.58576965 112.23702240]
[-154.59034729 111.86698151]
[-139.59490967 111.49693298]
[-124.60301971 111.00357819]
[-109.61569977 110.38694763]
[-105.76891327 107.53047943]
[-100.08291626 107.07161713]
[-94.12699127 110.00473022]
[-79.12750244 109.88137054]
[-64.12800598 109.75801086]
[-49.12851715 109.63465118]
[-34.12902451 109.51129150]
[-19.12952995 109.38793182]
[-4.13003778 109.26457214]
[10.86945534 109.14121246]
[25.86488914 108.77116394]
[40.85221100 108.15453339]
[47.41735077 104.73245239]
[56.09067917 107.65306854]
[71.08611298 107.28302002]
[78.10723114 83.73811340]
[98.85578156 75.30023956]
[116.50700378 85.18415070]
[130.40034485 79.52948761]
[144.29367065 73.87481689]
[158.18701172 68.22015381]
[172.08035278 62.56549072]
[185.97367859 56.91082382]
[199.51864624 50.46615219]
[212.67037964 43.25282288]
[225.82209778 36.03949356]
[238.97383118 28.82616425]
[252.12554932 21.61283493]
[260.50451660 8.19256496]
[275.38433838 8.85608768]
[288.53604126 1.64275861]
[301.68777466 -5.57057095]
[314.83950806 -12.78390026]
[327.99124146 -19.99722862]
[326.28375244 -37.25817490]
[337.45245361 -53.96213913]
[359.28036499 -60.75234604]
[370.27215576 -70.95924377]
[381.26394653 -81.16613770]
[392.25573730 -91.37303925]
[403.24749756 -101.57993317]
[414.23928833 -111.78682709]
[425.23107910 -121.99372864]
[425.56527710 -137.79447937]
[437.03210449 -148.67050171]
[452.82843018 -148.16925049]
[463.58261108 -136.58808899]
[462.91436768 -120.79793549]
[451.22018433 -110.16680145]
[435.43795776 -111.00194550]
[424.44619751 -100.79504395]
[413.45440674 -90.58815002]
[402.46261597 -80.38125610]
[391.47082520 -70.17435455]
[380.47906494 -59.96746063]
[369.48727417 -49.76056290]
[376.04342651 -36.26845932]
[382.59896851 -22.77754402]
[397.41622925 -25.11187553]
[412.23345947 -27.44620895]
[419.16925049 -41.32693863]
[432.95477295 -48.45005417]
[448.28924561 -46.07656097]
[459.27624512 -35.11912537]
[461.69104004 -19.79109955]
[454.60510254 -5.98642445]
[440.74313354 0.98672169]
[425.43530273 -1.55297852]
[414.56781006 -12.62895870]
[399.75054932 -10.29462624]
[384.93331909 -7.96029472]
[367.06484985 4.51168776]
[347.91439819 3.76619840]
[335.20455933 -6.84550428]
[322.05282593 0.36782527]
[308.90112305 7.58115482]
[295.74938965 14.79448414]
[282.59765625 22.00781250]
[275.15939331 34.91213608]
[259.33886719 34.76456070]
[246.18714905 41.97789001]
[233.03543091 49.19121933]
[219.88371277 56.40454865]
[206.73197937 63.61787796]
[221.12101746 67.85527039]
[229.53507996 80.27313995]
[228.13658142 95.20780945]
[217.56335449 105.84767914]
[202.63777161 107.34000397]
[190.16726685 99.00414276]
[185.83953857 84.64201355]
[191.62834167 70.80416107]
[177.73501587 76.45882416]
[163.84167480 82.11348724]
[149.94833374 87.76815796]
[136.05500793 93.42282104]
[122.16166687 99.07748413]
[119.97344208 116.64351654]
[104.15419006 129.52622986]
[109.46439362 143.55482483]
[114.77458954 157.58343506]
[120.08479309 171.61204529]
[134.90524292 176.60084534]
[143.00746155 189.97575378]
[140.56581116 205.42153931]
[128.73316956 215.64518738]
[113.09656525 215.81938171]
[101.03910065 205.86189270]
[98.25395203 190.47433472]
[106.05618286 176.92224121]
[100.74598694 162.89363098]
[95.43578339 148.86502075]
[90.12558746 134.83642578]
[93.45375824 149.46253967]
[87.98863983 163.43151855]
[75.61882782 171.91607666]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 89]
[6 88]
[7 86]
[8 85]
[11 84]
[12 83]
[13 82]
[14 81]
[15 80]
[16 79]
[17 78]
[18 77]
[19 74]
[20 73]
[22 72]
[23 71]
[24 70]
[25 69]
[26 68]
[27 67]
[28 66]
[29 65]
[30 59]
[31 58]
[32 57]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[42 49]
[43 48]
[92 171]
[93 170]
[94 169]
[95 168]
[96 167]
[97 166]
[98 158]
[99 157]
[100 156]
[101 155]
[102 154]
[104 152]
[105 151]
[106 150]
[107 149]
[108 148]
[111 130]
[112 129]
[113 128]
[114 127]
[115 126]
[116 125]
[117 124]
[132 145]
[133 144]
[134 143]
[173 187]
[174 186]
[175 185]
[176 184]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
