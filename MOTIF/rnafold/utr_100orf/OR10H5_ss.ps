%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:47:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCAGGGGCUAAACCACACCUCCGUGUCUGAAUUCAUCCUCGUUGGCUUCUCUGCCUUCCCCCACCUCCAGCUGAUGCUCUUCCUGCUGUUCCUGCUGA\
) } def
/len { sequence length } bind def

/coor [
[84.97356415 254.81536865]
[84.64908600 239.01440430]
[95.65274048 227.67001343]
[95.18624115 212.67727661]
[94.71974182 197.68452454]
[94.25325012 182.69178772]
[93.78675079 167.69903564]
[93.32025146 152.70629883]
[92.85375214 137.71354675]
[92.38725281 122.72080994]
[86.57582855 117.97978210]
[84.17565155 132.78651428]
[70.15259552 138.11134338]
[58.52956772 128.62951660]
[60.92946625 113.82274628]
[74.95297241 108.49773407]
[69.14154053 103.75671387]
[54.36051178 106.31037140]
[39.57948303 108.86402130]
[24.79845238 111.41767120]
[12.55284786 122.32534027]
[-2.92916012 116.91799164]
[-5.72100925 100.75823975]
[7.04931498 90.46984863]
[22.24479866 96.63664246]
[37.02582932 94.08299255]
[51.80685806 91.52933502]
[66.58789062 88.97568512]
[52.39202881 84.13032532]
[38.19616699 79.28495789]
[24.00030518 74.43959808]
[10.69301033 67.51747131]
[0.83318800 56.21331406]
[-4.21687508 42.08897781]
[-3.75943470 27.09595490]
[2.14230657 13.30576134]
[12.67293262 2.62372422]
[26.37747383 -3.47426867]
[41.36244202 -4.14568567]
[55.55742645 0.70223963]
[67.00117493 10.39969254]
[74.11256409 23.60681915]
[75.90882111 38.50196075]
[82.26791382 52.08732224]
[88.62699890 65.67268372]
[94.98608398 79.25804138]
[95.91863251 64.28705597]
[96.85117340 49.31607437]
[86.20565033 37.63496017]
[87.02137756 21.85173798]
[98.81439209 11.33031082]
[114.58810425 12.31285763]
[124.98426056 24.21644974]
[123.83499908 39.97889709]
[111.82215881 50.24861908]
[110.88961029 65.21960449]
[109.95706940 80.19058990]
[117.95292664 67.49939728]
[119.58572388 52.58853149]
[127.39189148 39.77979279]
[139.89590454 31.49429131]
[154.73426819 29.29814720]
[169.10223389 33.60647583]
[180.28396606 43.60491943]
[186.16589355 57.40357590]
[185.63623047 72.39421844]
[178.79507446 85.74333191]
[166.93556213 94.92765808]
[152.29936218 98.21118164]
[137.65432739 94.97386932]
[123.06874084 98.47538757]
[137.54751587 102.39521790]
[152.02629089 106.31504822]
[169.61048889 101.13401031]
[181.58755493 113.85608673]
[196.18124390 117.32373047]
[209.50416565 108.82225037]
[224.91810608 112.31305695]
[233.27825928 125.72512054]
[229.62467957 141.10130310]
[216.12498474 149.31918335]
[200.78828430 145.50325012]
[192.71359253 131.91741943]
[178.11991882 128.44976807]
[167.54817200 134.55355835]
[155.27532959 131.65495300]
[148.10646057 120.79382324]
[133.62768555 116.87399292]
[119.14891052 112.95416260]
[107.37999725 122.25431061]
[107.84649658 137.24705505]
[108.31299591 152.23979187]
[108.77949524 167.23254395]
[109.24599457 182.22528076]
[109.71248627 197.21803284]
[110.17898560 212.21076965]
[110.64548492 227.20352173]
[122.33312988 237.84187317]
[122.99162292 253.63243103]
[112.23030090 265.20693970]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 97]
[4 96]
[5 95]
[6 94]
[7 93]
[8 92]
[9 91]
[10 90]
[17 28]
[18 27]
[19 26]
[20 25]
[46 57]
[47 56]
[48 55]
[71 89]
[72 88]
[73 87]
[75 84]
[76 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
