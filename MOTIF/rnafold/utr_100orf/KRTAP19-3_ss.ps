%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:58:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGCUACUACGGCAGCUACUAUGGAGGCCUGGGCUAUGGCUGUGGAGGCUUUGGUGGCCUGGGCUAUGGCUAUGGCUGUGGAUGUGGCAGCUUCCGCA\
) } def
/len { sequence length } bind def

/coor [
[111.75882721 385.99874878]
[115.25637817 370.88098145]
[126.99400330 360.73171997]
[125.59631348 345.79696655]
[124.19862366 330.86224365]
[122.80093384 315.92749023]
[121.40324402 300.99276733]
[112.51368713 289.04180908]
[118.93144226 274.58071899]
[117.53375244 259.64599609]
[116.13606262 244.71124268]
[114.73837280 229.77650452]
[113.34068298 214.84176636]
[111.24795532 199.98846436]
[108.46473694 185.24893188]
[105.68151855 170.50939941]
[102.89830017 155.76988220]
[100.11508942 141.03034973]
[97.33187103 126.29081726]
[94.54865265 111.55129242]
[91.08100891 96.95761108]
[86.93648529 82.54154968]
[82.79196167 68.12548828]
[78.64743042 53.70942307]
[74.61484528 49.85123444]
[72.77868652 45.26713943]
[73.03023529 40.96697998]
[74.85632324 37.75443268]
[72.07310486 23.01490402]
[69.28988647 8.27537632]
[66.50667572 -6.46415281]
[63.72345734 -21.20368195]
[60.94024277 -35.94321060]
[58.15702438 -50.68273926]
[55.37380981 -65.42226410]
[52.59059143 -80.16179657]
[49.80737686 -94.90132141]
[47.02415848 -109.64085388]
[44.24094391 -124.38037872]
[40.77330017 -138.97406006]
[36.62877274 -153.39012146]
[32.48424530 -167.80618286]
[28.33971977 -182.22225952]
[15.05549240 -191.21719360]
[13.94913578 -207.22204590]
[25.86935043 -217.95927429]
[41.67197037 -215.19218445]
[49.23457718 -201.04345703]
[42.75578308 -186.36677551]
[46.90031052 -171.95071411]
[51.04483795 -157.53465271]
[55.18936157 -143.11859131]
[58.26536179 -141.07083130]
[60.42436218 -137.34346008]
[60.84651184 -132.42337036]
[58.98047256 -127.16359711]
[61.76368713 -112.42407227]
[64.54690552 -97.68453979]
[67.33012390 -82.94501495]
[70.11333466 -68.20548248]
[72.89655304 -53.46595383]
[75.67977142 -38.72642517]
[78.46298981 -23.98689842]
[81.24620056 -9.24736881]
[84.02941895 5.49215984]
[86.81263733 20.23168755]
[89.59584808 34.97121811]
[93.06349945 49.56489563]
[97.20802307 63.98096085]
[101.35254669 78.39702606]
[105.49707794 92.81308746]
[108.76139832 95.22235107]
[110.87515259 99.12132263]
[111.17182159 103.92663574]
[109.28818512 108.76807404]
[112.07140350 123.50760651]
[114.85461426 138.24713135]
[117.63783264 152.98666382]
[120.42105103 167.72619629]
[123.20426178 182.46571350]
[125.98748016 197.20524597]
[129.64302063 201.42240906]
[131.04405212 206.15763855]
[130.39289856 210.41564941]
[128.27542114 213.44407654]
[129.67311096 228.37881470]
[131.07080078 243.31355286]
[132.46849060 258.24829102]
[133.86618042 273.18304443]
[142.85571289 286.20220947]
[136.33798218 299.59506226]
[137.73567200 314.52981567]
[139.13336182 329.46453857]
[140.53105164 344.39929199]
[141.92874146 359.33401489]
[155.34571838 367.12918091]
[161.58760071 381.33544922]
[158.25425720 396.49026489]
[146.62742615 406.76629639]
[131.17785645 408.21215820]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 95]
[4 94]
[5 93]
[6 92]
[7 91]
[9 89]
[10 88]
[11 87]
[12 86]
[13 85]
[14 81]
[15 80]
[16 79]
[17 78]
[18 77]
[19 76]
[20 75]
[21 71]
[22 70]
[23 69]
[24 68]
[28 67]
[29 66]
[30 65]
[31 64]
[32 63]
[33 62]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[39 56]
[40 52]
[41 51]
[42 50]
[43 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
