%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:08:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUAUGGAGUUUCUGAGCGAGAAGUUUGCCCUCAAGAGCCCUCCGAGUAAAAACAGUGACUUUUACAUGGGCGCAGGAGGUCCUCUGGAGCACGUUAUGGAGA\
) } def
/len { sequence length } bind def

/coor [
[104.54077148 336.71121216]
[115.36535645 325.42572021]
[113.57444000 310.53302002]
[104.37292480 298.82058716]
[110.40721893 284.19531250]
[108.61631012 269.30261230]
[106.82539368 254.40991211]
[97.44815826 246.60681152]
[95.91881561 234.09771729]
[103.61624146 223.61499023]
[102.27165222 208.67538452]
[100.92706299 193.73576355]
[99.58247375 178.79615784]
[98.23788452 163.85653687]
[89.39086914 151.87406921]
[95.85997772 137.43588257]
[94.51538849 122.49626923]
[93.17079926 107.55665588]
[89.31410980 100.31551361]
[92.01631165 92.15106964]
[91.11924744 77.17791748]
[81.34654999 88.55747223]
[67.03504181 93.04976654]
[52.51221466 89.29643250]
[42.16946030 78.43238831]
[39.13420105 63.74269104]
[44.32423401 49.66918564]
[56.17020798 40.46739578]
[71.09014893 38.91974258]
[84.57260132 45.49420166]
[92.54113770 58.20412445]
[95.65981293 43.53190994]
[98.77848816 28.85969543]
[101.89716339 14.18748188]
[90.59947968 3.87683105]
[86.00986481 -10.60875607]
[89.26545715 -25.34875298]
[99.39414978 -36.40613174]
[113.60189056 -40.87891006]
[116.72056580 -55.55112457]
[119.83924103 -70.22333527]
[122.95791626 -84.89555359]
[114.89841461 -92.31534576]
[110.76125336 -102.37069702]
[111.25798798 -113.15077209]
[116.22657013 -122.63833618]
[124.67463684 -129.08723450]
[134.97692871 -131.34362793]
[139.39826965 -145.67721558]
[143.81959534 -160.01081848]
[148.24092102 -174.34440613]
[152.66224670 -188.67799377]
[157.08357239 -203.01158142]
[147.66868591 -215.34608459]
[147.33558655 -230.85957336]
[156.21232605 -243.58682251]
[170.88565063 -248.63394165]
[185.71334839 -244.06021118]
[194.99386597 -231.62431335]
[195.15866089 -216.10810852]
[186.14436340 -203.47790527]
[171.41716003 -198.59025574]
[166.99583435 -184.25666809]
[162.57450867 -169.92308044]
[158.15318298 -155.58947754]
[153.73185730 -141.25588989]
[149.31053162 -126.92230225]
[159.72991943 -110.63217163]
[154.98840332 -91.57759857]
[137.63012695 -81.77687836]
[134.51145935 -67.10466003]
[131.39277649 -52.43244934]
[128.27410889 -37.76023483]
[139.43428040 -27.89533806]
[144.18984985 -13.67421246]
[141.16868591 1.11561394]
[131.08404541 12.48209190]
[116.56938171 17.30615616]
[113.45070648 31.97837067]
[110.33203125 46.65058517]
[107.21335602 61.32279968]
[106.09239960 76.28085327]
[106.98946381 91.25400543]
[108.11041260 106.21206665]
[109.45500183 121.15167999]
[110.79959106 136.09129333]
[119.74278259 149.14234924]
[113.17749786 162.51194763]
[114.52208710 177.45155334]
[115.86667633 192.39117432]
[117.21126556 207.33079529]
[118.55585480 222.27040100]
[129.51268005 236.97476196]
[121.71809387 252.61900330]
[123.50901031 267.51171875]
[125.29992676 282.40441895]
[134.62954712 295.18206787]
[128.46714783 308.74209595]
[130.25805664 323.63479614]
[143.44961548 332.03225708]
[148.10783386 346.95989990]
[142.03324890 361.36941528]
[128.09410095 368.45700073]
[112.87201691 364.87615967]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 99]
[3 98]
[5 96]
[6 95]
[7 94]
[10 92]
[11 91]
[12 90]
[13 89]
[14 88]
[16 86]
[17 85]
[18 84]
[20 83]
[21 82]
[31 81]
[32 80]
[33 79]
[34 78]
[39 73]
[40 72]
[41 71]
[42 70]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
