%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:56:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAAUGGGGAGGGGAGAGCCCACUGGGUAGAAGGAACAGGGAGCGGCCAGGAUGCUGAAUCUGCUGCUGCUGGCGCUGCCCGUCCUGGCGAGCCGCGCCUACGCGGCCCCUGCCCCAGGCCAGGCCCUGCAGCGAGUGGGCAUCGUCGGGG\
) } def
/len { sequence length } bind def

/coor [
[160.05746460 270.59265137]
[157.31933594 255.84469604]
[162.19380188 241.65879822]
[173.41851807 231.70863342]
[188.08668518 228.57096863]
[202.39889526 233.05781555]
[193.98548889 220.63949585]
[185.57208252 208.22117615]
[177.15866089 195.80287170]
[168.74525452 183.38455200]
[155.20098877 177.18760681]
[153.86618042 161.42280579]
[145.45275879 149.00450134]
[137.03935242 136.58618164]
[128.62594604 124.16786194]
[116.22654724 132.45982361]
[102.01761627 135.05761719]
[88.40650940 131.90019226]
[77.55275726 123.87117767]
[65.04872131 132.15664673]
[52.54468536 140.44212341]
[40.04064941 148.72760010]
[30.17689896 162.51683044]
[14.19600296 156.85578918]
[15.21185207 139.93229675]
[31.75517654 136.22357178]
[44.25921249 127.93808746]
[56.76324844 119.65261841]
[69.26728058 111.36714172]
[67.39659882 103.27564240]
[67.62024689 94.97373199]
[69.92386627 86.99468994]
[74.15948486 79.85106659]
[64.75562286 68.16486359]
[55.35176849 56.47865295]
[47.48297882 51.71651459]
[45.87776947 44.45459366]
[36.71583176 32.57777023]
[22.16044426 26.37686348]
[20.51298523 11.57365036]
[11.35104942 -0.30317327]
[-3.20434022 -6.50407791]
[-4.85179949 -21.30729103]
[-14.01373482 -33.18411636]
[-23.17567062 -45.06093979]
[-32.33760452 -56.93776321]
[-40.10696030 -61.86045837]
[-41.56273270 -69.15380859]
[-50.47888565 -81.21623993]
[-59.39503479 -93.27867126]
[-68.31118774 -105.34110260]
[-86.37743378 -104.62444305]
[-101.15526581 -114.76770782]
[-106.88057709 -131.58755493]
[-101.45631409 -148.34249878]
[-110.86017609 -160.02871704]
[-126.49713135 -160.16886902]
[-138.35198975 -170.36671448]
[-140.82727051 -185.80715942]
[-132.75419617 -199.19967651]
[-117.94464111 -204.22073364]
[-103.39122009 -198.49955750]
[-95.96561432 -184.73748779]
[-99.17396545 -169.43257141]
[-89.77011108 -157.74636841]
[-77.79808044 -160.14009094]
[-65.87987518 -157.17544556]
[-56.31239700 -149.36007690]
[-50.96664047 -138.14250183]
[-50.92196655 -125.64394379]
[-56.24875259 -114.25724792]
[-47.33260345 -102.19481659]
[-38.41645432 -90.13238525]
[-29.50030136 -78.06995392]
[-20.46078110 -66.09970093]
[-11.29884624 -54.22287369]
[-2.13691115 -42.34605026]
[7.02502394 -30.46922684]
[20.92509079 -25.11783218]
[23.22787285 -9.46510887]
[32.38980865 2.41171503]
[46.28987503 7.76310968]
[48.59265518 23.41583443]
[57.75459290 35.29265594]
[67.03797913 47.07479477]
[76.44183350 58.76100159]
[85.84569550 70.44721222]
[94.58000946 66.89044952]
[104.18325043 65.92286682]
[113.88635254 67.74668121]
[122.87720490 72.33551788]
[130.36851501 79.42693329]
[135.66625977 88.53489685]
[148.17028809 80.24942017]
[160.67433167 71.96395111]
[173.17835999 63.67847443]
[185.68240356 55.39299774]
[198.18643188 47.10752487]
[205.00782776 32.19441986]
[221.35697937 30.91494560]
[230.41529846 44.58531189]
[222.86434937 59.14262009]
[206.47190857 59.61156082]
[193.96788025 67.89703369]
[181.46383667 76.18251038]
[168.95980835 84.46798706]
[156.45576477 92.75345612]
[143.95173645 101.03893280]
[141.04425049 115.75445557]
[149.45767212 128.17277527]
[157.87107849 140.59107971]
[166.28448486 153.00939941]
[180.43054199 160.09458923]
[181.16357422 174.97114563]
[189.57698059 187.38945007]
[197.99038696 199.80776978]
[206.40380859 212.22608948]
[214.81721497 224.64439392]
[224.45903015 236.13507080]
[235.22770691 246.57707214]
[245.99638367 257.01907349]
[261.19458008 254.50483704]
[274.79998779 261.34194946]
[281.68914795 274.72116089]
[279.40640259 289.41561890]
[290.17510986 299.85763550]
[300.94378662 310.29962158]
[311.71246338 320.74163818]
[320.10681152 324.50070190]
[322.59225464 331.51031494]
[333.14428711 342.17123413]
[349.11517334 343.69110107]
[357.76358032 357.20349121]
[352.45516968 372.34286499]
[337.26208496 377.49557495]
[323.83920288 368.70889282]
[322.48336792 352.72323608]
[311.93136597 342.06234741]
[301.27044678 331.51031494]
[290.50177002 321.06832886]
[279.73309326 310.62631226]
[268.96441650 300.18429565]
[254.34721375 302.91845703]
[240.76219177 296.44458008]
[233.50935364 283.05615234]
[235.55438232 267.78775024]
[224.78569031 257.34576416]
[214.01701355 246.90374756]
[215.95027161 261.77862549]
[210.31271362 275.67892456]
[198.56425476 285.00488281]
[183.74736023 287.34143066]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 118]
[7 117]
[8 116]
[9 115]
[10 114]
[12 112]
[13 111]
[14 110]
[15 109]
[19 29]
[20 28]
[21 27]
[22 26]
[33 87]
[34 86]
[35 85]
[37 84]
[38 83]
[40 81]
[41 80]
[43 78]
[44 77]
[45 76]
[46 75]
[48 74]
[49 73]
[50 72]
[51 71]
[55 65]
[56 64]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
[98 103]
[119 148]
[120 147]
[121 146]
[125 142]
[126 141]
[127 140]
[128 139]
[130 138]
[131 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
