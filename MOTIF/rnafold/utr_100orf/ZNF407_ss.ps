%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:00:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGGUUAUGAGUGCCAGUGAGCCGCCUUAGAUAGAAGCAUCGUCAGCACUUUAUUAAUGAUGGAUAGUGAGAAUAAACCCGAAAAUGAUGAGGAUGAAAAGAUAAACAAAGAAGCACAAGACUUGACAAAGCUUUCAUCCCAUAAUGAAGACGGUG\
) } def
/len { sequence length } bind def

/coor [
[74.21302032 136.80018616]
[59.46100998 119.38587952]
[45.03843307 123.50769806]
[32.58006287 137.03326416]
[15.74037933 132.17773438]
[1.40260756 136.58549500]
[-12.93516445 140.99325562]
[-27.27293587 145.40100098]
[-40.25279617 160.77763367]
[-58.89937592 155.78123474]
[-73.05057526 160.75552368]
[-87.20177460 165.72981262]
[-101.35297394 170.70410156]
[-115.50417328 175.67839050]
[-129.65536499 180.65267944]
[-134.19061279 195.37469482]
[-146.38250732 204.49670410]
[-161.43000793 204.68827820]
[-173.55973816 196.08551025]
[-187.71093750 201.05979919]
[-201.86213684 206.03408813]
[-215.96318054 211.14881897]
[-230.01269531 216.40347290]
[-234.16482544 229.25083923]
[-244.81350708 237.23049927]
[-257.92019653 237.59712219]
[-268.67367554 230.44108582]
[-282.82485962 235.41537476]
[-291.03359985 249.19931030]
[-306.94723511 251.23277283]
[-318.35824585 239.95587158]
[-316.51306152 224.01928711]
[-302.82714844 215.64819336]
[-287.79916382 221.26417542]
[-273.64794922 216.28988647]
[-267.05166626 200.84645081]
[-251.02082825 194.80850220]
[-235.26734924 202.35397339]
[-221.21784973 197.09930420]
[-216.02618408 191.78150940]
[-206.83642578 191.88288879]
[-192.68522644 186.90859985]
[-178.53402710 181.93431091]
[-174.45495605 167.63398743]
[-162.59718323 158.36807251]
[-147.37908936 157.85519409]
[-134.62965393 166.50148010]
[-120.47846222 161.52719116]
[-106.32726288 156.55290222]
[-92.17606354 151.57861328]
[-78.02486420 146.60432434]
[-63.87366486 141.63003540]
[-60.26776886 131.99798584]
[-51.76000595 125.83551025]
[-41.04369354 125.39384460]
[-31.68069077 131.06323242]
[-17.34291840 126.65547943]
[-3.00514650 122.24772644]
[11.33262539 117.83997345]
[17.29541588 107.27590179]
[29.24751663 103.50696564]
[40.91661835 109.08512115]
[55.33919144 104.96331024]
[55.16940308 96.92755890]
[56.43390656 88.99010468]
[59.09224701 81.40489197]
[63.05937195 74.41461182]
[68.20835876 68.24289703]
[74.37447357 63.08720398]
[81.36043549 59.11248398]
[88.94274902 56.44590378]
[96.87882233 55.17277145]
[104.91475677 55.33382416]
[112.79344940 56.92390442]
[120.26282501 59.89214706]
[127.08393097 64.14357758]
[133.03852844 69.54219055]
[137.93609619 75.91525269]
[141.61994934 83.05886841]
[143.97224426 90.74449921]
[158.96038818 90.14815521]
[173.94851685 89.55180359]
[183.51438904 74.20216370]
[200.21780396 67.68485260]
[217.34970093 72.41654205]
[228.14852905 86.33542633]
[243.10112000 85.14366913]
[256.24295044 76.33440399]
[269.54470825 83.03606415]
[284.49728394 81.84430695]
[299.44985962 80.65255737]
[307.80895996 76.83321381]
[314.71109009 79.58877563]
[329.68441772 78.69454956]
[344.65774536 77.80032349]
[359.63104248 76.90609741]
[374.60437012 76.01187134]
[389.57769775 75.11764526]
[404.55102539 74.22341919]
[412.98440552 70.57102203]
[419.83035278 73.46327209]
[434.81851196 72.86692047]
[439.47885132 58.46183395]
[448.76898193 46.54272461]
[461.55245972 38.53628922]
[476.27612305 35.39249420]
[491.15893555 37.47190475]
[504.40725708 44.50442886]
[514.43115234 55.62424088]
[520.03521729 69.47632599]
[535.02331543 68.87997437]
[550.01147461 68.28363037]
[557.08489990 54.65050888]
[570.03588867 46.39412689]
[585.38067627 45.73540878]
[598.99151611 52.85154724]
[607.20727539 65.82833862]
[607.81787109 81.17508698]
[600.65911865 94.76359558]
[587.65667725 102.93862915]
[572.30804443 103.50113678]
[558.74206543 96.29981232]
[550.60784912 83.27177429]
[535.61968994 83.86811829]
[520.63153076 84.46446991]
[516.14581299 98.71800232]
[507.03701782 110.59906769]
[494.38931274 118.66194153]
[479.71878052 121.91721344]
[464.79187012 119.95316315]
[451.41268921 112.98768616]
[441.20495605 101.84435272]
[435.41485596 87.85506439]
[420.42672729 88.45141602]
[405.44525146 89.19673920]
[390.47192383 90.09096527]
[375.49859619 90.98519135]
[360.52526855 91.87941742]
[345.55197144 92.77364349]
[330.57864380 93.66786957]
[315.60531616 94.56209564]
[300.64163208 95.60514069]
[285.68902588 96.79689026]
[270.73645020 97.98864746]
[258.66415405 106.71266937]
[244.29287720 100.09625244]
[229.34028625 101.28800964]
[224.58181763 112.52287292]
[215.42980957 120.70074463]
[203.59364319 124.21133423]
[191.31971741 122.32393646]
[180.96508789 115.33850098]
[174.54487610 104.53994751]
[159.55673218 105.13629150]
[144.56858826 105.73264313]
[136.00396729 126.88748169]
[118.15173340 141.10641479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 63]
[3 62]
[5 59]
[6 58]
[7 57]
[8 56]
[10 52]
[11 51]
[12 50]
[13 49]
[14 48]
[15 47]
[19 43]
[20 42]
[21 41]
[22 39]
[23 38]
[27 35]
[28 34]
[80 155]
[81 154]
[82 153]
[86 147]
[87 146]
[89 144]
[90 143]
[91 142]
[93 141]
[94 140]
[95 139]
[96 138]
[97 137]
[98 136]
[99 135]
[101 134]
[102 133]
[110 125]
[111 124]
[112 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
