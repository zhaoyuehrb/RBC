%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:39:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAGGCGGGGCGGAAGGGUGCGGCGAGGCGGAAUGGCGGCGGCUGCGGACUCGUUCUCAGGCGGCCCCGCGGGGGUGCGGCUUCCGAGGUCGCCGCCACUCAAGGUGCUGGCGGAGCAGCUGCGGCGCGACG\
) } def
/len { sequence length } bind def

/coor [
[57.19462967 443.10928345]
[54.07595444 457.78149414]
[59.65541077 473.20230103]
[48.88481140 485.56863403]
[32.84402466 482.15905762]
[28.03443718 466.48104858]
[39.40373993 454.66281128]
[42.52241516 439.99060059]
[30.12777519 427.51330566]
[27.61344337 409.94909668]
[36.15873337 394.22131348]
[52.54622650 386.64196777]
[54.97889709 371.84054565]
[57.41156387 357.03912354]
[45.52052689 345.78292847]
[42.62023544 329.49984741]
[50.04051208 314.53338623]
[65.05126953 306.83319092]
[67.13887024 291.97918701]
[61.24815750 278.29895020]
[70.83077240 265.70989990]
[72.91837311 250.85588074]
[75.00596619 236.00186157]
[65.86498260 224.29809570]
[67.77050018 209.20426941]
[80.10845947 199.69572449]
[82.19606018 184.84169006]
[74.73248291 169.00218201]
[86.07313538 154.54852295]
[87.81452942 139.64994812]
[89.55592346 124.75137329]
[91.29731750 109.85279083]
[92.34366608 94.88933563]
[92.69269562 79.89339447]
[85.27861023 65.91692352]
[93.30996704 53.37313461]
[93.65899658 38.37719345]
[94.00803375 23.38125610]
[94.35706329 8.38531780]
[94.70610046 -6.61062098]
[95.05513763 -21.60655975]
[95.40416718 -36.60249710]
[95.75320435 -51.59843826]
[96.10224152 -66.59437561]
[96.45127106 -81.59031677]
[96.80030823 -96.58625031]
[89.38621521 -110.56272888]
[97.41757202 -123.10651398]
[97.76660919 -138.10244751]
[98.11563873 -153.09838867]
[98.46467590 -168.09432983]
[89.24594879 -183.98564148]
[98.84132385 -198.63227844]
[98.84132385 -213.63227844]
[98.84132385 -228.63227844]
[98.84132385 -243.63227844]
[91.10402679 -257.43246460]
[98.84132385 -270.15972900]
[98.84132385 -285.15972900]
[98.84132385 -300.15972900]
[87.94676971 -311.29284668]
[88.16045380 -326.50497437]
[98.84132385 -336.82266235]
[98.84132385 -351.82266235]
[98.84132385 -366.82266235]
[90.17761993 -380.74645996]
[98.14175415 -395.08190918]
[114.54090118 -395.08190918]
[122.50502777 -380.74645996]
[113.84132385 -366.82266235]
[113.84132385 -351.82266235]
[113.84132385 -336.82266235]
[124.52220154 -326.50497437]
[124.73587799 -311.29284668]
[113.84132385 -300.15972900]
[113.84132385 -285.15972900]
[113.84132385 -270.15972900]
[121.57862854 -257.43246460]
[113.84132385 -243.63227844]
[113.84132385 -228.63227844]
[113.84132385 -213.63227844]
[113.84132385 -198.63227844]
[122.19802094 -189.80718994]
[122.26639557 -177.25146484]
[113.46061707 -167.74530029]
[113.11157990 -152.74935913]
[112.76254272 -137.75341797]
[112.41351318 -122.75747681]
[119.85256958 -109.85361481]
[111.79624176 -96.23722076]
[111.44721222 -81.24127960]
[111.09817505 -66.24533844]
[110.74914551 -51.24940109]
[110.40010834 -36.25346375]
[110.05107117 -21.25752640]
[109.70204163 -6.26158667]
[109.35300446 8.73435211]
[109.00396729 23.73028946]
[108.65493774 38.72623062]
[108.30590057 53.72216797]
[115.74495697 66.62602997]
[107.68863678 80.24243164]
[107.33959961 95.23836517]
[109.34215546 97.67021179]
[110.46820831 100.90991211]
[110.40757751 104.62038422]
[108.98436737 108.35151672]
[106.19589233 111.59418488]
[104.45449829 126.49275970]
[102.71310425 141.39134216]
[100.97171021 156.28991699]
[108.36878967 166.92910767]
[106.55365753 179.35311890]
[97.05007935 186.92929077]
[94.96247864 201.78330994]
[104.20157623 214.32432556]
[101.87285614 229.35867310]
[89.85998535 238.08944702]
[87.77239227 252.94346619]
[85.68479156 267.79748535]
[91.42618561 282.54019165]
[81.99288940 294.06677246]
[79.90528870 308.92080688]
[90.53930664 317.77163696]
[95.35076141 330.62765503]
[93.17541504 344.07113647]
[84.69137573 354.58474731]
[72.21298981 359.47180176]
[69.78031921 374.27322388]
[67.34764862 389.07464600]
[77.30644226 396.80191040]
[82.96891785 407.98233032]
[83.30157471 420.43792725]
[78.30247498 431.77194214]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 8]
[2 7]
[12 130]
[13 129]
[14 128]
[18 123]
[19 122]
[21 120]
[22 119]
[23 118]
[26 115]
[27 114]
[29 111]
[30 110]
[31 109]
[32 108]
[33 103]
[34 102]
[36 100]
[37 99]
[38 98]
[39 97]
[40 96]
[41 95]
[42 94]
[43 93]
[44 92]
[45 91]
[46 90]
[48 88]
[49 87]
[50 86]
[51 85]
[53 82]
[54 81]
[55 80]
[56 79]
[58 77]
[59 76]
[60 75]
[63 72]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
