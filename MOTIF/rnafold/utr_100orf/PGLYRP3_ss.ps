%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:00:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCUCUUCCAGGGCUGCCGUCCACACUCUCCCGGUCAGAGUCCUGGGACCACAUGGGGACGCUGCCAUGGCUUCUUGCCUUCUUCAUUCUGGGUCUCCAGGCUUGGGAUACUCCCACCAUCGUCUCCCGCAAGGAGUGGGGGGCAAGACCGC\
) } def
/len { sequence length } bind def

/coor [
[75.59060669 204.79800415]
[76.48885345 217.77685547]
[74.62840271 230.64599609]
[70.09599304 242.82600403]
[63.09860229 253.76904297]
[53.95400620 262.98367310]
[43.07633209 270.05673218]
[30.95732307 274.67199707]
[18.14408875 276.62426758]
[5.21441746 275.82846069]
[-7.24927568 272.32339478]
[-18.68619156 266.26983643]
[-28.50910187 277.60607910]
[-38.33201218 288.94232178]
[-48.15492630 300.27856445]
[-50.72548676 316.47497559]
[-66.13208771 322.09359741]
[-78.52573395 311.35443115]
[-75.15691376 295.30505371]
[-59.49116898 290.45565796]
[-49.66825867 279.11941528]
[-39.84534454 267.78317261]
[-30.02243614 256.44692993]
[-39.61294937 242.28846741]
[-44.89810181 226.01124573]
[-45.45527267 208.89366150]
[-41.23346329 192.28219604]
[-32.55788803 177.48554993]
[-20.10491943 165.67146301]
[-4.84937191 157.77461243]
[12.01181126 154.42265320]
[29.15346527 155.88633728]
[45.22635269 162.05761719]
[54.09257126 149.95843506]
[62.95878983 137.85925293]
[71.82500458 125.76007080]
[80.69122314 113.66088867]
[76.54348755 79.59716034]
[117.67723083 65.77117920]
[114.63841248 51.08221436]
[111.59960175 36.39325333]
[106.76953888 28.56773186]
[108.65184021 21.37379456]
[105.91329193 6.62590075]
[103.17474365 -8.12199306]
[100.43620300 -22.86988640]
[97.69765472 -37.61777878]
[94.80882263 -52.33697128]
[91.77001190 -67.02593231]
[88.73119354 -81.71489716]
[85.69238281 -96.40386200]
[69.49466705 -106.13860321]
[65.56151581 -124.29770660]
[75.91931915 -139.33871460]
[72.28389740 -153.89151001]
[68.64846802 -168.44429016]
[65.01304626 -182.99708557]
[61.37761688 -197.54986572]
[57.74219131 -212.10266113]
[54.10676575 -226.65545654]
[46.58718491 -213.67639160]
[33.42707825 -206.47836304]
[18.44204903 -207.14833069]
[5.97680330 -215.49205017]
[-0.35452512 -229.09036255]
[1.28374863 -244.00064087]
[10.41662884 -255.89981079]
[24.39615822 -261.33789062]
[39.16915512 -258.73818970]
[50.45104980 -248.85647583]
[49.22841263 -263.80657959]
[48.00577164 -278.75665283]
[36.75440979 -290.19284058]
[38.82344055 -306.10192871]
[52.62567902 -314.27981567]
[67.57323456 -308.45312500]
[72.19961548 -293.09161377]
[62.95586014 -279.97930908]
[64.17849731 -265.02920532]
[65.40113831 -250.07911682]
[71.49075317 -241.64639282]
[68.65955353 -230.29087830]
[72.29498291 -215.73808289]
[75.93040466 -201.18530273]
[79.56583405 -186.63250732]
[83.20125580 -172.07971191]
[86.83668518 -157.52693176]
[90.47210693 -142.97413635]
[101.35784912 -139.33094788]
[109.19377136 -130.77842712]
[111.92906952 -119.38237762]
[108.76453400 -107.97314453]
[100.38134766 -99.44267273]
[103.42015839 -84.75370789]
[106.45896912 -70.06475067]
[109.49778748 -55.37578583]
[113.95952606 -49.42694855]
[112.44554901 -40.35632706]
[115.18408966 -25.60843277]
[117.92263794 -10.86053944]
[120.66118622 3.88735342]
[123.39973450 18.63524628]
[126.28856659 33.35443878]
[129.32737732 48.04340363]
[132.36619568 62.73236465]
[144.81694031 71.09769440]
[159.56483459 68.35914612]
[174.31272888 65.62059784]
[189.06062317 62.88205338]
[203.52966309 54.04558563]
[216.02622986 65.50299835]
[208.47596741 80.68291473]
[191.79917908 77.62994385]
[177.05128479 80.36849213]
[162.30339050 83.10704041]
[147.55549622 85.84558868]
[145.44250488 93.04178619]
[159.83488464 97.26777649]
[174.22721863 101.49398804]
[170.00079346 115.88624573]
[155.60890198 111.66017151]
[141.21650696 107.43418121]
[139.10351562 114.63037872]
[150.02966309 124.90750122]
[160.95581055 135.18463135]
[171.88195801 145.46176147]
[182.80810547 155.73887634]
[193.73425293 166.01600647]
[204.66040039 176.29313660]
[215.58654785 186.57025146]
[226.51269531 196.84738159]
[242.52769470 197.79571533]
[251.65330505 210.99050903]
[246.88914490 226.30986023]
[231.88986206 232.00205994]
[218.16162109 223.70054626]
[216.23556519 207.77352905]
[205.30941772 197.49639893]
[194.38327026 187.21928406]
[183.45712280 176.94215393]
[172.53097534 166.66502380]
[161.60482788 156.38790894]
[150.67868042 146.11077881]
[139.75253296 135.83364868]
[128.82638550 125.55652618]
[114.91362762 130.07188416]
[102.15296936 128.52864075]
[92.79040527 122.52710724]
[83.92418671 134.62628174]
[75.05796814 146.72546387]
[66.19174957 158.82464600]
[57.32553482 170.92382812]
[65.79087067 180.83041382]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 23]
[13 22]
[14 21]
[15 20]
[33 152]
[34 151]
[35 150]
[36 149]
[37 148]
[39 105]
[40 104]
[41 103]
[43 102]
[44 101]
[45 100]
[46 99]
[47 98]
[48 96]
[49 95]
[50 94]
[51 93]
[54 88]
[55 87]
[56 86]
[57 85]
[58 84]
[59 83]
[60 82]
[70 80]
[71 79]
[72 78]
[106 116]
[107 115]
[108 114]
[109 113]
[123 145]
[124 144]
[125 143]
[126 142]
[127 141]
[128 140]
[129 139]
[130 138]
[131 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
