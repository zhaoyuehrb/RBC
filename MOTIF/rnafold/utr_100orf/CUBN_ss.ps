%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:31:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUCAGUUGGUUGGAGUGGCCUCACUCUUACCUGCCAACCUGGGAGGUUGAUGAUGAACAUGUCUUUACCUUUUCUUUGGAGUUUGCUUACCUUAUUAAUAUUUGCUGAAGUAAAUGGCGAAGCUGGAGAACUUGAGCUGCAGAGACAAA\
) } def
/len { sequence length } bind def

/coor [
[65.11923218 228.31929016]
[74.03585052 216.03684998]
[86.78940582 207.80815125]
[83.73101044 193.12326050]
[80.67261505 178.43835449]
[77.61421967 163.75346375]
[74.55582428 149.06855774]
[60.51384354 143.79382324]
[48.54358673 152.83334351]
[42.19357681 167.32429504]
[27.37422752 168.81970215]
[15.40396976 177.85922241]
[3.43371129 186.89874268]
[-2.91629863 201.38969421]
[-17.73564529 202.88510132]
[-29.70590401 211.92460632]
[-41.67616272 220.96412659]
[-53.64641953 230.00364685]
[-65.61667633 239.04316711]
[-77.58693695 248.08268738]
[-83.47732544 263.38745117]
[-99.71671295 265.67095947]
[-109.59940338 252.58415222]
[-102.95893860 237.58961487]
[-86.62645721 236.11242676]
[-74.65619659 227.07290649]
[-62.68593979 218.03340149]
[-50.71568298 208.99388123]
[-38.74542236 199.95436096]
[-26.77516556 190.91484070]
[-21.28134918 177.07043457]
[-5.60580826 174.92848206]
[6.36445045 165.88896179]
[18.33470917 156.84944153]
[23.82852554 143.00505066]
[39.50406647 140.86308289]
[51.47432327 131.82356262]
[48.71808243 117.07896423]
[34.29069901 112.97402191]
[19.86331177 108.86907959]
[5.43592787 104.76412964]
[-8.99145699 100.65918732]
[-23.41884232 96.55424500]
[-40.30798340 98.03517914]
[-46.40642929 82.21604156]
[-32.89372253 71.97674561]
[-19.31389618 82.12686157]
[-4.88651180 86.23180389]
[9.54087257 90.33674622]
[23.96825790 94.44169617]
[38.39564133 98.54663849]
[52.82302475 102.65158081]
[56.77363205 91.20960999]
[63.24065399 81.90702820]
[71.41355133 75.22180939]
[62.25161743 63.34498215]
[53.08967972 51.46815872]
[37.38525009 49.69433594]
[27.60029793 37.28344345]
[29.54005814 21.59864616]
[42.05370712 11.94545555]
[57.71712112 14.05093670]
[67.23747253 26.66594696]
[64.96650696 42.30622482]
[74.12844086 54.18304825]
[83.29037476 66.05986786]
[88.69926453 63.89685059]
[94.37612152 62.58989716]
[100.18632507 62.16999435]
[105.99210358 62.64710617]
[111.65580750 64.00991821]
[117.04312897 66.22611237]
[122.02633667 69.24314117]
[126.48725891 72.98946381]
[130.32012939 77.37625122]
[143.88201904 70.96727753]
[157.44390869 64.55830383]
[171.00581360 58.14932251]
[184.56770325 51.74034882]
[198.12960815 45.33137131]
[211.69149780 38.92239761]
[225.25340271 32.51342010]
[230.35281372 20.62226677]
[241.83021545 15.57837391]
[253.28018188 19.59835243]
[266.97082520 13.46917820]
[280.66143799 7.34000397]
[294.35205078 1.21082997]
[308.04269409 -4.91834402]
[321.73330688 -11.04751778]
[307.02813721 -14.00680733]
[294.99188232 -22.95828819]
[287.92645264 -36.19005203]
[287.18301392 -51.17161942]
[292.90377808 -65.03786469]
[303.99468994 -75.13697815]
[318.33465576 -79.53755951]
[333.18130493 -77.39804077]
[345.69528198 -69.12758636]
[353.48336792 -56.30786514]
[355.05621338 -41.39055252]
[350.11294556 -27.22848129]
[339.59783936 -16.52930832]
[354.36993408 -19.13403130]
[369.14205933 -21.73875427]
[383.91418457 -24.34347725]
[398.68627930 -26.94820023]
[413.45840454 -29.55292130]
[425.66622925 -40.50284576]
[441.16683960 -35.14903259]
[444.01452637 -18.99902534]
[431.27984619 -8.66656780]
[416.06314087 -14.78080559]
[401.29101562 -12.17608356]
[386.51889038 -9.57136059]
[371.74679565 -6.96663809]
[356.97467041 -4.36191511]
[342.20254517 -1.75719261]
[327.86248779 2.64310765]
[314.17187500 8.77228165]
[300.48123169 14.90145588]
[286.79061890 21.03063011]
[273.09997559 27.15980339]
[259.40936279 33.28897858]
[249.94326782 48.03474808]
[231.66236877 46.07531738]
[218.10047913 52.48429489]
[204.53857422 58.89326859]
[190.97668457 65.30224609]
[177.41479492 71.71121979]
[163.85289001 78.12019348]
[150.29100037 84.52917480]
[136.72909546 90.93814850]
[137.08737183 117.41069794]
[119.22984314 139.69889832]
[89.24071503 146.01016235]
[92.29911041 160.69506836]
[95.35750580 175.37995911]
[98.41590118 190.06486511]
[101.47429657 204.74975586]
[116.45251465 207.20280457]
[129.53115845 214.90434265]
[138.94145203 226.81277466]
[143.41072083 241.31761169]
[142.33453369 256.45715332]
[135.85845947 270.18395996]
[124.85829926 280.64154053]
[110.82176208 286.41561890]
[95.64715576 286.72528076]
[81.38673401 281.52868652]
[69.96910095 271.52856445]
[62.93838501 258.07742310]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 140]
[4 139]
[5 138]
[6 137]
[7 136]
[8 37]
[9 36]
[11 34]
[12 33]
[13 32]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[43 47]
[55 66]
[56 65]
[57 64]
[75 133]
[76 132]
[77 131]
[78 130]
[79 129]
[80 128]
[81 127]
[82 126]
[85 124]
[86 123]
[87 122]
[88 121]
[89 120]
[90 119]
[103 118]
[104 117]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
