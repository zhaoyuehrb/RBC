%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:33:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGCUGCGGCGCCUCCUGCUGCUGCUGCUGCUCUCGCUGGAGUCCCUGGACCUGCUGCCCAGCGUCCACGGAGCCCGCGGCCGCGCCGCCAACCGGA\
) } def
/len { sequence length } bind def

/coor [
[108.92899323 286.91946411]
[120.01293182 276.06008911]
[117.68946075 261.24111938]
[115.36598969 246.42216492]
[113.04251862 231.60321045]
[110.71903992 216.78425598]
[101.10369873 205.40908813]
[106.60999298 190.57698059]
[104.28651428 175.75802612]
[101.96304321 160.93907166]
[99.63957214 146.12011719]
[97.31610107 131.30116272]
[94.99263000 116.48220062]
[94.35132599 131.46849060]
[84.67066956 142.92645264]
[70.00186920 146.06112671]
[56.48356628 139.56069946]
[49.77296066 126.14549255]
[52.67832565 111.42955780]
[63.98381805 101.57126617]
[78.95948792 100.69649506]
[64.10618591 98.60376740]
[49.36151123 104.34006500]
[37.83818436 94.90278625]
[22.98488617 92.81005096]
[7.98854017 99.44644165]
[-5.09557486 89.56018829]
[-2.80764198 73.32142639]
[12.49870872 67.43519592]
[25.07761574 77.95675659]
[39.93091583 80.04948425]
[53.61318588 74.16350555]
[66.19892120 83.75047302]
[81.05221558 85.84320068]
[87.45179749 84.48341370]
[93.20866394 85.22767639]
[97.72861481 87.64525604]
[100.59603119 91.15510559]
[108.95381165 78.69928741]
[117.31159973 66.24346161]
[119.55637360 57.20169449]
[126.12803650 53.53579712]
[134.86915588 41.34593201]
[132.50332642 25.94980431]
[141.54171753 13.71206570]
[156.23414612 11.55150223]
[164.97526550 -0.63836640]
[173.71638489 -12.82823467]
[175.47053528 -28.55189705]
[189.17500305 -34.38597107]
[197.91612244 -46.57584000]
[206.65724182 -58.76570892]
[215.39836121 -70.95558167]
[224.13946533 -83.14544678]
[232.68995667 -95.46977997]
[241.04774475 -107.92559814]
[249.40551758 -120.38142395]
[247.72953796 -136.33668518]
[259.25955200 -147.49188232]
[275.15075684 -145.28967285]
[283.21273804 -131.41943359]
[277.26107788 -116.52120209]
[261.86135864 -112.02363586]
[253.50355530 -99.56781769]
[245.14578247 -87.11199951]
[244.01283264 -79.67278290]
[236.32934570 -74.40433502]
[227.58822632 -62.21446228]
[218.84710693 -50.02459335]
[210.10598755 -37.83472443]
[201.36488342 -25.64485741]
[200.23594666 -10.79309654]
[185.90625000 -4.08711958]
[177.16513062 8.10274887]
[168.42401123 20.29261780]
[171.09136963 34.90154648]
[162.40028381 47.38832855]
[147.05902100 50.08704758]
[138.31790161 62.27691269]
[129.76742554 74.60124969]
[121.40963745 87.05706787]
[113.05184937 99.51288605]
[109.81158447 114.15872955]
[112.13505554 128.97769165]
[114.45852661 143.79664612]
[116.78199768 158.61560059]
[119.10547638 173.43455505]
[121.42894745 188.25350952]
[131.21047974 200.68862915]
[125.53800201 214.46078491]
[127.86147308 229.27973938]
[130.18495178 244.09869385]
[132.50842285 258.91766357]
[134.83189392 273.73660278]
[148.70753479 280.68255615]
[155.82054138 294.47329712]
[153.43582153 309.80603027]
[142.47033691 320.78500366]
[127.14054108 323.18856812]
[113.34105682 316.09249878]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 94]
[3 93]
[4 92]
[5 91]
[6 90]
[8 88]
[9 87]
[10 86]
[11 85]
[12 84]
[13 83]
[21 34]
[22 33]
[24 31]
[25 30]
[38 82]
[39 81]
[40 80]
[42 79]
[43 78]
[46 75]
[47 74]
[48 73]
[50 71]
[51 70]
[52 69]
[53 68]
[54 67]
[55 65]
[56 64]
[57 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
