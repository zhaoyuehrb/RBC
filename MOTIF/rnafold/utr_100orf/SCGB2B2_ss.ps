%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:16:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGGGACCAGACUCCGCUGUCAUGAGGGUGACAUCCGCCACCUGUGCUCUUCUGCUGGCUCUGAUCUGCAGCGUCCAGCUGGGGGAUGCCUGCCUGGAUAUCGAUAAACUGCUUGCGAAUG\
) } def
/len { sequence length } bind def

/coor [
[88.60797119 82.20352173]
[74.36598969 77.49545288]
[60.12400436 72.78739166]
[45.88201904 68.07932281]
[31.58107376 63.55351257]
[17.22349739 59.21070099]
[2.86592174 54.86788559]
[-12.58332253 58.27837753]
[-22.52539825 47.18764114]
[-36.88297272 42.84482956]
[-51.24055099 38.50201797]
[-65.59812927 34.15920639]
[-52.09597397 40.69311142]
[-44.98814774 53.90215302]
[-46.97387314 68.77013397]
[-57.29906845 79.65086365]
[-72.04268646 82.41233826]
[-85.60576630 76.00587463]
[-92.83803558 62.86243439]
[-107.48591614 66.09344482]
[-122.13380432 69.32444763]
[-136.78169250 72.55545807]
[-151.42958069 75.78646088]
[-166.07746887 79.01747131]
[-177.80825806 90.47699738]
[-193.52265930 85.78767395]
[-197.05503845 69.77348328]
[-184.77159119 58.90845108]
[-169.30847168 64.36958313]
[-154.66058350 61.13857651]
[-140.01269531 57.90756989]
[-125.36481476 54.67656326]
[-110.71692657 51.44555664]
[-96.06903839 48.21454620]
[-93.44397736 41.18894958]
[-102.98785400 29.61680794]
[-88.19386292 27.13774681]
[-85.56880188 20.11214638]
[-94.50909424 8.06760120]
[-103.44939423 -3.97694516]
[-112.38969421 -16.02149200]
[-117.76504517 -2.01772046]
[-131.98406982 2.75925088]
[-144.72410583 -5.15853786]
[-146.73622131 -20.02297211]
[-136.55966187 -31.04284859]
[-121.58375549 -30.21877289]
[-128.91725159 -43.30387115]
[-144.19558716 -47.34715652]
[-152.06762695 -61.05140686]
[-147.86303711 -76.28613281]
[-134.07632446 -84.01284790]
[-118.88690186 -79.64742279]
[-111.30638123 -65.77979279]
[-115.83215332 -50.63736725]
[-108.49865723 -37.55226898]
[-100.34514618 -24.96178818]
[-91.40484619 -12.91724205]
[-82.46455383 -0.87269622]
[-73.52425385 11.17185020]
[-61.25531387 19.80163002]
[-46.89773941 24.14444160]
[-32.54016113 28.48725319]
[-18.18258667 32.83006668]
[-3.76029181 29.10894966]
[7.20873356 40.51031113]
[21.56630898 44.85312271]
[35.92388535 49.19593430]
[43.32307434 48.10824585]
[50.59008789 53.83733749]
[64.83206940 58.54540634]
[79.07405090 63.25347137]
[93.31604004 67.96154022]
[108.31114197 68.34461975]
[122.77494812 64.36989594]
[137.23875427 60.39517593]
[151.70256042 56.42045212]
[166.16635132 52.44572830]
[180.63015747 48.47100830]
[191.88677979 37.35349655]
[206.20933533 41.44172668]
[220.67314148 37.46700287]
[235.13694763 33.49227905]
[249.60073853 29.51755714]
[258.75128174 16.34001923]
[274.76803589 15.42193699]
[285.36434937 27.46758652]
[282.41162109 43.23657608]
[268.17495728 50.63228607]
[253.57546997 43.98136139]
[239.11166382 47.95608139]
[224.64785767 51.93080521]
[210.18406677 55.90552902]
[199.96199036 66.73873901]
[184.60487366 62.93481064]
[170.14108276 66.90953064]
[155.67727661 70.88425446]
[141.21347046 74.85897827]
[126.74967194 78.83370209]
[112.28586578 82.80842590]
[118.80429077 95.58751678]
[115.44599915 108.22568512]
[124.38629913 120.27022552]
[133.32659912 132.31477356]
[141.04707336 137.41635132]
[142.33674622 144.78302002]
[150.96652222 157.05197144]
[159.59629822 169.32090759]
[175.09124756 173.47859192]
[181.36921692 188.24229431]
[173.61431885 202.28652954]
[157.77542114 204.83779907]
[146.00277710 193.93896484]
[147.32736206 177.95068359]
[138.69758606 165.68174744]
[130.06779480 153.41281128]
[121.28204346 141.25506592]
[112.34175110 129.21052551]
[103.40145111 117.16597748]
[93.61457825 117.07069397]
[85.01983643 111.60916901]
[80.43176270 102.07669067]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[3 71]
[4 70]
[5 68]
[6 67]
[7 66]
[9 64]
[10 63]
[11 62]
[12 61]
[19 34]
[20 33]
[21 32]
[22 31]
[23 30]
[24 29]
[38 60]
[39 59]
[40 58]
[41 57]
[47 56]
[48 55]
[74 100]
[75 99]
[76 98]
[77 97]
[78 96]
[79 95]
[81 93]
[82 92]
[83 91]
[84 90]
[102 119]
[103 118]
[104 117]
[106 116]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
