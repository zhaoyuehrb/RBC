%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCUGAUCCAGCUAAGUCCGCUCCCGCCCCGAAGAAGGGCUCCAAGAAGGCGGUGACCAAGGCGCAGAAGAAGGAUGGCAAGAAGCGUAAACGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[173.02911377 280.03021240]
[180.55978394 269.30014038]
[172.99253845 256.34881592]
[165.42529297 243.39747620]
[157.85804749 230.44615173]
[153.38121033 228.36080933]
[150.25593567 223.34658813]
[150.25184631 216.44593811]
[143.50442505 203.04920959]
[136.75700378 189.65248108]
[130.00958252 176.25575256]
[115.82913971 171.84544373]
[108.79544830 158.35537720]
[113.51754761 143.51153564]
[106.77011871 130.11480713]
[93.08835602 130.08264160]
[80.76457214 124.13990021]
[72.22013092 113.45419312]
[69.13382721 100.12503815]
[72.11204529 86.77130890]
[80.56963348 76.01673126]
[74.24210358 62.41664505]
[67.91458130 48.81655502]
[60.54967117 35.74911118]
[52.19188690 23.29329300]
[43.64140320 10.96895695]
[34.90028763 -1.22091126]
[26.15917206 -13.41077995]
[17.41805649 -25.60064888]
[8.67693996 -37.79051590]
[-1.84686255 -48.47927856]
[-13.89931679 -57.40890884]
[-29.49255753 -54.83473206]
[-42.29001617 -64.10838318]
[-44.69919205 -79.72796631]
[-35.29075623 -92.42666626]
[-19.64657402 -94.67056274]
[-7.04805756 -85.12839508]
[-4.96968412 -69.46136475]
[7.08277035 -60.53173065]
[4.30984163 -75.27320099]
[9.08591366 -89.49252319]
[20.19552803 -99.57103729]
[34.81140900 -102.94387054]
[49.21397400 -98.75267792]
[59.73793030 -88.06407166]
[63.70503998 -73.59818268]
[60.10572433 -59.03641891]
[49.85596466 -48.08459473]
[35.56421661 -43.52982712]
[20.86680794 -46.53163147]
[29.60792351 -34.34176254]
[38.34904099 -22.15189552]
[47.09015656 -9.96202660]
[55.83127213 2.22784185]
[62.40293121 5.89373779]
[64.64770508 14.93550777]
[73.00549316 27.39132690]
[75.48377991 27.75781059]
[77.97921753 29.08148956]
[80.14900208 31.37467766]
[81.65144348 34.53393555]
[82.18325043 38.34329605]
[81.51467133 42.48902893]
[87.84219360 56.08911896]
[94.16972351 69.68920898]
[110.11564636 70.83821106]
[123.34782410 79.81051636]
[130.31642151 94.19910431]
[129.15197754 110.14390564]
[120.16684723 123.36738586]
[126.91426849 136.76411438]
[141.65235901 141.80659485]
[148.30436707 155.48889160]
[143.40629578 169.50833130]
[150.15373230 182.90505981]
[156.90115356 196.30178833]
[163.64857483 209.69850159]
[170.80937195 222.87890625]
[178.37661743 235.83023071]
[185.94386292 248.78155518]
[193.51110840 261.73287964]
[210.92271423 261.17037964]
[226.19506836 269.36697388]
[235.25819397 284.03848267]
[235.74696350 301.18881226]
[227.61776733 316.19827271]
[235.97555542 328.65408325]
[244.33332825 341.10992432]
[259.28570557 347.84478760]
[260.65988159 364.18624878]
[247.04223633 373.32360840]
[232.44142151 365.85714722]
[231.87751770 349.46771240]
[223.51972961 337.01187134]
[215.16194153 324.55606079]
[202.52806091 326.76794434]
[189.96333313 323.96670532]
[179.38827515 316.54348755]
[172.43341064 305.59878540]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 82]
[3 81]
[4 80]
[5 79]
[8 78]
[9 77]
[10 76]
[11 75]
[14 72]
[15 71]
[21 66]
[22 65]
[23 64]
[24 58]
[25 57]
[26 55]
[27 54]
[28 53]
[29 52]
[30 51]
[31 40]
[32 39]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
