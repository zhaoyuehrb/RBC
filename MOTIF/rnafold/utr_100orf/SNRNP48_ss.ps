%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:04:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCCUGCGCGUGCGGUCUGCAGUUCGGCCGCUUCCUCUUGGCGGGUGGGCUGCAGCUAUGGAGGGCGAGCCUCCACCUGUGGAGGAGCGGCGGCGGCUGCAGGAGGAGCUGAACGAGUUCGUGGAGAGCGGCUGCCGGACGUUGGAGGAGGUGACCG\
) } def
/len { sequence length } bind def

/coor [
[93.11156464 108.06532288]
[78.15780640 109.24221039]
[63.20404434 110.41909790]
[48.25028229 111.59598541]
[33.29652405 112.77286530]
[20.14595413 121.56906891]
[6.85085392 114.85418701]
[-8.10290623 116.03107452]
[-23.05666542 117.20796204]
[-27.91380692 132.50949097]
[-38.23801041 144.75309753]
[-52.43114471 152.08926392]
[-68.31363678 153.42459106]
[-83.45915985 148.58465576]
[-95.56529999 138.33616638]
[-102.80355072 124.26566315]
[-117.73132324 125.73591614]
[-126.01514435 129.70945740]
[-132.96618652 127.08554077]
[-147.91993713 128.26243591]
[-162.87370300 129.43931580]
[-177.82745361 130.61621094]
[-192.78121948 131.79309082]
[-207.73498535 132.96997070]
[-222.68873596 134.14686584]
[-237.64250183 135.32374573]
[-252.59626770 136.50064087]
[-267.55001831 137.67752075]
[-280.70059204 146.47372437]
[-293.99569702 139.75883484]
[-308.94946289 140.93572998]
[-323.90319824 142.11260986]
[-338.85696411 143.28950500]
[-353.81072998 144.46638489]
[-362.74362183 157.30140686]
[-377.85021973 161.34172058]
[-391.99768066 154.67964172]
[-398.50601196 140.46078491]
[-394.30212402 125.39886475]
[-381.37103271 116.60565948]
[-365.81835938 118.23304749]
[-354.98760986 129.51263428]
[-340.03384399 128.33573914]
[-325.08010864 127.15885162]
[-310.12634277 125.98197174]
[-295.17257690 124.80508423]
[-283.09161377 116.09306335]
[-268.72689819 122.72376251]
[-253.77314758 121.54687500]
[-238.81938171 120.36998749]
[-223.86563110 119.19309998]
[-208.91186523 118.01622009]
[-193.95811462 116.83933258]
[-179.00434875 115.66244507]
[-164.05058289 114.48555756]
[-149.09683228 113.30867004]
[-134.14306641 112.13178253]
[-119.20158386 110.80815125]
[-104.27381134 109.33789062]
[-100.70382690 95.73876190]
[-92.68233490 84.15520477]
[-81.15937042 75.99504852]
[-67.51198578 72.25853729]
[-53.37972641 73.41577148]
[-40.46763992 79.34765625]
[-30.34057808 89.35779572]
[-24.23355293 102.25420380]
[-9.27979279 101.07731628]
[5.67396736 99.90042877]
[17.75494385 91.18840790]
[32.11963654 97.81910706]
[47.07339478 96.64221954]
[62.02715683 95.46533966]
[76.98091888 94.28845215]
[91.93467712 93.11156464]
[106.81267548 91.20234680]
[121.57907867 88.56540680]
[136.34547424 85.92845917]
[151.11187744 83.29151917]
[165.87826538 80.65457153]
[168.52523804 67.65190887]
[175.43051147 56.35836792]
[185.74780273 48.11618042]
[198.22686768 43.89617920]
[211.36497498 44.18347549]
[223.58792114 48.92181015]
[233.43855286 57.52288437]
[239.75054932 68.93934631]
[254.60910034 66.88416290]
[269.46765137 64.82897186]
[284.32617188 62.77378845]
[298.56253052 51.13229370]
[314.55307007 58.30823517]
[329.36840820 55.96171951]
[344.18371582 53.61520004]
[358.99905396 51.26868439]
[373.81439209 48.92216492]
[388.62969971 46.57564926]
[403.44503784 44.22913361]
[418.26034546 41.88261414]
[433.07568359 39.53609848]
[447.89099121 37.18958282]
[452.49343872 20.69209290]
[463.78802490 7.88990164]
[479.48153687 1.30974114]
[496.41900635 2.22234941]
[511.21810913 10.39736557]
[520.94439697 24.15895462]
[535.65618896 21.23259926]
[550.36798096 18.30624390]
[565.07977295 15.37988949]
[579.79150391 12.45353508]
[589.86425781 -0.03325401]
[605.90557861 0.20061015]
[615.61004639 12.97572708]
[611.53314209 28.49212074]
[596.80236816 34.84693909]
[582.71789551 27.16531372]
[568.00610352 30.09166908]
[553.29431152 33.01802444]
[538.58251953 35.94437790]
[523.87078857 38.87073517]
[521.64752197 51.72507858]
[515.15856934 63.07879257]
[505.16265869 71.56020355]
[492.84381104 76.13608551]
[479.67092896 76.23751831]
[467.22271729 71.83050537]
[456.99847412 63.42267227]
[450.23751831 52.00490570]
[435.42221069 54.35142517]
[420.60687256 56.69794083]
[405.79153442 59.04445648]
[390.97622681 61.39097595]
[376.16088867 63.73749161]
[361.34558105 66.08400726]
[346.53024292 68.43052673]
[331.71493530 70.77704620]
[316.89959717 73.12355804]
[309.51113892 82.74248505]
[297.14959717 84.79353333]
[286.38134766 77.63233185]
[271.52282715 79.68751526]
[256.66427612 81.74269867]
[241.80574036 83.79788208]
[237.12496948 99.98654938]
[225.82109070 112.55898285]
[210.11746216 118.97045135]
[193.13427734 117.89514160]
[178.26869202 109.50000000]
[168.51521301 95.42096710]
[153.74880981 98.05791473]
[138.98242188 100.69485474]
[124.21601868 103.33180237]
[109.44962311 105.96875000]
[119.86226654 116.76582336]
[118.11298370 131.66348267]
[105.48246765 139.75483704]
[91.21776581 135.11604309]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[4 72]
[5 71]
[7 69]
[8 68]
[9 67]
[16 59]
[17 58]
[19 57]
[20 56]
[21 55]
[22 54]
[23 53]
[24 52]
[25 51]
[26 50]
[27 49]
[28 48]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[76 155]
[77 154]
[78 153]
[79 152]
[80 151]
[88 145]
[89 144]
[90 143]
[91 142]
[93 139]
[94 138]
[95 137]
[96 136]
[97 135]
[98 134]
[99 133]
[100 132]
[101 131]
[102 130]
[108 122]
[109 121]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
