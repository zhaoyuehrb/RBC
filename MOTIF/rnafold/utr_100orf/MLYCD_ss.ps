%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:05:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGCUGUUGUGGGGCACCAUGCGAGGCUUCGGGCCAGGCUUGACGGCCAGGCGUCUCCUCCCGCUGCGGUUGCCCCCGCGGCCGCCCGGGCCCCGGCUGGCGAGCGGGCAGGCGGCCG\
) } def
/len { sequence length } bind def

/coor [
[217.14091492 161.74156189]
[203.49644470 155.51033020]
[189.85195923 149.27911377]
[176.20747375 143.04788208]
[162.56300354 136.81665039]
[148.91851807 130.58543396]
[135.27404785 124.35420990]
[121.62956238 118.12297821]
[107.98508453 111.89175415]
[94.04962158 113.02951813]
[85.78369141 101.75272369]
[72.13921356 95.52149963]
[58.49473572 89.29027557]
[44.85025406 83.05904388]
[31.20577431 76.82781982]
[17.56129456 70.59659576]
[5.04280424 79.38491821]
[-10.09385395 80.71848297]
[-23.77475739 74.33888245]
[-32.36803436 62.05020523]
[-33.64789963 47.21014023]
[-47.29238129 40.97891617]
[-60.93685913 34.74769211]
[-74.58134460 28.51646614]
[-89.23414612 33.80163193]
[-102.98282623 27.28791237]
[-107.93112183 13.28612995]
[-121.57560730 7.05490494]
[-135.22007751 0.82367980]
[-148.86456299 -5.40754557]
[-162.58879089 -11.46112061]
[-176.39042664 -17.33602524]
[-190.19207764 -23.21093178]
[-203.99372864 -29.08583641]
[-217.79537964 -34.96074295]
[-231.59703064 -40.83564758]
[-248.53887939 -41.47591019]
[-252.61360168 -57.93291473]
[-237.92774963 -66.40415192]
[-225.72212219 -54.63729477]
[-211.92047119 -48.76239014]
[-198.11882019 -42.88748550]
[-184.31716919 -37.01258087]
[-170.51553345 -31.13767433]
[-156.71388245 -25.26276970]
[-149.23686218 -25.54149055]
[-142.63333130 -19.05202484]
[-128.98886108 -12.82079983]
[-115.34437561 -6.58957481]
[-101.69989777 -0.35834974]
[-87.87760925 -5.78789330]
[-73.95140076 0.33708447]
[-68.35011292 14.87198544]
[-54.70563507 21.10321045]
[-41.06115723 27.33443642]
[-27.41667557 33.56566238]
[-15.36316872 24.81474495]
[-0.44860697 23.26173973]
[13.33185863 29.42332649]
[22.23642540 41.73614502]
[23.79251862 56.95211792]
[37.43700027 63.18334198]
[51.08147812 69.41456604]
[64.72595978 75.64579010]
[78.37043762 81.87702179]
[92.01491547 88.10824585]
[105.95037842 86.97048187]
[114.21630859 98.24727631]
[127.86078644 104.47850037]
[141.50526428 110.70972443]
[155.14974976 116.94095612]
[168.79421997 123.17218018]
[182.43870544 129.40339661]
[196.08319092 135.63462830]
[209.72766113 141.86585999]
[223.37214661 148.09707642]
[231.88133240 143.55717468]
[241.38697815 143.51753235]
[249.68768311 147.85777283]
[254.92147827 155.45816040]
[255.98313904 164.48529053]
[269.10137939 171.75932312]
[282.21963501 179.03337097]
[295.33789062 186.30740356]
[308.45611572 193.58143616]
[321.57437134 200.85546875]
[334.69262695 208.12951660]
[347.81085205 215.40354919]
[358.22412109 211.76927185]
[368.68725586 214.47817993]
[375.73403931 222.37931824]
[377.17147827 232.64509583]
[389.89450073 240.59020996]
[402.61752319 248.53533936]
[415.34054565 256.48043823]
[422.11981201 257.10794067]
[426.79238892 260.60513306]
[428.50265503 265.18270874]
[440.79614258 273.77749634]
[453.08963013 282.37228394]
[469.46527100 283.24993896]
[476.65075684 297.99108887]
[467.25430298 311.43124390]
[450.94213867 309.74438477]
[444.49484253 294.66577148]
[432.20135498 286.07098389]
[419.90786743 277.47619629]
[407.39541626 269.20346069]
[394.67239380 261.25833130]
[381.94940186 253.31323242]
[369.22637939 245.36810303]
[349.98132324 246.23980713]
[340.53683472 228.52178955]
[327.41857910 221.24775696]
[314.30032349 213.97372437]
[301.18209839 206.69969177]
[288.06384277 199.42564392]
[274.94558716 192.15161133]
[261.82736206 184.87757874]
[248.70910645 177.60353088]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[4 73]
[5 72]
[6 71]
[7 70]
[8 69]
[9 68]
[11 66]
[12 65]
[13 64]
[14 63]
[15 62]
[16 61]
[21 56]
[22 55]
[23 54]
[24 53]
[27 50]
[28 49]
[29 48]
[30 47]
[31 45]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[81 120]
[82 119]
[83 118]
[84 117]
[85 116]
[86 115]
[87 114]
[88 113]
[92 111]
[93 110]
[94 109]
[95 108]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
