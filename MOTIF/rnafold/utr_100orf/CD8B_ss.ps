%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:49:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCAGCCGCGACUGUCUCCGCCGAGCCCCCGGGGCCAGGUGUCCCGGGCGCGCCACGAUGCGGCCGCGGCUGUGGCUCCUCUUGGCCGCGCAGCUGACAGUUCUCCAUGGCAACUCAGUCCUCCAGCAGACCCCUGCAUACAUAAAGGUGCAAACCA\
) } def
/len { sequence length } bind def

/coor [
[38.43728256 144.74992371]
[33.26182175 130.67105103]
[34.23134613 115.70241547]
[41.17973328 102.40881348]
[52.91641617 93.06803131]
[67.43190002 89.28047943]
[52.43479156 89.57498169]
[37.43767929 89.86949158]
[22.44057274 90.16399384]
[7.44346380 90.45850372]
[-7.55364466 90.75300598]
[-22.55075264 91.04751587]
[-36.19635391 99.05426788]
[-49.07308578 91.56834412]
[-64.07019043 91.86284637]
[-79.06729889 92.15735626]
[-94.06440735 92.45185852]
[-107.71000671 100.45861816]
[-120.58673859 92.97269440]
[-135.58384705 93.26719666]
[-152.29516602 104.47978973]
[-168.84643555 94.54118347]
[-183.82041931 95.42424011]
[-188.26229858 98.35906982]
[-192.91856384 99.17816925]
[-196.93486023 98.16159821]
[-199.69697571 95.89198303]
[-214.69697571 95.89198303]
[-228.49714661 103.62928009]
[-241.22441101 95.89198303]
[-256.22442627 95.89198303]
[-271.22442627 95.89198303]
[-286.22442627 95.89198303]
[-301.22442627 95.89198303]
[-316.22442627 95.89198303]
[-331.22442627 95.89198303]
[-346.22442627 95.89198303]
[-358.53964233 106.17375183]
[-374.22714233 102.81486511]
[-381.25280762 88.39198303]
[-374.22714233 73.96909332]
[-358.53964233 70.61021423]
[-346.22442627 80.89198303]
[-331.22442627 80.89198303]
[-316.22442627 80.89198303]
[-301.22442627 80.89198303]
[-286.22442627 80.89198303]
[-271.22442627 80.89198303]
[-256.22442627 80.89198303]
[-241.22441101 80.89198303]
[-228.49714661 73.15467834]
[-214.69697571 80.89198303]
[-199.69697571 80.89198303]
[-184.70347595 80.45025635]
[-169.72949219 79.56719971]
[-163.61181641 71.30373383]
[-153.73933411 67.72297668]
[-143.31852722 70.24656677]
[-135.87835693 78.27008820]
[-120.88124847 77.97558594]
[-108.30834198 69.98989105]
[-94.35891724 77.45475006]
[-79.36180878 77.16024780]
[-64.36470032 76.86573792]
[-49.36758804 76.57123566]
[-36.79468155 68.58554077]
[-22.84525871 76.05039978]
[-7.84815025 75.75589752]
[7.14895868 75.46139526]
[22.14606667 75.16688538]
[37.14317703 74.87238312]
[52.14028549 74.57787323]
[67.13739014 74.28337097]
[78.15222931 64.10135651]
[79.62248993 49.17358780]
[81.09274292 34.24581909]
[82.56300354 19.31804657]
[84.03325653 4.39027643]
[85.50351715 -10.53749466]
[75.28489685 -22.59383965]
[76.66761780 -38.33752441]
[88.83132172 -48.42810059]
[104.55950928 -46.87900925]
[114.52091980 -34.60929871]
[112.80563354 -18.89836884]
[100.43128967 -9.06723785]
[98.96102905 5.86053371]
[97.49077606 20.78830528]
[96.02051544 35.71607590]
[94.55026245 50.64384460]
[93.08000183 65.57161713]
[99.27481842 69.79941559]
[112.79238129 63.29745102]
[111.66444397 78.25500488]
[117.85926056 82.48280334]
[131.22436523 75.67295074]
[144.58946228 68.86309052]
[157.95455933 62.05323410]
[171.31965637 55.24337387]
[175.28421021 49.84791946]
[180.59019470 47.63625717]
[185.34584045 48.44018555]
[198.96798706 42.16028976]
[212.59013367 35.88039398]
[226.14997864 29.46706772]
[239.64619446 22.92092896]
[248.39318848 9.04930115]
[264.76708984 9.95889664]
[271.92382812 24.71400070]
[262.50115967 38.13582993]
[246.19233704 36.41715240]
[232.69610596 42.96329117]
[228.02601624 48.74187851]
[218.87002563 49.50254059]
[205.24787903 55.78243637]
[191.62573242 62.06233597]
[178.12951660 68.60847473]
[164.76441956 75.41832733]
[151.39930725 82.22818756]
[138.03421021 89.03804779]
[124.66912079 95.84790039]
[124.44825745 103.34465027]
[139.44204712 103.77600861]
[154.43524170 104.22824097]
[153.99322510 119.22172546]
[138.99972534 118.79022980]
[124.00653839 118.33814240]
[123.78567505 125.83489227]
[136.72668457 133.41975403]
[149.66770935 141.00460815]
[162.60871887 148.58947754]
[179.00213623 148.15567017]
[187.34268188 162.27542114]
[179.05033875 176.42352295]
[162.65553284 176.04563904]
[155.02386475 161.53048706]
[142.08283997 153.94563293]
[129.14183044 146.36076355]
[116.20081329 138.77590942]
[110.22090912 143.30258179]
[119.27424622 155.26239014]
[128.32759094 167.22219849]
[140.63359070 175.79904175]
[136.27928162 190.15312195]
[121.28216553 190.44755554]
[116.36777496 176.27554321]
[107.31443787 164.31571960]
[98.26110077 152.35591125]
[92.28119659 156.88258362]
[96.06856537 171.39657593]
[99.85594177 185.91055298]
[111.75457764 197.19570923]
[107.66806793 213.07752991]
[91.80027008 217.21818542]
[80.47460938 205.35810852]
[85.34195709 189.69793701]
[81.55458069 175.18394470]
[77.76720428 160.66995239]
[62.77504730 161.15481567]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 73]
[7 72]
[8 71]
[9 70]
[10 69]
[11 68]
[12 67]
[14 65]
[15 64]
[16 63]
[17 62]
[19 60]
[20 59]
[22 55]
[23 54]
[27 53]
[28 52]
[30 50]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
[74 91]
[75 90]
[76 89]
[77 88]
[78 87]
[79 86]
[95 121]
[96 120]
[97 119]
[98 118]
[99 117]
[102 116]
[103 115]
[104 114]
[105 112]
[106 111]
[128 139]
[129 138]
[130 137]
[131 136]
[149 158]
[150 157]
[151 156]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
