%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:10:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCCGUGGAGAACAGACCUGACGGGGCGAGGCCAGAGGACGCUAUGGCAGGCCUGAGGUACAGUGUAAAAGUCUAUGUCCUGAACGAAGACGAGGAAUGGAACAAUCUAGGCACCGGUCAGGUCUCAUCCACCUAUGACGAGC\
) } def
/len { sequence length } bind def

/coor [
[86.84204865 462.71670532]
[80.65672302 448.91101074]
[79.04234314 433.86944580]
[82.15705872 419.06561279]
[89.69572449 405.94982910]
[100.91978455 395.80706787]
[114.72961426 389.63098145]
[113.11889648 374.71771240]
[111.50817108 359.80444336]
[109.89745331 344.89117432]
[108.28673553 329.97790527]
[97.98976135 324.87194824]
[91.39544678 315.31192017]
[90.25653076 303.63323975]
[94.97531128 292.75848389]
[104.47344208 285.46600342]
[103.50581360 270.49725342]
[102.53818512 255.52848816]
[101.57056427 240.55973816]
[100.60293579 225.59097290]
[99.63530731 210.62222290]
[98.66767883 195.65345764]
[97.70005798 180.68470764]
[96.73242950 165.71594238]
[88.19022369 153.51431274]
[95.02118683 139.24375916]
[94.05355835 124.27500153]
[89.19529724 122.53650665]
[84.79758453 119.83740234]
[81.04788208 116.29272461]
[78.10600281 112.05357361]
[76.09735870 107.30064392]
[75.10755920 102.23651886]
[60.45347977 99.03370667]
[45.79940033 95.83089447]
[31.14532471 92.62808228]
[16.01132965 97.24031830]
[5.22964239 86.96391296]
[-9.42443466 83.76110077]
[-24.87701607 89.25198364]
[-37.18134689 78.41060638]
[-33.67978287 62.38964462]
[-17.97443771 57.67009735]
[-6.22162104 69.10702515]
[8.43245602 72.30983734]
[22.51829338 67.46850586]
[34.34813690 77.97399902]
[49.00221634 81.17681885]
[63.65629196 84.37963104]
[78.31037140 87.58244324]
[84.84439087 80.12682343]
[93.76298523 75.79802704]
[103.66290283 75.27716064]
[110.21266937 61.78269577]
[116.76243591 48.28823090]
[123.31221008 34.79376984]
[124.25927734 25.63397026]
[130.15083313 21.08172226]
[136.98942566 7.73130751]
[143.82803345 -5.61910582]
[150.66662598 -18.96951866]
[150.26651001 -23.45997047]
[151.25871277 -27.42376137]
[153.29432678 -30.47835922]
[155.93428040 -32.39922714]
[158.71055603 -33.13571167]
[166.67150879 -45.84882355]
[174.63246155 -58.56193924]
[159.63648987 -58.21445847]
[149.84696960 -69.57955170]
[152.41206360 -84.35859680]
[165.45877075 -91.76017761]
[179.46060181 -86.37976837]
[184.19383240 -72.14773560]
[193.47390747 -83.93247986]
[202.75396729 -95.71723175]
[212.03404236 -107.50197601]
[221.31411743 -119.28672791]
[224.19514465 -128.03306580]
[230.92283630 -131.22236633]
[240.45431519 -142.80471802]
[249.98580933 -154.38705444]
[259.51730347 -165.96940613]
[253.51374817 -180.04832458]
[254.75222778 -195.30364990]
[262.94815063 -208.22979736]
[276.21813965 -215.85646057]
[291.51287842 -216.43106079]
[305.31768799 -209.82157898]
[314.46038818 -197.54681396]
[316.84002686 -182.42742920]
[311.90975952 -167.93772888]
[300.80255127 -157.40736389]
[286.07077026 -153.25611877]
[271.09963989 -156.43792725]
[261.56814575 -144.85557556]
[252.03666687 -133.27322388]
[242.50518799 -121.69087982]
[233.09886169 -110.00665283]
[223.81878662 -98.22190857]
[214.53872681 -86.43715668]
[205.25865173 -74.65241241]
[195.97857666 -62.86766434]
[187.34558105 -50.60098648]
[179.38462830 -37.88787460]
[171.42367554 -25.17476082]
[164.01704407 -12.13091946]
[157.17843628 1.21949446]
[150.33984375 14.56990814]
[143.50123596 27.92032242]
[136.80667114 41.34353638]
[130.25689697 54.83800125]
[123.70713043 68.33246613]
[117.15736389 81.82692719]
[124.52551270 104.80989075]
[109.02231598 123.30737305]
[109.98994446 138.27612305]
[118.60135651 151.54843140]
[111.70118713 164.74832153]
[112.66881561 179.71708679]
[113.63643646 194.68583679]
[114.60406494 209.65458679]
[115.57169342 224.62335205]
[116.53932190 239.59210205]
[117.50694275 254.56086731]
[118.47457123 269.52963257]
[119.44219971 284.49838257]
[134.12713623 296.37774658]
[135.51782227 314.89648438]
[123.20000458 328.36718750]
[124.81072235 343.28045654]
[126.42144012 358.19372559]
[128.03216553 373.10699463]
[129.64288330 388.02026367]
[144.45295715 391.10522461]
[157.58386230 398.61749268]
[167.74917603 409.82116699]
[173.95298767 423.61853027]
[175.58752441 438.65792847]
[172.49264526 453.46594238]
[164.97157288 466.59179688]
[153.76110840 476.74960327]
[139.95957947 482.94418335]
[124.91908264 484.56863403]
[110.11315918 481.46383667]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 134]
[8 133]
[9 132]
[10 131]
[11 130]
[16 127]
[17 126]
[18 125]
[19 124]
[20 123]
[21 122]
[22 121]
[23 120]
[24 119]
[26 117]
[27 116]
[33 50]
[34 49]
[35 48]
[36 47]
[38 45]
[39 44]
[53 114]
[54 113]
[55 112]
[56 111]
[58 110]
[59 109]
[60 108]
[61 107]
[66 106]
[67 105]
[68 104]
[74 103]
[75 102]
[76 101]
[77 100]
[78 99]
[80 98]
[81 97]
[82 96]
[83 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
