%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:18:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUGGGGAUCCCGGGGCAGCCGAGGGCCCCUGACUCGGCUCCUCGCGGCGACAUGGAUCGGAUGGCCAGCUCCAUGAAGCAGGUGCCCAACCCACUGCCCAAGGUGCUGAGCCGGCGCGGGGUCGGCGCUGGGCUGGAGGCGGCGGAGCGCG\
) } def
/len { sequence length } bind def

/coor [
[218.45275879 164.12608337]
[214.01463318 155.10617065]
[212.80635071 145.06242371]
[198.55966187 140.36862183]
[184.31295776 135.67481995]
[170.06626892 130.98101807]
[155.55700684 134.34713745]
[144.87104797 122.68005371]
[130.62435913 117.98625183]
[116.37766266 113.29244995]
[100.86597443 121.07527924]
[84.76806641 114.59127808]
[70.95448303 120.43807220]
[57.14090347 126.28485870]
[43.32732010 132.13165283]
[29.51373672 137.97843933]
[22.77999496 144.24362183]
[15.35600567 143.80023193]
[1.42528987 149.36216736]
[-12.50542641 154.92410278]
[-26.43614197 160.48603821]
[-40.36685944 166.04797363]
[-54.29757309 171.60992432]
[-68.22829437 177.17185974]
[-71.06105804 192.33691406]
[-81.65959930 203.54737854]
[-96.64196014 207.22602844]
[-111.22731781 202.19902039]
[-120.76154327 190.07044983]
[-122.20230103 174.71051025]
[-115.08984375 161.02049255]
[-101.69374084 153.36883545]
[-86.28862762 154.19715881]
[-73.79022980 163.24113464]
[-59.85951233 157.67919922]
[-45.92879486 152.11726379]
[-31.99807930 146.55532837]
[-18.06736374 140.99339294]
[-4.13664770 135.43145752]
[9.79406834 129.86952209]
[23.66695023 124.16484833]
[37.48053360 118.31806183]
[51.29411316 112.47127533]
[65.10769653 106.62448883]
[78.92127991 100.77770233]
[79.35606384 95.67044830]
[81.00990295 90.81886292]
[83.78513336 86.50943756]
[76.41889191 73.44274139]
[61.46122360 69.09465790]
[54.17694855 55.73823547]
[58.41436005 41.50517654]
[51.04812241 28.43848419]
[43.68188095 15.37178802]
[36.31564331 2.30509353]
[28.94940186 -10.76160145]
[21.58316231 -23.82829666]
[4.67419291 -28.19566917]
[-3.70682621 -43.13187027]
[1.18060076 -59.19475174]
[-6.45236921 -72.10745239]
[-20.99581909 -79.68505096]
[-21.43472290 -96.07833099]
[-7.31757307 -104.42327118]
[6.83311558 -96.13533020]
[6.46032858 -79.74041748]
[14.09329891 -66.82772064]
[26.93360710 -65.38591766]
[36.73241043 -56.66742325]
[39.74598312 -43.70210266]
[34.64985657 -31.19453621]
[42.01609802 -18.12784004]
[49.38233566 -5.06114578]
[56.74857712 8.00554848]
[64.11481476 21.07224464]
[71.48105621 34.13893890]
[85.85213470 37.88161469]
[93.50868988 51.02816772]
[89.48558807 66.07649994]
[96.85182953 79.14319611]
[113.39175415 83.70343018]
[121.07146454 99.04576111]
[135.31816101 103.73956299]
[149.56484985 108.43336487]
[165.09312439 105.40298462]
[174.76007080 116.73432922]
[189.00675964 121.42813110]
[203.25344849 126.12193298]
[217.50015259 130.81573486]
[236.01918030 118.01390839]
[258.00103760 121.62849426]
[271.16369629 139.30758667]
[286.16290283 139.15357971]
[301.16210938 138.99958801]
[307.12701416 135.92346191]
[312.87490845 136.31016541]
[316.77725220 139.15991211]
[331.77014160 139.62182617]
[346.76300049 140.08375549]
[361.75588989 140.54568481]
[376.74877930 141.00761414]
[382.83496094 138.17897034]
[388.56213379 138.80133057]
[392.34417725 141.80886841]
[407.30545044 142.88594055]
[422.26672363 143.96301270]
[437.22802734 145.04008484]
[452.18930054 146.11715698]
[467.15057373 147.19422913]
[482.11184692 148.27130127]
[496.43197632 141.54487610]
[508.57083130 150.17608643]
[523.53210449 151.25315857]
[535.31549072 140.72093201]
[551.09008789 141.68902588]
[561.49713135 153.58309937]
[560.36230469 169.34658813]
[548.35888672 179.62730408]
[532.60827637 178.32589722]
[522.45501709 166.21443176]
[507.49374390 165.13737488]
[494.24377441 171.94082642]
[481.03479004 163.23257446]
[466.07351685 162.15550232]
[451.11221313 161.07843018]
[436.15093994 160.00137329]
[421.18966675 158.92430115]
[406.22839355 157.84722900]
[391.26708984 156.77015686]
[376.28686523 156.00050354]
[361.29397583 155.53857422]
[346.30108643 155.07664490]
[331.30819702 154.61471558]
[316.31530762 154.15278625]
[301.31610107 153.99879456]
[286.31689453 154.15278625]
[271.31768799 154.30679321]
[268.62994385 161.14151001]
[264.32534790 167.09194946]
[258.67489624 171.78344727]
[263.22219849 186.07757568]
[267.76947021 200.37170410]
[281.92013550 207.40979004]
[286.87020874 222.41885376]
[279.68292236 236.49430847]
[264.62234497 241.28541565]
[250.62367249 233.94970703]
[245.99205017 218.83932495]
[253.47535706 204.91899109]
[248.92807007 190.62486267]
[244.38076782 176.33073425]
[234.56883240 175.33689880]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 89]
[4 88]
[5 87]
[6 86]
[8 84]
[9 83]
[10 82]
[12 45]
[13 44]
[14 43]
[15 42]
[16 41]
[18 40]
[19 39]
[20 38]
[21 37]
[22 36]
[23 35]
[24 34]
[48 80]
[49 79]
[52 76]
[53 75]
[54 74]
[55 73]
[56 72]
[57 71]
[60 67]
[61 66]
[92 137]
[93 136]
[94 135]
[97 134]
[98 133]
[99 132]
[100 131]
[101 130]
[104 129]
[105 128]
[106 127]
[107 126]
[108 125]
[109 124]
[110 123]
[112 121]
[113 120]
[140 151]
[141 150]
[142 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
