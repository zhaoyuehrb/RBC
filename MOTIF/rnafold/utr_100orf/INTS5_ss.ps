%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:25:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGCCGCCUGCGCUCCGCCGCUCGCGCCUCGGGCUCGGCUCGGGCUCCGGGAUGUCCGCGCUGUGCGACCCUCCCGGGGCCCCAGGGCCACCUGGGCCUGCCCCGGCCACCCACGGUCCCGCGCCUCUCAGUGCUCAGGAGCUGUCCCAGG\
) } def
/len { sequence length } bind def

/coor [
[6.89156151 265.90997314]
[12.23865795 278.28628540]
[12.52161694 293.75692749]
[7.13657665 307.75695801]
[1.75153637 321.75701904]
[-3.63350415 335.75704956]
[1.54164732 350.94250488]
[-7.22517300 364.37835693]
[-23.20881081 365.75781250]
[-34.14798737 354.02264404]
[-31.65110207 338.17507935]
[-17.63355255 330.37200928]
[-12.24851131 316.37197876]
[-6.86347103 302.37191772]
[-1.47843039 288.37188721]
[-7.43633366 283.81628418]
[-19.35214043 274.70510864]
[-25.31004333 270.14950562]
[-37.40922546 279.01574707]
[-49.50840759 287.88195801]
[-53.36465836 303.45465088]
[-68.00375366 310.01791382]
[-82.19583130 302.53698730]
[-85.05393982 286.75057983]
[-74.38558960 274.76867676]
[-58.37462234 275.78277588]
[-46.27544022 266.91656494]
[-34.17625809 258.05032349]
[-23.89913368 247.12419128]
[-15.78952217 234.50538635]
[-7.67990971 221.88658142]
[-6.70351362 214.51484680]
[0.72603977 209.09544373]
[9.09136963 196.64468384]
[17.45669937 184.19392395]
[15.43967628 172.22850037]
[22.35835648 161.77479553]
[34.94155502 158.76777649]
[43.55912018 146.49024963]
[52.17668915 134.21272278]
[60.79425430 121.93520355]
[69.41181946 109.65768433]
[78.02938843 97.38016510]
[78.64122009 82.39264679]
[71.05305481 69.45356750]
[63.46489716 56.51448441]
[55.87673569 43.57540131]
[48.28857422 30.63632202]
[40.70041656 17.69724083]
[33.11225510 4.75815868]
[25.52409554 -8.18092251]
[17.93593407 -21.12000465]
[10.34777451 -34.05908585]
[2.75961399 -46.99816513]
[-13.44423103 -55.68671799]
[-12.94788170 -73.20299530]
[-20.79840088 -85.98460388]
[-28.64892197 -98.76620483]
[-36.62940216 -111.46706390]
[-44.73901367 -124.08586884]
[-52.84862518 -136.70466614]
[-66.49841309 -146.76049805]
[-60.61420822 -162.66058350]
[-43.70660019 -161.40791321]
[-40.22982407 -144.81428528]
[-32.12021255 -132.19548035]
[-24.01059914 -119.57667542]
[-17.71064568 -115.62619019]
[-15.86732006 -106.61672211]
[-8.01679993 -93.83512115]
[-0.16628011 -81.05352020]
[11.55576706 -77.91764832]
[18.19066429 -67.28157043]
[15.69869518 -54.58632660]
[23.28685570 -41.64724350]
[30.87501526 -28.70816422]
[38.46317673 -15.76908302]
[46.05133820 -2.83000159]
[53.63949585 10.10907936]
[61.22765732 23.04816055]
[68.81581879 35.98724365]
[76.40397644 48.92632294]
[83.99213409 61.86540604]
[91.58029938 74.80448914]
[106.57952118 74.95748138]
[114.43003845 62.17588043]
[122.28055573 49.39427948]
[130.13107300 36.61267853]
[130.03594971 20.21380615]
[144.32495117 12.16665554]
[158.29876709 20.74944496]
[157.58235168 37.13293457]
[142.91267395 44.46319580]
[135.06216431 57.24480057]
[127.21163940 70.02639771]
[119.36112213 82.80800629]
[129.63824463 93.73414612]
[142.87606812 86.68006897]
[156.11389160 79.62599182]
[169.35171509 72.57191467]
[173.71841431 57.38285446]
[187.58668518 49.80349350]
[202.72871399 54.33053207]
[210.16104126 68.27816010]
[205.47415161 83.37149048]
[191.44873047 90.65592957]
[176.40579224 85.80973816]
[163.16796875 92.86381531]
[149.93014526 99.91789246]
[136.69232178 106.97196960]
[140.47599792 121.48692322]
[155.47286987 121.18094635]
[170.46975708 120.87496948]
[186.18225098 114.50679016]
[196.65121460 127.84235382]
[186.73490906 141.59384155]
[170.77572632 135.87184143]
[155.77885437 136.17782593]
[140.78196716 136.48381042]
[138.74249268 143.70117188]
[149.20388794 154.45101929]
[134.66352844 158.13592529]
[132.62403870 165.35330200]
[145.24284363 173.46292114]
[157.86164856 181.57252502]
[170.48043823 189.68214417]
[185.86833191 186.07821655]
[199.25334167 194.48161316]
[202.69438171 209.90675354]
[194.14993286 223.20216370]
[178.68928528 226.47991943]
[165.48495483 217.79539490]
[162.37083435 202.30094910]
[149.75202942 194.19132996]
[137.13322449 186.08172607]
[124.51442719 177.97210693]
[102.72985077 167.61262512]
[88.09841919 152.26240540]
[81.45851135 134.91539001]
[82.59618378 118.59083557]
[90.30690765 105.99772644]
[81.68934631 118.27525330]
[73.07177734 130.55278015]
[64.45420837 142.83029175]
[55.83664322 155.10781860]
[47.21907806 167.38534546]
[46.04701233 185.73423767]
[29.90745354 192.55926514]
[21.54212379 205.01000977]
[13.17679310 217.46076965]
[4.93889332 229.99620056]
[-3.17071891 242.61500549]
[-11.28033161 255.23381042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 15]
[4 14]
[5 13]
[6 12]
[18 28]
[19 27]
[20 26]
[29 153]
[30 152]
[31 151]
[33 150]
[34 149]
[35 148]
[38 146]
[39 145]
[40 144]
[41 143]
[42 142]
[43 141]
[44 84]
[45 83]
[46 82]
[47 81]
[48 80]
[49 79]
[50 78]
[51 77]
[52 76]
[53 75]
[54 74]
[56 71]
[57 70]
[58 69]
[59 67]
[60 66]
[61 65]
[85 96]
[86 95]
[87 94]
[88 93]
[97 110]
[98 109]
[99 108]
[100 107]
[111 119]
[112 118]
[113 117]
[123 136]
[124 135]
[125 134]
[126 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
