%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:00:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCGCCGCCGGGCUUUGCUCCAACCUCCUCAGAGCAUGGCCCGGGGGCCGCUGGCCGCCCGCGGACUGCGGCUGCUGCUGCCGCUCCUGCCGCUCCUGCCGCUCCUGCCGCUGCCGCAGGUGGCGCUGGGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[-23.76142120 153.07463074]
[-38.14940262 157.31561279]
[-52.48781586 161.72129822]
[-66.77477264 166.29107666]
[-81.06172943 170.86085510]
[-95.29534912 175.59413147]
[-109.47377014 180.49031067]
[-119.99253082 192.30834961]
[-134.54824829 189.14915466]
[-148.72666931 194.04533386]
[-162.90509033 198.94149780]
[-177.08349609 203.83766174]
[-191.26191711 208.73382568]
[-205.44033813 213.63000488]
[-219.61875916 218.52616882]
[-230.13752747 230.34420776]
[-244.69323730 227.18502808]
[-258.87164307 232.08119202]
[-273.05007935 236.97735596]
[-287.22848511 241.87353516]
[-301.40692139 246.76969910]
[-303.64343262 261.91091919]
[-312.66961670 274.27160645]
[-326.41131592 281.01135254]
[-341.71078491 280.58145142]
[-355.05230713 273.08062744]
[-363.37011719 260.23257446]
[-364.75283813 244.98965454]
[-358.88272095 230.85458374]
[-347.10870361 221.07548523]
[-332.13632202 217.89955139]
[-317.40615845 222.05656433]
[-306.30307007 232.59127808]
[-292.12466431 227.69511414]
[-277.94622803 222.79895020]
[-263.76782227 217.90277100]
[-249.58940125 213.00660706]
[-240.08477783 201.53877258]
[-224.51492310 204.34774780]
[-210.33650208 199.45158386]
[-196.15808105 194.55541992]
[-181.97967529 189.65924072]
[-167.80125427 184.76307678]
[-153.62283325 179.86691284]
[-139.44441223 174.97074890]
[-129.93978882 163.50289917]
[-114.36993408 166.31188965]
[-100.19152069 161.41572571]
[-94.84893036 156.21336365]
[-85.63150787 156.57389832]
[-71.34455109 152.00411987]
[-57.05759430 147.43434143]
[-51.59712601 142.35585022]
[-42.39039230 142.92764282]
[-28.00240898 138.68664551]
[-20.08471107 120.96961212]
[-1.44949973 114.55811310]
[16.22582817 123.93566132]
[30.28825378 118.71567535]
[44.35067749 113.49569702]
[58.41310120 108.27571106]
[72.41474915 102.89484406]
[86.35379028 97.35379028]
[96.77641296 86.56634521]
[101.83482361 72.44499969]
[106.89322662 58.32364655]
[106.07181549 51.61971283]
[108.45790100 46.33966446]
[112.52085876 43.67990112]
[118.22136688 29.80530930]
[123.92186737 15.93072033]
[129.62237549 2.05613017]
[135.32287598 -11.81845951]
[127.90275574 -25.58347893]
[131.11720276 -40.88711929]
[143.44845581 -50.50346375]
[159.07408142 -49.89197159]
[170.61613464 -39.34137344]
[172.62480164 -23.83333397]
[164.15165710 -10.69027901]
[149.19746399 -6.11795521]
[143.49696350 7.75663471]
[137.79646301 21.63122559]
[132.09594727 35.50581360]
[126.39544678 49.38040543]
[121.01457977 63.38205719]
[115.95616913 77.50340271]
[110.89776611 91.62475586]
[110.64337158 93.62453461]
[110.08848572 95.44474792]
[124.73395538 98.68667603]
[139.37942505 101.92861176]
[154.02490234 105.17053986]
[160.57226562 103.51237488]
[166.11051941 105.21533203]
[169.26022339 108.91146088]
[183.74166870 112.82142639]
[198.22311401 116.73139191]
[212.70455933 120.64135742]
[227.18600464 124.55132294]
[242.52592468 120.67871857]
[252.79637146 131.46607971]
[267.27780151 135.37605286]
[278.10214233 124.47975159]
[292.92864990 120.47093201]
[307.76904297 124.42794800]
[318.63137817 135.28639221]
[322.59368896 150.12538147]
[318.59017944 164.95330811]
[307.69775391 175.78152466]
[292.84640503 179.69732666]
[278.03109741 175.64733887]
[267.23706055 164.72102356]
[263.36785889 149.85749817]
[248.88641357 145.94752502]
[234.58229065 150.09979248]
[223.27603149 139.03276062]
[208.79458618 135.12280273]
[194.31314087 131.21282959]
[179.83171082 127.30286407]
[165.35026550 123.39289856]
[150.78297424 119.81600952]
[136.13749695 116.57408142]
[121.49202728 113.33215332]
[106.84655762 110.09022522]
[91.89484406 111.29282379]
[77.95580292 116.83387756]
[71.06375122 122.96498871]
[63.63308334 122.33813477]
[49.57065964 127.55812073]
[35.50823593 132.77810669]
[21.44581032 137.99807739]
[19.52312469 148.64787292]
[13.36029530 157.44461060]
[4.14804697 162.80731201]
[-6.38280630 163.80725098]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 55]
[2 54]
[3 52]
[4 51]
[5 50]
[6 48]
[7 47]
[9 45]
[10 44]
[11 43]
[12 42]
[13 41]
[14 40]
[15 39]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[58 132]
[59 131]
[60 130]
[61 129]
[62 127]
[63 126]
[64 88]
[65 87]
[66 86]
[69 85]
[70 84]
[71 83]
[72 82]
[73 81]
[90 125]
[91 124]
[92 123]
[93 122]
[96 121]
[97 120]
[98 119]
[99 118]
[100 117]
[102 115]
[103 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
