%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:03:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCCUGCCCUGCGAACCAGCGCGGCCCCCUGGCGCUGAGGCUGCUCCGGCCAUGGCCCCUCGGCCCCGCGCCCGCCCAGGGGUCGCUGUCGCCUGCUGCUGGCUCCUCACUGUUGUUCUACGCUGCUGCGUAUCAUUCAAUGUUGAUGUGA\
) } def
/len { sequence length } bind def

/coor [
[223.35798645 259.78036499]
[217.89907837 253.75288391]
[213.90823364 246.65217590]
[211.58981323 238.82986450]
[211.06524658 230.67475891]
[212.36660767 222.59361267]
[215.43475342 214.99078369]
[204.04367065 205.23152161]
[192.65260315 195.47224426]
[180.53271484 196.08093262]
[170.95634460 187.98989868]
[169.43759155 175.14088440]
[158.24929810 165.14979553]
[147.06100464 155.15869141]
[136.87623596 156.65127563]
[127.36631775 152.16758728]
[121.80905914 142.98385620]
[122.26734924 132.03883362]
[111.49867249 121.59682465]
[100.72999573 111.15481567]
[89.85468292 100.82391357]
[78.87387848 90.60520172]
[67.78874207 80.49977112]
[56.60044861 70.50867462]
[45.41215134 60.51757431]
[34.22385406 50.52647781]
[22.83278084 40.76720428]
[11.24373245 31.24386597]
[-0.34531561 21.72052956]
[-11.93436432 12.19719219]
[-23.52341270 2.67385435]
[-35.11246109 -6.84948301]
[-46.70150757 -16.37281990]
[-55.37596512 -19.43053055]
[-58.42811203 -26.21261024]
[-69.81918335 -35.97188568]
[-80.67523193 -34.50566864]
[-90.33255005 -39.19185257]
[-95.67457581 -48.24750519]
[-95.12809753 -58.52653885]
[-106.10890198 -68.74524689]
[-117.08969879 -78.96395111]
[-125.55947113 -82.54987335]
[-128.18832397 -89.50698090]
[-138.95700073 -99.94898987]
[-152.34852600 -98.19493866]
[-164.12409973 -104.40113831]
[-170.06950378 -116.09220123]
[-168.20446777 -128.87789917]
[-178.75648499 -139.53880310]
[-189.30850220 -150.19970703]
[-199.86050415 -160.86062622]
[-214.69569397 -156.88409424]
[-229.52745056 -160.87342834]
[-240.36610413 -171.75547791]
[-244.29609680 -186.60307312]
[-240.26029968 -201.42224121]
[-229.34432983 -212.22673035]
[-214.48449707 -216.11016846]
[-199.67803955 -212.02793884]
[-188.90783691 -201.07814026]
[-185.07098389 -186.20622253]
[-189.19960022 -171.41262817]
[-178.64758301 -160.75172424]
[-168.09556580 -150.09082031]
[-157.54356384 -139.42990112]
[-140.76615906 -140.07955933]
[-128.44682312 -128.18141174]
[-128.51498413 -110.71766663]
[-117.74630737 -100.27565765]
[-106.87099457 -89.94475555]
[-95.89019012 -79.72605133]
[-84.90938568 -69.50733948]
[-65.82376862 -66.63744354]
[-60.05991364 -47.36295700]
[-48.66883850 -37.60368347]
[-37.17817307 -27.96186829]
[-25.58912277 -18.43853188]
[-14.00007534 -8.91519356]
[-2.41102648 0.60814351]
[9.17802238 10.13148117]
[20.76707077 19.65481758]
[32.35611725 29.17815590]
[37.16955948 29.60242271]
[41.75052261 33.09565353]
[44.21495056 39.33818054]
[55.40324783 49.32928085]
[66.59154510 59.32037735]
[77.77983856 69.31147003]
[84.90775299 71.43398285]
[89.09258270 79.62440491]
[100.07338715 89.84310913]
[107.69925690 92.61583710]
[111.17200470 100.38613892]
[121.94068146 110.82814789]
[132.70936584 121.27015686]
[152.43344116 125.23099518]
[157.05210876 143.97039795]
[168.24040222 153.96150208]
[179.42869568 163.95259094]
[197.51498413 167.25662231]
[202.41188049 184.08116150]
[213.80294800 193.84043884]
[225.19401550 203.59971619]
[246.83032227 196.16281128]
[268.54327393 202.97969055]
[281.90359497 221.25361633]
[281.81402588 243.76960754]
[294.80441284 251.26960754]
[307.79479980 258.76962280]
[323.61474609 258.96899414]
[330.76821899 272.03332520]
[343.75860596 279.53332520]
[356.74899292 287.03332520]
[369.73937988 294.53332520]
[382.72976685 302.03332520]
[399.00778198 294.16384888]
[416.60629272 297.56417847]
[428.57040405 310.69985962]
[430.28604126 328.22720337]
[443.57339478 335.18756104]
[456.86074829 342.14791870]
[470.14807129 349.10827637]
[483.43542480 356.06863403]
[499.78961182 354.85510254]
[508.79272461 368.56188965]
[501.18310547 383.08862305]
[484.78890991 383.49145508]
[476.47506714 369.35595703]
[463.18771362 362.39562988]
[449.90039062 355.43527222]
[436.61303711 348.47491455]
[423.32568359 341.51455688]
[413.30471802 348.48870850]
[401.19387817 350.52856445]
[389.30184937 347.18252563]
[379.92227173 339.03176880]
[374.89166260 327.59020996]
[375.22976685 315.02371216]
[362.23937988 307.52371216]
[349.24899292 300.02371216]
[336.25860596 292.52371216]
[323.26821899 285.02371216]
[308.37744141 285.36077881]
[300.29479980 271.75997925]
[287.30441284 264.25997925]
[274.31402588 256.75997925]
[268.33676147 262.13555908]
[261.30349731 266.05627441]
[253.56250000 268.32122803]
[245.49856567 268.81167603]
[237.51388550 267.49722290]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 104]
[8 103]
[9 102]
[12 100]
[13 99]
[14 98]
[18 96]
[19 95]
[20 94]
[21 92]
[22 91]
[23 89]
[24 88]
[25 87]
[26 86]
[27 83]
[28 82]
[29 81]
[30 80]
[31 79]
[32 78]
[33 77]
[35 76]
[36 75]
[40 73]
[41 72]
[42 71]
[44 70]
[45 69]
[49 66]
[50 65]
[51 64]
[52 63]
[108 147]
[109 146]
[110 145]
[112 143]
[113 142]
[114 141]
[115 140]
[116 139]
[120 133]
[121 132]
[122 131]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
