%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:11:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGGAAGCUUUGGAGAGCUGAAGAGGGCGCGGCGGCGCUCGGCGGCGCGCUCUUCCUGCUGCUCUUCGCGCUAGGGGUCCGCCAGCUGCUGAAGCAGA\
) } def
/len { sequence length } bind def

/coor [
[142.78105164 233.92546082]
[143.60749817 220.17547607]
[151.21829224 208.56382751]
[144.89076233 194.96372986]
[138.56323242 181.36364746]
[132.23571777 167.76354980]
[125.90818787 154.16346741]
[118.54327393 141.09602356]
[110.18549347 128.64019775]
[101.82770538 116.18437958]
[90.45603180 113.19800568]
[84.05767059 103.33421326]
[85.96678925 91.73297119]
[78.00041962 79.02325439]
[70.03405762 66.31352997]
[62.06768799 53.60380936]
[54.10132217 40.89408875]
[46.13495636 28.18437004]
[38.16858673 15.47464848]
[30.20222092 2.76492810]
[9.61145878 -5.82448006]
[8.70050812 -27.37794113]
[-0.78153813 -39.00079727]
[-10.26358414 -50.62365341]
[-19.74563026 -62.24651337]
[-29.22767830 -73.86936951]
[-38.70972443 -85.49222565]
[-53.42861938 -91.29435730]
[-55.47868729 -106.04720306]
[-64.96073151 -117.67005920]
[-74.44277954 -129.29292297]
[-83.92482758 -140.91577148]
[-98.64372253 -146.71791077]
[-100.69379425 -161.47074890]
[-110.17583466 -173.09361267]
[-125.66047668 -172.09086609]
[-138.75920105 -180.40969849]
[-144.43527222 -194.85136414]
[-140.50613403 -209.86274719]
[-128.48262024 -219.67166138]
[-112.98801422 -220.50636292]
[-99.98030853 -212.04591370]
[-94.46122742 -197.54353333]
[-98.55297852 -182.57565308]
[-89.07093048 -170.95280457]
[-75.03025818 -165.98200989]
[-72.30197144 -150.39782715]
[-62.81992340 -138.77496338]
[-53.33787918 -127.15210724]
[-43.85583115 -115.52925110]
[-29.81515694 -110.55846405]
[-27.08686638 -94.97427368]
[-17.60482025 -83.35141754]
[-8.12277412 -71.72856140]
[1.35927200 -60.10570145]
[10.84131813 -48.48284531]
[20.32336426 -36.85998917]
[28.53815651 -37.78848648]
[36.51029587 -35.26358414]
[42.83539581 -29.64871216]
[46.36632919 -21.85847664]
[46.42084885 -13.21022987]
[42.91194153 -5.20143890]
[50.87830734 7.50828171]
[58.84467697 20.21800232]
[66.81104279 32.92772293]
[74.77741241 45.63744354]
[82.74377441 58.34716415]
[90.71014404 71.05688477]
[98.67651367 83.76660156]
[113.66423798 91.13640594]
[114.28352356 107.82659912]
[122.64131165 120.28241730]
[130.99909973 132.73823547]
[134.89187622 134.31315613]
[137.87527466 136.74076843]
[139.79989624 139.66209412]
[140.63803101 142.70581055]
[140.47813416 145.52604675]
[139.50827026 147.83593750]
[145.83580017 161.43603516]
[152.16333008 175.03611755]
[158.49084473 188.63619995]
[164.81837463 202.23629761]
[181.38446045 205.20121765]
[192.85330200 217.29101562]
[194.90042114 233.66271973]
[186.92272949 247.91615295]
[193.67015076 261.31286621]
[200.41758728 274.70959473]
[207.16500854 288.10632324]
[221.16601562 296.64471436]
[220.50161743 313.03039551]
[205.85528564 320.40719604]
[192.29391479 311.18649292]
[193.76828003 294.85375977]
[187.02085876 281.45703125]
[180.27343750 268.06030273]
[173.52600098 254.66357422]
[160.11096191 253.71841431]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 84]
[4 83]
[5 82]
[6 81]
[7 80]
[8 74]
[9 73]
[10 72]
[13 70]
[14 69]
[15 68]
[16 67]
[17 66]
[18 65]
[19 64]
[20 63]
[22 57]
[23 56]
[24 55]
[25 54]
[26 53]
[27 52]
[29 50]
[30 49]
[31 48]
[32 47]
[34 45]
[35 44]
[88 99]
[89 98]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
