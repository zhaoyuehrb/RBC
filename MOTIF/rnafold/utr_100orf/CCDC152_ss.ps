%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCAGGGGUGUACCAGGCCCCAGAGGCAGCGGAAAGGGAGACUGUGGGGAACUAGGAGCAACAGCAGGCAUGGACCAAAGCAGUGAAGGAUGUAUGAAAAAGAUUAGCAGUGUGAAUCUUGACAAACUUAUAAAUGACUUCUCACAGAUAGAAAAGAAAAUGGUAGAAA\
) } def
/len { sequence length } bind def

/coor [
[-47.98263550 499.25054932]
[-59.99975586 494.45779419]
[-67.38011169 507.51651001]
[-74.76046753 520.57525635]
[-74.81452942 536.39636230]
[-87.81259918 543.66955566]
[-95.19295502 556.72827148]
[-102.57331085 569.78698730]
[-109.95367432 582.84576416]
[-117.33403015 595.90447998]
[-111.68182373 610.48480225]
[-116.77296448 625.27044678]
[-130.20356750 633.27996826]
[-145.63211060 630.73162842]
[-155.77369690 618.82861328]
[-155.83979797 603.19116211]
[-145.79919434 591.20281982]
[-130.39276123 588.52410889]
[-123.01239777 575.46539307]
[-115.63204193 562.40667725]
[-108.25168610 549.34790039]
[-100.87133026 536.28918457]
[-101.34516144 521.40216064]
[-87.81919861 513.19488525]
[-80.43884277 500.13616943]
[-73.05847931 487.07742310]
[-86.56813049 476.37042236]
[-98.10431671 463.55789185]
[-107.34310913 448.99835205]
[-114.02489471 433.09918213]
[-117.96161652 416.30563354]
[-119.04208374 399.08798218]
[-117.23513794 381.92868042]
[-112.59052277 365.30859375]
[-105.23750305 349.69369507]
[-95.38131714 335.52185059]
[-83.29739380 323.19073486]
[-69.32369995 313.04644775]
[-53.85124588 305.37399292]
[-37.31318665 300.38916016]
[-20.17266273 298.23245239]
[-2.90984750 298.96520996]
[13.99151039 302.56781006]
[19.37989044 288.56903076]
[24.76827240 274.57028198]
[30.15665245 260.57150269]
[35.54503250 246.57275391]
[40.93341446 232.57398987]
[46.32179642 218.57522583]
[51.71017456 204.57646179]
[57.09855652 190.57769775]
[38.17592621 178.88369751]
[22.29878807 163.30383301]
[10.24925900 144.60559082]
[2.62090683 123.71003723]
[-0.21049131 101.64651489]
[1.89454103 79.50189209]
[8.83230877 58.36701202]
[20.26105309 39.28300095]
[9.04042244 29.32823181]
[-7.12484503 26.56849289]
[-12.56294727 11.09725857]
[-1.67962980 -1.16999197]
[14.32928276 2.38623643]
[18.99519348 18.10760117]
[30.21582413 28.06237221]
[38.44113541 20.90916824]
[47.39464569 14.69155693]
[40.49899292 1.37052369]
[25.36310577 -3.17705846]
[17.94972610 -17.13475800]
[22.65707970 -32.22171783]
[36.69237518 -39.48711395]
[51.72872543 -34.62051392]
[58.84532547 -20.50918770]
[53.82002640 -5.52513218]
[60.71567917 7.79590130]
[70.14932251 4.32455587]
[79.88323975 1.81563520]
[89.81951141 0.29437673]
[99.85820007 -0.22391671]
[100.95951843 -15.18343163]
[102.06084442 -30.14294624]
[90.12430573 -40.05752182]
[86.32772827 -55.10297012]
[92.13095856 -69.49401855]
[105.30254364 -77.69700623]
[120.77773285 -76.55771637]
[132.60601807 -66.51423645]
[136.23915100 -51.42848587]
[130.28015137 -37.10124207]
[117.02035522 -29.04162598]
[115.91903687 -14.08211040]
[114.81771851 0.87740463]
[124.82916260 2.90022421]
[134.58273315 5.93147326]
[143.97715759 9.93967152]
[152.91485596 14.88319016]
[161.30300903 20.71068954]
[169.05448914 27.36164856]
[176.08882141 34.76699448]
[188.17529297 25.88346481]
[200.26176453 16.99993515]
[212.34825134 8.11640644]
[224.43472290 -0.76712233]
[236.52119446 -9.65065098]
[243.05859375 -24.05804634]
[257.89608765 -25.36113930]
[269.98257446 -34.24466705]
[279.16433716 -48.49708939]
[295.40151978 -43.61961365]
[295.20956421 -26.66675377]
[278.86608887 -22.15819168]
[266.77963257 -13.27466202]
[261.10671997 0.49732354]
[245.40472412 2.43582559]
[233.31825256 11.31935406]
[221.23178101 20.20288277]
[209.14529419 29.08641243]
[197.05882263 37.96994019]
[184.97235107 46.85346985]
[191.03991699 58.08835983]
[195.62983704 70.00351715]
[198.66757202 82.40554810]
[200.10382080 95.09315491]
[199.91529846 107.86040497]
[198.10505676 120.50006866]
[194.70245361 132.80700684]
[189.76274109 144.58143616]
[183.36607361 155.63227844]
[175.61630249 165.78015137]
[166.63920593 174.86033630]
[156.58047485 182.72546387]
[145.60339355 189.24787903]
[133.88612366 194.32170105]
[121.61884308 197.86459351]
[109.00067139 199.81904602]
[96.23640442 200.15332031]
[83.53322601 198.86201477]
[71.09732056 195.96607971]
[65.70893860 209.96484375]
[60.32055664 223.96360779]
[54.93217468 237.96237183]
[49.54379654 251.96113586]
[44.15541458 265.95989990]
[38.76703262 279.95864868]
[33.37865448 293.95742798]
[27.99027252 307.95617676]
[39.34897614 314.21829224]
[49.83174133 321.85440063]
[59.27330017 330.74371338]
[67.52486420 340.74566650]
[74.45645142 351.70214844]
[79.95893860 363.44009399]
[83.94579315 375.77401733]
[86.35440063 388.50915527]
[87.14708710 401.44442749]
[86.31168365 414.37564087]
[83.86172485 427.09869385]
[79.83620453 439.41284180]
[74.29900360 451.12380981]
[67.33782959 462.04693604]
[59.06284714 472.00991821]
[49.60493469 480.85577393]
[39.11362076 488.44509888]
[27.75469971 494.65838623]
[15.70763111 499.39785767]
[3.16269660 502.58905029]
[-9.68200684 504.18191528]
[-22.62368965 504.15161133]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 26]
[3 25]
[4 24]
[6 22]
[7 21]
[8 20]
[9 19]
[10 18]
[43 148]
[44 147]
[45 146]
[46 145]
[47 144]
[48 143]
[49 142]
[50 141]
[51 140]
[59 66]
[60 65]
[68 77]
[69 76]
[81 94]
[82 93]
[83 92]
[101 121]
[102 120]
[103 119]
[104 118]
[105 117]
[106 116]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
