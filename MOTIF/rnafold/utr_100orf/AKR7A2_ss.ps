%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:42:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAACGCGCAGGCGCCGCUGCUAUGCUGAGUGCCGCGUCUCGCGUAGUCUCCCGCGCCGCCGUCCACUGCGCGCUUCGCUCUCCGCCGCCCGAGGCCCGCGCGCUCGCCAUGUCCCGGCCAC\
) } def
/len { sequence length } bind def

/coor [
[66.06860352 130.61268616]
[59.83948517 121.80844879]
[55.84707642 111.78961182]
[54.31374359 101.11415863]
[39.46150208 99.01391602]
[24.60926437 96.91368103]
[15.55470657 98.82337189]
[9.40643787 94.56546021]
[-5.38731861 92.08659363]
[-14.48769474 93.76441956]
[-20.52521706 89.35087585]
[-35.25084305 86.49501038]
[-49.97646713 83.63914490]
[-64.70208740 80.78327942]
[-79.42771912 77.92741394]
[-90.09079742 90.49180603]
[-105.53532410 95.96531677]
[-121.54687500 92.95404816]
[-133.80621338 82.36589813]
[-139.05436707 67.13970184]
[-153.84811401 64.66084290]
[-168.64187622 62.18197632]
[-183.43563843 59.70311356]
[-198.22938538 57.22425079]
[-213.02314758 54.74538803]
[-227.81690979 52.26652527]
[-236.91728210 53.94435501]
[-242.95480347 49.53081131]
[-257.68041992 46.67494583]
[-272.40603638 43.81908035]
[-283.65771484 54.50457764]
[-299.04562378 56.50239182]
[-312.65286255 49.04431915]
[-319.24713135 34.99813843]
[-316.29281616 19.76489639]
[-304.92593384 9.20208454]
[-289.51721191 7.37131882]
[-275.99169922 14.97656631]
[-269.55017090 29.09345436]
[-254.82455444 31.94931984]
[-240.09893799 34.80518723]
[-225.33804321 37.47277069]
[-210.54428101 39.95163345]
[-195.75053406 42.43049622]
[-180.95677185 44.90935898]
[-166.16300964 47.38822174]
[-151.36926270 49.86708450]
[-136.57550049 52.34594727]
[-128.55424500 41.21612167]
[-116.45014191 34.61836243]
[-102.61683655 33.90102005]
[-89.77267456 39.26255798]
[-80.46648407 49.70124435]
[-76.57184601 63.20178604]
[-61.84622574 66.05765533]
[-47.12059784 68.91352081]
[-32.39497375 71.76938629]
[-17.66934967 74.62525177]
[-2.90845561 77.29283905]
[11.88530064 79.77169800]
[26.70950699 82.06143951]
[41.56174469 84.16168213]
[56.41398239 86.26192474]
[65.09445190 70.50290680]
[79.18500519 59.31571198]
[96.50170898 54.43424988]
[114.36062622 56.61511993]
[129.99375916 65.52029419]
[140.97810364 79.76955414]
[155.33567810 75.42674255]
[169.69325256 71.08393097]
[184.05082703 66.74111938]
[198.40840149 62.39830780]
[212.76597595 58.05549622]
[217.75378418 45.46919632]
[228.93760681 38.19149017]
[242.07521057 38.71358109]
[252.33670044 46.61758423]
[266.80050659 42.64286041]
[274.35055542 37.29230499]
[281.68457031 38.75637817]
[296.24514771 35.15233994]
[310.80575562 31.54829788]
[316.51803589 17.12091827]
[329.63760376 8.83496952]
[345.11968994 9.87657070]
[357.01110840 19.84520340]
[360.73937988 34.90772629]
[354.87091064 49.27228928]
[341.66223145 57.41542816]
[326.19238281 56.20593643]
[314.40979004 46.10889435]
[299.84921265 49.71293259]
[285.28860474 53.31697464]
[270.77520752 57.10666275]
[256.31143188 61.08138657]
[248.68273926 76.01030731]
[232.31152344 80.95384979]
[217.10879517 72.41307068]
[202.75122070 76.75588226]
[188.39363098 81.09869385]
[174.03605652 85.44150543]
[159.67848206 89.78431702]
[145.32090759 94.12712860]
[144.67230225 109.63645172]
[138.86958313 124.03395844]
[128.58226013 135.65852356]
[135.91575623 148.74362183]
[143.24925232 161.82872009]
[158.64599609 164.56263733]
[168.64355469 176.58689880]
[168.52139282 192.22399902]
[158.33720398 204.09059143]
[142.89962769 206.58363342]
[129.49781799 198.52598572]
[124.45971680 183.72221375]
[130.16415405 169.16221619]
[122.83065033 156.07711792]
[115.49715424 142.99201965]
[104.99051666 145.42654419]
[94.20592499 145.33105469]
[83.74404144 142.71087646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 63]
[5 62]
[6 61]
[8 60]
[9 59]
[11 58]
[12 57]
[13 56]
[14 55]
[15 54]
[20 48]
[21 47]
[22 46]
[23 45]
[24 44]
[25 43]
[26 42]
[28 41]
[29 40]
[30 39]
[69 104]
[70 103]
[71 102]
[72 101]
[73 100]
[74 99]
[78 96]
[79 95]
[81 94]
[82 93]
[83 92]
[107 119]
[108 118]
[109 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
