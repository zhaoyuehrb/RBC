%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:47:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGCUGAACGCCCCAUAUCCGGGUUCCCGCCGCCUCCACCGCCACCGCCUCAGCCGCCUCGCACAUUUAGUCUUGCCGGGAGUGGUGUGAUUCCCGACCAAGAUGGCGGCCGUGGGGCGAGUCGGCUCCUUCGGUUCUUCUCCGCCGGGAUUAUCCUCGACUUACACUGGCGGCCCCUUGGGCAACGAGAUAGCGUCGGGCA\
) } def
/len { sequence length } bind def

/coor [
[67.50587463 532.33972168]
[69.99156952 513.11810303]
[70.22143555 498.11987305]
[70.45130157 483.12164307]
[67.40909576 476.38220215]
[70.80136108 467.89578247]
[71.26103210 452.90283203]
[71.72071075 437.90988159]
[72.18038177 422.91693115]
[69.24181366 416.13165283]
[72.76372528 407.69821167]
[73.45310211 392.71408081]
[74.14247894 377.72991943]
[72.35037231 375.56848145]
[71.30856323 372.56524658]
[71.34258270 369.00323486]
[72.66934204 365.27813721]
[75.36109161 361.85729980]
[76.96711731 346.94351196]
[78.57313538 332.02972412]
[80.17916107 317.11596680]
[81.67086792 302.19030762]
[83.04815674 287.25369263]
[72.23772430 279.41488647]
[66.66872406 267.15917969]
[67.89369202 253.64471436]
[75.69908905 242.41227722]
[88.13330841 236.45785522]
[89.73933411 221.54408264]
[91.34535980 206.63031006]
[92.37896729 191.66595459]
[92.83863831 176.67300415]
[93.29830933 161.68005371]
[93.75798798 146.68708801]
[94.21765900 131.69413757]
[94.67733002 116.70117950]
[90.02206421 114.23944092]
[86.34309387 110.53139496]
[83.95735168 105.93258667]
[83.05951691 100.87347412]
[83.70631409 95.81916046]
[85.81362915 91.22668457]
[89.16645813 87.50363159]
[81.69966125 74.49413300]
[74.23286438 61.48463821]
[66.66660309 48.53273773]
[59.00131989 35.63919449]
[51.23747253 22.80476379]
[43.37550735 10.03019810]
[35.51354218 -2.74436760]
[27.65158081 -15.51893330]
[19.78961563 -28.29349899]
[11.92765236 -41.06806564]
[4.06568861 -53.84262848]
[-3.99111295 -66.49521637]
[-12.24085903 -79.02285004]
[-20.49060631 -91.55049133]
[-28.74035263 -104.07812500]
[-36.99010086 -116.60576630]
[-45.23984528 -129.13340759]
[-45.54111099 -114.13642883]
[-52.69397354 -100.95171356]
[-65.10163879 -92.52260590]
[-79.99423218 -90.73079681]
[-94.04716492 -95.97629547]
[-104.12326813 -107.08809662]
[-107.97317505 -121.58561707]
[-104.73743439 -136.23246765]
[-95.13838959 -147.75888062]
[-81.31891632 -153.59173584]
[-66.36405945 -152.42890930]
[-53.61217499 -144.52986145]
[-59.64314651 -158.26402283]
[-65.67411804 -171.99819946]
[-71.70508575 -185.73236084]
[-77.73606110 -199.46653748]
[-83.76702881 -213.20069885]
[-98.85723114 -223.74993896]
[-96.26033020 -241.10366821]
[-102.50106049 -254.74380493]
[-108.74178314 -268.38394165]
[-114.98251343 -282.02407837]
[-121.22324371 -295.66421509]
[-127.46397400 -309.30435181]
[-133.70469666 -322.94448853]
[-148.60192871 -328.22161865]
[-155.32885742 -342.52279663]
[-149.89451599 -357.36340332]
[-135.52301025 -363.93875122]
[-120.74068451 -358.34780884]
[-114.31764984 -343.90759277]
[-120.06455994 -329.18521118]
[-113.82383728 -315.54507446]
[-107.58310699 -301.90493774]
[-101.34237671 -288.26480103]
[-95.10164642 -274.62466431]
[-88.86092377 -260.98452759]
[-82.62019348 -247.34439087]
[-71.39411926 -242.83064270]
[-66.08451080 -231.51393127]
[-70.03285980 -219.23167419]
[-64.00189209 -205.49751282]
[-57.97091675 -191.76333618]
[-51.93994904 -178.02917480]
[-45.90897751 -164.29499817]
[-39.87800598 -150.56083679]
[-32.71220779 -137.38314819]
[-24.46246147 -124.85550690]
[-16.21271515 -112.32787323]
[-7.96296930 -99.80023956]
[0.28677732 -87.27259827]
[8.53652382 -74.74496460]
[12.95506096 -72.92098236]
[16.27254105 -68.29935455]
[16.84025383 -61.70459366]
[24.70221710 -48.93002701]
[32.56418228 -36.15546417]
[40.42614746 -23.38089752]
[48.28810883 -10.60633183]
[56.15007401 2.16823411]
[64.01203918 14.94279957]
[70.19803619 18.99351311]
[71.89486694 27.97391510]
[79.56014252 40.86745834]
[85.68334198 45.01249313]
[87.24235535 54.01784134]
[94.70915222 67.02733612]
[102.17594910 80.03683472]
[116.40586090 84.78125763]
[130.18583679 78.85570526]
[143.96582031 72.93014526]
[157.74578857 67.00458527]
[168.41033936 51.99565887]
[185.74366760 54.72545624]
[199.43121338 48.58942413]
[213.11877441 42.45339584]
[217.21633911 27.36220551]
[230.08511353 18.47803688]
[245.64888000 19.99572372]
[256.55889893 31.19865990]
[257.66375732 46.79716110]
[248.44183350 59.42609406]
[233.24739075 63.12245941]
[219.25480652 56.14094925]
[205.56724548 62.27698135]
[191.87969971 68.41300964]
[187.28005981 79.60417175]
[175.92298889 84.82690430]
[163.67135620 80.78456116]
[149.89137268 86.71012115]
[136.11138916 92.63568115]
[122.33142090 98.56124115]
[137.26535034 99.96754456]
[152.19927979 101.37384796]
[166.92568970 98.52203369]
[181.76649475 100.70158386]
[195.05110168 107.66715240]
[205.28410339 118.63464355]
[211.31356812 132.36946106]
[212.46080017 147.32553101]
[208.59664917 161.81925964]
[200.15608215 174.21914673]
[188.08924866 183.12933350]
[173.75448608 187.54684448]
[158.76541138 186.97439575]
[144.80931091 181.47644043]
[133.45721436 171.67185974]
[125.98697662 158.66433716]
[123.23949432 143.91671753]
[116.45489502 130.53878784]
[109.67028809 117.16085815]
[109.21061707 132.15380859]
[108.75093842 147.14675903]
[108.29126740 162.13972473]
[107.83159637 177.13267517]
[107.37191772 192.12562561]
[119.93531036 183.93043518]
[134.22434998 188.49366760]
[139.71241760 202.45365906]
[132.35649109 215.52615356]
[117.57562256 218.08076477]
[106.25913239 208.23632812]
[104.65310669 223.15010071]
[103.04708862 238.06387329]
[115.74016571 249.23997498]
[119.23767090 265.61660767]
[112.35533142 280.70043945]
[97.98479462 288.63098145]
[96.60749817 303.56762695]
[98.93648529 312.40518188]
[95.09293365 318.72198486]
[93.48691559 333.63577271]
[91.88088989 348.54953003]
[90.27486420 363.46331787]
[89.12662506 378.41931152]
[88.43724823 393.40344238]
[87.74787903 408.38760376]
[87.17333221 423.37658691]
[86.71366119 438.36953735]
[86.25399017 453.36248779]
[85.79431915 468.35546875]
[85.44953918 483.35150146]
[85.21967316 498.34973145]
[84.98980713 513.34796143]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 204]
[3 203]
[4 202]
[6 201]
[7 200]
[8 199]
[9 198]
[11 197]
[12 196]
[13 195]
[18 194]
[19 193]
[20 192]
[21 191]
[22 189]
[23 188]
[28 184]
[29 183]
[30 182]
[31 176]
[32 175]
[33 174]
[34 173]
[35 172]
[36 171]
[43 128]
[44 127]
[45 126]
[46 124]
[47 123]
[48 121]
[49 120]
[50 119]
[51 118]
[52 117]
[53 116]
[54 115]
[55 112]
[56 111]
[57 110]
[58 109]
[59 108]
[60 107]
[72 106]
[73 105]
[74 104]
[75 103]
[76 102]
[77 101]
[79 98]
[80 97]
[81 96]
[82 95]
[83 94]
[84 93]
[85 92]
[129 152]
[130 151]
[131 150]
[132 149]
[134 146]
[135 145]
[136 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
