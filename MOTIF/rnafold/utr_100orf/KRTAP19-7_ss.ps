%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:45:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACAGCUAACCACUUCUGACAACAUGAGCUACUCCGGCAGCUACUAUGGAGGCCUAGGCUACGGCUGUGGAGGAUUCGGUGGCCUGGGCUAUGGCUAUAGCUGUGGAUGUGGCAGCUUCCGCA\
) } def
/len { sequence length } bind def

/coor [
[14.89330769 272.57019043]
[3.05245471 281.77856445]
[-10.33684921 288.54071045]
[-24.77582169 292.60470581]
[-39.72657776 293.81915283]
[-54.63216400 292.13882446]
[-68.93731689 287.62634277]
[-82.10913086 280.44973755]
[-93.65692139 270.87643433]
[-103.15051270 259.26300049]
[-110.23625183 246.04209900]
[-114.65016174 231.70622253]
[-116.22782135 216.78941345]
[-114.91046906 201.84738159]
[-110.74716187 187.43672180]
[-103.89300537 174.09428406]
[-94.60333252 162.31710815]
[-83.22419739 152.54391479]
[-70.17950439 145.13877869]
[-55.95520401 140.37756348]
[-41.08117676 138.43762207]
[-26.11152077 139.39125061]
[-11.60388851 143.20288086]
[1.90127480 149.73056030]
[13.90087032 158.73109436]
[23.94788551 169.86921692]
[31.66804504 182.72996521]
[36.77375412 196.83428955]
[39.07505798 211.66101074]
[45.63179398 198.16992188]
[52.18852997 184.67884827]
[58.74526596 171.18777466]
[65.30200195 157.69668579]
[71.68869019 144.12428284]
[77.90432739 130.47270203]
[84.11995697 116.82110596]
[90.33559418 103.16951752]
[90.55635071 95.01424408]
[96.88279724 89.25600433]
[103.43952942 75.76493073]
[109.99626923 62.27384949]
[116.55300140 48.78277206]
[123.10974121 35.29169083]
[129.66647339 21.80061340]
[135.71006775 8.07199574]
[141.23194885 -5.87465143]
[146.75381470 -19.82129860]
[152.27568054 -33.76794434]
[151.46614075 -39.15352631]
[152.74710083 -43.80829620]
[155.46289062 -47.03992844]
[158.77484131 -48.53143311]
[165.33157349 -62.02251053]
[171.88832092 -75.51358795]
[178.44505310 -89.00466919]
[185.00178528 -102.49575043]
[191.55853271 -115.98682404]
[198.11526489 -129.47790527]
[204.67199707 -142.96897888]
[211.22872925 -156.46006775]
[217.78547668 -169.95114136]
[224.34220886 -183.44221497]
[230.89894104 -196.93330383]
[220.33602905 -207.80531311]
[214.13140869 -221.63565063]
[213.03433228 -236.75425720]
[217.17726135 -251.33547974]
[226.05993652 -263.61856079]
[238.60971069 -272.12023926]
[253.31115723 -275.81393433]
[268.38897705 -274.25360107]
[282.02249146 -267.62765503]
[292.56536865 -256.73617554]
[298.74447632 -242.89442444]
[299.81369019 -227.77383423]
[295.64389038 -213.20027161]
[286.73861694 -200.93357849]
[274.17318726 -192.45503235]
[259.46496582 -188.78843689]
[244.39002991 -190.37655640]
[237.83328247 -176.88548279]
[231.27655029 -163.39440918]
[224.71981812 -149.90332031]
[218.16307068 -136.41224670]
[211.60633850 -122.92116547]
[205.04960632 -109.43009186]
[198.49287415 -95.93901062]
[191.93612671 -82.44792938]
[185.37939453 -68.95685577]
[178.82266235 -55.46577454]
[172.26591492 -41.97469711]
[166.22232056 -28.24607849]
[160.70045471 -14.29943085]
[155.17858887 -0.35278335]
[149.65672302 13.59386349]
[150.79338074 17.04372978]
[150.24407959 21.22909164]
[147.67619324 25.31733704]
[143.15756226 28.35734940]
[136.60081482 41.84842682]
[130.04408264 55.33950806]
[123.48734283 68.83058929]
[116.93061066 82.32166290]
[110.37387085 95.81274414]
[103.98718262 109.38514709]
[97.77155304 123.03673553]
[91.55591583 136.68832397]
[85.34027863 150.33992004]
[84.61161041 159.56033325]
[78.79308319 164.25343323]
[72.23634338 177.74450684]
[65.67961121 191.23558044]
[59.12287140 204.72666931]
[52.56613541 218.21774292]
[53.48077774 224.48437500]
[51.52882004 229.97973633]
[55.62310028 244.41014099]
[67.75834656 255.44046021]
[64.00952148 271.40536499]
[48.23308945 275.88153076]
[36.65849304 264.26428223]
[41.19268417 248.50442505]
[37.09840393 234.07400513]
[32.23937225 248.26519775]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[29 114]
[30 113]
[31 112]
[32 111]
[33 110]
[34 108]
[35 107]
[36 106]
[37 105]
[39 104]
[40 103]
[41 102]
[42 101]
[43 100]
[44 99]
[45 95]
[46 94]
[47 93]
[48 92]
[52 91]
[53 90]
[54 89]
[55 88]
[56 87]
[57 86]
[58 85]
[59 84]
[60 83]
[61 82]
[62 81]
[63 80]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
