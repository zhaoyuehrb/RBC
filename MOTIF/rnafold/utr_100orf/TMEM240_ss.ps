%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:42:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGGCCCCGCCCGAUGUCCAUGAGCGCGAACACCAUGAUCUUCAUGAUUCUGGGGGCGUCGGUCGUGAUGGCCAUCGCGUGCUUGAUGGACAUGAACGCGCUGCUGGACCGAU\
) } def
/len { sequence length } bind def

/coor [
[149.06570435 525.28454590]
[160.35325623 514.63696289]
[158.31074524 499.77667236]
[156.26824951 484.91638184]
[154.22575378 470.05609131]
[152.18324280 455.19580078]
[140.19692993 446.42861938]
[137.91386414 431.38726807]
[147.19097900 418.87435913]
[145.14848328 404.01406860]
[143.10598755 389.15377808]
[128.43742371 381.92437744]
[120.84885406 367.25198364]
[123.47814941 350.77648926]
[135.49230957 338.96301270]
[133.04466248 324.16406250]
[130.59701538 309.36508179]
[128.14936829 294.56613159]
[125.70172882 279.76718140]
[123.25408936 264.96823120]
[120.80644226 250.16928101]
[118.35880280 235.37033081]
[115.70925140 220.60618591]
[112.85829163 205.87960815]
[110.00733185 191.15303040]
[107.15637207 176.42645264]
[104.30541229 161.69987488]
[101.45445251 146.97331238]
[98.60348511 132.24673462]
[83.51467133 129.09162903]
[71.11599731 119.04694366]
[64.45928955 103.95066071]
[65.46664429 86.93975067]
[74.40782166 71.80014801]
[64.32021332 60.69878769]
[54.23260498 49.59743118]
[39.22558594 44.58744431]
[36.39270782 29.96471977]
[26.30509949 18.86336136]
[16.21749115 7.76200342]
[6.12988281 -3.33935499]
[-9.76163483 -5.53917313]
[-17.82571030 -19.40821266]
[-11.87627506 -34.30733109]
[3.52277350 -38.80720139]
[16.55860329 -29.45590973]
[17.23124123 -13.42696381]
[27.31884956 -2.32560492]
[37.40645981 8.77575302]
[47.49406815 19.87711143]
[61.77955246 24.09305573]
[65.33396149 39.50982285]
[75.42156982 50.61117935]
[85.50917816 61.71253967]
[100.27332306 59.06299210]
[105.87130737 45.14672089]
[103.84323120 29.45603943]
[115.77132416 20.53584862]
[121.36930847 6.61957932]
[126.96729279 -7.29669046]
[132.56527710 -21.21295929]
[138.16326904 -35.12923050]
[135.32185364 -51.28034210]
[148.06054688 -61.60785675]
[163.27488708 -55.48770905]
[165.31364441 -39.21578598]
[152.07952881 -29.53124428]
[146.48155212 -15.61497498]
[140.88356018 -1.69870543]
[135.28558350 12.21756458]
[129.68759155 26.13383484]
[132.11607361 40.82913208]
[119.78757477 50.74470520]
[114.18959045 64.66097260]
[127.70422363 75.59510803]
[134.60002136 90.96736145]
[133.82814026 107.26142120]
[126.03701019 120.98006439]
[113.33006287 129.39576721]
[116.18102264 144.12234497]
[119.03198242 158.84892273]
[121.88294220 173.57550049]
[124.73390961 188.30207825]
[127.58486938 203.02864075]
[130.43582153 217.75521851]
[135.19856262 225.71247864]
[133.15776062 232.92268372]
[135.60539246 247.72163391]
[138.05303955 262.52059937]
[140.50068665 277.31954956]
[142.94833374 292.11849976]
[145.39596558 306.91744995]
[147.84361267 321.71640015]
[150.29125977 336.51535034]
[163.10595703 341.79675293]
[171.54270935 352.65625000]
[173.46156311 366.16360474]
[168.46322632 378.74108887]
[157.96626282 387.11126709]
[160.00877380 401.97155762]
[162.05126953 416.83184814]
[174.36030579 426.37780762]
[176.22000122 441.47735596]
[167.04353333 453.15332031]
[169.08604431 468.01361084]
[171.12854004 482.87390137]
[173.17103577 497.73419189]
[175.21353149 512.59448242]
[188.95520020 519.80187988]
[195.80583191 533.72479248]
[193.13125610 549.00964355]
[181.95986938 559.77905273]
[166.58732605 561.89196777]
[152.92466736 554.53588867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 108]
[3 107]
[4 106]
[5 105]
[6 104]
[9 101]
[10 100]
[11 99]
[15 94]
[16 93]
[17 92]
[18 91]
[19 90]
[20 89]
[21 88]
[22 87]
[23 85]
[24 84]
[25 83]
[26 82]
[27 81]
[28 80]
[29 79]
[34 54]
[35 53]
[36 52]
[38 50]
[39 49]
[40 48]
[41 47]
[55 74]
[56 73]
[58 71]
[59 70]
[60 69]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
