%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:12:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGGAAGCAGAGGAGCAGCAGGGUCAGGGUGCUGGGUUCCUAAGGUGCAAGGAUGCAGAACAGAACUGGCCUCAUUCUCUGUGCUCUUGCCCUCCUGAUGGGUUUCCUGAUGGUCUGCCUGGGGGCCUUCUUCAUUUCCUGGGGCUCCAUAU\
) } def
/len { sequence length } bind def

/coor [
[168.17782593 166.30099487]
[156.64356995 156.71136475]
[145.10929871 147.12174988]
[133.57504272 137.53211975]
[122.04078674 127.94249725]
[110.50653076 118.35287476]
[102.40261841 119.66796112]
[94.94921112 117.77729797]
[89.28189087 113.38512421]
[86.10065460 107.54320526]
[85.58969116 101.42906189]
[87.43770599 96.12048340]
[74.19987488 89.06640625]
[60.96205521 82.01232910]
[47.72423172 74.95825195]
[34.48640823 67.90417480]
[21.24858475 60.85009384]
[8.01076031 53.79601669]
[-1.09457922 52.50717545]
[-5.42298889 46.46063232]
[-18.51416588 39.13798904]
[-31.60534096 31.81534767]
[-44.69651794 24.49270439]
[-57.78769302 17.17006111]
[-71.82870483 23.50695038]
[-86.73452759 20.39731598]
[-96.83168030 9.23884583]
[-98.40332031 -5.54857969]
[-111.49449921 -12.87122345]
[-124.58567047 -20.19386673]
[-133.66282654 -21.66817474]
[-137.86698914 -27.80175018]
[-150.80607605 -35.38991165]
[-163.50131226 -32.89794159]
[-174.13739014 -39.53284073]
[-177.27326965 -51.25488663]
[-190.05487061 -59.10540771]
[-202.83647156 -66.95592499]
[-215.61807251 -74.80644226]
[-228.39967346 -82.65696716]
[-240.01756287 -74.55329132]
[-253.80726624 -71.51001740]
[-267.67126465 -73.95612335]
[-279.51367188 -81.48815155]
[-287.55706787 -92.93637085]
[-290.60928345 -106.54627991]
[-288.23995972 -120.24748993]
[-300.85876465 -128.35710144]
[-313.47756958 -136.46672058]
[-326.09634399 -144.57632446]
[-342.49374390 -144.81573486]
[-350.24777222 -159.26591492]
[-341.38171387 -173.06175232]
[-325.01623535 -172.01127625]
[-317.98675537 -157.19512939]
[-305.36795044 -149.08552551]
[-292.74914551 -140.97590637]
[-280.13034058 -132.86630249]
[-266.70437622 -141.48074341]
[-250.80966187 -143.39906311]
[-235.60986328 -138.18852234]
[-224.15242004 -126.84040070]
[-218.75769043 -111.58175659]
[-220.54914856 -95.43856812]
[-207.76754761 -87.58805084]
[-194.98594666 -79.73752594]
[-182.20434570 -71.88700867]
[-169.42274475 -64.03649139]
[-151.90646362 -64.53283691]
[-143.21791077 -48.32899094]
[-130.27883911 -40.74083328]
[-117.26303101 -33.28504181]
[-104.17185211 -25.96239853]
[-91.08068085 -18.63975716]
[-77.65766907 -25.03981972]
[-62.86493301 -22.27595329]
[-52.41395950 -11.20208168]
[-50.46504974 4.07888460]
[-37.37387466 11.40152740]
[-24.28269958 18.72417068]
[-11.19152260 26.04681396]
[1.89965403 33.36945724]
[15.06483936 40.55819321]
[28.30266190 47.61227036]
[41.54048538 54.66634750]
[54.77830887 61.72042847]
[68.01613617 68.77450562]
[81.25395966 75.82858276]
[94.49178314 82.88265991]
[109.36010742 80.89949036]
[120.28624725 70.62236786]
[131.21240234 60.34524155]
[142.13854980 50.06811523]
[141.07231140 34.46692276]
[150.32550049 21.86087608]
[165.52905273 18.20216179]
[179.50430298 25.21831512]
[185.65257263 39.59651947]
[181.07083130 54.54783249]
[167.92243958 63.01269531]
[152.41566467 60.99426270]
[141.48951721 71.27138519]
[130.56336975 81.54851532]
[119.63722992 91.82563782]
[120.09615326 106.81861877]
[131.63041687 116.40824127]
[143.16467285 125.99786377]
[154.69892883 135.58749390]
[166.23318481 145.17710876]
[177.76744080 154.76673889]
[189.58970642 163.99897766]
[201.68888855 172.86520386]
[213.78807068 181.73141479]
[225.88725281 190.59762573]
[236.59880066 188.31161499]
[246.58271790 192.24946594]
[252.59730530 200.87089539]
[252.83529663 211.15992737]
[264.56277466 220.51226807]
[276.29025269 229.86460876]
[288.01773071 239.21696472]
[303.63125610 241.77195740]
[308.75772095 255.75654602]
[320.48516846 265.10888672]
[332.21264648 274.46124268]
[343.94012451 283.81359863]
[357.92510986 277.59439087]
[373.19766235 278.59826660]
[386.24826050 286.59454346]
[394.07797241 299.74575806]
[394.88757324 315.02984619]
[388.49102783 328.93463135]
[376.35824585 338.26489258]
[361.27719116 340.87661743]
[346.71343994 336.16961670]
[336.01361084 325.22558594]
[331.63644409 310.55932617]
[334.58776855 295.54107666]
[322.86032104 286.18872070]
[311.13284302 276.83636475]
[299.40536499 267.48403931]
[284.63064575 265.59796143]
[278.66537476 250.94442749]
[266.93789673 241.59208679]
[255.21043396 232.23974609]
[243.48295593 222.88739014]
[224.23339844 221.47840881]
[217.02102661 202.69680786]
[204.92184448 193.83059692]
[192.82266235 184.96438599]
[180.72348022 176.09815979]
[177.14627075 176.30033875]
[173.29608154 174.74151611]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 110]
[2 109]
[3 108]
[4 107]
[5 106]
[6 105]
[12 89]
[13 88]
[14 87]
[15 86]
[16 85]
[17 84]
[18 83]
[20 82]
[21 81]
[22 80]
[23 79]
[24 78]
[28 74]
[29 73]
[30 72]
[32 71]
[33 70]
[36 68]
[37 67]
[38 66]
[39 65]
[40 64]
[47 58]
[48 57]
[49 56]
[50 55]
[90 104]
[91 103]
[92 102]
[93 101]
[111 151]
[112 150]
[113 149]
[114 148]
[118 146]
[119 145]
[120 144]
[121 143]
[123 141]
[124 140]
[125 139]
[126 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
