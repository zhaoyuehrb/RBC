%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:25:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGAGUCCUUGAGGCUGAGGUUCUACUGCUGGCAGACAGAAAGGUGUGGUUGGCAUGGGGCAAUGCUUGAGGUAUCAGAUGCACUGGGAGGACCUGGAAGAGUACCAGGCCCUGACCUUCCUGACCAGAAAUGAAAUUCUGUGCAUCCAUGACA\
) } def
/len { sequence length } bind def

/coor [
[-36.81591034 149.40046692]
[-31.31225967 135.44660950]
[-19.77619171 125.86102295]
[-34.76926041 125.40505219]
[-46.22840881 135.95614624]
[-61.42701721 135.28015137]
[-71.41525269 124.29058075]
[-86.40832520 123.83460999]
[-101.40139008 123.37864685]
[-116.39446259 122.92267609]
[-125.12637329 125.80277252]
[-131.68591309 122.30247498]
[-146.66665649 121.54273224]
[-161.64739990 120.78299713]
[-176.62815857 120.02326202]
[-184.48603821 131.38818359]
[-196.84210205 137.32539368]
[-210.40885925 136.37432861]
[-221.63523865 128.89152527]
[-227.63604736 116.92910767]
[-242.59831238 115.86590576]
[-257.56060791 114.80271149]
[-272.52285767 113.73951721]
[-287.48513794 112.67632294]
[-302.44741821 111.61312866]
[-311.28887939 114.13698578]
[-317.70117188 110.37373352]
[-332.63882446 109.00752258]
[-347.57647705 107.64130402]
[-362.51412964 106.27508545]
[-377.45178223 104.90886688]
[-392.38943481 103.54265594]
[-407.32708740 102.17643738]
[-417.75701904 109.82962036]
[-430.20407104 108.34783173]
[-438.02709961 99.07321167]
[-452.93399048 97.40453339]
[-467.84088135 95.73585510]
[-480.03207397 105.79321289]
[-495.75598145 104.20121002]
[-505.68386841 91.90437317]
[-503.92572021 76.19818115]
[-491.52459717 66.40084076]
[-475.83786011 68.32495117]
[-466.17221069 80.82896423]
[-451.26528931 82.49763489]
[-436.35839844 84.16631317]
[-420.71572876 76.26728058]
[-405.96084595 87.23878479]
[-391.02319336 88.60500336]
[-376.08554077 89.97121429]
[-361.14788818 91.33743286]
[-346.21026611 92.70365143]
[-331.27261353 94.06987000]
[-316.33496094 95.43608093]
[-301.38421631 96.65085602]
[-286.42193604 97.71405029]
[-271.45965576 98.77724457]
[-256.49740601 99.84043884]
[-241.53512573 100.90363312]
[-226.57284546 101.96682739]
[-216.44126892 89.08487701]
[-200.47352600 84.71597290]
[-184.88577271 90.76545715]
[-175.86840820 105.04251099]
[-160.88766479 105.80224609]
[-145.90692139 106.56198883]
[-130.92617798 107.32172394]
[-115.93849182 107.92961121]
[-100.94542694 108.38557434]
[-85.95235443 108.84154510]
[-70.95928955 109.29750824]
[-60.32170105 98.93521118]
[-45.11009979 99.18404388]
[-34.31329346 110.41198730]
[-19.32022476 110.86795044]
[-10.43292809 105.82836914]
[0.41081083 109.66672516]
[15.23783588 107.39530945]
[30.06486130 105.12389374]
[44.89188385 102.85247803]
[59.71891022 100.58105469]
[74.54593658 98.30963898]
[89.37296295 96.03822327]
[88.13925171 76.67252350]
[111.06147003 60.52270508]
[124.10221863 53.11063766]
[137.14297485 45.69857407]
[150.18373108 38.28650665]
[163.22448730 30.87444305]
[176.26524353 23.46237755]
[186.11216736 2.47669625]
[208.55529785 2.96507120]
[220.77928162 -5.72827625]
[233.00326538 -14.42162418]
[245.22723389 -23.11497116]
[257.45123291 -31.80831909]
[258.51962280 -47.40935898]
[269.40341187 -58.63776779]
[284.96359253 -60.19183350]
[297.85311890 -51.33777237]
[301.98593140 -36.25619888]
[295.41067505 -22.06817818]
[281.23196411 -15.47285366]
[266.14456177 -19.58433723]
[253.92059326 -10.89099026]
[241.69660950 -2.19764280]
[229.47262573 6.49570465]
[217.24864197 15.18905163]
[217.86886597 22.41724586]
[215.89408875 29.46915436]
[211.52935791 35.43450165]
[205.29130554 39.52588272]
[197.94732666 41.18256378]
[190.42127991 40.14691162]
[183.67730713 36.50313187]
[170.63655090 43.91519928]
[157.59579468 51.32726288]
[144.55503845 58.73932648]
[131.51428223 66.15139008]
[118.47353363 73.56346130]
[117.79042053 81.03228760]
[132.41915894 77.71566772]
[140.09396362 90.60355377]
[130.20848083 101.88527679]
[116.42420959 95.96994019]
[115.74109650 103.43876648]
[127.22090149 113.09350586]
[138.70069885 122.74825287]
[150.18051147 132.40299988]
[165.90264893 130.79376221]
[178.10487366 140.83773804]
[179.54779053 156.57601929]
[169.37536621 168.67137146]
[153.62271118 169.94781494]
[141.63558960 159.64807129]
[140.52575684 143.88281250]
[129.04595947 134.22805786]
[117.56615448 124.57331085]
[106.08634949 114.91856384]
[91.64437866 110.86524963]
[76.81735229 113.13666534]
[61.99032593 115.40808105]
[47.16330338 117.67949677]
[32.33627701 119.95092010]
[17.50925255 122.22233582]
[2.68222761 124.49375153]
[15.29676151 132.61000061]
[22.45198250 145.79342651]
[22.38355637 160.79327393]
[15.10835743 173.91087341]
[2.42030120 181.91169739]
[-12.55199623 182.82292175]
[-26.11667252 176.41983032]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 76]
[4 75]
[7 72]
[8 71]
[9 70]
[10 69]
[12 68]
[13 67]
[14 66]
[15 65]
[20 61]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[27 55]
[28 54]
[29 53]
[30 52]
[31 51]
[32 50]
[33 49]
[36 47]
[37 46]
[38 45]
[78 147]
[79 146]
[80 145]
[81 144]
[82 143]
[83 142]
[84 141]
[86 121]
[87 120]
[88 119]
[89 118]
[90 117]
[91 116]
[93 109]
[94 108]
[95 107]
[96 106]
[97 105]
[127 140]
[128 139]
[129 138]
[130 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
