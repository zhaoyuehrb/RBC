%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:58:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGUCAUCUCAGUUCUUUUCUCACCUUGACUGCAAGAUGAAACUCCUUGUGCUAGCUGUGCUGCUCACAGUGGCCGCCGCCGACAGCGGCAUCAGCCCUCGGGCCGUGUGGCAGUUCCGCAAAAUGAUCAAGUGCG\
) } def
/len { sequence length } bind def

/coor [
[95.97498322 237.01033020]
[93.91766357 222.15208435]
[91.86035156 207.29383850]
[89.80303955 192.43559265]
[87.74571991 177.57734680]
[85.68840790 162.71911621]
[83.63109589 147.86087036]
[77.57359314 143.43856812]
[72.25563049 157.46423340]
[66.93767548 171.48989868]
[66.28794098 186.47583008]
[57.09217072 198.32647705]
[42.73704910 202.67738342]
[28.50939751 197.92617798]
[19.64909172 185.82267761]
[19.41927528 170.82443237]
[27.90458679 158.45513916]
[41.98096085 153.27020264]
[53.71977234 143.93209839]
[65.45858765 134.59399414]
[59.40108109 130.17169189]
[44.62237930 132.73876953]
[29.84367180 135.30584717]
[17.57124329 145.29074097]
[3.70758772 139.84571838]
[-11.07111740 142.41279602]
[-25.84982300 144.97985840]
[-40.62852859 147.54693604]
[-52.86421967 158.46572876]
[-68.35113525 153.07243347]
[-71.15765381 136.91522217]
[-58.39667892 126.61524963]
[-43.19560242 132.76823425]
[-28.41689873 130.20115662]
[-13.63819313 127.63408661]
[1.14051175 125.06700897]
[12.35586929 115.26573181]
[27.27659607 120.52714539]
[42.05530167 117.96006775]
[56.83400726 115.39299011]
[58.14344025 100.06155396]
[64.27893066 87.38017273]
[51.40471649 79.68246460]
[35.55839539 82.18717194]
[23.81783295 71.25379181]
[25.18938828 55.26947784]
[38.62092209 46.49602509]
[53.80890656 51.66367722]
[59.10242462 66.80825043]
[71.97663879 74.50595856]
[80.79314423 67.34495544]
[91.33610535 63.11922073]
[102.65782928 62.20858765]
[113.74065399 64.69490814]
[123.58837128 70.35469818]
[135.06674194 60.69825745]
[134.10375977 45.32363892]
[142.28286743 32.48014450]
[156.29069519 26.98058128]
[170.67861938 30.73895073]
[182.15699768 21.08250618]
[193.63537598 11.42606068]
[205.11373901 1.76961577]
[216.59211731 -7.88682938]
[221.19735718 -15.87949562]
[228.44618225 -17.62943268]
[240.14295959 -27.02014732]
[251.83972168 -36.41086197]
[263.53649902 -45.80157852]
[268.32379150 -53.68654633]
[275.61083984 -55.26981354]
[287.51986694 -64.38986206]
[299.42886353 -73.50991058]
[311.33789062 -82.62995148]
[323.24691772 -91.75000000]
[333.91415405 -102.29562378]
[343.17013550 -114.09929657]
[352.42611694 -125.90296936]
[361.68212891 -137.70663452]
[370.93811035 -149.51031494]
[370.44656372 -165.54583740]
[382.76992798 -175.81784058]
[398.45477295 -172.44654846]
[405.46899414 -158.01809692]
[398.43191528 -143.60078430]
[382.74179077 -140.25431824]
[373.48577881 -128.45065308]
[364.22979736 -116.64698029]
[354.97381592 -104.84330750]
[345.71783447 -93.03963470]
[360.27163696 -96.67099762]
[374.87872314 -93.26036835]
[386.31958008 -83.55948639]
[392.07247925 -69.70653534]
[390.86941528 -54.75485992]
[382.97558594 -41.99996948]
[370.13082886 -34.25318146]
[355.16632080 -33.22197723]
[341.38037109 -39.13364029]
[331.81158447 -50.68518066]
[328.56900024 -65.33050537]
[332.36697388 -79.84098053]
[320.45794678 -70.72093201]
[308.54891968 -61.60088730]
[296.63989258 -52.48084259]
[284.73089600 -43.36079407]
[272.92721558 -34.10480499]
[261.23043823 -24.71409035]
[249.53367615 -15.32337570]
[237.83689880 -5.93266106]
[226.24856567 3.59154487]
[214.77018738 13.24798965]
[203.29180908 22.90443420]
[191.81344604 32.56087875]
[180.33506775 42.21732330]
[181.57566833 57.03619385]
[173.75996399 69.89616394]
[159.70617676 75.75659943]
[144.72319031 72.17662811]
[133.24481201 81.83307648]
[139.85736084 101.03058624]
[135.64384460 121.94291687]
[120.74947357 138.62158203]
[98.48933411 145.80354309]
[100.54665375 160.66178894]
[102.60396576 175.52003479]
[104.66128540 190.37828064]
[106.71859741 205.23652649]
[108.77590942 220.09477234]
[110.83322906 234.95301819]
[124.17303467 243.11289978]
[129.09782410 257.95474243]
[123.28224945 272.47070312]
[109.47225189 279.80679321]
[94.18849182 276.49911499]
[84.64749146 264.10946655]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 130]
[2 129]
[3 128]
[4 127]
[5 126]
[6 125]
[7 124]
[21 40]
[22 39]
[23 38]
[25 36]
[26 35]
[27 34]
[28 33]
[42 50]
[43 49]
[55 120]
[56 119]
[60 115]
[61 114]
[62 113]
[63 112]
[64 111]
[66 110]
[67 109]
[68 108]
[69 107]
[71 106]
[72 105]
[73 104]
[74 103]
[75 102]
[76 90]
[77 89]
[78 88]
[79 87]
[80 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
