%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:26:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGCCUCCUCAGGCACUGUGUUUCUGCUCUGUGGGCUGCAGCCCCAGUGGGGUGGCAUGUCACAGAGGAAGGCCAGAGGGCCACCAGCCAUGCCAGGGGUGGGGCAUAGCCAGACUCAGGCCAAAGCACGGUUGCUGCCAGGCGCUGACAGGAAGA\
) } def
/len { sequence length } bind def

/coor [
[140.31199646 434.29064941]
[152.69538879 425.36798096]
[150.02542114 410.60751343]
[147.20884705 395.87432861]
[144.24594116 381.16986084]
[141.28302002 366.46539307]
[138.32011414 351.76092529]
[126.67107391 346.18008423]
[120.28289795 334.72973633]
[121.69387817 321.49798584]
[130.61035156 311.35937500]
[127.94037628 296.59890747]
[125.27040863 281.83843994]
[112.92357635 273.58670044]
[110.00557709 258.65554810]
[118.74448395 245.76098633]
[116.07451630 231.00051880]
[113.40454865 216.24006653]
[110.73457336 201.47959900]
[108.06460571 186.71913147]
[105.39463806 171.95867920]
[102.72467041 157.19821167]
[100.05470276 142.43774414]
[97.38473511 127.67728424]
[87.17283630 124.66445923]
[78.84233856 118.03400421]
[73.61512756 108.75843048]
[72.25788116 98.19821930]
[58.10667801 93.22393036]
[43.95547867 88.24964142]
[29.80427933 83.27535248]
[15.65308094 78.30106354]
[1.50188124 73.32677460]
[-12.64931774 68.35248566]
[-26.80051804 63.37819672]
[-40.91650009 69.96430206]
[-55.19696808 64.71807861]
[-61.38882065 51.22005844]
[-75.54002380 46.24576950]
[-89.69122314 41.27148056]
[-105.27632904 43.99454880]
[-114.71756744 32.47446823]
[-128.86875916 27.50017929]
[-143.01995850 22.52589035]
[-157.17115784 17.55160141]
[-171.32235718 12.57731247]
[-188.27029419 13.02894783]
[-193.39593506 -3.13162637]
[-179.28584290 -12.53064632]
[-166.34806824 -1.57388723]
[-152.19686890 3.40040183]
[-138.04566956 8.37469101]
[-123.89447784 13.34897995]
[-109.74327850 18.32326889]
[-95.17035675 15.24440575]
[-84.71693420 27.12028122]
[-70.56573486 32.09457016]
[-56.41453171 37.06885910]
[-43.13871384 30.41392517]
[-28.71652222 35.25697327]
[-21.82622910 49.22699738]
[-7.67502880 54.20128632]
[6.47617054 59.17557526]
[20.62737083 64.14986420]
[34.77856827 69.12415314]
[48.92976761 74.09844208]
[63.08096695 79.07273102]
[77.23217010 84.04701996]
[84.20915985 77.11941528]
[93.16126251 73.05369568]
[102.96875000 72.35839844]
[112.40489960 75.12049103]
[122.47138214 63.99996567]
[132.53785706 52.87944031]
[142.60432434 41.75891495]
[146.12940979 26.33541679]
[160.40686035 22.09231186]
[170.47332764 10.97178745]
[180.53981018 -0.14873633]
[174.99586487 -19.47762680]
[185.02203369 -38.85370255]
[207.21926880 -46.64817047]
[214.89080811 -59.53799438]
[222.56233215 -72.42781830]
[230.23387146 -85.31764984]
[237.90539551 -98.20747375]
[238.38066101 -104.89042664]
[241.69212341 -109.59346771]
[246.14688110 -111.44860840]
[254.32479858 -124.02325439]
[250.80436707 -139.43046570]
[259.28024292 -152.76969910]
[274.72381592 -156.12704468]
[287.97268677 -147.51062012]
[291.16656494 -132.03242493]
[282.41055298 -118.87538147]
[266.89944458 -115.84532928]
[258.72152710 -103.27069092]
[250.79522705 -90.53594208]
[243.12370300 -77.64611053]
[235.45216370 -64.75628662]
[227.78062439 -51.86646271]
[220.10910034 -38.97663879]
[230.06452942 -27.75658798]
[243.77578735 -33.83946609]
[257.48703003 -39.92234802]
[269.51339722 -51.87237930]
[284.32562256 -43.62411880]
[280.50015259 -27.10739899]
[263.56991577 -26.21109009]
[249.85865784 -20.12821007]
[236.14739990 -14.04533005]
[230.59158325 1.27453995]
[218.90278625 11.32895565]
[204.64366150 14.17680359]
[191.66033936 9.91773987]
[181.59385681 21.03826332]
[171.52738953 32.15878677]
[168.72232056 46.78687286]
[153.72485352 51.82539368]
[143.65838623 62.94591522]
[133.59190369 74.06644440]
[123.52542877 85.18696594]
[126.73038483 107.63925934]
[112.14519501 125.00731659]
[114.81516266 139.76777649]
[117.48513794 154.52824402]
[120.15510559 169.28871155]
[122.82507324 184.04916382]
[125.49504089 198.80963135]
[128.16500854 213.57009888]
[130.83497620 228.33055115]
[133.50494385 243.09101868]
[146.20719910 252.10714722]
[148.70465088 267.11437988]
[140.03086853 279.16848755]
[142.70083618 293.92895508]
[145.37080383 308.68942261]
[159.91168213 318.36767578]
[162.92189026 335.23135376]
[153.02458191 348.79803467]
[155.98748779 363.50247192]
[158.95039368 378.20693970]
[161.91331482 392.91140747]
[166.70039368 400.75653076]
[164.78588867 407.93753052]
[167.45585632 422.69799805]
[182.18028259 426.71722412]
[193.69700623 436.73361206]
[199.71939087 450.75836182]
[199.05169678 466.00686646]
[191.82646179 479.45150757]
[179.47830200 488.42288208]
[164.45892334 491.13967896]
[149.75044250 487.06250000]
[138.27323914 477.00085449]
[132.30612183 462.95251465]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 147]
[3 146]
[4 144]
[5 143]
[6 142]
[7 141]
[11 138]
[12 137]
[13 136]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 127]
[23 126]
[24 125]
[28 68]
[29 67]
[30 66]
[31 65]
[32 64]
[33 63]
[34 62]
[35 61]
[38 58]
[39 57]
[40 56]
[42 54]
[43 53]
[44 52]
[45 51]
[46 50]
[72 123]
[73 122]
[74 121]
[75 120]
[77 118]
[78 117]
[79 116]
[82 103]
[83 102]
[84 101]
[85 100]
[86 99]
[89 98]
[90 97]
[104 112]
[105 111]
[106 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
