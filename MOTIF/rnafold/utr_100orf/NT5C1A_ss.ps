%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:57:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAACCUGGGCAGCCCCGGGAGCCCCAGGAGCCCCGCGAGCCCGGGCCAGGAGCGGAGACCGCUGCGGCCCCGGUCUGGGAGGAAGCCAAGAUUUUCU\
) } def
/len { sequence length } bind def

/coor [
[25.72304344 235.00508118]
[18.01021957 231.90660095]
[11.16202450 227.21607971]
[-0.60688901 236.51622009]
[-2.58714795 251.96667480]
[-14.65498447 261.23068237]
[-29.37242126 259.24758911]
[-41.14133453 268.54772949]
[-52.91024780 277.84786987]
[-64.67916107 287.14801025]
[-76.44807434 296.44818115]
[-88.21698761 305.74832153]
[-93.76995087 321.17868042]
[-109.95528412 323.81817627]
[-120.12290955 310.95150757]
[-113.81324768 295.81478882]
[-97.51713562 293.97940063]
[-85.74822235 284.67926025]
[-73.97930908 275.37911987]
[-62.21039200 266.07897949]
[-50.44147873 256.77880859]
[-38.67256546 247.47868347]
[-37.19961166 232.70146179]
[-25.39674568 223.10214233]
[-9.90703201 224.74731445]
[1.86188173 215.44715881]
[-2.08042979 192.91648865]
[7.62871790 172.08518982]
[27.60817146 160.50529480]
[50.72872543 162.45417786]
[59.08650970 149.99835205]
[55.10334396 133.74185181]
[64.21673584 119.30493164]
[81.26262665 115.77215576]
[89.22899628 103.06243134]
[96.99674225 90.23036194]
[104.56398010 77.27902985]
[106.24229431 68.11519623]
[112.57333374 64.04783630]
[120.53969574 51.33811188]
[121.31291962 35.53581238]
[134.62818909 28.86101913]
[142.59455872 16.15129852]
[150.56092834 3.44157839]
[151.33413696 -12.36072159]
[164.64941406 -19.03551483]
[172.61578369 -31.74523544]
[180.58215332 -44.45495605]
[188.54850769 -57.16467667]
[196.51487732 -69.87439728]
[191.99612427 -82.67501831]
[195.67692566 -95.53784943]
[205.97744751 -103.76599121]
[218.94490051 -104.49201965]
[227.30268860 -116.94783783]
[235.66046143 -129.40365601]
[244.01824951 -141.85948181]
[252.37603760 -154.31529236]
[256.18057251 -170.83685303]
[273.10964966 -171.75462341]
[278.67800903 -155.74121094]
[264.83184814 -145.95750427]
[256.47406006 -133.50169373]
[248.11628723 -121.04587555]
[239.75849915 -108.59004974]
[231.40072632 -96.13423157]
[235.38388062 -79.87773132]
[226.27049255 -65.44081116]
[209.22459412 -61.90803146]
[201.25823975 -49.19831085]
[193.29187012 -36.48859024]
[185.32550049 -23.77886963]
[177.35913086 -11.06914806]
[177.15571594 3.82406807]
[163.27064514 11.40794563]
[155.30427551 24.11766624]
[147.33790588 36.82738495]
[147.13449097 51.72060394]
[133.24942017 59.30448151]
[125.28305054 72.01419830]
[117.51530457 84.84627533]
[109.94806671 97.79759979]
[108.88883209 105.94457245]
[101.93871307 111.02880096]
[93.97235107 123.73851776]
[98.49109650 136.53913879]
[94.81030273 149.40197754]
[84.50978088 157.63011169]
[71.54232788 158.35614014]
[63.18454361 170.81196594]
[68.42903900 177.43603516]
[72.10769653 185.02932739]
[74.04996490 193.22845459]
[74.16828156 201.64225769]
[72.46195221 209.87040710]
[69.01699066 217.52250671]
[64.00179291 224.23658752]
[57.65888977 229.69621277]
[50.29323578 233.64541626]
[42.25755692 235.90071106]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 26]
[4 25]
[7 22]
[8 21]
[9 20]
[10 19]
[11 18]
[12 17]
[30 90]
[31 89]
[34 85]
[35 84]
[36 82]
[37 81]
[39 80]
[40 79]
[42 77]
[43 76]
[44 75]
[46 73]
[47 72]
[48 71]
[49 70]
[50 69]
[54 66]
[55 65]
[56 64]
[57 63]
[58 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
