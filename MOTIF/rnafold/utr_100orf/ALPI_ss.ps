%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:22:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCUCCCCUGAUUUAAACCCAGGCAGCCUGCGCUGCAGCCGGUUCCUGGUGUCCCCACUUCGCCUCCCUCCUGCUGCCCCCAAGACAUGCAGGGGCCCUGGGUGCUGCUGCUGCUGGGCCUGAGGCUACAGCUCUCCCUGGGCGUCAUCCCAGCUGAGGAGGAGAACCCGGCCUUCUGGAACCGCC\
) } def
/len { sequence length } bind def

/coor [
[136.32713318 264.87457275]
[141.82252502 257.17105103]
[137.40119934 242.83746338]
[126.25621796 232.95623779]
[129.58210754 217.48855591]
[125.16077423 203.15496826]
[120.73944855 188.82138062]
[116.31811523 174.48779297]
[111.77781677 160.19143677]
[107.11885834 145.93330383]
[102.45989227 131.67518616]
[92.81324768 131.55957031]
[83.46897888 128.51983643]
[75.30851746 122.73100281]
[69.13420105 114.63198853]
[65.59092712 104.89349365]
[65.10008240 94.36290741]
[67.81233978 83.99066925]
[73.58448029 74.74449921]
[60.35198593 67.68041992]
[47.11949921 60.61634064]
[33.88700867 53.55226517]
[20.65451813 46.48818588]
[7.42202711 39.42410660]
[-5.81046295 32.36002731]
[-19.72428894 38.97150421]
[-34.68832016 36.15526962]
[-45.00271225 25.19729042]
[-46.86451721 10.44358921]
[-60.09700775 3.37951112]
[-73.32949829 -3.68456745]
[-86.56198883 -10.74864578]
[-99.79447937 -17.81272507]
[-113.02696991 -24.87680244]
[-126.43145752 -31.60879135]
[-139.99961853 -38.00450134]
[-153.82176208 -43.83102417]
[-167.87402344 -49.07829666]
[-181.92628479 -54.32556915]
[-195.97854614 -59.57283783]
[-210.03082275 -64.82011414]
[-225.66571045 -62.39922333]
[-234.88218689 -74.09989166]
[-248.93446350 -79.34716034]
[-259.97689819 -68.86737061]
[-274.41555786 -64.24005890]
[-289.37026978 -66.33203125]
[-301.88229370 -74.67530060]
[-309.49966431 -87.57047272]
[-310.75759888 -102.43260956]
[-324.80984497 -107.67987823]
[-338.86212158 -112.92715454]
[-352.91439819 -118.17442322]
[-365.20623779 -108.85167694]
[-380.58883667 -107.67715454]
[-394.15362549 -115.02564240]
[-401.57211304 -128.55226135]
[-400.47714233 -143.94070435]
[-391.21804810 -156.28060913]
[-376.74942017 -161.63432312]
[-361.68814087 -158.29350281]
[-350.84017944 -147.32420349]
[-347.66711426 -132.22668457]
[-333.61483765 -126.97941589]
[-319.56259155 -121.73214722]
[-305.51031494 -116.48487091]
[-294.81915283 -126.88507843]
[-280.61419678 -131.63156128]
[-265.69598389 -129.73208618]
[-253.03022766 -121.51024628]
[-245.15824890 -108.55189514]
[-243.68717957 -93.39942932]
[-229.63491821 -88.15215302]
[-215.00514221 -90.94836426]
[-204.78353882 -78.87237549]
[-190.73127747 -73.62510681]
[-176.67901611 -68.37783051]
[-162.62675476 -63.13056183]
[-148.57447815 -57.88328934]
[-152.22503662 -72.43228912]
[-143.26266479 -84.46042633]
[-128.27732849 -85.12350464]
[-118.28760529 -73.93398285]
[-120.63884735 -59.11940765]
[-133.60389709 -51.57265854]
[-120.03574371 -45.17694855]
[-116.59632874 -46.03076172]
[-112.57103729 -45.24923325]
[-108.73844910 -42.57466888]
[-105.96289062 -38.10929108]
[-92.73040009 -31.04521370]
[-79.49790955 -23.98113632]
[-66.26541901 -16.91705704]
[-53.03292847 -9.85297871]
[-39.80043793 -2.78890061]
[-26.50573730 -9.45139885]
[-11.66156387 -6.97864103]
[-0.99508435 3.88780308]
[1.25361538 19.12753868]
[14.48610592 26.19161606]
[27.71859550 33.25569534]
[40.95108414 40.31977463]
[54.18357468 47.38385391]
[67.41606903 54.44792938]
[80.64855957 61.51200867]
[95.01840210 57.20996094]
[102.19220734 44.03663635]
[101.24267578 27.66500282]
[115.09291840 18.88419151]
[129.49501038 26.72714806]
[129.63330078 43.12571335]
[115.36553192 51.21044540]
[108.19171906 64.38377380]
[121.35572815 73.34056091]
[128.66146851 86.29273987]
[143.33883667 83.19845581]
[158.01622009 80.10417175]
[172.69360352 77.00988770]
[187.37097168 73.91560364]
[202.04835510 70.82132721]
[209.74150085 60.45321274]
[222.04382324 58.18611908]
[232.25067139 64.70025635]
[246.97746277 61.85035706]
[261.70425415 59.00046158]
[273.78302002 48.78215408]
[287.74850464 53.96043015]
[302.47528076 51.11053085]
[317.20205688 48.26063538]
[325.05047607 43.54950714]
[332.19720459 45.48789597]
[346.96929932 42.88317490]
[361.74142456 40.27845383]
[370.59994507 27.19020844]
[386.13424683 24.28142166]
[399.12811279 33.27782440]
[401.87249756 48.84201050]
[392.73919678 61.74002457]
[377.14688110 64.31970215]
[364.34616089 55.05056763]
[349.57403564 57.65529251]
[334.80191040 60.26001358]
[320.05197144 62.98741913]
[305.32516479 65.83731079]
[290.59838867 68.68721008]
[279.57296753 78.70167542]
[264.55413818 73.72724152]
[249.82736206 76.57714081]
[235.10057068 79.42703247]
[222.49768066 91.62749481]
[205.14263916 85.49870300]
[190.46525574 88.59298706]
[175.78788757 91.68726349]
[161.11050415 94.78154755]
[146.43312073 97.87583160]
[131.75575256 100.97011566]
[129.74240112 111.16951752]
[124.54428864 120.17291260]
[116.71801758 127.01622772]
[121.37697601 141.27435303]
[126.03594208 155.53247070]
[131.68640137 162.73417664]
[130.65171814 170.06645203]
[135.07304382 184.40005493]
[139.49436951 198.73364258]
[143.91569519 213.06723022]
[155.37692261 223.97369385]
[151.73480225 238.41613770]
[156.15612793 252.74972534]
[172.73292542 266.31069946]
[167.36289978 286.22836304]
[172.49319458 300.32376099]
[177.62350464 314.41915894]
[182.98738098 328.42730713]
[188.58335876 342.34439087]
[201.81605530 352.03085327]
[199.77494812 368.30249023]
[184.55973816 374.42041016]
[171.82252502 364.09106445]
[174.66627502 347.94036865]
[169.07029724 334.02328491]
[165.08961487 331.35348511]
[162.75430298 326.14627075]
[163.52810669 319.54943848]
[158.39781189 305.45407104]
[153.26750183 291.35867310]
[144.68576050 288.95614624]
[138.07893372 282.77209473]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 169]
[3 168]
[5 166]
[6 165]
[7 164]
[8 163]
[9 161]
[10 160]
[11 159]
[19 105]
[20 104]
[21 103]
[22 102]
[23 101]
[24 100]
[25 99]
[29 95]
[30 94]
[31 93]
[32 92]
[33 91]
[34 90]
[35 86]
[36 85]
[37 79]
[38 78]
[39 77]
[40 76]
[41 75]
[43 73]
[44 72]
[50 66]
[51 65]
[52 64]
[53 63]
[106 113]
[107 112]
[115 156]
[116 155]
[117 154]
[118 153]
[119 152]
[120 151]
[123 149]
[124 148]
[125 147]
[127 145]
[128 144]
[129 143]
[131 142]
[132 141]
[133 140]
[171 186]
[172 185]
[173 184]
[174 181]
[175 180]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
