%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:53:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCUCUUUGGCUUCAGAAAUUACCAAGAAAGCCUGGACCCCGGGUGAAACGGAGAAAUGGACACAAGUCCCCUGUGUUUCUCCAUUCUGUUGGUUUUAUGCAUCUUUAUCCAAUCAAGUGCCCUUGGACAAAGCCUGAAACCAGAGCCAUUUGGAA\
) } def
/len { sequence length } bind def

/coor [
[87.93588257 294.25207520]
[80.25835419 279.76113892]
[89.19717407 266.01232910]
[89.49540710 251.01530457]
[89.79364014 236.01826477]
[77.82842255 227.18812561]
[73.30357361 212.83576965]
[78.15425110 198.40232849]
[90.71891785 189.48968506]
[91.01715088 174.49264526]
[91.31538391 159.49560547]
[91.61361694 144.49858093]
[91.91184235 129.50154114]
[92.21007538 114.50450134]
[84.79634094 101.46469879]
[71.75653839 94.05096436]
[58.71673203 86.63722229]
[45.67692947 79.22348785]
[32.63712311 71.80974579]
[43.16329956 82.49617004]
[48.23586655 96.61244202]
[46.91908264 111.55453491]
[39.45586014 124.56607819]
[27.22293854 133.24684143]
[12.47692204 135.99548340]
[-2.06199169 132.30494690]
[-13.71181107 122.85604858]
[-20.32349396 109.39181519]
[-20.67738533 94.39598846]
[-14.70820141 80.63485718]
[-3.51707745 70.64692688]
[10.82851219 66.27490997]
[-4.16852331 66.57314301]
[-19.16555786 66.87137604]
[-34.16259384 67.16960907]
[-49.15962982 67.46784210]
[-64.15666199 67.76607513]
[-79.87245178 74.12613678]
[-90.33451843 60.78517151]
[-80.41110992 47.03881454]
[-64.45489502 52.76904297]
[-49.45785904 52.47080994]
[-34.46082687 52.17257690]
[-19.46379089 51.87434387]
[-4.46675587 51.57611084]
[10.53027916 51.27787781]
[14.49342537 44.91050339]
[-0.06739522 41.30738068]
[-1.14013875 26.34578896]
[12.75769329 20.70218468]
[22.41971970 32.17575073]
[26.38286591 25.80837631]
[20.02857971 12.22077084]
[13.67429161 -1.36683464]
[7.32000446 -14.95444107]
[0.96571749 -28.54204559]
[-5.38856983 -42.12965393]
[-11.74285698 -55.71725845]
[-18.09714317 -69.30486298]
[-25.11872673 -82.55995178]
[-32.79026031 -95.44977570]
[-40.46179199 -108.33959961]
[-48.13332367 -121.22943115]
[-62.69935989 -128.76353455]
[-63.18725967 -145.15541077]
[-49.09511566 -153.54252625]
[-34.91971588 -145.29690552]
[-35.24349976 -128.90095520]
[-27.57196617 -116.01113892]
[-19.90043449 -103.12130737]
[-12.22890186 -90.23148346]
[-5.77945900 -103.77418518]
[8.78226566 -107.37365723]
[20.79858398 -98.39545441]
[21.47478294 -83.41069794]
[10.31595612 -73.38670349]
[-4.50953817 -75.65914917]
[1.84474897 -62.07154465]
[8.19903660 -48.48394012]
[14.55332375 -34.89633560]
[20.90760994 -21.30872726]
[27.26189804 -7.72112179]
[33.61618423 5.86648417]
[39.97047043 19.45409012]
[47.82544327 42.20373917]
[40.05086136 58.76994324]
[53.09066772 66.18368530]
[66.13047028 73.59741974]
[79.17027283 81.01115417]
[92.21007538 88.42489624]
[103.64852142 83.12480927]
[117.51548004 89.19909668]
[132.51251221 88.90086365]
[147.50955200 88.60263824]
[162.50659180 88.30440521]
[177.50361633 88.00617218]
[192.50065613 87.70793915]
[207.49769592 87.40970612]
[222.49472046 87.11147308]
[236.13833618 79.10131836]
[249.01692200 86.58404541]
[264.01397705 86.28581238]
[268.57150269 83.52341461]
[273.26083374 82.88741302]
[277.23696899 84.06359100]
[279.90780640 86.44383240]
[294.89593506 87.04017639]
[309.88409424 87.63652802]
[323.98095703 80.45398712]
[336.39056396 88.69116211]
[351.37869263 89.28751373]
[366.36685181 89.88385773]
[381.35498047 90.48020935]
[396.34310913 91.07655334]
[404.47735596 78.04851532]
[418.04336548 70.84719086]
[433.39193726 71.40969849]
[446.39443970 79.58473206]
[453.55319214 93.17324066]
[452.94256592 108.51998901]
[444.72683716 121.49678040]
[431.11593628 128.61291504]
[415.77117920 127.95420074]
[402.82022095 119.69782257]
[395.74676514 106.06469727]
[380.75863647 105.46835327]
[365.77047729 104.87200165]
[350.78234863 104.27565765]
[335.79421997 103.67930603]
[322.76937866 110.90449524]
[309.28775024 102.62466431]
[294.29959106 102.02832031]
[279.31146240 101.43197632]
[264.31219482 101.28285217]
[249.31515503 101.58108521]
[236.74423218 109.56990051]
[222.79295349 102.10850525]
[207.79592896 102.40673828]
[192.79888916 102.70497131]
[177.80184937 103.00320435]
[162.80482483 103.30143738]
[147.80778503 103.59967041]
[132.81074524 103.89790344]
[117.81371307 104.19613647]
[107.20711517 114.80273438]
[106.90888214 129.79977417]
[106.61064911 144.79681396]
[106.31241608 159.79383850]
[106.01418304 174.79087830]
[105.71595001 189.78791809]
[117.91634369 199.19305420]
[122.18936157 213.80792236]
[117.09749603 227.96902466]
[104.79067993 236.31649780]
[104.49244690 251.31353760]
[104.19421387 266.31057739]
[112.57936859 280.40386963]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 156]
[4 155]
[5 154]
[9 150]
[10 149]
[11 148]
[12 147]
[13 146]
[14 145]
[15 90]
[16 89]
[17 88]
[18 87]
[19 86]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[37 41]
[52 84]
[53 83]
[54 82]
[55 81]
[56 80]
[57 79]
[58 78]
[59 77]
[60 71]
[61 70]
[62 69]
[63 68]
[92 144]
[93 143]
[94 142]
[95 141]
[96 140]
[97 139]
[98 138]
[99 137]
[101 135]
[102 134]
[106 133]
[107 132]
[108 131]
[110 129]
[111 128]
[112 127]
[113 126]
[114 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
