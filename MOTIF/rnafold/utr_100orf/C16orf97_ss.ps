%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:53:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGCCUCAUGCUAAGAUGUUGAAAAACAUACUCUUAUCCCCAAUUUACAAAUGAAGAAAUGGAAGUCAAGACUUUUCCCAAGGCCACCAAACUGGUUAAGUGGCAAGUACUUAAGGCUCCCAAGUUCAGCAAUGUUUCUAAUAGACUUCU\
) } def
/len { sequence length } bind def

/coor [
[102.80300140 189.71534729]
[90.33348846 189.23709106]
[78.05080414 187.03410339]
[73.18031311 201.22135925]
[68.30982208 215.40861511]
[74.03575134 230.39505005]
[65.76514435 244.14192200]
[49.84249878 246.10380554]
[38.48231125 234.77572632]
[40.39914322 218.84759521]
[54.12256622 210.53811646]
[58.99305725 196.35086060]
[63.86354828 182.16360474]
[44.86880112 170.83256531]
[29.22155380 155.20065308]
[16.66405678 163.40487671]
[4.19201231 171.73843384]
[-8.19324684 180.20042419]
[-20.57850647 188.66242981]
[-32.96376419 197.12442017]
[-45.34902573 205.58641052]
[-51.95820618 220.59477234]
[-68.28757477 222.10600281]
[-77.53887177 208.56549072]
[-70.19515991 193.90255737]
[-53.81101990 193.20115662]
[-41.42575836 184.73916626]
[-29.04050064 176.27716064]
[-16.65524101 167.81517029]
[-4.26998234 159.35317993]
[-0.49752751 152.94244385]
[8.45983410 150.84738159]
[21.01733208 142.64315796]
[14.76421547 128.13471985]
[11.15170288 112.75465393]
[10.29170895 96.97945404]
[12.21087646 81.29783630]
[16.84975052 66.19561005]
[24.06461716 52.14063644]
[33.63195801 39.56834793]
[45.25538254 28.86823463]
[58.57479477 20.37177849]
[73.17755890 14.34220505]
[88.61128235 10.96630859]
[104.39782715 10.34867382]
[120.04812622 12.50843620]
[135.07733154 17.37868500]
[149.01985168 24.80854225]
[158.23304749 12.97143364]
[167.44622803 1.13432634]
[164.35452271 -17.50662613]
[175.62458801 -32.27569199]
[193.78849792 -34.14914322]
[202.50465393 -46.35687256]
[211.22080994 -58.56460190]
[219.93695068 -70.77233124]
[215.71562195 -81.96656036]
[217.43434143 -93.68462372]
[224.54656982 -103.00389099]
[235.17546082 -107.65726471]
[246.60781860 -106.58417511]
[255.82101440 -118.42128754]
[265.03421021 -130.25839233]
[267.40463257 -145.90101624]
[281.32769775 -151.19227600]
[290.54089355 -163.02937317]
[299.75408936 -174.86648560]
[308.96725464 -186.70359802]
[317.93386841 -198.72857666]
[326.64999390 -210.93630981]
[335.36614990 -223.14404297]
[343.95568848 -235.44119263]
[352.41769409 -247.82646179]
[360.87966919 -260.21170044]
[369.34167480 -272.59698486]
[366.70272827 -283.23089600]
[370.31192017 -293.34213257]
[378.73513794 -299.63739014]
[389.01452637 -300.21008301]
[397.98110962 -312.23504639]
[406.94772339 -324.26004028]
[408.33114624 -344.32928467]
[426.31661987 -351.32833862]
[434.77859497 -363.71359253]
[443.24060059 -376.09884644]
[451.70260620 -388.48413086]
[460.16458130 -400.86938477]
[456.99572754 -416.35272217]
[465.77297974 -429.49560547]
[481.28897095 -432.50057983]
[494.33831787 -423.58486938]
[497.17907715 -408.03799438]
[488.12588501 -395.08361816]
[472.54983521 -392.40737915]
[464.08786011 -380.02212524]
[455.62585449 -367.63687134]
[447.16387939 -355.25161743]
[438.70187378 -342.86633301]
[441.49792480 -332.95794678]
[438.27877808 -322.94708252]
[429.88729858 -316.25033569]
[418.97268677 -315.29345703]
[410.00610352 -303.26846313]
[401.03952026 -291.24346924]
[400.25955200 -271.95993042]
[381.72692871 -264.13497925]
[373.26495361 -251.74972534]
[364.80294800 -239.36445618]
[356.34094238 -226.97920227]
[355.15692139 -219.63571167]
[347.57388306 -214.42788696]
[338.85772705 -202.22016907]
[330.14157104 -190.01243591]
[330.04479980 -185.17994690]
[326.86849976 -180.37156677]
[320.80438232 -177.49040222]
[311.59118652 -165.65330505]
[302.37799072 -153.81619263]
[293.16479492 -141.97908020]
[291.45336914 -127.18312836]
[276.87130737 -121.04520416]
[267.65811157 -109.20809174]
[258.44491577 -97.37098694]
[261.83218384 -79.42762756]
[250.89286804 -64.41194153]
[232.14468384 -62.05618286]
[223.42852783 -49.84844971]
[214.71238708 -37.64072037]
[205.99623108 -25.43298912]
[210.28677368 -14.78208542]
[208.85966492 -3.26729393]
[201.95719910 6.20838833]
[191.21669006 11.19923401]
[179.28334045 10.34751701]
[170.07014465 22.18462563]
[160.85696411 34.02173233]
[169.41921997 43.09945297]
[176.63978577 53.27693558]
[182.37907410 64.35746002]
[186.52615356 76.12687683]
[189.00088501 88.35771179]
[189.75544739 100.81355286]
[188.77522278 113.25367737]
[186.07919312 125.43763733]
[181.71945190 137.12994385]
[175.78024292 148.10462952]
[168.37640381 158.14955139]
[159.65098572 167.07057190]
[149.77265930 174.69526672]
[138.93234253 180.87629700]
[127.33954620 185.49415588]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 13]
[4 12]
[5 11]
[15 33]
[16 32]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[48 136]
[49 135]
[50 134]
[53 129]
[54 128]
[55 127]
[56 126]
[61 123]
[62 122]
[63 121]
[65 119]
[66 118]
[67 117]
[68 116]
[69 113]
[70 112]
[71 111]
[72 109]
[73 108]
[74 107]
[75 106]
[79 104]
[80 103]
[81 102]
[83 98]
[84 97]
[85 96]
[86 95]
[87 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
