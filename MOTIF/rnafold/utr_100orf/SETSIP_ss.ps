%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGCCUGCUUCCAGACGAGCAAGGAGACUCAUGGUCUGGUUCUUGGACUUCCCUAACAGCAUGGCCCCUAAACGCCAGUCUCCACUCCCACUUCAAAAGAAGAAACCAAGACCACCUCCUGCUCUGGGAC\
) } def
/len { sequence length } bind def

/coor [
[7.55030537 520.06140137]
[-0.46269101 533.10174561]
[-13.62391853 540.91461182]
[-28.90902328 541.70465088]
[-42.80560303 535.29034424]
[-52.12031937 523.14556885]
[-54.71272278 508.06121826]
[-49.98709869 493.50350952]
[-39.02935791 482.81768799]
[-24.35751152 478.45932007]
[-21.51874352 463.73037720]
[-18.67997551 449.00143433]
[-15.84120560 434.27252197]
[-13.00243759 419.54357910]
[-10.16366863 404.81466675]
[-7.32490015 390.08572388]
[-9.06931782 386.91564941]
[-9.30630684 382.72015381]
[-7.56084681 378.24508667]
[-3.72218704 374.42398071]
[0.16009858 359.93508911]
[4.04238415 345.44619751]
[2.72203135 338.09967041]
[8.19330120 330.66085815]
[12.41928959 316.26846313]
[16.64527702 301.87606812]
[20.87126541 287.48367310]
[15.57287502 281.36849976]
[13.14977551 273.54940796]
[14.08292961 265.32150269]
[18.29065323 258.07983398]
[25.12968063 253.08285522]
[33.49250793 251.23396301]
[39.06744766 237.30844116]
[44.64238358 223.38291931]
[50.21731949 209.45741272]
[55.79225540 195.53189087]
[61.36719513 181.60636902]
[66.77602386 167.61549377]
[72.01799011 153.56124878]
[77.25994873 139.50700378]
[82.50191498 125.45275879]
[68.55986023 116.77741241]
[59.61703110 100.47855377]
[59.68749619 79.70037079]
[70.77365112 59.57397079]
[60.42247009 48.71796036]
[44.48272324 46.90024567]
[36.08805084 33.22877502]
[41.67812729 18.19113731]
[56.96472168 13.32291412]
[70.22126770 22.35859299]
[71.27848053 38.36677551]
[81.62966156 49.22278595]
[88.82585907 47.10979080]
[80.35936737 34.72760773]
[89.51938629 22.84930038]
[103.64685822 27.89057159]
[103.21825409 42.88380051]
[110.41445160 40.77080917]
[113.25321960 26.04187775]
[111.79882812 16.92291641]
[116.33879089 10.99805927]
[119.52726746 -3.65914345]
[122.71574402 -18.31634712]
[125.90422821 -32.97354889]
[115.47616577 -44.46420670]
[113.82720184 -59.89341736]
[121.59139252 -73.32833862]
[135.78324890 -79.60295868]
[150.94570923 -76.30456543]
[161.24850464 -64.70146179]
[162.72999573 -49.25526810]
[154.82051086 -35.90536880]
[140.56143188 -29.78507042]
[137.37295532 -15.12786674]
[134.18446350 -0.47066417]
[130.99598694 14.18653870]
[127.98215485 28.88064575]
[125.14338684 43.60957718]
[130.12194824 49.21885300]
[139.67462158 37.65397644]
[149.22729492 26.08910370]
[154.75079346 12.14309978]
[168.69056702 6.60389805]
[182.27954102 12.95523930]
[186.97129822 27.20260811]
[179.81504822 40.38548279]
[165.31340027 44.21310043]
[152.69622803 52.32525253]
[140.07905579 60.43740463]
[145.05761719 66.04667664]
[160.01939392 64.97659302]
[174.98117065 63.90650177]
[189.94296265 62.83641434]
[203.21322632 53.20147324]
[218.08029175 60.12263489]
[219.25018311 76.47999573]
[205.51943970 85.44651031]
[191.01304626 77.79819489]
[176.05126953 78.86828613]
[161.08947754 79.93836975]
[146.12770081 81.00846100]
[132.24847412 124.31149292]
[96.55615997 130.69471741]
[91.31419373 144.74896240]
[86.07223511 158.80320740]
[80.83026886 172.85745239]
[80.75233459 182.09133911]
[75.29270935 187.18130493]
[69.71777344 201.10682678]
[64.14283752 215.03234863]
[58.56790161 228.95785522]
[52.99296570 242.88337708]
[47.41802979 256.80889893]
[52.43726349 278.59606934]
[35.26366043 291.70965576]
[31.03767204 306.10205078]
[26.81168365 320.49444580]
[22.58569527 334.88684082]
[18.53127098 349.32849121]
[14.64898586 363.81738281]
[10.76670074 378.30627441]
[7.40403032 392.92449951]
[4.56526184 407.65341187]
[1.72649324 422.38235474]
[-1.11227548 437.11129761]
[-3.95104408 451.84020996]
[-6.78981304 466.56915283]
[-9.62858105 481.29806519]
[2.37244272 490.79724121]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 130]
[11 129]
[12 128]
[13 127]
[14 126]
[15 125]
[16 124]
[20 123]
[21 122]
[22 121]
[24 120]
[25 119]
[26 118]
[27 117]
[33 115]
[34 114]
[35 113]
[36 112]
[37 111]
[38 110]
[39 108]
[40 107]
[41 106]
[42 105]
[46 54]
[47 53]
[60 80]
[61 79]
[63 78]
[64 77]
[65 76]
[66 75]
[92 103]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
