%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGAGUGUUUAGCUCCUUCCCUUACUCUACCUUGCUCCUACUUUUCUCUAAGUCAACAUGAGUCGACAGUUUAGUUCCAGGUCUGGGUACCGAAGUGGAGGGGGCUUCAGCUCUGGCUCUGCUGGGAUCAUCAACUACCAGCGCAGGACCACCAGCA\
) } def
/len { sequence length } bind def

/coor [
[91.81159210 100.32316589]
[81.84780884 89.11053467]
[71.88402557 77.89791107]
[61.92023468 66.68528748]
[51.63057709 55.77094269]
[41.02397537 45.16434097]
[30.41737556 34.55773926]
[19.81077385 23.95113564]
[6.36521292 27.11603546]
[-6.78034782 23.24168968]
[-16.20986938 13.44676304]
[-19.52849579 0.37362933]
[-15.97017288 -12.52387524]
[-26.36648369 -23.33667946]
[-36.76279449 -34.14948273]
[-47.15910339 -44.96228790]
[-57.55541229 -55.77508926]
[-67.95172119 -66.58789825]
[-78.34803772 -77.40069580]
[-88.74434662 -88.21350098]
[-99.14065552 -99.02630615]
[-109.53696442 -109.83911133]
[-120.03892517 -120.54933167]
[-130.64552307 -131.15592957]
[-141.25213623 -141.76252747]
[-154.69769287 -138.59764099]
[-167.84324646 -142.47198486]
[-177.27278137 -152.26690674]
[-180.59140015 -165.34004211]
[-177.03308105 -178.23754883]
[-187.42938232 -189.05035400]
[-197.82569885 -199.86315918]
[-208.22201538 -210.67594910]
[-218.61831665 -221.48875427]
[-232.12342834 -218.58845520]
[-245.19038391 -222.72015381]
[-254.42578125 -232.69833374]
[-257.48709106 -245.83409119]
[-253.67622375 -258.65924072]
[-263.85824585 -269.67410278]
[-274.04025269 -280.68893433]
[-284.54220581 -291.39913940]
[-295.35501099 -301.79547119]
[-306.16781616 -312.19177246]
[-321.35522461 -309.61318970]
[-334.98947144 -316.39260864]
[-341.93524170 -329.74252319]
[-339.71475220 -344.44653320]
[-350.52755737 -354.84283447]
[-354.89529419 -355.74813843]
[-358.37445068 -357.81283569]
[-360.70578003 -360.60498047]
[-361.80090332 -363.65270996]
[-361.74017334 -366.50463867]
[-371.70397949 -377.71728516]
[-381.66775513 -388.92990112]
[-396.61825562 -394.10614014]
[-399.28866577 -408.75939941]
[-409.25247192 -419.97201538]
[-424.97756958 -424.62527466]
[-428.54666138 -440.63134766]
[-416.28817749 -451.52450562]
[-400.81256104 -446.09884644]
[-398.03982544 -429.93579102]
[-388.07604980 -418.72317505]
[-373.83822632 -414.34893799]
[-370.45513916 -398.89367676]
[-360.49133301 -387.68106079]
[-350.52755737 -376.46844482]
[-340.13125610 -365.65563965]
[-329.31845093 -355.25933838]
[-314.71295166 -358.05538940]
[-301.10064697 -351.63906860]
[-293.79116821 -338.28149414]
[-295.77151489 -323.00457764]
[-284.95870972 -312.60827637]
[-274.14590454 -302.21194458]
[-270.58178711 -301.93362427]
[-266.98205566 -299.88278198]
[-264.19326782 -296.06512451]
[-263.02542114 -290.87094116]
[-252.84339905 -279.85610962]
[-242.66139221 -268.84127808]
[-226.45474243 -271.29937744]
[-211.82110596 -263.55212402]
[-204.60002136 -248.46771240]
[-207.80551147 -231.88507080]
[-197.40921021 -221.07226562]
[-187.01289368 -210.25946045]
[-176.61657715 -199.44665527]
[-166.22027588 -188.63385010]
[-150.06500244 -191.40968323]
[-135.28208923 -183.95124817]
[-127.76623535 -169.01150513]
[-130.64552307 -152.36914062]
[-120.03892517 -141.76252747]
[-109.43232727 -131.15592957]
[-102.44261932 -128.63684082]
[-98.72415924 -120.23542023]
[-88.32785034 -109.42261505]
[-77.93154144 -98.60980988]
[-67.53523254 -87.79701233]
[-57.13891983 -76.98420715]
[-46.74261093 -66.17140198]
[-36.34629822 -55.35859680]
[-25.94998932 -44.54579544]
[-15.55367851 -33.73299026]
[-5.15736866 -22.92018509]
[10.99789906 -25.69601822]
[25.78082085 -18.23757172]
[33.29666901 -3.29783964]
[30.41737556 13.34453392]
[41.02397537 23.95113564]
[51.63057709 34.55773926]
[62.23717880 45.16434097]
[65.79515076 45.51258850]
[69.35391998 47.63371277]
[72.06720734 51.50537491]
[73.13285828 56.72150040]
[83.09664917 67.93412781]
[93.06043243 79.14675140]
[103.02422333 90.35937500]
[114.61937714 99.87527466]
[127.56039429 107.46013641]
[140.50140381 115.04499817]
[153.44242859 122.62985992]
[166.38343811 130.21472168]
[179.02160645 121.65671539]
[194.12263489 119.43820953]
[208.68820190 123.99968719]
[219.82629395 134.43547058]
[225.32545471 148.67350769]
[224.09381104 163.88685608]
[216.37590027 177.05487061]
[203.70413208 185.56304932]
[188.59448242 187.72206116]
[174.04699707 183.10325623]
[162.95007324 172.62370300]
[157.50703430 158.36410522]
[158.79858398 143.15573120]
[145.85755920 135.57087708]
[132.91654968 127.98601532]
[119.97553253 120.40115356]
[107.03451538 112.81629181]
[95.43936157 122.33219147]
[100.35381317 136.50428772]
[112.18540955 147.00779724]
[109.04500580 161.56756592]
[113.95945740 175.73965454]
[126.70683289 186.05645752]
[123.87899780 202.20996094]
[108.38498688 207.58280945]
[96.16370392 196.64790344]
[99.78736877 180.65411377]
[94.87290955 166.48202515]
[83.39282990 156.99218750]
[86.18172455 141.41873169]
[81.26726532 127.24664307]
[80.40993500 115.16662598]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 122]
[2 121]
[3 120]
[4 119]
[5 115]
[6 114]
[7 113]
[8 112]
[13 108]
[14 107]
[15 106]
[16 105]
[17 104]
[18 103]
[19 102]
[20 101]
[21 100]
[22 99]
[23 97]
[24 96]
[25 95]
[30 91]
[31 90]
[32 89]
[33 88]
[34 87]
[39 83]
[40 82]
[41 81]
[42 77]
[43 76]
[44 75]
[48 71]
[49 70]
[54 69]
[55 68]
[56 67]
[58 65]
[59 64]
[123 144]
[124 143]
[125 142]
[126 141]
[127 140]
[145 158]
[146 157]
[148 155]
[149 154]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
