%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUGCCCCUGCUUCCGUCAUGGGCCCACUCGGGCCCUCUGCCCUGGGCCUUCUGCUGCUGCUCCUGGUGGUGGCCCCUCCCCGGGUCGCAGCAUUGG\
) } def
/len { sequence length } bind def

/coor [
[98.06731415 143.21434021]
[93.23062897 129.01551819]
[98.09825134 114.82601929]
[88.98226166 126.73814392]
[90.86811829 142.20039368]
[81.45351410 154.15112305]
[66.70099640 155.85371399]
[57.58500671 167.76583862]
[56.00326157 184.08851624]
[40.96650314 190.63282776]
[27.94325638 180.66653442]
[30.33072281 164.44210815]
[45.67288208 158.64984131]
[54.78887177 146.73771667]
[52.57713699 132.05290222]
[61.65235519 119.84245300]
[77.07013702 117.62215424]
[86.18612671 105.71002960]
[85.48652649 90.72634888]
[75.30023193 79.71547699]
[59.98802185 81.40144348]
[46.77359009 73.83625793]
[40.62044525 60.10298157]
[43.69705963 45.55401230]
[33.51076508 34.54313660]
[23.32447433 23.53225708]
[13.13818073 12.52137947]
[2.95188761 1.51050186]
[-7.23440552 -9.50037575]
[-17.42069817 -20.51125336]
[-22.75778198 -22.14308739]
[-26.45974350 -25.41125298]
[-28.16941071 -29.36494637]
[-27.98360252 -33.05554581]
[-37.09959412 -44.96767044]
[-46.21558380 -56.87979507]
[-55.33157349 -68.79191589]
[-70.98111725 -72.32338715]
[-77.84749603 -86.82277679]
[-70.66339874 -101.16741180]
[-54.93986511 -104.35330200]
[-42.73863220 -93.93650818]
[-43.41944885 -77.90790558]
[-34.30345917 -65.99578094]
[-25.18746758 -54.08366013]
[-16.07147598 -42.17153549]
[-6.40982056 -30.69754791]
[3.77647233 -19.68666840]
[13.96276569 -8.67579079]
[24.14905930 2.33508682]
[34.33535004 13.34596443]
[44.52164459 24.35684204]
[54.70793915 35.36772156]
[69.45194244 33.43062210]
[82.66571808 40.63202667]
[89.18149567 54.39421844]
[86.31110382 69.52918243]
[96.49739838 80.54006195]
[120.41348267 91.06256866]
[135.32467651 92.69234467]
[150.23587036 94.32212830]
[165.14706421 95.95191193]
[180.05827332 97.58169556]
[194.96946716 99.21147919]
[211.53889465 91.36921692]
[225.34204102 102.08251190]
[240.29670715 103.24777222]
[255.25137329 104.41303253]
[270.20605469 105.57828522]
[285.16070557 106.74354553]
[294.13973999 104.25965118]
[300.55996704 108.18470764]
[315.47119141 109.81449127]
[325.80175781 98.23612213]
[340.97210693 94.97410583]
[355.14886475 101.28274536]
[362.88079834 114.73624420]
[361.19485474 130.16145325]
[350.73925781 141.62707520]
[335.53442383 144.72433472]
[321.42694092 138.26226807]
[313.84140015 124.72568512]
[298.93020630 123.09590149]
[283.99545288 121.69821167]
[269.04080200 120.53295898]
[254.08612061 119.36769867]
[239.13145447 118.20244598]
[224.17677307 117.03718567]
[214.67810059 124.70484924]
[202.10440063 123.74227142]
[193.33969116 114.12267303]
[178.42848206 112.49288940]
[163.51728821 110.86310577]
[148.60609436 109.23332977]
[133.69490051 107.60354614]
[118.78369904 105.97376251]
[132.40829468 112.24832916]
[139.34123230 125.55000305]
[136.68115234 140.31225586]
[125.54129028 150.35731506]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 18]
[4 17]
[7 14]
[8 13]
[19 58]
[20 57]
[24 53]
[25 52]
[26 51]
[27 50]
[28 49]
[29 48]
[30 47]
[34 46]
[35 45]
[36 44]
[37 43]
[59 96]
[60 95]
[61 94]
[62 93]
[63 92]
[64 91]
[66 88]
[67 87]
[68 86]
[69 85]
[70 84]
[72 83]
[73 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
