%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:26:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGACAGAUUUUGGGAAAGAUCAUGAUGAGCCAUCAACCGCAGCCCCAGGAAGAGCGGAGCCCCCAGCGGAGCACCUCAGGGUACCCCCUCCAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[167.09320068 176.79466248]
[165.43037415 154.52313232]
[153.10603333 145.97264099]
[140.78169250 137.42216492]
[128.45736694 128.87167358]
[114.79290771 137.74340820]
[98.73925018 140.51921082]
[82.88921356 136.75073242]
[69.80274200 127.04664612]
[56.97066498 134.81439209]
[44.13859177 142.58213806]
[31.30651665 150.34988403]
[18.47444153 158.11763000]
[5.64236689 165.88536072]
[-1.78255677 180.50735474]
[-18.17033577 181.11787415]
[-26.66262817 167.08886719]
[-18.52329063 152.85217285]
[-2.12537718 153.05329895]
[10.70669746 145.28555298]
[23.53877258 137.51780701]
[36.37084579 129.75006104]
[49.20292282 121.98231506]
[62.03499603 114.21456909]
[59.53960419 102.52028656]
[60.56446075 90.60671997]
[46.86761093 84.49146271]
[33.17076492 78.37621307]
[19.47391510 72.26095581]
[5.77706623 66.14570618]
[-11.15100765 65.20940399]
[-14.93745422 48.68368912]
[-0.10576595 40.47044754]
[11.89232063 52.44885254]
[25.58916855 58.56410980]
[39.28601837 64.67935944]
[52.98286819 70.79461670]
[66.67971802 76.90987396]
[77.41235352 66.33705902]
[91.26464081 60.41352463]
[90.79814148 45.42078018]
[90.33164215 30.42803764]
[89.86515045 15.43529320]
[75.60474396 3.17783570]
[74.66280365 -15.28802967]
[87.16928864 -28.47637367]
[85.77159882 -43.41111374]
[78.27568817 -58.61794281]
[90.81314850 -70.03057861]
[105.25049591 -61.14241791]
[100.70633698 -44.80880356]
[102.10402679 -29.87406349]
[112.42746735 -24.55090141]
[118.89766693 -14.75949669]
[119.76428986 -2.93414140]
[114.68814850 7.91514874]
[104.85789490 14.96879482]
[105.32438660 29.96154022]
[105.79088593 44.95428467]
[106.25738525 59.94702911]
[120.22141266 64.86469269]
[131.48854065 74.46830750]
[138.55607605 87.47705078]
[140.48144531 102.15596771]
[137.00784302 116.54734802]
[149.33218384 125.09783173]
[161.65652466 133.64831543]
[173.98085022 142.19879150]
[181.59004211 137.71841431]
[190.16976929 135.77978516]
[198.89787292 136.54727173]
[206.94445801 139.92695618]
[213.55087280 145.57749939]
[218.10113525 152.94461060]
[220.17941284 161.31527710]
[219.60794067 169.88681030]
[216.46202087 177.84379578]
[226.98582458 188.53256226]
[237.50962830 199.22131348]
[248.03341675 209.91007996]
[263.60757446 210.19989014]
[274.12792969 221.18972778]
[273.75564575 236.03549194]
[284.27944946 246.72425842]
[299.60330200 244.28302002]
[313.42016602 251.34513855]
[320.41723633 265.19509888]
[317.90393066 280.50726318]
[306.84671021 291.39385986]
[291.49728394 293.66870117]
[277.75784302 286.45712280]
[270.91143799 272.53207397]
[273.59069824 257.24804688]
[263.06689453 246.55929565]
[248.21713257 246.70065308]
[237.39222717 236.01063538]
[237.34466553 220.43388367]
[226.82086182 209.74511719]
[216.29705811 199.05636597]
[205.77325439 188.36759949]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 68]
[3 67]
[4 66]
[5 65]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[26 38]
[27 37]
[28 36]
[29 35]
[30 34]
[40 60]
[41 59]
[42 58]
[43 57]
[46 52]
[47 51]
[77 100]
[78 99]
[79 98]
[80 97]
[83 94]
[84 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
