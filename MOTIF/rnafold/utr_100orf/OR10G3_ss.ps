%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAAGAAUCAACAGCACACUGUUGACUGCGUUUAUCCUGACAGGAAUUCCGUAUCCACUCAGGCUAAGGACACUCUUUUUUGUGUUCUUUUUUCUAA\
) } def
/len { sequence length } bind def

/coor [
[82.38425446 257.32171631]
[88.43058777 241.48260498]
[88.43058777 226.48260498]
[88.43058777 211.48260498]
[88.43058777 196.48260498]
[88.43058777 181.48260498]
[88.43058777 166.48260498]
[88.43058777 151.48260498]
[88.43058777 136.48260498]
[88.43058777 121.48259735]
[76.10625458 112.93211365]
[62.05571747 118.18401337]
[48.00518417 123.43590546]
[33.95464706 128.68780518]
[19.90410995 133.93969727]
[5.85357285 139.19160461]
[-8.19696426 144.44349670]
[-18.20603371 157.43389893]
[-34.42252350 154.99308777]
[-40.16429520 139.63197327]
[-29.52471352 127.15274048]
[-13.44886112 130.39295959]
[0.60167593 125.14105988]
[14.65221214 119.88916779]
[28.70274925 114.63726807]
[42.75328445 109.38536835]
[56.80382156 104.13347626]
[70.85436249 98.88157654]
[58.10410690 90.98024750]
[53.24835587 76.78793335]
[58.48622131 62.73216248]
[71.44553375 55.17860794]
[86.25719452 57.54818344]
[96.21317291 68.76773834]
[96.80415344 83.75732422]
[98.66563416 68.87327576]
[100.52711487 53.98923111]
[94.56221008 39.33554459]
[103.81913757 27.66684532]
[105.68061829 12.78279781]
[107.54209900 -2.10125065]
[109.40358734 -16.98529816]
[111.26506805 -31.86934662]
[101.83633423 -44.26840973]
[103.93617249 -59.33643723]
[115.81488800 -68.24887848]
[117.67636871 -83.13292694]
[119.53784943 -98.01697540]
[108.12155151 -108.52638245]
[105.09584808 -123.74560547]
[111.62420654 -137.82254028]
[125.19631958 -145.34432983]
[140.59344482 -143.41868591]
[151.89508057 -132.78604126]
[154.75549316 -117.53489685]
[148.07481384 -103.52960205]
[134.42190552 -96.15549469]
[132.56042480 -81.27144623]
[130.69894409 -66.38739777]
[140.01683044 -54.82398987]
[138.34106445 -39.70293045]
[126.14911652 -30.00786591]
[124.28763580 -15.12381744]
[122.42614746 -0.23976929]
[120.56466675 14.64427853]
[118.70318604 29.52832603]
[124.80123901 43.11740494]
[115.41116333 55.85071182]
[113.54968262 70.73475647]
[111.68820190 85.61880493]
[119.85126495 98.20310211]
[134.20112610 102.57131958]
[148.55099487 106.93953705]
[162.90086365 111.30776215]
[177.25073242 115.67597961]
[191.60060120 120.04420471]
[203.90013123 110.58370972]
[219.41229248 110.19316101]
[232.17233276 119.02272034]
[237.27374268 133.67724609]
[232.75494385 148.52177429]
[220.35350037 157.84828186]
[204.83801270 158.07054138]
[192.17451477 149.10307312]
[187.23237610 134.39407349]
[172.88250732 130.02584839]
[158.53263855 125.65762329]
[144.18276978 121.28940582]
[129.83291626 116.92118835]
[115.48304749 112.55296326]
[103.43058777 121.48259735]
[103.43058777 136.48260498]
[103.43058777 151.48260498]
[103.43058777 166.48260498]
[103.43058777 181.48260498]
[103.43058777 196.48260498]
[103.43058777 211.48260498]
[103.43058777 226.48260498]
[103.43058777 241.48260498]
[109.47692871 257.32171631]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 99]
[3 98]
[4 97]
[5 96]
[6 95]
[7 94]
[8 93]
[9 92]
[10 91]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[35 70]
[36 69]
[37 68]
[39 66]
[40 65]
[41 64]
[42 63]
[43 62]
[46 59]
[47 58]
[48 57]
[71 90]
[72 89]
[73 88]
[74 87]
[75 86]
[76 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
