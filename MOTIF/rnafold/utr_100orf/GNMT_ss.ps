%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:44:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCGCGGCGCAGGAUGGUGGACAGCGUGUACCGGACCCGCUCCCUGGGGGUGGCGGCCGAAGGGCUCCCGGACCAGUACGCGGACGGGGAGGCGGCGCGCGUGUGGCAGCUGU\
) } def
/len { sequence length } bind def

/coor [
[118.05632782 271.90072632]
[126.33647156 257.74548340]
[125.92675018 242.75106812]
[125.51702881 227.75666809]
[124.90254211 212.76925659]
[124.08340454 197.79164124]
[115.66262817 185.50588989]
[122.63476562 171.30377197]
[121.81562805 156.32615662]
[120.99648285 141.34854126]
[120.17734528 126.37092590]
[113.66515350 122.65053558]
[106.22415924 135.67480469]
[93.20001221 128.23359680]
[100.64075470 115.20976257]
[94.12856293 111.48937225]
[80.81027985 118.39035034]
[74.60605621 133.18518066]
[59.13206100 137.42015076]
[46.25861359 127.84654236]
[45.86112595 111.80841064]
[58.24451828 101.60884094]
[73.90930939 105.07206726]
[87.22758484 98.17109680]
[96.85195160 86.66580963]
[101.29191589 72.33798218]
[105.73188782 58.01015091]
[110.17185974 43.68232346]
[114.61183167 29.35449409]
[119.05179596 15.02666569]
[114.52120209 -2.75629044]
[127.71164703 -14.24281311]
[131.75860596 -28.68657303]
[123.81487274 -39.66399384]
[123.69001770 -53.01813889]
[131.20404053 -63.82122803]
[143.39973450 -68.21750641]
[147.83970642 -82.54533386]
[152.27967834 -96.87316132]
[156.71965027 -111.20098877]
[156.27821350 -120.46417999]
[161.48152161 -125.85654449]
[166.31120300 -140.05775452]
[171.14086914 -154.25895691]
[174.99017334 -168.75663757]
[177.84112549 -183.48321533]
[180.69209290 -198.20979309]
[183.54304504 -212.93637085]
[174.72734070 -223.22665405]
[173.50968933 -236.52575684]
[180.11412048 -247.90769958]
[191.90899658 -253.28759766]
[195.16114807 -267.93081665]
[198.41329956 -282.57400513]
[193.85205078 -297.72344971]
[204.16470337 -308.47045898]
[207.41685486 -323.11367798]
[210.66900635 -337.75689697]
[213.92115784 -352.40008545]
[208.48236084 -367.87106323]
[219.36511230 -380.13882446]
[235.37419128 -376.58331299]
[240.04081726 -360.86218262]
[228.56437683 -349.14794922]
[225.31222534 -334.50473022]
[222.06007385 -319.86151123]
[218.80792236 -305.21832275]
[223.60177612 -291.11624146]
[213.05650330 -279.32186890]
[209.80435181 -264.67864990]
[206.55220032 -250.03544617]
[216.17878723 -236.32043457]
[212.90769958 -219.54414368]
[198.26962280 -210.08540344]
[195.41865540 -195.35882568]
[192.56770325 -180.63226318]
[189.71673584 -165.90568542]
[203.71733093 -171.28930664]
[216.79483032 -163.94224548]
[219.47981262 -149.18449402]
[209.82809448 -137.70214844]
[194.82847595 -137.80953979]
[185.34208679 -149.42927551]
[180.51240540 -135.22807312]
[175.68272400 -121.02687073]
[171.04747009 -106.76101685]
[166.60749817 -92.43318939]
[162.16754150 -78.10536194]
[157.72756958 -63.77753448]
[166.19909668 -49.32049561]
[161.56562805 -32.86828995]
[146.20236206 -24.63961983]
[142.15541077 -10.19586086]
[147.82717896 0.58465856]
[144.47242737 12.71337986]
[133.37962341 19.46663666]
[128.93965149 33.79446411]
[124.49968719 48.12229156]
[120.05971527 62.45012283]
[115.61974335 76.77794647]
[111.17977905 91.10578156]
[135.15496826 125.55178833]
[135.97410583 140.52940369]
[136.79324341 155.50701904]
[137.61238098 170.48463440]
[146.09175110 183.84169006]
[139.06101990 196.97250366]
[139.88015747 211.95011902]
[143.51502991 220.48178101]
[140.51142883 227.34693909]
[140.92115784 242.34133911]
[141.33087158 257.33575439]
[150.37167358 271.01770020]
[142.80209351 285.56533813]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 112]
[3 111]
[4 110]
[5 108]
[6 107]
[8 105]
[9 104]
[10 103]
[11 102]
[16 24]
[17 23]
[25 101]
[26 100]
[27 99]
[28 98]
[29 97]
[30 96]
[32 93]
[33 92]
[37 89]
[38 88]
[39 87]
[40 86]
[42 85]
[43 84]
[44 83]
[45 77]
[46 76]
[47 75]
[48 74]
[52 71]
[53 70]
[54 69]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
