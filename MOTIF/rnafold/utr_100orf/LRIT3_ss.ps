%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:46:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACCUCUAAAAGGAGCAAUGCAUCUCUUUGCAUGUCUGUGCAUUGUCCUUAGCUUUUUGGAAGGAGUGGGCUGUUUGUGUCCUUCACAGUGCACCUGUGAUUAUCACGGCAGAAAUG\
) } def
/len { sequence length } bind def

/coor [
[68.50843811 131.35766602]
[60.89530182 121.11502838]
[56.50695801 109.13111877]
[55.70530319 96.39420319]
[41.17458725 92.67152405]
[26.64387321 88.94884491]
[12.06528664 85.41829681]
[-2.55863214 82.08048248]
[-17.18255043 78.74266815]
[-31.80646896 75.40485382]
[-46.43038940 72.06703949]
[-61.27254486 69.89669037]
[-76.23988342 68.90740967]
[-91.20722961 67.91812897]
[-106.17456818 66.92884827]
[-115.07146454 69.50872040]
[-121.52229309 65.71076965]
[-136.45831299 64.32674408]
[-151.39431763 62.94271469]
[-166.33033752 61.55868912]
[-181.26634216 60.17466736]
[-196.20236206 58.79064178]
[-211.13836670 57.40661621]
[-226.07438660 56.02259064]
[-233.13154602 69.48605347]
[-244.80696106 79.22018433]
[-259.32019043 83.74058533]
[-274.45812988 82.35793304]
[-287.91229248 75.28306580]
[-297.63107300 63.59486008]
[-302.13235474 49.07567596]
[-300.72979736 33.93958664]
[-293.63723755 20.49473190]
[-281.93624878 10.79135704]
[-267.41116333 6.30915594]
[-252.27693176 7.73163080]
[-238.84143066 14.84186554]
[-229.15344238 26.55560112]
[-224.69035339 41.08657837]
[-209.75434875 42.47060394]
[-194.81832886 43.85462570]
[-179.88232422 45.23865128]
[-164.94630432 46.62267685]
[-150.01029968 48.00670242]
[-135.07427979 49.39072800]
[-120.13826752 50.77475357]
[-105.18528748 51.96150970]
[-90.21794891 52.95079041]
[-75.25061035 53.94006729]
[-60.28326416 54.92934799]
[-68.64719391 42.47765350]
[-65.99597168 27.71381378]
[-53.82228088 18.95017815]
[-38.98017120 21.12086105]
[-29.82606697 33.00371933]
[-31.51391792 47.90845871]
[-43.09257507 57.44311905]
[-28.46865463 60.78093338]
[-13.84473705 64.11875153]
[0.77918190 67.45656586]
[15.40310097 70.79438019]
[22.71608925 69.19502258]
[30.36655045 74.41813660]
[44.89726639 78.14080811]
[59.42797852 81.86348724]
[69.33880615 67.82993317]
[83.83191681 58.60416794]
[100.74133301 55.56496429]
[117.53995514 59.16653442]
[131.71725464 68.87062836]
[141.15443420 83.22697449]
[144.44113159 100.09002686]
[159.22082520 102.65141296]
[174.00051880 105.21279144]
[188.78021240 107.77416992]
[203.55990601 110.33554840]
[212.67915344 108.70781708]
[218.69374084 113.16455841]
[233.40066528 116.11518097]
[248.10760498 119.06580353]
[258.28833008 107.65090942]
[272.72045898 102.89588165]
[287.49673462 105.98264313]
[298.66928101 115.98417664]
[303.30429077 130.13981628]
[318.01123047 133.09043884]
[332.71813965 136.04107666]
[347.42507935 138.99169922]
[362.13201904 141.94232178]
[376.83895874 144.89294434]
[390.93606567 137.23457336]
[405.65634155 143.61369324]
[409.70764160 159.13677979]
[399.98214722 171.89587402]
[383.94042969 172.10327148]
[373.88830566 159.59986877]
[359.18139648 156.64924622]
[344.47445679 153.69862366]
[329.76751709 150.74800110]
[315.06060791 147.79737854]
[300.35366821 144.84675598]
[290.61709595 156.11904907]
[276.45129395 161.03700256]
[261.62786865 158.18522644]
[250.14677429 148.23127747]
[245.15698242 133.77273560]
[230.45004272 130.82211304]
[215.74311829 127.87148285]
[200.99851990 125.11524200]
[186.21882629 122.55386353]
[171.43913269 119.99248505]
[156.65943909 117.43110657]
[141.87974548 114.86972046]
[135.92706299 126.15853119]
[127.01161194 135.29014587]
[115.86863708 141.51155090]
[103.41704559 144.30966187]
[90.68365479 143.45373535]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 65]
[5 64]
[6 63]
[7 61]
[8 60]
[9 59]
[10 58]
[11 57]
[12 50]
[13 49]
[14 48]
[15 47]
[17 46]
[18 45]
[19 44]
[20 43]
[21 42]
[22 41]
[23 40]
[24 39]
[72 113]
[73 112]
[74 111]
[75 110]
[76 109]
[78 108]
[79 107]
[80 106]
[85 101]
[86 100]
[87 99]
[88 98]
[89 97]
[90 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
