%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:12:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCCAGCUCCUCUCCACAGCCCAACCCACACCAGCCUCAGACACCACCAUGACCGGCUCCUGCUGCGGCUCCACCUUCUCCUCCCUGAGCUACGGGGGAGGCUGCUGCCAGCCCUGCUGCUGCCGCGACCCCUGCUGCUGCCGCCCCG\
) } def
/len { sequence length } bind def

/coor [
[142.48182678 163.81994629]
[128.70347595 169.74928284]
[113.72907257 168.87341309]
[100.73594666 161.37817383]
[92.48105621 148.85392761]
[90.71595001 133.95814514]
[95.81505585 119.85163879]
[87.51418304 132.34545898]
[79.21331024 144.83927917]
[85.50161743 158.92687988]
[83.15275574 174.17439270]
[72.91623688 185.71636963]
[58.05849457 189.86981201]
[43.32058716 185.30937195]
[33.40531921 173.49028015]
[31.47662354 158.18394470]
[38.14993668 144.27458191]
[51.29582596 136.20060730]
[66.71949005 136.53840637]
[75.02036285 124.04458618]
[83.32123566 111.55076599]
[81.07843018 104.39395905]
[67.80387115 111.37866974]
[56.24778366 120.94197083]
[41.86505508 116.68318939]
[37.37895584 102.36973572]
[46.75798035 90.66358948]
[61.70616150 91.92083740]
[76.59281921 90.08035278]
[74.35001373 82.92355347]
[60.40336609 77.40168762]
[46.04149628 83.43280792]
[31.97627449 77.63417053]
[26.31502724 63.90515900]
[12.36838055 58.38328934]
[-1.57826662 52.86141968]
[-15.52491379 47.33955383]
[-29.58414459 42.11097336]
[-43.74979019 37.17797089]
[-57.91543579 32.24497223]
[-69.48945618 42.34139252]
[-84.56414032 45.28239059]
[-99.08447266 40.27685165]
[-109.14456177 28.67124367]
[-112.03829193 13.58741379]
[-106.98726654 -0.91716105]
[-95.35018158 -10.94082451]
[-80.25735474 -13.78726101]
[-65.76868439 -8.69079304]
[-55.78154755 2.97765374]
[-52.98243332 18.07932663]
[-38.81678772 23.01232719]
[-24.65114403 27.94532585]
[-19.98386002 26.67828560]
[-14.47318172 28.37707710]
[-10.00304604 33.39290619]
[3.94360161 38.91477203]
[17.89024925 44.43664169]
[31.83689690 49.95851135]
[45.36192703 43.82587814]
[59.58446884 49.22716141]
[65.92523193 63.45503998]
[79.87187958 68.97690582]
[97.38189697 71.33100128]
[107.89505005 80.97742462]
[109.54297638 92.07678223]
[123.90276337 87.74131012]
[138.26255798 83.40583038]
[152.62234497 79.07035065]
[166.98214722 74.73487854]
[152.49449158 70.84798431]
[139.86940002 62.74817657]
[130.29742432 51.19926834]
[124.68121338 37.29034042]
[123.55039978 22.33302498]
[127.01160431 7.73781919]
[134.73843384 -5.11893034]
[146.00225830 -15.02481365]
[159.74084473 -21.04569244]
[174.65866089 -22.61379051]
[189.34890747 -19.58123207]
[202.42630005 -12.23399162]
[212.65760803 -1.26492524]
[219.07800293 12.29156876]
[221.08203125 27.15709496]
[218.48072815 41.92981339]
[211.51937866 55.21663284]
[200.85444641 65.76459503]
[187.49061584 72.57935333]
[202.43800354 73.83451843]
[217.38540649 75.08968353]
[229.39111328 65.16493988]
[244.53201294 66.65078735]
[253.91975403 78.15756226]
[268.86715698 79.41272736]
[283.81454468 80.66789246]
[298.76193237 81.92306519]
[313.70932007 83.17823029]
[328.65673828 84.43339539]
[340.66244507 74.50865173]
[355.80334473 75.99449921]
[365.19107056 87.50127411]
[380.13848877 88.75643921]
[394.53768921 82.20104980]
[406.57287598 90.97620392]
[421.52026367 92.23136902]
[435.91949463 85.67597198]
[447.95468140 94.45112610]
[462.90206909 95.70629883]
[471.78271484 93.29489899]
[478.14825439 97.14748383]
[493.06610107 98.71541595]
[507.98391724 100.28334045]
[524.36828613 95.92576599]
[533.09124756 110.46353912]
[521.53631592 122.87002563]
[506.41598511 115.20116425]
[491.49816895 113.63323975]
[476.58035278 112.06531525]
[461.64691162 110.65368652]
[446.69952393 109.39852142]
[433.36944580 116.04369354]
[420.26510620 107.17876434]
[405.31771851 105.92359161]
[391.98764038 112.56877136]
[378.88330078 103.70383453]
[363.93591309 102.44866943]
[352.76065063 112.22872162]
[337.58401489 111.16873169]
[327.40155029 99.38079071]
[312.45416260 98.12562561]
[297.50677490 96.87045288]
[282.55938721 95.61528778]
[267.61196899 94.36012268]
[252.66459656 93.10494995]
[241.48934937 102.88500214]
[226.31268311 101.82501984]
[216.13023376 90.03707886]
[201.18284607 88.78191376]
[186.23544312 87.52674103]
[171.31762695 89.09467316]
[156.95782471 93.43014526]
[142.59803772 97.76562500]
[128.23823547 102.10109711]
[113.87844849 106.43657684]
[128.85687256 105.63236237]
[142.60668945 111.62757111]
[152.21040344 123.15010834]
[155.63023376 137.75506592]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 21]
[8 20]
[9 19]
[30 63]
[31 62]
[34 59]
[35 58]
[36 57]
[37 56]
[38 53]
[39 52]
[40 51]
[66 145]
[67 144]
[68 143]
[69 142]
[70 141]
[89 140]
[90 139]
[91 138]
[94 135]
[95 134]
[96 133]
[97 132]
[98 131]
[99 130]
[102 127]
[103 126]
[105 124]
[106 123]
[108 121]
[109 120]
[111 119]
[112 118]
[113 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
