%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUGCUUCUACUGCUUUACUGGGACUAUGUGACUUUUAUGCUUUUAUGUUUCAGAUUUGGGAACCAAUCCAUGAAAAGAGAGAACUUUACUCUCAUCACUGACUUUGUUUUCCAAGGUUUCUCUAGCUUCCAUGAGC\
) } def
/len { sequence length } bind def

/coor [
[68.92908478 331.06719971]
[69.58214569 346.28210449]
[63.98423767 360.44485474]
[53.10524750 371.10165405]
[38.83002090 376.40615845]
[23.63182640 375.43933105]
[10.14384270 368.36865234]
[0.70294678 356.41921997]
[-3.05517054 341.66128540]
[-0.47939253 326.65176392]
[7.98401165 313.99118042]
[20.86870575 305.87301636]
[35.94234085 303.70382690]
[39.98929214 289.26004028]
[44.03624344 274.81628418]
[48.08319473 260.37252808]
[42.24690247 251.85736084]
[42.10455322 241.31436157]
[47.94812393 232.27391052]
[58.02440262 227.89839172]
[62.72456360 213.65379333]
[67.42472076 199.40919495]
[72.12488556 185.16461182]
[76.82504272 170.92001343]
[81.36276245 156.62283325]
[85.73744965 142.27494812]
[90.11213684 127.92704773]
[75.41607666 103.36132050]
[88.50922394 83.63110352]
[85.12387085 69.01811218]
[81.73851013 54.40512848]
[78.35315704 39.79214096]
[62.31930161 27.43708992]
[63.95748520 7.90935898]
[55.03057098 -4.14510775]
[46.10365295 -16.19957542]
[37.17673874 -28.25404167]
[28.24982071 -40.30850983]
[19.32290459 -52.36297607]
[10.39598942 -64.41744232]
[-4.98484373 -66.88071442]
[-13.86628628 -79.23282623]
[-11.42314339 -93.88092041]
[-20.35005951 -105.93538666]
[-31.28993607 -106.93321228]
[-39.67199326 -113.68733215]
[-42.84039688 -123.74398804]
[-39.96620178 -133.65910339]
[-48.33521271 -146.10739136]
[-56.70422363 -158.55566406]
[-65.07323456 -171.00393677]
[-73.44224548 -183.45222473]
[-89.00981140 -184.93037415]
[-99.94823456 -196.10556030]
[-101.09273529 -211.70120239]
[-91.90290070 -224.35353088]
[-76.71790314 -228.08847046]
[-62.70762634 -221.14251709]
[-56.48730087 -206.79534912]
[-60.99396515 -191.82122803]
[-52.62495422 -179.37295532]
[-44.25594330 -166.92468262]
[-35.88693237 -154.47639465]
[-27.51792336 -142.02812195]
[-9.58901787 -134.92221069]
[-8.29559231 -114.86230469]
[0.63132370 -102.80783844]
[15.35514355 -100.87271118]
[24.58002663 -88.77493286]
[22.45045662 -73.34436035]
[31.37737274 -61.28989029]
[40.30428696 -49.23542404]
[49.23120499 -37.18095779]
[58.15811920 -25.12649155]
[67.08503723 -13.07202435]
[76.01195526 -1.01755714]
[82.48760986 -1.62700450]
[88.81996155 -0.14146559]
[99.30514526 -10.86810780]
[109.79032898 -21.59475136]
[120.27552032 -32.32139206]
[130.76071167 -43.04803467]
[129.04061890 -58.59072876]
[137.75659180 -71.57402802]
[152.79318237 -75.86761475]
[167.05058289 -69.44418335]
[173.79689026 -55.33669281]
[169.84669495 -40.20626068]
[157.06517029 -31.19701576]
[141.48735046 -32.56284714]
[131.00216675 -21.83620644]
[120.51697540 -11.10956383]
[110.03178406 -0.38292140]
[99.54660034 10.34372139]
[101.09058380 24.34131622]
[92.96614075 36.40678406]
[96.35150146 51.01977158]
[99.73685455 65.63275909]
[103.12220764 80.24574280]
[120.73829651 86.37683105]
[128.69302368 107.37565613]
[143.04092407 111.75035095]
[157.38880920 116.12503815]
[171.73670959 120.49972534]
[186.08459473 124.87441254]
[200.43249512 129.24909973]
[214.78039551 133.62379456]
[229.55886841 127.38069916]
[243.58476257 135.16874695]
[246.09861755 151.01362610]
[235.17201233 162.76049805]
[219.18690491 161.39816284]
[210.40570068 147.97169495]
[196.05781555 143.59700012]
[181.70991516 139.22230530]
[167.36201477 134.84762573]
[153.01412964 130.47293091]
[138.66622925 126.09824371]
[124.31832886 121.72355652]
[135.33514404 131.90342712]
[133.41680908 146.78025818]
[120.17795563 153.83241272]
[106.76155853 147.12419128]
[104.46002960 132.30174255]
[100.08534241 146.64962769]
[95.71065521 160.99752808]
[96.19684601 170.20732117]
[91.06963348 175.62016296]
[86.36947632 189.86476135]
[81.66931915 204.10935974]
[76.96916199 218.35395813]
[72.26899719 232.59855652]
[77.32636261 252.05352783]
[62.52695465 264.41949463]
[58.48000336 278.86325073]
[54.43305206 293.30700684]
[50.38610077 307.75076294]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 137]
[14 136]
[15 135]
[16 134]
[20 132]
[21 131]
[22 130]
[23 129]
[24 128]
[25 126]
[26 125]
[27 124]
[29 99]
[30 98]
[31 97]
[32 96]
[34 76]
[35 75]
[36 74]
[37 73]
[38 72]
[39 71]
[40 70]
[43 67]
[44 66]
[48 64]
[49 63]
[50 62]
[51 61]
[52 60]
[78 94]
[79 93]
[80 92]
[81 91]
[82 90]
[101 119]
[102 118]
[103 117]
[104 116]
[105 115]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
