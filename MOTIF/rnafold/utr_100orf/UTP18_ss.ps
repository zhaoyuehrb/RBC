%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:33:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCAGCGAGGUUCCACGUGAGCGCCUGCGUUUCUCCUCAAACCUAACGAUGCCGCCGGAGCGGAGGAGACGAAUGAAACUGGACCGGAGAACCGGAGCGAAGCCGAAGCGGAAGCCCGGAAUGAGGCCGGACUGGAAAGCCGGAGCGG\
) } def
/len { sequence length } bind def

/coor [
[87.57513428 127.75070190]
[78.25791168 139.50610352]
[68.94069672 151.26150513]
[59.62348175 163.01690674]
[50.30626297 174.77230835]
[40.98904800 186.52770996]
[44.64459991 197.92301941]
[42.33813858 209.54333496]
[34.76293564 218.49497986]
[23.90922546 222.60664368]
[12.54240417 220.95545959]
[2.74109530 232.31039429]
[-7.06021357 243.66531372]
[-16.86152267 255.02024841]
[-17.12529564 271.06112671]
[-29.91848564 280.74172974]
[-45.42724991 276.63589478]
[-51.75459290 261.89331055]
[-44.04671860 247.82318115]
[-28.21644783 245.21893311]
[-18.41514015 233.86401367]
[-8.61383057 222.50907898]
[1.18747854 211.15415955]
[-1.28769016 193.06463623]
[10.39316082 178.62123108]
[29.23364639 177.21049500]
[38.55086136 165.45509338]
[47.86808014 153.69969177]
[57.18529510 141.94429016]
[66.50251007 130.18888855]
[75.81973267 118.43348694]
[69.96909332 104.75643158]
[71.30693817 89.94082642]
[58.81311417 81.63995361]
[46.31929779 73.33908081]
[33.82547760 65.03820801]
[21.33165932 56.73733139]
[8.83784199 48.43645859]
[-3.65597701 40.13558578]
[-19.39345932 46.24781036]
[-35.51964951 41.84286499]
[-45.75926208 28.83929253]
[-46.24957657 12.46119499]
[-58.91449738 4.42379332]
[-71.67342377 8.86134529]
[-84.46602631 5.17336750]
[-92.66088104 -5.07075214]
[-93.42681885 -17.97163582]
[-105.92063904 -26.27250862]
[-122.31249237 -26.76164246]
[-129.84548950 -41.32824326]
[-120.77034760 -54.98744202]
[-104.42277527 -53.68782425]
[-97.61976624 -38.76632690]
[-85.12594604 -30.46545410]
[-68.83075714 -34.50297928]
[-54.35538864 -25.35291862]
[-50.87709427 -8.24112606]
[-38.21217346 -0.20372379]
[-26.27259254 -6.25886202]
[-12.79289436 -5.60166264]
[-1.31595123 1.70266974]
[5.08856440 13.82779121]
[4.64489603 27.64176750]
[17.13871574 35.94264221]
[29.63253403 44.24351501]
[42.12635040 52.54438782]
[54.62017059 60.84526062]
[67.11399078 69.14613342]
[79.60781097 77.44700623]
[84.86376190 73.63006592]
[90.81054688 71.01667786]
[97.17674255 69.72611237]
[103.67179871 69.81727600]
[109.99926758 71.28600311]
[115.87036896 74.06526184]
[121.01712799 78.02821350]
[125.20464325 82.99397278]
[128.24179077 88.73590088]
[129.98997498 94.99193573]
[144.93736267 96.24710083]
[159.88475037 97.50226593]
[171.89047241 87.57752228]
[187.03137207 89.06336975]
[196.41911316 100.57014465]
[211.36650085 101.82530975]
[226.31390381 103.08047485]
[241.26129150 104.33564758]
[250.07466125 91.83477783]
[263.87078857 85.46582794]
[278.90258789 86.84834290]
[291.14224243 95.51130676]
[297.36044312 109.04642487]
[312.30786133 110.30158997]
[327.25524902 111.55676270]
[342.20263672 112.81192780]
[354.20834351 102.88717651]
[369.34924316 104.37303162]
[378.73699951 115.87980652]
[393.68438721 117.13497162]
[399.91854858 114.62981415]
[405.60986328 115.55842590]
[409.22705078 118.76856995]
[424.10876465 120.64856720]
[438.99047852 122.52856445]
[449.23193359 108.31719971]
[465.16293335 101.24912262]
[482.39581299 103.17322540]
[496.23345947 113.47513580]
[502.94958496 129.26927185]
[517.89697266 130.52442932]
[532.84436035 131.77960205]
[547.44433594 124.31139374]
[561.06304932 133.44715881]
[559.69079590 149.78878784]
[544.73919678 156.52542114]
[531.58923340 146.72698975]
[516.64184570 145.47183228]
[501.69442749 144.21665955]
[495.60003662 155.36564636]
[485.69085693 163.39328003]
[473.43008423 167.06838989]
[460.64566040 165.80586243]
[449.25778198 159.75953674]
[440.99044800 149.80442810]
[437.11047363 137.41029358]
[422.22875977 135.53028870]
[407.34704590 133.65028381]
[392.42922974 132.08236694]
[377.48181152 130.82719421]
[366.30657959 140.60725403]
[351.12991333 139.54725647]
[340.94747925 127.75932312]
[326.00006104 126.50415039]
[311.05267334 125.24898529]
[296.10528564 123.99382019]
[287.71691895 136.30238342]
[274.20397949 142.80284119]
[259.15209961 141.65916443]
[246.61131287 133.07864380]
[240.00611877 119.28303528]
[225.05873108 118.02787018]
[210.11134338 116.77270508]
[195.16394043 115.51753235]
[183.98869324 125.29758453]
[168.81202698 124.23760223]
[158.62959290 112.44966125]
[143.68218994 111.19449615]
[128.73480225 109.93932343]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[2 30]
[3 29]
[4 28]
[5 27]
[6 26]
[11 23]
[12 22]
[13 21]
[14 20]
[33 70]
[34 69]
[35 68]
[36 67]
[37 66]
[38 65]
[39 64]
[43 59]
[44 58]
[48 55]
[49 54]
[80 149]
[81 148]
[82 147]
[85 144]
[86 143]
[87 142]
[88 141]
[93 136]
[94 135]
[95 134]
[96 133]
[99 130]
[100 129]
[103 128]
[104 127]
[105 126]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
