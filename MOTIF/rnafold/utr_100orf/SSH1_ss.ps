%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:00:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGGCCCCGGGCCCGGCCCGGGCGGCGGUGGCGGUGGCGGCUCUAGCUCGAGACGUCUGUGGCGCCCUCGCACCGCGCCGCAGCCAUGGCCCUGGUGACCCUGCAGCGCUCGCCCACGCCCAGCGCCGCCUCCUCCUCGGCCAGCAACAGCGAGUUGGAGGCUGGCAGCGAAGAAGAUCGAAAAU\
) } def
/len { sequence length } bind def

/coor [
[73.13021851 86.46531677]
[61.83885956 76.59085083]
[50.54750061 66.71637726]
[39.25614166 56.84189987]
[27.96478462 46.96742630]
[16.67342567 37.09295654]
[5.38206673 27.21848297]
[-9.42931652 29.58975220]
[-17.07356644 42.49577713]
[-24.71781540 55.40180206]
[-32.36206436 68.30782318]
[-40.00631332 81.21384430]
[-47.65056610 94.11987305]
[-55.29481506 107.02589417]
[-58.16442108 123.73522186]
[-75.01512909 125.60337067]
[-81.47500610 109.92834473]
[-68.20083618 99.38164520]
[-60.55658722 86.47562408]
[-52.91233826 73.56959534]
[-45.26808929 60.66357422]
[-37.62384033 47.75754929]
[-29.97958946 34.85152817]
[-22.33534050 21.94550323]
[-15.43474579 15.55641365]
[-7.20436573 12.33117962]
[-15.06320572 -0.44530767]
[-22.92204475 -13.22179508]
[-30.78088570 -25.99828339]
[-44.60147476 -33.69905090]
[-44.67921448 -48.59345245]
[-52.53805161 -61.36994171]
[-60.39689255 -74.14643097]
[-68.36220551 -86.85681152]
[-76.43344116 -99.50019073]
[-91.60691833 -103.02204895]
[-99.61219025 -115.95922089]
[-96.16112518 -130.40310669]
[-104.23236084 -143.04647827]
[-112.30359650 -155.68986511]
[-120.37483215 -168.33325195]
[-128.55142212 -180.90875244]
[-136.83279419 -193.41551208]
[-140.82818604 -195.22802734]
[-143.73594666 -197.95079041]
[-145.40289307 -201.12608337]
[-145.84164429 -204.29374695]
[-145.21684265 -207.04585266]
[-152.64436340 -220.07780457]
[-160.07189941 -233.10975647]
[-175.04981995 -237.38754272]
[-182.39674377 -250.70960999]
[-178.22622681 -264.96240234]
[-185.65374756 -277.99438477]
[-197.87611389 -282.15518188]
[-203.79066467 -293.17880249]
[-200.70263672 -304.88748169]
[-207.91137695 -318.04171753]
[-215.12010193 -331.19595337]
[-246.12292480 -335.48324585]
[-256.18469238 -346.60800171]
[-266.24645996 -357.73278809]
[-276.30822754 -368.85757446]
[-286.36999512 -379.98236084]
[-296.43176270 -391.10714722]
[-306.49353027 -402.23193359]
[-316.55532837 -413.35671997]
[-331.75836182 -410.73553467]
[-345.95617676 -416.77087402]
[-354.61831665 -429.53689575]
[-354.98065186 -444.95999146]
[-346.92761230 -458.11874390]
[-333.02890015 -464.81417847]
[-317.71951294 -462.90988159]
[-305.88464355 -453.01342773]
[-301.30075073 -438.28280640]
[-305.43054199 -423.41848755]
[-295.36877441 -412.29370117]
[-285.30697632 -401.16891479]
[-275.24520874 -390.04412842]
[-265.18344116 -378.91934204]
[-255.12167358 -367.79455566]
[-245.05990601 -356.66979980]
[-234.99813843 -345.54501343]
[-221.23779297 -351.51602173]
[-222.48963928 -366.46368408]
[-223.74147034 -381.41137695]
[-224.99330139 -396.35903931]
[-237.22257996 -406.37005615]
[-238.70797729 -422.10437012]
[-228.56823730 -434.22714233]
[-212.81907654 -435.54608154]
[-200.80421448 -425.27874756]
[-199.65184021 -409.51651001]
[-210.04563904 -397.61087036]
[-208.79379272 -382.66320801]
[-207.54196167 -367.71554565]
[-206.29013062 -352.76785278]
[-201.96585083 -338.40469360]
[-194.75712585 -325.25045776]
[-187.54840088 -312.09619141]
[-172.08366394 -303.81900024]
[-172.62179565 -285.42190552]
[-165.19425964 -272.38995361]
[-150.80577087 -268.71481323]
[-143.08755493 -255.60435486]
[-147.03993225 -240.53729248]
[-139.61241150 -227.50532532]
[-132.18489075 -214.47337341]
[-124.32604980 -201.69688416]
[-116.04467010 -189.19013977]
[-109.71778870 -185.34120178]
[-107.73144531 -176.40449524]
[-99.66020966 -163.76110840]
[-91.58897400 -151.11772156]
[-83.51773834 -138.47433472]
[-68.96315002 -135.52482605]
[-60.59766388 -122.81761932]
[-63.79005814 -107.57142639]
[-55.71882629 -94.92804718]
[-49.45713425 -90.97392273]
[-47.62040710 -82.00527191]
[-39.76156616 -69.22878265]
[-31.90272522 -56.45229340]
[-18.64425278 -49.66538620]
[-18.00439644 -33.85712433]
[-10.14555740 -21.08063507]
[-2.28671765 -8.30414772]
[5.57212210 4.47234011]
[15.25653934 15.92712307]
[26.54789925 25.80159569]
[37.83925629 35.67607117]
[49.13061523 45.55054092]
[60.42197418 55.42501450]
[71.71333313 65.29949188]
[83.00469208 75.17395782]
[104.50682831 66.34672546]
[128.82371521 75.51232147]
[141.67118835 101.21646881]
[155.48094177 107.07230377]
[169.29069519 112.92814636]
[183.10043335 118.78398132]
[196.91018677 124.63982391]
[210.71994019 130.49566650]
[225.22276306 124.81184387]
[239.14439392 130.94721985]
[244.47366333 144.80848694]
[258.28341675 150.66432190]
[272.09317017 156.52015686]
[285.90292358 162.37599182]
[301.25482178 157.71781921]
[314.38623047 166.93440247]
[315.22387695 182.95558167]
[303.12515259 193.49125671]
[287.37118530 190.45938110]
[280.04705811 176.18574524]
[266.23733521 170.32991028]
[252.42756653 164.47407532]
[238.61782837 158.61822510]
[224.94915771 164.42366028]
[210.86068726 158.68173218]
[204.86408997 144.30540466]
[191.05435181 138.44956970]
[177.24459839 132.59373474]
[163.43484497 126.73789215]
[149.62510681 120.88205719]
[135.81535339 115.02621460]
[130.46792603 120.28501892]
[134.22904968 134.80583191]
[119.77307129 130.80262756]
[114.42565155 136.06143188]
[120.04991150 149.96710205]
[125.67417145 163.87277222]
[140.32040405 169.81108093]
[146.40080261 184.39889526]
[140.30798340 198.98152161]
[125.65670776 204.90734863]
[111.13931274 198.66069031]
[105.36871338 183.94758606]
[111.76850128 169.49703979]
[106.14424133 155.59136963]
[100.51998138 141.68569946]
[88.92296600 138.46832275]
[79.18871307 132.24038696]
[72.03044891 123.78634644]
[67.87361145 114.03604126]
[66.83529663 103.96758270]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 136]
[2 135]
[3 134]
[4 133]
[5 132]
[6 131]
[7 130]
[8 24]
[9 23]
[10 22]
[11 21]
[12 20]
[13 19]
[14 18]
[26 129]
[27 128]
[28 127]
[29 126]
[31 124]
[32 123]
[33 122]
[34 120]
[35 119]
[38 116]
[39 115]
[40 114]
[41 113]
[42 111]
[43 110]
[48 109]
[49 108]
[50 107]
[53 104]
[54 103]
[57 101]
[58 100]
[59 99]
[60 84]
[61 83]
[62 82]
[63 81]
[64 80]
[65 79]
[66 78]
[67 77]
[85 98]
[86 97]
[87 96]
[88 95]
[139 167]
[140 166]
[141 165]
[142 164]
[143 163]
[144 162]
[147 159]
[148 158]
[149 157]
[150 156]
[171 182]
[172 181]
[173 180]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
