%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:27:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACGCGCUCCCUGCGGGGCGGGCGGCAACCUCCAUGCGGCCUCGUCCACGCUCAGCACCGGGGAAGCCGAGGCGGAGAAGCCGCGCGCGCCUCAGAAGCUCCCGGACGCCCAGCGGCGGCGCGAGCGGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[106.02239227 235.28070068]
[91.01278687 240.94561768]
[77.29966736 232.61915588]
[75.40257263 216.68865967]
[86.77678680 205.37464905]
[88.16081238 190.43862915]
[89.54483795 175.50262451]
[90.75626373 160.55162048]
[91.79492950 145.58763123]
[92.83359528 130.62362671]
[77.41694641 118.13367462]
[73.52800751 100.32270050]
[80.93717957 85.44284821]
[72.46013641 73.06788635]
[63.98308945 60.69292450]
[49.80085754 53.68044662]
[48.99146652 38.80784988]
[40.51441956 26.43288803]
[26.33218765 19.42041206]
[25.52279472 4.54781437]
[17.04574966 -7.82714796]
[8.56870270 -20.20211029]
[-5.61353064 -27.21458626]
[-6.42292213 -42.08718491]
[-14.89996815 -54.46214676]
[-23.37701416 -66.83710480]
[-31.85406113 -79.21207428]
[-40.33110809 -91.58703613]
[-53.82046127 -92.53555298]
[-64.13175964 -100.97947693]
[-67.61769867 -113.64073944]
[-63.21421814 -125.80550385]
[-71.40316772 -138.37297058]
[-79.59211731 -150.94042969]
[-87.78106689 -163.50788879]
[-93.86054230 -149.79512024]
[-108.31044769 -145.77018738]
[-120.60367584 -154.36534119]
[-121.78429413 -169.31880188]
[-110.99220276 -179.73660278]
[-96.09098053 -178.02992249]
[-102.77706146 -191.45736694]
[-109.46313477 -204.88482666]
[-116.14920807 -218.31227112]
[-122.83528900 -231.73971558]
[-129.52136230 -245.16717529]
[-136.66859436 -258.35494995]
[-144.26838684 -271.28717041]
[-151.86819458 -284.21942139]
[-165.53080750 -292.19711304]
[-165.30841064 -307.09005737]
[-172.90821838 -320.02230835]
[-188.36479187 -321.39132690]
[-200.04258728 -331.60937500]
[-203.45126343 -346.74743652]
[-197.28010559 -360.98458862]
[-183.90206909 -368.84637451]
[-168.46125793 -367.30975342]
[-156.89498901 -356.96560669]
[-153.65074158 -341.79147339]
[-159.97596741 -327.62210083]
[-152.37617493 -314.68984985]
[-139.25714111 -307.63717651]
[-138.93594360 -291.81924438]
[-131.33615112 -278.88699341]
[-123.73634338 -265.95474243]
[-120.34053040 -264.72671509]
[-117.39732361 -261.74145508]
[-115.74993134 -257.24295044]
[-116.09391022 -251.85324097]
[-109.40783691 -238.42579651]
[-102.72176361 -224.99835205]
[-96.03568268 -211.57089233]
[-89.34960938 -198.14344788]
[-82.66353607 -184.71600342]
[-75.21360016 -171.69683838]
[-67.02465057 -159.12937927]
[-58.83570480 -146.56192017]
[-50.64675522 -133.99444580]
[-34.09343338 -131.26246643]
[-24.41146851 -117.15067291]
[-27.95614433 -100.06407928]
[-19.47909927 -87.68911743]
[-11.00205231 -75.31415558]
[-2.52500606 -62.93919373]
[5.95204020 -50.56423187]
[19.52793884 -44.43689346]
[20.94366455 -28.67915535]
[29.42071152 -16.30419350]
[37.89775848 -3.92923188]
[51.47365570 2.19810534]
[52.88938141 17.95584297]
[61.36642838 30.33080482]
[74.94232941 36.45814133]
[76.35805511 52.21587753]
[84.83509827 64.59084320]
[93.31214905 76.96580505]
[111.90673828 76.35470581]
[127.15409851 89.92630005]
[129.04341125 112.06832886]
[141.79666138 119.96480560]
[154.54992676 127.86128998]
[167.30317688 135.75776672]
[183.10948181 136.44424438]
[189.85726929 149.72267151]
[202.61051941 157.61915588]
[215.38156128 155.43324280]
[225.86218262 162.34535217]
[228.69335938 174.16368103]
[241.26081848 182.35263062]
[253.82827759 190.54156494]
[266.39575195 198.73051453]
[282.79132080 199.07322693]
[290.45413208 213.57196045]
[281.50134277 227.31167603]
[265.14282227 226.15812683]
[258.20678711 211.29798889]
[245.63932800 203.10903931]
[233.07186890 194.92008972]
[220.50440979 186.73114014]
[202.99380493 186.77352905]
[194.71403503 170.37240601]
[181.96078491 162.47593689]
[167.06668091 162.35426331]
[159.40669250 148.51103210]
[146.65344238 140.61454773]
[133.90017700 132.71806335]
[121.14692688 124.82157898]
[107.79759216 131.66229248]
[106.75892639 146.62629700]
[105.72026062 161.59028625]
[108.26422882 170.45899963]
[104.48085022 176.88664246]
[103.09682465 191.82266235]
[101.71279907 206.75866699]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 135]
[6 134]
[7 133]
[8 131]
[9 130]
[10 129]
[13 97]
[14 96]
[15 95]
[17 93]
[18 92]
[20 90]
[21 89]
[22 88]
[24 86]
[25 85]
[26 84]
[27 83]
[28 82]
[32 79]
[33 78]
[34 77]
[35 76]
[41 75]
[42 74]
[43 73]
[44 72]
[45 71]
[46 70]
[47 66]
[48 65]
[49 64]
[51 62]
[52 61]
[100 128]
[101 127]
[102 126]
[103 125]
[105 123]
[106 122]
[109 120]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
