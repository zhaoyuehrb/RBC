%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:10:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCUCGGUCGCGGCUGCCUGUCUGCUCCGGCAGCACCAUGUCGCUCUUGGUCGUCAGCAUGGCGUGUGUUGGGUUCUUCUUGCUGCAGGGGGCCUGGCCACAUGAGGGAGUCCACAGAAAACCUUCCCUCCUGGCCC\
) } def
/len { sequence length } bind def

/coor [
[114.00827789 128.44213867]
[109.18036652 114.24081421]
[102.07952881 116.65495300]
[97.09107208 130.80116272]
[104.13901520 144.94691467]
[99.04095459 159.90637207]
[84.82148743 166.80435181]
[69.91676331 161.54843140]
[63.16949844 147.25682068]
[68.58271790 132.40850830]
[82.94486237 125.81271362]
[87.93331909 111.66650391]
[85.23590851 96.91102600]
[75.56526947 85.44461060]
[65.89462280 73.97819519]
[56.22398758 62.51177597]
[41.41227722 56.95085144]
[39.12149429 42.23345947]
[29.45085526 30.76704216]
[19.78021622 19.30062485]
[10.10957623 7.83420753]
[0.43893656 -3.63220954]
[-12.37611580 -5.51895857]
[-20.19233704 -15.33935738]
[-19.21890640 -27.44959068]
[-28.62794113 -39.13162994]
[-39.05323410 -49.91649246]
[-50.40963745 -59.71609116]
[-61.76604080 -69.51568604]
[-73.12244415 -79.31528473]
[-84.47884369 -89.11488342]
[-95.83525085 -98.91448212]
[-107.19165039 -108.71408081]
[-118.65806580 -118.38471985]
[-130.23303223 -127.92517090]
[-145.80329895 -130.73188782]
[-150.70332336 -144.79740906]
[-162.27828979 -154.33786011]
[-173.85325623 -163.87831116]
[-185.42822266 -173.41874695]
[-197.00318909 -182.95919800]
[-208.57815552 -192.49964905]
[-226.77200317 -195.07421875]
[-232.35214233 -211.67443848]
[-244.13975525 -220.95085144]
[-259.03344727 -216.59681702]
[-273.63055420 -221.86030579]
[-282.31817627 -234.71739197]
[-281.75576782 -250.22427368]
[-272.15957642 -262.41824341]
[-257.21951294 -266.61044312]
[-242.68038940 -261.18890381]
[-234.13273621 -248.23834229]
[-234.86334229 -232.73847961]
[-223.07571411 -223.46205139]
[-210.97724915 -224.57228088]
[-201.06915283 -216.86752319]
[-199.03771973 -204.07461548]
[-187.46275330 -194.53416443]
[-175.88777161 -184.99371338]
[-164.31280518 -175.45327759]
[-152.73783875 -165.91282654]
[-141.16287231 -156.37237549]
[-126.42053986 -154.24806213]
[-120.69258881 -139.50013733]
[-109.11762238 -129.95968628]
[-101.89457703 -128.11721802]
[-97.39205170 -120.07048798]
[-86.03565216 -110.27088928]
[-74.67924500 -100.47129059]
[-63.32284546 -90.67169189]
[-51.96644211 -80.87209320]
[-40.61003876 -71.07249451]
[-29.25363731 -61.27289581]
[-30.65648842 -76.20715332]
[-23.16368866 -89.20169067]
[-9.53575611 -95.46901703]
[5.20646858 -92.70011902]
[15.63161278 -81.91510773]
[17.89881516 -67.08744049]
[11.17278576 -53.67996216]
[-2.06845164 -46.63228989]
[-16.94589996 -48.54066467]
[-7.53686571 -36.85862732]
[9.12534809 -31.46643257]
[11.90535355 -13.30284977]
[21.57599449 -1.83643222]
[31.24663353 9.62998486]
[40.91727448 21.09640312]
[50.58791351 32.56282043]
[64.70790863 37.30359268]
[67.69040680 52.84113693]
[77.36104584 64.30755615]
[87.03168488 75.77397156]
[96.70232391 87.24038696]
[114.47214508 78.25786591]
[138.65721130 94.42141724]
[151.23419189 102.59574127]
[163.81117249 110.77006531]
[176.38815308 118.94438934]
[188.96513367 127.11871338]
[199.56163025 124.23054504]
[209.77391052 127.62737274]
[216.25762939 135.93940735]
[217.03291321 146.23136902]
[229.22767639 154.96565247]
[241.42242432 163.69995117]
[253.61718750 172.43424988]
[265.81195068 181.16854858]
[278.00671387 189.90283203]
[290.20144653 198.63713074]
[303.31677246 190.89704895]
[318.44708252 189.16706848]
[332.97103882 193.74688721]
[344.37225342 203.84304810]
[350.67535400 217.70632935]
[350.78836060 232.93482971]
[344.69165039 246.89012146]
[333.44152832 257.15435791]
[318.98715210 261.94918823]
[303.83279419 260.44390869]
[290.60409546 252.89930725]
[281.59295654 240.62252808]
[278.36065674 225.74058533]
[281.46716309 210.83189392]
[269.27239990 202.09759521]
[257.07763672 193.36329651]
[244.88288879 184.62901306]
[232.68814087 175.89471436]
[220.49337769 167.16041565]
[208.29862976 158.42611694]
[189.01571655 158.03887939]
[180.79081726 139.69569397]
[168.21383667 131.52136230]
[155.63685608 123.34704590]
[143.05987549 115.17272186]
[130.48289490 106.99839783]
[123.38204956 109.41253662]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 12]
[4 11]
[13 95]
[14 94]
[15 93]
[16 92]
[18 90]
[19 89]
[20 88]
[21 87]
[22 86]
[25 84]
[26 83]
[27 74]
[28 73]
[29 72]
[30 71]
[31 70]
[32 69]
[33 68]
[34 66]
[35 65]
[37 63]
[38 62]
[39 61]
[40 60]
[41 59]
[42 58]
[44 55]
[45 54]
[97 137]
[98 136]
[99 135]
[100 134]
[101 133]
[105 131]
[106 130]
[107 129]
[108 128]
[109 127]
[110 126]
[111 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
