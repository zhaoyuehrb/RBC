%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:29:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAGACUAAACCCAGAGCCUCAAAGCAGUGCACUCCGUGAAGGCAAAGAGAACACGCUGCAAAAGGCUUUCCAAGAAUCCUCGACAUGGCAAGGAGGAGCUCGUUCCAGUCGUGUCAGAUAAUAUCCCUGUUCACUUUUGCCGUUGGAGUCAAUAUCUGCUUAGGAUUCACUGCACAUCGAAUUA\
) } def
/len { sequence length } bind def

/coor [
[95.55700684 802.03686523]
[81.43996429 796.83843994]
[68.51863861 789.13427734]
[57.23310852 779.18682861]
[47.96775818 767.33489990]
[41.03816986 753.98217773]
[36.68035126 739.58343506]
[35.04273987 724.62908936]
[36.18110275 709.62847900]
[40.05667114 695.09246826]
[46.53744125 681.51623535]
[55.40268707 669.36212158]
[66.35046387 659.04412842]
[79.00788116 650.91369629]
[92.94384003 645.24768066]
[107.68368530 642.23913574]
[107.43170166 627.24121094]
[107.17971039 612.24334717]
[106.80175781 597.24810791]
[106.29785156 582.25659180]
[105.79394531 567.26501465]
[102.96363831 563.39465332]
[102.54868317 557.70037842]
[105.53349304 551.76324463]
[105.53349304 536.76324463]
[105.53349304 521.76324463]
[105.53349304 506.76324463]
[105.53349304 491.76324463]
[105.53349304 476.76324463]
[105.02958679 461.77172852]
[104.02234650 446.80557251]
[100.42874908 440.32940674]
[103.12605286 431.57992554]
[102.37036896 416.59896851]
[101.61469269 401.61804199]
[100.85901642 386.63708496]
[100.10334015 371.65612793]
[99.34765625 356.67517090]
[89.40747833 351.02581787]
[83.37446594 341.17272949]
[82.85118103 329.51107788]
[88.08390808 318.94210815]
[97.87244415 312.15142822]
[97.62045288 297.15353394]
[97.36846924 282.15567017]
[97.11647797 267.15777588]
[96.86449432 252.15989685]
[96.61250305 237.16201782]
[96.36051941 222.16412354]
[86.53100586 207.63705444]
[95.57494354 191.60791016]
[95.07103729 176.61637878]
[94.56713104 161.62483215]
[94.06323242 146.63330078]
[93.55932617 131.64176941]
[66.55300903 116.35076141]
[62.22593307 81.25643158]
[49.27775192 73.68380737]
[36.32957458 66.11117554]
[21.10657310 70.35802460]
[7.38053036 62.52404022]
[3.29486680 47.25698853]
[11.27353382 33.61454010]
[26.58292961 29.69051743]
[40.14025879 37.81297302]
[43.90220261 53.16300201]
[56.85037994 60.73563004]
[69.79856110 68.30825806]
[76.67217255 65.30769348]
[68.93959045 52.45439911]
[61.20700836 39.60110474]
[48.26869202 32.01163864]
[43.73361969 17.71362877]
[49.93219376 4.05428457]
[63.67920303 -1.94736695]
[77.91056824 2.79269814]
[85.31333160 15.83873749]
[82.08260345 30.48820496]
[86.25100708 44.89738464]
[90.41941071 59.30656052]
[97.29302979 56.30599594]
[100.54303741 41.66231537]
[99.34671021 32.58500671]
[103.97260284 26.80090523]
[107.46815491 12.21388721]
[110.96371460 -2.37313080]
[114.45926666 -16.96014977]
[117.95481873 -31.54716682]
[121.45037842 -46.13418579]
[124.94593048 -60.72120285]
[128.44148254 -75.30821991]
[122.37126160 -86.70416260]
[125.59748840 -98.79173279]
[135.85983276 -105.22036743]
[139.59994507 -119.74660492]
[143.34005737 -134.27284241]
[147.08016968 -148.79908752]
[137.83914185 -161.41404724]
[138.92042542 -177.01420593]
[149.81347656 -188.23362732]
[165.37492371 -189.77485657]
[178.25712585 -180.91017151]
[182.37751770 -165.82519531]
[175.79055786 -151.64259338]
[161.60641479 -145.05897522]
[157.86630249 -130.53273010]
[154.12619019 -116.00650024]
[150.38607788 -101.48026276]
[156.00460815 -84.86437988]
[143.02850342 -71.81266785]
[139.53294373 -57.22565079]
[136.03739929 -42.63862991]
[132.54183960 -28.05161285]
[129.04627991 -13.46459484]
[125.55072784 1.12242353]
[122.05517578 15.70944214]
[118.55962372 30.29645920]
[115.18672180 44.91232681]
[111.93670654 59.55600739]
[120.58314514 64.22841644]
[127.73402405 70.66095734]
[133.05436707 78.42082977]
[136.32669067 87.01800537]
[137.45883179 95.93566132]
[136.48414612 104.66101074]
[133.55444336 112.71475220]
[128.92620850 119.67739868]
[122.94127655 125.21104431]
[116.00317383 129.07548523]
[108.55085754 131.13786316]
[109.05476379 146.12939453]
[109.55867004 161.12094116]
[110.06256866 176.11247253]
[110.56647491 191.10400391]
[119.44518280 200.47862244]
[119.54496002 212.98893738]
[111.35839844 221.91213989]
[111.61038971 236.91001892]
[111.86237335 251.90791321]
[112.11436462 266.90579224]
[112.36635590 281.90368652]
[112.61833954 296.90155029]
[112.87033081 311.89944458]
[126.97919464 324.51840210]
[127.39876556 343.12359619]
[114.32861328 355.91949463]
[115.08428955 370.90045166]
[115.83996582 385.88140869]
[116.59564972 400.86236572]
[117.35132599 415.84329224]
[118.10700226 430.82424927]
[118.98849487 445.79833984]
[119.99573517 460.76446533]
[122.57213593 464.31835938]
[123.75171661 468.12521362]
[123.62800598 471.71087646]
[122.44010162 474.68130493]
[120.53349304 476.76324463]
[120.53349304 491.76324463]
[120.53349304 506.76324463]
[120.53349304 521.76324463]
[120.53349304 536.76324463]
[120.53349304 551.76324463]
[120.78547668 566.76110840]
[121.28938293 581.75268555]
[121.79328918 596.74420166]
[125.21517181 605.23651123]
[122.17759705 611.99133301]
[122.42958069 626.98925781]
[122.68157196 641.98712158]
[137.51417542 644.49884033]
[151.63259888 649.69348145]
[164.55601501 657.39416504]
[175.84422302 667.33856201]
[185.11276245 679.18798828]
[192.04595947 692.53881836]
[196.40765381 706.93640137]
[198.04930115 721.89031982]
[196.91497803 736.89123535]
[193.04333496 751.42828369]
[186.56620789 765.00622559]
[177.70423889 777.16271973]
[166.75926208 787.48370361]
[154.10403442 795.61755371]
[140.16960144 801.28729248]
[125.43055725 804.29986572]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 170]
[17 169]
[18 168]
[19 166]
[20 165]
[21 164]
[24 163]
[25 162]
[26 161]
[27 160]
[28 159]
[29 158]
[30 153]
[31 152]
[33 151]
[34 150]
[35 149]
[36 148]
[37 147]
[38 146]
[43 143]
[44 142]
[45 141]
[46 140]
[47 139]
[48 138]
[49 137]
[51 134]
[52 133]
[53 132]
[54 131]
[55 130]
[57 68]
[58 67]
[59 66]
[81 119]
[82 118]
[84 117]
[85 116]
[86 115]
[87 114]
[88 113]
[89 112]
[90 111]
[91 110]
[94 108]
[95 107]
[96 106]
[97 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
