%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:23:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUGGGCCCUGCUGUCCUGGGCCUCAGCCUCUGGGCUCUCCUGCACCCUGGGACGGGGGCCCCAUUGUGCCUGUCACAGCAACUUAGGAUGAAGGGGG\
) } def
/len { sequence length } bind def

/coor [
[-28.60838127 193.06591797]
[-47.98511887 191.96656799]
[-64.21337128 181.46049500]
[-77.04544830 189.22824097]
[-89.87752533 196.99598694]
[-102.70960236 204.76373291]
[-115.41931915 212.73010254]
[-128.00361633 220.89315796]
[-140.58790588 229.05622864]
[-153.17219543 237.21928406]
[-165.75648499 245.38235474]
[-165.58822632 260.80880737]
[-173.80618286 273.86517334]
[-187.78805542 280.38519287]
[-203.07226562 278.28839111]
[-214.78167725 268.24383545]
[-219.17985535 253.45669556]
[-214.86337280 238.64550781]
[-203.20959473 228.53645325]
[-187.93719482 226.35530090]
[-173.91955566 232.79806519]
[-161.33525085 224.63499451]
[-148.75096130 216.47193909]
[-136.16667175 208.30886841]
[-123.58238220 200.14581299]
[-119.61396790 193.75227356]
[-110.47734070 191.93165588]
[-97.64527130 184.16390991]
[-84.81319427 176.39616394]
[-71.98111725 168.62841797]
[-74.20687103 157.95790100]
[-73.28622437 147.07522583]
[-69.28391266 136.89050293]
[-62.52288055 128.25894165]
[-53.55828857 121.90911865]
[-43.13191223 118.38141632]
[-32.11078262 117.98209381]
[-21.41508675 120.75671387]
[-11.94133854 126.48533630]
[-4.48723078 134.69987488]
[9.39317608 129.01354980]
[23.27358246 123.32722473]
[37.15399170 117.64089966]
[51.03439713 111.95457458]
[59.87858963 99.97002411]
[75.58184814 101.89833069]
[89.46224976 96.21200562]
[103.25254822 90.31050110]
[116.94939423 84.19524384]
[129.90072632 76.62800598]
[141.95317078 67.69837189]
[154.00563049 58.76873779]
[160.48794556 44.33647537]
[175.32035828 42.97671509]
[187.37280273 34.04708099]
[199.42526245 25.11744881]
[211.47770691 16.18781471]
[223.53016663 7.25818253]
[235.58262634 -1.67145061]
[242.06494141 -16.10371208]
[256.89733887 -17.46347237]
[268.94979858 -26.39310646]
[271.02816772 -42.06013870]
[283.62667847 -51.60230637]
[299.27087402 -49.35840607]
[308.67929077 -36.65970612]
[306.27014160 -21.04012299]
[293.47265625 -11.76647377]
[277.87942505 -14.34065151]
[265.82696533 -5.41101885]
[260.20672607 8.38253593]
[244.51225281 10.38100338]
[232.45980835 19.31063652]
[220.40734863 28.24026871]
[208.35488892 37.16990280]
[196.30244446 46.09953690]
[184.24998474 55.02916718]
[178.62974548 68.82272339]
[162.93525696 70.82118988]
[150.88281250 79.75082397]
[138.83035278 88.68045807]
[153.43499756 92.10162354]
[162.63090515 103.95216370]
[162.31838989 118.94890594]
[152.63677979 130.40606689]
[137.90229797 133.21585083]
[124.68380737 126.12560272]
[118.87433624 112.29628754]
[123.06465149 97.89209747]
[109.36779785 104.00734711]
[103.75943756 110.01078796]
[95.14857483 110.09240723]
[81.26817322 115.77873993]
[71.43115997 128.17001343]
[56.72072220 125.83498383]
[42.84031677 131.52131653]
[28.95990944 137.20764160]
[15.07950211 142.89396667]
[1.19909525 148.58029175]
[-0.25008693 168.16174316]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 30]
[4 29]
[5 28]
[6 27]
[7 25]
[8 24]
[9 23]
[10 22]
[11 21]
[40 99]
[41 98]
[42 97]
[43 96]
[44 95]
[46 93]
[47 92]
[48 90]
[49 89]
[50 81]
[51 80]
[52 79]
[54 77]
[55 76]
[56 75]
[57 74]
[58 73]
[59 72]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
