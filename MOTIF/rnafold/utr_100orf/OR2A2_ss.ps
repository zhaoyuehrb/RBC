%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:48:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAGGCAACCAGACAUGGAUCACAGACAUCACCCUGCUGGGAUUCCAGGUUGGUCCAGCACUGGCGAUUCUCCUCUGUGGACUCUUCUCUGUCUUCU\
) } def
/len { sequence length } bind def

/coor [
[56.14210129 461.04751587]
[43.25576782 450.03033447]
[50.27512741 434.59771729]
[51.20767212 419.62673950]
[52.14021683 404.65576172]
[53.07275772 389.68478394]
[54.00530243 374.71380615]
[54.93784714 359.74279785]
[55.87039185 344.77182007]
[56.80293655 329.80084229]
[49.24319839 322.60873413]
[46.93646240 312.20520020]
[50.90953827 302.07873535]
[60.04012680 295.76696777]
[61.90160751 280.88293457]
[63.76308823 265.99887085]
[61.74081421 262.90606689]
[61.22240829 258.62985229]
[62.77002716 253.94049072]
[66.55494690 249.83906555]
[69.79521942 235.19322205]
[73.03548431 220.54737854]
[75.81870270 205.80784607]
[78.14217377 190.98889160]
[80.46564484 176.16993713]
[82.78911591 161.35098267]
[85.11258698 146.53201294]
[87.43606567 131.71305847]
[89.75953674 116.89410400]
[80.33049774 98.15920258]
[93.07202148 81.49916077]
[93.53852081 66.50641632]
[94.00502014 51.51367188]
[86.70064545 37.47954559]
[94.83001709 24.99905968]
[95.29651642 10.00631428]
[86.19077301 -5.90382433]
[95.79942322 -20.49750328]
[95.79942322 -35.49750137]
[95.79942322 -50.49750137]
[95.79942322 -65.49750519]
[95.79942322 -80.49750519]
[95.79942322 -95.49750519]
[95.79942322 -110.49750519]
[92.98984528 -115.31970215]
[92.49175262 -120.23268127]
[93.92165375 -124.29592896]
[96.56428528 -126.87886810]
[97.96197510 -141.81361389]
[99.35966492 -156.74835205]
[94.81550598 -173.08197021]
[109.25285339 -181.97012329]
[121.79031372 -170.55747986]
[114.29440308 -155.35066223]
[112.89671326 -140.41592407]
[111.49902344 -125.48117828]
[110.79942322 -110.49750519]
[110.79942322 -95.49750519]
[110.79942322 -80.49750519]
[110.79942322 -65.49750519]
[110.79942322 -50.49750137]
[110.79942322 -35.49750137]
[110.79942322 -20.49750328]
[119.18180847 -11.62318325]
[119.19891357 0.98729974]
[110.28926086 10.47281265]
[109.82276154 25.46555710]
[117.16050720 38.42729950]
[108.99776459 51.98016739]
[108.53126526 66.97291565]
[108.06476593 81.96566010]
[114.64526367 86.74125671]
[118.74499512 93.76276398]
[119.66950226 101.84079742]
[117.26219177 109.60701752]
[111.93082428 115.74590302]
[104.57849121 119.21758270]
[102.25502014 134.03652954]
[99.93154907 148.85549927]
[97.60807037 163.67445374]
[95.28459930 178.49340820]
[92.96112823 193.31236267]
[90.63765717 208.13131714]
[92.74577332 214.70208740]
[91.30509949 220.43220520]
[87.68132782 223.78764343]
[84.44105530 238.43348694]
[81.20079041 253.07933044]
[78.64713287 267.86035156]
[76.78565216 282.74441528]
[74.92417145 297.62844849]
[83.69739532 315.64553833]
[71.77391815 330.73339844]
[70.84137726 345.70437622]
[69.90883636 360.67535400]
[68.97628784 375.64633179]
[68.04374695 390.61730957]
[67.11119843 405.58831787]
[66.17865753 420.55929565]
[65.24610901 435.53027344]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 100]
[4 99]
[5 98]
[6 97]
[7 96]
[8 95]
[9 94]
[10 93]
[14 91]
[15 90]
[16 89]
[20 88]
[21 87]
[22 86]
[23 83]
[24 82]
[25 81]
[26 80]
[27 79]
[28 78]
[29 77]
[31 71]
[32 70]
[33 69]
[35 67]
[36 66]
[38 63]
[39 62]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[48 56]
[49 55]
[50 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
