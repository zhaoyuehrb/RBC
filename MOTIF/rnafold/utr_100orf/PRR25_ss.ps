%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:22:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCCGAACUGACCAGAAGCCCCCGUGCAGAGGUGGCUGCUGGGGACAGCCAGGUCACCCCAACACGGGUGGGGCAGCUGCACACCCCACUUACCACC\
) } def
/len { sequence length } bind def

/coor [
[74.42018127 141.78770447]
[79.11962128 127.54286957]
[89.70558929 116.91593933]
[78.85445404 127.27223969]
[68.00332642 137.62854004]
[73.83548737 151.64105225]
[74.20800781 166.81423950]
[69.07050323 181.09605408]
[59.11778259 192.55502319]
[45.69586563 199.64138794]
[30.61995506 201.39677429]
[15.92894936 197.58380127]
[3.60968280 188.71813965]
[-4.67176390 175.99877930]
[-7.79539347 161.14591980]
[-5.33876038 146.16828918]
[2.36589551 133.09149170]
[14.27658367 123.68405151]
[28.78248024 119.21824646]
[43.92178345 120.29804230]
[57.64702225 126.77741241]
[68.49815369 116.42111206]
[79.34928894 106.06481171]
[83.81393433 94.41956329]
[92.59799194 89.65647125]
[89.81477356 74.91694641]
[87.03155518 60.17741776]
[84.24834442 45.43788910]
[81.46512604 30.69835854]
[67.06426239 25.54449463]
[57.24149323 13.95096016]
[54.55844879 -0.90392584]
[59.63714600 -15.01288605]
[71.01941681 -24.62067223]
[68.23619843 -39.36019897]
[65.45298767 -54.09972763]
[62.66976929 -68.83925629]
[59.88655090 -83.57878876]
[57.10333633 -98.31831360]
[54.32011795 -113.05784607]
[51.07985306 -127.70368195]
[47.38566971 -142.24166870]
[43.69148254 -156.77964783]
[39.99729919 -171.31764221]
[28.17131042 -182.67889404]
[32.35961914 -198.53417969]
[48.25365829 -202.57293701]
[59.50299835 -190.64044189]
[54.53528595 -175.01182556]
[58.22946930 -160.47383118]
[61.92365265 -145.93585205]
[65.61783600 -131.39787292]
[69.34421539 -128.15675354]
[70.96239471 -122.47421265]
[69.05964661 -115.84105682]
[71.84286499 -101.10153198]
[74.62608337 -86.36199951]
[77.40929413 -71.62247467]
[80.19251251 -56.88294601]
[82.97573090 -42.14341736]
[85.75894165 -27.40388870]
[99.86096954 -22.60821724]
[109.73482513 -11.32269859]
[112.65338135 3.48771715]
[107.73457336 17.86485481]
[96.20465088 27.91514206]
[98.98786926 42.65467072]
[101.77108765 57.39419937]
[104.55430603 72.13372803]
[107.33751678 86.87326050]
[116.99917603 98.34724426]
[131.04971313 103.59914398]
[145.10025024 108.85103607]
[159.15078735 114.10293579]
[173.20132446 119.35483551]
[187.25186157 124.60672760]
[199.05111694 114.77447510]
[214.18841553 112.17492676]
[228.59190369 117.50736237]
[238.38713074 129.33737183]
[240.93920898 144.48275757]
[235.56166077 158.86946106]
[223.70100403 168.62756348]
[208.54769897 171.13215637]
[194.17791748 165.70953369]
[184.45704651 153.81834412]
[181.99996948 138.65727234]
[167.94943237 133.40536499]
[153.89889526 128.15347290]
[139.84835815 122.90157318]
[125.79781342 117.64968109]
[111.74727631 112.39778137]
[125.66066742 118.00292206]
[135.58544922 129.25009155]
[139.41571045 143.75282288]
[136.33876038 158.43383789]
[127.00744629 170.17805481]
[113.40176392 176.49354553]
[98.40861511 176.04022217]
[85.20932007 168.91430664]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 23]
[4 22]
[5 21]
[25 70]
[26 69]
[27 68]
[28 67]
[29 66]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[39 56]
[40 55]
[41 52]
[42 51]
[43 50]
[44 49]
[71 92]
[72 91]
[73 90]
[74 89]
[75 88]
[76 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
