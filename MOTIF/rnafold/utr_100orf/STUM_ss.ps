%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCUCGGCGCGGAGCCCGGAGCCCGCAGCCGACAGUCUCCUGCUCCCGUACGCUGGGCGCCAGCUCCGGCCGUGCUGCCCGGCUGCCUGAGAGCGCGCCCGGCCAUGGAGCCCUCGCACAAAGACGCCGAGACGGCGGCGGCGGCGGCGGCGGUGGCGGCGGCGGACCCCCGGGGGGCGUCCUCGUCCAGCGGGGUGGUGGUGC\
) } def
/len { sequence length } bind def

/coor [
[-30.53120232 103.14315033]
[-39.31092453 115.30524445]
[-48.09064865 127.46733093]
[-56.77738190 139.69601440]
[-65.37061310 151.99058533]
[-73.77536011 164.41476440]
[-81.98965454 176.96566772]
[-90.20395660 189.51658630]
[-98.41825867 202.06748962]
[-106.53661346 214.68066406]
[-114.55855560 227.35537720]
[-122.58049774 240.03009033]
[-130.60244751 252.70481873]
[-132.54885864 261.63360596]
[-138.84460449 265.51034546]
[-147.05891418 278.06124878]
[-145.19993591 293.99624634]
[-156.60119629 305.28298950]
[-172.51660156 303.26330566]
[-180.73722839 289.48648071]
[-174.95690918 274.52093506]
[-159.60981750 269.84695435]
[-151.39552307 257.29605103]
[-143.27716064 244.68286133]
[-135.25521851 232.00814819]
[-127.23326874 219.33343506]
[-119.21132660 206.65872192]
[-118.29009247 199.32270813]
[-110.96916199 193.85319519]
[-102.75486755 181.30227661]
[-94.54056549 168.75137329]
[-86.32626343 156.20046997]
[-86.40942383 151.42172241]
[-83.48880768 146.54078674]
[-77.66517639 143.39735413]
[-69.07194519 131.10278320]
[-67.81616211 123.81658173]
[-60.25273895 118.68760681]
[-51.47301483 106.52552032]
[-42.69329071 94.36342621]
[-48.16134262 83.92625427]
[-49.05893707 72.17769623]
[-45.23990250 61.03098679]
[-55.76531982 50.34381485]
[-66.29073334 39.65664291]
[-76.81615448 28.96947479]
[-87.34156799 18.28230476]
[-99.35414124 21.75775909]
[-111.63298798 19.80583382]
[-121.85624695 12.85779762]
[-128.11721802 2.28372765]
[-129.27989197 -9.87726879]
[-125.18460846 -21.31018448]
[-135.37921143 -32.31336975]
[-145.57380676 -43.31655502]
[-155.76841736 -54.31974030]
[-165.96301270 -65.32292175]
[-176.15762329 -76.32611084]
[-186.35221863 -87.32929230]
[-196.54682922 -98.33247375]
[-206.74142456 -109.33566284]
[-212.94038391 -111.65273285]
[-216.50135803 -116.08815002]
[-217.07283020 -120.83332825]
[-226.92713928 -132.14228821]
[-236.78144836 -143.45124817]
[-246.63574219 -154.76022339]
[-256.91397095 -165.68534851]
[-267.60113525 -176.21076965]
[-278.28829956 -186.73617554]
[-288.97546387 -197.26159668]
[-299.66262817 -207.78701782]
[-310.34982300 -218.31242371]
[-325.89886475 -216.65075684]
[-338.84930420 -225.41543579]
[-343.08636475 -240.46806335]
[-336.60940552 -254.70123291]
[-322.47668457 -261.39447021]
[-307.36120605 -257.38748169]
[-298.40002441 -244.57217407]
[-299.82440186 -228.99960327]
[-289.13720703 -218.47418213]
[-278.45004272 -207.94876099]
[-267.76287842 -197.42335510]
[-257.07571411 -186.89793396]
[-246.38853455 -176.37251282]
[-243.86860657 -191.15933228]
[-230.81314087 -198.54545593]
[-216.84069824 -193.08921814]
[-212.24537659 -178.81045532]
[-220.41276550 -166.22897339]
[-235.32678223 -164.61451721]
[-225.47247314 -153.30555725]
[-215.61817932 -141.99659729]
[-205.76387024 -130.68763733]
[-195.73825073 -119.53026581]
[-185.54364014 -108.52707672]
[-175.34904480 -97.52389526]
[-165.15443420 -86.52071381]
[-154.95983887 -75.51752472]
[-144.76522827 -64.51434326]
[-134.57063293 -53.51115799]
[-124.37602234 -42.50797272]
[-114.18141937 -31.50478745]
[-96.76610565 -34.41493607]
[-80.94954681 -26.21891403]
[-73.14830780 -10.02925587]
[-76.65439606 7.75688791]
[-66.12898254 18.44405746]
[-55.60356522 29.13122749]
[-45.07814789 39.81839752]
[-34.55273438 50.50556946]
[-23.34709740 46.66599274]
[-11.46069908 47.58444595]
[-0.84226203 53.17121887]
[6.74329138 62.56629944]
[10.00811768 74.27124786]
[24.71429253 77.22563934]
[39.42046738 80.18003845]
[54.12664032 83.13442993]
[61.46515274 68.68907928]
[73.28003693 57.23257828]
[88.40554810 50.12531662]
[105.27257538 48.28706741]
[122.07113647 52.08121872]
[136.94461060 61.25773239]
[148.54884338 51.75289154]
[160.15306091 42.24804688]
[171.75727844 32.74320602]
[183.36149597 23.23836136]
[191.78358459 8.52425957]
[208.25411987 12.54393864]
[208.95103455 29.48355675]
[192.86634827 34.84258270]
[181.26213074 44.34742737]
[169.65789795 53.85226822]
[158.05368042 63.35711288]
[146.44946289 72.86195374]
[152.13684082 86.74193573]
[167.07408142 85.37130737]
[180.10952759 76.40538025]
[193.49055481 82.94735718]
[208.42779541 81.57673645]
[221.46324158 72.61080933]
[234.84426880 79.15278625]
[249.78150940 77.78215790]
[262.81695557 68.81623840]
[276.19796753 75.35821533]
[291.13522339 73.98758698]
[304.20913696 64.08784485]
[319.21231079 70.70875549]
[320.71078491 87.03929138]
[307.16305542 96.28000641]
[292.50585938 88.92483521]
[277.56860352 90.29546356]
[265.60156250 99.16335297]
[251.15214539 92.71940613]
[236.21488953 94.09003448]
[224.24786377 102.95792389]
[209.79843140 96.51398468]
[194.86117554 97.88460541]
[182.89414978 106.75249481]
[168.44470215 100.30855560]
[153.50746155 101.67918396]
[151.88693237 108.64472198]
[149.38082886 115.21087646]
[146.06622314 121.26805115]
[142.03326416 126.71995544]
[137.38311768 131.48515320]
[147.23742676 142.79411316]
[157.09173584 154.10307312]
[166.94604492 165.41204834]
[176.80035400 176.72100830]
[192.32803345 177.95739746]
[202.16059875 189.56666565]
[200.88619995 204.36231995]
[210.74050903 215.67129517]
[220.59481812 226.98025513]
[230.44912720 238.28921509]
[240.30343628 249.59817505]
[255.98255920 254.40411377]
[259.39587402 270.44409180]
[247.03204346 281.21759033]
[231.60992432 275.64172363]
[228.99446106 259.45248413]
[219.14016724 248.14352417]
[209.28585815 236.83456421]
[199.43154907 225.52558899]
[189.57723999 214.21662903]
[174.74636841 213.45465088]
[164.59159851 202.12612915]
[165.49137878 186.57531738]
[155.63708496 175.26634216]
[145.78277588 163.95738220]
[135.92846680 152.64842224]
[126.07415771 141.33946228]
[109.69859314 147.90354919]
[92.05937195 148.22612000]
[75.45475006 142.26515198]
[62.04822159 130.79731750]
[53.58655167 115.31680298]
[51.17224503 97.84060669]
[36.46607208 94.88620758]
[21.75989723 91.93181610]
[7.05372334 88.97741699]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 36]
[5 35]
[6 32]
[7 31]
[8 30]
[9 29]
[10 27]
[11 26]
[12 25]
[13 24]
[15 23]
[16 22]
[43 112]
[44 111]
[45 110]
[46 109]
[47 108]
[53 104]
[54 103]
[55 102]
[56 101]
[57 100]
[58 99]
[59 98]
[60 97]
[61 96]
[64 95]
[65 94]
[66 93]
[67 92]
[68 86]
[69 85]
[70 84]
[71 83]
[72 82]
[73 81]
[117 205]
[118 204]
[119 203]
[120 202]
[126 138]
[127 137]
[128 136]
[129 135]
[130 134]
[139 164]
[140 163]
[142 161]
[143 160]
[145 158]
[146 157]
[148 155]
[149 154]
[169 196]
[170 195]
[171 194]
[172 193]
[173 192]
[176 189]
[177 188]
[178 187]
[179 186]
[180 185]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
