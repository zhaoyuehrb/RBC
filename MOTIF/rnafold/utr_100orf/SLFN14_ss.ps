%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:31:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGUUUGGAGCACAGAGGGGCUGCUGAAAUGGAGAGUCUCAAGACUGAUACUGAAAUGCCGUAUCCUGAGGUAAUAGUAGAUGUGGGCAGAGUGAUUUUUGGAGAAGAAAACAGGAAGAAGAUGACCA\
) } def
/len { sequence length } bind def

/coor [
[111.02406311 133.95625305]
[104.82497406 136.25508118]
[98.15428925 137.40303040]
[91.22904968 137.30513000]
[84.28504944 135.90791321]
[76.68064880 148.83744812]
[69.07624817 161.76699829]
[61.47185516 174.69654846]
[64.09110260 190.52433777]
[53.24291611 202.34365845]
[37.24909973 201.08775330]
[28.37873650 187.72001648]
[33.43641281 172.49505615]
[48.54230881 167.09214783]
[56.14670563 154.16259766]
[63.75110626 141.23306274]
[71.35549927 128.30351257]
[62.98431015 115.85669708]
[48.14171600 118.02403259]
[33.29911804 120.19136810]
[18.45652390 122.35870361]
[3.61392784 124.52603912]
[-11.22866821 126.69337463]
[-19.36463356 131.06974792]
[-26.45565414 128.72924805]
[-41.34628677 130.53730774]
[-49.72854233 143.73851013]
[-64.65083313 148.41389465]
[-79.06730652 142.35589600]
[-86.17094421 128.42491150]
[-82.60762787 113.19873047]
[-70.05984497 103.86667633]
[-54.45227432 104.83507538]
[-43.15433502 115.64666748]
[-28.26370430 113.83862305]
[-13.39600372 111.85078430]
[1.44659209 109.68344879]
[16.28918839 107.51611328]
[31.13178444 105.34877777]
[45.97438049 103.18144226]
[60.81697464 101.01410675]
[64.19937897 88.29026794]
[71.40940857 77.89748383]
[81.30352783 70.87606812]
[92.50000000 67.78190613]
[92.50000000 52.78190231]
[80.11502075 43.62119675]
[75.55226898 29.09416580]
[80.36157990 14.83462334]
[92.50000000 6.24411583]
[92.50000000 -8.75588417]
[92.50000000 -23.75588417]
[92.50000000 -38.75588226]
[92.50000000 -53.75588226]
[84.28891754 -61.08240891]
[81.57747650 -71.51963806]
[85.03983307 -81.49888611]
[93.28118134 -87.74681091]
[94.00588226 -102.72929382]
[94.73058319 -117.71177673]
[95.45528412 -132.69425964]
[82.83564758 -141.56829834]
[77.03817749 -155.86489868]
[79.91281128 -171.02207947]
[90.54226685 -182.20323181]
[105.53472900 -185.84048462]
[120.10614777 -180.77322388]
[129.60684204 -168.61837769]
[131.00518799 -153.25451660]
[123.85494995 -139.58419800]
[110.43776703 -131.96955872]
[109.71306610 -116.98707581]
[108.98836517 -102.00459290]
[108.26366425 -87.02210999]
[118.40605164 -70.62946320]
[107.50000000 -53.75588226]
[107.50000000 -38.75588226]
[107.50000000 -23.75588417]
[107.50000000 -8.75588417]
[107.50000000 6.24411583]
[119.63842010 14.83462334]
[124.44773102 29.09416580]
[119.88497925 43.62119675]
[107.50000000 52.78190231]
[107.50000000 67.78190613]
[128.30885315 82.88670349]
[132.01313782 108.33157349]
[145.29496765 115.30242157]
[158.66006470 122.11228180]
[172.10647583 128.76014709]
[182.95265198 119.61580658]
[196.42988586 115.32723999]
[210.47946167 116.51470184]
[222.96853638 122.96456909]
[232.01387024 133.66690063]
[236.26591492 146.97337341]
[235.10993958 160.85121155]
[248.39178467 167.82205200]
[261.67361450 174.79290771]
[274.95547485 181.76374817]
[288.23730469 188.73460388]
[301.51913452 195.70544434]
[314.45727539 187.42893982]
[329.80099487 186.74636841]
[343.42291260 193.84133911]
[351.65881348 206.80534363]
[352.29330444 222.15112305]
[345.15567017 235.75074768]
[332.16592407 243.94598389]
[316.81820679 244.53234863]
[303.24102783 237.35212708]
[295.08654785 224.33674622]
[294.54830933 208.98728943]
[281.26644897 202.01643372]
[267.98461914 195.04559326]
[254.70277405 188.07475281]
[241.42092896 181.10389709]
[228.13909912 174.13305664]
[215.53942871 183.88534546]
[199.89631653 187.20243835]
[184.31040955 183.37530518]
[171.89344788 173.11613464]
[165.14698792 158.42640686]
[165.45860291 142.20655823]
[152.01219177 135.55868530]
[144.54632568 135.41294861]
[138.32412720 128.58425903]
[125.04228210 121.61341858]
[121.27418518 126.46201324]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 17]
[6 16]
[7 15]
[8 14]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[23 36]
[25 35]
[26 34]
[45 85]
[46 84]
[50 80]
[51 79]
[52 78]
[53 77]
[54 76]
[58 74]
[59 73]
[60 72]
[61 71]
[87 128]
[88 127]
[89 125]
[90 124]
[97 118]
[98 117]
[99 116]
[100 115]
[101 114]
[102 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
