%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:10:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAGACUACAACUCCCAGUAUGCACCGCGAUGCGCGCCUCACCCUGCAUCUCCCAGCCCGCAGCCAGCUGGCAUCCUAGACCCUCUGCCCUGCGACCAACAGCCGGGAGCGGACCAGACACCAGAACUC\
) } def
/len { sequence length } bind def

/coor [
[50.35595703 330.10494995]
[42.45951462 330.76794434]
[34.61246872 329.74938965]
[28.33665466 343.37341309]
[22.06084251 356.99743652]
[28.89875984 371.06076050]
[25.04706001 386.21655273]
[12.32439518 395.30874634]
[-3.26197982 394.04425049]
[-14.35265541 383.02014160]
[-15.71095371 367.44168091]
[-6.69552851 354.66448975]
[8.43681335 350.72161865]
[14.71262550 337.09759521]
[20.98843765 323.47357178]
[7.44283342 304.95343018]
[7.29438639 281.89376831]
[20.73379707 263.01339722]
[42.78879929 255.52966309]
[45.64897156 240.80487061]
[40.48044586 226.83576965]
[50.70718002 214.76412964]
[53.56735229 200.03935242]
[45.04980469 187.87435913]
[47.74066544 172.90058899]
[60.55817413 164.04907227]
[63.41835022 149.32429504]
[66.27851868 134.59950256]
[69.13869476 119.87471008]
[61.89978409 106.73704529]
[47.92419815 101.28884125]
[33.94861221 95.84062958]
[19.97302628 90.39241791]
[5.99743938 84.94420624]
[-7.97814703 79.49600220]
[-19.91397476 89.16200256]
[-35.08620834 91.54923248]
[-49.41359329 86.01555634]
[-59.04213333 74.04948425]
[-61.38180161 58.86984253]
[-55.80323410 44.55987549]
[-43.80704498 34.96889114]
[-28.62014389 32.67681503]
[-14.32773209 38.30020905]
[-4.77439690 50.32640076]
[-2.52993703 65.52041626]
[11.44564915 70.96862030]
[25.42123604 76.41683197]
[39.39682007 81.86504364]
[53.37240601 87.31325531]
[67.34799194 92.76145935]
[73.48876953 88.45554352]
[61.50323868 79.43628693]
[66.37735748 65.25027466]
[81.37524414 65.50213623]
[85.77031708 79.84371948]
[91.91108704 75.53780365]
[91.55139923 60.54211426]
[91.19170380 45.54642868]
[83.12570953 31.93576050]
[90.55559540 19.02661133]
[90.19590759 4.03092527]
[79.62178040 -8.03420925]
[82.60352325 -23.79773521]
[96.85379028 -31.16722679]
[111.44100189 -24.48943710]
[115.17509460 -8.88699818]
[105.19159698 3.67123556]
[105.55128479 18.66692162]
[113.59155273 31.20499992]
[106.18739319 45.18673706]
[106.54708099 60.18242645]
[106.90677643 75.17811584]
[113.79207611 78.15177155]
[119.73961639 64.38126373]
[133.51002502 70.32903290]
[127.56267548 84.09908295]
[134.44798279 87.07273865]
[145.61117554 77.05361176]
[156.77438354 67.03449249]
[167.93759155 57.01536560]
[175.68669128 41.93598175]
[192.32192993 45.20785141]
[193.78302002 62.09872055]
[177.95671082 68.17856598]
[166.79351807 78.19769287]
[155.63031006 88.21681976]
[144.46710205 98.23593903]
[149.74734497 112.27584839]
[164.74626160 112.45571136]
[179.74519348 112.63556671]
[193.63714600 105.06429291]
[206.27072144 112.95364380]
[221.26965332 113.13349915]
[230.43188477 100.61020660]
[245.21556091 95.89613342]
[259.93606567 100.80394745]
[268.93304443 113.44649506]
[268.74697876 128.96246338]
[259.44943237 141.38562012]
[244.61547852 145.93904114]
[229.94909668 140.87182617]
[221.08978271 128.13243103]
[206.09086609 127.95256805]
[193.27174377 135.53669739]
[179.56533813 127.63449097]
[164.56640625 127.45462799]
[149.56748962 127.27477264]
[109.43166351 141.16096497]
[83.86348724 122.73488617]
[81.00331116 137.45967102]
[78.14313507 152.18446350]
[75.28296661 166.90925598]
[83.85478973 179.91546631]
[80.74440765 194.80775452]
[68.29213715 202.89952087]
[65.43196869 217.62431335]
[70.39591980 232.64662170]
[60.37376022 243.66503906]
[57.51358795 258.38983154]
[64.57295227 262.28033447]
[70.64262390 267.56683350]
[75.45181274 274.00708008]
[78.78731537 281.30758667]
[80.50296021 289.13687134]
[80.52599335 297.14050293]
[78.86017609 304.95730591]
[75.58538055 312.23550415]
[70.85377502 318.64852905]
[64.88276672 323.90982056]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 15]
[4 14]
[5 13]
[19 120]
[20 119]
[22 117]
[23 116]
[26 113]
[27 112]
[28 111]
[29 110]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
[57 73]
[58 72]
[59 71]
[61 69]
[62 68]
[78 88]
[79 87]
[80 86]
[81 85]
[89 108]
[90 107]
[91 106]
[93 104]
[94 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
