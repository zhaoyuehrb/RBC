%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:22:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUACGCAGGCGCGUUAGGUCCUAGUCGCUAUGCGUGUGCUUGUGGGUGGCGGGACAGGCUUCAUUGGGACAGCCCUAACCCAGCUGCUGAAUGCCAGAGGCCACGAAGUGACGUUGGUCUCCCGAAAGC\
) } def
/len { sequence length } bind def

/coor [
[84.22977448 132.42456055]
[76.47553253 145.26480103]
[68.72129822 158.10505676]
[60.96706390 170.94529724]
[60.45633316 186.75825500]
[47.25373077 193.65321350]
[39.49949265 206.49345398]
[31.74525833 219.33369446]
[23.99102211 232.17395020]
[24.20939636 248.57164001]
[9.98128414 256.72595215]
[-4.05665159 248.24842834]
[-3.46338582 231.86001587]
[11.15077972 224.41970825]
[18.90501595 211.57946777]
[26.65925026 198.73922729]
[34.41348648 185.89898682]
[34.36958313 171.00444031]
[48.12682343 163.19105530]
[55.88105774 150.35081482]
[63.63529205 137.51057434]
[71.38952637 124.67033386]
[66.01362610 109.50434875]
[67.64952850 94.57293701]
[75.06789398 82.75545502]
[86.00960541 75.94570160]
[97.77563477 74.75862885]
[100.94050598 60.09630966]
[104.10537720 45.43399048]
[107.27024078 30.77166939]
[110.43511200 16.10935020]
[113.59998322 1.44703138]
[107.12348175 -7.44060278]
[106.67158508 -18.20738602]
[112.15158844 -27.22890663]
[121.51474762 -31.60354233]
[125.36850739 -46.10004425]
[129.22225952 -60.59654617]
[133.07601929 -75.09304810]
[132.25773621 -84.28891754]
[137.19578552 -89.88433838]
[141.39085388 -104.28577423]
[145.58592224 -118.68721008]
[149.78100586 -133.08865356]
[146.21195984 -148.50202942]
[157.19996643 -158.55752563]
[161.39505005 -172.95896912]
[165.59011841 -187.36039734]
[168.75498962 -202.02272034]
[170.87376404 -216.87232971]
[172.99255371 -231.72193909]
[175.11132812 -246.57153320]
[177.23010254 -261.42114258]
[179.17335510 -276.29473877]
[180.94082642 -291.19024658]
[182.70828247 -306.08575439]
[170.15684509 -317.35586548]
[166.79464722 -333.71710205]
[173.74549866 -348.72299194]
[188.10896301 -356.57998657]
[189.52410889 -371.51309204]
[190.93925476 -386.44619751]
[192.35441589 -401.37927246]
[193.59310913 -416.32803345]
[194.65515137 -431.29040527]
[185.27116394 -444.30270386]
[189.73234558 -459.71301270]
[204.61647034 -465.69982910]
[218.50572205 -457.67062378]
[220.74543762 -441.78466797]
[209.61750793 -430.22833252]
[208.55545044 -415.26599121]
[211.24545288 -408.30490112]
[207.28750610 -399.96411133]
[205.87236023 -385.03103638]
[204.45719910 -370.09793091]
[203.04205322 -355.16482544]
[213.86685181 -347.26080322]
[219.39476013 -334.93139648]
[218.07382202 -321.37512207]
[210.14431763 -310.16757202]
[197.60379028 -304.31829834]
[195.83633423 -289.42279053]
[194.06886292 -274.52728271]
[196.42713928 -267.44689941]
[192.07971191 -259.30236816]
[189.96093750 -244.45275879]
[187.84214783 -229.60314941]
[185.72337341 -214.75355530]
[183.60459900 -199.90394592]
[196.55297852 -207.47621155]
[211.11698914 -203.88601685]
[219.06240845 -191.16319275]
[215.89703369 -176.50097656]
[203.41050720 -168.18913269]
[188.66249084 -170.92701721]
[179.99154663 -183.16532898]
[175.79647827 -168.76390076]
[171.60140991 -154.36245728]
[175.47050476 -139.97915649]
[164.18243408 -128.89356995]
[159.98736572 -114.49213409]
[155.79229736 -100.09069824]
[151.59721375 -85.68926239]
[147.57252502 -71.23928833]
[143.71876526 -56.74278641]
[139.86500549 -42.24628448]
[136.01124573 -27.74978447]
[142.48164368 -9.58778381]
[128.26229858 4.61190081]
[125.09743500 19.27421951]
[121.93256378 33.93653870]
[118.76769257 48.59885788]
[115.60282135 63.26117706]
[112.43795776 77.92350006]
[131.20686340 95.30113220]
[127.41350555 125.99391937]
[134.55271912 139.18601990]
[141.69192505 152.37812805]
[148.83114624 165.57023621]
[163.07763672 173.69238281]
[162.89630127 190.09053040]
[148.47369385 197.89566040]
[134.64653015 189.07853699]
[135.63903809 172.70944214]
[128.49981689 159.51734924]
[121.36061096 146.32524109]
[114.22140503 133.13313293]
[106.72349548 132.95599365]
[111.02049255 147.32734680]
[98.68035126 155.85499573]
[86.75676727 146.75399780]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[4 19]
[6 17]
[7 16]
[8 15]
[9 14]
[27 115]
[28 114]
[29 113]
[30 112]
[31 111]
[32 110]
[36 108]
[37 107]
[38 106]
[39 105]
[41 104]
[42 103]
[43 102]
[44 101]
[46 99]
[47 98]
[48 97]
[49 90]
[50 89]
[51 88]
[52 87]
[53 86]
[54 84]
[55 83]
[56 82]
[60 77]
[61 76]
[62 75]
[63 74]
[64 72]
[65 71]
[117 128]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
