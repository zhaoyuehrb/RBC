%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:20:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGGGAGGGGCGGGGCCACGCUGCGGGCCCGGGCCAUGGCCGCCGCCGAUGCCGAGGCAGUUCCGGCGAGGGGGGAGCCUCAGCAGGAUUGCUGUGUGAAAACCGAGCUGCUGGGAGAAGAGACACCUAUGGCUG\
) } def
/len { sequence length } bind def

/coor [
[86.02870941 240.05117798]
[82.66983032 224.36369324]
[92.95159912 212.04846191]
[92.95159912 197.04846191]
[80.81317902 188.45796204]
[76.00386810 174.19841003]
[80.56661987 159.67138672]
[92.95159912 150.51068115]
[92.95159912 135.51068115]
[92.95159912 120.51068115]
[80.13530731 112.71691895]
[66.81703186 119.61789703]
[53.49875259 126.51886749]
[43.99020004 142.24150085]
[26.53256989 140.85968018]
[13.37483120 148.06204224]
[0.21709245 155.26438904]
[-12.94064617 162.46675110]
[-26.09838486 169.66909790]
[-32.18846130 176.59495544]
[-39.63862991 176.88175964]
[-52.95690918 183.78273010]
[-64.23853302 196.43821716]
[-79.52249908 189.10087585]
[-76.70292664 172.38302612]
[-59.85788345 170.46446228]
[-46.53960419 163.56347656]
[-33.30073929 156.51136780]
[-20.14300156 149.30900574]
[-6.98526144 142.10665894]
[6.17247725 134.90429688]
[19.33021736 127.70194244]
[23.05691910 116.13716125]
[34.03305435 110.04727936]
[46.59777832 113.20059204]
[59.91605377 106.29961395]
[73.23433685 99.39864349]
[78.47837067 92.03759766]
[85.20645905 87.88340759]
[91.96973419 86.98007965]
[86.30844879 73.08943939]
[80.64715576 59.19880295]
[66.35648346 53.00086975]
[60.81301117 38.83314133]
[66.80986023 25.24736214]
[61.14857483 11.35672379]
[48.77505493 1.49738336]
[51.13660812 -13.20881748]
[45.47531891 -27.09945488]
[33.86656570 -32.84858322]
[29.46192551 -44.60278702]
[34.12607574 -55.82233429]
[28.78245163 -69.83824158]
[23.43882561 -83.85414886]
[18.09519958 -97.87005615]
[12.75157452 -111.88596344]
[6.71948957 -118.86238861]
[7.44982290 -126.28221893]
[2.42662859 -140.41613770]
[-10.39963818 -150.63468933]
[-7.69599485 -166.80943298]
[7.75628090 -172.30117798]
[20.06121254 -161.46047974]
[16.56054306 -145.43933105]
[21.58373642 -131.30541992]
[26.76748276 -117.22959137]
[32.11110687 -103.21368408]
[37.45473480 -89.19777679]
[42.79835892 -75.18186951]
[48.14198685 -61.16595840]
[62.32598495 -50.89501190]
[59.36595535 -32.76074219]
[65.02724457 -18.87010574]
[76.99582672 -10.00431633]
[75.03920746 5.69543600]
[80.70050049 19.58607483]
[94.48553467 25.10951996]
[100.42475891 39.11595535]
[94.53779602 53.53751373]
[100.19908142 67.42815399]
[105.86037445 81.31879425]
[119.09923553 88.37091064]
[133.78550720 85.31906891]
[148.47175598 82.26723480]
[163.15802002 79.21539307]
[177.84428406 76.16355133]
[192.53054810 73.11170959]
[181.95686340 62.47229385]
[183.45056152 47.54684830]
[195.92294312 39.21381760]
[210.28350830 43.54673767]
[216.06552124 57.38756180]
[209.05444336 70.64860535]
[223.99229431 69.28458405]
[238.93014526 67.92056274]
[249.02644348 56.05875778]
[264.19497681 54.88824081]
[275.44119263 64.58662415]
[290.37902832 63.22259903]
[303.45730591 53.32863235]
[318.45758057 59.95617294]
[319.94882202 76.28737640]
[306.39700317 85.52210236]
[291.74307251 78.16045380]
[276.80520630 79.52447510]
[267.50152588 91.09933472]
[252.37185669 92.69544220]
[240.29417419 82.85841370]
[225.35632324 84.22243500]
[210.41845703 85.58646393]
[195.58238220 87.79797363]
[180.89611816 90.84981537]
[166.20986938 93.90164948]
[151.52360535 96.95349121]
[136.83734131 100.00533295]
[122.15107727 103.05717468]
[136.50260925 107.41989899]
[151.49523926 106.94950104]
[164.82473755 113.82878113]
[173.12712097 126.32159424]
[174.30709839 141.27511597]
[168.06689453 154.91548157]
[155.98133850 163.80026245]
[141.10049438 165.68717957]
[127.17986298 160.10003662]
[117.73262787 148.44886780]
[115.14298248 133.67442322]
[107.95159912 120.51068115]
[107.95159912 135.51068115]
[107.95159912 150.51068115]
[120.33657837 159.67138672]
[124.89933014 174.19841003]
[120.09001923 188.45796204]
[107.95159912 197.04846191]
[107.95159912 212.04846191]
[118.23336792 224.36369324]
[114.87448883 240.05117798]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 135]
[4 134]
[8 130]
[9 129]
[10 128]
[11 37]
[12 36]
[13 35]
[15 32]
[16 31]
[17 30]
[18 29]
[19 28]
[21 27]
[22 26]
[40 81]
[41 80]
[42 79]
[45 76]
[46 75]
[48 73]
[49 72]
[52 70]
[53 69]
[54 68]
[55 67]
[56 66]
[58 65]
[59 64]
[82 116]
[83 115]
[84 114]
[85 113]
[86 112]
[87 111]
[93 110]
[94 109]
[95 108]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
