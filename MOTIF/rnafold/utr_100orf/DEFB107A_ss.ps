%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:04:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGGGCAGUAGAACAUAUUUUAAUCAAUGCCCCUUGAUAAAAGAGCUUGAUUCCAGCUACUGCACUUCCUUCAUCAGCUCUCCACUGAUGCCUGGAGCCAUGAAAAUAUUUGUCUUUAUUUUGGCUGCUCUCAUUCUUCUUGCUCAAAUUUUCCAAGCCAGGACAGCAAUUCAUAGAGCACUAAUUA\
) } def
/len { sequence length } bind def

/coor [
[86.98165894 106.73287201]
[71.99460602 106.10971832]
[57.00755692 105.48656464]
[42.02050400 104.86341095]
[27.03345490 104.24025726]
[-3.47939706 128.55831909]
[-17.25263786 134.49951172]
[-31.02588081 140.44071960]
[-44.79912186 146.38191223]
[-58.57236481 152.32310486]
[-72.34560394 158.26429749]
[-86.11884308 164.20550537]
[-85.32731628 174.28715515]
[-87.14405060 184.21797180]
[-91.43899536 193.33560181]
[-97.91709900 201.03421021]
[-106.13857269 206.80474854]
[-115.54876709 210.26856995]
[-125.51551819 211.20228577]
[-135.37170410 209.55218506]
[-144.45980835 205.43722534]
[-152.17587280 199.14045715]
[-158.00953674 191.08961487]
[-172.30589294 195.62991333]
[-186.60224915 200.17021179]
[-200.89859009 204.71052551]
[-215.19494629 209.25082397]
[-229.49130249 213.79112244]
[-236.73971558 219.38154602]
[-244.06314087 218.28593445]
[-258.43298340 222.58798218]
[-265.23886108 233.55895996]
[-277.31051636 236.83950806]
[-288.02291870 231.19519043]
[-302.46228027 235.25779724]
[-316.90164185 239.32040405]
[-325.97186279 252.55334473]
[-341.98275757 253.56880188]
[-352.65213013 241.58781433]
[-349.79534912 225.80116272]
[-335.60391235 218.31901550]
[-320.96426392 224.88104248]
[-306.52490234 220.81843567]
[-292.08554077 216.75582886]
[-280.53894043 203.55123901]
[-262.73504639 208.21813965]
[-248.36518860 203.91609192]
[-234.03160095 199.49476624]
[-219.73524475 194.95446777]
[-205.43890381 190.41416931]
[-191.14254761 185.87387085]
[-176.84619141 181.33355713]
[-162.54985046 176.79325867]
[-159.58790588 156.82916260]
[-146.88352966 141.04901123]
[-127.86970520 133.83963013]
[-107.74673462 137.25509644]
[-92.06004333 150.43226624]
[-78.28680420 144.49105835]
[-64.51355743 138.54986572]
[-50.74031830 132.60867310]
[-36.96707535 126.66747284]
[-23.19383430 120.72628021]
[-9.42059326 114.78507996]
[-6.68053579 107.80352783]
[-21.61605453 106.41417694]
[-36.59001160 105.53067780]
[-44.67109680 92.89358521]
[-39.19120789 78.93038940]
[-24.67206764 75.16281128]
[-13.09393024 84.70015717]
[-1.20042062 93.84042358]
[1.53963709 86.85887146]
[-4.51582336 73.13548279]
[-10.57128429 59.41209030]
[-16.62674522 45.68870163]
[-22.68220520 31.96531296]
[-28.73766708 18.24192429]
[-43.80450821 14.05572128]
[-52.61287308 1.13493490]
[-51.00371933 -14.41963482]
[-39.73684311 -25.26359558]
[-24.13211441 -26.27676010]
[-11.55761337 -16.98074532]
[-7.95063210 -1.76484156]
[-15.01427746 12.18646431]
[-8.95881653 25.90985298]
[-2.90335631 39.63323975]
[3.15210438 53.35662842]
[9.20756531 67.08001709]
[15.26302528 80.80340576]
[27.65660667 89.25320435]
[42.64365768 89.87635803]
[57.63070679 90.49951172]
[72.61775970 91.12266541]
[87.60481262 91.74581909]
[100.95288849 84.90265656]
[109.19551849 72.37033844]
[117.43815613 59.83802414]
[125.68079376 47.30570602]
[133.92343140 34.77338791]
[134.22540283 29.52437782]
[136.31213379 25.34256554]
[139.47346497 22.73109818]
[142.90237427 21.83602333]
[151.75944519 9.73014736]
[160.61651611 -2.37573028]
[169.47360229 -14.48160744]
[178.33067322 -26.58748436]
[173.45668030 -41.31921387]
[178.20469666 -56.09202576]
[190.74902344 -65.22547150]
[206.26608276 -65.20755005]
[218.78927612 -56.04515839]
[223.50315857 -41.26142120]
[218.59515381 -26.54098701]
[205.95249939 -17.54416275]
[190.43653870 -17.73041153]
[181.57946777 -5.62453461]
[172.72239685 6.48134279]
[163.86532593 18.58721924]
[155.00825500 30.69309616]
[146.45574951 43.01602554]
[138.21310425 55.54833984]
[129.97047424 68.08065796]
[121.72783661 80.61297607]
[113.48520660 93.14529419]
[117.78725433 107.51513672]
[131.56050110 113.45632935]
[145.33374023 119.39752960]
[159.10697937 125.33872223]
[172.88021851 131.27992249]
[181.44493103 122.23059082]
[192.35496521 116.26345062]
[204.54689026 113.94300079]
[216.83758545 115.47909546]
[228.03903198 120.70810699]
[237.07318115 129.11018372]
[243.07566833 139.86088562]
[245.47853088 151.91209412]
[244.06387329 164.09417725]
[257.52386475 170.71453857]
[270.98382568 177.33488464]
[284.44381714 183.95523071]
[297.90377808 190.57557678]
[303.65777588 186.76203918]
[310.26165771 184.93711853]
[317.05419922 185.25027466]
[323.36557007 187.63858032]
[328.58331299 191.83599854]
[332.21179199 197.40272522]
[333.91925049 203.77104187]
[333.56787109 210.30320740]
[346.30178833 218.23085022]
[359.03570557 226.15847778]
[374.37026978 222.33403015]
[387.87454224 230.54441833]
[391.53665161 245.91856384]
[383.18392944 259.33526611]
[367.77191162 262.83462524]
[354.44427490 254.34054565]
[351.10806274 238.89239502]
[338.37414551 230.96476746]
[325.64022827 223.03712463]
[302.59674072 225.03318787]
[291.28341675 204.03555298]
[277.82345581 197.41520691]
[264.36346436 190.79486084]
[250.90350342 184.17451477]
[237.44352722 177.55415344]
[223.95547485 188.97427368]
[206.78282166 193.36952209]
[189.36323547 189.81240845]
[175.20463562 178.97212219]
[167.17881775 162.98924255]
[166.93902588 145.05316162]
[153.16578674 139.11196899]
[139.39253235 133.17077637]
[125.61930084 127.22957611]
[111.84605408 121.28837585]
[115.67668915 135.79100037]
[111.73487091 150.26380920]
[101.07896423 160.82087708]
[86.57006073 164.62765503]
[72.10375214 160.66203308]
[61.56422806 149.98878479]
[57.78131104 135.47363281]
[61.77071381 121.01387787]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 96]
[2 95]
[3 94]
[4 93]
[5 92]
[6 64]
[7 63]
[8 62]
[9 61]
[10 60]
[11 59]
[12 58]
[23 53]
[24 52]
[25 51]
[26 50]
[27 49]
[28 48]
[30 47]
[31 46]
[34 44]
[35 43]
[36 42]
[73 91]
[74 90]
[75 89]
[76 88]
[77 87]
[78 86]
[97 127]
[98 126]
[99 125]
[100 124]
[101 123]
[105 122]
[106 121]
[107 120]
[108 119]
[109 118]
[128 180]
[129 179]
[130 178]
[131 177]
[132 176]
[141 170]
[142 169]
[143 168]
[144 167]
[145 166]
[153 164]
[154 163]
[155 162]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
