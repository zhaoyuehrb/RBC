%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:07:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGAGUUGGGAGUGACUCCAGAGCCUCCUGCAAGAUGCUGUUGAUUCUGCUGUCAGUGGCCUUGCUGGCCCUGAGCUCAGCUCAGAACUUAAAUGAAGAUGUCAGCCAGGAAGAAUCUCCCUCCCUAAUAGCAG\
) } def
/len { sequence length } bind def

/coor [
[74.15586090 304.31433105]
[61.71726990 295.70407104]
[52.54979706 283.67025757]
[47.55157852 269.39184570]
[47.21228790 254.26770020]
[51.56516647 239.77951050]
[60.18376541 227.34669495]
[72.22371674 218.18728638]
[86.50547028 213.19863892]
[86.15900421 198.20263672]
[85.81253815 183.20663452]
[85.46606445 168.21063232]
[85.11959839 153.21464539]
[74.63620758 142.48623657]
[59.65221405 141.79348755]
[44.66822052 141.10073853]
[29.68422508 140.40798950]
[18.05983162 150.77674866]
[2.87379837 149.86074829]
[-6.93959427 138.71476746]
[-21.92358971 138.02201843]
[-36.90758514 137.32925415]
[-51.89157867 136.63650513]
[-66.87557220 135.94375610]
[-73.38373566 149.65213013]
[-84.61418915 159.79708862]
[-98.83470154 164.85578918]
[-113.86787415 164.08671570]
[-127.42446136 157.63818359]
[-137.45204163 146.52093506]
[-142.44567871 132.44993591]
[-157.42967224 131.75718689]
[-172.41366577 131.06443787]
[-188.51513672 136.37281799]
[-198.07339478 122.37010193]
[-187.26390076 109.30905151]
[-171.72091675 116.08044434]
[-156.73692322 116.77319336]
[-141.75292969 117.46594238]
[-135.48228455 103.91573334]
[-124.47171021 93.77114105]
[-110.37795258 88.60094452]
[-95.33795166 89.22225189]
[-81.64485931 95.57147980]
[-71.39837646 106.70936584]
[-66.18282318 120.95976257]
[-51.19882584 121.65251160]
[-36.21483231 122.34526825]
[-21.23083687 123.03801727]
[-6.24684238 123.73076630]
[4.55310965 113.53780365]
[19.75887871 114.02689362]
[30.37697601 125.42398834]
[45.36096954 126.11674500]
[60.34496689 126.80949402]
[75.32896423 127.50224304]
[58.93980789 110.06558228]
[55.42617798 83.28293610]
[69.55471802 56.69630432]
[67.48236847 41.84014893]
[65.41002655 26.98399353]
[63.33768082 12.12783623]
[51.45308304 1.35120034]
[52.61242676 -14.64990807]
[65.92636871 -23.60080910]
[81.18157959 -18.63513565]
[86.67558289 -3.56212854]
[78.19384003 10.05549145]
[80.26618195 24.91164780]
[82.33852386 39.76780319]
[84.41087341 54.62395859]
[99.15547180 57.38020325]
[106.45453644 44.27586746]
[113.75360107 31.17153168]
[121.05267334 18.06719589]
[128.35173035 4.96285963]
[135.65080261 -8.14147663]
[138.07597351 -24.92107201]
[154.87118530 -27.23572922]
[161.74475098 -11.73765373]
[148.75514221 -0.84240896]
[141.45606995 12.26192665]
[134.15701294 25.36626244]
[126.85794067 38.47060013]
[119.55886841 51.57493591]
[112.25980377 64.67926788]
[116.35427856 70.96300507]
[128.92173767 62.77405167]
[141.48921204 54.58510208]
[154.05679321 46.39634705]
[162.24536133 58.96406555]
[149.67814636 67.15256500]
[137.11068726 75.34151459]
[124.54322815 83.53046417]
[128.63771057 89.81419373]
[143.57371521 88.43016815]
[158.50973511 87.04614258]
[169.82373047 75.67192841]
[185.75422668 77.56902313]
[194.08068848 91.28214264]
[188.41578674 106.29174805]
[173.10513306 111.08376312]
[159.89375305 101.98215485]
[144.95774841 103.36618042]
[130.02172852 104.75020599]
[128.05270386 111.98712158]
[142.52647400 115.92538452]
[138.58799744 130.39909363]
[124.11466980 126.46096039]
[122.14565277 133.69787598]
[134.32150269 142.45849609]
[146.49737549 151.21911621]
[162.05317688 148.42764282]
[174.97877502 157.52185059]
[177.60562134 173.10630798]
[168.37525940 185.93502808]
[152.76390076 188.39695740]
[140.03349304 179.03147888]
[137.73675537 163.39497375]
[125.56089020 154.63435364]
[113.38503265 145.87373352]
[100.11560059 152.86816406]
[100.46206665 167.86416626]
[100.80853271 182.86016846]
[101.15500641 197.85617065]
[101.50147247 212.85215759]
[115.99838257 217.17590332]
[128.44850159 225.76950073]
[137.63209534 237.79101562]
[142.64944458 252.06271362]
[143.00900269 267.18640137]
[138.67553711 281.68041992]
[130.07360840 294.12475586]
[118.04594421 303.30029297]
[103.77088928 308.30807495]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 126]
[10 125]
[11 124]
[12 123]
[13 122]
[14 56]
[15 55]
[16 54]
[17 53]
[20 50]
[21 49]
[22 48]
[23 47]
[24 46]
[31 39]
[32 38]
[33 37]
[59 71]
[60 70]
[61 69]
[62 68]
[72 86]
[73 85]
[74 84]
[75 83]
[76 82]
[77 81]
[95 105]
[96 104]
[97 103]
[110 121]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
