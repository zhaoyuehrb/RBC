%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:55:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAACGGGACCCAGCGAAGAACCUAGCGGCCGAAAAGAGUCCCAGGAAAUGUGCCCCCCGGGAUUACUGGUAUUUGCUGGCUCCUCGGAACAAGAUG\
) } def
/len { sequence length } bind def

/coor [
[114.06288910 382.53430176]
[124.83386230 371.19763184]
[122.97238159 356.31356812]
[110.65206909 350.92224121]
[102.57607269 340.03308105]
[100.96756744 326.46212769]
[106.35945129 313.78646851]
[117.42498016 305.40142822]
[116.02729034 290.46667480]
[114.39751434 275.55548096]
[112.53603363 260.67144775]
[110.67454529 245.78738403]
[101.41761780 234.11868286]
[107.38252258 219.46501160]
[105.52104187 204.58096313]
[103.65956116 189.69691467]
[101.79808044 174.81286621]
[99.93659973 159.92881775]
[98.07511902 145.04476929]
[96.21363831 130.16072083]
[94.35215759 115.27667236]
[85.53929901 107.49418640]
[84.26184845 95.80651855]
[91.18547058 86.30405426]
[89.78778076 71.36931610]
[88.39009857 56.43457794]
[79.75446320 68.69940186]
[66.74028778 76.15802765]
[51.79256058 77.40919495]
[37.71953964 72.21784210]
[27.16515923 61.55927658]
[22.11228752 47.43594742]
[23.51021767 32.50122833]
[31.09631920 19.56093979]
[43.44537354 11.04619884]
[58.23734283 8.55668640]
[72.69322968 12.56011295]
[84.09716797 22.30434608]
[90.30645752 35.95762253]
[94.45098877 21.54155731]
[98.37081146 7.06278181]
[102.06500244 -7.47520304]
[105.75918579 -22.01318741]
[109.45336914 -36.55117416]
[113.14755249 -51.08915710]
[116.84173584 -65.62714386]
[112.74143982 -80.90779114]
[123.37488556 -91.33751678]
[127.06906891 -105.87550354]
[116.01300812 -116.53659821]
[111.78414917 -131.30184937]
[115.52004242 -146.19944763]
[126.21574402 -157.22204590]
[140.99417114 -161.40458679]
[155.87998962 -157.62202454]
[166.86900330 -146.89181519]
[171.00521851 -132.10035706]
[167.17599487 -117.22646332]
[156.41140747 -106.27114105]
[141.60705566 -102.18132019]
[137.91287231 -87.64333344]
[142.27738953 -73.40254211]
[131.37971497 -61.93296051]
[127.68553162 -47.39497375]
[123.99134827 -32.85699081]
[120.29716492 -18.31900406]
[116.60298157 -3.78101945]
[112.90879822 10.75696564]
[114.33750916 18.14508247]
[108.86705017 25.68608284]
[104.72252655 40.10214615]
[103.32483673 55.03688812]
[104.72252655 69.97162628]
[106.12021637 84.90636444]
[116.19083405 98.23035431]
[109.23620605 113.41518402]
[111.09768677 128.29924011]
[112.95916748 143.18328857]
[114.82064819 158.06733704]
[116.68212891 172.95138550]
[118.54360962 187.83543396]
[120.40509033 202.71948242]
[122.26657104 217.60353088]
[131.65664673 230.33682251]
[125.55859375 243.92590332]
[127.42007446 258.80996704]
[129.28155518 273.69400024]
[133.51791382 281.99136353]
[130.96203613 289.06900024]
[132.35972595 304.00372314]
[146.97076416 312.35498047]
[153.71847534 327.59197998]
[150.15394592 343.70150757]
[137.85643005 354.45208740]
[139.71791077 369.33615112]
[152.94911194 377.67095947]
[157.67803955 392.57638550]
[151.67181396 407.01449585]
[137.76641846 414.16809082]
[122.52753448 410.65945435]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 95]
[3 94]
[8 90]
[9 89]
[10 87]
[11 86]
[12 85]
[14 83]
[15 82]
[16 81]
[17 80]
[18 79]
[19 78]
[20 77]
[21 76]
[24 74]
[25 73]
[26 72]
[39 71]
[40 70]
[41 68]
[42 67]
[43 66]
[44 65]
[45 64]
[46 63]
[48 61]
[49 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
