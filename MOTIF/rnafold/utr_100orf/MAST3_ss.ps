%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:53:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACGAGUCGAGCCUCCUGCGGCGCCGCGGGCUCCAGAAGGAGCUGAGCCUGCCACGCCGAGGACGUGGCUGCCGCAGCGGGAACCGCAAGAGCUUGG\
) } def
/len { sequence length } bind def

/coor [
[97.73773193 234.12176514]
[90.38465881 247.49693298]
[77.95151520 256.35015869]
[62.90691757 258.92364502]
[48.23797989 254.70643616]
[36.85722733 244.53582764]
[31.02432060 230.43121338]
[31.89738464 215.19308472]
[39.30307388 201.84698486]
[51.77098083 193.04277039]
[66.82559204 190.52854919]
[70.97012329 176.11248779]
[75.11464691 161.69642639]
[79.25917053 147.28036499]
[83.40370178 132.86430359]
[69.71234894 106.09676361]
[80.99430847 83.79976654]
[73.02794647 71.09004211]
[65.06157684 58.38032532]
[57.09520721 45.67060471]
[49.75411606 39.93466568]
[49.08586121 32.43940353]
[41.51861572 19.48807907]
[33.95137405 6.53675365]
[26.38413048 -6.41457176]
[18.81688690 -19.36589813]
[3.79382324 -23.48236465]
[-3.69594073 -36.72464752]
[0.32106283 -51.02147675]
[-7.24618006 -63.97280121]
[-14.81342316 -76.92412567]
[-22.38066673 -89.87545013]
[-29.94790840 -102.82677460]
[-37.51515198 -115.77810669]
[-45.08239365 -128.72943115]
[-52.64963913 -141.68075562]
[-59.80879211 -147.64222717]
[-60.24362564 -155.15464783]
[-67.40441895 -168.33503723]
[-82.62826538 -172.57888794]
[-90.31941986 -186.38546753]
[-85.91486359 -201.56358337]
[-72.02774048 -209.10833740]
[-56.89703369 -204.54356384]
[-49.49952316 -190.57743835]
[-54.22402191 -175.49583435]
[-47.06322479 -162.31544495]
[-39.69831085 -149.24800110]
[-32.13106918 -136.29667664]
[-24.56382561 -123.34534454]
[-16.99658394 -110.39402008]
[-9.42934036 -97.44269562]
[-1.86209750 -84.49137115]
[5.70514536 -71.54004669]
[13.27238846 -58.58871841]
[27.69957924 -55.06852341]
[35.55833435 -42.04183578]
[31.76821327 -26.93313980]
[39.33545685 -13.98181534]
[46.90269852 -1.03048933]
[54.46994019 11.92083645]
[62.03718567 24.87216187]
[69.80493164 37.70423508]
[77.77129364 50.41395569]
[85.73766327 63.12367630]
[93.70403290 75.83339691]
[110.18119049 77.19633484]
[122.19589233 88.55420685]
[136.97692871 86.00055695]
[151.75794983 83.44689941]
[166.53898621 80.89324951]
[181.11755371 72.23866272]
[193.46965027 83.85166168]
[185.72990417 98.93584442]
[169.09263611 95.67427826]
[154.31159973 98.22792816]
[139.53057861 100.78158569]
[124.74954987 103.33523560]
[129.85003662 107.96794128]
[134.08389282 113.92073822]
[146.66819763 122.08380127]
[159.25248718 130.24685669]
[171.83677673 138.40992737]
[188.41549683 141.95704651]
[189.59645081 158.86982727]
[173.67155457 164.68653870]
[163.67370605 150.99421692]
[151.08941650 142.83116150]
[138.50512695 134.66809082]
[125.92083740 126.50502777]
[118.89556885 129.13098145]
[124.14723206 143.18159485]
[110.09651947 148.43302917]
[104.84503174 134.38287354]
[97.81976318 137.00881958]
[93.67523956 151.42488098]
[89.53070831 165.84095764]
[85.38618469 180.25701904]
[81.24166107 194.67308044]
[92.66237640 204.79878235]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 99]
[12 98]
[13 97]
[14 96]
[15 95]
[17 66]
[18 65]
[19 64]
[20 63]
[22 62]
[23 61]
[24 60]
[25 59]
[26 58]
[29 55]
[30 54]
[31 53]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[38 47]
[39 46]
[68 78]
[69 77]
[70 76]
[71 75]
[80 90]
[81 89]
[82 88]
[83 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
