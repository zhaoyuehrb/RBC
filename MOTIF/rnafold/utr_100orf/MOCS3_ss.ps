%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCACGACAACUUCCGGAAGAGGUCGCCAUGGCUUCCCGGGAGGAGGUACUCGCCUUACAAGCUGAAGUUGCCCAACGUGAGGAGGAAUUGAAUUCGCUGAAGCAGAAGCUGGCGUCGGCUCUUUUGG\
) } def
/len { sequence length } bind def

/coor [
[181.89765930 165.70071411]
[194.94459534 158.30097961]
[181.66275024 151.33012390]
[168.38092041 144.35928345]
[155.09907532 137.38844299]
[141.81723022 130.41758728]
[128.53540039 123.44673920]
[114.09076691 137.29460144]
[93.15991974 142.25279236]
[71.16108704 135.50044250]
[54.56518936 117.45709991]
[49.00969696 92.03761292]
[34.36308289 95.27437592]
[19.71646500 98.51113892]
[5.06984901 101.74790192]
[-9.57676697 104.98466492]
[-24.22338295 108.22142792]
[-38.86999893 111.45819092]
[-44.12440872 115.73683167]
[-49.88250351 116.52169037]
[-54.30195999 114.47936249]
[-69.08785248 117.00472260]
[-83.87374115 119.53007507]
[-98.65962982 122.05542755]
[-113.44552612 124.58078766]
[-128.23141479 127.10614014]
[-138.63984680 139.31449890]
[-154.66891479 138.64466858]
[-164.02247620 125.61047363]
[-159.52529907 110.21063232]
[-144.62721252 104.25859833]
[-130.75677490 112.32025146]
[-115.97087860 109.79489136]
[-101.18498993 107.26953888]
[-86.39909363 104.74418640]
[-71.61320496 102.21882629]
[-56.82731628 99.69347382]
[-42.10676193 96.81156921]
[-27.46014595 93.57480621]
[-12.81352997 90.33804321]
[1.83308589 87.10128021]
[16.47970200 83.86451721]
[31.12631798 80.62775421]
[45.77293396 77.39099121]
[50.92215729 63.30250549]
[41.81472015 51.38383865]
[32.70727921 39.46517563]
[23.59984398 27.54650879]
[14.49240589 15.62784386]
[-0.84559053 9.82457638]
[-3.22140980 -6.40156031]
[9.80898666 -16.35850716]
[24.84104347 -9.80341244]
[26.41106987 6.52040672]
[35.51850891 18.43907166]
[44.62594604 30.35773659]
[53.73338318 42.27640152]
[62.84082031 54.19506836]
[70.10066986 52.31234360]
[66.33544159 37.79259491]
[80.85524750 34.02759552]
[84.62035370 48.54689407]
[91.88020325 46.66417313]
[94.04753876 31.82157516]
[83.51210022 20.26568794]
[82.92112732 4.63927460]
[92.55364990 -7.67934704]
[107.86149597 -10.87370110]
[121.61676025 -3.43551254]
[127.32463074 11.12313461]
[122.29003143 25.92809296]
[108.89013672 33.98891068]
[106.72280121 48.83150864]
[122.23560333 56.70277023]
[133.38591003 68.73748779]
[139.27639771 82.98677826]
[139.78363037 97.41161346]
[135.50624084 110.16490173]
[148.78808594 117.13574982]
[162.06991577 124.10659790]
[175.35176086 131.07743835]
[188.63360596 138.04829407]
[201.91543579 145.01913452]
[215.59393311 151.17532349]
[229.61918640 156.49440002]
[243.64442444 161.81347656]
[257.66967773 167.13255310]
[271.69491577 172.45162964]
[287.34197998 170.11073303]
[296.49850464 181.85838318]
[310.52374268 187.17745972]
[324.54898071 192.49653625]
[338.57424927 197.81561279]
[343.92636108 196.93275452]
[348.58352661 198.13607788]
[351.85052490 200.78730774]
[353.39944458 204.06159973]
[367.00256348 210.38261414]
[380.60568237 216.70364380]
[394.20880127 223.02465820]
[400.98165894 222.81521606]
[406.03344727 225.68769836]
[408.30502319 229.99380493]
[421.58685303 236.96464539]
[434.86871338 243.93550110]
[451.22384644 242.73487854]
[460.21612549 256.44879150]
[452.59506226 270.96951294]
[436.20056152 271.35937500]
[427.89785767 257.21734619]
[414.61602783 250.24649048]
[401.33416748 243.27565002]
[387.88775635 236.62777710]
[374.28466797 230.30674744]
[360.68154907 223.98573303]
[347.07843018 217.66471863]
[333.25515747 211.84085083]
[319.22991943 206.52177429]
[305.20468140 201.20269775]
[291.17944336 195.88363647]
[276.53555298 198.60498047]
[266.37585449 186.47686768]
[252.35060120 181.15779114]
[238.32534790 175.83871460]
[224.30010986 170.51965332]
[210.27487183 165.20057678]
[213.38761902 179.87405396]
[204.04852295 191.61207581]
[189.05085754 191.87640381]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 83]
[3 82]
[4 81]
[5 80]
[6 79]
[7 78]
[12 44]
[13 43]
[14 42]
[15 41]
[16 40]
[17 39]
[18 38]
[21 37]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
[63 73]
[64 72]
[84 126]
[85 125]
[86 124]
[87 123]
[88 122]
[90 120]
[91 119]
[92 118]
[93 117]
[97 116]
[98 115]
[99 114]
[100 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
