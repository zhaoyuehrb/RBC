%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAGGCAGCCAUAAUUCAGAAACUCCUCCAAGCAACCCAACCUUCAGAUCAACUCCUGACACCAUGGCCUGCUGUCAGACCAGCUUCUGUGGAUUUCCCAGCUGCUCCACCAGUGGGACCUGCGGCUCCAGCUGCUGCCAGCCAAGCUGCUGUGAGACCAGCU\
) } def
/len { sequence length } bind def

/coor [
[75.08877563 204.78253174]
[71.42987823 190.23562622]
[75.41318512 175.77418518]
[86.00462341 165.15243530]
[100.45462036 161.12782288]
[115.01219940 164.74528503]
[105.73981476 152.95448303]
[96.46743011 141.16369629]
[87.19504547 129.37289429]
[75.22985077 120.32667542]
[61.35803986 114.61942291]
[47.48622131 108.91217041]
[50.50650406 123.60495758]
[41.05331802 135.25129700]
[26.05346298 135.31736755]
[16.49804878 123.75475311]
[19.38878059 109.03592682]
[32.60892487 101.94601440]
[19.34243011 94.94600677]
[6.07593632 87.94599152]
[-7.19055748 80.94598389]
[-20.45705223 73.94597626]
[-36.27312469 74.34900665]
[-43.91879654 61.56648254]
[-57.18529129 54.56647110]
[-72.11592102 59.00650787]
[-85.47032166 51.71851730]
[-89.61119843 37.45707703]
[-102.87769318 30.45706749]
[-120.70726013 36.75627899]
[-137.21865845 28.21137619]
[-142.19915771 10.62992382]
[-155.72253418 4.14005280]
[-169.24591064 -2.34981728]
[-182.76928711 -8.83968735]
[-197.52005005 -3.83445072]
[-211.14222717 -10.60874748]
[-215.82304382 -24.70220184]
[-229.34642029 -31.19207382]
[-242.86979675 -37.68194199]
[-256.39990234 -28.21529961]
[-272.76306152 -26.85811806]
[-287.49868774 -33.88563919]
[-296.63757324 -47.30031586]
[-297.77084351 -63.39858627]
[-311.41534424 -69.62981415]
[-325.05981445 -75.86103821]
[-338.70428467 -82.09226227]
[-352.14898682 -74.34503174]
[-367.57611084 -76.01346588]
[-379.05361938 -86.45601654]
[-382.16815186 -101.65731049]
[-375.72210693 -115.77214050]
[-362.19415283 -123.37306213]
[-346.78604126 -121.53737640]
[-335.42251587 -110.97093201]
[-332.47308350 -95.73674011]
[-318.82858276 -89.50551605]
[-305.18411255 -83.27429199]
[-291.53964233 -77.04306793]
[-280.93972778 -85.69295502]
[-267.58065796 -88.93806458]
[-254.06413269 -86.08757782]
[-243.04800415 -77.64356995]
[-236.72358704 -65.21369171]
[-236.37992859 -51.20531464]
[-222.85655212 -44.71544647]
[-209.33317566 -38.22557449]
[-195.41001892 -43.39097214]
[-181.60295105 -37.00196838]
[-176.27940369 -22.36306000]
[-162.75604248 -15.87318897]
[-149.23266602 -9.38331890]
[-135.70928955 -2.89344835]
[-125.97269440 -8.94107723]
[-114.40525818 -9.52293491]
[-103.89507294 -4.37726355]
[-97.12267303 5.31310701]
[-95.87768555 17.19057274]
[-82.61119080 24.19058228]
[-68.50148010 19.55899239]
[-54.94765091 26.46901131]
[-50.18527985 41.29998016]
[-36.91878510 48.29998779]
[-22.05162239 47.39626694]
[-13.45704174 60.67948151]
[-0.19054766 67.67948914]
[13.07594585 74.67949677]
[26.34243965 81.67951202]
[39.60893250 88.67951965]
[53.19347382 95.04035187]
[67.06529236 100.74760437]
[80.93710327 106.45486450]
[81.46104431 94.79450989]
[88.20022583 85.90032959]
[98.31061554 82.56610107]
[108.03317261 85.42134857]
[120.41524506 76.95469666]
[132.79733276 68.48805237]
[145.17941284 60.02140045]
[157.56147766 51.55475235]
[162.90994263 44.09269333]
[170.26087952 43.04741287]
[182.80191040 34.81803894]
[195.34294128 26.58866692]
[198.30940247 11.06527805]
[211.43046570 2.25543499]
[226.92161560 5.38586187]
[235.59225464 18.59933090]
[232.29821777 34.05652618]
[218.99382019 42.58696747]
[203.57231140 39.12969589]
[191.03128052 47.35906982]
[178.49024963 55.58844376]
[166.02813721 63.93683243]
[153.64605713 72.40348053]
[141.26397705 80.87013245]
[128.88189697 89.33677673]
[116.49981689 97.80342865]
[113.52223969 112.45729828]
[98.98584747 120.10050964]
[108.25823212 131.89131165]
[117.53061676 143.68209839]
[126.80300140 155.47290039]
[137.15419006 166.32891846]
[148.49043274 176.15182495]
[159.91967773 185.86636353]
[171.44087219 195.47167969]
[182.96208191 205.07698059]
[194.57420349 214.57215881]
[206.27619934 223.95637512]
[217.97817993 233.34057617]
[229.68017578 242.72479248]
[245.28671265 245.32225037]
[250.37510681 259.32073975]
[262.07708740 268.70495605]
[273.77908325 278.08917236]
[288.71209717 273.87197876]
[303.26028442 279.26922607]
[311.82955933 292.20550537]
[311.12484741 307.70654297]
[301.41714478 319.81195068]
[286.43927002 323.86685181]
[271.95050049 318.31213379]
[263.52206421 305.28366089]
[264.39486694 289.79113770]
[252.69288635 280.40695190]
[240.99089050 271.02273560]
[226.22137451 269.09649658]
[220.29595947 254.42678833]
[208.59397888 245.04257202]
[196.89198303 235.65835571]
[185.18998718 226.27415466]
[177.97171021 224.53485107]
[173.35678101 216.59817505]
[161.83557129 206.99287415]
[150.31436157 197.38757324]
[143.13050842 195.51116943]
[138.66751099 187.48806763]
[127.33127594 177.66516113]
[130.25198364 192.37805176]
[125.54452515 206.62023926]
[114.43095398 216.69439697]
[99.79639435 219.98524475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 124]
[7 123]
[8 122]
[9 121]
[10 93]
[11 92]
[12 91]
[18 90]
[19 89]
[20 88]
[21 87]
[22 86]
[24 84]
[25 83]
[28 80]
[29 79]
[32 74]
[33 73]
[34 72]
[35 71]
[38 68]
[39 67]
[40 66]
[45 60]
[46 59]
[47 58]
[48 57]
[97 119]
[98 118]
[99 117]
[100 116]
[101 115]
[103 114]
[104 113]
[105 112]
[125 160]
[126 159]
[127 157]
[128 156]
[129 155]
[130 153]
[131 152]
[132 151]
[133 150]
[135 148]
[136 147]
[137 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
