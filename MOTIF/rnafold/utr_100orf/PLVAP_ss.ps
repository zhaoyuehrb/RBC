%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGCCAGAGCAGGCCUGGUGGUGAGCAGGGACGGUGCACCGGACGGCGGGAUCGAGCAAAUGGGUCUGGCCAUGGAGCACGGAGGGUCCUACGCUCGGGCGGGGGGCAGCUCUCGGGGCUGCUGGUAUUACCUGCGCUACUUCUUCCUCUUCGUCUCCC\
) } def
/len { sequence length } bind def

/coor [
[99.42188263 430.43664551]
[99.13101196 415.43945312]
[98.84014130 400.44229126]
[98.54927063 385.44509888]
[98.25839996 370.44793701]
[97.96752930 355.45074463]
[88.09616852 340.96670532]
[97.06106567 324.90823364]
[96.47943115 309.91952515]
[95.89780426 294.93081665]
[95.31616974 279.94207764]
[87.09118652 267.52441406]
[94.28755951 253.43458557]
[93.70593262 238.44587708]
[93.12429810 223.45715332]
[84.98786926 217.17680359]
[81.60569763 207.23799133]
[84.33425140 196.87237549]
[92.50000000 189.59358215]
[92.50000000 174.59358215]
[92.50000000 159.59358215]
[92.50000000 144.59358215]
[92.50000000 129.59358215]
[92.50000000 114.59358215]
[86.96190643 100.65337372]
[76.66828156 89.74276733]
[66.37465668 78.83216095]
[56.08103561 67.92155457]
[38.33904648 63.07745361]
[34.91055679 45.88801193]
[24.40729523 35.17906570]
[13.90403557 24.47011948]
[3.40077496 13.76117325]
[-7.10248518 3.05222774]
[-29.07073212 -1.24109411]
[-33.90986252 -22.31915092]
[-45.21140289 -32.18197250]
[-56.51293945 -42.04479218]
[-67.81447601 -51.90761185]
[-83.29946136 -55.15196228]
[-87.80120850 -69.34997559]
[-99.10274506 -79.21279144]
[-110.40428162 -89.07561493]
[-121.25753784 -87.70920563]
[-130.86145020 -92.46902466]
[-136.12585449 -101.55226135]
[-135.50782776 -111.81200409]
[-146.41842651 -122.10562897]
[-157.32902527 -132.39924622]
[-172.67657471 -136.24159241]
[-176.62438965 -150.60348511]
[-187.53500366 -160.89710999]
[-198.44560242 -171.19073486]
[-209.35621643 -181.48435974]
[-220.26681519 -191.77798462]
[-235.21475220 -187.96188354]
[-249.84567261 -192.85472107]
[-259.49087524 -204.89521790]
[-261.07266235 -220.24127197]
[-254.08622742 -233.99603271]
[-240.76097107 -241.77040100]
[-225.34889221 -241.08360291]
[-212.76795959 -232.15480042]
[-207.03269958 -217.83312988]
[-209.97319031 -202.68859863]
[-199.06259155 -192.39497375]
[-188.15197754 -182.10134888]
[-177.24137878 -171.80772400]
[-166.33076477 -161.51409912]
[-151.76362610 -158.40802002]
[-147.03540039 -143.30986023]
[-136.12480164 -133.01623535]
[-125.21419525 -122.72261047]
[-106.14347839 -119.70790863]
[-100.54146576 -100.37715149]
[-89.23992920 -90.51433563]
[-77.93838501 -80.65151215]
[-63.26176453 -78.11261749]
[-57.95166016 -63.20915222]
[-46.65011978 -53.34632874]
[-35.34858322 -43.48350906]
[-24.04704285 -33.62068939]
[-16.37758636 -35.84547043]
[-8.36331940 -34.81732941]
[-1.34173453 -30.63211441]
[3.48529673 -23.91873932]
[5.25701475 -15.74564743]
[3.60646081 -7.45103264]
[14.10972118 3.25791359]
[24.61298180 13.96685982]
[35.11624146 24.67580605]
[45.61950302 35.38475037]
[57.73886108 35.82530594]
[66.57834625 44.70421982]
[66.99163818 57.62793350]
[77.28526306 68.53853607]
[87.57888794 79.44914246]
[97.87251282 90.35974884]
[102.26874542 87.02345276]
[108.79813385 86.07148743]
[116.12795258 88.55588531]
[131.05749512 87.10372162]
[145.98704529 85.65155792]
[160.91658020 84.19939423]
[175.84611511 82.74723053]
[193.75692749 66.99181366]
[214.74026489 76.74645233]
[229.40026855 73.57089233]
[244.06028748 70.39533997]
[258.72027588 67.21977997]
[273.38031006 64.04421997]
[288.04031372 60.86866379]
[302.70031738 57.69310379]
[317.36032104 54.51754761]
[331.56039429 45.25504684]
[344.39190674 56.33607483]
[337.29602051 71.73364258]
[320.53588867 69.17755127]
[305.87588501 72.35311127]
[291.21585083 75.52867126]
[276.55584717 78.70423126]
[261.89584351 81.87978363]
[247.23583984 85.05534363]
[232.57583618 88.23090363]
[217.91581726 91.40646362]
[216.02369690 97.76086426]
[212.20866394 103.24660492]
[206.82730103 107.29425049]
[200.40060425 109.47140503]
[193.56361389 109.52875519]
[187.00268555 107.42814636]
[181.38656616 103.34969330]
[177.29827881 97.67677307]
[162.36874390 99.12893677]
[147.43920898 100.58110046]
[132.50965881 102.03326416]
[117.58011627 103.48542786]
[107.50000000 114.59358215]
[107.50000000 129.59358215]
[107.50000000 144.59358215]
[107.50000000 159.59358215]
[107.50000000 174.59358215]
[107.50000000 189.59358215]
[118.38103485 206.52473450]
[108.11302185 222.87551880]
[108.69464874 237.86424255]
[109.27628326 252.85296631]
[117.54286957 266.34274292]
[110.30489349 279.36044312]
[110.88652039 294.34918213]
[111.46815491 309.33789062]
[112.04978180 324.32659912]
[120.98701477 333.67108154]
[121.13637543 346.19903564]
[112.96471405 355.15988159]
[113.25557709 370.15704346]
[113.54644775 385.15423584]
[113.83731842 400.15142822]
[114.12818909 415.14859009]
[114.41905975 430.14578247]
[116.98292542 449.35714722]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 160]
[2 159]
[3 158]
[4 157]
[5 156]
[6 155]
[8 152]
[9 151]
[10 150]
[11 149]
[13 147]
[14 146]
[15 145]
[19 143]
[20 142]
[21 141]
[22 140]
[23 139]
[24 138]
[25 98]
[26 97]
[27 96]
[28 95]
[30 92]
[31 91]
[32 90]
[33 89]
[34 88]
[36 82]
[37 81]
[38 80]
[39 79]
[41 77]
[42 76]
[43 75]
[47 73]
[48 72]
[49 71]
[51 69]
[52 68]
[53 67]
[54 66]
[55 65]
[101 137]
[102 136]
[103 135]
[104 134]
[105 133]
[107 125]
[108 124]
[109 123]
[110 122]
[111 121]
[112 120]
[113 119]
[114 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
