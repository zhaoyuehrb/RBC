%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUUCCUCCAGUUCCGGAGUCCAGUGGCUGACCGCCUUGCUGGAGCGGAGAUGCAGCCGCCGCCCCGAAAAGUGAAGCCGGCCCAGGAGGUGAAGCUUCGCUUCCUGGAACAGCUGAGCAUCCUUCAGACCUGGCAGCAGAGGGAGGCGG\
) } def
/len { sequence length } bind def

/coor [
[-188.69337463 201.11898804]
[-202.88063049 205.98948669]
[-217.06790161 210.85998535]
[-231.25515747 215.73046875]
[-238.86251831 233.02705383]
[-256.37533569 239.22708130]
[-272.60623169 230.86074829]
[-286.58010864 236.31336975]
[-300.55398560 241.76599121]
[-314.52783203 247.21861267]
[-321.43783569 253.29115295]
[-328.84725952 252.63623047]
[-342.93084717 257.79888916]
[-357.01440430 262.96154785]
[-371.09799194 268.12420654]
[-385.18154907 273.28686523]
[-399.26513672 278.44952393]
[-413.34869385 283.61218262]
[-416.09094238 287.16329956]
[-419.49261475 289.39395142]
[-423.04418945 290.26019287]
[-426.27627563 289.89251709]
[-428.81423950 288.56665039]
[-443.27603149 292.54867554]
[-457.73782349 296.53070068]
[-465.23736572 301.85800171]
[-472.53973389 300.44226074]
[-487.08071899 304.12454224]
[-501.62173462 307.80682373]
[-511.03610229 320.79718018]
[-527.06811523 321.39212036]
[-537.41937256 309.13525391]
[-534.14935303 293.42901611]
[-519.76641846 286.32186890]
[-505.30401611 293.26580811]
[-490.76300049 289.58352661]
[-476.22201538 285.90124512]
[-461.71984863 282.06887817]
[-447.25802612 278.08688354]
[-432.79623413 274.10485840]
[-418.51135254 269.52862549]
[-404.42779541 264.36596680]
[-390.34420776 259.20330811]
[-376.26065063 254.04064941]
[-362.17706299 248.87799072]
[-348.09350586 243.71533203]
[-334.00991821 238.55267334]
[-319.98046875 233.24475098]
[-306.00659180 227.79212952]
[-292.03274536 222.33950806]
[-278.05886841 216.88688660]
[-275.82525635 205.62359619]
[-268.33255005 196.76435852]
[-257.37133789 192.60693359]
[-245.65000916 194.30325317]
[-236.12564087 201.54321289]
[-221.93838501 196.67271423]
[-207.75112915 191.80223083]
[-193.56387329 186.93173218]
[-184.03849792 175.48112488]
[-168.47375488 178.31828308]
[-154.28649902 173.44779968]
[-140.09924316 168.57730103]
[-125.91197968 163.70681763]
[-111.72472382 158.83631897]
[-97.58855438 153.81947327]
[-83.50498199 148.65681458]
[-82.51840210 137.43849182]
[-77.36660767 127.36642456]
[-68.76969147 119.93344116]
[-57.96146774 116.25749207]
[-46.51249695 116.91362762]
[-36.10184097 121.84437561]
[-28.27085304 130.36256409]
[-13.89444065 126.08252716]
[-7.05333042 112.90167236]
[7.46542501 108.35630798]
[21.24432755 115.62126160]
[35.62073898 111.34121704]
[49.99715424 107.06117249]
[64.37356567 102.78112793]
[78.74997711 98.50109100]
[85.90371704 75.54299164]
[115.43789673 68.41688538]
[126.68135834 58.48791122]
[137.92481995 48.55893326]
[149.16827393 38.62995529]
[160.41174316 28.70097923]
[171.65519714 18.77200317]
[182.89866638 8.84302616]
[194.14212036 -1.08595061]
[205.38558960 -11.01492691]
[216.62904358 -20.94390488]
[227.87251282 -30.87288094]
[232.57450867 -46.58348846]
[248.59155273 -50.10294342]
[259.44665527 -37.81072998]
[253.97305298 -22.35202789]
[237.80148315 -19.62941933]
[226.55802917 -9.70044231]
[215.31455994 0.22853395]
[204.07110596 10.15751076]
[192.82763672 20.08648682]
[181.58418274 30.01546478]
[170.34071350 39.94444275]
[159.09725952 49.87341690]
[147.85379028 59.80239487]
[136.61033630 69.73136902]
[125.36687469 79.66034698]
[126.83004761 87.01623535]
[139.91758728 79.68708038]
[150.93215942 89.86936951]
[144.65176392 103.49127960]
[129.75640869 101.72801971]
[131.21958923 109.08390808]
[145.40684509 113.95439911]
[159.59410095 118.82489014]
[173.78135681 123.69538116]
[187.96861267 128.56587219]
[202.95504761 122.83995056]
[216.70193481 131.11054993]
[218.66381836 147.03320312]
[207.33572388 158.39338684]
[191.40759277 156.47654724]
[183.09812927 142.75312805]
[168.91087341 137.88264465]
[154.72360229 133.01214600]
[140.53634644 128.14166260]
[126.34909058 123.27116394]
[107.78196716 129.52890015]
[91.55199432 124.50460815]
[83.03002167 112.87750244]
[68.65361023 117.15754700]
[54.27719498 121.43758392]
[39.90078354 125.71762848]
[25.52437210 129.99768066]
[17.96269035 143.61599731]
[3.32199240 147.75177002]
[-9.61439705 140.45893860]
[-23.99080849 144.73898315]
[-29.51510239 162.99374390]
[-44.76053238 174.20417786]
[-63.53434753 174.03811646]
[-78.34232330 162.74038696]
[-92.42589569 167.90304565]
[-99.45989990 173.83148193]
[-106.85422516 173.02357483]
[-121.04148865 177.89407349]
[-135.22874451 182.76455688]
[-149.41600037 187.63505554]
[-163.60325623 192.50555420]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 59]
[2 58]
[3 57]
[4 56]
[7 51]
[8 50]
[9 49]
[10 48]
[12 47]
[13 46]
[14 45]
[15 44]
[16 43]
[17 42]
[18 41]
[23 40]
[24 39]
[25 38]
[27 37]
[28 36]
[29 35]
[61 151]
[62 150]
[63 149]
[64 148]
[65 147]
[66 145]
[67 144]
[74 140]
[75 139]
[78 136]
[79 135]
[80 134]
[81 133]
[82 132]
[84 109]
[85 108]
[86 107]
[87 106]
[88 105]
[89 104]
[90 103]
[91 102]
[92 101]
[93 100]
[94 99]
[115 129]
[116 128]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
