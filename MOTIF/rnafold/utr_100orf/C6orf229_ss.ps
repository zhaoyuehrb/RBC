%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGUGGUGUACCUGAAGGACCACUGGCCUUUUUACACAAUGGCUAACAGCCGAUUUUCUUGUACGCAAAUUUGGGUUAAGAUGUAUGGGUAUUUUGCGGGGCUGUGUCGGCGUCUCCAGAAAUUCUGGCGUGUCACUG\
) } def
/len { sequence length } bind def

/coor [
[79.94885254 229.05767822]
[82.57125092 209.85421753]
[82.90782166 194.85798645]
[83.24439240 179.86177063]
[83.58096313 164.86553955]
[83.91753387 149.86932373]
[70.87141418 142.46669006]
[58.17055511 150.44717407]
[45.46969223 158.42765808]
[32.76882935 166.40814209]
[20.06796455 174.38861084]
[18.23888969 185.21603394]
[10.86925507 193.05633545]
[0.60528010 195.45082092]
[-9.05952835 191.83520508]
[-22.10564613 199.23783875]
[-35.15176392 206.64045715]
[-48.19787979 214.04307556]
[-61.24399567 221.44570923]
[-67.22485352 228.46130371]
[-74.66693878 228.86430359]
[-87.87587738 235.97233582]
[-98.95857239 248.80238342]
[-114.35521698 241.70451355]
[-111.79694366 224.94468689]
[-94.98390198 222.76339722]
[-81.77497101 215.65536499]
[-68.64662170 208.39958191]
[-55.60050201 200.99696350]
[-42.55438614 193.59434509]
[-29.50826836 186.19171143]
[-16.46215248 178.78909302]
[-8.01505089 161.44932556]
[12.08748436 161.68775940]
[24.78834724 153.70727539]
[37.48921204 145.72679138]
[50.19007492 137.74630737]
[62.89093781 129.76582336]
[55.70381165 107.46871948]
[60.17653275 85.82528687]
[73.87943268 70.20915222]
[92.26235962 63.84886169]
[110.08103943 67.19457245]
[110.41761017 52.19834518]
[102.99191284 38.22803879]
[111.01284027 25.67758179]
[111.34941101 10.68135738]
[100.70740509 -0.69341719]
[101.26235962 -15.89692593]
[112.17205811 -25.97235107]
[112.50862885 -40.96857452]
[112.84519958 -55.96479797]
[105.41949463 -69.93510437]
[113.44042206 -82.48556519]
[113.77699280 -97.48178864]
[101.46988678 -109.85808563]
[101.87200928 -126.97055817]
[114.25038910 -138.30024719]
[114.25038910 -153.30024719]
[114.25038910 -168.30024719]
[114.25038910 -183.30024719]
[114.25038910 -198.30024719]
[111.10023499 -206.96429443]
[114.42246246 -213.63587952]
[114.75903320 -228.63209534]
[107.33332825 -242.60240173]
[115.35425568 -255.15286255]
[115.69082642 -270.14907837]
[107.34172821 -284.26379395]
[115.62551117 -298.41690063]
[132.02053833 -298.04895020]
[139.66099548 -283.53842163]
[130.68705750 -269.81253052]
[130.35047913 -254.81629944]
[137.80026245 -241.91860962]
[129.75526428 -228.29553223]
[129.41868591 -213.29930115]
[129.25039673 -198.30024719]
[129.25039673 -183.30024719]
[129.25039673 -168.30024719]
[129.25039673 -153.30024719]
[129.25039673 -138.30024719]
[139.57814026 -130.51553345]
[143.57153320 -118.00947571]
[139.54887390 -105.30800629]
[128.77320862 -97.14521790]
[128.43664551 -82.14899445]
[135.88642883 -69.25131226]
[127.84142303 -55.62822723]
[127.50485229 -40.63200378]
[127.16828156 -25.63578033]
[137.61495972 -15.08103848]
[137.48724365 0.13205913]
[126.34563446 11.01792812]
[126.00906372 26.01415253]
[133.45883179 38.91183090]
[125.41383362 52.53491592]
[125.07726288 67.53114319]
[135.07246399 78.71577454]
[150.01208496 80.06036377]
[164.45025635 73.59124756]
[176.43273926 82.43826294]
[191.37234497 83.78285217]
[206.31196594 85.12744141]
[221.25157166 86.47203064]
[237.56893921 81.86984253]
[246.50836182 96.27549744]
[235.14036560 108.85345459]
[219.90698242 101.41165161]
[204.96737671 100.06705475]
[190.02775574 98.72246552]
[175.08813477 97.37787628]
[161.71853638 103.94316864]
[148.66749573 94.99997711]
[133.72787476 93.65538788]
[139.82405090 109.51805115]
[137.72268677 128.98423767]
[148.08862305 139.82615662]
[158.45457458 150.66809082]
[168.82051086 161.51000977]
[179.18644714 172.35192871]
[194.50254822 179.62197876]
[191.75653076 196.35206604]
[174.92008972 198.34471130]
[168.34452820 182.71786499]
[157.97859192 171.87594604]
[147.61264038 161.03402710]
[137.24670410 150.19209290]
[126.88076782 139.35017395]
[119.88901520 142.06410217]
[129.37220764 153.68601990]
[121.24941254 166.29634094]
[106.74625397 162.46774292]
[105.90550995 147.49195862]
[98.91375732 150.20588684]
[98.57718658 165.20211792]
[98.24061584 180.19833374]
[97.90404510 195.19456482]
[97.56747437 210.19078064]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 139]
[3 138]
[4 137]
[5 136]
[6 135]
[7 38]
[8 37]
[9 36]
[10 35]
[11 34]
[15 32]
[16 31]
[17 30]
[18 29]
[19 28]
[21 27]
[22 26]
[43 98]
[44 97]
[46 95]
[47 94]
[50 91]
[51 90]
[52 89]
[54 87]
[55 86]
[58 82]
[59 81]
[60 80]
[61 79]
[62 78]
[64 77]
[65 76]
[67 74]
[68 73]
[99 115]
[100 114]
[102 112]
[103 111]
[104 110]
[105 109]
[117 129]
[118 128]
[119 127]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
