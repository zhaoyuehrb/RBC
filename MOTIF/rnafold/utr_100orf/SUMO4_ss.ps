%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:45:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGCAGCAGCUGAGGAGACUCCGGUGUUCACCAUGGCCAACGAAAAGCCCACAGAAGAAGUCAAGACUGAGAACAACAAUCAUAUUAAUUUGAAGGUGGCGGGACAGGAUGGUUCUGUGGUGCAGUUUAAGA\
) } def
/len { sequence length } bind def

/coor [
[109.44674683 187.10943604]
[93.08763123 187.34709167]
[76.96952057 184.53929138]
[71.80251312 198.62126160]
[66.63551331 212.70324707]
[69.97269440 228.75924683]
[57.55789948 239.47395325]
[42.16240311 233.82499695]
[39.62377548 217.62351990]
[52.55353546 207.53623962]
[57.72053528 193.45426941]
[62.88753891 179.37228394]
[49.46932602 171.58174133]
[37.63562775 161.54656982]
[27.75752449 149.58143616]
[14.70892811 156.97969055]
[1.66033268 164.37794495]
[-6.52835798 177.91514587]
[-21.41605949 177.46173096]
[-34.46465683 184.85998535]
[-42.30397797 199.26405334]
[-58.70250320 199.40647888]
[-66.79084015 185.14076233]
[-58.24839783 171.14222717]
[-41.86290741 171.81138611]
[-28.81431389 164.41313171]
[-21.55894661 151.40510559]
[-5.73792076 151.32934570]
[7.31067514 143.93109131]
[20.35927010 136.53283691]
[15.65287399 123.72460175]
[12.99219036 110.34095764]
[12.44174862 96.70651245]
[14.01490116 83.15193939]
[17.67349243 70.00598907]
[23.32878876 57.58750534]
[30.84362793 46.19766998]
[40.03575134 36.11272812]
[50.68222046 27.57727623]
[62.52481461 20.79832840]
[75.27631378 15.94029713]
[88.62744904 13.12100697]
[102.25440216 12.40883541]
[115.82669067 13.82105637]
[129.01512146 17.32341576]
[141.49983215 22.83097267]
[152.97802734 30.21014786]
[163.17131042 39.28197098]
[174.83587646 29.85127640]
[186.38909912 20.28449821]
[197.82937622 10.58294964]
[209.26965332 0.88140106]
[220.70993042 -8.82014751]
[232.15020752 -18.52169609]
[243.59048462 -28.22324562]
[255.03076172 -37.92479324]
[266.47103882 -47.62634277]
[266.03140259 -61.14410782]
[273.37585449 -72.26801300]
[285.61590576 -77.03231812]
[298.16931152 -73.89535522]
[309.83386230 -83.32604980]
[321.49844360 -92.75674438]
[318.74902344 -109.01609039]
[324.51565552 -124.36518097]
[337.14599609 -134.67359924]
[353.15447998 -137.21803284]
[368.18402100 -131.40122986]
[379.62429810 -141.10276794]
[391.06457520 -150.80432129]
[388.98608398 -160.49632263]
[390.62451172 -170.21319580]
[395.70565796 -178.58804321]
[403.47421265 -184.45886230]
[412.80560303 -187.02983093]
[422.36877441 -185.97888184]
[430.81610107 -181.49745178]
[443.11456299 -190.08508301]
[446.00537109 -205.39132690]
[458.60009766 -213.92521667]
[473.17446899 -211.07495117]
[485.47293091 -219.66258240]
[497.77139282 -228.25021362]
[497.92776489 -243.76651001]
[507.20153809 -256.20745850]
[522.02673340 -260.78924561]
[536.70281982 -255.75010681]
[545.58648682 -243.02767944]
[545.26177979 -227.51399231]
[535.85363770 -215.17439270]
[520.97955322 -210.75369263]
[506.35903931 -215.95173645]
[494.06057739 -207.36410522]
[481.76208496 -198.77647400]
[479.41754150 -184.11227417]
[467.06747437 -175.22799683]
[451.70220947 -177.78660583]
[439.40371704 -169.19897461]
[437.68713379 -148.91252136]
[421.45437622 -136.15255737]
[400.76611328 -139.36404419]
[389.32583618 -129.66249084]
[377.88555908 -119.96094513]
[381.21081543 -106.66349030]
[378.44949341 -93.16985321]
[370.08776855 -82.14186096]
[357.72225952 -75.78018951]
[343.75552368 -75.38533783]
[330.92913818 -81.09217834]
[319.26455688 -71.66149139]
[307.60000610 -62.23079681]
[306.57562256 -45.48655701]
[293.53073120 -34.41165924]
[276.17257690 -36.18606567]
[264.73229980 -26.48451614]
[253.29203796 -16.78296661]
[241.85174561 -7.08141851]
[230.41146851 2.62013006]
[218.97119141 12.32167912]
[207.53091431 22.02322769]
[196.09063721 31.72477531]
[192.99488831 38.51355743]
[184.26657104 41.51583862]
[172.60200500 50.94653320]
[180.45582581 65.29905701]
[185.50445557 80.86146545]
[187.57186890 97.09116364]
[186.58601379 113.42227936]
[182.58122253 129.28541565]
[175.69715881 144.12748718]
[166.17382812 157.43099976]
[154.34327698 168.73211670]
[140.61798096 177.63681030]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 12]
[4 11]
[5 10]
[15 30]
[16 29]
[17 28]
[19 26]
[20 25]
[48 124]
[49 123]
[50 121]
[51 120]
[52 119]
[53 118]
[54 117]
[55 116]
[56 115]
[57 114]
[61 111]
[62 110]
[63 109]
[68 103]
[69 102]
[70 101]
[77 98]
[78 97]
[81 94]
[82 93]
[83 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
