%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUAGAGAAUUACUCCAAAUUCAUCAUGAUUGAAGACAAUAAGGAGAACAAAGACCAUUCCUUAGAAAGGGGAAGAGCAAGUCUCAUUUUUUCCUUAAAGAAUGAAGUUGGAGGACUUAUAAAAG\
) } def
/len { sequence length } bind def

/coor [
[70.89217377 429.96530151]
[56.29263306 426.25030518]
[42.88603210 419.37930298]
[31.34484100 409.69689941]
[22.24796295 397.68881226]
[16.05169296 383.95730591]
[13.06683064 369.19119263]
[13.44309902 354.13110352]
[17.16162300 339.53247070]
[24.03588295 326.12753296]
[33.72106934 314.58868408]
[45.73137665 305.49472046]
[59.46437073 299.30175781]
[74.23121643 296.32049561]
[74.60223389 281.32507324]
[74.97325134 266.32965088]
[75.34426117 251.33425903]
[75.71527863 236.33883667]
[76.08629608 221.34342957]
[68.66616821 208.42868042]
[76.74243927 194.82411194]
[77.11345673 179.82868958]
[77.48447418 164.83328247]
[77.85549164 149.83787537]
[78.22650146 134.84246826]
[67.17082977 124.70481110]
[52.26366425 126.37110901]
[39.38846207 136.52793884]
[24.25704575 130.20556641]
[22.43531990 113.90792084]
[35.79732132 104.40061188]
[50.59736633 111.46394348]
[65.50453186 109.79764557]
[64.83348846 101.39726257]
[66.14135742 93.23108673]
[69.28128815 85.74996185]
[74.00745392 79.34926605]
[79.99265289 74.34809875]
[86.85015869 70.97362518]
[94.15825653 69.35128021]
[101.48594666 69.50132751]
[105.87348938 55.15736008]
[110.26103973 40.81339264]
[114.64858246 26.46942329]
[119.03613281 12.12545490]
[123.42367554 -2.21851325]
[127.81122589 -16.56248093]
[132.19877625 -30.90645027]
[136.58631897 -45.25041962]
[126.24016571 -58.56632996]
[125.83354187 -75.25873566]
[135.32896423 -88.79162598]
[150.85017395 -93.98287201]
[154.88159180 -108.43097687]
[158.91300964 -122.87907410]
[162.94442749 -137.32717896]
[151.36895752 -154.75474548]
[156.12091064 -174.83392334]
[173.78041077 -184.93858337]
[176.36483765 -199.71426392]
[178.94924927 -214.48995972]
[181.53367615 -229.26564026]
[184.11808777 -244.04132080]
[186.70251465 -258.81698608]
[178.69635010 -272.71954346]
[184.70787048 -287.59371948]
[200.12554932 -292.02932739]
[213.12226868 -282.62374878]
[213.72804260 -266.59213257]
[201.47819519 -256.23257446]
[198.89376831 -241.45689392]
[196.30935669 -226.68121338]
[193.72492981 -211.90553284]
[191.14051819 -197.12985229]
[188.55609131 -182.35417175]
[196.21231079 -176.57279968]
[201.21528625 -168.31835938]
[202.81752014 -158.74082947]
[200.74880981 -149.19337463]
[195.26074219 -141.04115295]
[187.09695435 -135.46612549]
[177.39253235 -133.29576111]
[173.36111450 -118.84766388]
[169.32969666 -104.39955902]
[165.29827881 -89.95145416]
[174.55982971 -80.25332642]
[177.81951904 -67.13353729]
[174.11483765 -54.01951218]
[164.31730652 -44.39234543]
[150.93028259 -40.86287308]
[146.54273987 -26.51890373]
[142.15519714 -12.17493534]
[137.76765442 2.16903353]
[133.38009644 16.51300240]
[128.99255371 30.85696983]
[124.60501099 45.20093918]
[120.21746063 59.54490662]
[115.82991028 73.88887787]
[128.19567871 85.73274231]
[132.53584290 102.90030670]
[126.92803192 120.31220245]
[112.49115753 132.47544861]
[93.22191620 135.21347046]
[92.85089874 150.20889282]
[92.47988129 165.20429993]
[92.10886383 180.19970703]
[91.73784637 195.19511414]
[99.13144684 209.18244934]
[91.08171082 221.71444702]
[90.71069336 236.70985413]
[90.33967590 251.70527649]
[89.96865845 266.70068359]
[89.59764099 281.69610596]
[89.22662354 296.69149780]
[103.82796478 300.39941406]
[117.23789215 307.26391602]
[128.78378296 316.94073486]
[137.88647461 328.94442749]
[144.08940125 342.67291260]
[147.08142090 357.43759155]
[146.71244812 372.49783325]
[143.00099182 387.09829712]
[136.13323975 400.50656128]
[126.45363617 412.05007935]
[114.44773865 421.14987183]
[100.71775055 427.34948730]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 114]
[15 113]
[16 112]
[17 111]
[18 110]
[19 109]
[21 107]
[22 106]
[23 105]
[24 104]
[25 103]
[26 33]
[27 32]
[41 98]
[42 97]
[43 96]
[44 95]
[45 94]
[46 93]
[47 92]
[48 91]
[49 90]
[53 85]
[54 84]
[55 83]
[56 82]
[59 75]
[60 74]
[61 73]
[62 72]
[63 71]
[64 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
