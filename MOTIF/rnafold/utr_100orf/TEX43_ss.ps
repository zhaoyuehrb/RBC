%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCAUCCAUUGCUGUCAGGAAUGGCUUCAGGGAAAGAUACUUGUCCUACUUUGCCUAAACUCACUAACAACUGCUCUGAUGAGAGUCUCUAUAAAUCUGCUAAUAAGUAUGAAGAGAUUC\
) } def
/len { sequence length } bind def

/coor [
[204.02438354 203.02920532]
[196.24804688 197.81469727]
[191.74034119 189.45040894]
[191.65830994 179.81037903]
[179.66072083 170.80715942]
[167.66313171 161.80395508]
[155.66554260 152.80073547]
[143.25996399 157.90905762]
[129.84657288 156.17668152]
[118.97261810 147.95307922]
[113.56757355 135.31860352]
[115.15431213 121.55908966]
[103.39251709 112.24994659]
[91.28000641 103.40194702]
[78.83484650 95.02828979]
[66.38969421 86.65464020]
[50.62070847 85.37023926]
[44.38048172 71.84585571]
[31.93532753 63.47220230]
[19.38339233 55.25947189]
[6.72675943 47.20903015]
[-12.48309898 52.69915771]
[-29.37928581 42.61097336]
[-33.53046417 23.68234444]
[-46.77064514 16.63269234]
[-60.01082993 9.58304119]
[-73.88921356 18.46671677]
[-90.25876617 19.17017174]
[-104.68256378 11.59675217]
[-113.29827881 -2.11947751]
[-113.85229492 -18.21416473]
[-127.26959991 -24.92057228]
[-140.68690491 -31.62697792]
[-154.10421753 -38.33338547]
[-167.60675049 -44.86648941]
[-181.19229126 -51.22520447]
[-194.77781677 -57.58391953]
[-211.68649292 -58.82217407]
[-215.17741394 -75.41282654]
[-200.20150757 -83.36007690]
[-188.41909790 -71.16945648]
[-174.83357239 -64.81073761]
[-161.24803162 -58.45202255]
[-153.76760864 -58.46642685]
[-147.39781189 -51.75069046]
[-133.98049927 -45.04428482]
[-120.56319427 -38.33787918]
[-107.14588928 -31.63147163]
[-96.21343231 -39.92172623]
[-82.70570374 -42.68118668]
[-69.26888275 -39.31064224]
[-58.56066895 -30.41755486]
[-52.72462082 -17.70746613]
[-52.96117783 -3.65714025]
[-39.72099686 3.39251089]
[-26.48081398 10.44216156]
[-17.65227699 4.81663322]
[-7.19587517 3.41501307]
[2.95805025 6.56512880]
[10.90589333 13.74809647]
[15.12762070 23.68244553]
[14.77720261 34.55239487]
[27.43383598 42.60284042]
[34.85419846 43.54903030]
[40.30898285 51.02704620]
[52.75413895 59.40070343]
[67.63296509 60.08616257]
[74.76335144 74.20948029]
[87.20850372 82.58313751]
[99.65365601 90.95679474]
[103.63690186 90.72223663]
[107.69414520 92.30688477]
[110.98266602 95.69646454]
[112.70166016 100.48815155]
[124.46345520 109.79729462]
[140.62669373 105.00914001]
[156.31854248 110.70054626]
[165.47082520 124.46159363]
[164.66874695 140.80314636]
[176.66633606 149.80636597]
[188.66392517 158.80957031]
[200.66151428 167.81278992]
[221.98466492 168.88143921]
[229.68218994 187.96028137]
[242.33882141 196.01072693]
[254.99545288 204.06115723]
[267.65209961 212.11160278]
[280.30871582 220.16204834]
[292.96536255 228.21249390]
[305.62197876 236.26293945]
[318.27862549 244.31336975]
[318.30291748 229.31340027]
[329.87963867 219.77508545]
[344.60726929 222.62063599]
[351.79754639 235.78497314]
[346.23233032 249.71437073]
[331.94958496 254.29980469]
[343.46780396 263.90869141]
[355.10876465 273.36849976]
[366.87057495 282.67764282]
[378.63235474 291.98678589]
[390.39416504 301.29592896]
[406.68887329 303.14379883]
[412.98693848 318.28533936]
[402.80947876 331.14422607]
[386.62615967 328.49234009]
[381.08502197 313.05773926]
[369.32321167 303.74859619]
[357.56143188 294.43945312]
[345.79962158 285.13031006]
[338.51586914 283.42614746]
[333.85888672 275.42691040]
[322.34069824 265.81802368]
[310.22817993 256.97000122]
[297.57156372 248.91957092]
[284.91491699 240.86912537]
[272.25827026 232.81867981]
[259.60165405 224.76823425]
[246.94502258 216.71778870]
[234.28837585 208.66735840]
[221.63174438 200.61691284]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 82]
[5 81]
[6 80]
[7 79]
[12 75]
[13 74]
[14 70]
[15 69]
[16 68]
[18 66]
[19 65]
[20 63]
[21 62]
[24 56]
[25 55]
[26 54]
[31 48]
[32 47]
[33 46]
[34 45]
[35 43]
[36 42]
[37 41]
[84 121]
[85 120]
[86 119]
[87 118]
[88 117]
[89 116]
[90 115]
[91 114]
[97 113]
[98 112]
[99 110]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
