%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:19:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUAAACGGAGUGGCGGCGGCAUUUCCUGGUGUCUGAGCCUGGCGCGGAGGCUAUGGGCAGCCAGGAGGUGCUGGGCCACGCGGCCCGGCUGGCCUCCUCCGGUCUCCUCCUGCAGGUGUUGUUUCGGUUGAUCACCUUUGUCUUGAAUGCAU\
) } def
/len { sequence length } bind def

/coor [
[267.54916382 238.56341553]
[255.15151978 230.11958313]
[242.75386047 221.67576599]
[239.92729187 222.10668945]
[236.75550842 221.41032410]
[233.67967224 219.44773865]
[231.18344116 216.24674988]
[229.73229980 212.01191711]
[218.05917358 202.59182739]
[206.38606262 193.17172241]
[194.71295166 183.75161743]
[183.03982544 174.33151245]
[165.60327148 172.58377075]
[159.05895996 155.40087891]
[147.19732666 146.21928406]
[135.33569336 137.03768921]
[123.38161469 127.97678375]
[111.33633423 119.03747559]
[99.29104614 110.09817505]
[86.03101349 103.08594513]
[71.86203766 98.16251373]
[57.69306183 93.23908997]
[43.52408600 88.31565857]
[29.35511017 83.39223480]
[15.18613434 78.46880341]
[1.01715958 73.54537964]
[-13.15181541 68.62194824]
[-27.32079124 63.69852066]
[-41.48976517 58.77509308]
[-55.65874100 53.85166550]
[-69.82771301 48.92823792]
[-84.04586029 44.14865112]
[-98.31170654 39.51339340]
[-112.57755280 34.87813950]
[-126.84339905 30.24288368]
[-141.10925293 25.60762978]
[-158.99502563 29.87130356]
[-170.25495911 16.44364738]
[-184.61181641 12.09846973]
[-198.96867371 7.75329208]
[-213.32554626 3.40811419]
[-227.68240356 -0.93706334]
[-240.67330933 7.76755095]
[-256.21450806 6.03389120]
[-266.96789551 -5.31946182]
[-267.85604858 -20.93180275]
[-258.45965576 -33.43146133]
[-243.21534729 -36.91647720]
[-229.32104492 -29.74133873]
[-223.33721924 -15.29392338]
[-208.98036194 -10.94874573]
[-194.62350464 -6.60356808]
[-180.26664734 -2.25839067]
[-165.90977478 2.08678699]
[-155.06326294 -3.35115004]
[-143.04058838 0.19572154]
[-136.47399902 11.34178162]
[-122.20814514 15.97703648]
[-107.94229889 20.61229134]
[-93.67645264 25.24754715]
[-79.41060638 29.88280106]
[-72.03391266 28.95325851]
[-64.90428925 34.75926208]
[-50.73531342 39.68268967]
[-36.56633759 44.60611725]
[-22.39736176 49.52954483]
[-8.22838783 54.45297241]
[5.94058752 59.37639999]
[20.10956192 64.29982758]
[34.27853775 69.22325897]
[48.44751358 74.14668274]
[62.61648941 79.07011414]
[76.78546143 83.99354553]
[90.95443726 88.91696930]
[103.84229279 81.24213409]
[106.26385498 66.43888855]
[108.68540955 51.63564301]
[111.10696411 36.83239746]
[113.52852631 22.02915192]
[107.22628021 6.88934374]
[117.40021515 -5.97234678]
[133.58425903 -3.32491565]
[139.12965393 12.10818768]
[128.33177185 24.45070839]
[125.91020966 39.25395203]
[123.48865509 54.05719757]
[121.06710052 68.86044312]
[118.64553833 83.66368866]
[114.77648163 92.38416290]
[108.23035431 98.05289459]
[120.27563477 106.99219513]
[132.32092285 115.93150330]
[141.13305664 118.55588531]
[144.51727295 125.17606354]
[156.37890625 134.35765076]
[168.24055481 143.53924561]
[181.14935303 142.69224548]
[190.84870911 150.63249207]
[192.45993042 162.65840149]
[204.13304138 172.07849121]
[215.80616760 181.49859619]
[227.47927856 190.91870117]
[239.15240479 200.33880615]
[251.19767761 209.27810669]
[263.59533691 217.72192383]
[275.99301147 226.16575623]
[284.71185303 221.61668396]
[294.43444824 220.59556580]
[303.79611206 223.20275879]
[311.49850464 229.03234863]
[316.48980713 237.23463440]
[318.10818481 246.63984680]
[316.16931152 255.92483521]
[327.84243774 265.34494019]
[339.51556396 274.76504517]
[351.18865967 284.18515015]
[363.83728027 292.24819946]
[377.30435181 298.85412598]
[390.77142334 305.46002197]
[404.23849487 312.06594849]
[410.94482422 312.00003052]
[415.90301514 314.92614746]
[418.10922241 319.22219849]
[431.29751587 326.36843872]
[444.48583984 333.51470947]
[459.56219482 328.77355957]
[473.53646851 336.15563965]
[478.11795044 351.28131104]
[470.58853149 365.17675781]
[455.41528320 369.59805298]
[441.60021973 361.92214966]
[437.33956909 346.70300293]
[424.15127563 339.55676270]
[410.96298218 332.41049194]
[397.63256836 325.53302002]
[384.16549683 318.92709351]
[370.69842529 312.32119751]
[357.23135376 305.71527100]
[364.07891846 319.06109619]
[364.06515503 334.06109619]
[357.19305420 347.39428711]
[344.98410034 356.10876465]
[330.14138794 358.27511597]
[315.95098877 353.41375732]
[305.55465698 342.60095215]
[301.25415039 328.23065186]
[304.00155640 313.48440552]
[313.18859863 301.62701416]
[326.78131104 295.28366089]
[341.76858521 295.85827637]
[330.09545898 286.43817139]
[318.42233276 277.01806641]
[306.74920654 267.59796143]
[286.74627686 271.55136108]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 106]
[2 105]
[3 104]
[8 103]
[9 102]
[10 101]
[11 100]
[12 99]
[14 96]
[15 95]
[16 94]
[17 92]
[18 91]
[19 90]
[20 74]
[21 73]
[22 72]
[23 71]
[24 70]
[25 69]
[26 68]
[27 67]
[28 66]
[29 65]
[30 64]
[31 63]
[32 61]
[33 60]
[34 59]
[35 58]
[36 57]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[75 88]
[76 87]
[77 86]
[78 85]
[79 84]
[113 153]
[114 152]
[115 151]
[116 150]
[117 138]
[118 137]
[119 136]
[120 135]
[123 134]
[124 133]
[125 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
