%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:28:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUGACAGUGAUUUUAAAAACUUUAUUGGGACAGAUACAGGGCCUCAGUGGAAACCCACACUCUACUACGUCUAGAAUGUACUUUUUAUGUUUCUGUA\
) } def
/len { sequence length } bind def

/coor [
[74.97196198 367.75247192]
[61.17248535 374.84851074]
[45.84269333 372.44494629]
[34.87720871 361.46597290]
[32.49248123 346.13323975]
[39.60548782 332.34249878]
[53.48113632 325.39657593]
[55.80460739 310.57760620]
[58.12807846 295.75863647]
[60.45155334 280.93969727]
[54.77906799 267.16754150]
[64.56060791 254.73242188]
[66.88407898 239.91346741]
[69.20755005 225.09451294]
[62.30095291 215.02888489]
[64.23739624 202.56796265]
[74.50879669 194.57701111]
[77.29201508 179.83749390]
[80.07523346 165.09796143]
[82.85844421 150.35842896]
[85.64166260 135.61889648]
[88.42488098 120.87937164]
[78.39031982 110.14659119]
[76.54131317 95.57037354]
[83.57824707 82.67205811]
[96.83559418 76.33740997]
[99.61880493 61.59788132]
[102.40202332 46.85835266]
[105.18524170 32.11882401]
[98.65385437 14.99025059]
[110.40705872 2.06107306]
[112.73052979 -12.75788403]
[115.05400848 -27.57683945]
[117.37747955 -42.39579773]
[105.37822723 -50.03821945]
[97.25015259 -61.66086578]
[94.20770264 -75.46890259]
[96.68310547 -89.34554291]
[104.26529694 -101.17658997]
[115.76777649 -109.17248535]
[129.41412354 -112.13903046]
[132.19734192 -126.87856293]
[134.98056030 -141.61808777]
[137.76377869 -156.35762024]
[131.57606506 -162.53543091]
[128.47322083 -170.60807800]
[128.92031860 -179.14945984]
[132.76242065 -186.68417358]
[139.26492310 -191.94227600]
[147.25265503 -194.07324219]
[151.84352112 -208.35343933]
[156.43437195 -222.63363647]
[161.02523804 -236.91383362]
[157.03875732 -252.82107544]
[169.00817871 -264.03112793]
[184.62037659 -259.01202393]
[187.81486511 -242.92703247]
[175.30543518 -232.32298279]
[170.71456909 -218.04278564]
[166.12370300 -203.76258850]
[161.53285217 -189.48239136]
[168.54412842 -169.08082581]
[152.50329590 -153.57440186]
[149.72009277 -138.83486938]
[146.93687439 -124.09534454]
[144.15365601 -109.35581970]
[157.14067078 -100.18650818]
[164.89396667 -86.24137115]
[165.83540344 -70.25567627]
[159.72862244 -55.38991547]
[147.73571777 -44.60494995]
[132.19644165 -40.07232285]
[129.87295532 -25.25336838]
[127.54949188 -10.43441105]
[125.22601318 4.38454580]
[132.13261414 14.45017242]
[130.19618225 26.91110229]
[119.92476654 34.90203857]
[117.14155579 49.64156723]
[114.35833740 64.38109589]
[111.57511902 79.12062836]
[121.60968018 89.85340881]
[123.45868683 104.42962646]
[116.42175293 117.32794189]
[103.16440582 123.66259003]
[100.38119507 138.40211487]
[97.59797668 153.14164734]
[94.81475830 167.88117981]
[92.03153992 182.62071228]
[89.24832916 197.36022949]
[95.77971649 214.48880005]
[84.02650452 227.41798401]
[81.70303345 242.23693848]
[79.37956238 257.05590820]
[84.88585663 271.88800049]
[75.27050781 283.26315308]
[72.94703674 298.08212280]
[70.62356567 312.90109253]
[68.30009460 327.72003174]
[79.38403320 338.57940674]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 99]
[8 98]
[9 97]
[10 96]
[12 94]
[13 93]
[14 92]
[17 90]
[18 89]
[19 88]
[20 87]
[21 86]
[22 85]
[26 81]
[27 80]
[28 79]
[29 78]
[31 75]
[32 74]
[33 73]
[34 72]
[41 66]
[42 65]
[43 64]
[44 63]
[50 61]
[51 60]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
