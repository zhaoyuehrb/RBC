%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:41:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGAAAUCAGGGCUAAUGAACCAUCUAAGGACAGGCCAUGAGGGUUCGAUUUUGUACCAAAGGCAAUUUAAUUUUGGUUAUAAUUGAGGAUGUUGAAGAAAGCAUUGAAUGGAAGACAUUGCAGAAGAAGAAACAGC\
) } def
/len { sequence length } bind def

/coor [
[35.60741425 222.33494568]
[36.01873398 207.34059143]
[40.01728439 192.88336182]
[47.36924362 179.80862427]
[57.64472198 168.88092041]
[70.24605560 160.73770142]
[79.08406830 148.61790466]
[87.92208099 136.49809265]
[74.35545349 142.89706421]
[60.78882599 149.29602051]
[51.60808182 162.18106079]
[36.79629517 160.61254883]
[23.22967148 167.01150513]
[9.66304398 173.41046143]
[-3.90358186 179.80941772]
[-8.06327248 185.12307739]
[-13.48034000 187.16625977]
[-18.23093224 186.17543030]
[-32.07285309 191.95481873]
[-37.72217941 203.61116028]
[-49.43703079 208.11625671]
[-60.69548416 203.54978943]
[-74.66448212 209.01487732]
[-80.76966858 223.59233093]
[-95.42596436 229.50573730]
[-109.93806458 223.24676514]
[-115.69618225 208.52876282]
[-109.28413391 194.08366394]
[-94.50607300 188.48147583]
[-80.12956238 195.04588318]
[-66.16056824 189.58079529]
[-56.01199722 175.30804443]
[-37.85223389 178.11289978]
[-24.01031303 172.33351135]
[-10.30253887 166.24279785]
[3.26408744 159.84382629]
[16.83071327 153.44487000]
[30.39734077 147.04591370]
[38.60770798 134.61856079]
[54.38986969 135.72938538]
[67.95649719 129.33042908]
[81.52312469 122.93147278]
[71.67064667 108.60040283]
[71.59345245 91.11699677]
[81.42239380 76.54616547]
[97.83388519 70.00104523]
[96.47965240 55.06230164]
[95.12541199 40.12356186]
[93.77117920 25.18481827]
[92.41693878 10.24607468]
[91.06270599 -4.69266844]
[89.70846558 -19.63141251]
[77.33985901 -25.82195091]
[69.72393799 -37.23741531]
[68.77256012 -50.81840134]
[74.62846375 -62.98859406]
[85.65593719 -70.59651184]
[84.63965607 -85.56204224]
[83.62336731 -100.52757263]
[82.60708618 -115.49310303]
[81.59080505 -130.45863342]
[80.57452393 -145.42417908]
[79.55823517 -160.38970947]
[65.99533081 -167.74165344]
[58.58028412 -181.27017212]
[59.67921066 -196.65834045]
[68.94144440 -208.99586487]
[83.41143799 -214.34588623]
[98.47187805 -211.00122070]
[109.31702423 -200.02915955]
[112.48623657 -184.93081665]
[106.96822357 -170.52404785]
[94.52377319 -161.40599060]
[95.54005432 -146.44046021]
[96.55633545 -131.47492981]
[97.57261658 -116.50939178]
[98.58890533 -101.54385376]
[99.60518646 -86.57832336]
[100.62146759 -71.61279297]
[114.77344513 -63.37076187]
[121.31762695 -48.17745972]
[117.50856781 -31.90901375]
[104.64720917 -20.98564911]
[106.00144958 -6.04690552]
[107.35568237 8.89183807]
[108.70992279 23.83058167]
[110.06415558 38.76932526]
[111.41839600 53.70806503]
[112.77262878 68.64681244]
[125.06530762 77.24273682]
[139.56147766 73.38774872]
[154.05766296 69.53276062]
[168.55383301 65.67777252]
[183.05000305 61.82278061]
[197.54617310 57.96779251]
[205.25627136 44.17177963]
[220.48593140 39.94883347]
[234.19964600 47.80435562]
[238.26133728 63.07780457]
[230.26127625 76.70771027]
[214.94572449 80.60769653]
[201.40116882 72.46396637]
[186.90499878 76.31895447]
[172.40881348 80.17394257]
[157.91264343 84.02893829]
[143.41647339 87.88392639]
[128.92030334 91.73891449]
[128.15940857 109.63783264]
[117.42179108 123.74297333]
[130.68540955 130.74842834]
[143.94902039 137.75389099]
[157.21264648 144.75935364]
[172.90417480 141.41938782]
[185.20700073 151.71598816]
[184.68344116 167.75048828]
[171.73513794 177.22259521]
[156.29490662 172.86611938]
[150.20718384 158.02296448]
[136.94355774 151.01751709]
[123.67994690 144.01205444]
[110.41632843 137.00659180]
[118.69765472 149.51338196]
[126.97897339 162.02015686]
[139.19683838 170.72209167]
[148.96867371 182.10240173]
[155.72308350 195.49560547]
[159.06510925 210.11856079]
[158.79930115 225.11621094]
[154.94123840 239.61155701]
[147.71650696 252.75701904]
[137.54756165 263.78393555]
[125.02902222 272.04745483]
[110.89289856 277.06445312]
[95.96580505 278.54153442]
[81.12057495 276.39230347]
[67.22527313 270.74246216]
[55.09242630 261.92236328]
[45.43148804 250.44776917]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 42]
[9 41]
[10 40]
[12 38]
[13 37]
[14 36]
[15 35]
[18 34]
[19 33]
[22 31]
[23 30]
[46 89]
[47 88]
[48 87]
[49 86]
[50 85]
[51 84]
[52 83]
[57 79]
[58 78]
[59 77]
[60 76]
[61 75]
[62 74]
[63 73]
[90 107]
[91 106]
[92 105]
[93 104]
[94 103]
[95 102]
[109 121]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
