%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:32:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGGCUCUGGAGGGCGCCCCGGAAACCAUGGAAGUCCUCGUCCUGGCCGGAUACCGCGCGCAGAAGGAGGACGAGCUGAGUCUGGCGCCCGGGGACGUGGUCCGGCAGGUGCGCUGGGUGCCCGCGC\
) } def
/len { sequence length } bind def

/coor [
[38.29404068 455.46994019]
[33.97255707 469.83395386]
[29.65106964 484.19796753]
[25.32958221 498.56195068]
[26.55632019 515.47149658]
[10.64723873 521.33129883]
[0.61235523 507.66610718]
[10.96557331 494.24047852]
[15.28705978 479.87646484]
[19.60854721 465.51245117]
[23.93003273 451.14843750]
[16.69442177 430.79067993]
[32.77243805 415.25949097]
[35.67639542 400.54327393]
[38.58035660 385.82705688]
[41.48431396 371.11083984]
[44.38827133 356.39462280]
[47.29223251 341.67840576]
[50.19618988 326.96218872]
[53.10014725 312.24597168]
[41.10683441 303.37884521]
[34.12407303 290.12930298]
[33.58423233 275.10034180]
[39.64792252 261.27096558]
[51.16149521 251.40563965]
[65.87615967 247.50178528]
[68.78011322 232.78556824]
[71.68407440 218.06935120]
[64.04167938 200.37376404]
[77.28894806 185.27032471]
[79.47296906 170.43017578]
[81.65699005 155.59002686]
[83.84100342 140.74987793]
[81.95262909 137.65658569]
[81.52995300 133.46777344]
[83.08332062 128.91175842]
[86.76457214 124.92195129]
[90.02602386 110.28081512]
[86.01874542 96.88554382]
[95.33283997 86.45773315]
[98.59429169 71.81659698]
[101.85574341 57.17545700]
[105.11719513 42.53431702]
[108.37864685 27.89317894]
[106.73896790 22.71808052]
[107.26630402 17.93351555]
[109.42699432 14.32016468]
[112.44978333 12.32089043]
[116.77126312 -2.04311872]
[121.09275055 -16.40712738]
[125.41423798 -30.77113724]
[110.99227905 -26.64716530]
[98.63297272 -35.14701843]
[97.32374573 -50.08977127]
[108.01664734 -60.60936737]
[122.93601990 -59.05616760]
[131.23298645 -46.55833435]
[137.26721191 -60.29106903]
[143.30145264 -74.02380371]
[149.33569336 -87.75653839]
[149.94067383 -96.97713470]
[155.68769836 -101.74739838]
[162.05455017 -115.32912445]
[168.42140198 -128.91084290]
[174.78825378 -142.49256897]
[167.46261597 -156.04400635]
[169.49737549 -171.13417053]
[179.90452576 -182.00410461]
[194.54151917 -184.63012695]
[200.90837097 -198.21185303]
[195.29812622 -212.98684692]
[201.85469055 -227.36694336]
[216.68818665 -232.82066345]
[230.99815369 -226.11242676]
[236.29473877 -211.22210693]
[229.43559265 -196.98387146]
[214.49009705 -191.84500122]
[208.12324524 -178.26327515]
[215.46766663 -165.33277893]
[213.76968384 -150.38015747]
[203.47225952 -139.16337585]
[188.36997986 -136.12571716]
[182.00312805 -122.54399872]
[175.63627625 -108.96227264]
[169.26942444 -95.38054657]
[163.06842041 -81.72230530]
[157.03419495 -67.98957062]
[150.99995422 -54.25683594]
[144.96571350 -40.52410126]
[139.77824402 -26.44964981]
[135.45675659 -12.08564091]
[131.13526917 2.27836776]
[126.81378937 16.64237595]
[123.01979065 31.15463257]
[119.75833893 45.79576874]
[116.49687958 60.43690872]
[113.23542786 75.07804871]
[109.97397614 89.71918488]
[113.98125458 103.11445618]
[104.66716003 113.54226685]
[101.40570831 128.18341064]
[98.68115234 142.93388367]
[96.49713898 157.77404785]
[94.31311798 172.61419678]
[92.12910461 187.45434570]
[99.18741608 195.90045166]
[100.34920502 206.62391663]
[95.46739960 215.99378967]
[86.40029144 220.97331238]
[83.49633026 235.68951416]
[80.59236908 250.40573120]
[92.72106934 259.60662842]
[99.62405396 273.10607910]
[99.97985077 288.20223999]
[93.77143860 301.89956665]
[82.27900696 311.50338745]
[67.81636810 315.14993286]
[64.91240692 329.86614990]
[62.00844574 344.58236694]
[59.10448837 359.29858398]
[56.20053101 374.01480103]
[53.29656982 388.73101807]
[50.39261246 403.44723511]
[47.48865509 418.16345215]
[53.50705719 424.27621460]
[56.52539825 432.20468140]
[56.10519409 440.58291626]
[52.39346695 448.00009155]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[4 8]
[13 124]
[14 123]
[15 122]
[16 121]
[17 120]
[18 119]
[19 118]
[20 117]
[26 111]
[27 110]
[28 109]
[30 105]
[31 104]
[32 103]
[33 102]
[37 101]
[38 100]
[40 98]
[41 97]
[42 96]
[43 95]
[44 94]
[48 93]
[49 92]
[50 91]
[51 90]
[57 89]
[58 88]
[59 87]
[60 86]
[62 85]
[63 84]
[64 83]
[65 82]
[69 78]
[70 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
