%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUCUUGGAAACCUACCUAGAACCUCCACCCUCUGACACCAUGGUUAACUCUUGUUGUGGCUCUGUCUGCUCUGACCAGGGCUGUGAUCAAGGCCUCUGCCAAGAGACCUGCUGCCGCCCCAGCUGCUGCCAGACCACCU\
) } def
/len { sequence length } bind def

/coor [
[118.54876709 149.20814514]
[100.43790436 153.59457397]
[81.57738495 151.40312195]
[64.32480621 142.66255188]
[56.16450119 155.24862671]
[48.00419617 167.83470154]
[46.98877335 183.62329102]
[33.57272720 190.09313965]
[25.41242027 202.67922974]
[30.16811371 217.57611084]
[24.18784904 232.02500916]
[10.29532623 239.20356750]
[-4.94983149 235.72232056]
[-14.34932709 223.22497559]
[-13.46500587 207.61241150]
[-2.71441674 196.25640869]
[12.82634068 194.51892090]
[20.98664665 181.93283081]
[21.41839027 167.04449463]
[35.41811752 159.67440796]
[43.57842255 147.08831787]
[51.73872757 134.50224304]
[49.06129837 127.49642944]
[35.86586761 134.62950134]
[22.67043877 141.76255798]
[14.47909832 154.32846069]
[-0.01615673 158.18690491]
[-13.37061596 151.35621643]
[-18.72547913 137.34458923]
[-13.33050728 123.34837341]
[0.04346108 116.55595398]
[14.52761364 120.45590210]
[29.11702728 116.97035980]
[43.70643997 113.48480988]
[41.02901077 106.47900391]
[26.55453682 102.54331970]
[12.08006382 98.60763550]
[-2.39441013 94.67195129]
[-15.98412991 102.74010468]
[-31.27770424 98.75485992]
[-39.20172501 85.08059692]
[-35.05501175 69.83000946]
[-21.29773712 62.05100632]
[-6.09184599 66.35872650]
[1.54127419 80.19747925]
[16.01574707 84.13316345]
[30.49022102 88.06884766]
[44.96469498 92.00453186]
[49.28067398 78.96783447]
[56.58755875 67.54775238]
[66.36029053 58.40503311]
[77.93476868 52.04298019]
[90.55252838 48.78017044]
[103.41032410 48.73532104]
[115.71118164 51.82505798]
[126.71378326 57.77435684]
[135.77714539 66.13869476]
[142.39782715 76.33622742]
[156.46783447 71.13668823]
[170.53782654 65.93714905]
[184.60781860 60.73761368]
[191.63980103 54.78150558]
[199.04699707 55.58245087]
[213.22857666 50.69544220]
[227.41015625 45.80843353]
[241.59173584 40.92142487]
[246.21759033 26.22762680]
[258.46545410 17.18091011]
[273.51385498 17.08205032]
[285.59036255 25.75938606]
[299.77194214 20.87237740]
[311.47402954 6.70219374]
[328.54522705 10.62106800]
[342.61523438 5.42152882]
[356.68524170 0.22199026]
[359.43826294 -3.36750841]
[362.86383057 -5.61885881]
[366.44161987 -6.48644543]
[369.69253540 -6.10407114]
[372.23532104 -4.75457382]
[386.70977783 -8.69025803]
[401.18426514 -12.62594223]
[415.65872192 -16.56162643]
[426.94531250 -27.64872360]
[441.25677490 -23.52186966]
[455.73126221 -27.45755386]
[470.20571899 -31.39323807]
[474.02972412 -42.74930573]
[482.79672241 -50.74009323]
[494.22338867 -53.44249725]
[505.40930176 -50.29063034]
[513.57318115 -42.18956757]
[528.20758057 -45.48114777]
[542.84197998 -48.77272415]
[554.60791016 -59.34972763]
[568.72283936 -54.59386826]
[583.35723877 -57.88544464]
[597.99163818 -61.17702103]
[612.62603760 -64.46859741]
[624.30926514 -75.97655487]
[640.04296875 -71.35228729]
[643.64154053 -55.35284805]
[631.40319824 -44.43708801]
[615.91760254 -49.83420563]
[601.28320312 -46.54262924]
[586.64880371 -43.25104904]
[572.01440430 -39.95947266]
[561.29522705 -29.61790466]
[546.13354492 -34.13832855]
[531.49914551 -30.84675217]
[516.86474609 -27.55517387]
[508.09988403 -11.54930019]
[490.13201904 -6.87538910]
[474.14141846 -16.91876411]
[459.66693115 -12.98307991]
[445.19247437 -9.04739571]
[434.94119263 1.75819588]
[419.59442139 -2.08715272]
[405.11993408 1.84853160]
[390.64547729 5.78421593]
[376.17098999 9.71990013]
[361.88476562 14.29198647]
[347.81478882 19.49152565]
[333.74478149 24.69106483]
[328.36901855 35.58268738]
[316.62561035 40.00330353]
[304.65893555 35.05395508]
[290.47735596 39.94096375]
[286.31027222 54.21588516]
[274.39562988 63.40855789]
[259.17465210 63.82767105]
[246.47874451 55.10300064]
[232.29716492 59.99000931]
[218.11558533 64.87702179]
[203.93400574 69.76403046]
[189.80735779 74.80760956]
[175.73736572 80.00714874]
[161.66735840 85.20668793]
[147.59736633 90.40622711]
[148.98089600 107.57357788]
[144.24127197 124.49831390]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 22]
[5 21]
[6 20]
[8 18]
[9 17]
[35 48]
[36 47]
[37 46]
[38 45]
[58 139]
[59 138]
[60 137]
[61 136]
[63 135]
[64 134]
[65 133]
[66 132]
[70 128]
[71 127]
[73 124]
[74 123]
[75 122]
[80 121]
[81 120]
[82 119]
[83 118]
[85 116]
[86 115]
[87 114]
[92 111]
[93 110]
[94 109]
[96 107]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
