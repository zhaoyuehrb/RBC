%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:37:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCAGAAACCUCUCUUAACACAGCUCUCAACCCAACUCCUGACACCAUGGCCAGCUGUUCCACCAGUGGGACCUGUGGCUCCAGCUGCUGCCAGCCAAGCUGCUGUGAAACUAGCUGCUGCCAGCCAAGCUGCUGCCAGACCAGCU\
) } def
/len { sequence length } bind def

/coor [
[66.57181549 140.45823669]
[69.42933655 125.73293304]
[78.29422760 113.63277435]
[91.47269440 106.46927643]
[76.59418488 104.56401062]
[61.71567917 102.65874481]
[51.05606079 113.77983856]
[36.06713867 116.46043396]
[22.53396034 109.87886810]
[15.55482769 96.74761200]
[0.67632121 94.84234619]
[-13.99485111 100.76411438]
[-25.63626289 91.47289276]
[-40.51477051 89.56761932]
[-48.11288452 102.70323181]
[-60.12884903 111.90430450]
[-74.71267700 115.79346466]
[-89.63401031 113.80814362]
[-102.62316895 106.28175354]
[-111.71643066 94.38814545]
[-115.55285645 79.95861816]
[-130.43136597 78.05335236]
[-145.30987549 76.14808655]
[-160.18836975 74.24282074]
[-175.06687927 72.33754730]
[-189.94538879 70.43228149]
[-195.66812134 78.45893097]
[-203.89427185 83.78457642]
[-213.44596863 85.69768524]
[-222.97409058 83.97173309]
[-231.14889526 78.89111328]
[-236.84556580 71.20534515]
[-239.29887390 62.01873779]
[-253.96220398 58.85854721]
[-268.62554932 55.69835663]
[-277.57760620 68.01828003]
[-290.76992798 75.62633514]
[-305.91687012 77.20437622]
[-320.39410400 72.47900391]
[-331.69338989 62.26891708]
[-337.85705566 48.34307480]
[-337.81719971 33.11421204]
[-331.58074951 19.22081947]
[-320.22814941 9.07001495]
[-305.72637939 4.42048502]
[-290.58792114 6.07778978]
[-277.43557739 13.75479031]
[-268.54812622 26.12140083]
[-265.46536255 41.03503036]
[-250.80201721 44.19521713]
[-236.13868713 47.35540771]
[-220.07145691 34.81687546]
[-199.66528320 38.11245346]
[-188.04011536 55.55377579]
[-173.16162109 57.45904541]
[-158.28311157 59.36431122]
[-143.40460205 61.26957703]
[-128.52609253 63.17484665]
[-113.64759064 65.08011627]
[-106.29903412 52.08288193]
[-94.50225067 42.86434555]
[-80.03572845 38.85379410]
[-65.09561157 40.69238663]
[-51.96233749 48.13085556]
[-42.65256500 60.06279373]
[-38.60950089 74.68911743]
[-23.73099518 76.59438324]
[-10.12403297 70.53633881]
[2.58158851 79.96384430]
[17.46009445 81.86911011]
[27.52281761 70.92015839]
[42.27773285 67.96101379]
[56.10755157 74.33200073]
[63.62094879 87.78023529]
[78.49945068 89.68550110]
[93.37796021 91.59077454]
[108.37796021 91.59077454]
[123.25646973 89.68550110]
[138.13497925 87.78023529]
[153.01347351 85.87496948]
[162.67262268 73.65455627]
[177.78869629 71.93428802]
[189.37947083 81.21812439]
[204.25796509 79.31285858]
[219.13647461 77.40758514]
[234.01498413 75.50231934]
[248.89349365 73.59705353]
[263.72821045 71.37641144]
[278.51245117 68.84140015]
[293.29669189 66.30638885]
[308.08093262 63.77137756]
[320.37496948 53.81312943]
[334.22680664 59.28821564]
[349.01101685 56.75320435]
[363.79525757 54.21819305]
[378.57949829 51.68318176]
[383.98983765 47.69109726]
[389.73620605 47.16385269]
[394.04397583 49.36827087]
[408.92248535 47.46300507]
[423.80099487 45.55773926]
[438.67947388 43.65246964]
[453.55798340 41.74720383]
[460.08959961 27.77073860]
[473.15277100 19.56358910]
[488.57907104 19.74462128]
[501.44604492 28.25607300]
[507.64785767 42.38196564]
[505.20556641 57.61478424]
[494.89846802 69.09378815]
[480.01556396 73.15606689]
[465.30587769 68.50537109]
[455.46325684 56.62570953]
[440.58474731 58.53097534]
[425.70623779 60.43624496]
[410.82772827 62.34151077]
[395.94924927 64.24678040]
[381.11453247 66.46742249]
[366.33029175 69.00243378]
[351.54605103 71.53744507]
[336.76181030 74.07245636]
[325.52520752 83.84938049]
[310.61593628 78.55561829]
[295.83169556 81.09062958]
[281.04745483 83.62564087]
[266.26321411 86.16065216]
[262.78976440 89.52986145]
[257.14089966 90.70838928]
[250.79875183 88.47556305]
[235.92025757 90.38082886]
[221.04174805 92.28609467]
[206.16323853 94.19136047]
[191.28472900 96.09662628]
[182.40728760 108.00151825]
[167.34550476 110.14568329]
[154.91874695 100.75347900]
[140.04023743 102.65874481]
[125.16173553 104.56401062]
[110.28322601 106.46927643]
[123.46201324 113.63305664]
[132.32675171 125.73331451]
[135.18409729 140.45864868]
[131.48822021 154.99621582]
[121.94512939 166.56900024]
[108.37775421 172.96636963]
[93.37775421 172.96626282]
[79.81045532 166.56874084]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 76]
[5 75]
[6 74]
[10 70]
[11 69]
[13 67]
[14 66]
[21 59]
[22 58]
[23 57]
[24 56]
[25 55]
[26 54]
[33 51]
[34 50]
[35 49]
[77 139]
[78 138]
[79 137]
[80 136]
[83 133]
[84 132]
[85 131]
[86 130]
[87 129]
[88 126]
[89 125]
[90 124]
[91 123]
[93 121]
[94 120]
[95 119]
[96 118]
[99 117]
[100 116]
[101 115]
[102 114]
[103 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
