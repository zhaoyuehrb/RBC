%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUGACCAUGACUACGAUGGCUGACGGCUUGGAAGGCCAGGACUCGUCCAAAUCCGCCUUCAUGGAGUUCGGGCAGCAGCAGCAGCAGCAGCAGCAAC\
) } def
/len { sequence length } bind def

/coor [
[117.79277802 158.96115112]
[117.18415833 144.79142761]
[122.06871033 131.42991638]
[111.21758270 121.07362366]
[96.75243378 123.65132141]
[83.51743317 117.27011108]
[76.52588654 104.34713745]
[78.42611694 89.77751160]
[67.57498932 79.42121124]
[56.72385788 69.06491089]
[45.87272644 58.70860672]
[35.02159500 48.35230637]
[24.17046356 37.99600601]
[8.44125462 42.81255341]
[-7.49138689 39.11148071]
[-19.35078812 27.98228645]
[-24.00187683 12.49531364]
[-20.27961731 -3.14488626]
[-31.44758034 -13.15870857]
[-42.61553955 -23.17253113]
[-55.94029999 -19.27309608]
[-69.33499146 -22.48666573]
[-79.28166199 -31.85800934]
[-83.22335815 -44.82946396]
[-80.22088623 -57.93830872]
[-91.07202148 -68.29460907]
[-101.92314911 -78.65090942]
[-112.77428436 -89.00720978]
[-123.62541199 -99.36351013]
[-134.79338074 -109.37733459]
[-146.26736450 -119.03898621]
[-157.74134827 -128.70063782]
[-169.21533203 -138.36230469]
[-180.68933105 -148.02395630]
[-196.92047119 -150.36528015]
[-202.75634766 -165.69090271]
[-192.19348145 -178.23513794]
[-176.09805298 -175.09355164]
[-171.02766418 -159.49794006]
[-159.55368042 -149.83628845]
[-148.07969666 -140.17463684]
[-136.60571289 -130.51296997]
[-125.13172150 -120.85131836]
[-120.21471405 -120.38890839]
[-115.58824158 -116.71393585]
[-113.26911163 -110.21463776]
[-102.41798401 -99.85833740]
[-91.56684875 -89.50203705]
[-80.71572113 -79.14573669]
[-69.86458588 -68.78943634]
[-53.90571213 -72.27053833]
[-38.83974075 -65.54447937]
[-30.61384392 -51.05199432]
[-32.60171890 -34.34049225]
[-21.43375778 -24.32666969]
[-10.26579571 -14.31284809]
[2.49982643 -19.42538834]
[16.28642654 -18.49657249]
[28.36668396 -11.65237141]
[36.32582092 -0.19464758]
[38.54423141 13.64610195]
[34.52676392 27.14487648]
[45.37789536 37.50117493]
[56.22902679 47.85747528]
[67.08015442 58.21377563]
[77.93128967 68.57007599]
[88.78241730 78.92637634]
[103.24756622 76.34867859]
[116.48256683 82.72988892]
[123.47411346 95.65286255]
[121.57388306 110.22248840]
[132.42501831 120.57878876]
[147.52001953 114.73461151]
[163.59846497 116.01091766]
[177.48252869 124.10514832]
[186.44992065 137.37219238]
[188.76762390 153.15853882]
[184.02658081 168.33290100]
[195.19454956 178.34672546]
[210.63452148 181.79890442]
[214.94503784 196.05613708]
[226.11300659 206.06996155]
[241.55299377 209.52212524]
[245.86351013 223.77935791]
[257.03146362 233.79318237]
[273.18194580 236.63815308]
[278.53836060 252.13786316]
[267.59048462 264.34753418]
[251.60055542 260.70690918]
[247.01763916 244.96115112]
[235.84968567 234.94732666]
[221.20851135 232.21141052]
[216.09918213 217.23791504]
[204.93121338 207.22409058]
[190.29003906 204.48817444]
[185.18072510 189.51469421]
[174.01275635 179.50086975]
[161.37275696 185.43833923]
[147.37879944 186.07890320]
[134.16734314 181.29132080]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 72]
[4 71]
[8 67]
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[18 56]
[19 55]
[20 54]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[30 43]
[31 42]
[32 41]
[33 40]
[34 39]
[78 97]
[79 96]
[81 94]
[82 93]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
