%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:13:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGACGCACCGCCCCCUCUCAGUCACUCCCAAGAUGGCGGACCUACUGGGCUCCAUCCUGAGCUCCAUGGAGAAGCCACCCAGCCUCGGUGACCAGGAGACUCGGCGCAAGGCCCGAGAACAGGCCGCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[-31.57299614 309.38784790]
[-49.12940979 309.86010742]
[-65.79214478 304.38458252]
[-74.66572571 316.47836304]
[-83.53931427 328.57214355]
[-75.10124207 341.16479492]
[-71.48200989 355.88476562]
[-73.11864471 370.95449829]
[-79.81352234 384.55429077]
[-90.75820160 395.04190063]
[-104.63105774 401.15087891]
[-119.75687408 402.14355469]
[-134.30914307 397.90005493]
[-146.53059387 388.93276978]
[-154.94544983 376.32461548]
[-158.53755188 361.59802246]
[-156.87313843 346.53131104]
[-150.15321350 332.94387817]
[-139.18922424 322.47647095]
[-125.30513763 316.39303589]
[-110.17751312 315.42825317]
[-95.63309479 319.69857788]
[-86.75950623 307.60479736]
[-77.88592529 295.51101685]
[-85.67455292 285.71289062]
[-90.85609436 274.30688477]
[-93.11559296 261.97323608]
[-92.31253052 249.44888306]
[-88.48955536 237.48355103]
[-81.87024689 226.79481506]
[-72.84606171 218.02503967]
[-61.95315933 211.70283508]
[-49.84057617 208.21115112]
[-37.23153305 207.76411438]
[-24.88027573 210.39385986]
[-13.52693462 215.94837952]
[-3.55986309 204.73866272]
[6.40720892 193.52896118]
[16.37428093 182.31925964]
[26.34135246 171.10955811]
[28.45471191 163.95379639]
[36.67587662 159.75741577]
[46.90299225 148.78443909]
[57.13011169 137.81147766]
[59.97839737 118.74170685]
[79.21240234 112.91710663]
[88.91394806 101.47682953]
[98.48072815 89.92361450]
[107.91141510 78.25904846]
[117.34210968 66.59449005]
[126.77280426 54.92992401]
[136.20349121 43.26536179]
[129.76402283 29.47063065]
[129.95175171 14.30976868]
[136.67587280 0.78917778]
[148.55474854 -8.43326187]
[163.19941711 -11.57063961]
[177.69396973 -8.05304527]
[187.12464905 -19.71760941]
[196.55534363 -31.38217163]
[205.98603821 -43.04673386]
[215.41673279 -54.71129608]
[224.71005249 -66.48560333]
[233.86470032 -78.36804199]
[243.01934814 -90.25048065]
[252.17401123 -102.13291931]
[254.97085571 -110.92921448]
[261.68518066 -114.18326569]
[271.11587524 -125.84783173]
[280.54656982 -137.51239014]
[276.99517822 -148.97459412]
[279.43655396 -160.60032654]
[287.14093018 -169.48362732]
[298.07809448 -173.46232605]
[309.45150757 -171.64364624]
[319.41857910 -182.85334778]
[329.38565063 -194.06304932]
[324.47216797 -208.61479187]
[327.50857544 -223.67054749]
[337.67810059 -235.18038940]
[352.24517822 -240.04823303]
[367.29135132 -236.96464539]
[378.76925659 -226.75909424]
[383.59140015 -212.17683411]
[380.46066284 -197.14041138]
[370.21920776 -185.69454956]
[355.62188721 -180.91812134]
[340.59533691 -184.09597778]
[330.62826538 -172.88627625]
[320.66119385 -161.67655945]
[322.88623047 -143.57485962]
[311.04397583 -129.29060364]
[292.21115112 -128.08169556]
[282.78045654 -116.41713715]
[273.34976196 -104.75257111]
[264.05645752 -92.97826385]
[254.90179443 -81.09582520]
[245.74713135 -69.21338654]
[236.59248352 -57.33095169]
[234.98722839 -50.04436111]
[227.08129883 -45.28060532]
[217.65060425 -33.61604309]
[208.21990967 -21.95147896]
[198.78921509 -10.28691578]
[189.35852051 1.37764740]
[195.83384705 14.81400490]
[195.83323669 29.79096794]
[189.30325317 43.33793259]
[177.49082947 52.74468231]
[162.70553589 56.10353470]
[147.86805725 52.69605637]
[138.43736267 64.36061859]
[129.00666809 76.02518463]
[119.57598114 87.68974304]
[110.14528656 99.35430908]
[107.89904022 107.18043518]
[100.35422516 111.17837524]
[90.65267944 122.61865234]
[92.17602539 133.50723267]
[87.50251007 143.21467590]
[78.42073822 148.58958435]
[68.10308075 148.03858948]
[57.87596512 159.01156616]
[47.64884567 169.98452759]
[37.55105591 181.07662964]
[27.58398628 192.28633118]
[17.61691284 203.49603271]
[7.64984131 214.70573425]
[-2.31723070 225.91545105]
[6.51633263 241.25741577]
[9.64731312 258.65786743]
[6.72359562 276.07061768]
[-1.89587307 291.45336914]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 24]
[4 23]
[5 22]
[36 129]
[37 128]
[38 127]
[39 126]
[40 125]
[42 124]
[43 123]
[44 122]
[46 118]
[47 117]
[48 115]
[49 114]
[50 113]
[51 112]
[52 111]
[58 105]
[59 104]
[60 103]
[61 102]
[62 101]
[63 99]
[64 98]
[65 97]
[66 96]
[68 95]
[69 94]
[70 93]
[75 90]
[76 89]
[77 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
