%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:02:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAGCUUGUGGGUAGCACUCGGGCCGAGCCAUGCAGGCGGCGCGCGUGGACUACAUCGCUCCCUGGUGGGUCGUGUGGCUGCACAGCGUCCCGCACGUCGGCCUGCGCCUGCAGCCCGUGAACAGCACCU\
) } def
/len { sequence length } bind def

/coor [
[115.83041382 555.76513672]
[105.75356293 544.08349609]
[103.61458588 528.80517578]
[110.09600830 514.80535889]
[123.12963104 506.55136108]
[123.12963104 491.55136108]
[123.12963104 476.55136108]
[119.95284271 469.79687500]
[123.31237793 461.19546509]
[123.66934204 446.19970703]
[123.31237793 431.20394897]
[122.24228668 416.24218750]
[121.17220306 401.28039551]
[120.10211182 386.31860352]
[111.47657776 374.17575073]
[118.20967102 359.85876465]
[117.13957977 344.89697266]
[116.06949615 329.93518066]
[101.55464172 318.89721680]
[99.58545685 300.45022583]
[111.85494232 286.11566162]
[110.07415771 271.22174072]
[108.29337311 256.32781982]
[106.51258850 241.43391418]
[104.73179626 226.53999329]
[102.95101166 211.64607239]
[101.17022705 196.75216675]
[99.38944244 181.85824585]
[89.01049042 176.85389709]
[82.30342865 167.33692932]
[81.05539703 155.63992310]
[85.69755554 144.70021057]
[95.16706848 137.32228088]
[94.09697723 122.36050415]
[93.02689362 107.39872742]
[89.32520294 100.14291382]
[92.11369324 92.06890869]
[91.39996338 77.08589935]
[87.83668518 68.56687164]
[90.85183716 61.73869324]
[90.49487305 46.74294281]
[90.13790131 31.74719048]
[89.78093719 16.75143814]
[89.42397308 1.75568652]
[76.56040955 -10.03060818]
[76.15985107 -27.13616562]
[87.98349762 -39.03411102]
[87.26976776 -54.01712036]
[86.55604553 -69.00012970]
[85.84231567 -83.98313904]
[82.27903748 -92.50216675]
[85.29418945 -99.33034515]
[84.93721771 -114.32609558]
[84.58025360 -129.32185364]
[84.22328949 -144.31759644]
[83.86632538 -159.31335449]
[80.50679016 -167.91476440]
[83.68357849 -174.66925049]
[83.68357849 -189.66925049]
[75.09947968 -199.38110352]
[75.46327209 -211.93542480]
[84.02943420 -220.56242371]
[84.38639832 -235.55818176]
[84.74337006 -250.55393982]
[76.41347504 -264.67996216]
[84.71649170 -278.82180786]
[101.11100006 -278.43154907]
[108.73171997 -263.91064453]
[99.73912048 -250.19696045]
[99.38215637 -235.20121765]
[99.02518463 -220.20545959]
[108.27027893 -205.33818054]
[98.68357849 -189.66925049]
[98.68357849 -174.66925049]
[98.86207581 -159.67031860]
[99.21903992 -144.67456055]
[99.57600403 -129.67881775]
[99.93297577 -114.68305969]
[100.28993988 -99.68730927]
[100.82532501 -84.69686890]
[101.53905487 -69.71385956]
[102.25278473 -54.73085022]
[102.96650696 -39.74783707]
[113.65892029 -32.45681381]
[118.23951721 -20.14442444]
[114.81226349 -7.26043558]
[104.41972351 1.39872098]
[104.77668762 16.39447212]
[105.13365936 31.39022446]
[105.49062347 46.38597488]
[105.84758759 61.38172913]
[106.38297272 76.37216949]
[107.09670258 91.35517883]
[107.98867035 106.32863617]
[109.05876160 121.29042053]
[110.12884521 136.25219727]
[124.88944244 148.00570679]
[126.44695282 166.49198914]
[114.28336334 180.07745361]
[116.06414795 194.97137451]
[117.84493256 209.86529541]
[119.62571716 224.75921631]
[121.40650177 239.65313721]
[123.18728638 254.54704285]
[124.96807861 269.44097900]
[126.74886322 284.33489990]
[137.44352722 289.78735352]
[144.07215881 299.65084839]
[145.06034851 311.37268066]
[140.27558899 321.98696899]
[131.03128052 328.86511230]
[132.10136414 343.82687378]
[133.17144775 358.78866577]
[141.87353516 372.00170898]
[135.06390381 385.24853516]
[136.13398743 400.21029663]
[137.20407104 415.17208862]
[138.27415466 430.13388062]
[140.98196411 433.81100464]
[142.19224548 437.76541138]
[142.00955200 441.47229004]
[140.70414734 444.49978638]
[138.66510010 446.55667114]
[138.30813599 461.55242920]
[138.12963867 476.55136108]
[138.12963867 491.55136108]
[138.12963867 506.55136108]
[151.16326904 514.80535889]
[157.64468384 528.80517578]
[155.50570679 544.08349609]
[145.42886353 555.76513672]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 127]
[6 126]
[7 125]
[9 124]
[10 123]
[11 118]
[12 117]
[13 116]
[14 115]
[16 113]
[17 112]
[18 111]
[21 106]
[22 105]
[23 104]
[24 103]
[25 102]
[26 101]
[27 100]
[28 99]
[33 96]
[34 95]
[35 94]
[37 93]
[38 92]
[40 91]
[41 90]
[42 89]
[43 88]
[44 87]
[47 83]
[48 82]
[49 81]
[50 80]
[52 79]
[53 78]
[54 77]
[55 76]
[56 75]
[58 74]
[59 73]
[62 71]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
