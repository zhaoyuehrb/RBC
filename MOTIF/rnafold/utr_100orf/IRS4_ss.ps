%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUCGCUCACCUUAAAACCAUCGUGCAUCACCAUGGCGAGUUGCUCCUUCACUCGCGACCAAGCGACAAGAAGACUAAGAGGUGCAGCAGCGGCGGCAGCGGCAGCUCUAGCAGCAGUGGUGACCACCCCGC\
) } def
/len { sequence length } bind def

/coor [
[244.12687683 229.15197754]
[236.83129883 227.49198914]
[230.53666687 223.32182312]
[226.08288574 217.13972473]
[224.08470154 209.71594238]
[224.84706116 201.99684143]
[212.96463013 192.84219360]
[201.08219910 183.68754578]
[189.09326172 174.67280579]
[176.99948120 165.79922485]
[164.90570068 156.92562866]
[152.81192017 148.05204773]
[140.71813965 139.17846680]
[128.62435913 130.30488586]
[115.42780304 138.72625732]
[100.05550385 141.68617249]
[84.67537689 138.76719666]
[71.45643616 130.38099670]
[62.26292419 117.71025085]
[47.75897598 121.53588867]
[33.25502777 125.36153412]
[18.75108337 129.18717957]
[7.38062763 140.18823242]
[-6.89909315 135.95280457]
[-21.40303993 139.77844238]
[-35.90698624 143.60409546]
[-49.68024063 153.49012756]
[-62.99274826 142.99186707]
[-56.59003067 127.29341125]
[-39.73262787 129.10014343]
[-25.22868156 125.27450562]
[-10.72473431 121.44886017]
[-0.39169902 110.72143555]
[14.92544079 114.68322754]
[29.42938805 110.85758972]
[43.93333435 107.03194427]
[58.43728256 103.20630646]
[56.34275055 92.94802856]
[56.88185883 81.90774536]
[43.34560394 75.44479370]
[29.80934906 68.98183441]
[12.91069794 67.61364746]
[9.54740429 50.99665070]
[24.58395195 43.16475296]
[36.27230453 55.44557953]
[49.80855942 61.90853882]
[63.34481430 68.37149048]
[74.78509521 58.66994476]
[70.62049103 44.25966644]
[66.45589447 29.84938812]
[62.29129410 15.43911076]
[46.84885788 7.31603479]
[42.10709763 -9.12593746]
[50.51544952 -23.64208412]
[46.01417923 -37.95077133]
[41.51290894 -52.25946045]
[37.01163864 -66.56815338]
[22.88370895 -73.65172577]
[17.98195839 -88.67665100]
[25.21450996 -102.72890472]
[40.29042053 -107.47152710]
[54.26541901 -100.09081268]
[58.84838486 -84.96559906]
[51.32032776 -71.06941986]
[55.82159805 -56.76073074]
[60.32286835 -42.45204163]
[64.82413483 -28.14335251]
[77.01745605 -23.81305695]
[84.57927704 -13.07359219]
[84.54491425 0.25610772]
[76.70156860 11.27451134]
[80.86617279 25.68478966]
[85.03076935 40.09506607]
[89.19537354 54.50534439]
[106.53614044 54.55318451]
[122.34889221 60.86278152]
[134.49957275 72.33294678]
[141.44114685 87.18445587]
[142.40876770 103.23330688]
[137.49794006 118.21110535]
[149.59172058 127.08468628]
[161.68550110 135.95826721]
[173.77928162 144.83184814]
[185.87306213 153.70544434]
[197.96684265 162.57902527]
[206.82629395 165.16888428]
[210.23684692 171.80509949]
[222.11927795 180.95976257]
[234.00172424 190.11441040]
[257.15692139 190.96020508]
[265.62112427 211.74786377]
[278.49270630 219.44996643]
[291.36428833 227.15208435]
[304.23587036 234.85420227]
[324.32070923 234.16749573]
[333.16433716 251.30105591]
[346.38278198 258.39138794]
[361.34335327 254.05328369]
[374.64773560 261.43218994]
[378.69125366 275.72152710]
[391.90969849 282.81185913]
[407.72814941 282.51669312]
[415.28646851 295.35107422]
[428.50491333 302.44140625]
[444.32336426 302.14624023]
[451.88168335 314.98062134]
[465.10012817 322.07095337]
[478.31857300 329.16128540]
[494.03118896 325.92193604]
[506.26776123 336.29718018]
[505.64144897 352.32800293]
[492.63269043 361.71694946]
[477.22070312 357.26159668]
[471.22824097 342.37973022]
[458.00979614 335.28939819]
[444.79135132 328.19906616]
[429.91836548 329.00137329]
[421.41458130 315.65985107]
[408.19613647 308.56951904]
[393.32315063 309.37182617]
[384.81936646 296.03030396]
[371.60092163 288.93997192]
[357.45996094 293.47521973]
[343.95358276 286.47293091]
[339.29248047 271.60983276]
[326.07403564 264.51950073]
[316.48480225 268.36712646]
[306.15515137 266.20678711]
[298.60180664 258.52413940]
[296.53375244 247.72576904]
[283.66217041 240.02366638]
[270.79058838 232.32154846]
[257.91900635 224.61943054]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 89]
[7 88]
[8 87]
[9 85]
[10 84]
[11 83]
[12 82]
[13 81]
[14 80]
[19 37]
[20 36]
[21 35]
[22 34]
[24 32]
[25 31]
[26 30]
[39 47]
[40 46]
[41 45]
[48 74]
[49 73]
[50 72]
[51 71]
[54 67]
[55 66]
[56 65]
[57 64]
[91 133]
[92 132]
[93 131]
[94 130]
[96 126]
[97 125]
[100 122]
[101 121]
[103 119]
[104 118]
[106 116]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
