%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAAUCAUUCAGCCGGAUCCUCUUCCUCGUCUUCCUCCUCGCCGGCCUGAGGUCCAAGGCCGCUCCCUCAGCCCCUCUGCCUUUGGGCUGUGGCUUUC\
) } def
/len { sequence length } bind def

/coor [
[74.94563293 226.81173706]
[64.04080963 237.34077454]
[50.19122314 243.50233459]
[35.06927872 244.55238342]
[20.50102234 240.36408997]
[8.24564075 231.44325256]
[-0.21696678 218.86708069]
[-3.86490083 204.15422058]
[-2.25765491 189.08131409]
[4.41068792 175.46849060]
[15.33489323 164.95954895]
[29.19581032 158.82353210]
[44.31966400 157.80136108]
[48.46419144 143.38529968]
[52.60871506 128.96923828]
[56.75324249 114.55316925]
[46.73942184 103.38520813]
[31.95838928 105.93886566]
[17.17736053 108.49251556]
[8.27365685 121.55006409]
[-7.27060413 124.40515137]
[-20.23328972 115.36389160]
[-22.92386818 99.79031372]
[-13.74606705 86.92394257]
[1.85508728 84.39817047]
[14.62370586 93.71148682]
[29.40473747 91.15782928]
[44.18576813 88.60417938]
[29.98990631 83.75881958]
[15.00903416 84.51611328]
[0.94170833 79.30934906]
[-9.93601227 68.98097992]
[-15.86413670 55.20211029]
[-15.88350964 40.20212173]
[-9.99099636 26.40798187]
[0.86000854 16.05154991]
[14.91383839 10.80847168]
[29.89661598 11.52706432]
[43.38416290 18.09106255]
[53.19422531 29.43842506]
[57.73956299 43.73317719]
[56.28447342 58.66332626]
[60.46246338 73.06973267]
[63.70273209 58.42388916]
[62.49584579 49.18613434]
[67.27822876 43.37629318]
[70.97241211 28.83830833]
[74.66659546 14.30032349]
[78.36077881 -0.23766170]
[82.05496979 -14.77564716]
[72.03111267 -26.62056351]
[70.91749573 -42.09762573]
[79.14231110 -55.25558853]
[93.54296112 -61.03494644]
[108.58209229 -57.21341705]
[118.47686005 -45.26045990]
[119.42251587 -29.77222633]
[111.05544281 -16.70426178]
[96.59294891 -11.08146286]
[92.89876556 3.45652199]
[89.20458221 17.99450684]
[85.51039886 32.53249359]
[81.81621552 47.07047653]
[78.34857178 61.66415405]
[75.10830688 76.30999756]
[87.07814026 69.49177551]
[100.28197479 68.10029602]
[112.45901489 71.97468567]
[121.68029785 80.08478546]
[126.65369415 90.76593018]
[126.89910126 102.04769897]
[140.94963074 107.29959869]
[155.00016785 112.55149078]
[169.05070496 117.80339050]
[183.10124207 123.05529022]
[197.15177917 128.30718994]
[208.95103455 118.47492981]
[224.08833313 115.87538147]
[238.49183655 121.20781708]
[248.28704834 133.03782654]
[250.83914185 148.18321228]
[245.46157837 162.56991577]
[233.60092163 172.32800293]
[218.44763184 174.83261108]
[204.07783508 169.40998840]
[194.35696411 157.51879883]
[191.89988708 142.35772705]
[177.84934998 137.10581970]
[163.79881287 131.85392761]
[149.74827576 126.60202789]
[135.69773865 121.35013580]
[121.64720154 116.09823608]
[99.01736450 130.65419006]
[71.16930389 118.69770050]
[67.02478027 133.11375427]
[62.88025284 147.52983093]
[58.73572922 161.94589233]
[71.00753021 170.84413147]
[79.49330139 183.40469360]
[83.16834259 198.11080933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 97]
[14 96]
[15 95]
[16 94]
[17 28]
[18 27]
[19 26]
[43 65]
[44 64]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[71 92]
[72 91]
[73 90]
[74 89]
[75 88]
[76 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
