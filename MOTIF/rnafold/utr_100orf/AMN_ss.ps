%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUCCUGGUGGGGUGCAAGGAGCCGAGGCGAGAUGGGCGUCCUGGGCCGGGUCCUGCUGUGGCUGCAGCUCUGCGCACUGACCCAGGCGGUCUCCAAACUCUGGGUCCCCAACACGGACUUCGACGUCGCAG\
) } def
/len { sequence length } bind def

/coor [
[174.86662292 416.28906250]
[172.41595459 401.49063110]
[169.96530151 386.69216919]
[166.82369995 372.02484131]
[162.99804688 357.52090454]
[159.17240906 343.01693726]
[155.17701721 328.55883789]
[151.01242065 314.14855957]
[140.04570007 304.06985474]
[143.64733887 288.66403198]
[139.48274231 274.25375366]
[135.31813049 259.84347534]
[131.15353394 245.43321228]
[126.98893738 231.02293396]
[122.06372833 225.41815186]
[122.89987183 216.22587585]
[119.07422638 201.72192383]
[106.11512756 194.46952820]
[102.02877045 179.81495667]
[109.72360992 166.27143860]
[105.89797211 151.76748657]
[102.07232666 137.26353455]
[98.24668884 122.75959778]
[82.32994843 114.45138550]
[77.34502411 97.20262909]
[86.37590027 81.68450928]
[81.87463379 67.37581635]
[77.37336731 53.06713104]
[72.87209320 38.75844193]
[68.37082672 24.44975281]
[61.63793182 37.85378647]
[48.39614868 44.90042877]
[33.51739502 42.99706650]
[22.47588158 32.84399033]
[19.33400536 18.17672539]
[25.24772835 4.39166641]
[38.04127121 -3.43938065]
[53.00762177 -2.43520999]
[64.64085388 7.03549194]
[62.88652039 -7.86156607]
[58.74065399 -16.10832024]
[61.26990509 -23.12787247]
[59.86528397 -38.06196213]
[58.46065903 -52.99605179]
[57.05603790 -67.93013763]
[55.65141678 -82.86422729]
[54.24679184 -97.79831696]
[45.25122070 -110.81332397]
[51.76272583 -124.20920563]
[50.35810089 -139.14329529]
[48.95347977 -154.07737732]
[47.37389374 -168.99398804]
[45.61956406 -183.89103699]
[29.59622383 -192.20916748]
[21.77651596 -208.30827332]
[25.08616638 -225.73855591]
[38.03293228 -237.63970947]
[35.58227158 -252.43815613]
[33.13161087 -267.23660278]
[30.68095207 -282.03506470]
[28.23029137 -296.83352661]
[17.40816307 -309.15478516]
[22.92319870 -324.59875488]
[39.10200119 -327.27801514]
[49.30120468 -314.43634033]
[43.02874756 -299.28417969]
[45.47940826 -284.48571777]
[47.93006897 -269.68728638]
[50.38072968 -254.88882446]
[52.83138657 -240.09036255]
[64.46767426 -236.27899170]
[73.40660858 -227.80511475]
[77.88611603 -216.25360107]
[76.98670197 -203.82391357]
[70.81947327 -192.91133118]
[60.51662445 -185.64537048]
[62.27095413 -170.74830627]
[66.21428680 -164.41416931]
[63.88756943 -155.48200989]
[65.29219055 -140.54791260]
[66.69681549 -125.61382294]
[75.59191895 -113.66700745]
[69.18088531 -99.20294189]
[70.58550262 -84.26885223]
[71.99012756 -69.33476257]
[73.39475250 -54.40067291]
[74.79936981 -39.46658325]
[76.20399475 -24.53249359]
[77.78357697 -9.61589527]
[79.53791046 5.28116179]
[82.67951202 19.94848442]
[87.18078613 34.25717163]
[91.68205261 48.56586075]
[96.18331909 62.87454987]
[100.68459320 77.18323517]
[111.61420441 80.34844971]
[119.65795135 88.39662933]
[122.81713867 99.32798767]
[120.30677032 110.42632294]
[112.75063324 118.93395233]
[116.57627869 133.43789673]
[120.40191650 147.94184875]
[124.22756195 162.44580078]
[137.60124207 170.43215942]
[141.27438354 185.19572449]
[133.57817078 197.89628601]
[137.40382385 212.40022278]
[141.39921570 226.85833740]
[145.56381226 241.26861572]
[149.72840881 255.67889404]
[153.89302063 270.08917236]
[158.05761719 284.49945068]
[169.32220459 295.60888672]
[165.42269897 309.98397827]
[169.58729553 324.39425659]
[175.02479553 331.85284424]
[173.67636108 339.19131470]
[177.50199890 353.69525146]
[181.32763672 368.19918823]
[184.66308594 371.30487061]
[186.58343506 374.95870972]
[187.09388733 378.62841797]
[186.37861633 381.84167480]
[184.76374817 384.24151611]
[187.21441650 399.03994751]
[189.66506958 413.83840942]
[203.59986877 420.66491699]
[210.83105469 434.39407349]
[208.57809448 449.74673462]
[197.70730591 460.81945801]
[182.39872742 463.35461426]
[168.53881836 456.37731934]
[161.45698547 442.57055664]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 126]
[2 125]
[3 124]
[4 119]
[5 118]
[6 117]
[7 115]
[8 114]
[10 112]
[11 111]
[12 110]
[13 109]
[14 108]
[16 107]
[17 106]
[20 103]
[21 102]
[22 101]
[23 100]
[26 95]
[27 94]
[28 93]
[29 92]
[30 91]
[39 90]
[40 89]
[42 88]
[43 87]
[44 86]
[45 85]
[46 84]
[47 83]
[49 81]
[50 80]
[51 79]
[52 77]
[53 76]
[57 70]
[58 69]
[59 68]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
