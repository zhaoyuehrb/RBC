%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:57:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACACAACCCUGAGAUUUAUCCCUCACAAUGCGGAAAGACAGACUUCUUCAUUUAUGUCUUGUGCUACUUCUUAUCCUGCUUUCUGCCAGUGACUCAAACUCUACAGAACCGCAGUAUAUGGUGCUGG\
) } def
/len { sequence length } bind def

/coor [
[126.77874756 300.76925659]
[117.74235535 295.48904419]
[110.13557434 288.28488159]
[104.36034393 279.53067017]
[100.72338104 269.68237305]
[99.41983795 259.25436401]
[100.52290344 248.79237366]
[103.97966003 238.84509277]
[109.61361694 229.93536377]
[117.13373566 222.53263855]
[126.14942932 217.02828979]
[122.20881653 202.55514526]
[118.26820374 188.08201599]
[114.15300751 173.65756226]
[109.86382294 159.28387451]
[105.57463837 144.91018677]
[91.39746094 144.42968750]
[78.06550598 139.58381653]
[66.88870239 130.84870911]
[58.96519470 119.08259583]
[55.07350159 105.44155884]
[55.59599304 91.26586914]
[60.48133469 77.94833374]
[69.24952698 66.79745483]
[81.03905487 58.90884018]
[77.09844208 44.43570709]
[73.15783691 29.96257210]
[69.21722412 15.48943901]
[56.78250885 10.15761757]
[49.81865311 -1.21387994]
[50.69525146 -14.32379341]
[58.86474991 -24.36400032]
[55.27501678 -38.92812729]
[51.68527985 -53.49225616]
[48.09554672 -68.05638123]
[44.50580978 -82.62051392]
[40.91607666 -97.18463898]
[37.32633972 -111.74876404]
[33.73660660 -126.31288910]
[28.59542656 -133.98849487]
[30.24061775 -141.27230835]
[27.00385475 -155.91891479]
[23.76709175 -170.56553650]
[8.74212170 -169.91641235]
[-6.16728115 -171.88639832]
[-20.50803566 -176.41561890]
[-33.84434128 -183.36645508]
[-45.77092361 -192.52766418]
[-55.92534637 -203.62084961]
[-63.99903107 -216.30889893]
[-69.74662781 -230.20625305]
[-72.99346924 -244.89056396]
[-73.64088440 -259.91561890]
[-71.66921234 -274.82479858]
[-67.13835907 -289.16503906]
[-60.18601608 -302.50054932]
[-51.02345276 -314.42608643]
[-39.92911530 -324.57925415]
[-27.24014473 -332.65151978]
[-13.34214497 -338.39752197]
[1.34253919 -341.64270020]
[16.36765671 -342.28842163]
[31.27661324 -340.31506348]
[45.61634064 -335.78256226]
[58.95106888 -328.82870483]
[70.87557220 -319.66479492]
[81.02748108 -308.56930542]
[89.09828949 -295.87942505]
[94.84272766 -281.98077393]
[98.08623505 -267.29571533]
[98.73024750 -252.27052307]
[96.75519562 -237.36180115]
[92.22108459 -223.02258301]
[85.26571655 -209.68864441]
[76.10045624 -197.76518250]
[65.00381470 -187.61453247]
[52.31301117 -179.54516602]
[38.41370773 -173.80229187]
[41.65047073 -159.15568542]
[44.88723373 -144.50906372]
[48.30073166 -129.90263367]
[51.89046860 -115.33850098]
[55.48020172 -100.77437592]
[59.06993866 -86.21024323]
[62.65967178 -71.64611816]
[66.24940491 -57.08198929]
[69.83914185 -42.51786423]
[73.42887878 -27.95373535]
[88.15409851 -19.92462921]
[92.65202332 -3.41811085]
[83.69036102 11.54882812]
[87.63096619 26.02196121]
[91.57157898 40.49509430]
[95.51219177 54.96822739]
[111.14024353 56.13776398]
[125.43231964 62.56742096]
[136.67445374 73.48613739]
[143.51846313 87.58448792]
[145.14355469 103.17176056]
[141.35487366 118.37866211]
[132.60676575 131.38151550]
[119.94832611 140.62100220]
[124.23751068 154.99468994]
[128.52668762 169.36837769]
[134.03269958 176.78662109]
[132.74133301 184.14140320]
[136.68194580 198.61454773]
[140.62255859 213.08767700]
[160.63009644 215.55310059]
[177.63696289 226.29309082]
[188.41419983 243.22343445]
[190.93487549 263.08901978]
[184.75518799 282.08950806]
[171.09207153 296.60650635]
[177.41308594 310.20962524]
[183.73410034 323.81274414]
[190.05511475 337.41586304]
[196.37612915 351.01898193]
[202.69715881 364.62210083]
[214.85505676 376.43826294]
[206.86630249 391.39205933]
[190.28540039 387.85516357]
[189.09403992 370.94311523]
[182.77302551 357.33999634]
[176.45199585 343.73687744]
[170.13098145 330.13375854]
[163.80996704 316.53063965]
[157.48895264 302.92752075]
[147.18762207 304.58364868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 108]
[12 107]
[13 106]
[14 104]
[15 103]
[16 102]
[25 94]
[26 93]
[27 92]
[28 91]
[32 88]
[33 87]
[34 86]
[35 85]
[36 84]
[37 83]
[38 82]
[39 81]
[41 80]
[42 79]
[43 78]
[114 128]
[115 127]
[116 126]
[117 125]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
