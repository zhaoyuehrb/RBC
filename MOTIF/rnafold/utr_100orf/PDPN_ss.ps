%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:37:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACCACCUUGCGGCCGACCCCGCUCCCCCGCCUCCUCGGGAGAGAUAAAUGCUGACUCCGCUCGGAAAGUUCUCAACUGCAAAGUUUGCUGUCCGGCUGCCUAGGGUCUGGGAAGCUCGGGCACCCUCCCUCUCCGGGGCUCCUGCUC\
) } def
/len { sequence length } bind def

/coor [
[97.01007080 322.44372559]
[87.31530762 334.18814087]
[73.67891693 340.96817017]
[58.46349716 341.60913086]
[44.30520248 335.99996948]
[33.65705109 325.11251831]
[28.36389160 310.83309937]
[29.34280014 295.63565063]
[36.42417526 282.15328979]
[48.38112259 272.72189331]
[63.14203262 268.97552490]
[65.64356232 254.18557739]
[68.14509583 239.39562988]
[70.64662933 224.60569763]
[68.61897278 220.21507263]
[69.37496185 214.49826050]
[73.57507324 209.25424194]
[76.69374847 194.58203125]
[79.65860748 179.87796021]
[82.46932983 165.14364624]
[85.28004456 150.40934753]
[88.09076691 135.67503357]
[90.90148926 120.94072723]
[80.63327789 110.00619507]
[65.75155640 111.88619232]
[50.86983871 113.76618958]
[38.14822769 123.17210388]
[24.55157089 117.09096527]
[9.66985130 118.97096252]
[-5.21186924 120.85095978]
[-20.09358978 122.73095703]
[-29.58089256 135.37083435]
[-45.23874283 137.51730347]
[-57.77761078 127.89689636]
[-59.75841522 112.21723175]
[-50.00597382 99.78077698]
[-34.30624008 97.96585846]
[-21.97358894 107.84923553]
[-7.09186792 105.96923828]
[7.78985262 104.08924103]
[22.67157364 102.20924377]
[34.32874680 92.93780518]
[48.98984146 98.88447571]
[63.87156296 97.00447083]
[78.75328064 95.12447357]
[83.22496796 89.10334015]
[68.32438660 87.37918091]
[62.36737061 73.61277008]
[71.31100464 61.57070541]
[86.21154785 63.29519653]
[92.16834259 77.06108093]
[96.64002991 71.03994751]
[94.13849640 56.25001144]
[84.20811462 43.93343353]
[89.71454620 30.09405518]
[87.21302032 15.30411434]
[84.71148682 0.51417410]
[82.20995331 -14.27576637]
[69.61131287 -23.43611145]
[67.28508759 -38.47085190]
[76.09571838 -50.42527771]
[73.59419250 -65.21521759]
[58.36552429 -72.50324249]
[50.53745270 -87.27412415]
[53.00715256 -103.64003754]
[64.61062622 -115.20904541]
[61.79990768 -129.94334412]
[48.58925629 -138.61827087]
[45.46385956 -154.11044312]
[54.27796173 -167.22863770]
[69.80231476 -170.19006348]
[82.82659149 -161.23776245]
[85.62371826 -145.68296814]
[76.53421783 -132.75407410]
[79.34494019 -118.01976013]
[91.93215179 -113.46120453]
[100.68055725 -103.18505096]
[103.21244049 -89.81855774]
[98.75779724 -76.84964752]
[88.38413239 -67.71675110]
[90.88566589 -52.92681122]
[103.13762665 -44.53485489]
[105.88522339 -29.57138634]
[96.99989319 -16.77729797]
[99.50142670 -1.98735714]
[102.00296021 12.80258369]
[104.50448608 27.59252357]
[114.25595093 38.85122299]
[108.92843628 53.74847794]
[111.42996979 68.53842163]
[123.83617401 76.96967316]
[138.50839233 73.85099792]
[153.18060303 70.73232269]
[167.85281372 67.61364746]
[182.52503967 64.49497223]
[197.19725037 61.37629318]
[211.83599854 58.10414505]
[226.43968201 54.67888260]
[241.04336548 51.25362015]
[252.71209717 40.56946564]
[266.86993408 45.19605255]
[281.47360229 41.77079010]
[296.07730103 38.34552765]
[310.68096924 34.92026520]
[325.28466797 31.49500084]
[339.32461548 21.99153328]
[352.34332275 32.85198212]
[345.51126099 48.36839294]
[328.70993042 46.09868622]
[314.10623169 49.52394867]
[299.50256348 52.94921112]
[284.89886475 56.37447357]
[270.29519653 59.79973602]
[259.67098999 70.23889160]
[244.46862793 65.85729980]
[229.86494446 69.28256226]
[215.26126099 72.70782471]
[209.42875671 77.32785034]
[200.31591797 76.04850769]
[185.64370728 79.16718292]
[170.97149658 82.28585815]
[156.29928589 85.40453339]
[141.62705994 88.52320862]
[126.95484924 91.64188385]
[141.67222595 88.74376678]
[156.26658630 92.20854187]
[168.11085510 101.41251373]
[175.07299805 114.69891357]
[175.89979553 129.67611694]
[170.44238281 143.64811707]
[159.68316650 154.09986877]
[145.55885315 159.14999390]
[130.61190796 157.88943481]
[117.53289032 150.54510498]
[108.67609406 138.43901062]
[105.63579559 123.75144196]
[102.82507324 138.48574829]
[100.01435852 153.22006226]
[97.20363617 167.95437622]
[94.39291382 182.68867493]
[95.86282349 191.77272034]
[91.36595917 197.70069885]
[88.24728394 212.37290955]
[85.43656921 227.10722351]
[82.93503571 241.89717102]
[80.43350220 256.68710327]
[77.93197632 271.47705078]
[90.63976288 279.86941528]
[98.82995605 292.70843506]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 147]
[12 146]
[13 145]
[14 144]
[17 143]
[18 142]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 45]
[25 44]
[26 43]
[28 41]
[29 40]
[30 39]
[31 38]
[52 90]
[53 89]
[55 87]
[56 86]
[57 85]
[58 84]
[61 81]
[62 80]
[66 75]
[67 74]
[91 124]
[92 123]
[93 122]
[94 121]
[95 120]
[96 119]
[97 117]
[98 116]
[99 115]
[101 113]
[102 112]
[103 111]
[104 110]
[105 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
