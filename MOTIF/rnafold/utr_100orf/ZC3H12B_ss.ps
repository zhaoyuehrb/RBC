%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGUGGAUUCCAAGCAGGCUAAAAAGAAAAAGAACUGAUUAGACCUCAGACGACCCACUAAACGGGAUGACGGCCACAGCUGAGGUAGAGACACCAAAAAUGGAGAAGAGUGCCUCCAAGGAAGAGAAGCAGCAGCCUAAGCAGGACAGCACAGAGCAGGGCAAUG\
) } def
/len { sequence length } bind def

/coor [
[148.99653625 483.85858154]
[158.39062500 471.96206665]
[171.28865051 463.99862671]
[168.22486877 449.31484985]
[165.16108704 434.63107300]
[162.09730530 419.94729614]
[148.46015930 414.01718140]
[140.83970642 401.04058838]
[142.33908081 385.88784790]
[152.59187317 374.39059448]
[149.52809143 359.70681763]
[146.46430969 345.02304077]
[136.50190735 338.11593628]
[133.84790039 325.87637329]
[140.46469116 314.77307129]
[137.67601013 300.03454590]
[134.61222839 285.35079956]
[131.27441406 270.72686768]
[127.93659973 256.10293579]
[124.59878540 241.47903442]
[121.26097107 226.85510254]
[106.64217377 228.45283508]
[91.93654633 228.37144470]
[77.33632660 226.61203003]
[63.03235245 223.19757080]
[49.21161652 218.17269897]
[36.05477142 211.60311890]
[23.73380089 203.57467651]
[12.40976238 194.19235229]
[2.23068023 183.57875061]
[-6.67038679 171.87263489]
[-14.17708683 159.22702026]
[-20.19129372 145.80722046]
[-24.63439178 131.78862000]
[-27.44830132 117.35449219]
[-28.59623909 102.69351959]
[-43.58575058 102.13265228]
[-58.57526016 101.57177734]
[-73.56477356 101.01091003]
[-83.92243958 112.72640228]
[-99.39501953 114.99206543]
[-112.67683411 106.73812866]
[-117.49661255 91.86185455]
[-111.57860565 77.38735199]
[-97.71711731 70.14904785]
[-82.45711517 73.56464386]
[-73.00390625 86.02140045]
[-58.01439285 86.58226776]
[-43.02488327 87.14313507]
[-28.03537178 87.70400238]
[-25.87736702 73.55880737]
[-22.16156387 59.74083710]
[-16.93394852 46.42108917]
[-10.25921631 33.76441193]
[-2.21996880 21.92743301]
[-13.58954430 12.14312077]
[-24.95911980 2.35880971]
[-40.36156082 5.06044674]
[-53.87113190 -2.81518102]
[-59.10902786 -17.54944229]
[-53.60206985 -32.18527222]
[-39.95048141 -39.81207657]
[-24.60012245 -36.82871246]
[-14.79896164 -24.64383125]
[-15.17480946 -9.01076603]
[-3.80523348 0.77354515]
[7.56434250 10.55785656]
[16.96357918 1.76965463]
[27.19386101 -6.03543806]
[38.15280151 -12.77930641]
[49.73072433 -18.39445686]
[61.81174850 -22.82469368]
[58.20106506 -37.38364029]
[54.59038544 -51.94258881]
[50.97970581 -66.50154114]
[39.21911621 -77.93047333]
[43.49835968 -93.76145935]
[59.41531754 -97.70893097]
[70.59598541 -85.71207428]
[65.53865051 -70.11222076]
[69.14933014 -55.55327225]
[72.76001740 -40.99432373]
[76.37069702 -26.43537331]
[100.00000000 -28.62444496]
[123.62930298 -26.43537331]
[127.23998260 -40.99432373]
[130.85066223 -55.55327225]
[122.48032379 -68.95897675]
[126.12221527 -84.33792877]
[139.61567688 -92.56607056]
[154.95526123 -88.76178741]
[163.04028320 -75.18209076]
[159.07402039 -59.88358307]
[145.40962219 -51.94258881]
[141.79893494 -37.38364029]
[138.18824768 -22.82469368]
[150.87670898 -18.13470650]
[163.00241089 -12.13805389]
[174.43127441 -4.90106440]
[185.03686523 3.49621654]
[194.70187378 12.96090698]
[203.31939697 23.38832092]
[215.86882019 15.17174339]
[228.41822815 6.95516539]
[240.96765137 -1.26141214]
[253.51705933 -9.47799015]
[254.13667297 -24.98268890]
[263.77777100 -37.14117050]
[278.73318481 -41.27824783]
[293.25222778 -35.80313110]
[301.75204468 -22.82111549]
[300.96429443 -7.32404995]
[291.19183350 4.72912788]
[276.19244385 8.70372486]
[261.73364258 3.07142663]
[249.18423462 11.28800392]
[236.63481140 19.50458145]
[224.08538818 27.72115898]
[211.53598022 35.93773651]
[218.05278015 48.93347549]
[223.06141663 62.58160782]
[226.49790955 76.70777130]
[228.31834412 91.13149261]
[228.49948120 105.66851807]
[227.03898621 120.13312531]
[223.95553589 134.34053040]
[219.28851318 148.10922241]
[213.09754944 161.26329041]
[205.46173096 173.63471985]
[196.47859192 185.06542969]
[186.26292419 195.40940857]
[174.94520569 204.53450012]
[162.67005920 212.32414246]
[149.59426880 218.67880249]
[135.88488770 223.51728821]
[139.22270203 238.14122009]
[142.56051636 252.76513672]
[145.89833069 267.38903809]
[149.23614502 282.01296997]
[153.48875427 287.16293335]
[154.34169006 292.83471680]
[152.41450500 297.24588013]
[155.20318604 311.98437500]
[167.53552246 325.63305664]
[161.14808655 341.95928955]
[164.21186829 356.64303589]
[167.27565002 371.32681274]
[181.27062988 377.76473999]
[188.70436096 391.05358887]
[186.90898132 405.99481201]
[176.78108215 416.88351440]
[179.84486389 431.56729126]
[182.90864563 446.25106812]
[185.97242737 460.93484497]
[200.97879028 463.07601929]
[214.34637451 470.22329712]
[224.46098328 481.51358032]
[230.10121155 495.58355713]
[230.58596802 510.73416138]
[225.85673523 525.13586426]
[216.48458862 537.04968262]
[203.60125732 545.03692627]
[188.76246643 548.13305664]
[173.76007080 545.96417236]
[160.40568542 538.79229736]
[150.31190491 527.48339844]
[144.69761658 513.40307617]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 154]
[4 153]
[5 152]
[6 151]
[10 147]
[11 146]
[12 145]
[15 143]
[16 142]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[36 50]
[37 49]
[38 48]
[39 47]
[55 67]
[56 66]
[57 65]
[72 83]
[73 82]
[74 81]
[75 80]
[85 96]
[86 95]
[87 94]
[102 119]
[103 118]
[104 117]
[105 116]
[106 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
