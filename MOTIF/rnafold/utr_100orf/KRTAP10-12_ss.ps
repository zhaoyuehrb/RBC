%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:11:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUCAACCCCCAGCACGGCUGCAUCCACCAUGUCCGUCUGCUCCAGCGACCUGAGCUAUGGCAGCCGCGUCUGCCUUCCUGGUUCCUGUGACUCUUGCUCCGACUCCUGGCAGGUGGACGACUGCCCAG\
) } def
/len { sequence length } bind def

/coor [
[-16.90826988 130.76074219]
[-31.72639847 133.08949280]
[-46.54452515 135.41824341]
[-61.36265564 137.74699402]
[-76.18078613 140.07574463]
[-90.99890900 142.40449524]
[-94.66567993 159.46928406]
[-104.53082275 173.82601929]
[-119.08799744 183.32934570]
[-136.13214111 186.57139587]
[-153.09352112 183.09036255]
[-167.42514038 173.43606567]
[-176.98518372 159.08326721]
[-191.59757996 162.47116089]
[-206.20997620 165.85905457]
[-220.82238770 169.24696350]
[-228.56652832 174.28050232]
[-235.82571411 172.53643799]
[-250.51515198 175.57296753]
[-265.20458984 178.60948181]
[-278.60714722 191.16963196]
[-295.03814697 185.12800598]
[-309.65054321 188.51589966]
[-324.26293945 191.90379333]
[-338.87533569 195.29168701]
[-348.55007935 208.08929443]
[-364.59085083 208.36038208]
[-374.69250488 195.89698792]
[-371.10595703 180.25997925]
[-356.58245850 173.44471741]
[-342.26321411 180.67929077]
[-327.65081787 177.29139709]
[-313.03842163 173.90350342]
[-298.42602539 170.51560974]
[-291.71258545 160.37834167]
[-279.49087524 157.47927856]
[-268.24111938 163.92004395]
[-253.55168152 160.88352966]
[-238.86224365 157.84700012]
[-224.21028137 154.63455200]
[-209.59788513 151.24665833]
[-194.98547363 147.85876465]
[-180.37307739 144.47087097]
[-179.34471130 131.77203369]
[-174.74929810 119.86992645]
[-166.95495605 109.74637604]
[-156.59411621 102.23957062]
[-144.51223755 97.97470856]
[-131.69882202 97.31192017]
[-119.20634460 100.31589508]
[-108.06384277 106.74970245]
[-99.19210815 116.09346771]
[-93.32765961 127.58636475]
[-78.50953674 125.25761414]
[-63.69140625 122.92886353]
[-48.87327576 120.60011292]
[-34.05514908 118.27136230]
[-19.23702049 115.94261169]
[-9.46509075 100.54866028]
[8.74779034 97.02687073]
[24.06850243 108.03760529]
[38.75793839 105.00108337]
[53.44737244 101.96455383]
[68.13681030 98.92803192]
[82.82624054 95.89151001]
[87.86141968 87.17531586]
[96.84102631 82.62650299]
[106.84713745 83.72319794]
[114.62827301 90.10903168]
[129.44639587 87.78028107]
[144.26452637 85.45153046]
[159.08265686 83.12277985]
[173.90078735 80.79402924]
[188.71891785 78.46527863]
[203.53704834 76.13652802]
[218.35516357 73.80777740]
[233.17329407 71.47902679]
[245.60493469 61.69306564]
[259.37908936 67.36064148]
[274.19723511 65.03189087]
[286.62887573 55.24592972]
[300.40304565 60.91350555]
[315.22116089 58.58475494]
[329.21051025 46.68164444]
[345.33291626 53.50409698]
[360.09094238 50.82068634]
[369.73364258 36.28200912]
[386.56787109 33.22627640]
[400.15966797 43.05441666]
[414.84909058 40.01789093]
[429.53854370 36.98136520]
[444.22796631 33.94483948]
[458.51516724 24.81728935]
[471.24111938 36.01938629]
[463.99969482 51.34903336]
[447.26449585 48.63427353]
[432.57507324 51.67079926]
[417.88562012 54.70732498]
[403.19619751 57.74385071]
[397.65707397 69.44148254]
[386.20599365 75.88198090]
[372.94464111 74.49967194]
[362.77435303 65.57871246]
[348.01632690 68.26212311]
[340.82458496 78.06586456]
[328.47793579 80.37561035]
[317.54992676 73.40288544]
[302.73178101 75.73163605]
[291.36004639 85.35102844]
[276.52597046 79.85002136]
[261.70785522 82.17877197]
[250.33612061 91.79816437]
[235.50204468 86.29715729]
[220.68391418 88.62590790]
[205.86579895 90.95465851]
[191.04766846 93.28340912]
[176.22953796 95.61215973]
[161.41140747 97.94091034]
[146.59327698 100.26966095]
[131.77514648 102.59841156]
[116.95702362 104.92716217]
[103.15897369 117.37349701]
[85.86277008 110.58094025]
[71.17333221 113.61746979]
[56.48389816 116.65399170]
[41.79446411 119.69052124]
[27.10502815 122.72704315]
[22.57733536 133.84738159]
[13.30849361 141.28857422]
[1.70992780 143.26487732]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 58]
[2 57]
[3 56]
[4 55]
[5 54]
[6 53]
[13 43]
[14 42]
[15 41]
[16 40]
[18 39]
[19 38]
[20 37]
[22 34]
[23 33]
[24 32]
[25 31]
[61 127]
[62 126]
[63 125]
[64 124]
[65 123]
[69 121]
[70 120]
[71 119]
[72 118]
[73 117]
[74 116]
[75 115]
[76 114]
[77 113]
[79 111]
[80 110]
[82 108]
[83 107]
[85 104]
[86 103]
[89 99]
[90 98]
[91 97]
[92 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
