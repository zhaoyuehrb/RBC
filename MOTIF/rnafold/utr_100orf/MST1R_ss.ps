%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:35:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUCCUCUAGGGUCCCAGCUCGCCUCGAUGGAGCUCCUCCCGCCGCUGCCUCAGUCCUUCCUGUUGCUGCUGCUGUUGCCUGCCAAGCCCGCGGCGGGCGAGGACUGGCAGUGCCCGCGCACCCCCU\
) } def
/len { sequence length } bind def

/coor [
[87.70095825 146.63383484]
[81.66672516 160.36656189]
[75.63249207 174.09930420]
[69.59825897 187.83204651]
[63.56402588 201.56477356]
[57.52979279 215.29751587]
[59.86024857 231.53022766]
[46.80207443 241.45071411]
[31.78839684 234.85362244]
[30.26400375 218.52548218]
[43.79705811 209.26327515]
[49.83129120 195.53054810]
[55.86552429 181.79780579]
[61.89975739 168.06506348]
[67.93399048 154.33233643]
[73.96822357 140.59959412]
[63.30775833 131.29951477]
[55.80443954 119.30630493]
[41.29218674 123.10030365]
[26.77993011 126.89430237]
[12.26767445 130.68830872]
[-2.24458075 134.48229980]
[-6.93352509 149.17984009]
[-18.83874512 158.99151611]
[-34.16133118 160.78649902]
[-48.01189804 153.99198914]
[-55.97078323 140.77610779]
[-55.49833298 125.35597992]
[-46.74530792 112.65211487]
[-32.50476074 106.71827698]
[-17.32080460 109.44792938]
[-6.03858137 119.97004700]
[8.47367382 116.17604828]
[22.98592949 112.38204956]
[37.49818420 108.58805084]
[52.01044083 104.79404449]
[53.74078369 86.35940552]
[62.28935242 69.93527222]
[76.39614868 57.94243240]
[93.98195648 52.14852142]
[112.45477295 53.40752029]
[129.09185791 61.53385544]
[139.89041138 51.12274170]
[150.68896484 40.71162796]
[161.10008240 29.91307831]
[171.10986328 18.74149513]
[181.11964417 7.56991196]
[191.12942505 -3.60167050]
[201.13920593 -14.77325344]
[211.14898682 -25.94483566]
[221.15876770 -37.11641693]
[222.93240356 -43.65975571]
[227.15483093 -47.65638351]
[231.93823242 -48.57298660]
[242.48005676 -59.24396896]
[253.02188110 -69.91494751]
[263.56372070 -80.58592987]
[274.10552979 -91.25691223]
[284.64736938 -101.92789459]
[295.18920898 -112.59887695]
[305.60031128 -123.39743042]
[315.87918091 -134.32194519]
[326.15802002 -145.24647522]
[336.43685913 -156.17098999]
[346.71572876 -167.09552002]
[356.99456787 -178.02003479]
[367.27343750 -188.94456482]
[377.55227661 -199.86907959]
[381.30441284 -217.84788513]
[398.22125244 -222.34645081]
[408.23104858 -233.51803589]
[418.24084473 -244.68960571]
[427.97561646 -256.10162354]
[437.42959595 -267.74731445]
[433.30175781 -282.70529175]
[438.78585815 -297.22094727]
[451.77313232 -305.71273804]
[467.26971436 -304.91537476]
[479.31683350 -295.13549805]
[483.28216553 -280.13363647]
[477.64093018 -265.67831421]
[464.56228638 -257.32791138]
[449.07528687 -258.29333496]
[439.62127686 -246.64762878]
[439.23333740 -241.79269409]
[435.72250366 -237.15847778]
[429.41241455 -234.67982483]
[419.40261841 -223.50823975]
[409.39285278 -212.33666992]
[409.72564697 -200.17996216]
[401.38757324 -190.78224182]
[388.47680664 -189.59022522]
[378.19796753 -178.66571045]
[367.91909790 -167.74118042]
[357.64025879 -156.81666565]
[347.36138916 -145.89213562]
[337.08255005 -134.96762085]
[326.80368042 -124.04309845]
[316.52484131 -113.11857605]
[314.20864868 -106.01794434]
[305.86016846 -102.05704498]
[295.31835938 -91.38606262]
[284.77651978 -80.71508789]
[274.23468018 -70.04410553]
[263.69287109 -59.37312317]
[253.15103149 -48.70214081]
[242.60920715 -38.03115845]
[232.33035278 -27.10663605]
[222.32057190 -15.93505383]
[212.31079102 -4.76347113]
[202.30101013 6.40811157]
[192.29122925 17.57969475]
[182.28144836 28.75127792]
[172.27166748 39.92285919]
[172.13978577 43.54459381]
[170.18104553 47.27128220]
[166.37168884 50.21388245]
[161.10008240 51.51018143]
[150.30152893 61.92129517]
[139.50297546 72.33240509]
[145.01637268 82.69373322]
[147.86370850 94.08000946]
[147.87634277 105.81689453]
[145.05354309 117.20927429]
[139.56246948 127.58245087]
[131.72833252 136.32208252]
[122.01512146 142.91055298]
[110.99806976 146.95767212]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[42 120]
[43 119]
[44 118]
[45 114]
[46 113]
[47 112]
[48 111]
[49 110]
[50 109]
[51 108]
[54 107]
[55 106]
[56 105]
[57 104]
[58 103]
[59 102]
[60 101]
[61 99]
[62 98]
[63 97]
[64 96]
[65 95]
[66 94]
[67 93]
[68 92]
[70 89]
[71 88]
[72 87]
[73 84]
[74 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
