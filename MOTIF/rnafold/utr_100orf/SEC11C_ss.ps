%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:54:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCUGGGCCGGUGGGCGGGGGCCGGCAGGUGCUCCGCAGCCGUCUGUGCCACCCAGAGCCGGCGGGCCGCUAGGUCCCCGGAGACCCUGCUAUGGUGCGUGCGGGCGCCGUGGGGGCUCAUCUCCCCGCGUCCGGCUUGGAUAUCUUCGGGGACCUGAAGAAGAUGAACAAGCGCCAGCUCUAUUACCAGG\
) } def
/len { sequence length } bind def

/coor [
[179.74433899 333.02609253]
[189.17543030 321.13412476]
[202.26750183 313.45544434]
[199.83662415 298.65374756]
[197.40573120 283.85202026]
[194.97485352 269.05032349]
[192.54396057 254.24859619]
[181.74543762 244.66537476]
[182.96830750 229.26852417]
[196.83901978 220.41900635]
[186.27566528 209.76933289]
[175.71231079 199.11965942]
[162.93757629 200.86965942]
[151.31613159 194.84828186]
[145.19888306 183.05725098]
[147.02073669 169.70283508]
[136.63212585 158.88264465]
[126.24352264 148.06243896]
[115.85491180 137.24223328]
[105.46630859 126.42201996]
[95.07769775 115.60181427]
[80.82701874 110.92014313]
[66.04557800 113.47141266]
[51.26413345 116.02268982]
[36.48269272 118.57395935]
[21.70125198 121.12522888]
[6.91980982 123.67649841]
[-8.65651035 138.37931824]
[-27.71973038 130.49087524]
[-42.35901260 133.76063538]
[-56.99829865 137.03039551]
[-71.63758087 140.30017090]
[-76.93742371 149.82048035]
[-86.41098785 154.74340820]
[-96.81063843 153.65400696]
[-104.71858215 147.15351868]
[-119.45654297 149.94505310]
[-134.19450378 152.73657227]
[-148.93244934 155.52810669]
[-163.67041016 158.31964111]
[-175.73863220 169.42323303]
[-191.30578613 164.26609802]
[-194.35769653 148.15342712]
[-181.75483704 137.66058350]
[-166.46194458 143.58168030]
[-151.72398376 140.79014587]
[-136.98602295 137.99862671]
[-122.24806976 135.20709229]
[-107.51011658 132.41555786]
[-93.83600616 118.75661469]
[-74.90734863 125.66088104]
[-60.26806259 122.39112091]
[-45.62878036 119.12135315]
[-30.98949623 115.85158539]
[-27.50330734 107.65717316]
[-20.52564812 101.90512848]
[-11.54728413 99.98878479]
[-2.56365633 102.46376801]
[4.36853886 108.89505768]
[19.14998055 106.34378815]
[33.93142319 103.79251862]
[48.71286392 101.24124146]
[63.49430466 98.68997192]
[78.27574921 96.13870239]
[82.60810852 81.77796936]
[71.70371246 71.47776794]
[60.79931259 61.17757034]
[49.89491653 50.87736893]
[38.99052048 40.57716751]
[22.91928291 37.31413269]
[17.96680641 21.68067551]
[29.22777367 9.75915527]
[45.11786652 13.81340981]
[49.29071808 29.67277145]
[60.19511795 39.97297287]
[71.09951019 50.27317047]
[82.00391388 60.57337189]
[92.90830994 70.87357330]
[99.99460602 68.41706848]
[102.82607269 53.68673325]
[114.16719055 63.50405502]
[121.25348663 61.04755020]
[123.44312286 46.20822906]
[125.63275909 31.36890602]
[123.78801727 22.40683746]
[127.98069763 16.30664635]
[130.41159058 1.50493014]
[132.84246826 -13.29678631]
[130.86207581 -19.63036156]
[132.18902588 -25.17595482]
[135.60092163 -28.53747559]
[138.51231384 -43.25222397]
[141.42370605 -57.96697235]
[144.33508301 -72.68172455]
[147.24647522 -87.39646912]
[150.15785217 -102.11122131]
[153.06924438 -116.82596588]
[155.98063660 -131.54071045]
[158.89201355 -146.25546265]
[149.89111328 -159.24620056]
[152.79452515 -174.78150940]
[165.87969971 -183.64456177]
[181.38343811 -180.57707214]
[190.10765076 -167.39892578]
[186.87641907 -151.92848206]
[173.60676575 -143.34408569]
[170.69537354 -128.62933350]
[167.78399658 -113.91458130]
[164.87260437 -99.19983673]
[161.96122742 -84.48508453]
[159.04983521 -69.77033234]
[156.13844299 -55.05558777]
[153.22706604 -40.34083939]
[150.31567383 -25.62608910]
[147.64418030 -10.86590195]
[145.21330261 3.93581438]
[142.78242493 18.73752975]
[140.47207642 33.55854034]
[138.28244019 48.39786530]
[136.09280396 63.23718643]
[137.73629761 79.82803345]
[133.46484375 93.66063690]
[125.15891266 102.94369507]
[115.15716553 106.77175903]
[105.89790344 105.21321106]
[116.28651428 116.03341675]
[126.67511749 126.85362244]
[137.06372070 137.67382812]
[147.45233154 148.49403381]
[157.84094238 159.31423950]
[175.32707214 159.34555054]
[187.15316772 171.76396179]
[186.36198425 188.55630493]
[196.92533875 199.20597839]
[207.48869324 209.85565186]
[220.18490601 217.84352112]
[234.35749817 222.75653076]
[248.53009033 227.66954041]
[262.70269775 232.58255005]
[276.87527466 237.49555969]
[290.96261597 230.84843445]
[305.26565552 236.03282166]
[311.51586914 249.50392151]
[325.68844604 254.41693115]
[339.86105347 259.32995605]
[354.03363037 264.24295044]
[368.20623779 269.15597534]
[382.37881470 274.06896973]
[396.55139160 278.98199463]
[407.66699219 268.46047974]
[422.40209961 264.32095337]
[437.37066650 267.51470947]
[449.13308716 277.30776978]
[454.98641968 291.44979858]
[453.58557129 306.69107056]
[445.25250244 319.52923584]
[431.90206909 327.01419067]
[416.60211182 327.42593384]
[402.86840820 320.66986084]
[393.85693359 308.29846191]
[391.63839722 293.15457153]
[377.46582031 288.24157715]
[363.29321289 283.32855225]
[349.12063599 278.41555786]
[334.94802856 273.50253296]
[320.77545166 268.58953857]
[306.60284424 263.67651367]
[293.35595703 270.38882446]
[278.91293335 265.60824585]
[271.96224976 251.66815186]
[257.78967285 246.75514221]
[243.61708069 241.84213257]
[229.44448853 236.92912292]
[215.27189636 232.01611328]
[214.52717590 243.82481384]
[207.34568787 251.81770325]
[209.77656555 266.61941528]
[212.20744324 281.42114258]
[214.63833618 296.22286987]
[217.06921387 311.02456665]
[231.92951965 314.11264038]
[244.66867065 322.36358643]
[253.56381226 334.66159058]
[257.41195679 349.34341431]
[255.69267273 364.42349243]
[248.63845825 377.86233521]
[237.20336914 387.84246826]
[222.93388367 393.01416016]
[207.75985718 392.67797852]
[193.73341370 386.87939453]
[182.75155640 376.40258789]
[176.29946899 362.66452026]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 180]
[4 179]
[5 178]
[6 177]
[7 176]
[10 135]
[11 134]
[12 133]
[16 130]
[17 129]
[18 128]
[19 127]
[20 126]
[21 125]
[22 64]
[23 63]
[24 62]
[25 61]
[26 60]
[27 59]
[29 54]
[30 53]
[31 52]
[32 51]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[65 78]
[66 77]
[67 76]
[68 75]
[69 74]
[82 120]
[83 119]
[84 118]
[86 117]
[87 116]
[88 115]
[91 114]
[92 113]
[93 112]
[94 111]
[95 110]
[96 109]
[97 108]
[98 107]
[99 106]
[136 174]
[137 173]
[138 172]
[139 171]
[140 170]
[143 167]
[144 166]
[145 165]
[146 164]
[147 163]
[148 162]
[149 161]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
