%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:31:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGUGAACUCUGAUUCCUGGAAUUGUUACCAGGCGACCACGGCGUCAUCAAAUGACCUGGCAAUUCCGUCUACUGAUGUCUCGAACAUGUUUCAGACUAAGCUACGAAAUGAAACUUGGGAAGACUUGCCAAAAAUGUCCUGCACAACUGAGAUCCAAGCAGCAUUCAUUCUCUCUUCCUUUGUGA\
) } def
/len { sequence length } bind def

/coor [
[67.61460114 240.94270325]
[49.76317978 252.81790161]
[46.04254532 267.34915161]
[42.32190704 281.88037109]
[50.59066772 295.34896851]
[46.83262634 310.69995117]
[33.27735519 318.82586670]
[17.96696472 314.90573120]
[9.98483372 301.26528931]
[14.06661892 285.99722290]
[27.79067039 278.15972900]
[31.51130676 263.62850952]
[35.23194122 249.09725952]
[28.84369850 245.16784668]
[15.64951420 252.30322266]
[16.06721115 237.30900574]
[9.67896748 233.37959290]
[-1.61239147 243.25405884]
[-12.90375042 253.12852478]
[-24.19510841 263.00299072]
[-35.48646927 272.87747192]
[-33.95408249 288.31869507]
[-41.81952286 301.69458008]
[-56.05836487 307.86184692]
[-71.19548035 304.44903564]
[-81.41034698 292.76843262]
[-82.77513123 277.31149292]
[-74.76505280 264.02172852]
[-60.46014404 258.00930786]
[-45.36093903 261.58612061]
[-34.06958008 251.71163940]
[-22.77822304 241.83717346]
[-11.48686409 231.96270752]
[-0.19550572 222.08822632]
[1.15052748 203.72311401]
[9.86821842 188.57792664]
[23.52859688 179.25891113]
[38.95658493 176.95846558]
[52.94776535 181.34205627]
[61.64242935 169.11901855]
[70.33709717 156.89598083]
[79.03176117 144.67292786]
[87.72642517 132.44989014]
[75.55212402 119.52556610]
[72.38481140 103.85363770]
[57.51864624 101.85433197]
[42.65248489 99.85503387]
[27.78632164 97.85572815]
[12.92015839 95.85642242]
[-3.58354735 99.73766327]
[-11.88178825 84.95336151]
[0.02755349 72.88671875]
[14.91946316 80.99025726]
[29.78562546 82.98956299]
[44.65178680 84.98886871]
[59.51794815 86.98817444]
[74.38410950 88.98748016]
[82.17663574 78.55758667]
[93.85515594 72.80274963]
[94.60681915 57.82159805]
[95.35848236 42.84044266]
[96.11014557 27.85928726]
[96.86180115 12.87813282]
[97.61346436 -2.10302234]
[90.57742310 -16.27357864]
[98.94277954 -28.59713936]
[99.69444275 -43.57829285]
[95.01153564 -57.82857132]
[85.51987457 -69.44358063]
[76.02821350 -81.05858612]
[66.53656006 -92.67359924]
[51.01729202 -97.97307587]
[48.11305237 -114.11300659]
[60.81146622 -124.49001312]
[76.04949951 -118.42912292]
[78.15156555 -102.16525269]
[87.64322662 -90.55024719]
[97.13488007 -78.93523407]
[106.62654114 -67.32022858]
[121.24646759 -70.67549896]
[124.72377014 -85.26687622]
[128.20106506 -99.85825348]
[131.67837524 -114.44963837]
[135.15567017 -129.04101562]
[138.63298035 -143.63240051]
[137.22753906 -147.78848267]
[137.22984314 -151.77201843]
[138.41021729 -155.15844727]
[140.42399597 -157.64265442]
[142.86074829 -159.06626892]
[147.30488586 -173.39280701]
[151.74902344 -187.71934509]
[156.19314575 -202.04588318]
[160.63728333 -216.37242126]
[165.08142090 -230.69895935]
[153.17022705 -240.10575867]
[145.46488953 -253.18215942]
[143.00746155 -268.15966797]
[146.13031006 -283.01266479]
[154.41107178 -295.73248291]
[166.72987366 -304.59878540]
[181.42068481 -308.41253662]
[196.49667358 -306.65795898]
[209.91897583 -299.57229614]
[219.87229919 -288.11386108]
[225.01055908 -273.83230591]
[224.63883972 -258.65908813]
[218.80741882 -244.64628601]
[208.30494690 -233.68898010]
[194.55178833 -227.26908875]
[179.40795898 -226.25482178]
[174.96382141 -211.92828369]
[170.51968384 -197.60174561]
[166.07556152 -183.27520752]
[161.63142395 -168.94866943]
[157.18728638 -154.62213135]
[153.22434998 -140.15509033]
[149.74705505 -125.56371307]
[146.26974487 -110.97233582]
[142.79244995 -96.38095093]
[139.31513977 -81.78957367]
[135.83784485 -67.19819641]
[128.95924377 -48.76524734]
[114.67559814 -42.82663345]
[113.92393494 -27.84547806]
[121.01374054 -14.74647236]
[112.59461975 -1.35136020]
[111.84295654 13.62979507]
[111.09129333 28.61095047]
[110.33963776 43.59210587]
[109.58797455 58.57326126]
[108.83631134 73.55441284]
[124.66344452 82.65300751]
[132.41510010 100.72583008]
[127.45544434 121.20930481]
[141.26518250 127.06513977]
[155.07493591 132.92097473]
[168.88468933 138.77682495]
[186.14428711 131.00289917]
[203.31903076 138.17123413]
[209.70791626 155.31098938]
[223.70561218 160.70211792]
[237.70332336 166.09323120]
[251.70103455 171.48434448]
[261.88241577 160.22805786]
[275.44427490 153.41333008]
[290.55245972 151.96177673]
[305.16372681 156.06971741]
[317.30203247 165.18159485]
[325.32574463 178.06507874]
[328.14974976 192.97781372]
[325.39208984 207.90295410]
[317.42575073 220.82200623]
[305.32809448 229.98776245]
[290.73526001 234.16064453]
[275.62075806 232.77630615]
[262.02871704 226.02195740]
[251.79737854 214.81106567]
[246.31042480 200.65982056]
[246.30992126 185.48205566]
[232.31221008 180.09094238]
[218.31449890 174.69981384]
[204.31678772 169.30870056]
[195.11956787 176.09893799]
[183.66696167 177.61289978]
[172.79774475 173.35832214]
[165.26275635 164.28746033]
[163.02885437 152.58656311]
[149.21910095 146.73072815]
[135.40934753 140.87489319]
[121.59960175 135.01904297]
[130.91136169 146.77877808]
[142.72706604 156.01940918]
[147.96272278 170.07598877]
[145.07115173 184.79464722]
[134.90682983 195.82580566]
[120.47344971 199.90963745]
[106.03627014 195.83929443]
[95.86164856 184.81762695]
[92.95633698 170.10166931]
[98.17922211 156.03971863]
[99.94947052 141.14454651]
[91.25480652 153.36759949]
[82.56014252 165.59063721]
[73.86547089 177.81367493]
[65.17080688 190.03672791]
[75.04045868 204.27578735]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[17 34]
[18 33]
[19 32]
[20 31]
[21 30]
[39 186]
[40 185]
[41 184]
[42 183]
[43 182]
[45 57]
[46 56]
[47 55]
[48 54]
[49 53]
[59 132]
[60 131]
[61 130]
[62 129]
[63 128]
[64 127]
[66 125]
[67 124]
[68 79]
[69 78]
[70 77]
[71 76]
[80 122]
[81 121]
[82 120]
[83 119]
[84 118]
[85 117]
[90 116]
[91 115]
[92 114]
[93 113]
[94 112]
[95 111]
[135 171]
[136 170]
[137 169]
[138 168]
[141 163]
[142 162]
[143 161]
[144 160]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
