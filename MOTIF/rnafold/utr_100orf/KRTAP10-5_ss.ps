%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGCUCACGUCUUCCCCACCCCAGCAUGGCCGCGUGCACCAUGUCCGUCUGCUCCAGCGCUUGCUCUGACUCCUGGCGAGUGGACGACUGCCCAGAGAGCUGCUGUGAGCCCCCCUGCGGCACCG\
) } def
/len { sequence length } bind def

/coor [
[-33.60242081 244.91375732]
[-34.88966751 251.83598328]
[-36.99539948 258.55255127]
[-39.88890457 264.96704102]
[-43.52817154 270.98751831]
[-47.86049271 276.52770996]
[-52.82323456 281.50823975]
[-58.34474182 285.85791016]
[-64.34537506 289.51455688]
[-70.73864746 292.42608643]
[-77.43249512 294.55105591]
[-84.33057404 295.85937500]
[-91.33365631 296.33270264]
[-98.34108734 295.96475220]
[-105.25217438 294.76123047]
[-111.96768951 292.73995972]
[-118.39126587 289.93038940]
[-124.43077087 286.37335205]
[-129.99966431 282.12039185]
[-135.01818848 277.23297119]
[-139.41458130 271.78170776]
[-143.12600708 265.84518433]
[-146.09954834 259.50900269]
[-148.29289246 252.86442566]
[-149.67498779 246.00706482]
[-164.67382812 246.19258118]
[-179.67268372 246.37809753]
[-194.67153931 246.56362915]
[-209.67039490 246.74914551]
[-223.48597717 255.58439636]
[-237.91882324 247.79818726]
[-238.12164307 231.40028381]
[-223.88580322 223.25946045]
[-209.85591125 231.75028992]
[-194.85705566 231.56477356]
[-179.85821533 231.37925720]
[-164.85935974 231.19372559]
[-149.86050415 231.00820923]
[-140.96192932 206.02128601]
[-121.89667511 187.51823425]
[-96.57165527 179.34455872]
[-70.20040131 183.22344971]
[-48.22977829 198.39274597]
[-35.90125656 189.84829712]
[-32.15562820 183.38288879]
[-23.16044617 181.24942017]
[-10.62435532 173.01252747]
[1.91173661 164.77563477]
[14.44782829 156.53874207]
[16.71300125 136.31915283]
[33.25658035 123.98772430]
[53.84706497 127.69493866]
[65.50814819 118.25994110]
[77.16922760 108.82494354]
[88.83030701 99.38993835]
[100.37380219 89.81143951]
[111.79794312 80.09089661]
[123.22208405 70.37035370]
[134.64622498 60.64981079]
[146.07037354 50.92926788]
[147.88203430 45.80274200]
[151.19203186 42.29821396]
[155.10029602 40.71813202]
[158.72102356 40.94995117]
[170.83444214 32.10317993]
[182.94784546 23.25641060]
[195.06124878 14.40963936]
[207.17465210 5.56286860]
[193.19442749 0.12657537]
[188.48699951 -14.11561680]
[196.47367859 -26.81258011]
[211.34982300 -28.73624802]
[222.30354309 -18.48851395]
[221.37367249 -3.51723170]
[234.48597717 -10.80199337]
[247.59826660 -18.08675575]
[260.71057129 -25.37151718]
[265.15167236 -40.30183411]
[278.55316162 -47.50282669]
[292.75958252 -43.17690277]
[305.87185669 -50.46166229]
[318.98416138 -57.74642563]
[324.75619507 -72.71516418]
[340.10070801 -77.39762878]
[353.24670410 -68.20183563]
[354.10968018 -52.18201065]
[342.02764893 -41.62718964]
[326.26892090 -44.63413239]
[313.15661621 -37.34936905]
[300.04434204 -30.06460762]
[296.21228027 -15.71710205]
[283.01831055 -8.14252758]
[267.99533081 -12.25922298]
[254.88302612 -4.97446108]
[241.77073669 2.31030035]
[228.65843201 9.59506226]
[216.02142334 17.67627716]
[203.90802002 26.52304649]
[191.79461670 35.36981964]
[179.68121338 44.21658707]
[167.56779480 53.06335831]
[155.79092407 62.35340881]
[144.36677551 72.07395172]
[132.94262695 81.79449463]
[121.51848602 91.51503754]
[110.09434509 101.23558044]
[106.43366241 108.52220154]
[98.26530457 111.05101776]
[86.60422516 120.48602295]
[74.94314575 129.92102051]
[63.28206253 139.35601807]
[65.14188385 149.12471008]
[63.26520538 158.83071899]
[57.96098709 167.10374451]
[50.01894379 172.79208374]
[40.59222794 175.12300110]
[31.03008270 173.80735779]
[22.68472099 169.07482910]
[10.14862919 177.31172180]
[-2.38746238 185.54861450]
[-14.92355442 193.78550720]
[-27.35681152 202.17681885]
[-39.68533325 210.72126770]
[-36.83675766 217.17105103]
[-34.78102875 223.91345215]
[-33.54723358 230.85145569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[25 38]
[26 37]
[27 36]
[28 35]
[29 34]
[43 123]
[44 122]
[46 121]
[47 120]
[48 119]
[49 118]
[52 111]
[53 110]
[54 109]
[55 108]
[56 106]
[57 105]
[58 104]
[59 103]
[60 102]
[64 101]
[65 100]
[66 99]
[67 98]
[68 97]
[74 96]
[75 95]
[76 94]
[77 93]
[80 90]
[81 89]
[82 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
