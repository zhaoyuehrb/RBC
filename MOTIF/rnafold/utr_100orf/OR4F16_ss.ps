%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:16:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUGGAGAGAAUCACUCAGUGGUAUCUGAGUUUUUGUUUCUGGGACUCACUCAUUCAUGGGAGAUCCAGCUCCUCCUCCUAGUGUUUUCCUCUGUGC\
) } def
/len { sequence length } bind def

/coor [
[96.00108337 179.25553894]
[83.30893707 171.26119995]
[74.51356506 159.11041260]
[70.88388062 144.55619812]
[72.94353485 129.69827271]
[80.39538574 116.68021393]
[92.16640472 107.37906647]
[77.16821289 107.14579010]
[62.17003250 106.91251373]
[47.17184448 106.67923737]
[32.17366028 106.44595337]
[18.25482559 113.96770477]
[5.64942265 106.03340912]
[-9.34876347 105.80013275]
[-20.64997101 116.52022552]
[-35.85694122 116.06999207]
[-46.00726700 105.22995758]
[-61.00545502 104.99668121]
[-76.00363922 104.76339722]
[-91.00182343 104.53012085]
[-106.00001526 104.29684448]
[-120.99819946 104.06356812]
[-132.17008972 115.24231720]
[-147.97418213 115.16362000]
[-159.03419495 103.87416077]
[-158.78840637 88.07178497]
[-147.38264465 77.13175201]
[-131.58375549 77.54460144]
[-120.76492310 89.06538391]
[-105.76673889 89.29866028]
[-90.76854706 89.53193665]
[-75.77036285 89.76521301]
[-60.77217865 89.99848938]
[-45.77399063 90.23176575]
[-35.29145050 79.71264648]
[-20.07783508 79.73556519]
[-9.11548615 90.80194092]
[5.88269997 91.03522491]
[18.72876167 83.49678802]
[32.40693665 91.44776917]
[47.40512085 91.68104553]
[62.40330887 91.91432190]
[77.40149689 92.14760590]
[92.39968109 92.38088226]
[107.09413910 89.36877441]
[120.79099274 83.25351715]
[134.48783875 77.13826752]
[148.18469238 71.02301025]
[153.90907288 56.53614807]
[167.88673401 50.52952957]
[181.66247559 56.07612991]
[195.35931396 49.96087646]
[209.05616760 43.84562302]
[222.75302124 37.73036957]
[221.95689392 23.41887093]
[226.11312866 9.73243141]
[234.69691467 -1.67167616]
[246.64860535 -9.41994858]
[260.50454712 -12.58806133]
[274.57629395 -10.81109905]
[287.15634155 -4.32545948]
[296.72531128 6.06235790]
[310.60571289 0.37603197]
[324.48611450 -5.31029415]
[338.36651611 -10.99662018]
[352.24691772 -16.68294716]
[358.11975098 -31.35555840]
[372.68023682 -37.50106812]
[387.28994751 -31.47345161]
[393.28115845 -16.84878731]
[387.09942627 -2.30362916]
[372.41223145 3.53263783]
[357.93325806 -2.80253935]
[344.05285645 2.88378668]
[330.17242432 8.57011318]
[316.29202271 14.25643921]
[302.41162109 19.94276428]
[302.61291504 35.70662308]
[296.76873779 50.38975143]
[285.73660278 61.75868607]
[271.16549683 68.07209015]
[255.24955750 68.34746552]
[240.39750671 62.51388931]
[228.86827087 51.42721558]
[215.17141724 57.54247284]
[201.47457886 63.65772629]
[187.77772522 69.77297974]
[182.71083069 83.73228455]
[168.90739441 90.12913513]
[154.29994202 84.71985626]
[140.60308838 90.83511353]
[126.90624237 96.95037079]
[113.20939636 103.06562042]
[127.68842316 106.98452759]
[139.66157532 116.02021027]
[147.40148926 128.86909485]
[149.79150391 143.67745972]
[146.48683167 158.30891418]
[137.96423340 170.65254211]
[125.45326996 178.92755127]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 44]
[8 43]
[9 42]
[10 41]
[11 40]
[13 38]
[14 37]
[17 34]
[18 33]
[19 32]
[20 31]
[21 30]
[22 29]
[45 93]
[46 92]
[47 91]
[48 90]
[51 87]
[52 86]
[53 85]
[54 84]
[62 77]
[63 76]
[64 75]
[65 74]
[66 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
