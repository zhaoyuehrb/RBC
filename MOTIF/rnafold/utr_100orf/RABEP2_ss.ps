%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:57:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCUCCGUCACCAGGGAGUGCGGGAAUCCGCCGUUUGCGCUGAGGCAAUGGCGGCAGCUGCGCCGGUGGCCGCGGACGACGAUGAGCGGCGGCGGCGGCCGGGGGCUGCACUGGAGGACUCCCGGUCCCAGGAAGGGGCAAAUGGUG\
) } def
/len { sequence length } bind def

/coor [
[-4.07760429 267.89315796]
[-11.06998444 281.16366577]
[-18.06236458 294.43417358]
[-25.05474472 307.70471191]
[-32.04712296 320.97521973]
[-39.03950500 334.24572754]
[-46.03188324 347.51623535]
[-39.05686188 361.37728882]
[-41.59449005 376.68545532]
[-52.66899490 387.55444336]
[-68.02201080 389.80490112]
[-81.74998474 382.57150269]
[-88.57423401 368.63558960]
[-85.87068939 353.35586548]
[-74.67892456 342.60763550]
[-59.30240250 340.52386475]
[-52.31002045 327.25335693]
[-45.31764221 313.98284912]
[-38.32526016 300.71231079]
[-31.33288193 287.44180298]
[-24.34050179 274.17129517]
[-17.34812164 260.90075684]
[-21.03008461 255.32179260]
[-22.78489113 248.81805420]
[-22.40311623 242.04061890]
[-19.89093018 235.67861938]
[-15.47277260 230.38916016]
[-9.57165337 226.72953796]
[-2.76879215 225.09854126]
[4.25358343 225.69325256]
[12.86442471 213.41101074]
[21.47526550 201.12876892]
[30.08610725 188.84654236]
[38.69694901 176.56430054]
[47.30779266 164.28205872]
[55.91863251 151.99981689]
[64.52947235 139.71757507]
[73.14031219 127.43534088]
[81.75115967 115.15309906]
[78.45740509 100.51919556]
[65.41463470 93.11067963]
[52.37186432 85.70215607]
[39.32909393 78.29364014]
[24.26780701 82.26799011]
[11.14612007 74.56890106]
[7.45000458 60.18577576]
[-5.59276628 52.77725983]
[-21.97877693 53.43352127]
[-30.51020432 39.42827988]
[-22.41064644 25.16892624]
[-6.01223564 25.32425880]
[1.81575036 39.73448563]
[14.85852146 47.14300537]
[29.10522652 42.95170593]
[42.43798828 50.27919769]
[46.73760986 65.25086975]
[59.78038025 72.65938568]
[72.82315063 80.06790161]
[85.86592102 87.47642517]
[88.91779327 80.22547150]
[95.37127686 73.95589447]
[104.78837585 70.14530945]
[108.23621368 55.54693985]
[111.68405914 40.94857025]
[115.13189697 26.35020065]
[114.05778503 17.20931816]
[118.80937195 11.48197937]
[122.56422424 -3.04045510]
[118.52776337 -18.33808899]
[129.20466614 -28.72332573]
[132.95950317 -43.24576187]
[136.71435547 -57.76819611]
[140.46920776 -72.29062653]
[144.22406006 -86.81306458]
[132.53483582 -96.62758636]
[126.26940155 -110.54545593]
[126.67175293 -125.80326843]
[133.66201782 -139.37158203]
[145.85226440 -148.55638123]
[160.82211304 -151.53402710]
[175.59928894 -147.71331787]
[187.24977112 -137.85284424]
[193.46034241 -123.91040802]
[192.99790955 -108.65430450]
[185.95426941 -95.11362457]
[173.72795105 -85.97689819]
[158.74649048 -83.05821228]
[154.99163818 -68.53578186]
[151.23680115 -54.01334763]
[147.48194885 -39.49091339]
[143.72709656 -24.96847725]
[148.03211975 -10.70958614]
[137.08665466 0.71439439]
[133.33180237 15.23682880]
[129.73027039 29.79804039]
[126.28242493 44.39641190]
[122.83458710 58.99478149]
[119.38674927 73.59314728]
[128.38166809 85.59696198]
[143.36082458 86.38726044]
[158.33999634 87.17756653]
[173.31916809 87.96787262]
[188.29832458 88.75817108]
[203.27749634 89.54847717]
[218.25666809 90.33877563]
[233.23582458 91.12908173]
[248.22248840 91.76142883]
[263.21499634 92.23575592]
[272.62136841 79.89476776]
[287.49475098 75.47187805]
[302.11602783 80.66777802]
[310.86303711 93.48454285]
[310.37237549 108.99385834]
[300.83270264 121.23207855]
[285.91220093 125.49335480]
[271.34814453 120.13914490]
[262.74066162 107.22824860]
[247.74816895 106.75392914]
[240.91697693 109.70601654]
[232.44552612 106.10824585]
[217.46635437 105.31794739]
[202.48719788 104.52764130]
[187.50802612 103.73733521]
[172.52885437 102.94703674]
[157.54969788 102.15673065]
[142.57052612 101.36643219]
[127.59136200 100.57612610]
[120.73926544 113.91961670]
[130.10926819 125.63299561]
[139.47926331 137.34637451]
[155.20112610 140.54054260]
[162.37765503 154.88896179]
[155.50363159 169.38473511]
[139.85223389 172.90794373]
[127.42985535 162.75590515]
[127.76589203 146.71636963]
[118.39589691 135.00299072]
[109.02589417 123.28961945]
[94.03339386 123.76393890]
[85.42255402 136.04617310]
[76.81171417 148.32841492]
[68.20087433 160.61065674]
[59.59003067 172.89289856]
[50.97919083 185.17514038]
[42.36834717 197.45738220]
[33.75750732 209.73962402]
[25.14666367 222.02185059]
[16.53582382 234.30409241]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[4 19]
[5 18]
[6 17]
[7 16]
[30 148]
[31 147]
[32 146]
[33 145]
[34 144]
[35 143]
[36 142]
[37 141]
[38 140]
[39 139]
[40 59]
[41 58]
[42 57]
[43 56]
[46 53]
[47 52]
[62 98]
[63 97]
[64 96]
[65 95]
[67 94]
[68 93]
[70 91]
[71 90]
[72 89]
[73 88]
[74 87]
[99 127]
[100 126]
[101 125]
[102 124]
[103 123]
[104 122]
[105 121]
[106 120]
[107 118]
[108 117]
[128 138]
[129 137]
[130 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
