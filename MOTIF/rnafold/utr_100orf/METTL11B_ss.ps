%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:07:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAAAGAAACAGCAAGGCAAGCUUCCUUUCUCUGUAGGAAUCAUUAUUAUCCCCCUUUGUCAUGGCCCACCGGGGAGCCCAUUUUGCCUUUAGAUCCCGCUGGCAGAAGACCGACGAUGAACUCUGUAGACAUAGCAUGUCUUUUAUCCUUCACAAAGCCA\
) } def
/len { sequence length } bind def

/coor [
[220.16401672 285.20037842]
[210.65548706 273.59918213]
[204.89108276 259.75100708]
[203.35928345 244.82943726]
[206.18992615 230.09893799]
[213.14311218 216.80784607]
[223.62960815 206.08247375]
[236.76075745 198.83175659]
[251.42376709 195.67012024]
[266.37988281 196.86637878]
[254.00975037 188.38227844]
[241.63961792 179.89817810]
[229.26950073 171.41406250]
[216.27911377 163.91406250]
[202.74659729 157.44328308]
[189.21409607 150.97248840]
[175.68157959 144.50169373]
[162.14906311 138.03089905]
[148.61656189 131.56011963]
[135.08404541 125.08932495]
[121.55153656 118.61853027]
[96.24905396 133.72434998]
[65.26789093 118.56925201]
[51.17249680 123.69955444]
[37.07711029 128.82986450]
[22.98171997 133.96015930]
[8.88633060 139.09046936]
[4.73885489 154.04298401]
[-7.42632675 163.67564392]
[-22.93145370 164.28446960]
[-35.81448746 155.63536072]
[-41.12163925 141.05407715]
[-36.81220245 126.14742279]
[-24.54324150 116.64730835]
[-9.03242111 116.20671844]
[3.75602841 124.99507141]
[17.85141754 119.86476898]
[31.94680786 114.73446655]
[46.04219818 109.60417175]
[60.13758469 104.47386932]
[62.14888000 97.24858093]
[47.31941605 94.99315643]
[32.48994827 92.73773193]
[17.92089462 96.30741882]
[5.47967196 87.92792511]
[3.31172419 73.08541870]
[12.83643723 61.49749756]
[27.81784821 60.75094223]
[38.44771957 71.33531189]
[52.30959320 77.06666565]
[66.17147064 82.79801941]
[68.18276215 75.57273865]
[58.76558304 63.89726639]
[49.34840012 52.22179413]
[39.93121719 40.54631805]
[24.46176910 38.72041702]
[15.07773018 26.74567604]
[16.91378021 12.00917339]
[7.49659872 0.33369926]
[-7.99338579 1.25021327]
[-21.04558372 -7.14143467]
[-26.64115906 -21.61448479]
[-22.62849808 -36.60375214]
[-10.55055046 -46.34556198]
[4.94846487 -47.09398270]
[17.90886116 -38.56123734]
[23.34710312 -24.02833939]
[19.17207146 -9.08348274]
[28.58925438 2.59199119]
[43.38043594 3.91733122]
[53.09711838 15.62377071]
[51.60669327 31.12913704]
[61.02387238 42.80461121]
[70.44105530 54.48008347]
[79.85823822 66.15555573]
[90.55898285 63.16935349]
[101.28144073 63.36401367]
[111.13153076 66.50595856]
[119.34838104 72.12453461]
[125.36293030 79.56770325]
[128.83616638 88.07089996]
[129.67456055 96.83209991]
[128.02232361 105.08602142]
[141.55484009 111.55680847]
[155.08734131 118.02760315]
[168.61985779 124.49839020]
[182.15237427 130.96917725]
[195.68487549 137.43997192]
[209.21739197 143.91076660]
[222.74990845 150.38156128]
[217.20088196 136.44569397]
[220.75765991 121.87347412]
[232.10308838 112.06118011]
[247.03584290 110.64242554]
[260.02612305 118.14258575]
[266.26348877 131.78425598]
[263.43817139 146.51577759]
[252.59638977 156.88186646]
[237.75360107 159.04394531]
[250.12371826 167.52804565]
[262.49383545 176.01214600]
[274.86398315 184.49624634]
[280.37860107 184.07620239]
[285.25399780 185.57527161]
[288.89877319 188.49964905]
[290.98068237 192.20272827]
[305.35052490 196.50477600]
[319.72036743 200.80682373]
[334.09020996 205.10887146]
[328.24258423 191.29563904]
[333.70834351 177.32690430]
[347.37768555 171.15037537]
[361.47320557 176.28027344]
[367.97509766 189.79785156]
[363.18402100 204.01213074]
[349.82473755 210.83576965]
[363.59799194 216.77696228]
[377.37124634 222.71815491]
[391.14447021 228.65936279]
[404.91772461 234.60055542]
[418.69094849 240.54174805]
[414.48648071 226.14305115]
[421.53695679 212.90330505]
[435.83090210 208.35545349]
[449.23559570 215.08705139]
[454.12423706 229.26806641]
[447.71536255 242.83001709]
[433.65426636 248.05659485]
[446.64462280 255.55659485]
[459.63500977 263.05661011]
[472.62539673 270.55661011]
[485.61578369 278.05661011]
[498.60617065 285.55661011]
[515.34643555 288.23986816]
[517.40216064 305.06872559]
[501.80007935 311.70281982]
[491.10617065 298.54696655]
[478.11578369 291.04696655]
[465.12539673 283.54696655]
[452.13500977 276.04696655]
[439.14462280 268.54696655]
[426.15426636 261.04696655]
[412.74975586 254.31498718]
[398.97653198 248.37379456]
[385.20327759 242.43260193]
[371.43005371 236.49140930]
[357.65679932 230.55020142]
[343.88354492 224.60900879]
[329.78817749 219.47871399]
[315.41833496 215.17666626]
[301.04849243 210.87461853]
[286.67864990 206.57257080]
[296.99713135 217.45964050]
[303.74285889 230.85722351]
[306.34417725 245.62994385]
[304.58059692 260.52590942]
[298.60162354 274.28277588]
[288.91390991 285.73477173]
[276.33840942 293.91137695]
[261.94082642 298.11972046]
[246.94128418 298.00311279]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 102]
[11 101]
[12 100]
[13 99]
[14 90]
[15 89]
[16 88]
[17 87]
[18 86]
[19 85]
[20 84]
[21 83]
[23 40]
[24 39]
[25 38]
[26 37]
[27 36]
[52 75]
[53 74]
[54 73]
[55 72]
[58 69]
[59 68]
[106 152]
[107 151]
[108 150]
[109 149]
[116 148]
[117 147]
[118 146]
[119 145]
[120 144]
[121 143]
[128 142]
[129 141]
[130 140]
[131 139]
[132 138]
[133 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
