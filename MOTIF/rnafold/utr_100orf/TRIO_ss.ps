%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCGGGCGCCGCCGCAGCCAUGAGCGGCAGCAGCGGCGGAGCCGCCGCCCCCGCCGCGUCCUCCGGCCCCGCCGCGGCGGCCAGCGCGGCUGGCUCGGGCUGCGGGGGCGGUGCCGGCG\
) } def
/len { sequence length } bind def

/coor [
[2.53315139 124.48967743]
[-12.12587070 127.66978455]
[-26.78489304 130.84988403]
[-41.44391251 134.02999878]
[-56.10293579 137.21009827]
[-67.94904327 147.69725037]
[-82.02735901 142.83410645]
[-96.68638611 146.01422119]
[-102.66361237 158.15892029]
[-114.39064026 164.51890564]
[-127.44214630 162.95094299]
[-137.03955078 154.25642395]
[-151.77386475 157.06715393]
[-166.50816345 159.87786865]
[-181.24247742 162.68858337]
[-195.97679138 165.49929810]
[-210.71109009 168.31002808]
[-222.81700134 178.49617004]
[-236.76866150 173.28077698]
[-251.50297546 176.09149170]
[-263.60888672 186.27763367]
[-277.56054688 181.06224060]
[-292.29486084 183.87295532]
[-307.02917480 186.68368530]
[-315.70407104 199.89433289]
[-331.19625854 203.01972961]
[-344.31445312 194.20562744]
[-347.27587891 178.68127441]
[-338.32357788 165.65699768]
[-322.76876831 162.85986328]
[-309.83987427 171.94937134]
[-295.10556030 169.13865662]
[-280.37127686 166.32792664]
[-269.31924438 156.34281921]
[-254.31369019 161.35717773]
[-239.57939148 158.54646301]
[-228.52737427 148.56135559]
[-213.52182007 153.57571411]
[-198.78750610 150.76499939]
[-184.05319214 147.95428467]
[-169.31889343 145.14355469]
[-154.58457947 142.33283997]
[-139.85026550 139.52212524]
[-131.05519104 125.24681854]
[-114.33959198 121.62522888]
[-99.86649323 131.35519409]
[-85.20746613 128.17509460]
[-74.40987396 117.91539764]
[-59.28304291 122.55108643]
[-44.62401962 119.37097931]
[-29.96499825 116.19087219]
[-15.30597687 113.01076508]
[-0.64695525 109.83065796]
[4.16734123 100.66302490]
[13.45595837 95.60635376]
[24.20893860 96.57837677]
[32.78438568 103.49604034]
[47.58467484 101.05648041]
[62.38496399 98.61692810]
[77.18524933 96.17736816]
[91.98554230 93.73780823]
[98.88220978 89.37969971]
[107.18801880 91.42779541]
[122.04494476 89.36093903]
[128.17849731 80.20824432]
[138.15740967 76.08601379]
[148.52882385 78.15534210]
[155.84898376 85.47914124]
[170.79098511 84.16137695]
[185.73300171 82.84360504]
[198.80007935 73.92385864]
[212.15786743 80.51313782]
[227.09988403 79.19537354]
[242.04188538 77.87760162]
[256.98388672 76.55983734]
[271.92590332 75.24206543]
[286.86788940 73.92430115]
[299.93496704 65.00455475]
[313.29278564 71.59383392]
[328.23477173 70.27606201]
[337.16290283 60.86642838]
[349.71041870 60.13334656]
[359.05487061 67.92479706]
[374.02526855 66.98294067]
[388.98266602 65.85303497]
[403.92465210 64.53527069]
[418.86666870 63.21750259]
[433.80865479 61.89973450]
[448.75067139 60.58196640]
[463.69268799 59.26419830]
[478.93939209 51.84975052]
[490.28479004 64.44808960]
[481.31951904 78.83767700]
[465.01043701 74.20619965]
[450.06845093 75.52397156]
[435.12643433 76.84173584]
[420.18441772 78.15950775]
[405.24243164 79.47727203]
[390.30041504 80.79504395]
[383.84173584 84.55878448]
[374.96713257 81.95333862]
[359.99673462 82.89519501]
[345.99423218 93.39370728]
[329.55255127 85.21806335]
[314.61053467 86.53583527]
[302.61221313 95.36132812]
[288.18566895 88.86630249]
[273.24365234 90.18407440]
[258.30166626 91.50183868]
[243.35964966 92.81960297]
[228.41764832 94.13737488]
[213.47564697 95.45513916]
[201.47731018 104.28063202]
[187.05076599 97.78560638]
[172.10876465 99.10337830]
[157.16674805 100.42114258]
[142.31625366 112.70142365]
[124.11179352 104.21785736]
[109.25487518 106.28471375]
[94.42510223 108.53810120]
[79.62480927 110.97765350]
[64.82452393 113.41721344]
[50.02423096 115.85677338]
[35.22394180 118.29632568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 53]
[2 52]
[3 51]
[4 50]
[5 49]
[7 47]
[8 46]
[12 43]
[13 42]
[14 41]
[15 40]
[16 39]
[17 38]
[19 36]
[20 35]
[22 33]
[23 32]
[24 31]
[57 124]
[58 123]
[59 122]
[60 121]
[61 120]
[63 119]
[64 118]
[68 116]
[69 115]
[70 114]
[72 112]
[73 111]
[74 110]
[75 109]
[76 108]
[77 107]
[79 105]
[80 104]
[83 102]
[84 101]
[85 99]
[86 98]
[87 97]
[88 96]
[89 95]
[90 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
