%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:45:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACAGAGAGAAAGGCUAAAGUUCUCUGGAGGAUGUGGCUGCAGAGCCUGCUGCUCUUGGGCACUGUGGCCUGCAGCAUCUCUGCACCCGCCCGCUCGCCCAGCCCCAGCACGCAGCCCUGGGAGCAUGUGA\
) } def
/len { sequence length } bind def

/coor [
[80.03374481 160.05874634]
[80.75268555 145.07598877]
[89.31198120 132.75697327]
[93.10831451 118.24533081]
[82.81946564 129.16043091]
[72.53060913 140.07554626]
[62.24176025 150.99064636]
[51.95291138 161.90576172]
[41.66405869 172.82086182]
[31.37520790 183.73596191]
[36.41831207 198.18676758]
[34.15666580 213.32426453]
[25.10997963 225.66995239]
[11.35711479 232.38688660]
[-3.94161940 231.93157959]
[-17.27068710 224.40864563]
[-25.56716537 211.54679871]
[-26.92458534 196.30160522]
[-21.03101921 182.17628479]
[-9.24076939 172.41674805]
[5.73685455 169.26567078]
[20.46010208 173.44711304]
[30.74895287 162.53201294]
[41.03780365 151.61689758]
[51.32665634 140.70179749]
[61.61550522 129.78669739]
[71.90435791 118.87158203]
[82.19320679 107.95648193]
[86.55807495 93.60559082]
[84.08915710 78.81017303]
[81.62023163 64.01475525]
[67.89636993 57.01748657]
[61.00477982 43.43958664]
[63.40145111 28.58294106]
[73.96036530 18.11167908]
[71.49144745 3.31625986]
[69.02252960 -11.47915936]
[66.55361176 -26.27458000]
[56.65040207 -38.61301804]
[62.18733597 -52.44022369]
[59.71841812 -67.23564148]
[57.24950027 -82.03105927]
[54.78057861 -96.82648468]
[52.31166077 -111.62190247]
[49.84274292 -126.41732025]
[47.37382507 -141.21273804]
[37.30910110 -149.37821960]
[35.60066605 -161.81982422]
[42.62784195 -171.73916626]
[40.50905991 -186.58877563]
[38.39028168 -201.43836975]
[36.27149963 -216.28797913]
[34.15272141 -231.13758850]
[32.03393936 -245.98719788]
[29.07772255 -249.46171570]
[27.59318733 -253.31738281]
[27.51321983 -257.02468872]
[28.59934807 -260.13491821]
[30.48512840 -262.33068848]
[29.77676201 -277.31396484]
[29.06839561 -292.29724121]
[28.36002922 -307.28048706]
[16.50224304 -317.72885132]
[15.58903027 -333.50674438]
[26.16218376 -345.25341797]
[41.94884109 -345.99975586]
[53.58305359 -335.30300903]
[54.16245651 -319.50933838]
[43.34329224 -307.98886108]
[44.05165863 -293.00558472]
[44.76002502 -278.02233887]
[45.46839142 -263.03906250]
[46.88354492 -248.10597229]
[49.00232697 -233.25636292]
[51.12110519 -218.40675354]
[53.23988724 -203.55715942]
[55.35866547 -188.70755005]
[57.47744370 -173.85794067]
[69.04574585 -160.71595764]
[62.16924286 -143.68165588]
[64.63816071 -128.88624573]
[67.10707855 -114.09082031]
[69.57599640 -99.29540253]
[72.04492188 -84.49998474]
[74.51383972 -69.70455933]
[76.98275757 -54.90914154]
[86.70937347 -43.62897110]
[81.34902954 -28.74349785]
[83.81794739 -13.94807816]
[86.28686523 0.84734094]
[88.75578308 15.64276028]
[102.14260101 22.11818695]
[109.23336792 35.39165878]
[107.12391663 50.47156906]
[96.41565704 61.54583359]
[98.88457489 76.34125519]
[101.35349274 91.13667297]
[104.83411407 89.27194977]
[109.33092499 88.81287384]
[114.29750061 90.13861847]
[119.06806946 93.42653656]
[122.92858887 98.61900330]
[125.19582367 105.41410828]
[136.69912720 115.04084015]
[148.31533813 124.53103638]
[160.04280090 133.88337708]
[171.77027893 143.23573303]
[183.49775696 152.58807373]
[195.22521973 161.94042969]
[209.80477905 156.89659119]
[224.79136658 160.55795288]
[235.40283203 171.75617981]
[238.25309753 186.91795349]
[232.43264771 201.20521545]
[219.79876709 210.05895996]
[204.38288879 210.65396118]
[191.10414124 202.80038452]
[184.19975281 189.00427246]
[185.87287903 173.66789246]
[174.14540100 164.31555176]
[162.41792297 154.96319580]
[150.69046021 145.61085510]
[138.96298218 136.25851440]
[131.70286560 134.53117371]
[127.07240295 126.54414368]
[115.56909180 116.91741943]
[121.04889679 130.88064575]
[130.99983215 142.10467529]
[133.47956848 156.89830017]
[127.73248291 170.75366211]
[115.50981140 179.44883728]
[100.53596497 180.33430481]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 28]
[5 27]
[6 26]
[7 25]
[8 24]
[9 23]
[10 22]
[29 97]
[30 96]
[31 95]
[35 91]
[36 90]
[37 89]
[38 88]
[40 86]
[41 85]
[42 84]
[43 83]
[44 82]
[45 81]
[46 80]
[49 78]
[50 77]
[51 76]
[52 75]
[53 74]
[54 73]
[59 72]
[60 71]
[61 70]
[62 69]
[103 126]
[104 125]
[105 123]
[106 122]
[107 121]
[108 120]
[109 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
