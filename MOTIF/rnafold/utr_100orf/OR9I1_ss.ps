%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:59:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCAAGAAUAAUCUCACCAGAGUAACCGAAUUCAUUCUCAUGGGCUUUAUGGACCACCCCAAAUUGGAGAUUCCCCUCUUUCUGGUGUUUCUGAGUU\
) } def
/len { sequence length } bind def

/coor [
[55.96014404 407.23049927]
[42.00193787 399.32177734]
[39.62483978 383.45581055]
[50.65235138 371.80361938]
[51.58489609 356.83264160]
[41.56613159 345.87088013]
[42.29859543 330.67489624]
[53.86421967 320.24063110]
[54.79676437 305.26962280]
[55.72930908 290.29864502]
[56.66184998 275.32766724]
[50.39637756 271.09112549]
[46.03510666 264.82736206]
[44.20289993 257.34680176]
[45.19342422 249.63935852]
[48.92336273 242.74348450]
[54.93698883 237.60626221]
[62.46134567 234.95343018]
[65.70161438 220.30758667]
[68.94187927 205.66174316]
[72.18214417 191.01589966]
[75.42241669 176.37005615]
[78.66268158 161.72421265]
[81.90294647 147.07838440]
[85.14321899 132.43254089]
[72.56513977 122.80179596]
[65.39730072 108.67447662]
[65.05321503 92.83652496]
[71.60073090 78.41123199]
[83.74867249 68.24330139]
[99.10141754 64.33789062]
[101.88463593 49.59836197]
[104.66785431 34.85883331]
[107.45107269 20.11930656]
[110.23428345 5.37977695]
[108.33153534 -1.25337422]
[109.94972229 -6.93590975]
[113.67609406 -10.17703152]
[117.37027740 -24.71501732]
[121.06446075 -39.25300217]
[110.10234833 -52.02241898]
[108.85803223 -68.64015198]
[117.62096405 -82.61993408]
[132.81265259 -88.62133026]
[136.05291748 -103.26716614]
[139.29318237 -117.91300964]
[142.53344727 -132.55885315]
[130.26263428 -141.57809448]
[122.72677612 -154.81179810]
[121.23152161 -169.96713257]
[126.03593445 -184.41835022]
[136.30760193 -195.66168213]
[150.26692200 -201.74916077]
[165.49534607 -201.62608337]
[179.35444641 -195.31378174]
[189.44306946 -183.90591431]
[194.01329041 -169.37893677]
[192.27328491 -154.24975586]
[184.52453613 -141.13957214]
[172.10954285 -132.31982422]
[157.17929077 -129.31858826]
[153.93902588 -114.67274475]
[150.69876099 -100.02690125]
[147.45848083 -85.38105774]
[157.25575256 -76.16856384]
[161.21012878 -63.20096970]
[158.17210388 -49.87697601]
[148.83987427 -39.74514008]
[135.60244751 -35.55881882]
[131.90826416 -21.02083397]
[128.21408081 -6.48284817]
[124.97381592 8.16299343]
[122.19059753 22.90252113]
[119.40737915 37.64205170]
[116.62416840 52.38158035]
[113.84095001 67.12110901]
[125.37015533 74.92115021]
[133.03654480 86.53967285]
[135.67282104 100.20764160]
[132.87760925 113.84399414]
[125.07649994 125.37248230]
[113.45726776 133.03778076]
[99.78905487 135.67280579]
[96.54878998 150.31864929]
[93.30852509 164.96449280]
[90.06825256 179.61032104]
[86.82798767 194.25616455]
[83.58772278 208.90200806]
[80.34745789 223.54785156]
[77.10718536 238.19369507]
[86.40583038 259.38262939]
[71.63283539 276.26022339]
[70.70029449 291.23120117]
[69.76774597 306.20217896]
[68.83520508 321.17315674]
[79.01654053 332.96206665]
[77.85753632 348.13146973]
[66.55587769 357.76516724]
[65.62333679 372.73617554]
[75.11958313 385.66677856]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 99]
[5 98]
[8 95]
[9 94]
[10 93]
[11 92]
[18 90]
[19 89]
[20 88]
[21 87]
[22 86]
[23 85]
[24 84]
[25 83]
[31 76]
[32 75]
[33 74]
[34 73]
[35 72]
[38 71]
[39 70]
[40 69]
[44 64]
[45 63]
[46 62]
[47 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
