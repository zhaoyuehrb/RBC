%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGGUCAUAAGGCGGAGGCGCGCCCAAGAUGGCGGCCUCCAUGUGCGACGUGUUCUCCUUCUGCGUGGGCGUGGCGGGCCGCGCGCGGGUCUCCGUGGAAGUCCGUUUCGUGAGCAGCGCCAAGGGAA\
) } def
/len { sequence length } bind def

/coor [
[116.19455719 134.59423828]
[101.73717499 138.15766907]
[87.01581573 135.92263794]
[74.26753235 128.22880554]
[65.42956543 116.24530792]
[50.86543655 119.83503723]
[36.30130768 123.42477417]
[24.75380135 134.23983765]
[10.54470444 129.77320862]
[-4.01942301 133.36294556]
[-8.28019619 146.53176880]
[-18.42898941 155.78271484]
[-31.72315979 158.76144409]
[-44.64147568 154.78927612]
[-53.81673813 145.01417542]
[-68.46335602 148.25094604]
[-83.10997009 151.48770142]
[-97.75659180 154.72447205]
[-112.40320587 157.96122742]
[-127.04981995 161.19799805]
[-134.84741211 166.15220642]
[-142.08934021 164.33148193]
[-156.80989075 167.21339417]
[-171.53044128 170.09529114]
[-186.25099182 172.97718811]
[-194.86195374 186.22961426]
[-210.33885193 189.42985535]
[-223.49949646 180.67926025]
[-226.53591919 165.16940308]
[-217.64666748 152.10200500]
[-202.10557556 149.22972107]
[-189.13288879 158.25663757]
[-174.41233826 155.37474060]
[-159.69178772 152.49284363]
[-144.97123718 149.61093140]
[-130.28659058 146.55137634]
[-115.63996887 143.31462097]
[-100.99335480 140.07785034]
[-86.34673309 136.84109497]
[-71.70011902 133.60432434]
[-57.05350113 130.36756897]
[-51.02047348 115.15067291]
[-36.98506546 106.40962219]
[-20.33726311 107.73297882]
[-7.60915804 118.79881287]
[6.95496893 115.20908356]
[17.46075249 104.65077972]
[32.71157455 108.86064911]
[47.27569962 105.27091217]
[61.83982849 101.68117523]
[64.09645081 86.96311188]
[71.80899048 74.22613525]
[83.80544281 65.40576172]
[98.26282501 61.84233856]
[112.98418427 64.07736206]
[125.73246765 71.77120209]
[134.57043457 83.75469208]
[149.13456726 80.16496277]
[163.69868469 76.57522583]
[178.26281738 72.98548889]
[192.82695007 69.39575195]
[201.02932739 56.15344620]
[215.85055542 52.72041702]
[228.42453003 60.62173843]
[242.98864746 57.03200531]
[257.55279541 53.44226837]
[272.11691284 49.85253525]
[281.44238281 32.16441345]
[300.43643188 26.95744324]
[316.96517944 37.10255432]
[331.23101807 32.46729660]
[345.49685669 27.83204269]
[356.23065186 16.20894623]
[370.72595215 19.63461304]
[384.99182129 14.99935722]
[399.25765991 10.36410236]
[413.52349854 5.72884750]
[427.78933716 1.09359276]
[442.05520630 -3.54166222]
[456.32104492 -8.17691708]
[459.61676025 -21.61977386]
[469.06878662 -31.58154869]
[482.11227417 -35.51541138]
[495.28439331 -32.48941040]
[505.14358521 -23.40460777]
[519.51727295 -27.69379234]
[533.89099121 -31.98297882]
[548.26464844 -36.27216339]
[562.63836670 -40.56134796]
[573.50341797 -52.84475708]
[589.51757812 -49.31232071]
[594.20684814 -33.59790421]
[582.74731445 -21.86715508]
[566.92755127 -26.18766022]
[552.55383301 -21.89847565]
[538.18017578 -17.60929108]
[523.80645752 -13.32010555]
[509.43276978 -9.03092003]
[504.51782227 6.58300400]
[491.15243530 16.31773949]
[474.45251465 16.20374489]
[460.95629883 6.08893061]
[446.69046021 10.72418594]
[432.42459106 15.35944080]
[418.15875244 19.99469566]
[403.89291382 24.62994957]
[389.62707520 29.26520538]
[375.36120605 33.90045929]
[365.64782715 45.19201279]
[350.13211060 42.09789276]
[335.86627197 46.73314667]
[321.60043335 51.36840057]
[319.52838135 61.59953308]
[313.30487061 70.08138275]
[304.02459717 75.20662689]
[293.36898804 75.96868134]
[283.30169678 72.15869141]
[275.70663452 64.41666412]
[261.14251709 68.00639343]
[246.57838440 71.59613037]
[232.01426697 75.18586731]
[224.55249023 88.02555084]
[209.83352661 91.87352753]
[196.41668701 83.95988464]
[181.85255432 87.54961395]
[167.28842163 91.13935089]
[152.72430420 94.72908783]
[138.16017151 98.31882477]
[135.90354919 113.03688812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 50]
[6 49]
[7 48]
[9 46]
[10 45]
[15 41]
[16 40]
[17 39]
[18 38]
[19 37]
[20 36]
[22 35]
[23 34]
[24 33]
[25 32]
[57 128]
[58 127]
[59 126]
[60 125]
[61 124]
[64 121]
[65 120]
[66 119]
[67 118]
[70 112]
[71 111]
[72 110]
[74 108]
[75 107]
[76 106]
[77 105]
[78 104]
[79 103]
[80 102]
[85 98]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
