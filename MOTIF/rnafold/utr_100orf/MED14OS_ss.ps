%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:13:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGCACUGGGGCCAUGGCGGCGCAGGACCGGGCUUGGCGCAACGGCACACGAUGCGGUCCUCGAGCCUCCCGGGCGCUCGGUCACCGCGCCGAAACGGGAGCGGGCAGAGUCGCCACCGCCUACCGCCGGGCCGCCUCAGAACAGGAAGCC\
) } def
/len { sequence length } bind def

/coor [
[112.42099762 470.27423096]
[117.73974609 455.79269409]
[130.05722046 446.50384521]
[128.83459473 431.55374146]
[127.61194611 416.60366821]
[116.12563324 407.19088745]
[114.67272949 392.04678345]
[124.62358093 380.06271362]
[123.40093994 365.11260986]
[122.17829895 350.16253662]
[120.95565796 335.21243286]
[119.73302460 320.26235962]
[118.51038361 305.31225586]
[117.28774261 290.36218262]
[102.65413666 279.43634033]
[100.55718994 260.97488403]
[112.77842712 246.56057739]
[110.94700623 231.67279053]
[109.11559296 216.78501892]
[107.28417969 201.89723206]
[105.45276642 187.00946045]
[103.62135315 172.12168884]
[90.85781860 157.64332581]
[98.85059357 139.18032837]
[96.41345215 124.37963867]
[80.12342834 114.56544495]
[75.67244720 96.07566833]
[62.29348755 89.29308319]
[52.09568024 93.28909302]
[41.60462189 91.02571869]
[34.26918411 83.49607086]
[32.36262131 73.38243866]
[19.27144623 66.05979156]
[6.18026972 58.73714828]
[-6.91090679 51.41450500]
[-20.00208282 44.09186172]
[-33.09325790 36.76921844]
[-46.18443680 29.44657707]
[-59.27561188 22.12393379]
[-72.65457153 15.34135437]
[-86.29905701 9.11012936]
[-99.94353485 2.87890434]
[-113.58801270 -3.35232091]
[-129.35528564 -2.04702377]
[-137.71823120 -14.37221909]
[-151.36270142 -20.60344505]
[-166.83622742 -16.36674881]
[-179.71073914 -25.93891525]
[-180.11003113 -41.97699738]
[-167.72778320 -52.17795563]
[-152.06260681 -48.71648026]
[-145.13148499 -34.24792480]
[-131.48699951 -28.01669884]
[-116.69567871 -29.76769638]
[-107.35678864 -16.99680138]
[-93.71231079 -10.76557541]
[-80.06782532 -4.53435040]
[-66.42334747 1.69687474]
[-63.70895767 0.79402947]
[-60.46330643 0.94522351]
[-57.09854889 2.36224627]
[-54.09704590 5.09926462]
[-51.95296860 9.03275681]
[-38.86179352 16.35540009]
[-25.77061653 23.67804337]
[-12.67944050 31.00068665]
[0.41173625 38.32332993]
[13.50291252 45.64597321]
[26.59408951 52.96861649]
[39.68526459 60.29125977]
[58.90796661 58.55392456]
[69.07606506 75.91412354]
[82.45502472 82.69670105]
[95.99625397 75.68539429]
[111.07061768 77.98474121]
[121.56848145 67.27050781]
[132.06634521 56.55627060]
[142.56420898 45.84203720]
[152.95225525 35.02128220]
[163.22937012 24.09513474]
[173.50650024 13.16898823]
[177.32565308 -2.18433952]
[191.68156433 -6.15386200]
[201.95867920 -17.08000946]
[203.87028503 -23.51091766]
[208.12811279 -27.38873291]
[212.88482666 -28.23135376]
[223.59906006 -38.72921753]
[234.31329346 -49.22708130]
[245.02754211 -59.72494888]
[249.46974182 -74.90972137]
[263.97561646 -78.29038239]
[274.68984985 -88.78824615]
[274.60040283 -104.59228516]
[285.77157593 -115.77176666]
[301.57565308 -115.69411469]
[312.63641357 -104.40538788]
[312.39169312 -88.60299683]
[300.98663330 -77.66220856]
[285.18771362 -78.07401276]
[274.47348022 -67.57614899]
[270.79763794 -53.14225006]
[255.52540588 -49.01071167]
[244.81117249 -38.51284790]
[234.09692383 -28.01498222]
[223.38269043 -17.51711845]
[212.88482666 -6.80288315]
[202.60771179 4.12326384]
[199.52365112 18.69507980]
[184.43264771 23.44611359]
[174.15551758 34.37226105]
[163.87838745 45.29840851]
[161.57255554 52.36798477]
[153.27844238 56.33990097]
[142.78057861 67.05413818]
[132.28271484 77.76837158]
[121.78485107 88.48260498]
[124.54193878 97.78110504]
[123.49732971 107.42332458]
[118.81284332 115.91561890]
[111.21414185 121.94249725]
[113.65128326 136.74317932]
[122.90224457 142.60688782]
[127.27764893 152.40695190]
[125.53997803 162.77442932]
[118.50912476 170.29026794]
[120.34054565 185.17803955]
[122.17195892 200.06582642]
[124.00337219 214.95359802]
[125.83478546 229.84138489]
[127.66619873 244.72915649]
[138.34194946 250.12130737]
[144.99758911 259.91351318]
[146.06068420 271.58489990]
[141.38070679 282.19836426]
[132.23783875 289.13952637]
[133.46046448 304.08963013]
[134.68310547 319.03970337]
[135.90574646 333.98980713]
[137.12838745 348.93988037]
[138.35102844 363.88998413]
[139.57366943 378.84005737]
[151.33941650 389.04812622]
[152.36637878 404.22708130]
[142.56204224 415.38101196]
[143.78468323 430.33111572]
[145.00730896 445.28118896]
[158.67034912 452.44534302]
[166.27131653 465.87026978]
[165.38478088 481.27212524]
[156.29364014 493.73626709]
[141.89881897 499.28540039]
[126.79367065 496.14880371]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 147]
[4 146]
[5 145]
[8 142]
[9 141]
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[22 126]
[24 122]
[25 121]
[27 73]
[28 72]
[32 70]
[33 69]
[34 68]
[35 67]
[36 66]
[37 65]
[38 64]
[39 63]
[40 58]
[41 57]
[42 56]
[43 55]
[45 53]
[46 52]
[75 117]
[76 116]
[77 115]
[78 114]
[79 112]
[80 111]
[81 110]
[83 108]
[84 107]
[87 106]
[88 105]
[89 104]
[90 103]
[92 101]
[93 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
