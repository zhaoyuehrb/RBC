%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:30:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCCGCUGUCCCGGAGCAAGCCAUGCCGCGCUUGUCUCUGCUCUUGCCGCUGCUGCUUCUGCUGCUGCUGCCGCUGCUGCCGCCGCUGUCCCCGAGCCUUGGGAUCCGCGACGUGGGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[69.15493774 336.99032593]
[68.39519501 322.00958252]
[67.63545990 307.02883911]
[66.87572479 292.04806519]
[66.11598969 277.06732178]
[54.92623901 267.30386353]
[53.94235229 252.12208557]
[64.25904083 240.45144653]
[63.49930191 225.47070312]
[62.73956299 210.48994446]
[61.97982788 195.50920105]
[53.60783005 183.19015503]
[60.63623428 169.01580811]
[59.87649536 154.03506470]
[59.11675644 139.05430603]
[58.35702133 124.07356262]
[46.38002777 115.04296875]
[31.76828766 118.43368530]
[17.15654564 121.82440948]
[2.54480290 125.21513367]
[-12.06693935 128.60585022]
[-26.67868233 131.99656677]
[-32.60135269 146.33886719]
[-45.84067535 154.43208313]
[-61.30586624 153.16416931]
[-73.05023956 143.02270508]
[-76.55783844 127.90727997]
[-70.47993469 113.63006592]
[-57.15359116 105.68096161]
[-41.70306778 107.11655426]
[-30.06940269 117.38483429]
[-15.45766068 113.99411011]
[-0.84591818 110.60338593]
[13.76582432 107.21266937]
[28.37756538 103.82194519]
[42.98930740 100.43122864]
[28.54070091 96.40161896]
[13.55853176 97.13279724]
[0.45381999 89.83440399]
[-6.81296492 76.71214294]
[-6.04567623 61.73178101]
[2.52379894 49.42064285]
[16.30561638 43.49936676]
[31.13467598 45.75746918]
[42.52937698 55.51250458]
[47.04599380 69.81433868]
[55.84284210 81.96405029]
[53.94776535 67.08424377]
[44.52896881 54.37216568]
[50.59632492 40.76935577]
[48.70124435 25.88954735]
[39.28244781 13.17747402]
[45.34980392 -0.42533636]
[43.45472717 -15.30514431]
[34.03593063 -28.01721764]
[40.10328674 -41.62002945]
[38.20820618 -56.49983597]
[27.85481262 -69.21751404]
[33.94400787 -84.44425201]
[50.21175003 -86.51609802]
[59.92318344 -73.30171204]
[53.08801651 -58.39491653]
[54.98309326 -43.51510620]
[64.26634216 -31.86733627]
[58.33453369 -17.20022202]
[60.22961426 -2.32041526]
[69.51286316 9.32735538]
[63.58105469 23.99446869]
[65.47613525 38.87427521]
[74.75938416 50.52204895]
[68.82757568 65.18916321]
[70.72264862 80.06896973]
[92.74736786 62.99359512]
[122.12424469 66.67176819]
[134.21467590 57.79360962]
[140.75846863 43.38912201]
[155.59654236 42.09262466]
[167.68696594 33.21446991]
[173.78208923 17.99010086]
[190.05064392 15.92459869]
[199.75692749 29.14277458]
[192.91593933 44.04690170]
[176.56512451 45.30489349]
[164.47470093 54.18304825]
[158.79568481 67.95251465]
[143.09281921 69.88403320]
[131.00239563 78.76219177]
[132.41896057 86.12719727]
[147.14901733 83.29431152]
[149.98167419 98.02442169]
[135.25207520 100.85721588]
[136.66862488 108.22222900]
[151.18978882 111.98201752]
[165.71093750 115.74180603]
[180.23210144 119.50159454]
[194.75326538 123.26138306]
[211.60229492 121.37817383]
[218.07617188 137.04742432]
[204.81144714 147.60597229]
[190.99346924 137.78253174]
[176.47232056 134.02275085]
[161.95115662 130.26295471]
[147.42999268 126.50317383]
[132.90884399 122.74338531]
[102.14397430 137.64941406]
[73.33776855 123.31382751]
[74.09750366 138.29457092]
[74.85724640 153.27532959]
[75.61698151 168.25607300]
[84.04331970 181.64663696]
[76.96057129 194.74946594]
[77.72031403 209.73020935]
[78.48004913 224.71096802]
[79.23978424 239.69171143]
[90.68424225 250.25874329]
[91.24131775 265.46218872]
[81.09673309 276.30758667]
[81.85646820 291.28833008]
[82.61621094 306.26907349]
[83.37594604 321.24984741]
[84.13568115 336.23059082]
[90.97650146 351.74313354]
[77.96390533 362.61093140]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 121]
[2 120]
[3 119]
[4 118]
[5 117]
[8 114]
[9 113]
[10 112]
[11 111]
[13 109]
[14 108]
[15 107]
[16 106]
[17 36]
[18 35]
[19 34]
[20 33]
[21 32]
[22 31]
[47 72]
[48 71]
[50 69]
[51 68]
[53 66]
[54 65]
[56 63]
[57 62]
[74 87]
[75 86]
[77 84]
[78 83]
[92 104]
[93 103]
[94 102]
[95 101]
[96 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
