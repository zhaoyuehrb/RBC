%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:55:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUGUUCCCCUUGCUGUGGGGGUAAGGAAUCAAGCCCCCAAGAUGGCGGCAGCGGCGGAGGAGCGGAUGGCAGAGGAAGGAGGCGGCGGCCAAGGCGACGGCGGUUCCUCUUUGGCCUCCGGCUCUACCCAGCGACAGCCUC\
) } def
/len { sequence length } bind def

/coor [
[8.15022850 132.21466064]
[-0.60322636 126.45929718]
[-6.10081959 117.63719940]
[-21.08654213 118.29149628]
[-36.07226562 118.94578552]
[-51.05799103 119.60007477]
[-66.04371643 120.25436401]
[-81.02943420 120.90865326]
[-96.01515961 121.56295013]
[-110.99285126 122.38066101]
[-125.96073914 123.36170959]
[-140.91702271 124.50597382]
[-155.85995483 125.81330872]
[-170.80287170 127.12064362]
[-185.74578857 128.42797852]
[-200.68870544 129.73532104]
[-215.63163757 131.04264832]
[-230.57455444 132.34999084]
[-245.31738281 135.11569214]
[-259.71813965 139.31312561]
[-274.11886597 143.51055908]
[-288.51962280 147.70799255]
[-302.92037964 151.90542603]
[-317.32110596 156.10287476]
[-320.89370728 171.04046631]
[-331.46813965 182.17947388]
[-346.19989014 186.52354431]
[-361.12622070 182.90412903]
[-372.23202515 172.29484558]
[-376.52987671 157.54954529]
[-372.86370850 142.63462830]
[-362.21966553 131.56214905]
[-347.46096802 127.31051636]
[-332.55761719 131.02342224]
[-321.51855469 141.70211792]
[-307.11779785 137.50468445]
[-292.71704102 133.30725098]
[-278.31631470 129.10981750]
[-263.91555786 124.91237640]
[-249.51481628 120.71494293]
[-263.13452148 114.42973328]
[-271.32467651 101.86306000]
[-271.57595825 86.86516571]
[-263.81134033 74.03118896]
[-250.40985107 67.29325867]
[-235.47744751 68.71579742]
[-223.58923340 77.86294556]
[-218.38757324 91.93215942]
[-221.46618652 106.61283112]
[-231.88188171 117.40706635]
[-216.93896484 116.09973145]
[-201.99604797 114.79239655]
[-187.05313110 113.48506165]
[-172.11021423 112.17772675]
[-157.16728210 110.87038422]
[-142.22436523 109.56304932]
[-135.78640747 105.81833649]
[-126.94178772 108.39382935]
[-111.97389984 107.41278076]
[-105.45578766 103.80939484]
[-96.66944885 106.57722473]
[-81.68372345 105.92293549]
[-66.69800568 105.26863861]
[-51.71228027 104.61434937]
[-36.72655869 103.96006012]
[-21.74083328 103.30577087]
[-6.75511026 102.65148163]
[5.21030569 87.36010742]
[24.85479355 85.65325165]
[39.72716141 99.05610657]
[54.63800430 97.42310333]
[69.54885101 95.79010010]
[78.09693909 78.43030548]
[95.32360840 69.61698914]
[114.40318298 72.84223938]
[127.77583313 86.82810974]
[142.48760986 83.90175629]
[151.28140259 71.04457092]
[166.24291992 68.28640747]
[178.44609070 76.74916840]
[193.15786743 73.82281494]
[207.86964417 70.89646149]
[222.58142090 67.97010803]
[234.60696411 57.68919373]
[248.59915161 62.79485703]
[263.31094360 59.86850357]
[278.02270508 56.94214630]
[290.04824829 46.66123581]
[304.04043579 51.76689911]
[318.75222778 48.84054565]
[333.46398926 45.91419220]
[348.17578125 42.98783493]
[362.88754272 40.06148148]
[377.59933472 37.13512421]
[392.31109619 34.20877075]
[407.02288818 31.28241539]
[421.47482300 17.30051041]
[439.52322388 24.11465645]
[454.09335327 20.54936790]
[468.66348267 16.98408127]
[480.12899780 5.25917006]
[495.94659424 9.58773327]
[499.84442139 25.51691437]
[487.81277466 36.66013718]
[472.22875977 31.55421066]
[457.65863037 35.11949921]
[443.08850098 38.68478775]
[438.54254150 47.93918991]
[429.44223022 53.23922729]
[418.70950317 52.60088730]
[409.94924927 45.99419403]
[395.23745728 48.92055130]
[380.52569580 51.84690475]
[365.81390381 54.77325821]
[351.10214233 57.69961548]
[336.39035034 60.62596893]
[321.67855835 63.55232620]
[306.96679688 66.47867584]
[295.99353027 76.55027771]
[280.94906616 71.65393066]
[266.23727417 74.58028412]
[251.52551270 77.50663757]
[240.55226135 87.57823181]
[225.50778198 82.68188477]
[210.79600525 85.60823822]
[196.08421326 88.53459167]
[181.37243652 91.46094513]
[173.33674622 103.94947052]
[158.45860291 107.12678528]
[145.41397095 98.61353302]
[130.70219421 101.53988647]
[128.40776062 111.74712372]
[122.82306671 120.59377289]
[114.59494019 127.05519104]
[104.67639160 130.38301086]
[94.21620941 130.19177246]
[84.42591858 126.50365448]
[76.43946075 119.74580383]
[71.18185425 110.70094299]
[56.27100754 112.33394623]
[41.36016464 113.96694946]
[36.90805054 123.80741882]
[28.80703354 130.82757568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 67]
[4 66]
[5 65]
[6 64]
[7 63]
[8 62]
[9 61]
[10 59]
[11 58]
[12 56]
[13 55]
[14 54]
[15 53]
[16 52]
[17 51]
[18 50]
[19 40]
[20 39]
[21 38]
[22 37]
[23 36]
[24 35]
[70 141]
[71 140]
[72 139]
[76 131]
[77 130]
[80 127]
[81 126]
[82 125]
[83 124]
[85 122]
[86 121]
[87 120]
[89 118]
[90 117]
[91 116]
[92 115]
[93 114]
[94 113]
[95 112]
[96 111]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
