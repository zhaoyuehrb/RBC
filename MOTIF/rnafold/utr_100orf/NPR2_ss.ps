%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:43:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGCUGCCAUCACUUCUGCUGUUGGUGGCAGCCCUGGCAGGUGGGGUGCGUCCUCCCGGGGCGCGGAACCUGACGCUGGCGGUGGUGCUGCCAGAAC\
) } def
/len { sequence length } bind def

/coor [
[78.24715424 133.44903564]
[70.94026947 127.34148407]
[65.28883362 119.67636871]
[51.08175659 124.48875427]
[43.80410767 130.30497742]
[36.35739517 129.22239685]
[22.00752831 133.59062195]
[7.65766239 137.95884705]
[-6.69220352 142.32707214]
[-21.04206848 146.69528198]
[-35.39193344 151.06350708]
[-49.74180222 155.43173218]
[-64.09166718 159.79994202]
[-78.44153595 164.16816711]
[-92.72172546 168.75903320]
[-106.92880249 173.57141113]
[-112.43693542 188.20680237]
[-126.08913422 195.83250427]
[-141.43925476 192.84790039]
[-151.23944092 180.66224670]
[-150.86233521 165.02920532]
[-140.48600769 153.33024597]
[-125.00982666 151.08924866]
[-111.74118805 159.36433411]
[-97.53411865 154.55195618]
[-92.11334229 149.33268738]
[-82.80975342 149.81829834]
[-68.45988464 145.45008850]
[-54.11001968 141.08186340]
[-39.76015472 136.71363831]
[-25.41028976 132.34541321]
[-11.06042385 127.97719574]
[3.28944159 123.60897827]
[17.63930702 119.24076080]
[31.98917389 114.87253571]
[46.26937103 110.28167725]
[60.47644424 105.46929169]
[62.64264297 85.98384094]
[73.82833099 69.88242340]
[91.33284760 61.05253220]
[110.92994690 61.62603760]
[117.67736816 48.22931290]
[124.42479706 34.83258820]
[131.17222595 21.43586159]
[137.91964722 8.03913593]
[131.98229980 -2.50295758]
[131.95651245 -14.48100567]
[137.73060608 -24.83716202]
[147.72731018 -30.98540115]
[159.33279419 -31.45697784]
[166.90002441 -44.40830231]
[174.46726990 -57.35963058]
[182.03451538 -70.31095123]
[189.60176086 -83.26228333]
[197.16900635 -96.21360779]
[204.73625183 -109.16493225]
[212.30348206 -122.11625671]
[215.07351685 -138.84237671]
[231.91279602 -140.81085205]
[238.46592712 -125.17459106]
[225.25482178 -114.54901123]
[217.68757629 -101.59768677]
[210.12033081 -88.64636230]
[202.55308533 -75.69503784]
[194.98583984 -62.74371338]
[187.41859436 -49.79238510]
[179.85136414 -36.84106064]
[172.28411865 -23.88973427]
[178.06008911 -6.65655375]
[169.41651917 9.68859863]
[151.31637573 14.78656197]
[144.56893921 28.18328667]
[137.82151794 41.58001328]
[131.07409668 54.97673798]
[124.32666779 68.37346649]
[134.15892029 79.37978363]
[139.31771851 93.20725250]
[139.09729004 107.96406555]
[133.52778625 121.63127899]
[144.37892151 131.98757935]
[155.23004150 142.34387207]
[166.08117676 152.70018005]
[176.93231201 163.05647278]
[187.78344727 173.41278076]
[198.63456726 183.76907349]
[209.48570251 194.12538147]
[225.11837769 200.68705750]
[223.14070129 217.52526855]
[206.41305542 220.28613281]
[199.12940979 204.97651672]
[188.27827454 194.62020874]
[177.42713928 184.26391602]
[166.57600403 173.90760803]
[155.72488403 163.55131531]
[144.87374878 153.19500732]
[134.02261353 142.83871460]
[123.17148590 132.48240662]
[114.81406403 137.04818726]
[105.61273193 139.50344849]
[96.09165955 139.70831299]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 37]
[4 36]
[6 35]
[7 34]
[8 33]
[9 32]
[10 31]
[11 30]
[12 29]
[13 28]
[14 27]
[15 25]
[16 24]
[41 75]
[42 74]
[43 73]
[44 72]
[45 71]
[50 68]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
[57 61]
[79 97]
[80 96]
[81 95]
[82 94]
[83 93]
[84 92]
[85 91]
[86 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
