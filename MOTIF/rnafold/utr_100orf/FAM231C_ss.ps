%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:16:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUGUCUUCAAAGGGACUGUGGAAAGAGAGGCCUUCAGCCCACACCUCUGAAUGCUUUUCCACCACAGCAUGCCCUGUGGCCUUUAUCCUGCUGGUGU\
) } def
/len { sequence length } bind def

/coor [
[99.83193207 264.31759644]
[84.86806488 263.27706909]
[71.54328156 256.38867188]
[62.04190826 244.78160095]
[57.92150116 230.35862732]
[59.85751724 215.48408508]
[67.53258514 202.59637451]
[79.68853760 193.80815125]
[94.33264923 190.56007385]
[109.06431580 193.38459778]
[121.46836090 201.81846619]
[117.32383728 187.40240479]
[106.37117767 177.30842590]
[109.99425507 161.90765381]
[105.84973145 147.49157715]
[101.70520782 133.07551575]
[97.56067657 118.65945435]
[82.17654419 106.03736877]
[86.72286987 86.66420746]
[81.25309753 72.69704437]
[75.78332520 58.72988129]
[70.31355286 44.76272202]
[64.84378052 30.79556084]
[59.37400818 16.82839966]
[46.39869690 12.83887959]
[38.25466156 2.22401428]
[37.77536774 -10.95070744]
[44.91164780 -21.80222702]
[39.87889481 -35.93274307]
[34.84614563 -50.06325531]
[29.81339455 -64.19377136]
[24.78064537 -78.32427979]
[19.74789429 -92.45479584]
[14.71514416 -106.58531189]
[2.79615426 -116.98955536]
[5.81474447 -131.57507324]
[0.78199399 -145.70558167]
[-4.25075626 -159.83610535]
[-9.28350639 -173.96661377]
[-14.31625652 -188.09712219]
[-29.36372757 -191.49964905]
[-40.16661835 -202.51333618]
[-43.27777100 -217.62373352]
[-37.70442200 -232.00918579]
[-25.22500992 -241.07934570]
[-9.82166958 -241.93995667]
[3.59044909 -234.31640625]
[10.73158836 -220.64132690]
[9.32303619 -205.27839661]
[-0.18574293 -193.12988281]
[4.84700727 -178.99935913]
[9.87975788 -164.86885071]
[14.91250801 -150.73834229]
[19.94525909 -136.60781860]
[31.50427246 -127.21428680]
[28.84565926 -111.61806488]
[33.87841034 -97.48754883]
[38.91115952 -83.35703278]
[43.94390869 -69.22651672]
[48.97665787 -55.09600449]
[54.00941086 -40.96549225]
[59.04216003 -26.83497810]
[74.47541809 -20.35780144]
[80.65016174 -4.44079065]
[73.34117126 11.35862732]
[78.81094360 25.32578850]
[84.28071594 39.29294968]
[89.75048828 53.26010895]
[95.22026062 67.22727203]
[100.69003296 81.19443512]
[109.34523773 83.66622925]
[115.86229706 89.87512207]
[118.75012970 98.40055084]
[117.34800720 107.29191589]
[111.97674561 114.51493073]
[116.12126923 128.93099976]
[120.26579285 143.34706116]
[124.41032410 157.76312256]
[135.65942383 168.88822937]
[131.73989868 183.25787354]
[135.88442993 197.67393494]
[142.83938599 210.96411133]
[152.32142639 222.58697510]
[161.80346680 234.20982361]
[176.78802490 231.09184265]
[191.50199890 235.30581665]
[202.56422424 245.88342285]
[207.43269348 260.39398193]
[204.98866272 275.50311279]
[195.79374695 287.73880005]
[181.96089172 294.28939819]
[166.66876221 293.64962769]
[153.43138123 285.96649170]
[145.29060364 273.00555420]
[144.11714172 257.74508667]
[150.18061829 243.69186401]
[140.69856262 232.06901550]
[131.21652222 220.44615173]
[131.07521057 235.44549561]
[124.99825287 249.15937805]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 81]
[12 80]
[14 78]
[15 77]
[16 76]
[17 75]
[19 70]
[20 69]
[21 68]
[22 67]
[23 66]
[24 65]
[28 62]
[29 61]
[30 60]
[31 59]
[32 58]
[33 57]
[34 56]
[36 54]
[37 53]
[38 52]
[39 51]
[40 50]
[82 98]
[83 97]
[84 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
