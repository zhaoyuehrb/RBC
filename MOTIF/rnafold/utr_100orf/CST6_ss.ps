%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:23:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCAAGCUCGGCACUCACGGCUCUGAGGGCUCCGACGGCACUGACGGCCAUGGCGCGUUCGAACCUCCCGCUGGCGCUGGGCCUGGCCCUGGUCGCAUUCUGCCUCCUGGCGCUGCCACGCGACGCCCGGGCCCGGCCGCAGGAGCGCA\
) } def
/len { sequence length } bind def

/coor [
[93.74913788 110.31291199]
[79.68285370 115.52249146]
[65.78143311 121.15724945]
[52.05772018 127.21197510]
[38.33400726 133.26669312]
[24.61029434 139.32142639]
[10.88658142 145.37614441]
[-2.77506900 151.56964111]
[-16.37325287 157.90126038]
[-26.55488777 173.21185303]
[-43.94631195 171.06094360]
[-57.41337967 177.66685486]
[-70.74379730 184.54435730]
[-83.93209839 191.69059753]
[-97.12039185 198.83685303]
[-110.30868530 205.98309326]
[-114.95922089 224.30102539]
[-131.21437073 233.30287170]
[-148.60340881 227.71936035]
[-161.49127197 235.39421082]
[-174.37913513 243.06904602]
[-187.26698303 250.74388123]
[-190.90736389 266.12319946]
[-204.39999390 274.35266113]
[-219.73995972 270.54989624]
[-227.82632446 256.97100830]
[-223.86158752 241.67210388]
[-210.19795227 233.72975159]
[-194.94181824 237.85601807]
[-182.05397034 230.18118286]
[-169.16610718 222.50634766]
[-156.27825928 214.83151245]
[-155.92678833 203.35935974]
[-149.99673462 193.39227295]
[-139.87458801 187.48854065]
[-128.03916931 187.22885132]
[-117.45493317 192.79479980]
[-104.26663971 185.64854431]
[-91.07833862 178.50230408]
[-77.89004517 171.35606384]
[-75.68382263 167.05998230]
[-70.72563934 164.13389587]
[-64.01929474 164.19979858]
[-50.55222321 157.59388733]
[-46.32183838 146.22189331]
[-35.10689545 140.62278748]
[-22.70487213 144.30307007]
[-9.10668755 137.97145081]
[-4.34245014 132.26341248]
[4.83185625 131.65243530]
[18.55557060 125.59770966]
[32.27928162 119.54298401]
[46.00299454 113.48825836]
[59.72671127 107.43353271]
[61.33792877 104.23487091]
[64.60964966 101.67864990]
[69.21273804 100.55097961]
[74.47327423 101.45620728]
[88.53955841 96.24663544]
[102.49736786 90.75304413]
[116.34097290 84.97769928]
[130.18458557 79.20235443]
[144.02818298 73.42700958]
[157.87179565 67.65167236]
[171.71539307 61.87632751]
[157.27667236 57.81143570]
[146.70925903 47.16578674]
[142.75099182 32.69747162]
[146.42738342 18.15497780]
[156.78594971 7.30600119]
[171.14295959 2.96132040]
[185.77877808 6.24656439]
[196.90151978 16.31058502]
[201.62948608 30.54597473]
[198.73774719 45.26459503]
[188.97717285 56.65195847]
[203.69996643 53.78153610]
[218.42276001 50.91110992]
[227.26535034 38.08744049]
[242.23724365 35.38615417]
[254.40815735 43.89522934]
[269.13095093 41.02480698]
[283.85375977 38.15438080]
[298.57653809 35.28395844]
[313.29934692 32.41353226]
[328.02212524 29.54310799]
[342.74493408 26.67268372]
[357.46771240 23.80225945]
[372.19052124 20.93183517]
[386.91329956 18.06141090]
[401.63610840 15.19098663]
[405.24111938 5.04090977]
[412.70059204 -2.61653852]
[422.60144043 -6.42787933]
[433.10821533 -5.75912762]
[442.30319214 -0.80021697]
[448.53649902 7.48209715]
[463.40649414 5.51164532]
[478.27651978 3.54119396]
[493.14654541 1.57074237]
[508.01654053 -0.39970914]
[514.42541504 -17.64144135]
[528.59875488 -29.23314095]
[546.60235596 -32.06748962]
[563.49426270 -25.45282745]
[574.68127441 -11.27944946]
[589.40405273 -14.14987469]
[604.12689209 -17.02029800]
[618.84967041 -19.89072227]
[630.85827637 -31.05879784]
[646.45275879 -25.98510170]
[649.59094238 -9.88901806]
[637.04449463 0.67118317]
[621.72009277 -5.16792917]
[606.99731445 -2.29750466]
[592.27447510 0.57291979]
[577.55169678 3.44334435]
[575.28973389 15.09865665]
[569.19061279 25.32556725]
[559.95727539 32.89939499]
[548.66949463 36.90387726]
[536.65789795 36.84198761]
[525.34674072 32.69749451]
[516.08538818 24.93967247]
[509.98699951 14.47030544]
[495.11697388 16.44075584]
[480.24697876 18.41120720]
[465.37695312 20.38166046]
[450.50692749 22.35211182]
[439.90975952 38.63916016]
[420.46850586 42.02514267]
[404.50653076 29.91378021]
[389.78372192 32.78420639]
[375.06094360 35.65462875]
[360.33813477 38.52505493]
[345.61535645 41.39547729]
[330.89254761 44.26590347]
[316.16976929 47.13632584]
[301.44696045 50.00675201]
[286.72418213 52.87717438]
[272.00137329 55.74760056]
[257.27859497 58.61802673]
[249.19548035 71.07592010]
[234.30537415 74.19667053]
[221.29318237 65.63390350]
[206.57038879 68.50432587]
[191.84759521 71.37475586]
[177.49073792 75.71993256]
[163.64714050 81.49527740]
[149.80352783 87.27061462]
[135.95993042 93.04595947]
[122.11631775 98.82130432]
[108.27271271 104.59664917]
[105.19900513 108.92531586]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 59]
[2 58]
[3 54]
[4 53]
[5 52]
[6 51]
[7 50]
[8 48]
[9 47]
[11 44]
[12 43]
[13 40]
[14 39]
[15 38]
[16 37]
[19 32]
[20 31]
[21 30]
[22 29]
[60 153]
[61 152]
[62 151]
[63 150]
[64 149]
[65 148]
[76 147]
[77 146]
[78 145]
[81 142]
[82 141]
[83 140]
[84 139]
[85 138]
[86 137]
[87 136]
[88 135]
[89 134]
[90 133]
[91 132]
[97 129]
[98 128]
[99 127]
[100 126]
[101 125]
[106 117]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
