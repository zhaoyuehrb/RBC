%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCUGAGCCAGCGAAAUCCGCUCCCGCCCCGAAGAAGGGCUCCAAGAAGGCCGUGACCAAGGCGCAGAAGAAGGACGGCAAGAAGCGCAAGCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[88.80525208 454.91604614]
[74.48200989 448.64077759]
[67.58979797 434.60400391]
[71.38290405 419.43341064]
[84.07034302 410.29214478]
[85.00288391 395.32116699]
[85.93543243 380.35018921]
[79.00434875 367.16650391]
[87.58463287 353.87405396]
[88.51718140 338.90307617]
[78.49841309 327.94131470]
[79.23088074 312.74533081]
[90.79650116 302.31103516]
[91.72904205 287.34005737]
[92.66159058 272.36907959]
[77.23322296 263.24963379]
[68.38484192 247.56864929]
[68.55644989 229.48104858]
[77.78527069 213.82742310]
[93.67353058 204.83848572]
[93.20703125 189.84574890]
[92.74053192 174.85299683]
[89.32608795 168.14724731]
[92.50000000 159.38832092]
[92.50000000 144.38832092]
[92.50000000 129.38832092]
[66.91094971 111.98996735]
[67.52924347 76.54076385]
[55.20491409 67.99028015]
[42.88057709 59.43980026]
[30.55624390 50.88931656]
[15.51771641 55.17612076]
[1.26320744 48.74626923]
[-5.47673988 34.63573837]
[-1.51972854 19.50708771]
[11.26586151 10.50360394]
[26.84306526 11.87645817]
[37.85680389 22.97743034]
[39.10672760 38.56497955]
[51.43106079 47.11546326]
[63.75539780 55.66594696]
[76.07972717 64.21643066]
[83.37657166 62.48260880]
[76.66027069 49.07025146]
[66.40608978 38.12256622]
[67.65542603 23.17468452]
[79.58464813 14.08107567]
[94.32935333 16.83674622]
[102.16902161 29.62500763]
[97.93541718 44.01500320]
[97.97024536 59.01496506]
[105.26708984 57.28114319]
[112.42788696 44.10074234]
[119.58868408 30.92033958]
[112.79073334 16.97159576]
[115.52308655 1.69698095]
[126.73509979 -9.03010464]
[142.11552429 -11.08487606]
[155.75027466 -3.67723346]
[162.39651489 10.34443474]
[159.49862671 25.58851051]
[148.17089844 36.19333649]
[132.76908875 38.08113861]
[125.60828400 51.26153946]
[118.44748688 64.44194031]
[125.76923370 70.61227417]
[131.24801636 78.17909241]
[134.64974976 86.62923431]
[135.87609863 95.42042542]
[134.96452332 104.01577759]
[132.07977295 111.91647339]
[127.49789429 118.69072723]
[121.58386993 123.99729156]
[114.76474762 127.60224915]
[107.50000000 129.38832092]
[107.50000000 144.38832092]
[107.50000000 159.38832092]
[107.73327637 174.38650513]
[108.19977570 189.37924194]
[108.66627502 204.37199402]
[120.16306305 208.77503967]
[129.42384338 216.83354187]
[135.33932495 227.55033875]
[137.21188354 239.61183167]
[134.83779907 251.54898071]
[128.52908325 261.91625977]
[119.07272339 269.46664429]
[107.63257599 273.30163574]
[106.70002747 288.27261353]
[105.76748657 303.24359131]
[115.94882202 315.03250122]
[114.78981781 330.20190430]
[103.48815918 339.83560181]
[102.55561829 354.80657959]
[109.41999817 369.06109619]
[100.90641785 381.28271484]
[99.97386932 396.25369263]
[99.04132843 411.22470093]
[110.49626160 421.86981201]
[112.37740326 437.39382935]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 98]
[6 97]
[7 96]
[9 94]
[10 93]
[13 90]
[14 89]
[15 88]
[20 80]
[21 79]
[22 78]
[24 77]
[25 76]
[26 75]
[28 42]
[29 41]
[30 40]
[31 39]
[52 65]
[53 64]
[54 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
