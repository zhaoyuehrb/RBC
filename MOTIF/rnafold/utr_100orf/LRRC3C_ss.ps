%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAGUCUUCCAAAAUCCAGCAAGAAAAAUCCUUCUCAGAAAGGUCUCCAAUGCGUAUGACCUCAUCUUCCUUCGUAUCCUACUGCACUCCAGGACUAUGCCAAUUUAUGGCCAUGCUCCCAACAGCAGGUCACCUCCUGCCCCUCCUGC\
) } def
/len { sequence length } bind def

/coor [
[76.42972565 209.58233643]
[81.17322540 223.92373657]
[81.68276978 239.02066040]
[77.91703796 253.64926147]
[70.18131256 266.62365723]
[59.10268402 276.89208984]
[45.57925415 283.62213135]
[30.70730209 286.26821899]
[15.69243336 284.61584473]
[1.75183535 278.79891968]
[-9.98439026 269.28906250]
[-18.56484032 256.85714722]
[-23.29393768 242.51097107]
[-23.78831291 227.41354370]
[-20.00788879 212.78874207]
[-12.25913048 199.82211304]
[-1.17019331 189.56481934]
[12.35999203 182.84835815]
[27.23459435 180.21722412]
[42.24779510 181.88468933]
[48.02406693 168.04147339]
[53.80033875 154.19825745]
[43.47313690 143.31942749]
[29.34833336 148.36817932]
[15.22352982 153.41694641]
[1.09872675 158.46569824]
[-5.43573666 172.85585022]
[-20.26082802 178.33236694]
[-34.58108521 171.64611816]
[-39.90055084 156.76396179]
[-33.06328583 142.51519775]
[-18.12571144 137.35336304]
[-3.95002961 144.34089661]
[10.17477322 139.29214478]
[24.29957581 134.24337769]
[38.42437744 129.19462585]
[33.59565735 97.48378754]
[43.75308228 67.90830994]
[31.67309189 59.01595688]
[19.59310341 50.12360764]
[1.27721131 48.53995895]
[-5.18594551 32.25415039]
[-17.44831276 23.61503601]
[-29.71068192 14.97591972]
[-41.97304916 6.33680344]
[-54.23541641 -2.30231285]
[-67.54414368 5.17033625]
[-82.77769470 6.11994934]
[-96.91143036 0.35798040]
[-107.13909149 -10.97152805]
[-111.42996216 -25.61909294]
[-108.93209076 -40.67642975]
[-100.14144135 -53.15389633]
[-86.80338287 -60.57407761]
[-71.56621552 -61.46369171]
[-57.45528030 -55.64611053]
[-47.27231598 -44.27641296]
[-43.03915787 -29.61206436]
[-45.59630203 -14.56468105]
[-33.33393478 -5.92556477]
[-21.07156563 2.71355128]
[-8.80919743 11.35266781]
[3.45317078 19.99178314]
[15.46321106 18.24071503]
[25.76187897 25.39308548]
[28.48545456 38.04362106]
[40.56544113 46.93597031]
[52.64543152 55.82831955]
[58.78641129 50.04969788]
[65.62618256 45.11800385]
[73.04878235 41.11685562]
[80.92834473 38.11409760]
[89.13127899 36.16064072]
[97.51850128 35.28960800]
[105.94779205 35.51576614]
[109.04611206 20.83924103]
[112.14443207 6.16271496]
[103.30950165 -6.94146442]
[106.41027832 -22.43858337]
[119.60713959 -31.13447762]
[135.07060242 -27.87002563]
[143.62649536 -14.58197021]
[140.19873047 0.84612155]
[126.82096100 9.26103687]
[123.72264099 23.93756294]
[120.62431335 38.61408615]
[127.90581512 41.56321335]
[134.77662659 45.37235641]
[141.13562012 49.98546219]
[146.88920593 55.33464050]
[151.95272827 61.34115982]
[156.25166321 67.91662598]
[159.72273254 74.96426392]
[174.13494873 70.80638123]
[188.54716492 66.64849091]
[199.66184998 55.38908005]
[214.03511047 59.29528427]
[228.44732666 55.13739777]
[242.85954285 50.97950745]
[257.27175903 46.82162094]
[271.63995361 42.51403809]
[285.96255493 38.05722046]
[300.28515625 33.60040665]
[308.98928833 20.12384987]
[324.96630859 18.66996002]
[335.96005249 30.35403633]
[333.53701782 46.21305466]
[319.55596924 54.08133316]
[304.74194336 47.92300415]
[290.41937256 52.37981796]
[276.09677124 56.83663559]
[270.60897827 61.85958099]
[261.42965698 61.23383713]
[247.01744080 65.39172363]
[232.60522461 69.54961395]
[218.19300842 73.70749664]
[208.10917664 84.66950989]
[192.70504761 81.06070709]
[178.29283142 85.21859741]
[163.88061523 89.37648010]
[164.74942017 98.94841766]
[164.19190979 108.54351807]
[162.22038269 117.95041656]
[158.87825012 126.96190643]
[154.23915100 135.37947083]
[148.40525818 143.01770020]
[158.38798523 154.21347046]
[168.37071228 165.40924072]
[178.35343933 176.60501099]
[188.33616638 187.80076599]
[204.12695312 188.45417786]
[214.76907349 200.13838196]
[213.94874573 215.92137146]
[202.15267944 226.43936157]
[186.37924194 225.45222473]
[175.98655701 213.54560852]
[177.14039612 197.78349304]
[167.15768433 186.58773804]
[157.17495728 175.39196777]
[147.19223022 164.19619751]
[137.20950317 153.00042725]
[128.61189270 158.63339233]
[119.16341400 162.87025452]
[109.09099579 165.58290100]
[98.64076233 166.68016052]
[88.07204437 166.11059570]
[77.65092468 163.86445618]
[67.64355469 159.97453308]
[61.86728668 173.81774902]
[56.09101486 187.66096497]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 150]
[21 149]
[22 148]
[23 36]
[24 35]
[25 34]
[26 33]
[38 68]
[39 67]
[40 66]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[75 86]
[76 85]
[77 84]
[93 120]
[94 119]
[95 118]
[97 116]
[98 115]
[99 114]
[100 113]
[101 111]
[102 110]
[103 109]
[126 141]
[127 140]
[128 139]
[129 138]
[130 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
