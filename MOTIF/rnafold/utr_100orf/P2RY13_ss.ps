%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCAUUUGUAGGCUGAACUAAUGACUGCCGCCAUAAGAAGACAGAGAGAACUGAGUAUCCUCCCAAAGGUGACACUGGAAGCAAUGAACACCACAGUGAUGCAAGGCUUCAACAGAUCUG\
) } def
/len { sequence length } bind def

/coor [
[86.89974976 458.84701538]
[74.60568237 449.37939453]
[70.25680542 434.48419189]
[75.52534485 419.88891602]
[88.38543701 411.20574951]
[88.77165985 396.21072388]
[89.15787506 381.21569824]
[89.54409790 366.22067261]
[89.93031311 351.22564697]
[90.31653595 336.23062134]
[90.31653595 321.23062134]
[89.93031311 306.23559570]
[89.54409790 291.24053955]
[89.15787506 276.24551392]
[88.77165985 261.25048828]
[76.97343445 256.38296509]
[67.88816833 247.35240173]
[62.91310883 235.49708557]
[62.83257675 222.59342957]
[67.69458008 210.58978271]
[76.79811096 201.31228638]
[88.79404449 196.18704224]
[89.18025970 181.19200134]
[81.77323151 168.26972961]
[89.86328888 154.67335510]
[90.24950409 139.67832947]
[90.63572693 124.68330383]
[91.02194214 109.68827820]
[87.18726349 124.18983459]
[78.74272919 136.58700562]
[66.65211487 145.46490479]
[52.29531479 149.81028748]
[37.31087494 149.12721252]
[23.40896606 143.49366760]
[12.17621136 133.55258179]
[4.89460278 120.43852997]
[2.39518976 105.64823151]
[4.96323013 90.86969757]
[12.30563354 77.78958893]
[23.58441162 67.90074921]
[37.51232147 62.33179092]
[52.49977112 61.71828842]
[66.83624268 66.13026428]
[78.88552094 75.06418610]
[87.27346039 87.50272369]
[81.98217773 73.46697235]
[76.69089508 59.43121719]
[70.66570282 52.40465927]
[71.44917297 44.96535873]
[66.52104187 30.79802132]
[51.62937546 26.43706512]
[42.17173767 14.13532925]
[41.78478241 -1.37692034]
[50.61730194 -14.13490677]
[65.27301025 -19.23292351]
[80.11649323 -14.71067905]
[89.44012451 -2.30706954]
[89.65877533 13.20846558]
[80.68837738 25.86988449]
[85.61651611 40.03722382]
[90.72664642 54.13993835]
[96.01792908 68.17568970]
[101.30921173 82.21144104]
[108.39287567 84.67550659]
[108.70188904 69.67869568]
[123.06020355 65.33833313]
[131.62507629 77.65267181]
[122.56021881 89.60364532]
[129.64389038 92.06771088]
[142.50360107 84.34582520]
[155.36332703 76.62393188]
[168.22303772 68.90203857]
[176.70840454 52.62159729]
[194.20483398 52.86970901]
[206.86148071 44.81926727]
[214.35314941 30.88422203]
[229.24468994 30.58208847]
[241.90132141 22.53164482]
[249.00010681 7.74857283]
[265.37030029 6.77473688]
[274.17166138 20.61193657]
[266.35009766 35.02564621]
[249.95175171 35.18827820]
[237.29512024 43.23871994]
[230.70874023 56.59794617]
[214.91191101 57.47589874]
[202.25527954 65.52634430]
[199.28512573 77.32915497]
[188.70426941 84.12112427]
[175.94493103 81.76175690]
[163.08522034 89.48365021]
[150.22549438 97.20554352]
[137.36578369 104.92743683]
[120.64674377 113.57904053]
[106.01697540 110.07449341]
[105.63075256 125.06952667]
[105.24453735 140.06454468]
[104.85831451 155.05957031]
[112.23772430 169.05439758]
[104.17529297 181.57823181]
[103.78907013 196.57325745]
[118.92137146 205.30686951]
[127.56531525 220.38897705]
[127.45291138 237.68395996]
[118.70336914 252.50051880]
[103.76668549 260.86428833]
[104.15290070 275.85931396]
[104.53912354 290.85433960]
[104.92533875 305.84936523]
[105.31156158 320.84439087]
[108.52393341 326.84283447]
[108.18418121 332.66635132]
[105.31156158 336.61682129]
[104.92533875 351.61184692]
[104.53912354 366.60687256]
[104.15290070 381.60189819]
[103.76668549 396.59692383]
[103.38047028 411.59194946]
[115.77651215 420.92565918]
[120.28672028 435.77279663]
[115.17681885 450.42434692]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 118]
[6 117]
[7 116]
[8 115]
[9 114]
[10 113]
[11 110]
[12 109]
[13 108]
[14 107]
[15 106]
[22 101]
[23 100]
[25 98]
[26 97]
[27 96]
[28 95]
[45 63]
[46 62]
[47 61]
[49 60]
[50 59]
[69 93]
[70 92]
[71 91]
[72 90]
[74 87]
[75 86]
[77 84]
[78 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
