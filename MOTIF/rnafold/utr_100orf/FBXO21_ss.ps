%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:55:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCACGCGCGCGCGCGGCGGCCCCAGGUACGCGGACAAGAUGGCGGCGGCAGCAGUCGACAGCGCGAUGGAGGUGGUGCCGGCGCUGGCGGAGGAGGCCGCGCCGGAGGUAGCGGGCCUCAGCUGCCUCGUCAACCUGC\
) } def
/len { sequence length } bind def

/coor [
[12.48320389 279.75610352]
[5.97494745 293.27066040]
[-0.53330851 306.78518677]
[-1.45430708 315.95803833]
[-7.34221983 320.52743530]
[-14.15207672 333.89254761]
[-20.96193504 347.25762939]
[-27.77179146 360.62274170]
[-26.37365150 376.96218872]
[-39.97789383 386.11950684]
[-54.58964157 378.67443848]
[-55.17758179 362.28582764]
[-41.13689041 353.81286621]
[-34.32703400 340.44778442]
[-27.51717567 327.08267212]
[-20.70731735 313.71759033]
[-14.04784107 300.27691650]
[-7.53958559 286.76239014]
[-1.03132939 273.24786377]
[-7.08340979 263.46313477]
[-7.62850094 251.85040283]
[-2.41269898 241.32603455]
[7.35638714 234.58995056]
[19.28717041 233.43321228]
[26.39520073 220.22427368]
[33.50323105 207.01533508]
[40.61125946 193.80641174]
[47.71929169 180.59747314]
[43.20298767 166.45043945]
[50.22337723 152.95344543]
[65.09271240 148.31225586]
[72.20073700 135.10331726]
[79.30876923 121.89438629]
[86.41680145 108.68545532]
[74.76876831 118.13655853]
[59.77009201 118.33618164]
[47.87465286 109.19843292]
[44.20100403 94.65524292]
[50.32990646 80.96449280]
[63.62411118 74.01725769]
[78.36318207 76.80290985]
[88.20513916 88.12326050]
[84.21458435 73.66381836]
[80.22403717 59.20437241]
[76.23348236 44.74493027]
[65.10366058 33.50048447]
[69.17620850 19.17346001]
[65.18565369 4.71401691]
[61.19509888 -9.74542618]
[57.20454788 -24.20486832]
[53.21399307 -38.66431046]
[42.08417130 -49.90876007]
[46.15671539 -64.23578644]
[42.16616440 -78.69522858]
[36.82457352 -86.20899200]
[38.25219345 -93.52397919]
[34.58708572 -108.06932068]
[21.30248070 -116.20301819]
[17.79274559 -131.00627136]
[25.62885094 -143.62098694]
[21.96374321 -158.16633606]
[8.26972771 -166.05616760]
[4.24628973 -181.33973694]
[12.28046322 -194.94956970]
[27.60571671 -198.81120300]
[41.12984848 -190.63357544]
[44.82923126 -175.26835632]
[36.50908661 -161.83143616]
[40.17419434 -147.28610229]
[53.05234909 -139.89091492]
[56.97649384 -125.19207764]
[49.13243103 -111.73442841]
[52.79753494 -97.18908691]
[56.62560654 -82.68577576]
[60.61616135 -68.22633362]
[71.46055603 -58.01612473]
[67.67343903 -42.65486526]
[71.66398621 -28.19542122]
[75.65454102 -13.73597908]
[79.64509583 0.72346425]
[83.63565063 15.18290710]
[94.48004150 25.39311790]
[90.69292450 40.75437927]
[94.68347931 55.21382141]
[98.67403412 69.67326355]
[102.66458130 84.13270569]
[114.17925262 93.74584198]
[129.11886597 95.09043121]
[144.05848694 96.43502045]
[158.99809265 97.77960968]
[173.93771362 99.12419891]
[186.00259399 89.27146912]
[201.13433838 90.84789276]
[210.45306396 102.41063690]
[225.39266968 103.75522614]
[240.33229065 105.09982300]
[255.27189636 106.44441223]
[270.21151733 107.78900146]
[285.15112305 109.13359070]
[294.06268311 106.77275085]
[300.40960693 110.67964172]
[315.31527710 112.35910797]
[330.22094727 114.03857422]
[340.59008789 102.49470520]
[355.77120972 99.28326416]
[369.92684937 105.63911438]
[377.61392212 119.11830902]
[375.87655640 134.53781128]
[365.38281250 145.96852112]
[350.16775513 149.01509094]
[336.08187866 142.50604248]
[328.54150391 128.94425964]
[313.63580322 127.26479340]
[298.73013306 125.58532715]
[283.80654907 124.07320404]
[268.86691284 122.72861481]
[253.92730713 121.38402557]
[238.98770142 120.03943634]
[224.04808044 118.69484711]
[209.10847473 117.35025787]
[197.87489319 127.06326294]
[182.70484924 125.91247559]
[172.59312439 114.06381226]
[157.65350342 112.71922302]
[142.71389771 111.37463379]
[127.77427673 110.03004456]
[112.83466339 108.68545532]
[99.62573242 115.79348755]
[92.51770020 129.00241089]
[85.40967560 142.21134949]
[78.30164337 155.42028809]
[82.61969757 170.38665771]
[75.22297668 183.68113708]
[60.92822266 187.70550537]
[53.82019424 200.91444397]
[46.71216583 214.12336731]
[39.60413361 227.33230591]
[32.49610519 240.54124451]
[38.66301727 258.38598633]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[3 17]
[5 16]
[6 15]
[7 14]
[8 13]
[24 138]
[25 137]
[26 136]
[27 135]
[28 134]
[31 131]
[32 130]
[33 129]
[34 128]
[42 86]
[43 85]
[44 84]
[45 83]
[47 81]
[48 80]
[49 79]
[50 78]
[51 77]
[53 75]
[54 74]
[56 73]
[57 72]
[60 69]
[61 68]
[87 127]
[88 126]
[89 125]
[90 124]
[91 123]
[94 120]
[95 119]
[96 118]
[97 117]
[98 116]
[99 115]
[101 114]
[102 113]
[103 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
