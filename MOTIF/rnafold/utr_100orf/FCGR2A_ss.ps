%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:35:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUUUCUAAGCUUGUCUCUUAAAACCCACUGGACGUUGGCACAGUGCUGGGAUGACUAUGGAGACCCAAAUGUCUCAGAAUGUAUGUCCCAGAAACCUGUGGCUGCUUCAACCAUUGACAGUUUUGCUGCUGCUGGCUUCUGCAGACAGUC\
) } def
/len { sequence length } bind def

/coor [
[155.09658813 403.72070312]
[140.12394714 404.62646484]
[126.33380127 398.72460938]
[116.65219879 387.26745605]
[113.13341522 372.68603516]
[116.52410126 358.07427979]
[126.10479736 346.53259277]
[139.84263611 340.50997925]
[154.82263184 341.28430176]
[167.86613464 348.69113159]
[162.48109436 334.69110107]
[157.09605408 320.69104004]
[151.71101379 306.69100952]
[146.32597351 292.69094849]
[140.95697021 287.54608154]
[140.97706604 278.35000610]
[135.87873840 264.24301147]
[130.78039551 250.13604736]
[120.02159882 251.16329956]
[109.28109741 249.88658142]
[99.04704285 246.36035156]
[89.78534698 240.74134827]
[81.91844940 233.28173828]
[75.80603790 224.31765747]
[71.72863007 214.25419617]
[69.87468719 203.54699707]
[70.33191681 192.68171692]
[73.08309937 182.15188599]
[78.00674438 172.43658447]
[84.88243866 163.97862244]
[93.40070343 157.16433716]
[103.17693329 152.30593872]
[100.13812256 137.61698914]
[97.09931183 122.92802429]
[94.06049347 108.23905945]
[89.44780731 101.56489563]
[91.11273193 93.21959686]
[88.37418365 78.47170258]
[74.52489471 71.72608948]
[67.38663483 58.27623367]
[69.51174927 43.37831879]
[79.87779236 32.71608353]
[77.13924408 17.96819115]
[74.40069580 3.22029710]
[71.66214752 -11.52759647]
[68.92359924 -26.27548981]
[52.92782974 -36.33861923]
[49.36592102 -54.57417297]
[60.02838135 -69.40076447]
[56.69056702 -84.02468872]
[53.35275269 -98.64860535]
[50.01493835 -113.27252197]
[46.67712402 -127.89643860]
[43.33931351 -142.52035522]
[40.00149918 -157.14427185]
[27.16777420 -170.31056213]
[32.91777802 -186.86363220]
[29.28235245 -201.41641235]
[13.36516953 -205.78579712]
[1.87652004 -217.50650024]
[-2.12773013 -233.32623291]
[2.34956336 -248.92118835]
[14.00058651 -260.07785034]
[10.06906128 -274.55346680]
[6.13753605 -289.02905273]
[2.20601106 -303.50466919]
[-1.72551429 -317.98028564]
[-15.56207085 -325.61737061]
[-19.86542130 -340.82449341]
[-12.08246326 -354.57952881]
[3.16931152 -358.72186279]
[16.84129715 -350.79391479]
[20.82214355 -335.49920654]
[12.75008965 -321.91180420]
[16.68161583 -307.43618774]
[20.61314011 -292.96060181]
[24.54466629 -278.48498535]
[28.47619057 -264.00936890]
[41.91161346 -261.38558960]
[52.95111084 -253.17927551]
[59.39720154 -240.95266724]
[59.93606567 -227.07504272]
[54.40492630 -214.26370239]
[43.83514023 -205.05183411]
[47.47056580 -190.49905396]
[57.70341110 -183.97763062]
[60.82601929 -171.83689880]
[54.62541580 -160.48208618]
[57.96323013 -145.85816956]
[61.30104446 -131.23425293]
[64.63885498 -116.61033630]
[67.97666931 -101.98641968]
[71.31448364 -87.36249542]
[74.65229797 -72.73857880]
[85.46145630 -68.87409210]
[93.12129211 -60.16350555]
[95.62355804 -48.71403503]
[92.22695160 -37.37173080]
[83.67149353 -29.01403618]
[86.41004181 -14.26614380]
[89.14859009 0.48174971]
[91.88713837 15.22964287]
[94.62568665 29.97753716]
[108.12845612 36.20755386]
[115.46029663 49.34939957]
[113.62643433 64.46529388]
[103.12207794 75.73316193]
[105.86062622 90.48104858]
[108.74945831 105.20024872]
[111.78826904 119.88920593]
[114.82708740 134.57817078]
[117.86589813 149.26713562]
[137.32873535 152.00810242]
[154.29934692 161.86328125]
[166.28916931 177.36116028]
[171.54995728 196.20471191]
[169.32867432 215.61187744]
[159.97517395 232.72630310]
[144.88737488 245.03770447]
[149.98571777 259.14468384]
[155.08404541 273.25167847]
[160.32601929 287.30590820]
[165.71105957 301.30596924]
[171.09609985 315.30599976]
[176.48114014 329.30606079]
[181.86618042 343.30609131]
[190.43559265 350.64001465]
[190.65879822 360.64996338]
[198.76841736 373.26876831]
[206.87802124 385.88757324]
[214.98764038 398.50637817]
[223.22554016 411.04180908]
[231.59086609 423.49258423]
[239.95619202 435.94332886]
[248.32153320 448.39407349]
[263.83248901 448.82913208]
[276.10485840 458.32489014]
[280.41958618 473.23001099]
[275.11764526 487.81317139]
[262.23770142 496.46685791]
[246.73234558 495.86355591]
[234.56373596 486.23526001]
[230.41093445 471.28421021]
[235.87077332 456.75939941]
[227.50544739 444.30865479]
[219.14010620 431.85791016]
[210.77478027 419.40713501]
[204.39555359 415.58599854]
[202.36883545 406.61599731]
[194.25921631 393.99719238]
[186.14961243 381.37838745]
[178.03999329 368.75958252]
[176.30461121 383.65887451]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 126]
[11 125]
[12 124]
[13 123]
[14 122]
[16 121]
[17 120]
[18 119]
[32 112]
[33 111]
[34 110]
[35 109]
[37 108]
[38 107]
[42 103]
[43 102]
[44 101]
[45 100]
[46 99]
[49 94]
[50 93]
[51 92]
[52 91]
[53 90]
[54 89]
[55 88]
[57 85]
[58 84]
[63 78]
[64 77]
[65 76]
[66 75]
[67 74]
[128 152]
[129 151]
[130 150]
[131 149]
[132 147]
[133 146]
[134 145]
[135 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
