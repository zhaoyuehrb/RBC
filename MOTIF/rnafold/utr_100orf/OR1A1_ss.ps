%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGGGAAAAUAACCAGUCCUCUACACUGGAAUUCAUCCUCCUGGGAGUUACUGGUCAGCAGGAACAGGAAGAUUUCUUCUACAUCCUCUUCUUGUUCA\
) } def
/len { sequence length } bind def

/coor [
[121.07813263 163.32118225]
[112.39564514 175.55287170]
[100.13574982 184.19549561]
[85.69766998 188.26266479]
[70.72922516 187.29020691]
[56.93876266 181.38909912]
[45.90018082 171.23283386]
[38.87331772 157.98054504]
[36.66014481 143.14471436]
[39.51325226 128.41854858]
[47.10701752 115.48275757]
[58.57476044 105.81369019]
[72.60767365 100.51487732]
[87.60667419 100.19144440]
[75.55422211 91.26181030]
[63.50176620 82.33217621]
[51.44931030 73.40254211]
[39.39685822 64.47290802]
[27.34440231 55.54327774]
[9.08171177 53.95546722]
[2.56845665 37.74192047]
[-9.75587749 29.19143867]
[-22.08021355 20.64095497]
[-34.40454865 12.09047031]
[-47.69026184 19.52358437]
[-62.82411194 20.44744682]
[-76.80113220 14.73227787]
[-86.86932373 3.56122470]
[-91.07151794 -10.81413746]
[-88.62563324 -25.52750206]
[-100.94996643 -34.07798767]
[-113.27429962 -42.62847137]
[-129.25370789 -41.20081329]
[-140.22822571 -52.90292358]
[-137.77915955 -68.75794220]
[-123.78520203 -76.60325623]
[-108.98133850 -70.42060852]
[-104.72381592 -54.95280457]
[-92.39948273 -46.40232086]
[-80.07514954 -37.85183716]
[-67.14946747 -45.29444504]
[-52.21273422 -46.39143753]
[-38.22364044 -40.87181473]
[-27.97650337 -29.78053856]
[-23.54312706 -15.28115463]
[-25.85406303 -0.23386414]
[-13.52972889 8.31661987]
[-1.20539403 16.86710358]
[11.11894035 25.41758728]
[23.18851089 23.58907890]
[33.55931473 30.76340675]
[36.27403641 43.49082565]
[48.32648849 52.42045593]
[60.37894440 61.35009003]
[72.43139648 70.27972412]
[84.48385620 79.20935822]
[96.53630829 88.13899231]
[104.79552460 88.65913391]
[110.84577179 94.26267242]
[125.62680054 96.81632233]
[140.40783691 99.36997223]
[155.18885803 101.92362976]
[169.96989441 104.47727966]
[184.75091553 107.03093719]
[199.53195190 109.58458710]
[214.31298828 112.13824463]
[229.22892761 106.86328125]
[240.45318604 116.65436554]
[255.23420715 119.20802307]
[270.01522827 121.76167297]
[284.79626465 124.31533051]
[299.68032837 126.17681122]
[314.63497925 127.34207153]
[329.58966064 128.50732422]
[342.66638184 119.21331787]
[358.04556274 123.78071594]
[363.92956543 138.70579529]
[355.80468750 152.53932190]
[339.90368652 154.66938782]
[328.42440796 143.46199036]
[313.46972656 142.29673767]
[298.51504517 141.13148499]
[295.51992798 143.29580688]
[291.27258301 144.01309204]
[286.51611328 142.68586731]
[282.24261475 139.09635925]
[267.46157837 136.54270935]
[252.68055725 133.98905945]
[237.89952087 131.43539429]
[224.04081726 136.89302063]
[211.75932312 126.91927338]
[196.97830200 124.36561584]
[182.19726562 121.81196594]
[167.41624451 119.25831604]
[152.63520813 116.70465851]
[137.85417175 114.15100861]
[123.07315063 111.59735107]
[108.29211426 109.04370117]
[118.41239166 120.11528778]
[124.26856995 133.92489624]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 57]
[15 56]
[16 55]
[17 54]
[18 53]
[19 52]
[21 49]
[22 48]
[23 47]
[24 46]
[30 40]
[31 39]
[32 38]
[59 98]
[60 97]
[61 96]
[62 95]
[63 94]
[64 93]
[65 92]
[66 91]
[68 89]
[69 88]
[70 87]
[71 86]
[72 82]
[73 81]
[74 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
