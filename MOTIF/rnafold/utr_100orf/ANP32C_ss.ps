%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:27:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGAUGGGCAGACGGAUUCAUUCAGAGCUGCGGAACAGGGCGCCCUCUGAUGUGAAAGAACUUGCCCUGGACAACAGUCGGUCGAAUGAAGGCAAAC\
) } def
/len { sequence length } bind def

/coor [
[74.46943665 131.00132751]
[68.88110352 125.38711548]
[64.50343323 118.78524017]
[61.50674057 111.45252991]
[60.00761032 103.67426300]
[60.06436539 95.75305176]
[61.67479706 87.99707031]
[64.77625275 80.70805359]
[69.24807739 74.16957855]
[59.76602936 62.54672623]
[50.28398132 50.92387009]
[40.80193329 39.30101395]
[31.31988907 27.67815590]
[21.83784294 16.05529976]
[7.01554680 19.52818298]
[-7.78442287 16.23457146]
[-19.63821793 6.88001442]
[-26.22788620 -6.63802052]
[-26.29455185 -21.61483574]
[-19.87855339 -35.07962036]
[-29.36059952 -46.70247650]
[-38.84264755 -58.32533264]
[-48.32469177 -69.94818878]
[-57.80673981 -81.57104492]
[-67.46839142 -93.04503632]
[-77.30732727 -104.36737823]
[-87.14625549 -115.68972015]
[-96.98518372 -127.01206970]
[-106.82411194 -138.33441162]
[-116.66304016 -149.65675354]
[-129.56288147 -151.37455750]
[-137.52117920 -161.15669250]
[-136.63580322 -173.33183289]
[-146.11785889 -184.95469666]
[-155.59989929 -196.57754517]
[-171.08453369 -195.57479858]
[-184.18325806 -203.89364624]
[-189.85932922 -218.33531189]
[-185.93020630 -233.34667969]
[-173.90667725 -243.15559387]
[-158.41207886 -243.99031067]
[-145.40437317 -235.52986145]
[-139.88528442 -221.02746582]
[-143.97703552 -206.05960083]
[-134.49499512 -194.43673706]
[-125.01294708 -182.81387329]
[-108.34243011 -177.57983398]
[-105.34069824 -159.49568176]
[-95.50177002 -148.17333984]
[-85.66284180 -136.85099792]
[-75.82390594 -125.52865601]
[-65.98497772 -114.20630646]
[-56.14604950 -102.88396454]
[-49.26139832 -99.84635925]
[-46.18388367 -91.05309296]
[-36.70183563 -79.43023682]
[-27.21978951 -67.80738068]
[-17.73774338 -56.18452454]
[-8.25569630 -44.56166840]
[6.22319984 -48.14315414]
[20.88156319 -45.07039642]
[32.80099487 -35.90043640]
[39.58467865 -22.40963173]
[39.83926392 -7.24974489]
[33.46069717 6.57325268]
[42.94274521 18.19610977]
[52.42479324 29.81896591]
[61.90683746 41.44182205]
[71.38888550 53.06467819]
[80.87093353 64.68753815]
[106.64801025 60.39324188]
[129.61032104 72.86846924]
[140.03561401 96.83119202]
[154.94680786 98.46097565]
[169.85800171 100.09075928]
[184.64070129 92.99119568]
[198.02595520 102.46575165]
[196.24415588 118.76781464]
[181.12826538 125.12722015]
[168.22822571 115.00196075]
[153.31703186 113.37217712]
[138.40582275 111.74239349]
[135.28904724 119.17223358]
[130.75192261 125.83042145]
[140.23397827 137.45327759]
[149.71601868 149.07612610]
[165.35356140 149.11137390]
[177.27658081 159.22946167]
[179.85537720 174.65295410]
[171.87234497 188.09931946]
[157.09680176 193.21963501]
[142.50532532 187.59620667]
[134.98756409 173.88427734]
[138.09315491 158.55818176]
[128.61111450 146.93531799]
[119.12906647 135.31246948]
[111.82580566 138.38021851]
[104.06246948 139.95481873]
[96.14108276 139.97499084]
[88.36981964 138.43995667]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 70]
[10 69]
[11 68]
[12 67]
[13 66]
[14 65]
[20 59]
[21 58]
[22 57]
[23 56]
[24 55]
[25 53]
[26 52]
[27 51]
[28 50]
[29 49]
[30 48]
[33 46]
[34 45]
[35 44]
[73 82]
[74 81]
[75 80]
[84 96]
[85 95]
[86 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
