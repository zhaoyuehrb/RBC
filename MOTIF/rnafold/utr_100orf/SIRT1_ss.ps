%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGAGCGGGAGCAGAGGAGGCGAGGGAGGAGGGCCAGAGAGGCAGUUGGAAGAUGGCGGACGAGGCGGCCCUCGCCCUUCAGCCCGGCGGCUCCCCCUCGGCGGCGGGGGCCGACAGGGAGGCCGCGUCGUCCCCCGCCGGGGAGCCGCUCC\
) } def
/len { sequence length } bind def

/coor [
[139.31382751 171.18759155]
[125.85552216 177.81130981]
[110.85783386 177.54780579]
[97.64051056 170.45539856]
[89.12920380 158.10397339]
[87.20789337 143.22752380]
[92.30185699 129.11895752]
[103.28354645 118.90120697]
[117.72004700 114.83604431]
[103.72000122 109.45100403]
[95.61153412 109.72311401]
[89.49114227 103.81068420]
[75.60385895 98.14118195]
[59.90295029 100.08851624]
[51.04423904 88.11469269]
[37.15695190 82.44519043]
[23.26966476 76.77568817]
[9.38237667 71.10618591]
[0.19312845 70.75118256]
[-4.72846174 65.17679596]
[-18.49720955 59.22519684]
[-32.26596069 53.27359390]
[-46.03470612 47.32199478]
[-59.80345535 41.37039185]
[-73.57220459 35.41879272]
[-87.34095764 29.46718979]
[-101.10970306 23.51558876]
[-108.81558990 29.63077164]
[-118.17396545 32.46904373]
[-127.86254883 31.67404175]
[-136.52871704 27.39964867]
[-142.97839355 20.28248978]
[-146.34046936 11.34746647]
[-146.18437195 1.86028779]
[-159.42219543 -5.19379091]
[-172.66001892 -12.24786949]
[-184.41989136 -2.65719533]
[-198.91664124 1.68872535]
[-213.93226624 0.15747227]
[-227.18177795 -6.98663616]
[-236.66091919 -18.62754059]
[-240.94937134 -32.97168732]
[-239.42349243 -47.82432556]
[-252.66131592 -54.87840652]
[-268.47891235 -54.53990555]
[-276.07235718 -67.35351562]
[-289.31018066 -74.40759277]
[-302.54800415 -81.46167755]
[-318.91036987 -80.36374664]
[-327.81637573 -94.13381195]
[-320.10433960 -108.60641479]
[-303.70770264 -108.89337921]
[-295.49392700 -94.69950104]
[-282.25610352 -87.64541626]
[-269.01828003 -80.59133911]
[-254.14755249 -81.43439484]
[-245.60723877 -68.11622620]
[-232.36941528 -61.06214905]
[-220.89195251 -70.61185455]
[-206.59396362 -75.05178833]
[-191.64501953 -73.67562103]
[-178.32594299 -66.66205597]
[-168.68089294 -55.05229950]
[-164.20353699 -40.59558868]
[-165.60592651 -25.48569298]
[-152.36810303 -18.43161392]
[-139.13027954 -11.37753582]
[-120.23131561 -19.02765465]
[-101.51407623 -10.23623562]
[-95.15810394 9.74684048]
[-81.38935089 15.69844151]
[-67.62060547 21.65004349]
[-53.85185623 27.60164452]
[-40.08310699 33.55324554]
[-26.31435776 39.50484467]
[-12.54560947 45.45644760]
[1.22313964 51.40805054]
[15.05187702 57.21890259]
[28.93916512 62.88840103]
[42.82645416 68.55789948]
[56.71374130 74.22740173]
[71.42133331 71.87454987]
[81.27336121 84.25389099]
[95.16064453 89.92339325]
[109.10504150 95.45095062]
[123.10508728 100.83599091]
[137.62004089 104.61966705]
[152.46736145 106.75438690]
[167.31468201 108.88911438]
[182.16200256 111.02383423]
[197.00932312 113.15855408]
[211.85664368 115.29328156]
[226.70396423 117.42800140]
[241.55128479 119.56272125]
[256.39862061 121.69744873]
[271.24594116 123.83216858]
[286.09326172 125.96688843]
[278.33401489 113.12966919]
[281.74121094 98.52175903]
[294.37918091 90.44205475]
[309.06817627 93.48071289]
[317.46322632 105.91144562]
[314.79504395 120.67222595]
[302.57901001 129.37742615]
[317.05462646 133.30894470]
[331.53021240 137.24047852]
[346.00582886 141.17199707]
[360.48144531 145.10351562]
[374.95703125 149.03504944]
[389.43264771 152.96656799]
[403.90823364 156.89810181]
[419.25393677 153.04833984]
[429.50830078 163.85098267]
[443.98391724 167.78251648]
[458.45950317 171.71403503]
[472.93511963 175.64556885]
[490.58999634 170.51126099]
[502.49435425 183.37019348]
[517.04711914 187.00563049]
[532.65557861 181.97482300]
[544.63342285 193.17587280]
[540.65887451 209.08609009]
[524.82061768 213.33840942]
[513.41174316 201.55841064]
[498.85891724 197.92298889]
[488.29141235 203.88685608]
[476.10848999 200.93318176]
[469.00357056 190.12117004]
[454.52798462 186.18963623]
[440.05236816 182.25811768]
[425.57678223 178.32658386]
[411.26647949 182.45755005]
[399.97671509 171.37370300]
[385.50112915 167.44218445]
[371.02551270 163.51065063]
[356.54989624 159.57913208]
[342.07431030 155.64759827]
[327.59869385 151.71607971]
[313.12310791 147.78454590]
[298.64749146 143.85302734]
[283.95852661 140.81420898]
[269.11120605 138.67948914]
[254.26388550 136.54476929]
[239.41656494 134.41004944]
[224.56924438 132.27532959]
[209.72192383 130.14059448]
[194.87460327 128.00587463]
[180.02728271 125.87115479]
[165.17996216 123.73643494]
[150.33264160 121.60170746]
[135.48532104 119.46698761]
[146.10128784 130.06420898]
[150.69648743 144.34300232]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 86]
[10 85]
[12 84]
[13 83]
[15 81]
[16 80]
[17 79]
[18 78]
[20 77]
[21 76]
[22 75]
[23 74]
[24 73]
[25 72]
[26 71]
[27 70]
[34 67]
[35 66]
[36 65]
[43 58]
[44 57]
[46 55]
[47 54]
[48 53]
[87 151]
[88 150]
[89 149]
[90 148]
[91 147]
[92 146]
[93 145]
[94 144]
[95 143]
[96 142]
[97 141]
[104 140]
[105 139]
[106 138]
[107 137]
[108 136]
[109 135]
[110 134]
[111 133]
[113 131]
[114 130]
[115 129]
[116 128]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
