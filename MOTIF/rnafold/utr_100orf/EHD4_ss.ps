%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:24:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCGAGCCGGGGAGAGUCGAACCCGGAGCAGGGUCCCAUCCGAGCGUGGACUGGCGGCAGGAUGUUCAGCUGGAUGGGGCGGCAGGCGGGCGGGCGCGAACGCGCUGGCGGCGCGGACGCGGUGCAGACGGUGACGGGCGGGCUGCGCUCGCUCUACCUGC\
) } def
/len { sequence length } bind def

/coor [
[74.67609406 173.29261780]
[84.68772125 184.46253967]
[87.45551300 199.20497131]
[82.17699432 213.24552917]
[70.38259888 222.51335144]
[55.49195862 224.32131958]
[41.82241440 218.14527893]
[33.33726883 205.77587891]
[32.49615097 190.80183411]
[22.73259926 202.18923950]
[12.96904755 213.57664490]
[3.20549512 224.96405029]
[-6.55805731 236.35145569]
[-1.38328028 250.81234741]
[-4.14802265 265.92034912]
[-14.10858154 277.61151123]
[-28.58561897 282.74090576]
[-43.68488312 279.92883301]
[-55.34474564 269.93167114]
[-60.42876434 255.43862915]
[-57.56936646 240.34826660]
[-47.53570938 228.71978760]
[-33.02680206 223.68122864]
[-17.94546509 226.58790588]
[-8.18191242 215.20050049]
[1.58164024 203.81309509]
[11.34519291 192.42568970]
[21.10874557 181.03828430]
[22.84570122 170.68438721]
[33.04661179 164.73890686]
[40.95745850 151.99455261]
[48.86830902 139.25019836]
[56.77915573 126.50585175]
[64.69000244 113.76150513]
[62.11672974 98.98387146]
[50.36370850 89.66365814]
[38.61068344 80.34343719]
[26.85766411 71.02321625]
[15.10464191 61.70299911]
[3.35162020 52.38278198]
[-8.40140152 43.06256104]
[-20.15442276 33.74234390]
[-31.90744591 24.42212296]
[-40.61966705 21.52221298]
[-43.79407883 14.80907917]
[-55.36641693 5.26544237]
[-66.93875122 -4.27819443]
[-75.59382629 -7.34445524]
[-78.63906860 -14.11716175]
[-90.02647400 -23.88071442]
[-101.41387939 -33.64426804]
[-112.80129242 -43.40781784]
[-124.18869781 -53.17137146]
[-138.14636230 -46.99511337]
[-153.40129089 -47.49508286]
[-166.92460632 -54.57201767]
[-176.03121948 -66.82077789]
[-178.91304016 -81.80937195]
[-174.99784851 -96.56179810]
[-165.06303406 -108.14895630]
[-151.08114624 -114.27020264]
[-135.82830811 -113.71015930]
[-122.33297729 -106.58002472]
[-113.27466583 -94.29550171]
[-110.45189667 -79.29567719]
[-114.42514801 -64.55877686]
[-103.03773499 -54.79522705]
[-91.65032959 -45.03167343]
[-80.26292419 -35.26812363]
[-68.87551880 -25.50457001]
[-57.39511490 -15.85053158]
[-45.82277679 -6.30689526]
[-34.25044250 3.23674130]
[-22.58722687 12.66910172]
[-10.83420467 21.98932076]
[0.91881734 31.30953979]
[12.67183876 40.62975693]
[24.42486000 49.94997787]
[36.17788315 59.27019501]
[47.93090439 68.59041595]
[59.68392563 77.91063690]
[71.43695068 87.23085022]
[80.99510956 76.50437927]
[93.92713165 71.48752594]
[107.23127747 72.86256409]
[118.03048706 79.88026428]
[124.19454193 90.62040710]
[139.15052795 89.47216797]
[154.10652161 88.32392883]
[169.06250000 87.17568970]
[184.01849365 86.02745056]
[198.97447205 84.87921143]
[213.93046570 83.73097229]
[228.88644409 82.58273315]
[243.83074951 81.29129791]
[258.76199341 79.85678864]
[273.69323730 78.42228699]
[286.69021606 69.40068054]
[300.09912109 75.88536072]
[315.03036499 74.45085144]
[325.07055664 62.54153061]
[340.23339844 61.29943466]
[351.52526855 70.94463348]
[366.45651245 69.51012421]
[381.37332153 67.93267059]
[396.27435303 66.21241760]
[411.17538452 64.49217224]
[426.07641602 62.77191925]
[440.97744751 61.05166626]
[455.82290649 58.90401840]
[470.60052490 56.33074188]
[485.37817383 53.75746918]
[497.64639282 43.76742935]
[511.51232910 49.20663834]
[526.28997803 46.63336563]
[541.06762695 44.06008911]
[553.29870605 33.13617325]
[568.78790283 38.52296829]
[571.60119629 54.67900085]
[558.84454346 64.98432922]
[543.64086914 58.83771515]
[528.86322021 61.41099167]
[514.08563232 63.98426819]
[502.87435913 73.79024506]
[487.95144653 68.53509521]
[473.17382812 71.10836792]
[458.39617920 73.68164062]
[456.06588745 76.38619995]
[452.28991699 78.07441711]
[447.57080078 78.07027435]
[442.69769287 75.95269775]
[427.79666138 77.67295074]
[412.89562988 79.39320374]
[397.99459839 81.11344910]
[383.09356689 82.83370209]
[376.78005981 86.74296570]
[367.89102173 84.44137573]
[352.95977783 85.87588501]
[343.71081543 97.49452209]
[328.58883667 99.16201782]
[316.46487427 89.38210297]
[301.53363037 90.81661224]
[289.60461426 99.73560333]
[275.12774658 93.35353088]
[260.19650269 94.78804016]
[245.26525879 96.22254944]
[238.87800598 100.01016235]
[230.03468323 97.53871918]
[215.07870483 98.68695831]
[200.12271118 99.83519745]
[185.16673279 100.98343658]
[170.21073914 102.13167572]
[155.25476074 103.27991486]
[140.29876709 104.42815399]
[125.34278107 105.57639313]
[119.84113312 118.72766876]
[107.75218964 127.54823303]
[92.13661957 128.90219116]
[77.43435669 121.67234802]
[69.52350616 134.41670227]
[61.61265945 147.16105652]
[53.70180893 159.90539551]
[45.79096222 172.64974976]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[30 163]
[31 162]
[32 161]
[33 160]
[34 159]
[35 82]
[36 81]
[37 80]
[38 79]
[39 78]
[40 77]
[41 76]
[42 75]
[43 74]
[45 73]
[46 72]
[47 71]
[49 70]
[50 69]
[51 68]
[52 67]
[53 66]
[87 155]
[88 154]
[89 153]
[90 152]
[91 151]
[92 150]
[93 149]
[94 148]
[95 146]
[96 145]
[97 144]
[99 142]
[100 141]
[103 138]
[104 137]
[105 135]
[106 134]
[107 133]
[108 132]
[109 131]
[110 127]
[111 126]
[112 125]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
