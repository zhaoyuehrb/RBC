%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:42:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGUGUUGGGAAGCAGCCGUCCCCGUCCAGAGUCCUCUGUGGUCCCUGCUGCCACCAUGGCCACUCACCGCCUCGUGAUGGUCCGGCACGGCGAGAGCACAUGGAACCAGGAGAACCGUUUCUGUGGCUGGUUCGAUGCAGAGCUGAGUGAAAAGG\
) } def
/len { sequence length } bind def

/coor [
[88.83162689 130.63470459]
[81.46031952 143.69854736]
[74.08901978 156.76239014]
[66.71772003 169.82623291]
[70.73499298 184.87611389]
[63.07334518 198.01969910]
[48.70081711 201.75680542]
[41.32951355 214.82064819]
[33.95821381 227.88449097]
[26.58691216 240.94833374]
[29.48958969 256.72659302]
[18.85511208 268.73858643]
[2.84134340 267.76968384]
[-6.26732540 254.56318665]
[-1.48350275 239.24996948]
[13.52307224 233.57702637]
[20.89437294 220.51318359]
[28.26567459 207.44935608]
[35.63697433 194.38551331]
[31.40507698 180.15081787]
[38.69452667 166.79721069]
[53.65388107 162.45492554]
[61.02518082 149.39108276]
[68.39648438 136.32723999]
[75.76778412 123.26340485]
[73.70521545 94.92613983]
[91.77473450 81.80453491]
[91.18213654 66.81624603]
[90.58953857 51.82795715]
[89.84889984 36.84625626]
[88.96028900 21.87259865]
[88.07167816 6.89894295]
[87.18306732 -8.07471275]
[85.70359802 -23.00157356]
[83.63556671 -37.85832977]
[74.06954193 -50.45998764]
[79.97826385 -64.13245392]
[77.91024017 -78.98921204]
[75.84220886 -93.84597015]
[73.77418518 -108.70272827]
[69.47093964 -116.82173157]
[71.81506348 -123.87312317]
[70.04096985 -138.76783752]
[68.26686859 -153.66255188]
[66.49277496 -168.55726624]
[64.57161713 -183.43373108]
[62.50358963 -198.29049683]
[49.39087296 -213.55517578]
[57.29660797 -231.16737366]
[54.64325333 -245.93083191]
[51.98989868 -260.69427490]
[49.33654404 -275.45773315]
[46.24686432 -290.13607788]
[42.72357559 -304.71643066]
[39.20028305 -319.29678345]
[24.64592361 -333.19369507]
[30.77599144 -351.49978638]
[26.67943192 -365.92953491]
[15.79033852 -372.90725708]
[12.69512463 -385.05035400]
[18.53008461 -395.68460083]
[14.71941566 -410.19250488]
[10.90874672 -424.70037842]
[7.09807730 -439.20825195]
[3.28740835 -453.71615601]
[-1.94589233 -461.26922607]
[-0.45220673 -468.54837036]
[-3.97549748 -483.12869263]
[-7.49878788 -497.70904541]
[-11.02207851 -512.28936768]
[-24.63861465 -520.31219482]
[-28.51303291 -535.63421631]
[-20.34670639 -549.16516113]
[-4.98457623 -552.87738037]
[8.45928097 -544.56848145]
[12.00886250 -529.16790771]
[3.55826497 -515.81268311]
[7.08155584 -501.23233032]
[10.60484600 -486.65197754]
[14.12813663 -472.07165527]
[17.79529572 -457.52682495]
[21.60596466 -443.01892090]
[25.41663361 -428.51104736]
[29.22730255 -414.00317383]
[33.03797150 -399.49526978]
[46.03956223 -387.74240112]
[41.10919952 -370.02609253]
[45.20576096 -355.59634399]
[54.59696579 -351.40707397]
[60.22569275 -342.53915405]
[60.01075745 -331.81759644]
[53.78062820 -322.82006836]
[57.30391693 -308.23971558]
[60.82720947 -293.65939331]
[63.68349075 -291.50735474]
[65.61568451 -287.84057617]
[65.91230774 -283.11990356]
[64.10000610 -278.11108398]
[66.75335693 -263.34762573]
[69.40670776 -248.58418274]
[72.06006622 -233.82072449]
[80.99228668 -228.72563171]
[85.71891022 -219.34576416]
[84.44754028 -208.69769287]
[77.36034393 -200.35852051]
[79.42837524 -185.50175476]
[83.48696136 -179.27722168]
[81.38748932 -170.33135986]
[83.16159058 -155.43664551]
[84.93568420 -140.54193115]
[86.70978546 -125.64721680]
[88.63094330 -110.77075195]
[90.69896698 -95.91399384]
[92.76699829 -81.05723572]
[94.83502197 -66.20047760]
[104.25312805 -54.66147995]
[98.49232483 -39.92636108]
[100.56035614 -25.06960106]
[102.77149200 -23.26528358]
[104.38120270 -20.45319557]
[104.99317932 -16.86536217]
[104.30520630 -12.87592983]
[102.15673065 -8.96332264]
[103.04533386 6.01033354]
[103.93394470 20.98398972]
[104.82255554 35.95764542]
[108.37703705 42.48318100]
[105.57782745 51.23535919]
[106.17042542 66.22364807]
[106.76303101 81.21193695]
[125.07668304 90.60213470]
[129.34715271 116.34412384]
[139.79542542 127.10673523]
[150.24369812 137.86933899]
[160.69195557 148.63195801]
[171.14022827 159.39456177]
[186.94450378 159.37811279]
[198.07226562 170.60078430]
[197.92161560 186.40435791]
[186.58192444 197.41285706]
[170.78083801 197.09512329]
[159.89283752 185.63967896]
[160.37760925 169.84283447]
[149.92935181 159.08021545]
[139.48107910 148.31761169]
[129.03282166 137.55499268]
[118.58454895 126.79238892]
[111.14631653 127.75296783]
[115.15566254 142.20721436]
[119.16500854 156.66145325]
[129.31179810 167.70875549]
[129.52925110 182.70718384]
[119.70702362 194.04400635]
[104.83054352 195.96504211]
[92.45063782 187.49522400]
[88.85094452 172.93354797]
[95.85828400 159.67131042]
[96.06407166 144.67271423]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 22]
[7 19]
[8 18]
[9 17]
[10 16]
[27 130]
[28 129]
[29 128]
[30 126]
[31 125]
[32 124]
[33 123]
[34 118]
[35 117]
[37 115]
[38 114]
[39 113]
[40 112]
[42 111]
[43 110]
[44 109]
[45 108]
[46 106]
[47 105]
[49 101]
[50 100]
[51 99]
[52 98]
[53 94]
[54 93]
[55 92]
[57 88]
[58 87]
[61 85]
[62 84]
[63 83]
[64 82]
[65 81]
[67 80]
[68 79]
[69 78]
[70 77]
[132 147]
[133 146]
[134 145]
[135 144]
[136 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
