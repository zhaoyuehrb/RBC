%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:57:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCCCAGAGAGGGUGGGGAGAUGACACAGUUGUUCCCCCAGCCCUGGCGGGGCGGGCAGCAUGGUUCACUCCAGCAUGGGGGCUCCAGAAAUAAGAAUGUCUAAGCCCCUGGAGGCCGAGAAGCAAGGUCUGGACUCCCCAUCAGAGCACACAGACACCG\
) } def
/len { sequence length } bind def

/coor [
[93.15673828 134.14244080]
[92.86765289 119.14521790]
[78.14539337 116.27204895]
[72.23862457 130.06008911]
[66.46500397 143.90441895]
[60.82506180 157.80374146]
[55.18511963 171.70304871]
[60.08195114 186.98051453]
[51.07110214 200.25395203]
[35.06492615 201.34112549]
[24.34199524 189.40805054]
[27.12801933 173.60876465]
[41.28580093 166.06311035]
[46.92574310 152.16378784]
[52.56568527 138.26448059]
[52.16479111 130.84849548]
[58.45058060 124.15332794]
[64.35734558 110.36528778]
[57.53461456 97.00675201]
[42.90156174 93.70922089]
[28.26850700 90.41168213]
[13.63545418 87.11414337]
[4.52648735 88.28169250]
[-1.24654388 83.60948181]
[-15.81332779 80.03054047]
[-30.38011169 76.45160675]
[-43.79109573 84.37519073]
[-58.51290512 80.53813171]
[-65.98418427 67.70397949]
[-80.55097198 64.12504578]
[-95.15156555 60.68664551]
[-109.78462219 57.38911057]
[-124.41767883 54.09157181]
[-139.05073547 50.79403687]
[-153.68377686 47.49649811]
[-168.31683350 44.19896317]
[-182.94989014 40.90142822]
[-197.61404419 37.74505615]
[-212.30792236 34.73014832]
[-227.00181580 31.71523666]
[-241.69570923 28.70032692]
[-250.78047180 30.04320908]
[-256.64248657 25.48312378]
[-271.27554321 22.18558693]
[-286.76330566 27.57639885]
[-298.99725342 16.65565681]
[-295.39212036 0.65768254]
[-279.65658569 -3.96017790]
[-267.97799683 7.55253363]
[-253.34494019 10.85007000]
[-238.68078613 14.00644016]
[-223.98690796 17.02134895]
[-209.29301453 20.03626060]
[-194.59913635 23.05117035]
[-187.38011169 21.30669594]
[-179.65235901 26.26837349]
[-165.01930237 29.56591034]
[-150.38624573 32.86344528]
[-135.75318909 36.16098404]
[-121.12014008 39.45851898]
[-106.48708344 42.75605392]
[-91.85403442 46.05359268]
[-84.60272980 44.44857025]
[-76.97203064 49.55825806]
[-62.40525055 53.13719559]
[-49.83714294 45.22655487]
[-35.01336670 48.64859772]
[-26.80117416 61.88481903]
[-12.23439026 65.46376038]
[2.33239388 69.04269409]
[16.93299103 72.48109436]
[31.56604385 75.77862549]
[46.19909668 79.07616425]
[60.83214951 82.37370300]
[95.07052612 68.61118317]
[115.28668976 86.19760132]
[129.34323120 80.96179199]
[143.18756104 75.18817139]
[156.79908752 68.88530731]
[170.41062927 62.58245087]
[184.02217102 56.27959061]
[197.63371277 49.97673035]
[211.24523926 43.67387009]
[224.85678101 37.37100983]
[234.12841797 24.55120277]
[248.92874146 26.22442436]
[262.54028320 19.92156601]
[276.15182495 13.61870480]
[289.76333618 7.31584501]
[303.37487793 1.01298511]
[316.98641968 -5.28987503]
[315.07147217 -18.21984482]
[316.58529663 -31.18925285]
[321.41656494 -43.30545807]
[329.22592163 -53.73638535]
[339.46975708 -61.76767731]
[351.43801880 -66.85160065]
[364.30343628 -68.64441681]
[377.17874146 -67.02959442]
[389.17785645 -62.12537766]
[399.47680664 -54.27614212]
[407.37039185 -44.02822876]
[421.32342529 -49.53396225]
[435.27642822 -55.03969955]
[441.63366699 -69.26023102]
[455.86242676 -74.64506531]
[469.38037109 -68.49679565]
[483.33337402 -74.00253296]
[497.28640747 -79.50827026]
[503.34912109 -94.10344696]
[517.98815918 -100.05950165]
[532.51843262 -93.84281921]
[538.31933594 -79.14163971]
[531.94940186 -64.67792511]
[517.18768311 -59.03272629]
[502.79214478 -65.55525208]
[488.83911133 -60.04951096]
[474.88610840 -54.54377365]
[469.20898438 -40.82131577]
[455.13705444 -35.03894806]
[440.78216553 -41.08667755]
[426.82916260 -35.58094025]
[412.87612915 -30.07520294]
[413.78485107 -13.05670643]
[408.83676147 3.27756572]
[398.60739136 16.97025299]
[384.30609131 26.37459946]
[367.63317871 30.35249901]
[350.57778931 28.41220093]
[335.18051147 20.76903534]
[323.28927612 8.32166290]
[309.67773438 14.62452316]
[296.06619263 20.92738342]
[282.45468140 27.23024368]
[268.84313965 33.53310394]
[255.23159790 39.83596420]
[246.93354797 52.20494843]
[231.15963745 50.98254776]
[217.54811096 57.28540802]
[203.93656921 63.58826828]
[190.32502747 69.89112854]
[176.71348572 76.19398499]
[163.10195923 82.49684906]
[149.49041748 88.79970551]
[148.40687561 91.43443298]
[146.18925476 93.78760529]
[142.94355774 95.41561890]
[138.93760681 95.92299652]
[134.57904053 95.01833344]
[120.52249908 100.25413513]
[134.91738892 96.03664398]
[149.41255188 99.89539337]
[159.80532837 110.71159363]
[163.08247375 125.34922791]
[158.29379272 139.56431580]
[146.82772827 149.23536682]
[132.00869751 151.55841064]
[118.13330078 145.85989380]
[109.22450256 133.79202271]
[107.86486053 118.85613251]
[108.15394592 133.85334778]
[110.71552277 153.06501770]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 161]
[2 160]
[3 18]
[4 17]
[5 15]
[6 14]
[7 13]
[19 74]
[20 73]
[21 72]
[22 71]
[24 70]
[25 69]
[26 68]
[29 65]
[30 64]
[31 62]
[32 61]
[33 60]
[34 59]
[35 58]
[36 57]
[37 56]
[38 54]
[39 53]
[40 52]
[41 51]
[43 50]
[44 49]
[76 150]
[77 149]
[78 144]
[79 143]
[80 142]
[81 141]
[82 140]
[83 139]
[84 138]
[86 136]
[87 135]
[88 134]
[89 133]
[90 132]
[91 131]
[102 123]
[103 122]
[104 121]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
