%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:33:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUGUUCCCUGGGCCUAUCUCGGAAGGGGCCACAAUGACCCUGCAAUGCACAAAGUCAGCGGGACCCUGGAAGAUGGUGGUGUGGGAUGAGGACGGCUUCCAGGGCCGGCGGCACGAGUUCACGGCCGAGUGCC\
) } def
/len { sequence length } bind def

/coor [
[93.31101227 385.93899536]
[78.69172668 390.10375977]
[63.59207535 388.35195923]
[50.31462860 380.95074463]
[40.88410950 369.02874756]
[36.73860550 354.40399170]
[38.51026917 339.30667114]
[45.92893982 326.03897095]
[57.86331940 316.62414551]
[72.49350739 312.49786377]
[74.22215271 297.59780884]
[68.00313568 284.06365967]
[77.27925873 271.24710083]
[79.00790405 256.34704590]
[80.73654938 241.44699097]
[82.46519470 226.54693604]
[68.95424652 215.28564453]
[64.80537415 198.03269958]
[71.84180450 181.57276917]
[87.45011139 172.49345398]
[88.48877716 157.52946472]
[89.52744293 142.56546021]
[90.56610870 127.60147095]
[81.31665802 125.48558044]
[72.60118103 120.18539429]
[65.52484131 111.87408447]
[50.52883911 111.52761078]
[35.53284073 111.18114471]
[20.53684425 110.83467865]
[12.62086773 123.99647522]
[-0.82323307 131.42289734]
[-16.17906380 131.11627197]
[-29.31598473 123.15907288]
[-36.70022583 109.69176483]
[-36.34547043 94.33696747]
[-28.34713745 81.22505188]
[-14.85674477 73.88306427]
[0.49686214 74.28594971]
[13.58364010 82.32534027]
[20.88331223 95.83867645]
[35.87931061 96.18515015]
[50.87530899 96.53161621]
[65.87130737 96.87808228]
[70.47359467 82.60156250]
[58.09863281 74.12451935]
[41.61437988 70.16146088]
[40.85926437 53.22434235]
[56.92544174 47.81007385]
[66.57567596 61.74955750]
[78.95063782 70.22660065]
[85.45810699 67.89246368]
[92.07112885 66.90500641]
[98.52308655 67.21730804]
[104.56928253 68.73175049]
[109.99618530 71.30663300]
[114.62895203 74.76444244]
[125.23555756 64.15784454]
[135.84216309 53.55124283]
[139.74488831 45.19095230]
[146.81837463 42.82569122]
[157.66712952 32.46690750]
[162.30485535 17.34070206]
[176.85313416 14.14744186]
[187.70188904 3.78865957]
[191.79669189 -4.47925615]
[198.92291260 -6.68050289]
[210.00805664 -16.78593826]
[221.09318542 -26.89137268]
[232.17831421 -36.99680710]
[243.26345825 -47.10224152]
[254.34858704 -57.20767593]
[265.43371582 -67.31311035]
[266.64080811 -71.69862366]
[268.98501587 -75.08705139]
[271.99447632 -77.23760986]
[275.16781616 -78.09474182]
[278.03964233 -77.78093719]
[290.00991821 -86.82045746]
[301.98016357 -95.85997772]
[308.33016968 -110.35093689]
[323.14953613 -111.84633636]
[335.11978149 -120.88584900]
[332.56591797 -135.97679138]
[337.32870483 -150.52238464]
[348.31369019 -161.18017578]
[362.99661255 -165.50106812]
[378.00344849 -162.49217224]
[389.88574219 -152.84489441]
[395.91299438 -138.77610779]
[394.70022583 -123.51872253]
[386.52609253 -110.57877350]
[373.26898193 -102.92976379]
[357.97525024 -102.32938385]
[344.15930176 -108.91559601]
[332.18905640 -99.87607574]
[326.69522095 -86.03167725]
[311.01968384 -83.88971710]
[299.04943848 -74.85019684]
[287.07916260 -65.81067657]
[275.53915405 -56.22797775]
[264.45401001 -46.12254333]
[253.36889648 -36.01710892]
[242.28375244 -25.91167259]
[231.19862366 -15.80623817]
[220.11349487 -5.70080376]
[209.02835083 4.40463114]
[198.06066895 14.63742161]
[187.21191406 24.99620438]
[183.35017395 39.38148117]
[168.02592468 43.31567001]
[157.17715454 53.67445374]
[146.44876099 64.15784454]
[135.84216309 74.76444244]
[125.23555756 85.37104797]
[126.54590607 112.08943939]
[105.53010559 128.64013672]
[104.49143982 143.60412598]
[103.45277405 158.56813049]
[102.41410828 173.53211975]
[113.04984283 180.29348755]
[119.73216248 190.89343262]
[121.22893524 203.26112366]
[117.31401062 215.01150513]
[108.79885101 223.90528870]
[97.36525726 228.27558899]
[95.63661194 243.17564392]
[93.90796661 258.07571411]
[92.17932129 272.97576904]
[98.27469635 287.57565308]
[89.12221527 299.32647705]
[87.39356995 314.22653198]
[100.69043732 321.59277344]
[110.15229034 333.48989868]
[114.33625793 348.10369873]
[112.60431671 363.20565796]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 131]
[11 130]
[13 128]
[14 127]
[15 126]
[16 125]
[20 119]
[21 118]
[22 117]
[23 116]
[26 43]
[27 42]
[28 41]
[29 40]
[44 50]
[45 49]
[56 114]
[57 113]
[58 112]
[60 111]
[61 110]
[63 108]
[64 107]
[66 106]
[67 105]
[68 104]
[69 103]
[70 102]
[71 101]
[72 100]
[77 99]
[78 98]
[79 97]
[81 95]
[82 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
