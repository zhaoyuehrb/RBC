%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:15:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGUCUGUGUCUUCAGGUCAUCAUGGUGCUGCUCAGGCUCCUCGUGUUCCUCUUUGCUCCGGUGGUCUCUGACCUCUGCAGCCUGCCCUGCUUUAUAAAUGUCUCUGAGAGCCAGGGCCCUG\
) } def
/len { sequence length } bind def

/coor [
[84.45505524 147.55525208]
[81.99666595 132.75808716]
[89.11137390 119.55138397]
[80.54235077 131.86283875]
[72.12996674 144.28184509]
[63.87557983 156.80642700]
[55.62118912 169.33100891]
[47.36679840 181.85557556]
[50.79327774 197.28395081]
[42.23629761 210.57130432]
[26.77255821 213.83447266]
[13.57642269 205.13749695]
[10.47692394 189.64010620]
[19.31294060 176.53666687]
[34.84222031 173.60118103]
[43.09661102 161.07661438]
[51.35100174 148.55203247]
[59.60539246 136.02745056]
[60.67125702 128.62681580]
[68.23089600 123.29381561]
[76.79991913 110.98236084]
[78.26981354 104.49071503]
[81.30064392 99.35379028]
[85.33189392 95.89500427]
[89.74971771 94.25010681]
[93.94342041 94.36286926]
[89.09185028 80.16912842]
[83.29097748 72.96225739]
[84.30212402 65.55394745]
[79.81167603 51.24185944]
[75.32122803 36.92977142]
[70.83078003 22.61768150]
[66.34033203 8.30559254]
[60.95299149 -5.69356871]
[54.69035721 -19.32365990]
[48.42772293 -32.95375443]
[42.16508865 -46.58384323]
[35.90245056 -60.21393585]
[21.35468864 -65.78173065]
[15.19765186 -79.69379425]
[20.59534454 -93.52854919]
[14.33271027 -107.15864563]
[7.89792013 -120.70831299]
[1.29200792 -134.17538452]
[-5.31390429 -147.64244080]
[-20.81860733 -157.47790527]
[-19.08540916 -174.89201355]
[-26.03035736 -188.18740845]
[-41.39934540 -190.32608032]
[-52.55265808 -201.11418152]
[-55.20162201 -216.40348816]
[-48.32765579 -230.31492615]
[-34.57394028 -237.49928284]
[-19.22906113 -235.19401550]
[-8.19343376 -224.28555298]
[-5.71048450 -208.96841431]
[-12.73495770 -195.13237000]
[-5.79000807 -181.83695984]
[5.71504402 -177.87551880]
[11.58366489 -166.75923157]
[8.15316391 -154.24835205]
[14.75907612 -140.78129578]
[21.36498833 -127.31422424]
[27.20194054 -122.64138031]
[27.96280289 -113.42127991]
[34.22543716 -99.79118347]
[48.23857880 -94.87515259]
[54.78394699 -81.14151001]
[49.53254318 -66.47657013]
[55.79517746 -52.84647751]
[62.05781174 -39.21638870]
[68.32044983 -25.58629608]
[74.58308411 -11.95620346]
[82.72108459 -24.55671692]
[97.61844635 -26.30848885]
[108.45742035 -15.93946552]
[107.36726379 -0.97913194]
[95.13961029 7.70903969]
[80.65242767 3.81514597]
[85.14286804 18.12723541]
[89.63331604 32.43932343]
[94.12376404 46.75141144]
[98.61421204 61.06349945]
[103.28559113 75.31755829]
[108.13716125 89.51129913]
[117.90775299 100.89266968]
[131.20315552 107.83762360]
[144.49855042 114.78256989]
[157.79396057 121.72752380]
[171.08935547 128.67247009]
[184.38475037 135.61741638]
[197.76705933 142.39340210]
[211.23413086 148.99931335]
[224.70120239 155.60522461]
[238.16825867 162.21113586]
[249.82920837 152.41612244]
[264.46780396 148.21710205]
[279.54779053 150.34159851]
[292.45651245 158.42149353]
[300.95742798 171.05693054]
[303.57772827 186.05873108]
[299.86340332 200.82774353]
[290.45797729 212.80514526]
[276.99102783 219.91578674]
[261.79577637 220.92768860]
[247.50486755 215.66554260]
[236.59431458 205.04106140]
[230.95443726 190.89497375]
[231.56234741 175.67820740]
[218.09529114 169.07228088]
[204.62821960 162.46636963]
[191.16114807 155.86045837]
[183.68515015 155.73812866]
[177.43980408 148.91282654]
[164.14440918 141.96786499]
[150.84899902 135.02291870]
[137.55360413 128.07797241]
[124.25820160 121.13301849]
[110.96279907 114.18807220]
[123.38288879 122.59886169]
[128.05569458 136.85246277]
[123.02570343 150.98396301]
[110.39791107 159.07955933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 21]
[4 20]
[5 18]
[6 17]
[7 16]
[8 15]
[26 85]
[27 84]
[29 83]
[30 82]
[31 81]
[32 80]
[33 79]
[34 73]
[35 72]
[36 71]
[37 70]
[38 69]
[41 66]
[42 65]
[43 63]
[44 62]
[45 61]
[47 58]
[48 57]
[86 119]
[87 118]
[88 117]
[89 116]
[90 115]
[91 114]
[92 112]
[93 111]
[94 110]
[95 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
