%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:18:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGGGUUGCUAGGAAGCCGCGGCGCGUCUGCUAAGCUGCAAAUGGCUGAAGUCCCGGAGGAUUAUGAUUCCGGCCCAGAUGAAGAUGGAGAGCUGGAGCCUGAGAGGCCUGAACUGCCUGGACUUCAUAAAUUGUAUGAAA\
) } def
/len { sequence length } bind def

/coor [
[109.85036469 127.88755798]
[102.83435059 141.14559937]
[103.21829224 156.96214294]
[90.42655182 164.59239197]
[83.41053772 177.85041809]
[76.39452362 191.10845947]
[69.37850952 204.36650085]
[75.43218231 218.78479004]
[70.75231171 233.70567322]
[57.54859924 242.08396912]
[42.05542374 239.96369934]
[31.58819199 228.34599304]
[31.08921432 212.71636963]
[40.79409027 200.45466614]
[56.12047195 197.35047913]
[63.13648605 184.09245300]
[70.15250397 170.83441162]
[77.16851807 157.57637024]
[76.28273773 142.70812988]
[89.57630920 134.12957764]
[96.59232330 120.87154388]
[88.43202209 108.28546906]
[73.46504211 109.28031158]
[65.03238678 112.99706268]
[58.15663910 110.12787628]
[43.17132187 110.79138184]
[28.18600273 111.45487976]
[14.74158382 119.79503632]
[1.68452275 112.62827301]
[-13.30079556 113.29177856]
[-28.28611374 113.95527649]
[-38.76994324 125.78172302]
[-54.55048752 126.64768982]
[-66.26543427 116.03941345]
[-66.96451569 100.25059509]
[-56.23296738 88.64846039]
[-40.43764114 88.11634827]
[-28.94961357 98.96995544]
[-13.96429539 98.30645752]
[1.02102256 97.64295959]
[13.39359093 89.35025787]
[27.52250290 96.46955872]
[42.50782013 95.80606079]
[57.49313736 95.14256287]
[72.47019958 94.31333923]
[87.43717194 93.31848907]
[100.84717560 86.59748840]
[110.60150909 75.20218658]
[120.35584259 63.80687714]
[130.11016846 52.41157150]
[139.86450195 41.01626587]
[149.61883545 29.62096024]
[159.37316895 18.22565269]
[169.12750244 6.83034658]
[172.22367859 -8.68494606]
[186.37800598 -13.32221031]
[196.13233948 -24.71751595]
[199.22850037 -40.23280716]
[213.38282776 -44.87007141]
[223.13716125 -56.26538086]
[226.23333740 -71.78067017]
[240.38766479 -76.41793823]
[250.14199829 -87.81324005]
[259.89633179 -99.20854950]
[254.67259216 -110.62142944]
[255.40536499 -123.78498077]
[262.50903320 -135.63558960]
[274.85177612 -143.14866638]
[289.90444946 -144.10041809]
[297.50003052 -157.03514099]
[305.09564209 -169.96986389]
[312.69122314 -182.90457153]
[320.28683472 -195.83929443]
[327.88241577 -208.77401733]
[335.04464722 -221.95362854]
[341.76565552 -235.36363220]
[348.48666382 -248.77363586]
[341.23114014 -262.48992920]
[343.45684814 -277.84655762]
[354.30798340 -288.93856812]
[369.61206055 -291.50085449]
[383.48431396 -284.54815674]
[390.59063721 -270.75396729]
[388.19845581 -255.42237854]
[377.22763062 -244.44874573]
[361.89666748 -242.05262756]
[355.17565918 -228.64263916]
[348.45465088 -215.23263550]
[349.26358032 -211.72381592]
[348.36257935 -207.64384460]
[345.50024414 -203.82449341]
[340.81713867 -201.17842102]
[333.22152710 -188.24369812]
[325.62594604 -175.30899048]
[318.03036499 -162.37426758]
[310.43475342 -149.43954468]
[302.83917236 -136.50482178]
[311.27590942 -124.10234833]
[326.09637451 -126.41608429]
[340.91687012 -128.72981262]
[355.73733521 -131.04354858]
[370.45428467 -139.46069336]
[382.61651611 -127.64900970]
[374.63330078 -112.69226837]
[358.05108643 -116.22307587]
[343.23059082 -113.90933990]
[328.41012573 -111.59560394]
[313.58963013 -109.28186798]
[295.97988892 -87.85954285]
[271.29162598 -89.45421600]
[261.53729248 -78.05890656]
[251.78297424 -66.66360474]
[249.38449097 -51.96337891]
[234.53247070 -46.51104736]
[224.77813721 -35.11574173]
[222.37966919 -20.41551781]
[207.52763367 -14.96318436]
[197.77330017 -3.56787777]
[195.37483215 11.13234615]
[180.52281189 16.58467865]
[170.76847839 27.97998428]
[161.01414490 39.37528992]
[151.25981140 50.77059937]
[141.50547791 62.16590500]
[131.75114441 73.56121063]
[121.99681091 84.95652008]
[112.24248505 96.35182190]
[126.26591492 91.02797699]
[140.03736877 85.08263397]
[155.01338196 84.23469543]
[169.36791992 88.58754730]
[181.35070801 97.61043549]
[189.50070190 110.20320892]
[192.82412720 124.83039856]
[190.91578674 139.70851135]
[184.00836182 153.02343750]
[172.94406128 163.15168762]
[159.07199097 168.85830688]
[144.08355713 169.44747925]
[129.80633545 164.84736633]
[117.98116302 155.61888123]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[4 18]
[5 17]
[6 16]
[7 15]
[22 46]
[23 45]
[25 44]
[26 43]
[27 42]
[29 40]
[30 39]
[31 38]
[47 127]
[48 126]
[49 125]
[50 124]
[51 123]
[52 122]
[53 121]
[54 120]
[56 118]
[57 117]
[59 115]
[60 114]
[62 112]
[63 111]
[64 110]
[69 97]
[70 96]
[71 95]
[72 94]
[73 93]
[74 92]
[75 88]
[76 87]
[77 86]
[98 108]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
