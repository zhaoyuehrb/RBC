%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:53:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCCUGACUCGGGGUCGCCUUUGGAGCAGAGAGGAGGCAAUGGCCACCAUGGAGAACAAGGUGAUCUGCGCCCUGGUCCUGGUGUCCAUGCUGGCCCUCGGCACCCUGGCCGAGGCCCAGACAGAGACGUGUACAGUGG\
) } def
/len { sequence length } bind def

/coor [
[105.81363678 296.46081543]
[92.73489380 285.67272949]
[99.48081207 270.11865234]
[100.14901733 255.13354492]
[100.65023804 240.14192200]
[100.98442078 225.14564514]
[101.31861115 210.14936829]
[101.48571014 195.15029907]
[101.48571014 180.15029907]
[93.74841309 167.42303467]
[101.48571014 153.62286377]
[101.48571014 138.62286377]
[89.96859741 133.91374207]
[81.52644348 126.22827148]
[76.75124359 116.99111938]
[62.75353622 122.38223267]
[48.75582886 127.77335358]
[38.65861893 139.95353699]
[24.00093079 137.30752563]
[10.00322151 142.69863892]
[-3.99448729 148.08975220]
[-17.99219704 153.48086548]
[-31.98990631 158.87199402]
[-36.89305115 173.72100830]
[-50.22095108 181.90031433]
[-65.68058014 179.54789734]
[-75.97237396 167.77449036]
[-76.23686218 152.13914490]
[-66.34915924 140.02438354]
[-50.97793961 137.15043640]
[-37.38102341 144.87428284]
[-23.38331223 139.48316956]
[-9.38560390 134.09204102]
[4.61210537 128.70092773]
[18.60981369 123.30981445]
[27.70581245 111.51523590]
[43.36471176 113.77564240]
[57.36241913 108.38452911]
[71.36013031 102.99340820]
[74.59485626 86.44340515]
[86.54200745 74.54248810]
[83.22747040 59.91327286]
[79.91293335 45.28406143]
[76.59839630 30.65484810]
[66.00294495 18.90550804]
[70.73665619 4.78314066]
[67.42211914 -9.84607124]
[64.10758209 -24.47528458]
[60.79304504 -39.10449600]
[57.47850800 -53.73370743]
[52.49254227 -61.48590469]
[54.25693893 -68.72568512]
[51.26914597 -83.42510986]
[48.28135681 -98.12453461]
[38.79675674 -103.65379333]
[34.05964661 -113.31272888]
[35.43696213 -123.75976562]
[42.22547913 -131.52850342]
[39.89546585 -146.34643555]
[30.10844612 -158.77723694]
[35.77485275 -172.55189514]
[33.44483948 -187.36982727]
[31.11483002 -202.18775940]
[28.78482056 -217.00567627]
[16.71487617 -227.57432556]
[17.59618759 -243.59313965]
[30.75268555 -252.77389526]
[46.09183121 -248.07388306]
[51.84674454 -233.09854126]
[43.60274887 -219.33569336]
[45.93276215 -204.51776123]
[48.26277161 -189.69982910]
[50.59278107 -174.88189697]
[60.21314621 -163.51098633]
[54.71339798 -148.67645264]
[57.04340744 -133.85852051]
[70.29316711 -119.84049988]
[62.98078156 -101.11232758]
[65.96857452 -86.41289520]
[68.95635986 -71.71347046]
[72.10771942 -57.04824448]
[75.42225647 -42.41903305]
[78.73679352 -27.78981972]
[82.05133057 -13.16060734]
[85.36586761 1.46860456]
[95.72424316 12.17156506]
[91.22760773 27.34031105]
[94.54214478 41.96952438]
[97.85668182 56.59873581]
[101.17121887 71.22795105]
[125.14974976 77.53281403]
[138.55165100 102.77545929]
[153.54327393 103.27668762]
[168.53489685 103.77790833]
[183.52651978 104.27913666]
[197.57752991 97.00728607]
[210.03913879 105.16555023]
[225.03076172 105.66677094]
[240.02239990 106.16799927]
[255.01402283 106.66922760]
[270.00564575 107.17044830]
[284.99725342 107.67167664]
[299.98889160 108.17289734]
[311.35873413 97.19554901]
[327.15890503 97.55662537]
[338.01541138 109.04189301]
[337.48733521 124.83735657]
[325.88790894 135.57183838]
[310.09890747 134.87677002]
[299.48767090 123.16452026]
[284.49603271 122.66329956]
[269.50442505 122.16207123]
[254.51278687 121.66085052]
[239.52116394 121.15962219]
[224.52954102 120.65840149]
[209.53791809 120.15717316]
[196.55921936 127.46487427]
[183.02528381 119.27075958]
[168.03366089 118.76953125]
[153.04203796 118.26831055]
[138.05041504 117.76708221]
[132.65924072 122.98102570]
[147.53480530 124.90917969]
[155.30220032 137.74147034]
[150.11254883 151.81510925]
[135.87368774 156.53260803]
[123.30753326 148.34164429]
[121.87688446 133.40892029]
[116.48571014 138.62286377]
[116.48571014 153.62286377]
[124.22300720 167.42303467]
[116.48571014 180.15029907]
[116.48571014 195.15029907]
[119.63542938 203.81262207]
[116.31488800 210.48355103]
[115.98069763 225.47982788]
[115.64651489 240.47610474]
[118.60247040 249.20645142]
[115.13412476 255.80175781]
[114.46591949 270.78686523]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 140]
[4 139]
[5 137]
[6 136]
[7 135]
[8 133]
[9 132]
[11 130]
[12 129]
[15 39]
[16 38]
[17 37]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[41 90]
[42 89]
[43 88]
[44 87]
[46 85]
[47 84]
[48 83]
[49 82]
[50 81]
[52 80]
[53 79]
[54 78]
[58 76]
[59 75]
[61 73]
[62 72]
[63 71]
[64 70]
[92 121]
[93 120]
[94 119]
[95 118]
[97 116]
[98 115]
[99 114]
[100 113]
[101 112]
[102 111]
[103 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
