%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGGGGCGGCCUGGGACGCGGCGGGAGCAUGGAGCCGCGCGCCGGCUGCCGGCUGCCGGUGCGGGUGGAGCAGGUCGUCAACGGCGCGCUGGUGGUCACGGUGAGCUGCGGCGAGCGGAGCUUCGCGG\
) } def
/len { sequence length } bind def

/coor [
[99.81583405 154.61749268]
[84.82143402 155.02732849]
[72.71361542 146.17291260]
[68.55931091 131.75965881]
[74.09701538 117.81929779]
[87.01054382 110.18537140]
[72.28999329 113.06727600]
[57.56943893 115.94917297]
[42.84888458 118.83107758]
[28.12833405 121.71297455]
[13.40778255 124.59487915]
[-1.31276977 127.47677612]
[-9.22779655 132.24111938]
[-16.42361259 130.24594116]
[-31.20950508 132.77130127]
[-40.34954071 145.38468933]
[-55.38051224 147.73512268]
[-67.34912109 138.94375610]
[-82.13500977 141.46911621]
[-96.92090607 143.99447632]
[-111.70679474 146.51983643]
[-126.49268341 149.04518127]
[-141.27857971 151.57054138]
[-145.94754028 166.14653015]
[-156.86363220 176.87487793]
[-171.51841736 181.29029846]
[-186.54432678 178.37815857]
[-198.48852539 168.80764771]
[-204.60630798 154.77799988]
[-203.49188232 139.51310730]
[-195.40130615 126.52075958]
[-182.19374084 118.78648376]
[-166.90420532 118.08757019]
[-153.04609680 124.58461761]
[-143.80392456 136.78465271]
[-129.01803589 134.25929260]
[-114.23214722 131.73393250]
[-99.44625854 129.20858765]
[-84.66036987 126.68322754]
[-69.87447357 124.15787506]
[-61.50226974 111.89240265]
[-46.54324722 109.12070465]
[-33.73485947 117.98540497]
[-18.94896889 115.46005249]
[-4.19467068 112.75622559]
[10.52588177 109.87432861]
[25.24643326 106.99242401]
[39.96698380 104.11052704]
[54.68753815 101.22862244]
[69.40808868 98.34672546]
[84.12863922 95.46482086]
[96.15647888 86.50205994]
[103.12732697 73.22022247]
[110.09817505 59.93837738]
[117.06902313 46.65653992]
[124.03987122 33.37469864]
[131.01071167 20.09285736]
[137.98156738 6.81101751]
[144.95240784 -6.47082281]
[151.92326355 -19.75266266]
[158.89410400 -33.03450394]
[165.86495972 -46.31634521]
[172.83580017 -59.59818268]
[179.80665588 -72.88002777]
[178.59817505 -91.20735168]
[193.68969727 -100.07830811]
[200.33757019 -113.52471161]
[199.51776123 -129.32466125]
[212.09431458 -137.30462646]
[218.74218750 -150.75102234]
[211.41206360 -164.42761230]
[213.55412292 -179.79612732]
[224.34469604 -190.94706726]
[239.63458252 -193.59265137]
[253.54450989 -186.71560669]
[260.72583008 -172.96031189]
[258.41717529 -157.61593628]
[247.50627136 -146.58271790]
[232.18858337 -144.10314941]
[225.54071045 -130.65675354]
[226.83601379 -115.81857300]
[213.78396606 -106.87683868]
[207.13609314 -93.43042755]
[210.71620178 -81.80941772]
[205.20489502 -70.52079010]
[193.08848572 -65.90917969]
[186.11764526 -52.62733841]
[179.14678955 -39.34549713]
[172.17594910 -26.06365585]
[165.20509338 -12.78181553]
[158.23425293 0.50002474]
[151.26339722 13.78186512]
[144.29255676 27.06370544]
[137.32171631 40.34554672]
[130.35086060 53.62738800]
[123.38001251 66.90922546]
[116.40916443 80.19107056]
[109.43831635 93.47290802]
[115.71015167 97.75714111]
[119.22574615 106.40151978]
[129.70341492 117.13550568]
[145.27615356 117.49239349]
[155.74909973 128.52743530]
[155.31289673 143.37147522]
[165.79057312 154.10545349]
[176.26823425 164.83943176]
[186.74591064 175.57342529]
[197.22357178 186.30740356]
[212.39996338 190.77819824]
[215.75329590 205.29042053]
[226.23097229 216.02439880]
[242.19091797 217.65522766]
[250.74519348 231.22740173]
[245.33169556 246.32951355]
[230.10319519 251.37651062]
[216.74168396 242.49676514]
[215.49697876 226.50207520]
[205.01931763 215.76808167]
[190.59236145 212.06506348]
[186.48959351 196.78507996]
[176.01191711 186.05108643]
[165.53425598 175.31710815]
[155.05657959 164.58312988]
[144.57891846 153.84913635]
[129.72866821 153.92652893]
[118.94991302 143.19000244]
[118.96942902 127.61317444]
[108.49176025 116.87919617]
[114.78269196 130.49624634]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 51]
[7 50]
[8 49]
[9 48]
[10 47]
[11 46]
[12 45]
[14 44]
[15 43]
[18 40]
[19 39]
[20 38]
[21 37]
[22 36]
[23 35]
[52 98]
[53 97]
[54 96]
[55 95]
[56 94]
[57 93]
[58 92]
[59 91]
[60 90]
[61 89]
[62 88]
[63 87]
[64 86]
[66 83]
[67 82]
[69 80]
[70 79]
[100 128]
[101 127]
[104 124]
[105 123]
[106 122]
[107 121]
[108 120]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
