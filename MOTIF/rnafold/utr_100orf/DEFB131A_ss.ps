%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGGGUCUUGUUUUUUGUCUUUGGAGUCCUUUCCUUGAUGUUCACAGUUCCUCCAGCCAGAAGCUUCAUUUCUAAUGAUGAAUGUCCUUCAGAAUAUU\
) } def
/len { sequence length } bind def

/coor [
[174.85603333 148.08157349]
[171.30871582 136.56101990]
[170.70693970 124.50969696]
[156.11326599 121.04204559]
[141.51959229 117.57440186]
[126.92591095 114.10675812]
[112.33223724 110.63911438]
[101.95674896 116.16928864]
[90.56161499 113.27371979]
[84.08477783 103.46128082]
[69.60600281 99.54145050]
[55.12722778 95.62162018]
[40.64845276 91.70178986]
[30.50198555 101.17829132]
[17.09343147 104.33351135]
[3.99441552 100.43811798]
[-5.36090136 90.62620544]
[-8.57608318 77.56790161]
[-22.92594910 73.19968414]
[-37.27581406 68.83146667]
[-51.62567902 64.46324158]
[-62.80065155 72.17005920]
[-76.17839813 71.97850037]
[-86.81237030 64.18609619]
[-90.90185547 51.85897064]
[-105.10892487 47.04658508]
[-119.31600189 42.23419952]
[-133.52307129 37.42181015]
[-149.49037170 41.16041946]
[-160.51292419 29.01811218]
[-155.25164795 13.48585320]
[-139.11891174 10.54189873]
[-128.71069336 23.21473885]
[-114.50361633 28.02712440]
[-100.29653931 32.83951187]
[-86.08946228 37.65189743]
[-71.43874359 29.55895996]
[-55.12194824 34.58299255]
[-47.25746155 50.11337662]
[-32.90759277 54.48159790]
[-18.55772781 58.84981918]
[-4.20786285 63.21804047]
[8.47935200 52.93025970]
[24.96056938 52.16030884]
[38.82637405 61.40351868]
[44.56827927 77.22301483]
[59.04705429 81.14284515]
[73.52583313 85.06267548]
[88.00460815 88.98249817]
[104.01120758 84.21440887]
[115.79988098 96.04543304]
[130.39355469 99.51308441]
[144.98722839 102.98072815]
[159.58091736 106.44837189]
[174.17459106 109.91601562]
[184.34498596 94.51190948]
[199.49961853 84.02877045]
[217.43942261 79.95920563]
[235.57173157 82.86720276]
[251.28514099 92.31012726]
[262.32543945 106.90586853]
[267.11904907 124.53512573]
[282.07373047 125.70038605]
[297.02841187 126.86564636]
[311.98306274 128.03089905]
[330.46981812 117.43456268]
[347.30215454 129.20260620]
[362.30032349 128.96932983]
[377.29852295 128.73605347]
[392.29669189 128.50277710]
[407.29489136 128.26950073]
[422.29306030 128.03622437]
[433.11190796 116.51543427]
[448.91079712 116.10259247]
[460.31655884 127.04261780]
[460.56234741 142.84500122]
[449.50234985 154.13446045]
[433.69824219 154.21315002]
[422.52633667 143.03440857]
[407.52816772 143.26768494]
[392.52996826 143.50096130]
[377.53179932 143.73423767]
[362.53359985 143.96751404]
[347.53543091 144.20079041]
[342.28329468 151.73876953]
[333.97918701 155.98472595]
[324.51455688 155.82446289]
[316.11517334 151.16468811]
[310.81781006 142.98556519]
[295.86312866 141.82031250]
[280.90847778 140.65505981]
[265.95379639 139.48979187]
[261.80773926 150.68048096]
[255.02682495 160.51550293]
[246.02380371 168.38578796]
[235.34922791 173.80218506]
[223.65785217 176.42582703]
[211.66839600 176.08935547]
[200.11941528 172.80757141]
[189.72381592 166.77687073]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 55]
[4 54]
[5 53]
[6 52]
[7 51]
[10 49]
[11 48]
[12 47]
[13 46]
[18 42]
[19 41]
[20 40]
[21 39]
[25 36]
[26 35]
[27 34]
[28 33]
[62 92]
[63 91]
[64 90]
[65 89]
[67 84]
[68 83]
[69 82]
[70 81]
[71 80]
[72 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
