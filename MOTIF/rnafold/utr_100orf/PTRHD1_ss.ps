%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:53:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAGAUGCACCGGGGAGUAGGUCCGGCCUUUCGGGUGGUCAGGAAGAUGGCGGCCUCUGGGGCGGAGCCGCAGGUCCUGGUACAAUACUUGGUGUUACGAAAGG\
) } def
/len { sequence length } bind def

/coor [
[214.96412659 386.74618530]
[209.74110413 372.68487549]
[204.51808167 358.62359619]
[199.29505920 344.56228638]
[194.07203674 330.50100708]
[178.29570007 319.48739624]
[181.52656555 299.69879150]
[175.47972107 285.97161865]
[163.26829529 277.44338989]
[164.78588867 261.69515991]
[158.73902893 247.96795654]
[152.69218445 234.24078369]
[146.64532471 220.51359558]
[140.59848022 206.78640747]
[134.55162048 193.05921936]
[128.50477600 179.33204651]
[112.47505951 178.00567627]
[99.19866180 168.76124573]
[92.31426239 154.01824951]
[93.76578522 137.71826172]
[103.25454712 124.27119446]
[96.80356598 110.72922516]
[90.15262604 97.28433990]
[83.30319214 83.93948364]
[76.45375061 70.59462738]
[69.60431671 57.24977112]
[56.41920853 48.50542831]
[57.49110794 33.64944077]
[50.64166641 20.30458641]
[43.79222870 6.95972919]
[30.48992157 4.30179358]
[21.31902885 -5.42665768]
[19.50393105 -18.47510910]
[25.49115944 -29.99009514]
[19.04018021 -43.53206253]
[12.58920288 -57.07403183]
[6.13822460 -70.61599731]
[-6.78196716 -79.74722290]
[-5.27030611 -94.56491852]
[-11.72128391 -108.10688782]
[-18.17226219 -121.64884949]
[-24.62323952 -135.19082642]
[-39.60031891 -140.23687744]
[-46.54766464 -154.43229675]
[-41.34354019 -169.35519409]
[-27.07546234 -176.15206909]
[-12.20842743 -170.79045105]
[-5.56278324 -156.45130920]
[-11.08127213 -141.64179993]
[-4.63029480 -128.09982300]
[1.82068348 -114.55786133]
[8.27166176 -101.01589203]
[20.73043633 -92.85328674]
[19.68019295 -77.06697845]
[26.13117027 -63.52500916]
[32.58214951 -49.98303986]
[39.03312683 -36.44107437]
[55.05334091 -31.56893730]
[62.81503677 -16.35405159]
[57.13708496 0.11029086]
[63.98652267 13.45514679]
[70.83596039 26.80000305]
[83.53115082 34.58983231]
[82.94917297 50.40033340]
[89.79860687 63.74518967]
[96.64804840 77.09004211]
[103.49748230 90.43489838]
[109.78649902 95.69911957]
[110.34553528 104.27825165]
[116.79651642 117.82022095]
[130.86621094 118.21615601]
[143.31718445 124.63638306]
[151.71893311 135.76284790]
[154.45953369 149.36532593]
[151.05464172 162.74830627]
[142.23196411 173.28518677]
[148.27880859 187.01237488]
[154.32565308 200.73956299]
[160.37251282 214.46673584]
[166.41935730 228.19392395]
[172.46621704 241.92111206]
[178.51306152 255.64830017]
[191.15699768 265.15838623]
[189.20689392 279.92477417]
[195.25375366 293.65194702]
[205.79107666 297.07598877]
[212.49449158 305.61776733]
[213.28236389 316.22500610]
[208.13333130 325.27798462]
[213.35635376 339.33926392]
[218.57937622 353.40057373]
[223.80239868 367.46185303]
[229.02542114 381.52316284]
[244.22651672 382.44326782]
[257.73617554 389.47244263]
[267.21374512 401.39282227]
[271.01721191 416.13912964]
[268.48754883 431.15649414]
[260.06311035 443.84301758]
[247.20341492 452.00076294]
[232.13652039 454.21627808]
[217.47285461 450.10574341]
[205.75296021 440.38131714]
[199.00740051 426.72784424]
[198.40489197 411.51086426]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 93]
[2 92]
[3 91]
[4 90]
[5 89]
[7 85]
[8 84]
[10 82]
[11 81]
[12 80]
[13 79]
[14 78]
[15 77]
[16 76]
[21 70]
[22 69]
[23 67]
[24 66]
[25 65]
[26 64]
[28 62]
[29 61]
[30 60]
[34 57]
[35 56]
[36 55]
[37 54]
[39 52]
[40 51]
[41 50]
[42 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
