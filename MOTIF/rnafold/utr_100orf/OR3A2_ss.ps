%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAGUGAACUGAGUGAACUGAUACCUCCCCUGCUGGGACAUGUCCUUACAGAAACUCAUGGAGCCAGAAGCUGGGACCAAUAGGACCGCUGUUGCUGAGUUCAUUCUACUGGGCCUAGUGCAAACAGAAGAGAUGCAGC\
) } def
/len { sequence length } bind def

/coor [
[167.40098572 244.89807129]
[179.22404480 235.66687012]
[193.85343933 232.35308838]
[208.50112915 235.58877563]
[198.63204956 224.29270935]
[188.76296997 212.99662781]
[178.89389038 201.70056152]
[169.02481079 190.40449524]
[159.15573120 179.10841370]
[149.28665161 167.81234741]
[135.08613586 163.31846619]
[131.83322144 147.83528137]
[121.96413422 136.53921509]
[112.09505463 125.24314117]
[104.96172333 127.54792023]
[97.47252655 127.87684631]
[90.16460419 126.20632172]
[83.56211853 122.65618134]
[78.13862610 117.48104095]
[74.28311920 111.05208588]
[59.41887283 113.06558228]
[44.55462646 115.07908630]
[29.69038010 117.09258270]
[20.12042427 129.38296509]
[5.01728201 131.21319580]
[-6.64075041 122.01396942]
[-21.50499725 124.02746582]
[-36.36924362 126.04096222]
[-51.23348999 128.05445862]
[-62.05710220 139.89630127]
[-78.05349731 138.67359924]
[-86.95159912 125.32431793]
[-81.92556000 110.08888245]
[-66.83091736 104.65461731]
[-53.24699020 113.19021606]
[-38.38274384 111.17671967]
[-23.51849556 109.16322327]
[-8.65424919 107.14971924]
[0.13632642 95.18053436]
[15.18210316 92.92681885]
[27.67688179 102.22833252]
[42.54113007 100.21483612]
[57.40537643 98.20133972]
[72.26962280 96.18783569]
[74.52610779 88.39882660]
[78.92063904 81.58351135]
[85.08438110 76.31391144]
[92.50000000 73.03230286]
[92.50000000 58.03230667]
[92.50000000 43.03230667]
[92.50000000 28.03230667]
[77.55474091 17.88778877]
[71.68144226 0.97155964]
[77.03050232 -15.95395756]
[91.30503082 -26.24003792]
[90.63206482 -41.22493362]
[79.24899292 -51.85806656]
[78.77996826 -67.06446838]
[88.98718262 -77.85095978]
[88.31420898 -92.83585358]
[87.64124298 -107.82074738]
[76.25817108 -118.45388031]
[75.78914642 -133.66027832]
[85.99636078 -144.44677734]
[85.32338715 -159.43167114]
[84.65042114 -174.41656494]
[83.97744751 -189.40145874]
[77.22657776 -204.95336914]
[90.30188751 -215.74562073]
[104.29197693 -206.16888428]
[98.96234131 -190.07443237]
[99.63531494 -175.08953857]
[100.30828857 -160.10464478]
[100.98126221 -145.11973572]
[112.11428070 -135.29164124]
[113.01023102 -120.10441589]
[102.62613678 -108.49372101]
[103.29911041 -93.50882721]
[103.97208405 -78.52392578]
[115.10510254 -68.69583130]
[116.00105286 -53.50860214]
[105.61695862 -41.89790726]
[106.28993225 -26.91300964]
[117.37979126 -21.75121117]
[125.24402618 -12.28750324]
[128.32467651 -0.29972506]
[125.97010040 11.92537212]
[118.57160187 22.02832031]
[107.50000000 28.03230667]
[107.50000000 43.03230667]
[107.50000000 58.03230667]
[107.50000000 73.03230286]
[126.20632172 90.16460419]
[123.39112854 115.37406158]
[133.26020813 126.67013550]
[143.12928772 137.96620178]
[158.03569031 143.26805115]
[160.58271790 157.94326782]
[170.45179749 169.23933411]
[180.32087708 180.53541565]
[190.18995667 191.83148193]
[200.05905151 203.12754822]
[209.92813110 214.42362976]
[219.79721069 225.71969604]
[231.09327698 235.58877563]
[243.61187744 243.85223389]
[256.13046265 252.11569214]
[271.91018677 253.26081848]
[278.26956177 266.72958374]
[290.78817749 274.99304199]
[303.30676270 283.25650024]
[323.40960693 283.46917725]
[331.46548462 300.99411011]
[344.34222412 308.68762207]
[360.18774414 306.17770386]
[371.93188477 317.10723877]
[370.56555176 333.09201050]
[357.13690186 341.86984253]
[341.94720459 336.70718384]
[336.64874268 321.56433105]
[323.77200317 313.87084961]
[314.02850342 317.26867676]
[303.82083130 314.64450073]
[296.62896729 306.64080811]
[295.04330444 295.77508545]
[282.52471924 287.51162720]
[270.00610352 279.24816895]
[255.12182617 278.69409180]
[247.86701965 264.63427734]
[235.34841919 256.37081909]
[222.82981873 248.10737610]
[228.00233459 262.18734741]
[226.68264771 277.12918091]
[219.12236023 290.08456421]
[206.76266479 298.58383179]
[191.95964050 301.00680542]
[177.53518677 296.89157104]
[166.23899841 287.02264404]
[160.22442627 273.28128052]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 104]
[5 103]
[6 102]
[7 101]
[8 100]
[9 99]
[10 98]
[12 96]
[13 95]
[14 94]
[20 44]
[21 43]
[22 42]
[23 41]
[26 38]
[27 37]
[28 36]
[29 35]
[48 92]
[49 91]
[50 90]
[51 89]
[55 83]
[56 82]
[59 79]
[60 78]
[61 77]
[64 74]
[65 73]
[66 72]
[67 71]
[105 131]
[106 130]
[107 129]
[109 127]
[110 126]
[111 125]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
