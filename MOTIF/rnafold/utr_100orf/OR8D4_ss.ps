%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:33:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGUGUAAAAAACCAUUCCACAGUGACUGAGUUUCUUCUUUCAGGAUUAACUGAACAAGCAGAGCUUCAGCUGCCCCUCUUCUGCCUCUUCUUAGGAA\
) } def
/len { sequence length } bind def

/coor [
[128.60418701 228.57278442]
[130.39324951 211.70478821]
[139.32867432 197.22227478]
[130.97088623 184.76646423]
[122.61311340 172.31063843]
[116.15863800 168.44213867]
[114.19614410 159.33493042]
[106.22978210 146.62521362]
[98.26341248 133.91549683]
[101.90700531 148.46623230]
[94.85275269 161.70396423]
[80.74277496 166.79400635]
[66.86208344 161.10836792]
[60.37731934 147.58255005]
[64.63657379 133.19996643]
[77.44280243 125.38600159]
[62.84912491 128.85365295]
[48.25544739 132.32128906]
[33.66176605 135.78894043]
[22.11797714 147.43681335]
[6.32974434 143.00242615]
[2.53865004 127.04750061]
[14.64464664 115.98509216]
[30.19412231 121.19525909]
[44.78779984 117.72761536]
[59.38147736 114.25997162]
[73.97515869 110.79232788]
[77.83722687 90.75638580]
[92.50000000 81.61870575]
[92.50000000 66.61870575]
[92.50000000 51.61870575]
[92.50000000 36.61870575]
[92.50000000 21.61870384]
[84.76270294 7.81853199]
[92.50000000 -4.90874004]
[92.50000000 -19.90874100]
[92.50000000 -34.90874100]
[92.50000000 -49.90874100]
[84.76270294 -63.70891190]
[92.50000000 -76.43618774]
[92.50000000 -91.43618774]
[92.50000000 -106.43618774]
[92.03350067 -121.42893219]
[91.10095978 -136.39991760]
[90.16841125 -151.37089539]
[89.23587036 -166.34187317]
[77.22303009 -176.61160278]
[76.07376862 -192.37405396]
[86.46991730 -204.27764893]
[102.24363708 -205.26019287]
[114.03665161 -194.73876953]
[114.85237122 -178.95553589]
[104.20685577 -167.27442932]
[105.13939667 -152.30343628]
[106.07194519 -137.33245850]
[107.00448608 -122.36147308]
[110.06477356 -118.48521423]
[110.60047150 -112.60110474]
[107.50000000 -106.43618774]
[107.50000000 -91.43618774]
[107.50000000 -76.43618774]
[115.23729706 -63.70891190]
[107.50000000 -49.90874100]
[107.50000000 -34.90874100]
[107.50000000 -19.90874100]
[107.50000000 -4.90874004]
[115.23729706 7.81853199]
[107.50000000 21.61870384]
[107.50000000 36.61870575]
[107.50000000 51.61870575]
[107.50000000 66.61870575]
[107.50000000 81.61870575]
[124.01270294 99.84797668]
[110.97312927 125.94912720]
[118.93949890 138.65884399]
[126.90586853 151.36856079]
[135.06892395 163.95286560]
[143.42671204 176.40867615]
[151.78450012 188.86450195]
[164.88641357 186.03921509]
[178.12918091 187.88548279]
[189.90180969 194.15631104]
[198.77989197 204.06787109]
[203.69787598 216.39733887]
[204.07693481 229.63380432]
[199.89302063 242.16336060]
[191.67710876 252.46592712]
[199.24435425 265.41726685]
[206.81158447 278.36859131]
[222.16004944 282.13690186]
[230.27687073 295.69763184]
[226.34648132 311.00537109]
[212.70071411 318.97836304]
[197.43536377 314.88635254]
[189.60708618 301.15707397]
[193.86026001 285.93582153]
[186.29302979 272.98449707]
[178.72578430 260.03317261]
[162.08668518 261.90655518]
[146.22186279 256.38320923]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 79]
[4 78]
[5 77]
[7 76]
[8 75]
[9 74]
[16 27]
[17 26]
[18 25]
[19 24]
[29 72]
[30 71]
[31 70]
[32 69]
[33 68]
[35 66]
[36 65]
[37 64]
[38 63]
[40 61]
[41 60]
[42 59]
[43 56]
[44 55]
[45 54]
[46 53]
[87 98]
[88 97]
[89 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
