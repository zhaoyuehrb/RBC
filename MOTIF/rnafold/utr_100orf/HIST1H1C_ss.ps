%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:43:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCGGCGCUUUGCCACUUGUACCCGAGUUUUUGAUUCUCAACAUGUCCGAGACUGCUCCUGCCGCUCCCGCUGCCGCGCCUCCUGCGGAGAAGGCCCCUGUAAAGAAGAAGGCGGCCAAAAAGGCUGGGGGUACGCCUCGUA\
) } def
/len { sequence length } bind def

/coor [
[10.14438438 307.18139648]
[3.21585679 311.45764160]
[-4.47920990 314.07678223]
[-12.55133438 314.91256714]
[-20.59334564 313.92877197]
[-26.93261909 327.52340698]
[-33.27189255 341.11801147]
[-29.15808487 356.62466431]
[-38.83208847 369.42285156]
[-54.87283325 369.69488525]
[-64.97523499 357.23208618]
[-61.38959885 341.59487915]
[-46.86651230 334.77874756]
[-40.52723694 321.18414307]
[-34.18796158 307.58950806]
[-47.20581818 289.23153687]
[-46.84542465 266.60931396]
[-33.10441971 248.48406982]
[-11.19003105 241.95938110]
[-7.62474298 227.38925171]
[-4.05945492 212.81912231]
[-0.49416631 198.24899292]
[3.07112217 183.67884827]
[6.63641024 169.10871887]
[10.20169926 154.53858948]
[-7.04259205 151.37190247]
[-14.95489883 137.63912964]
[-29.59933853 134.39253235]
[-44.24377823 131.14593506]
[-58.88821793 127.89934540]
[-73.53266144 124.65275574]
[-88.17710114 121.40615845]
[-103.32481384 125.97315216]
[-114.07573700 115.66456604]
[-128.72018433 112.41797638]
[-143.36462402 109.17137909]
[-154.24392700 120.10957336]
[-169.31472778 123.40724945]
[-183.76797485 118.01212311]
[-192.99168396 105.64576721]
[-194.04260254 90.25424194]
[-186.58540344 76.74892426]
[-172.99963379 69.43930817]
[-157.62046814 70.65787506]
[-145.35534668 80.01577759]
[-140.11802673 94.52693939]
[-125.47358704 97.77353668]
[-110.82913971 101.02012634]
[-96.72889709 96.22091675]
[-84.93050385 106.76171875]
[-70.28606415 110.00831604]
[-55.64162445 113.25490570]
[-40.99718475 116.50150299]
[-26.35274506 119.74809265]
[-11.70830441 122.99468994]
[-3.07053661 115.73576355]
[8.79753304 114.83316803]
[19.49494934 121.34214020]
[24.63728714 133.43620300]
[36.92456818 124.83255768]
[42.91220474 111.19446564]
[58.65457916 109.61703491]
[70.94185638 101.01338959]
[83.22914124 92.40974426]
[89.12021637 78.61499023]
[86.83836365 63.78956985]
[76.15735626 51.34576797]
[81.84804535 35.96564865]
[98.05632782 33.47095490]
[108.10852051 46.42801666]
[101.66378784 61.50771713]
[103.94564056 76.33313751]
[111.37035370 77.39314270]
[126.21978760 79.51313782]
[133.64450073 80.57313538]
[139.98377991 66.97852325]
[146.32304382 53.38390350]
[152.66232300 39.78928757]
[159.00160217 26.19466972]
[154.88778687 10.68802071]
[164.56179810 -2.11015177]
[180.60253906 -2.38218641]
[190.70494080 10.08059883]
[187.11929321 25.71782112]
[172.59620667 32.53394318]
[166.25694275 46.12855911]
[159.91766357 59.72317505]
[153.57838440 73.31779480]
[147.23912048 86.91240692]
[151.54093933 93.05605316]
[163.82835388 84.45259094]
[172.43162537 96.74014282]
[160.14459229 105.34333038]
[164.44641113 111.48696899]
[179.38932800 110.17963409]
[194.33224487 108.87229919]
[209.27517700 107.56496429]
[224.20294189 106.09470367]
[239.11378479 104.46170044]
[254.02462769 102.82869720]
[260.13684082 88.73840332]
[272.48489380 79.60485840]
[287.74716187 77.88493347]
[301.81823730 84.04129028]
[310.91302490 96.41788483]
[312.58511353 111.68549347]
[306.38467407 125.73719025]
[293.97964478 134.79315186]
[278.70684814 136.41735840]
[264.67465210 130.17291260]
[255.65763855 117.73954773]
[240.74679565 119.37255096]
[225.83595276 121.00555420]
[219.48121643 124.88982391]
[210.58250427 122.50788116]
[195.63958740 123.81522369]
[180.69667053 125.12255859]
[165.75375366 126.42989349]
[144.14779663 141.55078125]
[121.58751678 145.52612305]
[102.80231476 140.04620361]
[91.07584381 128.54058838]
[87.69818115 115.33869171]
[91.83278656 104.69702148]
[79.54550171 113.30067444]
[67.25822449 121.90431976]
[60.39171982 136.15779114]
[45.52821350 137.11984253]
[33.24093246 145.72348022]
[24.77182961 158.10388184]
[21.20654106 172.67401123]
[17.64125252 187.24414062]
[14.07596493 201.81427002]
[10.51067638 216.38439941]
[6.94538784 230.95452881]
[3.38009953 245.52467346]
[10.35984707 249.94505310]
[16.16867638 255.80117798]
[20.51824188 262.79394531]
[23.19451332 270.56796265]
[24.06831551 278.72982788]
[23.10154533 286.86776733]
[20.34879303 294.57266235]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 15]
[6 14]
[7 13]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[25 130]
[27 55]
[28 54]
[29 53]
[30 52]
[31 51]
[32 50]
[34 48]
[35 47]
[36 46]
[59 129]
[60 128]
[62 126]
[63 125]
[64 124]
[65 72]
[66 71]
[75 89]
[76 88]
[77 87]
[78 86]
[79 85]
[94 118]
[95 117]
[96 116]
[97 115]
[98 113]
[99 112]
[100 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
