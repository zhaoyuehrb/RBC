%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:15:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGAAACUACGGCACUCUGGCCGUGGCCGACGUUGCUCCUCCGAAGCAUGGCGCCGGCGGGAGUUGUAACCCGGGCUGUCCGGAGCGGGGAGCUGCCCCUCACAAGCAUGGCGUCAGCUGAAAAUGAAGCCUGUGCUGUGCGGAGCG\
) } def
/len { sequence length } bind def

/coor [
[136.91871643 148.02531433]
[129.17814636 160.87380981]
[115.89681244 167.84561157]
[100.92543793 166.91932678]
[88.60478210 158.36354065]
[82.50705719 144.65887451]
[84.40022278 129.77882385]
[93.73338318 118.03909302]
[83.64170837 129.13674927]
[73.55002594 140.23440552]
[63.45835114 151.33207703]
[53.36667252 162.42973328]
[43.27499390 173.52738953]
[33.18331528 184.62504578]
[34.18304825 200.39768982]
[23.67447853 212.20214844]
[7.89215326 213.03507996]
[-3.80055380 202.40228271]
[-4.46656656 186.61204529]
[6.28924799 175.03239441]
[22.08565712 174.53337097]
[32.17733383 163.43571472]
[42.26901245 152.33805847]
[52.36069107 141.24038696]
[62.45236969 130.14273071]
[72.54405212 119.04507446]
[82.63572693 107.94741821]
[70.66906738 116.99170685]
[55.68821716 117.74935150]
[42.87013626 109.95853424]
[36.64440536 96.31154633]
[39.16246414 81.52440643]
[49.55414200 70.70715332]
[64.22836304 67.59791565]
[78.11411285 73.27117920]
[86.41297150 85.76673889]
[80.56332397 71.95436859]
[74.71368408 58.14199066]
[68.86403656 44.32961655]
[63.01439285 30.51724434]
[56.74407959 23.77984238]
[57.19042969 16.35146523]
[51.63329315 2.41883326]
[46.07615280 -11.51379871]
[31.91431046 -11.95948315]
[19.03621674 -17.76320267]
[9.38142109 -28.01450157]
[4.39009333 -41.13587189]
[4.78826046 -55.12545776]
[10.48239136 -67.86244965]
[20.57860756 -77.42860413]
[15.31644630 -91.47529602]
[10.05428410 -105.52199554]
[4.64433432 -119.51243591]
[-0.91280317 -133.44506836]
[-6.46994066 -147.37770081]
[-11.49893951 -151.83677673]
[-13.21127033 -157.34530640]
[-11.95398617 -162.01667786]
[-16.91883278 -176.17120361]
[-21.88367844 -190.32571411]
[-26.84852409 -204.48022461]
[-41.75144577 -208.80256653]
[-51.24094009 -221.07974243]
[-51.66810608 -236.59094238]
[-42.86869049 -249.37178040]
[-28.22624397 -254.50776672]
[-13.37108994 -250.02401733]
[-4.01533604 -237.64462280]
[-3.75646138 -222.12971497]
[-12.69400883 -209.44508362]
[-7.72916222 -195.29055786]
[-2.76431656 -181.13604736]
[2.20052934 -166.98153687]
[7.46269083 -152.93482971]
[13.01982880 -139.00219727]
[18.57696533 -125.06957245]
[24.01320076 -119.98751068]
[24.10098076 -110.78415680]
[29.36314201 -96.73745728]
[34.62530136 -82.69076538]
[50.53405762 -81.56522369]
[64.41788483 -73.59970856]
[73.48434448 -60.33806229]
[75.88460541 -44.39506912]
[71.09030914 -28.94094276]
[60.00878525 -17.07093620]
[65.56592560 -3.13830423]
[71.12306213 10.79432678]
[76.82676697 24.66760063]
[82.67641449 38.47997665]
[88.52605438 52.29234695]
[94.37570190 66.10472107]
[100.22534180 79.91709900]
[114.72502136 85.15528870]
[121.73004150 99.58021545]
[135.47998047 105.57514191]
[151.22238159 103.99805450]
[159.79669189 116.17715454]
[173.54663086 122.17208099]
[189.28903198 120.59499359]
[197.86334229 132.77409363]
[211.61328125 138.76902771]
[225.36322021 144.76394653]
[239.11315918 150.75888062]
[248.29911804 151.33143616]
[253.08769226 157.02787781]
[266.70819092 163.31135559]
[280.32867432 169.59484863]
[293.94918823 175.87832642]
[307.63516235 182.01788330]
[321.38510132 188.01281738]
[335.13504028 194.00773621]
[350.87744141 192.43064880]
[359.45175171 204.60975647]
[373.20169067 210.60467529]
[386.95162964 216.59960938]
[400.26068115 208.62161255]
[415.71429443 210.02368164]
[427.37020874 220.26669312]
[430.74649048 235.41198730]
[424.54492188 249.63591003]
[411.15008545 257.46905518]
[395.71261597 255.89944458]
[384.16848755 245.53059387]
[380.95669556 230.34954834]
[367.20675659 224.35461426]
[353.45681763 218.35969543]
[338.69790649 220.36557007]
[329.14010620 207.75767517]
[315.39016724 201.76275635]
[301.64022827 195.76782227]
[294.20144653 195.97904968]
[287.66567993 189.49882507]
[274.04519653 183.21533203]
[260.42471313 176.93185425]
[246.80421448 170.64836121]
[233.11824036 164.50881958]
[219.36830139 158.51388550]
[205.61836243 152.51896667]
[191.86842346 146.52403259]
[177.10949707 148.52992249]
[167.55169678 135.92202759]
[153.80175781 129.92709351]
[139.04284668 131.93298340]
[129.48504639 119.32508087]
[115.73510742 113.33015442]
[129.05757141 120.22303772]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 27]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[36 94]
[37 93]
[38 92]
[39 91]
[40 90]
[42 89]
[43 88]
[44 87]
[51 81]
[52 80]
[53 79]
[54 77]
[55 76]
[56 75]
[59 74]
[60 73]
[61 72]
[62 71]
[96 147]
[97 146]
[99 144]
[100 143]
[102 141]
[103 140]
[104 139]
[105 138]
[107 137]
[108 136]
[109 135]
[110 134]
[111 132]
[112 131]
[113 130]
[115 128]
[116 127]
[117 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
