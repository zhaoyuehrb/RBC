%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGAGAAUGCCUGGCAGCGGGGACUGUAACACCAGCGCGGGCGGCAGCGCCAGCGCUGCCGCCGCCGCCGCCGAGAACAAUGGGGAGCGGGGCGAGG\
) } def
/len { sequence length } bind def

/coor [
[103.05671692 139.12117004]
[94.94240570 138.91311646]
[87.04449463 137.04003906]
[79.47725677 149.99136353]
[71.91001129 162.94268799]
[76.16318512 178.16392517]
[68.33491516 191.89321899]
[53.06956100 195.98522949]
[39.42379379 188.01223755]
[35.49340439 172.70448303]
[43.61022186 159.14376831]
[58.95868301 155.37544250]
[66.52592468 142.42411804]
[74.09317017 129.47279358]
[69.16616821 124.27105713]
[65.26708984 118.26017761]
[62.52591705 111.64055634]
[47.61471939 113.27033234]
[32.70352173 114.90011597]
[17.79232597 116.52989960]
[8.09406281 129.00865173]
[-7.59762907 130.89183044]
[-19.97314835 121.06217957]
[-21.69031715 105.35144806]
[-11.73037243 93.08055115]
[3.99762940 91.52957916]
[16.16254234 101.61870575]
[31.07374001 99.98892212]
[45.98493958 98.35913849]
[60.89613724 96.72935486]
[62.27209854 89.21043396]
[65.07962799 82.10091400]
[69.21220398 75.67057800]
[74.51300812 70.16339874]
[80.78090668 65.78836823]
[87.77806091 62.71148300]
[85.91658020 47.82743454]
[84.05509949 32.94338608]
[82.19361877 18.05933762]
[80.33213806 3.17528892]
[78.47065735 -11.70875931]
[69.08058167 -24.44206429]
[75.17863464 -38.03114319]
[73.31715393 -52.91519165]
[71.45567322 -67.79924011]
[69.59419250 -82.68328857]
[59.26953506 -95.42430115]
[65.39308929 -110.63726044]
[81.66546631 -112.67237854]
[91.34704590 -99.43609619]
[84.47824097 -84.54476929]
[86.33972168 -69.66072083]
[88.20120239 -54.77667236]
[90.06268311 -39.89262390]
[99.31961060 -28.22392464]
[93.35470581 -13.57024002]
[95.21618652 1.31380773]
[97.07766724 16.19785500]
[98.93914795 31.08190346]
[100.80062866 45.96595383]
[102.66210938 60.84999847]
[129.61955261 74.26109314]
[139.13851929 102.82595062]
[153.61729431 106.74578094]
[168.09606934 110.66560364]
[182.57484436 114.58543396]
[191.85882568 113.81071472]
[197.43930054 118.85887146]
[211.78916931 123.22708893]
[226.13902283 127.59531403]
[240.48889160 131.96353149]
[254.31213379 124.78330231]
[268.80270386 129.41772461]
[275.56277466 142.64031982]
[289.91265869 147.00854492]
[301.07778931 136.46174622]
[316.02420044 132.92614746]
[330.73135376 137.35281372]
[341.24310303 148.55097961]
[344.73184204 163.50839233]
[340.25909424 178.20159912]
[329.02804565 188.67817688]
[314.05975342 192.12001038]
[299.38064575 187.60124207]
[288.93933105 176.33740234]
[285.54443359 161.35841370]
[271.19454956 156.99018860]
[258.21365356 164.20346069]
[243.59860229 159.97789001]
[236.12068176 146.31340027]
[221.77081299 141.94517517]
[207.42094421 137.57695007]
[193.07107544 133.20874023]
[178.65501404 129.06420898]
[164.17623901 125.14437866]
[149.69746399 121.22455597]
[135.21868896 117.30472565]
[130.90489197 124.18051910]
[125.26873016 130.02166748]
[118.55137634 134.57826233]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 14]
[4 13]
[5 12]
[17 30]
[18 29]
[19 28]
[20 27]
[36 61]
[37 60]
[38 59]
[39 58]
[40 57]
[41 56]
[43 54]
[44 53]
[45 52]
[46 51]
[63 97]
[64 96]
[65 95]
[66 94]
[68 93]
[69 92]
[70 91]
[71 90]
[74 87]
[75 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
