%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:24:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCCUCUGGCGGCGGCUCCCGGGGCCUCCUGGCGUGGCUUCUGCUCCUUCAGCCCUGGCCCGGGCAGAACUGGGCGGGCAUGGCGGCGCCACGCCUCC\
) } def
/len { sequence length } bind def

/coor [
[111.75136566 127.72463226]
[102.96755981 131.07807922]
[93.24515533 131.61297607]
[86.49773407 145.00970459]
[79.75030518 158.40641785]
[81.22467041 174.73916626]
[67.66329956 183.95985413]
[53.01697540 176.58305359]
[52.35257721 160.19737244]
[66.35358429 151.65899658]
[73.10100555 138.26226807]
[79.84843445 124.86554718]
[70.73244476 112.95342255]
[56.03797913 115.96553040]
[44.07261276 126.31639862]
[30.05087852 121.29242706]
[15.35641670 124.30453491]
[0.66195482 127.31663513]
[-14.03250694 130.32875061]
[-28.72696877 133.34085083]
[-43.02932358 142.44464111]
[-55.73662186 131.22140503]
[-48.46972656 115.90381622]
[-31.73907471 118.64638519]
[-17.04461288 115.63428497]
[-2.35015130 112.62217712]
[12.34431076 109.61006927]
[27.03877258 106.59796143]
[37.95309448 96.46253967]
[53.02587509 101.27106476]
[67.72033691 98.25895691]
[87.30545807 74.53748322]
[113.71272278 79.60472107]
[125.48163605 70.30458069]
[137.25054932 61.00443268]
[149.01947021 51.70429230]
[160.78837585 42.40414810]
[172.55729675 33.10400391]
[184.32620239 23.80386162]
[196.09512329 14.50371838]
[198.41270447 1.69802904]
[208.55537415 -5.79535818]
[220.67597961 -4.34309673]
[232.72842407 -13.27272987]
[244.78088379 -22.20236206]
[256.83334351 -31.13199615]
[268.88580322 -40.06163025]
[267.42355347 -50.05615234]
[269.79055786 -59.81543350]
[275.60076904 -67.93405914]
[283.97564697 -73.25981903]
[293.67666626 -75.05714417]
[303.28854370 -73.10845184]
[311.42556763 -67.73945618]
[324.49301147 -75.10437012]
[337.56045532 -82.46927643]
[350.62789917 -89.83419037]
[354.47625732 -95.56214142]
[359.86529541 -97.98452759]
[364.74472046 -97.22174072]
[378.24475098 -103.76000214]
[391.74481201 -110.29827118]
[405.24484253 -116.83654022]
[418.74487305 -123.37480164]
[432.24493408 -129.91307068]
[437.19418335 -144.92240906]
[451.34445190 -151.96125793]
[466.30062866 -146.85357666]
[473.18948364 -132.62966919]
[467.92398071 -117.72833252]
[453.62802124 -110.99026489]
[438.78320312 -116.41303253]
[425.28314209 -109.87476349]
[411.78311157 -103.33649445]
[398.28308105 -96.79823303]
[384.78302002 -90.25996399]
[371.28298950 -83.72170258]
[357.99282837 -76.76674652]
[344.92538452 -69.40183258]
[331.85794067 -62.03692245]
[318.79049683 -54.67201233]
[315.27435303 -34.69897842]
[298.13323975 -23.33859253]
[277.81542969 -28.00917435]
[265.76296997 -19.07954216]
[253.71051025 -10.14990807]
[241.65806580 -1.22027528]
[229.60560608 7.70935774]
[223.59974670 24.11761856]
[205.39526367 26.27263260]
[193.62635803 35.57277679]
[181.85743713 44.87291718]
[170.08851624 54.17306137]
[158.31961060 63.47320557]
[146.55068970 72.77334595]
[134.78178406 82.07349396]
[123.01286316 91.37363434]
[125.64771271 98.64112854]
[125.93949127 106.70012665]
[123.65921783 114.78306580]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 12]
[4 11]
[5 10]
[13 31]
[14 30]
[16 28]
[17 27]
[18 26]
[19 25]
[20 24]
[33 97]
[34 96]
[35 95]
[36 94]
[37 93]
[38 92]
[39 91]
[40 90]
[43 88]
[44 87]
[45 86]
[46 85]
[47 84]
[54 81]
[55 80]
[56 79]
[57 78]
[60 77]
[61 76]
[62 75]
[63 74]
[64 73]
[65 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
