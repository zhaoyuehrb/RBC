%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUGGAGAUAACCAGAGUGAGAACUCACAGUUCCUUCUCCUGGGGAUCUCAGAGAGUCCUGAGCAGCAGCGGAUCCUGUUUUGGAUGUUCCUGUCCA\
) } def
/len { sequence length } bind def

/coor [
[87.22254181 199.04969788]
[90.01123047 179.86967468]
[90.47772980 164.87693787]
[90.94422913 149.88418579]
[91.41072845 134.89144897]
[91.87722778 119.89869690]
[82.34108734 112.25155640]
[78.51683807 100.64156342]
[64.30976868 95.82917786]
[50.10269547 91.01679230]
[35.89561844 86.20440674]
[21.68854713 81.39201355]
[7.64868546 88.13887024]
[-6.69075346 83.05604553]
[-13.03632450 69.62960052]
[-27.24339867 64.81721497]
[-41.45046997 60.00482941]
[-55.65754700 55.19244003]
[-69.93774414 50.60158157]
[-84.28760529 46.23336029]
[-96.65795135 55.41381454]
[-111.88409424 55.54831696]
[-124.12505341 46.79486465]
[-128.80833435 32.68087387]
[-143.15820312 28.31265259]
[-157.50807190 23.94443130]
[-171.85794067 19.57621193]
[-186.20780945 15.20799065]
[-203.12121582 16.37968063]
[-208.92921448 0.45160687]
[-195.23143005 -9.53874111]
[-181.83958435 0.85812485]
[-167.48971558 5.22634554]
[-153.13984680 9.59456635]
[-138.78999329 13.96278667]
[-124.44012451 18.33100700]
[-112.68705750 9.22037888]
[-97.64501953 8.77210331]
[-85.07636261 17.36758041]
[-79.91938782 31.88349533]
[-65.56951904 36.25171661]
[-58.12280655 35.16914368]
[-50.84515762 40.98536682]
[-36.63808441 45.79775620]
[-22.43101120 50.61014175]
[-8.22393799 55.42252731]
[4.97503138 48.61644363]
[19.45157814 53.29450226]
[26.50093269 67.18494415]
[40.70800781 71.99732971]
[54.91508102 76.80971527]
[69.12215424 81.62210083]
[83.32922363 86.43448639]
[102.33523560 78.63450623]
[119.20755768 90.35596466]
[134.11875916 88.72618103]
[149.02995300 87.09639740]
[161.90774536 77.90548706]
[175.40034485 84.21413422]
[190.31155396 82.58435059]
[205.22274780 80.95456696]
[220.13394165 79.32479095]
[233.01174927 70.13387299]
[246.50433350 76.44252777]
[261.41552734 74.81274414]
[276.32672119 73.18296051]
[291.23794556 71.55317688]
[306.14913940 69.92339325]
[321.06033325 68.29360962]
[327.84930420 54.44033432]
[341.06201172 46.47617340]
[356.48233032 46.94246292]
[369.18969727 55.69041824]
[375.12921143 69.92858887]
[372.40560913 85.11363983]
[361.88800049 96.40006256]
[346.93249512 100.18640900]
[332.31134033 95.26446533]
[322.69012451 83.20481110]
[307.77890015 84.83459473]
[292.86770630 86.46437836]
[277.95651245 88.09415436]
[263.04531860 89.72393799]
[248.13412476 91.35372162]
[236.32287598 100.42806244]
[221.76371765 94.23598480]
[206.85252380 95.86576843]
[191.94132996 97.49555206]
[177.03013611 99.12533569]
[165.21888733 108.19966888]
[150.65972900 102.00759888]
[135.74853516 103.63737488]
[120.83734131 105.26715851]
[117.97542572 111.78226471]
[113.14305878 117.00581360]
[106.86996460 120.36519623]
[106.40347290 135.35794067]
[105.93697357 150.35069275]
[105.47047424 165.34342957]
[105.00397491 180.33618164]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 100]
[3 99]
[4 98]
[5 97]
[6 96]
[8 53]
[9 52]
[10 51]
[11 50]
[12 49]
[15 46]
[16 45]
[17 44]
[18 43]
[19 41]
[20 40]
[24 36]
[25 35]
[26 34]
[27 33]
[28 32]
[55 93]
[56 92]
[57 91]
[59 89]
[60 88]
[61 87]
[62 86]
[64 84]
[65 83]
[66 82]
[67 81]
[68 80]
[69 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
