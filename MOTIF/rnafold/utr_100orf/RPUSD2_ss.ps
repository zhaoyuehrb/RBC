%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:23:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCUCAGAUCGCGACCCUGGGAGUGGAGUGGGGGCAGCGUGGUUAUGUGGCUGGACCGCCGCGGAUGGCUCAGGGUUCUUGGACAUUGGCGCUACGACCUUAGGCGCCCUAGCUUUACCAGGACUUGGAGUGGCGAUAAGGGCC\
) } def
/len { sequence length } bind def

/coor [
[116.94913483 789.91748047]
[116.62639618 774.92095947]
[116.30364990 759.92443848]
[115.98091125 744.92791748]
[115.65817261 729.93139648]
[107.61174774 723.49066162]
[104.40897369 713.46258545]
[107.35305786 703.12603760]
[115.69417572 696.00378418]
[116.01691437 681.00726318]
[116.33966064 666.01074219]
[116.66239929 651.01422119]
[116.98513794 636.01770020]
[109.52347565 623.12689209]
[117.55590820 609.49639893]
[117.87864685 594.49987793]
[118.04003143 579.50073242]
[118.04003143 564.50073242]
[110.30272675 551.77343750]
[118.04003143 537.97326660]
[118.04003143 522.97326660]
[103.28533173 510.34765625]
[102.44577026 490.64404297]
[116.49703979 476.37832642]
[115.52941895 461.40957642]
[114.56179047 446.44079590]
[113.59416199 431.47204590]
[112.62653351 416.50329590]
[111.65891266 401.53454590]
[110.69128418 386.56576538]
[102.14907837 374.36413574]
[108.98004150 360.09359741]
[108.01241302 345.12481689]
[107.04478455 330.15606689]
[106.07715607 315.18731689]
[105.10952759 300.21856689]
[101.51325226 293.69934082]
[104.28565216 284.91796875]
[103.64031982 269.93185425]
[89.44061279 258.46200562]
[88.03672028 239.94429016]
[100.77281952 225.99586487]
[99.48334503 211.05139160]
[98.19387817 196.10691833]
[96.90440369 181.16244507]
[93.83507538 177.41761780]
[93.13392639 171.68580627]
[95.89514160 165.54954529]
[95.24980164 150.56343079]
[94.60446930 135.57731628]
[93.95913696 120.59120941]
[93.31380463 105.60509491]
[80.94664001 107.21455383]
[67.98881531 100.84100342]
[58.70874405 89.05625153]
[43.28784561 83.47700500]
[40.67594147 67.28719330]
[53.55992889 57.14151001]
[68.68586731 63.47696686]
[70.49349213 79.77618408]
[79.77355957 91.56092834]
[94.27627563 87.73062897]
[96.52710724 72.90046692]
[90.94820404 58.09552383]
[100.50769806 46.67337799]
[102.75852966 31.84321594]
[105.00936127 17.01305199]
[107.26018524 2.18288755]
[100.23657227 -8.69158745]
[102.46379089 -21.03594780]
[112.20106506 -28.28929329]
[114.77046204 -43.06759262]
[117.33985901 -57.84589386]
[119.90925598 -72.62419891]
[122.47865295 -87.40249634]
[119.23480988 -104.04322815]
[134.32722473 -111.76690674]
[145.92706299 -99.40243530]
[137.25695801 -84.83309937]
[134.68756104 -70.05480194]
[132.11816406 -55.27649689]
[129.54876709 -40.49819565]
[126.97936249 -25.71989441]
[133.91905212 -9.63499832]
[122.09035492 4.43371868]
[119.83952332 19.26388168]
[117.58869171 34.09404755]
[115.33786011 48.92420959]
[121.07775879 62.66840363]
[111.35727692 75.15129852]
[109.10644531 89.98146057]
[108.29991913 104.95976257]
[108.94525146 119.94587708]
[109.59058380 134.93199158]
[110.23591614 149.91810608]
[110.88124847 164.90420532]
[111.84887695 179.87297058]
[113.13835144 194.81744385]
[114.42781830 209.76191711]
[115.71729279 224.70639038]
[126.20215607 230.49104309]
[132.49932861 240.53459167]
[133.12574768 252.25193787]
[128.04063416 262.69323730]
[118.62642670 269.28652954]
[119.27175903 284.27261353]
[120.07828522 299.25091553]
[121.04591370 314.21969604]
[122.01354218 329.18844604]
[122.98117065 344.15719604]
[123.94879150 359.12594604]
[132.56021118 372.39825439]
[125.66004181 385.59814453]
[126.62766266 400.56689453]
[127.59529114 415.53567505]
[128.56292725 430.50442505]
[129.53054810 445.47317505]
[130.49816895 460.44192505]
[131.46580505 475.41070557]
[141.09338379 480.29364014]
[147.74404907 488.69338989]
[150.25059509 499.02645874]
[148.21907043 509.38061523]
[142.08888245 517.86889648]
[133.04002380 522.97326660]
[133.04002380 537.97326660]
[140.77732849 551.77343750]
[133.04002380 564.50073242]
[133.04002380 579.50073242]
[136.18765259 588.15472412]
[132.87518311 594.82257080]
[132.55242920 609.81915283]
[139.99101257 623.78259277]
[131.98167419 636.34045410]
[131.65892029 651.33697510]
[131.33618164 666.33349609]
[131.01344299 681.33001709]
[130.69070435 696.32653809]
[141.21669006 713.46258545]
[130.65469360 729.60864258]
[130.97743225 744.60516357]
[131.30018616 759.60168457]
[131.62292480 774.59820557]
[131.94566345 789.59478760]
[134.55035400 808.80065918]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 144]
[2 143]
[3 142]
[4 141]
[5 140]
[9 138]
[10 137]
[11 136]
[12 135]
[13 134]
[15 132]
[16 131]
[17 129]
[18 128]
[20 126]
[21 125]
[24 119]
[25 118]
[26 117]
[27 116]
[28 115]
[29 114]
[30 113]
[32 111]
[33 110]
[34 109]
[35 108]
[36 107]
[38 106]
[39 105]
[42 100]
[43 99]
[44 98]
[45 97]
[48 96]
[49 95]
[50 94]
[51 93]
[52 92]
[54 61]
[55 60]
[62 91]
[63 90]
[65 88]
[66 87]
[67 86]
[68 85]
[71 83]
[72 82]
[73 81]
[74 80]
[75 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
