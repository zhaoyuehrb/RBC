%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGGCGGGACCGGGGCAUCUCGGGGCGGGGCUUGGGGCUGGAUCUAUGAGCCGGGAGCGGGGAUCCAGGAGCGAGGAGCCGGGAGCGGGGAACAGGGAGUCGGGGAGCCGGGAACCAGGGCUGGCAGCGGCCGCCAUGAGCACGG\
) } def
/len { sequence length } bind def

/coor [
[80.52330017 226.86421204]
[84.20660400 212.11627197]
[93.25733948 199.90347290]
[106.29534149 192.08816528]
[104.05970764 177.25569153]
[101.82407379 162.42323303]
[99.58843994 147.59077454]
[97.35280609 132.75831604]
[87.02640533 131.92768860]
[77.01013947 127.78203583]
[68.38043213 120.45402527]
[58.17784119 131.44981384]
[47.97525024 142.44558716]
[37.77265930 153.44136047]
[27.57006645 164.43713379]
[24.45041847 180.53681946]
[8.86172676 185.62846375]
[-3.15969849 174.47421265]
[0.75275367 158.54859924]
[16.57428932 154.23454285]
[26.77688026 143.23876953]
[36.97946930 132.24299622]
[47.18206024 121.24721527]
[57.38465118 110.25143433]
[56.42359924 95.28225708]
[44.89866257 85.68143463]
[33.37372589 76.08060455]
[21.88726044 79.45850372]
[10.32179832 76.86574554]
[1.55650759 69.06739807]
[-2.28472567 58.10926437]
[-0.34727249 46.78221130]
[-11.45144272 36.69770050]
[-22.55561256 26.61318588]
[-33.65978241 16.52867317]
[-48.76768112 19.53824806]
[-62.58926773 13.14941406]
[-69.91198730 0.00248529]
[-68.11067963 -14.75872421]
[-79.21485138 -24.84323692]
[-90.31902313 -34.92774963]
[-101.42319489 -45.01226425]
[-112.52735901 -55.09677887]
[-123.63153076 -65.18128967]
[-134.73570251 -75.26580048]
[-145.83987427 -85.35031891]
[-148.14161682 -70.52796936]
[-161.05526733 -62.89660263]
[-175.14968872 -68.02957153]
[-180.13140869 -82.17815399]
[-172.36216736 -95.00933075]
[-157.51643372 -97.15232086]
[-167.48171997 -108.36361694]
[-177.44700623 -119.57491302]
[-193.17272949 -124.22608185]
[-196.74397278 -140.23165894]
[-184.48692322 -151.12646484]
[-169.01060486 -145.70286560]
[-166.23570251 -129.54019165]
[-156.27043152 -118.32890320]
[-146.30514526 -107.11760712]
[-135.75535583 -96.45449066]
[-124.65119171 -86.36997223]
[-113.54701996 -76.28546143]
[-102.44284821 -66.20095062]
[-91.33867645 -56.11643219]
[-80.23451233 -46.03192139]
[-69.13034058 -35.94740677]
[-58.02616882 -25.86289406]
[-43.50613785 -29.07329178]
[-29.71680832 -23.04681587]
[-22.03030586 -9.90257454]
[-23.57526970 5.42450237]
[-12.47109890 15.50901604]
[-1.36692905 25.59352875]
[9.73724079 35.67804337]
[27.87965584 33.65703964]
[42.02644348 45.68994141]
[42.97454834 64.55567169]
[54.49948883 74.15649414]
[66.02442169 83.75731659]
[77.26471710 71.19053650]
[92.50236511 65.05410767]
[108.45035553 66.25964355]
[121.84557343 74.17716217]
[130.11643982 86.84268951]
[144.86962891 84.13280487]
[157.04490662 74.02968597]
[170.96058655 79.34037781]
[185.71376038 76.63048553]
[189.73097229 63.19165802]
[199.11322021 52.85445786]
[211.97821045 47.60758972]
[225.78140259 48.42697525]
[237.81927490 55.09476089]
[245.75889587 66.25325775]
[260.56661987 63.85926056]
[267.63327026 50.17098999]
[281.24588013 43.34821320]
[296.09020996 45.82005310]
[306.50787354 56.43183517]
[321.31561279 54.03783798]
[336.12332153 51.64383698]
[350.93106079 49.24983978]
[363.29367065 38.47495270]
[378.71640015 44.04906082]
[381.33370972 60.23800278]
[368.45309448 70.38797760]
[353.32504272 64.05756378]
[338.51733398 66.45156860]
[323.70959473 68.84556580]
[308.90188599 71.23956299]
[302.35876465 84.59342957]
[289.04959106 91.61691284]
[273.98052979 89.43116760]
[262.96063232 78.66698456]
[248.15289307 81.06098938]
[242.80337524 96.27420807]
[230.45384216 106.78981018]
[214.39813232 109.67935181]
[198.98126221 104.06509399]
[188.42366028 91.38367462]
[173.67047119 94.09355927]
[162.55043030 104.00284576]
[147.57951355 98.88598633]
[132.82632446 101.59587860]
[131.93110657 107.77939606]
[129.88183594 113.68175507]
[126.75258636 119.08962250]
[122.65644836 123.80756378]
[117.74146271 127.66505432]
[112.18527222 130.52267456]
[114.42090607 145.35513306]
[116.65653992 160.18760681]
[118.89217377 175.02006531]
[121.12780762 189.85252380]
[135.89016724 193.47760010]
[148.13859558 202.48007202]
[156.00529480 215.48713684]
[158.29063416 230.51528931]
[154.64614868 245.27287292]
[145.62757874 257.50942993]
[132.61018372 265.35900879]
[117.57902527 267.62460327]
[102.82625580 263.96069336]
[90.60155487 254.92604065]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 136]
[5 135]
[6 134]
[7 133]
[8 132]
[11 24]
[12 23]
[13 22]
[14 21]
[15 20]
[25 81]
[26 80]
[27 79]
[32 76]
[33 75]
[34 74]
[35 73]
[39 69]
[40 68]
[41 67]
[42 66]
[43 65]
[44 64]
[45 63]
[46 62]
[52 61]
[53 60]
[54 59]
[86 126]
[87 125]
[89 123]
[90 122]
[96 117]
[97 116]
[101 112]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
