%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUGGUUCAAAAGCAGCUAAACCAAAAGAAGCCUCCAGACAGCCCUGAGAUCACCUAAAAAGCUGCUACCAAGACAGCCACGAAGAUCCUACCAAAAUGAAGCGCUUCCUCUUCCUCCUACUCACCAUCAGCCUCCUGGUUAUGGUACAGAUACAAACUGGACUCUCAGGACAAAACGACACCAGCCAAACCAGCA\
) } def
/len { sequence length } bind def

/coor [
[30.22876167 553.68994141]
[19.29140663 542.28161621]
[19.70795441 526.48278809]
[31.23127556 515.66668701]
[31.46806908 500.66854858]
[31.70486259 485.67044067]
[31.94165611 470.67230225]
[32.17844772 455.67416382]
[32.41524124 440.67602539]
[23.53354836 439.35427856]
[14.82549000 437.16308594]
[6.37596083 434.12384033]
[-1.73266923 430.26614380]
[-9.42135239 425.62765503]
[-16.61513519 420.25354004]
[-27.09541321 430.98498535]
[-27.07967949 446.56179810]
[-37.86104584 457.29571533]
[-52.71126556 457.21472168]
[-63.19153976 467.94616699]
[-60.45019531 483.21914673]
[-67.23993683 497.17190552]
[-80.94997406 504.43927002]
[-96.30850983 502.22680664]
[-107.40987396 491.38525391]
[-109.98537445 476.08340454]
[-103.04467773 462.20513916]
[-89.25661469 455.08694458]
[-73.92298126 457.46588135]
[-63.44270325 446.73443604]
[-63.87530136 431.89028931]
[-53.39968491 420.85778809]
[-37.82685089 420.50469971]
[-27.34657478 409.77325439]
[-38.22306442 394.26861572]
[-45.65508652 376.84277344]
[-49.31837845 358.25033569]
[-49.05194855 339.29696655]
[-44.86513138 320.80441284]
[-36.93727493 303.57489014]
[-25.61007500 288.35629272]
[-11.37284184 275.80978394]
[5.15864420 266.48092651]
[23.26875687 260.77615356]
[42.17300415 258.94488525]
[61.05201340 261.06872559]
[65.48411560 246.73844910]
[69.91621399 232.40818787]
[74.34832001 218.07792664]
[78.78041840 203.74765015]
[83.21252441 189.41738892]
[87.64462280 175.08712769]
[91.96347046 160.72232056]
[96.16880035 146.32388306]
[86.65849304 157.92362976]
[73.57992554 165.26875305]
[58.72538757 167.35269165]
[44.13056946 163.88984680]
[31.79555893 155.35478210]
[23.41075706 142.91712952]
[20.12522507 128.28137207]
[22.38921738 113.45320892]
[29.89247322 100.46471405]
[41.60316849 91.09772491]
[30.15489388 81.40561676]
[18.70662117 71.71350861]
[7.25834560 62.02139282]
[-4.26607561 52.41995239]
[-15.86592579 42.90977478]
[-32.12641907 40.78176117]
[-38.16299057 25.53407860]
[-27.76573753 12.85223484]
[-11.63045979 15.78222370]
[-6.35574770 31.30992317]
[5.24410200 40.82010269]
[12.41695404 42.63154221]
[16.95045662 50.57312012]
[28.39873123 60.26523209]
[39.84700394 69.95734406]
[51.29528046 79.64945221]
[58.12421036 76.54853058]
[59.58188629 61.61952972]
[71.78207397 70.34669495]
[78.61100769 67.24577332]
[78.84780121 52.24764633]
[79.08459473 37.24951553]
[79.32138824 22.25138474]
[79.55818176 7.25325346]
[65.00904846 3.28164673]
[51.90511703 -4.18412161]
[41.07009888 -14.67474651]
[33.18509674 -27.53077888]
[28.74577141 -41.94408035]
[28.03117943 -57.00861359]
[31.08624077 -71.77741241]
[37.71891022 -85.32209778]
[47.51225662 -96.79123688]
[59.85066223 -105.46387482]
[73.95851898 -110.79483795]
[88.94899750 -112.44902039]
[103.87979126 -110.32243347]
[117.81232452 -104.54875946]
[129.87078857 -95.49094391]
[139.29719543 -83.71835327]
[145.49897766 -69.97103882]
[148.08628845 -55.11315918]
[146.89648438 -40.07868958]
[142.00436401 -25.81271935]
[133.71743774 -13.21201134]
[122.55665588 -3.06866026]
[109.22356415 3.97971463]
[94.55631256 7.49004698]
[94.31951904 22.48817825]
[94.08272552 37.48630905]
[93.84593201 52.48443985]
[93.60913849 67.48256683]
[99.79956818 71.71678162]
[107.19786072 58.66820908]
[114.59615326 45.61963654]
[120.85832214 31.98933029]
[135.85536194 32.28764725]
[141.57052612 46.15620422]
[131.13778687 56.93399811]
[121.65910339 68.55960083]
[112.18042755 80.18521118]
[118.37086487 84.41941833]
[132.26280212 78.76131439]
[146.15472412 73.10320282]
[160.04666138 67.44509125]
[173.93859863 61.78698349]
[180.71398926 55.64570999]
[188.09475708 56.15111542]
[202.07427979 50.71300888]
[216.05380249 45.27490616]
[230.03332520 39.83680344]
[239.86892700 26.71457100]
[256.11642456 28.93971443]
[262.06176758 44.22319794]
[251.58891296 56.84268188]
[235.47143555 53.81632614]
[221.49191284 59.25442886]
[207.51239014 64.69253540]
[193.53286743 70.13063812]
[179.59671021 75.67891693]
[165.70477295 81.33702850]
[151.81283569 86.99513245]
[137.92089844 92.65324402]
[124.02896881 98.31135559]
[125.32981873 113.25550842]
[126.63053894 128.19833374]
[141.29116821 131.37103271]
[155.95179749 134.54374695]
[168.19805908 124.81939697]
[183.82846069 125.29354095]
[195.46278381 135.74229431]
[197.60766602 151.23208618]
[189.25035095 164.44909668]
[174.33691406 169.15266418]
[159.90902710 163.12190247]
[152.77908325 149.20436096]
[138.11846924 146.03166199]
[123.45783997 142.85896301]
[110.56724548 150.52920532]
[106.36191559 164.92765808]
[106.95954132 174.05256653]
[101.97488403 179.51922607]
[97.54278564 193.84948730]
[93.11068726 208.17976379]
[88.67858124 222.51002502]
[84.24648285 236.84028625]
[79.81437683 251.17054749]
[75.38227844 265.50082397]
[86.99168396 271.17111206]
[97.68193054 278.42303467]
[107.23902893 287.11059570]
[115.47180939 297.05914307]
[122.21570587 308.06881714]
[127.33606720 319.91854858]
[130.73081970 332.37045288]
[132.33251953 345.17471313]
[132.10972595 358.07455444]
[130.06752014 370.81134033]
[126.24751282 383.12979126]
[120.72691345 394.78314209]
[113.61698151 405.53799438]
[105.06082916 415.17910767]
[95.23047638 423.51361084]
[84.32344055 430.37487793]
[72.55875397 435.62588501]
[60.17256165 439.16195679]
[47.41337204 440.91284180]
[47.17657852 455.91094971]
[46.93978500 470.90908813]
[46.70299149 485.90722656]
[46.46619797 500.90536499]
[46.22940445 515.90350342]
[57.40553284 527.07800293]
[57.32312775 542.88208008]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 196]
[5 195]
[6 194]
[7 193]
[8 192]
[9 191]
[15 34]
[16 33]
[19 30]
[20 29]
[46 172]
[47 171]
[48 170]
[49 169]
[50 168]
[51 167]
[52 166]
[53 164]
[54 163]
[64 80]
[65 79]
[66 78]
[67 77]
[68 75]
[69 74]
[84 116]
[85 115]
[86 114]
[87 113]
[88 112]
[126 148]
[127 147]
[128 146]
[129 145]
[130 144]
[132 143]
[133 142]
[134 141]
[135 140]
[150 162]
[151 161]
[152 160]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
