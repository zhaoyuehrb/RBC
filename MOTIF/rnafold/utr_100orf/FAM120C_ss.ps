%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCAGAUCGUCGCCUAUCCUGCUUGCGCAGCCGCUAUCGCGUCUGCCCACCGACGAAGCAUGGGUGUCCAGGGCUUCCAAGAGUUCCUGGAGAAGCGCUGUCCCGGGGCCGUGGUGCCCGUGGACCUCCUAAAACUCGCGCGCACGGUCUCGCGCCAGC\
) } def
/len { sequence length } bind def

/coor [
[80.07847595 113.14065552]
[65.59591675 117.04650116]
[51.11336517 120.95233917]
[36.63080978 124.85817719]
[22.14825249 128.76402283]
[13.38353825 145.51512146]
[-4.52137852 150.50613403]
[-20.14367676 141.03413391]
[-34.46281433 145.50204468]
[-48.78195190 149.96997070]
[-63.10108948 154.43789673]
[-77.42022705 158.90580750]
[-91.73936462 163.37373352]
[-77.81086731 168.94120789]
[-67.85570526 180.16149902]
[-63.98622513 194.65380859]
[-67.02346039 209.34309387]
[-76.32296753 221.11251831]
[-89.91152191 227.46478271]
[-104.90584564 227.05201721]
[-118.12435913 219.96182251]
[-126.76230621 207.69863892]
[-128.98683167 192.86450195]
[-124.32594299 178.60700989]
[-113.76875305 167.95149231]
[-128.68244934 169.55822754]
[-141.57444763 178.72921753]
[-155.05728149 172.39971924]
[-169.97097778 174.00645447]
[-184.88467407 175.61318970]
[-199.79837036 177.21992493]
[-212.69035339 186.39093018]
[-226.17318726 180.06143188]
[-241.08688354 181.66816711]
[-256.00057983 183.27490234]
[-268.91625977 193.38021851]
[-284.02230835 186.99745178]
[-285.77890015 170.69265747]
[-272.37902832 161.23880005]
[-257.60733032 168.36120605]
[-242.69361877 166.75447083]
[-227.77992249 165.14773560]
[-215.95466614 156.09165955]
[-201.40510559 162.30622864]
[-186.49140930 160.69949341]
[-171.57771301 159.09275818]
[-156.66401672 157.48602295]
[-144.83874512 148.42994690]
[-130.28918457 154.64453125]
[-115.37548828 153.03779602]
[-107.36976624 146.88662720]
[-96.20728302 149.05459595]
[-81.88814545 144.58666992]
[-67.56900787 140.11875916]
[-53.24987030 135.65083313]
[-38.93073273 131.18290710]
[-24.61159706 126.71499634]
[-21.60614777 115.64790344]
[-13.53156662 107.33613586]
[-2.32605577 103.94188690]
[9.23856640 106.42640686]
[18.24241257 114.28146362]
[32.72496796 110.37562561]
[47.20752335 106.46978760]
[61.69007874 102.56394196]
[76.17263031 98.65810394]
[80.91403198 85.67276001]
[92.05937195 77.49465942]
[91.76669312 62.49751282]
[91.47401428 47.50037003]
[91.18134308 32.50322342]
[90.88866425 17.50608063]
[90.59598541 2.50893521]
[90.30331421 -12.48820877]
[89.86433411 -27.48178482]
[89.27909088 -42.47036362]
[88.69384766 -57.45894241]
[79.49349213 -71.03411865]
[86.89224243 -85.66936493]
[103.27890015 -86.30919647]
[111.79627991 -72.29541016]
[103.68242645 -58.04418182]
[104.26766968 -43.05560303]
[104.85291290 -28.06702614]
[108.27355194 -21.47262955]
[105.30045319 -12.78088570]
[105.59313202 2.21625900]
[105.88581085 17.21340370]
[106.17848206 32.21054840]
[106.47116089 47.20769119]
[106.76383972 62.20483780]
[107.05651093 77.20198059]
[111.69873047 79.19895172]
[115.81639099 82.12863159]
[119.22484589 85.85964966]
[121.77126312 90.22472382]
[123.34147644 95.02810669]
[123.86505890 100.05443573]
[138.09429932 104.80089569]
[152.32353210 109.54735565]
[166.55276489 114.29381561]
[179.16174316 105.44396210]
[194.38610840 105.71246338]
[206.39111328 114.78680420]
[210.69923401 129.01980591]
[224.92846680 133.76626587]
[239.15769958 138.51272583]
[253.38693237 143.25918579]
[267.61618042 148.00564575]
[281.84539795 152.75210571]
[296.07464600 157.49856567]
[310.30386353 162.24502563]
[324.53311157 166.99148560]
[338.76235962 171.73794556]
[353.03720093 176.34535217]
[367.35635376 180.81327820]
[381.67547607 185.28118896]
[395.99462891 189.74911499]
[409.86746216 182.66519165]
[424.32546997 187.40028381]
[430.99340820 200.66958618]
[445.31253052 205.13749695]
[459.79510498 209.04333496]
[474.41900635 212.38114929]
[489.92156982 207.03300476]
[502.12539673 217.98739624]
[498.47625732 233.97537231]
[482.72805786 238.54989624]
[471.08120728 227.00508118]
[456.45727539 223.66726685]
[453.98724365 225.09170532]
[450.79031372 225.59808350]
[447.22280884 224.89921570]
[443.74008179 222.84567261]
[440.84463501 219.45663452]
[426.52548218 214.98872375]
[413.49472046 222.11154175]
[398.90942383 217.78440857]
[391.52670288 204.06825256]
[377.20758057 199.60032654]
[362.88842773 195.13241577]
[348.56930542 190.66448975]
[341.21014404 191.67929077]
[334.01589966 185.96717834]
[319.78665161 181.22071838]
[305.55740356 176.47425842]
[291.32818604 171.72779846]
[277.09893799 166.98133850]
[262.86972046 162.23487854]
[248.64047241 157.48841858]
[234.41123962 152.74195862]
[220.18200684 147.99549866]
[205.95277405 143.24903870]
[193.96272278 152.04542542]
[178.91407776 152.09545898]
[166.57730103 143.17036438]
[161.80630493 128.52305603]
[147.57707214 123.77658844]
[133.34783936 119.03012848]
[119.11859894 114.28366852]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 66]
[2 65]
[3 64]
[4 63]
[5 62]
[8 57]
[9 56]
[10 55]
[11 54]
[12 53]
[13 52]
[25 50]
[26 49]
[28 47]
[29 46]
[30 45]
[31 44]
[33 42]
[34 41]
[35 40]
[68 92]
[69 91]
[70 90]
[71 89]
[72 88]
[73 87]
[74 86]
[75 84]
[76 83]
[77 82]
[98 160]
[99 159]
[100 158]
[101 157]
[105 153]
[106 152]
[107 151]
[108 150]
[109 149]
[110 148]
[111 147]
[112 146]
[113 145]
[114 144]
[115 142]
[116 141]
[117 140]
[118 139]
[121 136]
[122 135]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
