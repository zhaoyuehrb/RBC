%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:12:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGCGGGGCGCAGCGGGCAGGCAAGGGCGGCCGAGCGGGCGGCGGGCAUGAGCGGGGCGGGCAGGGCGCUGGCCGCGCUGCUGCUGGCCGCGUCCGUGCUGAGCGCCGCGCUGCUGGCCCCCGGCGGCUCUUCGGGGCGCGAUGCCC\
) } def
/len { sequence length } bind def

/coor [
[87.59126282 531.18804932]
[90.18762970 511.98104858]
[90.50387573 496.98440552]
[90.82011414 481.98773193]
[91.13636017 466.99105835]
[91.45260620 451.99438477]
[80.99163818 441.45382690]
[81.09871674 426.24057007]
[92.22557068 415.33959961]
[92.54181671 400.34292603]
[92.85805511 385.34628296]
[93.17430115 370.34960938]
[82.71333313 359.80902100]
[82.82041168 344.59576416]
[93.94726562 333.69482422]
[94.26351166 318.69815063]
[94.10537720 303.69897461]
[93.47303009 288.71231079]
[92.84068298 273.72564697]
[84.12716675 265.27410889]
[83.51597595 252.74838257]
[91.88397217 242.87507629]
[91.56772614 227.87841797]
[83.03433228 219.24505615]
[82.68735504 206.70921326]
[91.26165009 197.01452637]
[91.26165009 182.01452637]
[91.26165009 167.01452637]
[88.09503174 160.28010559]
[91.42311859 151.69912720]
[91.73936462 136.70245361]
[92.05560303 121.70578766]
[92.37184906 106.70912170]
[89.36328888 99.16751099]
[92.85617065 91.40052032]
[93.48851776 76.41385651]
[94.12087250 61.42719269]
[94.75321960 46.44052505]
[95.38556671 31.45386124]
[95.85988617 16.46136093]
[96.17613220 1.46469581]
[96.49237823 -13.53197002]
[96.80862427 -28.52863693]
[97.12486267 -43.52530289]
[97.44110870 -58.52196884]
[97.28298187 -73.52113342]
[96.65062714 -88.50779724]
[96.01828003 -103.49446869]
[95.38593292 -118.48113251]
[94.75358582 -133.46778870]
[94.12123871 -148.45446777]
[85.80905151 -161.91618347]
[93.00292969 -174.95832825]
[92.37058258 -189.94499207]
[91.73823547 -204.93165588]
[83.42604828 -218.39338684]
[90.61993408 -231.43551636]
[89.98758698 -246.42218018]
[89.35523987 -261.40884399]
[81.04304504 -274.87057495]
[88.23693085 -287.91271973]
[87.60458374 -302.89938354]
[86.97223663 -317.88604736]
[86.33988953 -332.87271118]
[85.70754242 -347.85937500]
[84.91723633 -362.83853149]
[83.96906281 -377.80853271]
[83.02089691 -392.77853394]
[82.07272339 -407.74853516]
[81.12455750 -422.71853638]
[70.08488464 -434.35922241]
[72.44541931 -450.22766113]
[86.39536285 -458.15097046]
[101.23350525 -452.05102539]
[105.57730103 -436.60723877]
[96.09455872 -423.66671753]
[97.04272461 -408.69671631]
[97.99089813 -393.72671509]
[98.93907166 -378.75671387]
[99.88723755 -363.78671265]
[103.47322083 -357.26589966]
[100.69420624 -348.49172974]
[101.32655334 -333.50506592]
[101.95890045 -318.51837158]
[102.59124756 -303.53170776]
[103.22359467 -288.54504395]
[111.49055481 -276.15527344]
[104.34190369 -262.04119873]
[104.97425079 -247.05453491]
[105.60659790 -232.06785583]
[113.87355804 -219.67808533]
[106.72489929 -205.56399536]
[107.35725403 -190.57733154]
[107.98960114 -175.59066772]
[116.25656128 -163.20089722]
[109.10790253 -149.08680725]
[109.74024963 -134.10014343]
[110.37259674 -119.11347961]
[111.00495148 -104.12681580]
[111.63729858 -89.14014435]
[112.26964569 -74.15348053]
[114.66893005 -71.48294830]
[115.85826111 -67.49294281]
[115.22065735 -62.78189850]
[112.43777466 -58.20572281]
[112.12152863 -43.20905685]
[111.80529022 -28.21239090]
[111.48904419 -13.21572590]
[111.17279816 1.78094006]
[110.85655212 16.77760696]
[113.88049316 23.57729912]
[110.37223053 32.08620834]
[109.73988342 47.07287216]
[109.10753632 62.05953979]
[108.47518921 77.04620361]
[107.84284210 92.03286743]
[107.36851501 107.02536774]
[107.05226898 122.02203369]
[106.73603058 137.01870728]
[106.41978455 152.01536560]
[106.26165009 167.01452637]
[106.26165009 182.01452637]
[106.26165009 197.01452637]
[115.84474945 212.70184326]
[106.56439209 227.56216431]
[106.88063812 242.55883789]
[116.79234314 258.04061890]
[107.82734680 273.09329224]
[108.45969391 288.07995605]
[109.09204102 303.06661987]
[111.97078705 307.58312988]
[112.70757294 312.27966309]
[111.60262299 316.29388428]
[109.26017761 319.01440430]
[108.94393158 334.01104736]
[119.60134125 345.37139893]
[119.06699371 360.57565308]
[108.17096710 370.66586304]
[107.85472107 385.66250610]
[107.53848267 400.65917969]
[107.22223663 415.65585327]
[117.87964630 427.01617432]
[117.34529877 442.22042847]
[106.44927216 452.31063843]
[106.13302612 467.30731201]
[105.81678009 482.30395508]
[105.50054169 497.30062866]
[105.18429565 512.29730225]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[9 141]
[10 140]
[11 139]
[12 138]
[15 135]
[16 134]
[17 130]
[18 129]
[19 128]
[22 126]
[23 125]
[26 123]
[27 122]
[28 121]
[30 120]
[31 119]
[32 118]
[33 117]
[35 116]
[36 115]
[37 114]
[38 113]
[39 112]
[40 110]
[41 109]
[42 108]
[43 107]
[44 106]
[45 105]
[46 101]
[47 100]
[48 99]
[49 98]
[50 97]
[51 96]
[53 94]
[54 93]
[55 92]
[57 90]
[58 89]
[59 88]
[61 86]
[62 85]
[63 84]
[64 83]
[65 82]
[66 80]
[67 79]
[68 78]
[69 77]
[70 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
