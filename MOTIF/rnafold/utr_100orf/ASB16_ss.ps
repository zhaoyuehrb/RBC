%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:55:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCCUCAGAGCAAGGGAGGUAGUCGGGUCGAGGGAACCUGGCUCUGCCCAGGUGCCACUGCCCAAACCCCUGGGCCCCAUCCAUGGCAAGAGAGACCUUCCCCUUCACCUCCUCCAUGCUGCGCUCUCUCCGCCUGCAGCAGGAGUGGCUGGAAUGGGAGGACCGGCGGCGGGCGGCUGCCC\
) } def
/len { sequence length } bind def

/coor [
[121.55807495 121.02056885]
[108.91002655 133.87475586]
[105.13035583 148.39074707]
[101.35068512 162.90673828]
[97.57101440 177.42272949]
[102.44667053 193.08032227]
[91.12730408 204.94641113]
[75.25730896 200.81417847]
[71.16237640 184.93452454]
[83.05502319 173.64306641]
[86.83469391 159.12707520]
[90.61436462 144.61106873]
[94.39403534 130.09507751]
[88.63961029 125.28502655]
[77.13077545 115.66490936]
[71.37635803 110.85485077]
[57.76087952 117.14920044]
[44.14540482 123.44355011]
[34.86576462 136.25755310]
[20.06648827 134.57508850]
[6.45101404 140.86943054]
[-0.04364840 147.32585144]
[-7.44952202 147.15287781]
[-21.16991615 153.21511841]
[-34.89031219 159.27735901]
[-48.61070633 165.33959961]
[-62.33110046 171.40184021]
[-76.05149841 177.46408081]
[-89.77188873 183.52632141]
[-103.44031525 189.70484924]
[-117.05579376 195.99919128]
[-126.05891418 209.70597839]
[-142.41310120 208.49243164]
[-149.29455566 193.60694885]
[-139.62425232 180.36244202]
[-123.35014343 182.38371277]
[-109.73466492 176.08937073]
[-104.97164154 170.41571045]
[-95.83412933 169.80592346]
[-82.11373901 163.74368286]
[-68.39334106 157.68144226]
[-54.67294693 151.61920166]
[-40.95255280 145.55696106]
[-27.23215866 139.49472046]
[-13.51176357 133.43247986]
[0.15666363 127.25395966]
[13.77213860 120.95960999]
[22.07790947 108.59581757]
[37.85105515 109.82807922]
[51.46652985 103.53372955]
[65.08200073 97.23937225]
[86.89200592 75.65269470]
[109.79471588 82.24642944]
[121.38481903 72.72437286]
[126.04304504 64.83978271]
[133.25354004 63.14105606]
[145.00366211 53.81718445]
[146.95274353 38.36277390]
[159.00186157 29.07442856]
[173.72328186 31.02782059]
[185.47340393 21.70395088]
[197.22352600 12.38008213]
[208.97364807 3.05621290]
[220.72378540 -6.26765633]
[232.47390747 -15.59152603]
[233.09532166 -26.47957420]
[239.48548889 -35.04428101]
[249.33209229 -38.59146118]
[259.28878784 -36.17303467]
[271.34872437 -45.09253311]
[277.84317017 -59.51934052]
[292.67672729 -60.86663055]
[304.73669434 -69.78613281]
[316.79663086 -78.70562744]
[328.85659790 -87.62512207]
[333.24893188 -101.96762848]
[328.25183105 -116.11078644]
[323.25473022 -130.25395203]
[308.34201050 -134.54229736]
[298.82455444 -146.79782104]
[298.36203003 -162.30799866]
[307.13229370 -175.10887146]
[321.76300049 -180.27821350]
[336.62832642 -175.82833862]
[346.01226807 -163.47030640]
[346.30651855 -147.95602417]
[337.39791870 -135.25105286]
[342.39498901 -121.10788727]
[347.39208984 -106.96472168]
[349.78732300 -121.77224731]
[350.09735107 -136.76904297]
[359.71301270 -148.28161621]
[374.41476440 -151.25799561]
[387.75115967 -144.39208984]
[393.86993408 -130.69682312]
[390.08602905 -116.18192291]
[378.05783081 -107.21620178]
[367.39620972 -96.66491699]
[381.81121826 -100.81307983]
[396.22622681 -104.96124268]
[410.64126587 -109.10940552]
[425.05627441 -113.25756836]
[439.47128296 -117.40572357]
[447.15740967 -130.95420837]
[461.83538818 -134.95568848]
[474.70440674 -127.54464722]
[489.11944580 -131.69281006]
[503.53445435 -135.84097290]
[517.94946289 -139.98913574]
[532.32873535 -144.25953674]
[546.67126465 -148.65188599]
[553.40979004 -159.66734314]
[565.46356201 -163.02236938]
[576.21173096 -157.44114685]
[590.62677002 -161.58930969]
[605.04180908 -165.73747253]
[619.45678711 -169.88563538]
[626.85870361 -175.27803040]
[634.15191650 -173.97961426]
[648.63525391 -177.88240051]
[663.11865234 -181.78518677]
[677.60205078 -185.68795776]
[692.08538818 -189.59074402]
[706.56878662 -193.49353027]
[720.98382568 -197.64169312]
[735.32629395 -202.03404236]
[741.26263428 -216.50103760]
[755.13323975 -223.72181702]
[770.38891602 -220.28691101]
[779.82635498 -207.81820679]
[778.98950195 -192.20303345]
[768.27349854 -180.81439209]
[752.73809814 -179.02966309]
[739.71862793 -187.69154358]
[725.37615967 -183.29919434]
[722.37603760 -179.55653381]
[716.98400879 -177.67225647]
[710.47155762 -179.01016235]
[695.98822021 -175.10737610]
[681.50482178 -171.20458984]
[667.02142334 -167.30180359]
[652.53808594 -163.39901733]
[638.05468750 -159.49623108]
[623.60498047 -155.47061157]
[609.18994141 -151.32244873]
[594.77490234 -147.17428589]
[580.35992432 -143.02612305]
[568.89434814 -129.75335693]
[551.06359863 -134.30937195]
[536.72106934 -129.91703796]
[531.23352051 -124.94072723]
[522.09765625 -125.57411194]
[507.68261719 -121.42594910]
[493.26760864 -117.27778625]
[478.85256958 -113.12963104]
[471.89102173 -100.01200104]
[457.33123779 -95.59983063]
[443.61944580 -102.99070740]
[429.20443726 -98.84254456]
[414.78942871 -94.69438171]
[400.37438965 -90.54622650]
[385.95938110 -86.39806366]
[371.54437256 -82.24990082]
[354.65570068 -70.65385437]
[337.77609253 -75.56517029]
[325.71612549 -66.64566803]
[313.65618896 -57.72617340]
[301.59622192 -48.80667496]
[295.96438599 -35.01784897]
[280.26821899 -33.03257751]
[268.20828247 -24.11307907]
[261.83883667 -5.87011719]
[241.79777527 -3.84139991]
[230.04765320 5.48246956]
[218.29751587 14.80633926]
[206.54739380 24.13020897]
[194.79727173 33.45407867]
[183.04714966 42.77794647]
[181.60401917 57.55810165]
[169.82054138 67.18121338]
[154.32752991 65.56731415]
[142.57740784 74.89118195]
[130.90687561 84.31448364]
[119.31676483 93.83653259]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[5 10]
[16 51]
[17 50]
[18 49]
[20 47]
[21 46]
[23 45]
[24 44]
[25 43]
[26 42]
[27 41]
[28 40]
[29 39]
[30 37]
[31 36]
[53 184]
[54 183]
[56 182]
[57 181]
[60 178]
[61 177]
[62 176]
[63 175]
[64 174]
[65 173]
[69 171]
[70 170]
[72 168]
[73 167]
[74 166]
[75 165]
[76 89]
[77 88]
[78 87]
[98 163]
[99 162]
[100 161]
[101 160]
[102 159]
[103 158]
[106 155]
[107 154]
[108 153]
[109 152]
[110 150]
[111 149]
[114 147]
[115 146]
[116 145]
[117 144]
[119 143]
[120 142]
[121 141]
[122 140]
[123 139]
[124 138]
[125 135]
[126 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
