%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:12:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUUGAAGAAAAUCAUACCAUGAAAAAUGAGUUUAUCCUCACAGGAUUUACAGAUCACCCUGAGCUGAAGACUCUGCUGUUUGUGGUGUUCUUUGCCA\
) } def
/len { sequence length } bind def

/coor [
[45.98920059 416.07980347]
[48.77788925 396.89981079]
[49.24438858 381.90704346]
[49.71088791 366.91430664]
[50.17738342 351.92156982]
[47.18643951 345.01651001]
[50.89875031 336.47183228]
[51.83129501 321.50085449]
[52.76383972 306.52987671]
[53.69638443 291.55889893]
[54.62892914 276.58792114]
[52.88353729 274.79074097]
[51.70625305 272.22299194]
[51.37678146 269.08322144]
[52.10361099 265.66122437]
[53.99635315 262.31286621]
[57.04680252 259.42687988]
[60.28706741 244.78103638]
[63.52733612 230.13520813]
[66.76760101 215.48936462]
[70.00787354 200.84352112]
[73.24813843 186.19767761]
[76.48840332 171.55183411]
[79.72867584 156.90599060]
[82.96894073 142.26014709]
[86.20920563 127.61431122]
[74.24417114 117.01097870]
[69.18870544 101.84407043]
[72.39906311 86.18244934]
[83.01399231 74.22769165]
[98.18579102 69.18693542]
[100.96900940 54.44740677]
[103.75222778 39.70787811]
[106.53543854 24.96834946]
[109.31865692 10.22882080]
[112.10187531 -4.51070738]
[110.60827637 -13.70645714]
[115.20766449 -19.66222000]
[118.44793701 -34.30806351]
[121.23114777 -49.04759216]
[123.55462646 -63.86654663]
[125.87809753 -78.68550110]
[128.20156860 -93.50446320]
[116.09729767 -105.19687653]
[113.30996704 -121.62637329]
[120.73215485 -136.36186218]
[135.29853821 -143.75268555]
[137.16001892 -158.63673401]
[139.02149963 -173.52078247]
[140.88298035 -188.40483093]
[134.01417542 -203.29615784]
[143.69575500 -216.53244019]
[159.96812439 -214.49732971]
[166.09169006 -199.28436279]
[155.76702881 -186.54335022]
[153.90554810 -171.65930176]
[152.04406738 -156.77525330]
[150.18258667 -141.89120483]
[160.79563904 -133.63169861]
[165.94111633 -121.08898163]
[164.15783691 -107.53987885]
[155.81028748 -96.58255005]
[143.02052307 -91.18098450]
[140.69705200 -76.36203003]
[138.37358093 -61.54307556]
[136.05010986 -46.72411728]
[138.20079041 -42.27830124]
[137.45277405 -36.41739655]
[133.09378052 -31.06779480]
[129.85350037 -16.42195320]
[126.84140015 -1.72749126]
[124.05818176 13.01203728]
[121.27497101 27.75156593]
[118.49175262 42.49109650]
[115.70853424 57.23062515]
[112.92532349 71.97015381]
[123.77103424 80.31055450]
[129.94625854 92.51950073]
[130.23770142 106.19819641]
[124.58810425 118.65908813]
[114.10748291 127.45387268]
[100.85504913 130.85458374]
[97.61478424 145.50042725]
[94.37451172 160.14627075]
[91.13424683 174.79209900]
[87.89398193 189.43794250]
[84.65370941 204.08378601]
[81.41344452 218.72962952]
[78.17317963 233.37547302]
[74.93290710 248.02131653]
[71.69264221 262.66714478]
[69.59991455 277.52044678]
[68.66736603 292.49142456]
[67.73482513 307.46243286]
[66.80227661 322.43341064]
[65.86973572 337.40438843]
[65.17012787 352.38806152]
[64.70362854 367.38079834]
[64.23712921 382.37356567]
[63.77063370 397.36630249]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 100]
[3 99]
[4 98]
[5 97]
[7 96]
[8 95]
[9 94]
[10 93]
[11 92]
[17 91]
[18 90]
[19 89]
[20 88]
[21 87]
[22 86]
[23 85]
[24 84]
[25 83]
[26 82]
[31 76]
[32 75]
[33 74]
[34 73]
[35 72]
[36 71]
[38 70]
[39 69]
[40 66]
[41 65]
[42 64]
[43 63]
[47 58]
[48 57]
[49 56]
[50 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
