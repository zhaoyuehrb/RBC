%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:48:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAUAGGAGCCGGCGCAAGCUCCGUGCGCAUGCGCGCUCCCCUCUCACGCAGCCAACAUGGCUCCAGUGGAGCACGUUGUGGCGGAUGCUGGGGCUUUCCUGCGGCAUGCGGCUCUGCAGGACAUCGGGAAGAACAUUUACACCAUCCGGGAGGUGG\
) } def
/len { sequence length } bind def

/coor [
[76.53580475 218.39813232]
[65.27049255 228.30230713]
[50.58859634 231.37507629]
[36.29704666 226.81968689]
[26.10155869 215.81732178]
[22.64576530 201.22082520]
[26.82591820 186.81468201]
[14.63861465 195.55937195]
[2.45131183 204.30407715]
[-9.73599148 213.04876709]
[-21.92329407 221.79345703]
[-25.03123093 227.72630310]
[-29.94560432 230.71183777]
[-34.76929474 230.63160706]
[-47.29255676 238.88800049]
[-59.81581879 247.14437866]
[-72.33908081 255.40077209]
[-84.86234283 263.65716553]
[-92.12507629 277.71289062]
[-107.00968170 278.25854492]
[-119.53294373 286.51492310]
[-121.15145874 302.06854248]
[-132.42485046 312.90570068]
[-148.03019714 313.90948486]
[-160.59909058 304.60589600]
[-164.19692993 289.38784790]
[-157.12487793 275.44079590]
[-142.72218323 269.35012817]
[-127.78932953 273.99166870]
[-115.26606750 265.73529053]
[-108.89908600 252.27011108]
[-93.11872864 251.13389587]
[-80.59546661 242.87750244]
[-68.07220459 234.62112427]
[-55.54894257 226.36473083]
[-43.02568054 218.10835266]
[-30.66798592 209.60615540]
[-18.48068428 200.86146545]
[-6.29338026 192.11676025]
[5.89392281 183.37207031]
[18.08122635 174.62738037]
[29.34660149 164.72328186]
[39.58018875 153.75634766]
[49.81377792 142.78939819]
[60.04736328 131.82246399]
[70.28095245 120.85552979]
[80.51454163 109.88859558]
[80.14421844 102.39774323]
[65.16249847 103.13813782]
[64.42235565 88.15641022]
[79.40357971 87.41603851]
[79.03325653 79.92518616]
[67.76788330 70.02108002]
[56.50250626 60.11697388]
[45.23713303 50.21286774]
[33.97175598 40.30876160]
[18.08393288 34.39155197]
[19.37170982 17.48658180]
[35.97251892 14.04427147]
[43.87586212 29.04338837]
[55.14123917 38.94749451]
[66.40661621 48.85160065]
[77.67198944 58.75570679]
[88.93736267 68.65981293]
[103.77296448 66.44511414]
[111.65462494 53.68268967]
[112.32271576 37.87559509]
[125.59329987 31.11238480]
[133.47494507 18.34995842]
[141.35661316 5.58753300]
[149.23826599 -7.17489338]
[157.11991882 -19.93731880]
[165.00157166 -32.69974518]
[172.88322449 -45.46217346]
[174.74632263 -54.46023178]
[181.04878235 -58.39672470]
[189.18104553 -71.00093842]
[197.31332397 -83.60515594]
[205.32066345 -96.28909302]
[213.20231628 -109.05152130]
[221.08396912 -121.81394958]
[221.75207520 -137.62104797]
[235.02265930 -144.38424683]
[242.90431213 -157.14668274]
[250.65950012 -169.98634338]
[258.28747559 -182.90199280]
[265.91543579 -195.81765747]
[265.64755249 -214.20524597]
[281.20834351 -222.26956177]
[288.57965088 -235.33340454]
[287.87667847 -251.71746826]
[301.85751343 -260.28878784]
[316.13992310 -252.22991943]
[316.03134155 -235.83113098]
[301.64349365 -227.96209717]
[294.27218628 -214.89825439]
[297.21414185 -203.13056946]
[291.13558960 -192.17214966]
[278.83108521 -188.18968201]
[271.20312500 -175.27403259]
[263.57516479 -162.35838318]
[262.87777710 -154.96035767]
[255.66673279 -149.26501465]
[247.78507996 -136.50259399]
[247.68072510 -121.60835266]
[233.84640503 -113.93228912]
[225.96475220 -101.16986847]
[218.08309937 -88.40744019]
[217.23970032 -81.02464294]
[209.91752625 -75.47289276]
[201.78526306 -62.86867523]
[193.65299988 -50.26445770]
[185.64564514 -37.58051682]
[177.76399231 -24.81809044]
[169.88233948 -12.05566502]
[162.00068665 0.70676118]
[154.11903381 13.46918774]
[146.23738098 26.23161316]
[138.35572815 38.99404144]
[138.25137329 53.88827896]
[124.41704559 61.56434250]
[116.53539276 74.32676697]
[130.28308105 68.32669067]
[144.83703613 71.95748138]
[154.15548706 83.71189880]
[154.37011719 98.71036530]
[145.39181519 110.72660828]
[130.94772339 114.77236176]
[117.03262329 109.16696167]
[127.69149017 119.72103882]
[138.35035706 130.27511597]
[152.19241333 124.04923248]
[167.34901428 123.24799347]
[181.77033997 127.97978210]
[193.50602722 137.60464478]
[200.96893311 150.82090759]
[203.14973450 165.84117126]
[199.75352478 180.63407898]
[191.23959351 193.19902039]
[178.75938416 201.83665466]
[164.00074768 205.37884521]
[148.95967102 203.34652710]
[135.67033386 196.01455688]
[125.92999268 184.37452698]
[121.05597687 170.00065613]
[121.70743561 154.83688354]
[127.79627228 140.93399048]
[117.13741302 130.37991333]
[106.47854614 119.82582855]
[91.48147583 120.12218475]
[81.24788666 131.08912659]
[71.01429749 142.05606079]
[60.78071213 153.02299500]
[50.54712296 163.98992920]
[40.31353760 174.95686340]
[55.13605118 172.65620422]
[69.16978455 177.95283508]
[78.77587128 189.47338867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 41]
[8 40]
[9 39]
[10 38]
[11 37]
[14 36]
[15 35]
[16 34]
[17 33]
[18 32]
[20 30]
[21 29]
[42 155]
[43 154]
[44 153]
[45 152]
[46 151]
[47 150]
[52 64]
[53 63]
[54 62]
[55 61]
[56 60]
[65 122]
[66 121]
[68 119]
[69 118]
[70 117]
[71 116]
[72 115]
[73 114]
[74 113]
[76 112]
[77 111]
[78 110]
[79 108]
[80 107]
[81 106]
[83 104]
[84 103]
[85 101]
[86 100]
[87 99]
[89 96]
[90 95]
[129 149]
[130 148]
[131 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
