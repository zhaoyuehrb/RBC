%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:46:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGGGUCAGCACCGCGGAGACCCCCCUCGCCCGGCCCCGCGACAGCCUCCGAGCGCCCCCGGAUCAUGGCCACCGAGGUCCACAAUCUGCAGGAGCUCCGGCGAAGUGCCUCACUGGCCACCAAGGUCUUUAUCCAGAGAGACUACAGCGAUGGGACCAUCUGUC\
) } def
/len { sequence length } bind def

/coor [
[49.06586456 314.75671387]
[43.81789398 328.80874634]
[38.56992340 342.86074829]
[40.99003220 358.49575806]
[29.28890419 367.71163940]
[24.04093361 381.76364136]
[18.79296303 395.81567383]
[22.03767395 411.89059448]
[9.56141281 422.53366089]
[-5.80131197 416.79620361]
[-8.24664688 400.58038330]
[4.74095917 390.56768799]
[9.98893070 376.51568604]
[15.23690128 362.46368408]
[12.44142056 347.83377075]
[24.51791954 337.61276245]
[29.76589012 323.56076050]
[35.01385880 309.50875854]
[20.69396400 296.22781372]
[13.52273750 278.01083374]
[14.95349312 258.43832397]
[24.74452591 241.37620544]
[40.99879456 230.21226501]
[60.53134918 227.18348694]
[64.16322327 212.62982178]
[67.79508972 198.07614136]
[63.36959839 183.85417175]
[74.21804047 172.33801270]
[77.84991455 157.78433228]
[81.48178101 143.23066711]
[85.11365509 128.67698669]
[69.80634308 111.50286865]
[69.80634308 88.49713135]
[85.11365509 71.32301331]
[81.48178101 56.76934052]
[77.84991455 42.21566010]
[74.21804047 27.66198540]
[55.53271866 18.10697365]
[49.96249008 -1.82448769]
[60.68064880 -19.18630409]
[55.96495819 -33.42576599]
[51.24926376 -47.66522598]
[35.08214188 -52.56710815]
[25.10855293 -65.99666595]
[25.08926964 -82.55871582]
[34.83436584 -95.74456024]
[29.85165215 -109.89279175]
[24.86893845 -124.04103088]
[14.75614452 -128.19035339]
[8.74022579 -137.05209351]
[8.62135220 -147.54212952]
[14.19623089 -156.16801453]
[9.74923038 -170.49365234]
[5.30222940 -184.81930542]
[0.85522872 -199.14495850]
[-10.62551880 -210.03086853]
[-7.00927544 -224.47981262]
[-11.45627594 -238.80545044]
[-25.16164589 -246.20820618]
[-29.46746254 -260.79980469]
[-22.32561684 -273.82015991]
[-26.77261925 -288.14578247]
[-31.21961975 -302.47143555]
[-35.66661835 -316.79708862]
[-40.11362076 -331.12274170]
[-53.81898880 -338.52548218]
[-58.12480545 -353.11706543]
[-50.98296356 -366.13742065]
[-55.42996216 -380.46307373]
[-59.87696457 -394.78872681]
[-64.45851135 -409.07189941]
[-69.17420197 -423.31137085]
[-82.80631256 -431.76980591]
[-84.54956055 -447.71786499]
[-73.06667328 -458.92156982]
[-57.16633987 -456.78637695]
[-49.04593658 -442.95025635]
[-54.93474197 -428.02706909]
[-50.21905136 -413.78759766]
[-45.10914993 -408.40338135]
[-45.55131531 -399.23571777]
[-41.10431671 -384.91006470]
[-36.65731430 -370.58444214]
[-23.39776993 -363.89712524]
[-18.68380547 -349.43222046]
[-25.78797340 -335.56973267]
[-21.34097290 -321.24407959]
[-16.89397049 -306.91845703]
[-12.44697094 -292.59280396]
[-7.99996996 -278.26715088]
[5.25957394 -271.57983398]
[9.97353935 -257.11495972]
[2.86937141 -243.25245667]
[7.31637239 -228.92680359]
[18.47904015 -219.06556702]
[15.18087673 -203.59194946]
[19.62787819 -189.26631165]
[24.07487869 -174.94065857]
[28.52187920 -160.61500549]
[43.65091705 -148.61347961]
[39.01717377 -129.02374268]
[43.99988556 -114.87550354]
[48.98260117 -100.72727203]
[62.09793472 -98.10761261]
[72.28071594 -89.27039337]
[76.79271698 -76.45002747]
[74.35061646 -62.96988678]
[65.48872375 -52.38091660]
[70.20441437 -38.14145660]
[74.92011261 -23.90199661]
[84.25936890 -22.46016502]
[92.47013855 -17.66588402]
[98.38784027 -10.14985180]
[101.15515137 -0.93211257]
[100.34602356 8.71628571]
[96.03067780 17.44854546]
[88.77172089 24.03011322]
[92.40358734 38.58378983]
[96.03546143 53.13746643]
[99.66732788 67.69114685]
[108.88107300 68.93395233]
[117.35948944 72.74893188]
[124.40059662 78.82020569]
[129.42141724 86.64510345]
[132.00622559 95.57574463]
[131.94104004 104.87269592]
[145.83937073 110.51504517]
[159.73771667 116.15738678]
[173.63606262 121.79973602]
[187.53440857 127.44208527]
[201.43273926 133.08442688]
[215.33108521 138.72677612]
[229.78994751 132.34579468]
[244.49554443 138.13552856]
[250.72329712 152.66102600]
[244.77841187 167.30459595]
[230.18788147 173.37843323]
[215.60798645 167.27906799]
[209.68873596 152.62512207]
[195.79039001 146.98277283]
[181.89205933 141.34042358]
[167.99371338 135.69807434]
[154.09536743 130.05574036]
[140.19702148 124.41338348]
[126.29868317 118.77104187]
[121.07570648 124.49055481]
[114.64160156 128.80270386]
[107.36611938 131.45970154]
[99.66732788 132.30885315]
[96.03546143 146.86253357]
[92.40358734 161.41621399]
[88.77172089 175.96987915]
[92.93743134 191.23283386]
[82.34877014 201.70800781]
[78.71689606 216.26168823]
[75.08502960 230.81536865]
[84.33366394 236.35935974]
[91.96894836 243.95535278]
[97.54730225 253.15328979]
[100.74673462 263.41040039]
[101.38542938 274.12301636]
[99.43207550 284.66238403]
[95.00734711 294.41122437]
[88.37644958 302.80020142]
[79.93323517 309.34094238]
[70.17683411 313.65463257]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[5 14]
[6 13]
[7 12]
[24 156]
[25 155]
[26 154]
[28 152]
[29 151]
[30 150]
[31 149]
[34 120]
[35 119]
[36 118]
[37 117]
[40 110]
[41 109]
[42 108]
[46 103]
[47 102]
[48 101]
[52 99]
[53 98]
[54 97]
[55 96]
[57 94]
[58 93]
[61 90]
[62 89]
[63 88]
[64 87]
[65 86]
[68 83]
[69 82]
[70 81]
[71 79]
[72 78]
[126 145]
[127 144]
[128 143]
[129 142]
[130 141]
[131 140]
[132 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
