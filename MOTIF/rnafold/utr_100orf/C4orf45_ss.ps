%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:21:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUCUUUCGUUCUUUCUGGUGCAGCUUAACUGAUUUGAAGAAGCCGAAGAAGAAAAUCCAGUAGCACGGUUAAGACUUUAGCCAUGGCAUCUGUAUCAUACCAAAAGCCAACAUCUACUACUGUGGGAAAACAAAUGAUUUUUACAGGUCCAGACUACAUAAAGGAUUAUUUACCCAAAAUUC\
) } def
/len { sequence length } bind def

/coor [
[-43.26386261 316.72012329]
[-50.02360535 314.68328857]
[-56.40671921 311.67648315]
[-62.27499771 307.76620483]
[-67.50157928 303.03842163]
[-79.81302643 311.60745239]
[-92.12448120 320.17648315]
[-104.43593597 328.74551392]
[-116.74738312 337.31451416]
[-123.65398407 351.54861450]
[-138.52014160 352.46881104]
[-150.83158875 361.03784180]
[-163.14305115 369.60687256]
[-170.04965210 383.84094238]
[-184.91580200 384.76113892]
[-197.22724915 393.33016968]
[-209.53869629 401.89920044]
[-221.85015869 410.46820068]
[-228.75675964 424.70230103]
[-243.62290955 425.62249756]
[-255.93435669 434.19152832]
[-268.24581909 442.76055908]
[-273.51635742 450.24844360]
[-280.83834839 451.36825562]
[-293.29278564 459.72811890]
[-305.74719238 468.08801270]
[-310.24218750 483.48846436]
[-325.13940430 489.44262695]
[-339.01101685 481.38296509]
[-341.21588135 465.49212646]
[-330.06262207 453.96026611]
[-314.10705566 455.63357544]
[-301.65264893 447.27371216]
[-289.19821167 438.91384888]
[-276.81484985 430.44909668]
[-264.50338745 421.88006592]
[-252.19194031 413.31103516]
[-246.16592407 399.68988037]
[-230.41917419 398.15676880]
[-218.10772705 389.58773804]
[-205.79627991 381.01870728]
[-193.48481750 372.44970703]
[-187.45881653 358.82852173]
[-171.71206665 357.29541016]
[-159.40061951 348.72637939]
[-147.08915710 340.15734863]
[-141.06315613 326.53619385]
[-125.31640625 325.00308228]
[-113.00495911 316.43405151]
[-100.69350433 307.86502075]
[-88.38204956 299.29602051]
[-76.07060242 290.72698975]
[-80.86572266 266.99066162]
[-73.40726471 243.88983154]
[-55.55023575 227.35862732]
[-31.82859230 221.67335510]
[-8.30412292 228.34642029]
[1.27284539 216.80165100]
[10.84981346 205.25688171]
[20.42678261 193.71211243]
[30.00374985 182.16734314]
[31.47391129 160.58126831]
[52.53915024 152.97103882]
[61.31488419 140.80606079]
[70.09062195 128.64109802]
[78.86635590 116.47612762]
[74.44561768 108.06642151]
[73.23712158 98.64273834]
[75.39279175 89.38967133]
[80.64164734 81.47035217]
[73.14164734 68.47997284]
[65.64164734 55.48958969]
[58.14164734 42.49920654]
[50.64164734 29.50882530]
[43.14164734 16.51844406]
[28.67675972 8.79192924]
[28.40617943 -7.60498619]
[42.60825729 -15.80455971]
[56.67311478 -7.37177372]
[56.13203049 9.01844501]
[63.63203049 22.00882530]
[71.13202667 34.99920654]
[78.63202667 47.98958969]
[86.13202667 60.97996902]
[93.63202667 73.97035217]
[105.39424896 73.75127411]
[116.11684418 78.59109497]
[128.13185120 69.61115265]
[140.14688110 60.63121033]
[145.16149902 52.96957016]
[152.44151306 51.60310364]
[164.60647583 42.82736588]
[176.77143860 34.05163193]
[188.93641663 25.27589607]
[201.10137939 16.50016212]
[213.26635742 7.72442675]
[225.43132019 -1.05130816]
[237.29295349 -10.23289776]
[248.83772278 -19.80986595]
[260.38250732 -29.38683510]
[271.92727661 -38.96380234]
[266.38647461 -53.02641678]
[265.46484375 -68.09270477]
[269.24002075 -82.68641663]
[277.33016968 -95.38147736]
[288.93234253 -104.94140625]
[302.90231323 -110.43965912]
[317.86734009 -111.34950256]
[332.36111450 -107.59438324]
[344.96734619 -99.55423737]
[356.51211548 -109.13121033]
[368.05688477 -118.70817566]
[372.67703247 -126.61396790]
[379.87847900 -128.34741211]
[391.58334351 -137.72802734]
[390.71527100 -153.22079468]
[399.14770508 -166.24668884]
[413.63818359 -171.79696655]
[428.61483765 -167.73744202]
[438.31881714 -155.62908936]
[439.01876831 -140.12780762]
[430.44552612 -127.19416046]
[415.89569092 -121.80139923]
[400.96395874 -126.02315521]
[389.25909424 -116.64253998]
[377.63385010 -107.16340637]
[366.08908081 -97.58644104]
[354.54431152 -88.00946808]
[360.11740112 -74.13497162]
[361.13052368 -59.19697189]
[357.47189331 -44.65755463]
[349.48764038 -31.94367790]
[337.94903564 -22.30714417]
[323.97796631 -16.70134735]
[308.93804932 -15.68695736]
[294.30130005 -19.37587547]
[281.50424194 -27.41903305]
[269.95947266 -17.84206581]
[258.41470337 -8.26509762]
[246.86991882 1.31187069]
[246.48529053 4.10955381]
[244.95704651 6.92147875]
[242.27484131 9.30675030]
[238.58959961 10.82918644]
[234.20706177 11.11366081]
[222.04208374 19.88939667]
[209.87712097 28.66513062]
[197.71214294 37.44086456]
[185.54718018 46.21660233]
[173.38221741 54.99233627]
[161.21723938 63.76807022]
[149.12681580 72.64622498]
[137.11180115 81.62616730]
[125.09678650 90.60610962]
[124.69670105 110.40032196]
[110.81594849 124.51752472]
[91.03132629 125.25186157]
[82.25559235 137.41683960]
[73.47985840 149.58180237]
[64.70411682 161.74676514]
[67.55963898 169.64263916]
[67.05451202 177.92950439]
[63.34607697 185.25215149]
[57.10942841 190.44270325]
[49.41569901 192.70674133]
[41.54851913 191.74430847]
[31.97154999 203.28907776]
[22.39458275 214.83384705]
[12.81761360 226.37861633]
[3.24064589 237.92338562]
[7.52683544 243.62091064]
[10.92684078 249.88308716]
[13.36782932 256.57321167]
[14.79788780 263.54550171]
[15.18711758 270.64816284]
[14.52826595 277.72677612]
[12.83685398 284.62762451]
[10.15081310 291.20101929]
[6.52963686 297.30456543]
[2.05306149 302.80621338]
[-3.18068743 307.58712769]
[-9.05705070 311.54437256]
[-15.44764423 314.59289551]
[-22.21306229 316.66754150]
[-29.20591736 317.72436523]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 52]
[6 51]
[7 50]
[8 49]
[9 48]
[11 46]
[12 45]
[13 44]
[15 42]
[16 41]
[17 40]
[18 39]
[20 37]
[21 36]
[22 35]
[24 34]
[25 33]
[26 32]
[57 170]
[58 169]
[59 168]
[60 167]
[61 166]
[63 160]
[64 159]
[65 158]
[66 157]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
[87 154]
[88 153]
[89 152]
[91 151]
[92 150]
[93 149]
[94 148]
[95 147]
[96 146]
[97 145]
[98 140]
[99 139]
[100 138]
[101 137]
[110 128]
[111 127]
[112 126]
[114 125]
[115 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
