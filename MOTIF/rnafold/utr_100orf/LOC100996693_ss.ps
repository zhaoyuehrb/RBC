%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCUAAAGCAGCUCCUGCCAAAAAGCCAGUGGCUGUGGCCCCAGCUCCUGGAUGUACCCUGGACAUCAAUGACCCACAGGUCCAGAGUGCGGCCAUUC\
) } def
/len { sequence length } bind def

/coor [
[84.85842133 199.57008362]
[73.17294312 208.97485352]
[58.82320404 213.34349060]
[43.87944794 212.04573059]
[30.49761391 205.26882935]
[20.60830879 193.99044800]
[15.63826180 179.83776855]
[16.30450630 164.85256958]
[22.51092339 151.19679260]
[33.36405563 140.83929443]
[18.40938377 142.00454712]
[3.45471311 143.16981506]
[-11.49995708 144.33506775]
[-26.45462799 145.50032043]
[-41.40929794 146.66557312]
[-54.56670380 155.45155334]
[-67.85657501 148.72633362]
[-82.81124878 149.89158630]
[-97.74598694 151.28927612]
[-112.65718842 152.91906738]
[-122.35544586 165.39781189]
[-138.04713440 167.28099060]
[-150.42265320 157.45133972]
[-152.13983154 141.74061584]
[-142.17988586 129.46971130]
[-126.45188141 127.91873932]
[-114.28697205 138.00787354]
[-99.37577057 136.37808228]
[-92.95553589 132.45303345]
[-83.97650909 134.93692017]
[-69.02183533 133.77166748]
[-56.93408966 125.06903839]
[-42.57455826 131.71090698]
[-27.61988640 130.54565430]
[-12.66521549 129.38040161]
[2.28945541 128.21513367]
[17.24412537 127.04988098]
[32.19879532 125.88462067]
[46.54866409 121.51640320]
[59.61610794 114.15148926]
[72.68354797 106.78657532]
[85.75099182 99.42166901]
[92.28926086 85.92163086]
[89.96578979 71.10266876]
[87.64231110 56.28371429]
[85.31884003 41.46475601]
[76.89202881 26.75336266]
[88.69571686 14.58335209]
[103.65770721 22.55675697]
[100.13779449 39.14128494]
[102.46127319 53.96024323]
[104.78474426 68.77919769]
[107.10821533 83.59815216]
[107.19079590 86.90017700]
[106.73336029 90.05332947]
[105.76631927 92.98705292]
[120.67751312 91.35726929]
[135.58871460 89.72749329]
[150.49990845 88.09770966]
[163.37771606 78.90679169]
[176.87031555 85.21544647]
[191.78150940 83.58566284]
[206.69270325 81.95587921]
[221.60389709 80.32609558]
[236.51510620 78.69631195]
[251.42630005 77.06653595]
[255.31059265 62.39422226]
[264.23599243 50.11816788]
[276.99542236 41.89860535]
[291.86328125 38.84716415]
[306.82879639 41.37652588]
[319.86804199 49.14461517]
[329.21749878 61.10086060]
[333.61279297 75.62828064]
[332.45947266 90.76215363]
[325.91348267 104.45576477]
[314.86019897 114.85714722]
[300.79440308 120.55960846]
[285.61840820 120.79193115]
[271.38467407 115.52270508]
[260.01812744 105.46454620]
[253.05607605 91.97772980]
[238.14488220 93.60751343]
[223.23368835 95.23729706]
[208.32247925 96.86707306]
[193.41128540 98.49685669]
[178.50009155 100.12664032]
[166.68884277 109.20098114]
[152.12969971 103.00890350]
[137.21849060 104.63868713]
[122.30729675 106.26847076]
[107.39610291 107.89825439]
[93.11590576 112.48911285]
[80.04846191 119.85401917]
[66.98101807 127.21893311]
[53.91357422 134.58384705]
[68.69477081 137.13655090]
[81.45777130 145.01727295]
[90.36125183 157.08906555]
[94.12071228 171.61030579]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 38]
[11 37]
[12 36]
[13 35]
[14 34]
[15 33]
[17 31]
[18 30]
[19 28]
[20 27]
[39 96]
[40 95]
[41 94]
[42 93]
[43 53]
[44 52]
[45 51]
[46 50]
[56 92]
[57 91]
[58 90]
[59 89]
[61 87]
[62 86]
[63 85]
[64 84]
[65 83]
[66 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
