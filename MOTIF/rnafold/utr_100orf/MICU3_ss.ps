%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:20:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCUCUGCCCCCUCCCAGCUCUGGUGUGGGCGGCCUCCGCUAUGGCUGCGCUGCGAAGGCUCUUGUGGCCGCCACCCCGGGUGUCUCCUCCACUCUGCGCUCACCAGCCCCUCCUUGGGCCGUGGGGGCGGCCUGCGGUGA\
) } def
/len { sequence length } bind def

/coor [
[79.66520691 245.26725769]
[66.57973480 234.48731995]
[73.31596375 218.92906189]
[73.97482300 203.94354248]
[66.80403137 190.88870239]
[75.14002228 177.44169617]
[75.79888916 162.45617676]
[76.45774841 147.47065735]
[77.11661530 132.48512268]
[75.84519196 147.43115234]
[66.39546967 159.08030701]
[52.03302002 163.40696716]
[37.72110748 158.91596985]
[28.40553093 147.15925598]
[27.30550003 132.19964600]
[34.80115509 119.20676422]
[48.30220032 112.67057800]
[63.14337158 114.84997559]
[48.40414429 112.06516266]
[33.66492081 109.28034210]
[24.57194519 110.76689911]
[18.63406181 106.26905823]
[3.95956802 103.16112518]
[-7.30742025 109.54263306]
[-19.50410271 106.59921265]
[-26.17780685 96.45218658]
[-40.78048706 93.02265167]
[-55.38316727 89.59310913]
[-69.98584747 86.16356659]
[-84.58852386 82.73402405]
[-99.22799683 79.46509552]
[-113.90248871 76.35716248]
[-128.57698059 73.24923706]
[-143.25148010 70.14130402]
[-157.92596436 67.03337097]
[-172.60046387 63.92544556]
[-184.03367615 74.41645813]
[-199.45359802 76.15013885]
[-212.93095398 68.45985413]
[-219.28343201 54.30267334]
[-216.06835938 39.12232208]
[-204.52201843 28.75595856]
[-189.08419800 27.18965721]
[-175.69105530 35.02569199]
[-169.49253845 49.25094986]
[-154.81803894 52.35887909]
[-140.14355469 55.46681213]
[-125.46905518 58.57474136]
[-110.79455566 61.68267059]
[-96.12006378 64.79060364]
[-88.86859131 63.08615112]
[-81.15898132 68.13134766]
[-66.55630493 71.56089020]
[-51.95362473 74.99042511]
[-37.35094452 78.41996765]
[-22.74826622 81.84951019]
[-6.28772020 75.86123657]
[7.06749773 88.48663330]
[21.74199104 91.59455872]
[36.44973755 94.54111481]
[51.18896484 97.32593536]
[65.92819214 100.11075592]
[70.10531616 86.36918640]
[79.32983398 76.04618073]
[91.56630707 70.76947784]
[104.36905670 71.12215424]
[115.36748505 76.60584259]
[122.70493317 85.81130981]
[137.14288330 81.74366760]
[151.58082581 77.67602539]
[166.01876831 73.60838318]
[180.45671082 69.54074097]
[194.89466858 65.47309875]
[209.33261108 61.40545654]
[216.81317139 56.02649307]
[224.13250732 57.41078186]
[238.65632629 53.66128540]
[253.18014526 49.91178894]
[267.66189575 46.00298309]
[282.09985352 41.93534088]
[293.07135010 0.41805506]
[305.41610718 -8.10291576]
[317.76086426 -16.62388802]
[330.10562134 -25.14485931]
[325.76235962 -39.63593674]
[326.11169434 -54.75986099]
[331.11938477 -69.03495026]
[340.29486084 -81.06266785]
[352.73916626 -89.66467285]
[367.23315430 -93.99821472]
[382.35684204 -93.63874817]
[396.62857056 -88.62148285]
[408.65014648 -79.43796539]
[417.24380493 -66.98789978]
[421.56762695 -52.49101639]
[421.19802856 -37.36756897]
[416.17120361 -23.09920692]
[406.97964478 -11.08379173]
[394.52380371 -2.49847531]
[380.02401733 1.81564200]
[364.90084839 1.43590665]
[350.63583374 -3.60047889]
[338.62658691 -12.80010033]
[326.28182983 -4.27912951]
[313.93707275 4.24184179]
[301.59231567 12.76281261]
[302.65966797 20.18647385]
[305.86175537 42.45745468]
[320.10711670 47.15534973]
[334.35244751 51.85324097]
[348.59777832 56.55113220]
[362.59634399 49.21515656]
[377.65698242 54.00598526]
[384.84454346 68.08129883]
[379.89477539 83.09046936]
[365.74423218 90.12881470]
[350.78823853 85.02061462]
[343.89990234 70.79647827]
[329.65457153 66.09858704]
[315.40921021 61.40069199]
[301.16387939 56.70280075]
[286.16748047 56.37328720]
[271.72955322 60.44092941]
[266.10076904 65.32007599]
[256.92965698 64.43560791]
[242.40582275 68.18510437]
[227.88200378 71.93460083]
[213.40025330 75.84340668]
[198.96231079 79.91104889]
[184.52435303 83.97869110]
[170.08641052 88.04633331]
[155.64846802 92.11397552]
[141.21052551 96.18161774]
[126.77257538 100.24925995]
[118.74347687 123.96315002]
[92.10213470 133.14399719]
[91.44327545 148.12951660]
[90.78440857 163.11503601]
[90.12554932 178.10055542]
[97.24921417 192.22726440]
[88.96035004 204.60240173]
[88.30148315 219.58792114]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 142]
[4 141]
[6 139]
[7 138]
[8 137]
[9 136]
[18 62]
[19 61]
[20 60]
[22 59]
[23 58]
[26 56]
[27 55]
[28 54]
[29 53]
[30 52]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[68 134]
[69 133]
[70 132]
[71 131]
[72 130]
[73 129]
[74 128]
[76 127]
[77 126]
[78 125]
[79 123]
[80 122]
[81 106]
[82 105]
[83 104]
[84 103]
[108 121]
[109 120]
[110 119]
[111 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
