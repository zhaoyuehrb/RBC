%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:30:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGCGUCAGGCCAGCCCCGGCAUGCUCUGCGGCCGCCCGCGGUCCAGCUCCGACAACAGGAAUUUUCUCCGAGAGCGGGCCGGGCUCAGUUCAGCUGCUGUCCAGACCCGGAUCGGCAACA\
) } def
/len { sequence length } bind def

/coor [
[245.94429016 409.53723145]
[258.82495117 401.85031128]
[273.66571045 404.02938843]
[265.35208130 391.54406738]
[257.03845215 379.05871582]
[245.49598694 379.27703857]
[235.20048523 373.79266357]
[228.81108093 363.88916016]
[228.04237366 352.00762939]
[233.20593262 341.14547729]
[225.54064941 328.25192261]
[217.87536621 315.35839844]
[202.14726257 307.68716431]
[201.91966248 289.32846069]
[193.92759705 276.63488770]
[185.93553162 263.94131470]
[177.94346619 251.24772644]
[169.95140076 238.55415344]
[163.65187073 234.52342224]
[161.92213440 225.43276978]
[154.25685120 212.53921509]
[146.59156799 199.64567566]
[133.43695068 192.65960693]
[133.03555298 176.84349060]
[125.37026978 163.94995117]
[117.70498657 151.05639648]
[110.03971100 138.16285706]
[102.37442780 125.26931763]
[94.70915222 112.37577057]
[82.66460419 103.43547058]
[68.10401154 99.83143616]
[53.54341507 96.22739410]
[38.98282242 92.62335205]
[23.38527679 97.68779755]
[11.38331604 86.51260376]
[15.32352924 70.59384918]
[31.15256119 66.30738068]
[42.58686066 78.06275940]
[57.14745712 81.66680145]
[71.70804596 85.27083588]
[86.26864624 88.87487793]
[94.58264160 76.38899231]
[102.89591217 63.90421677]
[93.95561218 51.85966873]
[85.01531219 39.81512451]
[69.39575958 39.06439972]
[57.94820023 28.41135597]
[56.07781982 12.88603306]
[64.66775513 -0.18098761]
[79.66210175 -4.61985683]
[93.98098755 1.66532326]
[100.86347961 15.70688343]
[97.05986023 30.87482643]
[106.00016022 42.91937256]
[114.94045258 54.96392059]
[122.26439667 53.34841537]
[119.03361511 38.70047760]
[133.68161011 35.46992493]
[136.91229248 50.11740875]
[144.23623657 48.50190353]
[147.27990723 33.81394958]
[150.32359314 19.12599754]
[141.43997192 6.05478573]
[144.48304749 -9.45376492]
[157.64746094 -18.19870758]
[173.12297058 -14.99182224]
[181.72824097 -1.73569715]
[178.35791016 13.70504379]
[165.01155090 22.16968155]
[161.96786499 36.85763550]
[158.92417908 51.54558945]
[142.52102661 97.15731812]
[107.60269165 104.71048737]
[115.26797485 117.60403442]
[122.93325043 130.49757385]
[130.59852600 143.39112854]
[138.26380920 156.28466797]
[145.92909241 169.17820740]
[159.63198853 177.08651733]
[159.48510742 191.98039246]
[167.15039062 204.87393188]
[174.81567383 217.76748657]
[182.64498901 230.56208801]
[190.63705444 243.25566101]
[198.62910461 255.94924927]
[206.62117004 268.64282227]
[214.61323547 281.33639526]
[227.06312561 284.98727417]
[233.44142151 295.82083130]
[230.76892090 307.69311523]
[238.43420410 320.58663940]
[246.09947205 333.48019409]
[264.55093384 337.35205078]
[274.25177002 353.14822388]
[269.52377319 370.74508667]
[277.83740234 383.23040771]
[286.15106201 395.71575928]
[295.54611206 407.40902710]
[305.94760132 418.21685791]
[316.34909058 429.02465820]
[326.75057983 439.83248901]
[337.28924561 450.50662231]
[347.96334839 461.04525757]
[358.63748169 471.58392334]
[374.43783569 471.23239136]
[385.80105591 482.21661377]
[385.98553467 498.01980591]
[374.88180542 509.26626587]
[359.07751465 509.28363037]
[347.94909668 498.06161499]
[348.09881592 482.25802612]
[337.42471313 471.71939087]
[326.75057983 461.18072510]
[319.69833374 458.69137573]
[315.94274902 450.23397827]
[305.54129028 439.42614746]
[295.13980103 428.61834717]
[284.73831177 417.81051636]
[283.66946411 432.77236938]
[273.38842773 443.69485474]
[258.51855469 445.66622925]
[245.74664307 437.79992676]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 97]
[4 96]
[5 95]
[10 92]
[11 91]
[12 90]
[14 87]
[15 86]
[16 85]
[17 84]
[18 83]
[20 82]
[21 81]
[22 80]
[24 78]
[25 77]
[26 76]
[27 75]
[28 74]
[29 73]
[30 41]
[31 40]
[32 39]
[33 38]
[43 55]
[44 54]
[45 53]
[60 71]
[61 70]
[62 69]
[98 118]
[99 117]
[100 116]
[101 115]
[102 113]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
