%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:27:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUGGGGUCACAGGGAUGCCGCGGCUCCUCCGCUUGUCCCUGCUGUGGCUUGGACUCCUGCUGGUUCGGUUUUCUCGUGAACUGAGCGACAUCAGCAGUGCCAGGAAGCUGUGCG\
) } def
/len { sequence length } bind def

/coor [
[85.45868683 202.33561707]
[97.25858307 192.65443420]
[93.66884613 178.09031677]
[90.07910919 163.52618408]
[86.48937988 148.96205139]
[82.89964294 134.39793396]
[71.03005981 125.22661591]
[56.03141022 125.42799377]
[41.03276062 125.62937164]
[26.03411293 125.83074951]
[11.03546429 126.03212738]
[-3.96318364 126.23350525]
[-18.96183205 126.43488312]
[-33.94020844 127.24003601]
[-48.87401581 128.64764404]
[-63.80782318 130.05526733]
[-78.74163055 131.46287537]
[-93.67543793 132.87049866]
[-108.60924530 134.27810669]
[-117.49085999 143.74844360]
[-130.04634094 144.54743958]
[-139.43533325 136.79130554]
[-154.40155029 137.79747009]
[-169.36776733 138.80363464]
[-184.33398438 139.80979919]
[-195.93179321 150.89448547]
[-211.80926514 148.59544373]
[-219.78656006 134.67631531]
[-213.74417114 119.81464386]
[-198.31732178 115.41104889]
[-185.34014893 124.84358215]
[-170.37393188 123.83741760]
[-155.40771484 122.83125305]
[-140.44149780 121.82508850]
[-126.49600983 111.26438141]
[-110.01686096 119.34429932]
[-95.08305359 117.93668365]
[-80.14924622 116.52907562]
[-65.21543884 115.12145996]
[-50.28163147 113.71384430]
[-35.34782410 112.30622864]
[-32.78270721 109.70907593]
[-28.77989388 108.29291534]
[-23.94146156 108.74366760]
[-19.16320992 111.43624115]
[-4.16456175 111.23486328]
[10.83408642 111.03347778]
[25.83273506 110.83209991]
[40.83138275 110.63072205]
[55.83003235 110.42934418]
[70.82868195 110.22796631]
[69.71053314 99.93304443]
[72.04793549 90.06053925]
[77.43609619 81.71307373]
[85.13795471 75.77465057]
[94.18224335 72.81757355]
[103.48482513 73.04920959]
[111.97837830 76.30312347]
[118.73486328 82.07407379]
[132.10908508 75.28216553]
[145.48332214 68.49025726]
[158.85754395 61.69834900]
[172.23178101 54.90644073]
[185.60600281 48.11453247]
[198.49452209 40.44081116]
[210.83927917 31.91983986]
[223.18403625 23.39886856]
[235.52879333 14.87789631]
[247.87355042 6.35692549]
[260.21832275 -2.16404581]
[272.56307983 -10.68501663]
[284.90783691 -19.20598793]
[297.25259399 -27.72695923]
[299.85449219 -43.31559372]
[312.76553345 -52.43046570]
[328.32577515 -49.66388321]
[337.30364990 -36.65720749]
[334.37271118 -21.12707329]
[321.27185059 -12.28722954]
[305.77355957 -15.38220119]
[293.42880249 -6.86123037]
[281.08404541 1.65974104]
[268.73928833 10.18071270]
[256.39453125 18.70168304]
[244.04977417 27.22265434]
[231.70501709 35.74362564]
[219.36026001 44.26459885]
[207.01550293 52.78556824]
[220.79396057 58.71464920]
[225.01351929 73.10892487]
[216.61674500 85.53849030]
[201.68782043 86.99703217]
[191.04406738 76.42771149]
[192.39791870 61.48876190]
[179.02368164 68.28067017]
[165.64945984 75.07257843]
[152.27522278 81.86448669]
[138.90100098 88.65639496]
[125.52677155 95.44830322]
[125.04016876 111.58535004]
[114.72843933 125.27287292]
[97.46376801 130.80819702]
[101.05350494 145.37231445]
[104.64324188 159.93644714]
[108.23297119 174.50057983]
[111.82270813 189.06469727]
[126.77006531 192.15327454]
[138.89187622 201.42822266]
[145.78132629 215.04798889]
[146.07054138 230.30836487]
[139.70207214 244.17939758]
[127.94039154 253.90696716]
[113.12078857 257.55966187]
[98.18571472 254.41226196]
[86.10052490 245.08964539]
[79.26475525 231.44285583]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 106]
[3 105]
[4 104]
[5 103]
[6 102]
[7 51]
[8 50]
[9 49]
[10 48]
[11 47]
[12 46]
[13 45]
[14 41]
[15 40]
[16 39]
[17 38]
[18 37]
[19 36]
[22 34]
[23 33]
[24 32]
[25 31]
[59 99]
[60 98]
[61 97]
[62 96]
[63 95]
[64 94]
[65 88]
[66 87]
[67 86]
[68 85]
[69 84]
[70 83]
[71 82]
[72 81]
[73 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
