%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUCUGUCACCCCCGGGCCCACAGCACAGCCCAGGGCCAUGCUCCUGUUCUCAGUGUUGCUGCUCCUGUCCCUGGUCACGGGAACUCAGCUCGGUCCACGGACUCCUCUCCCAGAGGCUGGAGUGGCUAUCCUAGGCA\
) } def
/len { sequence length } bind def

/coor [
[100.36839294 340.74731445]
[106.41473389 324.90817261]
[106.41473389 309.90817261]
[106.41473389 294.90817261]
[106.41473389 279.90817261]
[90.76876831 266.86376953]
[89.64797211 246.23452759]
[104.19013977 231.15525818]
[102.85505676 216.21479797]
[101.51998138 201.27432251]
[100.18489838 186.33386230]
[98.84982300 171.39338684]
[90.01043701 159.40528870]
[96.48873901 144.97122192]
[95.15366364 130.03076172]
[76.33845520 119.11713409]
[69.62129974 98.42900085]
[55.29475784 93.98486328]
[40.96822357 89.54073334]
[26.64168358 85.09659576]
[15.47989464 92.72105408]
[2.15946984 92.50177002]
[-8.43046856 84.74451447]
[-12.53302765 72.48045349]
[-26.75699806 67.71823883]
[-40.98096848 62.95603180]
[-55.20494080 58.19382095]
[-69.42890930 53.43161011]
[-83.65288544 48.66939926]
[-97.97941589 44.22526550]
[-112.40141296 40.10141373]
[-126.10070038 47.51540375]
[-140.66790771 43.12778473]
[-147.65158081 30.02191544]
[-162.07357788 25.89806557]
[-176.49557495 21.77421570]
[-190.91755676 17.65036392]
[-205.38459778 13.68743324]
[-219.89488220 9.88591385]
[-236.74926758 11.72067070]
[-243.17807007 -3.96711922]
[-229.88304138 -14.48750114]
[-216.09336853 -4.62437391]
[-201.58308411 -0.82285392]
[-194.25630188 -2.18144917]
[-186.79371643 3.22837257]
[-172.37171936 7.35222292]
[-157.94972229 11.47607327]
[-143.52774048 15.59992409]
[-130.67121887 8.16719818]
[-115.98651886 12.14392185]
[-108.27755737 25.67942238]
[-93.85556793 29.80327225]
[-89.25590515 28.26647758]
[-83.64133453 29.66085243]
[-78.89067078 34.44542694]
[-64.66670227 39.20763779]
[-50.44272995 43.96984863]
[-36.21875763 48.73205948]
[-21.99478722 53.49427032]
[-7.77081680 58.25648117]
[6.90356588 50.11553192]
[23.25875473 55.16865158]
[31.08581734 70.77005768]
[45.41235733 75.21419525]
[59.73889160 79.65832520]
[74.06542969 84.10246277]
[85.12043762 73.46827698]
[99.95909882 69.58072662]
[114.80815887 73.42835999]
[125.11528015 62.53050232]
[135.42240906 51.63264847]
[145.72952271 40.73479462]
[149.59086609 25.39202309]
[163.95762634 21.46197891]
[174.26475525 10.56412506]
[184.57186890 -0.33372951]
[182.65180969 -13.71398449]
[188.72343445 -25.57219124]
[200.35606384 -31.65527534]
[213.17230225 -29.92833900]
[223.71965027 -40.59385681]
[234.26701355 -51.25937653]
[244.81436157 -61.92489243]
[243.18466187 -77.47732544]
[251.97593689 -90.40973663]
[267.03723145 -94.61585236]
[281.25704956 -88.10966492]
[287.92126465 -73.96320343]
[283.88317871 -58.85598373]
[271.04949951 -49.92118073]
[255.47988892 -51.37753677]
[244.93252563 -40.71201706]
[234.38517761 -30.04650116]
[223.83781433 -19.38098335]
[224.67224121 -2.62042451]
[212.92384338 9.82953358]
[195.46972656 9.97339249]
[185.16261292 20.87124634]
[174.85548401 31.76910210]
[171.73138428 46.33238602]
[156.62738037 51.04191589]
[146.32025146 61.93977356]
[136.01313782 72.83762360]
[125.70600891 83.73548126]
[129.51023865 92.61898804]
[130.33616638 102.24742126]
[144.56013489 107.00962830]
[158.78410339 111.77184296]
[173.00807190 116.53404999]
[187.23204041 121.29626465]
[204.17132568 120.59134674]
[209.53796387 136.67350769]
[195.56993103 146.28237915]
[182.46983337 135.52023315]
[168.24586487 130.75802612]
[154.02189636 125.99581146]
[139.79792786 121.23359680]
[125.57395172 116.47138977]
[121.36044312 121.65791321]
[116.11614227 125.79929352]
[110.09413147 128.69567871]
[111.42920685 143.63615417]
[120.36408997 156.69288635]
[113.79029083 170.05830383]
[115.12536621 184.99877930]
[116.46044922 199.93923950]
[117.79552460 214.87971497]
[119.13060760 229.82017517]
[128.22283936 233.69569397]
[135.20460510 240.60906982]
[139.12269592 249.55596924]
[139.46453857 259.25888062]
[136.22489929 268.34954834]
[129.90058899 275.56185913]
[121.41473389 279.90817261]
[121.41473389 294.90817261]
[121.41473389 309.90817261]
[121.41473389 324.90817261]
[127.46107483 340.74731445]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 139]
[3 138]
[4 137]
[5 136]
[8 129]
[9 128]
[10 127]
[11 126]
[12 125]
[14 123]
[15 122]
[17 67]
[18 66]
[19 65]
[20 64]
[24 61]
[25 60]
[26 59]
[27 58]
[28 57]
[29 56]
[30 53]
[31 52]
[34 49]
[35 48]
[36 47]
[37 46]
[38 44]
[39 43]
[70 105]
[71 104]
[72 103]
[73 102]
[75 100]
[76 99]
[77 98]
[81 95]
[82 94]
[83 93]
[84 92]
[107 119]
[108 118]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
