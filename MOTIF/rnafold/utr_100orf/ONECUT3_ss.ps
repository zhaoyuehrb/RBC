%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGCUGAGCCUGGAGAGCCUGGGGGGCCUGCACAGCGUGGCCCACGCGCAGGCGGGCGAGCUGCUGAGCCCGGGCCACGCGCGCUCGGCGGCGGCGC\
) } def
/len { sequence length } bind def

/coor [
[97.79915619 278.79376221]
[108.07624817 266.78723145]
[106.67855835 251.85247803]
[95.08276367 242.57492065]
[93.45255280 227.44888306]
[103.26232910 215.34904480]
[101.86464691 200.41430664]
[100.46695709 185.47956848]
[99.06926727 170.54483032]
[97.67157745 155.61007690]
[96.27388763 140.67533875]
[94.87619781 125.74060059]
[82.78475189 119.81079102]
[75.22599030 108.66490173]
[60.24231339 109.36450195]
[46.81803131 117.73703003]
[33.74374008 110.60175323]
[18.76006317 111.30136108]
[10.15869236 114.88033295]
[3.30098939 111.78237152]
[-11.69719696 112.01564789]
[-26.69538307 112.24892426]
[-41.69356918 112.48220062]
[-57.43675232 118.77413940]
[-67.84094238 105.38798523]
[-57.85809326 91.68473053]
[-41.92684555 97.48401642]
[-26.92865944 97.25074005]
[-11.93047333 97.01746368]
[3.06771231 96.78417969]
[18.06045723 96.31768799]
[33.04413223 95.61808014]
[45.39668274 87.29559326]
[59.54270935 94.38082886]
[74.52638245 93.68122101]
[81.64797974 81.23739624]
[94.24630737 74.39282990]
[108.56169128 75.19013214]
[117.30281067 63.00026703]
[126.04392242 50.81039810]
[134.78503418 38.62052917]
[143.52615356 26.43065834]
[152.26727295 14.24079037]
[161.00839233 2.05092168]
[169.74949646 -10.13894749]
[178.49061584 -22.32881546]
[176.12480164 -37.72494125]
[185.16317749 -49.96268082]
[199.85562134 -52.12324524]
[208.59672546 -64.31311035]
[204.88253784 -77.36990356]
[209.35588074 -89.97901917]
[220.14802551 -97.55085754]
[233.13552856 -97.46929932]
[242.25151062 -109.38142395]
[251.36750793 -121.29354858]
[260.48348999 -133.20567322]
[269.59948730 -145.11779785]
[268.91867065 -161.14640808]
[281.11990356 -171.56318665]
[296.84344482 -168.37730408]
[304.02752686 -154.03266907]
[297.16116333 -139.53327942]
[281.51162720 -136.00181580]
[272.39562988 -124.08968353]
[263.27963257 -112.17755890]
[254.16363525 -100.26543427]
[245.04765320 -88.35330963]
[248.01245117 -71.88062286]
[238.01914978 -58.03820419]
[220.78660583 -55.57199860]
[212.04548645 -43.38212967]
[214.71284485 -28.77319908]
[206.02175903 -16.28641891]
[190.68048096 -13.58769989]
[181.93937683 -1.39783156]
[173.19825745 10.79203701]
[164.45713806 22.98190498]
[155.71601868 35.17177582]
[146.97491455 47.36164474]
[138.23379517 59.55151367]
[129.49267578 71.74137878]
[120.75156403 83.93125153]
[126.22093201 98.86204529]
[122.06564331 114.21054077]
[109.81093597 124.34291840]
[111.20862579 139.27764893]
[112.60631561 154.21240234]
[114.00400543 169.14714050]
[115.40169525 184.08187866]
[116.79938507 199.01661682]
[118.19707489 213.95135498]
[130.08160400 224.02090454]
[131.28631592 239.18675232]
[121.61329651 250.45478821]
[123.01098633 265.38952637]
[135.33740234 275.28067017]
[136.97631836 290.99975586]
[126.95539093 303.22091675]
[111.21986389 304.69354248]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 96]
[3 95]
[6 92]
[7 91]
[8 90]
[9 89]
[10 88]
[11 87]
[12 86]
[14 35]
[15 34]
[17 32]
[18 31]
[20 30]
[21 29]
[22 28]
[23 27]
[38 83]
[39 82]
[40 81]
[41 80]
[42 79]
[43 78]
[44 77]
[45 76]
[46 75]
[49 72]
[50 71]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
