%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:26:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGGGGAUCUGCUCAGACGCCAUCCUUGUUCUAGCUACCUCCAUGUGGAUGGCCUUUGCAAUUGACUUCCCCCUUCCUAUGGCCUCUGAAAGAGGUC\
) } def
/len { sequence length } bind def

/coor [
[151.89630127 225.02470398]
[147.49296570 208.95272827]
[153.53529358 193.24552917]
[145.17752075 180.78971863]
[136.81973267 168.33389282]
[128.46194458 155.87808228]
[120.10416412 143.42225647]
[111.74638367 130.96643066]
[103.38859558 118.51062012]
[84.87961578 111.20265198]
[83.27848053 91.36770630]
[73.79644012 79.74485016]
[57.59109116 82.57218933]
[42.24090958 76.92250824]
[31.85430145 64.40760803]
[29.16107941 48.46315384]
[34.79549408 33.40578461]
[24.95656395 22.08343887]
[15.11763573 10.76109505]
[5.27870655 -0.56124866]
[-9.61351299 -5.90281868]
[-12.12140274 -20.58477211]
[-21.96033096 -31.90711594]
[-31.79926109 -43.22946167]
[-41.63819122 -54.55180359]
[-51.47711945 -65.87414551]
[-61.31604767 -77.19649506]
[-71.15497589 -88.51883698]
[-84.79394531 -82.04727936]
[-99.67334747 -79.49659729]
[-114.68903351 -81.05606079]
[-128.72673035 -86.60994720]
[-140.74475098 -95.74612427]
[-149.85127258 -107.78662109]
[-155.37055969 -121.83796692]
[-156.89300537 -136.85743713]
[-154.30564880 -151.73051453]
[-147.80050659 -165.35350037]
[-137.86027527 -176.71546936]
[-125.22261047 -184.97331238]
[-110.82529449 -189.51422119]
[-95.73670959 -190.00125122]
[-81.07653046 -186.39823914]
[-67.93264008 -178.97256470]
[-57.28039551 -168.27525330]
[-49.91026688 -155.10014343]
[-46.36917114 -140.42488098]
[-46.91987991 -125.33848572]
[-51.52152252 -110.96046448]
[-59.83263397 -98.35776520]
[-49.99370193 -87.03542328]
[-40.15477371 -75.71307373]
[-30.31584549 -64.39073181]
[-20.47691727 -53.06838989]
[-10.63798714 -41.74604416]
[-0.79905856 -30.42370033]
[13.38941479 -25.89198112]
[16.60105133 -10.40017796]
[26.43997955 0.92216641]
[36.27890778 12.24451065]
[46.11783981 23.56685448]
[59.41923904 20.07803345]
[72.98400116 22.71056747]
[84.12152100 31.00100899]
[90.59724426 43.35787964]
[91.08088684 57.36694336]
[85.41929626 70.26280975]
[94.90134430 81.88566589]
[103.89772034 81.58985901]
[112.00231934 85.50621796]
[117.36083984 92.73868561]
[118.74727631 101.63251495]
[115.84441376 110.15283203]
[124.20220184 122.60865021]
[132.55998230 135.06446838]
[140.91777039 147.52029419]
[149.27555847 159.97610474]
[157.63333130 172.43193054]
[165.99111938 184.88775635]
[179.86581421 184.39002991]
[192.05650330 190.80345154]
[199.38883972 202.33580017]
[200.01452637 215.87847900]
[193.87611389 227.84411621]
[201.84246826 240.55383301]
[209.80883789 253.26354980]
[217.77520752 265.97326660]
[225.74157715 278.68298340]
[233.70794678 291.39273071]
[241.67431641 304.10244751]
[255.20948792 314.31201172]
[249.14581299 330.14450073]
[232.25346375 328.70068359]
[228.96458435 312.06881714]
[220.99822998 299.35906982]
[213.03186035 286.64935303]
[205.06549072 273.93963623]
[197.09912109 261.22991943]
[189.13275146 248.52020264]
[181.16638184 235.81048584]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 79]
[4 78]
[5 77]
[6 76]
[7 75]
[8 74]
[9 73]
[11 68]
[12 67]
[17 61]
[18 60]
[19 59]
[20 58]
[22 56]
[23 55]
[24 54]
[25 53]
[26 52]
[27 51]
[28 50]
[84 100]
[85 99]
[86 98]
[87 97]
[88 96]
[89 95]
[90 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
