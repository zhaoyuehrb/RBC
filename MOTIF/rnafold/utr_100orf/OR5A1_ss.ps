%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:20:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCCAUAACCAAAGCCUGGAACAGCUCAUCAGUGACCAUGUUCAUCCUCCUGGGAUUCACAGACCAUCCAGAACUCCAGGCCCUCCUCUUUGUGACCU\
) } def
/len { sequence length } bind def

/coor [
[98.07723236 402.36611938]
[94.71834564 386.67861938]
[105.00011444 374.36340332]
[105.00011444 359.36340332]
[105.00011444 344.36340332]
[104.76683807 329.36523438]
[104.30033875 314.37246704]
[89.28990936 310.19311523]
[76.27417755 301.59234619]
[66.51947021 289.39270020]
[60.97919846 274.76754761]
[60.20069504 259.12826538]
[64.27117157 243.98789978]
[72.80810547 230.81497192]
[84.99520111 220.89093018]
[99.66038513 215.18550110]
[98.72783661 200.21450806]
[97.79529572 185.24353027]
[96.86274719 170.27255249]
[95.93020630 155.30155945]
[94.99765778 140.33058167]
[94.06511688 125.35959625]
[82.29281616 119.09941101]
[75.16120911 107.83366394]
[74.53933716 94.51487732]
[80.59018707 82.63362122]
[91.72795105 75.30374146]
[91.26145172 60.31100082]
[81.64720917 55.01297760]
[75.22711945 46.20972824]
[73.15210724 35.59679413]
[75.74432373 25.18241501]
[82.44935608 16.90754700]
[91.95307159 12.28413963]
[92.88561249 -2.68684435]
[93.81816101 -17.65782738]
[82.49720764 -25.69467163]
[76.71372223 -38.19651031]
[77.89939117 -51.81093597]
[85.63283539 -62.94599152]
[97.77951813 -68.71788025]
[99.17720795 -83.65262604]
[100.57489014 -98.58736420]
[90.76511383 -110.68719482]
[92.39532471 -125.81324005]
[103.99111938 -135.09078979]
[105.38880920 -150.02552795]
[106.78649902 -164.96028137]
[108.18418884 -179.89501953]
[109.58187866 -194.82975769]
[105.03771973 -211.16337585]
[119.47506714 -220.05152893]
[132.01252747 -208.63890076]
[124.51661682 -193.43206787]
[123.11892700 -178.49732971]
[121.72123718 -163.56259155]
[120.32354736 -148.62785339]
[118.92585754 -133.69309998]
[128.59887695 -122.42507935]
[127.39416504 -107.25921631]
[115.50963593 -97.18967438]
[114.11194611 -82.25493622]
[112.71425629 -67.32019043]
[125.34016418 -56.95726776]
[129.40397644 -40.96636963]
[123.13339233 -25.52689934]
[108.78914642 -16.72528458]
[107.85659790 -1.75429964]
[106.92405701 13.21668434]
[120.87806702 26.58674622]
[120.77797699 46.20972824]
[106.25419617 59.84450150]
[106.72069550 74.83724213]
[120.28070831 83.65911102]
[126.01646423 98.78526306]
[121.71511078 114.38005829]
[109.03610229 124.42704773]
[109.96864319 139.39804077]
[110.90119171 154.36901855]
[111.83373260 169.33999634]
[112.76628113 184.31098938]
[113.69882202 199.28196716]
[114.63137054 214.25296021]
[128.72218323 217.61204529]
[141.26931763 224.81906128]
[151.24827576 235.27510071]
[157.84727478 248.11642456]
[160.53321838 262.28576660]
[159.09472656 276.61941528]
[153.65878296 289.94281006]
[144.67962646 301.16674805]
[132.90066528 309.37640381]
[119.29308319 313.90597534]
[119.75958252 328.89871216]
[123.20436096 337.55471802]
[120.00011444 344.36340332]
[120.00011444 359.36340332]
[120.00011444 374.36340332]
[130.28189087 386.67861938]
[126.92300415 402.36611938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 98]
[4 97]
[5 96]
[6 94]
[7 93]
[16 83]
[17 82]
[18 81]
[19 80]
[20 79]
[21 78]
[22 77]
[27 73]
[28 72]
[34 69]
[35 68]
[36 67]
[41 63]
[42 62]
[43 61]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
