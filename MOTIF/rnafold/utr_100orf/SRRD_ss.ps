%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGACCAAUGGCUGCGGCCGCAGCUGCGGCGCUGGAAUCCUGGCAGGCGGCGGCUCCGCGGAAGAGGCGCUCCGCGGCUCGACGGCCGCGGCGGAGGGAGGCGGCGC\
) } def
/len { sequence length } bind def

/coor [
[124.76725006 485.54943848]
[122.58393860 470.50610352]
[126.32849884 455.77359009]
[135.42990112 443.59851074]
[148.50027466 435.83746338]
[146.32629395 420.99581909]
[132.43368530 415.62359619]
[123.03285980 403.94110107]
[120.72657776 389.02307129]
[126.23317719 374.86065674]
[138.16712952 365.29364014]
[135.99314880 350.45199585]
[133.81916809 335.61038208]
[131.64518738 320.76876831]
[129.47120667 305.92712402]
[127.29723358 291.08551025]
[125.12325287 276.24386597]
[122.94927979 261.40225220]
[120.77529907 246.56062317]
[118.60131836 231.71900940]
[105.47253418 217.64889526]
[112.77787018 198.97206116]
[109.74460602 184.28195190]
[106.71134186 169.59184265]
[103.67807770 154.90173340]
[100.64482117 140.21162415]
[97.61155701 125.52151489]
[94.57829285 110.83140564]
[91.11904907 96.23572540]
[87.23677063 81.74684143]
[83.35448456 67.25795746]
[79.47219849 52.76906586]
[75.58991241 38.28017807]
[62.31054306 34.27149200]
[52.85046387 24.27585793]
[49.62970734 11.00744724]
[53.39393997 -2.00395179]
[63.04523087 -11.35189724]
[59.58599472 -25.94757080]
[56.12675476 -40.54324341]
[52.45560455 -55.08706284]
[48.57331848 -69.57595062]
[44.69103622 -84.06483459]
[40.12489319 -89.19023132]
[39.10947037 -94.98201752]
[41.03057480 -99.50952911]
[37.99731064 -114.19963837]
[34.96404648 -128.88975525]
[23.66369438 -140.77394104]
[28.56441116 -156.42370605]
[44.62476349 -159.73989868]
[55.32323456 -147.31111145]
[49.65415573 -131.92301941]
[52.68741989 -117.23290253]
[55.72068405 -102.54279327]
[59.17992020 -87.94712067]
[63.06220627 -73.45823669]
[66.94449615 -58.96934891]
[71.79056549 -53.23448944]
[70.72242737 -44.00248337]
[74.18166351 -29.40680885]
[77.64090729 -14.81113529]
[92.92864990 -9.02990818]
[101.89484406 4.83272743]
[100.87789154 21.47644424]
[90.07879639 34.39789200]
[93.96108246 48.88677979]
[97.84336853 63.37566757]
[101.72565460 77.86455536]
[105.60794067 92.35344696]
[109.57271576 96.04061890]
[111.10354614 101.71948242]
[109.26840210 107.79814148]
[112.30166626 122.48825073]
[115.33493042 137.17835999]
[118.36819458 151.86846924]
[121.40145111 166.55857849]
[124.43471527 181.24868774]
[127.46797943 195.93879700]
[137.04658508 201.49240112]
[141.80973816 211.24166870]
[140.36358643 221.77189636]
[133.44294739 229.54502869]
[135.61692810 244.38665771]
[137.79090881 259.22827148]
[139.96487427 274.06991577]
[142.13885498 288.91152954]
[144.31283569 303.75314331]
[146.48681641 318.59478760]
[148.66079712 333.43640137]
[150.83476257 348.27801514]
[153.00874329 363.11965942]
[167.18519592 368.86209106]
[176.52229309 380.85021973]
[178.59143066 395.80297852]
[172.93612671 409.69085693]
[161.16792297 418.82186890]
[163.34190369 433.66348267]
[178.08906555 437.34988403]
[190.29997253 446.40316772]
[198.11254883 459.44281006]
[200.33543396 474.48031616]
[196.62965393 489.22262573]
[187.56030273 501.42163086]
[174.51040649 509.21704102]
[159.46997070 511.42013550]
[144.73254395 507.69497681]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 98]
[6 97]
[11 92]
[12 91]
[13 90]
[14 89]
[15 88]
[16 87]
[17 86]
[18 85]
[19 84]
[20 83]
[22 79]
[23 78]
[24 77]
[25 76]
[26 75]
[27 74]
[28 73]
[29 70]
[30 69]
[31 68]
[32 67]
[33 66]
[38 62]
[39 61]
[40 60]
[41 58]
[42 57]
[43 56]
[46 55]
[47 54]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
