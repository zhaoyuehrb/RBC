%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:18:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAGGCUCGCCGCGGGGCGCUGAGCAGGCCGGGACACCGCGGCCGAGGUUAUCGUUAGGCAUCUCCCAGGCGACCGGCUCCGCAGCAAGAUGGCGGACGAGAAGGACAGGGAAGAGAUAAUAGUAGCAGAAUUUCACAAAAAAAUCAAAGAGGCAUUUGAAGUCUUUGACCAUGAGUCGAAUAAUACAG\
) } def
/len { sequence length } bind def

/coor [
[85.79085541 115.94778442]
[71.27569580 119.73067474]
[56.76054382 123.51357269]
[49.23013687 128.71449280]
[41.97552490 127.23722839]
[27.40011406 130.78088379]
[19.78518486 135.85723877]
[12.55584908 134.26084900]
[-2.07587218 137.56430054]
[-16.70759392 140.86773682]
[-31.33931541 144.17117310]
[-45.97103500 147.47462463]
[-53.51449585 157.95060730]
[-65.78181458 160.39382935]
[-76.08051300 154.02816772]
[-90.76458740 157.09051514]
[-105.44866180 160.15286255]
[-120.13273621 163.21519470]
[-134.52359009 177.31546021]
[-152.61608887 170.52078247]
[-167.19149780 174.06442261]
[-181.76690674 177.60807800]
[-193.34857178 188.38656616]
[-207.54345703 183.87501526]
[-222.11886597 187.41865540]
[-236.69427490 190.96231079]
[-235.49885559 206.11645508]
[-248.65867615 221.39845276]
[-262.64312744 226.82383728]
[-276.62759399 232.24923706]
[-290.61206055 237.67462158]
[-304.59652710 243.10002136]
[-318.53588867 248.64022827]
[-332.42922974 254.29489136]
[-344.82046509 265.86614990]
[-359.36972046 257.16241455]
[-355.03378296 240.77230835]
[-338.08389282 240.40156555]
[-324.19055176 234.74690247]
[-319.17184448 229.30409241]
[-310.02191162 229.11555481]
[-296.03744507 223.69017029]
[-282.05297852 218.26477051]
[-268.06854248 212.83938599]
[-254.08407593 207.41398621]
[-256.29647827 192.57804871]
[-271.25540161 191.46881104]
[-284.29724121 200.81173706]
[-299.69338989 196.30197144]
[-305.63323975 181.39903259]
[-297.56027222 167.53517151]
[-281.66735840 165.34556580]
[-270.14617920 176.50988770]
[-255.18724060 177.61911011]
[-240.23793030 176.38690186]
[-225.66252136 172.84324646]
[-211.08711243 169.29960632]
[-200.54798889 158.77458191]
[-185.31056213 163.03266907]
[-170.73515320 159.48901367]
[-156.15974426 155.94537354]
[-151.64064026 146.75753784]
[-142.61633301 141.47080994]
[-131.95314026 142.04481506]
[-123.19508362 148.53112793]
[-108.51100922 145.46878052]
[-93.82692719 142.40643311]
[-79.14285278 139.34410095]
[-66.71631622 126.96291351]
[-49.27447891 132.84289551]
[-34.64275742 129.53945923]
[-20.01103592 126.23601532]
[-5.37931490 122.93257141]
[9.25240612 119.62912750]
[23.85646629 116.20546722]
[38.43187332 112.66181946]
[52.97764969 108.99842072]
[67.49280548 105.21552277]
[82.00795746 101.43262482]
[89.86120605 88.65270233]
[86.67820740 73.99430847]
[83.49520874 59.33591461]
[80.31220245 44.67752075]
[77.12920380 30.01912689]
[62.64090729 24.71886444]
[53.33633041 12.41323948]
[52.18453217 -2.97106767]
[59.55304718 -16.52498055]
[73.09060669 -23.92349434]
[88.47742462 -22.80577087]
[100.80362701 -13.52847099]
[106.13597107 0.94805181]
[102.77291107 16.00439262]
[91.78759766 26.83612823]
[94.97059631 41.49452209]
[98.15360260 56.15291595]
[101.33660126 70.81130981]
[104.51959991 85.46970367]
[116.75556183 94.14617920]
[131.64157104 92.30045319]
[146.52758789 90.45472717]
[154.80847168 74.34031677]
[170.95744324 66.47952271]
[188.44024658 69.84357452]
[200.30767822 82.90352631]
[215.12493896 80.56919861]
[227.55288696 70.77854919]
[241.32919312 76.44094086]
[256.14642334 74.10660553]
[270.96368408 71.77227783]
[285.78094482 69.43794250]
[300.59817505 67.10361481]
[315.41543579 64.76927948]
[325.09338379 42.85863876]
[354.48873901 38.13001633]
[367.00347900 29.86068153]
[379.51818848 21.59134293]
[392.03289795 13.32200718]
[404.54760742 5.05267000]
[402.44064331 -10.06432247]
[407.10952759 -24.59581566]
[417.62725830 -35.65657043]
[431.90551758 -41.05046463]
[447.10934448 -39.70653915]
[460.22003174 -31.89163017]
[468.63442993 -19.15739250]
[470.68182373 -4.03222084]
[465.95574951 10.48077297]
[455.39456177 21.50002289]
[441.09518433 26.83765030]
[425.89675903 25.43386269]
[412.81695557 17.56738472]
[400.30224609 25.83672142]
[387.78750610 34.10605621]
[375.27279663 42.37539291]
[362.75808716 50.64473343]
[363.68093872 58.08773804]
[378.56695557 56.24201202]
[393.45297241 54.39628601]
[407.04013062 48.04103851]
[417.28286743 58.99943924]
[410.02581787 72.12709045]
[395.29870605 69.28229523]
[380.41268921 71.12802124]
[365.52667236 72.97374725]
[366.44952393 80.41675568]
[380.60488892 85.37925720]
[394.76022339 90.34175873]
[408.91555786 95.30426025]
[423.07089233 100.26676178]
[437.20367432 93.19288635]
[452.17245483 98.26349640]
[459.09652710 112.47029114]
[453.86791992 127.38462830]
[439.58871460 134.15809631]
[424.73049927 128.77210999]
[418.10839844 114.42209625]
[403.95303345 109.45959473]
[389.79769897 104.49709320]
[375.64236450 99.53459167]
[361.48703003 94.57209015]
[341.80541992 99.52074432]
[325.41635132 92.72498322]
[317.74975586 79.58653259]
[302.93252563 81.92086029]
[288.11526489 84.25519562]
[273.29800415 86.58952332]
[258.48077393 88.92385864]
[243.66351318 91.25818634]
[232.29541016 100.88186646]
[217.45927429 95.38644409]
[202.64201355 97.72077942]
[198.77728271 109.24916840]
[190.32295227 118.08807373]
[178.84294128 122.51345825]
[166.49913025 121.62603760]
[155.64419556 115.53331757]
[148.37330627 105.34073639]
[133.48728943 107.18646240]
[118.60128784 109.03218842]
[131.61901855 116.48460388]
[140.23614502 128.76243591]
[142.81924438 143.53834534]
[138.87867737 158.01148987]
[129.16139221 169.43840027]
[115.50934601 175.65304565]
[100.51037598 175.47741699]
[87.00760651 168.94477844]
[77.56056213 157.29345703]
[73.95998383 142.73200989]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 79]
[2 78]
[3 77]
[5 76]
[6 75]
[8 74]
[9 73]
[10 72]
[11 71]
[12 70]
[15 68]
[16 67]
[17 66]
[18 65]
[20 61]
[21 60]
[22 59]
[24 57]
[25 56]
[26 55]
[28 45]
[29 44]
[30 43]
[31 42]
[32 41]
[33 39]
[34 38]
[46 54]
[47 53]
[80 98]
[81 97]
[82 96]
[83 95]
[84 94]
[99 180]
[100 179]
[101 178]
[105 172]
[106 171]
[108 169]
[109 168]
[110 167]
[111 166]
[112 165]
[113 164]
[115 136]
[116 135]
[117 134]
[118 133]
[119 132]
[146 161]
[147 160]
[148 159]
[149 158]
[150 157]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
