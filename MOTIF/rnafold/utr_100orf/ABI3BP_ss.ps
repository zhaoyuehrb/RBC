%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:45:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCAGCCGCCCGCCUCUGUCACUGGGAGACAGUCCACUUAAAUGCAGCUCCAGGGUUGCGAGGCACCCACCAGCAUCAUUCCCCAUGCGAGGUGGCAAAUGCAACAUGCUCUCCAGUUUGGGGUGUCUACUUCUCUGUGGAAGUAUUACACUAGCCCUGGGAAAUGCACAGAAAUUGCCAAAAG\
) } def
/len { sequence length } bind def

/coor [
[135.99334717 278.66915894]
[132.23356628 264.14797974]
[128.47378540 249.62683105]
[124.71398926 235.10566711]
[120.95420074 220.58451843]
[108.12005615 216.86303711]
[98.72935486 207.20455933]
[95.31562042 194.06120300]
[98.87557983 180.84448242]
[108.58131409 171.03987122]
[105.06731415 156.45729065]
[101.55332184 141.87469482]
[88.69145966 134.15637207]
[74.17030334 137.91615295]
[59.64915085 141.67594910]
[45.12799072 145.43572998]
[30.60683632 149.19551086]
[34.64783859 155.43348694]
[36.49683380 163.57037354]
[35.53363419 172.87309265]
[31.37028122 182.43502808]
[23.89502335 191.24612427]
[11.73005486 200.02185059]
[-0.43491432 208.79759216]
[-12.59988308 217.57333374]
[-16.57216644 233.11683655]
[-31.25980377 239.57073975]
[-45.39569473 231.98416138]
[-48.13599396 216.17687988]
[-37.37857819 204.27487183]
[-21.37561798 205.40835571]
[-9.21064949 196.63262939]
[2.95431995 187.85688782]
[15.11928940 179.08114624]
[13.54756260 171.74769592]
[-1.11936283 174.89114380]
[-15.78628826 178.03459167]
[-30.45321465 181.17805481]
[-45.12018967 184.32127380]
[-48.26318741 169.65425110]
[-33.59666824 166.51112366]
[-18.92974091 163.36767578]
[-4.26281548 160.22421265]
[10.40410995 157.08076477]
[8.83238411 149.74729919]
[-5.86056519 146.72782898]
[-20.55351448 143.70834351]
[-35.24646378 140.68887329]
[-49.93941116 137.66938782]
[-64.63236237 134.64991760]
[-80.01513672 140.33341980]
[-92.45395660 129.64662170]
[-89.15283203 113.58316803]
[-73.50767517 108.66776276]
[-61.61288452 119.95696259]
[-46.91993332 122.97644043]
[-32.22698593 125.99591827]
[-17.53403664 129.01539612]
[-2.84108758 132.03488159]
[11.85186195 135.05435181]
[26.84704781 134.67436218]
[41.36820602 130.91456604]
[55.88936234 127.15478516]
[70.41051483 123.39499664]
[84.93167114 119.63520813]
[60.76444626 116.77304840]
[39.76468658 93.45227814]
[36.12702942 54.34866333]
[30.68062210 40.37237549]
[25.23421288 26.39608574]
[19.78780556 12.41979694]
[14.34139729 -1.55649173]
[-0.28866422 -12.72210312]
[3.01734018 -29.94740105]
[-2.66434288 -43.82970810]
[-8.34602642 -57.71201706]
[-14.02770996 -71.59432220]
[-29.13203812 -75.14944458]
[-39.23652267 -86.92565155]
[-40.45578766 -102.39474487]
[-32.32099152 -115.60855865]
[-17.96013832 -121.48609924]
[-2.89526415 -117.76733398]
[7.08087778 -105.88220978]
[8.13225746 -90.40079498]
[-0.14540158 -77.27600861]
[5.53628159 -63.39369965]
[11.21796513 -49.51139069]
[16.89964867 -35.62908554]
[27.94170570 -30.65604591]
[32.78219604 -19.11899948]
[28.31768608 -7.00289965]
[33.76409531 6.97338867]
[39.21050262 20.94967651]
[44.65690994 34.92596436]
[50.10331726 48.90225601]
[57.59903717 49.15555954]
[53.44842529 34.74124908]
[65.87474823 26.33966637]
[77.70495605 35.56171799]
[72.59048462 49.66217422]
[80.08620453 49.91547775]
[86.46372223 36.33876038]
[92.84123993 22.76204300]
[94.10289764 5.85510540]
[110.69837189 2.38715386]
[118.62487793 17.37404251]
[106.41795349 29.13956261]
[100.04043579 42.71627808]
[93.66291809 56.29299545]
[99.67042542 60.78297043]
[113.45467377 54.86734390]
[111.68544769 69.76290894]
[117.69295502 74.25288391]
[128.90768433 64.29146576]
[140.12240601 54.33004379]
[147.94917297 39.29082489]
[164.56732178 42.64844513]
[165.94126892 59.54662704]
[150.08383179 65.54477692]
[138.86909485 75.50619507]
[127.65437317 85.46761322]
[133.33605957 99.34992218]
[148.31680298 98.59017944]
[163.29754639 97.83044434]
[178.27830505 97.07070923]
[193.25904846 96.31096649]
[208.46945190 85.94984436]
[223.77252197 94.52053070]
[238.73829651 93.50788879]
[253.70408630 92.49523926]
[268.66986084 91.48259735]
[283.63565063 90.46994781]
[298.60140991 89.45730591]
[313.56719971 88.44465637]
[326.87435913 78.86072540]
[341.71475220 85.83890533]
[342.82183838 102.20063782]
[329.05676270 111.11437988]
[314.57983398 103.41043854]
[299.61407471 104.42308044]
[284.64828491 105.43572998]
[269.68249512 106.44837189]
[254.71672058 107.46102142]
[239.75094604 108.47367096]
[224.78517151 109.48631287]
[216.58296204 118.39597321]
[204.10806274 119.35014343]
[194.01878357 111.29171753]
[179.03804016 112.05145264]
[164.05728149 112.81119537]
[149.07653809 113.57093048]
[134.09579468 114.33066559]
[129.60581970 120.33817291]
[144.50108337 122.10763550]
[150.41622925 135.89208984]
[141.43601990 147.90690613]
[126.54079437 146.13713074]
[120.62587738 132.35319519]
[116.13590240 138.36070251]
[119.64990234 152.94328308]
[123.16390228 167.52587891]
[138.87460327 173.76423645]
[147.69067383 187.99215698]
[146.31089783 204.50643921]
[135.47535706 216.82472229]
[139.23515320 231.34588623]
[142.99493408 245.86705017]
[146.75473022 260.38821411]
[150.51451111 274.90936279]
[165.60585022 276.33325195]
[179.29872131 282.83563232]
[189.93966675 293.63128662]
[196.24374390 307.41656494]
[197.44967651 322.52688599]
[193.41188049 337.13757324]
[184.61790466 349.48428345]
[172.12968445 358.07617188]
[157.45521545 361.87564087]
[142.36653137 360.42391968]
[128.68565369 353.89633179]
[118.06462860 343.08111572]
[111.78597260 329.28421021]
[110.60787964 314.17169189]
[114.67260742 299.56848145]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 170]
[2 169]
[3 168]
[4 167]
[5 166]
[10 162]
[11 161]
[12 160]
[13 65]
[14 64]
[15 63]
[16 62]
[17 61]
[22 34]
[23 33]
[24 32]
[25 31]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[50 55]
[68 96]
[69 95]
[70 94]
[71 93]
[72 92]
[74 89]
[75 88]
[76 87]
[77 86]
[102 110]
[103 109]
[104 108]
[114 122]
[115 121]
[116 120]
[123 153]
[124 152]
[125 151]
[126 150]
[127 149]
[129 146]
[130 145]
[131 144]
[132 143]
[133 142]
[134 141]
[135 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
