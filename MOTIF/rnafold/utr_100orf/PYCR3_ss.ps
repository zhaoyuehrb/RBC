%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:52:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGAUCUGUGGGCGGGGCGCGGCCUGUGGAUGGGCGGUGAGCGCAGCGGCGUCCGAGGCAACAAGAUGGCAGCUGCGGAGCCGUCUCCGCGGCGCGUGGGCUUCGUGGGCGCGGGCCGCAUGGCGGGGG\
) } def
/len { sequence length } bind def

/coor [
[106.14419556 367.93182373]
[105.48603821 352.94625854]
[112.88619995 339.89874268]
[126.08541870 332.77267456]
[141.05395508 333.74365234]
[153.22360229 342.51736450]
[150.01116943 327.86538696]
[146.79872131 313.21340942]
[143.58628845 298.56143188]
[140.37384033 283.90948486]
[137.16139221 269.25750732]
[123.09122467 256.07934570]
[129.21873474 236.94383240]
[125.30749512 222.46273804]
[121.39626312 207.98164368]
[117.48503113 193.50053406]
[113.57379150 179.01943970]
[109.66255951 164.53834534]
[105.75132751 150.05723572]
[94.96306610 139.78773499]
[98.83432770 124.44746399]
[94.92309570 109.96636963]
[90.83850098 95.53320312]
[86.58114624 81.15005493]
[82.15163422 66.81899261]
[77.55060577 52.54207230]
[72.94957733 38.26514816]
[68.34854889 23.98822594]
[63.74751663 9.71130180]
[59.14648819 -4.56562042]
[54.54545593 -18.84254265]
[49.79354858 -23.66855240]
[48.46945953 -29.32439804]
[50.08392334 -33.91548538]
[46.17269135 -48.39658737]
[42.26145935 -62.87768555]
[38.35022354 -77.35878754]
[34.43899155 -91.83988953]
[30.52775764 -106.32098389]
[18.10489845 -111.67733765]
[11.16400337 -123.06147003]
[12.06562042 -136.16850281]
[20.25310707 -146.19255066]
[16.69024467 -160.76327515]
[13.12738323 -175.33399963]
[9.56452179 -189.90472412]
[6.00165987 -204.47544861]
[2.43879795 -219.04617310]
[-12.65153122 -227.80039978]
[-16.71044922 -244.42129517]
[-7.71436214 -258.57754517]
[-11.62559605 -273.05865479]
[-15.53682899 -287.53976440]
[-19.44806290 -302.02084351]
[-34.40001678 -305.29156494]
[-46.11186981 -315.14505005]
[-51.89232254 -329.31704712]
[-50.41307068 -344.55090332]
[-42.01403809 -357.34600830]
[-28.62525368 -364.76214600]
[-13.32336807 -365.09512329]
[0.37535879 -358.26846313]
[9.32306004 -345.85083008]
[11.46362019 -330.69577026]
[6.30515289 -316.28573608]
[-4.96696281 -305.93209839]
[-1.05572951 -291.45098877]
[2.85550404 -276.96987915]
[6.76673746 -262.48880005]
[18.77524185 -257.66052246]
[25.89029503 -246.61592102]
[25.30506706 -233.29556274]
[17.00952339 -222.60902405]
[20.57238388 -208.03829956]
[24.13524628 -193.46757507]
[27.69810867 -178.89685059]
[31.26096916 -164.32612610]
[34.82383347 -149.75540161]
[49.53473282 -141.69818115]
[54.00089264 -125.18206787]
[45.00885773 -110.23221588]
[48.92008972 -95.75112152]
[52.83132553 -81.27001953]
[56.74255753 -66.78891754]
[60.65378952 -52.30781937]
[64.56502533 -37.82672119]
[68.82238007 -23.44357300]
[73.42340851 -9.16665077]
[78.02443695 5.11027241]
[82.62547302 19.38719559]
[87.22650146 33.66411972]
[91.82752991 47.94104004]
[96.42855835 62.21796417]
[101.52511597 67.67349243]
[100.96429443 76.89270020]
[105.22164917 91.27584839]
[110.39577484 97.56917572]
[109.40419006 106.05513000]
[113.31542206 120.53623199]
[124.38344574 131.84152222]
[120.23242950 146.14601135]
[124.14366150 160.62710571]
[128.05490112 175.10820007]
[131.96612549 189.58930969]
[135.87736511 204.07040405]
[139.78858948 218.55149841]
[143.69982910 233.03260803]
[153.53507996 237.96331787]
[158.87414551 247.32965088]
[158.13623047 257.86416626]
[151.81336975 266.04507446]
[155.02581787 280.69702148]
[158.23825073 295.34899902]
[161.45069885 310.00097656]
[164.66313171 324.65295410]
[167.87557983 339.30490112]
[172.64746094 353.52563477]
[178.92327881 367.14965820]
[185.19908142 380.77368164]
[191.47489929 394.39773560]
[203.59349060 406.25421143]
[195.55513000 421.18139648]
[178.98606873 417.58944702]
[177.85087585 400.67352295]
[171.57505798 387.04949951]
[165.29924011 373.42547607]
[159.02343750 359.80145264]
[154.61076355 374.13772583]
[143.25865173 383.94226074]
[128.43286133 386.22177124]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 116]
[7 115]
[8 114]
[9 113]
[10 112]
[11 111]
[13 107]
[14 106]
[15 105]
[16 104]
[17 103]
[18 102]
[19 101]
[21 99]
[22 98]
[23 96]
[24 95]
[25 93]
[26 92]
[27 91]
[28 90]
[29 89]
[30 88]
[31 87]
[34 86]
[35 85]
[36 84]
[37 83]
[38 82]
[39 81]
[43 78]
[44 77]
[45 76]
[46 75]
[47 74]
[48 73]
[51 69]
[52 68]
[53 67]
[54 66]
[117 127]
[118 126]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
