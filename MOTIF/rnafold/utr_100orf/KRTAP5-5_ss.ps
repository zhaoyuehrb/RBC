%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:21:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCUCCUCUACCUGCUCCACCCUCAAUCCACCAGAACCAUGGGCUGCUGUGGCUGCUCCGGAGGCUGUGGCUCCGGCUGUGGAGGCCGUGGCUCCGGCUGUGGGGGCUGUGGCUCCGGCUGUGGAGGCUGUGGCUCUG\
) } def
/len { sequence length } bind def

/coor [
[95.54232788 362.14843750]
[80.80531311 358.30914307]
[68.90800476 348.80261230]
[61.91170120 335.27590942]
[61.02853775 320.07263184]
[66.41153717 305.82681274]
[77.12805939 295.00665283]
[91.32140350 289.48678589]
[91.99921417 274.50210571]
[92.67702484 259.51742554]
[93.35483551 244.53274536]
[81.61700439 235.40251160]
[77.45695496 220.94021606]
[82.67148590 206.63420105]
[95.45775604 198.04249573]
[96.13556671 183.05781555]
[96.81337738 168.07315063]
[97.49118805 153.08847046]
[98.16899872 138.10379028]
[98.84680939 123.11911011]
[91.06793976 135.94444275]
[88.44750977 150.71377563]
[78.37436676 161.82826233]
[63.93316650 165.88433838]
[49.54619598 161.63993835]
[39.61912155 150.39479065]
[37.19187927 135.59248352]
[43.00775909 121.76585388]
[55.28577805 113.14899445]
[70.26499939 112.38037109]
[83.95585632 106.25170135]
[69.00276184 105.06636810]
[54.04967117 103.88103485]
[42.19037628 114.32769012]
[26.42318535 113.24543762]
[16.10249519 101.27635193]
[17.35138702 85.52149200]
[29.42891693 75.32791901]
[45.16969681 76.74331665]
[55.23500443 88.92794037]
[70.18809509 90.11327362]
[85.14118958 91.29861450]
[98.40480804 84.29315186]
[105.85581970 71.27461243]
[113.30683136 58.25606918]
[120.75785065 45.23752975]
[116.83264160 30.16336250]
[124.57447815 17.06685257]
[138.96958923 13.41766453]
[146.42059326 0.39912358]
[146.56039429 -15.42146492]
[159.59768677 -22.62411690]
[167.04870605 -35.64265823]
[167.18849182 -51.46324539]
[180.22578430 -58.66589737]
[187.67680359 -71.68444061]
[195.12782288 -84.70298004]
[202.57882690 -97.72151947]
[210.02984619 -110.74005890]
[203.83132935 -124.84270477]
[207.08737183 -139.71722412]
[218.34458923 -149.70417786]
[233.14675903 -151.13032532]
[240.59777832 -164.14888000]
[248.04878235 -177.16741943]
[255.49980164 -190.18595886]
[262.95080566 -203.20449829]
[263.09060669 -219.02508545]
[276.12789917 -226.22773743]
[283.57891846 -239.24627686]
[291.02993774 -252.26481628]
[298.48092651 -265.28335571]
[298.62072754 -281.10394287]
[311.65802002 -288.30661011]
[319.10903931 -301.32513428]
[326.56005859 -314.34368896]
[334.01107788 -327.36221313]
[341.46209717 -340.38076782]
[338.65591431 -356.17648315]
[349.36361694 -368.12322998]
[365.37115479 -367.05648804]
[374.39892578 -353.79455566]
[369.52160645 -338.51086426]
[354.48062134 -332.92974854]
[347.02960205 -319.91119385]
[339.57861328 -306.89266968]
[332.12759399 -293.87411499]
[324.67657471 -280.85559082]
[325.06973267 -265.96615601]
[311.49948120 -257.83233643]
[304.04846191 -244.81379700]
[296.59744263 -231.79525757]
[289.14645386 -218.77671814]
[289.53958130 -203.88729858]
[275.96936035 -195.75347900]
[268.51834106 -182.73493958]
[261.06732178 -169.71640015]
[253.61631775 -156.69786072]
[246.16529846 -143.67932129]
[252.43305969 -130.19403076]
[249.52388000 -115.42918396]
[238.34777832 -105.08760834]
[223.04838562 -103.28904724]
[215.59736633 -90.27050781]
[208.14636230 -77.25196838]
[200.69534302 -64.23342896]
[193.24433899 -51.21488571]
[193.63748169 -36.32546997]
[180.06724548 -28.19164467]
[172.61622620 -15.17310333]
[173.00938416 -0.28368792]
[159.43913269 7.85013723]
[151.98812866 20.86867714]
[156.13293457 35.12897491]
[148.76200867 48.43777084]
[133.77638245 52.68854141]
[126.32537842 65.70708466]
[118.87435913 78.72562408]
[111.42334747 91.74416351]
[120.35561371 104.32250214]
[113.83148956 123.79692078]
[113.15367889 138.78160095]
[112.47586823 153.76628113]
[111.79805756 168.75096130]
[111.12024689 183.73562622]
[110.44243622 198.72030640]
[122.40081787 208.43130493]
[126.30246735 223.14967346]
[120.85372162 237.17733765]
[108.33951569 245.21055603]
[107.66170502 260.19525146]
[106.98389435 275.17993164]
[106.30608368 290.16458130]
[119.94312286 296.94332886]
[129.63900757 308.68682861]
[133.71388245 323.36044312]
[131.46173096 338.42190552]
[123.27277374 351.26171875]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 133]
[9 132]
[10 131]
[11 130]
[15 126]
[16 125]
[17 124]
[18 123]
[19 122]
[20 121]
[31 42]
[32 41]
[33 40]
[43 119]
[44 118]
[45 117]
[46 116]
[49 113]
[50 112]
[52 110]
[53 109]
[55 107]
[56 106]
[57 105]
[58 104]
[59 103]
[63 99]
[64 98]
[65 97]
[66 96]
[67 95]
[69 93]
[70 92]
[71 91]
[72 90]
[74 88]
[75 87]
[76 86]
[77 85]
[78 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
