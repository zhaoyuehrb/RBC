%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGCGGGUUGGACCCGGGAGGGCGGGGGUCUCUUGCCAGGGCCGGGGCCGGGGACGGGGCGGGAGCGGUCAGCGGCGACCUCCAACCUGGGAGAUCU\
) } def
/len { sequence length } bind def

/coor [
[82.50263977 304.30044556]
[72.62810516 292.77401733]
[67.58789062 278.45758057]
[68.06362915 263.28726196]
[73.99098969 249.31477356]
[84.56834412 238.42973328]
[98.36518860 232.10427856]
[97.43264771 217.13330078]
[96.50009918 202.16230774]
[95.56755829 187.19132996]
[94.63500977 172.22035217]
[93.70246887 157.24935913]
[92.76992798 142.27838135]
[91.83737946 127.30739594]
[90.90483856 112.33641052]
[82.54705048 99.88059235]
[69.04701233 93.34232330]
[55.54697037 86.80406189]
[42.04693222 80.26579285]
[28.54689217 73.72752380]
[13.83630848 81.90216827]
[-2.69280338 79.78417206]
[-14.62817192 68.39249420]
[-17.45672417 52.30513763]
[-31.15357208 46.18988037]
[-44.85042191 40.07462692]
[-58.54727173 33.95937347]
[-72.24411774 27.84411812]
[-85.94096375 21.72886467]
[-101.37799835 26.09667206]
[-114.33325195 16.63406372]
[-114.86856842 0.59994429]
[-102.57330322 -9.70568275]
[-86.87932587 -6.37722206]
[-79.82571411 8.03201580]
[-66.12886810 14.14727020]
[-52.43201447 20.26252365]
[-38.73516846 26.37777901]
[-25.03831863 32.49303436]
[-11.34146976 38.60828781]
[-0.34926379 30.86051178]
[13.14825916 29.59067535]
[25.59079742 35.24236298]
[33.64228058 46.41904831]
[35.08515930 60.22748566]
[48.58519745 66.76575470]
[62.08523941 73.30401611]
[75.58528137 79.84228516]
[89.08531952 86.38055420]
[103.96936798 84.51907349]
[115.44335175 74.85741425]
[126.91734314 65.19575500]
[138.39132690 55.53409958]
[139.89012146 40.02954102]
[151.66401672 30.39469910]
[166.43600464 31.91912079]
[177.90998840 22.25746346]
[189.38398743 12.59580803]
[189.71034241 1.50079191]
[196.04380798 -7.34330130]
[206.02720642 -11.06969738]
[216.17510986 -8.64141655]
[228.22755432 -17.57104874]
[234.25770569 -32.82126999]
[250.51730347 -34.95613098]
[260.27987671 -21.77946472]
[253.50250244 -6.84629965]
[237.15719604 -5.51859474]
[225.10473633 3.41103816]
[218.93553162 21.62514877]
[199.04563904 24.06979561]
[187.57165527 33.73145294]
[176.09765625 43.39310837]
[175.08499146 58.20898056]
[163.58636475 68.17072296]
[148.05297852 67.00808716]
[136.57899475 76.66974640]
[125.10501099 86.33139801]
[113.63101959 95.99305725]
[113.93126678 99.86460876]
[113.17414093 103.59599304]
[111.45808411 106.90970612]
[108.95124817 109.57087708]
[105.87581635 111.40386963]
[106.80836487 126.37484741]
[107.74090576 141.34584045]
[108.67345428 156.31681824]
[109.60599518 171.28779602]
[110.53854370 186.25878906]
[111.47108459 201.22976685]
[112.40363312 216.20075989]
[113.33617401 231.17173767]
[127.81135559 235.73612976]
[139.65776062 245.22438049]
[147.27326965 258.35330200]
[149.62796021 273.34729004]
[146.40335083 288.17855835]
[138.03555298 300.84127808]
[125.65626526 309.62292480]
[110.93965149 313.33587646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 92]
[8 91]
[9 90]
[10 89]
[11 88]
[12 87]
[13 86]
[14 85]
[15 84]
[16 49]
[17 48]
[18 47]
[19 46]
[20 45]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[50 79]
[51 78]
[52 77]
[53 76]
[56 73]
[57 72]
[58 71]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
