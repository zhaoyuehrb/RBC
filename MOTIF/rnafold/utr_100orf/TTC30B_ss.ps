%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:11:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGUAACCGCACCCAUAACAGCCGUGGUGGUUAUGGCUGGCCUGAGCGGCGCGCAGAUCCCCGACGGGGAGUUCACCGCGGUCGUGUACCGCCUCAUCCGCAAUGCACGCUACGCCGAGGCGGUGCAGCUGC\
) } def
/len { sequence length } bind def

/coor [
[93.20536804 192.94082642]
[99.25170898 177.10168457]
[99.25170898 162.10168457]
[99.25170898 147.10168457]
[99.25170898 132.10168457]
[83.19773102 126.81389618]
[72.26900482 114.24612427]
[69.34959412 98.10050201]
[54.68227005 101.24211121]
[40.01494980 104.38371277]
[25.34762764 107.52531433]
[19.90895081 117.08055878]
[10.28221703 121.91813660]
[-0.19237904 120.63323212]
[-8.02936268 113.89978790]
[-22.82781792 116.35044861]
[-29.84201241 130.06565857]
[-43.42840576 136.94049072]
[-58.28208160 134.52549744]
[-68.74031067 123.95366669]
[-83.53876495 126.40432739]
[-98.33721924 128.85498047]
[-113.13567352 131.30564880]
[-127.93412781 133.75630188]
[-142.73257446 136.20697021]
[-157.53103638 138.65762329]
[-172.32948303 141.10829163]
[-182.79943848 153.26393127]
[-198.82490540 152.51316833]
[-208.11254883 139.43190002]
[-203.53765869 124.05497742]
[-188.60971069 118.17824554]
[-174.78015137 126.30983734]
[-159.98168945 123.85917664]
[-145.18324280 121.40851593]
[-130.38478088 118.95785522]
[-115.58633423 116.50719452]
[-100.78787994 114.05653381]
[-85.98942566 111.60587311]
[-71.19097137 109.15521240]
[-64.69902802 95.77639771]
[-51.41681671 88.70201874]
[-36.33952332 90.83007050]
[-25.27847862 101.55198669]
[-10.48002338 99.10132599]
[3.41475654 85.73331451]
[22.20602417 92.85799408]
[36.87334442 89.71639252]
[51.54066849 86.57478333]
[66.20799255 83.43318176]
[75.36264038 71.55074310]
[74.65956116 56.56723022]
[73.95647430 41.58371735]
[73.25338745 26.60020447]
[61.84897614 15.98996925]
[61.34939575 0.78454030]
[71.53491974 -10.02243805]
[70.83183289 -25.00595093]
[69.77768707 -39.96886444]
[68.37306976 -54.90295410]
[66.96844482 -69.83704376]
[65.56381989 -84.77113342]
[64.15920258 -99.70522308]
[56.65622711 -114.90856934]
[69.18839264 -126.32702637]
[83.62985992 -117.44557190]
[79.09329224 -101.10984802]
[80.49790955 -86.17575836]
[81.90253448 -71.24166870]
[83.30715942 -56.30757523]
[84.71177673 -41.37348557]
[87.82641602 -37.64104080]
[88.56697845 -31.88720322]
[85.81534576 -25.70903587]
[86.51843262 -10.72552204]
[97.67117310 -0.91981697]
[98.59764862 14.26558018]
[88.23690796 25.89712143]
[88.93998718 40.88063431]
[89.64307404 55.86414719]
[90.34615326 70.84766388]
[103.54441833 69.21391296]
[116.31859589 73.32610321]
[126.26258850 82.51644897]
[131.45864868 95.15097809]
[130.84675598 108.91941833]
[145.15544128 113.42068481]
[159.46414185 117.92195892]
[173.77282715 122.42322540]
[188.08151245 126.92449951]
[202.39019775 131.42576599]
[216.69888306 135.92703247]
[231.00758362 140.42829895]
[245.31626892 144.92958069]
[259.62496948 149.43084717]
[273.93365479 153.93211365]
[286.51931763 141.78193665]
[303.42568970 137.64492798]
[320.03015137 142.56056213]
[331.83865356 155.10559082]
[335.70202637 171.80451965]
[350.20596313 175.63017273]
[362.87515259 166.46363831]
[378.46868896 167.63682556]
[389.62371826 178.59579468]
[391.07321167 194.16604614]
[382.13278198 206.99580383]
[367.02377319 211.02722168]
[352.88024902 204.35679626]
[346.38031006 190.13410950]
[331.87637329 186.30847168]
[323.92129517 196.25392151]
[312.73886108 202.44638062]
[299.99459839 203.92269897]
[287.60223389 200.42520142]
[277.43643188 192.44584656]
[271.04901123 181.15731812]
[269.43237305 168.24079895]
[255.12368774 163.73953247]
[240.81500244 159.23826599]
[226.50630188 154.73699951]
[212.19761658 150.23571777]
[197.88893127 145.73445129]
[183.58024597 141.23318481]
[169.27156067 136.73191833]
[154.96286011 132.23065186]
[140.65417480 127.72937775]
[126.34548950 123.22811127]
[114.25170898 132.10168457]
[114.25170898 147.10168457]
[114.25170898 162.10168457]
[114.25170898 177.10168457]
[120.29804993 192.94082642]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 132]
[3 131]
[4 130]
[5 129]
[8 50]
[9 49]
[10 48]
[11 47]
[15 45]
[16 44]
[20 40]
[21 39]
[22 38]
[23 37]
[24 36]
[25 35]
[26 34]
[27 33]
[51 81]
[52 80]
[53 79]
[54 78]
[57 75]
[58 74]
[59 71]
[60 70]
[61 69]
[62 68]
[63 67]
[86 128]
[87 127]
[88 126]
[89 125]
[90 124]
[91 123]
[92 122]
[93 121]
[94 120]
[95 119]
[96 118]
[101 111]
[102 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
