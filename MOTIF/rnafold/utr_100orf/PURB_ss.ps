%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGGCGGGCGGUGGCGGCGAGGCGGCGGCCUAGAAGAUGGCGGACGGCGACAGCGGCAGCGAGCGCGGCGGCGGCGGUGGGCCGUGCGGGUUCCAGCCCGCGUCCCGCGGCGGCGGCGAGCAAGAGACGCAGGAGC\
) } def
/len { sequence length } bind def

/coor [
[86.77381897 106.61283112]
[71.80878448 105.58919525]
[56.84375381 104.56555939]
[42.54774094 111.34306335]
[30.37815285 102.75525665]
[15.41312027 101.73162079]
[0.44808894 100.70798492]
[-11.40255260 110.81739044]
[-26.56464005 109.56609344]
[-36.12937927 98.20601654]
[-51.09441376 97.18238068]
[-65.39042664 103.95989227]
[-77.56001282 95.37208557]
[-92.52504730 94.34844971]
[-106.82106018 101.12595367]
[-118.99064636 92.53815460]
[-133.95567322 91.51451874]
[-140.16429138 102.94651794]
[-150.21824646 111.12799072]
[-162.58357239 114.85668182]
[-175.39100647 113.60620880]
[-186.71862793 107.60009766]
[-194.88023376 97.77281952]
[-198.67631531 85.62455750]
[-213.57923889 83.92085266]
[-228.16891479 90.04065704]
[-239.93502808 80.90785980]
[-254.83795166 79.20415497]
[-269.79037476 78.01025391]
[-284.77481079 77.32752991]
[-299.75927734 76.64481354]
[-309.33630371 88.85382843]
[-324.26974487 93.06950378]
[-338.81738281 87.67082214]
[-347.38537598 74.73368835]
[-346.67910767 59.23269272]
[-336.97021484 47.12828827]
[-321.99191284 43.07485962]
[-307.50369263 48.63103867]
[-299.07656860 61.66035843]
[-284.09210205 62.34307480]
[-269.10763550 63.02579498]
[-266.22814941 60.85257339]
[-262.12551880 60.01426697]
[-257.46179199 61.08264160]
[-253.13424683 64.30122375]
[-238.23132324 66.00492859]
[-224.70761108 59.76326370]
[-211.87553406 69.01792145]
[-196.97261047 70.72161865]
[-187.30198669 56.56282425]
[-171.73461914 49.16749191]
[-154.47343445 50.63089752]
[-140.22854614 60.64316177]
[-132.93203735 76.54948425]
[-117.96701050 77.57312012]
[-104.74140167 70.72239685]
[-91.50141144 79.38342285]
[-76.53637695 80.40705872]
[-63.31076431 73.55633545]
[-50.07077789 82.21735382]
[-35.10574341 83.24098969]
[-24.08322716 73.28911591]
[-8.89197540 74.11405182]
[1.47172511 85.74295807]
[16.43675613 86.76659393]
[31.40178871 87.79022980]
[44.62740326 80.93950653]
[57.86738968 89.60052490]
[72.83242035 90.62416077]
[87.79745483 91.64779663]
[102.51750183 88.76332092]
[115.98941803 82.16729736]
[124.98137665 69.14980316]
[139.81445312 70.50225830]
[153.28636169 63.90623856]
[162.27832031 50.88874054]
[177.11140442 52.24119949]
[190.58331299 45.64517975]
[204.05522156 39.04916000]
[217.52714539 32.45314026]
[230.99905396 25.85711861]
[233.96177673 15.27889061]
[242.12231445 8.25873756]
[252.58650208 6.96415663]
[261.81707764 11.58660698]
[275.57525635 5.61059093]
[289.33340454 -0.36542556]
[303.09158325 -6.34144211]
[316.84976196 -12.31745815]
[330.60791016 -18.29347420]
[344.36608887 -24.26949120]
[353.68554688 -37.76319504]
[370.00708008 -36.16965866]
[376.54052734 -21.12817574]
[366.56481934 -8.11213398]
[350.34210205 -10.51132107]
[336.58395386 -4.53530502]
[322.82577515 1.44071126]
[309.06759644 7.41672754]
[295.30941772 13.39274406]
[281.55126953 19.36876106]
[267.79309082 25.34477615]
[257.55749512 41.69017410]
[237.59507751 39.32903290]
[224.12316895 45.92505264]
[210.65124512 52.52107620]
[197.17933655 59.11709595]
[183.70741272 65.71311951]
[175.67906189 78.25882721]
[159.88238525 77.37815857]
[146.41047668 83.97417450]
[138.38211060 96.51988220]
[122.58543396 95.63921356]
[109.11352539 102.23523712]
[114.07196808 104.89411926]
[118.56489563 108.48944092]
[127.49180603 120.54391479]
[136.41873169 132.59837341]
[151.80513000 131.47485352]
[165.34547424 138.86825562]
[172.71910095 152.41940308]
[171.57310486 167.80413818]
[162.27316284 180.11326599]
[147.78686523 185.41899109]
[132.73672485 182.02827454]
[121.92520142 171.02307129]
[118.80220032 155.91511536]
[124.36425781 141.52529907]
[115.43733978 129.47082520]
[106.51042938 117.41635895]
[109.98880005 132.00749207]
[103.80770111 145.67474365]
[90.55382538 152.69862366]
[75.77370453 150.13972473]
[65.65257263 139.06892395]
[64.42596436 124.11915588]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[3 69]
[5 67]
[6 66]
[7 65]
[10 62]
[11 61]
[13 59]
[14 58]
[16 56]
[17 55]
[24 50]
[25 49]
[27 47]
[28 46]
[29 42]
[30 41]
[31 40]
[72 115]
[73 114]
[75 112]
[76 111]
[78 109]
[79 108]
[80 107]
[81 106]
[82 105]
[86 103]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
[92 97]
[117 131]
[118 130]
[119 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
