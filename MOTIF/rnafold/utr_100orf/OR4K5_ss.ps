%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:21:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUAAGUCCAAUUCUUCAGUGGUGUCUGAAUUUGUACUGUUGGGACUCUGUAGUUCUCAAAAACUCCAGCUUUUCUAUUUUUGUUUCUUCUCUGUGU\
) } def
/len { sequence length } bind def

/coor [
[143.47608948 165.72966003]
[150.81799316 152.59600830]
[139.34399414 142.93434143]
[127.87001038 133.27268982]
[116.39602661 123.61103821]
[99.55704498 128.74220276]
[82.88418579 123.09458160]
[72.63003540 108.78610992]
[57.64635849 109.48571014]
[42.66268158 110.18531799]
[29.23839951 118.55784607]
[16.16410637 111.42256927]
[1.18043077 112.12217712]
[-13.80324554 112.82178497]
[-20.80522919 121.43445587]
[-31.20974541 124.60885620]
[-41.40262985 121.50090790]
[-47.98574829 113.40530396]
[-62.98393250 113.17202759]
[-77.98211670 112.93875122]
[-92.98030853 112.70547485]
[-107.97849274 112.47219849]
[-119.15038300 123.65093994]
[-134.95446777 123.57224274]
[-146.01448059 112.28279114]
[-145.76869202 96.48040771]
[-134.36294556 85.54038239]
[-118.56404114 85.95322418]
[-107.74521637 97.47400665]
[-92.74702454 97.70728302]
[-77.74884033 97.94056702]
[-62.75065613 98.17384338]
[-47.75247192 98.40711975]
[-31.78394318 87.69175720]
[-14.50285149 97.83810425]
[0.48082489 97.13849640]
[15.46450138 96.43889618]
[27.81705093 88.11640930]
[41.96307755 95.20164490]
[56.94675446 94.50203705]
[71.93042755 93.80242920]
[80.80976868 78.59799957]
[96.88893890 71.42322540]
[99.21241760 56.60427094]
[101.53588867 41.78531265]
[103.62861633 26.93201447]
[105.49009705 12.04796696]
[107.35157776 -2.83608150]
[109.21305847 -17.72012901]
[111.07453918 -32.60417938]
[104.20573425 -47.49550247]
[113.88731384 -60.73178482]
[130.15969849 -58.69667053]
[136.28324890 -43.48371124]
[125.95858765 -30.74269676]
[124.09710693 -15.85864830]
[122.23562622 -0.97460026]
[120.37414551 13.90944767]
[118.51266479 28.79349518]
[120.84719086 35.94720078]
[116.35484314 44.10878754]
[114.03137207 58.92774200]
[111.70790100 73.74669647]
[119.31754303 78.71284485]
[124.99687958 85.80610657]
[128.17840576 94.31770325]
[128.54418945 103.39710236]
[126.05767822 112.13704681]
[137.53166199 121.79870605]
[149.00566101 131.46035767]
[160.47964478 141.12202454]
[172.17166138 131.65138245]
[185.44485474 124.56484985]
[199.81939697 120.11860657]
[214.77566528 118.47338104]
[229.77297974 119.68865204]
[244.26922607 123.72047424]
[257.74035645 130.42311096]
[269.69937134 139.55426025]
[279.71401978 150.78384399]
[287.42224121 163.70591736]
[292.54537964 177.85334778]
[294.89825439 192.71472168]
[294.39581299 207.75280762]
[291.05621338 222.42399597]
[285.00018311 236.19792175]
[276.44665527 248.57666016]
[265.70480347 259.11273193]
[253.16294861 267.42529297]
[239.27447510 273.21380615]
[224.54145813 276.26907349]
[209.49645996 276.48059082]
[194.68336487 273.84072876]
[180.63766479 268.44494629]
[167.86708069 260.48825073]
[156.83326721 250.25831604]
[147.93510437 238.12492371]
[141.49424744 224.52668762]
[137.74353027 209.95520020]
[136.81852722 194.93717957]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 71]
[3 70]
[4 69]
[5 68]
[8 41]
[9 40]
[10 39]
[12 37]
[13 36]
[14 35]
[18 33]
[19 32]
[20 31]
[21 30]
[22 29]
[43 63]
[44 62]
[45 61]
[46 59]
[47 58]
[48 57]
[49 56]
[50 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
