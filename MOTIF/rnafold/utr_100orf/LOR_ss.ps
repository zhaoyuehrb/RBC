%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:52:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCCUCACUCACCCUUCCUGGUGCUUUGGGCUCUCCUUCCUUCUCAGACAAGAUGUCUUAUCAGAAAAAGCAGCCCACCCCUCAGCCCCCAGUGGACUGCGUGAAGACCUCUGGCGGCGGUGGCGGUGGCGGCGGCAGCGGCGGUGGUGGCU\
) } def
/len { sequence length } bind def

/coor [
[83.49427795 436.37356567]
[68.39078522 439.51809692]
[53.99304962 433.97653198]
[44.89533615 421.51721191]
[44.00069046 406.11581421]
[51.59459305 392.68685913]
[65.25385284 385.51553345]
[66.46862030 370.56478882]
[67.68339539 355.61407471]
[68.89816284 340.66333008]
[66.28987885 333.70083618]
[70.29206848 325.42294312]
[71.80959320 310.49987793]
[73.32711792 295.57684326]
[74.84464264 280.65380859]
[76.21086121 265.71615601]
[77.42562866 250.76542664]
[69.81942749 241.31217957]
[70.74691772 228.81158447]
[80.25455475 220.03892517]
[81.77207947 205.11589050]
[83.28960419 190.19285583]
[76.87960052 176.74810791]
[85.97334290 163.80151367]
[87.49086761 148.87846375]
[89.00839233 133.95542908]
[90.52591705 119.03239441]
[78.92192841 109.02944183]
[76.49356079 92.74253845]
[85.88598633 77.84131622]
[73.66200256 69.14796448]
[61.43802261 60.45462036]
[49.21404266 51.76127243]
[36.99006271 43.06792450]
[24.67860985 34.49890137]
[12.28095245 26.05508232]
[-3.05346823 28.79247284]
[-15.50617123 20.05263138]
[-18.02135277 5.41673470]
[-30.41901016 -3.02708411]
[-42.81666946 -11.47090340]
[-54.80264664 -3.92373085]
[-68.71958160 -1.53308177]
[-82.45238495 -4.62866068]
[-93.92680359 -12.70892715]
[-101.42266083 -24.52201462]
[-103.83174896 -38.25959015]
[-100.82155609 -51.83364487]
[-113.04553223 -60.52699280]
[-125.26951599 -69.22033691]
[-137.49349976 -77.91368866]
[-149.71748352 -86.60703278]
[-166.12948608 -90.85935211]
[-166.58665466 -107.80713654]
[-150.42774963 -112.93804169]
[-141.02412415 -98.83101654]
[-128.80015564 -90.13766479]
[-116.57616425 -81.44432068]
[-104.35218811 -72.75097656]
[-92.12820435 -64.05762482]
[-78.31176758 -72.03212738]
[-62.34381104 -73.20129395]
[-47.40521240 -67.28152466]
[-36.49387360 -55.40644836]
[-31.82311630 -39.91015625]
[-34.37284851 -23.86856079]
[-21.97519302 -15.42474174]
[-9.57753468 -6.98092318]
[4.96262836 -10.00073433]
[17.65590286 -1.61411023]
[20.72477150 13.65742493]
[33.12242889 22.10124397]
[40.46436691 23.27408218]
[45.68341064 30.84394455]
[57.90739059 39.53729248]
[70.13137054 48.23064041]
[82.35535431 56.92398834]
[94.57933044 65.61733246]
[109.55161285 66.52884674]
[122.73990631 59.38260269]
[135.92820740 52.23635483]
[149.04341125 44.95682526]
[162.08415222 37.54476166]
[163.92843628 22.25081444]
[174.30337524 11.10567856]
[189.07685852 8.24063778]
[202.54335022 14.54868698]
[215.58410645 7.13662148]
[228.62486267 -0.27544349]
[236.79920959 -13.82131100]
[251.68739319 -13.38365269]
[264.72814941 -20.79571724]
[277.76889038 -28.20778275]
[290.80966187 -35.61984634]
[298.98400879 -49.16571426]
[313.87219238 -48.72805786]
[326.91293335 -56.14012146]
[335.08728027 -69.68598938]
[349.97546387 -69.24832916]
[363.01620483 -76.66040039]
[366.96752930 -91.96276855]
[380.62420654 -99.91709900]
[395.88394165 -95.80421448]
[403.69342041 -82.06422424]
[399.41943359 -66.84881592]
[385.59765625 -59.18502426]
[370.42828369 -63.61964035]
[357.38754272 -56.20757675]
[350.14593506 -43.19187164]
[334.32501221 -43.09936905]
[321.28424072 -35.68730164]
[314.04266357 -22.67159462]
[298.22171021 -22.57909203]
[285.18096924 -15.16702747]
[272.14019775 -7.75496292]
[259.09945679 -0.34289786]
[251.85786438 12.67280960]
[236.03692627 12.76531124]
[222.99617004 20.17737579]
[209.95541382 27.58944130]
[208.48501587 42.38727570]
[198.46446228 53.61458969]
[183.58027649 56.82616425]
[169.49623108 50.58551407]
[156.45547485 57.99758148]
[152.16914368 64.07269287]
[143.07444763 65.42465210]
[129.88615417 72.57089996]
[116.69786072 79.71714020]
[123.63941193 91.80696869]
[123.21990204 105.06536102]
[116.26863861 115.56172943]
[105.44895935 120.54991913]
[103.93143463 135.47296143]
[102.41390991 150.39599609]
[100.89638519 165.31903076]
[107.19784546 179.83117676]
[98.21264648 191.71037292]
[96.69512177 206.63342285]
[95.17759705 221.55645752]
[103.12281799 238.13818359]
[92.37635803 251.98019409]
[91.16159058 266.93093872]
[93.59572601 275.79751587]
[89.76768494 282.17132568]
[88.25016022 297.09439087]
[86.73263550 312.01742554]
[85.21511078 326.94046021]
[83.84889221 341.87811279]
[82.63412476 356.82882690]
[81.41935730 371.77957153]
[80.20458221 386.73028564]
[92.52696228 396.01269531]
[97.85332489 410.49139404]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 152]
[8 151]
[9 150]
[10 149]
[12 148]
[13 147]
[14 146]
[15 145]
[16 143]
[17 142]
[20 140]
[21 139]
[22 138]
[24 136]
[25 135]
[26 134]
[27 133]
[30 78]
[31 77]
[32 76]
[33 75]
[34 74]
[35 72]
[36 71]
[39 68]
[40 67]
[41 66]
[48 60]
[49 59]
[50 58]
[51 57]
[52 56]
[79 129]
[80 128]
[81 127]
[82 125]
[83 124]
[87 120]
[88 119]
[89 118]
[91 116]
[92 115]
[93 114]
[94 113]
[96 111]
[97 110]
[99 108]
[100 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
