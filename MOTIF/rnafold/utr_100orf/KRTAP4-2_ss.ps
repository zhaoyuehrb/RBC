%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:39:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCUUCCUGGAAAUCCACCCAGAACCUCCACCCUCUGACACCAUGGUCAACUCCUGUUGUGGCUCUGUGUGCUCUGACCAGGGCUGUGGCCUAGAGAACUGCUGCCGUCCCAGCUGCUGCCAGACCACCUGCUGCAGGACCA\
) } def
/len { sequence length } bind def

/coor [
[131.95481873 126.66268921]
[126.53764343 132.92846680]
[119.88745880 138.08474731]
[112.23335266 141.88842773]
[103.85230255 144.14405823]
[95.05927277 144.71328735]
[86.19534302 143.52215576]
[77.61447906 140.56600952]
[69.66944885 135.91160583]
[59.83537674 147.23817444]
[50.00130844 158.56474304]
[40.16723633 169.89131165]
[43.79798126 184.97763062]
[37.83669662 199.30392456]
[24.57561874 207.36143494]
[9.11390209 206.05187988]
[-2.60310817 195.87881470]
[-6.06998158 180.75398254]
[0.04636454 166.49320984]
[13.39407063 158.58003235]
[28.84067154 160.05723572]
[38.67474365 148.73066711]
[48.50881195 137.40411377]
[58.34288406 126.07754517]
[56.49345398 118.80914307]
[42.43299866 124.03443146]
[28.37254715 129.25971985]
[14.31209373 134.48501587]
[2.93125343 144.25622559]
[-11.98929024 142.71434021]
[-21.13146782 130.82231140]
[-18.78587341 116.00683594]
[-6.41736126 107.52038574]
[8.25076294 110.66354370]
[23.09870529 108.53314209]
[37.94664764 106.40274811]
[52.79459000 104.27234650]
[50.94515991 97.00395203]
[36.89349747 91.75506592]
[22.84183502 86.50618744]
[8.79017162 81.25730133]
[-5.48333359 88.04277039]
[-20.34607887 82.66928864]
[-26.98026085 68.32483673]
[-21.44993782 53.51973724]
[-7.03615046 47.03758240]
[7.70965481 52.72412491]
[14.03905392 67.20564270]
[28.09071732 72.45452118]
[42.14237976 77.70340729]
[56.19404221 82.95228577]
[78.69102478 61.40444183]
[107.80504608 59.57829285]
[129.62472534 75.80511475]
[142.87741089 68.77898407]
[156.13009644 61.75286102]
[169.38276672 54.72673416]
[182.63545227 47.70060730]
[195.88813782 40.67448044]
[206.18997192 20.81701851]
[227.77285767 22.03261566]
[240.36764526 13.88575649]
[252.96243286 5.73889828]
[265.55722046 -2.40796065]
[271.11514282 -9.75227642]
[278.51428223 -10.59144497]
[291.28262329 -18.46353340]
[304.05096436 -26.33561897]
[316.81927490 -34.20770645]
[322.53500366 -41.42988968]
[329.95059204 -42.10856247]
[342.88647461 -49.70218277]
[355.73934937 -57.43548965]
[368.50765991 -65.30757904]
[376.82803345 -81.69631195]
[394.34515381 -81.60266876]
[406.93994141 -89.74952698]
[419.53472900 -97.89638519]
[421.43334961 -101.98950195]
[424.27618408 -104.92897034]
[427.56884766 -106.55749512]
[430.81771851 -106.90025330]
[433.59133911 -106.14789581]
[446.84402466 -113.17402649]
[460.09671021 -120.20014954]
[473.34939575 -127.22628021]
[481.91778564 -140.52639771]
[496.78671265 -139.65196228]
[510.03939819 -146.67808533]
[523.29205322 -153.70420837]
[536.54473877 -160.73033142]
[549.79742432 -167.75646973]
[550.27172852 -183.10803223]
[558.37188721 -196.15727234]
[571.91906738 -203.39401245]
[587.26904297 -202.87158203]
[600.29284668 -194.73054504]
[607.48706055 -181.16078186]
[606.91656494 -165.81248474]
[598.73474121 -152.81428528]
[585.14245605 -145.66261292]
[569.79608154 -146.28125000]
[556.82354736 -154.50378418]
[543.57086182 -147.47766113]
[530.31817627 -140.45152283]
[517.06549072 -133.42539978]
[503.81283569 -126.39927673]
[496.19235229 -113.60171509]
[480.37551880 -113.97359467]
[467.12283325 -106.94747162]
[453.87014771 -99.92134094]
[440.61749268 -92.89521790]
[427.68161011 -85.30159760]
[415.08682251 -77.15473938]
[402.49203491 -69.00788116]
[399.62634277 -57.20796585]
[389.13613892 -50.32858276]
[376.37976074 -52.53924942]
[363.61141968 -44.66716003]
[359.53826904 -38.43328857]
[350.48010254 -36.76630783]
[337.54421997 -29.17268562]
[324.69137573 -21.43937683]
[311.92303467 -13.56729031]
[299.15469360 -5.69520283]
[286.38638306 2.17688441]
[273.70407104 10.18682766]
[261.10928345 18.33368683]
[248.51449585 26.48054504]
[235.91970825 34.62740326]
[235.94432068 42.66742706]
[232.71162415 50.13208771]
[226.69261169 55.74363327]
[218.84172058 58.50884628]
[210.44604492 57.89424896]
[202.91426086 53.92716217]
[189.66157532 60.95328903]
[176.40890503 67.97941589]
[163.15621948 75.00553894]
[149.90353394 82.03166962]
[136.65086365 89.05779266]
[138.75469971 96.38418579]
[139.38238525 104.11326599]
[138.45771790 111.94545746]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 24]
[10 23]
[11 22]
[12 21]
[38 51]
[39 50]
[40 49]
[41 48]
[54 141]
[55 140]
[56 139]
[57 138]
[58 137]
[59 136]
[61 130]
[62 129]
[63 128]
[64 127]
[66 126]
[67 125]
[68 124]
[69 123]
[71 122]
[72 121]
[73 119]
[74 118]
[76 115]
[77 114]
[78 113]
[83 112]
[84 111]
[85 110]
[86 109]
[88 107]
[89 106]
[90 105]
[91 104]
[92 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
