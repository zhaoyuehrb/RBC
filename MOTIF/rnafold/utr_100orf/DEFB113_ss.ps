%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:18:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGAUACUUUGUAUUUUUCUGACCUUUGUCUUCACUGUGUCUUGUGGUCCAUCAGUUCCACAGAAAAAAACAAGAGAAGUUGCAGAGAGAAAAAGAG\
) } def
/len { sequence length } bind def

/coor [
[42.87169647 402.13510132]
[38.67429733 416.90930176]
[27.64096642 427.59393311]
[12.73961353 431.31484985]
[-2.02137184 427.07116699]
[-12.67135811 416.00439453]
[-16.34555435 401.09146118]
[-12.05561733 386.34384155]
[-0.95552105 375.72860718]
[13.96886539 372.10116577]
[18.11339188 357.68508911]
[22.25791740 343.26904297]
[26.40244293 328.85296631]
[17.11013412 317.24301147]
[16.42798233 302.20977783]
[24.82695389 289.50894165]
[39.26091385 284.12686157]
[43.40544128 269.71078491]
[47.54996490 255.29472351]
[51.69449234 240.87866211]
[55.83901978 226.46260071]
[59.98354340 212.04653931]
[64.12806702 197.63047791]
[68.27259827 183.21441650]
[58.98028946 171.60446167]
[58.29813766 156.57119751]
[66.69710541 143.87039185]
[81.13106537 138.48829651]
[85.27559662 124.07222748]
[89.42012024 109.65616608]
[86.23367310 96.04226685]
[96.16381836 86.19931030]
[100.30834198 71.78324127]
[104.45286560 57.36717987]
[108.59739685 42.95111465]
[96.38697052 33.99953079]
[87.99166107 21.43407059]
[84.40869141 6.78202152]
[86.05173492 -8.18362045]
[92.70332336 -21.65870667]
[103.54332733 -32.02542114]
[117.25009155 -38.04652023]
[132.16154480 -39.01296234]
[136.30606079 -53.42902756]
[140.45059204 -67.84509277]
[139.82034302 -77.14000702]
[144.95468140 -82.64128876]
[149.54554749 -96.92148590]
[154.13639832 -111.20168304]
[158.72726440 -125.48188019]
[148.35537720 -136.80970764]
[145.05265808 -151.80929565]
[149.70750427 -166.44583130]
[161.06777954 -176.78215027]
[176.07765198 -180.03784180]
[190.69950867 -175.33714294]
[201.00018311 -163.94450378]
[204.20880127 -148.92451477]
[199.46229553 -134.31744385]
[188.03742981 -124.05255127]
[173.00746155 -120.89102173]
[168.41659546 -106.61082458]
[163.82572937 -92.33062744]
[159.23487854 -78.05043030]
[154.86665344 -63.70056534]
[150.72213745 -49.28450012]
[146.57760620 -34.86843872]
[158.69902039 -26.13021660]
[167.11521912 -13.74890995]
[170.79444885 0.79199100]
[169.27392578 15.74222565]
[162.71798706 29.29544449]
[151.90051270 39.80745316]
[138.11363220 45.99568176]
[123.01345825 47.09564209]
[118.86893463 61.51170731]
[114.72440338 75.92777252]
[110.57987976 90.34383392]
[113.76632690 103.95773315]
[103.83618164 113.80068970]
[99.69165802 128.21675110]
[95.54713440 142.63281250]
[104.91885376 154.85890198]
[105.29013824 170.08110046]
[96.72811127 182.45671082]
[82.68865967 187.35893250]
[78.54413605 201.77499390]
[74.39961243 216.19107056]
[70.25508118 230.60713196]
[66.11055756 245.02319336]
[61.96603012 259.43927002]
[57.82150650 273.85531616]
[53.67697906 288.27139282]
[63.04870224 300.49746704]
[63.41998291 315.71966553]
[54.85795975 328.09527588]
[40.81850815 332.99749756]
[36.67398071 347.41357422]
[32.52945709 361.82962036]
[28.38492966 376.24569702]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 100]
[11 99]
[12 98]
[13 97]
[17 93]
[18 92]
[19 91]
[20 90]
[21 89]
[22 88]
[23 87]
[24 86]
[28 82]
[29 81]
[30 80]
[32 78]
[33 77]
[34 76]
[35 75]
[43 67]
[44 66]
[45 65]
[47 64]
[48 63]
[49 62]
[50 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
