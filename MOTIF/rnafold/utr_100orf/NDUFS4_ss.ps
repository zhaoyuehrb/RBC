%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:42:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUUCAUCCUGGCGUUUGCCUGCAGCAAGAUGGCGGCGGUGUCAAUGUCAGUGGUACUGAGGCAGACGUUGUGGCGGAGAAGGGCAGUGGCUGUAGCUGCCCUUUCCGUUUCCAGGGUUCCGACCAGGU\
) } def
/len { sequence length } bind def

/coor [
[79.25586700 108.25139618]
[64.26557159 108.79086304]
[49.27528000 109.33033752]
[34.28498077 109.86980438]
[22.65719032 122.87553406]
[5.55875778 123.48576355]
[-6.48328781 111.81021118]
[-21.45633698 112.70898438]
[-36.42938614 113.60775757]
[-51.39058304 114.68599701]
[-66.33777618 115.94355774]
[-81.28496552 117.20111847]
[-96.23216248 118.45867157]
[-111.17935181 119.71623230]
[-126.12654114 120.97378540]
[-141.07373047 122.23134613]
[-156.02091980 123.48889923]
[-169.12384033 132.35592651]
[-182.45498657 125.71289062]
[-197.40217590 126.97044373]
[-212.33320618 128.40713501]
[-227.24595642 130.02275085]
[-242.15869141 131.63838196]
[-257.07144165 133.25399780]
[-269.95794678 142.43267822]
[-283.44454956 136.11120605]
[-298.35729980 137.72683716]
[-308.06741333 150.19636536]
[-323.76086426 152.06463623]
[-336.12704468 142.22323608]
[-337.82928467 126.51088715]
[-327.85769653 114.24945068]
[-312.12823486 112.71341705]
[-299.97290039 122.81409454]
[-285.06018066 121.19847107]
[-273.24029541 112.13535309]
[-258.68704224 118.34125519]
[-243.77430725 116.72563934]
[-228.86157227 115.11001587]
[-213.94883728 113.49440002]
[-207.57453918 109.60774994]
[-198.65972900 112.02325439]
[-183.71253967 110.76569366]
[-171.67874146 101.98861694]
[-157.27848816 108.54170990]
[-142.33129883 107.28414917]
[-127.38410187 106.02659607]
[-112.43690491 104.76903534]
[-97.48971558 103.51148224]
[-82.54252625 102.25392151]
[-67.59532928 100.99636841]
[-52.64813995 99.73880768]
[-46.18247604 96.00613403]
[-37.32815933 98.63471222]
[-22.35511017 97.73593903]
[-7.38206005 96.83716583]
[-0.22281882 86.05469513]
[12.03345108 81.32276917]
[24.95955086 84.59239197]
[33.74551392 94.87950897]
[48.73580933 94.34004211]
[63.72610474 93.80056763]
[78.71640015 93.26110077]
[90.99844360 77.20852661]
[113.07006836 76.73566437]
[128.44348145 95.09046173]
[142.97044373 91.35314941]
[157.49739075 87.61582947]
[168.93458557 76.68415833]
[183.18826294 81.00640106]
[197.71522522 77.26908112]
[212.24217224 73.53176880]
[225.02713013 60.34349060]
[241.72888184 65.59037781]
[256.16204834 61.50579071]
[270.59521484 57.42119980]
[285.02835083 53.33661270]
[299.46151733 49.25202560]
[313.89468384 45.16743469]
[328.32785034 41.08284760]
[342.76101685 36.99826050]
[350.25491333 31.59921074]
[357.58938599 32.99322891]
[372.11633301 29.25591469]
[386.64328003 25.51859856]
[401.17025757 21.78128242]
[415.69720459 18.04396439]
[430.22415161 14.30664921]
[444.75112915 10.56933212]
[451.33746338 -3.61354327]
[465.52133179 -10.19777679]
[480.60549927 -6.07449341]
[489.46774292 6.80941772]
[487.92352295 22.37056732]
[476.70199585 33.26145935]
[461.10162354 34.33974457]
[448.48843384 25.09628868]
[433.96148682 28.83360481]
[419.43450928 32.57092285]
[404.90756226 36.30823898]
[390.38061523 40.04555511]
[375.85363770 43.78287125]
[361.32669067 47.52018738]
[346.84558105 51.43141937]
[332.41244507 55.51601028]
[317.97927856 59.60059738]
[303.54611206 63.68518448]
[289.11294556 67.76977539]
[274.67977905 71.85436249]
[260.24664307 75.93894958]
[245.81346130 80.02353668]
[239.59379578 90.47103119]
[227.52510071 93.95271301]
[215.97949219 88.05872345]
[201.45252991 91.79604340]
[186.92558289 95.53335571]
[176.52746582 106.19770813]
[161.23471069 102.14278412]
[146.70774841 105.88010406]
[132.18080139 109.61741638]
[124.78488159 122.66733551]
[129.04223633 137.05049133]
[142.39653015 145.94105530]
[143.62826538 161.93675232]
[131.79254150 172.76704407]
[115.96873474 170.12387085]
[108.29549408 156.03483582]
[114.65908813 141.30784607]
[110.40173340 126.92469025]
[95.96936798 126.37821198]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[4 60]
[7 56]
[8 55]
[9 54]
[10 52]
[11 51]
[12 50]
[13 49]
[14 48]
[15 47]
[16 46]
[17 45]
[19 43]
[20 42]
[21 40]
[22 39]
[23 38]
[24 37]
[26 35]
[27 34]
[66 120]
[67 119]
[68 118]
[70 116]
[71 115]
[72 114]
[74 111]
[75 110]
[76 109]
[77 108]
[78 107]
[79 106]
[80 105]
[81 104]
[83 103]
[84 102]
[85 101]
[86 100]
[87 99]
[88 98]
[89 97]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
