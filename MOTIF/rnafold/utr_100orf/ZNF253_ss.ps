%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUGCUUAUAGAGGCCCGUCCUCUGUGGCCGUGUGACCUGCAAGUAUUGGGAGAGCCACAGCUAAACCCCGGGACCCCUGGAAGCCUAGAAAUGGGACCAUUGCAAUUUAGAGAUGUGGCCAUAGAAUUCUCUCUGGAGGAGUGGCAUUGCCUGGACACUGCACAGCGGAAUUUAUAUAGGGAUGUGAUGU\
) } def
/len { sequence length } bind def

/coor [
[159.19950867 185.66976929]
[153.26246643 171.89474487]
[147.32542419 158.11970520]
[141.38838196 144.34468079]
[135.45133972 130.56964111]
[129.51429749 116.79461670]
[122.04432678 116.12406158]
[107.10440063 114.78294373]
[99.63443756 114.11238861]
[91.33898926 126.60980225]
[83.04354095 139.10722351]
[74.74809265 151.60464478]
[66.45264435 164.10206604]
[58.15719223 176.59948730]
[49.86174393 189.09690857]
[51.61742783 205.04360962]
[40.14328384 216.25625610]
[24.24129105 214.13348389]
[16.11009789 200.30368042]
[21.98726082 185.37590027]
[37.36432266 180.80145264]
[45.65977097 168.30404663]
[53.95521927 155.80662537]
[62.25067139 143.30920410]
[70.54611969 130.81178284]
[78.84156799 118.31435394]
[87.13701630 105.81693268]
[90.04840088 91.10218811]
[87.13701630 76.38743591]
[84.22563171 61.67269135]
[73.95696259 49.63670349]
[79.07685852 35.64971161]
[76.16546631 20.93496323]
[73.25408173 6.22021389]
[70.34269714 -8.49453449]
[54.21530914 -18.41292381]
[50.50694275 -36.65400696]
[61.11180115 -51.56211472]
[57.72299957 -66.17430115]
[54.33419418 -80.78649139]
[43.67919922 -92.48185730]
[48.34111023 -106.62808990]
[44.95230865 -121.24028015]
[36.03654099 -109.17755890]
[21.22562408 -106.80337524]
[8.98615932 -115.47490692]
[6.31478596 -130.23512268]
[14.73858356 -142.64639282]
[29.44212341 -145.61386108]
[42.02000809 -137.44146729]
[40.07220078 -152.31445312]
[38.12439728 -167.18745422]
[36.17658997 -182.06045532]
[34.22878265 -196.93345642]
[32.28097916 -211.80644226]
[29.36959267 -226.52119446]
[25.50696373 -241.01533508]
[21.64433479 -255.50947571]
[17.78170776 -270.00363159]
[13.91907883 -284.49777222]
[10.05645084 -298.99191284]
[-4.81106710 -312.59042358]
[0.98639601 -331.02783203]
[-3.34596419 -345.38854980]
[-7.67832470 -359.74929810]
[-12.01068497 -374.11001587]
[-16.34304428 -388.47076416]
[-40.43408585 -391.86135864]
[-58.20479202 -411.72912598]
[-59.08599854 -440.70178223]
[-68.37001038 -452.48342896]
[-77.65402222 -464.26504517]
[-86.93803406 -476.04669189]
[-96.22204590 -487.82833862]
[-110.77448273 -496.52679443]
[-106.44448853 -512.91845703]
[-89.49472809 -513.29534912]
[-84.44040680 -497.11236572]
[-75.15639496 -485.33071899]
[-65.87238312 -473.54907227]
[-56.58836746 -461.76742554]
[-47.30435562 -449.98577881]
[-40.44122696 -453.01025391]
[-38.81696320 -467.92205811]
[-26.71497345 -459.05923462]
[-19.85184479 -462.08370972]
[-22.28272820 -476.88540649]
[-24.71361351 -491.68713379]
[-27.14449692 -506.48886108]
[-37.95015335 -518.82458496]
[-32.41448593 -534.26116943]
[-16.23211670 -536.91876221]
[-6.05008030 -524.06353760]
[-12.34278107 -508.91973877]
[-9.91189671 -494.11801147]
[-7.48101282 -479.31631470]
[-5.05012894 -464.51458740]
[2.97976851 -459.91278076]
[9.71191216 -453.85351562]
[14.89866257 -446.67065430]
[18.37334061 -438.73583984]
[20.05485916 -430.43978882]
[19.94811821 -422.17315674]
[18.14031982 -414.30831909]
[14.79349327 -407.18252563]
[10.13373661 -401.08349609]
[4.43778563 -396.23785400]
[-1.98231196 -392.80310059]
[2.35004830 -378.44238281]
[6.68240833 -364.08163452]
[11.01476860 -349.72091675]
[15.34712887 -335.36016846]
[24.76552010 -331.34945679]
[30.53583908 -322.62921143]
[30.54595757 -311.95288086]
[24.55059052 -302.85452271]
[28.41321945 -288.36038208]
[32.27584839 -273.86624146]
[36.13847733 -259.37210083]
[40.00110245 -244.87796021]
[43.86373138 -230.38381958]
[50.61099243 -243.78063965]
[63.88589859 -250.76467896]
[78.74819183 -248.73683167]
[89.66687012 -238.45176697]
[92.57854462 -223.73707581]
[86.39962769 -210.06883240]
[73.42960358 -202.53367615]
[58.49528503 -203.93580627]
[47.15397644 -213.75425720]
[49.10177994 -198.88125610]
[51.04958725 -184.00825500]
[52.99739456 -169.13526917]
[54.94519806 -154.26226807]
[56.89300537 -139.38926697]
[59.56449509 -124.62908173]
[62.95329666 -110.01689148]
[73.36590576 -99.36668396]
[68.94638062 -84.17529297]
[72.33518219 -69.56310272]
[75.72399139 -54.95092010]
[86.49947357 -51.14839554]
[94.17554474 -42.52260590]
[96.75414276 -31.14447784]
[93.48013306 -19.82169342]
[85.05744934 -11.40592098]
[87.96883392 3.30882764]
[90.88021851 18.02357674]
[93.79160309 32.73832703]
[103.85203552 43.72181320]
[98.94038391 58.76130295]
[101.85176849 73.47605133]
[104.76315308 88.19080353]
[105.73787689 73.22250366]
[113.88826752 60.63000107]
[127.14468384 53.61091995]
[142.14089966 53.94763184]
[155.06892395 61.55463028]
[162.64590454 74.50025940]
[162.94781494 89.49722290]
[155.89799500 102.73731232]
[143.28932190 110.85757446]
[149.22636414 124.63260651]
[155.16340637 138.40763855]
[161.10046387 152.18266296]
[167.03750610 165.95770264]
[172.97454834 179.73272705]
[185.90258789 180.01260376]
[197.71949768 185.14739990]
[206.68019104 194.34025574]
[211.47605896 206.19792175]
[211.42594910 218.94187927]
[206.57272339 230.67504883]
[197.67158508 239.66426086]
[203.15710449 253.62524414]
[208.64263916 267.58621216]
[214.12815857 281.54721069]
[219.61369324 295.50817871]
[225.09921265 309.46917725]
[238.25476074 319.26016235]
[236.08477783 335.51510620]
[220.82156372 341.51229858]
[208.16661072 331.08233643]
[211.13822937 314.95468140]
[205.65270996 300.99371338]
[200.16717529 287.03271484]
[194.68165588 273.07174683]
[189.19612122 259.11074829]
[183.71060181 245.14978027]
[166.61456299 243.21716309]
[152.77555847 232.84602356]
[146.05264282 216.81588745]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 167]
[2 166]
[3 165]
[4 164]
[5 163]
[6 162]
[9 27]
[10 26]
[11 25]
[12 24]
[13 23]
[14 22]
[15 21]
[28 153]
[29 152]
[30 151]
[32 149]
[33 148]
[34 147]
[35 146]
[38 141]
[39 140]
[40 139]
[42 137]
[43 136]
[50 135]
[51 134]
[52 133]
[53 132]
[54 131]
[55 130]
[56 121]
[57 120]
[58 119]
[59 118]
[60 117]
[61 116]
[63 112]
[64 111]
[65 110]
[66 109]
[67 108]
[70 82]
[71 81]
[72 80]
[73 79]
[74 78]
[86 97]
[87 96]
[88 95]
[89 94]
[174 189]
[175 188]
[176 187]
[177 186]
[178 185]
[179 184]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
