%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:30:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACGCGUUUCGAAAGAUGGCGGCGUCCAGGAGCGCGGGAGAGGCCGGCCCGGGCGGCUCCCAGGGACGCGUGGUCCGCAUGAAGCGCAGAGGCGGGCGCGGGCCGCGCCGCGGUC\
) } def
/len { sequence length } bind def

/coor [
[9.55548382 72.03507996]
[-4.22371006 66.10769653]
[-18.00290489 60.18032074]
[-31.78209877 54.25294113]
[-45.56129074 48.32556534]
[-59.34048462 42.39818573]
[-73.11968231 36.47080612]
[-86.89887238 30.54343033]
[-100.67807007 24.61605263]
[-114.45726013 18.68867302]
[-110.77591705 33.22991562]
[-118.23944855 46.24128342]
[-132.65007019 50.40468597]
[-145.90269470 43.37845993]
[-150.54354858 29.11442566]
[-143.96240234 15.63523197]
[-129.86108398 10.52208424]
[-142.49981689 2.44356489]
[-155.13854980 -5.63495445]
[-170.93338013 -6.54797459]
[-177.49009705 -19.92178535]
[-190.12882996 -28.00030518]
[-202.76756287 -36.07882690]
[-215.51452637 -43.98546219]
[-228.36738586 -51.71877289]
[-241.22023010 -59.45207977]
[-254.07308960 -67.18538666]
[-263.17111206 -68.96821594]
[-267.16528320 -75.30615234]
[-279.80398560 -83.38467407]
[-288.85040283 -85.41321564]
[-292.67147827 -91.85698700]
[-305.08679199 -100.27479553]
[-314.07495117 -102.54756165]
[-317.72012329 -109.09244537]
[-329.90295410 -117.84336090]
[-342.08578491 -126.59428406]
[-357.63937378 -123.79042053]
[-370.57220459 -132.87432861]
[-373.21145630 -148.45669556]
[-363.99133301 -161.29275513]
[-348.38192749 -163.76712036]
[-335.64407349 -154.41178894]
[-333.33486938 -138.77711487]
[-321.15203857 -130.02619934]
[-308.96920776 -121.27527618]
[-296.66900635 -112.69012451]
[-284.25366211 -104.27232361]
[-271.72549438 -96.02339935]
[-259.08676147 -87.94488525]
[-246.33978271 -80.03824615]
[-233.48692322 -72.30493927]
[-220.63406372 -64.57163239]
[-207.78121948 -56.83832169]
[-200.32858276 -56.07609177]
[-194.68904114 -48.71755600]
[-182.05030823 -40.63903809]
[-169.41157532 -32.56051636]
[-154.52073669 -32.22532654]
[-147.06002808 -18.27368546]
[-134.42129517 -10.19516659]
[-121.78256226 -2.11664701]
[-108.52988434 4.90947962]
[-94.75068665 10.83685780]
[-80.97149658 16.76423645]
[-67.19229889 22.69161415]
[-53.41310883 28.61899185]
[-39.63391495 34.54637146]
[-25.85471916 40.47374725]
[-12.07552624 46.40112686]
[1.70366800 52.32850266]
[15.48286247 58.25588226]
[30.75465393 51.35772705]
[46.62629700 57.70408249]
[53.18484879 73.85245514]
[67.11949921 79.40452576]
[81.05414581 84.95659637]
[94.98880005 90.50866699]
[82.26293182 82.56813049]
[77.35051727 68.39533234]
[82.43247986 54.28244019]
[95.25263214 46.49502945]
[110.11932373 48.49039841]
[120.43232727 59.38268661]
[121.61302185 74.33634186]
[136.47570801 76.36134338]
[151.33839417 78.38634491]
[166.30433655 71.68166351]
[179.43338013 81.50817108]
[177.21949768 97.75719452]
[161.94012451 103.71313477]
[149.31338501 93.24903107]
[134.45071411 91.22402954]
[119.58802032 89.19902802]
[112.74199677 102.54563141]
[123.05748749 113.43556213]
[133.37298584 124.32550049]
[143.68847656 135.21542358]
[154.00396729 146.10536194]
[164.31945801 156.99530029]
[179.60163879 164.33636475]
[176.77798462 181.05352783]
[159.93246460 182.96798706]
[153.42951965 167.31079102]
[143.11402893 156.42085266]
[132.79853821 145.53092957]
[122.48304749 134.64099121]
[112.16755676 123.75106049]
[101.85206604 112.86112213]
[89.43672943 104.44332123]
[75.50207520 98.89125061]
[61.56742477 93.33917236]
[47.63277435 87.78710175]
[35.87815094 94.52459717]
[22.58712006 93.23744965]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[4 69]
[5 68]
[6 67]
[7 66]
[8 65]
[9 64]
[10 63]
[17 62]
[18 61]
[19 60]
[21 58]
[22 57]
[23 56]
[24 54]
[25 53]
[26 52]
[27 51]
[29 50]
[30 49]
[32 48]
[33 47]
[35 46]
[36 45]
[37 44]
[75 113]
[76 112]
[77 111]
[78 110]
[85 94]
[86 93]
[87 92]
[95 109]
[96 108]
[97 107]
[98 106]
[99 105]
[100 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
