%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:27:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACAAGAUAAACCAGACAUUUGUGAGAGAAUUCAUUCUUCUGGGACUCUCUGGUUACCCCAAACUUGAGAUCAUUUUCUUUGCUCUGAUUCUAGUUA\
) } def
/len { sequence length } bind def

/coor [
[105.61257935 300.67044067]
[115.88967133 288.66390991]
[114.49198151 273.72918701]
[113.09429169 258.79443359]
[111.69660187 243.85969543]
[98.33389282 233.78112793]
[96.26936340 216.83367920]
[107.24429321 203.32093811]
[105.38281250 188.43688965]
[103.52133179 173.55284119]
[101.42860413 158.69955444]
[99.10512543 143.88059998]
[96.78165436 129.06163025]
[94.45818329 114.24268341]
[84.79652405 102.76869202]
[70.58945465 97.95630646]
[56.38238144 93.14392090]
[42.17530823 88.33153534]
[27.96823311 83.51914978]
[18.64274597 92.14363098]
[6.58307791 95.89401245]
[-5.84462738 94.10010529]
[-16.23015404 87.17317200]
[-22.58664131 76.51376343]
[-23.73057175 64.22896576]
[-37.61097717 58.54263687]
[-51.49138641 52.85631180]
[-65.37179565 47.16998291]
[-79.85077667 53.50516129]
[-94.53797150 47.66889572]
[-100.71971130 33.12373734]
[-94.72849274 18.49907303]
[-80.11878967 12.47145653]
[-65.55828094 18.61696434]
[-59.68546677 33.28957748]
[-45.80506134 38.97590256]
[-31.92465210 44.66223145]
[-18.04424667 50.34855652]
[-3.63629889 40.38422775]
[14.02796936 40.93442535]
[28.03127861 51.96786499]
[32.78062057 69.31207275]
[46.98769379 74.12445831]
[61.19476700 78.93684387]
[75.40184021 83.74922943]
[89.60891724 88.56161499]
[103.95877838 84.19339752]
[113.07476807 72.28127289]
[115.87732697 63.39654922]
[122.66418457 60.14630508]
[132.14622498 48.52344513]
[141.62828064 36.90058899]
[151.11032104 25.27773285]
[153.83860779 9.69354248]
[167.87928772 4.72275496]
[177.36132812 -6.90010166]
[186.84338379 -18.52295876]
[196.32542419 -30.14581490]
[194.48132324 -45.84214783]
[204.34175110 -58.19315338]
[220.05671692 -59.87120056]
[232.30278015 -49.88073349]
[233.81457520 -34.14891815]
[223.69520569 -22.00916290]
[207.94828796 -20.66376877]
[198.46623230 -9.04091167]
[188.98419189 2.58194470]
[179.50213623 14.20480156]
[177.45207214 28.95764732]
[162.73318481 34.75978088]
[153.25112915 46.38263702]
[143.76908875 58.00549316]
[134.28703308 69.62834930]
[124.98689270 81.39726257]
[115.87090302 93.30938721]
[129.96987915 88.18894196]
[143.75724792 94.09726715]
[149.77371216 107.83779907]
[144.76419067 121.97656250]
[131.43898010 128.86413574]
[117.00733948 124.77414703]
[109.27713776 111.91920471]
[111.60061646 126.73816681]
[113.92408752 141.55711365]
[116.24755859 156.37608337]
[120.73990631 164.53765869]
[118.40538025 171.69136047]
[120.26686096 186.57540894]
[122.12834167 201.45945740]
[133.72146606 208.52165222]
[139.00044250 220.81527710]
[136.22032166 233.70223999]
[126.63134003 242.46200562]
[128.02903748 257.39675903]
[129.42671204 272.33148193]
[130.82440186 287.26623535]
[143.15081787 297.15737915]
[144.78973389 312.87646484]
[134.76881409 325.09762573]
[119.03328705 326.57025146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 96]
[3 95]
[4 94]
[5 93]
[8 89]
[9 88]
[10 87]
[11 85]
[12 84]
[13 83]
[14 82]
[15 46]
[16 45]
[17 44]
[18 43]
[19 42]
[25 38]
[26 37]
[27 36]
[28 35]
[47 75]
[48 74]
[50 73]
[51 72]
[52 71]
[53 70]
[55 68]
[56 67]
[57 66]
[58 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
