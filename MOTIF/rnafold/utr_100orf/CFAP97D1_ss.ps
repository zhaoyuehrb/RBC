%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:17:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUCUGAAGUGAGACUAGGAAGAGAAGAUGAACAAUUCCCUGGAUUAUCUGGCCUACCCUGUUAUCGUCUCUAAUCACAGGCAAAGCACAACCUUCAGAAAGAAACUGGACUUUGGCCACUACGUAU\
) } def
/len { sequence length } bind def

/coor [
[100.12528992 180.16297913]
[100.15122986 165.16299438]
[105.44319916 151.12750244]
[115.32707214 139.84437561]
[128.54382324 132.75088501]
[143.40748596 130.75051880]
[130.06735229 123.89189148]
[116.72721863 117.03325653]
[103.58458710 123.60259247]
[89.08414459 121.23148346]
[78.71852875 110.81806946]
[76.41414642 96.30687714]
[63.07401276 89.44824219]
[49.73388290 82.58960724]
[36.39374924 75.73097229]
[23.05361748 68.87233734]
[9.32088184 62.83810425]
[-4.75356817 57.65063095]
[-18.82801819 52.46316147]
[-32.90246582 47.27568817]
[-50.91667175 50.85403442]
[-61.67316055 37.04407883]
[-75.86975861 32.20087051]
[-88.53868103 40.96469498]
[-103.76086426 40.59256744]
[-115.70382690 31.43671989]
[-119.91497040 17.17473221]
[-134.11157227 12.33152580]
[-148.30816650 7.48831940]
[-162.50476074 2.64511323]
[-176.70135498 -2.19809270]
[-190.89794922 -7.04129887]
[-208.81968689 -3.02534914]
[-219.90927124 -16.56928062]
[-234.21958923 -21.06534767]
[-248.11303711 -13.53224182]
[-263.23989868 -18.10971069]
[-270.62570190 -32.08202744]
[-265.88854980 -47.15965652]
[-251.83894348 -54.39731598]
[-236.81224060 -49.50102997]
[-229.72352600 -35.37567139]
[-215.41319275 -30.87960434]
[-204.48149109 -36.20821762]
[-192.47744751 -32.50101471]
[-186.05474854 -21.23789597]
[-171.85815430 -16.39468956]
[-157.66156006 -11.55148315]
[-143.46496582 -6.70827723]
[-129.26835632 -1.86507118]
[-115.07176208 2.97813487]
[-103.02210999 -5.73643970]
[-87.97348022 -5.68403578]
[-75.69773865 3.32482743]
[-71.02655029 18.00427437]
[-56.82995605 22.84748077]
[-45.77173996 17.78664780]
[-33.86152649 21.78506088]
[-27.71499634 33.20124054]
[-13.64054585 38.38871002]
[0.43390357 43.57618332]
[14.50835323 48.76365280]
[11.26954174 34.11748886]
[20.50565910 22.29826164]
[35.50038910 21.90066910]
[45.34987259 33.21383286]
[42.89176559 48.01105499]
[29.91225243 55.53220367]
[43.25238419 62.39083862]
[56.59251785 69.24947357]
[69.93264771 76.10810852]
[83.27278137 82.96674347]
[96.41541290 76.39740753]
[110.91585541 78.76851654]
[121.28147125 89.18193054]
[123.58585358 103.69312286]
[136.92597961 110.55175781]
[150.26611328 117.41039276]
[157.30699158 116.34765625]
[163.36532593 118.56788635]
[167.15380859 122.94304657]
[181.96627808 125.30760193]
[196.77873230 127.67215729]
[211.61888123 129.85617065]
[226.48452759 131.85932922]
[241.35015869 133.86248779]
[256.21582031 135.86564636]
[268.70410156 126.55542755]
[283.75146484 128.79867554]
[292.55035400 140.76174927]
[307.41601562 142.76490784]
[317.16815186 133.38516235]
[330.35470581 131.39698792]
[342.09011841 137.30883789]
[348.15768433 148.74394226]
[362.97015381 151.10850525]
[377.78259277 153.47305298]
[391.56463623 145.26116943]
[406.52648926 151.05099487]
[411.19073486 166.40106201]
[401.97933960 179.53611755]
[385.95849609 180.38006592]
[375.41802979 168.28552246]
[360.60559082 165.92095947]
[345.79312134 163.55641174]
[332.66510010 173.99299622]
[315.71066284 171.71037292]
[305.41284180 157.63053894]
[290.54721069 155.62739563]
[278.89556885 164.83473206]
[263.79116821 163.01501465]
[254.21266174 150.73127747]
[239.34701538 148.72813416]
[224.48136902 146.72497559]
[209.61572266 144.72181702]
[202.49314880 146.96963501]
[194.41416931 142.48461914]
[179.60171509 140.12005615]
[164.78926086 137.75549316]
[175.58924866 148.16511536]
[182.04574585 161.70445251]
[183.33630371 176.64883423]
[179.29650879 191.09458923]
[170.44096375 203.20159912]
[157.89773560 211.42761230]
[143.26460266 214.72479248]
[128.40557861 212.67311096]
[115.21344757 205.53395081]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 78]
[7 77]
[8 76]
[12 72]
[13 71]
[14 70]
[15 69]
[16 68]
[17 62]
[18 61]
[19 60]
[20 59]
[22 56]
[23 55]
[27 51]
[28 50]
[29 49]
[30 48]
[31 47]
[32 46]
[34 43]
[35 42]
[81 119]
[82 118]
[83 117]
[84 115]
[85 114]
[86 113]
[87 112]
[90 109]
[91 108]
[95 105]
[96 104]
[97 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
