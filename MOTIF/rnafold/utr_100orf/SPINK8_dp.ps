%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:26:23 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (SPINK8)
} def

/sequence { (\
AUGAAGGGGAUCUGCUCAGACGCCAUCCUUGUUCUAGCUACCUCCAUGUGGAUGGCCUUUGCAAUUGACUUCCCCCUUCCUAUGGCCUCUGAAAGAGGUC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 83 0.117567808 ubox
2 82 0.112250663 ubox
2 84 0.006727519 ubox
3 72 0.007958018 ubox
3 78 0.053365278 ubox
3 79 0.986985967 ubox
3 81 0.028154472 ubox
4 71 0.007985115 ubox
4 77 0.058001361 ubox
4 78 0.990590349 ubox
5 70 0.007989330 ubox
5 77 0.989678552 ubox
5 78 0.005670123 ubox
6 69 0.007990401 ubox
6 74 0.032085977 ubox
6 75 0.366240599 ubox
6 76 0.929833409 ubox
7 73 0.034148515 ubox
7 74 0.500004977 ubox
7 75 0.865276878 ubox
7 76 0.003407460 ubox
8 70 0.005534258 ubox
8 72 0.036177665 ubox
8 73 0.604772352 ubox
8 74 0.795468604 ubox
8 75 0.003659673 ubox
9 66 0.029932057 ubox
9 69 0.022253257 ubox
9 70 0.015118671 ubox
9 71 0.048081212 ubox
9 72 0.693839581 ubox
9 73 0.716203657 ubox
9 74 0.003864653 ubox
10 16 0.005603611 ubox
10 65 0.149121728 ubox
10 70 0.177226799 ubox
10 71 0.745938869 ubox
11 20 0.037690605 ubox
11 64 0.151738720 ubox
11 68 0.872504115 ubox
12 19 0.041347213 ubox
12 67 0.898632957 ubox
13 18 0.038708931 ubox
13 63 0.673435572 ubox
13 67 0.036772971 ubox
14 21 0.006622377 ubox
14 23 0.006242649 ubox
14 38 0.006282980 ubox
14 62 0.685330153 ubox
14 66 0.049120296 ubox
15 22 0.006341816 ubox
15 37 0.006296499 ubox
15 61 0.668090118 ubox
16 36 0.006241519 ubox
16 68 0.044124711 ubox
17 61 0.735630747 ubox
17 67 0.044158477 ubox
18 35 0.005268675 ubox
18 58 0.511115002 ubox
18 59 0.065105968 ubox
18 60 0.792253933 ubox
18 66 0.042236699 ubox
19 33 0.003531498 ubox
19 34 0.005311302 ubox
19 57 0.511293161 ubox
19 58 0.059425171 ubox
19 59 0.823033751 ubox
19 60 0.045637189 ubox
19 65 0.029587293 ubox
20 32 0.004211521 ubox
20 33 0.004791010 ubox
20 58 0.820504992 ubox
20 59 0.044191138 ubox
21 31 0.004743329 ubox
21 61 0.016654323 ubox
22 30 0.003945351 ubox
22 56 0.998079154 ubox
23 55 0.999939738 ubox
24 31 0.003630315 ubox
24 54 0.999935118 ubox
24 67 0.003531457 ubox
25 30 0.003651835 ubox
25 53 0.999542042 ubox
25 66 0.003495571 ubox
26 52 0.999677368 ubox
27 51 0.999814165 ubox
28 37 0.010023062 ubox
28 50 0.999197906 ubox
28 51 0.008507601 ubox
29 36 0.017779787 ubox
29 37 0.020786944 ubox
29 50 0.011757878 ubox
29 64 0.006990798 ubox
30 36 0.021903992 ubox
30 40 0.011194930 ubox
30 46 0.228256649 ubox
30 48 0.334850716 ubox
30 63 0.007692339 ubox
31 35 0.018670864 ubox
31 38 0.126328561 ubox
31 39 0.008822232 ubox
31 41 0.097612471 ubox
31 45 0.234075546 ubox
31 47 0.484845149 ubox
31 49 0.020179788 ubox
31 62 0.007789743 ubox
32 37 0.120523463 ubox
32 40 0.098058672 ubox
32 46 0.469023243 ubox
32 48 0.044832558 ubox
32 61 0.007729077 ubox
34 51 0.003164665 ubox
35 48 0.014449663 ubox
35 50 0.003518737 ubox
36 43 0.456579246 ubox
36 47 0.016981090 ubox
36 49 0.011315572 ubox
37 42 0.468198929 ubox
37 49 0.170334715 ubox
37 56 0.007863183 ubox
38 48 0.171379605 ubox
38 51 0.010903850 ubox
38 55 0.007927659 ubox
39 48 0.012645392 ubox
39 50 0.017973283 ubox
39 54 0.007915033 ubox
40 47 0.023246771 ubox
40 49 0.089298220 ubox
40 53 0.007474085 ubox
41 48 0.090180905 ubox
41 51 0.006141152 ubox
41 55 0.004636113 ubox
42 50 0.006802419 ubox
42 54 0.004738089 ubox
43 52 0.008753087 ubox
44 51 0.009421604 ubox
45 50 0.009705161 ubox
48 69 0.003601619 ubox
49 68 0.003604123 ubox
51 66 0.003593790 ubox
52 65 0.003613323 ubox
55 62 0.004158186 ubox
56 61 0.004198399 ubox
58 68 0.005700395 ubox
59 67 0.006184754 ubox
59 68 0.006951913 ubox
60 67 0.007429517 ubox
61 66 0.004414630 ubox
63 71 0.016181567 ubox
64 70 0.021766446 ubox
76 84 0.005825545 ubox
79 84 0.003738179 ubox
79 85 0.003856468 ubox
80 84 0.014577253 ubox
84 100 0.941894025 ubox
85 99 0.995726304 ubox
86 98 0.999955564 ubox
87 97 0.999985874 ubox
88 96 0.999825999 ubox
89 95 0.999641831 ubox
90 94 0.900566531 ubox
3 79 0.9500000 lbox
4 78 0.9500000 lbox
5 77 0.9500000 lbox
6 76 0.9500000 lbox
7 75 0.9500000 lbox
8 74 0.9500000 lbox
9 73 0.9500000 lbox
11 68 0.9500000 lbox
12 67 0.9500000 lbox
17 61 0.9500000 lbox
18 60 0.9500000 lbox
19 59 0.9500000 lbox
20 58 0.9500000 lbox
22 56 0.9500000 lbox
23 55 0.9500000 lbox
24 54 0.9500000 lbox
25 53 0.9500000 lbox
26 52 0.9500000 lbox
27 51 0.9500000 lbox
28 50 0.9500000 lbox
84 100 0.9500000 lbox
85 99 0.9500000 lbox
86 98 0.9500000 lbox
87 97 0.9500000 lbox
88 96 0.9500000 lbox
89 95 0.9500000 lbox
90 94 0.9500000 lbox
showpage
end
%%EOF
