%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCUGGAAACCCACCCAGAACCUCCACCCUCUGACACCAUGGUCAACUCCUGUUGUGGCUCUGUGUGCUCUGACCAGGGCUGUGGCCUAGAGAACUGCUGCCGUCCCAGCUACUGCCAGACCACCUGCUGCAGGACCA\
) } def
/len { sequence length } bind def

/coor [
[121.16371918 134.07023621]
[111.64567566 139.46214294]
[100.76269531 142.17399597]
[89.27442169 141.86503601]
[78.02359772 138.41090393]
[70.09371185 151.14341736]
[62.16382599 163.87593079]
[54.23394012 176.60844421]
[60.19266891 190.93580627]
[56.55923080 206.02148438]
[44.73075867 216.06474304]
[29.25554276 217.20372009]
[16.08411598 209.00048828]
[10.28116417 194.60932922]
[14.07803822 179.56394958]
[26.01476288 169.64961243]
[41.50142670 168.67855835]
[49.43130875 155.94604492]
[57.36119461 143.21353149]
[65.29107666 130.48101807]
[62.44026566 123.54395294]
[49.37684250 130.91600037]
[36.31341934 138.28804016]
[23.25000000 145.66007996]
[12.98320198 156.59593201]
[-2.01441789 156.86314392]
[-12.66424656 146.29994202]
[-12.51954842 131.30064392]
[-1.66791582 120.94486237]
[13.32188702 121.50141144]
[27.79413414 117.55754852]
[42.26638412 113.61369324]
[56.73863220 109.66983032]
[53.88781357 102.73276520]
[39.29643631 99.25546265]
[24.70505524 95.77816010]
[10.11367512 92.30085754]
[-3.21487379 100.79352570]
[-18.62650871 97.29251862]
[-26.97778130 83.87492371]
[-23.31402779 68.50116730]
[-9.80889034 60.29221725]
[5.52527380 64.11830902]
[13.59097672 77.70948029]
[28.18235779 81.18678284]
[42.77373505 84.66408539]
[57.36511612 88.14138794]
[76.87539673 65.96862030]
[104.01780701 62.17686462]
[125.26116180 75.87979126]
[138.08122253 68.09224701]
[150.90129089 60.30469513]
[163.72135925 52.51714325]
[176.54142761 44.72959137]
[189.36148071 36.94204330]
[197.13911438 23.16456032]
[212.03372192 23.16978836]
[224.85379028 15.38223743]
[237.67385864 7.59468651]
[250.49391174 -0.19286406]
[236.39070129 -5.30162334]
[229.84481812 -18.79797363]
[234.56459045 -33.03608322]
[247.87619019 -39.94991684]
[262.23849487 -35.62270355]
[269.51504517 -22.50586510]
[265.58374023 -8.03032970]
[279.32739258 -14.03964901]
[293.07104492 -20.04896736]
[302.61563110 -32.66686249]
[317.37664795 -30.67642593]
[331.12030029 -36.68574524]
[344.86395264 -42.69506073]
[358.60763550 -48.70438004]
[364.06045532 -60.45141220]
[375.69580078 -65.15210724]
[387.02795410 -60.77779770]
[400.90206909 -66.47943115]
[414.77618408 -72.18106079]
[428.58593750 -78.03690338]
[442.32958984 -84.04621887]
[456.07324219 -90.05554199]
[469.81689453 -96.06485748]
[483.56057739 -102.07418060]
[497.09573364 -108.53938293]
[510.40731812 -115.45325470]
[523.71893311 -122.36713409]
[537.03051758 -129.28100586]
[546.52703857 -145.01377869]
[563.98779297 -143.64273071]
[577.14202881 -150.85145569]
[590.29626465 -158.06018066]
[598.34313965 -172.34933472]
[614.74200439 -172.25454712]
[622.62316895 -157.87330627]
[613.87908936 -143.99981689]
[597.50500488 -144.90592957]
[584.35076904 -137.69720459]
[571.19653320 -130.48847961]
[567.47729492 -118.92475128]
[556.50860596 -112.82842255]
[543.94439697 -115.96942139]
[530.63281250 -109.05554199]
[517.32122803 -102.14167023]
[504.00961304 -95.22779846]
[502.60552979 -91.91020203]
[499.47988892 -89.13404846]
[494.91778564 -87.72168732]
[489.56988525 -88.33052063]
[475.82623291 -82.32120514]
[462.08258057 -76.31188202]
[448.33892822 -70.30256653]
[434.59524536 -64.29324341]
[429.68719482 -58.68625259]
[420.47781372 -58.30693817]
[406.60369873 -52.60530472]
[392.72958374 -46.90367126]
[382.82275391 -32.46023941]
[364.61694336 -34.96072388]
[350.87329102 -28.95140648]
[337.12963867 -22.94208717]
[323.38598633 -16.93276787]
[314.82440186 -4.74469995]
[299.08035278 -6.30531120]
[285.33670044 -0.29599229]
[271.59304810 5.71332645]
[258.28146362 12.62720013]
[245.46141052 20.41475105]
[232.64134216 28.20230103]
[219.82127380 35.98985291]
[212.96061707 49.21031570]
[197.14903259 49.76210785]
[184.32897949 57.54965591]
[171.50891113 65.33720398]
[158.68884277 73.12475586]
[145.86877441 80.91230774]
[133.04872131 88.69985962]
[135.89749146 97.82267761]
[136.19989014 107.65151978]
[133.78698730 117.46915436]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 20]
[6 19]
[7 18]
[8 17]
[34 47]
[35 46]
[36 45]
[37 44]
[50 137]
[51 136]
[52 135]
[53 134]
[54 133]
[55 132]
[57 130]
[58 129]
[59 128]
[60 127]
[67 126]
[68 125]
[69 124]
[71 122]
[72 121]
[73 120]
[74 119]
[77 117]
[78 116]
[79 115]
[80 113]
[81 112]
[82 111]
[83 110]
[84 109]
[85 105]
[86 104]
[87 103]
[88 102]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
