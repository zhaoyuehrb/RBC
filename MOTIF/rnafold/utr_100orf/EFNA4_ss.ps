%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:49:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCCUCUUCACUUUGUACCUUUCUCUCCUCGACUGUGAAGCGGGCCGGGACCUGCCAGGCCAGACCAAACCGGACCUCGGGGGCGAUGCGGCUGCUGCCCCUGCUGCGGACUGUCCUCUGGGCCGCGUUCCUCGGCUCCCCUCUGCGCGGGGGCUCCAGCCUCCGCCACGUAGUCUACUGGAACU\
) } def
/len { sequence length } bind def

/coor [
[111.22099304 142.57633972]
[99.12441254 144.51715088]
[86.82339478 143.04997253]
[75.27001953 138.21284485]
[65.37901306 130.30747986]
[54.25423431 140.36924744]
[49.20936966 155.36457825]
[34.58010101 158.16345215]
[23.45531845 168.22521973]
[12.33053684 178.28698730]
[1.20575500 188.34877014]
[-9.91902637 198.41053772]
[-21.04380798 208.47230530]
[-26.27603912 226.11788940]
[-43.55190659 229.15338135]
[-54.50700378 239.39964294]
[-65.46210480 249.64590454]
[-60.08473587 263.86392212]
[-60.56269455 279.05734253]
[-66.82309723 292.90927124]
[-77.91127777 303.30737305]
[-92.13636780 308.66604614]
[-107.32914734 308.16809082]
[-121.17282104 301.88949585]
[-131.55633545 290.78762817]
[-136.89628601 276.55551147]
[-136.37835693 261.36340332]
[-130.08152771 247.52798462]
[-118.96602631 237.15908813]
[-104.72689056 231.83787537]
[-89.53546906 232.37579346]
[-75.70836639 238.69081116]
[-64.75326538 228.44454956]
[-53.79816818 218.19828796]
[-53.07647705 206.11079407]
[-44.01602936 197.48463440]
[-31.10557938 197.34751892]
[-19.98079681 187.28575134]
[-8.85601616 177.22398376]
[2.26876569 167.16221619]
[13.39354706 157.10043335]
[24.51832962 147.03866577]
[28.76747322 132.76303101]
[44.19246292 129.24446106]
[55.31724548 119.18269348]
[51.59661102 104.65145874]
[37.00522995 101.17415619]
[22.41384888 97.69685364]
[7.79392481 94.34158325]
[-6.85352278 91.10858917]
[-20.03829956 99.82278442]
[-35.50628281 96.57978821]
[-44.08059692 83.30361938]
[-40.67424774 67.87078857]
[-27.30816460 59.43731689]
[-11.91220856 63.00664139]
[-3.62052536 76.46113586]
[11.02692223 79.69413757]
[18.25058937 78.06243896]
[25.89115143 83.10546875]
[40.48253250 86.58277130]
[55.07390976 90.06007385]
[64.40103149 72.43849945]
[80.02434540 60.76189423]
[98.71716309 56.98014450]
[116.80960083 61.45841980]
[130.90863037 72.97592926]
[143.81465149 65.33168030]
[156.72067261 57.68743134]
[157.37507629 45.79319382]
[163.63380432 35.79894257]
[173.83895874 30.13360786]
[185.39117432 30.10757065]
[195.41139221 35.61135483]
[208.56562805 28.40262794]
[221.71987915 21.19390297]
[234.87413025 13.98517609]
[239.40159607 -0.91917837]
[252.84457397 -8.04246426]
[267.02569580 -3.63436389]
[280.17993164 -10.84309006]
[284.54440308 -22.99421883]
[295.66534424 -28.72374725]
[307.32073975 -25.44050598]
[320.59362793 -32.42842102]
[333.86648560 -39.41633606]
[347.13934326 -46.40425110]
[348.38897705 -58.25075531]
[355.14065552 -67.91881561]
[365.61688232 -73.06565094]
[377.15588379 -72.51276398]
[386.88769531 -66.51377106]
[400.38665771 -73.05426788]
[413.88562012 -79.59477234]
[427.38458252 -86.13526917]
[440.88354492 -92.67577362]
[446.15219116 -107.33452606]
[459.93521118 -113.77522278]
[473.87762451 -108.66203308]
[487.37658691 -115.20252991]
[500.87554932 -121.74303436]
[514.37451172 -128.28353882]
[527.87347412 -134.82403564]
[541.37243652 -141.36453247]
[554.87139893 -147.90502930]
[568.37036133 -154.44552612]
[574.74438477 -161.01683044]
[582.14996338 -160.98042297]
[595.75634766 -167.29444885]
[609.36267090 -173.60845947]
[622.96905518 -179.92248535]
[636.57543945 -186.23651123]
[635.99816895 -195.57067871]
[638.00640869 -204.68045044]
[642.43249512 -212.86543274]
[648.92333984 -219.49989319]
[656.96868896 -224.08074951]
[665.94116211 -226.26562500]
[675.14495850 -225.89837646]
[683.87017822 -223.02029419]
[691.44732666 -217.86579895]
[697.29876709 -210.84346008]
[711.46881104 -215.76383972]
[725.63885498 -220.68420410]
[739.80889893 -225.60458374]
[753.97894287 -230.52494812]
[768.14898682 -235.44532776]
[773.54553223 -250.12220764]
[787.13934326 -257.85159302]
[802.51171875 -254.98391724]
[812.40435791 -242.87318420]
[812.14624023 -227.23773193]
[801.85925293 -215.46012878]
[786.40057373 -213.10142517]
[773.06933594 -221.27529907]
[758.89929199 -216.35491943]
[744.72924805 -211.43453979]
[730.55920410 -206.51417542]
[716.38922119 -201.59379578]
[702.21917725 -196.67343140]
[697.85565186 -176.18489075]
[681.92608643 -162.37510681]
[660.75787354 -160.94369507]
[642.88940430 -172.63014221]
[629.28308105 -166.31611633]
[615.67669678 -160.00210571]
[602.07031250 -153.68807983]
[588.46398926 -147.37405396]
[574.91082764 -140.94657898]
[561.41186523 -134.40608215]
[547.91290283 -127.86557770]
[534.41394043 -121.32507324]
[520.91503906 -114.78457642]
[507.41604614 -108.24407196]
[493.91708374 -101.70357513]
[480.41815186 -95.16307831]
[475.79016113 -81.05217743]
[462.19348145 -74.22688293]
[447.42404175 -79.17681122]
[433.92507935 -72.63631439]
[420.42611694 -66.09580994]
[406.92715454 -59.55531311]
[393.42822266 -53.01481247]
[388.49203491 -35.40164948]
[371.97543335 -26.82500076]
[354.12725830 -33.13138199]
[340.85440063 -26.14346695]
[327.58154297 -19.15555191]
[314.30865479 -12.16763783]
[305.77420044 3.15662384]
[287.38867188 2.31115866]
[274.23440552 9.51988506]
[270.31936646 23.84496498]
[257.08178711 31.34302521]
[242.08285522 27.13942528]
[228.92860413 34.34815216]
[215.77435303 41.55687714]
[202.62011719 48.76560211]
[198.57273865 66.60399628]
[182.50668335 75.99752808]
[164.36492920 70.59346008]
[151.45889282 78.23770905]
[138.55287170 85.88195801]
[141.43945312 96.94135284]
[141.17860413 108.50520325]
[137.71537781 119.68474579]
[131.24380493 129.60029602]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 45]
[6 44]
[8 42]
[9 41]
[10 40]
[11 39]
[12 38]
[13 37]
[15 34]
[16 33]
[17 32]
[46 62]
[47 61]
[48 60]
[49 58]
[50 57]
[67 183]
[68 182]
[69 181]
[74 178]
[75 177]
[76 176]
[77 175]
[80 172]
[81 171]
[84 169]
[85 168]
[86 167]
[87 166]
[92 163]
[93 162]
[94 161]
[95 160]
[96 159]
[99 156]
[100 155]
[101 154]
[102 153]
[103 152]
[104 151]
[105 150]
[106 149]
[108 148]
[109 147]
[110 146]
[111 145]
[112 144]
[122 140]
[123 139]
[124 138]
[125 137]
[126 136]
[127 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
