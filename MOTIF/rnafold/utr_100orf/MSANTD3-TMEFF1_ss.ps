%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUAGCUAGCGGCCAGGAGAAAUACAGUGGAAAAUGCAAAACAACGAAAUUAUAAAGCCUGCCAAAUACUUCUCAGAAUUGGAAAAGAGCAUCCUGCUGGCUUUAGUAGAAAAGUAUAAAUAUGUGCUGGAAU\
) } def
/len { sequence length } bind def

/coor [
[152.35415649 282.79138184]
[151.79200745 271.43850708]
[154.21942139 260.31790161]
[159.47570801 250.20411682]
[167.20288086 241.80377197]
[159.80462646 228.75518799]
[152.40637207 215.70658875]
[145.00811768 202.65798950]
[137.60986328 189.60939026]
[131.51737976 185.30209351]
[130.19522095 176.16705322]
[123.10489655 162.94860840]
[116.01457214 149.73016357]
[108.92424774 136.51171875]
[101.83391571 123.29327393]
[94.74359131 110.07482910]
[84.51647186 99.10186005]
[71.82898712 91.10012054]
[59.14151001 83.09838104]
[46.45402908 75.09664154]
[33.76654816 67.09490204]
[22.03730392 75.06771851]
[8.19353390 77.94190979]
[-5.65475035 75.31330109]
[-17.40979576 67.61389923]
[-25.30387306 56.04123306]
[-28.16508293 42.37223053]
[-25.59122467 28.69041634]
[-38.08763885 20.39344978]
[-50.58405304 12.09648228]
[-61.72164536 18.00383949]
[-74.24338531 18.57403183]
[-85.73796082 13.75938892]
[-94.01840973 4.54323244]
[-97.53819275 -7.26026058]
[-95.67975616 -19.36298370]
[-107.77352905 -28.23656654]
[-119.90124512 -19.21381760]
[-134.15020752 -14.16819859]
[-149.25343323 -13.54836369]
[-163.86793518 -17.40942764]
[-176.69419861 -25.40806770]
[-186.59173584 -36.83304977]
[-192.68045044 -50.66847229]
[-194.41896057 -65.68409729]
[-191.65264893 -80.54474640]
[-184.62751770 -93.92902374]
[-173.96821594 -104.64680481]
[-160.62257385 -111.74507904]
[-145.77728271 -114.59265900]
[-130.75238037 -112.93634796]
[-116.88384247 -106.92343140]
[-105.40487671 -97.08856201]
[-97.33616638 -84.30625153]
[-93.39519501 -69.71309662]
[-93.93237305 -54.60671234]
[-98.89994812 -40.33034515]
[-86.80616760 -31.45676231]
[-70.33888245 -37.62803268]
[-53.29425049 -32.70372009]
[-42.46647263 -18.45281219]
[-42.28708267 -0.39993066]
[-29.79067039 7.89703655]
[-17.29425812 16.19400406]
[-3.75670290 7.78508568]
[12.14816761 6.09328842]
[27.26089859 11.50539875]
[38.55732346 22.99198151]
[43.75370026 38.30277634]
[41.76828766 54.40742111]
[54.45576859 62.40916061]
[67.14324951 70.41089630]
[79.83072662 78.41263580]
[92.51821136 86.41437531]
[83.34973145 74.54260254]
[84.50891876 59.58746338]
[95.39729309 49.27032471]
[110.39315033 48.91794968]
[121.75410461 58.71226883]
[123.61447144 73.59645844]
[115.01202393 85.88691711]
[127.31050110 77.29928589]
[139.60897827 68.71164703]
[139.76535034 53.19536209]
[149.03910828 40.75442123]
[163.86431885 36.17262650]
[178.54037476 41.21176529]
[187.42404175 53.93419266]
[187.09936523 69.44786835]
[177.69117737 81.78747559]
[162.81713867 86.20817566]
[148.19660950 81.01012421]
[135.89813232 89.59776306]
[123.59966278 98.18539429]
[118.57038116 101.27189636]
[113.25058746 102.87289429]
[107.96203613 102.98450470]
[115.05236053 116.20294189]
[122.14268494 129.42138672]
[129.23301697 142.63983154]
[136.32334900 155.85827637]
[143.41366577 169.07672119]
[150.65846252 182.21113586]
[158.05671692 195.25973511]
[165.45497131 208.30833435]
[172.85322571 221.35693359]
[180.25148010 234.40551758]
[199.25291443 232.24075317]
[217.28616333 238.46189880]
[230.84242249 251.81451416]
[237.30294800 269.66094971]
[235.44491577 288.50119019]
[225.67254639 304.65936279]
[234.54612732 316.75314331]
[243.41972351 328.84692383]
[252.29330444 340.94070435]
[261.16687012 353.03448486]
[270.04046631 365.12826538]
[285.26254272 371.22915649]
[287.32186890 387.49850464]
[274.10003662 397.19976807]
[259.19848633 390.35314941]
[257.94668579 374.00186157]
[249.07310486 361.90808105]
[240.19952393 349.81430054]
[231.32594299 337.72052002]
[222.45234680 325.62673950]
[213.57876587 313.53295898]
[202.92686462 317.17413330]
[191.67793274 317.90631104]
[180.61318970 315.67041016]
[170.50315857 310.61376953]
[162.05410767 303.08047485]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 107]
[6 106]
[7 105]
[8 104]
[9 103]
[11 102]
[12 101]
[13 100]
[14 99]
[15 98]
[16 97]
[17 74]
[18 73]
[19 72]
[20 71]
[21 70]
[28 64]
[29 63]
[30 62]
[36 58]
[37 57]
[81 94]
[82 93]
[83 92]
[113 128]
[114 127]
[115 126]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
