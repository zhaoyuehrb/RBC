%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGCAACGGUCACCUGAUCUGCGGCUGUCGAGGCCGCUGAGGCAGUGGAGGCUGAGGCUAUGAUGGCGGCCAUGGCGACGGCUCGAGUGCGGAUGGGGCCGCGAUGCGCCCAGGCGCUCUGGCGCAUGCCGUGGCUGCCGGUGUUUUUGUCGUUGGCGG\
) } def
/len { sequence length } bind def

/coor [
[130.73558044 331.65609741]
[129.28341675 316.72656250]
[120.35032654 304.80813599]
[126.71527863 290.32373047]
[125.26311493 275.39419556]
[123.81095123 260.46463013]
[122.35878754 245.53509521]
[120.90662384 230.60556030]
[111.97352600 218.68711853]
[118.33847809 204.20271301]
[116.88631439 189.27317810]
[113.09010315 182.88874817]
[115.55362701 174.04048157]
[114.39124298 159.08558655]
[113.22885132 144.13069153]
[112.06646729 129.17579651]
[105.72157288 125.17675781]
[92.45015717 132.16743469]
[93.03177643 117.17869568]
[86.68687439 113.17965698]
[72.69361877 118.58232880]
[62.60646820 130.77084351]
[47.94659805 128.13691711]
[33.95334244 133.53958130]
[19.96008873 138.94224548]
[5.96683311 144.34492493]
[-8.02642250 149.74758911]
[-22.01967812 155.15025330]
[-29.80508614 169.17761230]
[-45.64949036 171.69445801]
[-57.39841461 160.77006531]
[-56.03909302 144.78469849]
[-42.61428070 136.00097656]
[-27.42234421 141.15699768]
[-13.42908859 135.75433350]
[0.56416732 130.35166931]
[14.55742264 124.94899750]
[28.55067825 119.54633331]
[42.54393387 114.14366913]
[51.63019562 102.34158325]
[67.29095459 104.58907318]
[81.28421021 99.18640137]
[81.35693359 91.68675995]
[81.50237274 76.68746185]
[81.57509613 69.18781281]
[67.68923187 63.51481628]
[53.80337524 57.84181976]
[39.91751480 52.16882324]
[23.75130653 54.92303848]
[13.49268246 42.12879562]
[19.69483757 26.94771004]
[35.97752762 24.99678421]
[45.59051132 38.28296280]
[59.47637177 43.95595932]
[73.36222839 49.62895966]
[87.24809265 55.30195618]
[73.99258423 48.28116608]
[65.74847412 35.74982071]
[64.54859924 20.79788589]
[70.68881226 7.11221075]
[82.65507507 -1.93259895]
[97.49674225 -4.10627699]
[111.55416870 1.12716115]
[121.36106873 12.47725677]
[124.49926758 27.14530754]
[120.19495392 41.51446915]
[109.51052856 52.04098892]
[121.18600464 42.62380600]
[132.86148071 33.20662689]
[144.53695679 23.78944397]
[156.21241760 14.37226200]
[167.88789368 4.95507956]
[179.56336975 -4.46210194]
[191.23884583 -13.87928391]
[202.91432190 -23.29646683]
[214.58979797 -32.71364594]
[226.26525879 -42.13082886]
[237.94073486 -51.54801178]
[249.61621094 -60.96519470]
[248.97114563 -76.35643005]
[257.41394043 -89.02816010]
[271.53240967 -94.23707581]
[285.83959961 -90.18218231]
[297.51507568 -99.59936523]
[309.19055176 -109.01654816]
[315.07455444 -123.70290375]
[329.83856201 -125.67079926]
[341.51403809 -135.08798218]
[353.18951416 -144.50515747]
[364.86499023 -153.92234802]
[376.54046631 -163.33952332]
[388.21594238 -172.75669861]
[386.66213989 -183.39846802]
[389.66876221 -193.63981628]
[396.62216187 -201.63055420]
[406.20220947 -205.95658875]
[416.63244629 -205.88993835]
[426.00958252 -201.51040649]
[438.21286011 -210.23278809]
[450.41613770 -218.95516968]
[462.61944580 -227.67755127]
[467.81408691 -235.25227356]
[475.14498901 -236.44802856]
[487.51510620 -244.93214417]
[497.15740967 -258.87713623]
[513.22668457 -253.47201538]
[512.48120117 -236.53446960]
[495.99920654 -232.56201172]
[483.62908936 -224.07791138]
[471.34182739 -215.47425842]
[459.13851929 -206.75187683]
[446.93524170 -198.02949524]
[434.73196411 -189.30711365]
[433.01263428 -169.94393921]
[417.41525269 -157.84059143]
[397.63311768 -161.08123779]
[385.95764160 -151.66404724]
[374.28216553 -142.24687195]
[362.60668945 -132.82968140]
[350.93121338 -123.41250610]
[339.25576782 -113.99532318]
[334.20687866 -99.98254395]
[318.60772705 -97.34107208]
[306.93225098 -87.92388916]
[295.25677490 -78.50670624]
[296.19085693 -63.66536331]
[288.11108398 -50.96965408]
[273.93920898 -45.40089035]
[259.03338623 -49.28971863]
[247.35792542 -39.87253952]
[235.68244934 -30.45535660]
[224.00697327 -21.03817368]
[212.33149719 -11.62099266]
[200.65602112 -2.20381045]
[188.98054504 7.21337128]
[177.30508423 16.63055420]
[165.62960815 26.04773521]
[153.95413208 35.46491623]
[142.27865601 44.88209915]
[130.60317993 54.29928207]
[118.92771149 63.71646118]
[127.02136230 128.01341248]
[128.18374634 142.96830750]
[129.34613037 157.92320251]
[130.50851440 172.87808228]
[131.81585693 187.82101440]
[133.26802063 202.75054932]
[142.30497742 215.73684692]
[135.83616638 229.15339661]
[137.28833008 244.08293152]
[138.74049377 259.01248169]
[140.19265747 273.94201660]
[141.64482117 288.87155151]
[150.68177795 301.85784912]
[144.21296692 315.27438354]
[145.66513062 330.20394897]
[158.02754211 340.05004883]
[159.72380066 355.76306152]
[149.74751282 368.02069092]
[134.01747131 369.55072021]
[121.86599731 359.44540405]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[10 147]
[11 146]
[13 145]
[14 144]
[15 143]
[16 142]
[20 42]
[21 41]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[28 34]
[45 56]
[46 55]
[47 54]
[48 53]
[67 141]
[68 140]
[69 139]
[70 138]
[71 137]
[72 136]
[73 135]
[74 134]
[75 133]
[76 132]
[77 131]
[78 130]
[79 129]
[83 125]
[84 124]
[85 123]
[87 121]
[88 120]
[89 119]
[90 118]
[91 117]
[92 116]
[98 113]
[99 112]
[100 111]
[101 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
