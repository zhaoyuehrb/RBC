%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:04:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCUGACUCCACCUCUUCUGCCACAAACGUCAGCAUGGUGGUAUCAGCCGGCCCUUUGUCCAGCGAGAAGGCAGAGAUGAACAUUCUAGAAAUCAAUGAGAAAUUGCACCCCCAGCUGGCAGAGAAGAAACAGC\
) } def
/len { sequence length } bind def

/coor [
[78.62705994 121.71285248]
[74.38457489 116.49547577]
[60.16216660 121.26234436]
[46.05365372 126.35645294]
[32.06657028 131.77508545]
[18.07948875 137.19371033]
[4.09240532 142.61233521]
[-2.35335803 156.79295349]
[-16.61544037 162.08895874]
[-30.09476852 155.85650635]
[-44.08185196 161.27513123]
[-58.06893539 166.69375610]
[-72.05601501 172.11238098]
[-86.04309845 177.53100586]
[-88.58648682 191.12959290]
[-97.46459198 201.59754944]
[-110.26151276 206.25263977]
[-123.57640076 203.97219849]
[-133.92715454 195.46174622]
[-148.03565979 200.55584717]
[-162.14418030 205.64996338]
[-166.79145813 210.55514526]
[-172.38436890 212.07788086]
[-177.02360535 210.63703918]
[-191.35232544 215.07412720]
[-202.09022522 227.46885681]
[-218.13995361 224.10165405]
[-222.99093628 208.43640137]
[-211.65287781 196.58818054]
[-195.78941345 200.74540710]
[-181.46069336 196.30831909]
[-167.23828125 191.54144287]
[-153.12977600 186.44734192]
[-139.02125549 181.35324097]
[-134.99221802 165.48207092]
[-122.18943787 155.00984192]
[-105.50366211 154.19137573]
[-91.46172333 163.54393005]
[-77.47463989 158.12530518]
[-63.48756027 152.70668030]
[-49.50047684 147.28805542]
[-35.51339340 141.86943054]
[-29.75081635 128.18263245]
[-15.64311600 122.48812866]
[-1.32621980 128.62524414]
[12.66086388 123.20661926]
[26.64794731 117.78799438]
[40.63502884 112.36936951]
[43.37701797 108.35939026]
[48.70669937 106.08036041]
[55.39529419 107.03993988]
[69.61770630 102.27306366]
[77.29064941 79.68901825]
[98.88186646 69.55331421]
[121.15837860 78.07801056]
[133.91163635 70.18152618]
[146.66490173 62.28504562]
[159.41815186 54.38856125]
[172.17140198 46.49208069]
[177.88456726 39.24738693]
[185.31169128 38.56443024]
[198.24394226 30.96462822]
[211.17619324 23.36482620]
[224.10844421 15.76502419]
[237.04067993 8.16522121]
[234.71325684 -7.70114517]
[238.62532043 -23.21319199]
[248.15283203 -36.01659012]
[261.82171631 -44.17972946]
[277.53601074 -46.48511124]
[292.89910889 -42.61086655]
[305.57937622 -33.17530823]
[318.33264160 -41.07178879]
[331.08590698 -48.96827316]
[343.83914185 -56.86475372]
[354.92428589 -66.97019196]
[363.96380615 -78.94044495]
[373.00332642 -90.91070557]
[369.32519531 -106.10956573]
[376.32345581 -120.09377289]
[390.69378662 -126.26041412]
[405.65093994 -121.69779205]
[414.13262939 -108.56024170]
[412.13400269 -93.05090332]
[400.59881592 -82.49281311]
[384.97360229 -81.87118530]
[375.93408203 -69.90092468]
[366.89456177 -57.93066788]
[381.06866455 -62.83924484]
[396.06811523 -62.71042252]
[410.15585327 -57.55912781]
[421.70040894 -47.98190689]
[429.36486816 -35.08787155]
[432.26162720 -20.37023544]
[430.05520630 -5.53339815]
[423.00115967 7.70443583]
[411.91635132 17.81023788]
[398.08450317 23.61368752]
[383.10742188 24.44270706]
[368.71957397 20.20129204]
[356.58715820 11.38062477]
[348.11517334 -0.99780256]
[344.28472900 -15.50048542]
[345.53945923 -30.44791603]
[351.73562622 -44.11149597]
[338.98239136 -36.21501541]
[326.22912598 -28.31853294]
[313.47586060 -20.42205048]
[316.26324463 -6.62158442]
[314.15359497 7.32889223]
[307.38153076 19.74065208]
[296.74737549 29.10414124]
[283.52252197 34.27256393]
[269.29745483 34.60231400]
[255.79057312 30.03305244]
[244.64048767 21.09746742]
[231.70823669 28.69727135]
[218.77598572 36.29707336]
[205.84375000 43.89687347]
[192.91149902 51.49667740]
[180.06788635 59.24533844]
[167.31463623 67.14182281]
[154.56137085 75.03829956]
[141.80812073 82.93478394]
[129.05485535 90.83126831]
[130.35847473 97.42826080]
[130.18316650 104.15052795]
[128.53749084 110.67060852]
[125.50162506 116.67087555]
[121.22343445 121.85901642]
[115.91135406 125.98229218]
[109.82414246 128.83984375]
[103.25835419 130.29246521]
[96.53383636 130.26939392]
[89.97817230 128.77175903]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 52]
[3 51]
[4 48]
[5 47]
[6 46]
[7 45]
[10 42]
[11 41]
[12 40]
[13 39]
[14 38]
[19 34]
[20 33]
[21 32]
[24 31]
[25 30]
[55 125]
[56 124]
[57 123]
[58 122]
[59 121]
[61 120]
[62 119]
[63 118]
[64 117]
[65 116]
[72 108]
[73 107]
[74 106]
[75 105]
[76 88]
[77 87]
[78 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
