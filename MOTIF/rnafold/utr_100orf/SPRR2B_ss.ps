%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:30:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCUGGUACUCGAGCACCGAUCUGCUUUGGAGAAACUGGUUAAUCCUGAGACUCCAGCAGGAUGUCUUAUCAACAGCAGCAGUGCAAGCAGCCCUGCCAGCCACCUCCUGUGUGCCCCACGCCAAAGUGCCCAGAGCCAUGUCCACCCCCGAAGUGCCCUG\
) } def
/len { sequence length } bind def

/coor [
[90.94037628 545.88238525]
[75.60684204 545.00024414]
[62.77750397 536.55609131]
[55.90339661 522.82135010]
[56.83361435 507.49066162]
[65.31793976 494.68786621]
[79.07412720 487.85684204]
[79.93567657 472.88162231]
[80.79722595 457.90637207]
[81.65877533 442.93112183]
[82.52031708 427.95590210]
[83.38186646 412.98065186]
[84.09994507 397.99786377]
[84.67448425 383.00885010]
[71.07523346 376.84530640]
[60.84410858 365.91510010]
[55.56290817 351.86254883]
[56.06555939 336.81811523]
[62.30658722 323.07537842]
[73.36331177 312.74133301]
[87.57212067 307.41354370]
[88.14665985 292.42456055]
[88.72119904 277.43557739]
[76.78181458 265.62103271]
[77.06433105 248.48944092]
[89.88127136 236.61654663]
[90.16859436 221.61929321]
[90.45591736 206.62205505]
[90.74324036 191.62480164]
[91.03056335 176.62754822]
[91.31788635 161.63031006]
[91.60520935 146.63305664]
[81.45757294 145.36221313]
[71.49796295 141.84365845]
[62.23076248 136.10702515]
[54.15451431 128.29605103]
[47.73598099 118.66702271]
[43.38474274 107.58135223]
[41.42959213 95.49234772]
[42.09806824 82.92682648]
[27.19703865 81.20657349]
[13.78391838 90.00815582]
[-1.41486228 84.87233734]
[-6.74010086 69.73888397]
[1.89326990 56.21688843]
[17.86246681 54.67926025]
[28.91728973 66.30554199]
[43.81832123 68.02579498]
[49.95434952 54.33824158]
[38.75605011 44.35835648]
[27.55775452 34.37847137]
[16.35945511 24.39858627]
[5.16115713 14.41870022]
[-6.03714132 4.43881464]
[-17.33051300 -5.43335724]
[-28.71792030 -15.19690990]
[-40.10532761 -24.96046257]
[-56.31496048 -27.44637299]
[-62.01397705 -42.82341003]
[-51.33971405 -55.27299500]
[-35.27294159 -51.98806381]
[-30.34177399 -36.34786987]
[-18.95436668 -26.58431625]
[-7.56695986 -16.82076454]
[-0.40877226 -14.84506226]
[3.94274426 -6.75948381]
[15.14104271 3.22040176]
[26.33934021 13.20028687]
[37.53763962 23.18017197]
[48.73593903 33.16005707]
[59.93423462 43.13994217]
[67.16613770 41.15258408]
[62.12331772 27.02565956]
[57.08049774 12.89873505]
[50.50845718 -0.58489567]
[60.36796951 -11.88932133]
[74.61969757 -7.21084452]
[75.86100769 7.73776150]
[78.74546814 22.45781136]
[81.62993622 37.17786026]
[88.86183929 35.19049835]
[93.38764954 20.88955307]
[97.91345978 6.58860683]
[102.43927002 -7.71233892]
[99.22634888 -23.20387650]
[110.44314575 -33.00350952]
[114.96895599 -47.30445480]
[108.88211060 -62.14796829]
[116.81769562 -76.09092712]
[132.68820190 -78.43747711]
[144.31915283 -67.38755798]
[142.78825378 -51.41771698]
[129.26989746 -42.77864456]
[124.74408722 -28.47769928]
[128.28073120 -14.00906181]
[116.74021149 -3.18653011]
[112.21440125 11.11441612]
[107.68859863 25.41536140]
[103.16278839 39.71630859]
[118.32604980 47.04263687]
[129.78804016 57.73108292]
[136.95735168 70.34753418]
[149.99536133 62.93063736]
[162.96173096 55.38920212]
[175.85527039 47.72392273]
[188.74882507 40.05864334]
[194.08042908 24.92743492]
[209.28138733 19.79802513]
[222.69079590 28.60525703]
[224.02210999 44.59297562]
[212.25407410 55.49677277]
[196.41409302 52.95218658]
[183.52055359 60.61746597]
[170.62701416 68.28274536]
[166.46504211 74.43263245]
[157.41226196 75.96864319]
[144.37425232 83.38554382]
[145.79135132 87.82353973]
[146.76579285 92.37924957]
[147.28811646 97.00863647]
[162.21937561 98.44314575]
[177.15061951 99.87765503]
[189.18246460 89.63019562]
[204.92941284 90.97521210]
[215.04908752 103.11472321]
[213.53765869 118.84657288]
[201.29183960 128.83734131]
[185.57684326 127.15966797]
[175.71611023 114.80889893]
[160.78486633 113.37438965]
[145.85360718 111.93988800]
[131.52488708 135.37365723]
[106.60245514 146.92037964]
[106.31513214 161.91763306]
[106.02780914 176.91487122]
[105.74048615 191.91212463]
[105.45316315 206.90937805]
[105.16584015 221.90661621]
[104.87851715 236.90386963]
[115.29153442 245.49082947]
[118.79201508 258.32403564]
[114.31430817 270.64263916]
[103.71019745 278.01010132]
[103.13565063 292.99911499]
[102.56111145 307.98809814]
[116.32039642 314.38793945]
[126.55361176 325.53799438]
[131.72433472 339.71817017]
[131.07386780 354.75695801]
[124.73245239 368.36398315]
[113.69464874 378.47894287]
[99.66348267 383.58340454]
[99.08893585 398.57238770]
[101.89728546 407.31457520]
[98.35710907 413.84219360]
[97.49555969 428.81744385]
[96.63401031 443.79269409]
[95.77246094 458.76791382]
[94.91091156 473.74316406]
[94.04936218 488.71838379]
[106.93138885 497.08193970]
[113.89146423 510.77328491]
[113.05736542 526.10949707]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 160]
[8 159]
[9 158]
[10 157]
[11 156]
[12 155]
[13 153]
[14 152]
[21 145]
[22 144]
[23 143]
[26 139]
[27 138]
[28 137]
[29 136]
[30 135]
[31 134]
[32 133]
[40 48]
[41 47]
[49 71]
[50 70]
[51 69]
[52 68]
[53 67]
[54 66]
[55 64]
[56 63]
[57 62]
[81 99]
[82 98]
[83 97]
[84 96]
[86 94]
[87 93]
[102 117]
[103 116]
[104 114]
[105 113]
[106 112]
[120 131]
[121 130]
[122 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
