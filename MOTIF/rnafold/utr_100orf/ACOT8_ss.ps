%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUACUAGGGCAAUCUGCCGGAAGAGUCAGGUUCUGUGUAUGUCUCCGCGUCUUCCGCGGAGCGGGUGUGCAGGGCCUGCAGCAUUGAACUAGAUGUCGUCCCCGCAGGCCCCAGAAGAUGGGCAGGGCUGUGGCGACCGCGGCGAUCCCCCUGGGGACCUCCGUAGCGUCUUGGUCACGACCGUGCUCAACC\
) } def
/len { sequence length } bind def

/coor [
[250.20837402 373.23330688]
[242.60397339 360.30377197]
[234.99958801 347.37420654]
[220.56234741 343.89544678]
[212.66621399 330.89138794]
[216.41294861 315.77188110]
[208.80854797 302.84231567]
[201.20414734 289.91278076]
[193.59974670 276.98324585]
[185.99534607 264.05368042]
[178.39096069 251.12414551]
[163.95372009 247.64538574]
[156.05758667 234.64132690]
[159.80432129 219.52180481]
[152.19992065 206.59225464]
[144.59552002 193.66271973]
[138.48648071 189.48536682]
[136.97468567 180.46305847]
[129.57957458 167.41267395]
[122.18446350 154.36230469]
[114.78934479 141.31193542]
[104.50141907 143.64788818]
[93.95327759 143.46075439]
[83.75467682 140.76138306]
[74.49514008 135.70578003]
[66.70991516 128.58619690]
[60.84902954 119.81417847]
[57.25127411 109.89680481]
[56.12461853 99.40734100]
[41.38132858 96.64411163]
[26.63804245 93.88088226]
[11.89475250 91.11765289]
[-2.84853601 88.35442352]
[-17.59182549 85.59119415]
[-32.33511353 82.82796478]
[-47.07840347 80.06473541]
[-61.82168961 77.30150604]
[-76.56497955 74.53827667]
[-91.30826569 71.77504730]
[-106.05155945 69.01181793]
[-120.79484558 66.24859619]
[-135.53813171 63.48536301]
[-149.78413391 73.62674713]
[-166.62675476 70.39745331]
[-175.74499512 56.27320480]
[-190.53088379 53.74784851]
[-205.31678772 51.22249222]
[-220.10267639 48.69713593]
[-234.88856506 46.17177963]
[-249.67445374 43.64642715]
[-264.46035767 41.12107086]
[-278.33078003 49.18272400]
[-293.22888184 43.23068619]
[-297.72604370 27.83085060]
[-288.37249756 14.79665375]
[-272.34341431 14.12681580]
[-261.93499756 26.33517838]
[-247.14909363 28.86053467]
[-232.36320496 31.38588905]
[-217.57731628 33.91124725]
[-202.79142761 36.43659973]
[-188.00553894 38.96195602]
[-173.21963501 41.48731232]
[-163.84300232 32.63813400]
[-150.88768005 30.78171349]
[-139.05644226 36.81847763]
[-132.77490234 48.74207306]
[-118.03161621 51.50530243]
[-103.28833008 54.26853180]
[-88.54503632 57.03176117]
[-73.80175018 59.79499054]
[-59.05846405 62.55821991]
[-44.31517410 65.32144928]
[-29.57188416 68.08467865]
[-14.82859612 70.84790802]
[-0.08530701 73.61113739]
[14.65798187 76.37436676]
[29.40126991 79.13759613]
[44.14455795 81.90082550]
[58.88784790 84.66405487]
[64.52323151 74.17754364]
[72.76998138 65.59176636]
[83.02107239 59.53870773]
[79.66642761 44.91864014]
[76.31179047 30.29857063]
[72.95715332 15.67850304]
[69.60250854 1.05843472]
[56.07955170 -7.12112331]
[52.38237381 -22.48687935]
[60.70444870 -35.92259979]
[76.10843658 -39.45711517]
[89.45542145 -30.99345589]
[92.82687378 -15.55296230]
[84.22257996 -2.29620576]
[87.57721710 12.32386208]
[90.93185425 26.94392967]
[94.28649902 41.56399918]
[97.64113617 56.18406677]
[110.50102234 57.39567184]
[122.45095062 62.29913330]
[132.21562195 50.91268539]
[141.98028564 39.52623749]
[145.09054565 24.01376343]
[159.24906921 19.38934708]
[169.01374817 8.00289917]
[178.77841187 -3.38354897]
[188.54309082 -14.76999664]
[198.30775452 -26.15644455]
[208.07243347 -37.54289246]
[211.18267822 -53.05537033]
[225.34121704 -57.67978287]
[235.10588074 -69.06623077]
[244.59255981 -80.68531036]
[253.79571533 -92.53022003]
[262.99887085 -104.37513733]
[262.43566895 -120.40830231]
[274.71301270 -130.73529053]
[290.41275024 -127.43410492]
[297.49139404 -113.03715515]
[290.51882935 -98.58853149]
[274.84378052 -95.17198944]
[265.64062500 -83.32707214]
[256.43746948 -71.48215485]
[256.51742554 -67.94452667]
[254.87951660 -64.19324493]
[251.44247437 -61.03994370]
[246.49232483 -59.30155945]
[236.72766113 -47.91511154]
[234.31584167 -33.21707153]
[219.45887756 -27.77822304]
[209.69419861 -16.39177322]
[199.92953491 -5.00532579]
[190.16487122 6.38112211]
[180.40019226 17.76757050]
[170.63552856 29.15401840]
[168.22370911 43.85205841]
[153.36674500 49.29090881]
[143.60206604 60.67735672]
[133.83740234 72.06380463]
[143.27902222 92.76632690]
[141.08296204 115.41397095]
[127.83972168 133.91680908]
[135.23483276 146.96719360]
[142.62994385 160.01756287]
[150.02507019 173.06793213]
[157.52507019 186.05831909]
[165.12947083 198.98786926]
[172.73385620 211.91740417]
[187.76867676 215.99072266]
[195.29643250 229.21144104]
[191.32049561 243.51974487]
[198.92489624 256.44927979]
[206.52929688 269.37884521]
[214.13369751 282.30838013]
[221.73809814 295.23791504]
[229.34248352 308.16748047]
[244.37730408 312.24078369]
[251.90505981 325.46151733]
[247.92912292 339.76980591]
[255.53352356 352.69937134]
[263.13790894 365.62890625]
[283.09707642 366.48815918]
[298.38812256 379.11978149]
[302.93313599 398.27777100]
[295.06161499 416.16839600]
[303.48284912 428.58139038]
[311.90411377 440.99438477]
[327.17004395 444.09103394]
[335.53356934 456.79953003]
[332.48730469 471.33419800]
[340.90856934 483.74719238]
[349.32980347 496.16018677]
[364.84259033 496.52545166]
[377.15753174 505.96591187]
[381.53927612 520.85144043]
[376.30297852 535.45831299]
[363.46209717 544.16986084]
[347.95419312 543.63635254]
[335.74240112 534.06286621]
[331.52236938 519.13067627]
[336.91680908 504.58145142]
[328.49557495 492.16842651]
[320.07431030 479.75543213]
[305.44302368 477.21365356]
[296.72583008 464.74505615]
[299.49111938 449.41564941]
[291.06985474 437.00265503]
[282.64862061 424.58966064]
[272.46279907 426.54272461]
[262.17065430 424.98324585]
[252.95314026 420.06436157]
[245.87643433 412.32617188]
[241.76875305 402.63647461]
[241.12338257 392.09353638]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 161]
[2 160]
[3 159]
[6 156]
[7 155]
[8 154]
[9 153]
[10 152]
[11 151]
[14 148]
[15 147]
[16 146]
[18 145]
[19 144]
[20 143]
[21 142]
[29 80]
[30 79]
[31 78]
[32 77]
[33 76]
[34 75]
[35 74]
[36 73]
[37 72]
[38 71]
[39 70]
[40 69]
[41 68]
[42 67]
[45 63]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
[83 98]
[84 97]
[85 96]
[86 95]
[87 94]
[100 139]
[101 138]
[102 137]
[104 135]
[105 134]
[106 133]
[107 132]
[108 131]
[109 130]
[111 128]
[112 127]
[113 123]
[114 122]
[115 121]
[165 188]
[166 187]
[167 186]
[170 183]
[171 182]
[172 181]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
