%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:25:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGGAGGGCUCUCCUCCGGUGUGGAGGCAUCAUGGCCGCUAAAUCAGACGGGAGGCUGAAAAUGAAGAAAAGCAGCGACGUGGCGUUCACCCCGCUGCAGAACUCGGACCACUCGGGCUCGGUGCAGGGAU\
) } def
/len { sequence length } bind def

/coor [
[104.41387939 145.25198364]
[105.86539459 130.32269287]
[106.16030884 115.32559204]
[98.86856842 117.08073425]
[91.41976929 130.10054016]
[83.97097015 143.12034607]
[76.52216339 156.14015198]
[69.07336426 169.15995789]
[71.88223267 184.95521545]
[61.17656326 196.90377808]
[45.16883469 195.83973694]
[36.13880157 182.57934570]
[41.01353836 167.29483032]
[56.05355835 161.71116638]
[63.50236130 148.69136047]
[70.95116425 135.67155457]
[78.39996338 122.65174103]
[85.84876251 109.63193512]
[86.20304108 94.63612366]
[79.37740326 81.27907562]
[66.20790863 72.51123810]
[67.30628967 57.65718842]
[60.48065567 44.30014420]
[53.65501785 30.94309616]
[46.82938004 17.58605194]
[40.00374222 4.22900534]
[26.83424568 -4.53882933]
[27.93262672 -19.39287949]
[21.10698891 -32.74992752]
[15.64947510 -36.74984360]
[13.43714619 -42.11539459]
[14.29129887 -46.90285492]
[8.10405540 -60.56733322]
[1.91681230 -74.23181152]
[-4.27043104 -87.89629364]
[-10.77868748 -101.41082764]
[-17.60432434 -114.76787567]
[-30.77382088 -123.53570557]
[-29.67543983 -138.38975525]
[-36.50107574 -151.74681091]
[-43.32671356 -165.10385132]
[-61.24118423 -167.32913208]
[-74.17212677 -179.70098877]
[-77.13439941 -197.19206238]
[-69.14010620 -212.85389709]
[-76.58890533 -225.87370300]
[-84.03770447 -238.89350891]
[-102.43518066 -243.09013367]
[-111.84870911 -259.07794189]
[-106.76939392 -276.59280396]
[-114.82473755 -289.24633789]
[-122.88008118 -301.89984131]
[-137.66589355 -308.99291992]
[-138.64607239 -325.36273193]
[-124.81228638 -334.16946411]
[-110.39554596 -326.35345459]
[-110.22656250 -309.95520020]
[-102.17121887 -297.30166626]
[-94.11587524 -284.64816284]
[-82.59574890 -284.63265991]
[-72.43010712 -278.96133423]
[-66.23885345 -268.96176147]
[-65.68237305 -257.09320068]
[-71.01789856 -246.34230042]
[-63.56909943 -233.32249451]
[-56.12029648 -220.30268860]
[-43.88287735 -220.78015137]
[-32.55164719 -215.94613647]
[-24.33110237 -206.67359924]
[-20.84932327 -194.70541382]
[-22.83581352 -182.32690430]
[-29.96966934 -171.92948914]
[-23.14403152 -158.57244873]
[-16.31839371 -145.21539307]
[-3.63711238 -137.40293884]
[-4.24727917 -121.59351349]
[2.57835841 -108.23646545]
[6.85389948 -105.91933441]
[9.66949177 -100.84429932]
[9.39404869 -94.08353424]
[15.58129215 -80.41905975]
[21.76853561 -66.75457764]
[27.95578003 -53.09009552]
[34.46403503 -39.57556534]
[41.28967285 -26.21851730]
[53.97095490 -18.40606880]
[53.36078644 -2.59663200]
[60.18642426 10.76041412]
[67.01206207 24.11746025]
[73.83769989 37.47450638]
[80.66333771 50.83155060]
[93.34461975 58.64400101]
[92.73445129 74.45343781]
[99.56008911 87.81048584]
[116.23274994 81.96886444]
[136.23974609 97.50265503]
[148.79724121 105.70687866]
[161.35473633 113.91109467]
[173.91224670 122.11531830]
[186.46974182 130.31954956]
[199.21749878 138.22488403]
[212.14843750 145.82693481]
[227.96632385 146.15087891]
[235.01672363 159.27113342]
[247.94764709 166.87316895]
[260.87857056 174.47521973]
[273.80950928 182.07727051]
[286.74044800 189.67932129]
[302.56774902 187.05718994]
[314.38903809 197.90322876]
[313.13604736 213.89727783]
[299.76992798 222.77006531]
[284.54403687 217.71516418]
[279.13839722 202.61024475]
[266.20745850 195.00819397]
[253.27653503 187.40614319]
[240.34561157 179.80410767]
[227.41467285 172.20205688]
[212.52169800 172.42185974]
[204.54638672 158.75785828]
[191.61546326 151.15580750]
[186.76440430 151.49722290]
[181.66384888 148.72811890]
[178.26551819 142.87704468]
[165.70802307 134.67282104]
[153.15052795 126.46859741]
[140.59301758 118.26437378]
[128.03552246 110.06015015]
[120.74378967 111.81529999]
[127.83071136 125.03556824]
[135.91674805 137.66949463]
[130.31626892 151.58476257]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 18]
[5 17]
[6 16]
[7 15]
[8 14]
[19 94]
[20 93]
[22 91]
[23 90]
[24 89]
[25 88]
[26 87]
[28 85]
[29 84]
[32 83]
[33 82]
[34 81]
[35 80]
[36 77]
[37 76]
[39 74]
[40 73]
[41 72]
[45 66]
[46 65]
[47 64]
[50 59]
[51 58]
[52 57]
[96 128]
[97 127]
[98 126]
[99 125]
[100 124]
[101 121]
[102 120]
[104 118]
[105 117]
[106 116]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
