%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:04:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGACCAAGAGCGGAAGUGGGUGUGACGGGGACGGGGGCCCGGUGGGCCCGCGGAGGAAAGAUACUGGGGAGUGGGAGCCGCGGGGUUCAGAGCGAUGAUUCCCCCACAGGAGGCAUCCGCUCGACGGCGGGAGAUUGAGGACAAGCUGAAGCAGGAGGAGGAGACUCUGUCCUUCAUCCGAGACAGCCUGGAGA\
) } def
/len { sequence length } bind def

/coor [
[417.83630371 365.82272339]
[408.60629272 350.71597290]
[403.94537354 333.62423706]
[404.22903442 315.89804077]
[409.44189453 298.94012451]
[396.74102783 290.95965576]
[380.52615356 295.40124512]
[365.82336426 286.57260132]
[361.97442627 269.51397705]
[349.14727783 261.73806763]
[336.32012939 253.96218872]
[323.49298096 246.18629456]
[310.66583252 238.41041565]
[297.83871460 230.63452148]
[285.01156616 222.85862732]
[270.11697388 222.87741089]
[262.32681274 209.10700989]
[249.49966431 201.33111572]
[234.58146667 208.16761780]
[218.36457825 204.73500061]
[207.27580261 192.19131470]
[205.82986450 175.34480286]
[192.87973022 167.77551270]
[179.92961121 160.20620728]
[166.97949219 152.63691711]
[162.20349121 152.96420288]
[157.17326355 150.28613281]
[153.74116516 144.61177063]
[141.04029846 136.63128662]
[128.33943176 128.65080261]
[115.63857269 120.67031860]
[102.93771362 112.68984222]
[88.19181824 109.94055176]
[73.46842957 112.80792999]
[61.40179443 123.04056549]
[47.43017578 117.87887573]
[32.70678711 120.74625397]
[17.98339844 123.61363983]
[3.26001191 126.48101807]
[-11.46337509 129.34838867]
[-26.18676186 132.21577454]
[-40.57799911 141.17840576]
[-53.17425156 129.83068848]
[-45.75699615 114.58533478]
[-29.05414200 117.49238586]
[-14.33075523 114.62500763]
[0.39263257 111.75762939]
[15.11602020 108.89025116]
[29.83940697 106.02287292]
[44.56279373 103.15548706]
[55.57631302 93.12794495]
[70.60105133 98.08454132]
[85.32444000 95.21716309]
[86.93469238 87.89205933]
[72.28449249 84.67155457]
[57.63429260 81.45104218]
[42.70591736 82.91513062]
[36.70053482 69.16975403]
[47.91752243 59.21088409]
[60.85480118 66.80084991]
[75.50499725 70.02135468]
[90.15519714 73.24185944]
[91.76545715 65.91676331]
[79.60199738 57.13893127]
[67.43853760 48.36109924]
[55.27508545 39.58326721]
[38.91440964 38.46058655]
[31.95036697 23.61356163]
[41.54696274 10.31554127]
[57.83204651 12.24638748]
[64.05291748 27.41981125]
[76.21636963 36.19764328]
[88.37982941 44.97547531]
[100.54328918 53.75330734]
[106.17547607 48.80068588]
[123.07203674 33.94282150]
[115.92169952 20.75674438]
[108.77136230 7.57066488]
[101.62102509 -5.61541414]
[94.47068787 -18.80149269]
[80.21734619 -26.91162491]
[80.38484192 -43.30991745]
[94.80087280 -51.12721252]
[108.63545990 -42.32174683]
[107.65676880 -25.95182991]
[114.80710602 -12.76575184]
[121.95744324 0.42032734]
[129.10777283 13.60640621]
[136.25811768 26.79248428]
[136.30485535 11.79255772]
[151.05433655 14.52249527]
[164.09194946 21.94009781]
[173.97456360 33.22432709]
[179.60830688 47.12615967]
[180.36959839 62.10682678]
[176.17416382 76.50815582]
[167.48637390 88.73609924]
[155.26788330 97.43716431]
[140.87112427 101.64824677]
[125.89029694 100.90338898]
[110.91819000 99.98897552]
[123.61905670 107.96945953]
[136.31991577 115.94993591]
[149.02078247 123.93041992]
[161.72164917 131.91090393]
[174.54878235 139.68678284]
[187.49891663 147.25608826]
[200.44903564 154.82539368]
[213.39915466 162.39468384]
[225.58067322 155.92971802]
[239.25733948 156.32812500]
[250.85676575 163.37879944]
[257.40203857 175.14695740]
[257.27557373 188.50396729]
[270.10269165 196.27986145]
[285.91476440 196.81727600]
[292.78744507 210.03149414]
[305.61459351 217.80737305]
[318.44174194 225.58326721]
[331.26889038 233.35916138]
[344.09600830 241.13504028]
[356.92315674 248.91093445]
[369.75030518 256.68682861]
[382.38323975 251.99380493]
[395.22406006 255.38786316]
[403.63778687 265.41195679]
[404.72152710 278.25878906]
[417.42239380 286.23925781]
[426.24575806 277.35470581]
[436.64535522 270.39141846]
[448.21005249 265.62179565]
[460.48318481 263.23168945]
[472.98071289 263.31295776]
[485.21017456 265.86010742]
[496.69006348 270.77038574]
[506.96893311 277.84823608]
[515.64306641 286.81277466]
[522.37237549 297.30908203]
[526.89349365 308.92233276]
[529.03063965 321.19396973]
[528.70172119 333.64007568]
[525.92211914 345.77020264]
[520.80371094 357.10684204]
[532.82489014 366.07852173]
[548.51226807 368.13177490]
[554.08435059 381.94485474]
[566.10552979 390.91650391]
[578.12677002 399.88818359]
[590.14794922 408.85983276]
[602.70098877 402.67330933]
[616.62847900 402.50244141]
[629.20941162 408.32354736]
[638.01037598 418.94787598]
[641.35638428 432.26388550]
[638.64916992 445.65676880]
[650.52502441 454.81994629]
[662.40087891 463.98312378]
[674.34979248 473.05084229]
[686.37103271 482.02249146]
[698.39221191 490.99417114]
[710.41345215 499.96582031]
[722.43463135 508.93746948]
[734.45587158 517.90911865]
[749.63366699 514.14508057]
[763.65722656 521.06414795]
[769.90509033 535.39935303]
[765.42712402 550.38208008]
[752.33776855 558.93792725]
[736.81738281 557.02709961]
[726.19421387 545.55181885]
[725.48419189 529.93035889]
[713.46295166 520.95867920]
[701.44177246 511.98703003]
[689.42059326 503.01538086]
[677.39935303 494.04370117]
[665.37817383 485.07205200]
[658.12823486 483.58905029]
[653.23773193 475.85900879]
[641.36187744 466.69583130]
[629.48602295 457.53265381]
[614.70129395 464.03961182]
[598.55920410 462.19567871]
[585.47253418 452.40963745]
[579.06689453 437.27453613]
[581.17626953 420.88104248]
[569.15509033 411.90939331]
[557.13391113 402.93771362]
[545.11267090 393.96606445]
[530.28509521 392.55453491]
[523.85321045 378.09973145]
[511.83203125 369.12805176]
[498.02639771 380.08908081]
[481.70269775 386.77633667]
[464.14993286 388.65426636]
[446.75619507 385.56729126]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 128]
[6 127]
[9 123]
[10 122]
[11 121]
[12 120]
[13 119]
[14 118]
[15 117]
[17 115]
[18 114]
[22 109]
[23 108]
[24 107]
[25 106]
[28 105]
[29 104]
[30 103]
[31 102]
[32 101]
[33 53]
[34 52]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[41 45]
[63 74]
[64 73]
[65 72]
[66 71]
[76 89]
[77 88]
[78 87]
[79 86]
[80 85]
[143 191]
[144 190]
[146 188]
[147 187]
[148 186]
[149 185]
[155 180]
[156 179]
[157 178]
[158 176]
[159 175]
[160 174]
[161 173]
[162 172]
[163 171]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
