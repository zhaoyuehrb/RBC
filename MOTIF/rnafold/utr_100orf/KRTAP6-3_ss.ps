%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAGGAUGACCUCAACAACCAACACCAUGUGUGGCAGCUACUACAGAAACUACAAUGGUGGCCAUGGCUAUGGGUGCUGUGGCUACGGAGGCCUGGGCUGUGGUU\
) } def
/len { sequence length } bind def

/coor [
[124.42212677 141.05548096]
[109.42685699 141.43231201]
[99.03474426 130.61547852]
[100.01140594 115.64772034]
[92.83145142 128.81770325]
[85.65150452 141.98768616]
[86.59341431 158.35975647]
[72.73907471 167.13410950]
[58.34064484 159.28443909]
[58.20999527 142.88581848]
[72.48152924 134.80772400]
[79.66147614 121.63774872]
[86.84142303 108.46777344]
[78.88471222 121.18354034]
[65.79245758 128.50425720]
[50.79294205 128.62478638]
[37.58473969 121.51538849]
[29.42472649 108.92912292]
[28.32499123 93.96949005]
[34.55670929 80.32523346]
[46.58326340 71.36075592]
[61.43915558 69.28649902]
[75.46121979 74.61394501]
[85.19136810 86.02835846]
[76.16218567 74.05030060]
[67.13301086 62.07223892]
[58.10383224 50.09417725]
[49.07464981 38.11611938]
[40.04547119 26.13805771]
[32.25391388 21.06663895]
[30.93319893 13.67321777]
[22.25954437 1.43525529]
[13.58588982 -10.80270672]
[4.91223574 -23.04066849]
[-3.76141834 -35.27863312]
[-19.16299629 -35.59098816]
[-31.28574562 -44.80469131]
[-35.60749054 -59.21949387]
[-30.67159653 -73.24714661]
[-39.34525299 -85.48510742]
[-54.85498047 -89.58728790]
[-61.18577957 -104.32840729]
[-53.48120880 -118.40032959]
[-37.65154648 -121.00829315]
[-25.83996201 -110.15167999]
[-27.10728836 -94.15876007]
[-18.43363571 -81.92079926]
[-3.56292915 -81.93107605]
[8.60630417 -73.07817841]
[13.28388309 -58.58771133]
[8.47654438 -43.95228577]
[17.15019798 -31.71432304]
[25.82385254 -19.47636223]
[34.49750519 -7.23839903]
[43.17116165 4.99956322]
[52.02353287 17.10887909]
[61.05271149 29.08693886]
[70.08189392 41.06499863]
[79.11106873 53.04306030]
[88.14025116 65.02111816]
[97.16942596 76.99917603]
[123.20970154 91.32807159]
[137.93736267 94.17338562]
[152.66503906 97.01870728]
[167.39270020 99.86402893]
[182.12036133 102.70935059]
[196.84803772 105.55467224]
[211.57569885 108.39999390]
[226.30335999 111.24531555]
[241.03103638 114.09062958]
[252.23315430 107.49163818]
[264.52102661 110.27135468]
[271.34063721 120.38178253]
[285.97842407 123.65823364]
[300.61621094 126.93467712]
[315.25399780 130.21112061]
[324.47500610 129.02755737]
[330.27041626 133.80459595]
[344.80572510 137.50933838]
[360.08935547 133.42015076]
[370.51132202 144.06117249]
[385.04663086 147.76591492]
[400.67886353 142.80957031]
[412.60317993 154.06758118]
[408.55285645 169.95867920]
[392.69454956 174.13546753]
[381.34188843 162.30122375]
[366.80657959 158.59646606]
[352.56262207 162.95063782]
[341.10098267 152.04463196]
[326.56567383 148.33988953]
[311.97756958 144.84890747]
[297.33978271 141.57246399]
[282.70196533 138.29602051]
[268.06417847 135.01957703]
[251.71319580 141.20307922]
[238.18571472 128.81829834]
[223.45803833 125.97297668]
[208.73037720 123.12765503]
[194.00271606 120.28234100]
[179.27503967 117.43701935]
[164.54737854 114.59169769]
[149.81971741 111.74637604]
[135.09204102 108.90105438]
[120.36437988 106.05573273]
[132.53033447 114.83011627]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 13]
[5 12]
[6 11]
[24 61]
[25 60]
[26 59]
[27 58]
[28 57]
[29 56]
[31 55]
[32 54]
[33 53]
[34 52]
[35 51]
[39 47]
[40 46]
[62 105]
[63 104]
[64 103]
[65 102]
[66 101]
[67 100]
[68 99]
[69 98]
[70 97]
[73 95]
[74 94]
[75 93]
[76 92]
[78 91]
[79 90]
[81 88]
[82 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
