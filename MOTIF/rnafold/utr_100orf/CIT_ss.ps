%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:26:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCGGGGCGGAACAGAUCGCAGACCUGGGGGUUCGCAGAGCCGCCAGUGGGGAGAUGUUGAAGUUCAAAUAUGGAGCGCGGAAUCCUUUGGAUGCUGGUGCUGCUGAACCCAUUGCCAGCCGGGCCUCCAGGCUGAAUCUGUUCUUCCAGGGGA\
) } def
/len { sequence length } bind def

/coor [
[48.27064133 771.14465332]
[34.34801865 765.04309082]
[23.82376671 754.07458496]
[18.30275536 739.91174316]
[18.62689972 724.71423340]
[24.74677086 710.79968262]
[35.72912979 700.28985596]
[49.89925003 694.78747559]
[50.19938278 679.79046631]
[42.71828842 666.91094971]
[50.73016357 653.26831055]
[51.03029633 638.27136230]
[51.33042908 623.27435303]
[51.63056183 608.27734375]
[51.93069458 593.28033447]
[52.23082733 578.28332520]
[52.53095627 563.28637695]
[52.83108902 548.28936768]
[53.13122177 533.29235840]
[44.96313095 524.32250977]
[45.12432480 511.79043579]
[54.07548141 502.45318604]
[54.67562485 487.46520996]
[55.27576828 472.47720337]
[52.38481903 465.62957764]
[56.04084396 457.19619751]
[56.94076157 442.22323608]
[57.84067535 427.25024414]
[58.74059296 412.27725220]
[59.64050674 397.30429077]
[60.54042435 382.33129883]
[61.44034195 367.35833740]
[62.34025574 352.38534546]
[63.24017334 337.41235352]
[64.14009094 322.43939209]
[65.04000092 307.46640015]
[65.93991852 292.49340820]
[64.12473297 290.28778076]
[63.09925842 287.21041870]
[63.20755005 283.56793213]
[64.67282867 279.78833008]
[67.55806732 276.37414551]
[69.65226746 261.52105713]
[58.83208466 251.31999207]
[56.06069946 236.52867126]
[62.60692978 222.78092957]
[76.14956665 215.43905640]
[78.24376678 200.58596802]
[80.33797455 185.73287964]
[82.43217468 170.87977600]
[84.52637482 156.02668762]
[86.62057495 141.17359924]
[88.71477509 126.32051086]
[75.69858551 118.09133148]
[68.25351715 103.63946533]
[69.19532776 86.55059052]
[79.12523651 71.56959534]
[71.66860199 58.55427170]
[64.21196747 45.53895187]
[56.75533295 32.52363205]
[49.29869843 19.50830841]
[33.85818100 17.96881866]
[22.29384995 7.62252092]
[19.05242538 -7.55222130]
[25.38030434 -21.72040939]
[38.84428787 -29.43408775]
[54.26719666 -27.72718811]
[65.71860504 -17.25604820]
[68.79522705 -2.04703641]
[62.31401825 12.05167389]
[69.77065277 25.06699562]
[77.22728729 38.08231735]
[84.68392181 51.09763718]
[92.14056396 64.11296082]
[107.13980865 63.96288681]
[114.33453369 50.80097198]
[121.39720917 37.56773376]
[128.32713318 24.26449585]
[135.25706482 10.96125984]
[142.18698120 -2.34197760]
[149.11691284 -15.64521503]
[141.37075806 -30.65153313]
[144.04823303 -47.15758896]
[155.90333557 -58.71425629]
[172.14364624 -60.92533112]
[178.80599976 -74.36456299]
[185.46835327 -87.80379486]
[192.13070679 -101.24303436]
[193.74856567 -118.11961365]
[210.41346741 -121.23688507]
[218.02221680 -106.08620453]
[205.56994629 -94.58067322]
[198.90759277 -81.14144135]
[192.24523926 -67.70220947]
[185.58287048 -54.26297379]
[192.85679626 -43.03096771]
[193.62284851 -29.56268692]
[187.57299805 -17.38409996]
[176.19767761 -9.73678112]
[162.42015076 -8.71528816]
[155.49021912 4.58794928]
[148.56030273 17.89118576]
[141.63037109 31.19442368]
[134.70043945 44.49766159]
[134.39768982 51.92438507]
[127.49644470 57.99569321]
[120.30172729 71.15760803]
[131.49775696 88.26520538]
[131.00628662 107.72622681]
[120.10740662 122.66158295]
[103.56787109 128.41470337]
[101.47366333 143.26780701]
[99.37946320 158.12089539]
[97.28526306 172.97398376]
[95.19106293 187.82707214]
[93.09686279 202.68016052]
[91.00266266 217.53326416]
[101.98738098 228.33335876]
[104.47727966 243.35513306]
[97.72424316 256.80355835]
[84.50535583 263.61526489]
[82.41115570 278.46835327]
[80.91290283 293.39334106]
[80.01298523 308.36630249]
[79.11306763 323.33929443]
[78.21315002 338.31228638]
[77.31324005 353.28524780]
[76.41332245 368.25823975]
[75.51340485 383.23123169]
[74.61348724 398.20419312]
[73.71357727 413.17718506]
[72.81365967 428.15017700]
[71.91374207 443.12313843]
[71.01382446 458.09613037]
[70.26375580 473.07736206]
[69.66361237 488.06533813]
[69.06346893 503.05334473]
[78.00952148 519.11871338]
[68.12821960 533.59246826]
[67.82808685 548.58947754]
[67.52795410 563.58648682]
[67.22782135 578.58349609]
[66.92768860 593.58050537]
[66.62755585 608.57745361]
[66.32742310 623.57446289]
[66.02729797 638.57147217]
[65.72716522 653.56848145]
[73.18679047 667.52069092]
[65.19638062 680.09057617]
[64.89624786 695.08758545]
[78.83487701 701.15252686]
[89.38794708 712.09332275]
[94.94619751 726.24157715]
[94.66204071 741.43988037]
[88.57879639 755.37054443]
[77.62413025 765.90917969]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 150]
[9 149]
[11 147]
[12 146]
[13 145]
[14 144]
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[22 137]
[23 136]
[24 135]
[26 134]
[27 133]
[28 132]
[29 131]
[30 130]
[31 129]
[32 128]
[33 127]
[34 126]
[35 125]
[36 124]
[37 123]
[42 122]
[43 121]
[47 117]
[48 116]
[49 115]
[50 114]
[51 113]
[52 112]
[53 111]
[57 74]
[58 73]
[59 72]
[60 71]
[61 70]
[75 107]
[76 106]
[77 104]
[78 103]
[79 102]
[80 101]
[81 100]
[85 95]
[86 94]
[87 93]
[88 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
