%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:20:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGGGUCCUGCUUCCUCCUGGUCUUGUCGAUGAGGAUUUUUAGACCGUGGAGACUGCGCUGCCCUGCCCUGCACCUACCCUCACUCUCCGUGUUCUCACUAAGGUGGAAAUUGCCUUCCCUCACUACUG\
) } def
/len { sequence length } bind def

/coor [
[126.47895050 109.75425720]
[111.53176117 108.49670410]
[98.79911804 114.27351379]
[87.21068573 106.45049286]
[72.26349640 105.19293213]
[57.31629944 103.93537140]
[42.36911011 102.67781830]
[30.36181068 112.60064697]
[15.22114658 111.11237335]
[5.83524227 99.60410309]
[-9.11194992 98.34654236]
[-24.05914116 97.08898926]
[-34.22591782 108.66235352]
[-49.08433533 111.99113464]
[-62.89048004 106.00328064]
[-70.43309021 93.18739319]
[-85.38028717 91.92983246]
[-100.32747650 90.67227173]
[-115.27466583 89.41471863]
[-130.23587036 88.33647156]
[-145.20890808 87.43770599]
[-160.18196106 86.53893280]
[-175.15501404 85.64015961]
[-190.12806702 84.74138641]
[-205.10110474 83.84261322]
[-223.50929260 94.68370056]
[-240.41435242 82.93919373]
[-255.41328430 83.11905670]
[-270.41220093 83.29891205]
[-281.27200317 94.78108978]
[-297.07226562 95.13766479]
[-308.43899536 84.15708160]
[-308.62847900 68.35392761]
[-297.52835083 57.10393524]
[-281.72406006 57.08152390]
[-270.59207153 68.29998779]
[-255.59313965 68.12013245]
[-240.59422302 67.94027710]
[-235.40078735 60.52677155]
[-227.22854614 56.32269669]
[-217.90019226 56.41076660]
[-209.56471252 60.89969254]
[-204.20233154 68.86956787]
[-189.22929382 69.76833344]
[-174.25624084 70.66710663]
[-159.28318787 71.56587982]
[-144.31013489 72.46465302]
[-129.33709717 73.36342621]
[-122.40300751 70.59645844]
[-114.01711273 74.46752930]
[-99.06991577 75.72508240]
[-84.12272644 76.98264313]
[-69.17553711 78.24019623]
[-59.59761810 66.86471558]
[-44.98508072 63.26781845]
[-30.89171791 69.03240967]
[-22.80158424 82.14179230]
[-7.85439253 83.39935303]
[7.09279966 84.65690613]
[18.26961136 74.87864685]
[33.44610596 75.94105530]
[43.62666702 87.73062134]
[58.57385635 88.98818207]
[73.52104950 90.24574280]
[88.46823883 91.50329590]
[101.20088196 85.72648621]
[112.78931427 93.54950714]
[127.73650360 94.80706787]
[132.45680237 77.34843445]
[140.47944641 61.14447021]
[151.49679565 46.81283569]
[165.08708191 34.89946365]
[180.73057556 25.85776711]
[197.82942200 20.03138161]
[215.73056030 17.64109802]
[233.75059509 18.77649879]
[251.20193481 23.39260674]
[267.41897583 31.31165886]
[281.78359985 42.22995758]
[293.74853516 55.72950745]
[302.85845947 71.29402924]
[308.76708984 88.32868958]
[323.58520508 85.99993896]
[338.40332031 83.67118835]
[353.22146606 81.34243774]
[361.30740356 76.87858582]
[368.42245483 79.13994598]
[383.29214478 77.16719818]
[392.89575195 64.90308380]
[408.00387573 63.11425400]
[419.63662720 72.34540558]
[434.50634766 70.37265015]
[449.37606812 68.39990234]
[462.03948975 57.98023605]
[477.29782104 63.98983765]
[479.45458984 80.24654388]
[466.29110718 90.02684021]
[451.34881592 83.26960754]
[436.47909546 85.24236298]
[421.60940552 87.21511078]
[412.78604126 99.16015625]
[397.73416138 101.37263489]
[385.26492310 92.03690338]
[370.39520264 94.00965881]
[355.55020142 96.16056061]
[340.73208618 98.48931122]
[325.91397095 100.81806183]
[311.09582520 103.14681244]
[311.20074463 115.51544952]
[309.65054321 127.78871918]
[306.47262573 139.74610901]
[301.72363281 151.17271423]
[295.48846436 161.86312866]
[287.87869263 171.62509155]
[279.03067017 180.28297424]
[269.10302734 187.68095398]
[258.27377319 193.68576050]
[246.73721313 198.18916321]
[234.70040894 201.10983276]
[222.37947083 202.39486694]
[209.99565125 202.02073669]
[197.77140808 199.99371338]
[185.92639160 196.34973145]
[174.67347717 191.15383911]
[164.21499634 184.49893188]
[154.73905945 176.50419617]
[146.41615295 167.31283569]
[139.39610291 157.08969116]
[133.80540466 146.01811218]
[129.74485779 134.29675293]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 68]
[2 67]
[4 65]
[5 64]
[6 63]
[7 62]
[10 59]
[11 58]
[12 57]
[16 53]
[17 52]
[18 51]
[19 50]
[20 48]
[21 47]
[22 46]
[23 45]
[24 44]
[25 43]
[27 38]
[28 37]
[29 36]
[82 108]
[83 107]
[84 106]
[85 105]
[87 104]
[88 103]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
