%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:09:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUCGAUGAUGCUGGUGCCGCUGAGUCCCAGCGGGGCAAACAGACUCCGGCCCACUCCCUGGAGCAGCUGCGUAGGUUACCACUUCCGCCGCCACAGA\
) } def
/len { sequence length } bind def

/coor [
[84.40889740 128.87428284]
[72.05987549 117.20919037]
[67.19850922 100.93222046]
[52.50404358 97.92011261]
[37.80958176 94.90800476]
[23.11511993 91.89589691]
[8.42065811 88.88378906]
[1.75871849 90.68315125]
[-3.89796424 88.97679138]
[-7.08074236 85.20046234]
[-21.55951691 81.28063202]
[-35.15277100 88.88729095]
[-49.78046799 84.70577240]
[-56.94848251 71.69979858]
[-71.42726135 67.77997589]
[-85.90603638 63.86014557]
[-100.55187225 60.61987686]
[-115.33290863 58.06622314]
[-130.24885559 63.34118652]
[-141.47309875 53.55009842]
[-156.25413513 50.99644470]
[-171.03515625 48.44279099]
[-185.81619263 45.88913727]
[-200.59722900 43.33548355]
[-215.37825012 40.78182983]
[-229.26409912 48.81691742]
[-244.15077209 42.83637619]
[-248.61846924 27.42795944]
[-239.23995972 14.41169167]
[-223.20964050 13.77253723]
[-212.82460022 26.00080109]
[-198.04356384 28.55445480]
[-183.26254272 31.10810661]
[-168.48150635 33.66176224]
[-153.70048523 36.21541214]
[-138.91944885 38.76906586]
[-125.06074524 33.31145096]
[-112.77925110 43.28519440]
[-97.99822235 45.83884811]
[-94.81446075 43.96302414]
[-90.51873779 43.64462280]
[-85.90663910 45.40927505]
[-81.98620605 49.38137054]
[-67.50743103 53.30119705]
[-53.02865219 57.22102737]
[-40.27834702 49.60753250]
[-25.53897095 53.37654114]
[-17.63968849 66.80185699]
[-3.16091347 70.72168732]
[11.43276501 74.18933105]
[26.12722588 77.20143890]
[40.82168961 80.21353912]
[55.51615143 83.22564697]
[70.21060944 86.23775482]
[77.72315979 75.90541077]
[88.61186981 69.22472382]
[101.22650909 67.20819092]
[113.65527344 70.16142273]
[124.01450348 77.63684845]
[130.73420715 88.50151825]
[132.79598999 101.10884094]
[147.27478027 105.02867126]
[161.75355530 108.94850159]
[175.34680176 101.34184265]
[189.97450256 105.52336121]
[197.14251709 118.52932739]
[211.62129211 122.44915771]
[219.35580444 116.52149963]
[228.83174133 114.94996643]
[237.80152893 117.97454071]
[244.19969177 124.76053619]
[246.61825562 133.62374878]
[260.66879272 138.87564087]
[274.71932983 144.12754822]
[290.35501099 141.71180725]
[299.56765747 153.41549683]
[313.61819458 158.66740417]
[327.66873169 163.91929626]
[341.71926880 169.17118835]
[357.79510498 165.93096924]
[368.43469238 178.41020203]
[362.69293213 193.77133179]
[346.47644043 196.21212769]
[336.46737671 183.22172546]
[322.41683960 177.96983337]
[308.36630249 172.71794128]
[294.31576538 167.46603394]
[279.68505859 170.25743103]
[269.46743774 158.17808533]
[255.41690063 152.92617798]
[241.36636353 147.67428589]
[221.56134033 153.11265564]
[207.70146179 136.92793274]
[193.22268677 133.00810242]
[180.47238159 140.62159729]
[165.73300171 136.85258484]
[157.83372498 123.42727661]
[143.35494995 119.50744629]
[128.87617493 115.58761597]
[117.21256256 127.93804932]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 54]
[4 53]
[5 52]
[6 51]
[7 50]
[10 49]
[11 48]
[14 45]
[15 44]
[16 43]
[17 39]
[18 38]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[61 99]
[62 98]
[63 97]
[66 94]
[67 93]
[72 91]
[73 90]
[74 89]
[76 87]
[77 86]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
