%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGUCGGCGGCCGCGCGCAGCACGCUCAAGGCCGGGAUGGCGGCGGCGGCGGCGGCAGGAAGCGGGACGCCCCGAGAGGAGGAGGGACCUGCUGGGGAGGCAGCGGCCUCGCAGCCCCAGGCCCCAACGAGUGUGC\
) } def
/len { sequence length } bind def

/coor [
[99.05198669 243.97509766]
[98.36927032 228.99063110]
[97.68654633 214.00617981]
[89.37799072 201.64425659]
[96.47916412 187.50622559]
[95.79644012 172.52177429]
[95.11372375 157.53732300]
[76.56037903 152.77313232]
[60.58636093 142.20170593]
[48.94947815 126.98634338]
[42.93026352 108.80136871]
[27.93415260 109.14281464]
[12.93803883 109.48426819]
[-2.05807471 109.82571411]
[-17.05418777 110.16716003]
[-25.64782333 113.51469421]
[-32.39466476 110.34178162]
[-47.39466476 110.34178162]
[-62.39466476 110.34178162]
[-76.19483948 118.07908630]
[-88.92211151 110.34178162]
[-103.92211151 110.34178162]
[-112.58971405 113.49283600]
[-119.26258850 110.16716003]
[-134.25869751 109.82571411]
[-149.25480652 109.48426819]
[-164.25093079 109.14281464]
[-168.14477539 111.47732544]
[-172.17253113 112.31050873]
[-175.82899475 111.79301453]
[-178.71475220 110.22898102]
[-180.57821655 108.02600098]
[-195.48114014 106.32229614]
[-210.38407898 104.61859894]
[-223.78741455 113.43506622]
[-238.99188232 108.31613159]
[-244.33392334 93.18859863]
[-235.71557617 79.65702057]
[-219.74809265 78.10166168]
[-208.68037415 89.71566010]
[-193.77743530 91.41936493]
[-178.87451172 93.12306976]
[-163.90946960 94.14670563]
[-148.91336060 94.48815155]
[-133.91725159 94.82959747]
[-118.92113495 95.17105103]
[-103.92211151 95.34178162]
[-88.92211151 95.34178162]
[-76.19483948 87.60448456]
[-62.39466476 95.34178162]
[-47.39466476 95.34178162]
[-32.39466476 95.34178162]
[-17.39563560 95.17105103]
[-2.39952254 94.82959747]
[12.59659100 94.48815155]
[27.59270477 94.14670563]
[42.58881760 93.80525970]
[44.85472870 82.87055969]
[49.18298721 72.57646942]
[55.41172028 63.30798340]
[63.30798340 55.41172028]
[72.57646942 49.18298721]
[82.87055969 44.85472870]
[93.80525970 42.58881760]
[94.14670563 27.59270477]
[94.48815155 12.59659100]
[94.82959747 -2.39952254]
[86.48509216 -16.51693153]
[94.77347565 -30.66736221]
[111.16838074 -30.29406548]
[118.80412292 -15.78105640]
[109.82571411 -2.05807471]
[109.48426819 12.93803883]
[109.14281464 27.93415260]
[108.80136871 42.93026352]
[116.56054688 44.68122482]
[124.00549316 47.48186111]
[130.99493408 51.27902985]
[137.39624023 56.00067902]
[143.08795166 61.55722046]
[147.96206665 67.84320831]
[151.92610168 74.73937988]
[154.90483093 82.11486816]
[156.84175110 89.82973480]
[157.70008850 97.73757935]
[172.63793945 99.10160065]
[187.57579041 100.46562195]
[202.02238464 94.01529694]
[213.99333191 102.87789154]
[228.93118286 104.24191284]
[243.86903381 105.60593414]
[258.84475708 106.45916748]
[273.84085083 106.80062103]
[288.83697510 107.14206696]
[303.83309937 107.48351288]
[313.73120117 99.12628937]
[326.26708984 99.76919556]
[334.69958496 108.51708984]
[349.68405151 109.19980621]
[364.66848755 109.88252258]
[379.65295410 110.56524658]
[394.63742065 111.24796295]
[408.94110107 103.22697449]
[422.89920044 111.83531952]
[422.15280151 128.21746826]
[407.46972656 135.52087402]
[393.95468140 126.23242188]
[378.97024536 125.54969788]
[363.98577881 124.86698151]
[349.00131226 124.18426514]
[334.01687622 123.50154114]
[318.94531250 132.41931152]
[303.49163818 122.47962952]
[288.49551392 122.13817596]
[273.49942017 121.79673004]
[258.50329590 121.45528412]
[255.67402649 123.69348907]
[251.59153748 124.62496948]
[246.90469360 123.66303253]
[242.50502014 120.54379272]
[227.56715393 119.17976379]
[212.62930298 117.81574249]
[199.25117493 124.36363220]
[186.21177673 115.40347290]
[171.27391052 114.03945160]
[156.33605957 112.67543030]
[147.24572754 133.20030212]
[131.01551819 148.70787048]
[110.09818268 156.85459900]
[110.78089905 171.83905029]
[111.46361542 186.82351685]
[119.82100677 200.25721741]
[112.67100525 213.32345581]
[113.35372162 228.30792236]
[114.03643799 243.29237366]
[120.79742432 258.83990479]
[107.72913361 269.64065552]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 135]
[2 134]
[3 133]
[5 131]
[6 130]
[7 129]
[11 57]
[12 56]
[13 55]
[14 54]
[15 53]
[17 52]
[18 51]
[19 50]
[21 48]
[22 47]
[24 46]
[25 45]
[26 44]
[27 43]
[32 42]
[33 41]
[34 40]
[64 75]
[65 74]
[66 73]
[67 72]
[85 126]
[86 125]
[87 124]
[89 122]
[90 121]
[91 120]
[92 116]
[93 115]
[94 114]
[95 113]
[98 111]
[99 110]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
