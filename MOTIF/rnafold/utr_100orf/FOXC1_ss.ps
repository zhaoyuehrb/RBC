%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:13:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCAGGCGCGCUACUCCGUGUCCAGCCCCAACUCCCUGGGAGUGGUGCCCUACCUCGGCGGCGAGCAGAGCUACUACCGCGCGGCGGCCGCGGCGGCCG\
) } def
/len { sequence length } bind def

/coor [
[96.98130035 132.52961731]
[86.28752899 128.60699463]
[77.89051056 121.41156769]
[72.69893646 112.02571869]
[71.16619110 101.74552155]
[56.47172928 98.73341370]
[41.77726364 95.72130585]
[32.55939865 97.07171631]
[26.67588615 92.38025665]
[12.08220768 88.91261292]
[-2.51147079 85.44496918]
[-17.10514832 81.97732544]
[-31.69882774 78.50968170]
[-46.29250336 75.04203033]
[-60.88618469 71.57438660]
[-75.47985840 68.10674286]
[-90.07353973 64.63909912]
[-104.66721344 61.17145538]
[-111.97979736 74.37860107]
[-122.58526611 85.12227631]
[-135.69664001 92.60521698]
[-150.34097290 96.27214813]
[-165.43153381 95.85095978]
[-179.84852600 91.37290192]
[-192.52209473 83.17027283]
[-202.51179504 71.85176849]
[-209.07630920 58.25729752]
[-211.72851562 43.39565659]
[-210.27160645 28.36968040]
[-204.81369019 14.29439545]
[-195.75976562 2.21427965]
[-183.78172302 -6.97424030]
[-169.76838684 -12.58931541]
[-154.75965881 -14.21427059]
[-139.86926270 -11.72852325]
[-126.20219421 -5.31653070]
[-114.77262115 4.54589272]
[-106.42869568 17.12689018]
[-101.78959656 31.49286842]
[-101.19956970 46.57777786]
[-86.60589600 50.04542160]
[-72.01221466 53.51306534]
[-57.41853714 56.98071289]
[-42.82485962 60.44835663]
[-28.23118210 63.91600037]
[-13.63750362 67.38364410]
[0.95617408 70.85128784]
[15.54985237 74.31893158]
[30.14352989 77.78658295]
[44.78937149 81.02684784]
[59.48383331 84.03895569]
[74.17829895 87.05105591]
[85.77088165 73.24305725]
[104.06393433 68.53768921]
[122.48582458 75.65261078]
[133.81648254 92.86602783]
[148.02354431 88.05364227]
[162.23062134 83.24124908]
[176.36114502 78.20850372]
[190.41166687 72.95660400]
[204.46220398 67.70471191]
[218.51274109 62.45281219]
[225.54714966 45.01373291]
[242.73468018 38.19726181]
[259.23825073 45.81146622]
[272.93511963 39.69621277]
[286.63195801 33.58095551]
[298.63003540 21.60254860]
[313.46173096 29.81579208]
[309.67529297 46.34150314]
[292.74722290 47.27780533]
[279.05035400 53.39305878]
[265.35351562 59.50831223]
[263.62377930 70.99384308]
[256.42578125 80.26335907]
[245.50355530 84.87804413]
[233.59922791 83.55096436]
[223.76464844 76.50334930]
[209.71411133 81.75524139]
[195.66357422 87.00714111]
[181.61303711 92.25904083]
[176.35720825 97.64436340]
[167.04301453 97.44832611]
[152.83593750 102.26071167]
[138.62886047 107.07309723]
[133.15908813 121.04026031]
[140.31988525 134.22065735]
[147.48068237 147.40106201]
[154.64147949 160.58146667]
[161.80227661 173.76185608]
[168.96307373 186.94226074]
[181.83734131 197.97357178]
[174.80110168 213.39846802]
[158.03118896 210.90724182]
[155.78268433 194.10305786]
[148.62188721 180.92266846]
[141.46109009 167.74226379]
[134.30029297 154.56185913]
[127.13948822 141.38145447]
[119.97869110 128.20106506]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 52]
[6 51]
[7 50]
[9 49]
[10 48]
[11 47]
[12 46]
[13 45]
[14 44]
[15 43]
[16 42]
[17 41]
[18 40]
[56 85]
[57 84]
[58 83]
[59 81]
[60 80]
[61 79]
[62 78]
[65 73]
[66 72]
[67 71]
[86 100]
[87 99]
[88 98]
[89 97]
[90 96]
[91 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
