%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:29:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGAACAAAGAGGCGGGAACCCCUCCACCCAUUCCAUCCAGGGAGGGGCGGCUCCAGCCGACGCUGUUGCUGGCGACACUGAGCGCGGCCUUUGGCU\
) } def
/len { sequence length } bind def

/coor [
[95.64693451 274.43276978]
[82.20719910 281.44342041]
[67.17978668 283.43154907]
[52.37932968 280.15707397]
[39.59305191 272.01541138]
[30.36495590 259.98968506]
[25.80938530 245.53205872]
[26.47644424 230.38839722]
[32.28558350 216.38732910]
[42.53532028 205.21957397]
[55.98794937 198.23368835]
[71.01900482 196.27325439]
[74.25926971 181.62741089]
[77.49953461 166.98158264]
[80.73980713 152.33573914]
[83.98007202 137.68989563]
[87.22033691 123.04405212]
[77.51057434 115.98508453]
[71.58976746 104.91790009]
[71.05709839 91.83014679]
[76.49105835 79.31282806]
[87.24301910 70.04734802]
[101.48270416 66.23527527]
[90.31474304 56.22145462]
[79.14678192 46.20763397]
[67.97882080 36.19381332]
[56.81085587 26.17998886]
[45.64289474 16.16616821]
[34.47493362 6.15234518]
[20.95783806 13.05543041]
[5.85944128 14.60553646]
[-8.77832413 10.59302521]
[-20.97582054 1.56055474]
[-29.08343697 -11.27030659]
[-32.00468445 -26.16428947]
[-29.34448624 -41.10710907]
[-21.46261597 -54.07786560]
[-9.42503071 -63.32237625]
[5.14028692 -67.59039307]
[20.26349640 -66.30470276]
[33.89930725 -59.63918686]
[44.20358658 -48.49529648]
[49.78276825 -34.38015747]
[49.88231277 -19.20272255]
[44.48875427 -5.01561642]
[55.65671921 4.99820566]
[66.82467651 15.01202774]
[77.99263763 25.02585030]
[89.16059875 35.03967285]
[100.32856750 45.05349350]
[111.49652863 55.06731796]
[126.49471283 54.83403778]
[137.34584045 44.47773743]
[148.19697571 34.12143707]
[159.04811096 23.76513863]
[159.58009338 8.19739056]
[170.73220825 -2.15079188]
[185.57038879 -1.54768932]
[196.42152405 -11.90398979]
[207.27265930 -22.26029015]
[218.12379456 -32.61658859]
[222.21479797 -48.49726105]
[238.08377075 -52.63341141]
[249.40606689 -40.77012634]
[244.53428650 -25.11133385]
[228.48008728 -21.76545906]
[217.62895203 -11.40915871]
[206.77783203 -1.05285871]
[195.92669678 9.30344200]
[195.83708191 24.15361214]
[184.98002625 34.81095123]
[169.40440369 34.61626816]
[158.55326843 44.97256851]
[147.70214844 55.32886887]
[136.85101318 65.68517303]
[139.40466309 80.46620178]
[153.10151672 86.58145142]
[166.79835510 92.69670868]
[180.17686462 84.83570862]
[195.61758423 86.37321472]
[207.18324280 96.71802521]
[210.42662048 111.89234924]
[204.10055542 126.06134796]
[190.63755798 133.77676392]
[175.21443176 132.07183838]
[163.76167297 121.60217285]
[160.68310547 106.39355469]
[146.98626709 100.27830505]
[133.28941345 94.16304779]
[123.69955444 118.51402283]
[101.86618042 126.28431702]
[98.62591553 140.93016052]
[95.38564301 155.57600403]
[92.14537811 170.22184753]
[88.90511322 184.86769104]
[85.66484070 199.51351929]
[98.46610260 207.63162231]
[107.71634674 219.64031982]
[112.29855347 234.08952332]
[111.65940094 249.23439026]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 96]
[13 95]
[14 94]
[15 93]
[16 92]
[17 91]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[52 75]
[53 74]
[54 73]
[55 72]
[58 69]
[59 68]
[60 67]
[61 66]
[76 89]
[77 88]
[78 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
