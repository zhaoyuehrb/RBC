%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:20:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCUAUAGCUAACGACACCCAGUUCCAUACUUCUUCAUUCCUACUGCUGGGUAUCCCAGGGCUAGAAGAUGUGCACAUCUGGAUUGGAUUCCCUUUUU\
) } def
/len { sequence length } bind def

/coor [
[70.66383362 128.01356506]
[66.32379913 121.93948364]
[63.20653152 115.23152924]
[61.39604187 108.13018036]
[60.93001938 100.88503265]
[61.79933167 93.74601746]
[63.94923019 86.95482635]
[67.28202820 80.73668671]
[56.11406708 70.72286224]
[44.94610596 60.70904160]
[33.77814484 50.69522095]
[22.61018181 40.68139648]
[6.21360016 44.47324753]
[-9.08684444 37.87068558]
[-17.41003990 23.62471008]
[-15.68351364 7.38208246]
[-27.15750122 -2.27957392]
[-42.69737625 -5.24989557]
[-47.44920731 -19.36617661]
[-58.92319489 -29.02783394]
[-70.39717865 -38.68948746]
[-81.87117004 -48.35114670]
[-93.34516144 -58.01280212]
[-104.81914520 -67.67446136]
[-116.29313660 -77.33611298]
[-128.66172791 -68.69432831]
[-142.84585571 -63.54914093]
[-157.87841797 -62.25136185]
[-172.73448181 -64.88947296]
[-186.40113831 -71.28361511]
[-197.94656372 -80.99780273]
[-206.58357239 -93.36972809]
[-211.72328186 -107.55583954]
[-213.01525879 -122.58891296]
[-210.37141418 -137.44395447]
[-203.97200012 -151.10813904]
[-194.25334167 -162.64982605]
[-181.87809753 -171.28205872]
[-167.69000244 -176.41629028]
[-152.65643311 -177.70245361]
[-137.80239868 -175.05287170]
[-124.14068604 -168.64817810]
[-112.60276794 -158.92507935]
[-103.97531128 -146.54647827]
[-98.84655762 -132.35641479]
[-97.56619263 -117.32234192]
[-100.22151947 -102.46933746]
[-106.63147736 -88.81010437]
[-95.15749359 -79.14844513]
[-83.68350220 -69.48678589]
[-72.20951080 -59.82513428]
[-60.73552704 -50.16347885]
[-49.26153946 -40.50181961]
[-37.78755188 -30.84016418]
[-23.06837082 -28.56090927]
[-17.49584579 -13.75356197]
[-6.02185726 -4.09190559]
[6.68315601 -8.50090122]
[20.00609207 -5.99191666]
[30.40268135 2.87765098]
[35.05258942 15.84387970]
[32.62400436 29.51343536]
[43.79196548 39.52725983]
[54.95992661 49.54108047]
[66.12789154 59.55490112]
[77.29585266 69.56872559]
[102.20995331 60.23978043]
[128.46972656 69.56439972]
[143.20465088 94.69188690]
[158.20283508 94.45861053]
[173.20101929 94.22533417]
[188.19920349 93.99205780]
[203.19738770 93.75878143]
[216.98477173 84.87958527]
[231.44233704 92.61981201]
[231.69737244 109.01697540]
[217.48751831 117.20307922]
[203.43066406 108.75696564]
[188.43247986 108.99024200]
[173.43429565 109.22352600]
[158.43611145 109.45680237]
[143.43792725 109.69007874]
[137.75160217 123.57048035]
[148.27540588 134.25924683]
[158.79920959 144.94799805]
[174.60298157 144.82025146]
[185.80950928 155.96427917]
[185.77015686 171.76852417]
[174.50827026 182.85659790]
[158.70533752 182.65016174]
[147.73693848 171.27168274]
[148.11044312 155.47180176]
[137.58663940 144.78305054]
[127.06284332 134.09428406]
[120.15929413 138.16120911]
[112.68889618 140.86315918]
[104.91603851 142.13128662]
[97.11099243 141.94696045]
[89.54048157 140.34165955]
[82.45863342 137.39495850]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 66]
[9 65]
[10 64]
[11 63]
[12 62]
[16 57]
[17 56]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[69 82]
[70 81]
[71 80]
[72 79]
[73 78]
[83 94]
[84 93]
[85 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
