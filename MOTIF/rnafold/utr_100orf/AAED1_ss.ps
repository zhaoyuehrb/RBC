%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAGAGCGGACCCAGGCCCUCGGCCGCCCCGCGUCAUGGCCGCGCCGGCCCCGGUCACGCGGCAGGUUAGCGGCGCCGCCGCCCUGGUCCCGGCCCCGAGCGGCCCCGACAGCGGGCAGCCCCUGGCGGCCGCCG\
) } def
/len { sequence length } bind def

/coor [
[60.32876968 453.27273560]
[45.19264221 456.25622559]
[30.85474968 450.56161499]
[21.89026642 438.00607300]
[21.15972519 422.59603882]
[28.89623833 409.24874878]
[42.63111115 402.22329712]
[44.00506592 387.28637695]
[45.37901688 372.34942627]
[46.75296783 357.41247559]
[44.21087265 350.40209961]
[48.33351898 342.15014648]
[50.04960251 327.24862671]
[48.07883072 324.22491455]
[47.52576447 320.07177734]
[48.91594315 315.49050903]
[52.43034744 311.39468384]
[55.16669846 296.64639282]
[57.90304947 281.89807129]
[47.53542328 271.23739624]
[45.40808868 256.33978271]
[52.54434586 242.88887024]
[66.39263153 236.14118958]
[69.12898254 221.39288330]
[71.86533356 206.64459229]
[66.57962036 192.71942139]
[76.70455933 180.56227112]
[79.44091034 165.81398010]
[82.17726135 151.06567383]
[84.91361237 136.31736755]
[83.02433777 129.10360718]
[87.88550568 121.26396179]
[90.95930481 106.58228302]
[93.86457062 91.86632538]
[96.60092163 77.11802673]
[99.33727264 62.36972427]
[90.65647125 49.43598938]
[93.64161682 34.51809692]
[106.02545166 26.32198524]
[108.76180267 11.57368374]
[111.49815369 -3.17461681]
[114.23450470 -17.92291832]
[116.97085571 -32.67121887]
[119.70720673 -47.41952133]
[121.59403229 -62.30037689]
[122.62512970 -77.26489258]
[123.65622711 -92.22941589]
[124.68731689 -107.19393158]
[125.71841431 -122.15845490]
[115.61492157 -134.01412964]
[116.87377167 -149.17559814]
[128.23861694 -158.73466492]
[129.26971436 -173.69918823]
[130.30081177 -188.66371155]
[131.33190918 -203.62823486]
[124.13159943 -209.95571899]
[120.75043488 -218.77693176]
[121.84432220 -228.02098083]
[127.03436279 -235.58102417]
[135.02299500 -239.79435730]
[137.08030701 -254.65260315]
[139.13761902 -269.51083374]
[141.19493103 -284.36907959]
[143.25225830 -299.22732544]
[141.31958008 -308.24707031]
[145.53086853 -314.40115356]
[147.92832947 -329.20834351]
[150.32579041 -344.01550293]
[139.97099304 -355.73352051]
[139.62265015 -371.36721802]
[149.44522095 -383.53485107]
[164.80081177 -386.49121094]
[178.43896484 -378.84039307]
[183.92016602 -364.19491577]
[178.65635681 -349.46987915]
[165.13296509 -341.61804199]
[162.73550415 -326.81088257]
[160.33802795 -312.00369263]
[158.11050415 -297.17001343]
[156.05317688 -282.31176758]
[153.99586487 -267.45352173]
[151.93855286 -252.59529114]
[149.88124084 -237.73704529]
[159.40103149 -219.47894287]
[146.29643250 -202.59713745]
[145.26533508 -187.63261414]
[144.23423767 -172.66809082]
[143.20314026 -157.70358276]
[153.14950562 -146.67610168]
[152.31700134 -131.48526001]
[140.68293762 -121.12735748]
[139.65184021 -106.16284180]
[138.62074280 -91.19831848]
[137.58964539 -76.23380280]
[136.55854797 -61.26927948]
[149.66496277 -68.56461334]
[163.62792969 -63.08412170]
[168.27276611 -48.82139206]
[160.21482849 -36.16952515]
[145.32586670 -34.34780502]
[134.45550537 -44.68317032]
[131.71916199 -29.93486786]
[128.98280334 -15.18656635]
[126.24645233 -0.43826562]
[123.51010132 14.31003571]
[120.77375031 29.05833626]
[129.39321899 41.15132904]
[126.82826233 56.14718246]
[114.08557129 65.10607147]
[111.34922028 79.85437775]
[108.61286926 94.60267639]
[110.36482239 102.54904175]
[105.64098358 109.65608215]
[102.56718445 124.33776093]
[99.66191864 139.05372620]
[96.92556763 153.80201721]
[94.18921661 168.55032349]
[91.45286560 183.29862976]
[96.54285431 198.27870178]
[86.61363983 209.38093567]
[83.87728119 224.12924194]
[81.14093018 238.87754822]
[91.64696503 250.14384460]
[93.48307800 265.25946045]
[86.15319824 278.40240479]
[72.65135193 284.63442993]
[69.91500092 299.38272095]
[67.17864990 314.13104248]
[64.95111084 328.96472168]
[63.23503113 343.86621094]
[61.68991089 358.78643799]
[60.31595993 373.72338867]
[58.94200516 388.66030884]
[57.56805420 403.59725952]
[69.79085541 413.01037598]
[74.96269226 427.54501343]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 134]
[8 133]
[9 132]
[10 131]
[12 130]
[13 129]
[17 128]
[18 127]
[19 126]
[23 122]
[24 121]
[25 120]
[27 118]
[28 117]
[29 116]
[30 115]
[32 114]
[33 113]
[34 111]
[35 110]
[36 109]
[39 106]
[40 105]
[41 104]
[42 103]
[43 102]
[44 101]
[45 95]
[46 94]
[47 93]
[48 92]
[49 91]
[52 88]
[53 87]
[54 86]
[55 85]
[60 83]
[61 82]
[62 81]
[63 80]
[64 79]
[66 78]
[67 77]
[68 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
