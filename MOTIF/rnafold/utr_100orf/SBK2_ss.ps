%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGCCUUGGAGGAGAUGCCCGGCAAACAGUCUGAGGAAGGGCCGGCGGAGGCAGGGGCUUCGGAGGACAGCGAGGAGGAGGGUCUGGGCGGCCUGACAUUAGAGGAGCUCCAGC\
) } def
/len { sequence length } bind def

/coor [
[76.58326721 186.25517273]
[73.26540375 171.62654114]
[64.51448822 183.80937195]
[55.76356888 195.99220276]
[47.01264954 208.17503357]
[38.59484482 220.59037781]
[30.51632309 233.22911072]
[22.43780518 245.86782837]
[22.23877144 262.26577759]
[7.80773258 270.05532837]
[-6.00989485 261.22326660]
[-4.99972153 244.85527039]
[9.79907322 237.78932190]
[17.87759209 225.15058899]
[25.95611191 212.51185608]
[25.78467751 207.61691284]
[28.77932549 202.58915710]
[34.82981491 199.42411804]
[43.58073425 187.24128723]
[52.33165359 175.05845642]
[61.08257294 162.87562561]
[68.64112854 149.91921997]
[74.93946838 136.30558777]
[81.23780823 122.69196320]
[74.06368256 113.93744659]
[70.72219849 103.12338257]
[71.70713806 91.84776306]
[76.87294006 81.77681732]
[85.45626831 74.39873505]
[96.18873596 70.80377960]
[107.48439789 71.52318573]
[114.86682129 58.46562958]
[122.24924469 45.40806961]
[129.63166809 32.35051346]
[137.01409912 19.29295540]
[129.33578491 6.06454372]
[129.30992126 -9.13072300]
[136.84330750 -22.21179771]
[149.82597351 -29.71555710]
[164.72113037 -29.71345711]
[172.10354614 -42.77101517]
[179.48597717 -55.82857132]
[186.86839294 -68.88613129]
[194.25082397 -81.94368744]
[201.63323975 -95.00124359]
[194.97177124 -107.15418243]
[195.21812439 -120.90219879]
[202.19950867 -132.62190247]
[213.98226929 -139.27806091]
[227.40626526 -139.20933533]
[235.13957214 -152.06219482]
[242.87287903 -164.91505432]
[250.60618591 -177.76791382]
[241.59622192 -191.24052429]
[239.33958435 -207.23190308]
[244.23432922 -222.56132507]
[255.26110840 -234.20175171]
[270.19500732 -239.87754822]
[286.05426025 -238.50930786]
[293.43670654 -251.56686401]
[300.81912231 -264.62442017]
[308.20153809 -277.68197632]
[315.58395386 -290.73953247]
[309.02261353 -304.80111694]
[312.01260376 -320.02740479]
[323.40420532 -330.56356812]
[338.81716919 -332.35821533]
[352.32482910 -324.72131348]
[358.73327637 -310.58938599]
[355.57827759 -295.39642334]
[344.07302856 -284.98446655]
[328.64151001 -283.35711670]
[321.25909424 -270.29956055]
[313.87667847 -257.24200439]
[306.49426270 -244.18443298]
[299.11181641 -231.12687683]
[307.61392212 -220.07679749]
[311.24981689 -206.57180786]
[309.43353271 -192.66053772]
[302.40872192 -180.46640015]
[291.21664429 -171.86361694]
[277.54193115 -168.18905640]
[263.45904541 -170.03460693]
[255.72573853 -157.18174744]
[247.99243164 -144.32888794]
[240.25912476 -131.47602844]
[247.14523315 -116.64191437]
[243.84671021 -100.45472717]
[231.45960999 -89.27638245]
[214.69081116 -87.61882019]
[207.30838013 -74.56126404]
[199.92594910 -61.50370407]
[192.54353333 -48.44614792]
[185.16110229 -35.38858795]
[177.77868652 -22.33103180]
[185.45973206 -9.56909657]
[185.72334290 5.42378426]
[178.39860535 18.62281609]
[165.36509705 26.43463135]
[150.07165527 26.67538071]
[142.68922424 39.73293686]
[135.30680847 52.79049683]
[127.92437744 65.84805298]
[120.54195404 78.90560913]
[129.05670166 95.24048615]
[126.19844055 113.43827057]
[113.08589935 126.37620544]
[94.85143280 128.99029541]
[88.55310059 142.60392761]
[82.25476074 156.21755981]
[96.62178802 151.90611267]
[110.48718262 157.62895203]
[117.63072205 170.81871033]
[114.84769440 185.55827332]
[103.38661957 195.23526001]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 21]
[3 20]
[4 19]
[5 18]
[6 15]
[7 14]
[8 13]
[22 110]
[23 109]
[24 108]
[31 104]
[32 103]
[33 102]
[34 101]
[35 100]
[40 95]
[41 94]
[42 93]
[43 92]
[44 91]
[45 90]
[50 86]
[51 85]
[52 84]
[53 83]
[59 76]
[60 75]
[61 74]
[62 73]
[63 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
