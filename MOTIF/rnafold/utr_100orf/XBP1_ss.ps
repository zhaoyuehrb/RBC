%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCUGGGCGGCUGCGGCGCGCGGUGCGCGGUGCGUAGUCUGGAGCUAUGGUGGUGGUGGCAGCCGCGCCGAACCCGGCCGACGGGACCCCUAAAGUUCUGCUUCUGUCGGGGCAGCCCGCCUCCGCCGCCGGAGCCCCGGCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[93.92271423 563.56317139]
[93.92271423 548.56317139]
[93.92271423 533.56317139]
[93.60646820 518.56652832]
[92.97412109 503.57986450]
[92.34177399 488.59320068]
[91.70942688 473.60653687]
[91.07707977 458.61987305]
[90.44473267 443.63320923]
[87.54627991 439.76004028]
[87.09598541 434.00909424]
[90.11515045 428.00418091]
[90.11515045 413.00418091]
[90.11515045 398.00418091]
[82.37785339 385.27691650]
[90.11515045 371.47674561]
[90.11515045 356.47674561]
[90.11515045 341.47674561]
[90.11515045 326.47674561]
[90.11515045 311.47674561]
[86.94853210 304.74230957]
[90.27661896 296.16134644]
[90.59286499 281.16467285]
[90.90910339 266.16799927]
[91.22534943 251.17134094]
[81.94499207 236.31101990]
[91.52809143 220.62370300]
[91.52809143 205.62370300]
[91.52809143 190.62370300]
[88.36146545 183.88928223]
[91.68955994 175.30828857]
[92.00579834 160.31163025]
[92.16393280 145.31245422]
[92.16393280 130.31245422]
[92.16393280 115.31246185]
[82.91793823 103.50096130]
[68.35672760 99.89941406]
[53.79551315 96.29786682]
[39.23430252 92.69632721]
[24.67309189 89.09477997]
[10.24943542 96.11885834]
[-4.17268181 89.09162140]
[-7.52984476 73.40375519]
[2.75327420 61.08965683]
[18.78834534 61.59564590]
[28.27463531 74.53356934]
[42.83584595 78.13511658]
[57.39706039 81.73665619]
[71.95826721 85.33820343]
[86.51948547 88.93974304]
[95.25932312 76.74896240]
[87.17391205 64.11463928]
[79.08850861 51.48031616]
[71.00309753 38.84599304]
[63.69071198 33.25685501]
[62.88367081 25.85896873]
[55.06642532 13.05698872]
[47.24918365 0.25500819]
[39.43193817 -12.54697227]
[24.78138351 -19.91537094]
[24.10758591 -36.30067062]
[38.10369110 -44.84708023]
[52.37170410 -36.76278305]
[52.23391724 -20.36421585]
[60.05116272 -7.56223583]
[67.86840820 5.23974419]
[75.68565369 18.04172516]
[83.63742065 30.76058388]
[91.72283173 43.39490891]
[99.80824280 56.02923203]
[107.89364624 68.66355896]
[115.33371735 69.60983276]
[124.41252899 57.66934586]
[130.21383667 71.50238037]
[137.65391541 72.44865417]
[148.64456177 62.24054337]
[159.63522339 52.03243256]
[170.62586975 41.82432556]
[181.61653137 31.61621475]
[192.60717773 21.40810394]
[197.45317078 6.34732628]
[212.04411316 3.35510015]
[223.03477478 -6.85300970]
[233.80776978 -17.29056549]
[244.35830688 -27.95292854]
[254.90885925 -38.61529160]
[265.45941162 -49.27765274]
[276.00994873 -59.94001770]
[286.56048584 -70.60237885]
[284.93542480 -86.15529633]
[293.73059082 -99.08508301]
[308.79312134 -103.28669739]
[323.01101685 -96.77625275]
[329.67098999 -82.62779999]
[325.62838745 -67.52178955]
[312.79205322 -58.59082413]
[297.22286987 -60.05183411]
[286.67230225 -49.38947296]
[276.12176514 -38.72710800]
[265.57122803 -28.06474495]
[255.02067566 -17.40238380]
[244.47012329 -6.74002028]
[243.60472107 -1.98043764]
[239.69740295 2.26323485]
[233.24287415 4.13764524]
[222.25222778 14.34575462]
[218.19236755 28.67638016]
[202.81529236 32.39875793]
[191.82463074 42.60686874]
[180.83398438 52.81497955]
[169.84332275 63.02309036]
[158.85267639 73.23120117]
[147.86201477 83.43930817]
[107.16393280 115.31246185]
[107.16393280 130.31245422]
[107.16393280 145.31245422]
[110.31037140 153.96170044]
[107.00246429 160.62786865]
[106.68622589 175.62454224]
[106.52809143 190.62370300]
[106.52809143 205.62370300]
[106.52809143 220.62370300]
[115.10238647 230.31838989]
[114.75540924 242.85423279]
[106.22201538 251.48757935]
[105.90576935 266.48425293]
[105.58953094 281.48092651]
[105.27328491 296.47756958]
[105.11515045 311.47674561]
[105.11515045 326.47674561]
[105.11515045 341.47674561]
[105.11515045 356.47674561]
[105.11515045 371.47674561]
[112.85245514 385.27691650]
[105.11515045 398.00418091]
[105.11515045 413.00418091]
[105.11515045 428.00418091]
[105.43139648 443.00085449]
[106.06374359 457.98751831]
[106.69609070 472.97418213]
[107.32843781 487.96084595]
[107.96078491 502.94750977]
[108.59313965 517.93420410]
[111.86276245 523.80645752]
[111.65531158 529.57128906]
[108.92271423 533.56317139]
[108.92271423 548.56317139]
[108.92271423 563.56317139]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 143]
[5 142]
[6 141]
[7 140]
[8 139]
[9 138]
[12 137]
[13 136]
[14 135]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[22 128]
[23 127]
[24 126]
[25 125]
[27 122]
[28 121]
[29 120]
[31 119]
[32 118]
[33 116]
[34 115]
[35 114]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[51 71]
[52 70]
[53 69]
[54 68]
[56 67]
[57 66]
[58 65]
[59 64]
[75 113]
[76 112]
[77 111]
[78 110]
[79 109]
[80 108]
[82 106]
[83 105]
[84 102]
[85 101]
[86 100]
[87 99]
[88 98]
[89 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
