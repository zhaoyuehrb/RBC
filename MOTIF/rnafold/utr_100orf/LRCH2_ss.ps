%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:11:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGUCGGGGGCUAUUCUCUCUCCCAGGAACAUGGCGGCGAGUCAGGGAGGAGGCGGUAACAGUGGGGGCGGCGGUUGUGGUGGAGGUGGAAGUAGCGGUGGCUGUGGCACGGCUGGAGGGGGAGGUGGCG\
) } def
/len { sequence length } bind def

/coor [
[87.91744232 330.94107056]
[81.45896912 344.77041626]
[69.63431549 354.42135620]
[54.79129410 357.97766113]
[39.87698364 354.73324585]
[27.85264206 345.33230591]
[21.10570335 331.64135742]
[20.97578239 316.37881470]
[27.48867035 302.57501221]
[39.35123444 292.97070312]
[54.20814896 289.47286987]
[57.39662552 274.81567383]
[60.58510590 260.15847778]
[63.77358627 245.50126648]
[66.96206665 230.84405518]
[69.97589874 216.14994812]
[72.81467438 201.42102051]
[75.65344238 186.69209290]
[78.49221039 171.96316528]
[81.33097839 157.23423767]
[84.16974640 142.50529480]
[87.00851440 127.77637482]
[89.84728241 113.04743958]
[88.06649780 98.15352631]
[81.83527374 84.50904083]
[75.60404968 70.86456299]
[60.38807297 69.30847168]
[48.07525635 60.40390015]
[41.91366959 46.62343597]
[43.46667480 31.70887566]
[52.21759033 19.65536690]
[45.98636627 6.01088762]
[39.75513840 -7.63359261]
[26.98424530 -16.97248077]
[28.73524094 -31.76380539]
[22.50401688 -45.40828323]
[16.27279091 -59.05276489]
[10.04156590 -72.69724274]
[3.81034064 -86.34172058]
[-8.03247929 -91.60996246]
[-12.91681671 -103.18090820]
[-8.70854759 -114.58681488]
[-14.61330032 -128.37571716]
[-20.51805305 -142.16462708]
[-33.36688995 -141.02232361]
[-45.99432755 -143.56803894]
[-57.36505508 -149.58262634]
[-66.54976654 -158.56297302]
[-72.80110931 -169.76402283]
[-75.61445618 -182.26065063]
[-74.76867676 -195.02403259]
[-70.34345245 -207.00634766]
[-62.71191025 -217.22680664]
[-52.50914764 -224.85192871]
[-57.41516876 -239.02694702]
[-72.08657837 -244.43840027]
[-79.80219269 -258.03997803]
[-76.91893768 -273.40945435]
[-64.79820251 -283.28982544]
[-49.16301727 -283.01586914]
[-37.39584351 -272.71694946]
[-35.05278397 -257.25592041]
[-43.24015427 -243.93296814]
[-38.33413696 -229.75794983]
[-21.09260750 -229.29895020]
[-5.29165697 -222.29791260]
[6.67934513 -209.78450012]
[12.99915314 -193.62408447]
[12.69169521 -176.23974609]
[5.77672672 -160.24893188]
[-6.72914934 -148.06938171]
[-0.82439590 -134.28047180]
[5.08035755 -120.49156952]
[19.66608620 -110.80835724]
[17.45482063 -92.57295227]
[23.68604660 -78.92846680]
[29.91727066 -65.28398895]
[36.14849472 -51.63951111]
[42.37972260 -37.99502945]
[54.70491791 -29.63208580]
[53.39962006 -13.86481762]
[59.63084412 -0.22033772]
[65.86206818 13.42414188]
[80.70213318 14.70400906]
[92.99081421 23.29728699]
[99.37040710 36.97818756]
[98.03684998 52.11484909]
[89.24852753 64.63333893]
[95.47975159 78.27781677]
[101.71097565 91.92229462]
[105.43975067 89.50486755]
[110.46073151 88.71811676]
[116.11828613 90.03583527]
[121.61042023 93.68679810]
[136.00282288 97.91278839]
[150.39520264 102.13877106]
[164.78759766 106.36476135]
[180.20861816 102.82883453]
[190.24049377 113.83840942]
[204.63288879 118.06439972]
[219.02528381 122.29038239]
[231.94357300 113.47835541]
[247.49859619 115.08309937]
[258.34576416 126.34689331]
[259.36334229 141.95133972]
[250.07090759 154.52847290]
[234.85601807 158.13977051]
[220.90270996 151.08007812]
[214.79930115 136.68278503]
[200.40690613 132.45678711]
[186.01451111 128.23080444]
[171.62294006 132.06900024]
[160.56161499 120.75715637]
[146.16921997 116.53116608]
[131.77682495 112.30518341]
[117.38442993 108.07919312]
[104.57621002 115.88620758]
[101.73744202 130.61514282]
[98.89867401 145.34407043]
[96.05990601 160.07299805]
[93.22113800 174.80192566]
[90.38237000 189.53086853]
[87.54360199 204.25979614]
[84.70483398 218.98872375]
[86.15923309 228.10768127]
[81.61927032 234.03254700]
[78.43078613 248.68974304]
[75.24230957 263.34695435]
[72.05383301 278.00415039]
[68.86534882 292.66134644]
[80.92662048 302.01489258]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 130]
[12 129]
[13 128]
[14 127]
[15 126]
[16 124]
[17 123]
[18 122]
[19 121]
[20 120]
[21 119]
[22 118]
[23 117]
[24 90]
[25 89]
[26 88]
[31 83]
[32 82]
[33 81]
[35 79]
[36 78]
[37 77]
[38 76]
[39 75]
[42 73]
[43 72]
[44 71]
[54 64]
[55 63]
[94 116]
[95 115]
[96 114]
[97 113]
[99 111]
[100 110]
[101 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
