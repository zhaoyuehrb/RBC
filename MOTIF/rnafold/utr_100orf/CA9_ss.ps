%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCGUACACACCGUGUGCUGGGACACCCCACAGUCAGCCGCAUGGCUCCCCUGUGCCCCAGCCCCUGGCUCCCUCUGUUGAUCCCGGCCCCUGCUCCAGGCCUCACUGUGCAACUGCUGCUGUCACUGCUGCUUCUGGUGC\
) } def
/len { sequence length } bind def

/coor [
[0.21047717 301.97628784]
[-9.99041653 303.49069214]
[-17.82086945 316.28457642]
[-25.65132332 329.07849121]
[-33.34077072 341.95764160]
[-40.88828278 354.92047119]
[-48.43579865 367.88330078]
[-55.98331451 380.84613037]
[-63.53082657 393.80895996]
[-71.07833862 406.77178955]
[-73.82289886 423.50213623]
[-90.65916443 425.49624634]
[-97.23609161 409.86996460]
[-84.04117584 399.22427368]
[-76.49365997 386.26144409]
[-68.94614410 373.29861450]
[-61.39863205 360.33578491]
[-53.85111618 347.37295532]
[-46.30360413 334.41012573]
[-45.65119171 326.98965454]
[-38.44522858 321.24804688]
[-30.61477470 308.45413208]
[-22.78432274 295.66021729]
[-23.78407478 276.39523315]
[-6.07020569 266.88073730]
[1.19072759 253.75523376]
[8.45166111 240.62973022]
[15.71259403 227.50422668]
[8.94813728 215.94456482]
[8.79730320 202.44348145]
[15.40717793 190.54588318]
[27.13562775 183.42884827]
[40.95795441 183.05354309]
[48.50546646 170.09069824]
[49.15787888 162.67022705]
[56.36384201 156.92861938]
[64.19429779 144.13471985]
[72.02474976 131.34080505]
[79.85520172 118.54690552]
[64.34933472 103.03524017]
[62.90931702 76.00270844]
[50.38035202 67.75497437]
[37.85139084 59.50724030]
[25.32242775 51.25951004]
[12.79346561 43.01177597]
[0.26450291 34.76404572]
[-15.67538261 36.58052444]
[-26.93170738 25.14922142]
[-24.86958122 9.23924923]
[-11.07089138 1.05537915]
[3.87918758 6.87557554]
[8.51223564 22.23508072]
[21.04119873 30.48281479]
[33.57015991 38.73054504]
[46.09912491 46.97827911]
[58.62808609 55.22601318]
[71.15705109 63.47374344]
[77.28225708 59.14571762]
[75.91107178 44.20851898]
[89.53266907 50.48965836]
[95.65788269 46.16163254]
[92.06814575 31.59750366]
[88.47840881 17.03337669]
[84.88867950 2.46924949]
[75.22747803 -11.46264267]
[85.94042206 -24.60300827]
[101.53289795 -17.94634438]
[99.45280457 -1.12048554]
[103.04254150 13.44364166]
[106.63227081 28.00776863]
[110.22200775 42.57189560]
[114.05413055 28.06966209]
[115.77803802 13.16905212]
[126.44161987 2.61974359]
[141.35993958 1.05648410]
[153.97875977 9.16607857]
[158.75410461 23.38564491]
[153.58796692 37.46794128]
[140.74998474 45.22604370]
[129.15020752 54.73631287]
[143.88943481 51.95149612]
[158.62866211 49.16667557]
[173.36788940 46.38185501]
[182.28483582 33.60978699]
[197.27218628 30.99555206]
[209.39344788 39.57521057]
[224.13267517 36.79039383]
[238.87190247 34.00557327]
[253.61112976 31.22075462]
[260.31323242 17.35036278]
[273.74063110 10.16992378]
[288.64514160 12.24827480]
[299.33984375 22.58079910]
[314.07907104 19.79598045]
[328.81829834 17.01115990]
[336.75747681 6.78188419]
[349.14675903 4.79975176]
[359.21423340 11.59284306]
[374.01107788 9.13247871]
[388.80792236 6.67211390]
[397.79382324 -6.32901287]
[413.35577393 -9.08598518]
[426.26116943 0.03686016]
[428.85348511 15.62709999]
[419.59469604 28.43532372]
[403.97790527 30.86263657]
[391.26831055 21.46895790]
[376.47146606 23.92932320]
[361.67462158 26.38968849]
[348.79119873 38.25672913]
[331.60311890 31.75038719]
[316.86389160 34.53520584]
[302.12466431 37.32002640]
[295.93707275 50.84228516]
[282.81829834 58.21533585]
[267.69671631 56.42891693]
[256.39593506 45.95998001]
[241.65672302 48.74480057]
[226.91749573 51.52961731]
[212.17826843 54.31443787]
[204.02290344 66.72515106]
[189.11491394 69.75931549]
[176.15270996 61.12108231]
[161.41348267 63.90590286]
[146.67425537 66.69071960]
[131.93502808 69.47554016]
[138.36358643 104.06820679]
[118.53179169 127.28171539]
[92.64910889 126.37735748]
[84.81864929 139.17126465]
[76.98819733 151.96516418]
[69.15774536 164.75907898]
[61.46829987 177.63821411]
[53.92078400 190.60104370]
[60.95280838 205.94371033]
[57.51656342 222.29829407]
[45.15211487 233.29328918]
[28.83809853 234.76515198]
[21.57716370 247.89065552]
[14.31623173 261.01617432]
[7.05529833 274.14166260]
[10.68617535 284.49798584]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 23]
[3 22]
[4 21]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[10 14]
[25 141]
[26 140]
[27 139]
[28 138]
[33 134]
[34 133]
[36 132]
[37 131]
[38 130]
[39 129]
[41 57]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
[61 71]
[62 70]
[63 69]
[64 68]
[80 126]
[81 125]
[82 124]
[83 123]
[86 120]
[87 119]
[88 118]
[89 117]
[93 113]
[94 112]
[95 111]
[98 109]
[99 108]
[100 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
