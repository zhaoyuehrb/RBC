%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:18:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCUUCCGCAGGAAGAAGGAAGCGGCGCCGCCAUCGCCUCCCGGCGCUCCCUCCCCGACUCCUAAGUCCUUCGGCCGCCACCAUGUCCGCCUCGGCUGUCUUCAUUCUGGACGUUAAGGGCAAGCCAUUGAUCAGCCGCAACUACAAGGGCGAUGUGGCCAUGAGCAAGAUUGAGCACUUCA\
) } def
/len { sequence length } bind def

/coor [
[80.40708160 108.45355225]
[65.64490509 111.11399841]
[50.88272095 113.77444458]
[36.12054062 116.43489838]
[30.42509270 125.73530579]
[20.74487305 130.26098633]
[10.39124107 128.73118591]
[2.76114559 121.89262390]
[-12.08286285 124.05026245]
[-26.92687035 126.20790863]
[-39.47057343 135.84979248]
[-53.17844391 130.02368164]
[-68.02245331 132.18132019]
[-82.86646271 134.33897400]
[-97.71047211 136.49661255]
[-104.99442291 150.07049561]
[-118.71406555 156.67539978]
[-133.51708984 153.96723938]
[-143.76429749 143.19073486]
[-158.60829163 145.34837341]
[-173.45230103 147.50601196]
[-188.29631042 149.66365051]
[-197.74656677 162.04632568]
[-212.83123779 164.02302551]
[-224.57798767 154.93734741]
[-239.42199707 157.09498596]
[-254.26599121 159.25263977]
[-256.43710327 173.49713135]
[-262.53106689 186.53646851]
[-272.04486084 197.31561279]
[-284.19921875 204.96517944]
[-298.00238037 208.87162781]
[-312.33099365 208.72637939]
[-326.02163696 204.55020142]
[-337.96517944 196.69081116]
[-347.19674683 185.79394531]
[-352.97348022 172.75025940]
[-367.85198975 174.65553284]
[-382.73049927 176.56079102]
[-397.60900879 178.46606445]
[-410.31958008 188.82817078]
[-425.55050659 182.74940491]
[-427.63348389 166.48307800]
[-414.42575073 156.76260376]
[-399.51428223 163.58755493]
[-384.63577271 161.68229675]
[-369.75726318 159.77702332]
[-354.87875366 157.87174988]
[-352.13583374 142.46153259]
[-344.75912476 128.63433838]
[-333.45907593 117.74739838]
[-319.33197021 110.87352753]
[-303.75338745 108.69539642]
[-288.24444580 111.43778992]
[-274.32321167 118.84446716]
[-263.35607910 130.20202637]
[-256.42364502 144.40863037]
[-241.57963562 142.25097656]
[-226.73562622 140.09333801]
[-218.06159973 128.03942871]
[-203.03840637 125.63980865]
[-190.45396423 134.81964111]
[-175.60995483 132.66200256]
[-160.76594543 130.50436401]
[-145.92193604 128.34672546]
[-139.16677856 115.09885406]
[-125.74731445 108.28842926]
[-110.71504211 110.71411896]
[-99.86811066 121.65260315]
[-85.02410126 119.49495697]
[-70.18009186 117.33731842]
[-55.33608627 115.17967987]
[-43.85412598 105.69211578]
[-29.08451271 111.36389923]
[-14.24050426 109.20625305]
[0.60350460 107.04861450]
[14.84133339 93.98493958]
[33.46009064 101.67271423]
[48.22227097 99.01226807]
[62.98445511 96.35181427]
[77.74663544 93.69136810]
[90.88566589 78.01122284]
[111.91988373 78.62326813]
[124.41839600 70.32946777]
[136.91691589 62.03566742]
[149.41542053 53.74187088]
[161.91394043 45.44807053]
[174.41246033 37.15427017]
[186.91098022 28.86046982]
[192.34700012 21.49056816]
[199.69288635 20.53405762]
[212.33044434 12.45368767]
[224.96798706 4.37331820]
[237.60552979 -3.70705104]
[249.58932495 -12.72862434]
[260.84939575 -22.63874626]
[272.10949707 -32.54886627]
[283.36956787 -42.45898819]
[294.62966919 -52.36910629]
[305.88973999 -62.27922821]
[305.95590210 -73.18479919]
[311.90164185 -82.06379700]
[321.55484009 -86.10778809]
[331.62176514 -84.19952393]
[343.21185303 -93.72157288]
[354.80197144 -103.24362183]
[355.23840332 -114.14065552]
[361.48223877 -122.81263733]
[371.26718140 -126.52651215]
[381.26348877 -124.27750397]
[393.17025757 -133.40049744]
[405.07699585 -142.52349854]
[407.04705811 -159.89462280]
[420.69531250 -170.27133179]
[437.29406738 -167.63053894]
[449.04418945 -176.95440674]
[460.79431152 -186.27827454]
[469.44342041 -200.86009216]
[485.84970093 -196.58564758]
[486.28399658 -179.63726807]
[470.11819458 -174.52815247]
[458.36807251 -165.20428467]
[446.61795044 -155.88041687]
[446.94686890 -142.98609924]
[439.67462158 -132.09814453]
[427.27423096 -127.32313538]
[414.20001221 -130.61674500]
[402.29324341 -121.49374390]
[390.38647461 -112.37074280]
[384.32775879 -94.02225494]
[364.32403564 -91.65351868]
[352.73391724 -82.13146973]
[341.14379883 -72.60942078]
[335.71160889 -54.06577301]
[315.79986572 -51.01914597]
[304.53979492 -41.10902405]
[293.27969360 -31.19890213]
[282.01962280 -21.28878212]
[270.75952148 -11.37866116]
[259.49945068 -1.46854007]
[274.48876953 -2.03432488]
[287.46575928 5.48881817]
[294.42312622 18.77773476]
[293.21237183 33.72879410]
[284.20745850 45.72509003]
[270.18902588 51.06215668]
[255.48605347 48.09189987]
[244.63880920 37.73154068]
[240.99691772 23.18036652]
[245.68589783 8.93049717]
[233.04835510 17.01086617]
[220.41081238 25.09123611]
[207.77325439 33.17160416]
[195.20477295 41.35898590]
[182.70625305 49.65278625]
[170.20774841 57.94658661]
[157.70922852 66.24038696]
[145.21070862 74.53418732]
[132.71220398 82.82798767]
[120.21368408 91.12178040]
[134.28370667 85.92234039]
[148.20812988 91.50003815]
[154.79771423 104.97509766]
[150.65026855 119.39031982]
[137.90710449 127.30309296]
[123.14756775 124.62802887]
[113.99143982 112.74430847]
[120.16996002 126.41274261]
[135.39263916 129.42095947]
[145.91516113 140.82518005]
[147.69136047 156.24026489]
[140.03828430 169.73878479]
[125.89868927 176.13027954]
[110.70952606 172.95710754]
[100.31135559 161.43940735]
[98.70246887 146.00596619]
[106.50153351 132.59126282]
[100.32301331 118.92282867]
[104.04685974 133.45324707]
[98.09704590 147.22276306]
[84.96345520 154.46907043]
[70.14229584 152.15969849]
[59.83597946 141.26107788]
[58.35752487 126.33412170]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 81]
[2 80]
[3 79]
[4 78]
[8 76]
[9 75]
[10 74]
[12 72]
[13 71]
[14 70]
[15 69]
[19 65]
[20 64]
[21 63]
[22 62]
[25 59]
[26 58]
[27 57]
[37 48]
[38 47]
[39 46]
[40 45]
[83 160]
[84 159]
[85 158]
[86 157]
[87 156]
[88 155]
[89 154]
[91 153]
[92 152]
[93 151]
[94 150]
[95 140]
[96 139]
[97 138]
[98 137]
[99 136]
[100 135]
[104 133]
[105 132]
[106 131]
[110 129]
[111 128]
[112 127]
[115 123]
[116 122]
[117 121]
[167 178]
[168 177]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
