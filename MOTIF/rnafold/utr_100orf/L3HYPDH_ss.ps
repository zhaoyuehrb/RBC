%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:13:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGCUGCGGGACCGUACUCGUCUCCCCCGACGCAGACCAUGGAGAGCGCGCUGGCGGUGCCCCGGCUGCCCCCGCAUGAUCCAGGGACGCCGGUGCUGUCGGUGGUGGACAUGCACACGGGCGGCGAGCCCUUGCGUA\
) } def
/len { sequence length } bind def

/coor [
[105.03601074 155.37895203]
[90.15001678 153.53308105]
[80.34464264 142.18167114]
[80.68241882 127.18547821]
[90.99079895 116.28617859]
[79.05642700 125.37303162]
[67.12206268 134.45988464]
[55.18769455 143.54673767]
[43.78160477 153.28845215]
[32.93968201 163.65438843]
[22.09775925 174.02032471]
[11.25583553 184.38627625]
[6.54752731 202.14875793]
[-10.59710693 205.72552490]
[-21.20370865 216.33212280]
[-24.92316246 232.30389404]
[-40.69133377 236.80909729]
[-52.28728104 225.21315002]
[-47.78208923 209.44497681]
[-31.81031036 205.72552490]
[-21.20370865 195.11891174]
[-20.87425995 182.97518921]
[-12.05232239 174.04890442]
[0.88989627 173.54434204]
[11.73181915 163.17840576]
[22.57374191 152.81246948]
[33.41566467 142.44653320]
[18.80748367 139.04049683]
[12.15553665 125.59610748]
[18.31042862 111.91702271]
[32.78400803 107.97805023]
[45.02212524 116.65148926]
[46.10084534 131.61236572]
[58.03521347 122.52551270]
[69.96958160 113.43865967]
[81.90394592 104.35181427]
[89.15972900 91.22345734]
[90.50431824 76.28384399]
[91.84890747 61.34423065]
[93.19350433 46.40461731]
[94.53809357 31.46500206]
[88.06897736 17.02681923]
[96.91599274 5.04434967]
[98.26058197 -9.89526463]
[91.79146576 -24.33344841]
[100.63848114 -36.31591797]
[101.98307037 -51.25553131]
[103.32765961 -66.19514465]
[100.84998322 -72.46892548]
[101.82685852 -78.17321777]
[105.08249664 -81.76973724]
[107.09599304 -96.63398743]
[109.10949707 -111.49822998]
[111.12299347 -126.36248016]
[113.13649750 -141.22673035]
[115.14999390 -156.09097290]
[117.16349030 -170.95521545]
[110.02409363 -179.29832458]
[108.72854614 -189.98023987]
[113.46836853 -199.39389038]
[122.43780518 -204.49588013]
[125.11615753 -219.25482178]
[127.79450989 -234.01376343]
[122.64566803 -248.97370911]
[132.53117371 -260.11489868]
[135.20951843 -274.87384033]
[126.66260529 -294.46551514]
[140.39543152 -309.81213379]
[142.07490540 -324.71783447]
[143.75437927 -339.62350464]
[136.70411682 -354.42977905]
[146.22323608 -367.78338623]
[162.51925659 -365.94726562]
[168.82824707 -350.81027222]
[158.66004944 -337.94403076]
[156.98059082 -323.03836060]
[155.30111694 -308.13265991]
[161.99378967 -302.08206177]
[165.15426636 -293.48382568]
[163.93736267 -284.26467896]
[158.49459839 -276.55477905]
[149.96847534 -272.19549561]
[147.29011536 -257.43655396]
[152.63053894 -243.53225708]
[142.55345154 -231.33541870]
[139.87510681 -216.57647705]
[137.19674683 -201.81752014]
[145.09399414 -184.22052002]
[132.02774048 -168.94171143]
[130.01423645 -154.07746887]
[128.00074768 -139.21322632]
[125.98724365 -124.34897614]
[123.97373962 -109.48473358]
[121.96024323 -94.62048340]
[119.94674683 -79.75624084]
[118.26728058 -64.85055542]
[116.92268372 -49.91094208]
[115.57809448 -34.97132874]
[122.14338684 -21.60172653]
[113.20019531 -8.55067539]
[111.85560608 6.38893938]
[118.42089844 19.75854111]
[109.47770691 32.80959320]
[108.13311768 47.74920654]
[106.78852844 62.68881989]
[105.44393921 77.62843323]
[104.09934235 92.56804657]
[108.65087891 91.45113373]
[113.95708466 92.51602173]
[119.10343933 96.02945709]
[123.10785675 101.90709686]
[125.04712677 109.70372772]
[134.39947510 121.43120575]
[143.75181580 133.15867615]
[153.10417175 144.88615417]
[162.45651245 156.61361694]
[173.42063904 157.21890259]
[182.03677368 163.66436768]
[185.56539917 173.59570312]
[183.05464172 183.60456848]
[191.87142944 195.73982239]
[200.68820190 207.87507629]
[209.50498962 220.01033020]
[225.06181335 223.93008423]
[231.56530762 238.59584045]
[224.02651978 252.75727844]
[208.22857666 255.55096436]
[196.29031372 244.83381653]
[197.36973572 228.82711792]
[188.55294800 216.69186401]
[179.73617554 204.55659485]
[170.91938782 192.42134094]
[152.74287415 185.96879578]
[150.72903442 165.96597290]
[141.37669373 154.23849487]
[132.02435303 142.51101685]
[122.67199707 130.78355408]
[113.31964874 119.05607605]
[120.65215302 132.14173889]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 36]
[6 35]
[7 34]
[8 33]
[9 27]
[10 26]
[11 25]
[12 24]
[14 21]
[15 20]
[37 107]
[38 106]
[39 105]
[40 104]
[41 103]
[43 101]
[44 100]
[46 98]
[47 97]
[48 96]
[51 95]
[52 94]
[53 93]
[54 92]
[55 91]
[56 90]
[57 89]
[61 87]
[62 86]
[63 85]
[65 83]
[66 82]
[68 77]
[69 76]
[70 75]
[112 138]
[113 137]
[114 136]
[115 135]
[116 134]
[120 132]
[121 131]
[122 130]
[123 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
