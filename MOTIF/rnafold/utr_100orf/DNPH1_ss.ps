%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:41:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGGGCGGCUGGGGAAUGGCUGCUGCCAUGGUGCCGGGGCGCAGCGAGAGCUGGGAGCGCGGGGAGCCUGGCCGCCCGGCCCUGUACUUCUGCGGGAGCAUUCGCGGCGGACGCG\
) } def
/len { sequence length } bind def

/coor [
[78.49415588 118.47114563]
[81.40078735 110.17491913]
[86.54133606 104.03877258]
[93.12074280 100.56874847]
[81.32247162 91.30588531]
[69.52420044 82.04301453]
[57.72592545 72.78014374]
[45.92765045 63.51727676]
[34.12937927 54.25440598]
[22.33110428 44.99153519]
[10.53283119 35.72866821]
[-1.26544213 26.46579742]
[-13.06371498 17.20292854]
[-24.86198807 7.94005966]
[-36.66026306 -1.32280970]
[-55.29962540 6.10927343]
[-74.76918030 1.95659614]
[-88.53241730 -12.20597935]
[-103.00393677 -8.25944042]
[-117.47545624 -4.31290245]
[-131.94697571 -0.36636376]
[-146.41848755 3.58017468]
[-157.57228088 15.60202503]
[-173.49803162 11.69017887]
[-177.81269836 -4.13119173]
[-166.07771301 -15.58641720]
[-150.36503601 -10.89134312]
[-135.89350891 -14.83788204]
[-121.42199707 -18.78442001]
[-106.95047760 -22.73095894]
[-92.47895813 -26.67749786]
[-92.18180084 -32.83002853]
[-90.77474976 -38.82686996]
[-88.30437469 -44.46949387]
[-84.85247040 -49.57109070]
[-80.53331757 -53.96276855]
[-87.44970703 -67.27304840]
[-94.36609650 -80.58332825]
[-106.47852325 -85.25423431]
[-111.93769836 -96.58719635]
[-108.28099823 -108.20191193]
[-114.84060669 -121.69159698]
[-132.02581787 -132.06457520]
[-130.14077759 -151.23252869]
[-137.40904236 -164.35397339]
[-144.67730713 -177.47541809]
[-151.94557190 -190.59686279]
[-166.27104187 -198.57888794]
[-166.25056458 -214.97802734]
[-151.90519714 -222.92424011]
[-137.99223328 -214.24316406]
[-138.82412720 -197.86512756]
[-131.55586243 -184.74368286]
[-124.28759766 -171.62223816]
[-117.01933289 -158.50079346]
[-106.83448029 -156.52505493]
[-99.31042480 -149.06439209]
[-97.16036224 -138.46311951]
[-101.35092163 -128.25120544]
[-94.79131317 -114.76152802]
[-79.76174164 -105.80861664]
[-81.05580902 -87.49971771]
[-74.13942719 -74.18943787]
[-67.22303772 -60.87915421]
[-51.93117523 -61.47372437]
[-37.86541367 -55.25923538]
[-27.91273499 -43.44010544]
[-24.14707565 -28.37821579]
[-27.39739227 -13.12108326]
[-15.59911919 -3.85821366]
[-3.80084610 5.40465546]
[7.99742699 14.66752434]
[19.79570007 23.93039322]
[31.59397316 33.19326401]
[43.39224625 42.45613098]
[55.19052124 51.71900177]
[66.98879242 60.98187256]
[78.78706360 70.24474335]
[90.58534241 79.50760651]
[102.38361359 88.77047729]
[116.20329285 94.60284424]
[131.07058716 96.59372711]
[145.96305847 98.38652802]
[160.87808228 99.98092651]
[175.79310608 101.57533264]
[190.70812988 103.16973114]
[205.62315369 104.76413727]
[220.53817749 106.35853577]
[235.30398560 99.22392273]
[248.71166992 108.66670227]
[246.96855164 124.97293854]
[231.86779785 131.36819458]
[218.94377136 121.27355957]
[204.02874756 119.67915344]
[189.11372375 118.08475494]
[174.19869995 116.49034882]
[159.28367615 114.89595032]
[144.36866760 113.30154419]
[137.29284668 115.75069427]
[129.07969666 111.46101379]
[114.21240997 109.47013092]
[109.58097839 115.36927032]
[115.16743469 129.29017639]
[100.31810760 127.16754150]
[95.68666840 133.06668091]
[101.14907837 147.03672791]
[106.61148834 161.00675964]
[112.07389832 174.97680664]
[126.13439941 182.70220947]
[128.71891785 198.53570557]
[117.84483337 210.33120728]
[101.85380554 209.04020691]
[93.01279449 195.65304565]
[98.10385895 180.43922424]
[92.64144897 166.46917725]
[87.17903900 152.49913025]
[81.71662903 138.52908325]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 80]
[5 79]
[6 78]
[7 77]
[8 76]
[9 75]
[10 74]
[11 73]
[12 72]
[13 71]
[14 70]
[15 69]
[18 31]
[19 30]
[20 29]
[21 28]
[22 27]
[36 64]
[37 63]
[38 62]
[41 60]
[42 59]
[44 55]
[45 54]
[46 53]
[47 52]
[81 101]
[82 100]
[83 98]
[84 97]
[85 96]
[86 95]
[87 94]
[88 93]
[105 117]
[106 116]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
