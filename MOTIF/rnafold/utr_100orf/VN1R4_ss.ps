%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:06:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCUCCCGGUAUGUGGCAGUGGGAAUGAUCUUAUCACAGACCGUGGUGGGAGUCCUGGGGAGCUUCUCUGUUCUUCUCCAUUAUCUCUCCUUUUACU\
) } def
/len { sequence length } bind def

/coor [
[95.98728180 159.74426270]
[96.23438263 144.74629211]
[101.74385071 130.79473877]
[111.81078339 119.67462921]
[125.14333344 112.80988312]
[110.44886780 109.79778290]
[97.12364960 114.03218079]
[86.53902435 104.89668274]
[71.84455872 101.88457489]
[57.10503387 99.10135651]
[42.32400131 96.54770660]
[27.54297256 93.99405670]
[12.76194191 91.44039917]
[-2.15400171 96.71536255]
[-13.37825584 86.92427063]
[-28.15928650 84.37062073]
[-42.94031525 81.81696320]
[-57.72134781 79.26331329]
[-62.95146561 81.21092224]
[-67.87751770 80.86534119]
[-71.63802338 78.76457214]
[-73.73336029 75.72079468]
[-88.21213531 71.80096436]
[-102.69091797 67.88113403]
[-117.16969299 63.96130371]
[-131.64846802 60.04147720]
[-146.12724304 56.12164688]
[-161.83123779 60.84570694]
[-173.58732605 49.41215515]
[-169.30187988 33.58284760]
[-153.38337708 29.64162254]
[-142.20741272 41.64287186]
[-127.72863770 45.56269836]
[-113.24986267 49.48252869]
[-98.77108765 53.40235901]
[-84.29231262 57.32218552]
[-69.81353760 61.24201584]
[-55.16769409 64.48228455]
[-40.38666153 67.03593445]
[-25.60563278 69.58959198]
[-10.82460213 72.14324188]
[3.03410268 66.68563080]
[15.31559467 76.65937042]
[30.09662437 79.21302032]
[44.87765503 81.76667786]
[59.65868378 84.32032776]
[66.91349030 82.32199860]
[74.85666656 87.19011688]
[89.55113220 90.20221710]
[102.87635040 85.96781921]
[113.46097565 95.10331726]
[128.15544128 98.11542511]
[143.14817810 97.64892578]
[157.62695312 93.72909546]
[172.10572815 89.80926514]
[177.84764099 73.98976898]
[191.71343994 64.74655914]
[208.19465637 65.51651001]
[220.88188171 75.80429077]
[235.23175049 71.43607330]
[249.58160400 67.06784821]
[263.93148804 62.69963074]
[278.28134155 58.33140945]
[292.63119507 53.96318817]
[306.76171875 48.93043900]
[320.64212036 43.24411392]
[326.51495361 28.57150078]
[341.07543945 22.42599106]
[355.68515015 28.45360756]
[361.67636108 43.07827377]
[355.49462891 57.62342834]
[340.80743408 63.45969772]
[326.32846069 57.12451935]
[312.44805908 62.81084442]
[310.74664307 66.09112549]
[307.27590942 68.64233398]
[302.43081665 69.59655762]
[296.99942017 68.31305695]
[282.64956665 72.68127441]
[268.29968262 77.04949951]
[253.94982910 81.41771698]
[239.59996033 85.78593445]
[225.25009155 90.15415955]
[222.03491211 103.21245575]
[212.67959595 113.02437592]
[199.58058167 116.91976166]
[186.17202759 113.76454163]
[176.02555847 104.28804016]
[161.54678345 108.20787048]
[147.06800842 112.12770081]
[160.80487061 118.15252686]
[171.54266357 128.62629700]
[177.90754700 142.20895386]
[179.08514404 157.16265869]
[174.92481995 171.57415771]
[165.95884705 183.59960938]
[153.33438110 191.70039368]
[138.66664124 194.84007263]
[123.83229828 192.61694336]
[110.72932434 185.31542969]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 52]
[6 51]
[8 49]
[9 48]
[10 46]
[11 45]
[12 44]
[13 43]
[15 41]
[16 40]
[17 39]
[18 38]
[22 37]
[23 36]
[24 35]
[25 34]
[26 33]
[27 32]
[53 90]
[54 89]
[55 88]
[59 83]
[60 82]
[61 81]
[62 80]
[63 79]
[64 78]
[65 74]
[66 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
