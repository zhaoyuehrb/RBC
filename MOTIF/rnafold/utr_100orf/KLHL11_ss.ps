%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUGUCGUACCAACAGCCGCAUCGUUCCGAGGCUGUGGAGGCCGGGCGCAGCGGCGUCAAGAUGGCGGCUGCGGCAGUGGCGGCGGCGGCGGCGGCGGCCGCGGCUGCAUCUCUUCAGGUACUGGAGAUGGAGAGCAUGGAGACGGCCGCCGCCGGCUCGG\
) } def
/len { sequence length } bind def

/coor [
[105.51737976 218.52604675]
[90.45954132 222.74450684]
[76.23438263 216.24998474]
[69.55858612 202.10899353]
[73.58425903 186.99847412]
[86.41060638 178.05314636]
[87.57299805 163.09825134]
[77.72378540 151.98391724]
[78.68956757 136.80096436]
[90.41409302 126.54556274]
[91.57648468 111.59066772]
[81.56026459 122.75647736]
[66.65675354 121.05785370]
[59.41003036 107.92449951]
[65.91956329 94.41057587]
[80.70645142 91.89060974]
[67.43502045 84.89995575]
[54.16359329 77.90930176]
[40.89216614 70.91864777]
[27.62073898 63.92799377]
[20.93082047 63.80115128]
[16.06575775 60.74543381]
[13.97801876 56.40026093]
[0.98763812 48.90026093]
[-12.00274277 41.40026093]
[-24.99312401 33.90026093]
[-38.05561447 26.52656937]
[-51.18898773 19.27988052]
[-64.32236481 12.03319073]
[-79.33335876 16.19345474]
[-92.54923248 8.65719032]
[-96.42289734 -5.67913675]
[-109.55627441 -12.92582607]
[-122.68964386 -20.17251587]
[-135.82302856 -27.41920471]
[-148.95639038 -34.66589355]
[-162.08976746 -41.91258240]
[-175.22314453 -49.15927124]
[-190.23413086 -44.99900818]
[-203.45001221 -52.53527069]
[-207.32368469 -66.87159729]
[-220.45704651 -74.11828613]
[-233.59042358 -81.36497498]
[-246.72380066 -88.61166382]
[-260.12829590 -95.34365082]
[-273.78372192 -101.55081177]
[-287.43917847 -107.75797272]
[-301.09463501 -113.96513367]
[-314.75006104 -120.17229462]
[-331.01092529 -118.04700470]
[-340.76571655 -131.22940063]
[-333.97958374 -146.15858459]
[-317.63348389 -147.47666931]
[-308.54290771 -133.82774353]
[-294.88745117 -127.62058258]
[-281.23202515 -121.41342163]
[-267.57656860 -115.20626068]
[-253.92112732 -108.99909973]
[-251.21627808 -109.89726257]
[-247.98446655 -109.75109863]
[-244.63175964 -108.35123444]
[-241.63345337 -105.64277649]
[-239.47711182 -101.74504089]
[-226.34373474 -94.49835205]
[-213.21035767 -87.25166321]
[-200.07699585 -80.00497437]
[-185.88319397 -84.37209320]
[-172.46086121 -77.21001434]
[-167.97645569 -62.29264450]
[-154.84307861 -55.04595566]
[-141.70970154 -47.79926682]
[-128.57632446 -40.55257797]
[-115.44295502 -33.30588913]
[-102.30958557 -26.05920029]
[-89.17620850 -18.81250954]
[-74.98241425 -23.17963409]
[-61.56007767 -16.01755142]
[-57.07567215 -1.10018241]
[-43.94229889 6.14650631]
[-30.80892563 13.39319515]
[-23.39669037 13.87362862]
[-17.49312401 20.90987968]
[-4.50274277 28.40987968]
[8.48763847 35.90987778]
[21.47801971 43.40987778]
[34.61139297 50.65656662]
[47.88282013 57.64722061]
[61.15424728 64.63787079]
[74.42567444 71.62852478]
[87.69709778 78.61917877]
[118.31838226 87.79239655]
[133.30709839 88.37402344]
[148.29582214 88.95565796]
[163.28454590 89.53728485]
[178.27325439 90.11891937]
[193.26197815 90.70054626]
[208.25070190 91.28218079]
[223.23941040 91.86380768]
[238.22813416 92.44544220]
[253.21685791 93.02706909]
[268.20556641 93.60870361]
[275.79550171 85.73133087]
[286.25912476 83.40675354]
[296.05932617 87.17176819]
[302.01947021 95.54560089]
[316.97436523 96.70799255]
[331.33261108 90.06336212]
[343.42202759 98.76366425]
[358.37692261 99.92604828]
[373.33181763 101.08843994]
[388.29727173 102.10576630]
[403.27191162 102.97793579]
[418.24652100 103.85011292]
[433.22116089 104.72228241]
[448.19577026 105.59445190]
[463.17041016 106.46662903]
[478.14501953 107.33879852]
[485.97909546 94.19018555]
[499.03231812 86.19822693]
[514.30523682 85.19941711]
[528.28814697 91.42327118]
[537.76794434 103.43959808]
[540.56622314 118.48712921]
[536.03991699 133.10806274]
[525.22924805 143.94259644]
[510.61831665 148.50105286]
[495.56466675 145.73591614]
[483.52749634 136.28260803]
[477.27285767 122.31342316]
[462.29821777 121.44124603]
[447.32360840 120.56907654]
[432.34896851 119.69690704]
[417.37435913 118.82472992]
[402.39974976 117.95256042]
[387.42510986 117.08039093]
[380.53079224 119.84449005]
[372.16943359 116.04333496]
[357.21453857 114.88094330]
[342.25964355 113.71855927]
[328.97106934 120.44632721]
[315.81198120 111.66287994]
[300.85708618 110.50049591]
[284.12045288 120.12678528]
[267.62393188 108.59741974]
[252.63522339 108.01579285]
[237.64649963 107.43415833]
[222.65779114 106.85253143]
[207.66906738 106.27089691]
[192.68034363 105.68927002]
[177.69163513 105.10763550]
[162.70291138 104.52600861]
[147.71418762 103.94437408]
[132.72546387 103.36274719]
[117.73674774 102.78111267]
[106.53137207 112.75305176]
[105.36898804 127.70794678]
[115.36804962 139.65184021]
[113.97618866 154.80166626]
[102.52788544 164.26063538]
[101.36550140 179.21553040]
[112.65558624 190.03533936]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 160]
[7 159]
[10 156]
[11 155]
[16 90]
[17 89]
[18 88]
[19 87]
[20 86]
[23 85]
[24 84]
[25 83]
[26 82]
[27 80]
[28 79]
[29 78]
[32 75]
[33 74]
[34 73]
[35 72]
[36 71]
[37 70]
[38 69]
[41 66]
[42 65]
[43 64]
[44 63]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
[91 154]
[92 153]
[93 152]
[94 151]
[95 150]
[96 149]
[97 148]
[98 147]
[99 146]
[100 145]
[101 144]
[105 142]
[106 141]
[108 139]
[109 138]
[110 137]
[111 135]
[112 134]
[113 133]
[114 132]
[115 131]
[116 130]
[117 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
