%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:10:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGUUUCAGUCCUGGAAAGACAAGCAUCAUGCCUCUGACCAGUGCCUUCAGGGCUGUGGACAACGACCCUGGGAUCAUUGUCUGGAGAAUAGAGAAAAUGGAGCUGGCGCUGGUGCCUGUGAGCGCCC\
) } def
/len { sequence length } bind def

/coor [
[-82.11679077 328.11071777]
[-92.06362915 339.33837891]
[-102.01047516 350.56604004]
[-111.95731354 361.79370117]
[-121.90415192 373.02136230]
[-131.85099792 384.24902344]
[-141.79783630 395.47668457]
[-143.53381348 402.02664185]
[-147.73088074 406.04611206]
[-152.50674438 406.99154663]
[-162.98442078 417.72552490]
[-173.46208191 428.45950317]
[-171.73112488 444.00097656]
[-180.43798828 456.99038696]
[-195.47157288 461.29449463]
[-209.73347473 454.88107300]
[-216.48965454 440.77828979]
[-212.55006409 425.64511108]
[-199.77484131 416.62692261]
[-184.19607544 417.98184204]
[-173.71839905 407.24786377]
[-163.24073792 396.51385498]
[-153.02549744 385.52984619]
[-143.07865906 374.30218506]
[-133.13182068 363.07452393]
[-123.18497467 351.84686279]
[-113.23813629 340.61920166]
[-103.29129028 329.39154053]
[-93.34445190 318.16387939]
[-95.10150909 301.48419189]
[-84.07202148 288.40570068]
[-66.66366577 287.27880859]
[-56.99103165 275.81408691]
[-47.45763016 264.23330688]
[-38.06485367 252.53819275]
[-28.67207527 240.84307861]
[-32.73088837 220.90014648]
[-20.76235199 204.08471680]
[-0.01884846 201.31210327]
[8.20133877 188.76504517]
[16.42152596 176.21798706]
[24.64171410 163.67094421]
[32.86190033 151.12388611]
[41.08208847 138.57684326]
[49.30227661 126.02978516]
[57.52246475 113.48273468]
[65.74265289 100.93567657]
[68.62454987 86.21512604]
[65.74265289 71.49457550]
[62.86075211 56.77402496]
[59.97885132 42.05347061]
[57.09695053 27.33292007]
[54.21504974 12.61236858]
[51.33314896 -2.10818338]
[41.08861160 -14.16471767]
[46.23651886 -28.14142418]
[43.35461807 -42.86197662]
[40.47271729 -57.58252716]
[28.01641083 -67.69291687]
[28.29873085 -83.73348999]
[41.10310364 -93.39928436]
[56.60711288 -89.27553558]
[62.91740417 -74.52562714]
[55.19326782 -60.46442795]
[58.07516861 -45.74387741]
[60.95706940 -31.02332497]
[70.99547577 -20.01970291]
[66.05370331 -4.99008417]
[68.93560028 9.73046780]
[71.81750488 24.45101929]
[74.69940186 39.17156982]
[77.58130646 53.89212418]
[80.46320343 68.61267853]
[83.34510803 83.33322906]
[94.11579895 78.56957245]
[105.14894867 79.75949097]
[113.55344391 85.91527557]
[127.30532837 79.92480469]
[141.05720520 73.93433380]
[154.80909729 67.94387054]
[164.37098694 55.33907318]
[179.12924194 57.34974670]
[192.88113403 51.35927963]
[206.63301086 45.36880875]
[208.99502563 30.12333488]
[219.24148560 18.59018898]
[234.10279846 14.44955540]
[248.83677673 19.02269554]
[258.74185181 30.85033607]
[260.65734863 46.15832138]
[253.97204590 60.06192780]
[240.81919861 68.12456512]
[225.39582825 67.77347565]
[212.62348938 59.12069321]
[198.87159729 65.11116028]
[185.11972046 71.10163116]
[176.54145813 83.27794647]
[160.79956055 81.69575500]
[147.04768372 87.68621826]
[133.29579163 93.67668915]
[119.54391479 99.66716003]
[118.26544189 108.66362762]
[112.93635559 116.39635468]
[104.45237732 121.08950043]
[94.46180725 121.52243805]
[85.04686737 117.33444214]
[78.28970337 109.15586853]
[70.06951904 121.70291901]
[61.84933090 134.24996948]
[53.62914276 146.79702759]
[45.40895462 159.34407043]
[37.18876648 171.89112854]
[28.96857834 184.43818665]
[20.74839211 196.98522949]
[12.52820396 209.53228760]
[17.27760696 218.25297546]
[18.45874214 228.05381775]
[15.94701672 237.54032898]
[10.14019203 245.37879944]
[1.89609504 250.48374939]
[-7.59389734 252.16821289]
[-16.97695923 250.23585510]
[-26.36973763 261.93096924]
[-35.76251602 273.62609863]
[-38.73984528 282.37149048]
[-45.52629471 285.48672485]
[-55.19892883 296.95144653]
[-52.52320862 310.21383667]
[-57.92584610 322.40472412]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[4 26]
[5 25]
[6 24]
[7 23]
[10 22]
[11 21]
[12 20]
[32 127]
[33 126]
[34 124]
[35 123]
[36 122]
[39 115]
[40 114]
[41 113]
[42 112]
[43 111]
[44 110]
[45 109]
[46 108]
[47 107]
[48 74]
[49 73]
[50 72]
[51 71]
[52 70]
[53 69]
[54 68]
[56 66]
[57 65]
[58 64]
[77 101]
[78 100]
[79 99]
[80 98]
[82 96]
[83 95]
[84 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
