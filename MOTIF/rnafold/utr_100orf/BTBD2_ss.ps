%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:30:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGGCGGGUGGGAGCGGCGGGCGUGCGUCGUGCCCGCCGGGGGUCGGGGUCGGCCCGGGCACGGGGGGCAGUCCCGGGCCCAGCGCCAACGCCGCCG\
) } def
/len { sequence length } bind def

/coor [
[90.49893951 309.65975952]
[82.98449707 295.08355713]
[92.07703400 281.43594360]
[92.54353333 266.44317627]
[93.01003265 251.45043945]
[93.47653198 236.45770264]
[93.94302368 221.46495056]
[94.40952301 206.47221375]
[94.87602234 191.47946167]
[94.87602234 176.47946167]
[94.40952301 161.48672485]
[93.94302368 146.49398804]
[93.47653198 131.50123596]
[84.87271118 128.39099121]
[77.49236298 122.98455811]
[71.93238068 115.71916962]
[68.64244843 107.18244934]
[67.88864899 98.06482697]
[53.53878784 93.69660950]
[39.18891907 89.32838440]
[24.83905411 84.96016693]
[10.48918915 80.59194183]
[-3.86067700 76.22372437]
[-18.21054268 71.85550690]
[-32.56040955 67.48728180]
[-46.91027451 63.11906433]
[-61.26013947 58.75084305]
[-75.61000824 54.38262177]
[-92.52341461 55.55430984]
[-98.33141327 39.62623596]
[-84.63362885 29.63588905]
[-71.24178314 40.03275681]
[-56.89191818 44.40097809]
[-42.54205322 48.76919556]
[-28.19218826 53.13741684]
[-13.84232235 57.50563812]
[0.50754368 61.87385941]
[14.85740948 66.24208069]
[29.20727539 70.61029816]
[43.55714035 74.97852325]
[57.90700531 79.34674072]
[72.25687408 83.71496582]
[85.03263855 68.46407318]
[105.76447296 62.79848099]
[106.69701385 47.82749939]
[107.62956238 32.85651398]
[108.56210327 17.88553047]
[109.49465179 2.91454649]
[110.42719269 -12.05643749]
[102.64588928 -26.49192619]
[111.48583984 -40.30450439]
[127.85326385 -39.28497314]
[134.91075134 -24.48214340]
[125.39817810 -11.12389278]
[124.46562958 3.84709096]
[123.53308868 18.81807518]
[122.60054016 33.78905869]
[121.66799927 48.76004410]
[120.73545074 63.73102570]
[132.20944214 73.39268494]
[146.80311584 69.92504120]
[161.39680481 66.45738983]
[175.99047852 62.98974991]
[187.62814331 52.27176285]
[201.79934692 56.85723114]
[216.39302063 53.38958740]
[230.98669434 49.92194366]
[245.58036804 46.45429611]
[260.17404175 42.98665237]
[269.77877808 30.13640785]
[285.81781006 29.77772713]
[295.98739624 42.18576050]
[292.48629761 57.84212494]
[278.00024414 64.73659515]
[263.64169312 57.58032990]
[249.04801941 61.04797363]
[234.45434570 64.51561737]
[219.86065674 67.98326111]
[205.26698303 71.45091248]
[194.67315674 81.92086792]
[179.45811462 77.58342743]
[164.86444092 81.05107117]
[150.27076721 84.51871490]
[135.67709351 87.98635864]
[134.97039795 107.75611115]
[124.60974121 123.45237732]
[108.46927643 131.03474426]
[108.93576813 146.02748108]
[109.40226746 161.02023315]
[109.86876678 176.01296997]
[113.15946960 182.07847595]
[112.80702209 187.97640991]
[109.86876678 191.94596863]
[109.40226746 206.93870544]
[108.93576813 221.93145752]
[108.46927643 236.92419434]
[108.00277710 251.91694641]
[107.53627777 266.90969849]
[107.06977844 281.90243530]
[115.29626465 296.08892822]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 99]
[4 98]
[5 97]
[6 96]
[7 95]
[8 94]
[9 93]
[10 90]
[11 89]
[12 88]
[13 87]
[18 42]
[19 41]
[20 40]
[21 39]
[22 38]
[23 37]
[24 36]
[25 35]
[26 34]
[27 33]
[28 32]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
[60 84]
[61 83]
[62 82]
[63 81]
[65 79]
[66 78]
[67 77]
[68 76]
[69 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
