%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:57:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUGCUCCGUACGGAAGUGUGCUUUGGCGCACCGGAAGCCGACUCAACAGAGCUAUGGCGGGUUUGACUGUGAGAGACCCAGCGGUGGAUCGUUCUCUACGUUCUGUGUUCGUGGGGAACAUUCCUUAUGAAGCUACUGAAGAGCAGUUGAAGG\
) } def
/len { sequence length } bind def

/coor [
[74.71153259 320.17425537]
[87.86738586 312.96847534]
[102.86738586 312.97927856]
[116.01194000 320.20321655]
[110.94517517 306.08486938]
[105.87841034 291.96649170]
[94.29681396 282.60083008]
[96.91786194 266.99826050]
[91.85109711 252.87989807]
[86.78433228 238.76153564]
[81.71756744 224.64318848]
[70.13597107 215.27751160]
[72.75701904 199.67492676]
[67.69025421 185.55657959]
[62.62348938 171.43821716]
[57.55672836 157.31987000]
[43.33858490 152.54028320]
[30.77234268 160.73110962]
[18.20610237 168.92192078]
[5.63985968 177.11274719]
[-6.92638254 185.30357361]
[-19.49262428 193.49438477]
[-26.42642593 208.35556030]
[-42.78477859 209.51155090]
[-51.73961258 195.77317810]
[-44.07896042 181.27330017]
[-27.68344688 180.92814636]
[-15.11720467 172.73733521]
[-2.55096245 164.54650879]
[10.01527977 156.35568237]
[22.58152199 148.16485596]
[35.14776230 139.97404480]
[30.36817741 125.75589752]
[15.40590382 126.81909180]
[0.44363037 127.88228607]
[-14.92710209 135.03610229]
[-26.05637550 122.24642944]
[-16.84742355 108.01155853]
[-0.61956525 112.92001343]
[14.34270763 111.85681915]
[29.30498123 110.79362488]
[30.36550331 103.36898804]
[33.54706573 81.09506226]
[19.48078537 75.88548279]
[5.41450310 70.67590332]
[-10.65152264 73.96450043]
[-21.32862282 61.51734924]
[-15.63311291 46.13901138]
[0.57595515 43.64940643]
[10.62408161 56.60962296]
[24.69036293 61.81919861]
[38.75664520 67.02877808]
[49.73270798 56.80498123]
[45.53324509 42.40482330]
[41.33378601 28.00466728]
[37.13432312 13.60451126]
[25.84288025 2.52236819]
[29.70759010 -11.86211300]
[25.50812721 -26.26226997]
[21.16295052 -40.61912918]
[16.67250252 -54.93121719]
[12.18205643 -69.24330902]
[7.69160938 -83.55539703]
[3.20116258 -97.86748505]
[-1.28928435 -112.17957306]
[-16.19611549 -116.15322876]
[-26.57132339 -127.57069397]
[-29.10421371 -142.78871155]
[-22.98655319 -156.95126343]
[-10.17046261 -165.53912354]
[5.25448847 -165.81195068]
[18.36625481 -157.68266296]
[24.98091888 -143.74531555]
[22.98776627 -128.44725037]
[13.02280426 -116.67002106]
[17.51325226 -102.35793304]
[22.00369835 -88.04584503]
[26.49414444 -73.73375702]
[30.98459244 -59.42166519]
[35.47504044 -45.10957718]
[40.50776291 -39.63679886]
[39.90828323 -30.46173096]
[44.10774612 -16.06157494]
[55.09881592 -6.00942707]
[51.53448105 9.40504932]
[55.73394012 23.80520630]
[59.93340302 38.20536423]
[64.13286591 52.60551834]
[86.68312836 49.08855820]
[106.21809387 54.61182785]
[119.65311432 66.31389618]
[125.61115265 80.50319672]
[139.33486938 74.44847870]
[153.05857849 68.39375305]
[166.78230286 62.33902359]
[180.50601196 56.28430176]
[194.22972107 50.22957611]
[207.95343018 44.17485046]
[221.67715454 38.12012482]
[235.40086365 32.06540298]
[249.12457275 26.01067734]
[251.41525269 10.75432205]
[261.60766602 -0.82662386]
[276.44943237 -5.03672314]
[291.20465088 -0.53254884]
[301.16494751 11.24863338]
[303.15200806 26.54749298]
[296.53179932 40.48221588]
[283.41680908 48.60628510]
[267.99197388 48.32733917]
[255.17930603 39.73439026]
[241.45558167 45.78911591]
[227.73187256 51.84383774]
[214.00816345 57.89856339]
[200.28445435 63.95328903]
[186.56072998 70.00801086]
[172.83702087 76.06273651]
[159.11331177 82.11746216]
[145.38958740 88.17218781]
[131.66587830 94.22691345]
[126.88608551 137.09298706]
[71.67507935 152.25309753]
[76.74184418 166.37145996]
[81.80860901 180.48980713]
[86.87537384 194.60816956]
[98.81938171 204.98367310]
[95.83592224 219.57641602]
[100.90268707 233.69477844]
[105.96945190 247.81312561]
[111.03621674 261.93148804]
[122.98022461 272.30697632]
[119.99676514 286.89974976]
[125.06352997 301.01809692]
[130.13029480 315.13644409]
[138.67118835 322.84182739]
[138.47433472 333.05664062]
[146.01817322 346.02160645]
[153.56202698 358.98660278]
[161.10586548 371.95156860]
[176.18632507 377.42504883]
[181.17272949 392.67352295]
[172.23994446 405.99960327]
[156.24041748 407.18069458]
[145.44763184 395.31076050]
[148.14088440 379.49539185]
[140.59704590 366.53042603]
[133.05320740 353.56546021]
[125.50936890 340.60049438]
[122.57696533 355.31106567]
[112.93003845 366.79742432]
[98.94731140 372.22729492]
[84.07664490 370.26174927]
[71.98484802 361.38546753]
[65.65350342 347.78717041]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 134]
[5 133]
[6 132]
[8 130]
[9 129]
[10 128]
[11 127]
[13 125]
[14 124]
[15 123]
[16 122]
[17 32]
[18 31]
[19 30]
[20 29]
[21 28]
[22 27]
[33 41]
[34 40]
[35 39]
[43 52]
[44 51]
[45 50]
[53 88]
[54 87]
[55 86]
[56 85]
[58 83]
[59 82]
[60 80]
[61 79]
[62 78]
[63 77]
[64 76]
[65 75]
[92 120]
[93 119]
[94 118]
[95 117]
[96 116]
[97 115]
[98 114]
[99 113]
[100 112]
[101 111]
[136 148]
[137 147]
[138 146]
[139 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
