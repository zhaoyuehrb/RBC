%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:00:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAUCAAGCUGCGCGGGGGCAUAGACGUCCGGGUCGGGCGCCGCGGGGCGGAAGACGAGGGCGGCGAGGUCGGGUUCCGGGCGCUUGGAGAAGAUGGUGCUGCGGCGGCUGCUGGCCGCCCUGCUGCACAGCCCGCAGCUGGUGGAACGUCUGUCAGAGUCGCGGCCUAUCCGACGUGCGGCGCAGCUCACGG\
) } def
/len { sequence length } bind def

/coor [
[-10.42211723 682.84210205]
[-25.20773125 679.19439697]
[-37.22743607 669.84313965]
[-44.39874268 656.40838623]
[-45.47918320 641.21783447]
[-40.28155899 626.90338135]
[-29.70639610 615.94500732]
[-15.58590126 610.24133301]
[-15.10266304 595.24914551]
[-14.61942387 580.25689697]
[-14.13618565 565.26470947]
[-13.65294743 550.27246094]
[-13.16970921 535.28027344]
[-12.68647099 520.28808594]
[-12.20323277 505.29583740]
[-14.73665524 504.44650269]
[-17.18633270 503.37939453]
[-19.53359222 502.10266113]
[-30.18282890 512.66644287]
[-40.83206558 523.23028564]
[-51.48130035 533.79406738]
[-51.29431534 549.59722900]
[-62.39625168 560.84545898]
[-78.20053101 560.86535645]
[-89.33074951 549.64508057]
[-89.18354797 533.84149170]
[-77.84626007 522.83056641]
[-62.04509735 523.14483643]
[-51.39585876 512.58099365]
[-40.74662399 502.01721191]
[-30.09738922 491.45343018]
[-34.22034454 470.70938110]
[-23.87067986 452.02725220]
[-3.70949817 444.37396240]
[-0.11976316 429.80984497]
[3.46997190 415.24569702]
[7.05970669 400.68157959]
[10.64944172 386.11746216]
[14.23917675 371.55331421]
[7.50469589 353.43606567]
[21.65914345 339.09509277]
[24.77781868 324.42288208]
[27.89649391 309.75067139]
[31.01516914 295.07846069]
[34.13384628 280.40625000]
[37.25252151 265.73403931]
[40.37119675 251.06181335]
[29.21102333 241.19691467]
[24.45544624 226.97579956]
[27.47660828 212.18597412]
[37.56124878 200.81948853]
[52.07592010 195.99542236]
[55.19459534 181.32321167]
[58.19498062 166.62635803]
[61.07688141 151.90580750]
[63.95878220 137.18524170]
[66.84068298 122.46469879]
[69.72257996 107.74414062]
[69.60175323 92.74462891]
[66.48307800 78.07241821]
[63.36440277 63.40020370]
[60.24572754 48.72798920]
[57.12705231 34.05577469]
[54.00837708 19.38356018]
[50.88970184 4.71134710]
[47.77102661 -9.96086693]
[37.33358765 -21.85079765]
[42.25566101 -35.90862274]
[39.13698578 -50.58083725]
[35.78234482 -65.20090485]
[32.19260788 -79.76502991]
[28.60287476 -94.32916260]
[25.01313972 -108.89328766]
[21.87224770 -111.93507385]
[20.05378914 -115.46508789]
[19.54833412 -119.00501251]
[20.19124603 -122.12915802]
[21.69352150 -124.51085663]
[19.04914284 -139.27592468]
[16.40476608 -154.04100037]
[13.64153671 -168.78428650]
[10.75963593 -183.50483704]
[7.87773466 -198.22538757]
[4.99583387 -212.94593811]
[2.11393332 -227.66648865]
[-0.76796746 -242.38703918]
[-15.32260799 -247.29194641]
[-25.46280098 -258.82763672]
[-28.46088600 -273.89105225]
[-23.51039314 -288.43026733]
[-11.94297886 -298.53424072]
[3.12977886 -301.48510742]
[17.65338516 -296.48904419]
[27.72106171 -284.89001465]
[30.62465477 -269.80807495]
[25.58311272 -255.30021667]
[13.95258427 -245.26895142]
[16.83448601 -230.54838562]
[19.71638680 -215.82783508]
[22.59828758 -201.10728455]
[25.48018837 -186.38673401]
[28.36208916 -171.66618347]
[32.73831558 -165.69799805]
[31.16983414 -156.68537903]
[33.81421280 -141.92030334]
[36.45859146 -127.15523529]
[39.57726669 -112.48302460]
[43.16699982 -97.91889191]
[46.75673676 -83.35476685]
[50.34646988 -68.79064178]
[53.90885544 -65.59150696]
[55.49125290 -60.11572266]
[53.80919647 -53.69951248]
[56.92787552 -39.02729797]
[67.14224243 -28.18682289]
[62.44324112 -13.07954216]
[65.56191254 1.59267151]
[68.68058777 16.26488495]
[71.79926300 30.93709946]
[74.91793823 45.60931396]
[78.03661346 60.28152847]
[81.15528870 74.95374298]
[84.27396393 89.62595367]
[97.73683167 82.90843201]
[110.36517334 88.28530884]
[124.47428131 83.19287109]
[138.58340454 78.10043335]
[152.69250488 73.00799561]
[159.71343994 67.14334106]
[167.07014465 67.94917297]
[181.25947571 63.08469391]
[195.44879150 58.22021866]
[209.63812256 53.35574341]
[217.95339966 39.63584518]
[233.88233948 37.72576523]
[245.20561218 49.09075546]
[243.23698425 65.01256561]
[229.48660278 73.27734375]
[214.50259399 67.54506683]
[200.31326294 72.40953827]
[186.12394714 77.27401733]
[171.93463135 82.13849640]
[157.78494263 87.11711121]
[143.67582703 92.20954895]
[129.56672668 97.30198669]
[115.45760345 102.39441681]
[109.72002411 113.58942413]
[96.89982605 117.50122833]
[84.44313049 110.62604523]
[81.56123352 125.34659576]
[78.67932892 140.06715393]
[75.79743195 154.78770447]
[72.91552734 169.50825500]
[74.33861542 178.54498291]
[69.86680603 184.44189453]
[66.74813080 199.11410522]
[78.04582214 209.42475891]
[82.63543701 223.91033936]
[79.37983704 238.65032959]
[69.25114441 249.70771790]
[55.04341125 254.18049622]
[51.92473602 268.85269165]
[48.80605698 283.52493286]
[45.68738174 298.19714355]
[42.56870651 312.86935425]
[39.45003128 327.54156494]
[36.33135605 342.21377563]
[42.78156281 350.99270630]
[43.31683731 361.65332031]
[38.00160980 370.65557861]
[28.80330467 375.14306641]
[25.21356964 389.70718384]
[21.62383461 404.27130127]
[18.03409958 418.83544922]
[14.44436455 433.39956665]
[10.85462952 447.96368408]
[20.60360527 456.13034058]
[26.29111290 467.43692017]
[27.02925491 480.01074219]
[22.74548912 491.79037476]
[14.18659306 500.86392212]
[2.78898120 505.77908325]
[2.30574298 520.77130127]
[1.82250464 535.76348877]
[1.33926630 550.75573730]
[0.85602802 565.74792480]
[0.37278971 580.74017334]
[-0.11044861 595.73236084]
[-0.59368694 610.72460938]
[13.13019371 617.32574463]
[22.97770691 628.94238281]
[27.24271011 643.56182861]
[25.18626785 658.65130615]
[17.16467094 671.59631348]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 189]
[9 188]
[10 187]
[11 186]
[12 185]
[13 184]
[14 183]
[15 182]
[18 31]
[19 30]
[20 29]
[21 28]
[34 176]
[35 175]
[36 174]
[37 173]
[38 172]
[39 171]
[41 167]
[42 166]
[43 165]
[44 164]
[45 163]
[46 162]
[47 161]
[52 156]
[53 155]
[54 153]
[55 152]
[56 151]
[57 150]
[58 149]
[59 123]
[60 122]
[61 121]
[62 120]
[63 119]
[64 118]
[65 117]
[66 116]
[68 114]
[69 113]
[70 110]
[71 109]
[72 108]
[73 107]
[78 106]
[79 105]
[80 104]
[81 102]
[82 101]
[83 100]
[84 99]
[85 98]
[86 97]
[125 146]
[126 145]
[127 144]
[128 143]
[130 142]
[131 141]
[132 140]
[133 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
