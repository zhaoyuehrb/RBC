%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:53:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCGCCAGCUCCUCUGGGGGUGACAGGCAAGUGAGACGUGCUCAGAGCUCCGAUGCCAAGGCCAGGGACCAUGGCGCUGUGUCUGCUGACCUUGGUCCUCUCGCUCUUGCCCCCACAAGCUGCUGCAGAACAGGACCUCAGUGUGAACAGGG\
) } def
/len { sequence length } bind def

/coor [
[247.36062622 542.95306396]
[256.74182129 527.49542236]
[250.51060486 513.85095215]
[244.27938843 500.20645142]
[230.27760315 495.25814819]
[223.76388550 481.50946045]
[229.04904175 466.85665894]
[222.81782532 453.21218872]
[216.58659363 439.56768799]
[210.35537720 425.92321777]
[196.35359192 420.97491455]
[189.83987427 407.22625732]
[195.12503052 392.57342529]
[188.89381409 378.92895508]
[174.07760620 369.57232666]
[175.90237427 351.27682495]
[169.39411926 337.76226807]
[162.88586426 324.24774170]
[156.37760925 310.73321533]
[149.86935425 297.21868896]
[143.36109924 283.70413208]
[140.10905457 282.20031738]
[137.44424438 279.01397705]
[136.16436768 274.44839478]
[136.89660645 269.15805054]
[131.22711182 255.27078247]
[125.55760956 241.38348389]
[119.88810730 227.49620056]
[115.85617065 224.83540344]
[113.48645020 219.58650208]
[114.28337860 212.92498779]
[109.18503571 198.81800842]
[104.08669281 184.71102905]
[98.98835754 170.60404968]
[93.89001465 156.49707031]
[88.79167938 142.39007568]
[83.69333649 128.28309631]
[72.76718903 118.00597382]
[58.37479782 113.77998352]
[40.61886597 118.55309296]
[28.97927856 105.45398712]
[14.50367546 101.52246857]
[0.02807145 97.59094238]
[-16.84208488 99.27443695]
[-23.12991524 83.52960968]
[-9.74104786 73.12891388]
[3.95959663 83.11533356]
[18.43519974 87.04685974]
[32.91080475 90.97838593]
[43.59777451 85.23132324]
[55.71792221 88.43289948]
[62.60078430 99.38758850]
[76.99317932 103.61357880]
[79.14416504 94.16162872]
[84.70492554 87.07266998]
[92.15893555 83.35976410]
[91.85295105 68.36288452]
[91.54697418 53.36600876]
[91.24099731 38.36912918]
[90.93502045 23.37225151]
[90.62904358 8.37537289]
[90.32306671 -6.62150621]
[82.30587006 -20.26097679]
[89.78194427 -33.14343262]
[89.47596741 -48.14030838]
[89.16998291 -63.13718796]
[88.71105957 -78.13016510]
[88.09922791 -93.11768341]
[87.48740387 -108.10520172]
[86.87557220 -123.09272003]
[86.11090851 -138.07321167]
[85.19348145 -153.04513550]
[73.19101715 -163.32698059]
[72.05767822 -179.09057617]
[82.46584320 -190.98367310]
[98.24054718 -191.95028687]
[110.02292633 -181.41696167]
[110.82270813 -165.63291931]
[100.16539764 -153.96255493]
[101.08282471 -138.99064636]
[104.65254211 -132.46737671]
[101.86309052 -123.70454407]
[102.47492218 -108.71702576]
[103.08674622 -93.72951508]
[103.69857788 -78.74199677]
[107.13449097 -72.14727783]
[104.16686249 -63.44316864]
[104.47284698 -48.44628906]
[104.77882385 -33.44940948]
[112.77413177 -20.88261414]
[105.31994629 -6.92748451]
[105.62592316 8.06939411]
[105.93190002 23.06627274]
[106.23787689 38.06315231]
[106.54385376 53.06003189]
[106.84983063 68.05690765]
[107.15580750 83.05378723]
[119.51844788 95.51834106]
[116.28453064 114.27817535]
[97.80032349 123.18476105]
[102.89865875 137.29174805]
[107.99700165 151.39872742]
[113.09533691 165.50570679]
[118.19367981 179.61268616]
[123.29201508 193.71966553]
[128.39035034 207.82664490]
[133.77539062 221.82670593]
[139.44490051 235.71398926]
[145.11439514 249.60127258]
[150.78390503 263.48855591]
[156.87562561 277.19589233]
[163.38388062 290.71041870]
[169.89213562 304.22494507]
[176.40039062 317.73950195]
[182.90866089 331.25402832]
[189.41691589 344.76855469]
[201.34434509 349.78009033]
[206.47261047 361.21899414]
[202.53828430 372.69772339]
[208.76951599 386.34222412]
[223.30441284 391.94351196]
[229.42939758 405.86972046]
[223.99984741 419.69198608]
[230.23107910 433.33648682]
[236.46229553 446.98095703]
[242.69352722 460.62542725]
[257.22842407 466.22671509]
[263.35339355 480.15292358]
[257.92385864 493.97521973]
[264.15509033 507.61968994]
[270.38632202 521.26416016]
[282.92642212 522.12182617]
[293.83688354 528.21582031]
[301.05929565 538.32556152]
[303.26135254 550.47985840]
[300.08236694 562.34100342]
[292.19058228 571.65441895]
[297.86010742 585.54168701]
[303.52960205 599.42895508]
[308.58523560 603.83929443]
[310.34387207 609.32330322]
[309.13433838 614.00018311]
[314.23266602 628.10717773]
[327.11312866 638.25732422]
[324.49560547 654.44622803]
[309.07278442 660.02014160]
[296.71032715 649.24505615]
[300.12567139 633.20550537]
[295.02734375 619.09851074]
[289.64230347 605.09844971]
[283.97280884 591.21118164]
[278.30331421 577.32391357]
[261.01651001 573.95361328]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 131]
[3 130]
[4 129]
[7 126]
[8 125]
[9 124]
[10 123]
[13 120]
[14 119]
[16 116]
[17 115]
[18 114]
[19 113]
[20 112]
[21 111]
[25 110]
[26 109]
[27 108]
[28 107]
[31 106]
[32 105]
[33 104]
[34 103]
[35 102]
[36 101]
[37 100]
[38 53]
[39 52]
[41 49]
[42 48]
[43 47]
[56 97]
[57 96]
[58 95]
[59 94]
[60 93]
[61 92]
[62 91]
[64 89]
[65 88]
[66 87]
[67 85]
[68 84]
[69 83]
[70 82]
[71 80]
[72 79]
[137 152]
[138 151]
[139 150]
[142 149]
[143 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
