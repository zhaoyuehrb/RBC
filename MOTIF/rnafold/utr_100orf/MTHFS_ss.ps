%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:34:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACCGAACCCGAGGGCGCCCAGGGCGCCGAGGGCGGGACUGGACUCGGCUUGGGCGUGAGAUGGCGGCGGCAGCGGUGAGCAGCGCCAAGCGGAGCCUGCGGGGAGAGCUGAAGCAGCGUCUGCGGGCGAUGAGUGCCGAGGAGCGGCUACGCCAGUCCC\
) } def
/len { sequence length } bind def

/coor [
[53.01955032 209.84550476]
[61.57080841 222.16929626]
[62.49158096 237.14100647]
[55.51490402 250.41979980]
[42.66356659 258.15563965]
[27.66365242 258.10562134]
[14.86417961 250.28427124]
[7.97619057 236.95927429]
[8.99594688 221.99633789]
[-2.11221361 232.07646179]
[-13.22037411 242.15657043]
[-12.32384300 255.62522888]
[-19.26063538 266.97714233]
[-31.29702377 272.16970825]
[-43.93320465 269.50650024]
[-55.23474121 279.36932373]
[-66.53627777 289.23211670]
[-77.83782196 299.09494019]
[-89.13935852 308.95776367]
[-100.44089508 318.82058716]
[-108.39907074 333.79067993]
[-124.98716736 330.28765869]
[-126.21308136 313.37808228]
[-110.30371857 307.51904297]
[-99.00217438 297.65621948]
[-87.70063782 287.79342651]
[-76.39910126 277.93060303]
[-65.09756470 268.06777954]
[-53.79602432 258.20495605]
[-53.38861084 241.41427612]
[-40.73047256 229.86862183]
[-23.30049133 231.04841614]
[-12.19233131 220.96829224]
[-1.08417141 210.88818359]
[1.92341948 200.84892273]
[12.76091003 196.21325684]
[22.17809105 184.53778076]
[31.59527397 172.86230469]
[41.01245499 161.18682861]
[50.42963791 149.51135254]
[59.84682083 137.83589172]
[69.26399994 126.16040802]
[78.68118286 114.48493958]
[71.53549957 91.44654083]
[87.19368744 68.86094666]
[117.98619080 66.96120453]
[112.04499054 53.18796158]
[99.47451019 43.58100891]
[101.53800964 28.83003616]
[95.59680939 15.05679417]
[89.65561676 1.28355265]
[83.71441650 -12.48968887]
[77.77322388 -26.26292992]
[71.83202362 -40.03617096]
[65.52870941 -46.71667862]
[65.91203308 -54.13457108]
[60.23904037 -68.02043152]
[54.56604004 -81.90628815]
[40.41067123 -82.23231506]
[27.49158478 -87.92015076]
[17.75239372 -98.07788849]
[12.64447117 -111.14393616]
[12.91071415 -125.12701416]
[18.47768021 -137.90960693]
[28.47172737 -147.56866455]
[23.06906128 -161.56192017]
[10.88054562 -171.64906311]
[13.51446724 -186.30894470]
[8.11180115 -200.30220032]
[-4.98546934 -210.17100525]
[-2.71916771 -226.41281128]
[12.57932949 -232.31941223]
[25.17223930 -221.81462097]
[22.10505676 -205.70486450]
[27.50772285 -191.71160889]
[39.30980301 -182.62533569]
[37.06231689 -166.96458435]
[42.46498489 -152.97132874]
[58.39257812 -152.00224304]
[72.35960388 -144.16600037]
[81.55405426 -130.98228455]
[84.09959412 -115.05307770]
[79.43828583 -99.54924774]
[68.45189667 -87.57928467]
[74.12490082 -73.69342804]
[79.79789734 -59.80756760]
[85.60526276 -45.97736740]
[91.54646301 -32.20412827]
[97.48765564 -18.43088531]
[103.42885590 -4.65764380]
[109.37004852 9.11559772]
[115.31124878 22.88883972]
[127.45677948 31.51063728]
[125.81822968 47.24676514]
[131.75942993 61.02000809]
[145.53266907 66.96120453]
[159.62806702 61.83090210]
[173.72344971 56.70059967]
[187.81883240 51.57029724]
[201.91423035 46.43999481]
[216.00961304 41.30969238]
[230.10501099 36.17938995]
[244.20039368 31.04908943]
[246.17535400 20.47738457]
[252.33554077 11.76089382]
[261.50137329 6.45152569]
[271.96600342 5.45984077]
[281.81298828 8.89952660]
[289.26733398 16.07891846]
[303.63717651 11.77686977]
[318.00701904 7.47482109]
[332.37686157 3.17277265]
[345.81646729 -7.16227198]
[359.46807861 2.89109087]
[353.58673096 18.79223061]
[336.67892456 17.54261589]
[322.30908203 21.84466362]
[307.93923950 26.14671135]
[293.56939697 30.44876099]
[285.67410278 48.21258545]
[266.99841309 54.61474228]
[249.33070374 45.14447784]
[235.23530579 50.27478027]
[221.13992310 55.40508270]
[207.04452515 60.53538513]
[192.94914246 65.66568756]
[178.85374451 70.79598999]
[164.75836182 75.92629242]
[150.66297913 81.05659485]
[148.79216003 88.31951904]
[163.76330566 87.38945770]
[169.27400208 101.34052277]
[157.70852661 110.89247894]
[145.05055237 102.84536743]
[143.17973328 110.10829163]
[153.04255676 121.40982819]
[163.01449585 132.61520386]
[173.09461975 143.72337341]
[183.17472839 154.83152771]
[193.25485229 165.93968201]
[209.14488220 168.15022278]
[217.19960022 182.02470398]
[211.24011230 196.91979980]
[195.83804321 201.40928650]
[182.80851746 192.04919434]
[182.14669800 176.01980591]
[172.06657410 164.91165161]
[161.98645020 153.80348206]
[151.90634155 142.69532776]
[145.04879761 139.84117126]
[141.74102783 131.27264404]
[131.87820435 119.97111511]
[109.78450775 130.14768982]
[90.35665894 123.90212250]
[80.93947601 135.57759094]
[71.52229309 147.25306702]
[62.10511017 158.92854309]
[52.68792725 170.60401917]
[43.27074814 182.27947998]
[33.85356522 193.95495605]
[24.43638420 205.63043213]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 34]
[10 33]
[11 32]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[20 24]
[36 161]
[37 160]
[38 159]
[39 158]
[40 157]
[41 156]
[42 155]
[43 154]
[46 95]
[47 94]
[49 92]
[50 91]
[51 90]
[52 89]
[53 88]
[54 87]
[56 86]
[57 85]
[58 84]
[65 78]
[66 77]
[68 75]
[69 74]
[96 129]
[97 128]
[98 127]
[99 126]
[100 125]
[101 124]
[102 123]
[103 122]
[109 119]
[110 118]
[111 117]
[112 116]
[135 152]
[136 151]
[137 149]
[138 148]
[139 147]
[140 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
