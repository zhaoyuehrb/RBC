%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:45:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACGCAGAGUUGGGAGCAACUCCAGAGCCUCCUUCAAGAUGCUGCUGGUCCUGCUCUCAGUGGUCCUUCUGGCUCUGAGCUCAGCUCAGAGCACAGAUAAUGAUGUGAACUAUGAAGACUUUACUUUCACCAUACCAG\
) } def
/len { sequence length } bind def

/coor [
[69.44483948 212.27568054]
[57.34280014 221.13798523]
[43.04843521 225.68455505]
[28.05039978 225.44186401]
[13.91062164 220.43519592]
[2.10165143 211.18597412]
[-6.14669466 198.65740967]
[-9.97541523 184.15428162]
[-8.98577595 169.18696594]
[-3.28084207 155.31419373]
[6.54526138 143.98071289]
[19.47134018 136.36601257]
[4.48644352 135.69303894]
[-10.49845219 135.02006531]
[-25.48334885 134.34709167]
[-40.46824265 133.67411804]
[-55.45314026 133.00114441]
[-70.43803406 132.32817078]
[-85.42293549 131.65519714]
[-95.13006592 143.61671448]
[-109.84717560 147.52311707]
[-123.87658691 142.07888794]
[-131.91386414 129.56729126]
[-146.89875793 128.89431763]
[-161.88365173 128.22134399]
[-176.86854553 127.54837036]
[-191.86004639 127.04356384]
[-206.85627747 126.70699310]
[-221.85249329 126.37042236]
[-235.82279968 133.79612732]
[-248.37326050 125.77519989]
[-263.36947632 125.43862915]
[-274.61810303 136.54016113]
[-290.42129517 136.35261536]
[-301.40325928 124.98725891]
[-301.04864502 109.18694305]
[-289.56781006 98.32572937]
[-273.77212524 98.84738159]
[-263.03292847 110.44240570]
[-248.03669739 110.77897644]
[-235.13900757 103.32920074]
[-221.51593018 111.37419891]
[-206.51969910 111.71076965]
[-191.52348328 112.04734039]
[-184.70957947 109.02777863]
[-176.19557190 112.56347656]
[-161.21067810 113.23645020]
[-146.22578430 113.90941620]
[-131.24089050 114.58238983]
[-122.11444092 102.84160614]
[-107.65348816 98.67689514]
[-93.34579468 103.88680267]
[-84.74996185 116.67030334]
[-69.76506042 117.34327698]
[-54.78016663 118.01625061]
[-39.79527283 118.68921661]
[-24.81037521 119.36219025]
[-9.82547951 120.03516388]
[5.15941620 120.70813751]
[20.14431190 121.38111115]
[34.98503113 119.20096588]
[49.14328384 114.24678040]
[63.30153275 109.29259491]
[77.45978546 104.33840942]
[91.61803436 99.38422394]
[86.12560272 93.41949463]
[84.65820312 83.80626678]
[88.90734100 72.92588806]
[99.30061340 63.79705811]
[107.84288025 51.46702576]
[116.38514709 39.13699722]
[124.92742157 26.80696487]
[133.33081055 14.38186836]
[141.59426880 1.86326933]
[149.85771179 -10.65532970]
[158.12117004 -23.17392731]
[166.38462830 -35.69252777]
[174.64808655 -48.21112442]
[182.91152954 -60.72972488]
[191.17498779 -73.24832153]
[199.43844604 -85.76692200]
[203.11805725 -102.31674957]
[220.03973389 -103.36238098]
[225.72888184 -87.39147186]
[211.95704651 -77.50346375]
[203.69358826 -64.98487091]
[195.43013000 -52.46627045]
[187.16668701 -39.94766998]
[178.90322876 -27.42907143]
[170.63977051 -14.91047382]
[162.37631226 -2.39187479]
[154.11285400 10.12672424]
[145.84941101 22.64532280]
[144.78092957 30.02132797]
[137.25744629 35.34923172]
[128.71517944 47.67926407]
[120.17291260 60.00929642]
[111.63064575 72.33932495]
[113.38148499 79.63210297]
[127.96709442 76.13066101]
[131.46829224 90.71632385]
[116.88317108 94.21765137]
[118.63401031 101.51042175]
[131.84294128 108.61845398]
[150.19102478 107.60740662]
[158.89070129 122.80764771]
[172.25579834 129.61750793]
[185.62089539 136.42736816]
[198.98599243 143.23721313]
[212.35108948 150.04707336]
[225.18826294 141.61485291]
[240.52261353 140.74693298]
[254.22927856 147.67678833]
[262.62121582 160.54032898]
[263.44107056 175.87733459]
[256.46829224 189.56219482]
[243.57850647 197.91378784]
[228.23901367 198.68556213]
[214.57606506 191.66990662]
[206.26492310 178.75401306]
[205.54122925 163.41217041]
[192.17613220 156.60232544]
[178.81103516 149.79246521]
[165.44593811 142.98260498]
[152.08084106 136.17274475]
[140.42967224 139.61203003]
[129.21414185 133.98025513]
[124.73490906 121.82738495]
[111.52597809 114.71936035]
[96.57221985 113.54247284]
[82.41397095 118.49665833]
[68.25571442 123.45084381]
[54.09746933 128.40502930]
[39.93921661 133.35920715]
[54.50707245 136.93379211]
[67.17792511 144.96183777]
[76.63220215 156.60728455]
[81.88530731 170.65737915]
[82.39016724 185.64888000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 60]
[13 59]
[14 58]
[15 57]
[16 56]
[17 55]
[18 54]
[19 53]
[23 49]
[24 48]
[25 47]
[26 46]
[27 44]
[28 43]
[29 42]
[31 40]
[32 39]
[61 134]
[62 133]
[63 132]
[64 131]
[65 130]
[69 98]
[70 97]
[71 96]
[72 95]
[73 93]
[74 92]
[75 91]
[76 90]
[77 89]
[78 88]
[79 87]
[80 86]
[81 85]
[103 129]
[104 128]
[106 125]
[107 124]
[108 123]
[109 122]
[110 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
