%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAAACCUCUUCGAGGCACAAGGCACAACAGGCUGCUCUGGGAUUCUCUUCAGCCAAUCUUCAUUGCUCAAGUGUCUGAAGCAGCCAUGGCAGAAGUACCUGAGCUCGCCAGUGAAAUGAUGGCUUAUUACAGUGGCAAUGAGGAUGACUUGUUCUUUGAAGCUGAUGGCCCUAAACAGAUGAAGU\
) } def
/len { sequence length } bind def

/coor [
[105.19738770 562.83703613]
[117.95989990 554.73706055]
[113.99697113 540.27001953]
[110.03403473 525.80297852]
[96.61329651 523.21630859]
[85.56584930 515.05688477]
[79.08451843 502.87347412]
[78.48627472 489.02001953]
[83.94505310 476.20135498]
[94.44661713 466.94485474]
[90.72598267 452.41360474]
[87.00534058 437.88238525]
[83.28470612 423.35113525]
[79.56407166 408.81991577]
[75.84343719 394.28866577]
[72.12280273 379.75744629]
[68.40216064 365.22619629]
[57.74975586 354.81582642]
[61.82223129 339.52774048]
[58.10159683 324.99652100]
[54.38095856 310.46527100]
[50.66032410 295.93405151]
[46.93968582 281.40280151]
[50.00693893 296.08584595]
[44.29399490 309.95532227]
[31.77508545 318.21832275]
[16.77640533 318.01934814]
[4.48108244 309.42721558]
[-0.86195654 295.41107178]
[2.59369445 280.81454468]
[13.65385723 270.68179321]
[28.49679375 268.51446533]
[13.57212639 270.01589966]
[-1.35254121 271.51733398]
[-16.27720833 273.01876831]
[-31.20187569 274.52020264]
[-36.80217743 285.03387451]
[-46.68634033 291.46505737]
[-58.32807922 292.30834961]
[-68.81794739 287.46923828]
[-75.59045410 278.25894165]
[-90.55696106 279.26083374]
[-105.52346039 280.26272583]
[-120.92337036 287.35348511]
[-132.00015259 274.51834106]
[-122.73296356 260.32131958]
[-106.52535248 265.29620361]
[-91.55885315 264.29431152]
[-76.59234619 263.29241943]
[-65.41221619 248.81506348]
[-46.88477325 247.05703735]
[-32.70331192 259.59552002]
[-17.77864456 258.09408569]
[-2.85397649 256.59265137]
[12.07069111 255.09121704]
[26.99535751 253.58978271]
[35.60101318 230.28816223]
[56.33206558 223.27630615]
[60.53618622 208.87751770]
[64.74030304 194.47871399]
[68.94441986 180.07991028]
[73.14854431 165.68112183]
[77.35266113 151.28231812]
[81.55677795 136.88352966]
[85.76090240 122.48472595]
[89.96501923 108.08592987]
[62.45347977 80.64565277]
[58.73284531 66.11441040]
[55.01221085 51.58317566]
[51.29157257 37.05193710]
[47.57093811 22.52069855]
[36.65240479 11.07097149]
[40.99100494 -3.17774081]
[37.27037048 -17.70897865]
[33.54973221 -32.24021530]
[29.58680153 -46.70725250]
[25.38268280 -61.10605240]
[21.17856407 -75.50485229]
[16.97444534 -89.90364838]
[7.12794352 -94.58348846]
[1.60578251 -103.72763062]
[2.03025794 -114.18140411]
[8.01883411 -122.49086761]
[4.29819775 -137.02210999]
[-7.54845047 -148.36181641]
[-3.38900280 -164.22470093]
[12.49765778 -168.29237366]
[23.76869583 -156.38038635]
[18.82943535 -140.74273682]
[22.55007172 -126.21150208]
[37.05004501 -113.43681335]
[31.37324142 -94.10776520]
[35.57736206 -79.70896912]
[39.78148270 -65.31017303]
[43.98559952 -50.91137314]
[47.68609619 -47.86366272]
[49.49949265 -42.45127106]
[48.08097076 -35.96085358]
[51.80160904 -21.42961502]
[55.52224350 -6.89837694]
[66.17465210 3.51197863]
[62.10217285 18.80006218]
[65.82280731 33.33129883]
[69.54344940 47.86253738]
[73.26408386 62.39377594]
[76.98471832 76.92501068]
[83.98357391 79.62057495]
[97.98128510 85.01168823]
[104.98014069 87.70724487]
[117.48688507 79.42587280]
[129.99363708 71.14449310]
[142.50038147 62.86311340]
[149.73504639 48.79292297]
[164.61853027 48.21752930]
[177.12527466 39.93615341]
[184.35992432 25.86595917]
[199.24342346 25.29056931]
[211.75016785 17.00919151]
[224.25691223 8.72781467]
[236.76367188 0.44643757]
[249.27041626 -7.83493948]
[256.09667969 -22.74580765]
[272.44625854 -24.01992607]
[281.50009155 -10.34659004]
[273.94439697 4.20824385]
[257.55178833 4.67181063]
[245.04504395 12.95318794]
[232.53829956 21.23456383]
[220.03153992 29.51594162]
[207.52479553 37.79731750]
[201.18470764 51.27517319]
[185.40666199 52.44290161]
[172.89990234 60.72428131]
[166.55981445 74.20213318]
[150.78176880 75.36986542]
[138.27500916 83.65124512]
[125.76826477 91.93261719]
[113.26151276 100.21399689]
[104.36381531 112.29004669]
[100.15969849 126.68884277]
[95.95558167 141.08764648]
[91.75145721 155.48643494]
[87.54734039 169.88523865]
[83.34322357 184.28404236]
[79.13909912 198.68283081]
[74.93498230 213.08163452]
[70.73086548 227.48042297]
[83.01031494 242.73771667]
[80.20928192 263.95852661]
[61.47092438 277.68215942]
[65.19155884 292.21340942]
[68.91220093 306.74462891]
[72.63283539 321.27587891]
[76.35346985 335.80712891]
[87.27200317 347.25683594]
[82.93340302 361.50555420]
[86.65403748 376.03680420]
[90.37467194 390.56802368]
[94.09530640 405.09927368]
[97.81594849 419.63052368]
[101.53658295 434.16174316]
[105.25721741 448.69299316]
[108.97785187 463.22421265]
[124.93717194 467.51144409]
[136.49470520 479.19097900]
[140.56735229 495.01269531]
[136.13656616 510.64038086]
[124.50107574 521.84002686]
[128.46400452 536.30706787]
[132.42694092 550.77410889]
[147.53570557 551.23937988]
[161.83555603 556.13891602]
[174.05497742 565.03710938]
[183.10739136 577.14263916]
[188.18788147 591.37921143]
[188.84471130 606.48089600]
[185.01943970 621.10479736]
[177.05223083 633.95062256]
[165.65151978 643.87609863]
[151.83105469 649.99865723]
[136.81973267 651.77392578]
[121.95234680 649.04406738]
[108.55091095 642.05169678]
[97.80706024 631.41870117]
[90.67613220 618.09045410]
[87.79219818 603.25219727]
[89.41171265 588.22326660]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 170]
[3 169]
[4 168]
[10 163]
[11 162]
[12 161]
[13 160]
[14 159]
[15 158]
[16 157]
[17 156]
[19 154]
[20 153]
[21 152]
[22 151]
[23 150]
[32 56]
[33 55]
[34 54]
[35 53]
[36 52]
[41 49]
[42 48]
[43 47]
[58 147]
[59 146]
[60 145]
[61 144]
[62 143]
[63 142]
[64 141]
[65 140]
[66 139]
[67 106]
[68 105]
[69 104]
[70 103]
[71 102]
[73 100]
[74 99]
[75 98]
[76 95]
[77 94]
[78 93]
[79 92]
[83 90]
[84 89]
[109 138]
[110 137]
[111 136]
[112 135]
[114 133]
[115 132]
[117 130]
[118 129]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
