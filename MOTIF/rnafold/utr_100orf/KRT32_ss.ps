%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:25:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCAUGGGGUCUGUAGACAUCCAGGUAGCUGUGGCUGAGGAGAAAGGGCCUCUCCAACAUGACAUCCUCCUGCUGUGUCACCAACAACUUGCAAGCCUCUCUCAAGAGCUGCCCCCGGCCUGCCUCGGUCUGUUCCAGCGGCGUGAACUGCCGGCCUG\
) } def
/len { sequence length } bind def

/coor [
[255.61372375 225.31059265]
[244.12304688 215.66877747]
[232.63238525 206.02696228]
[221.14172363 196.38514709]
[209.65104675 186.74333191]
[198.16038513 177.10151672]
[176.66793823 181.32978821]
[158.76367188 168.24443054]
[156.20382690 145.94262695]
[143.67150879 137.69999695]
[131.13919067 129.45736694]
[118.60687256 121.21472931]
[106.07455444 112.97209167]
[92.12886047 111.96748352]
[85.68280792 99.56022644]
[73.15048981 91.31758881]
[60.61817169 83.07495880]
[48.08585739 74.83232117]
[34.81443024 67.84166718]
[20.92856979 62.16867065]
[7.04271030 56.49567413]
[-6.84314919 50.82267380]
[-20.72900963 45.14967728]
[-38.88520050 48.08160782]
[-49.11954498 33.85172653]
[-63.11280060 28.44905853]
[-77.10605621 23.04639244]
[-91.09931183 17.64372635]
[-100.28241730 17.46604156]
[-105.30986023 11.99823856]
[-119.19571686 6.32524109]
[-137.35191345 9.25717163]
[-147.58625793 -4.97271252]
[-161.57951355 -10.37537861]
[-175.57276917 -15.77804375]
[-186.08747864 -4.83654070]
[-199.95281982 1.22938263]
[-215.04344177 1.52390504]
[-229.05917358 -3.96671963]
[-239.87557983 -14.37681103]
[-245.86602783 -28.09759903]
[-246.14619446 -43.02578735]
[-260.13943481 -48.42845154]
[-274.13269043 -53.83111954]
[-288.12594604 -59.23378372]
[-302.11920166 -64.63645172]
[-315.72250366 -56.92382431]
[-331.09133911 -59.81046295]
[-340.96905518 -71.93337250]
[-340.69165039 -87.56849670]
[-330.39013672 -99.33340454]
[-314.92858887 -101.67306519]
[-301.60742188 -93.48275757]
[-296.71655273 -78.62970734]
[-282.72329712 -73.22703552]
[-268.73004150 -67.82437134]
[-254.73677063 -62.42170715]
[-240.74351501 -57.01904297]
[-230.50419617 -67.88574982]
[-216.84753418 -74.02097321]
[-201.84182739 -74.46138763]
[-187.77282715 -69.10875702]
[-176.79547119 -58.74963379]
[-170.60392761 -44.93993378]
[-170.17010498 -29.77129936]
[-156.17684937 -24.36863327]
[-142.18359375 -18.96596718]
[-130.96826172 -23.58002663]
[-119.24693298 -19.15486526]
[-113.52272034 -7.56061888]
[-99.63685608 -1.88762081]
[-85.69664764 3.65047145]
[-71.70339203 9.05313778]
[-57.71013641 14.45580292]
[-43.71688080 19.85846901]
[-32.50155640 15.24441051]
[-20.78022575 19.66957283]
[-15.05601120 31.26381874]
[-1.17015147 36.93681717]
[12.71570778 42.60981369]
[26.60156822 48.28281021]
[40.48742676 53.95581055]
[33.03976059 40.93535614]
[32.97179413 25.93550873]
[40.30115891 12.84809589]
[53.12620163 5.06874657]
[68.11936188 4.61587095]
[81.39055634 11.60697174]
[89.49646759 24.22815323]
[90.33395386 39.20475769]
[83.68572235 52.65098572]
[71.27671051 61.07811356]
[56.32849121 62.30000305]
[68.86080933 70.54264069]
[81.39312744 78.78527069]
[93.92544556 87.02790833]
[107.87113953 88.03251648]
[114.31719208 100.43977356]
[126.84951019 108.68241119]
[139.38182068 116.92504120]
[151.91413879 125.16767883]
[164.44645691 133.41030884]
[171.60400391 128.96588135]
[179.72459412 126.85167694]
[188.07305908 127.23835754]
[195.89971924 130.07109070]
[202.50775146 135.07630920]
[207.31515503 141.78799438]
[209.90602112 149.59098816]
[210.06649780 157.77742004]
[207.80220032 165.61085510]
[219.29286194 175.25267029]
[230.78353882 184.89448547]
[242.27420044 194.53630066]
[253.76486206 204.17811584]
[265.25552368 213.81991577]
[280.23394775 210.22087097]
[294.29519653 216.06340027]
[302.12725830 228.91339111]
[300.90554810 243.73384094]
[312.39620972 253.37565613]
[323.88687134 263.01745605]
[335.37753296 272.65927124]
[350.92254639 275.60275269]
[355.69876099 289.71078491]
[367.18942261 299.35260010]
[387.15362549 301.90039062]
[393.07888794 320.27621460]
[404.93478394 329.46524048]
[416.79067993 338.65423584]
[432.26422119 336.86343384]
[444.15689087 346.35128784]
[445.76879883 361.11398315]
[457.62469482 370.30297852]
[469.48059082 379.49200439]
[481.33645630 388.68099976]
[497.64913940 390.36300659]
[504.10092163 405.43969727]
[494.05477905 418.40145874]
[477.84533691 415.91433716]
[472.14746094 400.53689575]
[460.29156494 391.34786987]
[448.43566895 382.15887451]
[436.57977295 372.96987915]
[421.88165283 375.09133911]
[409.72720337 365.94125366]
[407.60165405 350.51013184]
[395.74578857 341.32113647]
[383.88989258 332.13211060]
[373.84887695 334.32803345]
[364.06127930 330.53039551]
[357.87463379 321.77731323]
[357.54760742 310.84326172]
[346.05694580 301.20144653]
[331.33383179 298.94763184]
[325.73571777 284.14993286]
[314.24505615 274.50811768]
[302.75439453 264.86630249]
[291.26373291 255.22450256]
[276.88058472 259.00119019]
[262.86578369 253.51948547]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 116]
[2 115]
[3 114]
[4 113]
[5 112]
[6 111]
[9 102]
[10 101]
[11 100]
[12 99]
[13 98]
[15 96]
[16 95]
[17 94]
[18 93]
[19 82]
[20 81]
[21 80]
[22 79]
[23 78]
[25 75]
[26 74]
[27 73]
[28 72]
[30 71]
[31 70]
[33 67]
[34 66]
[35 65]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
[120 159]
[121 158]
[122 157]
[123 156]
[125 154]
[126 153]
[128 149]
[129 148]
[130 147]
[133 144]
[134 143]
[135 142]
[136 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
