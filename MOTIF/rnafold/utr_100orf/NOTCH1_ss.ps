%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:19:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCGCCGCUCCUGGCGCCCCUGCUCUGCCUGGCGCUGCUGCCCGCGCUCGCCGCACGAGGCCCGCGAUGCUCCCAGCCCGGUGAGACCUGCCUGAAUG\
) } def
/len { sequence length } bind def

/coor [
[34.61674118 319.58615112]
[24.23558044 322.35775757]
[13.50575161 322.65316772]
[3.00912619 320.46139526]
[-6.68623114 315.90621948]
[-16.52515984 327.22854614]
[-26.36408997 338.55090332]
[-36.20301819 349.87326050]
[-34.84796143 365.61932373]
[-45.08774185 377.65771484]
[-60.84727859 378.84622192]
[-72.77671814 368.47973633]
[-73.79853821 352.70849609]
[-63.30650711 340.88934326]
[-47.52536392 340.03433228]
[-37.68643188 328.71197510]
[-27.84750366 317.38961792]
[-18.00857544 306.06729126]
[-27.14279366 288.52288818]
[-28.07317924 268.72143555]
[-20.59147072 250.31726074]
[-6.04521847 236.72213745]
[12.90477848 230.47288513]
[32.77113342 232.75802612]
[39.93193436 219.57762146]
[46.47019958 206.07757568]
[52.37170410 192.28727722]
[58.27320480 178.49699402]
[52.51303482 164.80918884]
[58.30155182 150.73979187]
[72.69763947 144.79080200]
[78.59914398 131.00050354]
[84.50064850 117.21021271]
[90.40215302 103.41991425]
[90.44216156 95.20447540]
[96.70761108 89.29704285]
[103.03513336 75.69696045]
[109.36266327 62.09686661]
[115.69018555 48.49678040]
[109.37757874 32.27352524]
[116.52993011 16.77118683]
[132.33601379 11.26601982]
[138.23751831 -2.52427602]
[135.56042480 -20.65932846]
[149.82905579 -30.74433899]
[155.29882812 -44.71150208]
[160.76860046 -58.67866135]
[166.23838806 -72.64582062]
[161.22854614 -82.55074310]
[162.57167053 -93.34550476]
[169.56507874 -101.38580322]
[179.64120483 -104.09654999]
[185.96871948 -117.69664001]
[192.29624939 -131.29673767]
[186.64326477 -146.05543518]
[193.15820312 -160.45443726]
[207.97584534 -165.95106506]
[222.30516052 -159.28425598]
[227.64482117 -144.40931702]
[220.82688904 -130.15129089]
[205.89633179 -124.96920776]
[199.56881714 -111.36911774]
[193.24128723 -97.76902771]
[196.51562500 -78.81931305]
[180.20553589 -67.17604828]
[174.73576355 -53.20888901]
[169.26599121 -39.24172592]
[163.79621887 -25.27456665]
[168.36540222 -13.95464611]
[163.78289795 -2.20623255]
[152.02781677 3.37722778]
[146.12631226 17.16752434]
[152.57415771 28.44171143]
[151.27671814 41.56114960]
[142.48851013 51.64916992]
[129.29028320 54.82430267]
[122.96275330 68.42439270]
[116.63522339 82.02448273]
[110.30770111 95.62457275]
[104.19244385 109.32141876]
[98.29093933 123.11171722]
[92.38943481 136.90200806]
[86.48793793 150.69230652]
[92.12372589 165.21386719]
[85.94231415 179.11511230]
[72.06349945 184.39849854]
[66.16199493 198.18878174]
[60.26049423 211.97908020]
[60.94626999 217.51777649]
[59.47126389 222.23049927]
[56.55805588 225.40348816]
[53.11233521 226.73841858]
[45.95153427 239.91882324]
[53.65728760 247.54679871]
[59.38433838 256.74081421]
[62.82645416 266.99969482]
[63.80179214 277.76568604]
[62.26248169 288.45462036]
[58.29696655 298.48767090]
[52.12491608 307.32275391]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 18]
[6 17]
[7 16]
[8 15]
[24 93]
[25 92]
[26 88]
[27 87]
[28 86]
[31 83]
[32 82]
[33 81]
[34 80]
[36 79]
[37 78]
[38 77]
[39 76]
[42 72]
[43 71]
[45 68]
[46 67]
[47 66]
[48 65]
[52 63]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
