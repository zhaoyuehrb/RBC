%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCCGCCACCACCGCUGCCACUGCCGCCCUGCCGGGGCCAUGUUCGCUCUGGGCUUGCCCUUCUUGGUGCUCUUGGUGGCCUCGGUCGAGAGCCAUCUGGGGGUUCUGGGGCCCAAGAACGUCUCGCAGAAAGACGCCG\
) } def
/len { sequence length } bind def

/coor [
[180.51077271 379.15402222]
[174.24398804 367.70532227]
[171.17892456 355.00473022]
[171.53491211 341.93078613]
[175.29434204 329.38977051]
[182.20344543 318.25289917]
[191.78942871 309.29574585]
[185.06843567 295.88574219]
[178.34742737 282.47573853]
[172.49208069 277.86889648]
[171.62977600 268.69390869]
[165.20707703 255.13851929]
[158.78437805 241.58311462]
[144.71430969 236.83242798]
[138.00767517 223.17681885]
[143.08604431 208.45104980]
[136.66333008 194.89564514]
[130.24063110 181.34025574]
[117.79892731 173.15165710]
[118.88211823 157.36756897]
[112.45941925 143.81216431]
[106.03672028 130.25675964]
[92.41147614 129.90531921]
[80.26716614 123.71769714]
[71.97382355 112.90145111]
[69.14993286 99.56742096]
[72.34658051 86.31781006]
[80.93993378 75.73834991]
[74.81867981 62.04417801]
[62.12332916 52.60285187]
[63.99326324 37.82609177]
[57.87200928 24.13192368]
[51.44931030 10.57652187]
[44.72830963 -2.83347940]
[38.00730896 -16.24348068]
[31.28630638 -29.65348244]
[24.56530380 -43.06348419]
[17.84430313 -56.47348404]
[11.12330055 -69.88348389]
[4.40229893 -83.29348755]
[-2.31870294 -96.70349121]
[-9.03970432 -110.11348724]
[-15.76070690 -123.52349091]
[-32.23880768 -124.31378174]
[-46.00376129 -133.23556519]
[-53.36942673 -147.78742981]
[-52.41995239 -163.97578430]
[-43.50716019 -177.41078186]
[-50.52317429 -190.66882324]
[-63.81674957 -199.24736023]
[-62.93096924 -214.11561584]
[-69.94698334 -227.37364197]
[-77.68519592 -240.22355652]
[-86.12193298 -252.62602234]
[-94.55867004 -265.02850342]
[-109.55352783 -271.66824341]
[-111.03148651 -288.00067139]
[-97.47215271 -297.22436523]
[-82.82420349 -289.85076904]
[-82.15619659 -273.46524048]
[-73.71945953 -261.06277466]
[-65.28271484 -248.66029358]
[-59.53332138 -262.51470947]
[-45.18106461 -266.87503052]
[-32.69647598 -258.56030273]
[-31.18755531 -243.63638306]
[-41.75511932 -232.99089050]
[-56.68894577 -234.38966370]
[-49.67293167 -221.13162231]
[-36.88119125 -213.50137329]
[-37.26513672 -197.68482971]
[-30.24912262 -184.42680359]
[-16.55544853 -184.81756592]
[-3.97584033 -179.22790527]
[4.99809456 -168.70223999]
[8.56191444 -155.26870728]
[5.96096087 -141.54852295]
[-2.35070515 -130.24449158]
[4.37029648 -116.83448792]
[11.09129810 -103.42449188]
[17.81229973 -90.01448822]
[24.53330231 -76.60448456]
[31.25430298 -63.19448471]
[37.97530365 -49.78448486]
[44.69630814 -36.37448502]
[51.41730881 -22.96448326]
[58.13830948 -9.55448151]
[64.85931396 3.85552025]
[69.10141754 6.20241642]
[71.87291718 11.27797508]
[71.56617737 18.01066971]
[77.68743134 31.70483780]
[89.94495392 40.16666794]
[88.51284790 55.92292404]
[94.63410187 69.61709595]
[110.60462189 71.02663422]
[123.71158600 80.25982666]
[130.41574097 94.82343292]
[128.90675354 110.78485870]
[119.59211731 123.83406830]
[126.01481628 137.38946533]
[132.43751526 150.94487000]
[145.33862305 160.10304260]
[143.79603577 174.91755676]
[150.21873474 188.47294617]
[156.64143372 202.02835083]
[171.25375366 207.42445374]
[177.57418823 221.26306152]
[172.33978271 235.16041565]
[178.76248169 248.71582031]
[185.18518066 262.27120972]
[191.75743103 275.75473022]
[198.47842407 289.16473389]
[205.19943237 302.57473755]
[222.21546936 300.24053955]
[238.98921204 303.81774902]
[253.53094482 312.86511230]
[264.12152100 326.29345703]
[269.51553345 342.49682617]
[269.08776855 359.54461670]
[262.90563965 375.41152954]
[251.71925354 388.21820068]
[259.31484985 401.15289307]
[266.91043091 414.08761597]
[274.50604248 427.02233887]
[282.10162354 439.95706177]
[297.55032349 442.38027954]
[307.78808594 454.20068359]
[307.98092651 469.83709717]
[298.03784180 481.90643311]
[282.65362549 484.70993042]
[269.09222412 476.92388916]
[263.75692749 462.22460938]
[269.16690063 447.55264282]
[261.57131958 434.61795044]
[253.97572327 421.68322754]
[246.38012695 408.74850464]
[238.78453064 395.81378174]
[226.20492554 399.02801514]
[213.20884705 398.84777832]
[200.69708252 395.27850342]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 114]
[8 113]
[9 112]
[11 111]
[12 110]
[13 109]
[16 106]
[17 105]
[18 104]
[20 102]
[21 101]
[22 100]
[28 95]
[29 94]
[31 92]
[32 91]
[33 88]
[34 87]
[35 86]
[36 85]
[37 84]
[38 83]
[39 82]
[40 81]
[41 80]
[42 79]
[43 78]
[48 72]
[49 71]
[51 69]
[52 68]
[53 62]
[54 61]
[55 60]
[122 138]
[123 137]
[124 136]
[125 135]
[126 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
