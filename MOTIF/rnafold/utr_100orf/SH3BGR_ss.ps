%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:51:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUCCUGACAGAUCCCAAAAUAUUCCUGGGCCAAUGGAGGGAGGAGCCCAAGAUGCCUCUGCUGCUCCUUGGAGAGACAGAGCCUCUUAAGUUGGAGCGGGACUGCCGGAGCCCAGUGGACCCCUGGGCUGCUGCCAGCCCCGACCUGGCAC\
) } def
/len { sequence length } bind def

/coor [
[85.66100311 133.34213257]
[74.34580994 125.67425537]
[61.77957153 133.86508179]
[49.21332932 142.05589294]
[36.64708710 150.24671936]
[24.08084488 158.43754578]
[11.51460171 166.62835693]
[-1.05163991 174.81918335]
[-4.42938614 190.02539062]
[-17.29002380 198.15303040]
[-31.76599693 194.83915710]
[-44.33224106 203.02998352]
[-44.94596863 219.90512085]
[-55.37652588 232.97331238]
[-71.37518311 237.22767639]
[-86.61084747 231.18879700]
[-99.00850677 239.63261414]
[-111.40616608 248.07643127]
[-123.80382538 256.52026367]
[-123.28890991 271.93902588]
[-131.21136475 285.17678833]
[-145.04318237 292.00939941]
[-160.37065125 290.25662231]
[-172.30284119 280.47775269]
[-177.03224182 265.79321289]
[-173.04971313 250.88873291]
[-161.62606812 240.52032471]
[-146.40653992 237.99650574]
[-132.24763489 244.12260437]
[-119.84998322 235.67877197]
[-107.45232391 227.23495483]
[-95.05466461 218.79113770]
[-95.88415527 205.43370056]
[-89.94410706 193.32008362]
[-78.69624329 185.67501831]
[-65.03054810 184.59259033]
[-52.52305984 190.46374512]
[-39.95682144 182.27291870]
[-37.14553070 167.69100952]
[-24.51825333 159.20533752]
[-9.24246216 162.25294495]
[3.32378006 154.06211853]
[15.89002228 145.87130737]
[28.45626450 137.68048096]
[41.02250671 129.48965454]
[53.58874893 121.29883575]
[66.15499115 113.10800934]
[63.80944824 102.74748230]
[64.56404114 92.15159607]
[68.35412598 82.22801208]
[74.85504150 73.82681274]
[83.50991058 67.66763306]
[79.60316467 53.18532562]
[75.69641113 38.70301819]
[71.78965759 24.22070694]
[60.72513580 12.91199780]
[64.88057709 -1.39120257]
[60.97382736 -15.87351227]
[55.68777466 -23.39673233]
[57.13783646 -30.68898392]
[53.52539825 -45.24749756]
[49.91296005 -59.80600739]
[46.30052185 -74.36452484]
[42.54073715 -88.88568115]
[38.63398361 -103.36798859]
[33.34792709 -110.89120483]
[34.79799271 -118.18345642]
[31.18555450 -132.74197388]
[27.57311630 -147.30049133]
[15.81115055 -158.72799683]
[20.08848381 -174.55950928]
[36.00496292 -178.50889587]
[47.18708038 -166.51338196]
[42.13162994 -150.91291809]
[45.74406815 -136.35441589]
[49.35650635 -121.79589844]
[53.11629105 -107.27474213]
[57.02304459 -92.79243469]
[61.82984543 -87.12019348]
[60.85903549 -77.97695923]
[64.47147369 -63.41844559]
[68.08390808 -48.85993576]
[71.69635010 -34.30142212]
[75.45613861 -19.78026390]
[79.36289215 -5.29795504]
[90.14797211 4.97488356]
[86.27196503 20.31395531]
[90.17871857 34.79626465]
[94.08547211 49.27857590]
[97.99222565 63.76088333]
[117.45700836 68.17929077]
[131.64216614 82.22142029]
[136.25759888 101.64042664]
[150.77876282 105.40021515]
[165.29991150 109.16000366]
[179.82107544 112.91979218]
[194.34222412 116.67958069]
[207.85069275 108.92335510]
[222.52365112 112.94317627]
[229.83477783 125.86923981]
[244.35594177 129.62902832]
[258.87710571 133.38880920]
[273.39825439 137.14860535]
[288.69726562 133.11734009]
[299.07885742 143.79777527]
[313.60000610 147.55755615]
[328.12118530 151.31735229]
[343.42019653 147.28608704]
[353.80178833 157.96652222]
[368.32293701 161.72630310]
[382.84411621 165.48609924]
[397.40261841 169.09852600]
[411.99697876 172.56324768]
[426.59136963 176.02796936]
[441.18572998 179.49267578]
[455.78012085 182.95739746]
[470.37448120 186.42211914]
[484.96887207 189.88682556]
[497.40679932 180.40887451]
[513.02459717 181.19493103]
[524.44805908 191.87384033]
[526.28332520 207.40336609]
[517.66381836 220.45091248]
[502.65948486 224.85585022]
[488.35485840 218.53829956]
[481.50415039 204.48120117]
[466.90975952 201.01649475]
[452.31539917 197.55177307]
[437.72100830 194.08705139]
[423.12664795 190.62234497]
[408.53228760 187.15762329]
[393.93789673 183.69290161]
[386.66070557 185.21679688]
[379.08432007 180.00724792]
[364.56317139 176.24746704]
[350.04199219 172.48767090]
[335.78164673 176.78785706]
[324.36138916 165.83850098]
[309.84024048 162.07872009]
[295.31906128 158.31892395]
[281.05871582 162.61911011]
[269.63845825 151.66975403]
[255.11730957 147.90997314]
[240.59614563 144.15017700]
[226.07499695 140.39039612]
[213.40950012 148.14414978]
[198.62940979 144.53805542]
[190.58244324 131.20072937]
[176.06127930 127.44094849]
[161.54013062 123.68115997]
[147.01896667 119.92137146]
[132.49781799 116.16158295]
[124.21569824 127.03524780]
[112.49913788 134.07456970]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 47]
[3 46]
[4 45]
[5 44]
[6 43]
[7 42]
[8 41]
[11 38]
[12 37]
[16 32]
[17 31]
[18 30]
[19 29]
[52 90]
[53 89]
[54 88]
[55 87]
[57 85]
[58 84]
[60 83]
[61 82]
[62 81]
[63 80]
[64 78]
[65 77]
[67 76]
[68 75]
[69 74]
[93 152]
[94 151]
[95 150]
[96 149]
[97 148]
[100 145]
[101 144]
[102 143]
[103 142]
[105 140]
[106 139]
[107 138]
[109 136]
[110 135]
[111 134]
[112 132]
[113 131]
[114 130]
[115 129]
[116 128]
[117 127]
[118 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
