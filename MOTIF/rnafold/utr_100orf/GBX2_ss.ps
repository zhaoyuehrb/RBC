%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:44:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUUUUCGCCUCUCGCUGGCCUCUACCGAGCGCGUCUAUGAGCGCAGCGUUCCCGCCGUCGCUGAUGAUGAUGCAGCGCCCGCUGGGGAGUAGCACCGCCUUCAGCAUAGACUCGCUGAUCGGCAGCCCGCCGCAGC\
) } def
/len { sequence length } bind def

/coor [
[45.67564011 523.01086426]
[38.49348831 536.31152344]
[27.70881081 546.90313721]
[14.28057098 553.84387207]
[-0.59720141 556.51654053]
[-15.60158443 554.68353271]
[-29.39839935 548.50787354]
[-40.76084137 538.53857422]
[-48.67856979 525.66223145]
[-52.44754791 511.02368164]
[-51.73263931 495.92468262]
[-46.59741211 481.70776367]
[-37.49848938 469.63708496]
[-25.24493980 460.78598022]
[-10.92634010 455.94149780]
[4.18410873 455.53436279]
[8.20266628 441.08270264]
[6.95350695 433.73376465]
[12.47878456 426.35177612]
[16.82291603 411.99459839]
[21.16704750 397.63742065]
[12.60027790 383.20932007]
[17.16972733 366.71417236]
[32.53184891 358.43084717]
[36.55040741 343.97915649]
[32.50562286 329.64428711]
[43.65720749 318.42141724]
[47.67576599 303.96972656]
[51.69432449 289.51803589]
[55.71287918 275.06637573]
[59.23928070 260.48678589]
[62.26947021 245.79603577]
[65.29965973 231.10528564]
[60.29294968 217.07737732]
[70.65853882 205.12475586]
[73.68872833 190.43402100]
[76.71891785 175.74327087]
[79.74910736 161.05253601]
[82.77929688 146.36178589]
[85.80948639 131.67103577]
[88.83967590 116.98030090]
[79.89934540 97.02560425]
[94.23558807 80.51526642]
[95.58982849 65.57652283]
[96.94406128 50.63777542]
[87.09912872 38.56653214]
[88.68532562 23.43581200]
[100.25408173 14.12456131]
[101.60832214 -0.81418133]
[92.27999878 -18.62158775]
[103.90077972 -34.01438141]
[104.57859039 -48.99906158]
[105.25640106 -63.98373795]
[105.93421173 -78.96841431]
[106.61202240 -93.95309448]
[107.28983307 -108.93777466]
[100.18402863 -123.07347870]
[108.48853302 -135.43812561]
[109.16634369 -150.42279053]
[100.29942322 -166.51695251]
[110.22230530 -180.94754028]
[110.56129456 -195.94369507]
[110.90028381 -210.93986511]
[111.23928070 -225.93603516]
[111.57826996 -240.93220520]
[111.74777985 -255.93124390]
[111.74777985 -270.93124390]
[103.08407593 -284.85504150]
[111.04820251 -299.19049072]
[127.44734955 -299.19049072]
[135.41148376 -284.85504150]
[126.74777985 -270.93124390]
[126.74777985 -255.93124390]
[129.92007446 -249.18562317]
[126.57444000 -240.59321594]
[126.23545074 -225.59704590]
[125.89645386 -210.60087585]
[125.55746460 -195.60470581]
[125.21847534 -180.60853577]
[133.37147522 -171.60110474]
[133.16055298 -159.05163574]
[124.15102386 -149.74497986]
[123.47321320 -134.76031494]
[130.62750244 -121.69641113]
[122.27450562 -108.25996399]
[121.59669495 -93.27528381]
[120.91888428 -78.29060364]
[120.24107361 -63.30592728]
[119.56326294 -48.32125092]
[118.88545227 -33.33657074]
[126.49384308 -26.36248016]
[129.01606750 -16.12690544]
[125.36987305 -6.00098038]
[116.54705811 0.54005533]
[115.19282532 15.47879791]
[124.89857483 26.71863937]
[123.73799133 41.88793945]
[111.88280487 51.99201202]
[110.52857208 66.93075562]
[109.17433167 81.86949921]
[114.93090057 86.21770477]
[118.80538940 92.30319977]
[120.30941772 99.35890198]
[119.25338745 106.49540710]
[115.77043152 112.81315613]
[110.29956818 117.51577759]
[103.53041840 120.01048279]
[100.50022888 134.70123291]
[97.47003937 149.39196777]
[94.43984985 164.08271790]
[91.40966034 178.77346802]
[88.37947083 193.46420288]
[85.34928131 208.15495300]
[90.13925171 223.23362732]
[79.99040222 234.13546753]
[76.96021271 248.82621765]
[73.93002319 263.51696777]
[75.63671112 268.62918091]
[75.19818878 273.39059448]
[73.12471008 277.02590942]
[70.16456604 279.08493042]
[66.14601135 293.53662109]
[62.12745285 307.98828125]
[58.10889435 322.43997192]
[61.86624527 337.80853271]
[51.00209045 347.99774170]
[46.98353577 362.44940186]
[54.93561172 373.38281250]
[55.10881042 386.70596313]
[47.66477203 397.52087402]
[35.52422333 401.98153687]
[31.18009186 416.33871460]
[26.83596230 430.69589233]
[22.65435028 445.10125732]
[18.63579369 459.55294800]
[31.36705017 467.70196533]
[41.12945557 479.24261475]
[47.05494690 493.14871216]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 135]
[17 134]
[19 133]
[20 132]
[21 131]
[24 127]
[25 126]
[27 124]
[28 123]
[29 122]
[30 121]
[31 117]
[32 116]
[33 115]
[35 113]
[36 112]
[37 111]
[38 110]
[39 109]
[40 108]
[41 107]
[43 100]
[44 99]
[45 98]
[48 95]
[49 94]
[51 90]
[52 89]
[53 88]
[54 87]
[55 86]
[56 85]
[58 83]
[59 82]
[61 79]
[62 78]
[63 77]
[64 76]
[65 75]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
