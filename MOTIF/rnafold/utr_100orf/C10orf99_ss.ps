%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:25:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGACUUCUGCAGCACAGCUCCCUUCCCAGGACGUGAAAAUCUGCCUUCUCACCAUGAGGCUUCUAGUCCUUUCCAGCCUGCUCUGUAUCCUGCUUCUCUGCUUCUCCAUCUUCUCCACAGAAGGGAAGAGGCGUCCUGCCAAGGCCUGGUCAG\
) } def
/len { sequence length } bind def

/coor [
[134.87847900 193.24002075]
[130.09889221 179.02188110]
[125.31929779 164.80374146]
[120.53971100 150.58560181]
[115.76012421 136.36746216]
[98.05712128 138.52525330]
[81.69669342 132.74456787]
[69.95174408 120.63545227]
[64.96819305 105.02455139]
[67.37995148 89.30360413]
[54.49209595 81.62876892]
[41.60424042 73.95392609]
[28.71638489 66.27909088]
[15.52808762 59.13284302]
[2.06101966 52.52693176]
[-13.73629951 53.39599991]
[-21.75543976 40.84439850]
[-35.22250748 34.23848724]
[-48.68957520 27.63257408]
[-62.36837006 34.71754074]
[-77.42021942 32.41637802]
[-88.10450745 21.81874084]
[-90.47141266 7.13760471]
[-103.93848419 0.53169221]
[-116.69506073 8.97071075]
[-131.86279297 9.88545704]
[-145.36216736 3.13022065]
[-153.61256409 -9.39123821]
[-154.48182678 -24.26100349]
[-167.94889832 -30.86691666]
[-181.41596985 -37.47282791]
[-194.88304138 -44.07874298]
[-208.35009766 -50.68465424]
[-223.14337158 -45.80643845]
[-236.70678711 -52.69761658]
[-241.26625061 -66.83079529]
[-254.73332214 -73.43670654]
[-268.20037842 -80.04262543]
[-266.22842407 -65.17280579]
[-276.47384644 -54.21692276]
[-291.44232178 -55.18898392]
[-300.18469238 -67.37795258]
[-296.30609131 -81.86782074]
[-282.64413452 -88.05955505]
[-295.37380981 -95.99401855]
[-308.10345459 -103.92847443]
[-320.83312988 -111.86293793]
[-333.56280518 -119.79739380]
[-347.89230347 -113.84381866]
[-362.97665405 -117.48267365]
[-373.01565552 -129.31475830]
[-374.14907837 -144.79037476]
[-365.94113159 -157.95886230]
[-351.54788208 -163.75663757]
[-336.50387573 -159.95436096]
[-326.59381104 -148.01406860]
[-325.62832642 -132.52705383]
[-312.89868164 -124.59259796]
[-300.16900635 -116.65814209]
[-287.43933105 -108.72367859]
[-274.70968628 -100.78922272]
[-261.59448242 -93.50968933]
[-248.12741089 -86.90377808]
[-234.66033936 -80.29786682]
[-220.69328308 -85.34335327]
[-206.94166565 -78.83586121]
[-201.74418640 -64.15171814]
[-188.27713013 -57.54581070]
[-174.81005859 -50.93989563]
[-161.34298706 -44.33398438]
[-147.87591553 -37.72807312]
[-135.58518982 -46.14254761]
[-120.63339996 -47.28279495]
[-107.02847290 -40.74273300]
[-98.46757507 -28.18853951]
[-97.33257294 -12.93537617]
[-83.86550140 -6.32946348]
[-70.80722046 -13.44418049]
[-55.88694382 -11.48218250]
[-44.85391617 -0.98810387]
[-42.08366394 14.16550636]
[-28.61659622 20.77141762]
[-15.14952755 27.37733078]
[-0.31546363 26.03576279]
[8.66693211 39.05986023]
[22.13400078 45.66577530]
[24.87123108 44.83949661]
[28.10961914 45.08036423]
[31.43207169 46.58830643]
[34.35583878 49.40415192]
[36.39122391 53.39123154]
[49.27907944 61.06607056]
[62.16693497 68.74091339]
[75.05479431 76.41574860]
[84.53656006 68.50421143]
[96.44435883 64.33164215]
[109.32789612 64.60528564]
[121.54733276 69.47822571]
[131.48193359 78.50642395]
[137.74456787 90.68318939]
[139.37353516 104.54952240]
[154.36660767 105.00549316]
[169.35968018 105.46145630]
[184.35275269 105.91742706]
[199.34580994 106.37339020]
[214.33888245 106.82936096]
[229.33580017 107.13336182]
[244.33503723 107.28537750]
[250.35722351 104.33365631]
[256.09255981 104.83530426]
[259.93582153 107.75982666]
[274.91656494 108.51956177]
[289.89730835 109.27929688]
[304.87808228 110.03903961]
[319.85882568 110.79877472]
[334.20355225 102.85141754]
[348.11721802 111.53140259]
[347.28662109 127.90950775]
[332.56619263 135.13732910]
[319.09909058 125.77952576]
[304.11831665 125.01978302]
[289.13757324 124.26004791]
[274.15682983 123.50031281]
[259.17608643 122.74057007]
[244.18301392 122.28460693]
[229.18379211 122.13259125]
[222.42367554 125.22782135]
[213.88291931 121.82242584]
[198.88984680 121.36646271]
[183.89677429 120.91049194]
[168.90371704 120.45452881]
[153.91064453 119.99855804]
[138.91757202 119.54259491]
[129.97827148 131.58787537]
[134.75785828 145.80601501]
[139.53744507 160.02415466]
[144.31703186 174.24229431]
[149.09661865 188.46043396]
[154.44847107 202.47320557]
[160.36381531 216.25756836]
[166.27914429 230.04194641]
[172.19448853 243.82630920]
[186.49958801 251.08880615]
[189.59936523 266.82955933]
[179.11595154 278.97357178]
[163.09132385 278.20504761]
[153.81819153 265.11349487]
[158.41012573 249.74165344]
[152.49478149 235.95727539]
[146.57945251 222.17291260]
[140.66410828 208.38854980]
[138.04899597 207.23252869]
[135.74873352 204.94036865]
[134.21003723 201.63206482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 138]
[2 137]
[3 136]
[4 135]
[5 134]
[10 94]
[11 93]
[12 92]
[13 91]
[14 86]
[15 85]
[17 83]
[18 82]
[19 81]
[23 77]
[24 76]
[29 71]
[30 70]
[31 69]
[32 68]
[33 67]
[36 64]
[37 63]
[38 62]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[101 133]
[102 132]
[103 131]
[104 130]
[105 129]
[106 128]
[107 126]
[108 125]
[111 124]
[112 123]
[113 122]
[114 121]
[115 120]
[139 151]
[140 150]
[141 149]
[142 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
