%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:35:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUGCACAGCUGCCUGGUAGGUGACUGGAGGCAUUGAGCAGUGCUCACUGGUAUUUCGCUGAUGUGGCCCCAACCCCGCCUCCCUCCCCACCCCGCGAUGUCAGAAAAAACACAACAGGGGAAAUUGGCCGCAGCCAAGAAAAAGUUAAAAGCAUAUUGGC\
) } def
/len { sequence length } bind def

/coor [
[111.61986542 149.77200317]
[100.59722900 139.59843445]
[96.01635742 125.31502533]
[99.06691742 110.62638092]
[87.62803650 120.32957458]
[76.18915558 130.03276062]
[70.67034912 144.86021423]
[55.95953369 147.19282532]
[44.52064896 156.89602661]
[33.08176804 166.59921265]
[28.53315353 174.57710266]
[21.32765388 176.37660217]
[9.70389271 185.85754395]
[-1.91986883 195.33848572]
[-13.54362965 204.81941223]
[-25.16739082 214.30035400]
[-27.25574875 227.06005859]
[-37.17266846 234.71548462]
[-49.24586868 233.57919312]
[-61.05018997 242.83435059]
[-72.85451508 252.08952332]
[-78.46632385 267.49859619]
[-94.66161346 270.07629395]
[-104.78005981 257.17089844]
[-98.41267395 242.05838013]
[-82.10967255 240.28518677]
[-70.30535126 231.03002930]
[-58.50102615 221.77487183]
[-52.86977768 205.17547607]
[-34.64832687 202.67658997]
[-23.02456665 193.19566345]
[-11.40080643 183.71472168]
[0.22295506 174.23377991]
[11.84671593 164.75285339]
[23.37857437 155.16033936]
[34.81745529 145.45713806]
[46.25633621 135.75395203]
[50.95695496 121.62052917]
[66.48596191 118.59388733]
[77.92484283 108.89069366]
[89.36372375 99.18749237]
[99.81590271 88.42868805]
[109.18438721 76.71410370]
[118.55286407 64.99951935]
[127.92134857 53.28493118]
[137.28984070 41.57034302]
[129.01856995 28.91950607]
[125.06787872 14.35123539]
[125.81250763 -0.70445722]
[131.16696167 -14.77374458]
[140.59510803 -26.48325157]
[153.16381836 -34.69412231]
[167.63533020 -38.61277771]
[182.58908081 -37.86759567]
[196.56124878 -32.54412079]
[205.92973328 -44.25870895]
[215.29821777 -55.97329330]
[224.66670227 -67.68788147]
[218.15391541 -81.44814301]
[218.26095581 -96.60979462]
[224.91302490 -110.16597748]
[236.74264526 -119.45149994]
[251.37040710 -122.66677094]
[265.88348389 -119.22636414]
[275.25195312 -130.94094849]
[284.62045288 -142.65553284]
[293.98892212 -154.37011719]
[303.35742188 -166.08470154]
[312.72589111 -177.79930115]
[322.09436035 -189.51388550]
[315.91778564 -204.82698059]
[318.27893066 -221.07443237]
[328.44201660 -233.84930420]
[343.56805420 -239.73466492]
[359.50741577 -237.21717834]
[368.64837646 -249.11013794]
[377.78933716 -261.00311279]
[386.93032837 -272.89605713]
[376.51132202 -283.72668457]
[367.82299805 -295.98925781]
[361.05941772 -309.40982056]
[356.37173462 -323.68859863]
[353.86465454 -338.50656128]
[353.59417725 -353.53268433]
[355.56634521 -368.43127441]
[359.73712158 -382.86950684]
[366.01330566 -396.52481079]
[374.25466919 -409.09213257]
[384.27713013 -420.29067993]
[395.85678101 -429.87033081]
[408.73492432 -437.61700439]
[422.62384033 -443.35769653]
[437.21325684 -446.96414185]
[452.17727661 -448.35574341]
[467.18151855 -447.50146484]
[481.89083862 -444.42031860]
[495.97662354 -439.18121338]
[509.12417603 -431.90112305]
[521.03979492 -422.74273682]
[531.45727539 -411.91067505]
[540.14385986 -399.64685059]
[546.90551758 -386.22531128]
[551.59112549 -371.94589233]
[554.09613037 -357.12756348]
[554.36444092 -342.10137939]
[552.39013672 -327.20306396]
[548.21734619 -312.76544189]
[541.93920898 -299.11102295]
[533.69604492 -286.54489136]
[523.67199707 -275.34774780]
[512.09100342 -265.76977539]
[499.21173096 -258.02490234]
[485.32199097 -252.28620911]
[470.73205566 -248.68183899]
[455.76788330 -247.29235840]
[440.76373291 -248.14880371]
[426.05484009 -251.23202515]
[411.96981812 -256.47314453]
[398.82330322 -263.75509644]
[389.68231201 -251.86213684]
[380.54135132 -239.96916199]
[371.40036011 -228.07620239]
[377.44436646 -215.80079651]
[377.60025024 -202.05274963]
[371.78033447 -189.52325439]
[361.07226562 -180.68965149]
[347.53631592 -177.32565308]
[333.80895996 -180.14540100]
[324.44049072 -168.43081665]
[315.07199097 -156.71621704]
[305.70352173 -145.00163269]
[296.33502197 -133.28704834]
[286.96655273 -121.57246399]
[277.59805298 -109.85787964]
[284.14480591 -96.45617676]
[284.22387695 -81.47941589]
[277.76608276 -67.89789581]
[266.00390625 -58.42841721]
[251.23667908 -54.99092865]
[236.38128662 -58.31939697]
[227.01280212 -46.60481262]
[217.64431763 -34.89022446]
[208.27583313 -23.17563820]
[216.54066467 -10.71555901]
[220.55499268 3.70856476]
[219.91354370 18.68750572]
[214.66659546 32.75379181]
[205.31617737 44.52546692]
[192.76817322 52.84187317]
[178.24449158 56.87806320]
[163.16409302 56.22663879]
[149.00442505 50.93882751]
[139.63594055 62.65341187]
[130.26745605 74.36799622]
[120.89897156 86.08258820]
[111.53048706 97.79717255]
[126.12267303 94.32323456]
[140.53282166 98.48826599]
[151.02154541 109.21144867]
[154.86705017 123.71014404]
[151.07144165 138.22196960]
[140.61964417 148.98117065]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 41]
[5 40]
[6 39]
[8 37]
[9 36]
[10 35]
[12 34]
[13 33]
[14 32]
[15 31]
[16 30]
[19 28]
[20 27]
[21 26]
[42 156]
[43 155]
[44 154]
[45 153]
[46 152]
[55 143]
[56 142]
[57 141]
[58 140]
[64 134]
[65 133]
[66 132]
[67 131]
[68 130]
[69 129]
[70 128]
[75 122]
[76 121]
[77 120]
[78 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
