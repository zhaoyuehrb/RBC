%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:34:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUGGACUGACGUCCCGCCCUCUGGCUGUUUCCUGGCCGAGGUGGGUCGGUAGUAGCGAUGGCGGGUCUGACUGACUUGCAGCGGCUACAGGCCCGAGUGGAAGAGCUGGAGCGCUGGGUGUACGGGCCGGGCGGGGCGCGCGGCUCACGGAAGGUGG\
) } def
/len { sequence length } bind def

/coor [
[34.26053238 135.09274292]
[28.02054405 121.45227814]
[28.58477020 106.46289062]
[35.83255386 93.33012390]
[48.21393585 84.86244965]
[63.08111191 82.87071991]
[77.25554657 87.78140259]
[89.80312347 96.00078583]
[82.73217010 82.77196503]
[75.66122437 69.54315186]
[68.46073914 56.38438416]
[61.13142014 43.29694366]
[53.80210114 30.20950508]
[46.84185410 24.21236038]
[46.46023941 16.79237366]
[39.38928986 3.56355524]
[32.31834030 -9.66526413]
[25.11785698 -22.82402802]
[17.78853798 -35.91146851]
[4.29471779 -44.17145157]
[4.82666588 -59.05655670]
[-2.50265265 -72.14399719]
[-9.83197117 -85.23143768]
[-17.16128922 -98.31887817]
[-24.49060822 -111.40631866]
[-31.81992722 -124.49375916]
[-39.14924622 -137.58119202]
[-46.47856522 -150.66864014]
[-59.97238541 -158.92861938]
[-59.44043732 -173.81372070]
[-66.76975250 -186.90116882]
[-74.09907532 -199.98860168]
[-81.42839050 -213.07604980]
[-88.88584137 -226.09089661]
[-96.47070312 -239.03192139]
[-109.10395813 -247.11898804]
[-124.03173065 -248.58924866]
[-138.95950317 -250.05950928]
[-153.88726807 -251.52976990]
[-165.94361877 -241.31114197]
[-181.68730164 -242.69386292]
[-191.77787781 -254.85757446]
[-190.22879028 -270.58575439]
[-177.95907593 -280.54718018]
[-162.24815369 -278.83187866]
[-152.41702271 -266.45755005]
[-137.48924255 -264.98727417]
[-122.56147766 -263.51702881]
[-107.63370514 -262.04675293]
[-98.11780548 -273.64190674]
[-102.47207642 -287.99603271]
[-106.82634735 -302.35012817]
[-120.55157471 -314.59008789]
[-115.96545410 -331.50631714]
[-120.60070801 -345.77215576]
[-125.23596191 -360.03802490]
[-129.87121582 -374.30386353]
[-134.50646973 -388.56970215]
[-149.44587708 -391.85015869]
[-160.66339111 -402.10025024]
[-165.21395874 -416.49325562]
[-161.97094727 -431.13354492]
[-151.90307617 -442.11096191]
[-156.53833008 -456.37683105]
[-161.17358398 -470.64266968]
[-165.80883789 -484.90850830]
[-170.44409180 -499.17434692]
[-175.07936096 -513.44018555]
[-179.71461487 -527.70605469]
[-193.29876709 -536.24127197]
[-194.95198059 -552.19891357]
[-183.40605164 -563.33764648]
[-167.51802063 -561.11279297]
[-159.47583008 -547.23101807]
[-165.44876099 -532.34130859]
[-160.81350708 -518.07543945]
[-156.17825317 -503.80960083]
[-151.54299927 -489.54376221]
[-146.90774536 -475.27792358]
[-142.27249146 -461.01208496]
[-137.63723755 -446.74621582]
[-123.03979492 -443.78305054]
[-111.81077576 -433.84500122]
[-107.03226471 -419.52603149]
[-110.08258057 -404.64007568]
[-120.24062347 -393.20495605]
[-115.60536957 -378.93911743]
[-110.97011566 -364.67327881]
[-106.33486176 -350.40744019]
[-101.69960022 -336.14157104]
[-91.04328918 -330.34881592]
[-87.08372498 -318.46032715]
[-92.47223663 -306.70440674]
[-88.11797333 -292.35028076]
[-83.76370239 -277.99618530]
[-77.66006470 -267.06237793]
[-77.93750763 -255.54037476]
[-83.52968597 -246.61677551]
[-75.94482422 -233.67576599]
[-69.81764221 -229.47344971]
[-68.34095001 -220.40536499]
[-61.01163483 -207.31793213]
[-53.68231583 -194.23048401]
[-46.35299683 -181.14305115]
[-33.38341904 -173.81916809]
[-33.39112473 -157.99795532]
[-26.06180573 -144.91052246]
[-18.73248672 -131.82307434]
[-11.40316868 -118.73563385]
[-4.07384968 -105.64819336]
[3.25546885 -92.56075287]
[10.58478737 -79.47331238]
[17.91410637 -66.38587189]
[30.88368416 -59.06198883]
[30.87597847 -43.24078751]
[38.20529556 -30.15334511]
[44.24879456 -25.83154488]
[45.54715729 -16.73621559]
[52.61811066 -3.50739574]
[59.68906021 9.72142315]
[66.88954163 22.88018608]
[74.21886444 35.96762848]
[81.54817963 49.05506516]
[87.59167480 53.37686920]
[88.89003754 62.47219849]
[95.96099091 75.70101929]
[103.03194427 88.92983246]
[112.66121674 100.43101501]
[124.44097137 109.71742249]
[136.22071838 119.00382996]
[148.00047302 128.29023743]
[163.62809753 130.75761414]
[168.83293152 144.71322632]
[180.61268616 153.99963379]
[192.39244080 163.28604126]
[208.57443237 168.34365845]
[208.19409180 185.29333496]
[191.80151367 189.61999512]
[183.10603333 175.06579590]
[171.32627869 165.77938843]
[159.54652405 156.49298096]
[144.76145935 154.68983459]
[138.71406555 140.06999207]
[126.93431854 130.78358459]
[115.15456390 121.49717712]
[103.37480927 112.21076965]
[97.13878632 116.37754059]
[78.43071747 128.87786865]
[82.50232697 143.31469727]
[86.57392883 157.75152588]
[99.81252289 166.81349182]
[100.83797455 182.82374573]
[88.86363983 193.50057983]
[73.07520294 190.65365601]
[65.58421326 176.46687317]
[72.13710022 161.82313538]
[68.06549835 147.38630676]
[63.99388885 132.94947815]
[60.64567566 147.57102966]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 127]
[9 126]
[10 125]
[11 123]
[12 122]
[13 121]
[15 120]
[16 119]
[17 118]
[18 116]
[19 115]
[21 113]
[22 112]
[23 111]
[24 110]
[25 109]
[26 108]
[27 107]
[28 106]
[30 104]
[31 103]
[32 102]
[33 101]
[34 99]
[35 98]
[36 49]
[37 48]
[38 47]
[39 46]
[50 95]
[51 94]
[52 93]
[54 90]
[55 89]
[56 88]
[57 87]
[58 86]
[63 81]
[64 80]
[65 79]
[66 78]
[67 77]
[68 76]
[69 75]
[128 146]
[129 145]
[130 144]
[131 143]
[133 141]
[134 140]
[135 139]
[148 158]
[149 157]
[150 156]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
