%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGGGCACGAUGCGGCAACCCGCCGUUCGGUUGGUGCGCCUGGGUCGGGUGCCGUACGCCGAGCUACUGGGGCUGCAGGACCGCUGGCUGCGGCGGCUGCAGGCCGAGC\
) } def
/len { sequence length } bind def

/coor [
[77.18575287 114.70746613]
[67.11728668 125.82618713]
[57.04881668 136.94490051]
[46.98035049 148.06362915]
[36.91188049 159.18234253]
[26.84341431 170.30107117]
[28.58748245 189.04924011]
[16.39688301 202.98297119]
[-1.78663754 203.71946716]
[-11.20993710 215.38999939]
[-16.45612907 231.51184082]
[-33.40021515 230.93363953]
[-37.53520203 214.49168396]
[-22.88047409 205.96670532]
[-13.45717335 194.29615784]
[-17.12793350 183.31384277]
[-14.95269680 171.81745911]
[-7.36839819 162.75001526]
[3.78828812 158.49099731]
[15.72469330 160.23260498]
[25.79316139 149.11387634]
[35.86162949 137.99516296]
[45.93009949 126.87643433]
[55.99856567 115.75771332]
[66.06703186 104.63899231]
[67.33912659 89.69303131]
[59.29455185 77.03266907]
[51.24998474 64.37229919]
[43.20541382 51.71193314]
[35.16084290 39.05156326]
[27.11627579 26.39119720]
[19.07170486 13.73082924]
[10.84878635 1.18556750]
[2.44916439 -11.24207687]
[-12.81134701 -14.36530399]
[-21.15272141 -27.08835793]
[-18.08115768 -41.61767578]
[-26.48077965 -54.04532242]
[-34.88040161 -66.47296906]
[-43.28002167 -78.90061188]
[-51.67964554 -91.32825470]
[-60.07926559 -103.75589752]
[-68.47888947 -116.18354797]
[-82.35785675 -125.92062378]
[-76.84338379 -141.95268250]
[-59.91130829 -141.09184265]
[-56.05124283 -124.58316803]
[-47.65162277 -112.15552521]
[-39.25199890 -99.72787476]
[-30.85237885 -87.30023193]
[-22.45275688 -74.87258911]
[-14.05313396 -62.44494247]
[-5.65351248 -50.01729965]
[8.97333527 -47.45001984]
[17.66878319 -34.96627426]
[14.87680912 -19.64169884]
[23.27643013 -7.21405411]
[29.72347069 -3.37863255]
[31.73207283 5.68625975]
[39.77664185 18.34662628]
[47.82121277 31.00699425]
[55.86577988 43.66736221]
[63.91035080 56.32772827]
[71.95491791 68.98809814]
[79.99948883 81.64846039]
[98.77671051 74.77201843]
[115.61103058 82.60722351]
[121.44686127 98.72420502]
[135.78936768 103.11654663]
[151.25028992 99.75940704]
[161.15402222 110.88439178]
[175.49652100 115.27673340]
[190.95744324 111.91958618]
[200.86119080 123.04457092]
[215.20368958 127.43691254]
[229.54618835 131.82925415]
[243.88868713 136.22158813]
[258.23120117 140.61393738]
[272.57369995 145.00627136]
[279.32656860 143.85563660]
[284.76733398 146.05671692]
[287.59054565 150.07420349]
[301.66156006 155.27093506]
[315.73260498 160.46768188]
[329.80364990 165.66441345]
[343.87466431 170.86114502]
[357.94570923 176.05787659]
[374.00872803 172.75460815]
[384.69717407 185.19201660]
[379.01571655 200.57554626]
[362.80892944 203.07994080]
[352.74896240 190.12890625]
[338.67794800 184.93217468]
[324.60690308 179.73544312]
[310.53585815 174.53871155]
[296.46484375 169.34197998]
[282.39379883 164.14523315]
[268.18133545 159.34878540]
[253.83885193 154.95643616]
[239.49635315 150.56410217]
[225.15383911 146.17175293]
[210.81134033 141.77941895]
[196.46884155 137.38706970]
[182.03379822 141.05838013]
[171.10418701 129.61923218]
[156.76168823 125.22689056]
[142.32662964 128.89820862]
[131.39701843 117.45905304]
[117.05451965 113.06671143]
[106.42781067 122.46989441]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 22]
[5 21]
[6 20]
[9 15]
[10 14]
[26 65]
[27 64]
[28 63]
[29 62]
[30 61]
[31 60]
[32 59]
[33 57]
[34 56]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[43 47]
[68 109]
[69 108]
[71 106]
[72 105]
[74 103]
[75 102]
[76 101]
[77 100]
[78 99]
[79 98]
[82 97]
[83 96]
[84 95]
[85 94]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
