%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:40:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAUCCCCACCCCCAAGCGAGCACCUGCCCCUCCCGGGGGCGGAGCUCCGGCGCAUCAUGGCGGCUGGCCGGGCCCAGGUCCCUUCCUCCGAACAAGCCUGGCUUGAGGAUGCUCAGGUCUUCAUCCAAAAGACCCUGUGUCCAGCUGUCAAGGAGC\
) } def
/len { sequence length } bind def

/coor [
[-40.25172043 209.30580139]
[-27.98299789 217.93589783]
[-18.74089622 229.75044250]
[-13.31822968 243.73596191]
[-12.18017387 258.69271851]
[-15.42435360 273.33770752]
[-22.77247238 286.41461182]
[-33.59418869 296.80163574]
[-46.96117783 303.60778809]
[-61.72677994 306.24917603]
[-76.62435150 304.49923706]
[-90.37593842 298.50811768]
[-101.80188751 288.78967285]
[-109.92204285 276.17764282]
[-114.03982544 261.75393677]
[-113.80200958 246.75581360]
[-109.22898865 232.46989441]
[-100.71305847 220.12165833]
[-88.98366547 210.76977539]
[-103.84220123 212.82495117]
[-118.65753174 215.17147827]
[-133.42393494 217.80841064]
[-148.19032288 220.44535828]
[-162.95672607 223.08230591]
[-170.98500061 233.22058105]
[-183.37532043 235.08984375]
[-193.37457275 228.22486877]
[-208.18989563 230.57138062]
[-223.00523376 232.91789246]
[-237.82055664 235.26441956]
[-252.63587952 237.61093140]
[-267.45120239 239.95744324]
[-282.26654053 242.30397034]
[-297.08184814 244.65048218]
[-311.78012085 253.10017395]
[-323.96847534 241.31541443]
[-316.01834106 226.34104919]
[-299.42837524 229.83515930]
[-284.61303711 227.48863220]
[-269.79772949 225.14212036]
[-254.98239136 222.79560852]
[-240.16706848 220.44908142]
[-225.35174561 218.10256958]
[-210.53642273 215.75605774]
[-195.72109985 213.40953064]
[-182.73066711 201.64346313]
[-165.59367371 208.31590271]
[-150.82727051 205.67895508]
[-136.06086731 203.04202271]
[-121.29447174 200.40507507]
[-117.85260773 197.02630615]
[-112.23497772 195.80686951]
[-105.89739227 197.96641541]
[-91.03884888 195.91122437]
[-76.81919861 191.13613892]
[-63.73175430 183.80682373]
[-56.40787125 170.83724976]
[-40.58666611 170.84495544]
[-27.49922562 163.51564026]
[-20.17534065 150.54605103]
[-4.35413647 150.55375671]
[8.73330307 143.22444153]
[21.82074356 135.89512634]
[34.90818405 128.56581116]
[47.99562454 121.23648834]
[61.08306503 113.90717316]
[74.17050171 106.57785034]
[87.25794220 99.24853516]
[85.35814667 65.55322266]
[89.71240997 51.19911957]
[94.06668091 36.84501266]
[98.42095184 22.49090767]
[102.77522278 8.13680267]
[107.12949371 -6.21730185]
[111.48376465 -20.57140732]
[115.83803558 -34.92551041]
[103.52713776 -53.69441986]
[108.89372253 -75.20970917]
[128.10075378 -85.73697662]
[130.73768616 -100.50337219]
[133.37463379 -115.26976776]
[124.13345337 -128.09069824]
[126.74713898 -143.67735291]
[139.66505432 -152.78247070]
[155.22320557 -150.00415039]
[164.19123840 -136.99069214]
[161.24858093 -121.46277618]
[148.14103699 -112.63282776]
[145.50408936 -97.86643219]
[142.86714172 -83.10002899]
[149.63386536 -78.53536987]
[154.76316833 -72.14247131]
[157.77764893 -64.48423767]
[158.38723755 -56.24269485]
[156.51701355 -48.15825653]
[152.31575012 -40.96320724]
[146.14425659 -35.31536484]
[138.54454041 -31.73797035]
[130.19213867 -30.57124138]
[125.83786774 -16.21713638]
[121.48359680 -1.86303174]
[117.12932587 12.49107361]
[112.77505493 26.84517860]
[108.42079163 41.19928360]
[104.06652069 55.55338669]
[99.71224976 69.90749359]
[103.24772644 76.52190399]
[118.23969269 77.01265717]
[110.31867218 89.75072479]
[113.85414886 96.36512756]
[128.20825195 100.71939850]
[142.56236267 105.07366943]
[156.91645813 109.42794037]
[171.27056885 113.78221130]
[185.62467957 118.13648224]
[196.72235107 110.44930267]
[210.02691650 110.57236481]
[220.66413879 118.23576355]
[224.86660767 130.44824219]
[239.13244629 135.08349609]
[253.39830017 139.71875000]
[267.66415405 144.35400391]
[281.92999268 148.98925781]
[296.19583130 153.62452698]
[309.36050415 145.18498230]
[324.86334229 147.23326111]
[335.38442993 158.80221558]
[335.95602417 174.42935181]
[326.30819702 186.73600769]
[310.99639893 189.91134644]
[297.25036621 182.45608521]
[291.56057739 167.89036560]
[277.29473877 163.25511169]
[263.02890015 158.61985779]
[248.76304626 153.98460388]
[234.49719238 149.34934998]
[220.23135376 144.71409607]
[205.61447144 152.98446655]
[189.20860291 148.05133057]
[181.27040100 132.49058533]
[166.91630554 128.13632202]
[152.56219482 123.78204346]
[138.20808411 119.42778015]
[123.85398865 115.07350922]
[109.49987793 110.71923828]
[94.58726501 112.33597565]
[81.49982452 119.66529083]
[68.41238403 126.99461365]
[55.32494354 134.32392883]
[42.23750305 141.65324402]
[29.15006256 148.98255920]
[16.06262207 156.31188965]
[2.97518182 163.64120483]
[-5.28480387 177.13502502]
[-20.16990662 176.60307312]
[-33.25734711 183.93238831]
[-41.51733398 197.42620850]
[-56.40243530 196.89427185]
[-69.48987579 204.22358704]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 54]
[20 53]
[21 50]
[22 49]
[23 48]
[24 47]
[27 45]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[33 39]
[34 38]
[55 159]
[56 158]
[58 156]
[59 155]
[61 153]
[62 152]
[63 151]
[64 150]
[65 149]
[66 148]
[67 147]
[68 146]
[69 106]
[70 105]
[71 104]
[72 103]
[73 102]
[74 101]
[75 100]
[76 99]
[79 90]
[80 89]
[81 88]
[110 145]
[111 144]
[112 143]
[113 142]
[114 141]
[115 140]
[119 137]
[120 136]
[121 135]
[122 134]
[123 133]
[124 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
