%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:12:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGUGGGGAGAAUGUCACCAAGGUCAGCACCUUCAUCCUGGUGGGCCUCCCCACGGCCCCAGGGCUGCAGUACCUGCUCUUCCUCCUCUUCCUGCUCA\
) } def
/len { sequence length } bind def

/coor [
[82.79787445 341.25387573]
[85.58656311 322.07385254]
[86.05306244 307.08111572]
[86.51955414 292.08837891]
[86.98605347 277.09564209]
[87.45255280 262.10287476]
[87.91905212 247.11013794]
[88.38555145 232.11740112]
[88.85205078 217.12464905]
[89.31854248 202.13191223]
[89.78504181 187.13916016]
[90.25154114 172.14642334]
[90.71804047 157.15367126]
[81.47423553 154.85884094]
[72.73168182 151.07969666]
[64.72692871 145.91848755]
[57.67656708 139.51486206]
[51.77134705 132.04206848]
[47.17105865 123.70231628]
[44.00016022 114.72125244]
[42.34445572 105.34187317]
[42.24874496 95.81795502]
[27.55428123 92.80584717]
[12.85981941 89.79373932]
[-1.83464301 86.78163910]
[-16.52910423 83.76953125]
[-31.90902519 89.46076202]
[-44.35320282 78.78019714]
[-41.06013870 62.71508789]
[-25.41745186 57.79183960]
[-13.51699924 69.07506561]
[1.17746305 72.08717346]
[15.87192535 75.09928131]
[30.56638718 78.11138916]
[45.26084900 81.12348938]
[56.96042252 61.26639938]
[75.47895813 47.54605865]
[97.88249207 42.13625336]
[99.28018188 27.20151138]
[100.67786407 12.26677227]
[102.07555389 -2.66796851]
[103.47324371 -17.60270882]
[104.87093353 -32.53744888]
[102.35839081 -38.96444321]
[103.44004059 -44.77304077]
[106.84819794 -48.34728241]
[109.17166901 -63.16623688]
[111.49514771 -77.98519135]
[113.81861877 -92.80415344]
[103.40541840 -104.47031403]
[102.97898865 -120.10208130]
[112.74066162 -132.31861877]
[128.08128357 -135.35163879]
[141.75749207 -127.76905060]
[147.31176758 -113.15111542]
[142.12158203 -98.39997864]
[128.63757324 -90.48067474]
[126.31410217 -75.66172028]
[123.99063110 -60.84276581]
[121.66715240 -46.02380753]
[119.80567169 -31.13975906]
[118.40798187 -16.20501900]
[117.01029968 -1.27027941]
[115.61260986 13.66446114]
[114.21492004 28.59920120]
[112.81723022 43.53393936]
[132.35009766 51.97742081]
[147.51367188 66.90697479]
[156.25990295 86.30616760]
[171.17109680 84.67639160]
[186.08229065 83.04660797]
[200.99348450 81.41682434]
[216.08190918 73.68532562]
[227.68814087 86.04378510]
[219.02558899 100.61760712]
[202.62327576 96.32801819]
[187.71208191 97.95780182]
[172.80087280 99.58758545]
[157.88967896 101.21736908]
[157.10534668 109.57482147]
[155.12083435 117.73104858]
[151.97789001 125.51462555]
[147.74253845 132.76197815]
[142.50381470 139.32077026]
[136.37179565 145.05319214]
[129.47535706 149.83874512]
[121.95946503 153.57685852]
[113.98204803 156.18896484]
[105.71078491 157.62017822]
[105.24428558 172.61291504]
[104.77778625 187.60566711]
[104.31128693 202.59840393]
[103.84478760 217.59114075]
[103.37829590 232.58389282]
[102.91179657 247.57662964]
[102.44529724 262.56936646]
[101.97879791 277.56213379]
[101.51229858 292.55487061]
[101.04580688 307.54760742]
[100.57930756 322.54034424]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 100]
[3 99]
[4 98]
[5 97]
[6 96]
[7 95]
[8 94]
[9 93]
[10 92]
[11 91]
[12 90]
[13 89]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[38 66]
[39 65]
[40 64]
[41 63]
[42 62]
[43 61]
[46 60]
[47 59]
[48 58]
[49 57]
[69 79]
[70 78]
[71 77]
[72 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
