%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:00:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUGGGACAAAAUCAAACCAGCAUCUCAGACUUCCUGCUCCUGGGCCUGCCCAUCCAACCAGAGCAGCAAAACCUGUGCUAUGCCCUGUUCUUGGCCA\
) } def
/len { sequence length } bind def

/coor [
[78.19790649 119.86531067]
[72.29590607 110.12151337]
[70.52661896 98.86785126]
[56.17675400 94.49962616]
[41.82688904 90.13140869]
[27.47702217 85.76318359]
[13.12715721 81.39496613]
[-1.22270870 77.02674103]
[-10.52630043 77.51235962]
[-15.94707108 72.29309082]
[-30.15414429 67.48070526]
[-37.00881195 75.27315521]
[-45.91437912 80.54368591]
[-55.98530197 82.78977203]
[-66.22679901 81.80857849]
[-75.63311005 77.71510315]
[-83.28629303 70.92906952]
[-88.44576263 62.13195038]
[-90.61995697 52.19857025]
[-89.61312103 42.11011505]
[-102.90328979 35.15516281]
[-116.19345856 28.20020866]
[-129.48362732 21.24525642]
[-140.03248596 28.32114601]
[-152.52752686 30.15823936]
[-164.52735901 26.46095657]
[-173.71456909 18.00892639]
[-178.34321594 6.49356413]
[-177.57043457 -5.82015371]
[-190.40251160 -13.58789825]
[-203.23458862 -21.35564232]
[-219.09432983 -18.93731499]
[-230.77513123 -29.93450737]
[-229.31649780 -45.91111374]
[-215.83737183 -54.61124802]
[-200.67776489 -49.36091614]
[-195.46684265 -34.18771744]
[-182.63476562 -26.41997337]
[-169.80270386 -18.65222931]
[-154.02519226 -26.26452827]
[-136.65934753 -22.98480606]
[-124.53411102 -9.91544819]
[-122.52867889 7.95508623]
[-109.23851013 14.91003895]
[-95.94834137 21.86499214]
[-82.65816498 28.81994438]
[-65.51696777 18.33570862]
[-45.35820770 19.99140167]
[-29.95558739 33.30639267]
[-25.34175873 53.27363205]
[-11.13468456 58.08602142]
[3.14551187 62.67687988]
[17.49537849 67.04509735]
[31.84524345 71.41332245]
[46.19511032 75.78153992]
[60.54497528 80.14976501]
[74.89484406 84.51798248]
[88.93161011 72.66042328]
[107.26402283 71.41336060]
[122.77726746 81.26079559]
[129.45063782 98.38092041]
[144.14511108 101.39302063]
[158.83956909 104.40512848]
[173.57910156 107.18834686]
[188.36012268 109.74199677]
[203.14115906 112.29565430]
[217.92219543 114.84930420]
[232.70321655 117.40296173]
[247.55651855 119.49568939]
[262.46771240 121.12547302]
[277.37890625 122.75525665]
[285.41250610 109.77742004]
[298.28601074 101.57768250]
[313.44338989 99.78411102]
[327.87509155 104.75280762]
[338.71575928 115.49724579]
[343.81292725 129.88409424]
[342.15457153 145.05685425]
[334.06991577 158.00294495]
[321.16421509 166.15193176]
[305.99990845 167.88580322]
[291.58786011 162.86030579]
[280.78961182 152.07327271]
[275.74911499 137.66645813]
[260.83792114 136.03666687]
[245.92672729 134.40689087]
[241.58605957 136.76258850]
[235.69665527 136.28874207]
[230.14956665 132.18399048]
[215.36853027 129.63034058]
[200.58750916 127.07668304]
[185.80647278 124.52303314]
[171.02545166 121.96937561]
[163.77064514 123.96770477]
[155.82746887 119.09959412]
[141.13299561 116.08748627]
[126.43853760 113.07537842]
[119.51153564 122.11927032]
[109.67391968 127.86354065]
[98.39321899 129.45132446]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 57]
[4 56]
[5 55]
[6 54]
[7 53]
[8 52]
[10 51]
[11 50]
[20 46]
[21 45]
[22 44]
[23 43]
[29 39]
[30 38]
[31 37]
[61 97]
[62 96]
[63 95]
[64 93]
[65 92]
[66 91]
[67 90]
[68 89]
[69 86]
[70 85]
[71 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
