%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:46:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUGCAGAAGCUCCCUGUGCCCAUGGGGCCAUCUCGGCUUGUCCGUGGCCCUCGGCCCCAGGGCAUGCGUUCCCCCUACCGCAGGCCAGGUAUGGGCUGGCCCAGGCCCCGAUUUCCCAGGA\
) } def
/len { sequence length } bind def

/coor [
[88.25139618 366.38198853]
[77.42113495 354.87194824]
[77.98531342 339.07772827]
[89.60921478 328.36978149]
[89.98616791 313.37451172]
[90.36312103 298.37924194]
[82.22501373 289.33508301]
[82.48465729 276.76885986]
[91.55110168 267.49243164]
[92.30476379 252.51136780]
[93.05842590 237.53031921]
[93.81209564 222.54927063]
[90.97419739 215.63359070]
[94.77762604 207.20262146]
[95.90752411 192.24523926]
[96.28447723 177.24998474]
[95.90752411 162.25471497]
[95.53057098 147.25946045]
[95.15361786 132.26419067]
[81.04282379 97.12780762]
[68.79773712 88.46421814]
[56.55264664 79.80062866]
[44.30755615 71.13703918]
[32.06246948 62.47344971]
[23.14190865 60.02994537]
[19.62223053 53.43508530]
[7.59872484 44.46651077]
[-4.42477989 35.49793625]
[-16.44828415 26.52936172]
[-28.47178841 17.56078720]
[-40.49529266 8.59221172]
[-52.51879883 -0.37636277]
[-63.98303986 4.91920233]
[-76.53801727 4.79319048]
[-87.76307678 -0.66789484]
[-95.52062225 -10.35492134]
[-98.36312103 -22.36080933]
[-95.80290985 -34.35581207]
[-107.36061096 -43.91717148]
[-118.91831207 -53.47853470]
[-130.47601318 -63.03989410]
[-145.82299805 -60.03924179]
[-159.48316956 -67.65065765]
[-165.00660706 -82.28027344]
[-159.78530884 -97.02043152]
[-146.28462219 -104.91127014]
[-130.87915039 -102.22698212]
[-120.84288788 -90.23500824]
[-120.91464996 -74.59759521]
[-109.35694885 -65.03623199]
[-97.79925537 -55.47487259]
[-86.24155426 -45.91351318]
[-69.46028137 -51.12156677]
[-52.73714066 -45.24192047]
[-42.73317719 -30.41957283]
[-43.55022430 -12.39986801]
[-31.52672005 -3.43129277]
[-19.50321388 5.53728199]
[-7.47970963 14.50585651]
[4.54379511 23.47443199]
[16.56729889 32.44300461]
[28.59080505 41.41157913]
[40.72605896 50.22835922]
[52.97114944 58.89194870]
[65.21623993 67.55554199]
[77.46132660 76.21913147]
[89.70641327 84.88272095]
[104.58813477 83.00272369]
[114.29397583 71.56608582]
[123.99981689 60.12944794]
[133.70565796 48.69281006]
[128.45780945 34.25827789]
[131.14611816 19.13648605]
[141.04742432 7.39512014]
[155.49833679 2.19254875]
[170.61161804 4.92823792]
[182.32189941 14.86630058]
[187.47914124 29.33344841]
[184.69609070 44.43809128]
[174.72137451 56.11715317]
[160.23812866 61.22903061]
[145.14228821 58.39865112]
[135.43644714 69.83528900]
[125.73061371 81.27192688]
[116.02477264 92.70856476]
[121.89537811 106.51203918]
[136.86578369 107.45389557]
[151.83618164 108.39575958]
[166.80657959 109.33761597]
[181.77697754 110.27947235]
[196.74737549 111.22132874]
[207.39961243 99.77301788]
[222.92480469 97.90153503]
[235.99243164 106.49054718]
[240.43237305 121.48458099]
[234.14819336 135.80390930]
[220.10711670 142.68739319]
[204.93890381 138.88485718]
[195.80552673 126.19172668]
[180.83512878 125.24987030]
[165.86471558 124.30801392]
[150.89431763 123.36615753]
[135.92391968 122.42430115]
[120.95352173 121.48244476]
[110.14888763 131.88723755]
[110.52583313 146.88250732]
[110.90278625 161.87776184]
[111.27973938 176.87303162]
[113.83604431 180.69839478]
[114.86343384 184.73422241]
[114.49367523 188.45114136]
[113.02375031 191.42330933]
[110.86490631 193.37515259]
[109.73500824 208.33253479]
[108.79315186 223.30293274]
[108.03948212 238.28398132]
[107.28582001 253.26504517]
[106.53215027 268.24609375]
[115.32167053 284.36795044]
[105.35838318 298.75619507]
[104.98143005 313.75146484]
[104.60447693 328.74673462]
[115.67568207 340.02520752]
[115.44558716 355.82781982]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 122]
[5 121]
[6 120]
[9 118]
[10 117]
[11 116]
[12 115]
[14 114]
[15 113]
[16 108]
[17 107]
[18 106]
[19 105]
[20 67]
[21 66]
[22 65]
[23 64]
[24 63]
[26 62]
[27 61]
[28 60]
[29 59]
[30 58]
[31 57]
[32 56]
[38 52]
[39 51]
[40 50]
[41 49]
[68 85]
[69 84]
[70 83]
[71 82]
[86 104]
[87 103]
[88 102]
[89 101]
[90 100]
[91 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
