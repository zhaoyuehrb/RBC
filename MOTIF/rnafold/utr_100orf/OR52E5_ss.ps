%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:20:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCACCAAUAUGCUUCAUACCAACAAUACACAGUUUCACCCUUCCACCUUCCUCGUAGUGGGGGUCCCAGGGCUGGAAGAUGUGCAUGUAUGGAUUG\
) } def
/len { sequence length } bind def

/coor [
[-0.43191683 349.76461792]
[-16.30574417 350.63659668]
[-21.77551651 364.60375977]
[-27.24529076 378.57092285]
[-27.39104080 395.52426147]
[-43.72216797 400.07733154]
[-52.61822891 385.64486694]
[-41.21245193 373.10116577]
[-35.74267960 359.13400269]
[-30.27290535 345.16683960]
[-40.26015091 335.40579224]
[-45.75981903 322.52188110]
[-45.90096283 308.47042847]
[-40.62864304 295.39788818]
[-30.71740532 285.31393433]
[-17.65768242 279.78265381]
[-3.43171954 279.67980957]
[2.46978450 265.88952637]
[8.37128830 252.09921265]
[14.27279186 238.30892944]
[20.17429543 224.51863098]
[26.07579994 210.72833252]
[31.97730446 196.93803406]
[30.93606949 194.65942383]
[30.68854713 191.84552002]
[31.43161774 188.77720642]
[33.26445007 185.79745483]
[36.17090988 183.27821350]
[40.01283264 181.58300781]
[47.97919846 168.87327576]
[48.18261337 153.98007202]
[62.06768799 146.39619446]
[70.03405762 133.68646240]
[78.00041962 120.97674561]
[85.96678925 108.26702881]
[86.06671143 91.56565094]
[100.81799316 83.73329926]
[108.38523865 70.78197479]
[115.95247650 57.83064651]
[123.51972198 44.87932205]
[131.08695984 31.92799568]
[138.45187378 18.86055183]
[145.61267090 5.68015003]
[152.77346802 -7.50025082]
[159.93426514 -20.68065262]
[153.42486572 -34.64252472]
[156.35061646 -49.58552933]
[167.38385010 -59.81939316]
[182.15078735 -61.57309723]
[189.31158447 -74.75350189]
[196.47238159 -87.93389893]
[203.63317871 -101.11430359]
[210.79397583 -114.29470062]
[217.95477295 -127.47510529]
[224.90972900 -140.76527405]
[231.65715027 -154.16200256]
[233.38197327 -171.02798462]
[250.06629944 -174.03953552]
[257.57885742 -158.84092712]
[245.05387878 -147.41458130]
[238.30645752 -134.01785278]
[238.10546875 -126.49554443]
[231.13517761 -120.31430817]
[223.97438049 -107.13390350]
[216.81358337 -93.95350647]
[209.65278625 -80.77310181]
[202.49198914 -67.59270477]
[195.33119202 -54.41230011]
[201.89613342 -41.06916046]
[199.31474304 -26.24349594]
[188.37046814 -15.65688419]
[173.11466980 -13.51985359]
[165.95387268 -0.33945268]
[158.79307556 12.84094810]
[151.63227844 26.02134895]
[151.19744873 33.53376770]
[144.03828430 39.49523926]
[136.47105408 52.44656372]
[128.90380859 65.39788818]
[121.33656311 78.34921265]
[113.76931763 91.30053711]
[116.03830719 102.83679199]
[109.94980621 112.89480591]
[98.67651367 116.23339844]
[90.71014404 128.94311523]
[82.74377441 141.65283203]
[74.77741241 154.36256409]
[74.00418854 170.16485596]
[60.68891907 176.83964539]
[52.72255325 189.54937744]
[45.76760101 202.83953857]
[39.86609650 216.62983704]
[33.96459198 230.42013550]
[28.06308746 244.21043396]
[22.16158295 258.00073242]
[16.26008034 271.79101562]
[10.35857582 285.58132935]
[21.11799622 297.67465210]
[25.55196762 313.18225098]
[22.83126068 329.02148438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 10]
[3 9]
[4 8]
[17 97]
[18 96]
[19 95]
[20 94]
[21 93]
[22 92]
[23 91]
[29 90]
[30 89]
[32 87]
[33 86]
[34 85]
[35 84]
[37 81]
[38 80]
[39 79]
[40 78]
[41 77]
[42 75]
[43 74]
[44 73]
[45 72]
[49 68]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
[55 61]
[56 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
