%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:30:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGAGCCACCAAGCAGUGCUGCAUACGGGGUCCACCUGUGUGCACCAGGAUGCCUGACACCAUGCUGCCCGCCUGCUUCCUCGGCCUACUGGCCUUCUCCUCCGCGUGCUACUUCCAGAACUGCCCGAGGGGCGGCAAGAGGGCCAUGU\
) } def
/len { sequence length } bind def

/coor [
[316.65048218 219.91505432]
[311.56619263 211.54968262]
[309.90484619 201.84338379]
[295.67807007 197.08956909]
[288.28948975 197.95834351]
[281.20654297 192.08604431]
[267.08175659 187.03729248]
[252.95695496 181.98854065]
[239.73657227 191.66978455]
[223.18486023 191.58587646]
[209.79776001 181.57254028]
[204.94647217 165.40104675]
[190.71969604 160.64723206]
[176.49291992 155.89341736]
[162.26612854 151.13960266]
[148.03935242 146.38578796]
[133.81257629 141.63197327]
[126.42401123 142.50073242]
[119.34107971 136.62844849]
[105.21627045 131.57968140]
[90.25602722 130.48837280]
[75.54806519 133.43385315]
[60.84010315 136.37933350]
[46.13214111 139.32482910]
[31.42417908 142.27030945]
[16.71621704 145.21578979]
[2.00825596 148.16127014]
[-12.69970512 151.10675049]
[-27.40766716 154.05223083]
[-42.11562729 156.99771118]
[-52.17210007 169.49758911]
[-68.21373749 169.28459167]
[-77.93477631 156.52209473]
[-73.87805176 141.00042725]
[-59.15555191 134.62644958]
[-45.06111145 142.28974915]
[-30.35314941 139.34426880]
[-15.64518833 136.39878845]
[-0.93722647 133.45330811]
[13.77073479 130.50782776]
[28.47869682 127.56233978]
[43.18665695 124.61685944]
[57.89461899 121.67137909]
[72.60258484 118.72589874]
[87.31053925 115.78041077]
[82.20964050 104.91069031]
[84.37651062 94.21015930]
[74.16303253 83.22449493]
[63.94955063 72.23883057]
[48.88640594 67.40020752]
[45.88705063 52.81072235]
[35.67356873 41.82505798]
[25.46009064 30.83939362]
[10.07264328 32.84091949]
[-3.53638840 25.38613129]
[-10.13405514 11.34154510]
[-7.18341875 -3.89240980]
[4.18094063 -14.45796585]
[19.58919525 -16.29244995]
[33.11655426 -8.69046783]
[39.56147766 5.42486429]
[36.44575500 20.62591362]
[46.65923309 31.61157799]
[56.87271500 42.59724426]
[71.20532227 46.65009689]
[74.93521881 62.02534866]
[85.14869690 73.01101685]
[95.36217499 83.99668121]
[107.49383545 84.12071991]
[116.94919586 92.69681549]
[118.39337158 106.01722717]
[110.26502991 117.45487976]
[124.38983154 122.50363922]
[138.56639099 127.40518951]
[152.79316711 132.15901184]
[167.01994324 136.91282654]
[181.24673462 141.66664124]
[195.47351074 146.42045593]
[209.70028687 151.17427063]
[220.32380676 142.33457947]
[233.82383728 139.93415833]
[246.63905334 144.49713135]
[255.44261169 154.72499084]
[258.00570679 167.86373901]
[272.13052368 172.91249084]
[286.25531006 177.96124268]
[300.43188477 182.86279297]
[314.65866089 187.61660767]
[332.71884155 176.96925354]
[352.52713013 182.89245605]
[361.52136230 201.18562317]
[376.09408569 204.74038696]
[390.66677856 208.29515076]
[405.23947144 211.84991455]
[419.81219482 215.40467834]
[434.38488770 218.95944214]
[448.95758057 222.51420593]
[463.53027344 226.06896973]
[478.10299683 229.62371826]
[492.74649048 232.87455750]
[507.45446777 235.82003784]
[522.19226074 238.61235046]
[536.95831299 241.25122070]
[551.72436523 243.89009094]
[568.85473633 237.21693420]
[581.84930420 248.97027588]
[596.66705322 251.30137634]
[611.50195312 245.80273438]
[622.87219238 255.42393494]
[637.68994141 257.75503540]
[645.93548584 244.95147705]
[658.67938232 236.61402893]
[673.71368408 234.18721008]
[688.43359375 238.09147644]
[700.28887939 247.65039062]
[707.22540283 261.20782471]
[708.04150391 276.41485596]
[702.59570312 290.63677979]
[691.83154297 301.40957642]
[677.61401367 306.86676025]
[662.40631104 306.06286621]
[648.84332275 299.13717651]
[639.27490234 287.28958130]
[635.35882568 272.57278442]
[620.54107666 270.24169922]
[606.76599121 275.90707397]
[594.33593750 266.11914062]
[579.51818848 263.78802490]
[569.51818848 270.66610718]
[557.11901855 268.80093384]
[549.08551025 258.65612793]
[534.31945801 256.01727295]
[519.55340576 253.37841797]
[512.36914062 255.31022644]
[504.50897217 250.52799988]
[489.80102539 247.58250427]
[485.35247803 249.47621155]
[479.66281128 248.54942322]
[474.54821777 244.19642639]
[459.97552490 240.64166260]
[445.40283203 237.08689880]
[430.83010864 233.53213501]
[416.25741577 229.97738647]
[401.68472290 226.42262268]
[387.11199951 222.86785889]
[372.53930664 219.31309509]
[357.96661377 215.75833130]
[351.75765991 222.94630432]
[343.28878784 227.37403870]
[333.72720337 228.38301086]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 88]
[4 87]
[6 86]
[7 85]
[8 84]
[12 79]
[13 78]
[14 77]
[15 76]
[16 75]
[17 74]
[19 73]
[20 72]
[21 45]
[22 44]
[23 43]
[24 42]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[47 68]
[48 67]
[49 66]
[51 64]
[52 63]
[53 62]
[91 147]
[92 146]
[93 145]
[94 144]
[95 143]
[96 142]
[97 141]
[98 140]
[99 139]
[100 136]
[101 135]
[102 133]
[103 132]
[104 131]
[106 128]
[107 127]
[109 125]
[110 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
