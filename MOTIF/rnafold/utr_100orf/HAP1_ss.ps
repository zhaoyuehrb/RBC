%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGACUCGAGAUGCGCCCGAAGAGGUUGGGCCGGUGCUGCGCGGGGAGCCGGCUCGGACCCGGGGACCCAGCAGCACUCACCUGUGCACCUUCGCCCUCAGCCAGUCCCG\
) } def
/len { sequence length } bind def

/coor [
[133.27819824 343.64303589]
[130.37741089 328.92617798]
[127.47662354 314.20935059]
[117.42410278 303.21859741]
[122.34658813 288.18264771]
[119.44580078 273.46582031]
[105.12384033 264.77252197]
[101.38039398 248.09780884]
[110.98187256 233.55603027]
[107.67311096 218.92550659]
[104.16129303 204.34239197]
[100.44710541 189.80950928]
[89.79931641 179.39442444]
[93.87857056 164.10815430]
[90.16438293 149.57525635]
[86.45019531 135.04237366]
[73.82115173 126.94871521]
[59.06541061 129.64465332]
[44.30966949 132.34059143]
[29.55392647 135.03652954]
[14.79818439 137.73246765]
[0.04244256 140.42840576]
[-10.22430992 152.75614929]
[-26.26004028 152.27145386]
[-35.76350784 139.34614563]
[-31.44446564 123.89540863]
[-16.61611366 117.77172089]
[-2.65349436 125.67266083]
[12.10224819 122.97672272]
[26.85799026 120.28078461]
[41.61373138 117.58484650]
[56.36947250 114.88890839]
[71.12521362 112.19297791]
[74.45697784 87.14646149]
[93.88616180 74.88764191]
[94.71978760 59.91082001]
[95.55340576 44.93400192]
[96.38703156 29.95718384]
[97.22064972 14.98036671]
[98.05427551 0.00354893]
[98.88789368 -14.97326946]
[99.72151184 -29.95008659]
[91.67743683 -40.15003586]
[92.76471710 -52.69048309]
[101.84477234 -60.81584549]
[103.09439850 -75.76370239]
[104.34402466 -90.71156311]
[92.76526642 -100.87219238]
[89.42860413 -115.72884369]
[95.40913391 -129.53816223]
[108.22101593 -137.08757019]
[109.47064209 -152.03543091]
[110.72027588 -166.98329163]
[111.96990204 -181.93113708]
[100.74314117 -192.81663513]
[99.19144440 -208.37704468]
[108.04746246 -221.26521301]
[123.12966156 -225.39575195]
[137.31668091 -218.81832886]
[143.90985107 -204.63862610]
[139.79608154 -189.55184937]
[126.91775513 -180.68151855]
[125.66812897 -165.73365784]
[124.41850281 -150.78579712]
[123.16887665 -135.83795166]
[134.54943848 -126.26606750]
[138.15408325 -111.65544128]
[132.39697266 -97.55902100]
[119.29188538 -89.46192932]
[118.04225922 -74.51407623]
[116.79263306 -59.56621933]
[125.14471436 -44.20096588]
[114.69833374 -29.11646461]
[113.86470795 -14.13964748]
[113.03108978 0.83717036]
[112.19747162 15.81398869]
[111.36384583 30.79080582]
[110.53022766 45.76762390]
[109.69660187 60.74444199]
[108.86298370 75.72126007]
[116.99233246 79.62192535]
[123.47589111 86.22218323]
[127.42771912 94.84729767]
[128.23257446 104.53661346]
[125.63602448 114.15018463]
[119.79319763 122.50290680]
[111.26837921 128.51031494]
[100.98307800 131.32818604]
[104.69727325 145.86106873]
[108.41146088 160.39396667]
[119.32491302 171.84852600]
[114.97998810 186.09532166]
[118.69417572 200.62820435]
[123.92034149 208.29563904]
[122.30362701 215.61674500]
[125.61239624 230.24725342]
[137.82331848 236.12817383]
[144.28327942 247.82008362]
[142.80650330 260.89938354]
[134.16264343 270.56503296]
[137.06343079 285.28186035]
[147.32342529 297.32525635]
[142.19346619 311.30856323]
[145.09425354 326.02539062]
[147.99504089 340.74224854]
[162.13151550 347.14065552]
[169.77799988 360.64291382]
[167.99426270 376.05709839]
[157.46618652 387.45620728]
[142.24201965 390.45697021]
[128.17579651 383.90560913]
[120.67623138 370.32119751]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 105]
[2 104]
[3 103]
[5 101]
[6 100]
[9 96]
[10 95]
[11 93]
[12 92]
[14 90]
[15 89]
[16 88]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[35 80]
[36 79]
[37 78]
[38 77]
[39 76]
[40 75]
[41 74]
[42 73]
[45 71]
[46 70]
[47 69]
[51 65]
[52 64]
[53 63]
[54 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
