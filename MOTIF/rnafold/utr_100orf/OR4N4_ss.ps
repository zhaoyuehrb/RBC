%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUGGCAUACCUUGUGUUUAGUUCAAGAACUAUAAUCUAGAUGUAACACCUGAAAAUAAACUCUUUUAUUGAUAUUCUACAGGCAGAAGAAAUGAAGAUAGCAAACAACACAGUAGUGACAGAAUUUAUCCUCCUUGGUCUGACUCAGUCUCAAGAUAUUCAGCUCUUGGUCUUUGUGCUGAUCUUAAUUU\
) } def
/len { sequence length } bind def

/coor [
[76.81282806 227.88835144]
[81.76718903 213.54197693]
[91.57250214 201.95661926]
[104.90265656 194.69911194]
[102.94476318 179.82743835]
[100.98686981 164.95576477]
[99.02897644 150.08409119]
[97.07108307 135.21243286]
[95.11319733 120.34075165]
[88.35973358 117.07872772]
[81.83546448 130.58554077]
[68.32876587 124.06104279]
[74.85282135 110.55467987]
[68.09935760 107.29265594]
[55.23342896 115.00420380]
[42.36750031 122.71574402]
[29.50157166 130.42727661]
[16.63564301 138.13882446]
[12.68736267 153.20697021]
[-0.47037300 160.84428406]
[-14.81120968 156.98733521]
[-27.67713928 164.69888306]
[-40.54306793 172.41043091]
[-44.43360138 184.71888733]
[-55.32172394 190.87438965]
[-67.09379578 188.04789734]
[-80.08417511 195.54789734]
[-93.07455444 203.04789734]
[-95.61162567 218.47830200]
[-107.50723267 228.62860107]
[-123.14462280 228.70614624]
[-135.14030457 218.67431641]
[-137.83027649 203.26983643]
[-129.94442749 189.76622009]
[-115.20621490 184.53948975]
[-100.57455444 190.05751038]
[-87.58417511 182.55751038]
[-74.59379578 175.05751038]
[-66.66085815 159.41157532]
[-48.25460815 159.54449463]
[-35.38867950 151.83294678]
[-22.52275085 144.12141418]
[-19.16404533 129.65577698]
[-6.22601795 121.65189362]
[8.92410183 125.27289581]
[21.79003143 117.56135559]
[34.65596008 109.84981537]
[47.52188873 102.13827515]
[60.38781738 94.42672729]
[68.41278076 81.75392914]
[69.88304138 66.82615662]
[71.35329437 51.89838409]
[72.82355499 36.97061539]
[56.26528168 23.93299675]
[54.96128464 -0.10710496]
[41.61854553 -6.96066332]
[28.27580261 -13.81422138]
[14.93306255 -20.66777992]
[1.59032118 -27.52133751]
[-11.75242043 -34.37489700]
[-28.09634590 -33.03023148]
[-37.20910263 -46.66436768]
[-29.71627045 -61.25167465]
[-13.32582951 -61.78598022]
[-4.89886189 -47.71763611]
[8.44387913 -40.86407852]
[21.78662109 -34.01052094]
[35.12936020 -27.15696144]
[48.47210312 -20.30340385]
[61.81484222 -13.44984627]
[53.39125824 -25.86125946]
[41.78149796 -35.35933685]
[37.78203583 -49.81631851]
[42.85947418 -63.93083572]
[55.15191650 -72.52710724]
[70.15173340 -72.45288086]
[82.35849762 -63.73537445]
[87.29599762 -49.57130051]
[83.15495300 -35.15655899]
[83.29184723 -20.15718269]
[90.36280060 -33.38600159]
[97.43374634 -46.61481857]
[104.50469971 -59.84363937]
[111.57565308 -73.07245636]
[108.58486176 -85.62990570]
[114.75935364 -96.50727844]
[126.30970001 -100.13496399]
[133.59614563 -113.24631500]
[140.88259888 -126.35767365]
[140.65220642 -130.73023987]
[141.72612000 -134.55863953]
[143.77047729 -137.49777222]
[146.37326050 -139.34745789]
[149.09877014 -140.06552124]
[157.22714233 -152.67225647]
[158.20254517 -168.46336365]
[171.60214233 -174.96719360]
[179.73051453 -187.57392883]
[187.85888672 -200.18064880]
[195.98727417 -212.78738403]
[204.11564636 -225.39410400]
[195.00793457 -237.48852539]
[190.59591675 -251.94210815]
[191.39366150 -267.00476074]
[197.28556824 -280.85955811]
[207.54280090 -291.84185791]
[220.91323853 -298.63934326]
[235.77442932 -300.44879150]
[250.33038330 -297.07098389]
[258.45874023 -309.67773438]
[266.58712769 -322.28445435]
[266.85092163 -338.68148804]
[281.31262207 -346.41397095]
[295.09524536 -337.52740479]
[294.02044678 -321.16351318]
[279.19384766 -314.15606689]
[271.06549072 -301.54934692]
[262.93710327 -288.94262695]
[272.02117920 -277.07818604]
[276.50631714 -262.79489136]
[275.83282471 -247.81086731]
[270.06268311 -233.93545532]
[259.87448120 -222.85075378]
[246.48367310 -215.90765381]
[231.49755859 -213.96130371]
[216.72236633 -217.26573181]
[208.59399414 -204.65901184]
[200.46562195 -192.05227661]
[192.33724976 -179.44555664]
[184.20887756 -166.83882141]
[183.81486511 -151.94943237]
[169.83387756 -144.54388428]
[161.70550537 -131.93714905]
[153.99395752 -119.07122040]
[146.70750427 -105.95986938]
[139.42105103 -92.84851074]
[140.66036987 -75.35020447]
[124.80446625 -66.00151062]
[117.73352051 -52.77268982]
[110.66256714 -39.54386902]
[103.59161377 -26.31505013]
[96.52066803 -13.08623123]
[110.26328278 6.82342386]
[105.32489777 28.46579933]
[87.75132751 38.44087219]
[86.28106689 53.36864090]
[84.81081390 68.29640961]
[83.34055328 83.22418213]
[97.52832794 69.62068939]
[121.66893005 69.61888885]
[142.77601624 89.05445099]
[155.64195251 96.76599121]
[168.50787354 104.47753143]
[181.37380981 112.18907928]
[194.23973083 119.90061951]
[207.10566711 127.61215973]
[221.32929993 121.40990448]
[236.47476196 124.78548431]
[246.71832275 136.44091797]
[248.12110901 151.89445496]
[240.14373779 165.20388794]
[225.85366821 171.25148010]
[210.74571228 167.71180725]
[200.62919617 155.94593811]
[199.39411926 140.47808838]
[186.52819824 132.76654053]
[173.66226196 125.05500793]
[160.79634094 117.34346771]
[147.93040466 109.63191986]
[135.06448364 101.92037964]
[128.79457092 106.03600311]
[137.02561951 118.57593536]
[124.48555756 126.80678558]
[116.25476837 114.26724243]
[109.98486328 118.38285828]
[111.94275665 133.25453186]
[113.90065002 148.12620544]
[115.85854340 162.99787903]
[117.81643677 177.86955261]
[119.77433014 192.74122620]
[134.52865601 196.30133057]
[146.99836731 204.95411682]
[155.49702454 217.52937317]
[158.87528992 232.32640076]
[156.67623901 247.34400940]
[149.19729614 260.55120850]
[137.44993591 270.16180420]
[123.02287292 274.87606812]
[107.86725616 274.05645752]
[94.03276825 267.81375122]
[83.39039612 256.99227905]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 180]
[5 179]
[6 178]
[7 177]
[8 176]
[9 175]
[14 49]
[15 48]
[16 47]
[17 46]
[18 45]
[21 42]
[22 41]
[23 40]
[26 38]
[27 37]
[28 36]
[50 148]
[51 147]
[52 146]
[53 145]
[55 70]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
[80 142]
[81 141]
[82 140]
[83 139]
[84 138]
[87 136]
[88 135]
[89 134]
[94 133]
[95 132]
[97 130]
[98 129]
[99 128]
[100 127]
[101 126]
[109 118]
[110 117]
[111 116]
[151 170]
[152 169]
[153 168]
[154 167]
[155 166]
[156 165]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
