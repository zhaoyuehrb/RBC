%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:10:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCACAUCUGGUGGACCCUACAUCAGGAGACUUGCCAGUUAGAGACAUAGAUGCUAUACCUCUGGUGCUACCAGCCUCAAAAGGUAAGAAUAUGAAAA\
) } def
/len { sequence length } bind def

/coor [
[-37.84349442 182.30474854]
[-54.38496780 173.44894409]
[-67.11714935 159.69503784]
[-80.61719513 166.23330688]
[-94.11723328 172.77157593]
[-97.16601562 183.44447327]
[-105.48252106 190.45635986]
[-116.07614899 191.60928345]
[-125.31343842 186.75657654]
[-139.19384766 192.44290161]
[-153.07424927 198.12924194]
[-166.95466614 203.81556702]
[-180.83506775 209.50189209]
[-194.71546936 215.18821716]
[-208.59588623 220.87454224]
[-213.18348694 235.82405090]
[-226.33518982 244.28376770]
[-241.84117126 242.25924683]
[-252.37997437 230.70642090]
[-252.97549438 215.08018494]
[-243.34655762 202.75875854]
[-228.03964233 199.55995178]
[-214.28221130 206.99412537]
[-200.40180969 201.30780029]
[-186.52139282 195.62147522]
[-172.64099121 189.93515015]
[-158.76057434 184.24882507]
[-144.88017273 178.56250000]
[-130.99977112 172.87617493]
[-120.53483582 156.74241638]
[-100.65550232 159.27153015]
[-87.15545654 152.73327637]
[-73.65541840 146.19500732]
[-76.17561340 134.80767822]
[-76.30966949 123.13879395]
[-74.04910278 111.68325806]
[-69.48707581 100.92751312]
[-62.81453323 91.32886505]
[-54.31221008 83.29604340]
[-44.33883667 77.17179108]
[-33.31599045 73.21824646]
[-21.71028137 71.60572815]
[-10.01359463 72.40538788]
[1.27774704 75.58608246]
[11.68405342 81.01557922]
[20.76264000 88.46603394]
[28.12665939 97.62359619]
[33.46158981 108.10156250]
[48.05527115 104.63391876]
[62.64894867 101.16626740]
[77.24262238 97.69862366]
[81.22456360 86.93564606]
[89.93261719 79.46119690]
[101.17481995 77.15674591]
[112.12129974 80.60235596]
[120.01662445 88.93070984]
[134.79765320 86.37705994]
[142.88838196 81.75832367]
[150.07752991 83.98131561]
[164.93083191 81.88858795]
[179.78413391 79.79585266]
[194.63743591 77.70312500]
[209.49072266 75.61039734]
[224.02871704 71.91621399]
[238.07925415 66.66431427]
[252.12979126 61.41241837]
[266.18032837 56.16052246]
[280.23086548 50.90862274]
[292.95043945 39.69930267]
[307.24282837 48.81874084]
[302.43627930 65.07707977]
[285.48275757 64.95915985]
[271.43222046 70.21105957]
[257.38168335 75.46295166]
[243.33114624 80.71485138]
[229.28060913 85.96675110]
[242.37142944 93.29002380]
[247.93502808 107.22007751]
[243.49105835 121.54666138]
[231.02070618 129.88275146]
[216.08348083 128.51199341]
[205.33860779 118.04547119]
[203.57637024 103.14935303]
[211.58346558 90.46369171]
[196.73016357 92.55642700]
[181.87686157 94.64915466]
[167.02355957 96.74188232]
[152.17025757 98.83460999]
[137.35130310 101.15808868]
[122.57027435 103.71173859]
[112.99176788 118.82573700]
[95.46265411 122.41889954]
[80.71027374 112.29230499]
[66.11659241 115.75994873]
[51.52291489 119.22759247]
[36.92923737 122.69523621]
[35.64865875 141.53739929]
[28.29748726 158.91137695]
[15.69285870 172.92016602]
[-0.77528673 182.03898621]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 33]
[4 32]
[5 31]
[9 29]
[10 28]
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[48 96]
[49 95]
[50 94]
[51 93]
[56 90]
[57 89]
[59 88]
[60 87]
[61 86]
[62 85]
[63 84]
[64 76]
[65 75]
[66 74]
[67 73]
[68 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
