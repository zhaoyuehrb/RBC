%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:43:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUGGCUAGAAACAACUCCUUAGUGACUGAAUUUAUUCUUGCUGGAUUAACAGAUCAUCCAGAGUUCCAGCAACCCCUCUUUUUCCUGUUUCUAGUGG\
) } def
/len { sequence length } bind def

/coor [
[82.46015930 359.49877930]
[67.23459625 361.98590088]
[53.09051514 355.82565308]
[44.54124069 342.98379517]
[44.31481934 327.55810547]
[52.48349762 314.47085571]
[66.44068146 307.89813232]
[68.30216217 293.01406860]
[70.16364288 278.13003540]
[72.02512360 263.24597168]
[73.88661194 248.36193848]
[75.74809265 233.47789001]
[77.60957336 218.59384155]
[79.47105408 203.70979309]
[81.33253479 188.82574463]
[83.19401550 173.94169617]
[67.03990173 168.28944397]
[52.56481552 159.15843201]
[40.50614548 147.01379395]
[31.47817421 132.47422791]
[25.94079781 116.28037262]
[24.17609787 99.25717163]
[9.26490116 97.62738800]
[-5.64629698 95.99760437]
[-20.55749512 94.36782837]
[-36.95980453 98.65741730]
[-45.62236404 84.08358765]
[-34.01612473 71.72512817]
[-18.92771149 79.45662689]
[-4.01651430 81.08641052]
[10.89468288 82.71619415]
[25.80587959 84.34597778]
[30.16411972 70.45738983]
[37.09588623 57.65748978]
[46.34573746 46.41794968]
[57.57280731 37.15296936]
[70.36336517 30.20396996]
[84.24606323 25.82703018]
[98.70931244 24.18344498]
[113.22012329 25.33378220]
[127.24375916 29.23564911]
[133.99118042 15.83892441]
[140.73861694 2.44219899]
[147.48603821 -10.95452595]
[154.23345947 -24.35125160]
[160.98089600 -37.74797821]
[167.72831726 -51.14470291]
[174.47573853 -64.54142761]
[163.56851196 -75.00678253]
[156.23202515 -88.22296906]
[153.11865234 -103.01480103]
[154.50521851 -118.06700134]
[160.26844788 -132.04113770]
[169.89585876 -143.69465637]
[182.53140259 -151.99131775]
[197.05152893 -156.19337463]
[212.16511536 -155.92721558]
[226.52827454 -151.21649170]
[238.86384583 -142.48007202]
[248.07496643 -130.49479675]
[253.34257507 -116.32639313]
[254.19828796 -101.23470306]
[250.56600952 -86.56166840]
[242.76872253 -73.61199951]
[231.49977112 -63.53718567]
[217.76115417 -57.23306274]
[202.77452087 -55.26019287]
[187.87246704 -57.79400253]
[181.12504578 -44.39727783]
[174.37760925 -31.00055122]
[167.63018799 -17.60382652]
[160.88276672 -4.20710087]
[154.13534546 9.18962479]
[147.38790894 22.58634949]
[140.64048767 35.98307419]
[151.76742554 44.59287643]
[161.11227417 55.11007309]
[168.35333252 67.17259979]
[173.24131775 80.36521912]
[175.60797119 94.23375702]
[175.37182617 108.30080414]
[172.54100037 122.08209229]
[167.21295166 135.10321045]
[159.57109070 146.91589355]
[149.87849426 157.11349487]
[138.46882629 165.34497070]
[125.73487854 171.32693481]
[112.11499786 174.85346985]
[98.07806396 175.80317688]
[96.21658325 190.68722534]
[94.35510254 205.57127380]
[92.49362183 220.45532227]
[90.63214111 235.33937073]
[88.77066040 250.22341919]
[86.90917206 265.10748291]
[85.04769135 279.99151611]
[83.18621063 294.87554932]
[81.32472992 309.75961304]
[93.23329926 319.56723022]
[97.92726135 334.26315308]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 98]
[8 97]
[9 96]
[10 95]
[11 94]
[12 93]
[13 92]
[14 91]
[15 90]
[16 89]
[22 32]
[23 31]
[24 30]
[25 29]
[41 75]
[42 74]
[43 73]
[44 72]
[45 71]
[46 70]
[47 69]
[48 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
