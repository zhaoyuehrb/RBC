%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:10:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUCCACCCUCAAUCUACCAGAAUCAUGGGCUGCUGUGGCUGCUCCGGAGGCUGUGGCUCCGGCUGUGGGGGUUGUGGCUCCGGCUGUGGGGGCUGUGGCUCCGGCUGUGGGGGCUAUGGCUCUG\
) } def
/len { sequence length } bind def

/coor [
[-8.99701595 276.85519409]
[-14.81826401 281.13806152]
[-21.47071838 283.91458130]
[-28.57310486 285.03509521]
[-35.72058105 284.44451904]
[-42.50781631 282.18505859]
[-48.55198669 278.39337158]
[-60.50897217 287.45043945]
[-72.46595764 296.50750732]
[-70.23065186 312.83764648]
[-76.47009277 327.99237061]
[-89.40673828 337.90109253]
[-105.47808075 339.95355225]
[-120.31747437 333.68682861]
[-132.04493713 343.03918457]
[-143.77241516 352.39154053]
[-152.38612366 366.99429321]
[-168.80270386 362.75967407]
[-169.27812195 345.81237793]
[-153.12477112 340.66406250]
[-141.39729309 331.31170654]
[-129.66981506 321.95938110]
[-132.59307861 308.55895996]
[-129.41935730 295.14739990]
[-120.71685791 284.37509155]
[-108.15211487 278.39624023]
[-94.17107391 278.43835449]
[-81.52302551 284.55053711]
[-69.56604004 275.49346924]
[-57.60905075 266.43640137]
[-57.69820023 242.86386108]
[-40.57645035 226.31112671]
[-16.53640366 227.21475220]
[-6.89458942 215.72407532]
[2.74722481 204.23341370]
[12.38903904 192.74275208]
[22.03085327 181.25207520]
[31.67266655 169.76141357]
[41.31447983 158.27075195]
[50.95629501 146.78007507]
[60.59811020 135.28941345]
[62.85192490 120.56632233]
[77.64962006 114.96821594]
[87.29143524 103.47754669]
[96.34850311 91.52056122]
[104.79830170 79.12697601]
[113.24810791 66.73339844]
[121.69790649 54.33981705]
[130.14770508 41.94623184]
[138.59750366 29.55265236]
[140.88507080 20.59314537]
[147.41566467 16.95901680]
[156.17181396 4.77994728]
[164.92797852 -7.39912319]
[173.68412781 -19.57819366]
[182.44029236 -31.75726318]
[191.19644165 -43.93633270]
[199.95259094 -56.11540222]
[208.70875549 -68.29447174]
[217.46490479 -80.47354126]
[226.22105408 -92.65261078]
[227.99461365 -108.37409973]
[241.70628357 -114.19125366]
[250.46244812 -126.37032318]
[252.23599243 -142.09181213]
[265.94766235 -147.90896606]
[274.70382690 -160.08802795]
[276.47738647 -175.80952454]
[290.18905640 -181.62667847]
[298.94522095 -193.80574036]
[307.70135498 -205.98481750]
[316.45751953 -218.16387939]
[325.21368408 -230.34295654]
[326.30722046 -246.70559692]
[341.14181519 -253.69607544]
[354.45690918 -244.12318420]
[352.55505371 -227.83468628]
[337.39273071 -221.58679199]
[328.63659668 -209.40773010]
[319.88043213 -197.22865295]
[311.12426758 -185.04959106]
[302.36813354 -172.87051392]
[301.22085571 -158.02015686]
[286.88290405 -151.33187866]
[278.12673950 -139.15280151]
[276.97949219 -124.30245209]
[262.64151001 -117.61416626]
[253.88536072 -105.43509674]
[252.73809814 -90.58473969]
[238.40013123 -83.89646149]
[229.64398193 -71.71739197]
[220.88781738 -59.53831863]
[212.13166809 -47.35924911]
[203.37550354 -35.18017960]
[194.61935425 -23.00110817]
[185.86320496 -10.82203770]
[177.10704041 1.35703218]
[168.35089111 13.53610229]
[159.59474182 25.71517181]
[150.99108887 38.00245285]
[142.54129028 50.39603424]
[134.09149170 62.78961563]
[125.64168549 75.18319702]
[117.19188690 87.57678223]
[108.74208069 99.97035980]
[109.10943604 103.11980438]
[108.28584290 106.47475433]
[106.19269562 109.57409668]
[102.93049622 111.93452454]
[98.78210449 113.11936188]
[89.14028931 124.61003113]
[86.19682312 140.15501404]
[72.08877563 144.93122864]
[62.44696045 156.42189026]
[52.80514908 167.91256714]
[43.16333389 179.40322876]
[33.52151871 190.89389038]
[23.87970543 202.38456726]
[14.23789120 213.87522888]
[4.59607744 225.36589050]
[-5.04573679 236.85656738]
[-1.54735053 243.30627441]
[0.32066044 250.38287354]
[0.46059334 257.68212891]
[-1.12679708 264.78921509]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 30]
[8 29]
[9 28]
[14 22]
[15 21]
[16 20]
[33 121]
[34 120]
[35 119]
[36 118]
[37 117]
[38 116]
[39 115]
[40 114]
[41 113]
[43 111]
[44 110]
[45 105]
[46 104]
[47 103]
[48 102]
[49 101]
[50 100]
[52 99]
[53 98]
[54 97]
[55 96]
[56 95]
[57 94]
[58 93]
[59 92]
[60 91]
[61 90]
[63 88]
[64 87]
[66 85]
[67 84]
[69 82]
[70 81]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
