%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGCUGCGCGGCCGGGUGGCGCGGGAGGAAGUCACGUGGGAGCGCGGGCUCACAUGACUGGCCGCGCGAUGGACCCGCUGCCCGCGGCUGCAGUCGGGGCGGCAGCUGAGGCGGAGGCUGACGAGGAGGCGGAUCCCCCGGCGUCAGAUCUGC\
) } def
/len { sequence length } bind def

/coor [
[89.49851227 112.45072174]
[88.77448273 103.75599670]
[73.78141022 103.30003357]
[58.78834534 102.84406281]
[43.79142380 102.54006195]
[28.79219627 102.38804626]
[13.79527664 102.69205475]
[-1.18547118 103.45178986]
[-16.16621971 104.21152496]
[-31.14696693 104.97126770]
[-46.12771225 105.73100281]
[-61.10846329 106.49073792]
[-76.08921051 107.25048065]
[-91.06995392 108.01021576]
[-106.05070496 108.76995087]
[-121.03144836 109.52969360]
[-135.47341919 113.58300781]
[-148.66172791 120.72925568]
[-161.85002136 127.87549591]
[-175.03831482 135.02174377]
[-188.22660828 142.16798401]
[-188.56141663 157.52323914]
[-196.54269409 170.64553833]
[-210.02352905 178.00505066]
[-225.37765503 177.62211609]
[-238.47486877 169.59974670]
[-245.79209900 156.09590149]
[-245.36103821 140.74305725]
[-237.29765320 127.67105865]
[-223.77093506 120.39619446]
[-208.41952515 120.87537384]
[-195.37286377 128.97969055]
[-182.18455505 121.83345032]
[-168.99626160 114.68720245]
[-155.80796814 107.54095459]
[-142.61967468 100.39470673]
[-143.98588562 85.45705414]
[-158.25173950 80.82180023]
[-172.51757812 76.18654633]
[-188.03327942 79.28067017]
[-197.74668884 67.98912048]
[-212.01252747 63.35386276]
[-226.27838135 58.71860886]
[-240.54421997 54.08335114]
[-256.46377563 58.02033234]
[-267.63653564 46.01610184]
[-262.56893921 30.41958618]
[-246.47406006 27.27514267]
[-235.90896606 39.81750488]
[-221.64312744 44.45275879]
[-207.37727356 49.08801270]
[-193.11143494 53.72327042]
[-178.61611938 50.29760361]
[-167.88232422 61.92070007]
[-153.61648560 66.55595398]
[-139.35063171 71.19120789]
[-128.79278564 77.16793060]
[-122.87246704 85.77783966]
[-121.79119110 94.54894257]
[-106.81044006 93.78920746]
[-91.82969666 93.02946472]
[-76.84894562 92.26972961]
[-61.86819839 91.50999451]
[-46.88745117 90.75025940]
[-31.90670395 89.99051666]
[-16.92595673 89.23078156]
[-1.94520867 88.47104645]
[13.03553867 87.71130371]
[15.68196774 85.29802704]
[19.65039062 84.07736969]
[24.35287285 84.66625977]
[28.94420624 87.38881683]
[43.94343567 87.54083252]
[50.70355606 84.44561005]
[59.24431229 87.85099792]
[74.23738098 88.30696106]
[89.23044586 88.76293182]
[102.41874695 81.61668396]
[110.22379303 68.80726624]
[118.02884674 55.99784851]
[125.83389282 43.18843079]
[133.63894653 30.37901115]
[141.44400024 17.56959343]
[149.24905396 4.76017570]
[151.05990601 -4.25436783]
[157.34432983 -8.22749329]
[165.40737915 -20.87609482]
[173.47042847 -33.52469635]
[181.53349304 -46.17330170]
[181.71246338 -62.57147217]
[196.13397217 -70.37866974]
[209.96238708 -61.56352234]
[208.97222900 -45.19429398]
[194.18208313 -38.11024475]
[186.11903381 -25.46164322]
[178.05598450 -12.81303978]
[169.99291992 -0.16443780]
[162.05847168 12.56522560]
[154.25341797 25.37464333]
[146.44836426 38.18406296]
[138.64331055 50.99348068]
[130.83825684 63.80289841]
[123.03321075 76.61231232]
[115.22816467 89.42173767]
[124.46822357 77.60559082]
[139.00787354 73.91798401]
[152.76251221 79.90213013]
[159.97604370 93.05374146]
[157.62971497 107.86909485]
[146.70544434 118.14820862]
[131.77484131 119.58943176]
[119.08533478 111.58865356]
[130.75845337 121.00875092]
[142.43156433 130.42886353]
[154.10469055 139.84895325]
[165.77780151 149.26905823]
[178.70112610 148.68386841]
[188.23754883 156.81906128]
[189.60472107 168.87515259]
[201.08453369 178.52989197]
[212.56433105 188.18463135]
[224.04412842 197.83938599]
[235.52394104 207.49412537]
[247.00373840 217.14888000]
[265.18124390 219.91627502]
[270.57241821 236.59030151]
[282.24551392 246.01040649]
[290.94406128 248.98974609]
[294.05722046 255.74163818]
[305.53701782 265.39639282]
[321.25915527 263.78713989]
[333.46139526 273.83111572]
[334.90429688 289.56939697]
[324.73187256 301.66473389]
[308.97921753 302.94119263]
[296.99209595 292.64144897]
[295.88226318 276.87619019]
[284.40246582 267.22143555]
[272.82540894 257.68353271]
[261.15231323 248.26341248]
[249.05740356 249.22859192]
[239.24763489 241.42515564]
[237.34898376 228.62867737]
[225.86918640 218.97393799]
[214.38938904 209.31918335]
[202.90957642 199.66444397]
[191.42977905 190.00968933]
[179.94998169 180.35494995]
[162.55242920 178.25418091]
[156.35769653 160.94218445]
[144.68458557 151.52207947]
[133.01145935 142.10197449]
[121.33834839 132.68186951]
[109.66522980 123.26176453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 77]
[3 76]
[4 75]
[5 73]
[6 72]
[7 68]
[8 67]
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[15 60]
[16 59]
[17 36]
[18 35]
[19 34]
[20 33]
[21 32]
[37 56]
[38 55]
[39 54]
[41 52]
[42 51]
[43 50]
[44 49]
[78 104]
[79 103]
[80 102]
[81 101]
[82 100]
[83 99]
[84 98]
[86 97]
[87 96]
[88 95]
[89 94]
[112 154]
[113 153]
[114 152]
[115 151]
[116 150]
[119 148]
[120 147]
[121 146]
[122 145]
[123 144]
[124 143]
[126 140]
[127 139]
[129 138]
[130 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
