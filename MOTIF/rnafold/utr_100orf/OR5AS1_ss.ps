%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:14:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUUGGAGAGUAAUUACACCAUGCCAACUGAGUUCCUAUUUGUUGGAUUCACAGAUUAUCUACCUCUCAGAGUCACACUGUUCUUGGUAUUCCUUCUGG\
) } def
/len { sequence length } bind def

/coor [
[102.41055298 116.12594604]
[96.34912109 117.91480255]
[89.40191650 117.26805878]
[76.81762695 125.43112183]
[64.23332977 133.59419250]
[51.64904022 141.75724792]
[39.06474686 149.92031860]
[38.44004822 166.73803711]
[28.06857491 179.78141785]
[12.14258957 184.09260559]
[-3.08445501 178.18151855]
[-15.40878963 186.73200989]
[-17.97340012 202.32682800]
[-30.86258316 211.47256470]
[-46.42941284 208.74322510]
[-55.43836975 195.75805664]
[-52.54459381 180.22096252]
[-39.46491623 171.34979248]
[-23.95927429 174.40766907]
[-11.63493919 165.85719299]
[-12.57063103 152.44148254]
[-6.66725397 140.23715210]
[4.61096811 132.51963806]
[18.34176445 131.41966248]
[30.90168571 137.33601379]
[43.48597717 129.17295837]
[56.07027054 121.00989532]
[68.65456390 112.84683228]
[81.23885345 104.68376923]
[84.25096130 89.98930359]
[75.89317322 77.53348541]
[67.53539276 65.07766724]
[59.17760849 52.62184906]
[50.81982422 40.16602707]
[43.30389404 34.66117096]
[42.40285873 27.19031906]
[34.43649292 14.48059845]
[18.94710922 13.55397224]
[6.98200035 3.67390132]
[3.14199448 -11.36052513]
[8.90365219 -25.76826286]
[22.05149841 -34.00924301]
[37.52991867 -32.91464233]
[49.38714218 -22.90535545]
[53.06382751 -7.83015680]
[47.14621353 6.51423120]
[55.11257935 19.22395134]
[63.27564240 31.80824280]
[71.63343048 44.26406479]
[79.99121094 56.71988297]
[88.34899139 69.17570496]
[96.70677948 81.63152313]
[109.88717651 88.79232025]
[124.88536835 89.02559662]
[139.88354492 89.25887299]
[154.88174438 89.49214935]
[161.77241516 75.91717529]
[173.82461548 66.71764374]
[188.61537170 63.67566299]
[203.20022583 67.34211731]
[214.69943237 76.93784332]
[220.86647034 90.51845551]
[235.86465454 90.75173187]
[250.86283875 90.98501587]
[265.86102295 91.21829224]
[276.15432739 76.47293854]
[293.04785156 70.77740479]
[309.87277222 76.18575287]
[320.10235596 90.40660095]
[335.08602905 89.70699310]
[350.06973267 89.00738525]
[359.40719604 76.46364594]
[374.63494873 72.90692902]
[388.56283569 80.01660919]
[394.61459351 94.43570709]
[389.93273926 109.35596466]
[376.72790527 117.73249817]
[361.23501587 115.61016846]
[350.76931763 103.99106598]
[335.78564453 104.69066620]
[320.80197144 105.39027405]
[315.60260010 116.57916260]
[306.03814697 124.48798370]
[293.93054199 127.52887726]
[281.62133789 125.04909515]
[271.51901245 117.46989441]
[265.62774658 106.21647644]
[250.62956238 105.98320007]
[235.63137817 105.74992371]
[220.63319397 105.51664734]
[214.04678345 118.89889526]
[202.25471497 128.13235474]
[187.56289673 131.34346008]
[172.87388611 127.84294891]
[161.11361694 118.27304840]
[154.64846802 104.49034119]
[139.65026855 104.25706482]
[124.65209198 104.02378082]
[109.65390015 103.79050446]
[109.25516510 108.17601013]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 29]
[4 28]
[5 27]
[6 26]
[7 25]
[11 20]
[12 19]
[30 52]
[31 51]
[32 50]
[33 49]
[34 48]
[36 47]
[37 46]
[53 99]
[54 98]
[55 97]
[56 96]
[62 90]
[63 89]
[64 88]
[65 87]
[69 81]
[70 80]
[71 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
