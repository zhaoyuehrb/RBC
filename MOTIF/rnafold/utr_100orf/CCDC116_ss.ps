%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:05:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGCCUGUGCGGAGCAAGGCGGUGUUUCUGAGAGGAAUGCGCAGCUGAAGAGAGAGGUGGGCAGCAGGCCCGGUCACCUGCCAGGUGACCACAUGGCCAGGUGCCGCCACCACUCGGGUUACCUGGCCGAUGACGAGGCCAGCCACUCCAUGUGCAGUGCACGGGUGCAGCUGCCCAAGAAGCCACUGGUCC\
) } def
/len { sequence length } bind def

/coor [
[51.94114685 443.33480835]
[37.15708542 440.79876709]
[26.01325989 430.75808716]
[21.95536995 416.31723022]
[16.04723358 430.10467529]
[10.13909721 443.89215088]
[4.23096085 457.67959595]
[3.72499514 466.81460571]
[-1.88609481 471.64123535]
[-8.01671791 485.33123779]
[-14.14734077 499.02120972]
[-15.10264015 515.94824219]
[-31.63259125 519.71612549]
[-39.82918549 504.87521362]
[-27.83731651 492.89056396]
[-21.70669365 479.20059204]
[-15.57607174 465.51062012]
[-9.55649471 451.77145386]
[-3.64835811 437.98400879]
[2.25977826 424.19653320]
[8.16791439 410.40908813]
[13.05654049 396.22805786]
[16.89970779 381.72875977]
[20.74287415 367.22943115]
[24.58604050 352.73013306]
[28.31168365 338.20016479]
[31.91955757 323.64053345]
[35.52743149 309.08090210]
[39.13530731 294.52124023]
[42.74317932 279.96160889]
[30.37486267 288.44833374]
[15.37745476 288.16949463]
[3.33317876 279.22882080]
[-1.27493668 264.95419312]
[3.26830673 250.65876770]
[15.27185726 241.66349792]
[30.26784325 241.31654358]
[42.67457581 249.74702454]
[47.87403488 263.81533813]
[53.33260727 249.84378052]
[50.75732422 235.17350769]
[62.98607635 225.13516235]
[68.44464874 211.16362000]
[73.90322113 197.19207764]
[79.36180115 183.22055054]
[84.82037354 169.24900818]
[90.27894592 155.27746582]
[95.73751831 141.30592346]
[76.55411530 135.04135132]
[62.32413101 120.30278778]
[56.56673050 100.32207489]
[60.89788437 79.67107391]
[74.59021759 63.21573639]
[68.68207550 49.42828369]
[62.77394104 35.64082718]
[50.22654343 26.00374413]
[52.32542419 11.25776291]
[46.41728973 -2.52969193]
[40.50915146 -16.31714821]
[34.60101700 -30.10460281]
[28.69288063 -43.89205933]
[22.56225777 -57.58203506]
[16.21075630 -71.17094421]
[9.85925388 -84.75984955]
[-5.23958302 -87.81456757]
[-15.52433491 -99.04298401]
[-17.20541763 -113.99751282]
[-9.84640217 -126.91970062]
[-16.19790459 -140.50860596]
[-22.54940605 -154.09751892]
[-28.90090752 -167.68641663]
[-47.18447876 -178.84576416]
[-44.58753967 -199.31304932]
[-51.59145355 -212.57748413]
[-58.59537125 -225.84191895]
[-65.59928894 -239.10635376]
[-72.60320282 -252.37078857]
[-79.60711670 -265.63522339]
[-86.61103058 -278.89965820]
[-93.61494446 -292.16409302]
[-106.35742950 -303.34735107]
[-99.13867188 -318.68768311]
[-82.39949799 -315.99768066]
[-80.35051727 -299.16799927]
[-73.34660339 -285.90356445]
[-66.34268188 -272.63912964]
[-59.33876801 -259.37469482]
[-52.33485413 -246.11027527]
[-45.33093643 -232.84584045]
[-38.32702255 -219.58140564]
[-31.32310677 -206.31697083]
[-22.50194740 -205.10838318]
[-15.11855888 -199.89012146]
[-10.90857983 -191.73353577]
[-10.93257999 -182.41687012]
[-15.31199932 -174.03791809]
[-8.96049786 -160.44902039]
[-2.60899615 -146.86010742]
[3.74250555 -133.27119446]
[18.37653732 -130.62863159]
[28.77138901 -119.74695587]
[30.78910065 -104.65449524]
[23.44816208 -91.11135101]
[29.79966354 -77.52244568]
[36.15116501 -63.93353653]
[40.26814270 -61.48742676]
[42.88467789 -56.42235565]
[42.48033524 -49.80019379]
[48.38847351 -36.01273727]
[54.29660797 -22.22528458]
[60.20474625 -8.43782806]
[66.11288452 5.34962702]
[78.23769379 14.00053787]
[76.56140137 29.73269081]
[82.46953583 43.52014542]
[88.37767029 57.30760193]
[103.14031982 59.96546555]
[113.48617554 49.10437775]
[116.81660461 33.04697037]
[132.47070312 28.16012573]
[144.34487915 39.47100830]
[140.22398376 55.34395218]
[124.34726715 59.45023346]
[114.00140381 70.31132507]
[122.46076202 82.69838715]
[136.34208679 77.01428223]
[150.22340393 71.33018494]
[164.10472107 65.64608002]
[177.98603821 59.96198273]
[181.53852844 44.85703659]
[193.31297302 34.75049973]
[208.78186035 33.52854538]
[221.99708557 41.66103745]
[227.87712097 56.02086639]
[224.16098022 71.08638763]
[212.27758789 81.06459808]
[196.79635620 82.11867523]
[183.67013550 73.84329987]
[169.78881836 79.52740479]
[155.90750122 85.21150208]
[142.02618408 90.89559937]
[128.14486694 96.57970428]
[128.26631165 104.07872009]
[128.50920105 119.07675171]
[128.63066101 126.57576752]
[142.68875122 131.80738831]
[156.74685669 137.03900146]
[170.80496216 142.27061462]
[184.86305237 147.50222778]
[190.03753662 146.62489319]
[194.57318115 147.71952820]
[197.82356262 150.20941162]
[199.46646118 153.34440613]
[213.25392151 159.25253296]
[227.04138184 165.16067505]
[240.82882690 171.06880188]
[257.76910400 171.74987793]
[261.80416870 188.21665955]
[247.09794617 196.65249634]
[234.92070007 184.85626221]
[221.13323975 178.94813538]
[207.34577942 173.03999329]
[193.55833435 167.13185120]
[179.63143921 161.56033325]
[165.57333374 156.32872009]
[151.51524353 151.09710693]
[137.45713806 145.86549377]
[123.39904022 140.63386536]
[109.70906067 146.76449585]
[104.25048828 160.73603821]
[98.79191589 174.70758057]
[93.33334351 188.67912292]
[87.87476349 202.65066528]
[82.41619110 216.62220764]
[76.95761871 230.59373474]
[79.14247131 246.26336670]
[67.30415344 255.30236816]
[61.84557724 269.27389526]
[57.30282593 283.56948853]
[53.69495010 298.12911987]
[50.08707428 312.68875122]
[46.47920227 327.24841309]
[42.87132645 341.80804443]
[43.84482956 350.90512085]
[39.08535385 356.57330322]
[35.24218750 371.07260132]
[31.39901924 385.57192993]
[27.55585289 400.07122803]
[39.65042496 391.19873047]
[54.61428070 390.15808105]
[67.82055664 397.27102661]
[75.18583679 410.33825684]
[74.43275452 425.31936646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 21]
[5 20]
[6 19]
[7 18]
[9 17]
[10 16]
[11 15]
[22 188]
[23 187]
[24 186]
[25 185]
[26 183]
[27 182]
[28 181]
[29 180]
[30 179]
[39 178]
[40 177]
[42 175]
[43 174]
[44 173]
[45 172]
[46 171]
[47 170]
[48 169]
[53 116]
[54 115]
[55 114]
[57 112]
[58 111]
[59 110]
[60 109]
[61 108]
[62 105]
[63 104]
[64 103]
[68 99]
[69 98]
[70 97]
[71 96]
[73 91]
[74 90]
[75 89]
[76 88]
[77 87]
[78 86]
[79 85]
[80 84]
[117 124]
[118 123]
[125 142]
[126 141]
[127 140]
[128 139]
[129 138]
[145 168]
[146 167]
[147 166]
[148 165]
[149 164]
[153 163]
[154 162]
[155 161]
[156 160]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
