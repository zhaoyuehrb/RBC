%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:11:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACAGAGAAAUUCCUUUUCCUUUAUCUUUCCCUCCUUCCCAUGCCCCUACUCUCACAGGCACAGUGGAAUGAAAAUUCCCUUGUCAGUUUUUCCAAAA\
) } def
/len { sequence length } bind def

/coor [
[108.19270325 187.25346375]
[119.49415588 177.08757019]
[114.46141052 162.95706177]
[109.42865753 148.82653809]
[104.39590454 134.69602966]
[99.36315918 120.56551361]
[84.88438416 116.64568329]
[73.41039276 126.30734253]
[61.93640518 135.96899414]
[50.46241760 145.63066101]
[38.98843002 155.29231262]
[36.19070816 171.08953857]
[22.02734375 178.62469482]
[7.36325598 172.11746216]
[3.44747996 156.55961609]
[13.28386307 143.88583374]
[29.32677460 143.81832886]
[40.80076218 134.15666199]
[52.27474976 124.49501038]
[63.74873734 114.83335114]
[75.22272491 105.17169952]
[60.52130890 108.14967346]
[47.58037186 115.73466492]
[33.11257172 119.69481659]
[18.11270332 119.75782776]
[3.61214328 115.91937256]
[-9.39206505 108.44337463]
[-20.00576591 97.84387207]
[-27.49917221 84.84968567]
[-31.35704231 70.35427856]
[-31.31411743 55.35434341]
[-27.37334442 40.88125229]
[-19.80568886 27.93016815]
[-9.13149548 17.39159203]
[3.91528893 9.99014568]
[18.43758011 6.23474503]
[33.43684387 6.38360834]
[47.88173676 10.42650032]
[60.77905273 18.08543396]
[71.24198151 28.83378983]
[78.55110168 41.93252182]
[82.20384216 56.48097610]
[81.94958496 71.47521210]
[86.57359314 85.74470520]
[89.35680389 71.00518036]
[92.14002228 56.26565170]
[94.92324066 41.52612305]
[82.60870361 32.50864029]
[75.43381500 19.03705215]
[74.82313538 3.78615570]
[80.89793396 -10.21597385]
[92.45204163 -20.18920326]
[107.19139099 -24.15333939]
[122.18946838 -21.32130241]
[134.46839905 -12.25539398]
[141.59017944 1.24434292]
[142.14079285 16.49752617]
[136.01091003 30.47562408]
[124.41761017 40.40327454]
[109.66276550 44.30933762]
[106.87955475 59.04886627]
[104.09633636 73.78839874]
[101.31311798 88.52792358]
[109.36225128 85.35054016]
[119.83025360 87.91184235]
[134.74145508 86.28206635]
[143.10368347 82.17527008]
[150.14071655 84.84090424]
[165.09538269 83.67564392]
[180.05006409 82.51038361]
[195.00473022 81.34513092]
[209.95939636 80.17987061]
[223.16809082 70.46069336]
[238.07888794 77.28712463]
[239.35284424 93.63671112]
[225.67941284 102.69040680]
[211.12466431 95.13454437]
[196.16998291 96.29979706]
[181.21531677 97.46505737]
[166.26065063 98.63031769]
[151.30596924 99.79557037]
[136.37123108 101.19326019]
[121.46003723 102.82304382]
[113.49367523 115.53276062]
[118.52642059 129.66328430]
[123.55917358 143.79379272]
[128.59191895 157.92430115]
[133.62467957 172.05482483]
[148.80792236 172.78787231]
[162.55274963 179.28002930]
[172.76316833 190.54129028]
[177.88217163 204.85437012]
[177.12913513 220.03663635]
[170.61891174 233.77291870]
[159.34423828 243.96852112]
[145.02444458 249.06867981]
[129.84317017 248.29568481]
[116.11547089 241.76737976]
[105.93470764 230.47930908]
[100.85337830 216.15281677]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 88]
[3 87]
[4 86]
[5 85]
[6 84]
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[44 63]
[45 62]
[46 61]
[47 60]
[65 83]
[66 82]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
