%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:45:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAAUUGACAGCCUCAAGGUUCCUGGCUUUUUGAACCACCACAGACAUCUCCUUUCCCGGCUACCCCACCCUGAGCGCCAGACACCAUGAACCUUCCUUCCACAAAGGUCUCCUGGGCCGCCGUGACGCUACUGCUGCUGCUGCUGCUGCUGCCGCCCGCGCUGUUGUCGUCCGGGGCGGCUGCAC\
) } def
/len { sequence length } bind def

/coor [
[105.54283142 249.70336914]
[92.28934479 257.77337646]
[76.82640076 256.47839355]
[65.09981537 246.31636047]
[61.61869812 231.19479370]
[67.72161102 216.92826843]
[81.06185150 209.00251770]
[82.31369019 194.05484009]
[79.73373413 187.11311340]
[83.71337891 178.86856079]
[85.21481323 163.94389343]
[86.71625519 149.01922607]
[88.21768951 134.09455872]
[89.71912384 119.16988373]
[80.82142639 107.09383392]
[66.12200165 104.10604095]
[51.42257309 101.11825562]
[36.35777283 105.95171356]
[25.42669487 95.83435822]
[10.72727013 92.84657288]
[-3.97215581 89.85877991]
[-17.05223465 98.31745911]
[-31.91697884 95.07801819]
[-39.90043259 82.55603790]
[-54.59985733 79.56824493]
[-69.29928589 76.58045959]
[-83.99871063 73.59266663]
[-98.69813538 70.60487366]
[-98.80934906 82.74116516]
[-106.52952576 95.19565582]
[-121.66631317 103.90372467]
[-136.06510925 108.10784912]
[-150.46391296 112.31196594]
[-164.86270142 116.51608276]
[-169.97244263 131.16770935]
[-182.73748779 139.99002075]
[-198.24942017 139.59066772]
[-210.54359436 130.12318420]
[-214.89263916 115.22804260]
[-209.62425232 100.63270569]
[-196.76425171 91.94938660]
[-181.25756836 92.51700592]
[-169.06683350 102.11728668]
[-154.66802979 97.91316986]
[-140.26922607 93.70904541]
[-125.87042999 89.50492859]
[-124.19280243 82.19496918]
[-138.84449768 78.98127747]
[-153.49618530 75.76758575]
[-168.14788818 72.55390167]
[-182.79957581 69.34020996]
[-197.26278687 73.31712341]
[-208.09352112 62.93949509]
[-204.73793030 48.31964111]
[-190.46583557 43.70367050]
[-179.18466187 53.58892059]
[-164.59788513 57.08545303]
[-150.01109314 60.58198166]
[-135.42431641 64.07851410]
[-120.83753204 67.57504272]
[-119.15989685 60.26507950]
[-130.28468323 50.20331192]
[-141.40945435 40.14154053]
[-155.75328064 45.48131943]
[-170.93415833 43.53204727]
[-183.46362305 34.74165344]
[-190.46250916 21.13010406]
[-190.32250977 5.82523537]
[-183.07580566 -7.65600586]
[-170.38763428 -16.21572876]
[-155.17364502 -17.88697433]
[-140.92990112 -12.28569984]
[-130.92950439 -0.69903851]
[-127.47048187 14.21047974]
[-131.34768677 29.01675797]
[-120.22290802 39.07852936]
[-109.09812927 49.14030075]
[-95.71034241 55.90545273]
[-81.01091766 58.89324188]
[-66.31149292 61.88103104]
[-51.61206818 64.86882019]
[-36.91264343 67.85661316]
[-24.67423058 59.44490051]
[-9.72435951 62.26554871]
[-0.98436606 75.15935516]
[13.71505928 78.14714050]
[28.41448593 81.13493347]
[42.42788696 76.08776855]
[54.41036606 86.41883087]
[69.10978699 89.40661621]
[83.80921936 92.39440918]
[89.44541168 83.56569672]
[99.78520203 78.82594299]
[105.17632294 64.82823181]
[94.22614288 54.32254791]
[88.14878082 40.46222305]
[87.84180450 25.37184715]
[93.32086182 11.35159206]
[103.72202301 0.52659017]
[117.43786621 -5.47517395]
[132.36581421 -5.76765299]
[137.75692749 -19.76536179]
[132.58837891 -34.95304108]
[141.36102295 -48.38509750]
[157.34526062 -49.75760651]
[168.27934265 -38.01770020]
[165.77557373 -22.17122650]
[151.75463867 -14.37424564]
[146.36352539 -0.37653625]
[157.23867798 9.85382366]
[163.38517761 23.50541878]
[163.83796692 38.51074600]
[158.49694824 52.58416367]
[148.14688110 63.57006073]
[134.34230042 69.77299500]
[119.17403412 70.21934509]
[113.78291321 84.21705627]
[120.65969086 97.54784393]
[135.19093323 101.26848602]
[149.72216797 104.98912048]
[158.83232117 104.08618927]
[164.46409607 108.89523315]
[178.93113708 112.85816956]
[193.39817810 116.82109833]
[202.52215576 116.07052612]
[208.07278442 120.97300720]
[222.47158813 125.17712402]
[236.87037659 129.38124084]
[251.26918030 133.58535767]
[257.80337524 132.38450623]
[263.15216064 134.37774658]
[266.07449341 138.17802429]
[280.32476807 142.86093140]
[295.85073853 139.81867981]
[305.52633667 151.14262390]
[319.77661133 155.82553101]
[335.30258179 152.78329468]
[344.97817993 164.10723877]
[359.22845459 168.79014587]
[368.37860107 168.49772644]
[373.67657471 173.67219543]
[387.84661865 178.59257507]
[405.83541870 174.70082092]
[416.79986572 188.39208984]
[431.05014038 193.07499695]
[446.57611084 190.03274536]
[456.25170898 201.35670471]
[470.50198364 206.03961182]
[486.43460083 202.15585327]
[497.56716919 214.19735718]
[492.44747925 229.77685547]
[476.34219360 232.86749268]
[465.81906128 220.28988647]
[451.56878662 215.60697937]
[437.06210327 218.98417664]
[426.36724854 207.32527161]
[412.11697388 202.64236450]
[401.17001343 207.81851196]
[389.25100708 204.01853943]
[382.92623901 192.76260376]
[368.75619507 187.84223938]
[354.54556274 183.04042053]
[340.29528809 178.35751343]
[325.78860474 181.73472595]
[315.09371948 170.07582092]
[300.84344482 165.39291382]
[286.33676147 168.77011108]
[275.64187622 157.11120605]
[261.39160156 152.42829895]
[247.06506348 147.98416138]
[232.66625977 143.78004456]
[218.26747131 139.57592773]
[203.86866760 135.37181091]
[189.43524170 131.28813171]
[174.96821594 127.32520294]
[160.50117493 123.36227417]
[146.00152588 119.52035522]
[131.47029114 115.79972076]
[116.93904877 112.07908630]
[104.64379120 120.67131805]
[103.14235687 135.59599304]
[101.64091492 150.52066040]
[100.13948059 165.44532776]
[98.63804626 180.36999512]
[97.26136017 195.30668640]
[96.00952911 210.25434875]
[107.84566498 220.28857422]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 186]
[8 185]
[10 184]
[11 183]
[12 182]
[13 181]
[14 180]
[15 91]
[16 90]
[17 89]
[19 87]
[20 86]
[21 85]
[24 82]
[25 81]
[26 80]
[27 79]
[28 78]
[31 46]
[32 45]
[33 44]
[34 43]
[61 77]
[62 76]
[63 75]
[93 117]
[94 116]
[101 109]
[102 108]
[118 179]
[119 178]
[120 177]
[122 176]
[123 175]
[124 174]
[126 173]
[127 172]
[128 171]
[129 170]
[132 169]
[133 168]
[135 166]
[136 165]
[138 163]
[139 162]
[141 161]
[142 160]
[144 157]
[145 156]
[147 154]
[148 153]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
