%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUGUCAUAAAUGGAGCGACGUAAUUUCGACCUGUCCUUUCCCGGGAGUUAGCGAUCCCUCAACCCCUGCACUGCGCUAGUCCUAAAGAGGAAAUGUCUCUACGCUGCGGGGAUGCAGCCCGCACCCUGGGGCCCCGGGUAUUUGGGAGAUAUUUUUGCAGCCCAGUCAGACCGUUAAGCUCCUUGCCAGAUA\
) } def
/len { sequence length } bind def

/coor [
[99.22615814 388.35653687]
[82.84616089 387.56423950]
[75.58392334 372.86077881]
[84.91021729 359.37179565]
[85.63491821 344.38931274]
[86.35961914 329.40682983]
[87.08432007 314.42434692]
[73.54750824 308.12484741]
[63.42641449 297.09265137]
[58.28628922 282.98791504]
[58.93965530 267.94927979]
[65.31806946 254.26974487]
[76.47778320 244.04702759]
[90.73926544 238.86187744]
[91.46396637 223.87939453]
[92.18866730 208.89691162]
[92.91336823 193.91442871]
[93.63806915 178.93194580]
[94.12130737 163.93972778]
[94.36296082 148.94168091]
[94.60460663 133.94361877]
[94.84626007 118.94556427]
[90.23693085 133.21981812]
[77.85439301 141.68579102]
[62.88053513 140.80062866]
[51.58167267 130.93473816]
[48.68619537 116.21685028]
[55.40581512 102.80615997]
[68.92848206 96.31481171]
[83.59626007 99.45999908]
[70.48674011 92.17024231]
[57.37721634 84.88049316]
[43.35216141 91.25261688]
[28.43857574 88.18041992]
[18.31343842 77.04733276]
[16.70467949 62.26390076]
[3.59515858 54.97414780]
[-9.51436234 47.68439865]
[-22.62388229 40.39464569]
[-35.73340225 33.10489655]
[-48.84292221 25.81514549]
[-61.29165649 30.97838020]
[-74.25108337 28.06739426]
[-83.03438568 18.36479568]
[-84.59791565 5.56695986]
[-97.58829498 -1.93303990]
[-110.57867432 -9.43303967]
[-123.56905365 -16.93304062]
[-132.57888794 -18.51746178]
[-136.70690918 -24.65994835]
[-149.57476807 -32.36825180]
[-162.44264221 -40.07655334]
[-175.31051636 -47.78485489]
[-188.17839050 -55.49315643]
[-201.04624939 -63.20145798]
[-212.55133057 -54.98081207]
[-226.27961731 -51.77826309]
[-240.14907837 -54.04557800]
[-252.06915283 -61.40752029]
[-260.25592041 -72.72348785]
[-263.49899292 -86.26409149]
[-261.34045410 -99.97545624]
[-274.08248901 -107.89006042]
[-289.96896362 -105.65403748]
[-301.52270508 -116.78465271]
[-299.88067627 -132.74345398]
[-286.30249023 -141.28820801]
[-271.20419312 -135.86412048]
[-266.16787720 -120.63208008]
[-253.42585754 -112.71747589]
[-240.11242676 -121.54397583]
[-224.22525024 -123.69190979]
[-208.93540955 -118.68138885]
[-197.31710815 -107.46647644]
[-191.72953796 -92.25397491]
[-193.33795166 -76.06932831]
[-180.47007751 -68.36103058]
[-167.60220337 -60.65272522]
[-154.73434448 -52.94442368]
[-141.86647034 -45.23612213]
[-128.99859619 -37.52782059]
[-116.06905365 -29.92342186]
[-103.07867432 -22.42342186]
[-90.08829498 -14.92342091]
[-77.09791565 -7.42342091]
[-61.06090927 -12.46832848]
[-46.03831863 -4.19643927]
[-41.55317307 12.70562458]
[-28.44365120 19.99537468]
[-15.33413124 27.28512764]
[-2.22461081 34.57487869]
[10.88490963 41.86462784]
[23.99443054 49.15438080]
[37.40132904 42.72063446]
[52.20095825 45.44735336]
[62.67969894 56.49494934]
[64.66696930 71.77097321]
[77.77648926 79.06072235]
[90.88600922 86.35047913]
[105.82716370 87.67787170]
[120.01648712 82.81339264]
[134.20581055 77.94892120]
[148.35548401 72.97029877]
[162.46459961 67.87786865]
[176.44653320 62.44598770]
[190.29315186 56.67784119]
[204.13975525 50.90969086]
[217.98635864 45.14154434]
[231.83296204 39.37339401]
[245.67956543 33.60524750]
[259.52618408 27.83709908]
[273.37277222 22.06895065]
[287.21939087 16.30080223]
[301.06597900 10.53265476]
[314.91259766 4.76450729]
[328.75918579 -1.00364101]
[332.45294189 -15.95898724]
[344.10836792 -25.75716591]
[359.12084961 -26.80106735]
[371.71853638 -18.89943123]
[385.56515503 -24.66757965]
[399.41177368 -30.43572617]
[413.25836182 -36.20387650]
[424.74642944 -52.75790405]
[443.79421997 -49.47615814]
[457.44781494 -55.68738937]
[471.10140991 -61.89862442]
[484.75500488 -68.10986328]
[491.28125000 -74.52045441]
[498.67895508 -74.30920410]
[512.43084717 -80.29966736]
[521.73608398 -93.80316162]
[538.05926514 -92.22677612]
[544.60852051 -77.19216156]
[534.64648438 -64.16564941]
[518.42132568 -66.54779053]
[504.66940308 -60.55731964]
[490.96624756 -54.45626831]
[477.31265259 -48.24503326]
[463.65905762 -42.03379822]
[450.00546265 -35.82256317]
[447.28924561 -25.95501518]
[439.42019653 -19.07239914]
[428.84341431 -17.63466454]
[419.02651978 -22.35726929]
[405.17990112 -16.58912277]
[391.33331299 -10.82097435]
[377.48669434 -5.05282593]
[374.22448730 9.45565319]
[362.91079712 19.37857056]
[347.74621582 20.75293541]
[334.52734375 12.84296417]
[320.68072510 18.61111259]
[306.83413696 24.37925911]
[292.98751831 30.14740753]
[279.14093018 35.91555786]
[265.29431152 41.68370438]
[251.44770813 47.45185089]
[237.60110474 53.22000122]
[223.75450134 58.98814774]
[209.90789795 64.75629425]
[196.06129456 70.52444458]
[182.21469116 76.29259491]
[180.54016113 79.40983582]
[177.26571655 81.86603546]
[172.72080994 82.91500092]
[167.55703735 81.98697662]
[153.44792175 87.07941437]
[148.21667480 92.31436920]
[139.07028198 92.13824463]
[124.88095856 97.00271606]
[110.69163513 101.86719513]
[113.05138397 109.61272430]
[109.84431458 119.18721771]
[109.60266113 134.18527222]
[109.36100769 149.18331909]
[109.11936188 164.18138123]
[112.00280762 170.15489197]
[111.50193024 175.83267212]
[108.62055206 179.65664673]
[107.89585114 194.63912964]
[107.17115021 209.62161255]
[106.44644928 224.60409546]
[105.72174835 239.58657837]
[119.41621399 246.12396240]
[129.53720093 257.37600708]
[134.56556702 271.60726929]
[133.76445007 286.63876343]
[127.28701019 300.18157959]
[116.14841461 310.18542480]
[102.06680298 315.14904785]
[101.34210205 330.13153076]
[100.61740112 345.11401367]
[99.89270020 360.09649658]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 194]
[5 193]
[6 192]
[7 191]
[14 184]
[15 183]
[16 182]
[17 181]
[18 180]
[19 177]
[20 176]
[21 175]
[22 174]
[30 99]
[31 98]
[32 97]
[36 93]
[37 92]
[38 91]
[39 90]
[40 89]
[41 88]
[45 85]
[46 84]
[47 83]
[48 82]
[50 81]
[51 80]
[52 79]
[53 78]
[54 77]
[55 76]
[62 70]
[63 69]
[100 172]
[101 171]
[102 170]
[103 168]
[104 167]
[105 163]
[106 162]
[107 161]
[108 160]
[109 159]
[110 158]
[111 157]
[112 156]
[113 155]
[114 154]
[115 153]
[116 152]
[120 148]
[121 147]
[122 146]
[123 145]
[125 141]
[126 140]
[127 139]
[128 138]
[130 137]
[131 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
