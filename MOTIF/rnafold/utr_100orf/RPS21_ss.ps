%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:38:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGCCCGCCGAUAUCUCUGCCGGGUGACUAGCUGCUUCCUUUCUCUCUCGCGCGCGGUGUGGUGGCAGCAGGCGCAGCCCAGCCUCGAAAUGCAGAACGACGCCGGCGAGUUCGUGGACCUGUACGUGCCGCGGAAAUGCUCCGCUAGCAAUCGCAUCAUCGGUGCCAAGGACCACGCAUCCAUCCAGA\
) } def
/len { sequence length } bind def

/coor [
[-150.16650391 79.60211182]
[-164.61747742 75.58098602]
[-179.06845093 71.55986786]
[-193.51942444 67.53874207]
[-207.97039795 63.51762009]
[-222.42135620 59.49649811]
[-237.79060364 63.25112152]
[-247.97785950 52.38515854]
[-262.42883301 48.36403656]
[-270.42236328 58.90866089]
[-281.49960327 66.08746338]
[-294.32727051 69.06227875]
[-307.37005615 67.49939728]
[-319.07461548 61.60685730]
[-328.05435181 52.10705948]
[-333.25378418 40.14826584]
[-334.07263184 27.16581535]
[-348.38351440 22.67157173]
[-362.69442749 18.17732811]
[-377.00531006 13.68308449]
[-391.31619263 9.18884087]
[-405.76718140 5.16771936]
[-420.34259033 1.62406993]
[-434.94665527 -1.79959178]
[-449.57836914 -5.10303450]
[-464.21008301 -8.40647697]
[-472.44985962 1.02011192]
[-483.85229492 6.01366854]
[-496.22348022 5.68054771]
[-507.21160889 0.14559287]
[-514.75390625 -9.48329830]
[-517.46392822 -21.33638382]
[-531.97912598 -25.11928177]
[-546.49426270 -28.90217781]
[-561.00939941 -32.68507385]
[-575.52459717 -36.46797180]
[-587.03564453 -30.62462616]
[-599.05541992 -34.08619690]
[-605.28198242 -44.46957397]
[-619.73297119 -48.49069595]
[-634.18395996 -52.51181793]
[-645.78961182 -46.85858917]
[-657.75073242 -50.51738358]
[-663.80572510 -61.00176620]
[-678.18859863 -65.26002502]
[-692.60601807 -69.39985657]
[-707.05700684 -73.42097473]
[-722.42620850 -69.66635132]
[-732.61346436 -80.53231812]
[-747.06445312 -84.55343628]
[-761.51544189 -88.57456207]
[-775.96636963 -92.59568024]
[-790.41735840 -96.61680603]
[-804.86834717 -100.63792419]
[-821.74859619 -99.05896759]
[-827.93878174 -114.84243774]
[-814.48571777 -125.16000366]
[-800.84722900 -115.08889771]
[-786.39624023 -111.06777191]
[-771.94525146 -107.04665375]
[-757.49432373 -103.02552795]
[-743.04333496 -99.00440979]
[-728.59234619 -94.98328400]
[-714.25677490 -99.02552795]
[-703.03588867 -87.87194824]
[-688.58489990 -83.85082245]
[-681.28564453 -85.08869171]
[-673.93035889 -79.64290619]
[-659.54748535 -75.38464355]
[-642.73883057 -80.40286255]
[-630.16284180 -66.96279144]
[-615.71185303 -62.94166565]
[-601.26086426 -58.92054367]
[-584.53704834 -64.21453857]
[-571.74169922 -50.98312759]
[-557.22650146 -47.20022964]
[-542.71136475 -43.41733170]
[-528.19622803 -39.63443375]
[-513.68103027 -35.85153580]
[-500.58459473 -47.67866516]
[-482.85540771 -49.30378723]
[-467.55950928 -39.89010620]
[-460.90664673 -23.03819847]
[-446.27493286 -19.73475647]
[-431.64321899 -16.43131256]
[-424.41387939 -18.02770424]
[-416.79895020 -12.95133877]
[-402.22354126 -9.40769005]
[-399.75222778 -10.76480770]
[-396.59002686 -11.21623993]
[-393.08227539 -10.49220848]
[-389.66613770 -8.45398235]
[-386.82196045 -5.12205601]
[-372.51107788 -0.62781233]
[-358.20016479 3.86643124]
[-343.88928223 8.36067486]
[-329.57836914 12.85491848]
[-318.39871216 0.20616992]
[-302.76693726 -6.31251287]
[-285.80255127 -5.34795427]
[-270.91384888 2.95441389]
[-261.11322021 16.97007179]
[-258.40771484 33.91306686]
[-243.95672607 37.93418884]
[-229.62112427 33.89194870]
[-218.40023804 45.04552841]
[-203.94926453 49.06665039]
[-189.49829102 53.08777237]
[-175.04733276 57.10889435]
[-160.59635925 61.13001633]
[-146.14538574 65.15113831]
[-140.22438049 62.39285278]
[-132.92825317 63.39921951]
[-126.67865753 68.71218109]
[-111.73999023 70.06730652]
[-96.80133057 71.42242432]
[-81.86266327 72.77754211]
[-66.92400360 74.13266754]
[-53.54977798 67.57680511]
[-40.50503540 76.52919006]
[-25.56637001 77.88431549]
[-10.62770844 79.23943329]
[-3.64194226 70.19404602]
[6.95550823 65.60376740]
[18.57101250 66.71834564]
[28.30025482 73.37554932]
[33.65440750 84.01288605]
[48.54041672 85.85861206]
[63.42642593 87.70433807]
[78.31243896 89.55005646]
[93.19844818 91.39578247]
[108.19793701 91.27242279]
[123.05158234 89.18211365]
[137.90521240 87.09180450]
[152.75885010 85.00149536]
[167.61250305 82.91117859]
[178.37475586 71.01355743]
[194.37724304 72.15354919]
[203.34423828 85.45664978]
[198.39703369 100.71786499]
[183.33067322 106.23008728]
[169.70280457 97.76481628]
[154.84916687 99.85513306]
[139.99552917 101.94544220]
[125.14189148 104.03575134]
[110.28825378 106.12606812]
[109.67214203 113.60071564]
[108.43991852 128.55001831]
[107.82381439 136.02467346]
[122.13471222 140.51890564]
[138.01463318 136.42501831]
[149.30531311 148.31840515]
[144.39186096 163.96417236]
[128.32882690 167.26730347]
[117.64046478 154.82980347]
[103.32956696 150.33557129]
[89.89084625 156.99896240]
[75.01399231 155.08081055]
[63.70497513 145.22656250]
[59.76919937 130.75212097]
[64.53102875 116.52802277]
[76.38813782 107.34059143]
[91.35272217 106.28179169]
[76.46671295 104.43607330]
[61.58069992 102.59034729]
[46.69469070 100.74462128]
[31.80868149 98.89889526]
[17.33849716 111.10651398]
[-1.14497423 108.91601562]
[-11.98282814 94.17809296]
[-26.92149162 92.82297516]
[-41.86015320 91.46785736]
[-56.30289459 97.92678833]
[-68.27912140 89.07132721]
[-83.21778870 87.71620941]
[-98.15644836 86.36109161]
[-113.09511566 85.00596619]
[-128.03378296 83.65084839]
[-116.46411896 93.19773865]
[-109.59226227 106.53105927]
[-108.53009796 121.49340820]
[-113.44950104 135.66378784]
[-123.55448151 146.74932861]
[-137.20999146 152.95634460]
[-152.20648193 153.28050232]
[-166.11744690 147.66935730]
[-176.69200134 137.03080750]
[-182.21913147 123.08623505]
[-181.80448914 108.09196472]
[-175.51519775 94.47415924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 111]
[2 110]
[3 109]
[4 108]
[5 107]
[6 106]
[8 104]
[9 103]
[17 97]
[18 96]
[19 95]
[20 94]
[21 93]
[22 88]
[23 87]
[24 85]
[25 84]
[26 83]
[32 79]
[33 78]
[34 77]
[35 76]
[36 75]
[39 73]
[40 72]
[41 71]
[44 69]
[45 68]
[46 66]
[47 65]
[49 63]
[50 62]
[51 61]
[52 60]
[53 59]
[54 58]
[114 178]
[115 177]
[116 176]
[117 175]
[118 174]
[120 172]
[121 171]
[122 170]
[127 167]
[128 166]
[129 165]
[130 164]
[131 163]
[132 146]
[133 145]
[134 144]
[135 143]
[136 142]
[149 156]
[150 155]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
