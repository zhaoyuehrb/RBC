%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:57:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUCGAUCAGCCCGCCGGCUCCGGAGCGGCUCUGCCUUCCCGAGCGCGGGACGCGGCGCCCUGGGGGAGGAGGGCGAAGCGACGCGGCGAUGGCUCCGCGGGCACUCCCGGGGUCCGCCGUCCUAGCCGCUGCUGUCUUCGUGGGAGGCGCCGUGAGUUCGCCGCUGGUGGCUCCGGACAAUGGGAGCA\
) } def
/len { sequence length } bind def

/coor [
[130.45819092 662.19903564]
[116.08604431 666.49340820]
[101.12697601 665.38610840]
[87.54376984 659.02239990]
[77.11870575 648.23730469]
[71.21965790 634.44598389]
[70.62065887 619.45794678]
[75.40030670 605.23980713]
[84.93144989 593.65716553]
[97.96349335 586.22979736]
[112.78649139 583.93225098]
[127.45549774 587.06597900]
[140.04577637 595.21984863]
[148.90585327 607.32495117]
[147.42791748 592.39794922]
[145.94999695 577.47094727]
[144.47206116 562.54394531]
[142.99412537 547.61694336]
[141.51620483 532.68988037]
[140.03826904 517.76287842]
[128.39279175 508.54779053]
[126.68131256 493.43072510]
[136.42591858 481.27835083]
[134.94799805 466.35134888]
[133.47006226 451.42431641]
[131.99212646 436.49731445]
[130.14640808 421.61129761]
[127.93401337 406.77536011]
[125.72161865 391.93939209]
[123.50921631 377.10345459]
[121.29682159 362.26751709]
[118.67919922 359.88131714]
[117.09544373 356.10171509]
[117.19094849 351.43225098]
[119.36003113 346.64703369]
[117.88210297 331.72003174]
[116.40417480 316.79299927]
[114.92623901 301.86599731]
[113.44831085 286.93899536]
[111.97038269 272.01196289]
[110.49245453 257.08496094]
[108.89181519 242.17060852]
[107.16857147 227.26991272]
[105.44533539 212.36923218]
[103.72209167 197.46855164]
[94.57387543 185.71441650]
[100.67454529 171.11674500]
[98.95130920 156.21604919]
[97.22806549 141.31536865]
[95.50482941 126.41468048]
[81.58011627 119.45893097]
[73.87146759 105.93647766]
[74.98027039 90.41066742]
[63.03630447 81.33644104]
[51.09233475 72.26221466]
[35.63677979 74.20220184]
[23.65316010 64.82949829]
[21.89893150 50.08303070]
[9.95496178 41.00880432]
[-1.98900807 31.93457794]
[-13.93297768 22.86035156]
[-25.87694740 13.78612423]
[-37.82091904 4.71189833]
[-52.63825607 9.31907654]
[-67.32292175 4.30507660]
[-76.22836304 -8.40211678]
[-75.93025208 -23.91632843]
[-66.54322052 -36.27202606]
[-51.67677689 -40.71819305]
[-37.04736710 -35.54518890]
[-28.28030014 -22.74213600]
[-28.74669075 -7.23207140]
[-16.80272102 1.84215486]
[-4.85875130 10.91638088]
[7.08521843 19.99060822]
[19.02918816 29.06483459]
[30.97315788 38.13906097]
[45.65013885 35.87592316]
[57.89228821 44.90833282]
[60.16656113 60.31824875]
[72.11052704 69.39247131]
[84.05449677 78.46669769]
[90.00097656 75.14117432]
[96.59394836 73.42292786]
[103.40715027 73.42307281]
[109.40283966 59.67346191]
[115.39852905 45.92385483]
[121.39421844 32.17424393]
[127.38990021 18.42463684]
[133.04457092 4.53130150]
[138.35476685 -9.49730396]
[143.66496277 -23.52590942]
[148.97517395 -37.55451584]
[154.28536987 -51.58312225]
[159.59556580 -65.61172485]
[155.44023132 -85.32586670]
[170.89454651 -96.93061066]
[175.74047852 -111.12628174]
[172.87635803 -126.68608093]
[184.31047058 -136.23127747]
[189.15638733 -150.42694092]
[194.00230408 -164.62260437]
[198.84822083 -178.81828308]
[195.14733887 -194.79437256]
[207.31564331 -205.78820801]
[222.83543396 -200.49028015]
[225.74127197 -184.35063171]
[213.04389954 -173.97236633]
[208.19798279 -159.77668762]
[203.35205078 -145.58102417]
[198.50613403 -131.38534546]
[201.71685791 -116.84091949]
[189.93614197 -106.28035736]
[185.09022522 -92.08469391]
[190.40904236 -83.33548737]
[190.01669312 -72.88399506]
[183.80126953 -64.20057678]
[173.62417603 -60.30152893]
[168.31396484 -46.27292252]
[163.00376892 -32.24431610]
[157.69357300 -18.21570969]
[152.38337708 -4.18710470]
[147.07318115 9.84150124]
[148.19316101 13.20177841]
[147.73069763 17.27361679]
[145.36827087 21.30248451]
[141.13951111 24.42032433]
[135.14382935 38.16993332]
[129.14813232 51.91954041]
[123.15245056 65.66915131]
[117.15676117 79.41875458]
[126.29553223 94.85346222]
[123.64990234 112.59460449]
[110.40550995 124.69143677]
[112.12875366 139.59213257]
[113.85199738 154.49281311]
[115.57523346 169.39349365]
[124.84671021 182.21342468]
[118.62277985 195.74530029]
[120.34601593 210.64599609]
[122.06925964 225.54667664]
[123.79249573 240.44735718]
[127.89328003 248.62905884]
[125.41946411 255.60702515]
[126.89739227 270.53402710]
[128.37532043 285.46105957]
[129.85325623 300.38806152]
[131.33119202 315.31509399]
[132.80911255 330.24209595]
[134.28704834 345.16909790]
[136.13276672 360.05511475]
[138.34516907 374.89105225]
[140.55755615 389.72702026]
[142.76995850 404.56295776]
[144.98236084 419.39889526]
[148.25442505 423.50949097]
[149.48744202 428.01419067]
[148.87472534 432.06616211]
[146.91914368 435.01937866]
[148.39707947 449.94638062]
[149.87500000 464.87341309]
[151.35293579 479.80041504]
[163.29141235 489.80593872]
[164.57760620 504.96511841]
[154.96528625 516.28497314]
[156.44322205 531.21197510]
[157.92114258 546.13897705]
[159.39907837 561.06597900]
[160.87699890 575.99304199]
[162.35493469 590.92004395]
[163.83287048 605.84704590]
[167.13630676 620.47875977]
[172.21505737 634.59283447]
[177.29380798 648.70684814]
[182.37254333 662.82092285]
[187.45129395 676.93493652]
[202.38856506 681.13708496]
[211.97668457 693.33734131]
[212.52883911 708.84460449]
[203.83270264 721.69592285]
[189.23211670 726.94976807]
[174.34130859 722.58587646]
[164.88610840 710.28228760]
[164.50221252 694.76995850]
[173.33724976 682.01367188]
[168.25849915 667.89965820]
[163.17974854 653.78558350]
[158.10101318 639.67156982]
[153.02226257 625.55749512]
[150.22297668 640.29400635]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 171]
[15 170]
[16 169]
[17 168]
[18 167]
[19 166]
[20 165]
[23 162]
[24 161]
[25 160]
[26 159]
[27 155]
[28 154]
[29 153]
[30 152]
[31 151]
[35 150]
[36 149]
[37 148]
[38 147]
[39 146]
[40 145]
[41 144]
[42 142]
[43 141]
[44 140]
[45 139]
[47 137]
[48 136]
[49 135]
[50 134]
[53 82]
[54 81]
[55 80]
[58 77]
[59 76]
[60 75]
[61 74]
[62 73]
[63 72]
[85 131]
[86 130]
[87 129]
[88 128]
[89 127]
[90 123]
[91 122]
[92 121]
[93 120]
[94 119]
[95 118]
[97 114]
[98 113]
[100 111]
[101 110]
[102 109]
[103 108]
[172 189]
[173 188]
[174 187]
[175 186]
[176 185]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
