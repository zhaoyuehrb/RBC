%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:19:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCGAGGGCGGCGGGGGCGCGCGGAGGAGGGCGCCGGCGCUGCUCGAGGCUGCCCGCGCGCGCUACGAGAGCCUGCACAUCUCGGACGACGUGUUCG\
) } def
/len { sequence length } bind def

/coor [
[77.42226410 123.81286621]
[70.04009247 113.38697815]
[67.19850922 100.93222046]
[52.50404358 97.92011261]
[37.80958176 94.90800476]
[23.11511993 91.89589691]
[10.02106571 100.33293152]
[-4.83830023 97.06889343]
[-12.80102444 84.53372192]
[-27.49548721 81.52161407]
[-42.18994904 78.50950623]
[-56.88441086 75.49740601]
[-71.57887268 72.48529816]
[-86.27333832 69.47319031]
[-100.96779633 66.46108246]
[-115.66226196 63.44897842]
[-128.75631714 71.88600922]
[-143.61567688 68.62197876]
[-151.57839966 56.08679962]
[-166.27287292 53.07469559]
[-180.96733093 50.06258774]
[-195.66178894 47.05048370]
[-210.35624695 44.03837585]
[-220.49009705 55.57964325]
[-235.04203796 60.49255371]
[-250.09767151 57.45555496]
[-261.60711670 47.28559113]
[-266.47439575 32.71832275]
[-263.39019775 17.67227936]
[-253.18421936 6.19476795]
[-238.60176086 1.37318122]
[-223.56546021 4.50450230]
[-212.11999512 14.74642181]
[-207.34414673 29.34391403]
[-192.64968872 32.35602188]
[-177.95521545 35.36812592]
[-163.26075745 38.38023376]
[-148.56629944 41.39233780]
[-136.31398010 33.00088882]
[-121.36880493 35.84626770]
[-112.65015411 48.75451660]
[-97.95568848 51.76662064]
[-83.26123047 54.77872849]
[-68.56676483 57.79083252]
[-53.87230301 60.80294037]
[-39.17784119 63.81504822]
[-24.48338127 66.82715607]
[-9.78891850 69.83925629]
[2.46339536 61.44781113]
[17.40857887 64.29319000]
[26.12722588 77.20143890]
[40.82168961 80.21353912]
[55.51615143 83.22564697]
[70.21060944 86.23775482]
[81.08383179 73.18608856]
[97.02639008 67.32027435]
[113.76583862 70.21227264]
[126.81619263 81.08706665]
[132.68008423 97.03032684]
[147.53338623 99.12306213]
[162.38668823 101.21578979]
[177.23997498 103.30851746]
[192.09327698 105.40125275]
[206.97732544 107.26273346]
[221.88851929 108.89251709]
[231.43946838 99.24603271]
[244.62045288 96.95205688]
[256.51562500 102.63603210]
[262.82138062 113.99031067]
[277.67468262 116.08303833]
[292.52795410 118.17576599]
[307.38125610 120.26850128]
[322.23455811 122.36122894]
[332.22619629 110.60662842]
[346.99334717 106.14178467]
[361.82388306 110.39141083]
[371.98538208 121.99947357]
[374.23541260 137.26187134]
[367.85595703 151.30844116]
[354.88269043 159.65696716]
[339.45532227 159.64346313]
[326.49670410 151.27224731]
[320.14184570 137.21452332]
[305.28854370 135.12179565]
[290.43524170 133.02906799]
[275.58193970 130.93634033]
[260.72863770 128.84361267]
[247.83395386 139.51441956]
[230.86828613 137.60517883]
[220.25874329 123.80371094]
[205.34754944 122.17392731]
[198.23101807 124.61942291]
[190.00054932 120.25454712]
[175.14724731 118.16181946]
[160.29396057 116.06909180]
[145.44065857 113.97635651]
[130.58735657 111.88362885]
[123.73170471 122.66304016]
[113.27938843 130.00775146]
[100.81451416 132.80462646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 54]
[4 53]
[5 52]
[6 51]
[9 48]
[10 47]
[11 46]
[12 45]
[13 44]
[14 43]
[15 42]
[16 41]
[19 38]
[20 37]
[21 36]
[22 35]
[23 34]
[59 97]
[60 96]
[61 95]
[62 94]
[63 93]
[64 91]
[65 90]
[69 87]
[70 86]
[71 85]
[72 84]
[73 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
