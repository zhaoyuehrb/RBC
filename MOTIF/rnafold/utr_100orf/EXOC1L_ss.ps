%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGGCCAAGUGGAACUGGAGGAAAUGUCAUCAUUGGUAAAGGAGGACUUGGAGAAGAAACUGUUUAAGCCACUCUCGCAGAAUCUGUACGAGUUUAUUGAAAUAGAGUUCUCCGUCCAGGACA\
) } def
/len { sequence length } bind def

/coor [
[4.76978636 235.06353760]
[-2.45651841 248.20814514]
[-9.68282318 261.35275269]
[-16.90912819 274.49734497]
[-16.05090714 292.83947754]
[-31.30127144 301.42520142]
[-38.19496918 314.74725342]
[-36.89951706 331.09515381]
[-50.56102753 340.16683960]
[-65.12570953 332.63012695]
[-65.61066437 316.23812866]
[-51.51701736 307.85357666]
[-44.62331772 294.53152466]
[-47.98943329 282.83984375]
[-42.26301956 271.65124512]
[-30.05372810 267.27102661]
[-22.82742310 254.12643433]
[-15.60111904 240.98184204]
[-8.37481403 227.83723450]
[-12.14819813 221.48007202]
[-13.43125343 214.12974548]
[-12.00883293 206.73507690]
[-8.01826000 200.26821899]
[-1.93766367 195.59692383]
[5.47088289 193.36813354]
[13.25674057 193.91880798]
[22.07352066 181.78355408]
[30.89029884 169.64830017]
[39.70707703 157.51304626]
[39.32402802 154.62799072]
[40.12646103 151.41075134]
[42.24959564 148.33757019]
[45.64432526 145.92526245]
[50.06858444 144.66271973]
[60.05876160 133.47360229]
[70.04894257 122.28447723]
[80.03911591 111.09535980]
[77.16275787 100.06402588]
[79.97721863 89.01673889]
[87.78117371 80.70637512]
[98.62993622 77.20380402]
[109.82011414 79.38182068]
[120.35986328 68.70878601]
[130.89961243 58.03575516]
[141.43936157 47.36272049]
[151.97911072 36.68968201]
[162.51885986 26.01664925]
[173.05860901 15.34361362]
[183.59835815 4.67057800]
[194.13810730 -6.00245714]
[190.38626099 -13.20679283]
[188.25115967 -21.03211212]
[187.82531738 -29.12092209]
[189.12332153 -37.10474396]
[192.08132935 -44.62091064]
[196.56019592 -51.32903290]
[202.35203552 -56.92641830]
[209.18981934 -61.16172791]
[216.75975037 -63.84625626]
[224.71560669 -64.86234283]
[232.69462585 -64.16851044]
[240.33396912 -61.80114365]
[247.28733826 -57.87262344]
[253.24055481 -52.56597519]
[266.10345459 -60.28256607]
[278.96633911 -67.99916077]
[291.82925415 -75.71575165]
[304.69213867 -83.43235016]
[306.17639160 -98.76542664]
[316.28643799 -110.15138245]
[330.98846436 -113.36294556]
[344.59954834 -107.37322235]
[357.46243286 -115.08982086]
[370.32534790 -122.80641174]
[383.18823242 -130.52301025]
[387.13061523 -145.59269714]
[400.28533936 -153.23518372]
[414.62768555 -149.38386536]
[427.49060059 -157.10046387]
[440.35348511 -164.81704712]
[453.21640015 -172.53364563]
[463.68838501 -185.86682129]
[479.39944458 -179.49505615]
[477.62594604 -162.63412476]
[460.93298340 -159.67074585]
[448.07009888 -151.95414734]
[435.20718384 -144.23756409]
[422.34429932 -136.52096558]
[418.99127197 -122.05401611]
[406.05636597 -114.04505157]
[390.90484619 -117.66010284]
[378.04193115 -109.94351196]
[365.17904663 -102.22692108]
[352.31613159 -94.51032257]
[351.19403076 -79.68201447]
[341.44018555 -68.22222900]
[326.63562012 -64.66162872]
[312.40875244 -70.56944275]
[299.54583740 -62.85285187]
[286.68295288 -55.13626099]
[273.82003784 -47.41966629]
[260.95715332 -39.70307541]
[261.75244141 -16.78123856]
[248.96980286 2.39938521]
[227.29426575 10.56874847]
[204.81114197 4.53729248]
[194.27139282 15.21032810]
[183.73164368 25.88336372]
[173.19189453 36.55639648]
[162.65214539 47.22943497]
[152.11239624 57.90246964]
[141.57264709 68.57550049]
[131.03289795 79.24853516]
[120.49314880 89.92157745]
[121.45040894 107.83732605]
[109.16873932 120.91597748]
[91.22823334 121.08554077]
[81.23806000 132.27465820]
[71.24787903 143.46377563]
[61.25770187 154.65289307]
[51.84233093 166.32981873]
[43.02555466 178.46507263]
[34.20877457 190.60034180]
[25.39199638 202.73559570]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[3 17]
[4 16]
[6 13]
[7 12]
[26 124]
[27 123]
[28 122]
[29 121]
[34 120]
[35 119]
[36 118]
[37 117]
[42 114]
[43 113]
[44 112]
[45 111]
[46 110]
[47 109]
[48 108]
[49 107]
[50 106]
[64 102]
[65 101]
[66 100]
[67 99]
[68 98]
[72 94]
[73 93]
[74 92]
[75 91]
[78 88]
[79 87]
[80 86]
[81 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
