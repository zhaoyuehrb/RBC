%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:43:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAUUUUGUGAGGUGCCGCCGUCUCUCCUCCAGCAAGGUCAGGACUUCAGGACUGAAACAAUGACCGAUAAAACAGAGAAGGUGGCUGUAGAUCCUGAAACUGUGUUUAAACGUCCCAGGGAAUGUGACAGUCCUUCGUAUCAGAAAAGGCAGAGGAUGG\
) } def
/len { sequence length } bind def

/coor [
[113.47409821 303.14157104]
[116.03795624 283.93020630]
[116.32882690 268.93304443]
[116.61969757 253.93585205]
[116.91056824 238.93867493]
[117.20143890 223.94149780]
[117.49230957 208.94430542]
[117.78318024 193.94712830]
[110.29412842 181.07221985]
[118.29757690 167.42468262]
[118.58844757 152.42749023]
[95.08464813 153.02104187]
[74.47569275 144.00476074]
[60.30763626 127.86110687]
[54.61792755 108.20419312]
[57.66614914 88.99537659]
[44.01070404 82.78821564]
[30.35526085 76.58105469]
[16.69981575 70.37389374]
[3.04437256 64.16673279]
[-10.61107159 57.95957184]
[-26.37601471 59.29266357]
[-34.76067352 46.98223114]
[-48.41611862 40.77507019]
[-62.07156372 34.56790924]
[-75.72700500 28.36074829]
[-89.38245392 22.15358734]
[-98.32864380 32.67921448]
[-109.69334412 40.50951767]
[-122.69104004 45.11135864]
[-136.42546082 46.17446899]
[-149.95137024 43.63235092]
[-162.33958435 37.66640091]
[-172.74087524 28.69298935]
[-180.44410706 17.33439255]
[-184.92492676 4.37565231]
[-185.88140869 -9.28967857]
[-183.25437927 -22.72115707]
[-196.65887451 -29.45314407]
[-210.06335449 -36.18513107]
[-223.46784973 -42.91711807]
[-236.87234497 -49.64910889]
[-249.70753479 -41.33015823]
[-264.88317871 -40.55777740]
[-278.31857300 -47.43938446]
[-286.45111084 -60.03770828]
[-287.18081665 -74.91497803]
[-300.58532715 -81.64696503]
[-313.98980713 -88.37895203]
[-327.39428711 -95.11093903]
[-343.72531128 -93.61776733]
[-352.96163940 -107.16850281]
[-345.60171509 -121.82331848]
[-329.21679688 -122.50659180]
[-320.66229248 -108.51543427]
[-307.25781250 -101.78343964]
[-293.85333252 -95.05145264]
[-280.44885254 -88.31946564]
[-268.07968140 -96.61824036]
[-253.11785889 -97.61814117]
[-239.57490540 -90.95071411]
[-231.13218689 -78.31674194]
[-230.14035034 -63.05359650]
[-216.73585510 -56.32160950]
[-203.33137512 -49.58962250]
[-189.92687988 -42.85763168]
[-176.52239990 -36.12564468]
[-165.29013062 -47.88396454]
[-150.96780396 -55.62325668]
[-134.94044495 -58.58208847]
[-118.76200104 -56.46196365]
[-104.00466919 -49.45737839]
[-92.10605621 -38.23804474]
[-84.22920227 -23.88488388]
[-81.14884949 -7.78587675]
[-83.17529297 8.49814320]
[-69.51984406 14.70530415]
[-55.86440277 20.91246605]
[-42.20895767 27.11962700]
[-28.55351257 33.32678604]
[-13.76529789 31.54971695]
[-4.40391064 44.30412674]
[9.25153351 50.51128769]
[22.90697670 56.71844864]
[36.56241989 62.92560959]
[50.21786499 69.13277435]
[63.87331009 75.33993530]
[72.03092194 64.45912933]
[83.47344208 56.30931473]
[97.27732849 51.87948608]
[112.22380066 51.84417725]
[126.90622711 56.47666168]
[139.86245728 65.59875488]
[149.71968079 78.57421875]
[155.33744812 94.34844971]
[168.32781982 86.84844971]
[181.31820679 79.34844971]
[194.30859375 71.84844971]
[198.50288391 56.84692383]
[211.78381348 49.42591095]
[226.05963135 53.51697540]
[239.05000305 46.01697540]
[244.95356750 38.98072433]
[252.36581421 38.50029373]
[265.49917603 31.25360298]
[269.64355469 16.00238228]
[283.39962769 8.22125816]
[298.60617065 12.52663612]
[306.24142456 26.36421204]
[301.77551270 41.52439499]
[287.85800171 49.01292038]
[272.74588013 44.38697815]
[259.61248779 51.63366699]
[246.55000305 59.00735855]
[233.55963135 66.50735474]
[229.96469116 80.91610718]
[216.89743042 88.70722198]
[201.80859375 84.83882904]
[188.81820679 92.33882904]
[175.82781982 99.83882904]
[162.83744812 107.33882904]
[161.75045776 114.75963593]
[176.74627686 114.40569305]
[191.74209595 114.05174255]
[205.32641602 107.69041443]
[219.74179077 111.83731842]
[227.86938477 124.44454956]
[225.69546509 139.28617859]
[214.29360962 149.03285217]
[199.29447937 148.87129211]
[188.10513306 138.88111877]
[173.84080505 134.24119568]
[159.57647705 129.60125732]
[158.48948669 137.02207947]
[168.78311157 147.93267822]
[179.07673645 158.84329224]
[189.58000183 169.55223083]
[200.28894043 180.05549622]
[216.08807373 179.65165710]
[227.48759460 190.59817505]
[227.72438049 206.40069580]
[216.65794373 217.68383789]
[200.85380554 217.75354004]
[189.68827820 206.56842041]
[189.78569031 190.76443481]
[179.07673645 180.26118469]
[174.33085632 179.41516113]
[170.08238220 175.54776001]
[168.16613770 169.13691711]
[157.87251282 158.22630310]
[147.57888794 147.31570435]
[133.58563232 152.71836853]
[133.29475403 167.71554565]
[140.76300049 181.66316223]
[132.78034973 194.23800659]
[132.48948669 209.23518372]
[132.19862366 224.23236084]
[131.90774536 239.22953796]
[131.61688232 254.22671509]
[131.32600403 269.22390747]
[131.03514099 284.22106934]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 161]
[3 160]
[4 159]
[5 158]
[6 157]
[7 156]
[8 155]
[10 153]
[11 152]
[16 87]
[17 86]
[18 85]
[19 84]
[20 83]
[21 82]
[23 80]
[24 79]
[25 78]
[26 77]
[27 76]
[38 67]
[39 66]
[40 65]
[41 64]
[42 63]
[47 58]
[48 57]
[49 56]
[50 55]
[95 121]
[96 120]
[97 119]
[98 118]
[101 115]
[102 114]
[104 113]
[105 112]
[134 151]
[135 150]
[136 149]
[137 146]
[138 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
