%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCAACAUCACCAGGAUGGCCAACCACACUGGAAAGUUGGAUUUCAUCCUCAUGGGACUCUUCAGACGAUCCAAACAUCCAGCUCUACUUAGUGUGG\
) } def
/len { sequence length } bind def

/coor [
[-7.77755213 224.56698608]
[-19.98073769 224.25042725]
[-31.14870071 234.26425171]
[-42.31666183 244.27807617]
[-53.48462296 254.29190063]
[-64.65258789 264.30572510]
[-75.82054901 274.31954956]
[-77.53518677 279.63058472]
[-80.86052704 283.28128052]
[-84.84033203 284.92926025]
[-88.52759552 284.68606567]
[-100.58004761 293.61572266]
[-104.35446167 309.20843506]
[-118.95889282 315.84848022]
[-133.19006348 308.44219971]
[-136.13104248 292.67098999]
[-125.52575684 280.63323975]
[-109.50968170 281.56326294]
[-97.45722198 272.63363647]
[-85.83436584 263.15158081]
[-74.66640472 253.13775635]
[-63.49844360 243.12393188]
[-52.33048248 233.11010742]
[-41.16252136 223.09628296]
[-29.99456024 213.08245850]
[-25.54373360 196.18597412]
[-7.61926270 192.34405518]
[3.23186851 181.98774719]
[14.08299923 171.63145447]
[24.93412971 161.27514648]
[35.78526306 150.91885376]
[46.63639069 140.56254578]
[57.48752213 130.20625305]
[68.33865356 119.84995270]
[79.18978882 109.49365234]
[78.72235870 91.60616302]
[91.27626801 78.85547638]
[109.16886139 79.04466248]
[119.35515594 68.03378296]
[129.54145813 57.02290344]
[139.72773743 46.01202393]
[149.91403198 35.00114822]
[160.10032654 23.99026871]
[170.28662109 12.97939110]
[180.47291565 1.96851325]
[175.86383057 -16.40836716]
[183.00933838 -33.79688644]
[198.95730591 -43.47106552]
[217.38798523 -41.80087280]
[226.50396729 -53.71299744]
[235.61996460 -65.62512207]
[237.86225891 -81.28662109]
[251.74156189 -86.69167328]
[260.85754395 -98.60379791]
[263.66009521 -107.48851776]
[270.44696045 -110.73876190]
[279.92901611 -122.36161804]
[289.41104126 -133.98448181]
[298.89309692 -145.60733032]
[300.98171997 -161.87294006]
[316.21472168 -167.94642639]
[328.92172241 -157.57994080]
[326.03082275 -141.43760681]
[310.51596069 -136.12528992]
[301.03390503 -124.50243378]
[291.55184937 -112.87957764]
[282.06982422 -101.25672150]
[272.76968384 -89.48780823]
[263.65368652 -77.57568359]
[262.06341553 -62.76621246]
[247.53208923 -56.50913239]
[238.41609192 -44.59700775]
[229.30010986 -32.68488312]
[234.55860901 -22.51143646]
[235.56028748 -11.05108356]
[232.11550903 -0.02048123]
[224.70358276 8.91301060]
[214.40661621 14.38335609]
[202.75154114 15.53464890]
[191.48379517 12.15480614]
[181.29750061 23.16568375]
[171.11120605 34.17656326]
[160.92491150 45.18743896]
[150.73861694 56.19831848]
[140.55232239 67.20919800]
[130.36604309 78.22007751]
[120.17974091 89.23094940]
[122.87017059 100.38707733]
[119.80375671 111.44577026]
[111.75237274 119.62335968]
[100.74270630 122.86138153]
[89.54608917 120.34477997]
[78.69495392 130.70108032]
[67.84382629 141.05738831]
[56.99269104 151.41368103]
[46.14156342 161.76998901]
[35.29043198 172.12628174]
[24.43930054 182.48257446]
[13.58816910 192.83888245]
[2.73703790 203.19517517]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 25]
[3 24]
[4 23]
[5 22]
[6 21]
[7 20]
[11 19]
[12 18]
[27 100]
[28 99]
[29 98]
[30 97]
[31 96]
[32 95]
[33 94]
[34 93]
[35 92]
[38 87]
[39 86]
[40 85]
[41 84]
[42 83]
[43 82]
[44 81]
[45 80]
[49 73]
[50 72]
[51 71]
[53 69]
[54 68]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
