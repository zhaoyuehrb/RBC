%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:43:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUUUGACAGCGGCUGGUCCCCGGAAGUUGGACGCAUGCGCCGUUUCUCUGCAUGGUGUGCGUUCUCGUUCUAGCUGCGGCCGCAGGAGCUGUGGCGGUUUUCCUAAUCCUGCGAAUAUGGGUAGUGCUUCGUUCCAUGGACGUUACGCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.46706390 151.88272095]
[93.45486450 151.52731323]
[84.64000702 149.61828613]
[76.28828430 146.21316528]
[68.65149689 141.41465759]
[61.95992661 135.36744690]
[56.41532135 128.25382996]
[52.18486786 120.28832245]
[49.39611435 111.71108246]
[48.13314819 102.78074646]
[48.43405151 93.76655579]
[33.95844650 89.83502960]
[19.48284340 85.90351105]
[5.00723886 81.97198486]
[-9.46836567 78.04045868]
[-23.94396973 74.10893250]
[-38.41957474 70.17740631]
[-52.89517593 66.24588013]
[-61.92241287 74.09163666]
[-73.50382996 76.55243683]
[-84.71124268 73.12525940]
[-92.76850128 64.78092194]
[-95.73908234 53.69274139]
[-110.04228210 49.17404938]
[-124.34547424 44.65535355]
[-120.18078613 59.06560898]
[-128.67892456 71.42610168]
[-143.62495422 72.69728088]
[-154.08847046 61.94949341]
[-152.41722107 47.04288864]
[-139.83262634 38.87894440]
[-153.60137939 32.92734528]
[-167.37013245 26.97574234]
[-181.13887024 21.02414131]
[-194.90762329 15.07254028]
[-208.67637634 9.12093925]
[-215.37414551 9.50894451]
[-220.46829224 6.82262468]
[-222.87750244 2.63549852]
[-236.39204407 -3.87275767]
[-249.90657043 -10.38101387]
[-263.42111206 -16.88926888]
[-276.93563843 -23.39752579]
[-290.45016479 -29.90578270]
[-303.96469116 -36.41403961]
[-317.56463623 -28.94267273]
[-332.95452881 -30.92545128]
[-344.21661377 -41.59995270]
[-347.02041626 -56.86161423]
[-340.28781128 -70.84201813]
[-326.60760498 -78.16540527]
[-311.24014282 -76.01580048]
[-300.09451294 -65.21974945]
[-297.45645142 -49.92856979]
[-283.94192505 -43.42031479]
[-270.42736816 -36.91205978]
[-256.91284180 -30.40380287]
[-243.39831543 -23.89554596]
[-229.88378906 -17.38729095]
[-216.36924744 -10.87903500]
[-202.72477722 -4.64780951]
[-188.95602417 1.30379188]
[-175.18727112 7.25539303]
[-161.41851807 13.20699406]
[-147.64978027 19.15859604]
[-133.88102722 25.11019707]
[-119.82678223 30.35215950]
[-105.52358246 34.87085342]
[-91.22039032 39.38954544]
[-75.57403564 29.97106743]
[-57.68949127 35.00749207]
[-48.96365356 51.77027893]
[-34.48804855 55.70180130]
[-20.01244354 59.63332748]
[-5.53683996 63.56485367]
[8.93876362 67.49637604]
[23.41436768 71.42790222]
[37.88997269 75.35942841]
[52.36557388 79.29095459]
[67.24489594 59.68863297]
[89.47733307 49.13570786]
[114.07196808 50.00117493]
[135.50762939 62.09075165]
[147.23510742 52.73840332]
[158.96257019 43.38605499]
[170.69004822 34.03371048]
[182.41751099 24.68136215]
[194.14498901 15.32901573]
[205.87246704 5.97666836]
[203.66531372 -6.39742470]
[206.93331909 -18.45954895]
[214.99121094 -27.91683960]
[226.24945068 -32.99899292]
[238.52742004 -32.78947067]
[249.47581482 -27.39019775]
[261.57501221 -36.25641251]
[262.42156982 -51.87106705]
[273.14465332 -63.25304031]
[288.68115234 -65.02811432]
[301.69522095 -56.35815430]
[306.04199219 -41.33684921]
[299.66906738 -27.05680084]
[285.58554077 -20.26061058]
[270.44122314 -24.15723228]
[258.34204102 -15.29101562]
[259.26190186 2.29721618]
[249.39097595 17.07195282]
[232.49528503 23.05930710]
[215.22480774 17.70413971]
[203.49734497 27.05648804]
[191.76986694 36.40883636]
[180.04238892 45.76118088]
[168.31492615 55.11352921]
[156.58744812 64.46587372]
[144.85997009 73.81822205]
[149.27836609 83.58217621]
[151.59886169 94.04508209]
[151.72264099 104.76151276]
[149.64443970 115.27522278]
[145.45274353 125.13862610]
[139.32600403 133.93180847]
[149.14892578 145.26805115]
[158.97183228 156.60430908]
[168.79473877 167.94055176]
[176.83038330 172.41230774]
[178.69952393 179.60968018]
[188.28915405 191.14393616]
[197.87876892 202.67819214]
[208.82502747 203.05641174]
[217.55688477 209.29656982]
[221.30264282 219.11866760]
[219.03988647 229.15861511]
[228.15106201 241.07441711]
[237.26223755 252.99023438]
[246.37342834 264.90603638]
[255.48460388 276.82183838]
[269.90859985 285.73162842]
[265.33999634 302.05841064]
[248.38653564 302.18804932]
[243.56878662 285.93301392]
[234.45761108 274.01721191]
[225.34643555 262.10140991]
[216.23526001 250.18559265]
[207.12408447 238.26979065]
[188.78991699 232.23747253]
[186.34451294 212.26782227]
[176.75489807 200.73356628]
[167.16526794 189.19929504]
[157.45849609 177.76345825]
[147.63558960 166.42721558]
[137.81266785 155.09097290]
[127.98976135 143.75473022]
[119.99881744 147.93693542]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 79]
[12 78]
[13 77]
[14 76]
[15 75]
[16 74]
[17 73]
[18 72]
[23 69]
[24 68]
[25 67]
[31 66]
[32 65]
[33 64]
[34 63]
[35 62]
[36 61]
[39 60]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[83 115]
[84 114]
[85 113]
[86 112]
[87 111]
[88 110]
[89 109]
[95 105]
[96 104]
[121 152]
[122 151]
[123 150]
[124 149]
[126 148]
[127 147]
[128 146]
[132 144]
[133 143]
[134 142]
[135 141]
[136 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
