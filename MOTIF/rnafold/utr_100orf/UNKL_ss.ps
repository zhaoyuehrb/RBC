%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:07:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUGCGCGCUGCAUUGUUUUGACUGAAAAUGCCGUCGGUUUCGAAAGCGGCGGCAGCGGCGCUGAGCGGGUCCCCCCCGCAGACUGAGAAGCCGACCCACUACAGGUACCUGAAGGAGUUCAGGACGG\
) } def
/len { sequence length } bind def

/coor [
[91.57577515 146.69926453]
[81.58240509 143.24662781]
[72.69361115 137.70851135]
[65.33214569 130.40071106]
[59.83630371 121.72176361]
[56.44445801 112.13127136]
[55.28499985 102.12570190]
[40.39436722 100.31764984]
[25.50373459 98.50959778]
[10.61310101 96.70155334]
[-4.27753210 94.89350128]
[-19.16816521 93.08544922]
[-34.05879974 91.27739716]
[-40.37762070 101.46177673]
[-51.60614777 107.71112061]
[-65.32274628 107.73143768]
[-78.09378815 100.68991089]
[-91.84566498 106.68037415]
[-105.59754944 112.67084503]
[-119.34943390 118.66131592]
[-133.10131836 124.65177917]
[-140.28564453 138.99629211]
[-156.00923157 142.18193054]
[-168.21029663 131.76493835]
[-167.52922058 115.73634338]
[-154.48846436 106.39192200]
[-139.09178162 110.89990234]
[-125.33990479 104.90943146]
[-111.58802032 98.91896057]
[-97.83613586 92.92848969]
[-84.08425140 86.93802643]
[-83.17857361 71.96539307]
[-96.10812378 64.36099243]
[-109.03766632 56.75659561]
[-121.96720886 49.15219879]
[-134.89675903 41.54779816]
[-147.82630920 33.94340134]
[-160.75584412 26.33900452]
[-176.57368469 26.01218987]
[-183.62170410 12.89065456]
[-196.55123901 5.28625727]
[-212.94528198 5.69529676]
[-221.26451111 -8.43703079]
[-212.95079041 -22.57259750]
[-196.55659485 -22.16994667]
[-188.94685364 -7.64328766]
[-176.01730347 -0.03889007]
[-161.12428284 -0.25599232]
[-153.15144348 13.40945911]
[-140.22190857 21.01385689]
[-127.29235840 28.61825562]
[-114.36281586 36.22265244]
[-101.43326569 43.82704926]
[-88.50372314 51.43144989]
[-75.57418060 59.03584671]
[-46.87965775 55.69838333]
[-32.25074768 76.38676453]
[-17.36011505 78.19481659]
[-2.46948195 80.00286865]
[12.42115116 81.81092072]
[27.31178474 83.61896515]
[42.20241928 85.42701721]
[57.09305191 87.23506927]
[65.08586884 71.98297882]
[78.24471283 60.87638474]
[94.62253571 55.55865860]
[111.79603577 56.81663132]
[118.11705017 43.21351624]
[124.43806458 29.61039925]
[130.75907898 16.00728416]
[137.08009338 2.40416884]
[132.94548035 -13.09694195]
[142.60229492 -25.90809059]
[158.64265442 -26.20166206]
[168.76177979 -13.75245094]
[165.19714355 1.88957214]
[150.68321228 8.72518539]
[144.36219788 22.32830048]
[138.04118347 35.93141556]
[131.72016907 49.53453064]
[125.39914703 63.13764572]
[134.27406311 69.49181366]
[141.53610229 77.99474335]
[146.66371155 88.23126984]
[149.24351501 99.65970612]
[164.17349243 98.21199799]
[179.10346985 96.76428986]
[194.01486206 95.13629150]
[208.90548706 93.32823944]
[214.27322388 78.99485016]
[225.69488525 68.80641937]
[240.54588318 65.10417175]
[255.41354370 68.73886871]
[266.88140869 78.87526703]
[272.31423950 93.18411255]
[270.46362305 108.37732697]
[261.75479126 120.96362305]
[248.18898010 128.05076599]
[232.88351440 128.01017761]
[219.35549927 120.85118103]
[210.71354675 108.21887207]
[195.82290649 110.02692413]
[189.49806213 113.99640656]
[180.55117798 111.69426727]
[165.62120056 113.14197540]
[150.69122314 114.58968353]
[144.53503418 128.26817322]
[153.35182190 140.40344238]
[161.00787354 145.57366943]
[162.23081970 152.94013977]
[170.75180054 165.28489685]
[179.27276611 177.62965393]
[187.79374695 189.97441101]
[196.31471252 202.31916809]
[204.83567810 214.66392517]
[219.87539673 221.20144653]
[221.46449280 237.52342224]
[207.96826172 246.83920288]
[193.27046204 239.56550598]
[192.49092102 223.18490601]
[183.96995544 210.84014893]
[175.44897461 198.49539185]
[166.92800903 186.15063477]
[158.40704346 173.80587769]
[149.88606262 161.46112061]
[141.21655273 149.22021484]
[132.39978027 137.08496094]
[123.13431549 142.96427917]
[112.88681793 146.59980774]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 63]
[8 62]
[9 61]
[10 60]
[11 59]
[12 58]
[13 57]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[40 47]
[41 46]
[67 81]
[68 80]
[69 79]
[70 78]
[71 77]
[85 106]
[86 105]
[87 104]
[88 102]
[89 101]
[107 127]
[108 126]
[110 125]
[111 124]
[112 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
