%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAUAAAAACCGGGUGCCGGCAGGCGCCAGUCGCAGGUGUGCUGCUGAGGCGUGAGAAUGGCGUCCCGCGGCCGGCGUCCGGAGCAUGGCGGACCCCCAGAGCUGUUUUAUGACGAGACAGAAGCCCGGAAAUACGUUCGCAACUCACGGAUGAUUG\
) } def
/len { sequence length } bind def

/coor [
[192.76646423 187.28739929]
[179.93792725 195.06100464]
[165.18461609 197.77017212]
[150.43121338 195.06150818]
[137.60241699 187.28834534]
[128.37185669 175.46476746]
[123.94374084 161.13327026]
[124.89575958 146.16351318]
[131.10369873 132.50842285]
[141.75769043 121.94942474]
[155.46920776 115.86370087]
[140.63360596 113.64900208]
[125.79800415 111.43430328]
[110.96240234 109.21960449]
[97.88511658 114.16695404]
[86.82289886 105.61599731]
[71.98729706 103.40129852]
[57.15169525 101.18659973]
[48.14754868 103.02005768]
[42.04601669 98.77879333]
[27.25706673 96.27142334]
[20.85447121 98.23733521]
[15.27520466 96.84585571]
[11.93823719 93.36174011]
[-2.74011040 90.27206421]
[-17.41845703 87.18238068]
[-32.09680557 84.09270477]
[-46.77515411 81.00302887]
[-61.45349884 77.91334534]
[-76.13185120 74.82366943]
[-91.22981262 79.55251312]
[-102.09044647 69.35958099]
[-116.76879883 66.26990509]
[-131.86676025 70.99874878]
[-142.72740173 60.80581665]
[-157.40574646 57.71613693]
[-172.50370789 62.44498062]
[-183.36434937 52.25204849]
[-198.04269409 49.16236877]
[-207.74525452 60.99956131]
[-221.84196472 66.96118927]
[-237.09353638 65.67732239]
[-249.99525452 57.44298553]
[-257.58239746 44.15036011]
[-258.11148071 28.85400009]
[-251.46096802 15.06889629]
[-239.15905762 5.96276331]
[-224.03265381 3.62812543]
[-209.55769348 8.60146427]
[-199.06042480 19.73994446]
[-194.95301819 34.48402405]
[-180.27467346 37.57370377]
[-166.22659302 32.62386322]
[-154.31607056 43.03778839]
[-139.63772583 46.12746811]
[-125.58964539 41.17762756]
[-113.67911530 51.59155273]
[-99.00077057 54.68123245]
[-84.95269775 49.73139572]
[-73.04216766 60.14532089]
[-58.36381912 63.23500061]
[-43.68547440 66.32467651]
[-29.00712585 69.41436005]
[-14.32877827 72.50403595]
[0.34956875 75.59371948]
[15.02791595 78.68339539]
[29.76444244 81.48246765]
[44.55339432 83.98984528]
[59.36639404 86.35099792]
[74.20199585 88.56569672]
[89.03759766 90.78039551]
[102.11488342 85.83304596]
[113.17710114 94.38400269]
[128.01271057 96.59870148]
[142.84831238 98.81340027]
[157.68391418 101.02809906]
[172.68391418 101.02809906]
[187.51951599 98.81340027]
[202.35511780 96.59870148]
[217.19071960 94.38400269]
[232.02632141 92.16930389]
[246.86192322 89.95460510]
[261.67492676 87.59345245]
[276.46386719 85.08608246]
[291.25283813 82.57870483]
[296.14910889 71.67578125]
[305.61898804 64.58284760]
[317.22070312 62.98328781]
[328.03237915 67.16239929]
[335.38787842 75.96475983]
[350.26434326 74.04360962]
[365.14080811 72.12245178]
[380.01727295 70.20129395]
[394.89373779 68.28013611]
[409.77020264 66.35897827]
[424.50671387 63.55990601]
[439.05154419 59.89274597]
[441.32031250 44.88846588]
[449.13967896 31.93082237]
[461.29144287 22.97826576]
[475.90539551 19.36995316]
[490.74713135 21.62550354]
[503.55969238 29.37041664]
[512.40673828 41.39784241]
[526.95153809 37.73068237]
[541.49639893 34.06352234]
[556.04119873 30.39636421]
[570.58605957 26.72920418]
[585.13085938 23.06204605]
[599.67572021 19.39488792]
[609.10357666 6.41432571]
[625.13616943 5.83604717]
[635.47473145 18.10365868]
[632.18829346 33.80649567]
[617.79803467 40.89868927]
[603.34283447 33.93971252]
[588.79803467 37.60687256]
[574.25317383 41.27402878]
[559.70837402 44.94118881]
[545.16357422 48.60834885]
[530.61871338 52.27550888]
[516.07391357 55.94266510]
[513.98681641 70.72689056]
[506.37783813 83.62065125]
[494.37963867 92.64330292]
[479.80184937 96.39504242]
[464.85812378 94.27402496]
[451.83004761 86.57260895]
[442.71868896 74.43756866]
[428.17385864 78.10472870]
[440.25659180 86.99336243]
[442.69555664 101.79375458]
[434.10375977 114.08934021]
[419.36715698 116.88796997]
[406.86599731 108.59814453]
[403.70935059 93.93405151]
[411.69134521 81.23544312]
[396.81488037 83.15660095]
[381.93841553 85.07775879]
[367.06195068 86.99891663]
[352.18548584 88.92006683]
[337.30902100 90.84122467]
[327.07342529 105.97185516]
[308.72320557 108.91965485]
[293.76019287 97.36765289]
[278.97125244 99.87503052]
[264.18231201 102.38240814]
[258.08078003 106.62366486]
[249.07661438 104.79020691]
[234.24101257 107.00490570]
[219.40541077 109.21960449]
[204.56980896 111.43430328]
[189.73420715 113.64900208]
[174.89860535 115.86370087]
[188.60896301 121.94863129]
[199.26330566 132.50726318]
[205.47171021 146.16213989]
[206.42424011 161.13186646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 76]
[12 75]
[13 74]
[14 73]
[16 71]
[17 70]
[18 69]
[20 68]
[21 67]
[24 66]
[25 65]
[26 64]
[27 63]
[28 62]
[29 61]
[30 60]
[32 58]
[33 57]
[35 55]
[36 54]
[38 52]
[39 51]
[77 154]
[78 153]
[79 152]
[80 151]
[81 150]
[82 149]
[83 147]
[84 146]
[85 145]
[90 142]
[91 141]
[92 140]
[93 139]
[94 138]
[95 137]
[96 130]
[97 129]
[104 122]
[105 121]
[106 120]
[107 119]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
