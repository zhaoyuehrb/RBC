%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCCACUCCAACGCUGGGUGACAUUGAGCUCACCAGCGCCACCGUCCCCGGCGAAGUUCUGCGCUGGUCGGCGGAGUAGCAAGUGGCCAUGGGGAGCCUCAGCGGUCUGCGCCUGGCAGCAGGAAGCUGUUUUAGGUUAUGUGAAAGAGAUGUUUCCUCAUCUCUAAGGCUUACCAGAAGCUCUGAUU\
) } def
/len { sequence length } bind def

/coor [
[284.88232422 232.82064819]
[272.10241699 224.96740723]
[259.32247925 217.11415100]
[246.54255676 209.26091003]
[233.76263428 201.40765381]
[219.38005066 205.10588074]
[206.30751038 197.32362366]
[202.52600098 182.21276855]
[189.74606323 174.35952759]
[190.53953552 189.33851624]
[179.43603516 199.42378235]
[164.60214233 197.19767761]
[156.94807434 184.29747009]
[162.10333252 170.21119690]
[176.27648926 165.29922485]
[164.18487549 156.42266846]
[152.09327698 147.54611206]
[140.00167847 138.66957092]
[127.91007996 129.79301453]
[115.81847382 120.91646576]
[103.72687531 112.03990936]
[91.41997528 103.46435547]
[78.90525818 95.19502258]
[66.39054108 86.92568207]
[47.99664307 86.25024414]
[40.75794220 70.27169800]
[28.10891151 62.20931244]
[15.45988178 54.14692688]
[2.81085157 46.08454514]
[-9.83817863 38.02215958]
[-22.55308533 30.06407547]
[-35.33301163 22.21082497]
[-48.11293411 14.35757446]
[-63.92147446 13.72463512]
[-70.71417999 0.46913156]
[-83.49411011 -7.38411856]
[-96.27403259 -15.23736858]
[-111.46324158 -11.78401089]
[-124.31202698 -19.93037796]
[-127.51067352 -34.43225098]
[-140.29058838 -42.28549957]
[-153.07052612 -50.13874817]
[-165.85044861 -57.99200058]
[-179.17611694 -64.87868500]
[-192.97456360 -70.76109314]
[-206.77302551 -76.64350128]
[-220.57147217 -82.52590942]
[-234.36991882 -88.40831757]
[-252.58511353 -85.76286316]
[-262.58090210 -100.17803192]
[-276.47424316 -105.83269501]
[-290.36758423 -111.48735809]
[-304.26092529 -117.14202881]
[-318.15423584 -122.79669189]
[-332.04757690 -128.45135498]
[-345.15625000 -120.14817810]
[-360.63967896 -121.16943359]
[-372.54418945 -131.12243652]
[-376.29223633 -146.18005371]
[-370.44265747 -160.55230713]
[-357.24468994 -168.71279907]
[-341.77325439 -167.52363586]
[-329.97741699 -157.44207764]
[-326.39291382 -142.34469604]
[-312.49957275 -136.69003296]
[-298.60623169 -131.03535461]
[-284.71292114 -125.38069916]
[-270.81958008 -119.72602844]
[-256.92623901 -114.07136536]
[-245.65019226 -118.47993469]
[-234.02275085 -113.86916351]
[-228.48751831 -102.20677185]
[-214.68905640 -96.32436371]
[-200.89060974 -90.44195557]
[-187.09216309 -84.55954742]
[-173.29371643 -78.67713928]
[-180.31817627 -91.93070221]
[-179.17933655 -106.88740540]
[-170.22918701 -118.92462921]
[-156.23391724 -124.32206726]
[-141.51899719 -121.41154480]
[-130.63232422 -111.09260559]
[-126.93861389 -96.55449677]
[-131.57946777 -82.29047394]
[-143.12055969 -72.70906830]
[-157.99719238 -70.77192688]
[-145.21726990 -62.91867447]
[-132.43734741 -55.06542587]
[-119.65742493 -47.21217346]
[-105.27484131 -50.91040039]
[-92.20230865 -43.12814331]
[-88.42078400 -28.01729202]
[-75.64086151 -20.16404343]
[-62.86093521 -12.31079292]
[-47.96649933 -12.23957062]
[-40.25968552 1.57765043]
[-27.47976112 9.43090057]
[-14.69983578 17.28415108]
[-7.34241962 18.10888100]
[-1.77579474 25.37313080]
[10.87323570 33.43551254]
[23.52226639 41.49789810]
[36.17129517 49.56028366]
[48.82032776 57.62266541]
[60.70561600 55.31511688]
[71.31357574 61.94291306]
[74.65988159 74.41096497]
[87.17459106 82.68030548]
[99.68930817 90.94964600]
[103.55772400 90.71566010]
[107.50919342 92.19664001]
[110.77171326 95.39041138]
[112.60342407 99.94831085]
[124.69503021 108.82485962]
[136.78663635 117.70141602]
[148.87823486 126.57796478]
[160.96983337 135.45451355]
[173.06143188 144.33106995]
[185.15303040 153.20762634]
[197.59931946 161.57960510]
[210.37924194 169.43284607]
[225.56845093 165.97949219]
[238.41723633 174.12585449]
[241.61589050 188.62773132]
[254.39581299 196.48097229]
[267.17572021 204.33422852]
[279.95565796 212.18748474]
[292.73559570 220.04072571]
[314.06768799 212.97314453]
[333.43572998 223.81826782]
[338.43283081 245.16406250]
[351.92434692 251.71992493]
[365.41586304 258.27575684]
[378.90734863 264.83160400]
[392.39886475 271.38745117]
[408.19284058 270.45971680]
[416.25854492 282.98144531]
[429.75006104 289.53729248]
[443.24157715 296.09317017]
[455.38885498 290.25082397]
[468.49096680 292.44479370]
[477.79550171 301.65179443]
[480.05886841 314.34674072]
[493.44070435 321.12359619]
[507.20861816 314.21340942]
[522.22991943 316.70602417]
[532.77844238 327.43887329]
[534.95819092 342.14895630]
[548.34002686 348.92581177]
[561.72192383 355.70266724]
[575.10375977 362.47955322]
[588.48559570 369.25640869]
[601.86749268 376.03326416]
[615.24932861 382.81011963]
[630.18811035 377.65170288]
[644.36218262 384.64248657]
[649.36236572 399.63491821]
[642.22210693 413.73431396]
[627.17767334 418.57571411]
[613.15454102 411.28680420]
[608.47247314 396.19198608]
[595.09063721 389.41513062]
[581.70874023 382.63827515]
[568.32690430 375.86138916]
[554.94506836 369.08453369]
[541.56317139 362.30767822]
[528.18133545 355.53082275]
[515.03350830 362.47866821]
[500.13943481 360.32684326]
[489.24093628 349.69311523]
[486.66384888 334.50546265]
[473.28198242 327.72860718]
[457.54748535 333.64520264]
[442.09445190 326.21237183]
[436.68572998 309.58465576]
[423.19421387 303.02880859]
[409.70269775 296.47296143]
[394.87371826 297.86962891]
[385.84301758 284.87896729]
[372.35150146 278.32312012]
[358.86001587 271.76727295]
[345.36849976 265.21142578]
[331.87698364 258.65557861]
[325.72573853 263.85440063]
[318.28579712 267.02590942]
[310.20837402 267.87091064]
[302.20684814 266.29473877]
[294.99380493 262.41751099]
[289.21749878 256.56515503]
[285.40377808 249.24206543]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 128]
[2 127]
[3 126]
[4 125]
[5 124]
[8 121]
[9 120]
[15 119]
[16 118]
[17 117]
[18 116]
[19 115]
[20 114]
[21 113]
[22 109]
[23 108]
[24 107]
[26 104]
[27 103]
[28 102]
[29 101]
[30 100]
[31 98]
[32 97]
[33 96]
[35 94]
[36 93]
[37 92]
[40 89]
[41 88]
[42 87]
[43 86]
[44 76]
[45 75]
[46 74]
[47 73]
[48 72]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[131 183]
[132 182]
[133 181]
[134 180]
[135 179]
[137 177]
[138 176]
[139 175]
[143 172]
[144 171]
[148 167]
[149 166]
[150 165]
[151 164]
[152 163]
[153 162]
[154 161]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
