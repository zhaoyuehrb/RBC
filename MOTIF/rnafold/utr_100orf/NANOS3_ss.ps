%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:36:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGGACCUUUGACCUGUGGACAGAUUACCUGGGUUUGGCACACCUGGUUAGGGCUCUGAGUGGGAAAGAGGGUCCUGAAACCAGGCUGAGCCCCCAGC\
) } def
/len { sequence length } bind def

/coor [
[-30.23754692 216.55276489]
[-38.97866058 228.74263000]
[-47.71977615 240.93249512]
[-56.46089172 253.12237549]
[-65.20201111 265.31222534]
[-59.42005539 279.61511230]
[-62.31114197 294.76916504]
[-72.95272827 305.93878174]
[-87.94912720 309.55975342]
[-102.51504517 304.47668457]
[-112.00254059 292.31152344]
[-113.38420105 276.94616699]
[-106.21913147 263.28363037]
[-92.79368591 255.68354797]
[-77.39187622 256.57113647]
[-68.65076447 244.38125610]
[-59.90964508 232.19139099]
[-51.16852951 220.00151062]
[-42.42741394 207.81164551]
[-46.54765701 201.62921143]
[-49.05644608 194.61637878]
[-49.79638290 187.18656921]
[-48.71463776 179.78012085]
[-45.86660385 172.83811951]
[-41.41313934 166.77619934]
[-35.61149597 161.95962524]
[-28.80047798 158.68127441]
[-21.38066483 157.14389038]
[-13.79084778 157.44750977]
[-6.48208094 159.58303833]
[0.10911940 163.43223572]
[11.87803364 154.13209534]
[23.64694786 144.83195496]
[35.41586304 135.53181458]
[47.18477631 126.23166656]
[47.91360474 122.60898590]
[50.54432678 119.19812012]
[54.93714142 116.94233704]
[60.51172638 116.67517853]
[73.09601593 108.51211548]
[85.68030548 100.34905243]
[92.20484924 87.98288727]
[106.15663147 87.06665802]
[118.74092102 78.90359497]
[131.19674683 70.54581451]
[143.52107239 61.99532700]
[155.84541321 53.44484329]
[168.16973877 44.89435959]
[180.49407959 36.34387589]
[192.81842041 27.79339218]
[204.87086487 18.86375999]
[216.63978577 9.56361580]
[228.40869141 0.26347300]
[240.17761230 -9.03667068]
[251.94651794 -18.33681297]
[263.71542358 -27.63695717]
[275.48434448 -36.93709946]
[287.25326538 -46.23724365]
[299.02218628 -55.53738785]
[296.13760376 -70.56861115]
[300.57989502 -85.21527100]
[311.32827759 -96.11166382]
[325.91278076 -100.75387573]
[340.98205566 -98.07517242]
[353.07327271 -88.69108582]
[359.40795898 -74.75801849]
[358.53045654 -59.47768784]
[350.64239502 -46.36139679]
[337.55639648 -38.42317963]
[322.27954102 -37.48717499]
[308.32232666 -43.76847076]
[296.55340576 -34.46833038]
[284.78448486 -25.16818619]
[273.01559448 -15.86804295]
[261.24667358 -6.56789923]
[249.47775269 2.73224378]
[237.70883179 12.03238678]
[225.93992615 21.33253098]
[214.17100525 30.63267326]
[212.73065186 35.35666656]
[208.20150757 39.15094376]
[201.36889648 40.11772537]
[189.04455566 48.66820908]
[176.72023010 57.21869659]
[164.39588928 65.76918030]
[152.07156372 74.31966400]
[139.74722290 82.87014771]
[135.97956848 89.38400269]
[126.90398407 91.48788452]
[114.31969452 99.65094757]
[107.79515076 112.01711273]
[93.84336853 112.93334198]
[81.25907898 121.09640503]
[68.67478943 129.25946045]
[56.48491669 138.00057983]
[44.71600342 147.30072021]
[32.94709015 156.60087585]
[21.17817688 165.90101624]
[9.40926266 175.20115662]
[9.89965439 199.23052979]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[3 17]
[4 16]
[5 15]
[31 99]
[32 98]
[33 97]
[34 96]
[35 95]
[39 94]
[40 93]
[41 92]
[43 90]
[44 89]
[45 87]
[46 86]
[47 85]
[48 84]
[49 83]
[50 82]
[51 79]
[52 78]
[53 77]
[54 76]
[55 75]
[56 74]
[57 73]
[58 72]
[59 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
