%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGAUGCAGCAGGGGCAGCUGGCACCUGGGUCUAGGCUUUGCUCAGGGCCCUGGGGCCUCCCCGAGCUCCAACCCGCUGCGCCCUCCUCAUCAGCCGCUCAGC\
) } def
/len { sequence length } bind def

/coor [
[123.73240662 377.46447754]
[127.10470581 362.66610718]
[135.59831238 350.08743286]
[148.06454468 341.42962646]
[144.50833130 326.85726929]
[140.95213318 312.28491211]
[137.39591980 297.71255493]
[132.67524719 291.86514282]
[133.95825195 282.65112305]
[130.83956909 267.97891235]
[120.62519836 257.13842773]
[125.32420349 242.03114319]
[122.20552826 227.35893250]
[119.08685303 212.68672180]
[115.96817780 198.01451111]
[112.63036346 183.39059448]
[109.07415771 168.81823730]
[105.51795197 154.24589539]
[101.96174622 139.67353821]
[98.40554047 125.10118866]
[79.21862793 114.16850281]
[76.05144501 92.31374359]
[63.78565216 83.67948914]
[51.51986313 75.04523468]
[42.54304886 72.60363770]
[39.02153397 65.96466827]
[27.01953125 56.96733856]
[15.01752758 47.97001266]
[3.01552439 38.97268295]
[-8.98647881 29.97535515]
[-20.98848152 20.97802734]
[-32.99048615 11.98069763]
[-47.41262054 17.45842743]
[-62.50204086 14.24703884]
[-73.44375610 3.37127233]
[-76.74632263 -11.69845390]
[-71.35588837 -26.15344429]
[-58.99252319 -35.38116455]
[-43.60133743 -36.43708420]
[-30.09360123 -28.98425865]
[-22.77958107 -15.40086269]
[-23.99315643 -0.02130518]
[-11.99115372 8.97602367]
[0.01084950 17.97335243]
[12.01285267 26.97068024]
[24.01485634 35.96800995]
[36.01686096 44.96533585]
[48.01886368 53.96266556]
[60.15411758 62.77944565]
[72.41990662 71.41370392]
[84.68569946 80.04795837]
[95.50897980 75.25242615]
[107.32713318 75.93914032]
[115.77693939 63.54555893]
[124.22673798 51.15197754]
[132.67654419 38.75839615]
[141.12634277 26.36481476]
[149.57614136 13.97123241]
[144.21519470 -0.59035504]
[148.46955872 -15.51281929]
[160.70336914 -25.05816650]
[176.21244812 -25.55601883]
[189.03326416 -16.81493759]
[194.23593140 -2.19605136]
[189.81993103 12.67938232]
[177.48329163 22.09145546]
[161.96972656 22.42103386]
[153.51992798 34.81461716]
[145.07011414 47.20819855]
[136.62031555 59.60177994]
[128.17051697 71.99536133]
[119.72071838 84.38893890]
[123.79502106 91.85084534]
[125.15059662 100.24385071]
[123.63254547 108.60898590]
[119.41432190 115.99049377]
[112.97789001 121.54498291]
[116.53409576 136.11732483]
[120.09030151 150.68968201]
[123.64650726 165.26203918]
[127.20271301 179.83438110]
[132.35647583 187.57926941]
[130.64039612 194.89582825]
[133.75906372 209.56803894]
[136.87774658 224.24026489]
[139.99641418 238.91247559]
[150.43385315 250.80239868]
[145.51177979 264.86022949]
[148.63046265 279.53244019]
[151.96827698 294.15637207]
[155.52447510 308.72869873]
[159.08068848 323.30105591]
[162.63688660 337.87341309]
[177.68989563 339.81549072]
[191.02296448 347.06762695]
[200.83293152 358.64901733]
[205.79307556 372.99340820]
[205.23255920 388.16082764]
[199.22721863 402.09997559]
[188.58918762 412.92575073]
[174.75721741 419.17401123]
[159.60192871 419.99972534]
[145.17297363 415.29125977]
[133.42173767 405.68539429]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 93]
[5 92]
[6 91]
[7 90]
[9 89]
[10 88]
[12 86]
[13 85]
[14 84]
[15 83]
[16 81]
[17 80]
[18 79]
[19 78]
[20 77]
[22 51]
[23 50]
[24 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[53 72]
[54 71]
[55 70]
[56 69]
[57 68]
[58 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
