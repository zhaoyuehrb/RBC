%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:50:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGCCACCCAGGUGAGCCUCUCACUCGCCACCUCCUCUUCCACCCCUGCCAGGCCCAGCAGCCACCACAGCGCCUGCUUCCUCGGCCCUGAAAUCAUGCCCCUAGGUCUCCUGUGGCUGGGCCUAGCCCUGUUGGGGGCUCUGCAUGCCCAGGCCCAGGACUCCACCUCAGACCUGAUCCCAGCCCCACCUCUGA\
) } def
/len { sequence length } bind def

/coor [
[99.82881165 264.36236572]
[112.40252686 255.63537598]
[110.49405670 240.75727844]
[108.58557892 225.87918091]
[106.67710876 211.00109863]
[96.15956879 211.13540649]
[85.67639160 210.27539062]
[75.32135773 208.42874146]
[65.18713379 205.61198425]
[55.36437607 201.85031128]
[45.94097137 197.17739868]
[37.00123215 191.63504028]
[27.68901443 203.39440918]
[18.37679672 215.15376282]
[9.06457996 226.91313171]
[-0.24763648 238.67250061]
[-9.55985355 250.43185425]
[-6.23195696 265.71124268]
[-13.54975605 279.53091431]
[-28.05800819 285.36569214]
[-42.90636444 280.46054077]
[-51.08387756 267.13156128]
[-48.72938156 251.67224121]
[-36.95459747 241.38203430]
[-21.31921577 241.11964417]
[-12.00699997 229.36027527]
[-2.69478273 217.60092163]
[6.61743402 205.84155273]
[15.92965126 194.08218384]
[25.24186707 182.32283020]
[19.52942085 176.74836731]
[14.23154545 170.77851868]
[9.37553406 164.44403076]
[4.98640394 157.77752686]
[1.08676815 150.81336975]
[-2.30328345 143.58743286]
[-5.16628599 136.13694763]
[-7.48748970 128.50027466]
[-9.25493622 120.71678162]
[-10.45952034 112.82656097]
[-11.09503555 104.87026215]
[-11.15820789 96.88886261]
[-10.64871216 88.92350006]
[-9.56917286 81.01519775]
[-7.92515230 73.20470428]
[-5.72511959 65.53225708]
[-2.98040891 58.03737640]
[0.29483917 50.75868225]
[4.08375120 43.73367310]
[-8.31303787 35.28857803]
[-20.70982742 26.84348488]
[-33.17355728 18.49750328]
[-45.70344162 10.25116920]
[-58.23332214 2.00483346]
[-68.75585938 4.81584549]
[-78.87799835 1.43501604]
[-85.32766724 -6.78982639]
[-86.16123199 -16.98820305]
[-98.42177582 -25.62990952]
[-110.68231964 -34.27161407]
[-122.94286346 -42.91332245]
[-135.27192688 -51.45699310]
[-147.66871643 -59.90208817]
[-161.82824707 -53.77745056]
[-177.04750061 -56.30284119]
[-188.47007751 -66.67242432]
[-192.45108032 -81.57729340]
[-187.72016907 -96.26136780]
[-175.78697205 -106.03900909]
[-160.45932007 -107.79020691]
[-146.62821960 -100.95616150]
[-138.70712280 -87.71759033]
[-139.22361755 -72.29887390]
[-126.82682800 -63.85378265]
[-119.52038574 -62.68477249]
[-114.30115509 -55.17386246]
[-102.04061127 -46.53215790]
[-89.78006744 -37.89045334]
[-77.51952362 -29.24874687]
[-58.19268417 -28.92953110]
[-49.98698807 -10.52504921]
[-37.45710754 -2.27871370]
[-24.92722321 5.96762180]
[-17.60307121 7.01996946]
[-12.26473236 14.44669533]
[0.13205667 22.89179039]
[12.52884579 31.33688354]
[22.01561356 20.72666550]
[32.77991104 11.41509151]
[44.64540100 3.55470610]
[57.41770554 -2.72572398]
[70.88758087 -7.32331324]
[84.83438110 -10.16274452]
[99.02961731 -11.19750309]
[113.24075317 -10.41063690]
[127.23497772 -7.81503677]
[140.78305054 -3.45322299]
[153.66300964 2.60334897]
[165.66387939 10.25546169]
[176.58903503 19.37775803]
[186.25952148 29.82079887]
[194.51692200 41.41350937]
[201.22595215 53.96597290]
[206.27671814 67.27256012]
[220.87748718 63.83488083]
[235.47825623 60.39719772]
[250.07901001 56.95951462]
[264.67977905 53.52183151]
[279.28054810 50.08415222]
[293.88131714 46.64646912]
[299.95980835 32.49168396]
[313.05453491 24.72108650]
[328.03674316 26.13440895]
[339.18045044 35.98099136]
[353.78121948 32.54330826]
[368.38198853 29.10562706]
[382.98275757 25.66794586]
[397.46646118 21.76640701]
[411.81842041 17.40498543]
[426.17034912 13.04356194]
[440.52227783 8.68213940]
[454.87420654 4.32071590]
[469.22613525 -0.04070691]
[483.57806396 -4.40212965]
[497.92999268 -8.76355267]
[511.88894653 -14.25426960]
[525.36621094 -20.83939171]
[538.84344482 -27.42451286]
[552.32067871 -34.00963211]
[565.79791260 -40.59475327]
[579.27520752 -47.17987442]
[587.98205566 -61.07672882]
[604.35852051 -60.21446228]
[611.55786133 -45.48010635]
[602.17401123 -32.03110123]
[585.86029053 -33.70262909]
[572.38305664 -27.11750793]
[558.90582275 -20.53238678]
[545.42858887 -13.94726562]
[531.95129395 -7.36214447]
[518.47406006 -0.77702326]
[533.22052002 1.96923542]
[544.68670654 11.64019108]
[549.88055420 25.71228790]
[547.44677734 40.51353455]
[538.02050781 52.18166733]
[524.06140137 57.67199326]
[509.21200562 55.55184937]
[497.34710693 46.37447357]
[491.56277466 32.53462601]
[493.36834717 17.64369392]
[502.29144287 5.58838034]
[487.93948364 9.94980335]
[473.58755493 14.31122684]
[459.23562622 18.67264938]
[444.88369751 23.03407288]
[430.53176880 27.39549446]
[416.17984009 31.75691795]
[401.82791138 36.11833954]
[400.39022827 38.53761292]
[397.90209961 40.52972031]
[394.52264404 41.68964005]
[390.55523682 41.67785263]
[386.42044067 40.26871109]
[371.81967163 43.70639420]
[357.21890259 47.14407349]
[342.61813354 50.58175659]
[337.03814697 64.36586761]
[324.26031494 72.31515503]
[309.07424927 71.20313263]
[297.31900024 61.24723434]
[282.71823120 64.68491364]
[268.11746216 68.12259674]
[253.51669312 71.56027985]
[238.91593933 74.99796295]
[224.31517029 78.43564606]
[209.71440125 81.87332916]
[211.02626038 106.24460602]
[206.98982239 130.31506348]
[197.79953003 152.92520142]
[183.89808655 172.98587036]
[165.95515442 189.53068542]
[144.83506775 201.76268005]
[121.55520630 209.09262085]
[123.46367645 223.97071838]
[125.37215424 238.84881592]
[127.28062439 253.72689819]
[141.64990234 258.99780273]
[151.91516113 270.35046387]
[155.71751404 285.17614746]
[152.18322754 300.06799316]
[142.12442017 311.60400391]
[127.85256195 317.13323975]
[112.64720917 315.38516235]
[100.00244141 306.76144409]
[92.82393646 293.24377441]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 187]
[3 186]
[4 185]
[5 184]
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[17 25]
[49 87]
[50 86]
[51 85]
[52 83]
[53 82]
[54 81]
[58 79]
[59 78]
[60 77]
[61 76]
[62 74]
[63 73]
[104 177]
[105 176]
[106 175]
[107 174]
[108 173]
[109 172]
[110 171]
[114 167]
[115 166]
[116 165]
[117 164]
[118 159]
[119 158]
[120 157]
[121 156]
[122 155]
[123 154]
[124 153]
[125 152]
[126 141]
[127 140]
[128 139]
[129 138]
[130 137]
[131 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
