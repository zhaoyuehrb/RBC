%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:25:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAAGCCGGGCUGCCGUCUUCUCGCCAUGGGCUCCGGGCCGCGCGGGGCGCUGAGCUUACUGCUCCUGCUGCUGGCCCCGCCGAGCCGCCCGGCCGCAGGUUGCCCGGCGCCCUGUAGCUGCGCGG\
) } def
/len { sequence length } bind def

/coor [
[-86.66261292 321.24508667]
[-93.26002502 334.71630859]
[-107.84929657 338.20245361]
[-119.82420349 329.16906738]
[-120.47885895 314.18273926]
[-132.74263000 322.81985474]
[-145.00640869 331.45697021]
[-157.27017212 340.09411621]
[-164.78111267 358.72564697]
[-184.02047729 359.88241577]
[-195.84567261 369.11087036]
[-207.67086792 378.33935547]
[-204.38088989 393.24368286]
[-207.89181519 408.09750366]
[-217.50656128 419.95159912]
[-231.31610107 426.45230103]
[-246.57853699 426.30892944]
[-260.26351929 419.54992676]
[-269.65386963 407.51730347]
[-272.88513184 392.60015869]
[-269.31573486 377.76028442]
[-259.65438843 365.94412231]
[-245.81936646 359.49783325]
[-230.55760193 359.70132446]
[-216.89933777 366.51416016]
[-205.07414246 357.28567505]
[-193.24894714 348.05722046]
[-192.89309692 337.71633911]
[-186.72894287 329.13238525]
[-176.63052368 325.33499146]
[-165.90730286 327.83032227]
[-153.64352417 319.19320679]
[-141.37976074 310.55609131]
[-129.11598206 301.91897583]
[-117.40492249 292.54608154]
[-106.29065704 282.47268677]
[-95.17639160 272.39929199]
[-90.94216156 258.11923218]
[-75.52085114 254.58456421]
[-64.40658569 244.51118469]
[-60.17235184 230.23110962]
[-44.75104523 226.69644165]
[-33.63677979 216.62304688]
[-22.64696503 206.41403198]
[-11.78325939 196.07092285]
[-0.91955286 185.72781372]
[9.94415379 175.38470459]
[20.80785942 165.04161072]
[31.67156601 154.69850159]
[42.53527069 144.35539246]
[53.39897919 134.01228333]
[64.26268768 123.66917419]
[75.12638855 113.32606506]
[85.99009705 102.98295593]
[90.12306213 89.62592316]
[103.66679382 86.15333557]
[114.53050232 75.81023407]
[112.62516785 60.52376938]
[120.00012970 47.20223236]
[133.64378357 40.85282898]
[148.23535156 43.72053909]
[159.09906006 33.37742996]
[169.96276855 23.03432274]
[180.82647705 12.69121552]
[185.55989075 -5.05350876]
[202.69706726 -8.61767292]
[213.30366516 -19.22427559]
[217.60017395 -37.07981873]
[234.64471436 -41.06347656]
[244.98782349 -51.92718124]
[248.89988708 -67.25710297]
[263.27957153 -71.13961029]
[273.62268066 -82.00331116]
[283.96578979 -92.86701965]
[294.17480469 -103.85683441]
[304.24819946 -114.97109985]
[314.32156372 -126.08536530]
[320.47845459 -141.88186646]
[337.36199951 -140.33851624]
[340.55279541 -123.68753052]
[325.43585205 -116.01198578]
[315.36245728 -104.89771271]
[305.28906250 -93.78344727]
[303.10525513 -86.63934326]
[294.82949829 -82.52391052]
[284.48638916 -71.66020203]
[274.14328003 -60.79649734]
[270.97103882 -46.24362564]
[255.85153198 -41.58407593]
[245.50842285 -30.72036743]
[245.47299194 -18.55786324]
[236.85267639 -9.41653347]
[223.91026306 -8.61767292]
[213.30366516 1.98892856]
[212.96975708 14.14690018]
[204.12770081 23.07392311]
[191.16958618 23.55492210]
[180.30587769 33.89802933]
[169.44216919 44.24113846]
[158.57846069 54.58424759]
[160.72674561 69.29896545]
[153.71553040 82.61462402]
[140.04817200 89.32704163]
[124.87361145 86.67393494]
[114.00990295 97.01704407]
[109.87693787 110.37407684]
[96.33320618 113.84666443]
[85.46949768 124.18976593]
[74.60578918 134.53288269]
[63.74208832 144.87599182]
[52.87837982 155.21910095]
[42.01467514 165.56219482]
[31.15096855 175.90530396]
[20.28726196 186.24841309]
[9.42355537 196.59152222]
[-1.44015098 206.93463135]
[-12.30385685 217.27774048]
[-16.41929245 225.55349731]
[-23.56339455 227.73731995]
[-34.67766190 237.81069946]
[-39.70686340 252.81129456]
[-54.33320236 255.62544250]
[-65.44747162 265.69882202]
[-70.47666931 280.69943237]
[-85.10300446 283.51358032]
[-96.21727753 293.58694458]
[-107.33154297 303.66033936]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 34]
[6 33]
[7 32]
[8 31]
[10 27]
[11 26]
[12 25]
[35 127]
[36 126]
[37 125]
[39 123]
[40 122]
[42 120]
[43 119]
[44 117]
[45 116]
[46 115]
[47 114]
[48 113]
[49 112]
[50 111]
[51 110]
[52 109]
[53 108]
[54 107]
[56 105]
[57 104]
[61 100]
[62 99]
[63 98]
[64 97]
[66 94]
[67 93]
[69 90]
[70 89]
[72 87]
[73 86]
[74 85]
[75 83]
[76 82]
[77 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
