%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:16:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCGCGGCAGCUCAGCCUCCCGCCGAUUGUAUGUUCCAGGCCUCAAUGAGGAGUCCAAACAUGGAGCCAUUCAAGCAGCAGAAGGUGGAGGACUUUUAUGACAUCGGAGAGGAGCUGGGGAGUGGCCAGU\
) } def
/len { sequence length } bind def

/coor [
[82.72367096 517.82861328]
[72.64682770 506.14694214]
[70.50784302 490.86859131]
[76.98926544 476.86877441]
[90.02289581 468.61480713]
[90.02289581 453.61480713]
[82.28559875 440.88751221]
[90.02289581 427.08734131]
[90.02289581 412.08734131]
[79.34202576 401.76968384]
[79.12834167 386.55752563]
[90.02289581 375.42440796]
[90.02289581 360.42440796]
[90.02289581 345.42440796]
[90.02289581 330.42440796]
[90.02289581 315.42440796]
[90.02289581 300.42440796]
[86.84610748 293.66992188]
[90.20564270 285.06851196]
[90.56260681 270.07275391]
[90.91957092 255.07701111]
[78.81613159 243.46380615]
[78.80950165 226.35356140]
[91.38893127 214.26448059]
[91.38893127 199.26448059]
[91.38893127 184.26448059]
[91.38893127 169.26448059]
[91.38893127 154.26448059]
[88.21214294 147.50999451]
[91.57167816 138.90858459]
[91.92864227 123.91282654]
[75.26666260 112.26909637]
[71.58257294 90.44701385]
[85.58814240 71.03636169]
[75.76522827 59.70011902]
[65.94232178 48.36387634]
[56.11941147 37.02762985]
[46.29649734 25.69138718]
[36.47358704 14.35514450]
[25.99395180 3.62307811]
[14.89468193 -6.46682739]
[-0.52134961 -10.02443027]
[-4.73433638 -24.31078720]
[-15.83360672 -34.40069199]
[-26.93287659 -44.49060059]
[-42.70535278 -43.48834610]
[-54.51150131 -53.99502945]
[-55.34694290 -69.77722168]
[-44.71602631 -81.47162628]
[-28.92588234 -82.14015961]
[-17.34452629 -71.38619995]
[-16.84297180 -55.58987045]
[-5.74370146 -45.49996567]
[5.35556889 -35.41005707]
[19.97770691 -32.57415390]
[24.98458672 -17.56609726]
[36.08385849 -7.47619247]
[38.54355240 -22.27314949]
[51.52542496 -29.78786087]
[65.58171082 -24.55137825]
[70.48272705 -10.37463284]
[62.66166687 2.42501783]
[47.80982971 4.53223324]
[57.63274384 15.86847687]
[67.45565033 27.20471954]
[77.27856445 38.54096222]
[87.10147858 49.87720871]
[96.92438507 61.21345139]
[93.73885345 46.55560684]
[85.13336945 34.26961517]
[82.51605988 19.49972343]
[86.37581635 5.00481701]
[95.99166107 -6.50758505]
[109.56745911 -12.88706970]
[124.56735992 -12.94200706]
[138.18951416 -6.66213417]
[147.88943481 4.77952433]
[151.85525513 19.24576950]
[149.34620667 34.03443527]
[140.83094788 46.38313293]
[127.89694214 53.98624420]
[118.91019440 65.99617004]
[132.55467224 59.76494598]
[146.19915771 53.53371811]
[159.84362793 47.30249405]
[173.48811340 41.07126999]
[187.13258362 34.84004593]
[194.06370544 20.37148857]
[209.72888184 16.91001511]
[222.11114502 27.11096954]
[221.71185303 43.14905167]
[208.83734131 52.72122192]
[193.36381531 48.48452377]
[179.71932983 54.71574783]
[166.07485962 60.94697571]
[152.43037415 67.17819977]
[138.78588867 73.40942383]
[125.14141846 79.64064789]
[130.03822327 94.30726624]
[127.45625305 108.67687988]
[118.83258820 119.37068939]
[106.92439270 124.26979065]
[106.56742859 139.26554871]
[106.38893127 154.26448059]
[106.38893127 169.26448059]
[106.38893127 184.26448059]
[106.38893127 199.26448059]
[106.38893127 214.26448059]
[116.98459625 222.67387390]
[120.71749115 235.47265625]
[116.43119049 247.89056396]
[105.91532135 255.43397522]
[105.55835724 270.42971802]
[105.20139313 285.42547607]
[105.02289581 300.42440796]
[105.02289581 315.42440796]
[105.02289581 330.42440796]
[105.02289581 345.42440796]
[105.02289581 360.42440796]
[105.02289581 375.42440796]
[115.91744995 386.55752563]
[115.70377350 401.76968384]
[105.02289581 412.08734131]
[105.02289581 427.08734131]
[112.76020050 440.88751221]
[105.02289581 453.61480713]
[105.02289581 468.61480713]
[118.05652618 476.86877441]
[124.53794861 490.86859131]
[122.39896393 506.14694214]
[112.32212067 517.82861328]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 127]
[6 126]
[8 124]
[9 123]
[12 120]
[13 119]
[14 118]
[15 117]
[16 116]
[17 115]
[19 114]
[20 113]
[21 112]
[24 108]
[25 107]
[26 106]
[27 105]
[28 104]
[30 103]
[31 102]
[34 68]
[35 67]
[36 66]
[37 65]
[38 64]
[39 63]
[40 57]
[41 56]
[43 54]
[44 53]
[45 52]
[82 98]
[83 97]
[84 96]
[85 95]
[86 94]
[87 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
