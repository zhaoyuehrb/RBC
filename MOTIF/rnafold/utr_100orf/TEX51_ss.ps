%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:27:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCACUGGGGCACAGUAGGAGGAACCCAGAAGAUGCUGCCUCUCCUGAUCAUCUGUCUCCUGCCUGCCAUUGAAGGGAAGAACUGCCUCCGCUGCUGGCCAGAACUGUCUGCCUUGAUAGACUAUGACCUGC\
) } def
/len { sequence length } bind def

/coor [
[211.30610657 235.86917114]
[225.85408020 232.21644592]
[214.88111877 221.98933411]
[203.90814209 211.76220703]
[192.93518066 201.53509521]
[178.34942627 198.51762390]
[173.52951050 183.44847107]
[162.55654907 173.22135925]
[151.58357239 162.99424744]
[140.49148560 152.89645386]
[129.28176880 142.92938232]
[118.07206726 132.96231079]
[106.86236572 122.99523926]
[77.77173615 107.70874786]
[63.57249832 102.87328339]
[49.37326431 98.03781891]
[35.11832047 93.36913300]
[20.80963326 88.86785889]
[6.50094366 84.36659241]
[-7.80774498 79.86531830]
[-22.11643410 75.36405182]
[-36.42512131 70.86278534]
[-50.73381042 66.36151123]
[-55.13996506 67.52602386]
[-59.25492096 67.20117188]
[-62.63116837 65.67533112]
[-64.96750641 63.35622025]
[-66.13589478 60.71013260]
[-79.96020508 54.88875580]
[-93.78451538 49.06737518]
[-107.60882568 43.24599838]
[-123.33013916 45.02112198]
[-132.05706787 32.95091248]
[-145.88137817 27.12953568]
[-159.70568848 21.30815887]
[-170.78469849 31.75686646]
[-185.15789795 36.78987122]
[-200.33503723 35.53517532]
[-213.68658447 28.21016121]
[-222.89932251 16.08393097]
[-226.37707520 1.25742924]
[-223.51728821 -13.70056438]
[-214.81546021 -26.19848633]
[-201.77922058 -34.07099533]
[-186.66719055 -35.95413208]
[-172.09759521 -31.52163506]
[-160.59474182 -21.54145622]
[-154.15153503 -7.74272394]
[-153.88430786 7.48384762]
[-140.05999756 13.30522537]
[-126.23569489 19.12660408]
[-111.50318909 16.93509865]
[-101.78745270 29.42168808]
[-87.96314240 35.24306488]
[-74.13883209 41.06444550]
[-60.31451797 46.88582230]
[-46.23254013 52.05282593]
[-31.92385292 56.55409241]
[-17.61516380 61.05536270]
[-3.30647540 65.55663300]
[11.00221348 70.05789948]
[25.31090164 74.55917358]
[39.61959076 79.06044006]
[47.01318741 78.05746460]
[54.20872879 83.83858490]
[68.40795898 88.67404938]
[82.60720062 93.50951385]
[95.82563782 86.41918182]
[99.65128326 71.91523743]
[91.48015594 58.38718414]
[95.34913635 43.06378555]
[108.96282196 35.03614426]
[124.24446106 39.06691360]
[132.12771606 52.76471329]
[127.93560791 68.00287628]
[114.15522766 75.74088287]
[110.32958984 90.24482727]
[118.07867432 77.40147400]
[132.06811523 71.98892975]
[146.44354248 76.27225494]
[155.18908691 88.45893860]
[154.64488220 103.44906616]
[145.03866577 114.96950531]
[130.39047241 118.19913483]
[116.82943726 111.78553009]
[128.03913879 121.75260162]
[139.24884033 131.71968079]
[150.45855713 141.68675232]
[159.03654480 145.09484863]
[161.81069946 152.02127075]
[172.78366089 162.24838257]
[183.75663757 172.47550964]
[199.12724304 176.22448730]
[203.16229248 190.56211853]
[214.13526917 200.78924561]
[225.10823059 211.01635742]
[236.08120728 221.24346924]
[247.63441467 230.81025696]
[259.72821045 239.68383789]
[275.43179321 241.60942078]
[281.11599731 255.37673950]
[293.20977783 264.25030518]
[309.20059204 258.87634277]
[325.09667969 264.00851440]
[334.73303223 277.44955444]
[334.49554443 293.82067871]
[346.79400635 302.40829468]
[359.09246826 310.99594116]
[371.39096069 319.58358765]
[383.68942261 328.17120361]
[399.20422363 325.16012573]
[412.25708008 334.07073975]
[415.10397339 349.61648560]
[406.05584717 362.57440186]
[390.48086548 365.25677490]
[377.61935425 356.07217407]
[375.10180664 340.46969604]
[362.80331421 331.88204956]
[350.50485229 323.29443359]
[338.20635986 314.70678711]
[325.90789795 306.11914062]
[313.69808960 311.64569092]
[300.24633789 310.38366699]
[289.09979248 302.55786133]
[283.25137329 290.13803101]
[284.33621216 276.34408569]
[272.24243164 267.47052002]
[257.40386963 266.17962646]
[250.85461426 251.77761841]
[238.76083374 242.90403748]
[237.88453674 257.87841797]
[225.77078247 266.72470093]
[211.24021912 263.00146484]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 97]
[3 96]
[4 95]
[5 94]
[7 92]
[8 91]
[9 90]
[10 88]
[11 87]
[12 86]
[13 85]
[14 67]
[15 66]
[16 65]
[17 63]
[18 62]
[19 61]
[20 60]
[21 59]
[22 58]
[23 57]
[28 56]
[29 55]
[30 54]
[31 53]
[33 51]
[34 50]
[35 49]
[68 77]
[69 76]
[98 130]
[99 129]
[101 127]
[102 126]
[106 121]
[107 120]
[108 119]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
