%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:33:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCGAGCUUGAGCGGCGCGAGGAGAUGCUAGAGGGCGCAGCGCCGCCAGCACCAUGCGCCCCCCGCCCGCGCUGGCCCUGGCCGGGCUCUGCCUGCUGGCGCUGCCCGCCGCCGCCGCCUCCUACUUCGGCCUGACCGGGCGGGAAGUCCUGA\
) } def
/len { sequence length } bind def

/coor [
[212.51226807 324.39291382]
[212.64823914 316.50799561]
[214.92961121 308.93081665]
[219.19876099 302.23590088]
[210.83343506 289.78515625]
[202.46810913 277.33441162]
[190.62789917 274.67926025]
[183.56469727 264.32266235]
[185.53677368 251.53634644]
[177.42715454 238.91755676]
[171.12721252 234.96705627]
[169.28387451 225.95759583]
[161.43336487 213.17599487]
[153.58283997 200.39439392]
[145.73233032 187.61279297]
[137.88180542 174.83119202]
[130.03128052 162.04959106]
[122.05080414 149.34872437]
[113.94119263 136.72991943]
[107.64123535 132.77943420]
[105.79791260 123.76996613]
[97.94738770 110.98836517]
[89.96691132 98.28749847]
[81.85729980 85.66869354]
[74.53984070 80.09886169]
[73.71401978 72.70874023]
[65.86349487 59.92713928]
[58.01297760 47.14553833]
[50.16245651 34.36393738]
[42.31193924 21.58233452]
[34.46141815 8.80073357]
[20.64584351 1.09096849]
[20.57780266 -13.80348110]
[12.72728348 -26.58508301]
[4.87676382 -39.36668396]
[-2.97375584 -52.14828491]
[-10.82427597 -64.92988586]
[-24.63985062 -72.63965607]
[-24.70789146 -87.53410339]
[-32.55841064 -100.31570435]
[-40.40893173 -113.09730530]
[-47.61125183 -118.81525421]
[-48.28615189 -126.22067261]
[-55.87431335 -139.15975952]
[-63.46247101 -152.09883118]
[-71.18221283 -164.95985413]
[-79.03273010 -177.74145508]
[-86.88325500 -190.52305603]
[-94.73377228 -203.30465698]
[-109.84381866 -207.08940125]
[-117.62328339 -220.16360474]
[-113.92198181 -234.54539490]
[-121.77249908 -247.32699585]
[-129.62301636 -260.10858154]
[-136.82534790 -265.82653809]
[-137.50024414 -273.23196411]
[-145.08840942 -286.17105103]
[-152.67655945 -299.11013794]
[-160.26472473 -312.04919434]
[-175.68310547 -312.57571411]
[-188.35620117 -321.37322998]
[-194.24008179 -335.63449097]
[-191.45721436 -350.80877686]
[-180.89561462 -362.05404663]
[-165.92543030 -365.78195190]
[-151.32360840 -360.80294800]
[-141.74954224 -348.70584106]
[-140.25825500 -333.35070801]
[-147.32563782 -319.63735962]
[-139.73748779 -306.69830322]
[-132.14932251 -293.75921631]
[-124.56116486 -280.82012939]
[-116.84142303 -267.95910645]
[-108.99089813 -255.17752075]
[-101.14038086 -242.39591980]
[-86.63919067 -239.19416809]
[-78.49556732 -226.34364319]
[-81.95217133 -211.15516663]
[-74.10165405 -198.37356567]
[-66.25112915 -185.59196472]
[-58.40061188 -172.81036377]
[-52.18255234 -168.73219299]
[-50.52339172 -159.68699646]
[-42.93523026 -146.74792480]
[-35.34706879 -133.80883789]
[-27.62732887 -120.94782257]
[-19.77680969 -108.16622162]
[-11.92628860 -95.38462067]
[1.32776356 -88.58908081]
[1.95732594 -72.78041077]
[9.80784607 -59.99880600]
[17.65836525 -47.21720505]
[25.50888443 -34.43560410]
[33.35940552 -21.65400124]
[46.61345673 -14.85846138]
[47.24301910 0.95021379]
[55.09354019 13.73181534]
[62.94406128 26.51341629]
[70.79457855 39.29501724]
[78.64509583 52.07662201]
[86.49562073 64.85822296]
[94.47609711 77.55908203]
[102.58570862 90.17788696]
[109.28694153 94.75115967]
[110.72898865 103.13784027]
[118.57951355 115.91944122]
[126.55998993 128.62030029]
[134.66960144 141.23910522]
[141.98706055 146.80894470]
[142.81288147 154.19906616]
[150.66340637 166.98066711]
[158.51393127 179.76226807]
[166.36444092 192.54386902]
[174.21496582 205.32546997]
[182.06549072 218.10707092]
[190.04595947 230.80793762]
[198.15557861 243.42674255]
[214.70033264 251.44712830]
[214.91885376 268.96908569]
[223.28419495 281.41983032]
[231.64952087 293.87057495]
[254.58674622 296.03637695]
[268.45187378 314.10635376]
[264.69418335 336.30416870]
[274.74630737 347.43768311]
[284.79840088 358.57119751]
[294.85052490 369.70471191]
[304.90261841 380.83819580]
[322.53067017 386.06390381]
[325.59320068 403.31753540]
[335.87033081 414.24368286]
[346.14743042 425.16979980]
[356.42456055 436.09594727]
[372.27508545 440.30233765]
[376.29571533 456.20095825]
[364.35043335 467.43670654]
[348.72747803 462.45117188]
[345.49841309 446.37307739]
[335.22128296 435.44692993]
[324.94418335 424.52078247]
[314.66705322 413.59463501]
[302.55276489 412.89852905]
[293.90072632 403.82714844]
[293.76913452 390.89031982]
[283.71701050 379.75680542]
[273.66488647 368.62329102]
[263.61279297 357.48977661]
[253.56068420 346.35626221]
[246.30059814 348.91156006]
[238.59233093 349.39950562]
[231.01507568 347.76864624]
[224.14222717 344.12738037]
[218.49794006 338.73678589]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 121]
[5 120]
[6 119]
[9 117]
[10 116]
[12 115]
[13 114]
[14 113]
[15 112]
[16 111]
[17 110]
[18 108]
[19 107]
[21 106]
[22 105]
[23 103]
[24 102]
[26 101]
[27 100]
[28 99]
[29 98]
[30 97]
[31 96]
[33 94]
[34 93]
[35 92]
[36 91]
[37 90]
[39 88]
[40 87]
[41 86]
[43 85]
[44 84]
[45 83]
[46 81]
[47 80]
[48 79]
[49 78]
[52 75]
[53 74]
[54 73]
[56 72]
[57 71]
[58 70]
[59 69]
[124 148]
[125 147]
[126 146]
[127 145]
[128 144]
[130 141]
[131 140]
[132 139]
[133 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
