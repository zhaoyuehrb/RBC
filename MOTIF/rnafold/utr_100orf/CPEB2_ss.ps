%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:06:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGGGAUUUCGGGUUUGGGGUGCUGCAGACCGCCCCGCUCCGAAGUAGCAGUCCUGGGCCCCUGUUCUGCGGCGAGGCGUAUGGUCCUUACGCCGUGG\
) } def
/len { sequence length } bind def

/coor [
[161.80612183 170.50027466]
[150.16113281 163.34817505]
[143.55889893 151.25871277]
[143.84078979 137.37794495]
[131.25648499 129.21488953]
[118.67220306 121.05182648]
[106.08790588 112.88876343]
[92.12075043 107.41899109]
[77.33971405 104.86534119]
[62.55868530 102.31168365]
[47.77765656 99.75803375]
[32.99662781 97.20437622]
[18.21559525 94.65072632]
[3.43456554 92.09706879]
[-11.34646416 89.54341888]
[-22.42788696 96.36682892]
[-34.77806854 93.81780243]
[-41.78838348 83.82412720]
[-56.48284531 80.81201935]
[-71.17730713 77.79991913]
[-85.87177277 74.78781128]
[-100.56623077 71.77570343]
[-115.26069641 68.76359558]
[-129.95515442 65.75148773]
[-141.31967163 76.31688690]
[-156.72795105 78.15115356]
[-170.25520325 70.54897308]
[-176.69992065 56.43355179]
[-173.58398438 41.23254395]
[-162.10552979 30.79105759]
[-146.67825317 29.12405014]
[-133.23426819 36.87252045]
[-126.94304657 51.05702972]
[-112.24858856 54.06913376]
[-97.55412292 57.08124161]
[-82.85966492 60.09334564]
[-68.16519928 63.10545349]
[-53.47073746 66.11756134]
[-38.77627563 69.12966919]
[-22.55037689 62.64725494]
[-8.79281139 74.76239014]
[5.98821878 77.31604004]
[20.76924896 79.86969757]
[35.55027771 82.42334747]
[50.33131027 84.97699738]
[65.11234283 87.53065491]
[79.89337158 90.08430481]
[94.67440033 92.63796234]
[93.90502167 87.29302979]
[94.93802643 81.58309937]
[99.52888489 67.30290222]
[90.26081848 54.85771942]
[90.11154938 39.34136200]
[99.13848877 26.72018623]
[113.87057495 21.84729195]
[128.64303589 26.59640503]
[137.77555847 39.14139557]
[137.75648499 54.65845871]
[128.59317017 67.18096924]
[113.80908203 71.89376068]
[109.21822357 86.17395782]
[114.25096893 100.30447388]
[126.83526611 108.46753693]
[139.41955566 116.63059998]
[152.00384521 124.79366302]
[167.61517334 118.50777435]
[183.75367737 122.66063690]
[194.18309021 135.44541931]
[194.99336243 151.75944519]
[207.82543945 159.52719116]
[220.65750122 167.29493713]
[233.48957825 175.06268311]
[246.32165527 182.83042908]
[259.15371704 190.59815979]
[271.98580933 198.36590576]
[284.81787109 206.13365173]
[297.88531494 213.49856567]
[311.17550659 220.45352173]
[324.46566772 227.40847778]
[338.30700684 220.39440918]
[353.62225342 222.88888550]
[364.52243042 233.93272400]
[366.81613159 249.27932739]
[359.62142944 263.02764893]
[345.70483398 269.89114380]
[330.41751099 267.23065186]
[319.63781738 256.06924438]
[317.51071167 240.69863892]
[304.22055054 233.74368286]
[290.93035889 226.78874207]
[286.02957153 227.39939880]
[280.71847534 224.81059265]
[277.05014038 218.96572876]
[264.21804810 211.19798279]
[251.38598633 203.43023682]
[238.55390930 195.66249084]
[225.72183228 187.89474487]
[212.88975525 180.12701416]
[200.05769348 172.35926819]
[187.22561646 164.59152222]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 65]
[5 64]
[6 63]
[7 62]
[8 48]
[9 47]
[10 46]
[11 45]
[12 44]
[13 43]
[14 42]
[15 41]
[18 39]
[19 38]
[20 37]
[21 36]
[22 35]
[23 34]
[24 33]
[50 61]
[51 60]
[69 100]
[70 99]
[71 98]
[72 97]
[73 96]
[74 95]
[75 94]
[76 93]
[77 90]
[78 89]
[79 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
