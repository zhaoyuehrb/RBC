%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:29:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAAAGUGACAACCAUAGCUUCUUAGGGGACUCCCCUAAAGCCUUCAUCCUUCUGGGUGUGUCUGACAGGCCGUGGCUGGAACUCCCUCUCUUUGUGG\
) } def
/len { sequence length } bind def

/coor [
[125.98387909 422.58969116]
[121.28215027 408.24407959]
[120.62632751 393.16189575]
[124.06507111 378.46231079]
[131.34320068 365.23614502]
[141.92063904 354.46487427]
[155.01246643 346.94778442]
[151.31828308 332.40979004]
[147.62409973 317.87182617]
[134.73118591 310.50241089]
[130.77766418 295.81143188]
[138.59478760 282.33813477]
[134.90060425 267.80014038]
[124.26716614 257.37042236]
[128.36746216 242.08976746]
[124.67327881 227.55178833]
[120.97909546 213.01379395]
[117.28491211 198.47581482]
[106.65146637 188.04608154]
[110.75175476 172.76544189]
[107.05757141 158.22746277]
[103.36338806 143.68946838]
[99.66920471 129.15148926]
[71.17284393 118.70903778]
[63.67133331 84.29263306]
[50.38116455 77.33767700]
[37.09099197 70.38272858]
[23.80082321 63.42777252]
[10.51065159 56.47282028]
[-2.77951837 49.51786804]
[-16.06968880 42.56291580]
[-32.90680695 40.57601166]
[-35.65853119 23.84686661]
[-20.34491920 16.57159042]
[-9.11473560 29.27274513]
[4.17543459 36.22769928]
[17.46560478 43.18265152]
[30.75577545 50.13760376]
[44.04594421 57.09255600]
[57.33611679 64.04750824]
[70.62628937 71.00246429]
[77.47470856 67.94483948]
[65.33026886 59.14072037]
[66.88254547 44.22125244]
[80.57927704 38.10574722]
[92.72388458 46.90963745]
[91.17156219 61.82958221]
[98.01998138 58.77195358]
[101.71416473 44.23397064]
[105.40834808 29.69598389]
[109.10253143 15.15799904]
[112.79671478 0.62001443]
[107.82900238 -15.00860882]
[119.07834625 -26.94110107]
[134.97238159 -22.90233612]
[139.16069031 -7.04705095]
[127.33470154 4.31419802]
[123.64051819 18.85218239]
[119.94633484 33.39016724]
[116.25215149 47.92815399]
[112.55796814 62.46613693]
[121.03939819 67.85217285]
[127.65068817 75.02186584]
[132.05667114 83.39124298]
[134.09242249 92.32634735]
[133.76597595 101.19036865]
[131.24859619 109.38872528]
[126.85364532 116.40892792]
[121.00640106 121.85255432]
[114.20719147 125.45730591]
[117.90137482 139.99528503]
[121.59555817 154.53327942]
[125.28974152 169.07125854]
[136.18742371 180.54083252]
[131.82289124 194.78163147]
[135.51707458 209.31961060]
[139.21125793 223.85760498]
[142.90544128 238.39558411]
[153.80311584 249.86515808]
[149.43859863 264.10595703]
[153.13278198 278.64395142]
[166.43362427 286.75106812]
[169.97294617 301.54727173]
[162.16207886 314.17761230]
[165.85627747 328.71560669]
[169.55046082 343.25360107]
[184.64271545 343.60894775]
[199.07910156 348.02407837]
[211.78834534 356.17132568]
[221.82731628 367.44613647]
[228.45108032 381.01184082]
[231.16810608 395.86178589]
[229.77676392 410.89398193]
[224.38029480 424.99291992]
[215.37916565 437.11242676]
[203.44131470 446.35311890]
[189.45262146 452.02926636]
[174.45111084 453.71969604]
[159.55001831 451.29891968]
[145.85510254 444.94662476]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 86]
[8 85]
[9 84]
[12 81]
[13 80]
[15 78]
[16 77]
[17 76]
[18 75]
[20 73]
[21 72]
[22 71]
[23 70]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[31 35]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
