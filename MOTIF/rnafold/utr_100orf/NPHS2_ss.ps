%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:24:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGGACCCGCAGCGACUCCACAGGGACUGCGCUCCCGUGCCCCUAGCGCUCCCGCGCUGCUGCUCCAGCCGCCCGGCAGCUCUGAGGAUGGAGAGGAGGGCGCGGAGCUCCUCCAGGGAGUCCCGCGGGCGAGGCGGCAGGACUCCGCACAAGGAGAACAAGAGGGCAAAGGCCGAGAGGAGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[-9.14300346 225.55419922]
[-18.59249496 237.20353699]
[-28.04198456 248.85287476]
[-37.49147797 260.50222778]
[-46.94096756 272.15155029]
[-43.09344864 287.06808472]
[-48.70145035 301.22448730]
[-61.41949463 309.26907349]
[-76.25819397 308.29385376]
[-85.70768738 319.94320679]
[-95.15717316 331.59252930]
[-104.60666656 343.24188232]
[-114.05615997 354.89120483]
[-114.58768463 359.24398804]
[-116.31254578 362.83264160]
[-118.84051514 365.37420654]
[-121.72939301 366.74282837]
[-124.54119110 366.97314453]
[-134.74378967 377.96890259]
[-144.94638062 388.96469116]
[-148.06602478 405.06439209]
[-163.65470886 410.15600586]
[-175.67614746 399.00177002]
[-171.76368713 383.07617188]
[-155.94215393 378.76211548]
[-145.73956299 367.76632690]
[-135.53697205 356.77053833]
[-125.70549774 345.44174194]
[-116.25600433 333.79238892]
[-106.80651855 322.14303589]
[-97.35702515 310.49371338]
[-87.90753174 298.84436035]
[-91.92277527 284.52600098]
[-86.67476654 270.42199707]
[-73.97969818 262.01437378]
[-58.59030533 262.70205688]
[-49.14081573 251.05273438]
[-39.69132614 239.40338135]
[-30.24183464 227.75404358]
[-20.79234314 216.10470581]
[-23.41597939 209.07856750]
[-35.15899658 218.41139221]
[-47.66381454 210.12710571]
[-43.64916229 195.67433167]
[-28.66324997 195.02630615]
[-31.28688622 188.00018311]
[-46.05900192 185.39546204]
[-60.83111954 182.79072571]
[-75.60323334 180.18600464]
[-90.37535095 177.58128357]
[-105.59205627 183.69552612]
[-118.32674408 173.36306763]
[-115.47906494 157.21305847]
[-99.97846222 151.85925293]
[-87.77062988 162.80917358]
[-72.99851227 165.41389465]
[-58.22639465 168.01861572]
[-43.45428085 170.62333679]
[-28.68216324 173.22805786]
[-14.03100967 170.01190186]
[-1.70808244 161.45939636]
[10.61484528 152.90687561]
[22.93777275 144.35437012]
[35.26070023 135.80184937]
[47.58362579 127.24934387]
[59.90655518 118.69683075]
[72.22948456 110.14431763]
[76.28495789 82.34481049]
[101.75347900 70.48670959]
[106.41243744 56.22858810]
[111.07139587 41.97046661]
[115.73036194 27.71234131]
[120.38932037 13.45421791]
[125.04828644 -0.80390483]
[118.15047455 -14.77022266]
[123.07843781 -29.16361809]
[136.43569946 -35.65355301]
[141.09466553 -49.91167450]
[129.56018066 -58.99850082]
[124.98926544 -75.54856110]
[131.80357361 -94.01078796]
[128.83137512 -108.71337128]
[125.85918427 -123.41596222]
[122.88699341 -138.11854553]
[108.71961975 -144.44825745]
[101.00768280 -157.91323853]
[102.71657562 -173.33592224]
[113.18919373 -184.78598022]
[128.39860535 -187.86062622]
[142.49647522 -181.37760925]
[150.06188965 -167.82975769]
[148.18579102 -152.42651367]
[137.58958435 -141.09074402]
[140.56176758 -126.38815308]
[143.53396606 -111.68556976]
[146.50614929 -96.98297882]
[153.78936768 -95.19276428]
[152.69329834 -110.15267181]
[166.58232117 -115.81792450]
[176.26222229 -104.35932922]
[168.35578918 -91.61234283]
[175.63899231 -89.82213593]
[185.08848572 -101.47147369]
[194.53797913 -113.12081146]
[203.98747253 -124.77014923]
[213.43695068 -136.41949463]
[216.12162781 -152.01126099]
[230.14834595 -157.02130127]
[239.59783936 -168.67063904]
[249.04733276 -180.31999207]
[258.49682617 -191.96932983]
[267.94631958 -203.61866760]
[277.39581299 -215.26800537]
[282.67819214 -231.37802124]
[299.62094116 -230.76176453]
[303.71899414 -214.31056213]
[289.04513550 -205.81851196]
[279.59564209 -194.16917419]
[270.14614868 -182.51983643]
[260.69665527 -170.87049866]
[251.24717712 -159.22116089]
[241.79768372 -147.57182312]
[239.78889465 -132.81329346]
[225.08630371 -126.97000122]
[215.63681030 -115.32066345]
[206.18731689 -103.67131805]
[196.73782349 -92.02198029]
[187.28833008 -80.37264252]
[178.58259583 -51.58790970]
[155.35278320 -45.25271225]
[150.69381714 -30.99459076]
[157.64178467 -17.86975479]
[153.12005615 -3.34362078]
[139.30641174 3.85505652]
[134.64744568 18.11318016]
[129.98847961 32.37130356]
[125.32952118 46.62942505]
[120.67056274 60.88755035]
[116.01159668 75.14567566]
[121.57159424 76.41791534]
[127.11285400 78.90139008]
[132.37879944 82.61750793]
[137.10664368 87.53469849]
[141.03810120 93.56726837]
[155.40794373 97.86931610]
[169.77778625 102.17136383]
[184.14762878 106.47341156]
[197.93789673 98.75302887]
[213.12530518 103.12541962]
[220.69946289 116.99653625]
[216.16674805 132.13687134]
[202.21633911 139.56394958]
[187.12475586 134.87141418]
[179.84558105 120.84325409]
[165.47573853 116.54120636]
[151.10589600 112.23915863]
[136.73605347 107.93711090]
[132.35798645 114.02664948]
[144.53704834 122.78279877]
[156.71612549 131.53895569]
[168.89505005 140.29531860]
[160.13848877 152.47409058]
[147.95996094 143.71803284]
[135.78089905 134.96186829]
[123.60182953 126.20571899]
[119.22374725 132.29525757]
[127.87837982 144.54667664]
[136.53302002 156.79809570]
[151.64288330 163.17178345]
[153.40928650 179.47550964]
[140.01509094 188.93742371]
[125.23910522 181.82389832]
[124.28159332 165.45272827]
[115.62696075 153.20130920]
[106.97232819 140.94989014]
[99.74150848 139.14358521]
[93.35366821 136.14366150]
[87.99076080 132.18751526]
[83.77814484 127.53724670]
[80.78199005 122.46724701]
[68.45906830 131.01976013]
[56.13613892 139.57226562]
[43.81321335 148.12478638]
[31.49028397 156.67729187]
[19.16735649 165.22981262]
[6.84442949 173.78231812]
[-5.47849751 182.33482361]
[1.71532953 193.17538452]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[5 36]
[9 32]
[10 31]
[11 30]
[12 29]
[13 28]
[18 27]
[19 26]
[20 25]
[46 59]
[47 58]
[48 57]
[49 56]
[50 55]
[60 187]
[61 186]
[62 185]
[63 184]
[64 183]
[65 182]
[66 181]
[67 180]
[69 139]
[70 138]
[71 137]
[72 136]
[73 135]
[74 134]
[77 131]
[78 130]
[81 96]
[82 95]
[83 94]
[84 93]
[102 128]
[103 127]
[104 126]
[105 125]
[106 124]
[108 122]
[109 121]
[110 120]
[111 119]
[112 118]
[113 117]
[144 157]
[145 156]
[146 155]
[147 154]
[166 175]
[167 174]
[168 173]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
