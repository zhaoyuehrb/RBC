%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:19:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGGGGCGGAGAGGCCUGGCGCACAGGGCGAGGGCGGCUGCGGCGCAGUCUGCAGCAUGGCGUACCCGGGGCAUCCUGGCGCCGGCGGCGGGUACUACCCAGGCGGGUAUGGAGGGGCUCCCGGAGGGCCUGCGUUUCCCGGACAAACUCAGGAUC\
) } def
/len { sequence length } bind def

/coor [
[221.78910828 354.63061523]
[215.20465088 341.15304565]
[208.62020874 327.67547607]
[202.03576660 314.19790649]
[195.45132446 300.72030640]
[177.97291565 298.50817871]
[165.18084717 286.16748047]
[162.29203796 268.47073364]
[170.64015198 252.42494202]
[163.52839661 239.21801758]
[156.41664124 226.01109314]
[150.44464111 221.58929443]
[149.29777527 212.47222900]
[142.44833374 199.12738037]
[135.59889221 185.78251648]
[122.90370178 177.99269104]
[123.48568726 162.18218994]
[116.63624573 148.83732605]
[109.78680420 135.49247742]
[84.16625214 133.23838806]
[66.27269745 114.76368713]
[51.59434891 117.85337067]
[36.91600418 120.94304657]
[22.23765564 124.03273010]
[8.85149479 136.64169312]
[-7.60189676 130.60369873]
[-22.21633530 133.98277283]
[-36.83077621 137.36184692]
[-49.96520615 150.23281860]
[-66.53467560 144.52107239]
[-81.07950592 148.18823242]
[-92.46271515 159.99308777]
[-108.31018829 155.77532959]
[-112.31940460 139.87380981]
[-100.36602783 128.64666748]
[-84.74666595 133.64341736]
[-70.20183563 129.97625732]
[-63.70614243 119.73224640]
[-51.57764053 116.58023071]
[-40.20985413 122.74741364]
[-25.59541512 119.36833191]
[-10.98097515 115.98925018]
[-4.28415442 105.87558746]
[7.90425205 102.96381378]
[19.14797592 109.35437775]
[33.82632446 106.26470184]
[48.50466919 103.17501831]
[63.18301773 100.08534241]
[65.56205750 86.97980499]
[72.44851685 75.57843018]
[82.94106293 67.37347412]
[78.84450531 52.94370651]
[74.74794006 38.51393890]
[70.65138245 24.08417320]
[66.55482483 9.65440464]
[55.34277725 -1.50805950]
[59.31007004 -15.86458588]
[55.21351242 -30.29435349]
[49.83200455 -37.74254608]
[51.18158340 -45.04977798]
[47.37091446 -59.55766678]
[43.56024551 -74.06555176]
[39.74957657 -88.57344055]
[35.93890762 -103.08132935]
[32.18581009 -106.86112213]
[30.46684456 -111.26770782]
[30.67518616 -115.40715790]
[32.35956192 -118.56191254]
[29.41504097 -133.27006531]
[26.47052193 -147.97822571]
[23.52600098 -162.68638611]
[20.58148193 -177.39453125]
[9.35308170 -189.34672546]
[14.34819221 -204.96661377]
[30.42827225 -208.18579102]
[41.05151367 -195.69264221]
[35.28963470 -180.33905029]
[38.23415375 -165.63090515]
[41.17867661 -150.92274475]
[44.12319565 -136.21458435]
[47.06771469 -121.50643921]
[50.44679642 -106.89199829]
[54.25746536 -92.38410950]
[58.06813431 -77.87622070]
[61.87880325 -63.36833572]
[65.68946838 -48.86044693]
[69.64328003 -34.39091492]
[73.73983765 -19.96114540]
[84.65887451 -9.83079433]
[80.98458862 5.55784512]
[85.08114624 19.98761177]
[89.17771149 34.41738129]
[93.27426910 48.84714890]
[97.37082672 63.27691650]
[105.21374512 63.55395508]
[112.81977081 65.48694611]
[119.84331512 68.98806000]
[125.96527100 73.89823151]
[138.48852539 65.64184570]
[151.01179504 57.38545990]
[163.53504944 49.12907410]
[176.05831909 40.87268448]
[182.91435242 25.97547913]
[199.26643372 24.73401070]
[208.29295349 38.42539978]
[200.70819092 52.96511459]
[184.31469727 53.39594650]
[171.79144287 61.65233612]
[159.26817322 69.90872192]
[146.74491882 78.16510773]
[134.22164917 86.42149353]
[136.53488159 95.45027924]
[136.50668335 104.77063751]
[134.13888550 113.78526306]
[129.58323669 121.91642761]
[123.13166046 128.64303589]
[129.98109436 141.98789978]
[136.83053589 155.33274841]
[150.01564026 164.07708740]
[148.94374084 178.93307495]
[155.79318237 192.27793884]
[162.64262390 205.62278748]
[169.62356567 218.89933777]
[176.73532104 232.10626221]
[183.84707642 245.31318665]
[196.40844727 245.34655762]
[207.68910217 250.70590210]
[215.55830383 260.31051636]
[218.55895996 272.28454590]
[216.17712402 284.32305908]
[208.92889404 294.13586426]
[215.51335144 307.61343384]
[222.09779358 321.09103394]
[228.68223572 334.56860352]
[235.26667786 348.04617310]
[250.41586304 350.84057617]
[260.89233398 361.89031982]
[262.83056641 376.81369019]
[255.69505310 389.86062622]
[262.27947998 403.33819580]
[268.86395264 416.81576538]
[281.87371826 425.81890869]
[280.50851440 440.65081787]
[287.09295654 454.12838745]
[302.11914062 459.02624512]
[309.20639038 473.15234375]
[304.14993286 488.12591553]
[289.94970703 495.06341553]
[275.03042603 489.84893799]
[268.24346924 475.57614136]
[273.61538696 460.71282959]
[267.03091431 447.23526001]
[254.49212646 439.19613647]
[255.38636780 423.40020752]
[248.80191040 409.92263794]
[242.21746826 396.44506836]
[227.54013062 394.05477905]
[216.95951843 383.35360718]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 135]
[2 134]
[3 133]
[4 132]
[5 131]
[9 125]
[10 124]
[11 123]
[13 122]
[14 121]
[15 120]
[17 118]
[18 117]
[19 116]
[21 48]
[22 47]
[23 46]
[24 45]
[26 42]
[27 41]
[28 40]
[30 37]
[31 36]
[51 94]
[52 93]
[53 92]
[54 91]
[55 90]
[57 88]
[58 87]
[60 86]
[61 85]
[62 84]
[63 83]
[64 82]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
[98 111]
[99 110]
[100 109]
[101 108]
[102 107]
[139 156]
[140 155]
[141 154]
[143 152]
[144 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
