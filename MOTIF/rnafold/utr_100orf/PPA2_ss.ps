%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:33:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGACCGUCAUUGACGCCAUGAGCGCGCUGCUGCGGCUGCUGCGCACGGGUGCCCCAGCCGCUGCGUGCCUGCGGUUGGGGACCAGUGCAGGGACCGGGUCGCGCCGUGCUAUGGCCC\
) } def
/len { sequence length } bind def

/coor [
[67.18759155 323.36251831]
[69.82514954 338.12881470]
[65.45079041 352.47680664]
[55.02380371 363.26004028]
[40.83079529 368.11376953]
[25.98426247 365.97357178]
[13.74001122 357.30877686]
[6.78317404 344.01959229]
[6.63921356 329.02096558]
[-2.73486638 340.73107910]
[-12.10894680 352.44119263]
[-17.28721428 368.58496094]
[-34.23358154 368.07812500]
[-38.43775940 351.65371704]
[-23.81905365 343.06710815]
[-14.44497395 331.35699463]
[-5.07089424 319.64688110]
[2.54124904 306.72189331]
[8.23649406 292.84515381]
[13.93173981 278.96841431]
[19.62698555 265.09164429]
[25.32222939 251.21490479]
[24.94646835 243.74214172]
[31.34966469 237.05493164]
[37.40324020 223.33070374]
[43.45681381 209.60649109]
[49.51039124 195.88226318]
[55.56396484 182.15805054]
[61.61754227 168.43382263]
[59.67468262 153.66647339]
[72.32326508 144.16259766]
[78.37684631 130.43836975]
[84.43041992 116.71414948]
[77.15984344 100.31924438]
[83.96935272 83.72753906]
[100.66114044 77.16718292]
[105.99421692 63.14725494]
[111.32729340 49.12733078]
[116.47792053 35.03935623]
[121.44523621 20.88570595]
[121.34560394 11.62775040]
[126.72959137 6.43196774]
[132.06266785 -7.58795691]
[137.39573669 -21.60788155]
[142.72882080 -35.62780762]
[148.06188965 -49.64773178]
[153.39497375 -63.66765594]
[148.31571960 -73.45771027]
[149.50801086 -84.19987488]
[156.32586670 -92.29936981]
[166.28256226 -95.18316650]
[172.33615112 -108.90738678]
[178.38972473 -122.63160706]
[179.01077271 -131.86924744]
[184.78273010 -136.63034058]
[191.19055176 -150.19277954]
[197.59837341 -163.75521851]
[204.00619507 -177.31765747]
[210.41403198 -190.88009644]
[216.82185364 -204.44253540]
[223.22967529 -218.00497437]
[229.63749695 -231.56741333]
[236.04531860 -245.12985229]
[242.45315552 -258.69229126]
[234.19462585 -271.72305298]
[234.31492615 -287.14993286]
[242.77565002 -300.05032349]
[256.87701416 -306.30770874]
[272.11932373 -303.92541504]
[283.63882446 -293.66360474]
[287.75967407 -278.79678345]
[283.16693115 -264.06890869]
[271.32611084 -254.17959595]
[256.01559448 -252.28446960]
[249.60775757 -238.72203064]
[243.19993591 -225.15959167]
[236.79211426 -211.59715271]
[230.38429260 -198.03471375]
[223.97647095 -184.47227478]
[217.56863403 -170.90983582]
[211.16081238 -157.34738159]
[204.75299072 -143.78494263]
[198.34516907 -130.22250366]
[192.11393738 -116.57802582]
[186.06036377 -102.85380554]
[180.00679016 -89.12958527]
[183.60847473 -70.20448303]
[167.41490173 -58.33457947]
[162.08181763 -44.31465530]
[156.74874878 -30.29473114]
[151.41566467 -16.27480507]
[146.08259583 -2.25488091]
[140.74951172 11.76504421]
[135.59889221 25.85301971]
[130.63157654 40.00666809]
[131.39469910 47.44986343]
[125.34722137 54.46040726]
[120.01414490 68.48033142]
[114.68106842 82.50025940]
[121.31407166 91.78507233]
[122.62832642 103.11985779]
[118.29586792 113.67610168]
[109.39782715 120.81959534]
[98.15464020 122.76772308]
[92.10106659 136.49194336]
[86.04748535 150.21617126]
[87.55735779 165.96516418]
[75.34175873 174.48739624]
[69.28818512 188.21162415]
[63.23461151 201.93583679]
[57.18103790 215.66006470]
[51.12746048 229.38427734]
[45.07388687 243.10850525]
[39.19897842 256.91015625]
[33.50373459 270.78689575]
[27.80848885 284.66363525]
[22.11324501 298.54040527]
[16.41799927 312.41714478]
[29.60553360 305.26950073]
[44.60121155 304.90951538]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 17]
[10 16]
[11 15]
[18 118]
[19 117]
[20 116]
[21 115]
[22 114]
[24 113]
[25 112]
[26 111]
[27 110]
[28 109]
[29 108]
[31 106]
[32 105]
[33 104]
[36 99]
[37 98]
[38 97]
[39 95]
[40 94]
[42 93]
[43 92]
[44 91]
[45 90]
[46 89]
[47 88]
[51 86]
[52 85]
[53 84]
[55 83]
[56 82]
[57 81]
[58 80]
[59 79]
[60 78]
[61 77]
[62 76]
[63 75]
[64 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
