%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:26:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAUAGGUCACUGGGCGGGCUAUGGGCGGGGUCCACGUCGCCUACCGGGGCGGAGCGGGGGUGGCUGGAGCAGUCUGGACAGUCAUGGCGGCGACUGUGGCGACGGCGGCAGCUGUGGCCC\
) } def
/len { sequence length } bind def

/coor [
[84.28568268 136.60404968]
[84.86045074 121.61557007]
[77.36595917 121.32829285]
[67.52989197 132.65312195]
[57.69382477 143.97796631]
[47.85775757 155.30279541]
[38.02169418 166.62762451]
[34.81397629 182.12023926]
[20.62664795 186.65554810]
[10.79058361 197.98037720]
[13.42194271 213.39497375]
[5.48477983 226.86848450]
[-9.27321815 232.03912354]
[-23.88377762 226.46548462]
[-31.44823647 212.77925110]
[-28.39489174 197.44265747]
[-16.16543770 187.69717407]
[-0.53424853 188.14431763]
[9.30181694 176.81948853]
[11.80599403 162.13688660]
[26.69686127 156.79156494]
[36.53292847 145.46672058]
[46.36899185 134.14189148]
[56.20505905 122.81706238]
[66.04112244 111.49223328]
[67.38026428 96.55212402]
[59.71498108 83.65858459]
[52.04970169 70.76503754]
[38.20260620 70.51131439]
[26.39820099 63.47815323]
[19.69038582 51.61050797]
[19.75207901 38.08711624]
[26.45928955 26.46933174]
[19.12579346 13.38423252]
[11.79229736 0.29913336]
[4.45880032 -12.78596592]
[-2.54906869 -18.82928658]
[-2.89001656 -26.30021667]
[-9.88694572 -39.56833649]
[-16.88387489 -52.83645630]
[-23.88080406 -66.10457611]
[-30.87773323 -79.37269592]
[-37.87466431 -92.64081573]
[-44.87159348 -105.90892792]
[-51.72283554 -112.12924957]
[-51.87287521 -119.60645294]
[-58.52867508 -133.04893494]
[-65.18447113 -146.49142456]
[-80.50360870 -148.96195984]
[-91.42101288 -159.98873901]
[-93.73870850 -175.33175659]
[-86.56549835 -189.09127808]
[-72.65962982 -195.97651672]
[-57.36819458 -193.33993530]
[-46.57105637 -182.19537354]
[-44.41993713 -166.82812500]
[-51.74198914 -153.14721680]
[-45.08618927 -139.70472717]
[-38.43039322 -126.26225281]
[-31.60347366 -112.90586090]
[-24.60654449 -99.63774109]
[-17.60961533 -86.36962128]
[-10.61268520 -73.10150146]
[-3.61575603 -59.83338547]
[3.38117313 -46.56526566]
[10.37810230 -33.29714584]
[17.54389954 -20.11946297]
[24.87739563 -7.03436327]
[32.21089172 6.05073595]
[39.54438782 19.13583565]
[55.84907913 20.50749016]
[68.27549744 31.40474319]
[71.83483124 47.71405411]
[64.94324493 63.09975815]
[72.60852814 75.99330139]
[80.27380371 88.88684845]
[87.60067749 79.58892822]
[99.14454651 74.89157867]
[112.12251282 76.58849335]
[123.07270813 84.84504700]
[137.92495728 82.74480438]
[152.77719116 80.64456177]
[167.62942505 78.54431915]
[182.48165894 76.44407654]
[197.33390808 74.34383392]
[204.48783875 60.57427216]
[218.38404846 53.66956711]
[233.67915344 56.28472137]
[244.49189758 67.41415405]
[246.66453552 82.77837372]
[239.36166382 96.46952057]
[225.39135742 103.22307587]
[210.12551880 100.44215393]
[199.43414307 89.19607544]
[184.58190918 91.29631805]
[169.72967529 93.39656067]
[154.87742615 95.49680328]
[140.02519226 97.59704590]
[125.17295074 99.69728851]
[119.38848877 113.53707886]
[128.32878113 125.58162689]
[137.26908875 137.62617493]
[151.70707703 144.09570312]
[153.07995605 158.92691040]
[162.02026367 170.97145081]
[170.96055603 183.01600647]
[179.90084839 195.06054688]
[188.84115601 207.10508728]
[204.09671021 213.12174988]
[206.24595642 229.37944031]
[193.07794189 239.15365601]
[178.13877869 232.38952637]
[176.79660034 216.04539490]
[167.85630798 204.00083923]
[158.91601562 191.95629883]
[149.97570801 179.91175842]
[141.03541565 167.86720276]
[127.23689270 162.25917053]
[125.22453308 146.56646729]
[116.28424072 134.52192688]
[107.34394073 122.47737885]
[99.84944153 122.19010925]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 25]
[4 24]
[5 23]
[6 22]
[7 21]
[9 19]
[10 18]
[26 76]
[27 75]
[28 74]
[33 70]
[34 69]
[35 68]
[36 67]
[38 66]
[39 65]
[40 64]
[41 63]
[42 62]
[43 61]
[44 60]
[46 59]
[47 58]
[48 57]
[80 99]
[81 98]
[82 97]
[83 96]
[84 95]
[85 94]
[100 121]
[101 120]
[102 119]
[104 117]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
