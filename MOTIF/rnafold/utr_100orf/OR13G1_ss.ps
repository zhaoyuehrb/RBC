%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:59:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAUCACAGCGUUGUAACUGAGUUCAUUAUUCUGGGCCUCACCAAAAAGCCUGAACUCCAGGGAAUUAUCUUCCUCUUUUUUCUCAUUGUCUAUCUUG\
) } def
/len { sequence length } bind def

/coor [
[11.33598042 311.50848389]
[-0.75552303 302.63180542]
[-11.60588455 292.27468872]
[-21.03512955 280.60897827]
[-28.88685417 267.82809448]
[-35.03081894 254.14410400]
[-39.36511993 239.78396606]
[-41.81785965 224.98585510]
[-42.34835434 209.99523926]
[-40.94780731 195.06076050]
[-37.63944626 180.43016052]
[-32.47814941 166.34608459]
[-25.54952812 153.04217529]
[-16.96850395 140.73907471]
[-6.87741327 129.64088440]
[4.55636358 119.93167877]
[17.14317322 111.77249908]
[30.67424011 105.29868317]
[44.92512131 100.61762238]
[59.65943909 97.80694580]
[74.63279724 96.91329193]
[89.59320068 97.95098114]
[81.23541260 85.49516296]
[72.87763214 73.03934479]
[64.51984406 60.58352280]
[56.16205978 48.12770462]
[47.80427933 35.67188263]
[39.44649506 23.21606255]
[23.78956604 26.48688698]
[8.10704613 23.54196930]
[-5.23252439 14.85582352]
[-14.22581959 1.76780856]
[-17.53557205 -13.72432423]
[-14.68935108 -29.26934814]
[-6.14675713 -42.51939774]
[-14.88787270 -54.70926666]
[-23.62898827 -66.89913940]
[-39.26180267 -69.22090912]
[-48.60688400 -81.96630096]
[-46.11996460 -97.57369232]
[-33.27648163 -106.78350067]
[-17.69625282 -104.13170624]
[-8.62274933 -91.19157410]
[-11.43911934 -75.64025116]
[-2.69800401 -63.45038223]
[6.04311132 -51.26051331]
[19.66791153 -54.98027420]
[33.77162552 -53.79450607]
[46.63855362 -47.82677078]
[56.69634628 -37.78361130]
[62.70815277 -24.87094879]
[63.92469025 -10.64931297]
[60.17758560 3.15474868]
[51.90231323 14.85827923]
[60.26009750 27.31409836]
[68.61788177 39.76992035]
[76.97566223 52.22573853]
[85.33345032 64.68155670]
[93.69123077 77.13737488]
[102.04901886 89.59320068]
[110.06413269 76.91416168]
[124.34433746 81.50499725]
[123.46931458 96.47948456]
[137.51985168 91.22759247]
[151.57038879 85.97569275]
[165.62092590 80.72379303]
[179.67146301 75.47190094]
[187.60723877 61.52905273]
[203.47778320 59.18272018]
[215.10858154 70.23280334]
[213.57745361 86.20262909]
[200.05897522 94.84150696]
[184.92335510 89.52243805]
[170.87281799 94.77433014]
[156.82228088 100.02622986]
[142.77174377 105.27812958]
[128.72120667 110.53002167]
[141.48658752 118.40689087]
[153.13374329 127.85908508]
[163.46946716 138.72981262]
[172.32232666 150.83877563]
[179.54548645 163.98510742]
[185.01911926 177.95074463]
[188.65246582 192.50405884]
[190.38522339 207.40364075]
[190.18867493 222.40235901]
[188.06607056 237.25140381]
[184.05262756 251.70451355]
[178.21488953 265.52194214]
[170.64971924 278.47445679]
[161.48258972 290.34729004]
[150.86555481 300.94342041]
[138.97471619 310.08718872]
[126.00731659 317.62683105]
[112.17843628 323.43734741]
[97.71745300 327.42233276]
[82.86425018 329.51568604]
[67.86517334 329.68270874]
[52.96903610 327.92062378]
[38.42290497 324.25863647]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 60]
[23 59]
[24 58]
[25 57]
[26 56]
[27 55]
[28 54]
[35 46]
[36 45]
[37 44]
[63 77]
[64 76]
[65 75]
[66 74]
[67 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
