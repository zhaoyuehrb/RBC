%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUCCUCUGGCUCAGUCACACAGCGACGUAGAGGUGACUGGAGGUAUAUACUUGUCCUCACCUGGAUCAUGCUGAUGUGGCCCCAACCCCACCUCCCUACCCAUCCCCACCUCCCUACCCAUCCCCACCUCCCUACCCAUCCCCACCUCCCUACCCAUCCCCACCUCC\
) } def
/len { sequence length } bind def

/coor [
[310.99105835 179.25068665]
[307.42205811 193.81990051]
[303.85302734 208.38911438]
[312.26165771 221.77082825]
[308.66375732 237.16014099]
[295.19390869 245.42683411]
[279.84350586 241.66644287]
[271.71966553 228.10992432]
[275.64215088 212.80012512]
[289.28381348 204.82009888]
[292.85281372 190.25086975]
[296.42184448 175.68165588]
[292.53271484 169.26882935]
[277.53619385 169.59251404]
[284.75439453 156.44314575]
[280.86523438 150.03030396]
[266.29602051 146.46128845]
[251.72680664 142.89225769]
[237.15759277 139.32322693]
[222.58837891 135.75419617]
[208.01916504 132.18516541]
[193.41758728 128.75091553]
[178.78491211 125.45171356]
[164.15223694 122.15251923]
[149.51956177 118.85332489]
[134.88687134 115.55413055]
[126.28913116 127.71112823]
[113.69647980 135.65713501]
[99.02251434 138.18467712]
[84.49707794 134.90966797]
[72.32747650 126.32976532]
[64.36299896 113.74879456]
[61.81393051 99.07854462]
[47.18125153 95.77935028]
[32.54856873 92.48015594]
[17.91589165 89.18096161]
[3.28321147 85.88176727]
[-11.34946823 82.58257294]
[-17.82654953 84.19570923]
[-23.30871201 82.52017212]
[-26.45713043 78.88163757]
[-40.95790482 75.04399872]
[-55.45868301 71.20635986]
[-70.02790070 67.63732910]
[-84.66057587 64.33813477]
[-99.29325867 61.03893661]
[-114.78163910 66.42799377]
[-127.01435089 55.50586319]
[-123.40741730 39.50830078]
[-107.67134857 34.89222336]
[-95.99406433 46.40625763]
[-81.36138153 49.70545578]
[-66.72869873 53.00465012]
[-62.25502396 51.23330307]
[-56.61914444 52.28135681]
[-51.62104034 56.70558167]
[-37.12026596 60.54322052]
[-22.61948776 64.38086700]
[-8.05027294 67.94989014]
[6.58240700 71.24908447]
[21.21508598 74.54828644]
[35.84776688 77.84748077]
[50.48044586 81.14667511]
[65.11312866 84.44586945]
[73.71086884 72.28887177]
[86.30352020 64.34286499]
[100.97748566 61.81532288]
[115.50292206 65.09033966]
[127.67252350 73.67023468]
[135.63699341 86.25120544]
[138.18606567 100.92145538]
[152.81875610 104.22064972]
[167.45143127 107.51984406]
[182.08410645 110.81903839]
[196.71678162 114.11823273]
[205.81695557 112.95194244]
[211.58819580 117.61595917]
[226.15740967 121.18498230]
[240.72662354 124.75401306]
[255.29583740 128.32304382]
[269.86505127 131.89207458]
[284.43426514 135.46109009]
[278.66390991 121.61540985]
[273.84744263 107.40972137]
[270.00711060 92.90966034]
[267.16064453 78.18221283]
[265.32119751 63.29542542]
[264.49728394 48.31806946]
[264.69271851 33.31934357]
[265.90655518 18.36853790]
[268.13323975 3.53472781]
[271.36242676 -11.11355686]
[275.57925415 -25.50864220]
[280.76419067 -39.58401871]
[286.89334106 -53.27466583]
[293.93832397 -66.51732635]
[301.86663818 -79.25082397]
[310.64163208 -91.41632843]
[320.22274780 -102.95763397]
[330.56576538 -113.82142639]
[341.62289429 -123.95751190]
[353.34301758 -133.31906128]
[365.67202759 -141.86280823]
[378.55291748 -149.54931641]
[391.92623901 -156.34304810]
[405.73013306 -162.21261597]
[419.90090942 -167.13092041]
[434.37301636 -171.07522583]
[449.07965088 -174.02731323]
[463.95288086 -175.97354126]
[478.92391968 -176.90492249]
[493.92367554 -176.81715393]
[508.88281250 -175.71063232]
[523.73223877 -173.59046936]
[538.40332031 -170.46647644]
[552.82824707 -166.35308838]
[566.94049072 -161.26928711]
[580.67480469 -155.23857117]
[593.96765137 -148.28880310]
[606.75775146 -140.45208740]
[618.98590088 -131.76461792]
[630.59564209 -122.26656342]
[641.53338623 -112.00177002]
[651.74859619 -101.01768494]
[661.19396973 -89.36504364]
[669.82604980 -77.09767914]
[677.60479736 -64.27227020]
[684.49432373 -50.94807053]
[690.46276855 -37.18663406]
[695.48266602 -23.05154037]
[699.53076172 -8.60809326]
[702.58831787 6.07697868]
[704.64123535 20.93583107]
[705.67999268 35.89981842]
[705.69989014 50.89980698]
[704.70074463 65.86649323]
[702.68725586 80.73073578]
[699.66864014 95.42385864]
[695.65881348 109.87799072]
[690.67645264 124.02633667]
[684.74444580 137.80354309]
[677.89025879 151.14596558]
[670.14556885 163.99194336]
[661.54608154 176.28215027]
[652.13159180 187.95977783]
[641.94555664 198.97090149]
[631.03503418 209.26464844]
[619.45050049 218.79345703]
[607.24542236 227.51329041]
[594.47613525 235.38388062]
[581.20172119 242.36886597]
[567.48352051 248.43595886]
[553.38476562 253.55715942]
[538.97076416 257.70877075]
[524.30804443 260.87164307]
[509.46426392 263.03115845]
[494.50811768 264.17730713]
[479.50866699 264.30484009]
[464.53518677 263.41314697]
[449.65689087 261.50634766]
[434.94247437 258.59326172]
[420.45996094 254.68733215]
[406.27621460 249.80661011]
[392.45678711 243.97364807]
[379.06552124 237.21539307]
[366.16427612 229.56304932]
[353.81268311 221.05200195]
[342.06777954 211.72155762]
[330.98382568 201.61482239]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[16 82]
[17 81]
[18 80]
[19 79]
[20 78]
[21 77]
[22 75]
[23 74]
[24 73]
[25 72]
[26 71]
[33 64]
[34 63]
[35 62]
[36 61]
[37 60]
[38 59]
[41 58]
[42 57]
[43 56]
[44 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
