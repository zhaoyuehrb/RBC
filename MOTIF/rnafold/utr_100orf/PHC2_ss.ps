%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:00:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCUGCCUGCCCUUCUGCCAUCCGAGCGCCCUGACUGCGCCACACUGCAGGCCAUGGAGAAUGAGCUGCCAGUCCCACAUACAUCUAGCAGUGCCUGUGCCACCAGCAGUACCAGCGGGGCCAGUAGCAGCAGUGGCUGCAACAACAGCAGCA\
) } def
/len { sequence length } bind def

/coor [
[214.39372253 651.06072998]
[209.04185486 637.04797363]
[203.68586731 631.89117432]
[203.72668457 622.69659424]
[198.65992737 608.57824707]
[193.59317017 594.45989990]
[188.52639771 580.34155273]
[183.27601624 575.07720947]
[183.50318909 565.88537598]
[178.72360229 551.66723633]
[173.94401550 537.44909668]
[162.80491638 534.68249512]
[154.31520081 526.78100586]
[150.68260193 515.64025879]
[152.92857361 504.01702881]
[160.60450745 494.84716797]
[156.40504456 480.44702148]
[152.20558167 466.04687500]
[145.44758606 479.43826294]
[132.18124390 486.43856812]
[117.31242371 484.45904541]
[106.33961487 474.23175049]
[103.32054138 459.53872681]
[109.37164307 445.81341553]
[122.25524139 438.13143921]
[137.20700073 439.33355713]
[148.69705200 448.97412109]
[146.87738037 434.08489990]
[137.65327454 422.39022827]
[143.65933228 407.75335693]
[141.83967590 392.86413574]
[139.86921692 377.99414062]
[137.74818420 363.14486694]
[135.62713623 348.29556274]
[133.20558167 333.49234009]
[130.48449707 318.74121094]
[127.76342773 303.99008179]
[125.04235077 289.23895264]
[122.32127380 274.48782349]
[108.26725006 272.55587769]
[95.48130035 266.36093140]
[85.22406769 256.49896240]
[78.51144409 243.92829895]
[76.01394653 229.87637329]
[77.98977661 215.71997070]
[84.25820160 202.85026550]
[94.21596527 192.53614807]
[106.89535522 185.79910278]
[104.47380066 170.99584961]
[102.05223846 156.19261169]
[99.63068390 141.38935852]
[97.20912933 126.58611298]
[94.78756714 111.78287506]
[88.18165588 98.31580353]
[77.95786285 87.33973694]
[67.73406219 76.36367798]
[51.81661224 74.36007690]
[43.58205032 60.59158325]
[49.34722519 45.62019730]
[64.68958282 40.93069077]
[77.83979034 50.12045288]
[78.71012878 66.13987732]
[88.93392181 77.11594391]
[99.15772247 88.09200287]
[113.32732391 83.16835022]
[127.49567413 78.24514771]
[128.71043396 63.29441833]
[129.92520142 48.34368896]
[131.13996887 33.39295959]
[132.35475159 18.44222832]
[125.76045990 4.06078291]
[134.50305176 -7.99808216]
[135.71783447 -22.94881248]
[122.52175140 -30.61864662]
[113.96742249 -43.25930786]
[111.75331879 -58.36097717]
[116.31903839 -72.92521667]
[126.75805664 -84.06027222]
[140.99771118 -89.55528259]
[156.21069336 -88.31920624]
[169.37646484 -80.59746552]
[177.88093567 -67.92321777]
[180.03556824 -52.81294632]
[175.41252136 -38.26680374]
[164.92973328 -27.17293739]
[150.66856384 -21.73404312]
[149.45379639 -6.78331375]
[156.13496399 6.52875566]
[147.30548096 19.65699768]
[146.09071350 34.60772705]
[144.87593079 49.55845642]
[143.66116333 64.50918579]
[142.44639587 79.45991516]
[109.59081268 109.36131287]
[112.01237488 124.16455841]
[114.43392944 138.96780396]
[116.85548401 153.77105713]
[119.27703857 168.57429504]
[121.69860077 183.37753296]
[137.34292603 186.24528503]
[151.04176331 194.27392578]
[161.15434265 206.48063660]
[166.47666931 221.38339233]
[166.38490295 237.18099976]
[160.90841675 251.97068787]
[150.72401428 263.97741699]
[137.07240295 271.76675415]
[139.79347229 286.51788330]
[142.51455688 301.26898193]
[145.23562622 316.02011108]
[147.95671082 330.77124023]
[152.00628662 336.11730957]
[152.61143494 341.84262085]
[150.47640991 346.17453003]
[152.59745789 361.02380371]
[154.71850586 375.87307739]
[159.05287170 383.98199463]
[156.72889709 391.04449463]
[158.54855347 405.93371582]
[167.90281677 418.69335938]
[161.76660156 432.26522827]
[163.58625793 447.15444946]
[166.60574341 461.84741211]
[170.80520630 476.24755859]
[175.00466919 490.64773560]
[191.92707825 499.06234741]
[197.29251099 516.85211182]
[188.16215515 532.66955566]
[192.94174194 546.88769531]
[197.72132874 561.10583496]
[202.64476013 575.27478027]
[207.71151733 589.39312744]
[212.77827454 603.51147461]
[217.84504700 617.62982178]
[223.05462646 631.69610596]
[228.40647888 645.70892334]
[234.04124451 659.61029053]
[239.95657349 673.39465332]
[245.87191772 687.17907715]
[251.78724670 700.96343994]
[257.70257568 714.74780273]
[272.72601318 719.08728027]
[281.40228271 732.09710693]
[279.63473511 747.63446045]
[268.25796509 758.36309814]
[252.64373779 759.21722412]
[240.16459656 749.79357910]
[236.71281433 734.54174805]
[243.91822815 720.66314697]
[238.00288391 706.87878418]
[232.08753967 693.09436035]
[226.17221069 679.30999756]
[220.25686646 665.52563477]
[216.17961121 662.93731689]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 136]
[2 135]
[4 134]
[5 133]
[6 132]
[7 131]
[9 130]
[10 129]
[11 128]
[16 125]
[17 124]
[18 123]
[27 122]
[28 121]
[30 119]
[31 118]
[32 116]
[33 115]
[34 114]
[35 111]
[36 110]
[37 109]
[38 108]
[39 107]
[48 99]
[49 98]
[50 97]
[51 96]
[52 95]
[53 94]
[54 64]
[55 63]
[56 62]
[66 93]
[67 92]
[68 91]
[69 90]
[70 89]
[72 87]
[73 86]
[137 153]
[138 152]
[139 151]
[140 150]
[141 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
