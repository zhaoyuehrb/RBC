%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:47:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUCCCGUGGGCGGGGUUACCAGUCGGUGCGGUUGGGAUGGUGCCACUGCGCAGCCGCGAGAGGGCGGUACCACGGCGGCAGCGACAUGGGGGGGCGCGGAGCAGACGCCGGAAGUAGUGGUGGUACGGGUCCGACUGAGGGGUACUCGCCACCGGCUGCGUCCACCCGAGCGGCUGCGAGAGCCA\
) } def
/len { sequence length } bind def

/coor [
[124.13496399 128.11439514]
[117.35346222 132.73794556]
[109.72047424 135.75511169]
[101.61052704 137.01786804]
[93.42154694 136.46423340]
[87.82557678 150.38130188]
[82.22959900 164.29838562]
[76.63362885 178.21546936]
[71.03765106 192.13253784]
[73.88140106 208.28324890]
[61.14419174 218.61259460]
[45.92897797 212.49464417]
[43.88786316 196.22302246]
[57.12057495 186.53656006]
[62.71654892 172.61949158]
[68.31252289 158.70240784]
[73.90849304 144.78532410]
[79.50447083 130.86825562]
[71.86239624 124.10791016]
[66.35390472 115.51953888]
[63.39668274 105.75437927]
[63.21496201 95.55288696]
[48.99605179 90.77558136]
[34.77714157 85.99828339]
[20.51901817 81.33932495]
[6.22266769 76.79901886]
[-8.07368374 72.25872040]
[-22.37003517 67.71842194]
[-37.86482239 70.91563416]
[-47.65307999 59.68891144]
[-61.94943237 55.14861298]
[-76.24578094 50.60831070]
[-91.74057007 53.80552292]
[-101.52882385 42.57880402]
[-115.82518005 38.03850174]
[-130.12153625 33.49819946]
[-144.41787720 28.95789909]
[-158.75148010 24.53657150]
[-173.12132263 20.23452377]
[-182.25942993 20.77036858]
[-187.69316101 15.73970509]
[-201.98951721 11.19940376]
[-217.48429871 14.39661789]
[-227.27255249 3.16989732]
[-241.56890869 -1.37040401]
[-255.86526489 -5.91070557]
[-270.16162109 -10.45100689]
[-279.30737305 -10.06712437]
[-284.65673828 -15.18740940]
[-298.87564087 -19.96470833]
[-316.82482910 -15.89215469]
[-327.92614746 -29.47322655]
[-342.22250366 -34.01352692]
[-356.51882935 -38.55382919]
[-372.41186523 -34.51108932]
[-383.66418457 -46.44076920]
[-378.70037842 -62.07063293]
[-362.62680054 -65.32202148]
[-351.97854614 -52.85018158]
[-337.68218994 -48.30987930]
[-323.38583374 -43.76957703]
[-312.49176025 -49.05472183]
[-300.53579712 -45.37474442]
[-294.09832764 -34.18362045]
[-279.87942505 -29.40631866]
[-265.62130737 -24.74735832]
[-251.32495117 -20.20705605]
[-237.02861023 -15.66675568]
[-222.73225403 -11.12645435]
[-208.26004028 -14.64842129]
[-197.44920349 -3.09694791]
[-183.15286255 1.44335330]
[-168.81925964 5.86468077]
[-154.44941711 10.16672897]
[-147.12599182 9.07112885]
[-139.87757874 14.66154861]
[-125.58123016 19.20184898]
[-111.28487396 23.74215126]
[-96.98852539 28.28245163]
[-82.51631165 24.76048470]
[-71.70548248 36.31195831]
[-57.40913010 40.85226059]
[-43.11277771 45.39256287]
[-28.64056206 41.87059402]
[-17.82973289 53.42206573]
[-3.53338242 57.96236801]
[10.76296902 62.50267029]
[25.05932045 67.04296875]
[32.39995193 66.06924438]
[39.55444336 71.77937317]
[53.77335358 76.55667114]
[67.99226379 81.33397675]
[84.13510895 66.51535797]
[105.82675934 63.40813446]
[125.48048401 73.09905243]
[136.22230530 92.19868469]
[151.22178650 92.07402039]
[166.22126770 91.94935608]
[172.47949219 79.42795563]
[183.47219849 70.86862183]
[197.01628113 67.89888000]
[210.45289612 71.04328156]
[221.16944885 79.63181305]
[227.10751343 91.94166565]
[242.10699463 92.06632996]
[257.10647583 92.19099426]
[272.10595703 92.31565857]
[285.96997070 84.69332123]
[298.63247681 92.53612518]
[313.63195801 92.66078949]
[328.63143921 92.78546143]
[343.63143921 92.78546143]
[358.63092041 92.66078949]
[373.63040161 92.53612518]
[387.33718872 76.61325073]
[408.04360962 75.95195770]
[422.32867432 90.54927063]
[437.28674316 89.42831421]
[452.24481201 88.30736542]
[467.20285034 87.18641663]
[482.16091919 86.06546021]
[497.10913086 84.82023621]
[512.04650879 83.45081329]
[526.98388672 82.08139038]
[541.92120361 80.71196747]
[556.85858154 79.34255219]
[562.49578857 75.82984924]
[568.20166016 75.72198486]
[572.31390381 78.18433380]
[587.28851318 77.31216431]
[602.26312256 76.43998718]
[617.23773193 75.56781769]
[632.21234131 74.69564819]
[647.17919922 73.69905090]
[662.13726807 72.57809448]
[670.17950439 59.30773544]
[684.49890137 53.32993698]
[699.58941650 56.94328308]
[709.64837646 68.75836945]
[710.80798340 84.23205566]
[702.62231445 97.41439056]
[688.23889160 103.23650360]
[673.18847656 99.45966339]
[663.25823975 87.53615570]
[648.30017090 88.65710449]
[641.85278320 92.29906464]
[633.08453369 89.67026520]
[618.10992432 90.54244232]
[603.13531494 91.41461182]
[588.16070557 92.28678131]
[573.18603516 93.15895844]
[558.22802734 94.27990723]
[543.29064941 95.64933014]
[528.35327148 97.01875305]
[513.41589355 98.38816833]
[498.47857666 99.75759125]
[492.09255981 103.50621033]
[483.28186035 101.02352142]
[468.32382202 102.14447021]
[453.36575317 103.26541901]
[438.40768433 104.38637543]
[423.44964600 105.50732422]
[419.80813599 114.16979218]
[413.21374512 120.94519043]
[404.54739380 124.86769867]
[394.98919678 125.35668945]
[385.85781860 122.30230713]
[378.42852783 116.08645630]
[373.75506592 107.53560638]
[358.75558472 107.66027832]
[343.75610352 107.78494263]
[337.08096313 110.99048615]
[328.50677490 107.78494263]
[313.50729370 107.66027832]
[298.50781250 107.53560638]
[285.71667480 115.16687012]
[271.98129272 107.31513977]
[256.98181152 107.19047546]
[241.98233032 107.06581116]
[226.98284912 106.94114685]
[219.13722229 121.05770874]
[205.16543579 129.34384155]
[188.82789612 129.45944214]
[174.57751465 121.27840424]
[166.34593201 106.94883728]
[151.34645081 107.07350159]
[136.34696960 107.19816589]
[133.87055969 115.02333832]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[22 92]
[23 91]
[24 90]
[25 88]
[26 87]
[27 86]
[28 85]
[30 83]
[31 82]
[32 81]
[34 79]
[35 78]
[36 77]
[37 76]
[38 74]
[39 73]
[41 72]
[42 71]
[44 69]
[45 68]
[46 67]
[47 66]
[49 65]
[50 64]
[52 61]
[53 60]
[54 59]
[96 187]
[97 186]
[98 185]
[104 180]
[105 179]
[106 178]
[107 177]
[109 175]
[110 174]
[111 173]
[112 171]
[113 170]
[114 169]
[117 162]
[118 161]
[119 160]
[120 159]
[121 158]
[122 156]
[123 155]
[124 154]
[125 153]
[126 152]
[129 151]
[130 150]
[131 149]
[132 148]
[133 147]
[134 145]
[135 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
