%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:43:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUGCGGAUCCUGUGCCUGGCACUCUGCAGCCUGCUGACUGGCACGCGAGCUGACCCUGGGGCACUGCUGCGGUUGGGCAUGGACAUCAUGAACCAGG\
) } def
/len { sequence length } bind def

/coor [
[228.59004211 291.15081787]
[227.13644409 287.58975220]
[226.76342773 283.40707397]
[217.28138733 271.78421021]
[207.79933167 260.16134644]
[198.31729126 248.53849792]
[188.83523560 236.91563416]
[179.35319519 225.29278564]
[169.87115479 213.66992188]
[159.45362854 215.45088196]
[149.18263245 212.63354492]
[141.00715637 205.68081665]
[136.50883484 195.84692383]
[136.59616089 184.95164490]
[141.32186890 175.04354858]
[132.96409607 162.58773804]
[124.60630798 150.13191223]
[116.24851990 137.67610168]
[107.89073944 125.22027588]
[99.53295898 112.76445770]
[90.60332489 100.71200562]
[81.12127686 89.08914948]
[71.45961761 77.61515808]
[61.62068939 66.29281616]
[51.60686874 55.12485123]
[41.42057419 44.11397552]
[31.23428345 33.10309601]
[22.95637512 28.82888412]
[20.90899467 21.58777046]
[11.07006550 10.26542664]
[-6.41843653 4.77003622]
[-9.27549553 -12.46767521]
[-19.46178818 -23.47855377]
[-29.64808083 -34.48942947]
[-45.04042816 -32.52594757]
[-58.63099289 -40.01435089]
[-65.19392395 -54.07520676]
[-62.20563507 -69.30181885]
[-50.81519699 -79.83924866]
[-35.40245438 -81.63564301]
[-21.89392471 -74.00024414]
[-15.48391628 -59.86902618]
[-18.63720322 -44.67572403]
[-8.45091057 -33.66484451]
[1.73538244 -22.65396881]
[13.91497326 -21.83206177]
[22.49113464 -12.58684635]
[22.39241028 0.42649794]
[32.23133850 11.74884224]
[42.24515915 22.91680336]
[52.43145370 33.92768097]
[62.61774826 44.93856049]
[69.59353638 47.76058197]
[72.94303131 56.45388412]
[82.78196716 67.77622986]
[89.66661835 70.81383514]
[92.74413300 79.60710144]
[102.22618103 91.22995758]
[106.17513275 92.16062164]
[109.65240479 94.91353607]
[111.81571960 99.21459198]
[111.98877716 104.40666962]
[120.34655762 116.86249542]
[128.70434570 129.31831360]
[137.06213379 141.77413940]
[145.41990662 154.22994995]
[153.77769470 166.68577576]
[173.52610779 169.30258179]
[185.04255676 185.19102478]
[181.49400330 204.18788147]
[190.97605896 215.81074524]
[200.45809937 227.43359375]
[209.94013977 239.05645752]
[219.42219543 250.67930603]
[228.90423584 262.30215454]
[238.38629150 273.92501831]
[248.74258423 284.77615356]
[259.91055298 294.78997803]
[271.07852173 304.80380249]
[289.11380005 308.08639526]
[294.08795166 324.83630371]
[305.56192017 334.49795532]
[317.03591919 344.15960693]
[328.50991821 353.82128906]
[344.55282593 353.88879395]
[354.38919067 366.56259155]
[350.47341919 382.12042236]
[335.80932617 388.62765503]
[321.64596558 381.09249878]
[318.84826660 365.29525757]
[307.37426758 355.63360596]
[295.90026855 345.97195435]
[284.42630005 336.31030273]
[272.23886108 337.00622559]
[262.58166504 328.89675903]
[261.06469727 315.97177124]
[249.89672852 305.95794678]
[238.72875977 295.94412231]
[236.23654175 296.19927979]
[233.49197388 295.53094482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 76]
[4 75]
[5 74]
[6 73]
[7 72]
[8 71]
[9 70]
[15 67]
[16 66]
[17 65]
[18 64]
[19 63]
[20 62]
[21 58]
[22 57]
[23 55]
[24 54]
[25 52]
[26 51]
[27 50]
[29 49]
[30 48]
[32 45]
[33 44]
[34 43]
[77 98]
[78 97]
[79 96]
[81 93]
[82 92]
[83 91]
[84 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
