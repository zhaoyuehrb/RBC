%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:39:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUCGCGGCCAAUGGGCGACGCGGCCGCAGAUCCGCCCGGCCCCGCCCUGCCCUGUGAGUUCCUCCGGCCGGGCUGCGGGGCUCCGCUCAGUCCGGGAGCGCAGCUGGGCC\
) } def
/len { sequence length } bind def

/coor [
[9.36380482 190.18270874]
[-2.29517865 191.08665466]
[-12.80527782 186.24137878]
[-25.43431854 194.33503723]
[-38.06335831 202.42869568]
[-50.57867432 210.69712830]
[-62.97784805 219.13871765]
[-75.37702179 227.58030701]
[-87.77619171 236.02191162]
[-100.17536163 244.46350098]
[-112.57453918 252.90510559]
[-115.78436279 265.49252319]
[-126.40309906 272.25177002]
[-138.37434387 269.98062134]
[-151.00338745 278.07427979]
[-155.82420349 293.37588501]
[-170.84445190 299.01254272]
[-184.54187012 290.66027832]
[-186.40898132 274.72622681]
[-175.01348877 263.43365479]
[-159.09704590 265.44522095]
[-146.46800232 257.35156250]
[-139.34384155 241.37988281]
[-121.01612854 240.50592041]
[-108.61695862 232.06433105]
[-96.21778870 223.62274170]
[-83.81861877 215.18113708]
[-71.41944122 206.73954773]
[-59.02027130 198.29794312]
[-55.20868301 191.84162903]
[-46.15702057 189.79965210]
[-33.52797699 181.70599365]
[-20.89893723 173.61233521]
[-18.17857742 155.61422729]
[-2.98904061 145.02201843]
[15.45813179 148.81718445]
[27.61785126 140.03417969]
[39.77757263 131.25115967]
[51.93729401 122.46816254]
[64.09701538 113.68515015]
[76.25672913 104.90214539]
[88.41645050 96.11914062]
[97.19946289 83.95941925]
[101.71556854 69.65541077]
[106.23168182 55.35139465]
[110.74779510 41.04738617]
[115.26390076 26.74337387]
[109.61775970 17.23955727]
[110.20366669 6.42230225]
[116.57762146 -2.06192136]
[126.38614655 -5.49021959]
[131.69021606 -19.52114296]
[136.99429321 -33.55206680]
[142.29837036 -47.58298874]
[139.94075012 -63.22754669]
[151.67860413 -72.39662170]
[156.98268127 -86.42755127]
[161.89466858 -100.60049438]
[166.41078186 -114.90450287]
[170.92687988 -129.20851135]
[169.92984009 -146.13311768]
[185.91702271 -151.77639771]
[195.76544189 -137.97621155]
[185.23089600 -124.69240570]
[180.71478271 -110.38839722]
[176.19866943 -96.08438110]
[177.64050293 -91.39586639]
[176.04975891 -85.75373840]
[171.01359558 -81.12347412]
[165.70951843 -67.09255219]
[168.44653320 -52.45158005]
[156.32928467 -42.27891541]
[151.02522278 -28.24799347]
[145.72114563 -14.21706963]
[140.41706848 -0.18614636]
[145.05259705 18.50007629]
[129.56791687 31.25948334]
[125.05180359 45.56349564]
[120.53569031 59.86750793]
[116.01958466 74.17151642]
[111.50347137 88.47553253]
[117.95800018 102.01580811]
[131.91383362 107.51440430]
[145.86967468 113.01300049]
[159.82551575 118.51159668]
[173.78135681 124.01019287]
[185.75198364 114.38731384]
[200.93272400 112.05483246]
[215.24005127 117.64016724]
[224.82536316 129.64089966]
[227.11024475 144.82888794]
[221.48008728 159.11863708]
[209.44937134 168.66627502]
[194.25430298 170.90354919]
[179.98226929 165.22862244]
[170.47238159 153.16804504]
[168.28276062 137.96603394]
[154.32691956 132.46743774]
[140.37107849 126.96883392]
[126.41524506 121.47023773]
[112.45940399 115.97164154]
[107.01141357 115.90011597]
[102.42634583 114.29368591]
[99.08279419 111.58267212]
[97.19946289 108.27886200]
[85.03974152 117.06186676]
[72.88002014 125.84487152]
[60.72029877 134.62788391]
[48.56057739 143.41088867]
[36.40085983 152.19389343]
[24.24113846 160.97689819]
[24.65832901 173.02598572]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 33]
[4 32]
[5 31]
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[11 24]
[14 22]
[15 21]
[36 111]
[37 110]
[38 109]
[39 108]
[40 107]
[41 106]
[42 105]
[43 81]
[44 80]
[45 79]
[46 78]
[47 77]
[51 75]
[52 74]
[53 73]
[54 72]
[56 70]
[57 69]
[58 66]
[59 65]
[60 64]
[82 101]
[83 100]
[84 99]
[85 98]
[86 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
