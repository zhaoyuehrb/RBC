%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:09:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCAGCGGGGCAGGCGCGUGGCCGGGCCGCGGCGCGAUGAGUGGGGCCCGGGCGGCGCCCGGGGCCGCGGGCAACGGCGCGGUCCGGGGGCUGCGGGUGGACGGGCUGCCCCCGCUGCCAAAGAGCUUGAGCGGGC\
) } def
/len { sequence length } bind def

/coor [
[193.14959717 399.42434692]
[189.78817749 384.80584717]
[186.42675781 370.18734741]
[182.24514771 355.78198242]
[177.25669861 341.63577271]
[172.26823425 327.48956299]
[167.27978516 313.34335327]
[162.29132080 299.19714355]
[157.30287170 285.05093384]
[152.31440735 270.90472412]
[147.32595825 256.75851440]
[142.33749390 242.61228943]
[128.83328247 236.43395996]
[123.57276154 222.15875244]
[130.14472961 208.03617859]
[125.15628052 193.88996887]
[120.16782379 179.74375916]
[108.63829041 170.31405640]
[111.34575653 154.72622681]
[106.35729980 140.58001709]
[101.36884308 126.43380737]
[83.48322296 122.92619324]
[71.04876709 108.02629852]
[70.75231934 87.44067383]
[55.96730804 84.91017914]
[41.18229675 82.37967682]
[26.39728355 79.84918213]
[11.61227131 77.31868744]
[-3.17274070 74.78819275]
[-17.95775223 72.25769043]
[-32.86541367 77.55601501]
[-44.10499191 67.78251648]
[-58.89000320 65.25202179]
[-68.64143372 77.11815643]
[-83.02512360 82.50379181]
[-98.17193604 79.96021271]
[-110.00744629 70.17163849]
[-115.34796143 55.77113724]
[-112.75691986 40.63237762]
[-102.93129730 28.82760620]
[-88.51412964 23.53224945]
[-73.38356018 26.17073059]
[-61.60964584 36.03331375]
[-56.35950851 50.46701050]
[-41.57449722 52.99750519]
[-27.72435570 47.51818848]
[-15.42725658 57.47267914]
[-0.64224404 60.00317764]
[14.14276791 62.53367233]
[28.92778015 65.06417084]
[43.71279144 67.59466553]
[58.49780655 70.12516022]
[73.28281403 72.65566254]
[85.85979462 64.48133850]
[89.55072784 49.94252396]
[93.24166107 35.40371323]
[96.93258667 20.86490250]
[100.62351990 6.32609177]
[99.70211792 -2.84853101]
[104.56563568 -8.49770832]
[108.58419037 -22.94939423]
[112.60274506 -37.40107727]
[108.84539795 -52.76964569]
[119.70954895 -62.95883179]
[123.72811127 -77.41051483]
[127.74666595 -91.86219788]
[131.76522827 -106.31388855]
[135.78378296 -120.76557159]
[139.80233765 -135.21725464]
[143.82089233 -149.66894531]
[147.83944702 -164.12062073]
[138.08314514 -176.18687439]
[137.31611633 -191.68496704]
[145.83329773 -204.65560913]
[160.35964966 -210.11129761]
[175.30950928 -205.95420837]
[184.93434143 -193.78283691]
[185.53320312 -178.27732849]
[176.87582397 -165.39985657]
[162.29113770 -160.10206604]
[158.27258301 -145.65039062]
[154.25401306 -131.19869995]
[150.23545837 -116.74701691]
[146.21690369 -102.29532623]
[142.19834900 -87.84364319]
[138.17979431 -73.39196014]
[134.16123962 -58.94027328]
[138.20602417 -44.60538483]
[127.05443573 -33.38252258]
[123.03587341 -18.93083763]
[119.01731873 -4.47915173]
[115.16233063 10.01702213]
[111.47139740 24.55583382]
[107.78047180 39.09464645]
[104.08953857 53.63345718]
[100.39860535 68.17226410]
[111.23513031 71.03852081]
[120.15089417 77.37387848]
[126.11772156 86.21440125]
[128.53102112 96.32443237]
[127.26729584 106.36767578]
[122.67678070 115.08354187]
[115.51505280 121.44535065]
[120.50350952 135.59156799]
[125.49196625 149.73777771]
[137.37829590 160.17930603]
[134.31402588 174.75529480]
[139.30249023 188.90150452]
[144.29093933 203.04771423]
[158.26786804 209.92402649]
[163.12535095 224.34135437]
[156.48371887 237.62384033]
[161.47216797 251.77005005]
[166.46063232 265.91625977]
[171.44908142 280.06246948]
[176.43754578 294.20867920]
[181.42599487 308.35488892]
[186.41445923 322.50109863]
[191.40290833 336.64730835]
[196.39135742 350.79351807]
[205.51316833 338.88586426]
[220.50401306 338.36190796]
[230.43490601 349.60366821]
[228.06578064 364.41540527]
[215.12384033 371.99868774]
[201.04527283 366.82592773]
[204.40669250 381.44442749]
[207.76811218 396.06292725]
[222.58584595 399.89614868]
[233.91711426 410.18499756]
[239.15809631 424.56521606]
[237.10444641 439.73233032]
[228.22807312 452.20101929]
[214.56869507 459.10610962]
[199.26515198 458.86083984]
[185.83409119 451.52157593]
[177.36184692 438.77481079]
[175.79530334 423.54968262]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 128]
[2 127]
[3 126]
[4 120]
[5 119]
[6 118]
[7 117]
[8 116]
[9 115]
[10 114]
[11 113]
[12 112]
[15 109]
[16 108]
[17 107]
[19 105]
[20 104]
[21 103]
[24 53]
[25 52]
[26 51]
[27 50]
[28 49]
[29 48]
[30 47]
[32 45]
[33 44]
[54 96]
[55 95]
[56 94]
[57 93]
[58 92]
[60 91]
[61 90]
[62 89]
[64 87]
[65 86]
[66 85]
[67 84]
[68 83]
[69 82]
[70 81]
[71 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
