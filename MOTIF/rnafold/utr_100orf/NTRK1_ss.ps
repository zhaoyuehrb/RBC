%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCAGCUGGGAGCGCACAGACGGCUGCCCCGCCUGAGCGAGGCGGGCGCCGCCGCGAUGCUGCGAGGCGGACGGCGCGGGCAGCUUGGCUGGCACAGCUGGGCUGCGGGGCCGGGCAGCCUGCUGGCUUGGCUGAUACUGGCAUCUGCGGGCGCCG\
) } def
/len { sequence length } bind def

/coor [
[190.71379089 437.04943848]
[192.84620667 420.77420044]
[202.93942261 407.71121216]
[197.09535217 393.89648438]
[191.25126648 380.08175659]
[185.40719604 366.26699829]
[179.56311035 352.45227051]
[175.50183105 349.84371948]
[173.06690979 344.63067627]
[173.77386475 337.96597290]
[168.48718262 323.92849731]
[163.20051575 309.89102173]
[157.91383362 295.85351562]
[154.81208801 294.06817627]
[152.44253540 290.66329956]
[151.56982422 286.00988770]
[152.75892639 280.81201172]
[148.32394409 266.48263550]
[143.88896179 252.15325928]
[130.63502502 245.45483398]
[125.93319702 230.98599243]
[133.04899597 217.12947083]
[128.61401367 202.80009460]
[124.17902374 188.47071838]
[119.74404144 174.14135742]
[115.30905914 159.81198120]
[110.87407684 145.48260498]
[106.43908691 131.15322876]
[102.00410461 116.82386017]
[89.54249573 108.47471619]
[74.60326385 109.82357788]
[59.66403580 111.17243195]
[44.72480774 112.52129364]
[29.78557777 113.87015533]
[18.44482231 125.21770477]
[2.51884103 123.28311157]
[-5.77531862 109.55043030]
[-0.07508673 94.55420685]
[15.24680710 89.79824829]
[28.43671608 98.93092346]
[43.37594604 97.58206940]
[58.31517410 96.23320770]
[73.25440216 94.88434601]
[88.19363403 93.53548431]
[98.31211090 82.46225739]
[98.31211090 67.46225739]
[98.31211090 52.46225357]
[90.57480621 38.66208267]
[98.31211090 25.93481064]
[98.31211090 10.93480968]
[86.32084656 7.69437695]
[77.05042267 -4.65579224]
[69.59378815 -17.67111397]
[62.13714981 -30.68643570]
[54.68051529 -43.70175552]
[47.22388077 -56.71707916]
[33.65012741 -64.84503937]
[34.03684998 -79.73462677]
[26.58021545 -92.74994659]
[18.99373627 -105.69001770]
[11.27817249 -118.55353546]
[3.56260872 -131.41705322]
[-4.15295458 -144.28056335]
[-17.48529053 -154.75363159]
[-11.11226940 -170.46417236]
[5.74852037 -168.68931580]
[8.71056271 -151.99612427]
[16.42612648 -139.13261414]
[24.14168930 -126.26909637]
[31.85725403 -113.40557861]
[38.02931976 -109.26390076]
[39.59553528 -100.20658112]
[47.05216980 -87.19126129]
[60.09257507 -79.99423981]
[60.23920441 -64.17371368]
[67.69583893 -51.15839005]
[75.15247345 -38.14307022]
[82.60910797 -25.12774849]
[90.06574249 -12.11242771]
[105.05899048 -11.66226673]
[113.28303528 -24.20678711]
[121.50708771 -36.75130844]
[129.73114014 -49.29582977]
[137.95518494 -61.84035110]
[146.17922974 -74.38487244]
[154.40328979 -86.92938995]
[162.62733459 -99.47391510]
[170.85137939 -112.01843262]
[179.07543945 -124.56295776]
[187.29948425 -137.10748291]
[195.52352905 -149.65199280]
[199.15109253 -166.21331787]
[216.06939697 -167.31214905]
[221.80874634 -151.35920715]
[208.06805420 -141.42794800]
[199.84400940 -128.88342285]
[191.61994934 -116.33890533]
[183.39590454 -103.79438782]
[175.17185974 -91.24986267]
[166.94779968 -78.70534515]
[158.72375488 -66.16082001]
[150.49971008 -53.61630249]
[142.27565002 -41.07178116]
[134.05160522 -28.52725792]
[125.82756042 -15.98273754]
[117.60350800 -3.43821692]
[113.31211090 10.93480968]
[113.31211090 25.93481064]
[121.04940796 38.66208267]
[113.31211090 52.46225357]
[113.31211090 67.46225739]
[113.31211090 82.46225739]
[116.33348083 112.38887787]
[120.76846313 126.71824646]
[125.20344543 141.04762268]
[129.63842773 155.37699890]
[134.07341003 169.70635986]
[138.50839233 184.03573608]
[142.94337463 198.36511230]
[147.37837219 212.69448853]
[161.07751465 220.10871887]
[165.37109375 234.70391846]
[158.21833801 247.71827698]
[162.65332031 262.04763794]
[167.08830261 276.37701416]
[171.95132446 290.56683350]
[177.23799133 304.60433960]
[182.52467346 318.64181519]
[187.81135559 332.67932129]
[193.37783813 346.60821533]
[199.22192383 360.42294312]
[205.06599426 374.23767090]
[210.91007996 388.05239868]
[216.75415039 401.86712646]
[230.73634338 402.87319946]
[242.85710144 409.78314209]
[250.77024841 421.19354248]
[252.97254944 434.83642578]
[249.08905029 448.02999878]
[239.93542480 458.20565796]
[245.50192261 472.13455200]
[251.06840515 486.06344604]
[263.37445068 496.00686646]
[260.91271973 510.69665527]
[266.47921753 524.62554932]
[279.69137573 534.33996582]
[277.61581421 550.60723877]
[262.38769531 556.69299316]
[249.67237854 546.33666992]
[252.55032349 530.19201660]
[246.98382568 516.26312256]
[235.07594299 507.31597900]
[237.13951111 491.62994385]
[231.57301331 477.70104980]
[226.00653076 463.77212524]
[209.98620605 461.86676025]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 134]
[4 133]
[5 132]
[6 131]
[7 130]
[10 129]
[11 128]
[12 127]
[13 126]
[17 125]
[18 124]
[19 123]
[22 120]
[23 119]
[24 118]
[25 117]
[26 116]
[27 115]
[28 114]
[29 113]
[30 44]
[31 43]
[32 42]
[33 41]
[34 40]
[45 112]
[46 111]
[47 110]
[49 108]
[50 107]
[52 79]
[53 78]
[54 77]
[55 76]
[56 75]
[58 73]
[59 72]
[60 70]
[61 69]
[62 68]
[63 67]
[80 106]
[81 105]
[82 104]
[83 103]
[84 102]
[85 101]
[86 100]
[87 99]
[88 98]
[89 97]
[90 96]
[91 95]
[140 155]
[141 154]
[142 153]
[144 151]
[145 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
