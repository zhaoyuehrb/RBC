%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:42:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGAAAUUUGAGUGGAGGCCAUGUCGAGGAGUUUGUCUUGGUGGGUUUCCCUACCACGCCUCCCCUCCAGCUGCUCCUCUUUGUCCUUUUUUUUGCAA\
) } def
/len { sequence length } bind def

/coor [
[232.96101379 346.57092285]
[239.96981812 333.23025513]
[249.86672974 321.86593628]
[241.12561035 309.67605591]
[232.38449097 297.48620605]
[217.86363220 300.96090698]
[203.07865906 298.60504150]
[190.28749084 290.74688721]
[181.45558167 278.55734253]
[177.95402527 263.87564087]
[180.34666443 248.93179321]
[188.29965210 236.00794983]
[179.55854797 223.81808472]
[170.81742859 211.62821960]
[157.11294556 205.79414368]
[155.35879517 190.07048035]
[146.61767578 177.88061523]
[137.87657166 165.69073486]
[129.13545227 153.50086975]
[120.39433289 141.31100464]
[111.65322113 129.12113953]
[102.51480865 132.06533813]
[92.67462158 132.13710022]
[83.03596497 129.18719482]
[74.52589417 123.35016632]
[68.00634003 115.04416656]
[64.18771362 104.94319153]
[63.55370331 93.92309570]
[66.30493164 82.98583221]
[53.98059464 74.43534851]
[41.65626144 65.88486481]
[29.33192444 57.33438110]
[13.35252094 58.76203537]
[2.37799740 47.05992508]
[4.82706928 31.20490646]
[18.82101822 23.35959435]
[33.62488556 29.54223824]
[37.88240814 45.01004410]
[50.20674515 53.56052780]
[62.53107834 62.11101151]
[74.85541534 70.66149902]
[87.92285919 63.29658508]
[86.99031067 48.32560349]
[86.05776978 33.35461807]
[85.12522125 18.38363457]
[84.19268036 3.41264987]
[83.26013184 -11.55833435]
[73.74755096 -24.91658401]
[80.80504608 -39.71941376]
[97.17247009 -40.73894501]
[106.01242065 -26.92636681]
[98.23111725 -12.49087906]
[99.16366577 2.48010516]
[100.09620667 17.45108986]
[101.02875519 32.42207336]
[101.96129608 47.39305878]
[102.89383698 62.36404037]
[125.81165314 75.45310211]
[133.48136902 99.11186981]
[123.84308624 120.38002014]
[132.58419800 132.56988525]
[141.32531738 144.75975037]
[150.06643677 156.94963074]
[158.80755615 169.13949585]
[167.54866028 181.32936096]
[181.87837219 188.03533936]
[183.00729370 202.88710022]
[191.74841309 215.07696533]
[200.48953247 227.26684570]
[215.28170776 223.88055420]
[230.20321655 226.40875244]
[242.98542786 234.43550110]
[251.69712830 246.71124268]
[255.03614807 261.34735107]
[252.52406311 276.10659790]
[244.57437134 288.74508667]
[253.31547546 300.93493652]
[262.05661011 313.12481689]
[275.99536133 307.39703369]
[290.87942505 305.03875732]
[305.90609741 306.17715454]
[320.26501465 310.75082397]
[333.18179321 318.51312256]
[343.95989990 329.04541016]
[352.01803589 341.77975464]
[356.92163086 356.02935791]
[358.40631104 371.02578735]
[356.39193726 385.96026611]
[350.98715210 400.02743530]
[342.48345947 412.46865845]
[331.33944702 422.61297607]
[318.15606689 429.91336060]
[303.64428711 433.97604370]
[288.58676147 434.58200073]
[273.79547119 431.69854736]
[260.06811523 425.48114014]
[248.14497375 416.26507568]
[238.66905212 404.54742432]
[232.15139771 390.96002197]
[228.94346619 376.23571777]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 78]
[4 77]
[5 76]
[12 69]
[13 68]
[14 67]
[16 65]
[17 64]
[18 63]
[19 62]
[20 61]
[21 60]
[29 41]
[30 40]
[31 39]
[32 38]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
