%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:07:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAAAAAGAAAUCUAACAGUUGUCAGGGAAUUCGUCCUUCUGGGACUUCCUAGCUCAGCAGAGCAGCAGCACCUCCUGUCUGUGCUCUUUCUCUGUA\
) } def
/len { sequence length } bind def

/coor [
[88.61525726 248.38565063]
[74.17190552 252.43403625]
[59.23011017 253.75421143]
[44.30066681 252.30102539]
[29.89393425 248.12419128]
[16.50240517 241.36645508]
[4.58386660 232.25885010]
[-5.45424557 221.11271667]
[-13.26877975 208.30908203]
[-18.59259796 194.28562927]
[-21.24370575 179.52177429]
[-21.13147354 164.52218628]
[-18.25973892 149.79965210]
[-12.72667217 135.85745239]
[-4.72142124 123.17218018]
[5.48235559 112.17750549]
[17.53584480 103.24926758]
[31.02699471 96.69268036]
[45.49461746 92.73188019]
[60.44413376 91.50226593]
[75.36449432 93.04587555]
[89.74071503 97.30796051]
[82.17346954 84.35663605]
[74.60623169 71.40530396]
[67.03898621 58.45398331]
[50.26870346 57.04557800]
[37.72323990 46.07704163]
[34.15953445 29.96731186]
[40.77438354 15.03253365]
[32.80801773 2.32281327]
[24.84165001 -10.38690758]
[16.87528419 -23.09662819]
[8.90891647 -35.80634689]
[3.96729374 -38.40013123]
[0.93601662 -42.29843521]
[-0.01036376 -46.50069809]
[0.85700047 -50.09273148]
[-5.89042521 -63.48945999]
[-12.63785076 -76.88618469]
[-19.38527679 -90.28290558]
[-26.13270187 -103.67963409]
[-38.65766907 -115.10598755]
[-31.14512062 -130.30459595]
[-14.46079159 -127.29304504]
[-12.73597717 -110.42706299]
[-5.98855114 -97.03033447]
[0.75887442 -83.63360596]
[7.50629997 -70.23688507]
[14.25372601 -56.84016037]
[21.61863708 -43.77271652]
[29.58500481 -31.06299400]
[37.55137253 -18.35327339]
[45.51773834 -5.64355373]
[53.48410416 7.06616688]
[66.92884827 6.75720644]
[78.84456635 13.22337437]
[86.02765656 24.84926987]
[86.48602295 38.61642838]
[79.99031067 50.88673782]
[87.55755615 63.83806610]
[95.12480164 76.78939056]
[102.69203949 89.74071503]
[115.40176392 97.70708466]
[130.35643005 98.87233734]
[145.31109619 100.03759766]
[160.26577759 101.20285797]
[175.22044373 102.36811066]
[190.17510986 103.53337097]
[199.15414429 101.04948425]
[205.57438660 104.97453308]
[220.48558044 106.60431671]
[235.39677429 108.23410034]
[250.33151245 109.63179016]
[265.28619385 110.79704285]
[278.36291504 101.50304413]
[293.74206543 106.07043457]
[299.62606812 120.99552155]
[291.50122070 134.82904053]
[275.60021973 136.95910645]
[264.12094116 125.75171661]
[249.16625977 124.58645630]
[242.12922668 127.25209045]
[233.76699829 123.14529419]
[218.85578918 121.51551056]
[203.94459534 119.88572693]
[189.00985718 118.48804474]
[174.05519104 117.32278442]
[159.10050964 116.15752411]
[144.14584351 114.99227142]
[129.19117737 113.82701111]
[114.23650360 112.66175079]
[124.34196472 123.74686432]
[132.23393250 136.50291443]
[137.64262390 150.49383545]
[140.38313293 165.24136353]
[140.36178589 180.24134827]
[137.57931519 194.98101807]
[132.13082886 208.95649719]
[124.20258331 221.69003296]
[114.06560516 232.74633789]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 62]
[23 61]
[24 60]
[25 59]
[29 54]
[30 53]
[31 52]
[32 51]
[33 50]
[37 49]
[38 48]
[39 47]
[40 46]
[41 45]
[63 91]
[64 90]
[65 89]
[66 88]
[67 87]
[68 86]
[70 85]
[71 84]
[72 83]
[73 81]
[74 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
