%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGGCAGCGGCUGGGGGCGCGGCGAGCCGCCGGGGUGCCGGGCGGCCCUGCCCCUUCUCCAUCGAGCACAUCCUCUCCAGCCUGCCCGAGCGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[116.69081116 315.07980347]
[103.80447388 304.06259155]
[110.82382965 288.63000488]
[111.75637817 273.65902710]
[112.68891907 258.68804932]
[111.75637817 243.71705627]
[108.97315979 228.97752380]
[106.18994141 214.23799133]
[103.40673065 199.49845886]
[99.88906097 196.03195190]
[98.62728882 190.25979614]
[100.93873596 183.75776672]
[99.07725525 168.87371826]
[97.21577454 153.98966980]
[95.35429382 139.10563660]
[93.49281311 124.22158051]
[91.63133240 109.33753204]
[84.88390350 95.94081116]
[74.03277588 85.58451080]
[63.18164062 75.22821045]
[54.65402222 71.47689819]
[52.16042328 64.37707520]
[41.63661957 53.68831635]
[31.11281776 42.99955750]
[20.58901596 32.31079865]
[9.50217533 32.84732437]
[0.19280013 27.22003746]
[-4.29788351 17.55628777]
[-2.66526771 7.25042629]
[-12.50419712 -4.07191753]
[-22.34312630 -15.39426136]
[-32.18205643 -26.71660614]
[-42.02098465 -38.03895187]
[-51.85991287 -49.36129379]
[-66.75212860 -54.70286560]
[-69.26002502 -69.38481903]
[-79.09895325 -80.70716095]
[-94.05220795 -88.69693756]
[-90.51415253 -105.27760315]
[-73.60202789 -106.46779633]
[-67.77660370 -90.54608917]
[-57.93767929 -79.22374725]
[-43.74920654 -74.69202423]
[-40.53756714 -59.20022202]
[-30.69863892 -47.87788010]
[-20.85971069 -36.55553436]
[-11.02078152 -25.23319054]
[-1.18185270 -13.91084671]
[8.65707588 -2.58850265]
[27.29539299 2.14710903]
[31.27777481 21.78699493]
[41.80157852 32.47575378]
[52.32538223 43.16451263]
[62.84918213 53.85327530]
[73.53794098 64.37707520]
[84.38907623 74.73337555]
[95.24020386 85.08967590]
[86.73907471 72.73124695]
[85.87911987 57.75591660]
[92.90968323 44.50558853]
[105.79232788 36.82201385]
[120.79192352 36.93294525]
[133.55952454 44.80622101]
[140.39332581 58.15908813]
[139.31196594 73.12006378]
[130.62898254 85.35140228]
[116.86430359 91.30646515]
[131.55876160 88.29435730]
[146.25321960 85.28225708]
[154.74653625 71.95411682]
[170.19448853 68.61698914]
[183.43208313 77.25074005]
[186.60569763 92.73310852]
[177.83247375 105.87867737]
[162.31741333 108.88842773]
[149.26533508 99.97671509]
[134.57086182 102.98882294]
[119.87640381 106.00093079]
[112.88471985 108.32395172]
[106.51538086 107.47605133]
[108.37686157 122.36009979]
[110.23834229 137.24414062]
[112.09982300 152.12818909]
[113.96130371 167.01223755]
[115.82278442 181.89628601]
[118.14625549 196.71525574]
[120.92947388 211.45477295]
[123.71269226 226.19430542]
[126.49590302 240.93383789]
[135.33003235 228.81120300]
[149.52726746 223.96987915]
[163.92738342 228.16952515]
[173.29637146 239.88369751]
[174.22892761 254.85469055]
[166.38609314 267.64099121]
[152.61848450 273.59524536]
[137.93017578 270.55322266]
[127.65990448 259.62057495]
[126.72736359 274.59155273]
[125.79481506 289.56256104]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 100]
[4 99]
[5 98]
[6 89]
[7 88]
[8 87]
[9 86]
[12 85]
[13 84]
[14 83]
[15 82]
[16 81]
[17 80]
[18 57]
[19 56]
[20 55]
[22 54]
[23 53]
[24 52]
[25 51]
[29 49]
[30 48]
[31 47]
[32 46]
[33 45]
[34 44]
[36 42]
[37 41]
[67 78]
[68 77]
[69 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
