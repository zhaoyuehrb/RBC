%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:17:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUGAAUUCCUAGCUCCUGUGGUCUCCAGAUUUCAGGCCUAAGAUGAAAGCCUCUAGUCUUGCCUUCAGCCUUCUCUCUGCUGCGUUUUAUCUCCUAUGGACUCCUUCCACUGGACUGAAGACACUCAAUUUGGGAAGCUGUG\
) } def
/len { sequence length } bind def

/coor [
[101.58740234 298.06890869]
[93.17182159 310.72778320]
[80.54972076 319.19836426]
[65.64588165 322.18902588]
[50.73302460 319.24365234]
[38.08525848 310.81143188]
[29.63126945 298.17819214]
[26.66023445 283.27041626]
[29.62521362 268.36145020]
[38.07406998 255.72479248]
[50.71841049 247.28742981]
[65.63006592 244.33601379]
[68.53649902 229.62028503]
[71.44293213 214.90455627]
[74.34935760 200.18882751]
[77.25579071 185.47309875]
[80.00263977 170.72674561]
[82.58957672 155.95150757]
[85.17651367 141.17626953]
[68.56716156 130.44992065]
[58.37372208 113.50828552]
[56.67682266 93.80941010]
[42.41097641 89.17415619]
[28.14512825 84.53890228]
[20.27863884 89.97289276]
[10.92568588 91.11585999]
[2.24095511 87.83379364]
[-3.83453965 80.99744415]
[-6.00706148 72.25579834]
[-19.94171143 66.70372009]
[-33.87636185 61.15164948]
[-47.81101227 55.59957886]
[-61.74566650 50.04750443]
[-76.12056732 56.04749680]
[-90.17319489 50.21840286]
[-95.80467987 36.47715378]
[-109.73933411 30.92508125]
[-123.67398071 25.37300873]
[-137.60862732 19.82093620]
[-149.19093323 29.82638359]
[-164.09893799 33.29190826]
[-178.90690613 29.42116356]
[-190.21206665 19.10361481]
[-195.41659546 4.71015787]
[-193.32449341 -10.45169353]
[-184.41654968 -22.89785767]
[-170.73971558 -29.76829910]
[-155.43684387 -29.48423767]
[-142.02442932 -22.11095047]
[-133.58451843 -9.34276390]
[-132.05656433 5.88628531]
[-118.12191010 11.43835735]
[-104.18726349 16.99042892]
[-90.25260925 22.54250145]
[-76.71432495 16.43918800]
[-62.50351715 21.87127495]
[-56.19359207 36.11285400]
[-42.25894165 41.66492844]
[-28.32429123 47.21699905]
[-14.38963985 52.76907349]
[-0.45498919 58.32114410]
[19.56358910 53.46698380]
[32.78038406 70.27305603]
[47.04623032 74.90830994]
[61.31208038 79.54356384]
[70.82231903 67.38276672]
[83.96343231 59.28084946]
[99.10012817 56.24601746]
[101.36636353 41.41819763]
[103.63259888 26.59037971]
[105.89883423 11.76256275]
[94.26184082 1.63418484]
[89.96994019 -13.18415356]
[94.39266205 -27.96397400]
[106.11872864 -37.98908997]
[121.40639496 -40.06052399]
[135.37742615 -33.51728821]
[143.57369995 -20.44730377]
[143.37983704 -5.02115870]
[134.85769653 7.83872223]
[120.72664642 14.02879810]
[118.46041107 28.85661507]
[116.19417572 43.68443298]
[113.92794037 58.51225281]
[130.77720642 68.88755798]
[141.33444214 85.62344360]
[156.13682556 83.19671631]
[170.93922424 80.76998138]
[185.74162292 78.34325409]
[200.54402161 75.91652679]
[207.58038330 62.21266174]
[221.17787170 55.35980606]
[236.02763367 57.79882431]
[246.46875000 68.38755035]
[261.27114868 65.96081543]
[276.07354736 63.53408813]
[285.29745483 50.98191452]
[300.34378052 48.73173141]
[312.25350952 57.60268402]
[327.05590820 55.17595291]
[341.85830688 52.74922562]
[356.66070557 50.32249451]
[367.15029907 38.18378830]
[383.17453003 38.96046829]
[392.44100952 52.05673218]
[387.84124756 67.42624664]
[372.90383911 73.27883148]
[359.08743286 65.12489319]
[344.28503418 67.55162048]
[329.48263550 69.97835541]
[314.68023682 72.40508270]
[306.22644043 84.61446381]
[291.24926758 87.28637695]
[278.50027466 78.33648682]
[263.69787598 80.76321411]
[248.89547729 83.18994141]
[242.38191223 96.55825043]
[229.08828735 103.61113739]
[214.01445007 101.45870972]
[202.97074890 90.71891785]
[188.16836548 93.14565277]
[173.36596680 95.57238007]
[158.56356812 97.99911499]
[143.76116943 100.42584229]
[143.16203308 107.22911072]
[141.51171875 113.85633087]
[138.85043335 120.14608002]
[135.24298096 125.94519806]
[130.77720642 131.11244202]
[125.56189728 135.52197266]
[119.72403717 139.06639099]
[113.40582275 141.65939331]
[106.76112366 143.23780823]
[99.95175934 143.76321411]
[97.36481476 158.53845215]
[94.77787781 173.31369019]
[96.38597107 182.38250732]
[91.97151947 188.37953186]
[89.06508636 203.09526062]
[86.15866089 217.81098938]
[83.25222778 232.52671814]
[80.34579468 247.24244690]
[93.01570892 255.64137268]
[101.50289917 268.25231934]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 142]
[13 141]
[14 140]
[15 139]
[16 138]
[17 136]
[18 135]
[19 134]
[22 65]
[23 64]
[24 63]
[29 61]
[30 60]
[31 59]
[32 58]
[33 57]
[36 54]
[37 53]
[38 52]
[39 51]
[68 84]
[69 83]
[70 82]
[71 81]
[86 124]
[87 123]
[88 122]
[89 121]
[90 120]
[94 116]
[95 115]
[96 114]
[99 111]
[100 110]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
