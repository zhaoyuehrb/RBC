%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCCUGCUCUAGCGGGCCGCGUAGCGGACAUGGCGGGCUCCCGGCUCCCGCGGCAGCUCUUCCUCCAGGGCGUGGCGGCCGUCUUCAUGUUUGCUUUCGCUUCCCUCUACACGCAAAUCCCAGGCCUGU\
) } def
/len { sequence length } bind def

/coor [
[149.84074402 433.97271729]
[149.12701416 418.98971558]
[148.41328430 404.00671387]
[147.69955444 389.02368164]
[146.98582458 374.04067993]
[131.99327087 356.39767456]
[142.19883728 334.83493042]
[139.36007690 320.10601807]
[136.52130127 305.37707520]
[122.22589874 296.60205078]
[118.58237457 279.88424683]
[128.30461121 265.39749146]
[125.11613464 250.74028015]
[121.92765045 236.08308411]
[111.66179657 225.29135132]
[116.28884125 210.16186523]
[113.10036469 195.50466919]
[109.91188049 180.84745789]
[97.28192139 173.03594971]
[93.83955383 158.21688843]
[102.11861420 145.02238464]
[98.93013763 130.36518860]
[95.74165344 115.70797729]
[84.13927460 103.64848328]
[89.30615234 87.73151398]
[85.76976776 73.15434265]
[82.23338318 58.57716751]
[78.69699860 43.99999237]
[75.16061401 29.42282104]
[71.62422943 14.84564686]
[68.08784485 0.26847321]
[64.55146027 -14.30870056]
[61.01507950 -28.88587379]
[57.47869492 -43.46304703]
[53.94231033 -58.04022217]
[48.83119202 -65.73094177]
[50.49961090 -73.00634766]
[47.31113434 -87.66355133]
[44.12265396 -102.32075500]
[40.93417358 -116.97795868]
[37.73062897 -120.23229980]
[35.96988297 -123.97421265]
[35.62318039 -127.66936493]
[36.48443222 -130.85182190]
[38.21001053 -133.17796326]
[36.42922211 -148.07188416]
[34.64843750 -162.96580505]
[31.39264870 -167.29431152]
[30.30182457 -171.97222900]
[31.13348007 -176.09129333]
[33.31129456 -178.98085022]
[32.59756470 -193.96385193]
[31.88383484 -208.94686890]
[23.49866104 -222.36325073]
[30.62160873 -235.44425964]
[29.90788078 -250.42727661]
[26.34460258 -258.94628906]
[29.35975266 -265.77447510]
[29.00278854 -280.77023315]
[28.64582253 -295.76599121]
[28.28885651 -310.76174927]
[27.93189049 -325.75747681]
[16.32227135 -336.48092651]
[15.77914143 -352.27587891]
[26.62473106 -363.77148438]
[42.42454529 -364.14758301]
[53.80483246 -353.18106079]
[54.01387024 -337.37817383]
[42.92764282 -326.11444092]
[43.28460693 -311.11871338]
[43.64157486 -296.12295532]
[43.99853897 -281.12719727]
[44.35550690 -266.13143921]
[44.89088821 -251.14100647]
[45.60461807 -236.15798950]
[53.93874359 -223.81329346]
[46.86684418 -209.66059875]
[47.58057404 -194.67758179]
[48.29430389 -179.69458008]
[49.54235458 -164.74658203]
[51.32314301 -149.85267639]
[53.10392761 -134.95875549]
[55.59137726 -120.16643524]
[58.77985764 -105.50923157]
[61.96833801 -90.85202789]
[65.15681458 -76.19483185]
[68.51948547 -61.57660675]
[72.05587006 -46.99943161]
[75.59225464 -32.42225647]
[79.12863922 -17.84508514]
[82.66502380 -3.26791072]
[86.20140839 11.30926228]
[89.73779297 25.88643646]
[93.27416992 40.46361160]
[96.81055450 55.04078293]
[100.34693909 69.61795807]
[103.88332367 84.19512939]
[113.48699951 90.89094543]
[116.11155701 102.30042267]
[110.39885712 112.51950073]
[113.58733368 127.17670441]
[116.77581787 141.83390808]
[129.78791809 150.39680481]
[132.81268311 165.30671692]
[124.56908417 177.65898132]
[127.75756073 192.31619263]
[130.94604492 206.97338867]
[141.43995667 218.81350708]
[136.58485413 232.89459229]
[139.77333069 247.55180359]
[142.96182251 262.20901489]
[155.10287476 268.17395020]
[161.47103882 279.88674927]
[159.92231750 292.93197632]
[151.25022888 302.53833008]
[154.08900452 317.26724243]
[156.92776489 331.99618530]
[163.66548157 334.34716797]
[169.27044678 338.67944336]
[173.18562317 344.52081299]
[175.03515625 351.25140381]
[174.66035461 358.16931152]
[172.13267517 364.56393433]
[167.74307251 369.78878784]
[161.96884155 373.32696533]
[162.68257141 388.30996704]
[163.39630127 403.29296875]
[164.11003113 418.27597046]
[164.82376099 433.25900269]
[171.61689758 448.79248047]
[158.57099915 459.62026978]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 129]
[2 128]
[3 127]
[4 126]
[5 125]
[7 117]
[8 116]
[9 115]
[12 111]
[13 110]
[14 109]
[16 107]
[17 106]
[18 105]
[21 102]
[22 101]
[23 100]
[25 97]
[26 96]
[27 95]
[28 94]
[29 93]
[30 92]
[31 91]
[32 90]
[33 89]
[34 88]
[35 87]
[37 86]
[38 85]
[39 84]
[40 83]
[45 82]
[46 81]
[47 80]
[51 79]
[52 78]
[53 77]
[55 75]
[56 74]
[58 73]
[59 72]
[60 71]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
