%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:44:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGCGCGGCCGGGAGCGCCGCGCGCCGGGAGCGGGGCGGCGGGCGCCGGGGCUGGCAUGGCGUGGCCCUGUAUCAGCCGCCUGUGCUGCCUGGCGCGGCGCUGGAACCAGCUGGACCGCUCCGACGUGGCGGUGCCGCUCACUCUGCACGGCUACU\
) } def
/len { sequence length } bind def

/coor [
[282.30062866 369.84616089]
[277.23687744 358.50900269]
[277.49664307 346.02267456]
[283.09201050 334.77630615]
[274.46813965 322.50320435]
[260.82019043 316.53802490]
[259.21685791 300.79827881]
[250.59298706 288.52517700]
[241.96911621 276.25207520]
[233.34526062 263.97897339]
[224.60057068 251.79167175]
[215.73590088 239.69136047]
[206.87123108 227.59103394]
[198.00657654 215.49072266]
[175.19290161 208.92848206]
[171.88990784 184.71858215]
[161.44163513 173.95597839]
[150.99337769 163.19335938]
[140.54510498 152.43075562]
[130.09684753 141.66815186]
[119.64857483 130.90553284]
[109.20030975 120.14292908]
[98.75204468 109.38031769]
[93.60393524 108.10839081]
[89.55455780 104.01882172]
[88.11408234 97.98003387]
[78.09917450 86.81304932]
[68.08425903 75.64607239]
[58.06934357 64.47908783]
[48.05442810 53.31210327]
[38.03951263 42.14512253]
[27.91476822 31.07762337]
[17.68118095 20.11068726]
[7.44759321 9.14375114]
[-2.78599429 -1.82318497]
[-13.12742519 -12.68848801]
[-23.57569122 -23.45109749]
[-34.02395630 -34.21370697]
[-44.47222137 -44.97631454]
[-54.92048645 -55.73892212]
[-65.36875153 -66.50153351]
[-75.81701660 -77.26413727]
[-90.98110962 -81.77644348]
[-94.29473877 -96.29777527]
[-104.74300385 -107.06038666]
[-119.90709686 -111.57268524]
[-123.22071838 -126.09401703]
[-133.66899109 -136.85662842]
[-141.93850708 -140.86300659]
[-144.21473694 -147.93659973]
[-154.44833374 -158.90354919]
[-164.68191528 -169.87048340]
[-174.91551208 -180.83741760]
[-185.14909363 -191.80435181]
[-195.38267517 -202.77128601]
[-213.09648132 -207.71055603]
[-216.43470764 -224.91601562]
[-226.88298035 -235.67861938]
[-242.25402832 -242.83172607]
[-239.63560486 -259.58224487]
[-222.81483459 -261.70315552]
[-216.12036133 -246.12687683]
[-205.67210388 -235.36427307]
[-193.55268860 -234.86083984]
[-184.75871277 -225.93325806]
[-184.41574097 -213.00486755]
[-174.18215942 -202.03793335]
[-163.94857788 -191.07099915]
[-153.71498108 -180.10406494]
[-143.48139954 -169.13713074]
[-133.24780273 -158.17019653]
[-122.90637970 -147.30488586]
[-112.45811462 -136.54228210]
[-98.04135132 -132.79980469]
[-93.98039246 -117.50865173]
[-83.53212738 -106.74604034]
[-69.11536407 -103.00355530]
[-65.05441284 -87.71240997]
[-54.60614395 -76.94979858]
[-44.15787888 -66.18718719]
[-33.70961380 -55.42457962]
[-23.26134682 -44.66197205]
[-12.81308174 -33.89936066]
[-2.36481667 -23.13675308]
[4.58775949 -20.51403236]
[8.18094158 -12.05677223]
[18.41452980 -1.08983636]
[28.64811707 9.87709999]
[38.88170242 20.84403610]
[45.78110504 23.60360718]
[49.20649338 32.13020706]
[59.22140884 43.29719162]
[69.23632050 54.46417236]
[79.25123596 65.63115692]
[89.26615143 76.79813385]
[99.28106689 87.96511841]
[109.51465607 98.93205261]
[119.96292114 109.69466400]
[130.41117859 120.45727539]
[140.85945129 131.21987915]
[151.30772400 141.98248291]
[161.75598145 152.74510193]
[172.20425415 163.50770569]
[182.65251160 174.27030945]
[188.90060425 172.55058289]
[195.33937073 172.67182922]
[201.44096375 174.60118103]
[206.71171570 178.15840149]
[210.73202515 183.03260803]
[213.18974304 188.80924988]
[213.90437317 195.00537109]
[212.84010315 201.10995483]
[210.10688782 206.62605286]
[218.97155762 218.72637939]
[227.83621216 230.82669067]
[236.70088196 242.92701721]
[244.33908081 248.03524780]
[245.61834717 255.35511780]
[254.24221802 267.62820435]
[262.86608887 279.90130615]
[271.48995972 292.17440796]
[285.75473022 299.01742554]
[286.74124146 313.87933350]
[295.36508179 326.15243530]
[313.45046997 325.87377930]
[327.97991943 336.38165283]
[333.28552246 353.34573364]
[327.43630981 369.96426392]
[336.53829956 381.88705444]
[345.64028931 393.80987549]
[354.74230957 405.73269653]
[363.84429932 417.65551758]
[378.36828613 423.92965698]
[379.94116211 438.74096680]
[389.04315186 450.66378784]
[398.14517212 462.58660889]
[407.24716187 474.50942993]
[422.46908569 472.46273804]
[436.66888428 478.31607056]
[446.02688599 490.49490356]
[448.02581787 505.72314453]
[442.12802124 519.90454102]
[429.91992188 529.22430420]
[414.68548584 531.17547607]
[400.52267456 525.23327637]
[391.24121094 512.99603271]
[389.33776855 497.75555420]
[395.32434082 483.61141968]
[386.22235107 471.68859863]
[377.12036133 459.76580811]
[368.01834106 447.84298706]
[354.14541626 442.42163086]
[351.92147827 426.75750732]
[342.81948853 414.83471680]
[333.71749878 402.91189575]
[324.61547852 390.98907471]
[315.51348877 379.06625366]
[303.49371338 381.15270996]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 124]
[5 123]
[7 121]
[8 120]
[9 119]
[10 118]
[11 116]
[12 115]
[13 114]
[14 113]
[16 104]
[17 103]
[18 102]
[19 101]
[20 100]
[21 99]
[22 98]
[23 97]
[26 96]
[27 95]
[28 94]
[29 93]
[30 92]
[31 91]
[32 89]
[33 88]
[34 87]
[35 86]
[36 84]
[37 83]
[38 82]
[39 81]
[40 80]
[41 79]
[42 78]
[44 76]
[45 75]
[47 73]
[48 72]
[50 71]
[51 70]
[52 69]
[53 68]
[54 67]
[55 66]
[57 63]
[58 62]
[128 157]
[129 156]
[130 155]
[131 154]
[132 153]
[134 151]
[135 150]
[136 149]
[137 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
