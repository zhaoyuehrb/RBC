%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:18:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGUGCGGGUGGCCUGGAUCCCGCGCAGUGGCCCGGCGAUGUCGCUCGUGCUGCUAAGCCUGGCCGCGCUGUGCAGGAGCGCCGUACCCCGAGAGCCGACCGUUCAAUGUGGCUCUGAAACUGGGCCAUCUCCAGAGU\
) } def
/len { sequence length } bind def

/coor [
[89.21888733 387.31781006]
[91.84128571 368.11431885]
[92.17785645 353.11810303]
[82.91510010 338.25430298]
[92.50000000 322.57617188]
[92.50000000 307.57617188]
[84.76270294 294.84887695]
[92.50000000 281.04870605]
[92.50000000 266.04870605]
[92.50000000 251.04872131]
[92.50000000 236.04872131]
[92.50000000 221.04872131]
[92.50000000 206.04872131]
[92.50000000 191.04872131]
[92.50000000 176.04872131]
[92.50000000 161.04872131]
[92.50000000 146.04872131]
[92.50000000 131.04872131]
[71.37882233 114.18099976]
[70.75345612 87.15818024]
[58.81908798 78.07133484]
[46.88471985 68.98448181]
[31.21778297 66.78045654]
[25.77883339 52.91441727]
[13.84446430 43.82756805]
[1.91009605 34.74071884]
[-10.02427197 25.65386772]
[-21.95864105 16.56701660]
[-33.89300919 7.48016548]
[-45.82737732 -1.60668516]
[-57.96263123 -10.42346382]
[-70.29266357 -18.96573067]
[-82.62269592 -27.50799942]
[-94.95272827 -36.05026627]
[-110.70276642 -37.54917145]
[-116.75833893 -51.15723419]
[-129.08836365 -59.69950104]
[-141.41839600 -68.24176788]
[-156.00157166 -63.27817154]
[-170.54124451 -67.80049896]
[-179.52378845 -79.87435150]
[-179.67256165 -94.74431610]
[-192.00259399 -103.28658295]
[-207.75263977 -104.78549194]
[-213.80821228 -118.39355469]
[-226.13822937 -126.93582153]
[-242.51747131 -127.74362946]
[-249.76577759 -142.45396423]
[-240.42672729 -155.93409729]
[-224.10751343 -154.31681824]
[-217.59596252 -139.26585388]
[-205.26593018 -130.72358704]
[-190.39782715 -129.83567810]
[-183.46032715 -115.61661530]
[-171.13029480 -107.07434845]
[-157.15623474 -112.15999603]
[-142.69602966 -107.99266815]
[-133.35319519 -95.96915436]
[-132.87612915 -80.57180023]
[-120.54610443 -72.02953339]
[-108.21607208 -63.48726654]
[-93.34795380 -62.59935760]
[-86.41046143 -48.38029861]
[-74.08042908 -39.83802795]
[-61.75039673 -31.29576302]
[-49.42036438 -22.75349426]
[-44.56922150 -22.73007774]
[-39.69970322 -19.60260963]
[-36.74052429 -13.54105377]
[-24.80615807 -4.45420265]
[-12.87178993 4.63264799]
[-0.93742150 13.71949863]
[10.99694633 22.80634880]
[22.93131447 31.89319992]
[34.86568451 40.98004913]
[49.67899323 42.53411865]
[55.97156906 57.05011368]
[67.90593719 66.13696289]
[79.84030914 75.22381592]
[86.24061584 69.73562622]
[94.14168549 65.95132446]
[103.07695770 64.27966309]
[112.46973419 64.99867249]
[121.67040253 68.22647858]
[132.51232910 57.86054230]
[134.30836487 41.91833878]
[147.96839905 33.50508118]
[163.01362610 39.07469940]
[167.90263367 54.35465622]
[158.88499451 67.62348175]
[142.87826538 68.70246124]
[132.03634644 79.06840515]
[137.62074280 92.99012756]
[152.62074280 92.99012756]
[167.62074280 92.99012756]
[182.62074280 92.99012756]
[197.62074280 92.99012756]
[212.62074280 92.99012756]
[221.28480530 89.83997345]
[227.95637512 93.16220093]
[242.95260620 93.49877167]
[252.24519348 81.07189178]
[267.07733154 76.51255035]
[281.74572754 81.57391357]
[290.61010742 94.30978394]
[290.26193237 109.82295227]
[280.83508301 122.14829254]
[265.95437622 126.54646301]
[251.34173584 121.32627106]
[242.61602783 108.49499512]
[227.61981201 108.15842438]
[212.62074280 107.99012756]
[197.62074280 107.99012756]
[182.62074280 107.99012756]
[167.62074280 107.99012756]
[152.62074280 107.99012756]
[137.62074280 107.99012756]
[133.70875549 115.63030243]
[128.34353638 121.95572662]
[121.90679169 126.71562195]
[114.81626892 129.76123047]
[107.50000000 131.04872131]
[107.50000000 146.04872131]
[107.50000000 161.04872131]
[107.50000000 176.04872131]
[107.50000000 191.04872131]
[107.50000000 206.04872131]
[107.50000000 221.04872131]
[107.50000000 236.04872131]
[107.50000000 251.04872131]
[107.50000000 266.04870605]
[107.50000000 281.04870605]
[115.23729706 294.84887695]
[107.50000000 307.57617188]
[107.50000000 322.57617188]
[116.07919312 332.27941895]
[115.72383118 344.82449341]
[107.17407990 353.45468140]
[106.83750916 368.45089722]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 139]
[3 138]
[5 135]
[6 134]
[8 132]
[9 131]
[10 130]
[11 129]
[12 128]
[13 127]
[14 126]
[15 125]
[16 124]
[17 123]
[18 122]
[20 79]
[21 78]
[22 77]
[24 75]
[25 74]
[26 73]
[27 72]
[28 71]
[29 70]
[30 69]
[31 66]
[32 65]
[33 64]
[34 63]
[36 61]
[37 60]
[38 59]
[42 55]
[43 54]
[45 52]
[46 51]
[84 92]
[85 91]
[93 117]
[94 116]
[95 115]
[96 114]
[97 113]
[98 112]
[100 111]
[101 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
