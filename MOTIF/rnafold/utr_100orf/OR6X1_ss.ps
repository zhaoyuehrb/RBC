%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGAAAUGGCACAGUAAUCACAGAAUUCAUCCUGCUAGGCUUUCCUGUUAUCCAAGGCCUACAAACACCUCUCUUUAUUGCAAUCUUUCUCACCUACA\
) } def
/len { sequence length } bind def

/coor [
[118.43041229 345.12634277]
[129.51434326 334.26696777]
[127.19087982 319.44802856]
[124.86740875 304.62905884]
[122.54393005 289.81008911]
[120.22045898 274.99114990]
[117.89698792 260.17218018]
[115.57351685 245.35322571]
[101.26531982 241.14120483]
[90.15912628 231.09323120]
[84.49372101 217.16253662]
[85.44241333 202.09204102]
[92.87050629 188.87422180]
[105.35136414 180.15702820]
[103.02789307 165.33807373]
[100.70442200 150.51911926]
[98.38094330 135.70014954]
[96.05747223 120.88120270]
[93.73400116 106.06224060]
[91.23303223 103.99013519]
[89.49240112 100.89907837]
[88.91492462 97.09380341]
[89.77494049 93.03225708]
[92.16252136 89.27053070]
[91.69602203 74.27778625]
[91.22953033 59.28503799]
[76.72896576 55.01993179]
[64.27353668 46.49322128]
[55.07593155 34.55033875]
[50.02693176 20.36856651]
[49.60914230 5.34099102]
[53.85090637 -9.06034184]
[62.32473755 -21.42861938]
[74.19039154 -30.55969048]
[88.27814484 -35.56929398]
[87.81164551 -50.56203842]
[84.36686707 -59.21802902]
[87.57111359 -66.02672577]
[87.57111359 -81.02672577]
[87.57111359 -96.02672577]
[87.57111359 -111.02672577]
[87.57111359 -126.02672577]
[87.57111359 -141.02671814]
[87.57111359 -156.02671814]
[87.57111359 -171.02671814]
[74.22998810 -178.63658142]
[66.49501801 -191.90554810]
[66.44686890 -207.26437378]
[74.09850311 -220.58158875]
[87.39167023 -228.27491760]
[102.75055695 -228.27491760]
[116.04371643 -220.58158875]
[123.69535065 -207.26437378]
[123.64720917 -191.90554810]
[115.91223907 -178.63658142]
[102.57111359 -171.02671814]
[102.57111359 -156.02671814]
[102.57111359 -141.02671814]
[102.57111359 -126.02672577]
[102.57111359 -111.02672577]
[102.57111359 -96.02672577]
[102.57111359 -81.02672577]
[102.57111359 -66.02672577]
[102.80438995 -51.02853775]
[103.27088928 -36.03579330]
[117.64283752 -31.91171074]
[130.05320740 -23.53598595]
[139.27958679 -11.71844769]
[144.40846252 2.39131856]
[144.92575073 17.41579819]
[140.76818848 31.88403130]
[132.33085632 44.37562180]
[120.42962646 53.66019058]
[106.22227478 58.81854248]
[106.68876648 73.81128693]
[107.15526581 88.80403137]
[108.55295563 103.73876953]
[110.87642670 118.55772400]
[113.19990540 133.37667847]
[115.52337646 148.19563293]
[117.84684753 163.01460266]
[120.17031860 177.83355713]
[134.72023010 182.31257629]
[145.83726501 192.62269592]
[151.35287476 206.67965698]
[150.22291565 221.67579651]
[142.72492981 234.64073181]
[130.39247131 243.02975464]
[132.71594238 257.84872437]
[135.03941345 272.66766357]
[137.36288452 287.48663330]
[139.68635559 302.30557251]
[142.00984192 317.12454224]
[144.33331299 331.94351196]
[158.20895386 338.88943481]
[165.32196045 352.68017578]
[162.93724060 368.01290894]
[151.97174072 378.99188232]
[136.64195251 381.39544678]
[122.84247589 374.29940796]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 94]
[3 93]
[4 92]
[5 91]
[6 90]
[7 89]
[8 88]
[14 82]
[15 81]
[16 80]
[17 79]
[18 78]
[19 77]
[24 76]
[25 75]
[26 74]
[35 65]
[36 64]
[38 63]
[39 62]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[45 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
