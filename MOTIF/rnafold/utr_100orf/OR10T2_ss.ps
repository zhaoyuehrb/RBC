%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:07:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGAGGUUUCAACAAAACCACUGUGGUUACACAGUUCAUCCUGGUGGGUUUCUCCAGCCUGGGGGAGCUCCAGCUGCUGCUUUUUGUCAUCUUUCUUC\
) } def
/len { sequence length } bind def

/coor [
[109.49909210 177.85417175]
[116.68676758 164.60272217]
[126.83737946 153.45693970]
[118.47959137 141.00111389]
[110.12181091 128.54530334]
[93.16614532 132.80703735]
[74.91941833 126.84177399]
[63.44543457 136.50343323]
[51.97144318 146.16508484]
[40.49745560 155.82673645]
[29.02346802 165.48840332]
[26.22574615 181.28561401]
[12.06238079 188.82078552]
[-2.60170579 182.31355286]
[-6.51748180 166.75570679]
[3.31890154 154.08190918]
[19.36181259 154.01440430]
[30.83580017 144.35275269]
[42.30978775 134.69110107]
[53.78377533 125.02944183]
[65.25776672 115.36778259]
[62.01749802 100.72194672]
[47.53872299 96.80211639]
[33.05994797 92.88228607]
[18.58117104 88.96245575]
[4.10239506 85.04262543]
[-10.37638092 81.12279510]
[-26.08036995 85.84685516]
[-37.83647156 74.41330719]
[-33.55101395 58.58399963]
[-17.63251114 54.64277267]
[-6.45655155 66.64402008]
[8.02222347 70.56385040]
[22.50099945 74.48368073]
[36.97977448 78.40351105]
[51.45854950 82.32334137]
[65.93732452 86.24316406]
[71.14486694 79.04570007]
[77.75985718 73.51277924]
[85.29695892 69.88648987]
[93.23971558 68.27590179]
[101.07534027 68.65688324]
[108.32757568 70.88065338]
[115.89482117 57.92932510]
[123.46206665 44.97800064]
[131.02931213 32.02667618]
[131.46238708 25.13961601]
[134.89335632 20.32939911]
[139.49118042 18.52641296]
[147.84896851 6.07059336]
[156.20674133 -6.38522625]
[164.56452942 -18.84104538]
[172.92231750 -31.29686546]
[181.28010559 -43.75268555]
[189.63787842 -56.20850372]
[197.99566650 -68.66432190]
[206.35345459 -81.12014771]
[214.71124268 -93.57596588]
[218.51576233 -110.09752655]
[235.44485474 -111.01529694]
[241.01319885 -95.00186920]
[227.16705322 -85.21817780]
[218.80926514 -72.76235962]
[210.45149231 -60.30654144]
[202.09370422 -47.85071945]
[193.73591614 -35.39490128]
[185.37814331 -22.93908119]
[177.02035522 -10.48326206]
[168.66256714 1.97255790]
[160.30477905 14.42837715]
[151.94700623 26.88419724]
[143.98063660 39.59391785]
[136.41339111 52.54524231]
[128.84614563 65.49656677]
[121.27890778 78.44789124]
[130.27206421 99.05809021]
[122.57762909 120.18751526]
[130.93540955 132.64332581]
[139.29319763 145.09915161]
[153.45504761 139.93141174]
[168.44216919 138.30369568]
[183.38323975 140.31063843]
[197.40960693 145.83552551]
[209.70579529 154.55718994]
[219.55691528 165.96853638]
[226.39022827 179.40614319]
[229.80847168 194.08876038]
[229.61289978 209.16275024]
[225.81489563 223.75173950]
[218.63525391 237.00753784]
[208.49140930 248.15946960]
[195.97308350 256.55920410]
[181.80810547 261.71835327]
[166.81999207 263.33697510]
[151.88014221 261.32098389]
[137.85713196 255.78758240]
[125.56623840 247.05847168]
[115.72204590 235.64114380]
[108.89687347 222.19940186]
[105.48753357 207.51472473]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 79]
[4 78]
[5 77]
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[22 37]
[23 36]
[24 35]
[25 34]
[26 33]
[27 32]
[43 75]
[44 74]
[45 73]
[46 72]
[49 71]
[50 70]
[51 69]
[52 68]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
[58 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
