%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCGACUCAACAGUAAGGCCCCGCGGGCGUCCUGGCCGCCAUGUGCACCGUAGUGGACCCUCGCAUUGUCCGGAGAUACCUACUCAGGCGGCAGCUCGGGCAGGGGGCCUAUGGCAUUGUGUGGAAGGCAGUGGACCGGA\
) } def
/len { sequence length } bind def

/coor [
[88.48356628 201.37049866]
[80.83851624 186.86238098]
[89.80812073 173.13365173]
[90.13995361 158.13731384]
[90.47178650 143.14099121]
[75.91378784 139.52647400]
[69.19278717 152.93647766]
[62.47178650 166.34648132]
[63.97834396 182.67626953]
[50.43518066 191.92369080]
[35.77434158 184.57577515]
[35.07764053 168.19143677]
[49.06178284 159.62547302]
[55.78278732 146.21546936]
[62.50378799 132.80546570]
[61.50395203 94.77330017]
[84.67305756 76.71435547]
[80.10097504 62.42813492]
[75.52888489 48.14191818]
[70.95680237 33.85569763]
[66.38471222 19.56948090]
[61.81262970 5.28326273]
[57.24054337 -9.00295544]
[47.11348724 -20.06834030]
[33.28725433 -25.88515282]
[19.46102333 -31.70196533]
[5.63479090 -37.51877975]
[-8.19144154 -43.33559036]
[-23.91216087 -41.55527878]
[-32.64308167 -53.62260437]
[-46.46931458 -59.43941498]
[-60.29554367 -65.25622559]
[-74.12178040 -71.07304382]
[-88.19177246 -76.27258301]
[-102.47798920 -80.84466553]
[-116.76420593 -85.41675568]
[-128.61845398 -80.20388794]
[-140.45680237 -84.36363220]
[-146.07218933 -95.13366699]
[-160.25375366 -100.02067566]
[-175.24685669 -94.31220245]
[-188.98408508 -102.59881592]
[-190.92742920 -118.52372742]
[-179.58612061 -129.87072754]
[-163.66023254 -127.93534088]
[-155.36674500 -114.20225525]
[-141.18518066 -109.31524658]
[-124.20484161 -113.61080933]
[-112.19212341 -99.70297241]
[-97.90590668 -95.13088226]
[-83.61968994 -90.55879974]
[-81.01972198 -91.79450226]
[-77.75507355 -92.03269958]
[-74.21914673 -91.00770569]
[-70.89651489 -88.60703278]
[-68.30496216 -84.89926910]
[-54.47873306 -79.08245850]
[-40.65250015 -73.26564789]
[-26.82626915 -67.44883728]
[-12.09449196 -69.64520264]
[-2.37462854 -57.16182327]
[11.45160389 -51.34500885]
[25.27783585 -45.52819824]
[39.10406876 -39.71138382]
[52.93029785 -33.89457321]
[56.94796753 -36.59547043]
[61.98714066 -37.34610748]
[70.96422577 -49.36325836]
[79.94130707 -61.38040924]
[88.91839600 -73.39756012]
[97.89547729 -85.41471863]
[106.87256622 -97.43186951]
[115.84964752 -109.44902039]
[92.62944794 -147.73191833]
[98.44625854 -161.55815125]
[104.26307678 -175.38438416]
[96.95880127 -189.21122742]
[100.30164337 -204.48731995]
[112.71321869 -213.99978638]
[128.33316040 -213.25709534]
[139.78619385 -202.60995483]
[141.66456604 -187.08558655]
[133.08135986 -174.01414490]
[118.08930206 -169.56756592]
[112.27249146 -155.74133301]
[106.45568085 -141.91510010]
[118.16888428 -132.54382324]
[129.88104248 -123.17336273]
[142.09384155 -131.88240051]
[154.30664062 -140.59144592]
[160.61305237 -155.72952271]
[176.90876770 -157.56843567]
[186.43016052 -144.21646118]
[179.38243103 -129.40898132]
[163.01568604 -128.37864685]
[150.80288696 -119.66960144]
[138.59008789 -110.96056366]
[127.86679840 -100.47193909]
[118.88971710 -88.45478058]
[109.91262817 -76.43762970]
[100.93554688 -64.42047882]
[91.95845795 -52.40332413]
[82.98137665 -40.38617325]
[74.00429535 -28.36902046]
[71.52675629 -13.57504177]
[76.09884644 0.71117628]
[80.67092896 14.99739456]
[85.24301910 29.28361320]
[89.81510925 43.56983185]
[94.38719177 57.85604858]
[98.95928192 72.14226532]
[111.91012573 70.01261139]
[126.12728882 74.29121399]
[138.38482666 85.46771240]
[145.36752319 102.42893219]
[144.44404602 122.51426697]
[154.69287109 133.46694946]
[164.94171143 144.41963196]
[175.19055176 155.37232971]
[185.43939209 166.32501221]
[195.68823242 177.27769470]
[211.29212952 176.25180054]
[223.87420654 185.53756714]
[227.49359131 200.75051880]
[220.44131470 214.70758057]
[206.04725647 220.81864929]
[191.10784912 216.19827271]
[182.67701721 203.02803040]
[184.73553467 187.52653503]
[174.48670959 176.57385254]
[164.23786926 165.62115479]
[153.98902893 154.66847229]
[143.74018860 143.71578979]
[133.49134827 132.76310730]
[126.48554230 135.44053650]
[124.11721039 150.25238037]
[112.47392273 140.79539490]
[105.46811676 143.47282410]
[105.13628387 158.46914673]
[104.80445099 173.46548462]
[113.15801239 187.57752991]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 140]
[4 139]
[5 138]
[6 15]
[7 14]
[8 13]
[17 111]
[18 110]
[19 109]
[20 108]
[21 107]
[22 106]
[23 105]
[24 65]
[25 64]
[26 63]
[27 62]
[28 61]
[30 59]
[31 58]
[32 57]
[33 56]
[34 51]
[35 50]
[36 49]
[39 47]
[40 46]
[67 104]
[68 103]
[69 102]
[70 101]
[71 100]
[72 99]
[73 98]
[74 86]
[75 85]
[76 84]
[88 97]
[89 96]
[90 95]
[116 134]
[117 133]
[118 132]
[119 131]
[120 130]
[121 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
