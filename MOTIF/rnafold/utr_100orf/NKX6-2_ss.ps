%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCGCGCAAACUUCCCGGGCCGGCGGGCAGGGGCGGCGGCGGCGGGGCCCGGAUGGGAGCCCGGGCCGGCGGCGGCGGCGCCCAUGGACACUAACCGCCCGGGCGCGUUCGUGCUGAGCAGUGCCCCGCUGGCCGCGCUGCACAACAUGGCCGAGAUGAAGACGUCGCUGUUCCCCUACGCGC\
) } def
/len { sequence length } bind def

/coor [
[15.98666000 442.68786621]
[-0.39143968 441.85723877]
[-7.61926889 427.13684082]
[1.73854303 413.66970825]
[2.49828053 398.68896484]
[3.25801802 383.70822144]
[4.01775551 368.72747803]
[4.77749300 353.74673462]
[-2.11469030 350.78906250]
[-8.03002834 364.57342529]
[-9.39643192 379.51104736]
[-24.02524948 382.82733154]
[-31.69960594 369.93917847]
[-21.81439590 358.65808105]
[-15.89905739 344.87371826]
[-22.79124069 341.91604614]
[-33.12574387 352.78793335]
[-43.46024704 363.65985107]
[-53.79475403 374.53173828]
[-53.14388657 390.32260132]
[-63.91080093 401.89193726]
[-79.70767975 402.37579346]
[-91.16251373 391.48718262]
[-91.47935486 375.68606567]
[-80.47022247 364.34698486]
[-64.66664124 364.19723511]
[-54.33214188 353.32531738]
[-43.99763489 342.45343018]
[-33.66313171 331.58154297]
[-20.03255844 309.37619019]
[0.06105332 307.68225098]
[5.97639132 293.89788818]
[11.89172935 280.11352539]
[17.80706596 266.32916260]
[23.72240448 252.54479980]
[23.47038078 245.14193726]
[29.85581398 238.57890320]
[36.00312042 224.89640808]
[42.15042496 211.21392822]
[48.29772949 197.53143311]
[54.44503403 183.84893799]
[60.59233856 170.16644287]
[66.73964691 156.48394775]
[72.88694763 142.80145264]
[79.03425598 129.11895752]
[85.18155670 115.43646240]
[79.03425598 101.75396729]
[64.72216797 97.26351929]
[50.41007614 92.77307892]
[36.09798813 88.28263092]
[21.74848557 83.91320801]
[7.36259747 79.66512299]
[-7.36028719 86.03820801]
[-21.45426941 78.37406158]
[-24.10765266 62.55195236]
[-13.28498745 50.70925522]
[2.71150279 51.93067169]
[11.61067963 65.27923584]
[25.99656868 69.52732086]
[33.31801224 68.40383911]
[40.58843231 73.97054291]
[54.90052414 78.46098328]
[69.21260834 82.95143127]
[83.52469635 87.44187927]
[90.52875519 81.79561615]
[99.18799591 79.69032288]
[103.19250488 65.23474121]
[107.19701385 50.77915192]
[111.20151520 36.32356644]
[115.20602417 21.86798286]
[119.21053314 7.41239882]
[123.21503448 -7.04318571]
[127.21954346 -21.49876976]
[131.22404480 -35.95435333]
[130.49975586 -45.08247757]
[135.42018127 -50.61918259]
[139.66827393 -65.00507355]
[143.91635132 -79.39096069]
[148.16442871 -93.77684784]
[150.56098938 -108.58415985]
[151.06759644 -123.57560730]
[151.57420349 -138.56704712]
[152.08082581 -153.55848694]
[152.58743286 -168.54992676]
[153.09403992 -183.54136658]
[142.80541992 -200.85987854]
[153.68467712 -216.82983398]
[153.68467712 -231.82983398]
[153.68467712 -246.82983398]
[141.59008789 -256.74218750]
[138.74746704 -272.11923218]
[146.49900818 -285.70037842]
[161.18467712 -291.07302856]
[175.87033081 -285.70037842]
[183.62187195 -272.11923218]
[180.77925110 -256.74218750]
[168.68467712 -246.82983398]
[168.68467712 -231.82983398]
[168.68467712 -216.82983398]
[176.54882812 -210.26367188]
[179.55235291 -200.23915100]
[176.46775818 -190.00942993]
[168.08549500 -183.03475952]
[167.57887268 -168.04331970]
[167.07226562 -153.05187988]
[166.56565857 -138.06044006]
[166.05903625 -123.06899261]
[165.55242920 -108.07755280]
[179.43473816 -102.39586639]
[189.58415222 -113.44075012]
[199.73355103 -124.48564148]
[209.88296509 -135.53051758]
[210.64505005 -151.55546570]
[223.73286438 -160.83386230]
[239.10656738 -156.24810791]
[244.97274780 -141.31602478]
[236.83140564 -127.49220276]
[220.92785645 -125.38111115]
[210.77844238 -114.33622742]
[200.62902832 -103.29134369]
[190.47962952 -92.24645996]
[180.27435303 -86.90084076]
[170.36486816 -86.28619385]
[162.55032349 -89.52876282]
[158.30224609 -75.14287567]
[154.05415344 -60.75698853]
[149.80607605 -46.37110138]
[145.67964172 -31.94984818]
[141.67512512 -17.49426460]
[137.67062378 -3.03867912]
[133.66612244 11.41690540]
[129.66160583 25.87248993]
[125.65710449 40.32807541]
[121.65259552 54.78366089]
[117.64808655 69.23924255]
[113.64358521 83.69483185]
[121.57804108 96.42449188]
[136.31990051 99.19538116]
[149.27392578 90.54490662]
[164.18478394 93.56498718]
[172.35186768 105.96798706]
[187.09371948 108.73887634]
[201.09631348 100.90899658]
[215.89335632 107.10796356]
[220.13381958 122.58045197]
[210.56478882 135.45730591]
[194.52679443 135.86048889]
[184.32283020 123.48072815]
[169.58097839 120.70983124]
[157.46781921 129.30094910]
[142.47802734 126.70087433]
[133.54899597 113.93723297]
[118.80715179 111.16634369]
[130.41590881 120.66564941]
[144.33799744 126.24913788]
[153.80465698 137.88453674]
[156.43968201 152.65127563]
[151.58166504 166.84281921]
[140.45001221 176.89697266]
[125.83882141 180.29010010]
[111.41561890 176.17050171]
[100.80071259 165.57220459]
[96.65851593 151.15547180]
[100.02902222 136.53846741]
[98.86405182 121.58377075]
[92.71674347 135.26626587]
[86.56944275 148.94876099]
[80.42213440 162.63125610]
[74.27483368 176.31375122]
[68.12752533 189.99623108]
[61.98022461 203.67872620]
[55.83291626 217.36122131]
[49.68561172 231.04371643]
[43.53830719 244.72621155]
[37.50677109 258.46014404]
[31.59143448 272.24450684]
[25.67609596 286.02886963]
[19.76075745 299.81323242]
[13.84542084 313.59759521]
[26.46150589 329.32836914]
[19.75824165 354.50646973]
[18.99850273 369.48721313]
[18.23876572 384.46795654]
[17.47902870 399.44869995]
[16.71928978 414.42944336]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 185]
[5 184]
[6 183]
[7 182]
[8 181]
[16 29]
[17 28]
[18 27]
[19 26]
[31 179]
[32 178]
[33 177]
[34 176]
[35 175]
[37 174]
[38 173]
[39 172]
[40 171]
[41 170]
[42 169]
[43 168]
[44 167]
[45 166]
[46 165]
[47 64]
[48 63]
[49 62]
[50 61]
[51 59]
[52 58]
[66 136]
[67 135]
[68 134]
[69 133]
[70 132]
[71 131]
[72 130]
[73 129]
[74 128]
[76 127]
[77 126]
[78 125]
[79 124]
[80 108]
[81 107]
[82 106]
[83 105]
[84 104]
[85 103]
[87 99]
[88 98]
[89 97]
[109 121]
[110 120]
[111 119]
[112 118]
[137 153]
[138 152]
[141 149]
[142 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
