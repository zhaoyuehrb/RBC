%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:36:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCUGGGACUGCGUCACUGGUGCGCGCCGCGGGUCAGGGCGCAAUGGCGGCGCUGGGCGGGGAUGGGCUGCGACUGCUGUCGGUGUCGCGGCCGGAGCGGCCGCCCGAGUCGGCGGCGCUGGGCGGCCUGGGCCCCGGGCUGU\
) } def
/len { sequence length } bind def

/coor [
[70.86096191 112.37722015]
[56.05856323 114.80395508]
[41.25616837 117.23068237]
[26.45376968 119.65740967]
[11.65137100 122.08414459]
[-3.15102673 124.51087189]
[-7.42577744 137.87184143]
[-17.00627327 148.02796936]
[-29.97164345 153.02644348]
[-43.75813293 151.94026184]
[-55.66601944 145.03956604]
[-63.38827896 133.72747803]
[-78.23977661 135.83294678]
[-93.09127808 137.93843079]
[-107.94277191 140.04389954]
[-122.79427338 142.14938354]
[-135.37176514 151.74713135]
[-149.05908203 145.87289429]
[-163.91058350 147.97837830]
[-178.76208496 150.08384705]
[-191.33958435 159.68161011]
[-205.02690125 153.80737305]
[-219.87840271 155.91284180]
[-234.72988892 158.01832581]
[-249.58139038 160.12379456]
[-264.43289185 162.22926331]
[-272.56091309 166.56108093]
[-279.62857056 164.21586609]
[-294.52218628 165.99909973]
[-301.96795654 179.61306763]
[-316.00817871 186.22004700]
[-331.24407959 183.27951050]
[-341.81716919 171.92216492]
[-343.66186523 156.51512146]
[-336.06884766 142.98272705]
[-321.95779419 136.52844238]
[-306.75469971 139.63409424]
[-296.30541992 151.10546875]
[-281.41180420 149.32223511]
[-266.53836060 147.37777710]
[-251.68687439 145.27229309]
[-236.83537292 143.16682434]
[-221.98387146 141.06135559]
[-207.13237000 138.95587158]
[-195.61715698 129.50871277]
[-180.86755371 135.23234558]
[-166.01606750 133.12687683]
[-151.16456604 131.02140808]
[-139.64933777 121.57424164]
[-124.89974213 127.29788208]
[-110.04824829 125.19240570]
[-95.19674683 123.08692932]
[-80.34525299 120.98145294]
[-65.49375153 118.87598419]
[-59.85030746 103.77091217]
[-47.30064392 93.49736023]
[-31.19362640 90.91856384]
[-15.88909817 96.82798004]
[-5.57775688 109.70847321]
[9.22464085 107.28174591]
[24.02703857 104.85501099]
[38.82943726 102.42828369]
[53.63183594 100.00155640]
[68.43423462 97.57482147]
[74.06083679 81.84954834]
[86.90653229 71.17569733]
[103.39625549 68.52390289]
[108.49260712 54.41620636]
[113.58896637 40.30850601]
[118.68531799 26.20080757]
[123.78167725 12.09310818]
[128.87803650 -2.01459026]
[133.97438049 -16.12228966]
[139.07073975 -30.22998810]
[144.16709900 -44.33768845]
[144.14712524 -53.54795837]
[149.52969360 -58.69379044]
[154.93049622 -72.68776703]
[160.33128357 -86.68174744]
[160.39338684 -103.63558197]
[176.70185852 -108.26918793]
[185.66900635 -93.88078308]
[174.32525635 -81.28095245]
[168.92446899 -67.28697205]
[163.52368164 -53.29299545]
[158.27479553 -39.24133301]
[153.17843628 -25.13363266]
[148.08207703 -11.02593422]
[142.98573303 3.08176446]
[137.88937378 17.18946266]
[132.79301453 31.29716301]
[127.69666290 45.40486145]
[122.60031128 59.51256180]
[117.50395203 73.62026215]
[123.53305054 78.82277679]
[128.07316589 85.36521912]
[130.83703613 92.83363342]
[145.83615112 92.99612427]
[160.83526611 93.15861511]
[175.83438110 93.32111359]
[184.52357483 90.26702881]
[191.15577698 93.65312195]
[206.14785767 94.14052582]
[221.13993835 94.62792206]
[236.13201904 95.11532593]
[251.12409973 95.60272980]
[262.48382568 84.61490631]
[278.28430176 84.96141052]
[289.15142822 96.43666840]
[288.63787842 112.23261261]
[277.04837036 122.97779083]
[261.25872803 122.29727173]
[250.63668823 110.59481049]
[235.64460754 110.10740662]
[220.65252686 109.62000275]
[205.66046143 109.13259888]
[190.66838074 108.64519501]
[175.67189026 108.32022858]
[160.67277527 108.15773773]
[145.67366028 107.99524689]
[130.67453003 107.83275604]
[128.48416138 113.81780243]
[125.13943481 119.24287415]
[120.77589417 123.88809967]
[127.65804291 137.21611023]
[134.54019165 150.54412842]
[141.42234802 163.87214661]
[148.30448914 177.20016479]
[155.18664551 190.52818298]
[162.06880188 203.85620117]
[168.95094299 217.18421936]
[175.83309937 230.51222229]
[188.47262573 241.81172180]
[181.11369324 257.08529663]
[164.39985657 254.24211121]
[162.50508118 237.39437866]
[155.62292480 224.06636047]
[148.74078369 210.73834229]
[141.85862732 197.41032410]
[134.97648621 184.08232117]
[128.09432983 170.75430298]
[121.21218109 157.42628479]
[114.33003235 144.09826660]
[107.44788361 130.77024841]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[4 61]
[5 60]
[6 59]
[12 54]
[13 53]
[14 52]
[15 51]
[16 50]
[18 48]
[19 47]
[20 46]
[22 44]
[23 43]
[24 42]
[25 41]
[26 40]
[28 39]
[29 38]
[67 94]
[68 93]
[69 92]
[70 91]
[71 90]
[72 89]
[73 88]
[74 87]
[75 86]
[77 85]
[78 84]
[79 83]
[97 121]
[98 120]
[99 119]
[100 118]
[102 117]
[103 116]
[104 115]
[105 114]
[106 113]
[124 144]
[125 143]
[126 142]
[127 141]
[128 140]
[129 139]
[130 138]
[131 137]
[132 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
