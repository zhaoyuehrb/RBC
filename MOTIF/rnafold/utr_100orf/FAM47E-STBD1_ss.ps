%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACACACCGCCCAAGCCCGGACGGUGGCCGCGAAGCUAGGGCCACCAUGGCGGACCGCAGGCGGCGGCUCCGGCCGGGGACGUUGGCCCCGGUGCGCGAGGGCGUGAACUGCAGGUCCAGAUGUUUCACAAAGCACAAGAACGGGC\
) } def
/len { sequence length } bind def

/coor [
[102.33921051 200.82452393]
[99.47010040 215.91305542]
[89.42896271 227.53506470]
[74.91681671 232.56430054]
[59.83735275 229.64790344]
[48.24687195 219.57038879]
[43.26315689 205.04255676]
[46.22679901 189.97230530]
[56.34059525 178.41346741]
[70.88398743 173.47531128]
[73.73223114 158.74821472]
[76.58046722 144.02111816]
[79.42871094 129.29400635]
[71.47590637 115.77918243]
[70.63993073 101.52819061]
[75.87947845 89.76555634]
[61.00097275 91.67082977]
[46.12246704 93.57609558]
[41.85588837 103.48619843]
[33.89555359 110.64876556]
[23.74653816 113.80084991]
[13.29001808 112.42926025]
[4.43461943 106.85278320]
[-1.23195839 98.15144348]
[-16.20155334 99.10601044]
[-31.17115021 100.06057739]
[-46.14074707 101.01514435]
[-61.11034012 101.96971130]
[-76.07994080 102.92428589]
[-91.04953003 103.87885284]
[-97.79496002 117.67721558]
[-110.54480743 126.24091339]
[-125.86943054 127.26636505]
[-139.64657593 120.47771454]
[-148.17027283 107.70108795]
[-149.14767456 92.37332916]
[-142.31588745 78.61752319]
[-129.51260376 70.13391876]
[-114.18185425 69.20455933]
[-100.44753265 76.07944489]
[-92.00410461 88.90925598]
[-77.03450775 87.95468903]
[-62.06491089 87.00011444]
[-47.09531403 86.04554749]
[-32.12571716 85.09098053]
[-17.15612221 84.13641357]
[-2.18652678 83.18184662]
[9.47903919 67.65349579]
[29.09308434 65.57006836]
[44.21719742 78.69758606]
[59.09570694 76.79232025]
[73.97421265 74.88705444]
[86.40185547 66.48743439]
[93.71727753 53.39221954]
[101.03270721 40.29700851]
[108.34812927 27.20179749]
[115.66355133 14.10658455]
[122.83958435 0.93447006]
[129.87541199 -12.31306458]
[136.91123962 -25.56059837]
[143.94705200 -38.80813217]
[137.30590820 -52.70782089]
[140.09020996 -67.67782593]
[151.02615356 -78.01557922]
[165.77583313 -79.90885925]
[172.81166077 -93.15639496]
[179.84748840 -106.40393066]
[178.74159241 -124.75272369]
[193.90655518 -133.52508545]
[200.65962219 -146.91897583]
[207.41267395 -160.31286621]
[214.02319336 -173.77766418]
[220.49043274 -187.31187439]
[226.81367493 -200.91395569]
[232.99220276 -214.58238220]
[239.17071533 -228.25080872]
[245.34922791 -241.91923523]
[251.52775574 -255.58767700]
[257.70626831 -269.25610352]
[263.88479614 -282.92453003]
[256.94677734 -296.93872070]
[260.69033813 -312.12161255]
[273.34783936 -321.30426025]
[288.94284058 -320.15093994]
[300.11181641 -309.20617676]
[301.58117676 -293.63778687]
[292.65707397 -280.79666138]
[277.55322266 -276.74600220]
[271.37469482 -263.07757568]
[265.19616699 -249.40914917]
[259.01766968 -235.74072266]
[252.83914185 -222.07229614]
[246.66062927 -208.40386963]
[240.48210144 -194.73544312]
[240.59375000 -187.29331970]
[234.02464294 -180.84463501]
[227.55740356 -167.31042480]
[227.51106262 -159.86761475]
[220.80656433 -153.55981445]
[214.05349731 -140.16592407]
[207.30044556 -126.77203369]
[210.78903198 -115.14417267]
[205.21578979 -103.90888214]
[193.09503174 -99.36810303]
[186.05920410 -86.12056732]
[179.02337646 -72.87303925]
[185.71423340 -59.59258270]
[183.27314758 -44.74316788]
[172.42948914 -34.05352402]
[157.19459534 -31.77230835]
[150.15876770 -18.52477264]
[143.12294006 -5.27723885]
[136.08711243 7.97029543]
[135.72494507 15.40443230]
[128.75875854 21.42200851]
[121.44334412 34.51721954]
[114.12791443 47.61243057]
[106.81249237 60.70764542]
[99.49707031 73.80285645]
[112.93629456 74.49250793]
[125.35665894 82.16854095]
[133.13929749 95.85823822]
[133.44741821 112.75096893]
[144.05401611 123.35756683]
[154.66061401 133.96417236]
[165.26722717 144.57077026]
[175.87382507 155.17736816]
[191.84559631 158.89682007]
[196.35079956 174.66499329]
[184.75485229 186.26094055]
[168.98667908 181.75575256]
[165.26722717 165.78398132]
[154.66061401 155.17736816]
[144.05401611 144.57077026]
[133.44741821 133.96417236]
[122.84081268 123.35756683]
[115.66956329 125.55374146]
[120.06190491 139.89624023]
[128.67132568 152.17947388]
[119.64971924 164.16323853]
[105.46466064 159.28633118]
[105.71940613 144.28858948]
[101.32706451 129.94607544]
[94.15581512 132.14225769]
[91.30757141 146.86935425]
[88.45932770 161.59645081]
[85.61108398 176.32356262]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 147]
[11 146]
[12 145]
[13 144]
[16 52]
[17 51]
[18 50]
[24 47]
[25 46]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[53 119]
[54 118]
[55 117]
[56 116]
[57 115]
[58 113]
[59 112]
[60 111]
[61 110]
[65 106]
[66 105]
[67 104]
[69 101]
[70 100]
[71 99]
[72 97]
[73 96]
[74 94]
[75 93]
[76 92]
[77 91]
[78 90]
[79 89]
[80 88]
[123 136]
[124 135]
[125 134]
[126 133]
[127 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
