%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:42:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGGAAGAAGAAGCAUAGUAUAGAAGAAAGGCAAACACAACACAUUCAACCUCUGCCACCAUGGGGAACUGGGCUGUGAAUGAGGGGCUCUCCAUUUUUGUCAUUCUGGUUUGGCUGGGGUUGAACGUCUUCCUCUUUGUCUGGUAUUACCGGGUUUAUG\
) } def
/len { sequence length } bind def

/coor [
[54.38573074 423.79141235]
[64.23125458 412.47482300]
[78.10492706 406.77209473]
[93.06297302 407.89324951]
[105.93136597 415.60031128]
[100.80106354 401.50494385]
[95.67076111 387.40954590]
[90.54045868 373.31414795]
[85.41015625 359.21875000]
[73.78649139 349.90536499]
[76.33723450 334.29110718]
[71.20693207 320.19573975]
[66.07662964 306.10034180]
[60.94632721 292.00494385]
[58.20597458 306.75250244]
[52.51066589 320.62924194]
[44.10062027 333.04983521]
[33.33056259 343.49041748]
[20.65474701 351.51062012]
[6.60782480 356.77218628]
[-8.21773243 359.05316162]
[-23.19660759 358.25735474]
[-37.69701767 354.41830444]
[-51.10735703 347.69799805]
[-62.86200714 338.37982178]
[-72.46517181 326.85684204]
[-79.51181030 313.61505127]
[-83.70470428 299.21298218]
[-84.86701202 284.25808716]
[-82.94969940 269.38113403]
[-78.03363800 255.20959473]
[-70.32617950 242.34121704]
[-60.15241241 231.31877136]
[-47.94144821 222.60714722]
[-34.20832443 216.57379150]
[-19.53228188 213.47319031]
[-4.53232718 213.43611145]
[10.15886497 216.46412659]
[23.92164612 222.42951965]
[36.17552567 231.08065796]
[46.40365982 242.05268860]
[54.17463684 254.88281250]
[59.16050339 269.02908325]
[62.05118561 254.31024170]
[56.91162109 240.33045959]
[67.16335297 228.28004456]
[70.05403137 213.56121826]
[72.94471741 198.84239197]
[75.83540344 184.12355042]
[78.72608185 169.40472412]
[81.61676788 154.68589783]
[84.50745392 139.96707153]
[87.39813995 125.24823761]
[90.28881836 110.52940369]
[85.94454956 97.23960114]
[94.99234772 86.57991028]
[97.88303375 71.86107635]
[100.77371979 57.14225006]
[103.37844086 42.37013245]
[105.69622040 27.55028534]
[108.01399994 12.73043823]
[110.33178711 -2.08940935]
[112.21755219 -16.97039986]
[113.66971588 -31.89994240]
[115.12187958 -46.82948303]
[108.75693512 -61.31388855]
[117.69002533 -73.23232269]
[119.14218903 -88.16186523]
[120.59435272 -103.09140778]
[112.57833862 -119.64395905]
[123.27517700 -133.52952576]
[124.43756104 -148.48442078]
[125.59994507 -163.43931580]
[126.76233673 -178.39421082]
[116.76327515 -190.33810425]
[118.15513611 -205.48794556]
[129.60343933 -214.94691467]
[130.76582336 -229.90179443]
[118.41100311 -239.14096069]
[113.03395081 -253.60093689]
[116.35045624 -268.66760254]
[127.30223846 -279.53323364]
[142.39462280 -282.73065186]
[156.81169128 -277.23956299]
[165.95298767 -264.81219482]
[166.90158081 -249.41401672]
[159.35476685 -235.95855713]
[145.72071838 -228.73941040]
[144.55833435 -213.78451538]
[154.40754700 -202.67018127]
[153.44175720 -187.48722839]
[141.71722412 -177.23182678]
[140.55484009 -162.27693176]
[139.39245605 -147.32203674]
[138.23007202 -132.36714172]
[145.86688232 -122.94631195]
[144.98933411 -110.44824982]
[135.52389526 -101.63924408]
[134.07173157 -86.70970154]
[132.61956787 -71.78015900]
[139.08839417 -58.36361694]
[130.05142212 -45.37731934]
[128.59925842 -30.44777870]
[127.14709473 -15.51823616]
[129.13629150 -12.55081177]
[129.75900269 -8.45840359]
[128.49610901 -3.90698433]
[125.15163422 0.22837253]
[122.83385468 15.04822063]
[120.51606750 29.86806870]
[118.19828796 44.68791580]
[120.26970673 49.04088974]
[119.59382629 54.74610138]
[115.49254608 60.03293228]
[112.60186005 74.75176239]
[109.71118164 89.47059631]
[114.05545044 102.76039886]
[105.00765228 113.42008972]
[102.11696625 128.13891602]
[99.22628021 142.85774231]
[96.33560181 157.57658386]
[93.44491577 172.29541016]
[90.55422974 187.01423645]
[87.66354370 201.73306274]
[84.77286530 216.45190430]
[81.88217926 231.17073059]
[86.81498718 246.20329285]
[76.77001953 257.20092773]
[73.87933350 271.91973877]
[75.04171753 286.87463379]
[80.17201996 300.97003174]
[85.30232239 315.06542969]
[90.43262482 329.16082764]
[102.42324829 339.48242188]
[99.50554657 354.08847046]
[104.63584900 368.18383789]
[109.76615143 382.27923584]
[114.89645386 396.37463379]
[120.02675629 410.47000122]
[128.52734375 418.04135132]
[128.48005676 428.14859009]
[136.23054504 440.99108887]
[143.98103333 453.83358765]
[151.73152161 466.67611694]
[159.48200989 479.51861572]
[167.23251343 492.36111450]
[180.59324646 502.79791260]
[174.26295471 518.52569580]
[157.39739990 516.79669189]
[154.38999939 500.11160278]
[146.63951111 487.26910400]
[138.88902283 474.42660522]
[131.13853455 461.58410645]
[123.38803864 448.74157715]
[115.63755035 435.89907837]
[113.55744934 450.75415039]
[105.03921509 463.10079956]
[91.89030457 470.31927490]
[76.90071106 470.87786865]
[63.25099945 464.65814209]
[53.83743286 452.97973633]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 139]
[6 138]
[7 137]
[8 136]
[9 135]
[11 133]
[12 132]
[13 131]
[14 130]
[43 129]
[44 128]
[46 126]
[47 125]
[48 124]
[49 123]
[50 122]
[51 121]
[52 120]
[53 119]
[54 118]
[56 116]
[57 115]
[58 114]
[59 111]
[60 110]
[61 109]
[62 108]
[63 104]
[64 103]
[65 102]
[67 100]
[68 99]
[69 98]
[71 95]
[72 94]
[73 93]
[74 92]
[77 89]
[78 88]
[141 155]
[142 154]
[143 153]
[144 152]
[145 151]
[146 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
