%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:52:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUCCUGCAGCAGCCACUGCCCUGCCCAAUCCCUCCCAUACCCCACCAUGUUGGUGGGUACCCCCAACCUGCUGACACUGGAUGAAGCUGAUGCCACCUGGACCCUCAUCAAGGAUAAGGUCAUCGAGGAGCACUUUGGGCCCAAUG\
) } def
/len { sequence length } bind def

/coor [
[44.02357864 346.76184082]
[39.17230988 352.53875732]
[33.28472137 357.23950195]
[26.59443092 360.68246460]
[19.36594582 362.73580933]
[11.88420200 363.32266235]
[4.44332743 362.42373657]
[-2.66491508 360.07821655]
[-11.27575684 372.36044312]
[-19.88659859 384.64270020]
[-28.49744034 396.92492676]
[-25.51566315 412.44540405]
[-34.45088577 425.48138428]
[-50.00199890 428.29891968]
[-62.94280243 419.22634888]
[-65.59574890 403.64633179]
[-56.38689041 390.80215454]
[-40.77967834 388.31408691]
[-32.16883850 376.03186035]
[-23.55799675 363.74960327]
[-14.94715500 351.46737671]
[-25.17598724 330.43386841]
[-21.06599617 307.29318237]
[-4.05553436 290.91027832]
[19.44908714 287.64120483]
[25.00622559 273.70855713]
[30.56336212 259.77593994]
[36.12049866 245.84330750]
[41.67763901 231.91067505]
[47.23477554 217.97804260]
[38.03905106 204.41714478]
[38.72068405 187.88069153]
[49.20924759 174.86442566]
[65.54341888 170.59857178]
[70.80558014 156.55187988]
[76.06774139 142.50517273]
[81.32991028 128.45848083]
[75.04766083 123.14817810]
[70.22289276 116.48578644]
[67.13741302 108.86045837]
[65.97144318 100.71758270]
[66.79309845 92.53279114]
[69.55437469 84.78416443]
[74.09399414 77.92430115]
[80.14678955 72.35388184]
[74.29714966 58.54151154]
[68.30222321 44.79157257]
[62.16267014 31.10559464]
[56.02312088 17.41961861]
[49.73963547 3.79912734]
[43.31291199 -9.75436687]
[36.88618851 -23.30786133]
[30.45946121 -36.86135483]
[24.03273773 -50.41484833]
[17.60601234 -63.96834564]
[11.17928696 -77.52183533]
[4.75256205 -91.07533264]
[-1.67416298 -104.62882996]
[-8.10088825 -118.18231964]
[-14.52761269 -131.73580933]
[-29.70280838 -135.51039124]
[-38.85957336 -148.18666077]
[-37.67436218 -163.77926636]
[-26.70679855 -174.92585754]
[-11.13542652 -176.36335754]
[1.68742549 -167.41302490]
[5.70719957 -152.30093384]
[-0.97411859 -138.16253662]
[5.45260620 -124.60904694]
[11.87933159 -111.05554962]
[18.30605698 -97.50205994]
[24.73278046 -83.94856262]
[31.15950584 -70.39506531]
[37.58623123 -56.84157562]
[44.01295471 -43.28808212]
[50.43968201 -29.73458672]
[56.86640549 -16.18109131]
[63.29313278 -2.62759781]
[69.03974152 2.10066962]
[69.70909882 11.28007030]
[75.84864807 24.96604729]
[81.98819733 38.65202332]
[87.63384247 43.50039291]
[88.10951996 52.69186783]
[93.95916748 66.50424194]
[103.38342285 66.13246155]
[112.54787445 68.36128235]
[120.74880981 73.01955414]
[127.35649872 79.74958038]
[131.86355591 88.03458405]
[146.72291565 85.98527527]
[161.58226013 83.93595886]
[176.44161987 81.88665009]
[191.30096436 79.83734131]
[196.83708191 76.02609253]
[202.59561157 75.68646240]
[206.82846069 78.02857971]
[221.76098633 76.60751343]
[236.69352722 75.18643951]
[251.62605286 73.76537323]
[257.75555420 61.37681961]
[269.12579346 53.71015167]
[282.69241333 52.68855286]
[294.88653564 58.47305298]
[302.55358887 69.44834900]
[317.51275635 68.34241486]
[332.47192383 67.23648071]
[343.99557495 56.07471085]
[359.88803101 58.26782990]
[367.95794678 72.13346863]
[362.01480103 87.03509521]
[346.61764526 91.54145813]
[333.57788086 82.19565582]
[318.61868286 83.30158997]
[303.65951538 84.40752411]
[295.49554443 98.61347198]
[280.33078003 105.24282074]
[264.03567505 101.51408386]
[253.04713440 88.69790649]
[238.11459351 90.11897278]
[223.18206787 91.54004669]
[208.24952698 92.96111298]
[193.35028076 94.69669342]
[178.49092102 96.74600220]
[163.63157654 98.79531097]
[148.77221680 100.84462738]
[133.91287231 102.89393616]
[121.26123047 126.57852173]
[95.37660217 133.72064209]
[90.11444092 147.76733398]
[84.85227966 161.81404114]
[79.59011841 175.86073303]
[88.04300690 186.79669189]
[89.95574188 200.37614441]
[84.93266296 213.01994324]
[74.39198303 221.44912720]
[61.16740799 223.53518677]
[55.61026764 237.46781921]
[50.05313110 251.40045166]
[44.49599457 265.33306885]
[38.93885803 279.26571655]
[33.38171768 293.19833374]
[39.30178833 297.99865723]
[44.15278244 303.86462402]
[47.74715424 310.56344604]
[49.94712448 317.83016968]
[50.66997910 325.37835693]
[49.89115143 332.91116333]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 21]
[9 20]
[10 19]
[11 18]
[25 142]
[26 141]
[27 140]
[28 139]
[29 138]
[30 137]
[34 132]
[35 131]
[36 130]
[37 129]
[45 85]
[46 84]
[47 82]
[48 81]
[49 80]
[50 78]
[51 77]
[52 76]
[53 75]
[54 74]
[55 73]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
[90 127]
[91 126]
[92 125]
[93 124]
[94 123]
[97 122]
[98 121]
[99 120]
[100 119]
[105 115]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
