%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCGCGGCCUCCUGUCUGCACCGGCAGCACCAUGUCGCUCACGGUCGUCAGCAUGGCGUGCGUUGGGUUCUUCUUGCUGCAGGGGGCCUGGCCACUCAUGGGUGGUCAGGACAAACCCUUCCUGUCUGCCC\
) } def
/len { sequence length } bind def

/coor [
[262.76074219 284.65438843]
[253.76789856 268.04116821]
[256.51550293 249.20118713]
[245.30578613 239.23411560]
[234.09608459 229.26704407]
[219.28840637 230.39318848]
[207.77818298 220.44485474]
[206.69737244 204.90556335]
[195.48765564 194.93849182]
[184.27795410 184.97142029]
[173.06825256 175.00434875]
[161.85855103 165.03727722]
[150.64884949 155.07020569]
[139.43913269 145.10313416]
[128.22943115 135.13606262]
[117.01972961 125.16898346]
[105.81002808 115.20191193]
[94.10504150 115.16918182]
[85.44948578 107.28952026]
[84.32082367 95.63903046]
[73.34785461 85.41191864]
[62.37488556 75.18479919]
[50.49245071 66.03014374]
[37.80496979 58.02840424]
[25.11748695 50.02666855]
[12.43000603 42.02492905]
[-0.25747466 34.02318954]
[-18.62655449 33.77167511]
[-26.26676750 18.01751137]
[-39.13834381 10.31539822]
[-54.95324326 9.86878204]
[-61.90167618 -3.30575967]
[-74.77325439 -11.00787258]
[-87.64482880 -18.70998573]
[-100.51640320 -26.41209793]
[-113.38797760 -34.11421204]
[-126.25955200 -41.81632233]
[-144.62948608 -41.63714981]
[-152.63691711 -57.20787811]
[-165.68551636 -64.60613251]
[-179.75505066 -58.06183243]
[-194.97769165 -61.07028198]
[-205.50001526 -72.47467041]
[-207.27600098 -87.88977814]
[-199.62271118 -101.38818359]
[-185.48301697 -107.77946472]
[-170.29389954 -104.60605621]
[-159.89590454 -93.08819580]
[-158.28726196 -77.65472412]
[-145.23866272 -70.25647736]
[-133.43876648 -73.17328644]
[-122.48223877 -67.03849030]
[-118.55744171 -54.68790054]
[-105.68586731 -46.98578644]
[-92.81429291 -39.28367233]
[-79.94271851 -31.58156013]
[-67.07113647 -23.87944794]
[-54.19956589 -16.17733574]
[-39.30532455 -16.28162575]
[-31.43622971 -2.55617714]
[-18.56465530 5.14593601]
[-6.69962597 2.50654101]
[4.11007547 8.89650440]
[7.74426460 21.33570862]
[20.43174553 29.33744621]
[33.11922455 37.33918762]
[45.80670547 45.34092712]
[58.49418640 53.34266281]
[54.95993805 38.76497269]
[60.50169754 24.82621765]
[73.08053589 16.65475464]
[88.06844330 17.25703621]
[99.95104980 26.41147041]
[104.35649872 40.74995041]
[99.66394043 54.99705124]
[87.59986115 63.91096878]
[72.60200500 64.21183014]
[83.57497406 74.43894958]
[94.54794312 84.66606140]
[110.95566559 87.96555328]
[115.77709961 103.99221039]
[126.98680115 113.95928192]
[138.19650269 123.92635345]
[149.40620422 133.89341736]
[160.61592102 143.86048889]
[171.82562256 153.82757568]
[183.03532410 163.79464722]
[194.24502563 173.76171875]
[205.45472717 183.72879028]
[216.66444397 193.69586182]
[232.22349548 192.95185852]
[243.44973755 203.21957397]
[244.06315613 218.05732727]
[255.27285767 228.02439880]
[266.48257446 237.99148560]
[277.23339844 233.57608032]
[288.80392456 233.53742981]
[299.48825073 237.84230042]
[307.72573853 245.81996155]
[312.32904053 256.26635742]
[312.65518188 267.62570190]
[308.69491577 278.22222900]
[319.17645264 288.95245361]
[329.65798950 299.68264771]
[340.13955688 310.41284180]
[350.62109375 321.14306641]
[361.10263062 331.87326050]
[376.28060913 336.33859253]
[379.63919067 350.84957886]
[390.12072754 361.57980347]
[400.60226440 372.30999756]
[411.08383179 383.04019165]
[421.56536865 393.77041626]
[436.89871216 391.38964844]
[450.68762207 398.50625610]
[457.62994385 412.38369751]
[455.05624390 427.68585205]
[443.95614624 438.52871704]
[428.59786987 440.74298096]
[414.88699341 433.47723389]
[408.09561157 419.52526855]
[410.83514404 404.25195312]
[400.35360718 393.52175903]
[389.87207031 382.79153442]
[379.39053345 372.06134033]
[368.90899658 361.33114624]
[354.48071289 357.63330078]
[350.37243652 342.35479736]
[339.89086914 331.62460327]
[329.40933228 320.89440918]
[318.92779541 310.16418457]
[308.44625854 299.43399048]
[297.96472168 288.70379639]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 95]
[4 94]
[5 93]
[8 90]
[9 89]
[10 88]
[11 87]
[12 86]
[13 85]
[14 84]
[15 83]
[16 82]
[17 81]
[20 79]
[21 78]
[22 77]
[23 68]
[24 67]
[25 66]
[26 65]
[27 64]
[29 61]
[30 60]
[32 58]
[33 57]
[34 56]
[35 55]
[36 54]
[37 53]
[39 50]
[40 49]
[102 133]
[103 132]
[104 131]
[105 130]
[106 129]
[107 128]
[109 126]
[110 125]
[111 124]
[112 123]
[113 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
