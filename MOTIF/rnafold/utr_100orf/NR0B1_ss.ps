%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGCGCCGCGGGCCAUGGCGGGCGAGAACCACCAGUGGCAGGGCAGCAUCCUCUACAACAUGCUUAUGAGCGCGAAGCAAACGCGCGCGGCUCCUGAGGCUCCAGAGACGCGGC\
) } def
/len { sequence length } bind def

/coor [
[182.57369995 242.67582703]
[175.54757690 229.42314148]
[168.52143860 216.17045593]
[161.49531555 202.91777039]
[148.69775391 195.29730225]
[149.06964111 179.48046875]
[142.04351807 166.22778320]
[135.01737976 152.97509766]
[127.99126434 139.72241211]
[120.96513367 126.46974182]
[101.83498383 131.89817810]
[84.12190247 125.61282349]
[73.95417023 111.11796570]
[59.09148788 113.14296722]
[44.22880554 115.16796875]
[29.36612129 117.19296265]
[14.53221989 119.41903687]
[-0.27017826 121.84576416]
[-15.07257652 124.27249146]
[-27.43919563 134.14048767]
[-41.25056076 128.56416321]
[-56.05295944 130.99089050]
[-63.87806320 144.52978516]
[-78.59265900 149.82269287]
[-93.24895477 144.37045288]
[-100.92670441 130.74745178]
[-98.00070190 115.38604736]
[-85.85252380 105.53943634]
[-70.21816254 105.85688019]
[-58.47969055 116.18849182]
[-43.67729187 113.76175690]
[-32.36943817 104.06734467]
[-17.49930573 109.47010040]
[-2.69690824 107.04336548]
[12.10548973 104.61663818]
[18.27905846 100.37284851]
[27.34111977 102.33028412]
[42.20380402 100.30528259]
[57.06648636 98.28028107]
[71.92916870 96.25527954]
[76.77761078 83.79151917]
[86.80486298 74.94241333]
[83.58030701 60.29310226]
[80.35575104 45.64379501]
[77.13119507 30.99448776]
[73.90663910 16.34517860]
[58.90159225 14.06196404]
[45.73654556 6.50908995]
[36.19195557 -5.29198027]
[31.55865288 -19.74524879]
[32.46325684 -34.89602661]
[38.78342056 -48.69530106]
[49.66439819 -59.27682877]
[63.63462830 -65.20954895]
[78.80474854 -65.69110870]
[93.12312317 -60.65637589]
[104.65332031 -50.78626251]
[111.83596039 -37.41561890]
[113.69966125 -22.35271645]
[109.99236298 -7.63468599]
[101.21546173 4.74797821]
[88.55594635 13.12062263]
[91.78050232 27.76993179]
[95.00505829 42.41923904]
[98.22961426 57.06854630]
[101.45417023 71.71785736]
[108.83320618 71.94898987]
[116.16836548 74.14012146]
[122.93214417 78.27665710]
[128.60394287 84.20086670]
[132.70899963 91.61518097]
[146.32263184 85.31684875]
[159.93626404 79.01850891]
[173.54989624 72.72017670]
[187.16352844 66.42183685]
[191.08135986 51.28299332]
[203.84361267 42.24644852]
[219.42431641 43.57897949]
[230.46675110 54.65140915]
[231.75701904 70.23567200]
[222.68588257 82.97335815]
[207.53646851 86.85012054]
[193.46186829 80.03546906]
[179.84823608 86.33380127]
[166.23460388 92.63214111]
[152.62097168 98.93048096]
[139.00733948 105.22881317]
[134.21781921 119.44361115]
[141.24394226 132.69628906]
[148.27006531 145.94897461]
[155.29618835 159.20166016]
[162.32232666 172.45433044]
[175.62243652 181.02273560]
[174.74800110 195.89164734]
[181.77412415 209.14433289]
[188.80024719 222.39701843]
[195.82638550 235.64968872]
[214.05633545 240.40449524]
[222.99218750 256.63082886]
[217.45652771 273.97735596]
[225.18983459 286.83023071]
[233.09648132 299.57717896]
[241.17498779 312.21591187]
[255.97378540 319.28186035]
[256.98394775 335.64987183]
[243.16633606 344.48193359]
[228.73529053 336.69238281]
[228.53625488 320.29443359]
[220.45774841 307.65570068]
[214.11981201 303.66156006]
[212.33697510 294.56353760]
[204.60366821 281.71066284]
[193.04383850 281.39703369]
[182.99870300 275.42797852]
[177.07551575 265.21591187]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 97]
[2 96]
[3 95]
[4 94]
[6 92]
[7 91]
[8 90]
[9 89]
[10 88]
[13 40]
[14 39]
[15 38]
[16 37]
[17 35]
[18 34]
[19 33]
[21 31]
[22 30]
[42 66]
[43 65]
[44 64]
[45 63]
[46 62]
[71 87]
[72 86]
[73 85]
[74 84]
[75 83]
[100 112]
[101 111]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
