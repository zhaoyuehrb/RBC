%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGCUCCAGGAGGGACGGCGUAGCUCGCGGGAGGACCAUGGCGUCCCCGGCGCUGGCGGCGGCGCUGGCGGUGGCGGCAGCGGCGGGCCCCAAUGCGAGCGGCGCGGGCGAGAGGGGCAGCGGCGGGGUUGCCAAUG\
) } def
/len { sequence length } bind def

/coor [
[-26.58564568 243.37693787]
[-33.97090149 243.12969971]
[-40.73042297 240.31848145]
[-52.72467422 249.32614136]
[-64.51229858 258.60256958]
[-76.08726501 268.14300537]
[-87.66223145 277.68344116]
[-99.23719788 287.22390747]
[-100.56915283 304.62603760]
[-113.78786469 315.49966431]
[-130.45152283 313.52938843]
[-141.80792236 323.32901001]
[-153.16432190 333.12860107]
[-154.47566223 348.65014648]
[-166.13226318 358.42654419]
[-180.92160034 357.08074951]
[-192.27799988 366.88034058]
[-200.31959534 381.80578613]
[-216.88787842 378.21023560]
[-218.01940918 361.29409790]
[-202.07759094 355.52392578]
[-190.72119141 345.72433472]
[-189.88761902 330.89730835]
[-178.51022339 320.79733276]
[-162.96391296 321.77218628]
[-151.60751343 311.97259521]
[-140.25111389 302.17300415]
[-141.10437012 289.26708984]
[-134.24378967 278.07296753]
[-121.99806213 272.82141113]
[-108.77764130 275.64892578]
[-97.20267487 266.10848999]
[-85.62770844 256.56805420]
[-74.05274200 247.02758789]
[-72.71019745 242.36418152]
[-68.37359619 238.52841187]
[-61.73233414 237.33189392]
[-49.73808289 228.32423401]
[-43.46865082 206.77165222]
[-20.51685905 203.57339478]
[-9.61487484 193.27064514]
[1.28710938 182.96789551]
[12.18909359 172.66513062]
[23.09107780 162.36238098]
[27.02687836 147.99719238]
[42.37119675 144.14199829]
[53.27318192 133.83924866]
[64.17516327 123.53649139]
[75.07714844 113.23374176]
[85.97913361 102.93098450]
[90.16159821 89.58937073]
[103.71811676 86.16703033]
[114.62009430 75.86428070]
[125.52207947 65.56152344]
[136.42407227 55.25876999]
[147.32604980 44.95601654]
[157.25335693 33.71107864]
[166.12489319 21.61580086]
[167.66789246 3.30560279]
[183.92648315 -3.20310307]
[192.52241516 -15.49578285]
[201.11834717 -27.78846169]
[202.68589783 -43.53182220]
[216.32022095 -49.52802277]
[224.91615295 -61.82070160]
[233.51208496 -74.11338043]
[242.10801697 -86.40605927]
[243.67555237 -102.14942169]
[257.30987549 -108.14562225]
[265.90582275 -120.43830109]
[274.50173950 -132.73097229]
[276.06927490 -148.47433472]
[289.70361328 -154.47053528]
[298.29956055 -166.76321411]
[306.89547729 -179.05589294]
[309.27957153 -187.96313477]
[315.82717896 -191.52626038]
[324.69873047 -203.62153625]
[333.57025146 -215.71681213]
[328.71389771 -230.45436096]
[333.47958374 -245.22149658]
[346.03482056 -254.33992004]
[361.55184937 -254.30345154]
[374.06405640 -245.12609863]
[378.76025391 -230.33673096]
[373.83465576 -215.62217712]
[361.18127441 -206.64047241]
[345.66552734 -206.84527588]
[336.79400635 -194.75000000]
[327.92245483 -182.65472412]
[319.18817139 -170.45996094]
[310.59222412 -158.16728210]
[301.99630737 -145.87460327]
[301.04357910 -131.01049805]
[286.79443359 -124.13504791]
[278.19848633 -111.84236908]
[269.60256958 -99.54969025]
[268.64987183 -84.68558502]
[254.40069580 -77.81012726]
[245.80476379 -65.51744843]
[237.20883179 -53.22476959]
[228.61289978 -40.93209076]
[227.66018677 -26.06798553]
[213.41102600 -19.19253159]
[204.81509399 -6.89985228]
[196.21916199 5.39282751]
[198.01084900 17.40928268]
[190.87794495 27.73668289]
[178.22016907 30.48734283]
[169.34863281 42.58261871]
[184.12533569 40.00401306]
[197.67132568 46.44652557]
[204.99597168 59.53657913]
[203.40069580 74.45150757]
[193.47323608 85.69631195]
[178.87109375 89.12813568]
[164.97402954 83.48263550]
[156.90205383 70.83972931]
[157.62879944 55.85799789]
[146.72682190 66.16075134]
[135.82482910 76.46350861]
[124.92285156 86.76625824]
[114.02086639 97.06901550]
[109.83840179 110.41062927]
[96.28188324 113.83296967]
[85.37990570 124.13571930]
[74.47792053 134.43847656]
[63.57593536 144.74122620]
[52.67395020 155.04399109]
[47.95836639 170.14610291]
[33.39383316 173.26437378]
[22.49184799 183.56712341]
[11.58986378 193.86987305]
[0.68787932 204.17262268]
[-10.21410465 214.47538757]
[-8.68559742 222.05519104]
[-9.91909885 229.61906433]
[-13.70815277 236.20161438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 38]
[4 37]
[5 34]
[6 33]
[7 32]
[8 31]
[11 27]
[12 26]
[13 25]
[16 22]
[17 21]
[40 135]
[41 134]
[42 133]
[43 132]
[44 131]
[46 129]
[47 128]
[48 127]
[49 126]
[50 125]
[52 123]
[53 122]
[54 121]
[55 120]
[56 119]
[57 110]
[58 109]
[60 106]
[61 105]
[62 104]
[64 102]
[65 101]
[66 100]
[67 99]
[69 97]
[70 96]
[71 95]
[73 93]
[74 92]
[75 91]
[77 90]
[78 89]
[79 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
