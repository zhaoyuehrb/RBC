%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:25:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCCAAGACCAGCCUCGUGACAGCGUUCAUCCUCACGGGCCUUCCCCAUGCCCCAGGGCUGGACGCCCCACUCUUUGGAAUCUUCCUGGUGGUUUACG\
) } def
/len { sequence length } bind def

/coor [
[89.15846252 293.52282715]
[73.95870972 295.31893921]
[59.66945648 289.83477783]
[49.57427597 278.33059692]
[45.99296951 263.44998169]
[49.74848938 248.61238098]
[59.97784805 237.22735596]
[74.33041382 231.91110229]
[76.19189453 217.02705383]
[78.05337524 202.14302063]
[79.91485596 187.25897217]
[81.77633667 172.37492371]
[83.63781738 157.49087524]
[81.30329132 150.33715820]
[85.79563904 142.17558289]
[88.11911011 127.35662079]
[72.87132263 112.39253235]
[71.54312897 91.06989288]
[84.81603241 74.32925415]
[80.67150116 59.91318893]
[76.52697754 45.49712372]
[63.97985840 40.31592941]
[56.86034012 28.98838997]
[57.61074448 15.82632732]
[65.72711182 5.68697119]
[62.03292465 -8.85101414]
[58.33874130 -23.38899803]
[54.64455795 -37.92698288]
[50.95037460 -52.46496964]
[47.25619125 -67.00295258]
[43.56200790 -81.54093933]
[39.64218140 -96.01971436]
[35.49765396 -110.43577576]
[31.35312843 -124.85184479]
[27.20860100 -139.26791382]
[17.21053696 -144.08917236]
[11.71684265 -153.47799683]
[12.38425159 -164.11326599]
[18.73870087 -172.38957214]
[15.49843311 -187.03541565]
[12.25816536 -201.68125916]
[9.01789761 -216.32710266]
[-5.49100447 -221.57069397]
[-14.84360600 -233.83985901]
[-16.05552483 -249.21954346]
[-8.74004173 -262.80215454]
[4.76849842 -270.25350952]
[20.15956879 -269.19595337]
[32.52193832 -259.96688843]
[37.91081619 -245.51132202]
[34.60663223 -230.44195557]
[23.66374016 -219.56736755]
[26.90400696 -204.92152405]
[30.14427376 -190.27568054]
[33.38454056 -175.62983704]
[47.50119019 -162.57101440]
[41.62466431 -143.41242981]
[45.76919174 -128.99636841]
[49.91371918 -114.58030701]
[54.05824280 -100.16423798]
[59.01900101 -94.50594330]
[58.09999466 -85.23512268]
[61.79417801 -70.69713593]
[65.48835754 -56.15915298]
[69.18254089 -41.62116623]
[72.87672424 -27.08318138]
[76.57090759 -12.54519749]
[80.26509857 1.99278772]
[95.02767181 9.87984467]
[99.69241333 26.30296326]
[90.94303894 41.35259628]
[95.08757019 55.76866150]
[99.23209381 70.18472290]
[108.19446564 71.32263947]
[116.40496826 75.09181976]
[123.11023712 81.14643097]
[127.69505310 88.93093109]
[129.73873901 97.73106384]
[129.05375671 106.73937988]
[142.34393311 113.69433594]
[155.63409424 120.64929199]
[171.98779297 119.42910767]
[180.99647522 133.13223267]
[173.39279175 147.66206360]
[156.99874878 148.07156372]
[148.67915344 133.93945312]
[135.38897705 126.98450470]
[122.09880829 120.02955627]
[113.41620636 126.63729858]
[102.93807220 129.68009949]
[100.61459351 144.49905396]
[98.52186584 159.35235596]
[96.66038513 174.23640442]
[94.79890442 189.12045288]
[92.93742371 204.00450134]
[91.07594299 218.88854980]
[89.21446228 233.77258301]
[101.81567383 242.45982361]
[108.92606354 256.01345825]
[108.91172028 271.31896973]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 97]
[9 96]
[10 95]
[11 94]
[12 93]
[13 92]
[15 91]
[16 90]
[19 73]
[20 72]
[21 71]
[25 68]
[26 67]
[27 66]
[28 65]
[29 64]
[30 63]
[31 62]
[32 60]
[33 59]
[34 58]
[35 57]
[39 55]
[40 54]
[41 53]
[42 52]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
