%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:17:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCUCUCCCCUUCCUCCCCAGACACGGCCUACCCACCCCUGGCAACCAACAUGGCCAACUUCACACCUGUCAAUGGCAGCUCGGGCAAUCAGUCCGUGCGCCUGGUCACGUCAUCAUCCCACAAUCGCUAUGAGACGGUGGAAAUGGUCU\
) } def
/len { sequence length } bind def

/coor [
[55.91424179 310.23880005]
[59.15026474 324.94329834]
[59.25794220 339.99923706]
[56.23257065 354.74850464]
[50.20640182 368.54629517]
[41.44287872 380.78942871]
[30.32509995 390.94268799]
[17.33909035 398.56222534]
[3.05254364 403.31494141]
[-11.90999699 404.99307251]
[-26.89443016 403.52322388]
[-41.24570465 398.96969604]
[-54.33644104 391.53152466]
[-65.59436798 381.53390503]
[-74.52734375 369.41384888]
[-80.74485016 355.70120239]
[-83.97509003 340.99545288]
[-84.07684326 325.93945312]
[-81.04566956 311.19137573]
[-75.01407623 297.39596558]
[-66.24573517 285.15628052]
[-55.12396240 275.00738525]
[-42.13495636 267.39297485]
[-27.84654045 262.64587402]
[-12.88334084 260.97363281]
[2.10051417 262.44937134]
[16.44999504 267.00854492]
[23.86032104 253.96679688]
[31.27064705 240.92506409]
[38.68097305 227.88331604]
[31.42616272 213.18992615]
[34.36586761 196.90045166]
[46.54051971 185.44256592]
[63.30749512 183.45642090]
[70.44670868 170.26431274]
[77.58592224 157.07220459]
[84.72512817 143.88009644]
[91.86434174 130.68800354]
[80.77419281 122.97750854]
[74.46939087 111.90949249]
[73.61642456 99.97058868]
[59.24001312 95.69054413]
[44.86359787 91.41049957]
[27.95769882 92.68599701]
[22.05202866 76.79388428]
[35.68822098 66.71963501]
[49.14364243 77.03408813]
[63.52005386 81.31413269]
[77.89646912 85.59417725]
[81.72292328 80.97258759]
[86.49463654 77.33506775]
[91.96482086 74.86974335]
[97.85057068 73.70410919]
[100.92880249 59.02335358]
[104.00703430 44.34260178]
[107.08526611 29.66184998]
[110.16349792 14.98109722]
[113.24172211 0.30034450]
[102.85858917 11.12579823]
[89.56487274 18.07397270]
[74.74931335 20.41902351]
[59.95962906 17.91597366]
[46.74083328 10.82630348]
[36.47383118 -0.10935777]
[30.23117638 -13.74861145]
[28.66500664 -28.66662407]
[31.93893433 -43.30497742]
[39.71094513 -56.13446808]
[51.16913605 -65.81485748]
[65.11651611 -71.33486938]
[80.09606934 -72.11786652]
[94.54293823 -68.08203888]
[106.94793701 -59.64900208]
[116.01515198 -47.69971085]
[120.79738617 -33.48246002]
[120.79483795 -18.48114395]
[128.73779297 -31.20551491]
[136.68072510 -43.92988586]
[138.59022522 -52.92863464]
[144.92161560 -56.83277130]
[153.12583923 -69.39026642]
[154.19641113 -85.17520905]
[167.63497925 -91.59815216]
[175.83920288 -104.15565491]
[184.04342651 -116.71315002]
[192.24765015 -129.27064514]
[200.45187378 -141.82814026]
[198.58010864 -157.76162720]
[209.97229004 -169.05754089]
[225.88932800 -167.05061340]
[234.12101746 -153.28039551]
[228.35270691 -138.31022644]
[213.00936890 -133.62391663]
[204.80514526 -121.06642151]
[196.60092163 -108.50892639]
[188.39669800 -95.95143127]
[180.19247437 -83.39393616]
[179.70872498 -68.50718689]
[165.68333435 -61.18604660]
[157.47911072 -48.62854767]
[149.40510559 -35.98693848]
[141.46215820 -23.26256943]
[133.51921082 -10.53819847]
[127.92247772 3.37857461]
[124.84424591 18.05932808]
[121.76601410 32.74008179]
[118.68778992 47.42083359]
[115.60955811 62.10158539]
[112.53132629 76.78234100]
[128.41018677 93.86122894]
[125.26913452 119.22011566]
[139.00573730 125.24554443]
[152.74234009 131.27098083]
[161.92236328 131.86314392]
[166.69854736 137.56550598]
[180.30767822 143.87353516]
[193.91682434 150.18157959]
[207.52595520 156.48960876]
[219.28457642 146.75834656]
[234.10302734 143.10098267]
[249.03909302 146.24369812]
[261.12719727 155.56250000]
[267.96728516 169.20715332]
[268.20117188 184.46847534]
[261.78250122 198.31632996]
[249.98564148 208.00122070]
[235.15290833 211.60020447]
[220.22933960 208.39869690]
[208.17800903 199.03236389]
[201.39172363 185.36088562]
[201.21792603 170.09875488]
[187.60877991 163.79071045]
[173.99964905 157.48268127]
[160.39050293 151.17463684]
[146.71690369 145.00758362]
[132.98030090 138.98214722]
[119.24370575 132.95671082]
[105.05644989 137.82720947]
[97.91723633 151.01931763]
[90.77802277 164.21142578]
[83.63881683 177.40353394]
[76.49960327 190.59562683]
[83.37162018 202.58526611]
[83.40520477 216.29617310]
[76.69892883 228.13059998]
[65.10582733 235.03633118]
[51.72271729 235.29364014]
[44.31238937 248.33538818]
[36.90206528 261.37713623]
[29.49173927 274.41888428]
[40.75360107 284.41207886]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[27 150]
[28 149]
[29 148]
[30 147]
[34 142]
[35 141]
[36 140]
[37 139]
[38 138]
[41 49]
[42 48]
[43 47]
[53 109]
[54 108]
[55 107]
[56 106]
[57 105]
[58 104]
[76 103]
[77 102]
[78 101]
[80 100]
[81 99]
[83 97]
[84 96]
[85 95]
[86 94]
[87 93]
[111 137]
[112 136]
[113 135]
[115 134]
[116 133]
[117 132]
[118 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
