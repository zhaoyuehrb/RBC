%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUCACAAUUGCUCUACAGCUCAGAGCAGCAACUGCUGAGGCUGCCUUGGGAAGAAGAUGAUCCUAAACAAAGCUCUGCUGCUGGGGGCCCUCGCCCUGACUGCCGUGAUGAGCCCCUGUGGAGGUGAAGACAUUGUGGCUGACCAUGUUGCCUCCU\
) } def
/len { sequence length } bind def

/coor [
[95.71342468 129.21902466]
[88.06211090 132.69898987]
[76.60325623 142.37860107]
[65.14440918 152.05819702]
[53.68555450 161.73779297]
[42.22669983 171.41740417]
[30.86403084 181.20973206]
[19.59865570 191.11383057]
[14.07767677 211.78372192]
[-6.25214958 215.17228699]
[-16.91101456 225.72637939]
[-27.56987953 236.28045654]
[-38.22874451 246.83453369]
[-48.88760757 257.38861084]
[-59.54647064 267.94268799]
[-70.20533752 278.49676514]
[-68.73916626 294.06546021]
[-77.66587067 306.90478516]
[-92.77053833 310.95239258]
[-106.92120361 304.29711914]
[-113.43636322 290.08139038]
[-109.23974609 275.01742554]
[-96.31287384 266.21801758]
[-80.75941467 267.83792114]
[-70.10055542 257.28384399]
[-59.44168854 246.72975159]
[-48.78282166 236.17567444]
[-38.12395859 225.62159729]
[-27.46509361 215.06750488]
[-16.80622864 204.51342773]
[-18.21763229 195.65385437]
[-15.32081604 187.01731873]
[-8.65357494 180.60917664]
[0.35605204 177.97924805]
[9.69454956 179.84846497]
[20.95992470 169.94435120]
[23.92273712 163.12976074]
[32.54710007 159.95854187]
[44.00595093 150.27894592]
[55.46480560 140.59934998]
[66.92366028 130.91973877]
[78.38250732 121.24014282]
[78.45660400 113.74050903]
[64.14560699 118.23442078]
[55.44944382 106.01244354]
[64.38613129 93.96521759]
[78.60478973 98.74124146]
[78.67888641 91.24160767]
[67.41350555 81.33750153]
[56.14813232 71.43338776]
[44.88275909 61.52928543]
[33.61738205 51.62517929]
[22.35200691 41.72107315]
[7.54730463 46.05977249]
[-7.24641705 41.68377304]
[-17.30853462 29.98944473]
[-19.42826271 14.70840073]
[-12.92920303 0.71676856]
[0.11481669 -7.52077341]
[15.54149723 -7.37565565]
[28.42824173 1.10581613]
[34.66293716 15.21723461]
[32.25611496 30.45569801]
[43.52148819 40.35980225]
[54.78686523 50.26390839]
[66.05223846 60.16801453]
[77.31761169 70.07212067]
[88.58299255 79.97622681]
[103.47770691 78.20213318]
[112.10157013 65.92903137]
[120.72544098 53.65593719]
[117.39124298 36.50915146]
[127.27340698 22.51594925]
[143.88124084 20.02359200]
[152.26094055 7.58250761]
[160.64064026 -4.85857773]
[169.02033997 -17.29966354]
[169.45001221 -37.41854477]
[187.09452820 -45.25186157]
[194.97618103 -58.01428986]
[195.64428711 -73.82138062]
[208.91485596 -80.58459473]
[216.79650879 -93.34701538]
[211.71490479 -111.55463409]
[221.34312439 -127.45173645]
[239.21133423 -131.25045776]
[246.58264160 -144.31430054]
[253.95393372 -157.37812805]
[261.32525635 -170.44197083]
[268.69653320 -183.50581360]
[267.99356079 -199.88989258]
[281.97442627 -208.46121216]
[296.25680542 -200.40234375]
[296.14822388 -184.00355530]
[281.76037598 -176.13450623]
[274.38906860 -163.07067871]
[267.01779175 -150.00683594]
[259.64648438 -136.94299316]
[252.27517700 -123.87915039]
[257.66784668 -113.75473022]
[257.47726440 -102.16503906]
[251.63471985 -92.01501465]
[241.50273132 -85.90509033]
[229.55894470 -85.46536255]
[221.67729187 -72.70293427]
[221.57293701 -57.80869675]
[207.73861694 -50.13263321]
[199.85694885 -37.37020874]
[203.10488892 -27.61338806]
[200.36112976 -17.47462463]
[192.30534363 -10.39634705]
[181.46142578 -8.91996193]
[173.08172607 3.52112365]
[164.70202637 15.96220875]
[156.32232666 28.40329361]
[160.53761292 40.61218262]
[156.88090515 53.20294189]
[146.47671509 61.49755478]
[132.99853516 62.27980423]
[124.37467194 74.55290222]
[115.75080109 86.82599640]
[116.93507385 101.77917480]
[127.38333893 112.54178619]
[137.83160400 123.30438995]
[148.27987671 134.06700134]
[158.72813416 144.82960510]
[169.17640686 155.59222412]
[174.30253601 157.03977966]
[177.96510315 160.03283691]
[179.81785583 163.74037170]
[179.90121460 167.31565857]
[189.69354248 178.67831421]
[199.48587036 190.04098511]
[209.27819824 201.40365601]
[219.07054138 212.76632690]
[233.94068909 218.16903687]
[236.38824463 232.86116028]
[246.18057251 244.22383118]
[262.00878906 246.84059143]
[269.70553589 260.91677856]
[263.36654663 275.65438843]
[247.85453796 279.74795532]
[235.06900024 270.05725098]
[234.81790161 254.01615906]
[225.02557373 242.65348816]
[210.85583496 238.06352234]
[207.70787048 222.55865479]
[197.91554260 211.19598389]
[188.12319946 199.83332825]
[178.33087158 188.47065735]
[168.53854370 177.10798645]
[158.41378784 166.04048157]
[147.96553040 155.27787781]
[137.51725769 144.51527405]
[127.06900024 133.75265503]
[116.62073517 122.99005127]
[106.17247009 112.22743988]
[104.93501282 118.32233429]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 42]
[3 41]
[4 40]
[5 39]
[6 38]
[7 36]
[8 35]
[10 30]
[11 29]
[12 28]
[13 27]
[14 26]
[15 25]
[16 24]
[48 68]
[49 67]
[50 66]
[51 65]
[52 64]
[53 63]
[69 121]
[70 120]
[71 119]
[74 115]
[75 114]
[76 113]
[77 112]
[79 108]
[80 107]
[82 105]
[83 104]
[86 99]
[87 98]
[88 97]
[89 96]
[90 95]
[122 157]
[123 156]
[124 155]
[125 154]
[126 153]
[127 152]
[131 151]
[132 150]
[133 149]
[134 148]
[135 147]
[137 145]
[138 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
