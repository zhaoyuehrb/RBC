%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:29:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCAUUCCCUACCCAGCAGCCCUCGCGCGGUCCGGCACAGCGGACACCAGGACUCCAAAAUGGCGUCAGUUGUACCAGUGAAGGACAAGAAACUUCUGGAGGUCAAACUGGGGGAGCUGCCAAGCUGGAUCUUGAUGCGGGACUUCAGUCCUAGUGGCA\
) } def
/len { sequence length } bind def

/coor [
[190.69242859 392.22555542]
[205.68916321 392.53854370]
[218.58581543 400.19638062]
[213.15113831 386.21551514]
[207.71646118 372.23464966]
[202.28178406 358.25381470]
[196.84710693 344.27294922]
[182.95347595 343.86773682]
[170.22734070 338.17120361]
[160.61015320 328.01611328]
[155.58285522 314.91809082]
[155.93800354 300.84951782]
[161.65487671 287.94250488]
[171.89772034 278.16577148]
[166.73686218 264.08154297]
[161.57601929 249.99729919]
[156.41516113 235.91307068]
[151.25431824 221.82882690]
[145.41281128 208.01301575]
[138.90455627 194.49847412]
[132.39630127 180.98394775]
[125.75650024 167.53355408]
[118.98579407 154.14857483]
[112.21508026 140.76361084]
[105.44437408 127.37863922]
[97.77707672 130.71719360]
[88.74337006 131.74356079]
[79.07476044 129.98330688]
[69.65160370 125.19840240]
[61.42658615 117.43037415]
[55.33655167 107.01892853]
[40.37151718 108.04256439]
[25.40648651 109.06620026]
[10.44145489 110.08983612]
[-4.52357626 111.11347198]
[-14.72000122 123.18859100]
[-30.47516251 124.43375397]
[-42.44180298 114.11023712]
[-43.52032471 98.34278870]
[-33.07086182 86.48596954]
[-17.29289627 85.57421112]
[-5.54721260 96.14844513]
[9.41781902 95.12480927]
[24.38285065 94.10117340]
[39.34788132 93.07753754]
[54.31291199 92.05390167]
[56.89333725 85.01177979]
[41.90365219 84.45560455]
[37.80072403 70.02764130]
[50.25475693 61.66719818]
[62.05418777 70.92755127]
[64.63461304 63.88543320]
[53.87392807 53.43518448]
[43.11324310 42.98493958]
[27.82284355 38.92116928]
[24.08301163 24.50371742]
[13.32232666 14.05347061]
[2.56164122 3.60322428]
[-13.01340294 -3.09411430]
[-10.88939953 -19.91448784]
[5.86160898 -22.52983475]
[13.01188755 -7.15746117]
[23.77257347 3.29278541]
[34.53325653 13.74303246]
[49.05398178 17.05932999]
[53.56349182 32.22425461]
[64.32417297 42.67449951]
[75.08486176 53.12474823]
[89.70877838 49.78693390]
[94.86962891 35.70270157]
[100.03047943 21.61846733]
[105.19132996 7.53423357]
[98.79232788 -6.66754532]
[104.22679901 -20.87744141]
[117.80545807 -26.89039230]
[122.96630859 -40.97462463]
[128.12716675 -55.05885696]
[118.51421356 -68.94668579]
[119.04910278 -85.66249847]
[129.32444763 -98.64714813]
[145.14955139 -102.92311096]
[150.03460693 -117.10536194]
[154.91967773 -131.28761292]
[159.80473328 -145.46986389]
[150.16972351 -157.51852417]
[148.60098267 -172.86592102]
[155.59906006 -186.61474609]
[168.93092346 -194.37780762]
[184.34240723 -193.67794800]
[196.91575623 -184.73846436]
[202.63888550 -170.41194153]
[199.68554688 -155.26989746]
[188.99813843 -144.14411926]
[173.98698425 -140.58479309]
[169.10192871 -126.40254974]
[164.21685791 -112.22029877]
[159.33180237 -98.03805542]
[167.98374939 -87.83357239]
[170.47099304 -74.57786560]
[166.03605652 -61.72611237]
[155.74011230 -52.68236542]
[142.21139526 -49.89800644]
[137.05053711 -35.81377411]
[131.88969421 -21.72954178]
[138.36862183 -8.36694050]
[133.33541870 5.98999310]
[119.27556610 12.69508457]
[114.11471558 26.77931786]
[108.95386505 40.86355209]
[103.79301453 54.94778442]
[134.61193848 88.21534729]
[118.82934570 120.60792542]
[125.60005188 133.99290466]
[132.37075806 147.37786865]
[139.14147949 160.76284790]
[145.84164429 167.04722595]
[145.91082764 174.47569275]
[152.41908264 187.99021912]
[158.92735291 201.50476074]
[166.52244568 188.56974792]
[181.34120178 186.24501038]
[192.53239441 196.23286438]
[191.90112305 211.21957397]
[179.90965271 220.23092651]
[165.33854675 216.66798401]
[170.49940491 230.75221252]
[175.66024780 244.83644104]
[180.82110596 258.92068481]
[185.98194885 273.00491333]
[202.16433716 274.45095825]
[216.05271912 282.76895142]
[224.90177917 296.25573730]
[226.98805237 312.19238281]
[221.94535828 327.39224243]
[210.82797241 338.83828735]
[216.26264954 352.81912231]
[221.69732666 366.79998779]
[227.13200378 380.78085327]
[232.56668091 394.76168823]
[239.33738708 408.14666748]
[247.37973022 420.80844116]
[255.42207336 433.47024536]
[263.46441650 446.13201904]
[271.50674438 458.79379272]
[286.28527832 465.90203857]
[287.24865723 482.27285767]
[273.40582275 491.06536865]
[258.99713135 483.23458862]
[258.84497070 466.83615112]
[250.80262756 454.17434692]
[242.76028442 441.51257324]
[234.71794128 428.85079956]
[226.67559814 416.18902588]
[225.20263672 431.11651611]
[216.56855774 443.38241577]
[203.01306152 449.80493164]
[188.05249023 448.71798706]
[175.56768799 440.40356445]
[168.79724121 427.01846313]
[169.49743652 412.03482056]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 139]
[4 138]
[5 137]
[6 136]
[7 135]
[14 129]
[15 128]
[16 127]
[17 126]
[18 125]
[19 119]
[20 118]
[21 117]
[22 115]
[23 114]
[24 113]
[25 112]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
[52 68]
[53 67]
[54 66]
[56 64]
[57 63]
[58 62]
[69 110]
[70 109]
[71 108]
[72 107]
[75 104]
[76 103]
[77 102]
[81 97]
[82 96]
[83 95]
[84 94]
[140 153]
[141 152]
[142 151]
[143 150]
[144 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
