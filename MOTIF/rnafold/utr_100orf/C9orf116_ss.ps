%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:22:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACGUGACCUGGCCGUCGCUUGGCAACAGGACGCCGCCGAGUCCCGCUUCUCCUCCAGGCACAAUGGCUGAGGAAUGCCCCAGAGCGUGCGCGGAGCCUGUGGCGCCCAAGGCCACGGCCCCGCCGGAGAGGACCAGCGACUACUACCGCGUGAGCGCGGACC\
) } def
/len { sequence length } bind def

/coor [
[94.61730957 555.94927979]
[92.05947876 541.16900635]
[89.50164032 526.38867188]
[86.94380951 511.60839844]
[84.38597870 496.82806396]
[81.82814026 482.04776001]
[79.27030945 467.26745605]
[70.37884521 462.12066650]
[65.71218109 452.72164917]
[67.04104614 442.09045410]
[74.16426849 433.79504395]
[72.17098999 418.92807007]
[70.17770386 404.06109619]
[58.22048950 395.25427246]
[55.98723221 380.20544434]
[65.30573273 367.72332764]
[63.31245422 352.85635376]
[61.31917191 337.98937988]
[59.32588959 323.12240601]
[57.33260727 308.25543213]
[55.33932495 293.38845825]
[51.31545639 287.14846802]
[53.45241165 278.21978760]
[51.74253845 263.31753540]
[45.80327225 258.73770142]
[40.76250839 272.86535645]
[25.76862717 272.43695068]
[21.54270935 258.04455566]
[33.92473984 249.57797241]
[27.98547173 244.99810791]
[13.13815022 247.13282776]
[-1.70917141 249.26756287]
[-16.55649376 251.40228271]
[-23.67843056 265.18841553]
[-37.55857086 272.12536621]
[-52.85971832 269.54574585]
[-63.69826889 258.44143677]
[-65.90657806 243.08230591]
[-58.63550949 229.37423706]
[-44.68093109 222.58827209]
[-29.40866852 225.33374023]
[-18.69121552 236.55496216]
[-3.84389400 234.42022705]
[11.00342751 232.28550720]
[25.85074997 230.15078735]
[32.85076904 214.56272888]
[45.49831009 206.01629639]
[58.94379044 205.57052612]
[63.44302750 191.26119995]
[67.94226837 176.95187378]
[72.44149780 162.64254761]
[76.94073486 148.33320618]
[81.43997192 134.02388000]
[85.93920898 119.71455383]
[78.83287811 113.99466705]
[74.08763885 105.71552277]
[72.61563110 95.86170197]
[74.91676331 85.73593903]
[80.97162628 76.78690338]
[90.20582581 70.40292358]
[86.25461578 55.93268204]
[82.30340576 41.46243668]
[78.35219574 26.99219322]
[75.07867432 23.98433113]
[73.15440369 20.44003105]
[72.58073425 16.85867500]
[73.19364166 13.68714905]
[74.69606018 11.26957417]
[71.85729218 -3.45935583]
[69.01852417 -18.18828583]
[56.21389008 -27.05841255]
[53.54479599 -42.03608322]
[62.08001328 -54.18867874]
[59.24124527 -68.91761017]
[46.01409912 -77.56735992]
[42.85921478 -93.05355072]
[51.64832306 -106.18850708]
[67.16700745 -109.17948914]
[80.20830536 -100.25199890]
[83.03504944 -84.70256042]
[73.97017670 -71.75637817]
[76.80894470 -57.02744675]
[89.24943542 -48.91758728]
[92.33817291 -34.02079773]
[83.74745178 -21.02705574]
[86.58621979 -6.29812431]
[89.42498779 8.43080616]
[92.82244110 23.04098511]
[96.77365112 37.51122665]
[100.72486115 51.98147202]
[104.67606354 66.45171356]
[118.70520020 71.76051331]
[131.24623108 63.53114319]
[143.78726196 55.30176926]
[156.32829285 47.07239532]
[163.62130737 33.03236389]
[178.50704956 32.51877975]
[191.04808044 24.28940582]
[203.58911133 16.06003189]
[209.07867432 8.70114994]
[216.44816589 7.79601526]
[229.14360046 -0.19310081]
[241.83903503 -8.18221664]
[254.53446960 -16.17133331]
[267.22988892 -24.16044807]
[269.17770386 -39.67625046]
[280.67825317 -50.27207184]
[296.30133057 -50.94488525]
[308.67025757 -41.37701035]
[311.94473267 -26.08610725]
[304.57870483 -12.29206944]
[290.05014038 -6.50802279]
[275.21902466 -11.46501541]
[262.52359009 -3.47589922]
[249.82815552 4.51321650]
[237.13272095 12.50233269]
[224.43728638 20.49144936]
[211.81848145 28.60106087]
[199.27745056 36.83043289]
[186.73641968 45.05980682]
[180.34042358 58.51121902]
[164.55766296 59.61342621]
[152.01663208 67.84279633]
[139.47560120 76.07217407]
[126.93457794 84.30154419]
[124.08369446 113.67497253]
[100.24853516 124.21379089]
[95.74930573 138.52311707]
[91.25006866 152.83244324]
[86.75083160 167.14178467]
[82.25159454 181.45111084]
[77.75235748 195.76043701]
[73.25312042 210.06976318]
[87.32130432 234.59790039]
[66.64476776 261.60766602]
[68.35463715 276.50988770]
[70.20629883 291.39517212]
[72.19957733 306.26214600]
[74.19286346 321.12911987]
[76.18614197 335.99609375]
[78.17942047 350.86306763]
[80.17270660 365.73004150]
[92.45007324 375.31668091]
[94.25975800 390.42230225]
[85.04467773 402.06781006]
[87.03795624 416.93478394]
[89.03124237 431.80175781]
[102.06439209 447.14126587]
[94.05062103 464.70962524]
[96.60845184 479.48992920]
[99.16628265 494.27023315]
[101.72411346 509.05053711]
[104.28195190 523.83087158]
[106.83978271 538.61114502]
[109.39761353 553.39147949]
[123.84099579 558.61492920]
[133.72532654 570.37054443]
[136.39178467 585.49621582]
[131.12310791 599.92315674]
[119.33652496 609.77062988]
[104.20257568 612.38964844]
[89.79222870 607.07574463]
[79.98178101 595.25836182]
[77.41020203 580.11627197]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 155]
[2 154]
[3 153]
[4 152]
[5 151]
[6 150]
[7 149]
[11 147]
[12 146]
[13 145]
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[23 136]
[24 135]
[30 45]
[31 44]
[32 43]
[33 42]
[48 133]
[49 132]
[50 131]
[51 130]
[52 129]
[53 128]
[54 127]
[60 91]
[61 90]
[62 89]
[63 88]
[68 87]
[69 86]
[70 85]
[73 82]
[74 81]
[92 125]
[93 124]
[94 123]
[95 122]
[97 120]
[98 119]
[99 118]
[101 117]
[102 116]
[103 115]
[104 114]
[105 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
