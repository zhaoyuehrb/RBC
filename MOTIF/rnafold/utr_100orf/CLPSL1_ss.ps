%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:33:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUACAUGGUGUUCCCACAGCUGGGAGGACACCCACAUGGUCGGCGUGCAGGAUAUUUCGCUGGACCCUAGAAAAGCCACCACGACCUGUGGGCCAUGAUGCUACCCCAAUGGCUGCUGCUGCUGUUCCUUCUCUUCUUCUUUCUCUUCCUCCUCACCAGGGGCUCACUUUCUCCAACAAAAUACAACCUUUUGG\
) } def
/len { sequence length } bind def

/coor [
[191.25537109 441.09469604]
[182.29255676 429.05065918]
[177.48478699 414.80679321]
[177.31480408 399.75402832]
[181.81185913 385.36636353]
[190.54754639 373.05657959]
[202.67662048 364.03753662]
[197.92658997 349.80947876]
[193.17657471 335.58145142]
[188.42655945 321.35339355]
[175.02807617 314.94900513]
[170.00819397 300.58740234]
[176.81657410 286.57727051]
[172.06655884 272.34921265]
[167.31652832 258.12118530]
[164.85710144 256.74987793]
[162.79646301 254.31523132]
[161.54481506 250.96562195]
[161.45054626 246.99586487]
[162.75099182 242.82136536]
[158.92709351 228.31695557]
[155.10319519 213.81254578]
[151.27929688 199.30813599]
[147.33868408 184.83500671]
[143.28161621 170.39408875]
[139.22454834 155.95317078]
[135.16748047 141.51225281]
[131.11041260 127.07132721]
[108.21186066 135.77667236]
[87.36819458 129.59092712]
[76.26670074 114.16996765]
[76.98639679 97.90371704]
[63.23451233 91.91324615]
[49.48262787 85.92278290]
[35.73074722 79.93231201]
[21.97886276 73.94184113]
[12.84795380 73.38141632]
[8.05491543 67.74250031]
[-5.59867620 61.53126907]
[-19.25226784 55.32003403]
[-32.90586090 49.10879898]
[-46.79848099 43.45237732]
[-60.90759277 38.35993958]
[-75.01670837 33.26750565]
[-89.45762634 29.21043587]
[-104.15448761 26.21005058]
[-119.22342682 31.03059578]
[-130.14582825 20.90388107]
[-144.84269714 17.90349579]
[-159.53955078 14.90310955]
[-174.26010132 12.02120876]
[-189.00338745 9.25797939]
[-204.28488159 15.20843410]
[-216.90786743 4.73979759]
[-213.88690186 -11.37869358]
[-198.32968140 -16.56571770]
[-186.24015808 -5.48530912]
[-171.49687195 -2.72207999]
[-164.33378601 -4.58242035]
[-156.53916931 0.20624983]
[-141.84230042 3.20663524]
[-127.14544678 6.20702076]
[-113.12772369 1.17186749]
[-101.15410614 11.51319122]
[-86.45724487 14.51357651]
[-96.01909637 2.95628405]
[-97.92903137 -11.92162323]
[-91.59644318 -25.51935387]
[-78.97958374 -33.63199234]
[-63.98005295 -33.75081253]
[-51.23625565 -25.83907318]
[-44.68903351 -12.34337234]
[-46.36303329 2.56292582]
[-55.74059296 14.27024937]
[-69.92427063 19.15839005]
[-55.81515884 24.25082588]
[-41.70604324 29.34326172]
[-45.54732513 14.84345055]
[-36.73929214 2.70184588]
[-21.76333809 1.85285389]
[-11.63952541 12.92120552]
[-13.81746483 27.76224899]
[-26.69462395 35.45520782]
[-13.04103279 41.66644287]
[0.61255842 47.87767792]
[14.26615047 54.08890915]
[27.96933174 60.18996048]
[41.72121429 66.18042755]
[55.47309875 72.17089844]
[69.22498322 78.16136932]
[82.97686005 84.15183258]
[96.14467621 76.96791840]
[98.55084991 62.16216660]
[100.95701599 47.35641479]
[103.36318970 32.55065918]
[105.76935577 17.74490547]
[93.22871399 9.04461575]
[85.71237183 -4.23948669]
[84.71270752 -19.46983147]
[90.42819977 -33.62242508]
[101.72403717 -43.88725662]
[116.35742950 -48.22623825]
[131.42289734 -45.77786255]
[143.92916870 -37.02825546]
[151.39314270 -23.71465683]
[152.33282471 -8.48049355]
[146.56164551 5.64948225]
[135.22546387 15.86975288]
[120.57511139 20.15107536]
[118.16893768 34.95682907]
[115.76277161 49.76258469]
[113.35660553 64.56833649]
[110.95043182 79.37409210]
[117.80202484 82.42461395]
[138.35679626 91.57618713]
[147.74957275 79.88107300]
[149.71359253 63.59996033]
[164.89965820 57.41000748]
[177.68565369 67.67890930]
[174.91844177 83.84290314]
[159.44468689 89.27384949]
[150.05191040 100.96897125]
[163.90179443 95.20867920]
[177.75166321 89.44838715]
[187.96601868 78.46353149]
[200.37838745 70.04135895]
[214.35997009 64.60854340]
[229.20242310 62.44031143]
[244.15385437 63.64651489]
[258.45678711 68.16603851]
[271.38662720 75.76992798]
[282.28836060 86.07295227]
[290.60968018 98.55316925]
[295.92901611 112.57830811]
[297.97689819 127.43785858]
[296.64956665 142.37901306]
[292.01431274 156.64485168]
[284.30587769 169.51266479]
[273.91485596 180.33053589]
[261.36761475 188.55044556]
[247.29983521 193.75596619]
[232.42417908 195.68336487]
[217.49426270 194.23501587]
[203.26644897 189.48428345]
[190.46153259 181.67185974]
[179.72821045 171.19351196]
[171.61026001 158.58007812]
[166.51884460 144.47033691]
[156.03509521 133.74229431]
[145.55133057 123.01425934]
[149.60839844 137.45518494]
[153.66546631 151.89610291]
[157.72253418 166.33702087]
[161.77960205 180.77793884]
[167.12030029 188.20523071]
[165.78370667 195.48425293]
[169.60760498 209.98864746]
[173.43150330 224.49305725]
[177.25540161 238.99746704]
[181.54458618 253.37115479]
[186.29460144 267.59921265]
[191.04461670 281.82723999]
[204.90400696 288.93746948]
[209.51852417 303.43438721]
[202.65460205 316.60339355]
[207.40461731 330.83142090]
[212.15463257 345.05947876]
[216.90466309 359.28750610]
[232.01927185 359.21130371]
[246.39794922 363.80435181]
[258.63638306 372.60488892]
[267.54333496 384.74084473]
[272.25668335 399.01623535]
[272.32678223 414.02908325]
[267.75936890 428.30911255]
[259.01373291 440.46160889]
[246.95652771 449.30386353]
[251.70654297 463.53189087]
[256.45657349 477.75994873]
[261.20657349 491.98800659]
[265.95660400 506.21603394]
[280.56768799 511.78833008]
[288.13342285 525.47381592]
[285.08154297 540.81072998]
[272.85299683 550.55737305]
[257.22177124 550.11169434]
[245.56843567 539.68414307]
[243.39533997 524.19824219]
[251.72856140 510.96606445]
[246.97854614 496.73800659]
[242.22851562 482.50997925]
[237.47850037 468.28192139]
[232.72848511 454.05386353]
[217.77754211 454.22827148]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 168]
[8 167]
[9 166]
[10 165]
[13 162]
[14 161]
[15 160]
[20 159]
[21 158]
[22 157]
[23 156]
[24 154]
[25 153]
[26 152]
[27 151]
[28 150]
[32 91]
[33 90]
[34 89]
[35 88]
[36 87]
[38 86]
[39 85]
[40 84]
[41 83]
[42 77]
[43 76]
[44 75]
[45 65]
[46 64]
[48 62]
[49 61]
[50 60]
[51 58]
[52 57]
[92 113]
[93 112]
[94 111]
[95 110]
[96 109]
[115 122]
[116 121]
[177 193]
[178 192]
[179 191]
[180 190]
[181 189]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
