%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:13:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUAGGGAAACUGUGAGGGCGGCACCGGAAGUGGCGAGCAGUCUGCGCGCGGAUGGCCGCAGCGGCGAUGGCGGCAGCGGCAGGUGGAGGGGCUGGCGCGGCCCGCUCCCUCUCGCGCUUCCGAGGCUGCCUGGCUGGCGCGCUGCUCGGGG\
) } def
/len { sequence length } bind def

/coor [
[134.12744141 613.90246582]
[145.37384033 603.03723145]
[144.15119934 588.08715820]
[142.92855835 573.13708496]
[141.70591736 558.18695068]
[140.48327637 543.23687744]
[126.05461121 539.35113525]
[113.80300903 530.74725342]
[105.21825409 518.44775391]
[101.35229492 503.92620850]
[102.69038391 488.93023682]
[109.09024048 475.27145386]
[119.79692078 464.60659790]
[133.53182983 458.23654175]
[132.30918884 443.28646851]
[123.27188873 435.18908691]
[122.16335297 422.70233154]
[130.12644958 412.50585938]
[129.20903015 397.53393555]
[128.29159546 382.56201172]
[127.37417603 367.59011841]
[126.45674896 352.61819458]
[125.53932953 337.64627075]
[124.62190247 322.67434692]
[113.32997894 313.02923584]
[112.18630219 297.85867310]
[122.37953186 286.08004761]
[121.46211243 271.10812378]
[120.54468536 256.13619995]
[119.62725830 241.16429138]
[118.70983887 226.19238281]
[117.79241180 211.22045898]
[116.87498474 196.24853516]
[115.95755768 181.27662659]
[112.38784027 174.75337219]
[115.17729187 165.99052429]
[114.56546783 151.00302124]
[113.95363617 136.01550293]
[113.34181213 121.02797699]
[96.29864502 123.17185211]
[82.99175262 113.99800110]
[79.42272186 99.27606201]
[65.65396881 93.32445526]
[51.88522339 87.37285614]
[38.11647415 81.42125702]
[24.34772491 75.46965027]
[8.12930775 77.89761353]
[-1.86947095 64.89929199]
[4.63727474 49.84624100]
[20.95596313 48.22375488]
[30.29932594 61.70090485]
[44.06807327 67.65250397]
[57.83682251 73.60411072]
[71.60557556 79.55570984]
[85.37432098 85.50730896]
[86.20179749 84.71739197]
[87.07186890 83.97464752]
[82.55316925 69.67145538]
[78.03447723 55.36825562]
[73.51578522 41.06505966]
[68.99709320 26.76186371]
[57.46197128 15.93359184]
[61.00580215 1.46671546]
[56.48711014 -12.83648014]
[44.95198441 -23.66475296]
[48.49581909 -38.13162994]
[43.97712708 -52.43482590]
[31.52139091 -63.10190964]
[34.79706192 -79.17057800]
[50.43441010 -84.11075592]
[62.34707260 -72.84041595]
[58.28032303 -56.95351791]
[62.79901505 -42.65032196]
[74.01093292 -32.84511185]
[70.79030609 -17.35517311]
[75.30899811 -3.05197740]
[86.52091217 6.75323486]
[83.30029297 22.24317169]
[87.81898499 36.54636765]
[92.33767700 50.84956360]
[96.85636902 65.15275574]
[101.37506104 79.45595551]
[115.06896973 82.96066284]
[124.45801544 95.31115723]
[135.79426575 85.48825073]
[140.26602173 77.45259857]
[147.46339417 75.58345795]
[158.99765015 65.99383545]
[170.53190613 56.40421295]
[182.06616211 46.81458664]
[193.50201416 37.10781479]
[204.83825684 27.28490448]
[216.17449951 17.46199226]
[227.51074219 7.63908195]
[238.84698486 -2.18382907]
[250.18322754 -12.00674057]
[258.19412231 -26.94868469]
[274.76977539 -23.38718796]
[275.93606567 -6.47340393]
[260.00613403 -0.67049652]
[248.66989136 9.15241432]
[237.33364868 18.97532463]
[225.99740601 28.79823685]
[214.66116333 38.62114716]
[203.32492065 48.44405746]
[200.31121826 55.24210358]
[191.65579224 58.34884644]
[180.12153625 67.93846893]
[168.58728027 77.52809143]
[157.05302429 87.11772156]
[145.61717224 96.82449341]
[134.28092957 106.64739990]
[128.32933044 120.41615295]
[128.94116211 135.40367126]
[129.55297852 150.39118958]
[130.16481018 165.37870789]
[130.92947388 180.35919189]
[131.84690857 195.33111572]
[132.76432800 210.30303955]
[133.68174744 225.27494812]
[134.59918213 240.24687195]
[135.51660156 255.21879578]
[136.43403625 270.19070435]
[137.35145569 285.16262817]
[148.90652466 295.60858154]
[149.62365723 310.80529785]
[139.59382629 321.75692749]
[140.51124573 336.72885132]
[141.42866516 351.70077515]
[142.34609985 366.67266846]
[143.26351929 381.64459229]
[144.18093872 396.61651611]
[145.09837341 411.58843994]
[155.62236023 426.66494751]
[147.25927734 442.06381226]
[148.48191833 457.01391602]
[163.06930542 461.06774902]
[175.36650085 469.85128784]
[183.90055847 482.28875732]
[187.65734863 496.86807251]
[186.20216370 511.82479858]
[179.72984314 525.35565186]
[169.03897095 535.83581543]
[155.43336487 542.01422119]
[156.65600586 556.96435547]
[157.87864685 571.91442871]
[159.10128784 586.86450195]
[160.32392883 601.81457520]
[173.18621826 610.70819092]
[177.27275085 625.80236816]
[170.65399170 639.97015381]
[156.45510864 646.52191162]
[141.38040161 642.36413574]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[14 136]
[15 135]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[24 127]
[27 124]
[28 123]
[29 122]
[30 121]
[31 120]
[32 119]
[33 118]
[34 117]
[36 116]
[37 115]
[38 114]
[39 113]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
[57 82]
[58 81]
[59 80]
[60 79]
[61 78]
[63 76]
[64 75]
[66 73]
[67 72]
[84 112]
[85 111]
[87 110]
[88 109]
[89 108]
[90 107]
[91 105]
[92 104]
[93 103]
[94 102]
[95 101]
[96 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
