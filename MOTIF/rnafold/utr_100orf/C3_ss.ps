%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:39:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUAAAAAGCCAGCUCCAGCAGGCGCUGCUCACUCCUCCCCAUCCUCUCCCUCUGUCCCUCUGUCCCUCUGACCCUGCACUGUCCCAGCACCAUGGGACCCACCUCAGGUCCCAGCCUGCUGCUCCUGCUACUAACCCACCUCCCCCUGGCUCUGGGGAGUCCCAUGUACUCUAUCAUCACCCCCAACAUCU\
) } def
/len { sequence length } bind def

/coor [
[205.34202576 396.75646973]
[198.78900146 383.26358032]
[197.39175415 368.32879639]
[201.32827759 353.85455322]
[210.09712219 341.68460083]
[222.58128357 333.36923218]
[237.19049072 329.96762085]
[252.06379700 331.91311646]
[265.30471802 338.95642090]
[257.87493896 325.92575073]
[250.44517517 312.89508057]
[243.01541138 299.86441040]
[235.58563232 286.83370972]
[228.15586853 273.80303955]
[205.34532166 275.92010498]
[184.45739746 266.35556030]
[171.08157349 247.59750366]
[168.83261108 224.60359192]
[178.37396240 203.49082947]
[168.56774902 192.14013672]
[158.76153564 180.78944397]
[148.95532227 169.43876648]
[139.14910889 158.08807373]
[129.34289551 146.73738098]
[115.16756439 142.16471863]
[112.00065613 126.66371918]
[102.19444275 115.31302643]
[105.35839081 129.97554016]
[114.63949585 141.75947571]
[122.30479431 154.65301514]
[128.22338867 168.43597412]
[132.29423523 182.87301636]
[134.44779968 197.71762085]
[134.64730835 212.71629333]
[132.88937378 227.61293030]
[129.20399475 242.15315247]
[123.65411377 256.08868408]
[116.33449554 269.18154907]
[107.37012482 281.20819092]
[96.91407776 291.96322632]
[85.14489746 301.26303101]
[72.26355743 308.94879150]
[58.49000931 314.88928223]
[44.05944824 318.98306274]
[29.21828461 321.16018677]
[14.21994781 321.38351440]
[-0.67945743 319.64926147]
[-15.22551250 315.98696899]
[-29.16983223 310.45922852]
[-42.27430725 303.16040039]
[-54.31517029 294.21514893]
[-65.08681488 283.77621460]
[-74.40530396 272.02182007]
[-82.11151886 259.15267944]
[-88.07386780 245.38859558]
[-92.19054413 230.96455383]
[-94.39125824 216.12686157]
[-94.63841248 201.12890625]
[-92.92780304 186.22676086]
[-89.28863525 171.67491150]
[-83.78304291 157.72183228]
[-76.50505066 144.60577393]
[-67.57892609 132.55072021]
[-57.15709686 121.76251221]
[-45.41751862 112.42536926]
[-32.56065369 104.69872284]
[-18.80604553 98.71451569]
[-4.38856125 94.57493591]
[10.44561005 92.35066223]
[25.44316101 92.07968903]
[40.35729980 93.76830292]
[53.71975708 100.58334351]
[45.26039886 88.19628143]
[36.80104446 75.80921936]
[21.28722000 75.49160004]
[8.94333363 66.08904266]
[4.51586056 51.21701813]
[9.70725536 36.59412384]
[22.52132034 27.84316063]
[38.03078461 28.32905197]
[50.27194595 37.86496353]
[54.53782654 52.78414154]
[49.18810654 67.34986115]
[57.64746094 79.73692322]
[66.10681915 92.12398529]
[73.49865723 90.85485840]
[88.28234100 88.31661224]
[95.67418671 87.04749298]
[99.51734924 72.54817963]
[103.36051941 58.04886246]
[107.20368195 43.54954910]
[97.57918549 31.52145386]
[96.89071655 16.31029320]
[105.19295502 3.75892091]
[119.12718201 -1.43484497]
[122.97035217 -15.93415737]
[126.81351471 -30.43346977]
[130.65667725 -44.93278503]
[134.49984741 -59.43209457]
[138.34301758 -73.93141174]
[142.18618774 -88.43072510]
[133.03497314 -101.11099243]
[134.22700500 -116.70307922]
[145.19944763 -127.84486389]
[160.77143860 -129.27555847]
[173.59037781 -120.31961060]
[177.60353088 -105.20575714]
[170.91603088 -91.07028961]
[156.68550110 -84.58755493]
[152.84233093 -70.08824158]
[148.99916077 -55.58892822]
[145.15599060 -41.08961487]
[141.31283569 -26.59030342]
[137.46966553 -12.09099102]
[133.62649536 2.40832162]
[143.15876770 13.82208252]
[144.15408325 28.83785057]
[136.02165222 41.71095657]
[121.70299530 47.39271927]
[117.85983276 61.89202881]
[114.01666260 76.39134216]
[110.17350006 90.89065552]
[113.54513550 105.50681305]
[123.35134888 116.85750580]
[138.22808838 122.24203491]
[140.69358826 136.93116760]
[150.49980164 148.28186035]
[160.30601501 159.63255310]
[170.11222839 170.98324585]
[179.91844177 182.33393860]
[189.72465515 193.68463135]
[196.84565735 190.22650146]
[204.45668030 188.07327271]
[212.32093811 187.28955078]
[220.19419861 187.89735413]
[227.83233643 189.87556458]
[234.99896240 193.16056824]
[241.47262573 197.64836121]
[247.05380249 203.19783020]
[251.57092285 209.63513184]
[254.88569641 216.75924683]
[256.89736938 224.34812927]
[257.54571533 232.16575623]
[256.81292725 239.96937561]
[254.72398376 247.51704407]
[251.34594727 254.57521057]
[246.78569031 260.92587280]
[241.18653870 266.37326050]
[248.61631775 279.40396118]
[256.04608154 292.43463135]
[263.47586060 305.46530151]
[270.90560913 318.49597168]
[278.33538818 331.52664185]
[287.73352051 337.32888794]
[289.61596680 346.94775391]
[299.78457642 357.97494507]
[309.95321655 369.00213623]
[320.12185669 380.02932739]
[330.29046631 391.05654907]
[338.42089844 395.25186157]
[340.53268433 402.34561157]
[350.52142334 413.53601074]
[361.41635132 413.52493286]
[370.33093262 419.39770508]
[374.44769287 429.00854492]
[372.62628174 439.08087158]
[382.24740601 450.58886719]
[391.86853027 462.09686279]
[407.33999634 460.90798950]
[420.53781128 469.06869507]
[426.38711548 483.44107056]
[422.63879395 498.49862671]
[410.73406982 508.45138550]
[395.25064087 509.47238159]
[382.14212036 501.16894531]
[376.44906616 486.73397827]
[380.36053467 471.71798706]
[370.73941040 460.20999146]
[361.11828613 448.70199585]
[342.52642822 443.41888428]
[339.33099365 423.52474976]
[329.34228516 412.33432007]
[319.26327515 401.22515869]
[309.09463501 390.19796753]
[298.92602539 379.17077637]
[288.75738525 368.14358521]
[278.58877563 357.11636353]
[281.29129028 371.87091064]
[278.64022827 386.63479614]
[270.97323608 399.52731323]
[259.26699829 408.90621948]
[245.01266479 413.57678223]
[230.02601624 412.94409180]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 153]
[10 152]
[11 151]
[12 150]
[13 149]
[14 148]
[19 131]
[20 130]
[21 129]
[22 128]
[23 127]
[24 126]
[26 124]
[27 123]
[72 85]
[73 84]
[74 83]
[88 122]
[89 121]
[90 120]
[91 119]
[95 115]
[96 114]
[97 113]
[98 112]
[99 111]
[100 110]
[101 109]
[155 187]
[156 186]
[157 185]
[158 184]
[159 183]
[161 182]
[162 181]
[166 179]
[167 178]
[168 177]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
