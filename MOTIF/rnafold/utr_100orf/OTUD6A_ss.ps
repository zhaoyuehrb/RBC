%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:18:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAAAUUUCAACUCCCGCUUGCCAUUCAACAUCAUGGAUGAUCCGAAGAGUGAACAGCAGCGCAUACUGCGCCGCCACCAACGCGAGAGGCAGGAGCUGCAGGCCCAGAUCCGGAGCUUAAAAAACUCGGUCC\
) } def
/len { sequence length } bind def

/coor [
[273.65710449 306.90133667]
[288.25186157 310.37554932]
[278.08587646 299.34591675]
[267.91989136 288.31628418]
[253.07353210 287.96835327]
[242.60665894 276.92755127]
[243.07225037 261.35769653]
[232.90628052 250.32804871]
[222.74029541 239.29841614]
[207.99273682 241.20832825]
[194.79226685 233.98258972]
[188.30186462 220.20840454]
[191.20014954 205.07876587]
[181.03416443 194.04911804]
[170.86817932 183.01948547]
[156.55319214 178.90483093]
[152.88969421 163.51362610]
[142.72370911 152.48399353]
[132.55772400 141.45434570]
[122.26410675 130.54374695]
[111.84423065 119.75364685]
[101.42435455 108.96355438]
[92.30174255 121.69429016]
[72.48616028 124.68351746]
[57.51153946 125.55569458]
[42.53691483 126.42786407]
[27.56229401 127.30004120]
[12.58767223 128.17221069]
[-2.38695049 129.04438782]
[-12.70502567 141.01571655]
[-28.47197914 142.10140991]
[-40.33355713 131.65734863]
[-41.25249481 115.87979889]
[-30.68360329 104.12930298]
[-14.89721870 103.37722778]
[-3.25912285 114.06976318]
[11.71549988 113.19758606]
[26.69012260 112.32541656]
[41.66474533 111.45323944]
[56.63936615 110.58106995]
[71.61399078 109.70890045]
[76.43489838 103.96356201]
[62.87528610 97.54975128]
[48.15919113 94.64518738]
[40.36611176 81.82848358]
[44.55908966 67.42643738]
[58.01401520 60.79582214]
[71.98944092 66.24444580]
[77.40573883 80.23303986]
[86.07671356 92.47290039]
[90.89761353 86.72756195]
[89.15622711 71.82898712]
[87.41483307 56.93041229]
[84.55393219 53.38852692]
[83.16873932 49.50413132]
[83.17929077 45.80221558]
[84.33744049 42.72336960]
[86.27111816 40.57459259]
[85.92208862 25.57865524]
[77.86576080 11.96225834]
[85.30481720 -0.94160676]
[84.95578766 -15.93754578]
[84.60675049 -30.93348312]
[84.25771332 -45.92942429]
[83.90868378 -60.92536163]
[77.49542236 -76.61951447]
[90.80087280 -87.12671661]
[104.58076477 -77.24993134]
[98.90461731 -61.27439499]
[99.25365448 -46.27845764]
[99.60269165 -31.28251839]
[99.95172119 -16.28657913]
[100.30075836 -1.29064107]
[108.33211517 11.25314617]
[100.91802216 25.22961998]
[101.26705933 40.22555923]
[102.31340790 55.18901825]
[104.05480194 70.08759308]
[105.79619598 84.98616791]
[112.21444702 98.54367828]
[122.63432312 109.33377075]
[133.05419922 120.12387085]
[141.34674072 124.17293549]
[143.58735657 131.28837585]
[153.75334167 142.31800842]
[163.91932678 153.34764099]
[178.96144104 158.25122070]
[181.89782715 172.85351562]
[192.06379700 183.88314819]
[202.22978210 194.91278076]
[217.54507446 193.25503540]
[230.74552917 200.84457397]
[236.87335205 214.58915710]
[233.76992798 229.13243103]
[243.93591309 240.16206360]
[254.10188293 251.19171143]
[269.65802002 251.99440002]
[279.81066895 263.32482910]
[278.94952393 278.15029907]
[289.11550903 289.17993164]
[299.28149414 300.20956421]
[311.31335449 309.16693115]
[324.79525757 315.74252319]
[338.27716064 322.31808472]
[351.75906372 328.89364624]
[365.31658936 335.31188965]
[378.94784546 341.57199097]
[393.67837524 335.84594727]
[408.10946655 342.28948975]
[413.67941284 357.07971191]
[407.08367920 371.44189453]
[392.23538208 376.85516357]
[377.94375610 370.10794067]
[372.68777466 355.20324707]
[359.05651855 348.94317627]
[351.59692383 349.01101685]
[345.18350220 342.37554932]
[331.70159912 335.79998779]
[318.21969604 329.22442627]
[304.73776245 322.64886475]
[312.25094604 335.63162231]
[314.97619629 350.38198853]
[312.59796143 365.19226074]
[305.39160156 378.34780884]
[294.19143677 388.32559204]
[280.29412842 393.97045898]
[265.30859375 394.62887573]
[250.96972656 390.22463989]
[238.93762207 381.26760864]
[230.60522461 368.79479980]
[226.93722534 354.25018311]
[228.35827637 339.31765747]
[234.70384216 325.72595215]
[245.23928833 315.04867554]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 101]
[3 100]
[4 99]
[7 96]
[8 95]
[9 94]
[13 90]
[14 89]
[15 88]
[17 86]
[18 85]
[19 84]
[20 82]
[21 81]
[22 80]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[51 79]
[52 78]
[53 77]
[58 76]
[59 75]
[61 73]
[62 72]
[63 71]
[64 70]
[65 69]
[102 120]
[103 119]
[104 118]
[105 117]
[106 115]
[107 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
