%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACGACAACGCGAGAAAAAUUAGUAUUUUUGCACUUCACAAAUUAAUGACCAUGAGCUCGUUUUUGAUAAACUCCAACUACAUCGAGCCCAAGUUCCCUCCCUUCGAGGAGUACGCGCAGCACAGCGGCUCGGGCGGCGCAGACG\
) } def
/len { sequence length } bind def

/coor [
[141.03672791 197.23272705]
[129.01408386 206.20245361]
[114.70913696 210.71562195]
[99.71578217 210.26934814]
[85.70458221 204.91337585]
[74.23670197 195.24447632]
[66.58990479 182.33996582]
[63.61621094 167.63768005]
[65.64694977 152.77577209]
[72.45585632 139.41020203]
[83.28079987 129.03250122]
[90.16009521 115.70301819]
[77.73245239 124.10263824]
[65.30480194 132.50225830]
[52.87715912 140.90188599]
[40.44951630 149.30149841]
[28.02186966 157.70112610]
[15.59422588 166.10073853]
[16.05423355 181.52125549]
[8.08468819 194.73071289]
[-5.77135754 201.51403809]
[-21.09248924 199.70669556]
[-32.98978806 189.88540649]
[-37.66687393 175.18409729]
[-33.63130188 160.29391479]
[-22.17080688 149.96624756]
[-6.94239569 147.49662781]
[7.19460392 153.67309570]
[19.62224770 145.27348328]
[32.04989243 136.87385559]
[44.47753906 128.47422791]
[56.90518188 120.07461548]
[69.33282471 111.67499542]
[81.76047516 103.27536774]
[66.82719421 104.68859863]
[54.05611801 112.55622864]
[39.56802368 116.44148254]
[24.57395935 116.01959991]
[10.32725239 111.32583618]
[-1.98123050 102.75255585]
[-11.32264137 91.01636505]
[-16.91614342 77.09829712]
[-18.29418564 62.16173172]
[-15.34157562 47.45519638]
[-8.30512047 34.20799637]
[2.22701216 23.52744675]
[15.37445641 16.30631638]
[30.03823280 13.14821243]
[44.99261856 14.31711483]
[58.98759842 19.71531868]
[70.85334778 28.89159393]
[79.59802246 41.07891083]
[84.49066925 55.25854111]
[85.12282562 70.24033356]
[92.31420898 83.40406799]
[92.31420898 68.40406799]
[84.57691193 54.60389709]
[92.31420898 41.87662506]
[92.31420898 26.87662506]
[92.31420898 11.87662411]
[92.31420898 -3.12337565]
[92.31420898 -18.12337494]
[76.39750671 -28.61910820]
[69.99401093 -46.41928482]
[75.48971558 -64.36480713]
[90.52245331 -75.35111237]
[89.56788635 -90.32070923]
[88.61331940 -105.29030609]
[75.43319702 -113.47956848]
[69.61497498 -127.86456299]
[73.39588165 -142.91395569]
[85.32208252 -152.84095764]
[100.80770874 -153.82843018]
[113.89821625 -145.49667358]
[119.56004333 -131.04940796]
[115.61609650 -116.04191589]
[103.58290863 -106.24487305]
[104.53748322 -91.27528381]
[105.49205017 -76.30568695]
[115.97862244 -72.17212677]
[124.17987061 -64.36450195]
[128.86628723 -53.99980164]
[129.31529236 -42.58211899]
[125.42227936 -31.78441238]
[117.72176361 -23.20338249]
[107.31420898 -18.12337494]
[107.31420898 -3.12337565]
[107.31420898 11.87662411]
[107.31420898 26.87662506]
[107.31420898 41.87662506]
[115.05151367 54.60389709]
[107.31420898 68.40406799]
[107.31420898 83.40406799]
[114.33153534 89.64990997]
[117.14204407 98.36236572]
[131.38807678 103.05814362]
[143.28068542 97.94955444]
[155.07846069 102.20460510]
[160.60562134 113.01329803]
[174.74877930 118.01039124]
[190.33825684 115.31245422]
[199.76091003 126.84774017]
[213.90406799 131.84483337]
[228.04722595 136.84193420]
[223.00482178 122.71486664]
[229.25080872 109.07713318]
[243.24114990 103.66694641]
[257.03759766 109.55409241]
[262.81185913 123.39814758]
[257.28756714 137.34384155]
[243.59968567 143.47821045]
[256.99356079 150.23127747]
[270.38745117 156.98432922]
[283.78134155 163.73738098]
[292.92257690 164.82212830]
[297.38558960 170.77856445]
[310.63311768 177.81439209]
[323.88064575 184.85021973]
[337.76446533 177.92065430]
[353.06423950 180.50842285]
[363.89688110 191.61848450]
[366.09701538 206.97879028]
[358.81866455 220.68298340]
[344.86047363 227.46153259]
[329.58969116 224.70794678]
[318.87820435 213.48101807]
[316.84481812 198.09774780]
[303.59729004 191.06192017]
[290.34976196 184.02610779]
[277.02828979 177.13127136]
[263.63439941 170.37821960]
[250.24050903 163.62515259]
[236.84661865 156.87210083]
[223.05014038 150.98509216]
[208.90696716 145.98799133]
[194.76380920 140.99090576]
[180.18594360 144.04626465]
[169.75167847 132.15354919]
[155.60852051 127.15645599]
[138.59013367 131.31642151]
[126.69230652 117.30418396]
[112.44626617 112.60841370]
[122.69706726 123.55925751]
[135.94331360 130.59750366]
[146.13520813 141.60321045]
[152.13713074 155.35008240]
[153.28034973 170.30645752]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 34]
[13 33]
[14 32]
[15 31]
[16 30]
[17 29]
[18 28]
[55 93]
[56 92]
[58 90]
[59 89]
[60 88]
[61 87]
[62 86]
[66 79]
[67 78]
[68 77]
[95 142]
[96 141]
[99 139]
[100 138]
[102 136]
[103 135]
[104 134]
[111 133]
[112 132]
[113 131]
[114 130]
[116 129]
[117 128]
[118 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
