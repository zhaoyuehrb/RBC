%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCUGAGCGGAAGUACGGACCGUGAACUGGAGUGGAAUCGCGACUAUGGGAGCUCCGGGGGGAAAGAUCAACCGGCCCCGAACGGAGCUGAAGAAGAAGCUGUUCAAACGCCGGCGGGUGUUGAAUCGGGAGCGGCGUCUGAGGC\
) } def
/len { sequence length } bind def

/coor [
[144.82569885 481.33169556]
[142.92042542 466.45318604]
[141.01516724 451.57470703]
[139.10989380 436.69619751]
[137.20463562 421.81768799]
[135.29936218 406.93917847]
[133.39408875 392.06066895]
[118.27805328 381.82449341]
[115.32448578 363.48754883]
[126.84909821 348.51940918]
[124.31408691 333.73516846]
[121.77907562 318.95092773]
[107.75966644 313.91885376]
[98.07695007 302.46893311]
[95.40780640 287.61154175]
[100.56764221 273.31912231]
[112.26490021 263.46411133]
[109.72988892 248.67987061]
[107.19487762 233.89562988]
[97.47575378 226.62129211]
[95.27574158 214.27410889]
[102.32070923 203.41592407]
[100.10006714 188.58122253]
[97.87943268 173.74650574]
[95.63192749 171.96284485]
[93.98132324 169.15074158]
[93.33470917 165.54263306]
[94.00384521 161.51806641]
[96.15550995 157.56483459]
[95.20094299 142.59524536]
[94.24637604 127.62564087]
[93.29180908 112.65604401]
[85.70508575 100.91154480]
[91.73859406 88.29852295]
[90.78402710 73.32892609]
[80.22191620 58.28422546]
[88.53591156 42.86319351]
[87.26382446 27.91723251]
[85.99173737 12.97127056]
[84.71965027 -1.97469187]
[75.83988190 -15.06898022]
[82.46996307 -28.40657043]
[81.19787598 -43.35253143]
[69.39841461 -53.52162933]
[68.32124329 -68.69708252]
[78.08863831 -79.88339233]
[76.81655121 -94.82935333]
[62.61894226 -100.32382965]
[52.25706482 -111.39263916]
[47.74702835 -125.80373383]
[49.93226242 -140.68276978]
[58.32633972 -153.08636475]
[71.21997833 -160.58432007]
[69.94789124 -175.53028870]
[68.67580414 -190.47625732]
[67.40370941 -205.42221069]
[66.13162231 -220.36817932]
[64.85953522 -235.31413269]
[63.58744431 -250.26010132]
[51.30196762 -266.18466187]
[60.09692383 -283.35943604]
[58.19165802 -298.23794556]
[56.28638840 -313.11645508]
[54.38112259 -327.99496460]
[39.78265762 -332.33142090]
[28.21430779 -342.23559570]
[21.68035889 -355.99160767]
[21.31285667 -371.21609497]
[27.17547417 -385.27133179]
[38.25247574 -395.72216797]
[52.62470627 -400.75790405]
[67.80208588 -399.50613403]
[81.15505219 -392.18368530]
[90.37010956 -380.05920410]
[93.85070038 -365.23336792]
[90.99378967 -350.27484131]
[82.29435730 -337.77523804]
[69.25962830 -329.90023804]
[71.16489410 -315.02172852]
[73.07016754 -300.14321899]
[74.97543335 -285.26470947]
[83.65428925 -279.71267700]
[87.89910889 -270.08355713]
[86.06827545 -259.49700928]
[78.53340912 -251.53219604]
[79.80549622 -236.58622742]
[81.07758331 -221.64025879]
[82.34967804 -206.69430542]
[83.62176514 -191.74833679]
[84.89385223 -176.80238342]
[86.16593933 -161.85641479]
[100.14128113 -156.64533997]
[110.51083374 -145.83877563]
[115.17919922 -131.54306030]
[113.16952515 -116.57704926]
[104.82733154 -103.91629791]
[91.76251221 -96.10144806]
[93.03459930 -81.15547943]
[104.55199432 -71.78076935]
[106.05498505 -56.64156342]
[96.14383698 -44.62462234]
[97.41592407 -29.67865944]
[106.20470428 -17.65340614]
[99.66561127 -3.24678063]
[100.93769836 11.69918156]
[102.20978546 26.64514351]
[103.48188019 41.59110641]
[112.54907990 49.66347504]
[113.69405365 62.15274429]
[105.75362396 72.37435913]
[106.70819092 87.34395599]
[114.29491425 99.08845520]
[108.26140594 111.70147705]
[109.21597290 126.67107391]
[110.17053986 141.64067078]
[111.12510681 156.61026001]
[112.71414185 171.52586365]
[114.93478394 186.36058044]
[117.15542603 201.19529724]
[128.95536804 215.29005432]
[121.97911072 231.36061096]
[124.51412964 246.14485168]
[127.04914093 260.92907715]
[141.36131287 266.32434082]
[150.98777771 278.08139038]
[153.42070007 292.97927856]
[148.10549927 307.00085449]
[136.56330872 316.41592407]
[139.09832764 331.20016479]
[141.63333130 345.98440552]
[152.56202698 350.86987305]
[159.67648315 360.34735107]
[161.28363037 371.96707153]
[157.09552002 382.79537964]
[148.27259827 390.15539551]
[150.17787170 405.03390503]
[152.08312988 419.91241455]
[153.98840332 434.79092407]
[155.89367676 449.66943359]
[157.79893494 464.54794312]
[159.70420837 479.42645264]
[172.95986938 487.72229004]
[177.73263550 502.61373901]
[171.76892090 517.06945801]
[157.88462830 524.26391602]
[142.63549805 520.80017090]
[133.22169495 508.31356812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 141]
[2 140]
[3 139]
[4 138]
[5 137]
[6 136]
[7 135]
[10 130]
[11 129]
[12 128]
[17 123]
[18 122]
[19 121]
[22 119]
[23 118]
[24 117]
[29 116]
[30 115]
[31 114]
[32 113]
[34 111]
[35 110]
[37 107]
[38 106]
[39 105]
[40 104]
[42 102]
[43 101]
[46 98]
[47 97]
[53 91]
[54 90]
[55 89]
[56 88]
[57 87]
[58 86]
[59 85]
[61 81]
[62 80]
[63 79]
[64 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
