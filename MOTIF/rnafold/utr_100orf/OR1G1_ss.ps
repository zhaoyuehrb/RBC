%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGGGGAAAAAUCUGACCAGCAUCUCAGAAUGUUUCCUCCUGGGGUUCUCUGAGCAGCUGGAGGAGCAGAAGCCCCUCUUUGGGUCCUUCCUGUUCA\
) } def
/len { sequence length } bind def

/coor [
[189.50567627 300.13662720]
[192.36502075 291.81832886]
[197.64564514 284.74099731]
[190.48484802 271.56060791]
[183.32405090 258.38018799]
[176.16325378 245.19979858]
[169.00245667 232.01939392]
[161.84165955 218.83898926]
[154.68086243 205.65858459]
[137.99156189 207.01361084]
[122.30618286 200.99951172]
[110.72586060 188.75477600]
[105.56192017 172.65463257]
[107.87471008 155.85044861]
[117.25622559 141.65283203]
[109.28985596 128.94311523]
[101.32348633 116.23339844]
[90.05019379 112.89480591]
[83.96169281 102.83679199]
[86.23068237 91.30053711]
[78.66343689 78.34921265]
[71.09619904 65.39788818]
[63.52895355 52.44656372]
[55.96170807 39.49523926]
[40.93864441 35.37877274]
[33.44888306 22.13648796]
[37.46588516 7.83966017]
[29.89864159 -5.11166525]
[22.33139992 -18.06299019]
[14.76415634 -31.01431656]
[7.19691324 -43.96564102]
[-0.37032974 -56.91696930]
[-14.24912548 -57.28279495]
[-26.01750755 -64.44169617]
[-32.61870193 -76.40759277]
[-32.40124130 -89.96296692]
[-25.53079605 -101.52383423]
[-32.69159317 -114.70423126]
[-39.85239029 -127.88463593]
[-47.01319122 -141.06503296]
[-61.27296448 -149.16384888]
[-61.11848068 -165.56227112]
[-46.70865631 -173.39100647]
[-32.86708832 -164.59652710]
[-33.83279037 -148.22583008]
[-26.67199135 -135.04544067]
[-19.51119232 -121.86503601]
[-12.35039425 -108.68463135]
[3.90808249 -107.11435699]
[16.19252205 -96.10000610]
[19.58815575 -79.78537750]
[12.58099556 -64.48420715]
[20.14823914 -51.53288651]
[27.71548080 -38.58155823]
[35.28272629 -25.63023376]
[42.84996796 -12.67890835]
[50.41720963 0.27241716]
[64.84439850 3.79261041]
[72.70315552 16.81929779]
[68.91303253 31.92799568]
[76.48027802 44.87932205]
[84.04752350 57.83064651]
[91.61476135 70.78197479]
[99.18200684 83.73329926]
[113.93328857 91.56565094]
[114.03321075 108.26702881]
[121.99958038 120.97674561]
[129.96594238 133.68646240]
[143.14938354 131.27001953]
[156.32832336 133.52723694]
[167.90023804 140.16116333]
[176.46578979 150.34403992]
[180.99794006 162.82049561]
[180.96516418 176.06234741]
[176.39361572 188.45571899]
[167.86125183 198.49778748]
[175.02206421 211.67819214]
[182.18286133 224.85859680]
[189.34365845 238.03900146]
[196.50445557 251.21939087]
[203.66525269 264.39981079]
[210.82604980 277.58020020]
[232.78506470 281.65301514]
[244.91864014 300.09158325]
[240.08680725 321.36151123]
[249.56886292 332.98437500]
[259.05090332 344.60723877]
[274.80270386 347.65029907]
[282.11669922 361.92913818]
[275.38220215 376.49023438]
[259.76535034 380.16360474]
[247.24604797 370.13131714]
[247.42805481 354.08929443]
[237.94599915 342.46643066]
[228.46395874 330.84356689]
[220.21226501 333.10632324]
[211.62937927 332.74310303]
[203.53408813 329.76763916]
[196.70498657 324.44384766]
[191.80567932 317.26260376]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 82]
[4 81]
[5 80]
[6 79]
[7 78]
[8 77]
[9 76]
[15 68]
[16 67]
[17 66]
[20 64]
[21 63]
[22 62]
[23 61]
[24 60]
[27 57]
[28 56]
[29 55]
[30 54]
[31 53]
[32 52]
[37 48]
[38 47]
[39 46]
[40 45]
[85 95]
[86 94]
[87 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
