%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:27:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCAGUCCUUCACUGAGGAGCCAGAGGGAAUCAAUUCCACAAGCUGGGUUGAGGAGAACAGGAGAUGGAGAAAGCAAGUGGAAGACAGUCCAUUGCUCUGUCCACAGUGGAGACUGGCACAGUGAACCCGGGGCUGGAGCUCAUGGAAAAAGAAGUAGAGCCUG\
) } def
/len { sequence length } bind def

/coor [
[193.78218079 308.77606201]
[208.67393494 310.57757568]
[201.83880615 297.22537231]
[195.00366211 283.87319946]
[188.16851807 270.52099609]
[181.33338928 257.16882324]
[174.49824524 243.81663513]
[167.66310120 230.46444702]
[160.82797241 217.11225891]
[153.99282837 203.76007080]
[146.65731812 190.67610168]
[138.83193970 177.87908936]
[131.00657654 165.08207703]
[123.18119812 152.28506470]
[115.35582733 139.48805237]
[107.53045654 126.69104004]
[83.44398499 125.65057373]
[67.04551697 104.96297455]
[72.34107208 76.76576996]
[57.79275894 80.41908264]
[46.29259491 91.28447723]
[32.06412506 86.87994385]
[17.51581573 90.53324890]
[2.96750498 94.18655396]
[-11.58080578 97.83986664]
[-20.90963936 115.58810425]
[-39.97189713 120.74382782]
[-56.46040344 110.43904877]
[-70.77796173 114.91201782]
[-85.09552765 119.38498688]
[-99.41308594 123.85795593]
[-110.11991119 136.27954102]
[-126.17803192 132.95254517]
[-131.06822205 117.29949951]
[-119.75988007 105.42290497]
[-103.88605499 109.54039764]
[-89.56849670 105.06742859]
[-75.25093079 100.59445953]
[-60.93337250 96.12149048]
[-58.77344131 86.00890350]
[-52.54367828 77.65415955]
[-43.32566452 72.62079620]
[-32.76752472 71.88572693]
[-22.78937531 75.65033722]
[-15.23411274 83.29154968]
[-0.68580240 79.63824463]
[13.86250877 75.98493958]
[28.41081810 72.33162689]
[38.87039185 61.72754288]
[54.13945389 65.87076569]
[68.68775940 62.21746063]
[54.16893005 58.44870758]
[39.43672562 61.27044296]
[24.71284103 58.40562439]
[12.11338615 50.26598358]
[3.44915104 38.02135086]
[-0.03464174 23.43151855]
[2.16269708 8.59333515]
[9.72536659 -4.36066198]
[21.56646156 -13.56872654]
[35.98418427 -17.70747948]
[50.90642166 -16.18210030]
[64.18856049 -9.21181393]
[73.92168427 2.20160913]
[78.70696259 16.41783714]
[77.85618591 31.39557076]
[83.50969696 45.28937149]
[85.20931244 30.38597488]
[86.90892792 15.48257446]
[88.60854340 0.57917559]
[77.34130859 -9.92584801]
[74.45396423 -24.87631989]
[80.84801483 -38.49909973]
[93.88163757 -45.65890503]
[95.58125305 -60.56230545]
[97.28086090 -75.46570587]
[98.98047638 -90.36910248]
[100.68009186 -105.27250671]
[98.53717041 -114.19845581]
[102.55548859 -120.44087982]
[104.53683472 -135.30944824]
[106.51818085 -150.17800903]
[108.49952698 -165.04658508]
[98.70039368 -177.44628906]
[100.62223053 -193.13328552]
[113.12484741 -202.80076599]
[128.79064941 -200.71319580]
[138.32540894 -188.10906982]
[136.07231140 -172.46620178]
[123.36808777 -163.06523132]
[121.38674927 -148.19667053]
[119.40540314 -133.32810974]
[117.42405701 -118.45954132]
[115.58349609 -103.57289124]
[113.88388062 -88.66948700]
[112.18426514 -73.76609039]
[110.48464966 -58.86268997]
[108.78503418 -43.95928955]
[119.87191010 -34.04873276]
[123.03453064 -19.33609009]
[116.85514069 -5.41960669]
[103.51194763 2.27879071]
[101.81233215 17.18218994]
[100.11271667 32.08559036]
[98.41310120 46.98898697]
[110.82568359 55.41084671]
[124.04613495 48.32425308]
[137.26658630 41.23765945]
[150.48703003 34.15106583]
[158.66587830 19.93704224]
[175.06317139 20.18370438]
[182.81077576 34.63730621]
[173.93861389 48.42922211]
[157.57362366 47.37150955]
[144.35316467 54.45810318]
[131.13272095 61.54469681]
[117.91227722 68.63129425]
[128.04496765 80.73354340]
[131.56010437 95.16820526]
[128.51478577 108.76132202]
[120.32746887 118.86566925]
[128.15284729 131.66268921]
[135.97821045 144.45970154]
[143.80358887 157.25671387]
[151.62895203 170.05372620]
[159.45433044 182.85073853]
[163.43342590 184.82667542]
[166.26741028 187.69264221]
[167.81608582 190.97016907]
[168.11230469 194.18516541]
[167.34501648 196.92494202]
[174.18016052 210.27713013]
[181.01528931 223.62930298]
[187.85043335 236.98149109]
[194.68557739 250.33367920]
[201.52070618 263.68588257]
[208.35585022 277.03805542]
[215.19099426 290.39022827]
[222.02612305 303.74243164]
[229.48512268 316.75640869]
[237.55125427 329.40304565]
[245.61740112 342.04965210]
[253.68354797 354.69628906]
[268.55850220 351.67959595]
[283.51806641 354.24389648]
[296.53909302 362.04238892]
[305.86062622 374.02044678]
[310.22198486 388.55810547]
[309.03332520 403.68923950]
[302.45538330 417.36752319]
[291.37780762 427.74307251]
[277.29876709 433.41265869]
[262.12228394 433.60955811]
[247.90086365 428.30709839]
[236.55786133 418.22241211]
[229.62730408 404.71939087]
[228.04650879 389.62417603]
[232.02926636 374.97827148]
[241.03691101 362.76245117]
[232.97076416 350.11581421]
[224.90463257 337.46917725]
[216.83848572 324.82254028]
[210.86610413 338.58227539]
[196.43640137 342.67910767]
[184.12464905 334.11050415]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 139]
[3 138]
[4 137]
[5 136]
[6 135]
[7 134]
[8 133]
[9 132]
[10 131]
[11 126]
[12 125]
[13 124]
[14 123]
[15 122]
[16 121]
[19 51]
[20 50]
[22 48]
[23 47]
[24 46]
[25 45]
[28 39]
[29 38]
[30 37]
[31 36]
[67 105]
[68 104]
[69 103]
[70 102]
[74 98]
[75 97]
[76 96]
[77 95]
[78 94]
[80 93]
[81 92]
[82 91]
[83 90]
[106 117]
[107 116]
[108 115]
[109 114]
[140 162]
[141 161]
[142 160]
[143 159]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
