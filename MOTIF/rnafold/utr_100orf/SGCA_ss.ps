%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCCUCCCUGCCCCCUGUCUCUGUCACUCACCGGGCGGGCCAGGCCGGGCAGCCAUGGCUGAGACACUCUUCUGGACUCCUCUCCUCGUGGUUCUCCUGGCAGGGCUGGGGGACACCGAGGCCCAGCAGACCACGCUACACCCACUUGUGGGCC\
) } def
/len { sequence length } bind def

/coor [
[168.41963196 216.84083557]
[156.63429260 204.10981750]
[152.86784363 187.08421326]
[158.23780823 170.40126038]
[147.89979553 159.53269958]
[137.56178284 148.66413879]
[127.22377014 137.79559326]
[116.88575745 126.92703247]
[106.54774475 116.05847931]
[91.65572357 114.26188660]
[79.02954865 122.36001587]
[66.40337372 130.45814514]
[53.77720261 138.55627441]
[41.15102768 146.65441895]
[28.52485275 154.75254822]
[25.03530312 169.93347168]
[12.11520672 177.96627808]
[-2.33599019 174.54595947]
[-14.96216393 182.64408875]
[-13.56923580 197.88609314]
[-19.42988014 212.02508545]
[-31.19736481 221.81207275]
[-46.16760635 224.99803162]
[-60.90055847 220.85089111]
[-72.01068878 210.32360840]
[-76.94497681 195.83529663]
[-74.56954956 180.71524048]
[-65.43027496 168.43794250]
[-51.62728882 161.82461548]
[-36.33241272 162.39495850]
[-23.06029510 170.01791382]
[-10.43412209 161.91978455]
[-7.51560593 147.35896301]
[5.17376900 138.96643066]
[20.42672157 142.12637329]
[33.05289459 134.02824402]
[45.67906952 125.93010712]
[58.30524445 117.83197784]
[70.93141937 109.73384094]
[83.55759430 101.63571167]
[89.67691803 87.94068146]
[87.28594208 73.13246918]
[84.89496613 58.32424927]
[72.36510468 49.07004547]
[70.15126801 34.01834869]
[79.05095673 22.13007164]
[76.65998077 7.32185602]
[74.26900482 -7.48635960]
[71.87802887 -22.29457474]
[69.48705292 -37.10279083]
[67.09607697 -51.91100693]
[55.13523865 -65.87762451]
[61.94244003 -82.02669525]
[59.25564957 -96.78410339]
[56.56885910 -111.54151154]
[53.88206863 -126.29891968]
[51.19527817 -141.05633545]
[48.50848770 -155.81373596]
[45.82169342 -170.57115173]
[43.13490295 -185.32856750]
[32.96781158 -193.32464600]
[31.05854607 -205.71151733]
[37.89433289 -215.73385620]
[35.50335693 -230.54208374]
[33.11238098 -245.35029602]
[30.72140694 -260.15850830]
[15.54413223 -267.56411743]
[7.82957649 -282.40002441]
[10.43160820 -298.75024414]
[22.13371468 -310.22616577]
[19.44692230 -324.98358154]
[16.76013184 -339.74099731]
[7.97448206 -354.24093628]
[19.47566223 -366.69723511]
[34.62900162 -359.09378052]
[31.51754189 -342.42776489]
[34.20433426 -327.67037964]
[36.89112473 -312.91296387]
[49.43471527 -308.25183105]
[58.09572220 -297.90927124]
[60.52050400 -284.52871704]
[55.96754837 -271.60006714]
[45.52962112 -262.54946899]
[47.92059708 -247.74127197]
[50.31157303 -232.93304443]
[52.70254517 -218.12483215]
[64.50780487 -205.17237854]
[57.89231491 -188.01535034]
[60.57910538 -173.25794983]
[63.26589584 -158.50053406]
[65.95269012 -143.74311829]
[68.63948059 -128.98571777]
[71.32627106 -114.22830200]
[74.01306152 -99.47089386]
[76.69985199 -84.71348572]
[86.48787689 -77.54620361]
[88.82089233 -65.23210907]
[81.90429688 -54.30197906]
[84.29527283 -39.49376297]
[86.68624878 -24.68554878]
[89.07721710 -9.87733459]
[91.46819305 4.93088102]
[93.85916901 19.73909569]
[106.04810333 28.22234726]
[108.68383789 43.20592117]
[99.70317841 55.93327713]
[102.09415436 70.74149323]
[104.48513031 85.54970551]
[114.86924744 92.32975769]
[117.41629791 105.72046661]
[127.75431061 116.58901978]
[138.09231567 127.45757294]
[148.43032837 138.32612610]
[158.76834106 149.19468689]
[169.10635376 160.06324768]
[181.37619019 155.84089661]
[194.28366089 156.58972168]
[205.89840698 162.16209412]
[214.49696350 171.69171143]
[218.81843567 183.72804260]
[218.24932861 196.45706177]
[212.91036987 207.97468567]
[222.80525208 219.24815369]
[232.70014954 230.52162170]
[242.59503174 241.79510498]
[252.48991394 253.06857300]
[262.38479614 264.34204102]
[277.91683960 265.52261353]
[287.79107666 277.09649658]
[286.56985474 291.89663696]
[296.46475220 303.17010498]
[310.70822144 297.92721558]
[325.88375854 298.18762207]
[339.93896484 303.91610718]
[350.97299194 314.33792114]
[357.49362183 328.04360962]
[358.61892700 343.17959595]
[354.19677734 357.69885254]
[344.82519531 369.63778687]
[331.77163696 377.38174438]
[316.80145264 379.88339233]
[301.93927002 376.80444336]
[289.19506836 368.56130981]
[280.29238892 356.26873779]
[276.43524170 341.58926392]
[278.14529419 326.50814819]
[285.19125366 313.06497192]
[275.29638672 301.79150391]
[260.46286011 301.08285522]
[250.26744080 289.79089355]
[251.11132812 274.23693848]
[241.21644592 262.96347046]
[231.32156372 251.68998718]
[221.42666626 240.41651917]
[211.53178406 229.14303589]
[201.63690186 217.86956787]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 115]
[5 114]
[6 113]
[7 112]
[8 111]
[9 110]
[10 40]
[11 39]
[12 38]
[13 37]
[14 36]
[15 35]
[18 32]
[19 31]
[41 108]
[42 107]
[43 106]
[46 103]
[47 102]
[48 101]
[49 100]
[50 99]
[51 98]
[53 95]
[54 94]
[55 93]
[56 92]
[57 91]
[58 90]
[59 89]
[60 88]
[63 86]
[64 85]
[65 84]
[66 83]
[70 78]
[71 77]
[72 76]
[122 156]
[123 155]
[124 154]
[125 153]
[126 152]
[127 151]
[130 148]
[131 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
