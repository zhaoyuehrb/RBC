%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:26:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAAUAAAAGGGGAGCGGCGAAGAGGCAGGAAGACAAGACCAUGUCGAAGGGCCCCGGGCCCGGCGGCUCCGCAGCUUCCUCGGCGCCCCCGGCCGCUACCGCUCAGGUGCUGCAGGCACAGCCCGAGAAACCGCAGCACU\
) } def
/len { sequence length } bind def

/coor [
[140.42768860 213.66624451]
[125.76302338 216.82020569]
[110.97592163 214.30197144]
[98.18183899 206.47180176]
[89.21112061 194.44990540]
[85.34712219 179.95613098]
[87.14263916 165.06398010]
[94.34079742 151.90394592]
[105.91182709 142.35871887]
[120.20034790 137.79383850]
[135.16395569 138.86283875]
[123.61466217 129.29133606]
[112.06537628 119.71981812]
[100.51608276 110.14830017]
[92.73088074 107.81266785]
[88.82122803 100.23745728]
[77.48497772 90.41455078]
[66.14873505 80.59163666]
[50.65240860 77.40190887]
[46.10063171 63.21985626]
[34.76438904 53.39694214]
[23.42814636 43.57403183]
[7.93181753 40.38430405]
[3.38004112 26.20225143]
[-7.95620251 16.37934113]
[-19.29244614 6.55642939]
[-30.62868881 -3.26648164]
[-41.96493149 -13.08939266]
[-61.87165833 -15.92302513]
[-67.56621552 -34.35427475]
[-79.32298279 -43.66976929]
[-91.07975006 -52.98526382]
[-87.08837891 -38.52604675]
[-89.64081573 -23.74480629]
[-98.25011444 -11.46148205]
[-111.27379608 -4.01946306]
[-126.22724152 -2.83852482]
[-140.25764465 -8.14396381]
[-150.68832397 -18.92361832]
[-155.52932739 -33.12096786]
[-153.85710144 -48.02746201]
[-145.99066162 -60.79927444]
[-133.43075562 -68.99981689]
[-118.57355499 -71.06461334]
[-104.25196838 -66.59886932]
[-113.17504883 -78.65618134]
[-122.09812164 -90.71348572]
[-131.02119446 -102.77079773]
[-146.40124512 -105.23896790]
[-155.27876282 -117.59390259]
[-152.83094788 -132.24122620]
[-161.75402832 -144.29852295]
[-170.67710876 -156.35583496]
[-179.60018921 -168.41314697]
[-188.52325439 -180.47045898]
[-202.80569458 -189.60548401]
[-197.98143005 -205.85856628]
[-181.02803040 -205.72215271]
[-176.46595764 -189.39353943]
[-167.54287720 -177.33622742]
[-158.61979675 -165.27891541]
[-149.69671631 -153.22160339]
[-140.77363586 -141.16429138]
[-126.05043793 -139.22448730]
[-116.82940674 -127.12377167]
[-118.96389008 -111.69387054]
[-110.04081726 -99.63656616]
[-101.11773682 -87.57925415]
[-92.19465637 -75.52194977]
[-81.76425171 -64.74202728]
[-70.00748444 -55.42653656]
[-58.25072098 -46.11104202]
[-48.15213394 -48.20153809]
[-38.38117599 -44.26738739]
[-32.29896545 -35.39886093]
[-32.14202118 -24.42563629]
[-20.80577850 -14.60272503]
[-9.46953487 -4.77981424]
[1.86670852 5.04309654]
[13.20295238 14.86600780]
[27.88843727 17.35313606]
[33.25105667 32.23778915]
[44.58729935 42.06069946]
[55.92354584 51.88360977]
[70.60903168 54.37073898]
[75.97164917 69.25539398]
[87.30789185 79.07830048]
[98.64413452 88.90121460]
[110.08759308 98.59901428]
[121.63688660 108.17052460]
[133.18617249 117.74203491]
[144.73547363 127.31355286]
[155.00621033 129.20898438]
[160.28480530 136.83044434]
[174.06288147 142.76043701]
[189.79766846 141.10908508]
[198.42933655 153.24760437]
[212.20741272 159.17758179]
[223.75042725 149.25184631]
[238.39860535 145.33807373]
[253.23277283 148.16081238]
[265.32064819 157.10754395]
[272.29653931 170.36070251]
[272.82421875 185.26664734]
[286.60229492 191.19664001]
[300.38037109 197.12661743]
[309.57876587 197.65742493]
[314.39370728 203.34118652]
[328.03817749 209.57241821]
[337.22268677 210.30514526]
[341.91162109 216.09332275]
[355.41592407 222.62277222]
[368.92022705 229.15222168]
[382.42453003 235.68168640]
[397.26583862 230.24922180]
[411.56616211 236.97796631]
[416.84140015 251.87586975]
[409.96185303 266.10427856]
[395.00900269 271.22171021]
[380.85415649 264.19210815]
[375.89508057 249.18598938]
[362.39077759 242.65652466]
[348.88647461 236.12707520]
[335.38217163 229.59762573]
[321.80697632 223.21688843]
[308.16247559 216.98567200]
[294.45037842 210.90469360]
[280.67230225 204.97470093]
[266.89425659 199.04472351]
[255.70597839 208.90820312]
[241.28538513 212.95245361]
[226.47825623 210.32377625]
[214.23086548 201.49078369]
[207.00373840 188.16203308]
[206.27742004 172.95565796]
[192.49935913 167.02566528]
[177.75006104 169.10116577]
[168.13288879 156.53851318]
[154.35481262 150.60852051]
[162.11413574 163.44569397]
[164.55058289 178.24649048]
[161.31559753 192.89350891]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 92]
[12 91]
[13 90]
[14 89]
[16 88]
[17 87]
[18 86]
[20 84]
[21 83]
[22 82]
[24 80]
[25 79]
[26 78]
[27 77]
[28 76]
[30 72]
[31 71]
[32 70]
[45 69]
[46 68]
[47 67]
[48 66]
[51 63]
[52 62]
[53 61]
[54 60]
[55 59]
[94 139]
[95 138]
[97 136]
[98 135]
[104 129]
[105 128]
[106 127]
[108 126]
[109 125]
[111 124]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
