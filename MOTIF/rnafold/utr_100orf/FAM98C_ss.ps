%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCGAGACCACACUUUCAUGGAGGCGGUGAAGGCGGAAGCGUGGGAGGGGGCCGCGGUGGCCCAGGACCUGCUGGCUCUGGGGUAUGGAGGUGUCCCGGGGGCGGCGUCGCGGGGCG\
) } def
/len { sequence length } bind def

/coor [
[131.84513855 244.32545471]
[131.45248413 229.33059692]
[123.38467407 216.81022644]
[130.75807190 202.81224060]
[130.36541748 187.81738281]
[129.97276306 172.82252502]
[121.90495300 160.30213928]
[129.27835083 146.30416870]
[128.88569641 131.30931091]
[128.49305725 116.31444550]
[116.82290649 126.59464264]
[102.32355499 130.01464844]
[88.55702972 126.36383820]
[78.61952972 117.09700012]
[74.44577789 104.85545349]
[59.52795029 103.28752899]
[44.61012268 101.71960449]
[29.69229507 100.15167236]
[14.77446651 98.58374786]
[-0.14336221 97.01582336]
[-15.06119061 95.44789124]
[-29.97901917 93.87996674]
[-41.59326935 107.66899872]
[-58.98615265 111.78338623]
[-75.26152802 104.78241730]
[-84.07954407 89.59515381]
[-99.05899048 88.81011200]
[-109.59075165 100.36934662]
[-125.09549713 102.40329742]
[-138.25234985 93.95159912]
[-142.84904480 79.00488281]
[-136.71517944 64.62052917]
[-122.74695587 57.59039307]
[-107.53975677 61.23389053]
[-98.27394867 73.83067322]
[-83.29450226 74.61570740]
[-77.05197144 64.04314423]
[-66.81899261 57.12767410]
[-54.53741074 55.25679016]
[-42.57030487 58.85347748]
[-33.24729538 67.28260803]
[-28.41109276 78.96213531]
[-13.49326324 80.53006744]
[1.42456472 82.09799194]
[16.34239388 83.66591644]
[31.26022148 85.23384857]
[46.17805099 86.80177307]
[61.09587860 88.36969757]
[76.01371002 89.93762970]
[94.22012329 71.15102386]
[123.04708099 76.61524200]
[121.47915649 61.69741058]
[119.91122437 46.77958298]
[118.34329987 31.86175346]
[116.77537537 16.94392586]
[105.26263428 5.77090120]
[106.96332550 -10.18175411]
[120.57282257 -18.67652893]
[135.65107727 -13.19695759]
[140.63134766 2.05349922]
[131.69320679 15.37599850]
[133.26112366 30.29382706]
[134.82905579 45.21165466]
[136.39698792 60.12948227]
[137.96490479 75.04730988]
[138.13400269 60.04826355]
[147.44905090 48.29115295]
[162.01188660 44.69613266]
[175.72816467 50.76766586]
[182.85786438 63.96491241]
[180.41732788 78.76503754]
[169.42785645 88.97443390]
[154.48716736 90.32032776]
[169.48202515 90.71298218]
[184.47688293 91.10563660]
[199.47174072 91.49829102]
[213.46972656 84.12488556]
[225.99009705 92.19269562]
[240.98495483 92.58535004]
[255.97981262 92.97800446]
[270.97467041 93.37065887]
[285.96954346 93.76331329]
[300.96438599 94.15596771]
[315.95925903 94.54862213]
[330.95413208 94.94127655]
[345.94897461 95.33393097]
[360.94384766 95.72658539]
[375.93869019 96.11923981]
[390.08453369 87.82299042]
[404.20657349 96.15964508]
[403.77728271 112.55317688]
[389.23828125 120.13932037]
[375.54605103 111.11409760]
[360.55117798 110.72144318]
[345.55633545 110.32878876]
[330.56146240 109.93614197]
[315.56658936 109.54348755]
[300.57174683 109.15083313]
[285.57687378 108.75817871]
[270.58203125 108.36552429]
[255.58715820 107.97286987]
[240.59230042 107.58021545]
[225.59744263 107.18756104]
[212.67199707 114.58905029]
[199.07908630 106.49314880]
[184.08422852 106.10049438]
[169.08937073 105.70783997]
[154.09451294 105.31518555]
[143.48791504 115.92179108]
[143.88056946 130.91665649]
[144.27322388 145.91151428]
[152.36911011 159.50440979]
[144.96762085 172.42987061]
[145.36027527 187.42472839]
[145.75292969 202.41958618]
[153.84883118 216.01248169]
[146.44734192 228.93794250]
[146.83999634 243.93280029]
[149.53419495 263.12631226]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 118]
[2 117]
[4 115]
[5 114]
[6 113]
[8 111]
[9 110]
[10 109]
[15 49]
[16 48]
[17 47]
[18 46]
[19 45]
[20 44]
[21 43]
[22 42]
[26 36]
[27 35]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
[73 108]
[74 107]
[75 106]
[76 105]
[78 103]
[79 102]
[80 101]
[81 100]
[82 99]
[83 98]
[84 97]
[85 96]
[86 95]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
