%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:25:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAAGUCGGUGCCGCUGCCGUCUCUGCGUUCGCCAUGCGUCCCGGGGCGCCAGGGCCACUCUGGCCUCUGCCCUGGGGGGCCCUGGCUUGGGCCGUGGGCUUCGUGAGCUCCAUGGGCUCGGGGAACCCCGCGC\
) } def
/len { sequence length } bind def

/coor [
[99.77768707 129.16987610]
[98.66737366 114.21002960]
[89.62785339 126.18029022]
[86.91757202 134.99960327]
[80.23870087 138.31942749]
[70.92510223 150.07769775]
[68.42163849 165.69956970]
[54.45404434 170.87214661]
[45.14044952 182.63041687]
[35.82685471 194.38868713]
[26.51325798 206.14695740]
[28.58332825 221.81509399]
[18.90187454 234.30690002]
[3.21273136 236.21119690]
[-9.17600918 226.39820862]
[-10.91432858 210.68980408]
[-0.97091210 198.40551758]
[14.75498772 196.83337402]
[24.06858253 185.07510376]
[33.38217926 173.31681824]
[42.69577408 161.55854797]
[44.53306580 146.77769470]
[59.16683197 140.76409912]
[68.48043060 129.00582886]
[77.65760040 117.14076996]
[86.69712067 105.17050934]
[88.94091034 90.33927917]
[83.84680176 76.23076630]
[68.80913544 73.43509674]
[57.26605606 63.55308914]
[52.25247574 49.31474686]
[55.02041245 34.57722473]
[64.72807312 23.28001785]
[59.63396454 9.17150688]
[54.53985596 -4.93700409]
[49.44575119 -19.04551506]
[35.10679245 -30.53225327]
[38.76254654 -47.65705109]
[33.34392166 -61.64413452]
[21.14390755 -71.71737671]
[23.76110458 -86.38024139]
[18.34247971 -100.36732483]
[12.92385483 -114.35440826]
[7.50522995 -128.34149170]
[2.08660483 -142.32856750]
[-3.33202028 -156.31565857]
[-8.75064564 -170.30273438]
[-14.16927052 -184.28982544]
[-19.58789444 -198.27690125]
[-25.00651932 -212.26399231]
[-35.29648972 -216.12329102]
[-41.59302521 -224.85992432]
[-41.98289490 -235.40118408]
[-36.57958984 -244.20271301]
[-41.34645844 -258.42514038]
[-46.11333084 -272.64755249]
[-50.88020325 -286.86993408]
[-55.64707565 -301.09234619]
[-60.41394424 -315.31475830]
[-71.18038940 -328.41134644]
[-61.57608795 -342.38250732]
[-45.49217606 -337.02114868]
[-46.19153595 -320.08163452]
[-41.42466354 -305.85922241]
[-36.65779495 -291.63681030]
[-31.89092255 -277.41439819]
[-27.12405014 -263.19198608]
[-22.35717964 -248.96958923]
[-6.95510674 -237.36650085]
[-11.01943684 -217.68261719]
[-5.60081196 -203.69552612]
[-0.18218674 -189.70845032]
[5.23643827 -175.72135925]
[10.65506363 -161.73428345]
[16.07368851 -147.74719238]
[21.49231339 -133.76011658]
[26.91093826 -119.77303314]
[32.32956314 -105.78594971]
[37.74818802 -91.79886627]
[49.56062698 -82.72607422]
[47.33100510 -67.06275940]
[52.74962997 -53.07567596]
[63.72909164 -47.86610794]
[68.32910156 -36.18446732]
[63.55426025 -24.13962173]
[68.64836884 -10.03111076]
[73.74247742 4.07739973]
[78.83658600 18.18590927]
[93.52220154 20.67552757]
[105.06668854 30.24531555]
[110.30568695 44.40226746]
[107.73829651 59.37908936]
[97.95531464 71.13666534]
[103.04942322 85.24517059]
[129.01950073 97.76392365]
[141.58695984 105.95287323]
[154.15441895 114.14182281]
[166.72187805 122.33077240]
[179.28935242 130.51971436]
[191.85681152 138.70866394]
[210.22184753 139.23413086]
[217.62449646 155.10310364]
[230.37774658 162.99958801]
[243.13099670 170.89605713]
[258.93731689 171.58253479]
[265.68508911 184.86096191]
[278.43835449 192.75744629]
[291.19161987 200.65393066]
[303.94485474 208.55041504]
[316.69812012 216.44689941]
[329.45138550 224.34336853]
[342.20462036 232.23985291]
[358.85430908 235.43737793]
[360.39083862 252.32156372]
[344.59185791 258.47204590]
[334.30816650 244.99311829]
[321.55490112 237.09663391]
[308.80163574 229.20014954]
[296.04837036 221.30366516]
[283.29513550 213.40718079]
[270.54187012 205.51069641]
[257.78860474 197.61422729]
[242.89450073 197.49255371]
[235.23452759 183.64932251]
[222.48126221 175.75283813]
[209.72801208 167.85635376]
[197.82675171 170.31562805]
[187.11608887 163.76560974]
[183.66786194 151.27613831]
[171.10040283 143.08718872]
[158.53292847 134.89823914]
[145.96546936 126.70928192]
[133.39801025 118.52033234]
[120.83054352 110.33138275]
[124.86702728 124.77807617]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 26]
[3 25]
[5 24]
[6 23]
[8 21]
[9 20]
[10 19]
[11 18]
[27 94]
[28 93]
[33 88]
[34 87]
[35 86]
[36 85]
[38 82]
[39 81]
[41 79]
[42 78]
[43 77]
[44 76]
[45 75]
[46 74]
[47 73]
[48 72]
[49 71]
[50 70]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
[59 63]
[95 134]
[96 133]
[97 132]
[98 131]
[99 130]
[100 129]
[102 126]
[103 125]
[104 124]
[106 122]
[107 121]
[108 120]
[109 119]
[110 118]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
