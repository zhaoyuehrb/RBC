%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:56:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGGCCAAUAUGGCUUCCUGCACCUGGUGACGCUUGGCGAAACUGAGGUCUCAUGGAGAAGCCCCGGAGUAUUGAGGAGACCCCAUCUUCAGAACCAAUGGAGGAAGAGGAAGAUGACGACUUGGAGCUGUUUGGUGGCUAUGAUAGUUUCC\
) } def
/len { sequence length } bind def

/coor [
[93.79033661 137.87606812]
[87.59683990 151.53771973]
[86.89291382 160.70536804]
[81.13689423 165.41151428]
[74.66779327 178.94483948]
[68.19869995 192.47814941]
[61.72960281 206.01147461]
[55.26050186 219.54479980]
[48.79140472 233.07810974]
[47.41555023 249.97615051]
[30.79702759 253.33189392]
[22.97195435 238.29179382]
[35.25808334 226.60902405]
[41.72718430 213.07569885]
[48.19628143 199.54237366]
[54.66537857 186.00906372]
[61.13447571 172.47573853]
[67.60357666 158.94241333]
[73.93519592 145.34423828]
[80.12868500 131.68258667]
[75.90677643 125.48374939]
[60.94820023 126.59779358]
[67.46295166 113.08609772]
[63.24104309 106.88726807]
[48.26029587 107.64700317]
[33.27954865 108.40673828]
[18.29880142 109.16648102]
[3.32652307 110.07799530]
[-11.63574982 111.14118958]
[-26.59802246 112.20438385]
[-36.93094254 123.86064911]
[-52.11996078 124.72573853]
[-63.16875076 114.80303955]
[-78.13102722 115.86623383]
[-93.09329987 116.92943573]
[-108.46402740 124.08323669]
[-119.59329987 111.29357147]
[-110.38435364 97.05870056]
[-94.15649414 101.96715546]
[-79.19422150 100.90396118]
[-64.23194885 99.84076691]
[-54.69727325 88.45544434]
[-39.53854370 87.16407013]
[-27.66121864 97.24211121]
[-12.69894600 96.17891693]
[2.26332736 95.11571503]
[8.75057697 91.48320007]
[17.53906441 94.18572998]
[32.51981354 93.42599487]
[47.50056076 92.66625214]
[62.48130798 91.90651703]
[69.56028748 80.05192566]
[79.92426300 72.05870819]
[91.81080627 68.63374329]
[103.40911102 69.76192474]
[113.13169861 74.77136230]
[119.83157349 82.49281311]
[133.42976379 76.16119385]
[147.02793884 69.82957458]
[160.62612915 63.49795532]
[174.22430420 57.16633606]
[187.33950806 49.88680649]
[199.90574646 41.69598389]
[212.47198486 33.50516129]
[225.03823853 25.31433868]
[237.52082825 16.99659157]
[249.91848755 8.55277252]
[262.31613159 0.10895395]
[274.71380615 -8.33486462]
[287.11145020 -16.77868462]
[287.38305664 -33.66279602]
[297.54663086 -46.93970108]
[313.45574951 -51.51743317]
[328.81069946 -45.78857422]
[341.03466797 -54.48192215]
[347.79666138 -68.78527832]
[362.65274048 -69.85607910]
[374.87670898 -78.54942322]
[387.10070801 -87.24276733]
[384.65960693 -99.99027252]
[387.23208618 -112.66410065]
[394.39791870 -123.37316895]
[405.05435181 -130.53337097]
[417.58551025 -133.10186768]
[430.10742188 -130.72880554]
[440.75134277 -123.80459595]
[453.31759644 -131.99542236]
[465.88385010 -140.18623352]
[478.45007324 -148.37705994]
[491.01632690 -156.56788635]
[503.58255005 -164.75869751]
[516.14880371 -172.94952393]
[515.07781982 -189.42143250]
[522.40240479 -204.10943604]
[536.04669189 -213.06227112]
[552.24932861 -213.92471313]
[566.60021973 -206.55645752]
[578.99786377 -215.00027466]
[581.69696045 -230.57238770]
[594.66461182 -239.60655212]
[610.20727539 -236.74299622]
[619.10388184 -223.68057251]
[616.07611084 -208.16902161]
[602.92041016 -199.41105652]
[587.44171143 -202.60261536]
[575.04406738 -194.15879822]
[576.95233154 -180.60400391]
[572.80236816 -167.49024963]
[563.35272217 -157.40435791]
[550.41333008 -152.36172485]
[536.49865723 -153.40374756]
[524.33959961 -160.38328552]
[511.77337646 -152.19245911]
[499.20715332 -144.00164795]
[486.64089966 -135.81082153]
[474.07464600 -127.61999512]
[461.50842285 -119.42917633]
[448.94216919 -111.23834991]
[450.51342773 -94.14149475]
[443.20364380 -78.50850677]
[428.93029785 -68.65142822]
[411.54492188 -67.33882141]
[395.79403687 -75.01879120]
[383.57006836 -66.32543945]
[371.34606934 -57.63209534]
[365.45843506 -43.95054626]
[349.72802734 -42.25794220]
[337.50402832 -33.56459427]
[338.60406494 -20.22670364]
[332.91073608 -7.99519491]
[321.82012939 -0.12373880]
[308.17919922 1.23542714]
[295.55526733 -4.38102627]
[283.15762329 4.06279278]
[270.75994873 12.50661182]
[258.36230469 20.95042992]
[245.96464539 29.39424896]
[242.18438721 35.79653549]
[233.22904968 37.88058090]
[220.66281128 46.07140350]
[208.09657288 54.26222610]
[195.53033447 62.45304871]
[210.13111877 65.89064789]
[219.24240112 77.80636597]
[218.73320007 92.79772186]
[208.83438110 104.06774139]
[194.03398132 106.50668335]
[181.04240417 99.00875092]
[175.74992371 84.97344971]
[180.55592346 70.76451874]
[166.95774841 77.09613800]
[153.35955811 83.42775726]
[139.76138306 89.75937653]
[126.16319275 96.09099579]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[4 18]
[5 17]
[6 16]
[7 15]
[8 14]
[9 13]
[24 51]
[25 50]
[26 49]
[27 48]
[28 46]
[29 45]
[30 44]
[33 41]
[34 40]
[35 39]
[57 154]
[58 153]
[59 152]
[60 151]
[61 150]
[62 142]
[63 141]
[64 140]
[65 139]
[66 137]
[67 136]
[68 135]
[69 134]
[70 133]
[74 128]
[75 127]
[77 125]
[78 124]
[79 123]
[86 118]
[87 117]
[88 116]
[89 115]
[90 114]
[91 113]
[92 112]
[97 106]
[98 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
