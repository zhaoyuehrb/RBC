%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:31:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUUGCUACCUAAGCCCUCCACUCCCGACACCAUGCUCUGCGACAACUUCCCCGGGGCUGUCUUCCCAGGAUGCUACUGGGGCAGCUAUGGCUACCCGCUGGGAUAUAGCGUUGGCUGUGGCUAUGGCAGCA\
) } def
/len { sequence length } bind def

/coor [
[89.35977936 303.42892456]
[89.35977936 288.42892456]
[89.35977936 273.42892456]
[89.35977936 258.42892456]
[89.35977936 243.42892456]
[89.35977936 228.42892456]
[89.35977936 213.42892456]
[89.35977936 198.42892456]
[82.01438141 193.15135193]
[77.90917206 184.93673706]
[78.10372162 175.61692810]
[82.68215179 167.33825684]
[90.70424652 162.06709290]
[91.76629639 147.10475159]
[92.82835388 132.14239502]
[93.89041138 117.18003845]
[91.67406464 132.01539612]
[82.59488678 143.95559692]
[68.89160919 150.05644226]
[53.94318771 148.81356812]
[41.43559647 140.53346252]
[34.45295334 127.25782013]
[34.71703339 112.26014709]
[42.16272354 99.23855591]
[54.95406723 91.40392303]
[69.93697357 90.68808746]
[83.41604614 97.26678467]
[70.48511505 89.66473389]
[57.55419159 82.06269073]
[44.62326431 74.46063995]
[40.06360626 74.60557556]
[36.12353134 73.36226654]
[33.17517471 71.11331177]
[31.42070198 68.32495117]
[30.87972641 65.48153687]
[18.72367859 56.69344711]
[6.56763220 47.90536118]
[-5.58841515 39.11727142]
[-17.74446297 30.32917976]
[-29.90050888 21.54109001]
[-48.21607971 20.12929153]
[-54.84640121 3.92508221]
[-67.20661926 -4.57344437]
[-83.17987061 -3.07853413]
[-94.20355988 -14.73434162]
[-91.82125092 -30.59952927]
[-77.86045837 -38.50368118]
[-63.03069305 -32.38341141]
[-58.70809174 -16.93366432]
[-46.34787369 -8.43513775]
[-34.33876801 -10.32086182]
[-23.95319748 -3.26025772]
[-21.11241913 9.38504314]
[-8.95637321 18.17313385]
[3.19967437 26.96122360]
[15.35572147 35.74931335]
[27.51176834 44.53740311]
[39.66781616 53.32549286]
[52.22531128 61.52971268]
[65.15624237 69.13175964]
[78.08716583 76.73381042]
[91.01808929 84.33586121]
[92.58795929 81.49414825]
[94.78774261 78.81842041]
[97.59695435 76.43029022]
[102.13099670 62.13195801]
[106.66504669 47.83362198]
[111.19909668 33.53528595]
[115.73313904 19.23694801]
[107.20052338 6.13242769]
[109.13889313 -9.38455486]
[120.63300323 -19.98735428]
[136.25569153 -20.66965294]
[148.63040161 -11.10929012]
[151.91418457 4.17962360]
[144.55651855 17.97813034]
[130.03147888 23.77099609]
[125.49742889 38.06933212]
[120.96337891 52.36766815]
[116.42933655 66.66600800]
[111.89528656 80.96434021]
[120.53919983 93.22332764]
[135.52978516 93.75469208]
[150.52037048 94.28604889]
[165.51095581 94.81741333]
[180.50154114 95.34877777]
[195.49212646 95.88013458]
[210.48271179 96.41149902]
[221.99478149 85.91815948]
[237.18978882 86.67058563]
[247.12263489 97.71025085]
[262.11322021 98.24160767]
[277.10382080 98.77297211]
[292.09439087 99.30432892]
[307.09439087 99.30432892]
[322.08499146 98.77297211]
[337.07556152 98.24160767]
[352.69058228 91.63797760]
[363.35879517 104.81467438]
[353.65029907 118.71365356]
[337.60693359 113.23219299]
[322.61633301 113.76355743]
[307.62576294 114.29491425]
[304.92758179 116.70297241]
[300.89419556 117.87285614]
[296.14492798 117.17572784]
[291.56304932 114.29491425]
[276.57244873 113.76355743]
[261.58187866 113.23219299]
[246.59127808 112.70083618]
[235.90171814 123.00950623]
[220.69155884 122.68418121]
[209.95135498 111.40208435]
[194.96076965 110.87071991]
[179.97018433 110.33936310]
[164.97959900 109.80799866]
[149.98901367 109.27663422]
[134.99842834 108.74527740]
[120.00783539 108.21391296]
[108.85276794 118.24209595]
[107.79071045 133.20445251]
[106.72865295 148.16680908]
[105.66659546 163.12915039]
[116.30190277 181.66011047]
[104.35977936 198.42892456]
[104.35977936 213.42892456]
[104.35977936 228.42892456]
[104.35977936 243.42892456]
[104.35977936 258.42892456]
[104.35977936 273.42892456]
[104.35977936 288.42892456]
[104.35977936 303.42892456]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 132]
[2 131]
[3 130]
[4 129]
[5 128]
[6 127]
[7 126]
[8 125]
[13 123]
[14 122]
[15 121]
[16 120]
[27 62]
[28 61]
[29 60]
[30 59]
[35 58]
[36 57]
[37 56]
[38 55]
[39 54]
[40 53]
[42 50]
[43 49]
[65 81]
[66 80]
[67 79]
[68 78]
[69 77]
[82 119]
[83 118]
[84 117]
[85 116]
[86 115]
[87 114]
[88 113]
[91 110]
[92 109]
[93 108]
[94 107]
[95 103]
[96 102]
[97 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
