%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:31:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGAAACCCGGAUUCCGGUUCCGGUGGGCCUCCAUCAGCAAGCUCCAGUGCUACGUGUCCCUGGCAUUUUAGGUGUCGGUUGGGUAGGCAGUCAUGGAUCAGGUAAUGCAGUUUGUUGAGCCAAGUCGGCAGUUUGUAAAGGACUCCAUUCGGCUGGUUAAAAGAUGCACUAAACCUGAUAGAAAAGAAUUCC\
) } def
/len { sequence length } bind def

/coor [
[154.51145935 105.75577545]
[139.51918030 106.23654938]
[124.52687836 106.71732330]
[122.39945221 112.03971863]
[119.13407135 116.75045013]
[114.89662170 120.61021423]
[109.90238190 123.42292023]
[104.40506744 125.04566956]
[98.68396759 125.39602661]
[93.02972412 124.45619202]
[84.84669495 137.02751160]
[76.66367340 149.59884644]
[68.48065186 162.17016602]
[60.29762650 174.74148560]
[65.02640533 189.64694214]
[59.02005768 204.08500671]
[45.11459351 211.23846436]
[29.87574768 207.72969055]
[20.49883842 195.21539307]
[21.41135406 179.60444641]
[32.18243408 168.26788330]
[47.72630310 166.55845642]
[55.90932846 153.98713684]
[64.09235382 141.41581726]
[72.27537537 128.84449768]
[80.45839691 116.27317047]
[77.72547150 112.26929474]
[75.80196381 107.81955719]
[74.75779724 103.08567047]
[74.63089752 98.23965454]
[60.63871002 92.83422089]
[46.64652252 87.42878723]
[32.65433502 82.02335358]
[18.61927986 76.73022461]
[4.54225302 71.54975128]
[-2.04687881 72.29883575]
[-7.24002981 69.95223999]
[-9.89846230 65.97103882]
[-23.80221367 60.34203720]
[-37.70596695 54.71303177]
[-51.60971832 49.08402634]
[-66.01756287 55.00447464]
[-80.03775787 49.09780121]
[-85.59320831 35.32563400]
[-99.49696350 29.69663048]
[-115.19212341 31.68971443]
[-124.08569336 19.74175644]
[-137.98944092 14.11275101]
[-152.02450562 8.81962490]
[-166.18275452 3.86543941]
[-180.34100342 -1.08874655]
[-194.49925232 -6.04293251]
[-208.65750122 -10.99711800]
[-222.81575012 -15.95130444]
[-236.97399902 -20.90549088]
[-249.65190125 -11.95839405]
[-265.16699219 -12.20558548]
[-277.55343628 -21.55201530]
[-282.04837036 -36.40378952]
[-276.92340088 -51.05009842]
[-264.14920044 -59.85913467]
[-248.63769531 -59.44364929]
[-236.35337830 -49.96340179]
[-232.01982117 -35.06373978]
[-217.86157227 -30.10955429]
[-203.70332336 -25.15536880]
[-189.54505920 -20.20118332]
[-175.38681030 -15.24699688]
[-161.22856140 -10.29281044]
[-147.07031250 -5.33862448]
[-143.74279785 -6.53981113]
[-139.66641235 -6.18132734]
[-135.58404541 -3.92807364]
[-132.36044312 0.20899920]
[-118.45668793 5.83800411]
[-103.75601196 3.44229627]
[-93.86795807 15.79287910]
[-79.96420288 21.42188454]
[-66.39239502 15.39348984]
[-52.21182632 20.90403748]
[-45.98071289 35.18027496]
[-32.07696152 40.80928040]
[-18.17320824 46.43828583]
[-4.26945734 52.06729126]
[9.72272873 57.47272491]
[23.79975510 62.65320206]
[31.17197227 62.01211548]
[38.05977249 68.03116608]
[52.05195618 73.43659973]
[66.04414368 78.84203339]
[80.03633118 84.24747467]
[104.25970459 74.92919159]
[124.04610443 91.72503662]
[139.03840637 91.24426270]
[154.03068542 90.76348877]
[162.98744202 70.21907043]
[180.99203491 56.98740005]
[203.13804626 54.58918381]
[223.43304443 63.60444260]
[236.42001343 81.53414917]
[251.14340210 78.66676331]
[265.86679077 75.79938507]
[280.59017944 72.93200684]
[295.31356812 70.06462860]
[310.03695679 67.19725037]
[324.76034546 64.32987213]
[334.72955322 48.23134232]
[352.98452759 44.58161926]
[367.85824585 55.23805618]
[382.48214722 51.90024185]
[397.10607910 48.56242752]
[411.72998047 45.22461319]
[425.85864258 30.85743332]
[444.07440186 37.32240295]
[458.58380127 33.51758575]
[473.09323120 29.71276474]
[487.60266113 25.90794563]
[493.32226562 11.60436630]
[506.21682739 3.50599265]
[521.22991943 4.54101562]
[532.61840820 14.10342312]
[547.12786865 10.29860401]
[561.63726807 6.49378586]
[576.14666748 2.68896699]
[587.53289795 -8.29576111]
[601.80657959 -4.03984070]
[616.31597900 -7.84465981]
[630.82537842 -11.64947891]
[638.34381104 -16.85949516]
[645.59790039 -15.39701271]
[660.16644287 -18.96878815]
[667.76739502 -24.05763054]
[674.99707031 -22.47907066]
[689.62103271 -25.81688499]
[704.24493408 -29.15469933]
[718.86883545 -32.49251175]
[733.49273682 -35.83032608]
[743.21130371 -48.59470749]
[759.25292969 -48.81083298]
[769.31182861 -36.31291580]
[765.67169189 -20.68828392]
[751.12493896 -13.92281914]
[736.83056641 -21.20640755]
[722.20666504 -17.86859322]
[707.58276367 -14.53077984]
[692.95880127 -11.19296551]
[678.33489990 -7.85515165]
[663.73822021 -4.40024614]
[649.16967773 -0.82847095]
[634.63018799 2.85994458]
[620.12078857 6.66476345]
[605.61138916 10.46958160]
[595.26293945 21.18216324]
[579.95153809 17.19838905]
[565.44207764 21.00320816]
[550.93267822 24.80802727]
[536.42321777 28.61284637]
[531.19262695 42.53329849]
[518.61938477 50.80231476]
[503.41009521 50.07363892]
[491.40747070 40.41736984]
[476.89804077 44.22218704]
[462.38864136 48.02700806]
[447.87921143 51.83182526]
[443.52890015 61.09458923]
[434.60754395 66.54239655]
[423.94125366 66.16610718]
[415.06781006 59.84853363]
[400.44387817 63.18634796]
[385.81997681 66.52416229]
[371.19604492 69.86197662]
[367.35745239 80.62128448]
[358.70843506 88.26637268]
[347.32516479 90.80746460]
[336.01574707 87.49900055]
[327.62771606 79.05325317]
[312.90432739 81.92063904]
[298.18093872 84.78801727]
[283.45755005 87.65539551]
[268.73416138 90.52277374]
[254.01078796 93.39015198]
[239.28739929 96.25753021]
[238.63577271 104.58553314]
[236.36703491 112.63391876]
[232.56542969 120.09149170]
[227.37454224 126.66918945]
[220.99186707 132.11132812]
[213.66131592 136.20553589]
[205.66386414 138.79104614]
[197.30682373 139.76493835]
[188.91201782 139.08638000]
[180.80339050 136.77813721]
[173.29444885 132.92601013]
[166.67626953 127.67551422]
[161.20610046 121.22645569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 95]
[2 94]
[3 93]
[10 26]
[11 25]
[12 24]
[13 23]
[14 22]
[30 91]
[31 90]
[32 89]
[33 88]
[34 86]
[35 85]
[38 84]
[39 83]
[40 82]
[41 81]
[44 78]
[45 77]
[47 75]
[48 74]
[49 70]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[100 182]
[101 181]
[102 180]
[103 179]
[104 178]
[105 177]
[106 176]
[109 171]
[110 170]
[111 169]
[112 168]
[114 164]
[115 163]
[116 162]
[117 161]
[121 157]
[122 156]
[123 155]
[124 154]
[126 152]
[127 151]
[128 150]
[130 149]
[131 148]
[133 147]
[134 146]
[135 145]
[136 144]
[137 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
