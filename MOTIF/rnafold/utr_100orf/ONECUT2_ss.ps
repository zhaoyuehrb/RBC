%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCCGCCGCCCCCGGGCCCUGAUGGACUGAAUGAAGGCUGCCUACACCGCCUAUCGAUGCCUCACCAAAGACCUAGAAGGCUGCGCCAUGAACCCGGAGCUGACAAUGGAAAGUCUGGGCACUUUGCACG\
) } def
/len { sequence length } bind def

/coor [
[117.30474854 203.94102478]
[113.79445648 189.35754395]
[110.28416443 174.77406311]
[106.77387238 160.19058228]
[94.04878235 161.57885742]
[81.04776764 160.25047302]
[68.35571289 156.15368652]
[59.71179962 168.41267395]
[51.06788635 180.67166138]
[55.24026871 195.74234009]
[48.70225525 209.94757080]
[34.54090118 216.58006287]
[19.44276428 212.50817871]
[10.53672218 199.65452576]
[12.02793503 184.08821106]
[23.21229935 173.15916443]
[38.80889893 172.02775574]
[47.45280838 159.76876831]
[56.09672165 147.50978088]
[46.33480835 136.12095642]
[32.89808273 142.78837585]
[24.27635765 156.73820496]
[7.89492846 155.97610474]
[0.60560387 141.28604126]
[9.90701675 127.77990723]
[26.23067093 129.35163879]
[39.66739655 122.68423462]
[38.09661865 116.13046265]
[37.22978973 109.49820709]
[37.06599426 102.86226654]
[37.59644699 96.29640198]
[38.80470657 89.87249756]
[40.66696930 83.65975189]
[43.15244293 77.72397614]
[46.22380829 72.12683868]
[33.86359024 63.62831497]
[21.40386200 55.27635574]
[8.84636497 47.07213593]
[-3.71113253 38.86791229]
[-16.26862907 30.66368866]
[-29.93624878 37.67023849]
[-45.27522278 36.88825226]
[-58.15943909 28.52807999]
[-65.12311554 14.83856487]
[-64.29305267 -0.49788117]
[-55.89253235 -13.35583115]
[-42.18125916 -20.27656174]
[-26.84748840 -19.39842987]
[-14.01593399 -10.95764923]
[-7.13821602 2.77525163]
[-8.06440735 18.10619164]
[4.49309015 26.31041527]
[17.05058670 34.51463699]
[29.60808372 42.71886063]
[36.99878311 43.75355148]
[42.36211777 51.26809311]
[54.72233582 59.76662064]
[65.83342743 49.98563004]
[78.98516846 43.19182587]
[93.39205170 39.79097366]
[108.19361115 39.98619843]
[112.04737091 25.48969650]
[115.90112305 10.99319553]
[119.58340454 -3.54780841]
[123.09370422 -18.13128662]
[111.24121094 -27.74800301]
[104.74279022 -41.55862427]
[104.88871002 -56.82104492]
[111.64998627 -70.50489807]
[123.68417358 -79.89324188]
[138.60188293 -83.12202454]
[153.44116211 -79.55015564]
[165.25569153 -69.88684082]
[171.69967651 -56.05073166]
[171.49365234 -40.78900528]
[164.67854309 -27.13188553]
[152.60748291 -17.79100037]
[137.67718506 -14.62099361]
[134.16688538 -0.03751547]
[135.67443848 7.27140522]
[130.39762878 14.84695339]
[126.54386902 29.34345436]
[122.69010925 43.83995438]
[142.06440735 56.41815186]
[155.32101440 75.33470917]
[169.67190552 70.96984863]
[180.62339783 59.55164719]
[195.05139160 63.25060272]
[209.40228271 58.88573456]
[214.34786987 44.17788696]
[227.01345825 35.21338654]
[242.52890015 35.43926620]
[254.92816162 44.76867676]
[259.44348145 59.61426163]
[254.33863831 74.26759338]
[241.57655334 83.09416962]
[226.06448364 82.69998932]
[213.76715088 73.23662567]
[199.41625977 77.60148621]
[189.49124146 88.70748138]
[174.03677368 85.32073212]
[159.68588257 89.68560028]
[160.22869873 106.42620087]
[156.16598511 122.67540741]
[169.27285767 129.96992493]
[182.37973022 137.26443481]
[196.39689636 130.60873413]
[211.64292908 133.49633789]
[222.25540161 144.81690979]
[224.15359497 160.21743774]
[216.60762024 173.77612305]
[202.51907349 180.27937317]
[187.30526733 177.22654724]
[176.81622314 165.79151917]
[175.08520508 150.37130737]
[161.97833252 143.07678223]
[148.87147522 135.78227234]
[136.63609314 148.23472595]
[121.35734558 156.68029785]
[124.86763763 171.26376343]
[128.37792969 185.84724426]
[131.88822937 200.43072510]
[146.74427795 204.11265564]
[158.17987061 214.28544617]
[163.56719971 228.61148071]
[161.66828918 243.79873657]
[152.91950989 256.35729980]
[139.33125305 263.40127563]
[124.02600098 263.31204224]
[110.52079010 256.11010742]
[101.91902924 243.45040894]
[100.19732666 228.24203491]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 122]
[2 121]
[3 120]
[4 119]
[7 19]
[8 18]
[9 17]
[20 27]
[21 26]
[35 57]
[36 56]
[37 54]
[38 53]
[39 52]
[40 51]
[61 83]
[62 82]
[63 81]
[64 79]
[65 78]
[85 102]
[86 101]
[88 99]
[89 98]
[104 117]
[105 116]
[106 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
