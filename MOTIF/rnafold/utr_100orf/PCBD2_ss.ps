%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:33:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCCUCGGCAGACGGCCAAUGGCGGCGGUGCUCGGGGCGCUCGGGGCGACGCGGCGCUUGUUGGCGGCGCUGCGAGGCCAGAGCCUAGGGCUAGCGGCCAUGUCAUCAGGUACUCACA\
) } def
/len { sequence length } bind def

/coor [
[182.65901184 238.36276245]
[188.59974670 229.17555237]
[179.53282166 217.22604370]
[170.46591187 205.27651978]
[161.39898682 193.32699585]
[152.33207703 181.37748718]
[143.26515198 169.42796326]
[129.40820312 163.96588135]
[127.23033905 148.29528809]
[118.16342163 136.34576416]
[109.09650421 124.39624786]
[95.85859680 125.70549011]
[83.70170593 120.30490112]
[75.79911041 109.60419464]
[74.21360016 96.39653015]
[79.35903168 84.12946320]
[70.60538483 71.94859314]
[61.85174179 59.76771545]
[53.09809494 47.58684158]
[41.07194519 47.97666550]
[30.48505974 42.51687622]
[23.96305084 32.69368362]
[23.05876160 21.05824089]
[27.88397598 10.56457043]
[19.77436256 -2.05423236]
[11.66475105 -14.67303562]
[3.55513883 -27.29183769]
[-4.55447340 -39.91064072]
[-12.66408539 -52.52944565]
[-26.63405418 -59.95578766]
[-27.00590515 -74.84574890]
[-35.11551666 -87.46455383]
[-43.22512817 -100.08335876]
[-51.33473969 -112.70215607]
[-68.44316864 -116.06250763]
[-77.69738007 -130.44100952]
[-73.82484436 -146.75057983]
[-82.25931549 -159.15460205]
[-90.69378662 -171.55862427]
[-99.12825775 -183.96264648]
[-107.56272888 -196.36666870]
[-115.99720001 -208.77067566]
[-124.43167114 -221.17469788]
[-133.02645874 -233.46818542]
[-141.78010559 -245.64906311]
[-157.41529846 -247.95475769]
[-166.77348328 -260.69052124]
[-164.30259705 -276.30047607]
[-151.46859741 -285.52346802]
[-135.88565063 -282.88769531]
[-126.79885101 -269.95690918]
[-129.59922791 -254.40270996]
[-120.84558105 -242.22183228]
[-114.30814362 -238.58241272]
[-112.02765656 -229.60917664]
[-103.59318542 -217.20515442]
[-95.15870667 -204.80113220]
[-86.72423553 -192.39710999]
[-78.28976440 -179.99310303]
[-69.85529327 -167.58908081]
[-61.42082596 -155.18505859]
[-48.48114395 -154.54846191]
[-38.13989639 -146.42451477]
[-34.34681702 -133.62889099]
[-38.71593857 -120.81177521]
[-30.60632706 -108.19297028]
[-22.49671364 -95.57416534]
[-14.38710213 -82.95536041]
[-0.99718785 -76.43160248]
[-0.04528260 -60.63905716]
[8.06433010 -48.02025223]
[16.17394257 -35.40145111]
[24.28355408 -22.78264809]
[32.39316559 -10.16384411]
[40.50277710 2.45495844]
[58.51712418 5.16816187]
[69.10913086 20.37680435]
[65.27896881 38.83319855]
[74.03261566 51.01407242]
[82.78626251 63.19494629]
[91.53990936 75.37581635]
[107.74113464 75.14042664]
[120.94450378 84.53224945]
[126.03681946 99.91417694]
[121.04602051 115.32933044]
[130.11294556 127.27885437]
[139.17985535 139.22836304]
[153.68533325 145.54516602]
[155.21467590 160.36105347]
[164.28158569 172.31056213]
[173.34851074 184.26008606]
[182.41542053 196.20960999]
[191.48234558 208.15911865]
[200.54925537 220.10864258]
[219.94592285 216.51574707]
[238.47424316 223.05937195]
[251.21263123 237.92013550]
[254.81802368 257.08032227]
[248.40306091 275.40988159]
[258.94058228 286.08511353]
[269.47811890 296.76034546]
[277.84051514 300.73403931]
[280.14614868 307.85214233]
[290.40298462 318.79733276]
[306.24566650 323.03308105]
[310.23684692 338.93914795]
[298.27072144 350.15270996]
[282.65704346 345.13824463]
[279.45779419 329.05416870]
[269.20095825 318.10897827]
[258.80288696 307.29788208]
[248.26536560 296.62265015]
[237.72782898 285.94741821]
[228.00602722 290.53372192]
[217.36210632 292.18063354]
[206.66671753 290.74118042]
[196.79812622 286.32150269]
[188.57019043 279.27279663]
[182.66517639 270.16375732]
[179.57720947 259.73446655]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 94]
[3 93]
[4 92]
[5 91]
[6 90]
[7 89]
[9 87]
[10 86]
[11 85]
[16 81]
[17 80]
[18 79]
[19 78]
[24 75]
[25 74]
[26 73]
[27 72]
[28 71]
[29 70]
[31 68]
[32 67]
[33 66]
[34 65]
[37 61]
[38 60]
[39 59]
[40 58]
[41 57]
[42 56]
[43 55]
[44 53]
[45 52]
[99 113]
[100 112]
[101 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
