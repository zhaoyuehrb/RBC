%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGCAUGGUGUGUCUGAAGCUCCCUGGAGGUUCCUACAUGGCAAAGCUGACAGUGACACUGAUGGUGCUGAGCUCCCCACUGGCUUUGGCUGGGGACACCCGAC\
) } def
/len { sequence length } bind def

/coor [
[238.48588562 200.70915222]
[240.70202637 191.61705017]
[228.26094055 183.23735046]
[215.81985474 174.85765076]
[203.37876892 166.47795105]
[190.93769836 158.09825134]
[178.49661255 149.71853638]
[165.58094788 142.09057617]
[152.23609924 135.24113464]
[138.89123535 128.39169312]
[125.54637909 121.54225922]
[112.20152283 114.69282532]
[98.37619019 119.02943420]
[85.48548126 112.41310120]
[80.94903564 98.65203094]
[67.60417938 91.80259705]
[54.25932312 84.95315552]
[35.97362518 86.35199738]
[26.92079926 71.39904022]
[13.37883091 64.94805908]
[-0.16313653 58.49708557]
[-13.70510387 52.04610443]
[-33.58075333 54.68914795]
[-44.12200928 38.59337997]
[-58.02235031 32.95596695]
[-72.00470734 27.52515221]
[-86.06600189 22.30212784]
[-101.69669342 24.74998283]
[-110.93334961 13.06522846]
[-124.99464417 7.84220409]
[-141.06381226 11.11543846]
[-151.72900391 -1.34191442]
[-146.01879883 -16.71479797]
[-129.80735779 -19.18890762]
[-119.77162170 -6.21909094]
[-105.71032715 -0.99606621]
[-91.08538818 -3.81750679]
[-80.84297943 8.24083328]
[-66.78168488 13.46385765]
[-59.29550934 12.83231544]
[-52.38493729 19.05562401]
[-38.48459244 24.69303703]
[-29.28301048 19.81452179]
[-18.70378494 20.91638565]
[-10.36441517 27.86997795]
[-7.25412607 38.50413895]
[6.28784132 44.95511627]
[19.82980919 51.40609360]
[33.37177658 57.85707474]
[44.97808075 54.10637283]
[56.36506271 59.50115967]
[61.10876083 71.60829926]
[74.45362091 78.45774078]
[87.79847717 85.30717468]
[101.62380981 80.97056580]
[114.51451874 87.58689880]
[119.05096436 101.34796906]
[132.39582825 108.19740295]
[145.74067688 115.04684448]
[159.08554077 121.89627838]
[172.43038940 128.74572754]
[177.12884521 128.31254578]
[181.25488281 129.38832092]
[184.38151550 131.57759094]
[186.26780701 134.38247681]
[186.87631226 137.27745056]
[199.31739807 145.65716553]
[211.75848389 154.03686523]
[224.19956970 162.41656494]
[236.64065552 170.79626465]
[249.08172607 179.17596436]
[268.72338867 169.85406494]
[289.98214722 173.77828979]
[304.83047485 189.31968689]
[307.74777222 210.49046326]
[321.64810181 216.12786865]
[335.54846191 221.76528931]
[349.44879150 227.40269470]
[363.34915161 233.04011536]
[377.24948120 238.67753601]
[382.74133301 237.89282227]
[387.45767212 239.26142883]
[390.68115234 242.08641052]
[392.09759521 245.48262024]
[405.44244385 252.33206177]
[421.78594971 250.98234558]
[430.90292358 264.61367798]
[423.41458130 279.20327759]
[407.02432251 279.74264526]
[398.59298706 265.67691040]
[385.24813843 258.82748413]
[371.61206055 252.57788086]
[357.71173096 246.94046021]
[343.81137085 241.30303955]
[329.91104126 235.66563416]
[316.01068115 230.02821350]
[302.11035156 224.39080811]
[296.00952148 231.23052979]
[288.31295776 236.24238586]
[279.55334473 239.06739807]
[270.34027100 239.49833679]
[261.31753540 237.49497986]
[253.11834717 233.18753052]
[246.32087708 226.86830139]
[241.40736389 218.97180176]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 71]
[3 70]
[4 69]
[5 68]
[6 67]
[7 66]
[8 61]
[9 60]
[10 59]
[11 58]
[12 57]
[15 54]
[16 53]
[17 52]
[19 49]
[20 48]
[21 47]
[22 46]
[24 42]
[25 41]
[26 39]
[27 38]
[29 36]
[30 35]
[75 97]
[76 96]
[77 95]
[78 94]
[79 93]
[80 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
