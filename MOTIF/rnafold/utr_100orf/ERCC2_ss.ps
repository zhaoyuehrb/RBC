%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:15:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAUGAGGGAGGCGGGUCGACCCCGCUGCACAGUCCGGCCGGCGCCAUGAAGCUCAACGUGGACGGGCUCCUGGUCUACUUCCCGUACGACUACAUCUACCCCGAGCAGUUCUCCUACAUGCGGGAGCUCAAACGCACGCUGGACG\
) } def
/len { sequence length } bind def

/coor [
[-129.18409729 339.51025391]
[-129.38220215 349.55242920]
[-131.70260620 359.31546021]
[-136.03607178 368.35644531]
[-142.18208313 376.26605225]
[-149.85823059 382.68707275]
[-158.71304321 387.33059692]
[-168.34222412 389.98898315]
[-178.30699158 390.54504395]
[-188.15414429 388.97741699]
[-197.43664551 385.36114502]
[-205.73390198 379.86425781]
[-216.99398804 389.77438354]
[-228.25407410 399.68450928]
[-239.51416016 409.59463501]
[-250.77424622 419.50476074]
[-262.03433228 429.41485596]
[-264.48611450 445.26947021]
[-278.48141479 453.11236572]
[-293.28424072 446.92718506]
[-297.53909302 431.45864868]
[-287.98205566 418.57290649]
[-271.94445801 418.15478516]
[-260.68435669 408.24465942]
[-249.42428589 398.33453369]
[-238.16419983 388.42440796]
[-226.90411377 378.51431274]
[-215.64402771 368.60418701]
[-222.55017090 349.33389282]
[-220.54882812 328.91757202]
[-209.98716736 311.28015137]
[-192.86161804 299.82833862]
[-172.44059753 296.79272461]
[-152.64077759 302.79339600]
[-143.21746826 291.12286377]
[-133.79417419 279.45233154]
[-124.37087250 267.78179932]
[-114.94757080 256.11126709]
[-105.52426910 244.44071960]
[-96.10097504 232.77017212]
[-97.92929840 218.03271484]
[-88.53898621 206.06289673]
[-73.06858063 204.24510193]
[-63.64528275 192.57456970]
[-54.22198105 180.90402222]
[-55.33537292 165.94540405]
[-66.38257599 155.79852295]
[-77.42977905 145.65162659]
[-88.47697449 135.50474548]
[-99.52417755 125.35785675]
[-114.70611572 128.56541443]
[-128.86015320 122.20592499]
[-136.54376221 108.72476196]
[-134.80244446 93.30570221]
[-124.30577850 81.87768555]
[-109.08994293 78.83502197]
[-95.00572968 85.34767151]
[-87.46881104 98.91139221]
[-89.37728882 114.31065369]
[-78.33009338 124.45754242]
[-67.28289032 134.60443115]
[-56.23568726 144.75131226]
[-45.18848419 154.89820862]
[-31.62318420 145.06079102]
[-15.77647114 144.41999817]
[-2.99845648 152.20535278]
[9.93853283 144.61361694]
[22.87552071 137.02189636]
[35.81251144 129.43017578]
[48.74950027 121.83843994]
[61.68648911 114.24671173]
[74.62347412 106.65499115]
[87.56046295 99.06326294]
[84.29515839 62.29299545]
[90.18216705 48.49650574]
[96.06917572 34.70001602]
[101.95618439 20.90352440]
[107.69644165 7.04533243]
[113.28928375 -6.87300301]
[118.88213348 -20.79133797]
[113.93360138 -36.05212402]
[122.89945984 -49.35599899]
[138.90185547 -50.49736404]
[149.66513062 -38.60066605]
[146.93261719 -22.79203033]
[132.80046082 -15.19849110]
[127.20761871 -1.28015602]
[121.61477661 12.63817978]
[122.04217529 20.06885147]
[115.75267792 26.79053497]
[109.86566925 40.58702469]
[103.97866058 54.38351440]
[98.09165192 68.18000031]
[101.67966461 74.76605988]
[113.46038818 65.48088074]
[125.24111176 56.19570923]
[137.02183533 46.91053391]
[147.02862549 35.73626709]
[161.98588562 34.60473633]
[173.55984497 44.14640045]
[175.30183411 59.04490662]
[166.24124146 70.99922180]
[151.42491150 73.34839630]
[137.23516846 78.21165466]
[123.04543304 83.07491302]
[108.85569000 87.93817139]
[112.44370270 94.52423096]
[127.22794342 97.05924225]
[142.01217651 99.59425354]
[156.82249451 101.97221375]
[171.65721130 104.19285583]
[184.21318054 94.59477997]
[199.86718750 96.76910400]
[209.33198547 109.42584991]
[206.99226379 125.05599213]
[194.23616028 134.38644409]
[178.63163757 131.88160706]
[169.43656921 119.02757263]
[154.60185242 116.80693054]
[147.47172546 118.94204712]
[139.47717285 114.37849426]
[124.69293213 111.84348297]
[109.90869141 109.30847168]
[95.15219116 112.00025177]
[82.21520233 119.59197998]
[69.27821350 127.18370056]
[56.34122467 134.77543640]
[43.40423584 142.36715698]
[30.46724892 149.95887756]
[17.53026009 157.55061340]
[4.59327030 165.14233398]
[3.95130491 181.96859741]
[-7.46626472 195.36967468]
[-25.48016357 198.98146057]
[-42.55144501 190.32733154]
[-51.97474289 201.99786377]
[-61.39804459 213.66839600]
[-59.91574478 229.17454529]
[-69.63856506 240.87588501]
[-84.43043518 242.19348145]
[-93.85373688 253.86401367]
[-103.27703857 265.53454590]
[-112.70033264 277.20507812]
[-122.12363434 288.87561035]
[-131.54693604 300.54617310]
[-140.97023010 312.21670532]
[-135.10911560 320.40704346]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 28]
[13 27]
[14 26]
[15 25]
[16 24]
[17 23]
[34 146]
[35 145]
[36 144]
[37 143]
[38 142]
[39 141]
[40 140]
[43 137]
[44 136]
[45 135]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[66 131]
[67 130]
[68 129]
[69 128]
[70 127]
[71 126]
[72 125]
[73 124]
[74 93]
[75 92]
[76 91]
[77 90]
[78 88]
[79 87]
[80 86]
[107 123]
[108 122]
[109 121]
[110 119]
[111 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
