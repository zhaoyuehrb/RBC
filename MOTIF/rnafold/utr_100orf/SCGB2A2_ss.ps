%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCACAGCGGCUUCCUUGAUCCUUGCCACCCGCGACUGAACACCGACAGCAGCAGCCUCACCAUGAAGUUGCUGAUGGUCCUCAUGCUGGCGGCCCUCUCCCAGCACUGCUACGCAGGCUCUGGCUGCCCCUUAUUGGAGAAUGUGAUUUCCAAGACAAUCA\
) } def
/len { sequence length } bind def

/coor [
[145.22480774 275.44155884]
[143.65800476 265.40283203]
[144.01182556 255.24255371]
[146.27590942 245.32504272]
[150.37136841 236.00642395]
[156.15351868 227.62173462]
[163.41696167 220.47296143]
[155.70930481 207.60472107]
[148.00163269 194.73646545]
[140.29396057 181.86820984]
[132.58630371 168.99995422]
[124.87863159 156.13171387]
[113.28504181 159.94349670]
[101.16655731 161.38691711]
[89.00198364 160.40495300]
[77.27193451 157.03639221]
[66.43988037 151.41433716]
[56.93377304 143.76089478]
[49.12921524 134.37846375]
[43.33455658 123.63774109]
[39.77874374 111.96309662]
[38.60226822 99.81578827]
[39.85161209 87.67575836]
[43.47741699 76.02265930]
[49.33641815 65.31690979]
[38.08666611 55.39506149]
[26.83691216 45.47321320]
[11.36912251 42.14785004]
[6.94176388 27.92646599]
[-4.30799007 18.00461960]
[-19.77577972 14.67925549]
[-24.20313835 0.45787126]
[-35.45289230 -9.46397495]
[-46.70264435 -19.38582230]
[-53.17213058 -21.08541870]
[-57.17933273 -25.19998932]
[-58.18526077 -29.91335487]
[-69.04429626 -40.26137161]
[-79.90332794 -50.60938644]
[-95.47879028 -50.40281296]
[-106.34398651 -61.05186081]
[-106.44493103 -75.90196228]
[-117.30396271 -86.24997711]
[-128.16299438 -96.59799194]
[-139.02203369 -106.94600677]
[-148.41865540 -105.45420837]
[-157.30770874 -108.43723297]
[-163.71075439 -115.09645081]
[-166.26533508 -123.83066559]
[-164.51368713 -132.61990356]
[-174.75657654 -143.57814026]
[-184.99946594 -154.53639221]
[-195.24235535 -165.49464417]
[-205.48524475 -176.45289612]
[-215.72813416 -187.41114807]
[-225.97102356 -198.36938477]
[-241.04708862 -203.16761780]
[-244.08554077 -217.74900818]
[-254.32843018 -228.70726013]
[-264.57131958 -239.66551208]
[-279.80438232 -247.10798645]
[-276.86965942 -263.80599976]
[-260.01181030 -265.60848999]
[-253.61306763 -249.90840149]
[-243.37017822 -238.95014954]
[-233.12728882 -227.99189758]
[-218.78387451 -223.97747803]
[-215.01277161 -208.61227417]
[-204.76988220 -197.65403748]
[-194.52699280 -186.69578552]
[-184.28410339 -175.73753357]
[-174.04121399 -164.77928162]
[-163.79832458 -153.82102966]
[-153.55543518 -142.86279297]
[-133.37081909 -138.68124390]
[-128.67401123 -117.80503845]
[-117.81497955 -107.45702362]
[-106.95594788 -97.10900879]
[-96.09691620 -86.76099396]
[-81.25919342 -87.37541962]
[-70.09917450 -77.03575134]
[-69.55531311 -61.46841812]
[-58.69627762 -51.12040329]
[-47.83724594 -40.77238846]
[-36.78079987 -30.63557625]
[-25.53104591 -20.71372986]
[-14.28129196 -10.79188251]
[0.38184059 -8.17619514]
[5.61385632 6.75486565]
[16.86361122 16.67671204]
[31.52674294 19.29240036]
[36.75875854 34.22346115]
[48.00851059 44.14530563]
[59.25826645 54.06715393]
[68.95733643 47.02766418]
[79.83914185 42.00642395]
[91.48906708 39.19474411]
[103.46326447 38.69974518]
[115.30551147 40.54029465]
[126.56462097 44.64626312]
[136.81161499 50.86121368]
[145.65608215 58.94835281]
[152.76104736 68.59956360]
[166.49153137 62.56019974]
[180.22200012 56.52083969]
[186.85629272 50.17082214]
[194.27578735 50.50022888]
[208.12011719 44.72660828]
[221.96443176 38.95298386]
[235.80876160 33.17936325]
[248.10028076 21.50225449]
[262.72366333 30.08086967]
[258.52847290 46.50757599]
[241.58238220 47.02368546]
[227.73805237 52.79730988]
[213.89373779 58.57093048]
[200.04940796 64.34455109]
[186.26136780 70.25131989]
[172.53088379 76.29067993]
[158.80041504 82.33004761]
[161.03843689 106.63503265]
[153.63035583 129.89146423]
[137.74688721 148.42404175]
[145.45454407 161.29229736]
[153.16221619 174.16055298]
[160.86988831 187.02879333]
[168.57754517 199.89704895]
[176.28521729 212.76530457]
[196.38523865 208.59930420]
[216.55439758 212.25958252]
[233.86041260 223.19219971]
[245.79544067 239.78753662]
[250.63943481 259.61721802]
[247.70806885 279.78948975]
[237.44927979 297.37088013]
[247.26226807 308.71572876]
[257.07522583 320.06057739]
[266.88821411 331.40542603]
[276.70120239 342.75024414]
[286.51416016 354.09509277]
[296.32714844 365.43994141]
[312.10629272 366.33108521]
[322.57122803 378.17425537]
[321.51330566 393.94311523]
[309.56015015 404.28225708]
[293.80337524 403.05764771]
[283.59118652 390.99588013]
[284.98229980 375.25292969]
[275.16931152 363.90808105]
[265.35635376 352.56323242]
[255.54336548 341.21838379]
[245.73039246 329.87353516]
[235.91741943 318.52868652]
[226.10444641 307.18383789]
[217.14930725 311.85049438]
[207.46908569 314.74719238]
[197.41020203 315.76782227]
[187.33305359 314.87353516]
[177.59916687 312.09396362]
[168.55818176 307.52661133]
[160.53530884 301.33306885]
[153.81965637 293.73361206]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 128]
[8 127]
[9 126]
[10 125]
[11 124]
[12 123]
[25 94]
[26 93]
[27 92]
[29 90]
[30 89]
[32 87]
[33 86]
[34 85]
[37 84]
[38 83]
[39 82]
[42 79]
[43 78]
[44 77]
[45 76]
[50 74]
[51 73]
[52 72]
[53 71]
[54 70]
[55 69]
[56 68]
[58 66]
[59 65]
[60 64]
[103 120]
[104 119]
[105 118]
[107 117]
[108 116]
[109 115]
[110 114]
[135 154]
[136 153]
[137 152]
[138 151]
[139 150]
[140 149]
[141 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
