%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:25:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACCCGCCUACCCGCCUACCCCCCUGCCGGCCUGCCGUCCUUCCACGCGGAGAGCCAUGGAGGGAGUGAGCGCGCUGCUGGCCCGCUGCCCCACGGCCGGCCUGGCCGGCGGCCUGGGGGUCACGGCGUGCGCCGCGGCCGGCGUGUUGCUCUACC\
) } def
/len { sequence length } bind def

/coor [
[143.82691956 535.76672363]
[137.67460632 522.08648682]
[134.78021240 507.36840820]
[135.29414368 492.37722778]
[139.18968201 477.89187622]
[146.26441956 464.66510010]
[156.15074158 453.38409424]
[168.33496094 444.63510132]
[182.18394470 438.87268066]
[196.97811890 436.39627075]
[211.94874573 437.33456421]
[226.31793213 441.63876343]
[239.33906555 449.08523560]
[250.33480835 459.28625488]
[245.92706299 444.94845581]
[241.51930237 430.61068726]
[237.11155701 416.27291870]
[222.01304626 404.24404907]
[226.66807556 384.66732788]
[221.69378662 370.51611328]
[216.71949768 356.36492920]
[211.74520874 342.21371460]
[206.77091980 328.06253052]
[201.79663086 313.91131592]
[196.40255737 299.91476440]
[190.59349060 286.08526611]
[184.78442383 272.25576782]
[178.97535706 258.42630005]
[173.16629028 244.59680176]
[167.35722351 230.76731873]
[161.54815674 216.93782043]
[155.73908997 203.10833740]
[149.93002319 189.27885437]
[135.40777588 179.46786499]
[137.80114746 161.23538208]
[131.71827698 147.52412415]
[125.63539124 133.81286621]
[119.55251312 120.10160065]
[59.15534973 114.74904633]
[46.11554718 107.33530426]
[33.07574463 99.92156982]
[20.03593826 92.50782776]
[6.99613476 85.09409332]
[-6.04366922 77.68035126]
[-19.08347321 70.26661682]
[-32.12327576 62.85287857]
[-50.50328827 63.42480087]
[-58.82444000 48.00048447]
[-72.00907135 40.84747314]
[-87.73688507 44.01216125]
[-99.92406464 33.57893372]
[-99.22164154 17.55126381]
[-86.16844940 8.22421265]
[-70.77779388 12.75269508]
[-64.85605621 27.66284561]
[-51.67142868 34.81585693]
[-39.95340729 31.67860413]
[-28.89503098 37.57520676]
[-24.70953941 49.81307220]
[-11.66973591 57.22681046]
[1.37006867 64.64054871]
[14.40987301 72.05429077]
[27.44967651 79.46802521]
[40.48947906 86.88175964]
[53.52928543 94.29550171]
[66.56909180 101.70923615]
[73.05181885 97.93773651]
[73.00207520 82.93782043]
[86.01727295 90.39472961]
[92.50000000 86.62322235]
[92.50000000 71.62322235]
[92.50000000 56.62322235]
[92.50000000 41.62322235]
[84.76270294 27.82305145]
[92.50000000 15.09577847]
[92.50000000 0.09577891]
[92.50000000 -14.90422153]
[86.45365906 -30.74335289]
[100.00000000 -40.93810654]
[113.54634094 -30.74335289]
[107.50000000 -14.90422153]
[107.50000000 0.09577891]
[107.50000000 15.09577847]
[115.23729706 27.82305145]
[107.50000000 41.62322235]
[107.50000000 56.62322235]
[107.50000000 71.62322235]
[107.50000000 86.62322235]
[121.88088226 90.88822174]
[130.05880737 78.31357574]
[138.23672485 65.73893738]
[138.56504822 49.34307480]
[153.05705261 41.66754913]
[166.80461121 50.60827637]
[165.66542053 66.96781158]
[150.81137085 73.91685486]
[142.63345337 86.49150085]
[134.45552063 99.06613922]
[133.26377869 114.01872253]
[139.34664917 127.72998047]
[145.42953491 141.44123840]
[151.51240540 155.15249634]
[163.27442932 160.53196716]
[168.04432678 172.12100220]
[163.75950623 183.46978760]
[169.56857300 197.29927063]
[175.37763977 211.12875366]
[181.18670654 224.95825195]
[186.99577332 238.78773499]
[192.80484009 252.61721802]
[198.61390686 266.44671631]
[204.42297363 280.27618408]
[210.23204041 294.10568237]
[214.48075867 297.32287598]
[216.80163574 301.44692993]
[217.17504883 305.57653809]
[215.94783020 308.93704224]
[220.92211914 323.08822632]
[225.89640808 337.23944092]
[230.87069702 351.39062500]
[235.84498596 365.54183960]
[240.81927490 379.69302368]
[250.94276428 383.85510254]
[256.95516968 392.73684692]
[257.05392456 403.24151611]
[251.44932556 411.86517334]
[255.85708618 426.20294189]
[260.26483154 440.54071045]
[264.67257690 454.87847900]
[271.07263184 460.57824707]
[272.55364990 468.12036133]
[283.05426025 478.83187866]
[293.55490112 489.54339600]
[304.05554199 500.25491333]
[314.55615234 510.96643066]
[325.05679321 521.67797852]
[340.99081421 525.55603027]
[345.33901978 541.36822510]
[333.62835693 552.84832764]
[317.90576172 548.18658447]
[314.34527588 532.17858887]
[303.84463501 521.46710205]
[293.34399414 510.75555420]
[282.84338379 500.04403687]
[272.34274292 489.33251953]
[261.84210205 478.62097168]
[265.56518555 493.15161133]
[265.90084839 508.14782715]
[262.83166504 522.83050537]
[256.51715088 536.43664551]
[247.28540039 548.25927734]
[235.61608887 557.68408203]
[222.11557007 564.22137451]
[207.48533630 567.53137207]
[192.48561096 567.44226074]
[177.89576721 563.95849609]
[164.47392273 557.26116943]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 129]
[15 128]
[16 127]
[17 126]
[19 122]
[20 121]
[21 120]
[22 119]
[23 118]
[24 117]
[25 113]
[26 112]
[27 111]
[28 110]
[29 109]
[30 108]
[31 107]
[32 106]
[33 105]
[35 102]
[36 101]
[37 100]
[38 99]
[39 66]
[40 65]
[41 64]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[48 56]
[49 55]
[70 88]
[71 87]
[72 86]
[73 85]
[75 83]
[76 82]
[77 81]
[89 98]
[90 97]
[91 96]
[131 146]
[132 145]
[133 144]
[134 143]
[135 142]
[136 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
