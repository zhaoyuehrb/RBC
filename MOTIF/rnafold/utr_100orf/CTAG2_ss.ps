%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:45:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGCCUCCGCAUCCUCGUGGGCCCUGACCUUCUCUCUGAGAGCCGGGCAGAGGCUCCGGAGCCAUGCAGGCCGAAGGCCAGGGCACAGGGGGUUCGACGGGCGAUGCUGAUGGCCCAGGAGGCCCUGGCAUUCCUGAUGGCCCAGGGGGCAAUGCUGGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[97.95425415 455.19549561]
[83.80929565 447.62582397]
[81.05008698 431.82183838]
[91.79325104 419.90695190]
[92.36431122 404.91784668]
[92.93537140 389.92871094]
[85.68821716 376.91610718]
[93.94528961 363.42050171]
[94.51634979 348.43136597]
[94.94468689 333.43750000]
[95.23027039 318.44021606]
[95.51585388 303.44293213]
[95.80143738 288.44564819]
[95.80143738 273.44564819]
[95.51585388 258.44836426]
[95.23027039 243.45108032]
[94.94468689 228.45381165]
[86.96648407 215.87614441]
[94.43963623 201.93116760]
[94.15406036 186.93388367]
[93.86847687 171.93659973]
[93.58289337 156.93933105]
[93.29730988 141.94204712]
[93.01172638 126.94476318]
[85.31046295 123.64473724]
[78.94002533 118.20256805]
[74.47755432 111.11130524]
[72.32734680 103.01338959]
[72.68419647 94.64246368]
[59.28683853 87.89630127]
[45.88947678 81.15013885]
[32.49211502 74.40397644]
[19.09475517 67.65781403]
[5.26686764 76.12503815]
[-12.49551010 72.93077087]
[-24.81838417 57.32569122]
[-39.25035858 53.23690414]
[-53.68233109 49.14812088]
[-68.11430359 45.05933762]
[-77.27067566 45.72964859]
[-82.78072357 40.75288773]
[-97.13224030 36.39007950]
[-111.48374939 32.02726746]
[-125.83525848 27.66445923]
[-140.18676758 23.30164909]
[-153.18836975 31.99029922]
[-168.72740173 30.23754883]
[-179.46684265 18.87099457]
[-180.33583069 3.25757599]
[-170.92407227 -9.23052979]
[-155.67550659 -12.69682026]
[-141.79003906 -5.50461864]
[-135.82395935 8.95013714]
[-121.47245026 13.31294632]
[-107.12094116 17.67575645]
[-92.76942444 22.03856659]
[-78.41791534 26.40137672]
[-64.02552032 30.62736511]
[-49.59354782 34.71614838]
[-35.16157532 38.80493164]
[-20.72960091 42.89371490]
[-11.91282272 30.75846100]
[-20.26121140 18.29634285]
[-28.60960197 5.83422422]
[-44.00592804 1.32505202]
[-49.94636536 -13.57765865]
[-41.87391281 -27.44182396]
[-25.98106766 -29.63204193]
[-14.45946026 -18.46816635]
[-16.14748192 -2.51416492]
[-7.79909325 9.94795322]
[0.54929596 22.41007233]
[22.32423973 33.54587555]
[25.84091759 54.26045227]
[39.23827744 61.00661469]
[52.63563919 67.75277710]
[66.03299713 74.49893951]
[79.43035889 81.24510193]
[98.41086578 72.20915985]
[118.29766083 79.02259064]
[130.83868408 70.79321289]
[143.37971497 62.56384277]
[155.92074585 54.33446884]
[168.22166443 45.75032806]
[180.27243042 36.81842422]
[185.33293152 29.15815163]
[192.63874817 27.83377647]
[204.85737610 19.13292313]
[217.07601929 10.43206978]
[229.29466248 1.73121619]
[241.51330566 -6.96963739]
[244.43054199 -19.56399536]
[254.82452393 -26.55505943]
[266.79641724 -24.63462639]
[279.17849731 -33.10127640]
[291.56057739 -41.56792450]
[292.51342773 -55.03040695]
[300.93444824 -65.32654572]
[313.56484985 -68.82678223]
[325.71746826 -64.46538544]
[338.25848389 -72.69476318]
[350.79953003 -80.92413330]
[363.34054565 -89.15351105]
[370.63357544 -103.19354248]
[385.51931763 -103.70712280]
[398.06033325 -111.93650055]
[404.94848633 -126.81889343]
[421.30319214 -128.02511597]
[430.30017090 -114.31430054]
[422.68408203 -99.79096222]
[406.28970337 -99.39546967]
[393.74868774 -91.16609192]
[387.35269165 -77.71468353]
[371.56991577 -76.61248016]
[359.02890015 -68.38310242]
[346.48785400 -60.15373230]
[333.94683838 -51.92435837]
[331.25192261 -35.34459686]
[317.13424683 -25.63463974]
[300.02722168 -29.18584442]
[287.64514160 -20.71919632]
[275.26309204 -12.25254822]
[268.56109619 3.94536543]
[250.21415710 5.24900198]
[237.99551392 13.94985580]
[225.77687073 22.65070915]
[213.55824280 31.35156250]
[201.33959961 40.05241776]
[189.20434570 48.86919403]
[177.15356445 57.80110168]
[176.28472900 61.26253128]
[173.66926575 64.46466827]
[169.45259094 66.57888031]
[164.15011597 66.87549591]
[151.60910034 75.10487366]
[139.06806946 83.33424377]
[126.52703857 91.56362152]
[127.15897369 106.10296631]
[120.36753082 118.97418976]
[108.00901031 126.65917969]
[108.29459381 141.65646362]
[108.58017731 156.65374756]
[108.86575317 171.65103149]
[109.15133667 186.64830017]
[109.43692017 201.64558411]
[117.43555450 215.29594421]
[109.94197083 228.16822815]
[110.22755432 243.16549683]
[110.51313782 258.16278076]
[110.79872131 273.16006470]
[113.91461945 279.07434082]
[113.59033203 284.80538940]
[110.79872131 288.73123169]
[110.51313782 303.72851562]
[110.22755432 318.72579956]
[109.94197083 333.72308350]
[112.91797638 342.40823364]
[109.50547791 349.00244141]
[108.93441772 363.99154663]
[116.14072418 378.07629395]
[107.92449951 390.49978638]
[107.35343933 405.48889160]
[106.78237152 420.47802734]
[116.58784485 433.17575073]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 163]
[5 162]
[6 161]
[8 159]
[9 158]
[10 156]
[11 155]
[12 154]
[13 153]
[14 150]
[15 149]
[16 148]
[17 147]
[19 145]
[20 144]
[21 143]
[22 142]
[23 141]
[24 140]
[29 78]
[30 77]
[31 76]
[32 75]
[33 74]
[36 61]
[37 60]
[38 59]
[39 58]
[41 57]
[42 56]
[43 55]
[44 54]
[45 53]
[62 72]
[63 71]
[64 70]
[80 137]
[81 136]
[82 135]
[83 134]
[84 130]
[85 129]
[87 128]
[88 127]
[89 126]
[90 125]
[91 124]
[94 122]
[95 121]
[96 120]
[100 117]
[101 116]
[102 115]
[103 114]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
