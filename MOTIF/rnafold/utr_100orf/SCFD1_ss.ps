%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:59:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGCUUUGCUUCCGGGGCGGUAAGGGCAGCCACGUCAUCCCCCCGCUCCGCUCCCCAGCCGGGCAGUGGCUCGUGGGAGCCAAGAUGGCGGCGGCGGCGGCAGCGACAGCAGCAGCAGCAGCCAGUAUUCGGGAAAGGCAGACAGUGGCUUUGAAGCGUAUGUUGAAUUUCAAUGUGCCUCAUA\
) } def
/len { sequence length } bind def

/coor [
[107.86798859 141.13093567]
[99.93321991 128.40147400]
[106.99026489 115.16468048]
[99.49454498 115.41799164]
[91.77620697 128.27984619]
[84.05787659 141.14170837]
[76.33954620 154.00355530]
[68.62121582 166.86541748]
[73.70240784 177.64216614]
[72.94789886 189.41256714]
[66.66150665 199.25007629]
[56.50799942 204.76493835]
[45.07374573 204.68437195]
[36.92541885 217.27821350]
[28.77709389 229.87205505]
[25.24937439 246.45492554]
[8.33800125 247.65567017]
[2.50265217 231.73759460]
[16.18325424 221.72372437]
[24.33158112 209.12989807]
[32.47990799 196.53605652]
[27.56308746 178.91894531]
[37.23151016 163.01853943]
[55.75936127 159.14707947]
[63.47769165 146.28523254]
[71.19602203 133.42337036]
[78.91435242 120.56151581]
[86.63268280 107.69965363]
[89.89988708 93.05979919]
[88.38236237 78.13676453]
[86.86483765 63.21372223]
[85.34731293 48.29067993]
[83.82978821 33.36764145]
[82.31226349 18.44460106]
[80.66876984 3.53490973]
[78.89941406 -11.36037159]
[77.13006592 -26.25565147]
[64.99834442 -36.02596664]
[63.41616058 -51.15710449]
[72.80542755 -62.66263962]
[71.03607178 -77.55792236]
[68.88995361 -92.40359497]
[66.36843872 -107.19014740]
[63.84692764 -121.97669220]
[32.73305130 -151.27966309]
[24.37318420 -163.73408508]
[16.01331711 -176.18850708]
[7.65345097 -188.64292908]
[-0.81129611 -201.02630615]
[-9.38031960 -213.33776855]
[-17.94934273 -225.64921570]
[-26.51836586 -237.96066284]
[-35.08739090 -250.27212524]
[-43.76007843 -262.51077271]
[-52.53581238 -274.67572021]
[-61.41396713 -286.76617432]
[-70.39391327 -298.78118896]
[-78.05554962 -303.79580688]
[-79.42201996 -311.07580566]
[-88.19775391 -323.24078369]
[-96.97348785 -335.40573120]
[-105.74922180 -347.57070923]
[-118.17143250 -345.96405029]
[-130.02655029 -349.77764893]
[-139.07653809 -358.22695923]
[-143.64050293 -369.65844727]
[-142.90673828 -381.87304688]
[-137.07632446 -392.54913330]
[-145.43620300 -405.00354004]
[-153.79606628 -417.45797729]
[-162.15592957 -429.91238403]
[-170.51579285 -442.36682129]
[-178.87567139 -454.82122803]
[-193.82916260 -461.55358887]
[-195.20608521 -477.89483643]
[-181.58995056 -487.03448486]
[-166.98788452 -479.57043457]
[-166.42124939 -463.18109131]
[-158.06137085 -450.72668457]
[-149.70150757 -438.27224731]
[-141.34164429 -425.81784058]
[-132.98178101 -413.36340332]
[-124.62191010 -400.90899658]
[-106.98011017 -401.08462524]
[-92.62840271 -390.55581665]
[-87.40836334 -373.37469482]
[-93.58425903 -356.34643555]
[-84.80851746 -344.18148804]
[-76.03278351 -332.01651001]
[-67.25704956 -319.85153198]
[-58.37889481 -307.76110840]
[-49.39895248 -295.74609375]
[-42.86188126 -292.26293945]
[-40.37084198 -283.45147705]
[-31.59510803 -271.28649902]
[-25.11779976 -267.69342041]
[-22.77593803 -258.84115601]
[-14.20691395 -246.52969360]
[-5.63789082 -234.21824646]
[2.93113232 -221.90678406]
[11.50015545 -209.59533691]
[17.91585541 -205.89337158]
[20.10787201 -197.00280762]
[28.46773911 -184.54838562]
[36.82760620 -172.09396362]
[45.18747330 -159.63954163]
[52.64899445 -158.88076782]
[61.42470551 -171.04576111]
[67.57203674 -157.36325073]
[75.03355408 -156.60449219]
[85.72934723 -167.12113953]
[90.14490509 -182.31367493]
[104.64482880 -185.71978760]
[115.34062195 -196.23645020]
[119.19482422 -212.17623901]
[135.00048828 -216.54811096]
[146.49809265 -204.85464478]
[141.85989380 -189.12509155]
[125.85727692 -185.54064941]
[115.16147614 -175.02400208]
[111.51095581 -160.58367920]
[96.24600220 -156.42533875]
[85.55020142 -145.90869141]
[98.68939972 -153.14482117]
[113.62420654 -151.74790955]
[125.19358063 -142.20066833]
[129.39945984 -127.80239105]
[124.78840637 -113.52870178]
[112.95387268 -104.31220245]
[97.98554993 -103.33786011]
[85.05607605 -110.94238281]
[78.63347626 -124.49820709]
[81.15499115 -109.71165466]
[83.67649841 -94.92510986]
[86.34815216 -92.59262848]
[88.01250458 -88.84101105]
[88.01079559 -84.16265869]
[85.93135834 -79.32727051]
[87.70070648 -64.43199158]
[99.52405548 -55.44621658]
[101.53061676 -40.36548996]
[92.02534485 -28.02500343]
[93.79470062 -13.12972164]
[95.56404877 1.76555908]
[99.48373413 8.05060482]
[97.23530579 16.92707634]
[98.75283051 31.85011673]
[100.27035522 46.77315521]
[101.78787994 61.69619751]
[103.30540466 76.61923981]
[104.82292938 91.54227448]
[123.30191040 88.54498291]
[141.78887939 105.83573914]
[150.35789490 118.14719391]
[157.84580994 123.41772461]
[158.96562195 130.73973083]
[167.32548523 143.19415283]
[174.72331238 148.59039307]
[175.71929932 155.93026733]
[183.86761475 168.52410889]
[192.01594543 181.11795044]
[200.16427612 193.71179199]
[208.31259155 206.30561829]
[216.46092224 218.89945984]
[224.60925293 231.49330139]
[232.75756836 244.08714294]
[240.90589905 256.68096924]
[254.58650208 266.69485474]
[248.75115967 282.61291504]
[231.83978271 281.41217041]
[228.31205750 264.82931519]
[220.16374207 252.23547363]
[212.01541138 239.64163208]
[203.86708069 227.04779053]
[195.71875000 214.45394897]
[187.57043457 201.86010742]
[179.42210388 189.26626587]
[171.27377319 176.67243958]
[163.12545776 164.07859802]
[154.87106323 151.55401611]
[146.51119995 139.09959412]
[138.04644775 126.71621704]
[129.47743225 114.40476227]
[121.98170471 114.65807343]
[129.91624451 127.38768768]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 28]
[5 27]
[6 26]
[7 25]
[8 24]
[13 21]
[14 20]
[15 19]
[29 151]
[30 150]
[31 149]
[32 148]
[33 147]
[34 146]
[35 144]
[36 143]
[37 142]
[40 139]
[41 138]
[42 134]
[43 133]
[44 132]
[45 106]
[46 105]
[47 104]
[48 103]
[49 101]
[50 100]
[51 99]
[52 98]
[53 97]
[54 95]
[55 94]
[56 92]
[57 91]
[59 90]
[60 89]
[61 88]
[62 87]
[68 83]
[69 82]
[70 81]
[71 80]
[72 79]
[73 78]
[110 123]
[111 122]
[113 120]
[114 119]
[153 183]
[154 182]
[156 181]
[157 180]
[159 179]
[160 178]
[161 177]
[162 176]
[163 175]
[164 174]
[165 173]
[166 172]
[167 171]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
