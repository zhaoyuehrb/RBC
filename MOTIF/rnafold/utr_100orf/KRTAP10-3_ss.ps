%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:23:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACUCACUCACGUCUCCCCCAGCUCACCUCCUCCCCACCCCAGCAUGGCCACGUCUACCAUGUCCGUCUGCUCCAGCGCUUACUCUGACUCCUGGCAGGUGGACGCCUGCCCAGAGAGCUGCUGUGAGCCCCCCUGCUGCGCCA\
) } def
/len { sequence length } bind def

/coor [
[93.12617493 258.36557007]
[85.29110718 271.23257446]
[74.78893280 282.03311157]
[62.14643097 290.22549438]
[47.99775696 295.39877319]
[33.05258942 297.29342651]
[18.06057930 295.81445312]
[3.77371550 291.03604126]
[-9.09137630 283.19784546]
[-19.88939095 272.69305420]
[-28.07870102 260.04858398]
[-33.24853897 245.89865112]
[-35.13958359 230.95303345]
[-33.65698242 215.96138000]
[-28.87510109 201.67567444]
[-21.03379822 188.81248474]
[-10.52639198 178.01701355]
[2.12007427 169.83076477]
[16.27125740 164.66435242]
[31.21733856 162.77693176]
[46.20863342 164.26316833]
[50.96649933 150.03775024]
[55.72436905 135.81231689]
[60.48223877 121.58689880]
[49.48678589 131.78984070]
[38.49132919 141.99278259]
[31.43078423 155.22715759]
[20.55996704 165.56278992]
[6.98629570 171.94679260]
[-7.90747452 173.72880554]
[-22.60410881 170.72732544]
[-35.60645676 163.24809265]
[-45.58995819 152.05300903]
[-51.53759766 138.28254700]
[-52.84347916 123.33950043]
[-49.37457657 108.74612427]
[-41.48426437 95.98904419]
[-29.97633553 86.36784363]
[-16.02310753 80.86262512]
[-1.04600072 80.03421021]
[13.42926121 83.96700287]
[25.92710495 92.25945282]
[40.44913483 96.01586151]
[54.97116852 99.77227020]
[44.02780533 89.51347351]
[33.08444214 79.25468445]
[22.14107704 68.99589539]
[11.19771481 58.73710251]
[0.25435135 48.47831345]
[-14.68134880 52.34204102]
[-29.32778740 47.49586868]
[-39.01133728 35.48619080]
[-40.64201736 20.14525223]
[-33.69948196 6.36828899]
[-20.39906502 -1.44851875]
[-4.98488522 -0.81085640]
[7.62444925 8.07780075]
[13.40534687 22.38111305]
[10.51314259 37.53495026]
[21.45650673 47.79373932]
[32.39986801 58.05253220]
[43.34323120 68.31132507]
[54.28659439 78.57011414]
[65.22995758 88.82890320]
[71.02545166 79.09582520]
[79.37001801 71.80552673]
[89.33838654 67.56351471]
[99.88501740 66.64871216]
[109.95333099 68.99944305]
[118.58142853 74.23431396]
[124.99400330 81.70430756]
[138.88287354 76.03868866]
[152.77174377 70.37306976]
[166.66061401 64.70745087]
[180.48773193 58.89273453]
[194.25148010 52.92959213]
[208.01524353 46.96644974]
[221.77899170 41.00330734]
[235.47779846 34.89242935]
[249.11006165 28.63452530]
[262.74230957 22.37662125]
[266.94491577 17.12150764]
[272.36602783 15.13237572]
[277.09835815 16.15687180]
[290.98724365 10.49125290]
[304.87609863 4.82563353]
[318.76498413 -0.83998573]
[332.65383911 -6.50560522]
[319.50744629 -13.72864819]
[315.12835693 -28.07520103]
[322.00021362 -41.40853882]
[336.22555542 -46.16658401]
[349.73645020 -39.65079117]
[354.87011719 -25.55662537]
[348.71459961 -11.87732029]
[363.21731567 -15.70761967]
[377.72003174 -19.53791809]
[392.22274780 -23.36821747]
[406.72546387 -27.19851685]
[421.22817993 -31.02881813]
[435.73089600 -34.85911560]
[446.98080444 -46.79108810]
[462.87463379 -42.75158691]
[467.06222534 -26.89610672]
[455.23568726 -15.53540611]
[439.56118774 -20.35639954]
[425.05847168 -16.52610016]
[410.55575562 -12.69580078]
[396.05303955 -8.86550140]
[381.55032349 -5.03520155]
[367.04760742 -1.20490229]
[352.54489136 2.62539721]
[338.31945801 7.38326645]
[324.43060303 13.04888630]
[310.54171753 18.71450615]
[296.65286255 24.38012505]
[282.76397705 30.04574394]
[269.00021362 36.00888824]
[255.36796570 42.26679230]
[241.73570251 48.52469635]
[236.93420410 54.21494675]
[227.74214172 54.76706314]
[213.97837830 60.73020172]
[200.21463013 66.69334412]
[186.45086670 72.65648651]
[181.52804565 78.24211121]
[172.32623291 78.59632111]
[158.43736267 84.26194000]
[144.54849243 89.92755890]
[130.65962219 95.59317780]
[131.06027222 106.66332245]
[127.49204254 117.44393158]
[120.21855164 126.52416992]
[109.99962616 132.64663696]
[98.01473999 134.87956238]
[85.72765350 132.75376892]
[74.70766449 126.34476471]
[69.94979095 140.57019043]
[65.19192505 154.79560852]
[60.43405533 169.02104187]
[73.30294800 176.85298157]
[84.10604858 187.35253906]
[92.30148315 199.99305725]
[97.47817993 214.14048767]
[99.37646484 229.08518982]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 140]
[22 139]
[23 138]
[24 137]
[44 64]
[45 63]
[46 62]
[47 61]
[48 60]
[49 59]
[71 130]
[72 129]
[73 128]
[74 127]
[75 125]
[76 124]
[77 123]
[78 122]
[79 120]
[80 119]
[81 118]
[84 117]
[85 116]
[86 115]
[87 114]
[88 113]
[95 112]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
