%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:57:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGCUGCUGCGCAGGCGCGGUGGUCGGACGACAGACCGUGUGUUUCCAAAAUGGCGGCAGCGAUGGAUGUGGAUACCCCGAGCGGCACCAACAGCGGCGCGGGCAAGAAGCGCUUUGAAGUGAAAAAGUGGAAUGCAGUAGCCCUCUGGG\
) } def
/len { sequence length } bind def

/coor [
[81.52254486 299.84448242]
[78.71583557 284.87643433]
[82.24614716 270.06237793]
[91.50183105 257.96890259]
[104.87928772 250.69128418]
[103.64867401 235.74183655]
[102.41806030 220.79240417]
[101.18744659 205.84297180]
[99.95683289 190.89353943]
[98.72622681 175.94410706]
[97.49561310 160.99467468]
[96.26499939 146.04524231]
[95.03438568 131.09580994]
[75.44086456 122.50764465]
[64.95320892 102.50069427]
[69.48341370 79.15049744]
[88.50893402 62.95949173]
[74.36161804 67.94481659]
[60.21430206 72.93013763]
[46.06698608 77.91545868]
[31.91966820 82.90077972]
[17.77235222 87.88610077]
[3.62503552 92.87142181]
[-7.98930359 107.12406921]
[-25.09028244 103.30293274]
[-39.13225937 108.57767487]
[-53.17423630 113.85241699]
[-63.16216278 126.85907745]
[-79.38259888 124.44465637]
[-85.14935303 109.09288788]
[-74.53007507 96.59636688]
[-58.44897461 99.81044006]
[-44.40700150 94.53569794]
[-30.36502457 89.26095581]
[-25.05513573 78.34915924]
[-13.34962749 73.86001587]
[-1.36028659 78.72410583]
[12.78703022 73.73878479]
[26.93434715 68.75346375]
[41.08166122 63.76814270]
[55.22898102 58.78282166]
[69.37629700 53.79750061]
[83.52361298 48.81217575]
[87.92391205 34.47211456]
[79.00775909 22.40968513]
[64.58275604 15.91123772]
[63.23958206 1.07731915]
[54.32343292 -10.98511219]
[45.40727997 -23.04754448]
[36.49113083 -35.10997391]
[16.54275322 -36.95991516]
[4.49137068 -52.58322525]
[7.66826534 -71.75033569]
[-1.97354889 -83.24099731]
[-16.77124405 -88.83910370]
[-19.02506065 -103.56220245]
[-28.66687584 -115.05286407]
[-44.25370407 -120.15019989]
[-47.36746979 -136.25102234]
[-34.80499268 -146.79219055]
[-19.48947525 -140.92985535]
[-17.17620850 -124.69467926]
[-7.53439474 -113.20401764]
[6.57365370 -108.42780304]
[9.51711750 -92.88281250]
[19.15893173 -81.39215088]
[29.35340500 -83.29647827]
[39.48936081 -80.74600220]
[47.69483185 -74.14186859]
[52.42530441 -64.64018250]
[52.75419617 -53.95001984]
[48.55356216 -44.02612686]
[57.46971130 -31.96369553]
[66.38586426 -19.90126228]
[75.30201721 -7.83883190]
[89.08927917 -2.20317125]
[91.07019043 13.49353313]
[99.98634338 25.55596542]
[114.98634338 25.55596542]
[123.90249634 13.49353313]
[132.81864929 1.43110204]
[141.73480225 -10.63132954]
[143.71571350 -26.32803345]
[157.50297546 -31.96369553]
[166.41912842 -44.02612686]
[168.40003967 -59.72283173]
[182.18730164 -65.35848999]
[191.10345459 -77.42092133]
[187.26947021 -92.58121490]
[194.12380981 -106.63653564]
[208.43008423 -112.95038605]
[223.43328857 -108.54156494]
[232.04937744 -95.49177551]
[230.21009827 -79.96273804]
[218.78390503 -69.28678131]
[203.16589355 -68.50476837]
[194.24974060 -56.44234085]
[192.90657043 -41.60842133]
[178.48155212 -35.10997391]
[169.56541443 -23.04754448]
[168.22222900 -8.21362495]
[153.79722595 -1.71517849]
[144.88107300 10.34725285]
[135.96492004 22.40968513]
[127.04877472 34.47211456]
[129.32241821 41.61918259]
[142.93011475 35.30803299]
[155.99691772 27.94196892]
[167.74722290 37.26559830]
[163.54388428 51.66462326]
[148.62268066 53.20228195]
[133.86970520 55.91331100]
[136.14335632 63.06037521]
[150.39004517 67.75417328]
[164.63673401 72.44797516]
[178.88343811 77.14177704]
[193.13012695 81.83557892]
[207.37681580 86.52938080]
[219.88856506 77.35137177]
[235.40559387 77.31409454]
[247.96128845 86.43188477]
[252.72773743 101.19876099]
[247.87213135 115.93655396]
[235.26156616 124.97829437]
[219.74504089 124.84724426]
[207.28898621 115.59378815]
[202.68301392 100.77606964]
[188.43632507 96.08226776]
[174.18963623 91.38847351]
[159.94293213 86.69467163]
[145.69624329 82.00086975]
[131.44955444 77.30706787]
[136.50584412 94.23054504]
[133.44429016 110.77079010]
[123.68556213 123.42517853]
[109.98381805 129.86518860]
[111.21443176 144.81462097]
[112.44504547 159.76405334]
[113.67565918 174.71350098]
[114.90627289 189.66293335]
[116.13688660 204.61236572]
[117.36749268 219.56179810]
[118.59810638 234.51123047]
[119.82872009 249.46066284]
[134.21618652 254.45271301]
[145.32490540 264.86984253]
[151.23022461 278.90716553]
[150.90899658 294.13272095]
[144.41690063 307.90850830]
[132.87870789 317.84780884]
[118.29348755 322.22860718]
[103.18822479 320.29190063]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 144]
[6 143]
[7 142]
[8 141]
[9 140]
[10 139]
[11 138]
[12 137]
[13 136]
[17 43]
[18 42]
[19 41]
[20 40]
[21 39]
[22 38]
[23 37]
[25 34]
[26 33]
[27 32]
[44 78]
[45 77]
[47 75]
[48 74]
[49 73]
[50 72]
[53 66]
[54 65]
[56 63]
[57 62]
[79 105]
[80 104]
[81 103]
[82 102]
[84 100]
[85 99]
[87 97]
[88 96]
[113 132]
[114 131]
[115 130]
[116 129]
[117 128]
[118 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
