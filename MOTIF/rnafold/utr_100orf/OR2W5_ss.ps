%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:08:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCUGCAUGUGCCCCCUUAUCUAAUUCUUUGGUUGUUUCUCUGUAAUAGCUGGUGGAUUAUGGGAAAGGACAAUGCCAGUUACCUACAGGCAUUCAUCCUGGUGGGCUCUUCUGAUCGGCCUGGACUGGAGAAAAUUCUCUUUGCUGUUAUCUUGAUCU\
) } def
/len { sequence length } bind def

/coor [
[71.35502625 242.22843933]
[70.86766052 227.13078308]
[74.65487671 212.50772095]
[82.40966034 199.54470825]
[93.50336456 189.29255676]
[107.03666687 182.58239746]
[104.41593170 167.81311035]
[101.79519653 153.04382324]
[91.41651917 152.37550354]
[81.36743164 149.69604492]
[72.03380585 145.10833740]
[63.77404404 138.78852844]
[56.90530396 130.97929382]
[51.69133759 121.98050690]
[48.33235168 112.13770294]
[46.95732498 101.82882690]
[32.04362869 100.22209167]
[17.12992859 98.61535645]
[2.21623039 97.00862122]
[-14.41767693 104.85299683]
[-28.19218063 94.01441956]
[-43.13439178 92.69898224]
[-58.08872223 91.52938843]
[-73.05375671 90.50575256]
[-88.01878357 89.48211670]
[-102.98381805 88.45848083]
[-117.94885254 87.43484497]
[-132.91387939 86.41120911]
[-147.20989990 93.18871307]
[-159.37948608 84.60091400]
[-174.34451294 83.57727814]
[-189.30953979 82.55364227]
[-204.27458191 81.53000641]
[-219.23960876 80.50637054]
[-234.20463562 79.48273468]
[-249.16967773 78.45909882]
[-264.13470459 77.43546295]
[-279.09973145 76.41182709]
[-289.81436157 87.80176544]
[-305.34954834 89.58839417]
[-318.37005615 80.92811584]
[-322.72799683 65.91004181]
[-316.36569214 51.62525940]
[-302.28720093 44.81859970]
[-287.13998413 48.70396042]
[-278.07611084 61.44679260]
[-263.11105347 62.47042847]
[-248.14604187 63.49406433]
[-233.18099976 64.51770020]
[-218.21597290 65.54133606]
[-203.25094604 66.56497192]
[-188.28590393 67.58860779]
[-173.32087708 68.61224365]
[-158.35585022 69.63587952]
[-145.13023376 62.78516006]
[-131.89024353 71.44618225]
[-116.92521667 72.46981812]
[-101.96018219 73.49345398]
[-86.99514771 74.51708984]
[-72.03012085 75.54072571]
[-57.06508636 76.56436157]
[-50.14222717 73.86976624]
[-41.81895447 77.75677490]
[-26.87674522 79.07220459]
[-17.37742805 71.53192139]
[-4.88823080 72.53822327]
[3.82296419 82.09492493]
[18.73666382 83.70166016]
[33.65036011 85.30839539]
[48.56406021 86.91512299]
[58.99719238 66.30074310]
[77.20044708 52.07244873]
[99.72426605 46.92652512]
[101.76676941 32.06623459]
[103.80926514 17.20594597]
[105.85176849 2.34565687]
[107.89427185 -12.51463223]
[109.93676758 -27.37492180]
[104.15065765 -42.10012054]
[113.54891968 -53.65528870]
[115.59142303 -68.51557922]
[107.08233643 -82.11613464]
[112.54605103 -97.20014191]
[127.79125977 -102.19644928]
[141.12315369 -93.27230835]
[142.31463623 -77.27356720]
[130.45170593 -66.47307587]
[128.40921021 -51.61278915]
[134.34141541 -37.95049667]
[124.79705811 -25.33242226]
[122.75455475 -10.47213268]
[120.71205902 4.38815641]
[118.66955566 19.24844551]
[116.62705994 34.10873413]
[114.58455658 48.96902466]
[127.65498352 54.70020294]
[138.72573853 63.70692444]
[146.99630737 75.33792877]
[161.13021851 70.31473541]
[175.26412964 65.29154205]
[185.67642212 53.37959290]
[200.25990295 56.40804291]
[214.39381409 51.38484955]
[228.52772522 46.36165619]
[238.94003296 34.44970322]
[253.52349854 37.47815323]
[267.65740967 32.45495987]
[274.73886108 26.60355759]
[282.11639404 27.47458076]
[296.34564209 22.72812080]
[306.81250000 10.10367775]
[322.93142700 13.12240314]
[328.12060547 28.67889023]
[317.04190063 40.76995850]
[301.09210205 36.95735550]
[286.86285400 41.70381546]
[272.68060303 46.58887482]
[258.54669189 51.61206818]
[249.14535522 63.16473007]
[233.55091858 60.49556732]
[219.41700745 65.51876068]
[205.28309631 70.54195404]
[195.88174438 82.09461975]
[180.28732300 79.42546082]
[166.15341187 84.44865417]
[152.01950073 89.47184753]
[153.07069397 100.60971832]
[151.76388550 111.72049713]
[148.15715027 122.31051636]
[160.73985291 130.47601318]
[173.32257080 138.64151001]
[185.90528870 146.80699158]
[198.48800659 154.97248840]
[214.88418579 155.28462219]
[222.57402039 169.76902771]
[213.64688110 183.52542114]
[197.28623962 182.40238953]
[190.32250977 167.55520630]
[177.73979187 159.38970947]
[165.15707397 151.22421265]
[152.57437134 143.05873108]
[139.99165344 134.89323425]
[129.32478333 144.23716736]
[116.56448364 150.42308044]
[119.18521881 165.19236755]
[121.80595398 179.96165466]
[136.82171631 181.60594177]
[150.76544189 187.41531372]
[162.50680542 196.91885376]
[171.09396362 209.34613037]
[175.83081055 223.68972778]
[176.33334351 238.78689575]
[172.56082153 253.41374207]
[164.81906128 266.38455200]
[153.73565674 276.64782715]
[140.20910645 283.37158203]
[125.33592987 286.01077271]
[110.32183075 284.35140991]
[96.38393402 278.52801514]
[84.65213013 269.01269531]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 146]
[7 145]
[8 144]
[16 70]
[17 69]
[18 68]
[19 67]
[21 64]
[22 63]
[23 61]
[24 60]
[25 59]
[26 58]
[27 57]
[28 56]
[30 54]
[31 53]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[73 95]
[74 94]
[75 93]
[76 92]
[77 91]
[78 90]
[80 88]
[81 87]
[98 126]
[99 125]
[100 124]
[102 122]
[103 121]
[104 120]
[106 118]
[107 117]
[109 116]
[110 115]
[129 142]
[130 141]
[131 140]
[132 139]
[133 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
