%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:28:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGGCGCGGCUGCGGUUUAACCCGCGGUGGCGGCGGCGACGGCGGCCCUGGCAGGGAAGGAUGGAGACGCUGAAGGAUAAGACCCUGCAGGAGCUGGAGGAGUUGCAGAAUGACUCGGAGGCGAUUGACCAGCUGGCCCUGGAGUCCCCUGAGGUCCAGG\
) } def
/len { sequence length } bind def

/coor [
[101.14531708 209.99694824]
[100.56007385 195.00837708]
[99.97483063 180.01979065]
[99.38959503 165.03121948]
[98.80435181 150.04263306]
[84.67044067 145.01943970]
[74.75734711 156.27691650]
[71.44402313 171.74728394]
[57.22608566 176.18571472]
[47.31299591 187.44317627]
[37.39990616 198.70065308]
[27.48681641 209.95812988]
[17.57372665 221.21559143]
[7.66063690 232.47306824]
[-2.25245285 243.73054504]
[-1.00085700 259.48519897]
[-11.31949329 271.45605469]
[-27.08649635 272.54101562]
[-38.94758606 262.09637451]
[-39.86578369 246.31878662]
[-29.29634285 234.56878662]
[-13.50992393 233.81744385]
[-3.59683418 222.55998230]
[6.31625557 211.30250549]
[16.22934532 200.04502869]
[26.14243507 188.78756714]
[36.05552292 177.53009033]
[45.96861267 166.27262878]
[48.57289124 151.60745239]
[63.49987793 146.36383057]
[73.41296387 135.10635376]
[62.01750183 100.34589386]
[80.26223755 74.90082550]
[74.01891327 61.26187897]
[67.77558899 47.62293243]
[61.53226471 33.98398209]
[55.28894043 20.34503555]
[40.06993866 19.96643829]
[26.57949638 13.04581738]
[17.46891594 1.00349593]
[14.50251198 -13.73968697]
[18.21614456 -28.24893761]
[27.82134628 -39.65970612]
[21.57802010 -53.29865265]
[15.33469582 -66.93759918]
[9.09137154 -80.57654572]
[2.71527719 -94.15393829]
[-3.79297900 -107.66846466]
[-10.30123520 -121.18299866]
[-16.80949020 -134.69754028]
[-23.38576126 -141.11145020]
[-23.30999947 -148.53985596]
[-29.55332375 -162.17880249]
[-35.79664993 -175.81774902]
[-42.03997421 -189.45669556]
[-48.28329849 -203.09564209]
[-63.03160858 -200.02398682]
[-78.09364319 -200.31167603]
[-92.71390533 -203.94425964]
[-106.15904236 -210.73956299]
[-117.75464630 -220.35671997]
[-126.91909790 -232.31332397]
[-133.19270325 -246.00965881]
[-136.26078796 -260.75872803]
[-135.96946716 -275.82067871]
[-132.33332825 -290.44006348]
[-125.53476715 -303.88354492]
[-115.91480255 -315.47683716]
[-103.95597076 -324.63839722]
[-90.25811768 -330.90866089]
[-75.50832367 -333.97317505]
[-60.44642258 -333.67819214]
[-45.82792664 -330.03851318]
[-32.38608551 -323.23669434]
[-20.79513931 -313.61392212]
[-11.63648415 -301.65289307]
[-5.36951351 -287.95352173]
[-2.30857706 -273.20297241]
[-2.60720992 -258.14114380]
[-6.25043249 -243.52352905]
[-13.05550194 -230.08334351]
[-22.68107986 -218.49472046]
[-34.64435196 -209.33897400]
[-28.40102577 -195.70002747]
[-22.15770149 -182.06106567]
[-15.91437626 -168.42211914]
[-9.67105198 -154.78317261]
[-3.29495811 -141.20579529]
[3.21329808 -127.69125366]
[9.72155380 -114.17672729]
[16.22981071 -100.66219330]
[21.99447441 -95.97652435]
[22.73031807 -86.81987000]
[28.97364426 -73.18092346]
[35.21696854 -59.54197693]
[41.46029282 -45.90303040]
[56.37439728 -45.71614838]
[69.78352356 -39.04496384]
[79.00418854 -27.16471100]
[82.16520691 -12.39893341]
[78.58723450 2.33487368]
[68.92788696 14.10171032]
[75.17121124 27.74065781]
[81.41453552 41.37960434]
[87.65785980 55.01855469]
[93.90118408 68.65750122]
[103.85894012 66.77959442]
[114.36488342 68.13063049]
[124.35645294 72.85462952]
[132.74082947 80.74311066]
[138.51211548 91.23247528]
[140.86637878 103.44032288]
[139.30175781 116.23860931]
[133.69209290 128.35787964]
[146.87318420 135.51739502]
[160.05427551 142.67692566]
[173.23538208 149.83645630]
[186.41647339 156.99597168]
[195.50155640 158.35498047]
[199.78289795 164.42596436]
[212.82179260 171.84130859]
[221.87863159 173.37731934]
[226.04071045 179.53068542]
[238.93243408 187.19903564]
[251.82415771 194.86738586]
[264.71588135 202.53573608]
[271.39239502 203.00889587]
[276.09359741 206.31405640]
[277.95266724 210.76316833]
[290.53536987 218.92866516]
[303.11810303 227.09414673]
[315.70080566 235.25964355]
[331.10452271 231.72399902]
[344.45214844 240.18667603]
[347.82473755 255.62692261]
[339.22140503 268.88430786]
[323.74636841 272.09347534]
[310.58068848 263.35046387]
[307.53530884 247.84236145]
[294.95260620 239.67686462]
[282.36987305 231.51136780]
[269.78717041 223.34588623]
[257.04751587 215.42745972]
[244.15580750 207.75910950]
[231.26408386 200.09075928]
[218.37236023 192.42240906]
[205.40644836 184.88020325]
[192.36755371 177.46485901]
[179.25694275 170.17706299]
[166.07585144 163.01754761]
[152.89476013 155.85801697]
[139.71366882 148.69850159]
[126.53256989 141.53897095]
[113.79293060 149.45739746]
[114.37817383 164.44598389]
[114.96340942 179.43455505]
[115.54865265 194.42314148]
[116.13389587 209.41171265]
[122.79360962 225.00288391]
[109.65534973 235.71839905]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 31]
[7 30]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[33 106]
[34 105]
[35 104]
[36 103]
[37 102]
[43 96]
[44 95]
[45 94]
[46 93]
[47 91]
[48 90]
[49 89]
[50 88]
[52 87]
[53 86]
[54 85]
[55 84]
[56 83]
[114 153]
[115 152]
[116 151]
[117 150]
[118 149]
[120 148]
[121 147]
[123 146]
[124 145]
[125 144]
[126 143]
[129 142]
[130 141]
[131 140]
[132 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
