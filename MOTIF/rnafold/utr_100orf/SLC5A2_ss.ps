%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:14:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCAGAUCCUGGGGAGAAUGGAGGAGCACACAGAGGCAGGCUCGGCACCAGAGAUGGGGGCCCAGAAGGCCCUGAUUGACAAUCCUGCUGACAUCCUAGUCAUUGCUGCAUAUUUCC\
) } def
/len { sequence length } bind def

/coor [
[17.49869537 327.91641235]
[12.49159336 342.05603027]
[7.48449039 356.19564819]
[14.51377392 370.35067749]
[9.39599705 385.30340576]
[-4.83255434 392.18264771]
[-19.73033333 386.90707397]
[-26.45874977 372.60656738]
[-21.02595711 357.76541138]
[-6.65513229 351.18856812]
[-1.64802921 337.04895020]
[3.35907364 322.90930176]
[0.31402403 308.32928467]
[12.21411610 297.90344238]
[17.22122002 283.76382446]
[22.22832298 269.62420654]
[27.23542595 255.48457336]
[32.24252701 241.34495544]
[29.19747925 226.76493835]
[41.09757233 216.33908081]
[46.10467529 202.19946289]
[51.11177826 188.05984497]
[48.06672668 173.47982788]
[59.96681976 163.05397034]
[64.97392273 148.91435242]
[51.09698105 154.60913086]
[36.74090958 150.26135254]
[28.35525131 137.82427979]
[29.70731354 122.88534546]
[40.18967438 112.15593719]
[55.09307480 110.45631409]
[67.72206879 118.55004120]
[72.40306091 132.79930115]
[79.90306091 119.80892181]
[87.40306091 106.81854248]
[87.59510040 92.83802795]
[99.60655975 85.68145752]
[107.10655975 72.69107819]
[114.60655975 59.70069885]
[121.93587494 46.61325836]
[129.09326172 33.43099976]
[136.25064087 20.24874306]
[134.69682312 0.23255672]
[151.39353943 -9.37455082]
[157.85121155 -22.91333008]
[164.30886841 -36.45211029]
[170.76654053 -49.99088669]
[177.22421265 -63.52966690]
[183.68186951 -77.06844330]
[172.09919739 -90.59996033]
[167.52424622 -107.76020813]
[170.81405640 -125.15936279]
[181.27659607 -139.38058472]
[196.81582642 -147.65101624]
[214.35145569 -148.38238525]
[219.72697449 -162.38609314]
[225.10249329 -176.38980103]
[222.82464600 -192.04615784]
[234.60908508 -201.15530396]
[239.98460388 -215.15899658]
[245.36012268 -229.16270447]
[250.73564148 -243.16641235]
[256.11117554 -257.17013550]
[261.48669434 -271.17382812]
[256.30120850 -286.35574341]
[265.05889893 -299.79754639]
[281.04159546 -301.18786621]
[291.98873901 -289.46014404]
[289.50262451 -273.61090088]
[275.49038696 -265.79830933]
[270.11486816 -251.79460144]
[264.73934937 -237.79089355]
[259.36383057 -223.78718567]
[253.98831177 -209.78347778]
[248.61279297 -195.77976990]
[251.27513123 -181.12504578]
[239.10620117 -171.01428223]
[233.73068237 -157.01057434]
[228.35516357 -143.00686646]
[237.78906250 -134.91146851]
[244.25576782 -124.26583099]
[247.10287476 -112.11444092]
[246.03402710 -99.65507507]
[241.13963318 -88.12075806]
[232.88946533 -78.65773773]
[222.08757019 -72.21159363]
[209.79399109 -69.43272400]
[197.22065735 -70.61077881]
[190.76298523 -57.07200241]
[184.30531311 -43.53322220]
[177.84765625 -29.99444199]
[171.38998413 -16.45566368]
[164.93231201 -2.91688395]
[169.23931885 6.51507235]
[167.54225159 16.96813965]
[160.17124939 24.87682343]
[149.43289185 27.40612602]
[142.27551270 40.58838272]
[135.11813354 53.77063751]
[134.68641663 61.24218369]
[127.59693909 67.20069885]
[120.09693909 80.19107819]
[112.59693909 93.18145752]
[112.40489960 107.16197205]
[100.39344025 114.31854248]
[92.89344025 127.30892181]
[85.39344025 140.29930115]
[79.11354828 153.92144775]
[74.10644531 168.06106567]
[76.79335022 183.65245056]
[65.25139618 193.06694031]
[60.24429703 207.20655823]
[55.23719406 221.34619141]
[57.92410278 236.93756104]
[46.38214874 246.35205078]
[41.37504578 260.49166870]
[36.36794281 274.63128662]
[31.36084175 288.77093506]
[26.35373878 302.91055298]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[14 119]
[15 118]
[16 117]
[17 116]
[18 115]
[20 113]
[21 112]
[22 111]
[24 109]
[25 108]
[33 107]
[34 106]
[35 105]
[37 103]
[38 102]
[39 101]
[40 99]
[41 98]
[42 97]
[44 93]
[45 92]
[46 91]
[47 90]
[48 89]
[49 88]
[55 79]
[56 78]
[57 77]
[59 75]
[60 74]
[61 73]
[62 72]
[63 71]
[64 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
