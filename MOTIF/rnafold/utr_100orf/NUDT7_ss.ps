%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:03:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGCUCCCAAGCCCAGAGCUGCUCUGCGCAAGCGCGACCGACCGAGCAGCUCCGAGGAGUCCGCCCGGAAACAAACAUUCCCCAGGGCAAUGUCACGACUUGGUCUUCCCGAGGAGCCAGUCAGAAACAGUUUGCUAGAUGAUGCUAAGGCCCGCUUAAGAAAGUAUGAUAUUGGAGGCAAAUAUUCUC\
) } def
/len { sequence length } bind def

/coor [
[84.87600708 113.43971252]
[71.76464844 120.72616577]
[68.02928925 126.21279907]
[62.85723495 128.61645508]
[58.10293961 128.02850342]
[44.76019669 134.88206482]
[31.41745758 141.73562622]
[18.07471657 148.58917236]
[4.73197460 155.44273376]
[5.52801657 165.34939575]
[3.30961013 175.00692749]
[-1.69982409 183.52220154]
[-9.01960850 190.11325073]
[-17.95788574 194.18106079]
[-27.67699051 195.36396790]
[-37.27194977 193.56976318]
[-45.85474777 188.98260498]
[-52.63649750 182.04431152]
[-66.49468994 187.78456116]
[-80.35288239 193.52481079]
[-94.21107483 199.26507568]
[-108.06926727 205.00532532]
[-121.92745972 210.74557495]
[-135.78565979 216.48582458]
[-149.64384460 222.22607422]
[-163.50204468 227.96632385]
[-177.00895691 234.49037170]
[-190.12031555 241.77682495]
[-203.23167419 249.06327820]
[-216.34301758 256.34973145]
[-224.30517578 270.68624878]
[-240.70431519 270.68850708]
[-248.67042542 256.35418701]
[-240.00865173 242.42918396]
[-223.62947083 243.23837280]
[-210.51811218 235.95191956]
[-197.40676880 228.66546631]
[-184.29541016 221.37901306]
[-198.70977783 217.22859192]
[-207.19812012 204.86138916]
[-205.88850403 189.91867065]
[-195.37829590 179.21653748]
[-180.46171570 177.63674927]
[-167.94294739 185.89994812]
[-163.53239441 200.23684692]
[-169.24229431 214.10813904]
[-155.38409424 208.36787415]
[-141.52590942 202.62762451]
[-127.66770935 196.88737488]
[-113.80951691 191.14712524]
[-99.95132446 185.40687561]
[-86.09313202 179.66662598]
[-72.23493958 173.92637634]
[-58.37674713 168.18612671]
[-55.16291809 148.14881897]
[-40.41246796 134.01022339]
[-19.98130989 131.61531067]
[-2.12158346 142.09999084]
[11.22115803 135.24644470]
[24.56389809 128.39288330]
[37.90663910 121.53932190]
[51.24938202 114.68576050]
[64.47820282 107.61481476]
[77.58955383 100.32836151]
[80.99569702 85.72020721]
[72.45919800 73.38618469]
[63.92269516 61.05215836]
[55.38619232 48.71813583]
[46.54956818 36.59732437]
[37.41814804 24.69702339]
[28.28672600 12.79672432]
[19.15530586 0.89642400]
[3.52575874 0.39512694]
[-8.09039497 -10.07382584]
[-10.20836449 -25.56731606]
[-1.82810831 -38.76979065]
[13.09347248 -43.44744492]
[27.51086426 -37.39163208]
[34.61661530 -23.46172523]
[31.05560493 -8.23499775]
[40.18702698 3.66530275]
[49.31844711 15.56560326]
[58.44987106 27.46590233]
[61.89545059 28.28294945]
[65.11295319 30.81899834]
[67.29444885 34.94691086]
[67.72021484 40.18163300]
[76.25672150 52.51565933]
[84.79322052 64.84967804]
[93.32971954 77.18370056]
[100.82068634 76.81569672]
[99.24244690 61.89895630]
[91.66444397 48.95392609]
[98.80363464 35.76181030]
[113.78555298 35.02556229]
[122.18380737 47.45413208]
[115.91116333 61.08007431]
[115.80261993 76.07968140]
[123.29358673 75.71167755]
[130.58003235 62.60031891]
[137.86648560 49.48896408]
[145.15293884 36.37760925]
[146.59045410 27.34031677]
[152.66738892 23.11275482]
[160.16738892 10.12237358]
[161.75257874 1.10981274]
[167.89785767 -3.01775527]
[175.60940552 -15.88368416]
[183.32093811 -28.74961281]
[191.03248596 -41.61554337]
[190.75964355 -58.01242065]
[204.96058655 -66.21395111]
[219.02661133 -57.78310394]
[218.48779297 -41.39281082]
[203.89842224 -33.90400314]
[196.18687439 -21.03807259]
[188.47532654 -8.17214298]
[180.76379395 4.69378567]
[173.15776062 17.62237358]
[165.65776062 30.61275482]
[158.26429749 43.66405869]
[150.97784424 56.77541351]
[143.69139099 69.88677216]
[136.40493774 82.99812317]
[140.99348450 97.27906799]
[154.55332947 103.69239044]
[168.11315918 110.10572052]
[181.67300415 116.51904297]
[191.70455933 112.26251984]
[202.20500183 114.19876862]
[209.74163818 121.44876862]
[211.98667908 131.43750000]
[225.32942200 138.29106140]
[238.67216492 145.14462280]
[252.01490784 151.99818420]
[265.35763550 158.85174561]
[278.70037842 165.70529175]
[292.04312134 172.55885315]
[311.57992554 164.82312012]
[330.22402954 173.86174011]
[336.08358765 193.42977905]
[349.84600830 199.39601135]
[365.58508301 197.78607178]
[374.18478394 209.94725037]
[387.94720459 215.91348267]
[401.70962524 221.87971497]
[415.47204590 227.84593201]
[429.23446655 233.81216431]
[443.22937012 239.21058655]
[457.43331909 244.03218079]
[471.63726807 248.85377502]
[486.60388184 243.07626343]
[500.37918091 251.29946899]
[502.39590454 267.21524048]
[491.10699463 278.61441040]
[475.17236328 276.75244141]
[466.81567383 263.05773926]
[452.61172485 258.23614502]
[438.40777588 253.41455078]
[442.51040649 267.84259033]
[433.92520142 280.14276123]
[418.96740723 281.26718140]
[408.63986206 270.38870239]
[410.53939819 255.50946045]
[423.26824951 247.57458496]
[409.50582886 241.60835266]
[395.74340820 235.64213562]
[381.98098755 229.67590332]
[368.21856689 223.70967102]
[353.46386719 225.74635315]
[343.87979126 213.15841675]
[330.11737061 207.19219971]
[322.86914062 213.16242981]
[313.88641357 216.09211731]
[304.39627075 215.53656006]
[295.71145630 211.53019714]
[289.04876709 204.58773804]
[285.35861206 195.63839722]
[285.18957520 185.90159607]
[271.84683228 179.04803467]
[258.50408936 172.19447327]
[245.16134644 165.34092712]
[231.81860352 158.48736572]
[218.47586060 151.63380432]
[205.13313293 144.78024292]
[185.95274353 147.15510559]
[175.25967407 130.07888794]
[161.69984436 123.66555786]
[148.13999939 117.25222778]
[134.58015442 110.83890533]
[116.50109100 126.12940979]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[5 62]
[6 61]
[7 60]
[8 59]
[9 58]
[18 54]
[19 53]
[20 52]
[21 51]
[22 50]
[23 49]
[24 48]
[25 47]
[26 46]
[27 38]
[28 37]
[29 36]
[30 35]
[65 90]
[66 89]
[67 88]
[68 87]
[69 83]
[70 82]
[71 81]
[72 80]
[99 124]
[100 123]
[101 122]
[102 121]
[104 120]
[105 119]
[107 118]
[108 117]
[109 116]
[110 115]
[125 190]
[126 189]
[127 188]
[128 187]
[132 185]
[133 184]
[134 183]
[135 182]
[136 181]
[137 180]
[138 179]
[141 172]
[142 171]
[144 169]
[145 168]
[146 167]
[147 166]
[148 165]
[149 159]
[150 158]
[151 157]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
