%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUGAGGGCCCUUUCUCUUUCCAUCUCAGGAACUCAAACAUGACCAGGAAGAUCUUCACAAAUACCAGGGAGCGGUGGAGGCAGCAGAAUGUCAACAGCGCCUUUGCCAAGCUGAGGAAGCUCAUCCCCACUCACCCUC\
) } def
/len { sequence length } bind def

/coor [
[-62.24845505 297.08108521]
[-77.81801605 290.25012207]
[-87.87979126 301.37490845]
[-97.94155884 312.49969482]
[-108.00333405 323.62448120]
[-118.06510162 334.74923706]
[-128.12687683 345.87402344]
[-138.18864441 356.99880981]
[-131.08012390 370.38705444]
[-128.98242188 385.39956665]
[-132.14883423 400.22351074]
[-140.19702148 413.06884766]
[-152.15510559 422.38442993]
[-166.57910156 427.04534912]
[-181.72723389 426.48876953]
[-195.77029419 420.78192139]
[-207.01252747 410.61392212]
[-214.09635925 397.21261597]
[-216.16639709 382.19625854]
[-212.97267151 367.37817383]
[-204.90083313 354.54769897]
[-192.92559814 345.25418091]
[-178.49304199 340.61984253]
[-163.34594727 341.20431519]
[-149.31343079 346.93704224]
[-139.25164795 335.81225586]
[-129.18988037 324.68746948]
[-119.12811279 313.56271362]
[-109.06633759 302.43792725]
[-99.00457001 291.31314087]
[-88.94280243 280.18835449]
[-95.78256226 269.14913940]
[-99.50777435 256.69433594]
[-99.85337830 243.68536377]
[-96.78832245 231.02394104]
[-90.51821899 219.58950806]
[-81.47154999 210.17822266]
[-70.27038574 203.44746399]
[-57.68763733 199.86991882]
[-44.59370804 199.70043945]
[-31.89627838 202.95787048]
[-20.47740173 209.42323303]
[-9.69504642 198.99534607]
[1.08730924 188.56745911]
[-1.73958063 172.43455505]
[5.65450525 157.63439941]
[20.54747009 150.05638123]
[37.19098663 152.84648132]
[47.73834229 142.18096924]
[58.28569794 131.51544189]
[61.73348236 117.02537537]
[76.93865967 112.65351868]
[87.48601532 101.98799896]
[97.67109680 90.97599792]
[107.48252106 79.62980652]
[117.29394531 68.28362274]
[127.10536957 56.93743896]
[136.91679382 45.59125137]
[146.72822571 34.24506760]
[139.95602417 21.66829872]
[137.90109253 7.56296492]
[140.79127502 -6.36461163]
[148.25752258 -18.43668938]
[159.38073730 -27.20621490]
[172.80502319 -31.63026428]
[186.90281677 -31.19404602]
[199.97229004 -25.97072220]
[210.03405762 -37.09550476]
[220.09582520 -48.22028351]
[230.15760803 -59.34506607]
[240.21937561 -70.46984863]
[243.69392395 -79.00705719]
[250.63137817 -81.72720337]
[260.93850708 -92.62505341]
[271.24563599 -103.52291107]
[275.10696411 -118.86567688]
[289.47372437 -122.79572296]
[299.78085327 -133.69357300]
[299.51574707 -149.26815796]
[310.12387085 -160.17330933]
[324.97348022 -160.33007812]
[335.28060913 -171.22792053]
[345.58773804 -182.12577820]
[355.89483643 -193.02363586]
[355.20425415 -208.81283569]
[365.94204712 -220.40919495]
[381.73764038 -220.93281555]
[393.21984863 -210.07302856]
[393.57641602 -194.27276611]
[382.59585571 -182.90603638]
[366.79269409 -182.71650696]
[356.48556519 -171.81866455]
[346.17846680 -160.92080688]
[335.87133789 -150.02294922]
[336.54153442 -135.18763733]
[326.24389648 -123.98883820]
[310.67871094 -123.38645935]
[300.37158203 -112.48860168]
[297.24746704 -97.92531586]
[282.14349365 -93.21578979]
[271.83636475 -82.31793213]
[261.52923584 -71.42007446]
[251.34416199 -60.40807724]
[241.28237915 -49.28329468]
[231.22061157 -38.15851212]
[221.15884399 -27.03373146]
[211.09707642 -15.90894985]
[218.09866333 -1.73406661]
[219.14356995 14.07967377]
[214.04327393 29.12536049]
[203.54681396 41.10169601]
[189.23095703 48.16498184]
[173.26338196 49.21290588]
[158.07440186 44.05649185]
[148.26298523 55.40267563]
[138.45155334 66.74886322]
[128.64013672 78.09504700]
[118.82870483 89.44123840]
[109.01728058 100.78742218]
[108.76309967 104.72634888]
[106.73313904 108.52242279]
[103.03755951 111.36722565]
[98.15153503 112.53535461]
[87.60417938 123.20087433]
[83.40197754 138.45381165]
[68.95121765 142.06280518]
[58.40385818 152.72831726]
[47.85650253 163.39382935]
[51.09724426 176.83810425]
[47.28170013 190.01773071]
[37.51551819 199.50018311]
[24.43929482 202.87139893]
[11.51519585 199.34982300]
[0.73284042 209.77770996]
[-10.04951477 220.20559692]
[-2.72782969 235.73983765]
[-1.11716461 252.81280518]
[-5.39232635 269.39492798]
[-15.02941132 283.52053833]
[-28.86994934 293.52111816]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[42 135]
[43 134]
[44 133]
[48 128]
[49 127]
[50 126]
[52 124]
[53 123]
[54 119]
[55 118]
[56 117]
[57 116]
[58 115]
[59 114]
[67 107]
[68 106]
[69 105]
[70 104]
[71 103]
[73 102]
[74 101]
[75 100]
[77 98]
[78 97]
[81 94]
[82 93]
[83 92]
[84 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
