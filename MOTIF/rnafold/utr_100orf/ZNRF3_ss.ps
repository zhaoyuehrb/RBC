%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:18:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGGCCGCGCUCGGGCGGGCGCCCAGGGGCCACGGGCCGCCGCCGCCGCCGCCUGCGCCGCCGCCCCCGCGGCCUCCGGUGCAGCCGCCUGCCGCCGC\
) } def
/len { sequence length } bind def

/coor [
[233.69384766 317.05078125]
[232.00253296 313.10089111]
[231.73986816 308.35101318]
[222.99874878 296.16113281]
[214.25762939 283.97125244]
[205.51651001 271.78140259]
[196.77540588 259.59152222]
[188.03428650 247.40165710]
[179.29316711 235.21179199]
[170.55204773 223.02191162]
[161.81094360 210.83204651]
[151.40681458 210.03796387]
[143.04298401 203.43490601]
[139.72023010 193.07679749]
[142.80523682 182.41432190]
[134.83888245 169.70458984]
[126.87251282 156.99487305]
[118.90614319 144.28515625]
[110.93977356 131.57543945]
[102.97341156 118.86571503]
[88.87459564 115.52358246]
[81.17934418 103.24639893]
[84.31687164 89.10065460]
[76.35050201 76.39093781]
[62.46542740 68.80706024]
[62.26201248 53.91384125]
[54.29564667 41.20412064]
[46.32928085 28.49440002]
[38.36291122 15.78467846]
[30.19985008 3.20038652]
[21.84206581 -9.25543308]
[13.48428154 -21.71125221]
[-1.76564097 -24.88577843]
[-10.06418419 -37.63681030]
[-6.94377995 -52.15571594]
[-15.30156422 -64.61153412]
[-23.65934753 -77.06735992]
[-39.22557449 -78.55953979]
[-50.15391922 -89.74459076]
[-51.28435516 -105.34126282]
[-42.08312225 -117.98528290]
[-26.89476204 -121.70653534]
[-12.89075375 -114.74796295]
[-6.68336296 -100.39517975]
[-11.20352840 -85.42514038]
[-2.84574461 -72.96932220]
[5.51203966 -60.51350021]
[20.13017082 -57.89704895]
[28.78359032 -45.38414001]
[25.94010162 -30.06903648]
[34.29788589 -17.61321640]
[42.65567017 -5.15739727]
[49.11014175 -1.28889728]
[51.07263184 7.81831169]
[59.03900146 20.52803230]
[67.00537109 33.23775101]
[74.97173309 45.94747162]
[88.28700256 52.62226486]
[89.06022644 68.42456818]
[97.02658844 81.13428497]
[111.12540436 84.47641754]
[118.82065582 96.75360107]
[115.68312836 110.89934540]
[123.64949799 123.60906219]
[131.61585999 136.31878662]
[139.58222961 149.02850342]
[147.54859924 161.73822021]
[155.51496887 174.44795227]
[173.70220947 182.86273193]
[174.00080872 202.09092712]
[182.74192810 214.28080750]
[191.48303223 226.47067261]
[200.22415161 238.66053772]
[208.96527100 250.85040283]
[217.70637512 263.04028320]
[226.44749451 275.23013306]
[235.18861389 287.42001343]
[243.92973328 299.60989380]
[253.41177368 311.23272705]
[263.59808350 322.24362183]
[273.78436279 333.25448608]
[283.97064209 344.26538086]
[294.15695190 355.27624512]
[304.51324463 366.12738037]
[315.03704834 376.81613159]
[325.56085205 387.50491333]
[341.50323486 391.34844971]
[345.88568115 407.15115356]
[334.19989014 418.65658569]
[318.46722412 414.02893066]
[314.87210083 398.02871704]
[304.34829712 387.33993530]
[293.82449341 376.65118408]
[286.76431274 374.04748535]
[283.14605713 365.46255493]
[272.95977783 354.45166016]
[262.77349854 343.44079590]
[252.58718872 332.42990112]
[242.40089417 321.41903687]
[239.43066406 321.27062988]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 78]
[4 77]
[5 76]
[6 75]
[7 74]
[8 73]
[9 72]
[10 71]
[11 70]
[15 68]
[16 67]
[17 66]
[18 65]
[19 64]
[20 63]
[23 60]
[24 59]
[26 57]
[27 56]
[28 55]
[29 54]
[30 52]
[31 51]
[32 50]
[35 47]
[36 46]
[37 45]
[79 99]
[80 98]
[81 97]
[82 96]
[83 95]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
