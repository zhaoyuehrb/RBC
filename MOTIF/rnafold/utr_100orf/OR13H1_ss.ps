%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:41:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCAUGGACAAUGUCACAGCAGUGUUUCAGUUUCUCCUUAUUGGCAUUUCUAACUAUCCUCAAUGGAGAGACACGUUUUUCACAUUAGUGCUGAUAA\
) } def
/len { sequence length } bind def

/coor [
[69.27123260 196.71307373]
[65.08540344 182.30825806]
[55.96941376 194.22038269]
[46.85342407 206.13250732]
[37.73743439 218.04463196]
[34.93487549 226.92935181]
[28.14802170 230.17959595]
[18.66597557 241.80245972]
[18.84797478 257.84448242]
[6.32868481 267.87677002]
[-9.28816700 264.20343018]
[-16.02266693 249.64230347]
[-8.70868587 235.36346436]
[7.04311895 232.32040405]
[16.52516556 220.69755554]
[25.82530785 208.92863464]
[34.94129944 197.01651001]
[44.05728912 185.10438538]
[53.17327881 173.19226074]
[61.13964844 160.48254395]
[67.88706970 147.08581543]
[74.63449860 133.68908691]
[81.38192749 120.29236603]
[88.12934875 106.89564514]
[93.81567383 93.01523590]
[98.40653229 78.73503876]
[102.99739075 64.45484161]
[89.74311829 52.65563202]
[82.87960052 36.34759140]
[83.70285034 18.72514153]
[92.00789642 3.21938610]
[106.13741302 -7.16993046]
[123.31227875 -10.45472813]
[126.55254364 -25.10056877]
[129.79281616 -39.74641037]
[133.03308105 -54.39225388]
[136.27334595 -69.03809357]
[139.51361084 -83.68393707]
[142.75387573 -98.32977295]
[145.99415588 -112.97561646]
[134.07937622 -122.45188141]
[127.48740387 -136.10592651]
[127.47747040 -151.20625305]
[133.99798584 -164.75778198]
[145.70738220 -174.09585571]
[160.24975586 -177.41020203]
[163.49002075 -192.05604553]
[162.28312683 -201.29379272]
[167.06552124 -207.10363770]
[170.75970459 -221.64161682]
[160.73585510 -233.48654175]
[159.62222290 -248.96359253]
[167.84704590 -262.12155151]
[182.24769592 -267.90090942]
[197.28683472 -264.07940674]
[207.18159485 -252.12643433]
[208.12725830 -236.63819885]
[199.76017761 -223.57023621]
[185.29768372 -217.94743347]
[181.60350037 -203.40945435]
[178.13586426 -188.81578064]
[174.89558411 -174.16993713]
[186.68266296 -165.03042603]
[193.36012268 -151.62442017]
[193.55557251 -136.58703613]
[187.17672729 -122.90017700]
[175.44020081 -113.30115509]
[160.63998413 -109.73535156]
[157.39971924 -95.08950806]
[154.15945435 -80.44366455]
[150.91918945 -65.79782867]
[147.67892456 -51.15198517]
[144.43865967 -36.50614166]
[141.19837952 -21.86030197]
[137.95811462 -7.21446085]
[148.55630493 -0.55496383]
[156.56216431 9.09887791]
[161.16386414 20.79230499]
[161.88720703 33.36255646]
[158.64451599 45.55449295]
[151.74485779 56.14590836]
[141.86471558 64.07007599]
[129.98164368 68.52314758]
[117.27758789 69.04570007]
[112.68672943 83.32589722]
[108.09587097 97.60609436]
[109.32328796 100.03401947]
[109.76409912 102.96484375]
[109.23610687 106.13005829]
[107.65100861 109.20069885]
[105.03302765 111.82028198]
[101.52607727 113.64306641]
[94.77864838 127.03979492]
[88.03122711 140.43652344]
[81.28379822 153.83323669]
[74.53636932 167.22996521]
[89.32458496 164.71823120]
[101.72101593 173.16386414]
[104.79556274 187.84538269]
[96.82942200 200.55525208]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[4 17]
[5 16]
[7 15]
[8 14]
[20 96]
[21 95]
[22 94]
[23 93]
[24 92]
[25 86]
[26 85]
[27 84]
[33 75]
[34 74]
[35 73]
[36 72]
[37 71]
[38 70]
[39 69]
[40 68]
[46 62]
[47 61]
[49 60]
[50 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
