%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUAUUUUCUCAGGUGUUUGCAACAGUGUUCUAACUAUUAACGCUACGAUGCCUGAACCUACCAAGUCUGCUCCUGCCCCAAAGAAGGGCUCCAAGAAGGCGGUGACUAAGGCUCAGAAGAAGGACGGGAAGAAGCGCAAGCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[40.03499603 499.88421631]
[29.92479134 511.12142944]
[16.95067406 518.87799072]
[2.26628804 522.46405029]
[-12.82263851 521.56091309]
[-26.97440910 516.24877930]
[-38.93065643 507.00003052]
[-47.62824249 494.63702393]
[-52.29378128 480.25912476]
[-52.51241684 465.14477539]
[-48.26470566 450.63793945]
[-39.92835617 438.02853394]
[-28.24462891 428.43783569]
[-14.25243282 422.71856689]
[0.80405647 421.37933350]
[3.92273188 406.70712280]
[7.04140711 392.03491211]
[10.16008282 377.36270142]
[13.27875805 362.69049072]
[16.39743233 348.01828003]
[19.51610947 333.34606934]
[22.63478470 318.67385864]
[21.15794373 316.21731567]
[20.59850121 313.00894165]
[21.25506210 309.40771484]
[23.28614998 305.87643433]
[26.67755318 302.92831421]
[31.01303101 288.56851196]
[29.92822838 281.20739746]
[35.59258652 273.95510864]
[40.22784042 259.68927002]
[44.86309814 245.42343140]
[49.49835205 231.15757751]
[42.52857590 218.04431152]
[47.02616119 203.51068115]
[60.82782364 196.28904724]
[65.46308136 182.02320862]
[62.03741074 167.52789307]
[73.66050720 156.79411316]
[78.29576111 142.52825928]
[66.22098541 133.74470520]
[57.44970703 121.66101074]
[52.83972931 107.45892334]
[52.84189606 92.52738190]
[57.45599747 78.32663727]
[66.23078918 66.24549103]
[78.30811310 57.46544266]
[92.50684357 52.84515762]
[107.43838501 52.83648682]
[112.07364655 38.57063675]
[111.75386047 29.37399864]
[116.95823669 24.05636787]
[121.89123535 9.89072227]
[126.82423401 -4.27492332]
[131.75723267 -18.44056892]
[122.05940247 -28.57077599]
[117.70687103 -41.83234787]
[119.49851990 -55.60760117]
[127.02635193 -67.20336914]
[138.76657104 -74.37754822]
[152.38771057 -75.77252960]
[157.61628723 -89.83175659]
[162.84486389 -103.89099121]
[168.07345581 -117.95021820]
[167.33706665 -124.62841797]
[169.76197815 -129.86036682]
[173.82659912 -132.48101807]
[179.63932800 -146.30895996]
[185.45207214 -160.13691711]
[191.26480103 -173.96485901]
[189.47985840 -189.68505859]
[201.54460144 -198.41954041]
[207.35733032 -212.24748230]
[198.40446472 -226.56089783]
[199.70964050 -243.22685242]
[210.56417847 -255.72171021]
[226.56028748 -259.27230835]
[232.08215332 -273.21893311]
[237.60403442 -287.16558838]
[243.12590027 -301.11224365]
[235.52963257 -314.78085327]
[238.54728699 -330.12448120]
[250.75404358 -339.89840698]
[266.38623047 -339.48760986]
[278.06280518 -329.08609009]
[280.27044678 -313.60513306]
[271.96679688 -300.35433960]
[257.07254028 -295.59036255]
[251.55067444 -281.64370728]
[246.02880859 -267.69708252]
[240.50694275 -253.75042725]
[248.69207764 -243.15695190]
[250.57235718 -229.79286194]
[245.54797363 -217.15051270]
[234.83770752 -208.58741760]
[221.18528748 -206.43475342]
[215.37254333 -192.60679626]
[217.57325745 -177.87567139]
[205.09274292 -168.15213013]
[199.28001404 -154.32417297]
[193.46728516 -140.49623108]
[187.65454102 -126.66828156]
[182.13267517 -112.72163391]
[176.90409851 -98.66240692]
[171.67552185 -84.60317993]
[166.44694519 -70.54394531]
[177.03669739 -58.37899399]
[180.08285522 -42.44538116]
[174.66505432 -27.05531311]
[162.16662598 -16.42228317]
[145.92288208 -13.50756931]
[140.98988342 0.65807629]
[136.05688477 14.82372189]
[131.12388611 28.98936653]
[126.33949280 43.20589447]
[121.70423889 57.47174072]
[133.77900696 66.25529480]
[142.55029297 78.33898926]
[147.16026306 92.54107666]
[147.15809631 107.47261810]
[142.54400635 121.67336273]
[133.76921082 133.75451660]
[121.69188690 142.53456116]
[107.49315643 147.15484619]
[92.56161499 147.16351318]
[87.92635345 161.42936707]
[91.02047729 176.94506836]
[79.72892761 186.65846252]
[75.09367371 200.92430115]
[82.01467896 214.87913513]
[77.11064911 229.28070068]
[63.76419830 235.79283142]
[59.12894440 250.05868530]
[54.49369049 264.32452393]
[49.85843658 278.59039307]
[45.37282181 292.90399170]
[41.03734589 307.26376343]
[37.30699921 321.79251099]
[34.18832397 336.46475220]
[31.06964684 351.13696289]
[27.95097160 365.80917358]
[24.83229637 380.48138428]
[21.71362114 395.15359497]
[18.59494591 409.82580566]
[15.47627068 424.49801636]
[28.68634415 431.84548950]
[39.14262390 442.76144409]
[45.91534042 456.27517700]
[48.40227509 471.18515015]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 145]
[16 144]
[17 143]
[18 142]
[19 141]
[20 140]
[21 139]
[22 138]
[27 137]
[28 136]
[30 135]
[31 134]
[32 133]
[33 132]
[36 129]
[37 128]
[39 126]
[40 125]
[49 116]
[50 115]
[52 114]
[53 113]
[54 112]
[55 111]
[61 106]
[62 105]
[63 104]
[64 103]
[67 102]
[68 101]
[69 100]
[70 99]
[72 97]
[73 96]
[77 91]
[78 90]
[79 89]
[80 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
