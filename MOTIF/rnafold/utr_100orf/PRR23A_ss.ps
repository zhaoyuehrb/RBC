%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:29:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGCAGCCGGCCCCGCAGCCCCAGCGCCUUCCCUGCGCCCUGGUGGGGACAGCAGCCAGGAGGACCCGGCCCUGCCAAGCGCCUCCGAUUGGAGGAGC\
) } def
/len { sequence length } bind def

/coor [
[178.12768555 266.18975830]
[171.11305237 256.63021851]
[169.65217590 244.74156189]
[174.23536682 233.54414368]
[165.87757874 221.08831787]
[157.51979065 208.63250732]
[149.16201782 196.17668152]
[140.80422974 183.72087097]
[136.20640564 181.91787720]
[132.77543640 177.10766602]
[132.34236145 170.22059631]
[124.77510834 157.26927185]
[117.20787048 144.31794739]
[109.64062500 131.36662292]
[96.93259430 132.67105103]
[84.68944550 129.02401733]
[74.76668549 120.97824860]
[68.66816711 109.75311279]
[67.31814575 97.04984283]
[70.92122650 84.79368591]
[78.93135071 74.84211731]
[72.18392181 61.44539642]
[65.22897339 48.15522385]
[58.06817245 34.97482300]
[42.17968750 25.83135414]
[43.11373901 8.38345909]
[35.54649353 -4.56786633]
[27.77874947 -17.39994049]
[19.81238365 -30.10966110]
[4.66856432 -33.75691986]
[-3.22940993 -46.75986862]
[0.34102106 -61.17470932]
[-7.62534571 -73.88442993]
[-15.59171295 -86.59415436]
[-23.55808067 -99.30387115]
[-31.52444649 -112.01359558]
[-39.49081421 -124.72331238]
[-47.45718002 -137.43302917]
[-62.91541290 -140.72219849]
[-71.45004272 -154.02391052]
[-67.99761963 -169.44650269]
[-54.60641479 -177.84002686]
[-39.22118759 -174.22474670]
[-30.96971893 -160.74554443]
[-34.74745941 -145.39939880]
[-26.78109360 -132.68968201]
[-18.81472588 -119.97995758]
[-10.84835911 -107.27024078]
[-2.88199234 -94.56051636]
[5.08437443 -81.85079956]
[13.05074120 -69.14107513]
[27.58043098 -66.07126617]
[35.84051514 -53.29528809]
[32.52210236 -38.07602692]
[40.48847198 -25.36630821]
[46.81951141 -21.29894638]
[48.49782181 -12.13510895]
[56.06506348 0.81621641]
[67.77954102 4.24972534]
[74.15608215 15.12926006]
[71.24857330 27.81402588]
[78.40937042 40.99442673]
[84.47529602 45.44751740]
[85.58065033 54.69796753]
[92.32807159 68.09469604]
[109.30983734 68.53360748]
[123.79666138 77.40518188]
[131.90623474 92.33192444]
[131.46527100 109.31362915]
[122.59194946 123.79938507]
[130.15919495 136.75071716]
[137.72644043 149.70204163]
[145.29368591 162.65336609]
[153.26004028 175.36308289]
[161.61782837 187.81890869]
[169.97561646 200.27471924]
[178.33340454 212.73054504]
[186.69117737 225.18635559]
[205.28405762 227.99871826]
[215.88923645 243.14485168]
[212.29652405 260.96160889]
[221.41250610 272.87374878]
[235.94384766 279.13082886]
[237.53410339 293.94027710]
[246.65010071 305.85241699]
[255.76608276 317.76452637]
[264.88208008 329.67666626]
[273.99807739 341.58877563]
[289.34024048 347.38104248]
[291.72769165 363.60546875]
[278.70443726 373.57177734]
[263.66769409 367.02746582]
[262.08593750 350.70477295]
[252.96995544 338.79266357]
[243.85395813 326.88052368]
[234.73797607 314.96841431]
[225.62197876 303.05627441]
[211.74269104 297.65124512]
[209.50038147 281.98971558]
[200.38439941 270.07760620]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 78]
[5 77]
[6 76]
[7 75]
[8 74]
[11 73]
[12 72]
[13 71]
[14 70]
[21 65]
[22 64]
[23 62]
[24 61]
[26 58]
[27 57]
[28 55]
[29 54]
[32 51]
[33 50]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
[81 100]
[82 99]
[84 97]
[85 96]
[86 95]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
