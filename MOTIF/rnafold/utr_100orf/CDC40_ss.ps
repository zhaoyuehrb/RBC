%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCGCAGAAGAUUUGUUGCCGUCAUGUCGGCUGCGAUUGCAGCUCUGGCCGCUUCCUAUGGUUCGGGUUCAGGGUCCGAAUCGGACUCGGACAGUGAGAGCAGUCGGUGUCCGCUGCCAGCCG\
) } def
/len { sequence length } bind def

/coor [
[19.54727173 204.79939270]
[10.60995770 203.55656433]
[2.31744814 200.04829407]
[-4.76791525 194.52331543]
[-17.43283463 202.56071472]
[-30.09775352 210.59811401]
[-42.76267242 218.63551331]
[-55.42758942 226.67291260]
[-58.99000549 241.83691406]
[-71.94853210 249.80757141]
[-86.38313293 246.31790161]
[-99.04804993 254.35530090]
[-111.71297455 262.39270020]
[-119.21898651 276.32003784]
[-134.11083984 276.60681152]
[-146.77575684 284.64422607]
[-148.66444397 300.16732788]
[-160.12455750 310.80685425]
[-175.74497986 311.53918457]
[-188.15023804 302.01846313]
[-191.48292542 286.74014282]
[-184.16946411 272.91815186]
[-169.66304016 267.07882690]
[-154.81315613 271.97930908]
[-142.14823914 263.94189453]
[-135.54809570 250.58947754]
[-119.75037384 249.72778320]
[-107.08545685 241.69038391]
[-94.42053986 233.65298462]
[-91.43212891 219.10633850]
[-78.70259094 210.77485657]
[-63.46499252 214.00799561]
[-50.80007553 205.97059631]
[-38.13515472 197.93319702]
[-25.47023582 189.89579773]
[-12.80531693 181.85839844]
[-13.61991787 160.44023132]
[-1.54135001 142.58187866]
[18.87776375 135.28012085]
[39.78281021 141.50181580]
[50.84550858 131.37182617]
[61.90820694 121.24183655]
[72.97090149 111.11184692]
[84.03359985 100.98185730]
[87.94622040 86.50112915]
[83.49060059 72.17816162]
[79.03497314 57.85519409]
[74.57935333 43.53222656]
[70.12372589 29.20925713]
[65.48847198 14.94340992]
[60.67431641 0.73693490]
[55.86016464 -13.46953964]
[41.22409439 -18.97585106]
[33.59668732 -32.62710190]
[36.57937622 -47.97759628]
[48.76382446 -57.77929306]
[64.39690399 -57.40413284]
[76.09716034 -47.02925491]
[78.34008789 -31.55336189]
[70.06663513 -18.28369331]
[74.88079071 -4.07721949]
[79.69494629 10.12925529]
[84.87938690 15.51459217]
[84.44669342 24.75363350]
[88.90232086 39.07660294]
[93.35794067 53.39957047]
[97.81356812 67.72254181]
[102.26918793 82.04550934]
[109.40211487 84.36313629]
[114.03759003 70.09735870]
[128.30329895 74.73305511]
[123.66796112 88.99839020]
[130.80088806 91.31601715]
[142.82438660 82.34744263]
[154.84790039 73.37886810]
[166.87139893 64.41029358]
[178.89489746 55.44171524]
[190.91841125 46.47314072]
[202.94190979 37.50456619]
[212.02290344 23.18772507]
[228.29409790 27.95052910]
[228.22175598 44.90432358]
[211.91049194 49.52807236]
[199.88697815 58.49664688]
[187.86347961 67.46522522]
[175.83998108 76.43379974]
[163.81646729 85.40237427]
[151.79296875 94.37094879]
[139.76945496 103.33952332]
[141.64945984 118.22124481]
[155.52561951 123.91793060]
[169.40177917 129.61460876]
[183.27793884 135.31129456]
[197.15408325 141.00798035]
[212.85877991 139.09140015]
[221.69403076 151.08255005]
[235.57019043 156.77923584]
[249.44633484 162.47592163]
[263.93005371 156.15156555]
[278.61288452 161.99879456]
[284.78375244 176.54855347]
[278.78161621 191.16874695]
[264.16741943 197.18545532]
[249.61151123 191.02908325]
[243.74964905 176.35208130]
[229.87348938 170.65539551]
[215.99734497 164.95870972]
[201.28517151 167.28276062]
[191.45739746 154.88414001]
[177.58125305 149.18745422]
[163.70509338 143.49076843]
[149.82893372 137.79408264]
[135.95277405 132.09739685]
[94.16358948 112.04454803]
[83.10089111 122.17454529]
[72.03820038 132.30453491]
[60.97550201 142.43452454]
[49.91280365 152.56451416]
[53.38037491 161.06127930]
[54.52593231 170.14723206]
[53.28113556 179.20069885]
[49.74084854 187.60488892]
[44.15598297 194.78979492]
[36.91574478 200.27096558]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 36]
[5 35]
[6 34]
[7 33]
[8 32]
[11 29]
[12 28]
[13 27]
[15 25]
[16 24]
[40 118]
[41 117]
[42 116]
[43 115]
[44 114]
[45 68]
[46 67]
[47 66]
[48 65]
[49 64]
[50 62]
[51 61]
[52 60]
[73 89]
[74 88]
[75 87]
[76 86]
[77 85]
[78 84]
[79 83]
[90 113]
[91 112]
[92 111]
[93 110]
[94 109]
[96 107]
[97 106]
[98 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
