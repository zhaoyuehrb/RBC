%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:53:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGACCAGACUUGGCGCGGGUGUCUCGAAGAUGCUCGAGGGCCUGGGGUCGCCCGCCUCGCCCCGGGCAGCUGCAAGCGCCUCGGUCGCAGGGUCGUCGGGGCCAGCGGCCUGCUCGCCUCCCUCGUCCU\
) } def
/len { sequence length } bind def

/coor [
[82.35357666 316.78729248]
[82.35357666 301.78729248]
[82.35357666 286.78729248]
[82.35357666 271.78729248]
[82.35357666 256.78729248]
[74.61627960 244.06001282]
[82.35357666 230.25984192]
[82.35357666 215.25984192]
[70.82973480 208.41081238]
[64.16347504 196.65530396]
[64.20207977 183.03268433]
[71.04300690 171.12686157]
[82.98001099 164.12338257]
[83.33969879 149.12770081]
[83.69938660 134.13201904]
[84.05908203 119.13632965]
[83.86670685 114.90978241]
[84.46558380 110.99118042]
[70.03242493 115.07576752]
[55.59926605 119.16035461]
[41.16610336 123.24494171]
[26.73294258 127.32952881]
[12.29978180 131.41412354]
[-2.13337898 135.49870300]
[-16.56653976 139.58329773]
[-30.16066933 149.71423340]
[-43.65892029 139.45590210]
[-37.53816605 123.64537048]
[-20.65112877 125.15013123]
[-6.21796751 121.06554413]
[8.21519375 116.98095703]
[22.64835548 112.89636993]
[37.08151627 108.81178284]
[51.51467514 104.72719574]
[65.94783783 100.64260101]
[80.38099670 96.55801392]
[87.77691650 83.50809479]
[83.86568451 69.02700043]
[79.95445251 54.54589844]
[76.04321289 40.06479645]
[71.95862579 25.63163567]
[67.70127106 11.24848938]
[56.36534119 0.21185769]
[60.17215347 -14.18805313]
[55.91479874 -28.57120132]
[44.57886887 -39.60783005]
[48.38568115 -54.00774384]
[44.12832642 -68.39089203]
[39.87096786 -82.77404022]
[28.53503799 -93.81066895]
[32.34185028 -108.21057892]
[28.08449554 -122.59372711]
[23.82713890 -136.97686768]
[19.56978416 -151.36001587]
[15.31242752 -165.74316406]
[0.64199746 -170.79867554]
[-8.22747707 -183.53099060]
[-7.88550091 -199.04429626]
[1.53642833 -211.37341309]
[16.41538620 -215.77752686]
[31.03011131 -210.56317139]
[39.76094055 -197.73538208]
[39.25069809 -182.22669983]
[29.69557571 -170.00051880]
[33.95293045 -155.61737061]
[38.21028519 -141.23422241]
[42.46764374 -126.85108185]
[46.72499847 -112.46793365]
[57.75641632 -102.46008301]
[54.25411606 -87.03139496]
[58.51147079 -72.64824677]
[62.76882935 -58.26509857]
[73.80024719 -48.25724792]
[70.29794312 -32.82855606]
[74.55529785 -18.44540977]
[85.58671570 -8.43755722]
[82.08441925 6.99113321]
[86.34177399 21.37428093]
[91.30604553 26.95045090]
[90.52431488 36.15356445]
[94.43554688 50.63466263]
[98.34678650 65.11576080]
[102.25801849 79.59686279]
[114.32952881 88.50071716]
[129.31982422 87.96125031]
[144.31011963 87.42177582]
[159.30041504 86.88230896]
[174.29071045 86.34284210]
[189.28100586 85.80336761]
[198.67897034 76.87483978]
[211.23953247 76.78797150]
[220.16868591 85.04052734]
[235.16760254 84.86067200]
[250.16651917 84.68080902]
[265.16543579 84.50095367]
[277.35650635 74.07225800]
[293.08312988 77.24279785]
[300.28121948 91.58040619]
[293.42901611 106.08650208]
[277.78292847 109.63323975]
[265.34530640 99.49987793]
[250.34637451 99.67973328]
[235.34745789 99.85958862]
[220.34854126 100.03945160]
[205.82281494 109.81092072]
[189.82048035 100.79366302]
[174.83018494 101.33313751]
[159.83988953 101.87260437]
[144.84959412 102.41207886]
[129.85929871 102.95154572]
[114.86899567 103.49101257]
[128.41465759 109.93423462]
[131.00711060 124.70850372]
[120.46430969 135.37854004]
[105.66000366 132.96350098]
[99.05476379 119.49601746]
[98.69507599 134.49169922]
[98.33538818 149.48739624]
[97.97569275 164.48307800]
[111.52974701 174.52189636]
[116.41638184 190.49227905]
[110.91067505 206.08448792]
[97.35357666 215.25984192]
[97.35357666 230.25984192]
[105.09087372 244.06001282]
[97.35357666 256.78729248]
[97.35357666 271.78729248]
[97.35357666 286.78729248]
[97.35357666 301.78729248]
[97.35357666 316.78729248]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 130]
[2 129]
[3 128]
[4 127]
[5 126]
[7 124]
[8 123]
[13 119]
[14 118]
[15 117]
[16 116]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[25 29]
[37 83]
[38 82]
[39 81]
[40 80]
[41 78]
[42 77]
[44 75]
[45 74]
[47 72]
[48 71]
[49 70]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[84 111]
[85 110]
[86 109]
[87 108]
[88 107]
[89 106]
[92 104]
[93 103]
[94 102]
[95 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
