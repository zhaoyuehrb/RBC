%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:00:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUCUCAAGGAGGGACUCAGGGCCUGGAAGAGAAUCUUCUGGCGGCAGAUCCUACUUACACUUGGCCUCUUAGGCCUGUUUCUGUAUGGCCUCCCUA\
) } def
/len { sequence length } bind def

/coor [
[95.80867767 284.17697144]
[100.50263977 269.48104858]
[112.41120911 259.67340088]
[110.54972839 244.78936768]
[108.68824768 229.90531921]
[106.82676697 215.02127075]
[93.05016327 209.35815430]
[83.89702606 197.48062134]
[81.90487671 182.51741028]
[87.70799255 168.47387695]
[99.84043121 159.15985107]
[97.97895050 144.27580261]
[96.11746979 129.39175415]
[94.25598907 114.50769806]
[86.68874359 101.55637360]
[74.63629150 92.62673950]
[62.58383560 83.69710541]
[50.53137970 74.76747131]
[38.34151077 66.02635956]
[26.01717567 57.47587585]
[13.27933407 62.99875259]
[-0.41061234 61.47228622]
[-11.44336510 53.40775681]
[-16.96433449 41.02573013]
[-15.61186790 27.64561844]
[-27.66432190 18.71598434]
[-39.71677780 9.78635216]
[-48.64400864 7.12230730]
[-51.99941254 0.38682118]
[-63.76832581 -8.91332245]
[-75.53723907 -18.21346474]
[-87.30615234 -27.51360893]
[-99.07506561 -36.81375122]
[-110.84397888 -46.11389542]
[-127.02006531 -51.19038391]
[-126.61994934 -68.13961029]
[-110.22234344 -72.44714355]
[-101.54383850 -57.88280869]
[-89.77492523 -48.58266449]
[-78.00601196 -39.28252411]
[-66.23709869 -29.98237991]
[-54.46818161 -20.68223572]
[-42.69926834 -11.38209248]
[-30.78714371 -2.26610231]
[-18.73468971 6.66353083]
[-6.68223476 15.59316349]
[8.72127819 10.15849400]
[24.50548172 14.96289825]
[34.46629333 28.32252693]
[34.56766129 45.15153885]
[46.89199448 53.70202637]
[54.31269073 54.95052338]
[59.46101379 62.71501923]
[71.51346588 71.64465332]
[83.56591797 80.57428741]
[95.61837769 89.50392151]
[89.32244873 75.88917542]
[80.55982208 63.71475601]
[78.95722961 48.80061340]
[84.93326569 35.04245377]
[96.92694855 26.03403664]
[111.80541992 24.12844086]
[125.68227386 29.82342529]
[134.93275452 41.63140869]
[137.14056396 56.46803665]
[131.72811890 70.45906067]
[119.98082733 79.78650665]
[134.76185608 77.23285675]
[149.54289246 74.67919922]
[164.32391357 72.12554932]
[179.10494995 69.57189178]
[193.68351746 60.91730881]
[206.03562927 72.53030396]
[198.29586792 87.61448669]
[181.65859985 84.35292053]
[166.87757874 86.90657806]
[152.09654236 89.46022797]
[137.31550598 92.01388550]
[122.53448486 94.56753540]
[135.41210938 102.25952911]
[134.19911194 117.21040344]
[120.24994659 122.72589111]
[109.14002991 112.64621735]
[111.00151825 127.53026581]
[112.86299896 142.41430664]
[114.72447968 157.29835510]
[128.77706909 163.33755493]
[137.86007690 175.51933289]
[139.61441040 190.51229858]
[133.66838074 204.27822876]
[121.71081543 213.15979004]
[123.57229614 228.04383850]
[125.43377686 242.92788696]
[127.29525757 257.81192017]
[141.25244141 264.38464355]
[149.42112732 277.47189331]
[149.19470215 292.89761353]
[140.64543152 305.73947144]
[126.50135040 311.89968872]
[111.27577972 309.41259766]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 94]
[4 93]
[5 92]
[6 91]
[11 86]
[12 85]
[13 84]
[14 83]
[15 56]
[16 55]
[17 54]
[18 53]
[19 51]
[20 50]
[25 46]
[26 45]
[27 44]
[29 43]
[30 42]
[31 41]
[32 40]
[33 39]
[34 38]
[67 79]
[68 78]
[69 77]
[70 76]
[71 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
