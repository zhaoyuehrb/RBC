%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:15:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGUCUCCGCCGCAGCUCGGCUCCCGCGCGCUCAGCACCGCCAGCGGCGGCCAGAUGCAGGCGGAGCGAGGAGCUCGGGGAGGCCGUGGGCGGCGGCCAGGCCGCGGCCGGCCUGGCGGAGAUCGCCACAGCGAGCGGCCCGGAGCCGCAGCGG\
) } def
/len { sequence length } bind def

/coor [
[154.40693665 230.44743347]
[160.98524475 218.29878235]
[153.52861023 205.28346252]
[146.07197571 192.26814270]
[138.61534119 179.25282288]
[131.02885437 166.31275940]
[123.31329346 153.44923401]
[115.59773254 140.58572388]
[107.88217163 127.72219849]
[100.16660309 114.85868835]
[89.72036743 104.09410095]
[77.09420013 95.99597168]
[64.46802521 87.89784241]
[51.84185028 79.79970551]
[39.21567535 71.70157623]
[26.75328827 77.66416931]
[13.08150673 76.68345642]
[1.77803731 69.12368011]
[-4.25246668 57.05659866]
[-3.52450848 43.69478989]
[-15.98612118 35.34564590]
[-28.44773293 26.99650002]
[-40.90934372 18.64735603]
[-53.45386505 10.42330647]
[-66.08003998 2.32517481]
[-78.70621490 -5.77295685]
[-91.33238983 -13.87108803]
[-100.30005646 -15.88825321]
[-104.12792206 -22.25969887]
[-116.58953094 -30.60884476]
[-132.36102295 -31.86220551]
[-138.62785339 -45.37427521]
[-151.08946228 -53.72342300]
[-163.55107117 -62.07256699]
[-176.01268005 -70.42171478]
[-196.13078308 -70.79921722]
[-204.01292419 -88.42021179]
[-216.79859924 -96.26408386]
[-232.60760498 -96.88542938]
[-239.41003418 -110.13594818]
[-252.19570923 -117.97982788]
[-264.98138428 -125.82369995]
[-277.76705933 -133.66757202]
[-290.55276489 -141.51145935]
[-306.36175537 -142.13279724]
[-313.16418457 -155.38331604]
[-325.94985962 -163.22718811]
[-338.73553467 -171.07106018]
[-352.58666992 -164.27769470]
[-367.90908813 -166.07391357]
[-379.81350708 -175.88658142]
[-384.50128174 -190.58448792]
[-380.47650146 -205.47760010]
[-369.02349854 -215.81356812]
[-353.79687500 -218.29423523]
[-339.65539551 -212.12802124]
[-331.11157227 -199.28254700]
[-330.89166260 -183.85675049]
[-318.10598755 -176.01287842]
[-305.32031250 -168.16899109]
[-290.42581177 -168.10870361]
[-282.70886230 -154.29713440]
[-269.92318726 -146.45326233]
[-257.13751221 -138.60937500]
[-244.35183716 -130.76550293]
[-231.56616211 -122.92163086]
[-216.67167664 -122.86132812]
[-208.95472717 -109.04976654]
[-196.16905212 -101.20588684]
[-186.41854858 -104.48329163]
[-176.26895142 -101.76673126]
[-169.16729736 -93.72696686]
[-167.66354370 -82.88332367]
[-155.20193481 -74.53417969]
[-142.74031067 -66.18503571]
[-130.27870178 -57.83588791]
[-115.39855957 -57.17971420]
[-108.24038696 -43.07045746]
[-95.77877808 -34.72131348]
[-83.23425293 -26.49726295]
[-70.60808563 -18.39912987]
[-57.98190689 -10.30099869]
[-45.35573578 -2.20286775]
[-37.98632431 -1.23350239]
[-32.56019974 6.18574381]
[-20.09858894 14.53488827]
[-7.63697577 22.88403320]
[4.82463646 31.23317909]
[20.01529694 25.07850456]
[36.04675293 29.21280670]
[46.57528305 42.20391083]
[47.31380844 59.07540512]
[59.93997955 67.17353821]
[72.56615448 75.27166748]
[85.19232941 83.36979675]
[97.81850433 91.46792603]
[102.35943604 83.54109192]
[112.46628571 78.96940613]
[126.45018005 73.54254913]
[140.43406677 68.11569977]
[154.41796875 62.68883896]
[168.40185547 57.26198578]
[182.38574219 51.83512878]
[196.36964417 46.40827179]
[210.35353088 40.98141479]
[224.33741760 35.55456161]
[234.18357849 22.44024277]
[250.42926025 24.67845535]
[256.36230469 39.96671677]
[245.87931824 52.57777405]
[229.76428223 49.53845215]
[215.78038025 54.96530914]
[201.79649353 60.39216614]
[187.81260681 65.81902313]
[173.82870483 71.24587250]
[159.84481812 76.67272949]
[145.86093140 82.09958649]
[131.87702942 87.52644348]
[117.89314270 92.95330048]
[113.03012085 107.14311981]
[120.74568939 120.00663757]
[128.46124268 132.87016296]
[136.17681885 145.73367310]
[143.89237976 158.59719849]
[151.03100586 164.38752747]
[151.63066101 171.79618835]
[159.08729553 184.81150818]
[166.54393005 197.82682800]
[174.00056458 210.84214783]
[190.81402588 212.42340088]
[203.26240540 223.58837891]
[206.58988953 239.80650330]
[199.68330383 254.67041016]
[207.39888000 267.53393555]
[219.73175049 271.43356323]
[225.88418579 282.35269165]
[223.01936340 294.14117432]
[230.47599792 307.15649414]
[237.93263245 320.17181396]
[245.38928223 333.18713379]
[252.84591675 346.20245361]
[267.88928223 351.77706909]
[272.77322388 367.05865479]
[263.75115967 380.32449341]
[247.74407959 381.39816284]
[237.03123474 369.45602417]
[239.83058167 353.65908813]
[232.37394714 340.64376831]
[224.91731262 327.62844849]
[217.46067810 314.61312866]
[210.00404358 301.59780884]
[194.39126587 293.63717651]
[194.53535461 275.24948120]
[186.81979370 262.38595581]
[173.43829346 262.44485474]
[161.68786621 255.81849670]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 129]
[3 128]
[4 127]
[5 126]
[6 124]
[7 123]
[8 122]
[9 121]
[10 120]
[11 96]
[12 95]
[13 94]
[14 93]
[15 92]
[20 88]
[21 87]
[22 86]
[23 85]
[24 83]
[25 82]
[26 81]
[27 80]
[29 79]
[30 78]
[32 76]
[33 75]
[34 74]
[35 73]
[37 69]
[38 68]
[40 66]
[41 65]
[42 64]
[43 63]
[44 62]
[46 60]
[47 59]
[48 58]
[98 119]
[99 118]
[100 117]
[101 116]
[102 115]
[103 114]
[104 113]
[105 112]
[106 111]
[133 154]
[134 153]
[137 151]
[138 150]
[139 149]
[140 148]
[141 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
