%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCGAUGCAGCUGCUGCUUACAGAUUUUAUUAUCUUUUCCAUCAGAUUCAUCAUCAACAGCAUGGAAGCGAGAAACCAAACAGCUAUUUCAAAAUUCC\
) } def
/len { sequence length } bind def

/coor [
[71.17173004 327.54611206]
[64.08456421 314.09841919]
[62.68806458 298.96176147]
[67.19518280 284.44439697]
[76.91862488 272.76007080]
[90.37563324 265.69061279]
[88.97794342 250.75587463]
[76.09188080 243.33378601]
[69.97480011 229.58441162]
[73.16407776 214.69541931]
[84.64158630 204.42054749]
[83.24389648 189.48580933]
[81.84620667 174.55107117]
[80.44851685 159.61633301]
[79.05082703 144.68159485]
[66.59500885 136.32380676]
[52.24514389 140.69203186]
[37.89527893 145.06024170]
[27.09796143 157.40325928]
[11.06458569 153.95901489]
[6.28891277 138.27062988]
[17.68374634 126.47700500]
[33.52705765 130.71038818]
[47.87692261 126.34216309]
[62.22678757 121.97394562]
[58.86324692 113.38363647]
[57.40492630 104.36876678]
[57.87881088 95.34241486]
[60.22426605 86.70986176]
[64.29749298 78.85041046]
[69.87973022 72.10072327]
[76.68869781 66.74045563]
[84.39266968 62.98071289]
[92.62654877 60.95593262]
[101.00914001 60.71937180]
[104.24941254 46.07353210]
[99.67587280 30.92779541]
[109.97981262 20.17241669]
[113.22007751 5.52657509]
[116.46034241 -9.11926651]
[119.70061493 -23.76510811]
[122.94087982 -38.41094971]
[126.18114471 -53.05678940]
[129.42141724 -67.70262909]
[116.27273560 -75.15942383]
[105.90736389 -86.16171265]
[99.24696350 -99.73118591]
[96.88378906 -114.66124725]
[99.02796173 -129.62432861]
[105.48883057 -143.28993225]
[115.69188690 -154.44291687]
[128.72990417 -162.09155273]
[143.44352722 -165.55574036]
[158.52444458 -164.52745056]
[172.63166809 -159.09811401]
[184.51078796 -149.75050354]
[193.10552979 -137.31581116]
[197.65164185 -122.89969635]
[197.74490356 -107.78404999]
[193.37701416 -93.31294250]
[184.93637085 -80.77313995]
[173.17349243 -71.27965546]
[159.13433838 -65.67665863]
[144.06726074 -64.46236420]
[140.82698059 -49.81652451]
[137.58671570 -35.17068100]
[134.34645081 -20.52483940]
[131.10618591 -5.87899923]
[127.86592102 8.76684189]
[124.62564850 23.41268349]
[129.43095398 37.51085281]
[118.89524841 49.31380081]
[115.65498352 63.95964050]
[125.49922180 69.52711487]
[133.44897461 77.74729919]
[138.80081177 87.99539948]
[141.05255127 99.46375275]
[139.94952393 111.22540283]
[135.51121521 122.30897522]
[128.03544617 131.77894592]
[118.07937622 138.81446838]
[106.41831970 142.78036499]
[93.98557281 143.28390503]
[95.38325500 158.21864319]
[96.78094482 173.15338135]
[98.17863464 188.08811951]
[99.57632446 203.02285767]
[112.76100922 210.98968506]
[118.65752411 225.02836609]
[115.19783020 239.67399597]
[103.91268158 249.35818481]
[105.31037140 264.29290771]
[119.84542084 268.74270630]
[131.56802368 278.41998291]
[138.69053650 291.84896851]
[140.12686157 306.98190308]
[135.65794373 321.51107788]
[125.96528625 333.22094727]
[112.52692413 340.32577515]
[97.39212036 341.74218750]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 92]
[7 91]
[11 87]
[12 86]
[13 85]
[14 84]
[15 83]
[16 25]
[17 24]
[18 23]
[35 73]
[36 72]
[38 70]
[39 69]
[40 68]
[41 67]
[42 66]
[43 65]
[44 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
