%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:33:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGGAGAGCUCCCUCUACCGGCAGCGGCUAGAAGUCAUCGCUGAGAAGCGGCGGCUGCAGGAGGAGAUCCGCGCCGCGCGCCGGGAGGUGGAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[44.36658478 377.98919678]
[37.34458923 380.98034668]
[29.78577232 381.24249268]
[22.62497330 394.42288208]
[15.46417522 407.60330200]
[18.61957550 423.33297729]
[8.17914963 435.51397705]
[-7.84810162 434.80209351]
[-17.16744232 421.74340820]
[-12.62987137 406.35540771]
[2.28377461 400.44250488]
[9.44457245 387.26208496]
[16.60537148 374.08169556]
[13.05153751 351.93524170]
[32.18366241 338.91998291]
[37.21641159 324.78948975]
[42.24916458 310.65896606]
[47.28191376 296.52844238]
[52.31466293 282.39794922]
[57.34741211 268.26742554]
[62.38016510 254.13690186]
[67.41291809 240.00639343]
[71.55744171 225.59033203]
[74.79770660 210.94448853]
[78.03797150 196.29864502]
[71.80869293 179.97389221]
[84.13631439 166.40640259]
[86.91953278 151.66687012]
[89.70274353 136.92735291]
[92.48596191 122.18782043]
[95.26918030 107.44828796]
[90.28812408 107.19737244]
[85.20621490 104.10418701]
[81.46971130 98.20564270]
[80.42907715 90.21359253]
[83.04529572 81.42988586]
[80.26207733 66.69035339]
[77.47885895 51.95082855]
[74.69564819 37.21129990]
[64.53211212 25.08640289]
[69.77353668 11.14449787]
[66.99031830 -3.59503126]
[64.20710754 -18.33456039]
[61.42388916 -33.07408905]
[58.64067078 -47.81361771]
[47.54388046 -59.88810730]
[52.70980835 -75.45233917]
[68.82418823 -78.49516296]
[79.30992889 -65.88638306]
[73.38020325 -50.59683228]
[76.16341400 -35.85730362]
[78.94663239 -21.11777687]
[81.72985077 -6.37824774]
[84.51306915 8.36128139]
[94.47752380 19.43190765]
[89.43517303 34.42808151]
[92.21839142 49.16761017]
[95.00160980 63.90713882]
[97.78482056 78.64666748]
[111.38491058 84.97419739]
[124.45235443 77.60928345]
[130.52444458 70.54370880]
[138.04270935 70.22576141]
[151.33288574 63.27080536]
[164.62306213 56.31585312]
[170.76719666 41.49596786]
[186.22389221 37.19825745]
[199.13607788 46.71955490]
[199.59863281 62.75593948]
[187.25671387 73.00566864]
[171.57800293 69.60602570]
[158.28784180 76.56097412]
[144.99766541 83.51593018]
[131.81726074 90.67672729]
[118.74982452 98.04164124]
[110.00870514 110.23150635]
[107.22549438 124.97103882]
[104.44227600 139.71057129]
[101.65905762 154.45008850]
[98.87583923 169.18962097]
[105.52609253 180.37582397]
[102.78530121 192.68486023]
[92.68381500 199.53890991]
[89.44355011 214.18475342]
[86.20328522 228.83059692]
[87.83056641 233.30076599]
[87.82965851 237.59751892]
[86.48117065 241.19703674]
[84.21573639 243.73411560]
[81.54342651 245.03913879]
[76.51068115 259.16964722]
[71.47792816 273.30017090]
[66.44517517 287.43069458]
[61.41242599 301.56118774]
[56.37967682 315.69171143]
[51.34692764 329.82223511]
[46.31417465 343.95272827]
[51.28077316 350.19665527]
[53.64787674 357.74328613]
[53.14597321 365.56719971]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 13]
[4 12]
[5 11]
[15 97]
[16 96]
[17 95]
[18 94]
[19 93]
[20 92]
[21 91]
[22 90]
[23 85]
[24 84]
[25 83]
[27 80]
[28 79]
[29 78]
[30 77]
[31 76]
[36 59]
[37 58]
[38 57]
[39 56]
[41 54]
[42 53]
[43 52]
[44 51]
[45 50]
[60 75]
[61 74]
[63 73]
[64 72]
[65 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
