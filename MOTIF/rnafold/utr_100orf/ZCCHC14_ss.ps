%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:18:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGAUGAGUUCCUGCUGCUGUUCACCAUGGCCUCCAACCACCCGGCCUUCAGCUUCCACCAGAAGCAGGUGCUGCGCCAGGAGCUCACGCAGAUCCAGAGCAGCCUGAACGGCGGCGGGGGCCACG\
) } def
/len { sequence length } bind def

/coor [
[67.61172485 460.74389648]
[54.58193588 449.89672852]
[61.39818192 434.37335205]
[62.13419724 419.39144897]
[59.29014587 412.48358154]
[63.07658386 404.05221558]
[64.18005371 389.09286499]
[61.50638580 382.11727905]
[65.49859619 373.78137207]
[66.96885681 358.85360718]
[68.43910980 343.92584229]
[69.90937042 328.99807739]
[71.37963104 314.07028198]
[72.84988403 299.14251709]
[74.32014465 284.21475220]
[75.79039764 269.28698730]
[77.26065826 254.35920715]
[78.73091125 239.43144226]
[80.20117188 224.50366211]
[81.67142487 209.57589722]
[83.14168549 194.64811707]
[84.61193848 179.72035217]
[86.08219910 164.79258728]
[87.55245209 149.86480713]
[89.02271271 134.93704224]
[79.77249146 130.52778625]
[72.10608673 123.72819519]
[66.62377930 115.07068634]
[63.75483704 105.23313904]
[63.72389221 94.98583984]
[49.60073471 89.93249512]
[35.47757339 84.87914276]
[21.35441208 79.82579803]
[10.13500977 90.23654175]
[-4.64042187 94.22969055]
[-19.57659531 90.88764191]
[-31.24129105 80.97837830]
[-36.95404434 66.77897644]
[-35.40210724 51.55235291]
[-26.94210243 38.79747391]
[-13.51807785 31.44531822]
[1.78522229 31.18535805]
[15.45121384 38.07733154]
[24.33955002 50.53750992]
[26.40775871 65.70263672]
[40.53091812 70.75598145]
[54.65407944 75.80933380]
[68.77724457 80.86267853]
[71.37622833 77.15755463]
[74.41238403 73.80130005]
[77.83934784 70.84518433]
[81.60476685 68.33435059]
[85.65114594 66.30715179]
[82.72478485 51.59537506]
[79.79843140 36.88359451]
[76.87207794 22.17181587]
[73.94572449 7.46003628]
[61.45893478 -2.61268210]
[61.69279861 -18.65402985]
[74.46791840 -28.35845947]
[89.98430634 -24.28156090]
[96.33912659 -9.55078411]
[88.65750122 4.53368139]
[91.58385468 19.24546051]
[94.51020813 33.95724106]
[97.43656921 48.66901779]
[100.36292267 63.38079834]
[107.53385162 64.16233063]
[114.41248322 66.33432007]
[120.73192596 69.81250000]
[126.24698639 74.46192932]
[130.74369812 80.10219574]
[144.73858643 74.70377350]
[158.73348999 69.30535126]
[172.72837830 63.90692139]
[186.72326660 58.50849533]
[189.28948975 44.90515518]
[198.19276428 34.44697571]
[211.00794983 29.81649780]
[224.32580566 32.13109970]
[234.65979004 40.67554474]
[248.78294373 35.62219620]
[262.90609741 30.56884766]
[276.83370972 24.99909019]
[290.54684448 18.92047119]
[299.76522827 5.35752916]
[316.09820557 6.82910299]
[322.74383545 21.82136345]
[312.86563110 34.91156006]
[296.62545776 32.63361740]
[282.91232300 38.71223831]
[281.30548096 41.96290588]
[277.98742676 44.55875397]
[273.30218506 45.67773056]
[267.95944214 44.69200897]
[253.83628845 49.74535751]
[239.71313477 54.79870605]
[235.64337158 70.65196991]
[222.82192993 81.08965302]
[206.14202881 81.87467194]
[192.12168884 72.50338745]
[178.12680054 77.90181732]
[164.13191223 83.30023956]
[150.13702393 88.69866180]
[136.14212036 94.09709167]
[129.14434814 122.17442322]
[103.95048523 136.40730286]
[102.48022461 151.33506775]
[101.00997162 166.26283264]
[99.53971100 181.19061279]
[98.06945801 196.11837769]
[96.59919739 211.04615784]
[95.12894440 225.97392273]
[93.65868378 240.90168762]
[92.18842316 255.82946777]
[90.71817017 270.75723267]
[89.24790955 285.68499756]
[87.77765656 300.61279297]
[86.30739594 315.54055786]
[84.83714294 330.46832275]
[83.36688232 345.39608765]
[81.89662933 360.32385254]
[80.42636871 375.25161743]
[79.13941193 390.19631958]
[78.03594208 405.15567017]
[77.11612701 420.12744141]
[76.38011169 435.10937500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 127]
[4 126]
[6 125]
[7 124]
[9 123]
[10 122]
[11 121]
[12 120]
[13 119]
[14 118]
[15 117]
[16 116]
[17 115]
[18 114]
[19 113]
[20 112]
[21 111]
[22 110]
[23 109]
[24 108]
[25 107]
[30 48]
[31 47]
[32 46]
[33 45]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
[72 105]
[73 104]
[74 103]
[75 102]
[76 101]
[81 97]
[82 96]
[83 95]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
