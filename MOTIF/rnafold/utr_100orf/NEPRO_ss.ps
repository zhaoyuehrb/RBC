%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:45:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCCGGUCGCUGGACGUGCUCUCGCGUAGCUCCGCCUUUCGUAAGUCCCCCCGCCUCGCAUGAUGGCUGCGGUGCCGCCGGGCCUGGAGCCGUGGAACCGUGUGAGAAUCCCUAAGGCGGGGAACCGCAGCGCAGUGACAGUGCAGAACCCCGGCGCGG\
) } def
/len { sequence length } bind def

/coor [
[120.11045837 445.62319946]
[122.67431641 426.41183472]
[122.96518707 411.41467285]
[112.38203430 395.26605225]
[122.93270874 378.12710571]
[122.64183807 363.12991333]
[122.35096741 348.13272095]
[122.06010437 333.13555908]
[107.72930908 314.96740723]
[118.92951965 293.90594482]
[116.89955139 279.04391479]
[114.86958313 264.18191528]
[112.83961487 249.31991577]
[110.80963898 234.45791626]
[96.96977234 228.95121765]
[87.68267059 217.17813110]
[85.52114105 202.23844910]
[91.16480255 188.13008118]
[103.19094849 178.67921448]
[101.16098022 163.81719971]
[99.13101196 148.95520020]
[89.74249268 137.39210510]
[95.54101562 122.67179108]
[93.51104736 107.80979156]
[89.36837006 100.84532928]
[91.58870697 92.64022064]
[89.84731293 77.74164581]
[88.10591888 62.84307098]
[74.74119568 55.18211365]
[68.52281189 41.28301239]
[71.64416504 26.56156158]
[82.70321655 16.61995506]
[80.96182251 1.72138035]
[79.22042847 -13.17719460]
[77.47903442 -28.07576942]
[75.73764038 -42.97434616]
[73.99624634 -57.87292099]
[72.25485229 -72.77149963]
[70.51345825 -87.67007446]
[68.77206421 -102.56864929]
[58.17157745 -103.66623688]
[47.94393539 -106.64331818]
[38.41941071 -111.40186310]
[29.90523720 -117.78636169]
[22.67568970 -125.58889008]
[16.96325874 -134.55587769]
[12.95117283 -144.39633179]
[10.76751423 -154.79133606]
[10.48114204 -165.40431213]
[12.09951019 -175.89198303]
[15.56849670 -185.91542053]
[20.77420235 -195.15107727]
[27.54669189 -203.30110168]
[35.66554642 -210.10310364]
[44.86703110 -215.33843994]
[54.85266495 -218.83940125]
[65.29889679 -220.49443054]
[66.17106628 -235.46905518]
[67.04324341 -250.44367981]
[67.91541290 -265.41830444]
[68.78758240 -280.39291382]
[69.65975952 -295.36755371]
[70.53192902 -310.34216309]
[71.40409851 -325.31677246]
[71.54954529 -340.31607056]
[70.96791077 -355.30480957]
[70.38628387 -370.29351807]
[69.80464935 -385.28222656]
[69.22302246 -400.27096558]
[68.64138794 -415.25967407]
[60.37480164 -428.74945068]
[67.61277771 -441.76718140]
[67.03115082 -456.75588989]
[66.44951630 -471.74459839]
[62.97542953 -480.24707031]
[66.00479126 -487.02902222]
[65.71392059 -502.02621460]
[65.42304993 -517.02337646]
[56.49097443 -530.77655029]
[64.17562103 -545.26373291]
[80.57168579 -545.58172607]
[88.81230164 -531.40344238]
[80.42022705 -517.31427002]
[80.71109772 -502.31707764]
[81.00196838 -487.31988525]
[81.43824005 -472.32623291]
[82.01986694 -457.33752441]
[82.60150146 -442.34881592]
[90.82648468 -429.93112183]
[83.63011169 -415.84130859]
[84.21173859 -400.85260010]
[84.79337311 -385.86386108]
[85.37500000 -370.87515259]
[85.95663452 -355.88644409]
[86.53826141 -340.89770508]
[98.65563965 -349.73904419]
[113.17436981 -345.96987915]
[119.46087646 -332.35079956]
[112.91090393 -318.85641479]
[98.32167053 -315.37011719]
[86.37872314 -324.44461060]
[85.50655365 -309.47000122]
[84.63437653 -294.49536133]
[83.76220703 -279.52075195]
[82.89003754 -264.54611206]
[82.01786041 -249.57150269]
[81.14569092 -234.59687805]
[80.27351379 -219.62225342]
[98.90138245 -212.76670837]
[114.20431519 -200.09333801]
[124.43153381 -183.03471375]
[128.40721130 -163.52609253]
[125.66562653 -143.78585815]
[116.50566101 -126.06328583]
[101.95831299 -112.38224030]
[83.67063904 -104.31004333]
[85.41203308 -89.41146851]
[87.15342712 -74.51289368]
[88.89482117 -59.61431503]
[90.63621521 -44.71574020]
[92.37760925 -29.81716347]
[94.11900330 -14.91858864]
[95.86039734 -0.02001333]
[97.60179138 14.87856197]
[110.65542603 22.00179863]
[117.08765411 35.60659409]
[114.24223328 50.56510544]
[103.00449371 61.10167694]
[104.74588776 76.00025177]
[106.48728180 90.89882660]
[108.37305450 105.77981567]
[110.40302277 120.64182281]
[119.93673706 133.26794434]
[113.99301910 146.92523193]
[116.02298737 161.78723145]
[118.05295563 176.64924622]
[132.17306519 182.52885437]
[141.39347839 194.60696411]
[143.31753540 209.57908630]
[137.52783203 223.41148376]
[125.67164612 232.42794800]
[127.70161438 247.28994751]
[129.73158264 262.15194702]
[131.76155090 277.01394653]
[133.79151917 291.87597656]
[140.25434875 294.54577637]
[145.51803589 299.06994629]
[149.07507324 304.96960449]
[150.59599304 311.63552856]
[149.95962524 318.39108276]
[147.26211548 324.56085205]
[142.80404663 329.53811646]
[137.05728149 332.84469604]
[137.34814453 347.84185791]
[137.63902283 362.83905029]
[137.92988586 377.83621216]
[146.23524475 384.95529175]
[149.16429138 395.26605225]
[145.97547913 405.26858521]
[137.96237183 411.70553589]
[137.67149353 426.70269775]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 161]
[3 160]
[5 156]
[6 155]
[7 154]
[8 153]
[10 145]
[11 144]
[12 143]
[13 142]
[14 141]
[19 136]
[20 135]
[21 134]
[23 132]
[24 131]
[26 130]
[27 129]
[28 128]
[32 124]
[33 123]
[34 122]
[35 121]
[36 120]
[37 119]
[38 118]
[39 117]
[40 116]
[57 108]
[58 107]
[59 106]
[60 105]
[61 104]
[62 103]
[63 102]
[64 101]
[65 95]
[66 94]
[67 93]
[68 92]
[69 91]
[70 90]
[72 88]
[73 87]
[74 86]
[76 85]
[77 84]
[78 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
