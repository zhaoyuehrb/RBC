%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGGGUGUCCGUGCCGGGUCCGGCGGCCGCUGCCGCCCCCGCAGCCGGCCGCGAGCCCUCCACGCCCGGCGGGGGCAGCGGAGGCGGAGGCGCCGUCG\
) } def
/len { sequence length } bind def

/coor [
[80.84833527 342.26687622]
[73.33389282 327.69067383]
[82.42642975 314.04306030]
[82.89292908 299.05032349]
[75.55518341 286.08856201]
[83.71792603 272.53570557]
[84.18442535 257.54296875]
[84.65092468 242.55021667]
[85.11742401 227.55746460]
[85.58392334 212.56472778]
[86.05041504 197.57197571]
[75.69558716 186.92710876]
[75.95510864 171.71569824]
[87.19062805 160.92677307]
[87.65712738 145.93403625]
[88.12362671 130.94128418]
[88.59012604 115.94853973]
[84.70300293 95.27313232]
[74.86407471 83.95079041]
[65.02514648 72.62844086]
[55.18621445 61.30609894]
[40.29399490 55.96453094]
[37.78610611 41.28257751]
[27.94717598 29.96023178]
[19.80620003 25.43064499]
[17.98500633 18.12936020]
[8.50296021 6.50650454]
[-0.97908622 -5.11635208]
[-10.46113300 -16.73920822]
[-19.94317818 -28.36206627]
[-29.42522621 -39.98492050]
[-39.08688354 -51.45890808]
[-48.92581177 -62.78125381]
[-58.76473999 -74.10359955]
[-68.60366821 -85.42594147]
[-84.23474121 -84.97484589]
[-96.46665955 -94.71723175]
[-99.52388763 -110.05305481]
[-91.96289062 -123.74120331]
[-77.35373688 -129.31854248]
[-62.59443283 -124.15164185]
[-54.65386200 -110.68013763]
[-57.28132629 -95.26486969]
[-47.44239426 -83.94252777]
[-37.60346603 -72.62018585]
[-27.76453781 -61.29784012]
[-20.87988472 -58.26023483]
[-17.80236816 -49.46696854]
[-8.32032204 -37.84411240]
[1.16172397 -26.22125435]
[10.64377022 -14.59839821]
[20.12581635 -2.97554207]
[29.60786247 8.64731503]
[39.26951981 20.12130165]
[49.10844803 31.44364738]
[63.29692078 35.97536850]
[66.50856018 51.46717072]
[76.34748840 62.78951263]
[86.18641663 74.11185455]
[96.02534485 85.43420410]
[110.23242188 90.24658966]
[124.92687988 87.23448181]
[139.62133789 84.22237396]
[148.89872742 69.49236298]
[165.61267090 66.01058197]
[179.44555664 75.43344879]
[194.03923035 71.96580505]
[208.63290405 68.49816132]
[223.22659302 65.03051758]
[232.83131409 52.18027115]
[248.87036133 51.82159042]
[259.03994751 64.22962189]
[255.53881836 79.88598633]
[241.05276489 86.78046417]
[226.69422913 79.62419128]
[212.10055542 83.09184265]
[197.50688171 86.55948639]
[182.91319275 90.02713013]
[177.69288635 101.91957092]
[166.37907410 108.68721008]
[153.04168701 107.63140106]
[142.63345337 98.91683960]
[127.93898773 101.92894745]
[113.24452209 104.94104767]
[103.58287048 116.41503906]
[103.11637115 131.40777588]
[102.64987183 146.40052795]
[102.18337250 161.39326477]
[112.72641754 172.85983276]
[112.03974915 188.05795288]
[101.04315948 198.03848267]
[100.57666779 213.03121948]
[100.11016846 228.02397156]
[99.64366913 243.01670837]
[99.17716980 258.00946045]
[98.71067047 273.00219727]
[106.01504517 287.03631592]
[97.88567352 299.51681519]
[97.41917419 314.50955200]
[105.64566040 328.69607544]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 99]
[4 98]
[6 96]
[7 95]
[8 94]
[9 93]
[10 92]
[11 91]
[14 88]
[15 87]
[16 86]
[17 85]
[18 60]
[19 59]
[20 58]
[21 57]
[23 55]
[24 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 46]
[33 45]
[34 44]
[35 43]
[61 84]
[62 83]
[63 82]
[66 78]
[67 77]
[68 76]
[69 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
