%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGACCAUGGAACUCAGCGUCCUCCUCUUCCUUGCACUCCUCACAGGACUCUUGCUACUCCUGGUUCAGCGCCACCCUAACACCCAUGACCGCCUCCCACCAGGGC\
) } def
/len { sequence length } bind def

/coor [
[84.53124237 128.00453186]
[70.58349609 116.33153534]
[60.28987122 127.24214172]
[49.99625015 138.15274048]
[39.70262527 149.06335449]
[29.40899849 159.97395325]
[29.69339561 175.54818726]
[19.09877205 186.46646118]
[4.24936390 186.64161682]
[-6.04426098 197.55221558]
[-7.01679325 213.56576538]
[-20.22536659 222.67143250]
[-35.53749466 217.88412476]
[-41.20702362 202.87625122]
[-32.88477325 189.16058350]
[-16.95486450 187.25859070]
[-6.66124105 176.34799194]
[-7.34980297 161.51351929]
[2.93397021 150.30197144]
[18.49839401 149.68032837]
[28.79201889 138.76972961]
[39.08564377 127.85912323]
[49.37926865 116.94851685]
[59.67289352 106.03791046]
[49.30184555 116.87494659]
[34.99662018 121.38721466]
[20.28459740 118.46208191]
[8.79346180 108.82083130]
[3.35669231 94.84078979]
[5.31488562 79.96915436]
[14.18519115 67.87297058]
[27.78037262 61.53490829]
[42.74813461 62.51780319]
[55.39773178 70.57929230]
[62.60973358 83.73040009]
[55.49072647 70.52738190]
[48.37172318 57.32435989]
[29.45497704 47.48182297]
[30.31943512 26.94849968]
[22.07680130 14.41618347]
[13.83416653 1.88386595]
[5.59153175 -10.64845085]
[-8.16385651 -20.55933571]
[-2.44816422 -36.52076340]
[14.47174644 -35.44700623]
[18.12384987 -18.89108658]
[26.36648369 -6.35876894]
[34.60911942 6.17354822]
[42.85175323 18.70586586]
[51.99253464 19.09028816]
[60.00529480 23.78737259]
[64.95217133 31.81229591]
[65.56653595 41.35883331]
[61.57474136 50.20535660]
[68.69374847 63.40837479]
[75.81275177 76.61139679]
[92.08081055 69.00286865]
[109.02162170 71.03280640]
[121.62654877 81.15328217]
[126.66701508 95.56587219]
[141.56558228 97.30726624]
[156.46415710 99.04866028]
[171.36273193 100.79004669]
[186.26130676 102.53144073]
[201.15988159 104.27283478]
[216.05845642 106.01422882]
[227.80345154 92.37200928]
[245.20845032 88.42781067]
[261.40289307 95.54925537]
[270.10629272 110.77281952]
[285.08093262 111.64498901]
[300.05554199 112.51716614]
[305.32855225 98.35076904]
[314.54425049 86.36900330]
[326.88314819 77.63729095]
[341.24810791 72.93203735]
[356.36178589 72.67163086]
[370.88031006 76.87923431]
[383.51269531 85.18070984]
[393.13565063 96.83789062]
[398.89355469 110.81422424]
[400.27438354 125.86695862]
[397.15536499 140.65760803]
[389.81387329 153.87098694]
[378.90264893 164.33218384]
[365.39193726 171.11099243]
[350.48312378 173.60464478]
[335.50183105 171.59141541]
[321.78027344 165.25030518]
[310.53848267 155.14517212]
[302.77612305 142.17456055]
[299.18338013 127.49178314]
[284.20874023 126.61961365]
[269.23413086 125.74744415]
[262.90789795 136.31147766]
[252.59559631 143.17250061]
[240.26367188 144.94705200]
[228.29623413 141.22889709]
[219.03413391 132.67980957]
[214.31707764 120.91280365]
[199.41848755 119.17140961]
[184.51991272 117.43001556]
[169.62133789 115.68862915]
[154.72276306 113.94723511]
[139.82418823 112.20584106]
[124.92562103 110.46444702]
[116.52718353 123.44693756]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 24]
[3 23]
[4 22]
[5 21]
[6 20]
[9 17]
[10 16]
[35 56]
[36 55]
[37 54]
[39 49]
[40 48]
[41 47]
[42 46]
[60 106]
[61 105]
[62 104]
[63 103]
[64 102]
[65 101]
[66 100]
[70 94]
[71 93]
[72 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
