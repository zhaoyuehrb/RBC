%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAACCAGACUUUGAAUAGCAGUGGGACCGUGGAGUCAGCCCUAAACUAUUCCAGAGGGAGCACAGUGCACACGGCCUACCUGGUGCUGAGCUCCCUGG\
) } def
/len { sequence length } bind def

/coor [
[100.17614746 190.67140198]
[87.45406342 200.04818726]
[71.84052277 197.60012817]
[62.59876633 184.77961731]
[65.21176147 169.19284058]
[78.12926483 160.08714294]
[80.45273590 145.26818848]
[82.77620697 130.44923401]
[85.09968567 115.63027954]
[86.50463104 107.15589905]
[91.16696930 101.47810364]
[78.58267975 93.31504059]
[65.99838257 85.15197754]
[53.41409302 76.98891449]
[40.82980347 68.82585144]
[28.12008095 60.85948563]
[15.28800583 53.09173965]
[2.45593119 45.32399750]
[-10.37614346 37.55625153]
[-23.20821953 29.78850746]
[-36.65927505 37.06973648]
[-51.84858322 36.64338303]
[-64.69966888 28.72404671]
[-71.81374359 15.52382374]
[-71.36837006 0.63533086]
[-84.20044708 -7.13241339]
[-97.03252411 -14.90015793]
[-109.51179504 -6.17160177]
[-124.46363068 -3.27981973]
[-139.29754639 -6.72583008]
[-151.44345093 -15.91259098]
[-158.79702759 -29.24844170]
[-160.08419800 -44.42286301]
[-155.08197021 -58.80679703]
[-144.65699768 -69.90813446]
[-130.61546326 -75.80351257]
[-115.39017487 -75.47151184]
[-101.61898041 -68.96965790]
[-91.68782806 -57.42443466]
[-87.31735992 -42.83612061]
[-89.26477814 -27.73223305]
[-76.43270111 -19.96448898]
[-63.60062790 -12.19674397]
[-50.61575699 -19.49460411]
[-35.62167358 -19.31191444]
[-22.64646912 -11.59761047]
[-15.22598743 1.66260266]
[-15.44047451 16.95643234]
[-2.60839939 24.72417641]
[10.22367573 32.49192047]
[23.05574989 40.25966644]
[35.88782501 48.02740860]
[43.37178802 48.81215286]
[48.99286270 56.24156189]
[61.57715607 64.40462494]
[74.16144562 72.56768799]
[86.74574280 80.73075104]
[99.33003235 88.89381409]
[113.46054840 93.92655945]
[128.37174988 95.55634308]
[143.28294373 97.18612671]
[158.19413757 98.81591034]
[173.10533142 100.44569397]
[187.66448975 94.25361633]
[199.47573853 103.32795715]
[214.38693237 104.95773315]
[229.29812622 106.58751678]
[244.20932007 108.21730042]
[259.12051392 109.84708405]
[274.03170776 111.47686768]
[283.08364868 109.27342224]
[289.37872314 113.39624786]
[304.23202515 115.48897552]
[313.34808350 113.56811523]
[319.51190186 117.88471985]
[334.29293823 120.43836975]
[349.48840332 114.27157593]
[362.25872803 124.55995941]
[359.46688843 140.71971130]
[343.98486328 146.12707520]
[331.73925781 135.21940613]
[316.95825195 132.66574097]
[302.13928223 130.34226990]
[287.28598022 128.24954224]
[272.40194702 126.38806152]
[257.49075317 124.75827789]
[242.57954407 123.12850189]
[227.66835022 121.49871826]
[212.75715637 119.86893463]
[197.84594727 118.23915100]
[184.35334778 124.54779816]
[171.47555542 115.35688782]
[156.56436157 113.72710419]
[141.65315247 112.09732056]
[126.74195862 110.46754456]
[111.83076477 108.83776093]
[99.91864014 117.95375061]
[97.59516907 132.77270508]
[95.27169037 147.59165955]
[92.94821930 162.41061401]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 100]
[7 99]
[8 98]
[9 97]
[11 58]
[12 57]
[13 56]
[14 55]
[15 54]
[16 52]
[17 51]
[18 50]
[19 49]
[20 48]
[25 43]
[26 42]
[27 41]
[59 96]
[60 95]
[61 94]
[62 93]
[63 92]
[65 90]
[66 89]
[67 88]
[68 87]
[69 86]
[70 85]
[72 84]
[73 83]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
