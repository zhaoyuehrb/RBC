%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:14:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACUCUCUUGUUACAGCAAACACCAAAUUUUGCUUUGAUCUUUUUCAAGAGAUAGGCAAAGAUGAUCGUCAUAAAAACAUAUUUUUCUCUCCCCUGA\
) } def
/len { sequence length } bind def

/coor [
[109.75123596 148.20761108]
[95.81639099 153.75918579]
[81.22270966 150.29154968]
[71.27453613 139.06507874]
[69.58769989 124.16022491]
[76.77532196 110.99443054]
[90.22496796 104.35303497]
[76.17443085 99.10114288]
[62.12388992 93.84924316]
[48.07335281 88.59735107]
[34.02281570 83.34545135]
[19.97228050 78.09355164]
[5.92174435 72.84165955]
[-8.61624050 69.14747620]
[-23.46953964 67.05474091]
[-38.32283783 64.96201324]
[-53.06751633 70.69830322]
[-64.59084320 61.26102829]
[-79.44413757 59.16829681]
[-94.29743958 57.07556915]
[-109.15073395 54.98283768]
[-124.00403595 52.89011002]
[-138.85733032 50.79737854]
[-149.54301453 62.04886246]
[-164.80744934 64.83750916]
[-178.78115845 58.09102249]
[-186.09097290 44.40356827]
[-183.92610168 29.03824997]
[-173.11898804 17.90334892]
[-157.82519531 15.28045750]
[-143.92549133 22.17813301]
[-136.76460266 35.94408035]
[-121.91130829 38.03680801]
[-107.05800629 40.12953949]
[-92.20471191 42.22227097]
[-77.35140991 44.31499863]
[-62.49811172 46.40773010]
[-48.81584167 40.52175140]
[-36.23010635 50.10871506]
[-21.37681007 52.20144653]
[-6.52351046 54.29417419]
[-14.53029823 41.60987854]
[-12.76897240 26.71364784]
[-2.02476263 16.24646378]
[12.91238785 14.87476826]
[25.38325119 23.21008682]
[29.82811546 37.53639984]
[24.26538467 51.46679688]
[11.17364120 58.79112244]
[25.22417831 64.04301453]
[39.27471542 69.29491425]
[53.32525253 74.54681396]
[67.37578583 79.79870605]
[81.42632294 85.05060577]
[95.47686005 90.30249786]
[110.07054138 93.77014923]
[124.98173523 95.39992523]
[139.89292908 97.02970886]
[154.80413818 98.65949249]
[164.35507202 89.01301575]
[177.53605652 86.71903229]
[189.43124390 92.40301514]
[195.73696899 103.75728607]
[210.59027100 105.85002136]
[225.44357300 107.94274902]
[234.55964661 106.02188873]
[240.72344971 110.33849335]
[255.50448608 112.89214325]
[262.15313721 99.32851410]
[272.35479736 88.18837738]
[285.28250122 80.37482452]
[299.88821411 76.52125549]
[314.98791504 76.94006348]
[329.35757446 81.59730530]
[341.83227539 90.11542511]
[351.40075684 101.80390930]
[357.28735352 115.71522522]
[359.01486206 130.72163391]
[356.44326782 145.60664368]
[349.78097534 159.16358948]
[339.56811523 170.29347229]
[326.63259888 178.09402466]
[312.02301025 181.93292236]
[296.92373657 181.49894714]
[282.55877686 176.82727051]
[270.09262085 168.29661560]
[260.53588867 156.59852600]
[254.66326904 142.68132019]
[252.95083618 127.67317200]
[238.16979980 125.11952209]
[223.35084534 122.79605103]
[208.49754333 120.70331573]
[193.64424133 118.61058807]
[180.74955750 129.28140259]
[163.78390503 127.37215424]
[153.17434692 113.57069397]
[138.26315308 111.94091034]
[123.35195160 110.31112671]
[108.44075775 108.68134308]
[117.46533203 120.66287231]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 55]
[8 54]
[9 53]
[10 52]
[11 51]
[12 50]
[13 49]
[14 41]
[15 40]
[16 39]
[18 37]
[19 36]
[20 35]
[21 34]
[22 33]
[23 32]
[56 99]
[57 98]
[58 97]
[59 96]
[63 93]
[64 92]
[65 91]
[67 90]
[68 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
