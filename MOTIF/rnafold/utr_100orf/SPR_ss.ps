%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:20:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCUCCUGCCUGGUCUCGGGUGCCAGCGCCGCCGGCGGAGAACAGGAGCAUGGAGGGCGGGCUGGGGCGUGCUGUGUGCUUGCUGACCGGGGCCUCCCGCGGCUUCGGCCGGACGCUGGCCCCGCUCCUGGCCUCGCUGCUGUCGCCCG\
) } def
/len { sequence length } bind def

/coor [
[-42.42896652 464.03109741]
[-56.02235031 470.01068115]
[-61.21776581 484.08221436]
[-66.41318512 498.15371704]
[-57.68404770 510.98266602]
[-58.19634247 526.49127197]
[-67.75308228 538.71618652]
[-82.67950439 542.95666504]
[-97.23609161 537.58215332]
[-105.82553864 524.65924072]
[-105.14503479 509.15713501]
[-95.45624542 497.03662109]
[-80.48470306 492.95831299]
[-75.28928375 478.88677979]
[-70.09387207 464.81527710]
[-76.53997040 451.43679810]
[-71.47153473 437.09225464]
[-57.39525604 430.42172241]
[-52.19984055 416.35018921]
[-47.00442505 402.27868652]
[-41.80900955 388.20715332]
[-36.61359406 374.13565063]
[-31.41817856 360.06411743]
[-34.26831818 345.44476318]
[-22.23010445 335.17868042]
[-17.03468895 321.10717773]
[-11.83927441 307.03564453]
[-6.64385843 292.96414185]
[-16.39151001 281.56311035]
[-31.09947205 284.50860596]
[-45.80743408 287.45407104]
[-60.15089798 296.49295044]
[-72.80720520 285.21224976]
[-65.47096252 269.92776489]
[-48.75291443 272.74612427]
[-34.04495621 269.80062866]
[-19.33699226 266.85516357]
[-5.75705624 245.52784729]
[16.61735916 242.96205139]
[23.79986763 229.79347229]
[30.98237801 216.62489319]
[26.54603577 202.45257568]
[33.64253235 188.99543762]
[48.53783798 184.43829346]
[55.72034454 171.26971436]
[62.90285492 158.10112000]
[70.08536530 144.93254089]
[77.26787567 131.76396179]
[84.45037842 118.59537506]
[91.63288879 105.42679596]
[86.10016632 101.45096588]
[83.22168732 93.54321289]
[85.30821991 83.65116882]
[82.51589203 68.91336060]
[69.73928833 60.00291443]
[67.11741638 45.01690674]
[75.69090271 32.89127731]
[72.89858246 18.15346909]
[70.10625458 3.41566396]
[67.31393433 -11.32214165]
[64.52160645 -26.05994797]
[61.72928238 -40.79775238]
[58.93695831 -55.53556061]
[55.99147415 -70.24352264]
[52.89315414 -84.92004395]
[42.47221756 -96.82444000]
[47.41378403 -110.87542725]
[44.31546021 -125.55195618]
[32.96256256 -137.38595581]
[37.79389191 -153.05728149]
[53.83939362 -156.44461060]
[64.59282684 -144.06333923]
[58.99198532 -128.65026855]
[62.09030914 -113.97374725]
[72.28963470 -103.11911774]
[67.56967926 -88.01837158]
[70.66799927 -73.34184265]
[75.15591431 -67.40852356]
[73.67476654 -58.32788467]
[76.46708679 -43.59008026]
[79.25941467 -28.85227203]
[82.05173492 -14.11446667]
[84.84406281 0.62333941]
[87.63638306 15.36114502]
[90.42871094 30.09895134]
[102.84357452 38.24798584]
[105.88533020 53.15443802]
[97.25370026 66.12104034]
[100.04602051 80.85884094]
[112.74095154 88.84876251]
[127.23654938 84.99160004]
[141.73214722 81.13443756]
[156.22773743 77.27728271]
[170.72334290 73.42012024]
[185.21893311 69.56296539]
[188.12922668 53.58565903]
[197.66896057 40.51448822]
[211.89546204 32.92550659]
[227.94880676 32.28704834]
[242.62661743 38.67591095]
[253.02290344 50.77208710]
[267.43511963 46.61420059]
[281.84732056 42.45631409]
[296.25955200 38.29842758]
[307.23623657 26.11464310]
[323.21752930 29.79301834]
[327.76324463 45.54955292]
[316.19714355 57.17527771]
[300.41744995 52.71064377]
[286.00521851 56.86853027]
[271.59301758 61.02641678]
[257.18078613 65.18430328]
[255.52812195 78.99262238]
[248.70541382 91.16062927]
[237.71832275 99.82701874]
[224.21234131 103.65163422]
[210.22644043 102.02262878]
[197.88519287 95.15408325]
[189.07609558 84.05855560]
[174.58050537 87.91571808]
[160.08489990 91.77288055]
[145.58930969 95.63003540]
[131.09370422 99.48719788]
[116.59811401 103.34435272]
[104.80147552 112.60930634]
[97.61896515 125.77788544]
[90.43645477 138.94647217]
[83.25394440 152.11505127]
[76.07143402 165.28363037]
[68.88893127 178.45222473]
[61.70642090 191.62080383]
[65.93988800 206.61131287]
[58.46821213 219.86381531]
[44.15095901 223.80740356]
[36.96845245 236.97598267]
[29.78594208 250.14456177]
[38.00556183 263.44982910]
[36.80511856 280.04290771]
[25.48358727 293.56253052]
[7.42766094 298.15954590]
[2.23224521 312.23107910]
[-2.96317029 326.30258179]
[-8.15858555 340.37411499]
[-5.68005657 355.99996948]
[-17.34665871 365.25952148]
[-22.54207420 379.33105469]
[-27.73748970 393.40258789]
[-32.93290710 407.47409058]
[-38.12832260 421.54562378]
[-43.32373810 435.61712646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[18 150]
[19 149]
[20 148]
[21 147]
[22 146]
[23 145]
[25 143]
[26 142]
[27 141]
[28 140]
[29 37]
[30 36]
[31 35]
[39 136]
[40 135]
[41 134]
[44 131]
[45 130]
[46 129]
[47 128]
[48 127]
[49 126]
[50 125]
[53 89]
[54 88]
[57 85]
[58 84]
[59 83]
[60 82]
[61 81]
[62 80]
[63 79]
[64 77]
[65 76]
[67 74]
[68 73]
[90 124]
[91 123]
[92 122]
[93 121]
[94 120]
[95 119]
[101 112]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
