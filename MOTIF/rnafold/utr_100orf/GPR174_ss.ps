%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:46:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCAUUAGGCAAAGAUAGUUUCUCUAGAGAGAAUCAUGCCUGCUAAUUACACGUGUACCAGGCCAGAUGGAGACAAUACAGAUUUUCGAUACUUUAUUUAUGCAGUGACAUACACUGUCAUUCUUGUGCCAGGUC\
) } def
/len { sequence length } bind def

/coor [
[77.86866760 314.38275146]
[83.91500854 298.54360962]
[83.91500854 283.54360962]
[83.91500854 268.54360962]
[76.57975006 263.27441406]
[72.47564697 255.07398987]
[72.65995789 245.76725769]
[77.21903992 237.49314880]
[85.21913910 232.21301270]
[86.25023651 217.24848938]
[87.28133392 202.28396606]
[88.31243134 187.31945801]
[89.17188263 172.34410095]
[89.85958099 157.35986328]
[90.54727936 142.37564087]
[91.23497772 127.39141083]
[85.28047180 122.83139038]
[76.16024017 134.74026489]
[64.25150299 125.61985779]
[73.37145233 113.71134186]
[67.41693878 109.15132141]
[53.12998581 113.72109985]
[38.84302902 118.29087830]
[24.55607224 122.86065674]
[10.26911736 127.43043518]
[-0.35338664 139.92420959]
[-16.43365669 136.70599365]
[-21.42968750 121.08639526]
[-10.20199394 109.13352966]
[5.69933748 113.14347839]
[19.98629379 108.57369995]
[34.27325058 104.00392151]
[48.56020737 99.43414307]
[62.84716034 94.86436462]
[64.63560486 87.58071899]
[50.06837463 84.00360870]
[53.64571381 69.43643188]
[68.21249390 73.01343536]
[70.00093842 65.72978973]
[59.45531845 55.06255722]
[48.90969467 44.39532089]
[38.36407471 33.72808838]
[27.81845093 23.06085587]
[19.41481400 24.60071945]
[11.19128227 22.66222382]
[4.51151752 17.64476585]
[0.45180285 10.45166874]
[-0.37209004 2.32831573]
[2.10274363 -5.35325432]
[-7.42146254 -16.94158936]
[-16.94566917 -28.52992439]
[-32.47974014 -33.78584290]
[-35.42924881 -49.91756439]
[-22.75999451 -60.33015442]
[-7.50501919 -54.31203461]
[-5.35733366 -38.05413055]
[4.16687202 -26.46579552]
[13.69107819 -14.87746048]
[34.62619400 -9.51232147]
[38.48568344 12.51523495]
[49.03130722 23.18246841]
[59.57692719 33.84970093]
[70.12255096 44.51693344]
[80.66817474 55.18416595]
[101.33485413 65.73020172]
[109.22539520 82.49860382]
[118.48138428 70.69493103]
[127.73737335 58.89126205]
[136.99336243 47.08758926]
[146.24934387 35.28391647]
[155.50534058 23.48024559]
[164.76132202 11.67657471]
[174.01731873 -0.12709691]
[165.38722229 -12.53728962]
[160.80009460 -26.94040298]
[160.66381836 -42.05572128]
[164.99050903 -56.53919983]
[173.39543152 -69.10298157]
[185.13124084 -78.62989807]
[199.15440369 -84.27282715]
[214.21795654 -85.52999878]
[228.98249817 -82.28962708]
[242.13514709 -74.83985138]
[252.50637817 -63.84308624]
[259.17401123 -50.27717209]
[261.54516602 -35.34836960]
[259.40896606 -20.38414383]
[252.95538330 -6.71509933]
[242.75827026 4.44331884]
[229.72434998 12.09891224]
[215.01257324 15.57095146]
[199.93110657 14.55070496]
[185.82098389 9.12889194]
[176.56500244 20.93256378]
[167.30900574 32.73623657]
[158.05302429 44.53990555]
[148.79702759 56.34357834]
[139.54104614 68.14724731]
[130.28504944 79.95092010]
[121.02906799 91.75459290]
[124.77273560 106.27991486]
[138.58105469 112.13912201]
[152.38937378 117.99832916]
[166.26396179 123.69882965]
[180.20300293 129.23988342]
[194.14204407 134.78094482]
[208.08106995 140.32199097]
[222.02011108 145.86303711]
[237.26239014 140.85780334]
[250.59951782 149.77412415]
[251.80038452 165.77217102]
[239.94378662 176.57960510]
[224.12510681 173.90589905]
[216.47906494 159.80207825]
[202.54002380 154.26103210]
[188.60098267 148.71997070]
[174.66195679 143.17892456]
[160.72291565 137.63786316]
[153.27983093 138.09417725]
[146.53016663 131.80664062]
[132.72184753 125.94744110]
[118.91352844 120.08823395]
[106.21920776 128.07911682]
[105.53150940 143.06333923]
[104.84381104 158.04756165]
[104.15611267 173.03179932]
[106.90683746 181.83659363]
[103.27694702 188.35055542]
[102.24584961 203.31506348]
[101.21475983 218.27958679]
[100.18366241 233.24411011]
[110.84901428 251.76373291]
[98.91500854 268.54360962]
[98.91500854 283.54360962]
[98.91500854 298.54360962]
[104.96134949 314.38275146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 135]
[3 134]
[4 133]
[9 131]
[10 130]
[11 129]
[12 128]
[13 126]
[14 125]
[15 124]
[16 123]
[21 34]
[22 33]
[23 32]
[24 31]
[25 30]
[39 64]
[40 63]
[41 62]
[42 61]
[43 60]
[49 58]
[50 57]
[51 56]
[66 100]
[67 99]
[68 98]
[69 97]
[70 96]
[71 95]
[72 94]
[73 93]
[101 122]
[102 121]
[103 120]
[104 118]
[105 117]
[106 116]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
