%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:18:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACACCUCUGCCCUCACCAUGAGCCUCUGGCAGCCCCUGGUCCUGGUGCUCCUGGUGCUGGGCUGCUGCUUUGCUGCCCCCAGACAGCGCCAGUCCACCCUUGUGCUCUUCCCUGGAG\
) } def
/len { sequence length } bind def

/coor [
[99.08523560 152.88645935]
[92.72024536 152.39103699]
[86.46130371 151.13237000]
[80.39959717 149.12879944]
[74.62342834 146.40953064]
[69.21694183 143.01416016]
[64.25890350 138.99217224]
[59.82154846 134.40213013]
[55.96950531 129.31092834]
[42.43072891 135.76860046]
[28.89194870 142.22625732]
[15.35316944 148.68392944]
[1.81438994 155.14160156]
[-11.27305031 162.47091675]
[-23.85310936 170.64050293]
[-36.43316650 178.81008911]
[-49.01322556 186.97967529]
[-59.00396729 200.67716980]
[-74.93186951 194.86871338]
[-73.75969696 177.95533752]
[-57.18281174 174.39961243]
[-44.60275269 166.23002625]
[-32.02269363 158.06044006]
[-19.44263649 149.89085388]
[-33.06620407 143.61404419]
[-36.91257858 129.11558533]
[-28.19204330 116.91098022]
[-13.22946835 115.85204315]
[-2.87697387 126.70681000]
[-4.64327669 141.60281372]
[8.89550304 135.14515686]
[22.43428230 128.68748474]
[35.97306061 122.22982025]
[49.51184082 115.77215576]
[47.56916428 93.01268005]
[55.40437698 71.55627441]
[71.55627441 55.40437698]
[93.01268005 47.56916428]
[115.77215576 49.51184082]
[122.22982025 35.97306061]
[128.68748474 22.43428230]
[125.11939240 9.95569706]
[130.87283325 -1.22726679]
[142.34202576 -5.30856514]
[149.15188599 -18.67366409]
[155.96174622 -32.03876114]
[162.77160645 -45.40385818]
[169.58145142 -58.76895523]
[176.39131165 -72.13405609]
[183.20117188 -85.49915314]
[190.01103210 -98.86425018]
[188.57264709 -117.16464996]
[203.53486633 -126.23371124]
[209.99253845 -139.77249146]
[216.45021057 -153.31126404]
[222.90786743 -166.85005188]
[222.35656738 -171.44508362]
[223.27886963 -175.52973938]
[225.31170654 -178.68585205]
[227.98986816 -180.66595459]
[230.81442261 -181.41212463]
[238.65190125 -194.20172119]
[246.48937988 -206.99131775]
[254.32685852 -219.78092957]
[254.94030762 -235.59024048]
[268.18740845 -242.39929199]
[276.02490234 -255.18888855]
[272.09222412 -270.49606323]
[280.20700073 -284.05798340]
[295.55490112 -287.82861328]
[309.03027344 -279.57089233]
[312.63842773 -264.18399048]
[304.23867798 -250.79667664]
[288.81448364 -247.35140991]
[280.97702026 -234.56181335]
[280.92416382 -219.66729736]
[267.11645508 -211.94345093]
[259.27899170 -199.15383911]
[251.44151306 -186.36424255]
[243.60403442 -173.57464600]
[236.44665527 -160.39237976]
[229.98898315 -146.85360718]
[223.53131104 -133.31481934]
[217.07365417 -119.77604675]
[220.81774902 -108.19238281]
[215.44816589 -96.82012177]
[203.37612915 -92.05438995]
[196.56626892 -78.68929291]
[189.75640869 -65.32419586]
[182.94654846 -51.95909882]
[176.13670349 -38.59400177]
[169.32684326 -25.22890282]
[162.51698303 -11.86380577]
[155.70712280 1.50129211]
[157.62057495 18.89251709]
[142.22625732 28.89194870]
[135.76860046 42.43072891]
[129.31092834 55.96950531]
[138.47825623 63.70621872]
[145.66658020 73.30958557]
[150.50619507 84.28569031]
[152.74818420 96.07000732]
[152.27722168 108.05644989]
[149.11756897 119.62854004]
[143.43170166 130.19110107]
[135.51206970 139.20086670]
[125.76598358 146.19447327]
[131.14151001 160.19818115]
[136.51702881 174.20188904]
[141.89254761 188.20559692]
[155.90478516 196.01818848]
[158.39088440 211.86744690]
[147.44374084 223.59515381]
[131.46104431 222.20483398]
[122.70336151 208.76301575]
[127.88883209 193.58111572]
[122.51331329 179.57740784]
[117.13779449 165.57369995]
[111.76227570 151.56999207]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 34]
[10 33]
[11 32]
[12 31]
[13 30]
[14 24]
[15 23]
[16 22]
[17 21]
[39 98]
[40 97]
[41 96]
[44 94]
[45 93]
[46 92]
[47 91]
[48 90]
[49 89]
[50 88]
[51 87]
[53 84]
[54 83]
[55 82]
[56 81]
[61 80]
[62 79]
[63 78]
[64 77]
[66 75]
[67 74]
[107 119]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
