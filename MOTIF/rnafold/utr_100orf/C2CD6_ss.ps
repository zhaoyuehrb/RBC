%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:56:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCAGUAGCGGGCCGUCGGUUGGGCGCAGACAGGCCGCAGAAGAUGGAGAGAUGGAGCCACCCCAAGAGACAAAUAGGCCUUUCAGCACACUUGAUAACCGCAGCGGGCAGGUCCAAGUCCUGUCCGCCACCCCGCUAUUGCAGAGGAAUC\
) } def
/len { sequence length } bind def

/coor [
[83.48455811 311.82989502]
[91.23056030 298.67837524]
[103.92046356 290.19726562]
[101.77188110 275.35195923]
[99.62330627 260.50662231]
[97.47472382 245.66130066]
[95.32614899 230.81597900]
[93.17756653 215.97065735]
[91.02898407 201.12533569]
[88.88040924 186.28001404]
[86.73182678 171.43469238]
[84.58325195 156.58937073]
[82.43466949 141.74404907]
[69.76315308 133.71705627]
[55.42309189 138.11735535]
[41.08303070 142.51765442]
[26.74297142 146.91795349]
[12.40290928 151.31825256]
[4.95555067 164.99943542]
[-9.64999485 169.25767517]
[-22.64701080 162.07345581]
[-36.98707199 166.47375488]
[-51.32713318 170.87405396]
[-65.62126160 175.42134094]
[-79.86795807 180.11514282]
[-94.11464691 184.80894470]
[-98.72061920 199.62664795]
[-111.17666626 208.88011169]
[-126.69319153 209.01116943]
[-139.30377197 199.96942139]
[-144.15936279 185.23162842]
[-139.39292908 170.46475220]
[-126.83722687 161.34696960]
[-111.32019806 161.38424683]
[-98.80844879 170.56224060]
[-84.56175232 165.86845398]
[-70.31506348 161.17465210]
[-64.91296387 156.06294250]
[-55.72743225 156.53398132]
[-41.38737106 152.13368225]
[-27.04730988 147.73338318]
[-20.31683540 134.49569702]
[-5.83665705 129.82888794]
[8.00260925 136.97819519]
[22.34267044 132.57789612]
[36.68273163 128.17759705]
[51.02279282 123.77729034]
[65.36285400 119.37699127]
[61.81298065 104.84160614]
[63.93611145 90.49015808]
[71.08193970 78.38983154]
[81.90207672 70.15386200]
[77.06226349 55.95610809]
[65.28608704 45.39048767]
[68.50305939 30.84743500]
[63.66324615 16.64968300]
[57.89775085 9.48345184]
[58.87306976 2.11046386]
[54.32577896 -12.18366623]
[49.77848816 -26.47779655]
[34.63996887 -26.80021095]
[20.42724419 -32.02296829]
[8.68200493 -41.57954025]
[0.67828637 -54.43330383]
[-2.71572804 -69.18997192]
[-1.13188100 -84.24886322]
[5.25802374 -97.97649384]
[15.76085663 -108.88379669]
[29.23735046 -115.78762817]
[44.22567368 -117.93910980]
[59.10000610 -115.10486603]
[72.24689484 -107.59233093]
[82.24025726 -96.21642303]
[87.99609375 -82.21109772]
[88.89004517 -67.09555817]
[84.82515717 -52.50941849]
[76.24234772 -40.03488159]
[64.07261658 -31.02508545]
[68.61991119 -16.73095703]
[73.16719818 -2.43682623]
[77.86100006 11.80986595]
[82.70081329 26.00761795]
[94.13081360 35.55772018]
[91.26000977 51.11629105]
[96.09983063 65.31404114]
[107.46723938 65.90355682]
[118.04052734 70.11913300]
[128.37142944 59.24381638]
[122.51182556 45.18732452]
[122.88259125 29.96292305]
[129.41947937 16.20833015]
[140.98995972 6.30660963]
[155.58935547 1.97329783]
[170.68823242 3.95916581]
[183.67062378 11.92014980]
[192.28726196 24.47696114]
[195.04524231 39.45405960]
[191.46675110 54.25656509]
[182.17176819 66.31986237]
[168.77070618 73.55390167]
[153.58537292 74.70535278]
[139.24673462 69.57472229]
[128.91583252 80.45003510]
[132.67524719 87.72583771]
[134.63584900 95.67735291]
[149.57185364 97.06137848]
[164.50787354 98.44540405]
[179.44387817 99.82942963]
[194.37989807 101.21345520]
[209.31590271 102.59748077]
[224.25192261 103.98150635]
[239.18792725 105.36553192]
[254.12394714 106.74955750]
[265.10998535 95.62116241]
[280.68371582 94.20948792]
[293.49169922 103.18106842]
[297.48641968 118.29981232]
[290.78164673 132.42709351]
[276.54321289 138.89247131]
[261.49404907 134.64315796]
[252.73991394 121.68556976]
[237.80390930 120.30154419]
[222.86788940 118.91751862]
[207.93188477 117.53349304]
[192.99586487 116.14946747]
[178.05986023 114.76544189]
[163.12384033 113.38141632]
[148.18783569 111.99739075]
[133.25181580 110.61336517]
[128.92233276 121.60443878]
[120.95525360 130.85317993]
[110.04514313 137.15892029]
[97.27999115 139.59547424]
[99.42857361 154.44079590]
[101.57714844 169.28611755]
[103.72573090 184.13143921]
[105.87431335 198.97676086]
[108.02288818 213.82208252]
[110.17147064 228.66740417]
[112.32004547 243.51272583]
[114.46862793 258.35806274]
[116.61720276 273.20336914]
[118.76578522 288.04870605]
[133.33955383 292.58389282]
[144.49645996 302.99957275]
[150.02127075 317.22769165]
[148.81706238 332.44323730]
[141.12292480 345.62515259]
[128.46652222 354.15615845]
[113.36078644 356.34240723]
[98.80499268 351.74984741]
[87.68919373 341.29031372]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 143]
[4 142]
[5 141]
[6 140]
[7 139]
[8 138]
[9 137]
[10 136]
[11 135]
[12 134]
[13 133]
[14 48]
[15 47]
[16 46]
[17 45]
[18 44]
[21 41]
[22 40]
[23 39]
[24 37]
[25 36]
[26 35]
[52 85]
[53 84]
[55 82]
[56 81]
[58 80]
[59 79]
[60 78]
[87 103]
[88 102]
[105 129]
[106 128]
[107 127]
[108 126]
[109 125]
[110 124]
[111 123]
[112 122]
[113 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
