%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:15:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCUCUCUGCACCUGGACAUCUCAACUCCUGCCAAGAUGUCCUGCCAGCAGAACCAGAAGCAGUGCCAACCCCCACCCAAGUGCCCCUCACCCAAGUGUCCCCCAAAGAACCCAGUACAGUGUCUGCCUCCAGCUU\
) } def
/len { sequence length } bind def

/coor [
[-111.60516357 310.59616089]
[-122.56356812 300.35342407]
[-129.71626282 287.16864014]
[-132.32766724 272.39770508]
[-130.12922668 257.55969238]
[-123.34702301 244.18052673]
[-112.67907715 233.63653564]
[-127.36533356 236.68838501]
[-142.05160522 239.74021912]
[-156.73785400 242.79205322]
[-171.42411804 245.84390259]
[-176.41749573 261.56359863]
[-188.57040405 272.57586670]
[-204.52148438 275.96191406]
[-219.92225647 270.89486694]
[-230.62254333 258.83932495]
[-245.23553467 262.22467041]
[-259.84851074 265.61001587]
[-274.46151733 268.99539185]
[-289.07449341 272.38073730]
[-303.68746948 275.76608276]
[-318.30047607 279.15145874]
[-332.91345215 282.53680420]
[-336.21112061 297.43942261]
[-345.65496826 309.43011475]
[-359.36990356 316.12808228]
[-374.63284302 316.20349121]
[-388.41329956 309.64132690]
[-397.97515869 297.74453735]
[-401.41989136 282.87521362]
[-398.06356812 267.98568726]
[-388.57257080 256.03228760]
[-374.83135986 249.38836670]
[-359.56823730 249.37307739]
[-345.81372070 255.98945618]
[-336.29879761 267.92382812]
[-321.68582153 264.53845215]
[-307.07284546 261.15310669]
[-292.45983887 257.76776123]
[-277.84686279 254.38240051]
[-263.23388672 250.99703979]
[-248.62089539 247.61167908]
[-234.00790405 244.22633362]
[-230.87599182 230.88606262]
[-222.24609375 220.15672302]
[-209.76771545 214.18052673]
[-195.86572266 214.18237305]
[-183.26927185 220.21920776]
[-174.47596741 231.15763855]
[-159.78970337 228.10578918]
[-145.10343933 225.05395508]
[-130.41717529 222.00212097]
[-115.73091888 218.95027161]
[-112.22475433 214.50929260]
[-106.45004272 212.00845337]
[-99.54157257 212.56602478]
[-86.72528076 204.77226257]
[-73.90898895 196.97850037]
[-61.09269714 189.18475342]
[-54.23844528 175.96096802]
[-38.42713547 175.40151978]
[-25.61084366 167.60775757]
[-18.75659180 154.38397217]
[-2.94527960 153.82452393]
[9.87101173 146.03076172]
[22.68730164 138.23699951]
[35.50359344 130.44323730]
[29.40716362 110.16016388]
[29.53610039 88.98109436]
[35.87903214 68.77374268]
[47.87659836 51.32014084]
[64.47077179 38.15946960]
[84.19815063 30.45232582]
[105.31905365 28.87837791]
[125.97088623 33.57642746]
[132.87185669 20.25815010]
[139.77282715 6.93987274]
[138.48631287 -9.40873337]
[152.15278625 -18.47293663]
[166.71333313 -10.92826176]
[167.18934631 5.46397591]
[153.09111023 13.84084797]
[146.19013977 27.15912628]
[139.28915405 40.47740555]
[143.84757996 43.75084686]
[148.13450623 47.37256622]
[152.12339783 51.32014084]
[155.78956604 55.56912613]
[159.11029053 60.09321594]
[162.06501770 64.86439514]
[175.82319641 58.88838196]
[189.58135986 52.91236496]
[198.90080261 39.41865921]
[215.22233582 41.01219559]
[221.75578308 56.05368042]
[211.78007507 69.06972504]
[195.55737305 66.67053223]
[181.79920959 72.64655304]
[168.04103088 78.62256622]
[170.62196350 90.04432678]
[171.29914856 101.73445892]
[170.05433655 113.37783051]
[166.92109680 124.66058350]
[161.98387146 135.27856445]
[155.37576294 144.94555664]
[147.27488708 153.40095520]
[137.89964294 160.41683960]
[127.50275421 165.80407715]
[116.36447144 169.41744995]
[104.78505707 171.15954590]
[93.07665253 170.98341370]
[81.55487823 168.89379883]
[70.53032684 164.94702148]
[60.30018234 159.24948120]
[51.14021683 151.95477295]
[43.29735184 143.25953674]
[30.48106194 151.05329895]
[17.66477013 158.84704590]
[4.84847975 166.64080811]
[-2.92247844 180.42205811]
[-17.81708336 180.42404175]
[-30.63337517 188.21780396]
[-38.40433121 201.99905396]
[-53.29893875 202.00103760]
[-66.11522675 209.79479980]
[-78.93151855 217.58856201]
[-91.74781036 225.38232422]
[-76.75382233 225.80693054]
[-62.66523361 230.95587158]
[-50.93092346 240.29963684]
[-42.75765991 252.87730408]
[-38.98598099 267.39538574]
[-40.00377274 282.36080933]
[-45.70636368 296.23455811]
[-55.50729370 307.58981323]
[-68.39862823 315.25878906]
[-83.05461884 318.45285034]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 53]
[8 52]
[9 51]
[10 50]
[11 49]
[16 43]
[17 42]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[23 36]
[56 127]
[57 126]
[58 125]
[59 124]
[61 122]
[62 121]
[64 119]
[65 118]
[66 117]
[67 116]
[75 84]
[76 83]
[77 82]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
