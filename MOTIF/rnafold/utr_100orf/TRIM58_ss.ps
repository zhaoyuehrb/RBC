%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:09:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGACGGUGCGGGCGGCCGGGAGCGCAGCCCUCCGGGAGGCGGGUCAUGGCCUGGGCGCCGCCCGGGGAGCGGCUGCGCGAGGAUGCGCGGUGCCCGGUGUGCCUGGAUUUCCUGCAGGAGCCGGUCAGCGUGGACUGCGGCCACA\
) } def
/len { sequence length } bind def

/coor [
[123.47109222 430.26605225]
[133.22456360 417.52832031]
[132.59220886 402.54165649]
[120.10243988 394.47052002]
[114.69626617 380.42639160]
[118.64255524 365.71990967]
[130.63034058 356.04525757]
[129.99798584 341.05859375]
[129.36564636 326.07192993]
[128.73329163 311.08523560]
[120.46633148 298.69546509]
[127.61499023 284.58139038]
[126.98264313 269.59472656]
[118.71568298 257.20495605]
[125.86433411 243.09086609]
[125.23198700 228.10420227]
[124.44168091 213.12503052]
[123.49351501 198.15502930]
[122.54534149 183.18502808]
[121.59717560 168.21502686]
[120.64900208 153.24502563]
[119.70082855 138.27502441]
[87.63816833 135.60530090]
[70.57169342 113.39343262]
[74.97319794 89.93373871]
[63.16169739 80.68774414]
[51.35019684 71.44174957]
[39.53869247 62.19575500]
[27.72719193 52.94976044]
[15.91568851 43.70376587]
[4.10418653 34.45777130]
[-7.70731544 25.21177673]
[-19.80528259 16.34390259]
[-32.17761612 7.86302042]
[-44.54994965 -0.61786228]
[-56.92228317 -9.09874535]
[-69.29461670 -17.57962799]
[-81.66694641 -26.06051064]
[-94.03928375 -34.54139328]
[-109.79657745 -35.96200562]
[-115.91970825 -49.53980255]
[-128.29203796 -58.02068710]
[-140.66436768 -66.50157166]
[-153.03671265 -74.98245239]
[-165.75556946 -82.93421936]
[-178.79833984 -90.34273529]
[-191.84111023 -97.75125122]
[-208.22711182 -97.09499359]
[-216.75854492 -111.10023499]
[-208.65898132 -125.35958862]
[-192.26057434 -125.20425415]
[-184.43258667 -110.79402924]
[-171.38981628 -103.38550568]
[-158.34704590 -95.97698975]
[-155.55775452 -96.64328003]
[-152.32841492 -96.20649719]
[-149.09231567 -94.49016571]
[-146.33950806 -91.48317719]
[-144.55581665 -87.35478210]
[-132.18348694 -78.87390137]
[-119.81115723 -70.39302063]
[-107.43882751 -61.91213608]
[-92.56647491 -61.09813309]
[-85.55839539 -46.91372681]
[-73.18606567 -38.43284225]
[-60.81373215 -29.95196152]
[-48.44139862 -21.47107887]
[-36.06906509 -12.99019527]
[-23.69673347 -4.50931263]
[-11.32439995 3.97157025]
[-7.74853611 3.65294600]
[-3.84231949 5.09382963]
[-0.45463732 8.42911148]
[1.53867912 13.40027428]
[13.35018158 22.64626884]
[25.16168404 31.89226341]
[36.97318649 41.13825989]
[48.78468704 50.38425446]
[60.59619141 59.63024902]
[72.40769196 68.87624359]
[84.21919250 78.12223816]
[104.43843079 65.27096558]
[133.15422058 72.54280090]
[144.56544495 62.80709839]
[155.97666931 53.07138824]
[167.28462219 43.21592712]
[178.48805237 33.24180222]
[189.69146729 23.26767540]
[200.89489746 13.29354954]
[205.26278687 5.19225025]
[212.44126892 3.23029184]
[223.85249329 -6.50541496]
[235.26371765 -16.24112129]
[243.38894653 -31.12120819]
[259.93679810 -27.43272972]
[260.97338867 -10.51050091]
[244.99943542 -4.82989931]
[233.58821106 4.90580797]
[222.17698669 14.64151478]
[210.86903381 24.49697876]
[199.66560364 34.47110367]
[188.46217346 44.44522858]
[177.25874329 54.41935349]
[174.33444214 61.26249313]
[165.71237183 64.48261261]
[154.30114746 74.21832275]
[142.88992310 83.95402527]
[144.61384583 91.25321198]
[159.21226501 87.80561829]
[162.65962219 102.40409851]
[148.06167603 105.85158539]
[149.78559875 113.15076447]
[164.34681702 116.75231171]
[178.90802002 120.35385895]
[193.46923828 123.95539856]
[209.06591797 118.88828278]
[221.06979370 130.06141663]
[217.13230896 145.98085022]
[201.30400085 150.27001953]
[189.86769104 138.51661682]
[175.30647278 134.91506958]
[160.74526978 131.31352234]
[146.18405151 127.71197510]
[134.67083740 137.32684326]
[135.61900330 152.29684448]
[136.56716919 167.26684570]
[137.51535034 182.23684692]
[138.46351624 197.20686340]
[139.41168213 212.17686462]
[143.09855652 220.60990906]
[140.21865845 227.47184753]
[140.85099792 242.45851135]
[149.16319275 255.92024231]
[141.96929932 268.96237183]
[142.60165405 283.94903564]
[150.91384888 297.41076660]
[143.71995544 310.45291138]
[144.35231018 325.43957520]
[144.98464966 340.42623901]
[145.61700439 355.41290283]
[158.37715149 364.04336548]
[163.54826355 378.36511230]
[159.34436035 392.81472778]
[147.57887268 401.90930176]
[148.21122742 416.89596558]
[159.00302124 428.76681519]
[156.30845642 444.58197021]
[142.19456482 452.20938110]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 145]
[3 144]
[7 140]
[8 139]
[9 138]
[10 137]
[12 135]
[13 134]
[15 132]
[16 131]
[17 129]
[18 128]
[19 127]
[20 126]
[21 125]
[22 124]
[25 81]
[26 80]
[27 79]
[28 78]
[29 77]
[30 76]
[31 75]
[32 74]
[33 70]
[34 69]
[35 68]
[36 67]
[37 66]
[38 65]
[39 64]
[41 62]
[42 61]
[43 60]
[44 59]
[45 54]
[46 53]
[47 52]
[83 107]
[84 106]
[85 105]
[86 103]
[87 102]
[88 101]
[89 100]
[91 99]
[92 98]
[93 97]
[112 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
