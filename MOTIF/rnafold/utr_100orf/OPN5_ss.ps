%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:15:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAGAUCCCUCGUGGUUCGAGAACAGAAUGGCGUUAAAUCACACUGCCCUGCCUCAGGACGAGCGCCUGCCCCAUUACCUUCGAGAUGGGGAUCCUUUUGCUUCCAAACUUUCUUGGGAAGCGGAUU\
) } def
/len { sequence length } bind def

/coor [
[104.32356262 254.77560425]
[89.28573608 260.36520386]
[75.61454010 251.97007751]
[73.79734802 236.03027344]
[85.22814941 224.77343750]
[86.68704224 209.84454346]
[88.14593506 194.91566467]
[89.60483551 179.98677063]
[91.06372833 165.05789185]
[77.48200226 158.69104004]
[66.94017792 169.36201477]
[56.39834976 180.03300476]
[45.85652161 190.70397949]
[44.51595688 206.69093323]
[31.10146141 215.49041748]
[15.90348434 210.35221863]
[10.58061409 195.21792603]
[19.21610069 181.69728088]
[35.18553925 180.16215515]
[45.72736740 169.49118042]
[56.26919556 158.82019043]
[66.81102753 148.14921570]
[59.30368042 140.54052734]
[53.43481445 131.83433533]
[49.34859848 122.36833954]
[47.12194443 112.49525452]
[46.76395035 102.56984711]
[48.21782684 92.93624878]
[51.36512375 83.91598511]
[56.03206253 75.79728699]
[61.99766922 68.82587433]
[51.98788834 57.65429306]
[41.97810364 46.48271179]
[31.96832275 35.31112671]
[21.95853996 24.13954544]
[11.94875813 12.96796227]
[11.91685200 27.96792793]
[3.92638302 40.66250992]
[-9.58454323 47.17824936]
[-24.49338150 45.52702332]
[-36.25104523 36.21266174]
[-41.26995468 22.07722473]
[-38.01871109 7.43381643]
[-27.48935127 -3.24946833]
[-12.89466572 -6.71287346]
[1.31171572 -1.89989805]
[-6.02955198 -14.98063946]
[-19.53091049 -23.22829819]
[-19.01255608 -38.11388016]
[-26.35382462 -51.19462204]
[-33.69509125 -64.27536011]
[-41.03636169 -77.35610199]
[-54.06101990 -88.20942688]
[-47.23743820 -103.72957611]
[-30.43486595 -101.46906281]
[-27.95561790 -84.69737244]
[-20.61435127 -71.61663055]
[-13.27308369 -58.53588867]
[-5.93181562 -45.45515060]
[7.04444647 -38.14311218]
[7.05118895 -22.32190704]
[14.39245701 -9.24116611]
[23.12034035 2.95818019]
[33.13012314 14.12976265]
[43.13990402 25.30134583]
[53.14968872 36.47292709]
[63.15946960 47.64451218]
[73.16925049 58.81609344]
[92.16896820 51.47497559]
[112.51344299 52.46667480]
[130.70907593 61.62089539]
[141.75794983 51.47582626]
[152.80682373 41.33075714]
[163.85569763 31.18568802]
[174.90457153 21.04061699]
[185.95343018 10.89554691]
[197.00230408 0.75047743]
[195.09635925 -14.64910030]
[202.63551331 -28.21158028]
[216.72079468 -34.72191238]
[231.93614197 -31.67674255]
[242.43092346 -20.24699783]
[244.16969299 -4.82765007]
[236.48387146 8.65224743]
[222.32878113 15.00939846]
[207.14738464 11.79934883]
[196.09851074 21.94441795]
[185.04963684 32.08948898]
[174.00076294 42.23455811]
[162.95188904 52.37962723]
[151.90301514 62.52470016]
[140.85415649 72.66976929]
[146.03485107 80.00642395]
[149.87802124 88.32823181]
[152.19641113 97.38762665]
[152.84930420 106.90162659]
[151.74906921 116.56060791]
[148.86622620 126.03842163]
[144.23242188 135.00335693]
[137.94142151 143.12971497]
[130.14793396 150.10945129]
[141.19679260 160.25451660]
[152.24566650 170.39959717]
[163.29454041 180.54466248]
[174.34341431 190.68972778]
[185.39228821 200.83480835]
[199.77581787 195.60293579]
[214.94161987 197.66621399]
[227.40469360 206.55049133]
[234.30111694 220.21424866]
[234.04612732 235.51762390]
[226.69834900 248.94404602]
[213.94621277 257.40820312]
[198.72009277 258.96508789]
[184.51884460 253.25695801]
[174.60577393 241.59548950]
[171.25888062 226.66040039]
[175.24720764 211.88366699]
[164.19834900 201.73860168]
[153.14947510 191.59353638]
[142.10060120 181.44845581]
[131.05172729 171.30339050]
[120.00285339 161.15832520]
[105.99261475 166.51678467]
[104.53372192 181.44567871]
[103.07482147 196.37455750]
[101.61592865 211.30343628]
[100.15702820 226.23233032]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 128]
[6 127]
[7 126]
[8 125]
[9 124]
[10 22]
[11 21]
[12 20]
[13 19]
[31 68]
[32 67]
[33 66]
[34 65]
[35 64]
[36 63]
[46 62]
[47 61]
[49 59]
[50 58]
[51 57]
[52 56]
[71 92]
[72 91]
[73 90]
[74 89]
[75 88]
[76 87]
[77 86]
[101 123]
[102 122]
[103 121]
[104 120]
[105 119]
[106 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
