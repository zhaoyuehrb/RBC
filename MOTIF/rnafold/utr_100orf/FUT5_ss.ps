%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:13:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUACAGACAUGAGCCACCUCGCCCAGCCUUUUCAUGGCUGAGUGAUAUUCCAUUGUGUGGAUGGAUCACACUAGCUACUCUGACCCAUGGAUCCCCUGGGCCCAGCCAAGCCACAGUGGCUGUGGCGCCGCUGUCUGGCCGGGCUGCUGUUUCAGCUGCUGGUGGCUGUGUGUUUCUUCUCCUACC\
) } def
/len { sequence length } bind def

/coor [
[89.63481903 388.33151245]
[83.78925323 374.37857056]
[82.54350281 359.30197144]
[86.01961517 344.57882690]
[93.87703705 331.65148926]
[105.34598541 321.78646851]
[119.30283356 315.95025635]
[118.05760956 301.00201416]
[116.81237793 286.05380249]
[115.56714630 271.10556030]
[114.32192230 256.15734863]
[113.07669067 241.20912170]
[102.30639648 227.36408997]
[110.27091980 210.77113342]
[108.77739716 195.84567261]
[107.28388214 180.92021179]
[105.79036713 165.99475098]
[104.29684448 151.06929016]
[102.80332947 136.14382935]
[101.30980682 121.21836853]
[88.25754547 113.82659149]
[74.68939209 120.22230530]
[61.12123108 126.61801910]
[47.55307770 133.01373291]
[38.36925125 145.89657593]
[23.55784225 144.32452393]
[9.98968601 150.72023010]
[-3.57847047 157.11595154]
[-17.14662743 163.51165771]
[-30.71478271 169.90736389]
[-34.52405930 185.07389832]
[-47.22122955 194.20164490]
[-62.81108093 192.98077393]
[-73.93256378 181.98774719]
[-75.33444977 166.41313171]
[-66.35481262 153.61077881]
[-51.23356628 149.62557983]
[-37.11049652 156.33921814]
[-23.54233932 149.94349670]
[-9.97418213 143.54779053]
[3.59397388 137.15208435]
[17.16213036 130.75636292]
[25.37546921 118.33097076]
[41.15736389 119.44557190]
[54.72552109 113.04985809]
[68.29367828 106.65414429]
[81.86183167 100.25843811]
[81.67485046 92.76076508]
[68.50151825 85.58698273]
[81.30089569 77.76542664]
[81.11391449 70.26776123]
[67.24382019 64.55631256]
[53.37373352 58.84487152]
[39.50364304 53.13342667]
[25.63355255 47.42198181]
[11.76346302 41.71053696]
[-3.53900695 46.52862549]
[-16.76586533 37.44953918]
[-17.77059937 21.43798065]
[-5.78246260 10.77664185]
[10.00227261 13.64399242]
[17.47490692 27.84044456]
[31.34499741 33.55189133]
[45.21508789 39.26333618]
[59.08517838 44.97478104]
[72.95526886 50.68622589]
[86.82535553 56.39767075]
[74.83692932 47.38225937]
[70.87557220 32.91479111]
[76.59906006 19.04966354]
[89.61219025 11.58920765]
[104.46918488 13.65550518]
[114.95263672 24.38384247]
[116.67539215 39.28458405]
[108.91552734 52.12282562]
[119.65353394 41.64927292]
[130.39154053 31.17572021]
[128.22116089 19.46405029]
[131.94416809 8.27615929]
[140.52294922 0.36293992]
[151.74140930 -2.38919735]
[162.77671814 0.59286261]
[173.85690308 -9.51799011]
[184.93710327 -19.62884331]
[196.01728821 -29.73969650]
[201.95849609 -43.51293564]
[201.70916748 -58.51086426]
[201.45985413 -73.50879669]
[201.21052551 -88.50672150]
[197.93382263 -97.05397797]
[201.08378601 -103.75552368]
[201.08378601 -118.75552368]
[192.42008972 -132.67932129]
[200.38421631 -147.01475525]
[216.78335571 -147.01475525]
[224.74749756 -132.67932129]
[216.08378601 -118.75552368]
[216.08378601 -103.75552368]
[216.20845032 -88.75604248]
[216.45777893 -73.75811768]
[216.70709229 -58.76018524]
[216.95642090 -43.76226044]
[223.45161438 -40.01226044]
[236.44198608 -32.51226044]
[242.93717957 -28.76225853]
[256.05041504 -36.04530334]
[269.16366577 -43.32835007]
[282.27691650 -50.61139297]
[295.39016724 -57.89443970]
[299.83322144 -72.82417297]
[313.23568726 -80.02341461]
[327.44152832 -75.69563293]
[340.55474854 -82.97867584]
[353.66799927 -90.26171875]
[366.65838623 -97.76171875]
[379.52230835 -105.47660065]
[392.38623047 -113.19148254]
[405.25015259 -120.90637207]
[418.11410522 -128.62124634]
[430.97802734 -136.33613586]
[443.84194946 -144.05101013]
[456.70587158 -151.76589966]
[460.29840088 -167.15646362]
[473.76538086 -175.42785645]
[489.11709595 -171.67280579]
[497.24563599 -158.11912537]
[493.32849121 -142.80796814]
[479.68963623 -134.82316589]
[464.42074585 -138.90197754]
[451.55682373 -131.18708801]
[438.69290161 -123.47220612]
[425.82897949 -115.75732422]
[412.96505737 -108.04244232]
[400.10113525 -100.32756042]
[387.23718262 -92.61267853]
[374.37326050 -84.89779663]
[372.36267090 -80.54679108]
[367.58749390 -77.42168427]
[360.95104980 -77.14847565]
[347.83779907 -69.86542511]
[334.72454834 -62.58238220]
[330.89062500 -48.23537827]
[317.69567871 -40.66253281]
[302.67321777 -44.78119278]
[289.55996704 -37.49814606]
[276.44671631 -30.21510315]
[263.33346558 -22.93205643]
[250.22023010 -15.64901161]
[241.59744263 -10.29635620]
[232.57739258 -7.67839479]
[223.93368530 -7.63825274]
[216.33399963 -9.81726074]
[210.29098511 -13.69818497]
[206.12814331 -18.65950394]
[195.04795837 -8.54865074]
[183.96775818 1.56220186]
[172.88757324 11.67305470]
[173.16596985 29.96342087]
[159.77049255 42.88414001]
[140.86508179 41.91372299]
[130.12709045 52.38727570]
[119.38908386 62.86082840]
[116.23527527 119.72485352]
[117.72879028 134.65031433]
[119.22230530 149.57577515]
[120.71582794 164.50123596]
[122.20934296 179.42669678]
[123.70285797 194.35215759]
[125.19638062 209.27761841]
[134.67445374 218.04394531]
[135.60171509 230.51901245]
[128.02491760 239.96389771]
[129.27014160 254.91212463]
[130.51538086 269.86035156]
[131.76060486 284.80856323]
[133.00582886 299.75680542]
[134.25106812 314.70501709]
[148.98118591 318.15151978]
[161.92430115 325.98294067]
[171.81234741 337.43203735]
[177.67660522 351.37713623]
[178.94256592 366.45202637]
[175.48617554 381.17984009]
[167.64608765 394.11770630]
[156.19038391 403.99807739]
[142.24136353 409.85299683]
[127.16561127 411.10885620]
[112.44011688 407.64260864]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 177]
[8 176]
[9 175]
[10 174]
[11 173]
[12 172]
[14 169]
[15 168]
[16 167]
[17 166]
[18 165]
[19 164]
[20 163]
[21 47]
[22 46]
[23 45]
[24 44]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
[75 162]
[76 161]
[77 160]
[82 157]
[83 156]
[84 155]
[85 154]
[86 102]
[87 101]
[88 100]
[89 99]
[91 98]
[92 97]
[105 148]
[106 147]
[107 146]
[108 145]
[109 144]
[112 141]
[113 140]
[114 139]
[115 136]
[116 135]
[117 134]
[118 133]
[119 132]
[120 131]
[121 130]
[122 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
