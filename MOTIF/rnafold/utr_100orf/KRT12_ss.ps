%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:11:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUGUGGCCACCUUCCCCAGGCCAUGGAUCUCUCCAACAACACCAUGUCACUCUCAGUGCGCACCCCCGGACUGUCCCGGCGGCUCUCCUCGCAGAGUGUGAUAGGCAGACCCAGGGGCAUGU\
) } def
/len { sequence length } bind def

/coor [
[73.02515411 123.97217560]
[79.05040741 110.23441315]
[65.64279175 116.96015930]
[52.23516846 123.68590546]
[38.82754517 130.41165161]
[25.41992378 137.13740540]
[25.95418930 180.38471985]
[15.41444016 191.05775452]
[4.87469101 201.73078918]
[-5.66505861 212.40382385]
[-1.51943326 227.19265747]
[-5.33917475 242.06898499]
[-16.09679222 253.03115845]
[-30.89853859 257.13040161]
[-45.76282120 253.26405334]
[-56.69122314 242.47213745]
[-60.74405289 227.65760803]
[-56.83112717 212.80551147]
[-46.00500107 201.91099548]
[-31.17784500 197.90461731]
[-16.33809280 201.86407471]
[-5.79834414 191.19104004]
[4.74140549 180.51800537]
[15.28115463 169.84497070]
[9.58420849 155.96820068]
[3.88778210 142.09266663]
[-11.11103344 141.90417480]
[-26.10984993 141.71568298]
[-41.10866547 141.52719116]
[-55.14023590 150.01524353]
[-69.37446594 141.87159729]
[-69.16838837 125.47374725]
[-54.73400879 117.69038391]
[-40.92017365 126.52837372]
[-25.92135811 126.71686554]
[-10.92254257 126.90535736]
[4.07627296 127.09384155]
[18.69417572 123.72978210]
[32.10179901 117.00403595]
[45.50941849 110.27828979]
[58.91704178 103.55253601]
[72.32466125 96.82678986]
[87.89042664 82.85150146]
[103.17913818 86.23263550]
[112.29809570 74.32278442]
[115.07608032 65.50065613]
[121.79891205 62.23204041]
[131.21427917 50.55510330]
[140.62965393 38.87817001]
[150.04502869 27.20123482]
[159.46038818 15.52430058]
[168.87576294 3.84736633]
[171.51481628 -11.75218391]
[185.52680969 -16.80324936]
[194.94218445 -28.48018265]
[204.35754395 -40.15711975]
[205.79144287 -46.79745483]
[209.81199646 -51.01213837]
[214.55120850 -52.16856384]
[224.54138184 -63.35768127]
[234.53157043 -74.54679871]
[244.52174377 -85.73591614]
[239.17028809 -104.85722351]
[246.23143005 -123.26405334]
[262.75976562 -133.74900818]
[282.13891602 -132.31452942]
[290.95568848 -144.44978333]
[299.61929321 -156.69487000]
[308.12832642 -169.04785156]
[316.63735962 -181.40084839]
[325.14639282 -193.75382996]
[322.03643799 -209.24911499]
[330.86361694 -222.35852051]
[346.39089966 -225.30447388]
[359.40625000 -216.33918762]
[362.18786621 -200.78161621]
[353.08547974 -187.86178589]
[337.49935913 -185.24479675]
[328.99032593 -172.89181519]
[320.48129272 -160.53881836]
[311.97225952 -148.18583679]
[310.75537109 -140.81022644]
[303.09094238 -135.63299561]
[294.27416992 -123.49774170]
[299.67028809 -114.38716888]
[301.67742920 -103.95114899]
[300.03378296 -93.41270447]
[294.90701294 -84.01586151]
[286.87747192 -76.87876129]
[276.87265015 -72.86065674]
[266.06002808 -72.45853424]
[255.71086121 -75.74573517]
[245.72068787 -64.55661774]
[235.73049927 -53.36750412]
[225.74032593 -42.17838669]
[216.03448486 -30.74174690]
[206.61911011 -19.06481361]
[197.20375061 -7.38787842]
[195.23814392 7.37645960]
[180.55270386 13.26273632]
[171.13732910 24.93967056]
[161.72195435 36.61660767]
[152.30657959 48.29354095]
[142.89122009 59.97047424]
[133.47584534 71.64740753]
[124.20794678 83.44173431]
[115.08899689 95.35159302]
[113.77122498 110.29359436]
[120.66492462 123.61564636]
[135.45733643 128.49645996]
[142.25874329 142.10511780]
[137.51448059 156.17733765]
[144.40817261 169.49938965]
[158.50181580 177.88395691]
[158.01686096 194.27592468]
[143.45217896 201.81265259]
[129.79067993 192.74098206]
[131.08612061 176.39308167]
[124.19242859 163.07102966]
[109.96455383 158.81623840]
[102.78359222 145.40399170]
[107.34288025 130.50933838]
[100.44918060 117.18729401]
[97.24967957 131.84210205]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 42]
[3 41]
[4 40]
[5 39]
[6 38]
[7 24]
[8 23]
[9 22]
[10 21]
[26 37]
[27 36]
[28 35]
[29 34]
[44 107]
[45 106]
[47 105]
[48 104]
[49 103]
[50 102]
[51 101]
[52 100]
[54 98]
[55 97]
[56 96]
[59 95]
[60 94]
[61 93]
[62 92]
[66 84]
[67 83]
[68 81]
[69 80]
[70 79]
[71 78]
[108 123]
[109 122]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
