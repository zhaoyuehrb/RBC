%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:53:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAAUUAUGGCAGAGACAAGUCUGUUAGAGGCUGGGGCCUCUGCAGCCUCUACAGCUGCGGCUUUGGAGAACUUACAGGUGGAGGCGAGCUGCUCUGUGUGCCUGG\
) } def
/len { sequence length } bind def

/coor [
[220.74946594 257.20065308]
[207.64581299 258.33273315]
[194.59568787 256.63952637]
[182.20153809 252.19622803]
[171.03617859 245.20497131]
[161.61630249 235.98573303]
[154.37858582 224.96170044]
[149.65945435 212.63980103]
[147.67941284 199.58741760]
[148.53277588 186.40628052]
[152.18319702 173.70465088]
[158.46513367 162.06936646]
[147.25975037 152.09742737]
[136.05436707 142.12548828]
[124.84899902 132.15354919]
[113.64362335 122.18161774]
[97.90282440 125.95716858]
[82.97232056 119.70356750]
[74.62084961 105.83705139]
[76.07518768 89.71525574]
[64.58452606 80.07344055]
[55.85512161 76.88464355]
[52.90517807 69.98023987]
[41.69980240 60.00829697]
[30.49442482 50.03636169]
[19.28904915 40.06442261]
[10.65608692 36.62308121]
[7.90820217 29.63579750]
[-3.00240254 19.34217262]
[-13.91300678 9.04854870]
[-24.82361221 -1.24507558]
[-35.73421478 -11.53870010]
[-46.64482117 -21.83232498]
[-57.55542374 -32.12594986]
[-68.46603394 -42.41957474]
[-83.81356812 -46.26191711]
[-87.76139069 -60.62380981]
[-98.67199707 -70.91743469]
[-114.34221649 -77.38896179]
[-112.46154785 -94.23827362]
[-95.75009155 -97.09545898]
[-88.37837219 -81.82804108]
[-77.46776581 -71.53441620]
[-62.90063095 -68.42833710]
[-58.17240524 -53.33017731]
[-47.26180267 -43.03655243]
[-36.35119629 -32.74292755]
[-25.44059181 -22.44930458]
[-14.52998734 -12.15568066]
[-3.61938262 -1.86205566]
[7.29122210 8.43156910]
[18.20182610 18.72519302]
[29.26098633 28.85904694]
[40.46636200 38.83098602]
[51.67173767 48.80292130]
[62.87711334 58.77486038]
[74.22633362 68.58277130]
[85.71700287 78.22458649]
[98.35405731 74.01032257]
[111.42179108 76.59668732]
[121.50083160 85.30691528]
[125.95381927 97.86183167]
[123.61556244 110.97624207]
[134.82093811 120.94818115]
[146.02630615 130.92012024]
[157.23168945 140.89205933]
[168.43705750 150.86399841]
[182.70739746 141.51840210]
[198.98251343 136.45188904]
[216.01049805 136.04685974]
[232.48352051 140.32745361]
[247.13825989 148.95819092]
[258.85287476 161.27027893]
[266.73275757 176.31338501]
[270.17898560 192.92903137]
[268.93368530 209.83982849]
[263.09951782 225.74758911]
[275.38677979 234.35122681]
[287.67407227 242.95487976]
[299.96133423 251.55851746]
[312.24862671 260.16217041]
[325.01538086 268.03680420]
[338.21838379 275.15582275]
[351.42141724 282.27484131]
[364.62445068 289.39382935]
[378.55157471 282.55172729]
[393.83477783 285.23568726]
[404.59732056 296.41363525]
[406.70080566 311.78747559]
[399.33639526 325.44564819]
[385.33584595 332.13626099]
[370.08267212 329.28668213]
[359.44201660 317.99261475]
[357.50543213 302.59686279]
[344.30239868 295.47784424]
[331.09939575 288.35885620]
[317.89636230 281.23983765]
[315.05496216 282.04171753]
[311.70263672 281.67565918]
[308.31845093 279.93218994]
[305.45101929 276.79287720]
[303.64498901 272.44946289]
[291.35769653 263.84579468]
[279.07040405 255.24215698]
[266.78314209 246.63850403]
[254.49584961 238.03486633]
[244.72637939 246.80928040]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 67]
[13 66]
[14 65]
[15 64]
[16 63]
[20 58]
[21 57]
[23 56]
[24 55]
[25 54]
[26 53]
[28 52]
[29 51]
[30 50]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[37 43]
[38 42]
[77 106]
[78 105]
[79 104]
[80 103]
[81 102]
[82 97]
[83 96]
[84 95]
[85 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
