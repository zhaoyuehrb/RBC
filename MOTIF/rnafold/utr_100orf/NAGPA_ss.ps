%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACAUGACCCGAGGCCCCGGUCCAAUAUGGCGACCUCCACGGGUCGCUGGCUUCUCCUCCGGCUUGCACUAUUCGGCUUCCUCUGGGAAGCGUCCGGCGGCCUCGACUCGGGGGCCUCCCGCGACG\
) } def
/len { sequence length } bind def

/coor [
[144.51170349 338.33987427]
[139.18252563 334.40875244]
[134.77954102 329.44458008]
[131.49977112 323.66116333]
[129.49166870 317.30911255]
[128.84843445 310.66506958]
[129.60372925 304.01953125]
[131.72993469 297.66421509]
[135.13914490 291.87927246]
[139.68673706 286.92092896]
[145.17756653 283.01007080]
[141.17687988 268.55343628]
[137.17619324 254.09680176]
[133.17549133 239.64015198]
[129.17480469 225.18351746]
[125.17411041 210.72686768]
[121.17342377 196.27023315]
[116.99562836 181.86376953]
[112.64135742 167.50967407]
[108.28708649 153.15556335]
[103.93281555 138.80145264]
[93.16908264 139.79998779]
[82.17486572 137.76856995]
[71.81269073 132.66485596]
[62.94776535 124.69380188]
[56.37690735 114.30492401]
[52.75942993 102.16911316]
[52.55592346 89.13605499]
[55.98027039 76.17487335]
[62.96953201 64.30205536]
[48.97463989 58.90363312]
[34.97974777 53.50520706]
[20.98485565 48.10678101]
[6.98996401 42.70835495]
[-7.00492811 37.30992889]
[-20.99982071 31.91150475]
[-34.99471283 26.51307869]
[-51.10354233 29.58514214]
[-61.61215210 16.99541664]
[-55.71017838 1.69512987]
[-39.46907043 -0.57609332]
[-29.59628677 12.51818657]
[-15.60139465 17.91661263]
[-1.60650241 23.31503677]
[12.38838959 28.71346283]
[26.38328171 34.11188889]
[40.37817383 39.51031494]
[54.37306595 44.90874100]
[68.36795807 50.30716705]
[79.23166656 39.96405792]
[74.52643585 25.72113419]
[69.82121277 11.47821140]
[65.11598206 -2.76471090]
[50.29458237 -7.35879707]
[41.03113937 -19.80742073]
[40.88763809 -35.32383347]
[49.91925812 -47.94165421]
[64.65316010 -52.80907822]
[79.42385101 -48.05447769]
[88.55170441 -35.50609589]
[88.52687836 -19.98904228]
[79.35890961 -7.46993685]
[84.06413269 6.77298546]
[88.76936340 21.01590919]
[93.47458649 35.25883102]
[100.53616333 37.78550339]
[103.23536682 23.03035927]
[105.93456268 8.27521229]
[104.23289490 -6.62795258]
[113.86800385 -18.12423897]
[128.83917236 -19.05379105]
[139.82240295 -8.83768559]
[139.97735596 6.16151381]
[129.20744324 16.60238457]
[121.93338776 29.72061920]
[114.65932465 42.83885193]
[121.72090912 45.36552811]
[134.39370728 37.34056091]
[147.06651306 29.31559753]
[159.73931885 21.29063416]
[172.41212463 13.26566982]
[185.08493042 5.24070501]
[192.21343994 -9.52805614]
[208.58557129 -10.46895695]
[217.35908508 3.38592100]
[209.50852966 17.78386688]
[193.10989380 17.91350937]
[180.43708801 25.93847275]
[167.76428223 33.96343613]
[155.09147644 41.98840332]
[142.41867065 50.01336670]
[129.74588013 58.03833008]
[145.51124573 87.15074158]
[139.67539978 116.95227814]
[118.28691864 134.44718933]
[122.64118958 148.80130005]
[126.99546051 163.15539551]
[131.34973145 177.50950623]
[136.89147949 184.90638733]
[135.63006592 192.26954651]
[139.63075256 206.72618103]
[143.63143921 221.18281555]
[147.63214111 235.63946533]
[151.63282776 250.09609985]
[155.63351440 264.55273438]
[159.63421631 279.00939941]
[182.85285950 288.14605713]
[192.42005920 310.94229126]
[182.85520935 333.49075317]
[190.56675720 346.35668945]
[198.27828979 359.22262573]
[212.00950623 367.08166504]
[211.91612244 381.97598267]
[219.62767029 394.84188843]
[227.33920288 407.70782471]
[240.66827393 418.18505859]
[234.29034424 433.89361572]
[217.43009949 432.11349487]
[214.47328186 415.41937256]
[206.76173401 402.55343628]
[199.05020142 389.68753052]
[185.87057495 382.74874878]
[185.41236877 366.93417358]
[177.70082092 354.06823730]
[169.98928833 341.20230103]
[163.55505371 342.52786255]
[156.97264099 342.48501587]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 106]
[12 105]
[13 104]
[14 103]
[15 102]
[16 101]
[17 100]
[18 98]
[19 97]
[20 96]
[21 95]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
[50 65]
[51 64]
[52 63]
[53 62]
[77 92]
[78 91]
[79 90]
[80 89]
[81 88]
[82 87]
[109 125]
[110 124]
[111 123]
[113 121]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
