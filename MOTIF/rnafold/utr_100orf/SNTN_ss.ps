%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:33:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAAACAGAAGAUGAGAGAAUGGGUGGCUGUAUGCACAGUACCCAGGACAAAUCUCUCCACUUGGAAGGAGAUCCCAAUCCUUCUGCAGCCCCAACAUCCACCUGCGCACCUAGGAAAA\
) } def
/len { sequence length } bind def

/coor [
[-0.25464231 176.06416321]
[-1.66040647 161.13017273]
[0.48585054 146.28451538]
[6.06370306 132.36016846]
[14.76018047 120.13841248]
[26.08732605 110.30501556]
[39.40958023 103.41172028]
[53.97943497 99.84529877]
[68.97938538 99.80587769]
[83.56872559 103.29600525]
[69.48075104 98.14537811]
[55.39277267 92.99475098]
[41.19564056 99.40405273]
[26.98180389 93.97989655]
[20.95900154 80.40560150]
[6.87102747 75.25497437]
[-7.21694708 70.10434723]
[-21.30492210 64.95372009]
[-35.39289474 59.80309296]
[-49.48086929 54.65246201]
[-72.36820221 61.37897873]
[-87.55510712 43.89649582]
[-102.27161407 40.99401855]
[-116.98812866 38.09153748]
[-131.70463562 35.18906021]
[-146.42114258 32.28658295]
[-161.13764954 29.38410568]
[-170.28720093 30.80027008]
[-176.19631958 26.21052170]
[-190.83250427 22.92697144]
[-205.46870422 19.64342117]
[-220.10490417 16.35987091]
[-235.58752441 21.76548195]
[-247.83189392 10.85643673]
[-244.24206543 -5.14497471]
[-228.51094055 -9.77787113]
[-216.82136536 1.72367322]
[-202.18516541 5.00722313]
[-187.54896545 8.29077339]
[-172.91276550 11.57432270]
[-158.23516846 14.66759777]
[-143.51866150 17.57007599]
[-128.80215454 20.47255325]
[-114.08564758 23.37503052]
[-99.36914062 26.27750778]
[-84.65263367 29.17998695]
[-80.26262665 23.93179321]
[-74.38470459 20.32877922]
[-67.61430359 18.77486801]
[-60.64979935 19.46440506]
[-54.22049713 22.35854721]
[-49.01024628 27.18586159]
[-45.58475494 33.46748352]
[-44.33024216 40.56448746]
[-30.24226761 45.71511841]
[-16.15429306 50.86574554]
[-2.06631899 56.01637268]
[12.02165604 61.16699982]
[26.10963058 66.31762695]
[39.46752548 59.82901001]
[53.82810974 64.85179138]
[60.54339981 78.90677643]
[74.63137817 84.05740356]
[88.71935272 89.20803070]
[103.35554504 85.92448425]
[113.89308167 75.24925995]
[124.43061066 64.57403564]
[134.96813965 53.89880753]
[145.50567627 43.22358322]
[156.04321289 32.54836273]
[166.58074951 21.87313652]
[163.92114258 6.58568716]
[170.78541565 -7.33053637]
[184.53413391 -14.52446175]
[199.88061523 -12.22987747]
[210.92382812 -1.32909858]
[213.41743469 13.98630333]
[206.40260315 27.82724380]
[192.57666016 34.87159729]
[177.25596619 32.41066742]
[166.71842957 43.08589172]
[156.18090820 53.76111603]
[145.64337158 64.43634033]
[135.10583496 75.11156464]
[124.56830597 85.78678894]
[114.03076935 96.46201324]
[117.50404358 111.05435181]
[131.72097778 115.83751678]
[145.93792725 120.62067413]
[160.15486145 125.40383148]
[170.43087769 114.16445923]
[184.39253235 108.08236694]
[199.62091064 108.21131134]
[213.47758484 114.52894592]
[223.56179810 125.94071198]
[228.12641907 140.46945190]
[226.38058472 155.59796143]
[218.62677002 168.70515442]
[206.20838928 177.52011108]
[191.27697754 180.51559448]
[176.41950989 177.17262268]
[164.21011353 168.07038879]
[156.76416016 154.78588867]
[155.37170410 139.62077332]
[141.15476990 134.83761597]
[126.93782806 130.05445862]
[112.72088623 125.27129364]
[120.09247589 138.33497620]
[124.18457794 152.76600647]
[124.76760101 167.75466919]
[121.80881500 182.45996094]
[115.47425079 196.05677795]
[106.11932373 207.78219604]
[94.26895142 216.97830200]
[80.58803558 223.12913513]
[65.84422302 225.88954163]
[50.86476898 225.10466003]
[36.49017334 220.81852722]
[23.52698517 213.27162170]
[12.70256519 202.88740540]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 64]
[11 63]
[12 62]
[15 59]
[16 58]
[17 57]
[18 56]
[19 55]
[20 54]
[22 46]
[23 45]
[24 44]
[25 43]
[26 42]
[27 41]
[29 40]
[30 39]
[31 38]
[32 37]
[65 86]
[66 85]
[67 84]
[68 83]
[69 82]
[70 81]
[71 80]
[87 107]
[88 106]
[89 105]
[90 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
