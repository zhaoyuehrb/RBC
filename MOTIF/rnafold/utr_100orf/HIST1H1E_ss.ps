%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:43:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCCGGCCAGUGCCUCUGCUUCCGGCUCGAAUUGCUCUCGCUCACGCUUGCCUUCAACAUGUCCGAGACUGCGCCUGCCGCGCCCGCUGCUCCGGCCCCUGCCGAGAAGACUCCCGUGAAGAAGAAGGCCCGCAAGUCUGCAGGUGCGGCCAAGCGCA\
) } def
/len { sequence length } bind def

/coor [
[-146.20109558 158.73234558]
[-161.04075623 160.91972351]
[-175.88040161 163.10711670]
[-190.72006226 165.29449463]
[-203.24441528 174.96150208]
[-216.96394348 169.16287231]
[-231.80358887 171.35026550]
[-246.64324951 173.53764343]
[-259.16760254 183.20465088]
[-272.88711548 177.40602112]
[-287.72677612 179.59341431]
[-302.54437256 181.92547607]
[-317.33853149 184.40199280]
[-320.77343750 198.13887024]
[-329.16680908 209.48898315]
[-341.22048950 216.75257874]
[-355.09133911 218.85766602]
[-368.67306519 215.51806641]
[-379.91607666 207.27186584]
[-387.13671875 195.39501953]
[-401.97637939 197.58239746]
[-409.23309326 211.17085266]
[-422.93948364 217.80323792]
[-437.74792480 215.12475586]
[-448.01669312 204.36880493]
[-462.85632324 206.55618286]
[-470.47183228 221.63215637]
[-485.41598511 229.14060974]
[-501.73056030 226.30885315]
[-513.04138184 214.44363403]
[-527.83551025 216.92015076]
[-542.62963867 219.39666748]
[-550.40917969 232.96180725]
[-565.10589600 238.30418396]
[-579.78045654 232.90127563]
[-587.50396729 219.30418396]
[-584.62969971 203.93302917]
[-572.51470947 194.04560852]
[-556.87933350 194.31045532]
[-545.10620117 204.60250854]
[-530.31201172 202.12599182]
[-515.51788330 199.64947510]
[-510.68038940 187.17605591]
[-500.21923828 178.66343689]
[-486.80908203 176.42643738]
[-473.94772339 181.15728760]
[-465.04373169 191.71653748]
[-450.20407104 189.52914429]
[-443.47549438 176.26777649]
[-430.06970215 169.43046570]
[-415.03259277 171.82603455]
[-404.16375732 182.74275208]
[-389.32409668 180.55535889]
[-384.87048340 165.23304749]
[-374.15072632 153.33547974]
[-359.26632690 147.27061462]
[-343.16821289 148.29545593]
[-329.07189941 156.25601196]
[-319.81503296 169.60783386]
[-305.02090454 167.13131714]
[-298.91217041 162.90400696]
[-289.91415405 164.75375366]
[-275.07449341 162.56637573]
[-263.61157227 153.05581665]
[-248.83062744 158.69799805]
[-233.99098206 156.51060486]
[-219.15132141 154.32322693]
[-207.68840027 144.81266785]
[-192.90744019 150.45483398]
[-178.06779480 148.26745605]
[-163.22813416 146.08006287]
[-148.38848877 143.89268494]
[-133.59432983 141.41616821]
[-118.85131836 138.65145874]
[-104.10830688 135.88676453]
[-89.36529541 133.12205505]
[-80.49548340 118.86025238]
[-63.73043442 115.33283997]
[-49.30886078 125.19145966]
[-34.62260056 122.13961792]
[-19.93634033 119.08777618]
[-5.25007868 116.03593445]
[9.43618298 112.98410034]
[24.12244415 109.93225861]
[38.80870438 106.88041687]
[53.49496841 103.82857513]
[64.38183594 93.66366577]
[79.46756744 98.43141174]
[94.15382385 95.37957001]
[91.83039093 89.79100037]
[91.90366364 83.14442444]
[94.67536163 76.26692200]
[100.19140625 70.05374146]
[110.95209503 59.60349274]
[121.61030579 49.04875946]
[132.16503906 38.39054489]
[142.71977234 27.73232651]
[153.27450562 17.07411003]
[156.91600037 1.08437669]
[172.66201782 -3.49768400]
[184.31439209 8.04155827]
[179.88616943 23.83152199]
[163.93272400 27.62884331]
[153.37799072 38.28705978]
[142.82325745 48.94527817]
[132.26852417 59.60349274]
[129.78387451 66.60444641]
[121.40233612 70.36418152]
[110.64165497 80.81442261]
[114.96965790 95.17647552]
[129.71267700 97.94117737]
[144.45568848 100.70587921]
[159.19869995 103.47058868]
[173.94171143 106.23529053]
[182.60223389 99.55011749]
[193.29487610 98.77957916]
[202.44067383 103.93784332]
[207.11248779 113.09488678]
[221.73641968 116.43269348]
[236.36033630 119.77050781]
[245.83639526 107.80527496]
[259.56930542 101.14419556]
[274.83239746 101.10985565]
[288.59512329 107.70905304]
[298.12496948 119.63152313]
[301.52969360 134.51005554]
[298.13333130 149.39048767]
[288.61022949 161.31831360]
[274.85116577 167.92526245]
[259.58807373 167.89950562]
[245.85142517 161.24615479]
[236.36863708 149.28625488]
[233.02252197 134.39442444]
[218.39860535 131.05661011]
[203.77467346 127.71880341]
[185.81100464 134.79393005]
[171.17700195 120.97830200]
[156.43399048 118.21360016]
[141.69097900 115.44889069]
[126.94796753 112.68418884]
[112.20495605 109.91948700]
[97.20566559 110.06582642]
[82.51940918 113.11766815]
[70.58207703 123.50086212]
[56.54680634 118.51483917]
[41.86054611 121.56668091]
[27.17428398 124.61851501]
[12.48802280 127.67035675]
[-2.19823837 130.72219849]
[-16.88450050 133.77403259]
[-31.57076073 136.82588196]
[-46.25702286 139.87771606]
[-52.31733704 151.94015503]
[-64.05491638 158.20393372]
[-77.06237030 156.57183838]
[-86.60059357 147.86506653]
[-101.34360504 150.62977600]
[-116.08661652 153.39447021]
[-130.82963562 156.15917969]
[-136.15303040 160.21640015]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[4 69]
[6 67]
[7 66]
[8 65]
[10 63]
[11 62]
[12 60]
[13 59]
[20 53]
[21 52]
[25 48]
[26 47]
[30 42]
[31 41]
[32 40]
[73 159]
[74 158]
[75 157]
[76 156]
[79 152]
[80 151]
[81 150]
[82 149]
[83 148]
[84 147]
[85 146]
[86 145]
[88 143]
[89 142]
[93 109]
[94 108]
[95 106]
[96 105]
[97 104]
[98 103]
[110 141]
[111 140]
[112 139]
[113 138]
[114 137]
[118 135]
[119 134]
[120 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
