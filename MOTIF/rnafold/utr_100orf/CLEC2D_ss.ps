%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:27:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUCACUCAUAGAAACUGGAGGCAAAAUGCAUGACAGUAACAAUGUGGAGAAAGACAUUACACCAUCUGAAUUGCCUGCAAACCCAGGUUGUCUGCAUUCAAAAGAGCAUUCUAUUAAAGCUACCU\
) } def
/len { sequence length } bind def

/coor [
[89.97447205 242.68955994]
[90.15264893 257.79403687]
[86.06685638 272.33648682]
[78.04830933 285.13803101]
[66.74704742 295.16091919]
[53.07920837 301.59262085]
[38.15277863 303.91174316]
[23.17778015 301.93029785]
[9.36816883 295.80892944]
[-2.15657353 286.04385376]
[-10.46218586 273.42663574]
[-14.87537003 258.98019409]
[-15.03836918 243.87554932]
[-10.93797016 229.33720398]
[-2.90657234 216.54371643]
[8.40475368 206.53219604]
[22.07905006 200.11422729]
[37.00780106 197.81008911]
[51.98080063 199.80656433]
[58.05942154 186.09341431]
[56.14352417 171.32254028]
[68.80944061 161.84176636]
[74.88805389 148.12861633]
[80.96667480 134.41548157]
[65.61852264 109.99605560]
[71.66562653 84.53045654]
[91.82089233 72.42821503]
[91.45277405 57.43273163]
[91.08465576 42.43724823]
[90.71653748 27.44176674]
[90.34841919 12.44628525]
[89.98030090 -2.54919720]
[86.61212921 -11.15618992]
[89.79170990 -17.91618538]
[89.79170990 -32.91618729]
[89.79170990 -47.91618729]
[89.79170990 -62.91618729]
[84.43026733 -62.68649292]
[78.71476746 -63.89147186]
[73.02359772 -66.65251923]
[67.76663208 -70.99344635]
[63.36064148 -76.83348083]
[60.20341110 -83.98628998]
[51.56628799 -96.25006104]
[42.92916489 -108.51383209]
[34.29204178 -120.77761078]
[25.65491867 -133.04138184]
[10.13812733 -133.13522339]
[-2.34008026 -142.35877991]
[-6.98157835 -157.16540527]
[-2.00161648 -171.86164856]
[10.68490887 -180.79650879]
[26.19976997 -180.53434753]
[38.57718277 -171.17596436]
[43.05778503 -156.31985474]
[37.91868973 -141.67849731]
[46.55581284 -129.41473389]
[55.19293594 -117.15095520]
[63.83005905 -104.88718414]
[72.46718597 -92.62341309]
[79.88600922 -91.52293396]
[78.18578339 -106.42626190]
[76.48555756 -121.32959747]
[68.77544403 -134.19638062]
[69.14495087 -149.19181824]
[77.47943878 -161.66323853]
[91.19293213 -167.74107361]
[106.03049469 -165.53953552]
[117.38841248 -155.74169922]
[121.74262238 -141.38757324]
[117.74213409 -126.93087769]
[106.63009644 -116.85807800]
[100.67687225 -103.09002686]
[94.72365570 -89.32197571]
[102.14247894 -88.22149658]
[113.96767426 -97.44997406]
[125.79286957 -106.67844391]
[137.61807251 -115.90692139]
[149.44326782 -125.13539124]
[151.12889099 -140.84953308]
[163.48464966 -150.70401001]
[179.18008423 -148.85235596]
[188.90338135 -136.39309692]
[186.88587952 -120.71810913]
[174.32452393 -111.12708282]
[158.67173767 -113.31019592]
[146.84654236 -104.08172607]
[135.02134705 -94.85324860]
[123.19615173 -85.62477875]
[111.37094879 -76.39630127]
[104.79170990 -62.91618729]
[104.79170990 -47.91618729]
[104.79170990 -32.91618729]
[104.79170990 -17.91618538]
[104.97578430 -2.91731548]
[105.34390259 12.07816696]
[105.71202087 27.07364845]
[106.08013916 42.06912994]
[106.44825745 57.06461334]
[106.81637573 72.06009674]
[117.95194244 74.88275909]
[127.78932953 82.22688293]
[134.48368835 93.44832611]
[136.51980591 107.15589905]
[133.00923157 121.37949371]
[144.83442688 130.60797119]
[156.65962219 139.83644104]
[172.96659851 141.57279968]
[179.36810303 156.67091370]
[169.27882385 169.59912109]
[153.07774353 167.05799866]
[147.43115234 151.66163635]
[135.60595703 142.43316650]
[123.78076172 133.20469666]
[116.50552368 135.02703857]
[126.93723297 145.80569458]
[122.81858063 160.22917175]
[108.26818085 163.87414551]
[97.83627319 153.09568787]
[101.95505524 138.67173767]
[94.67982483 140.49409485]
[88.60120392 154.20724487]
[82.52258301 167.92039490]
[84.00370026 183.67211914]
[71.77256775 192.17204285]
[65.69394684 205.88517761]
[77.22849274 215.63868713]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 126]
[20 125]
[22 123]
[23 122]
[24 121]
[27 100]
[28 99]
[29 98]
[30 97]
[31 96]
[32 95]
[34 94]
[35 93]
[36 92]
[37 91]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[75 90]
[76 89]
[77 88]
[78 87]
[79 86]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
