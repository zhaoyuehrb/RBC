%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:45:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACGAGUCAGGGGUCGGAAUAAAUUUUAGUAUAUUUUGUGGGCAAUUCCCAGAAAUUAAUGGCUAUGAGUUCUUUUUUGAUCAACUCAAACUAUGUCGACCCCAAGUUCCCUCCAUGCGAGGAAUAUUCACAGAGCGAUUACCUACCCAGCGACCACU\
) } def
/len { sequence length } bind def

/coor [
[128.29374695 261.80340576]
[125.42057800 247.08116150]
[110.77125549 244.19557190]
[98.30901337 235.89871216]
[89.95015717 223.42898560]
[86.99430847 208.66921997]
[89.92243195 193.86247253]
[98.31887817 181.27108765]
[110.93006897 172.83110046]
[108.05690002 158.10884094]
[105.18372345 143.38658142]
[102.31055450 128.66432190]
[79.82192993 114.61633301]
[80.56855774 91.84302521]
[69.70951843 81.49501038]
[58.85049057 71.14699554]
[47.99145508 60.79898071]
[37.13242340 50.45096588]
[26.27338982 40.10295105]
[15.41435719 29.75493622]
[4.55532455 19.40692139]
[-10.77282333 15.48793602]
[-14.64883518 1.10649657]
[-25.50786781 -9.24151802]
[-36.36690140 -19.58953285]
[-48.94002914 -13.94403172]
[-63.06321716 -13.97515202]
[-76.23231506 -19.95707893]
[-85.99790955 -31.08442688]
[-90.41963959 -45.57035828]
[-88.44676208 -60.93082428]
[-102.50330353 -66.16663361]
[-116.55984497 -71.40243530]
[-130.61639404 -76.63824463]
[-150.28179932 -72.35256195]
[-162.01799011 -87.68461609]
[-176.26586914 -92.37482452]
[-191.79338074 -89.34053802]
[-201.46318054 -100.66944885]
[-215.71104431 -105.35965729]
[-229.95892334 -110.04986572]
[-245.48643494 -107.01557922]
[-255.15623474 -118.34449005]
[-269.40411377 -123.03469849]
[-283.65197754 -127.72491455]
[-297.89987183 -132.41511536]
[-312.81250000 -126.49963379]
[-326.66311646 -134.59527588]
[-328.82675171 -150.49176025]
[-317.64361572 -161.99467468]
[-301.69244385 -160.27995300]
[-293.20965576 -146.66299438]
[-278.96176147 -141.97277832]
[-264.71389771 -137.28257751]
[-250.46603394 -132.59236145]
[-235.95761108 -135.96212769]
[-225.26870728 -124.29774475]
[-211.02084351 -119.60752869]
[-196.77296448 -114.91732025]
[-182.26455688 -118.28708649]
[-171.57565308 -106.62269592]
[-157.32777405 -101.93248749]
[-148.60256958 -107.36225128]
[-138.10995483 -107.06100464]
[-129.35054016 -100.88613892]
[-125.38058472 -90.69478607]
[-111.32404327 -85.45897675]
[-97.26750183 -80.22317505]
[-83.21096039 -74.98736572]
[-70.97456360 -83.66322327]
[-71.26364899 -98.66043854]
[-71.55273438 -113.65765381]
[-71.84181976 -128.65486145]
[-72.13090515 -143.65208435]
[-72.85338593 -158.63467407]
[-74.00865173 -173.59011841]
[-86.17301941 -183.67990112]
[-87.55675507 -199.42349243]
[-77.33892822 -211.48051453]
[-61.58158112 -212.69772339]
[-49.63327408 -202.35298157]
[-48.58272552 -186.58364868]
[-59.05320740 -174.74539185]
[-57.89793777 -159.78994751]
[-55.42617035 -157.21234131]
[-54.10454941 -153.29124451]
[-54.55895615 -148.59193420]
[-57.13368988 -143.94116211]
[-56.84460449 -128.94395447]
[-56.55551910 -113.94673920]
[-56.26642990 -98.94952393]
[-55.97734451 -83.95230865]
[-37.20473480 -78.63495636]
[-24.28004456 -64.89434814]
[-20.39891815 -47.09558487]
[-26.01888657 -30.44856453]
[-15.15985298 -20.10055161]
[-4.30082035 -9.75253677]
[10.25061703 -6.57370996]
[14.90333939 8.54788876]
[25.76237106 18.89590263]
[36.62140656 29.24391747]
[47.48043823 39.59193420]
[58.33946991 49.93994522]
[69.19850159 60.28796005]
[80.05753326 70.63597870]
[90.91657257 80.98399353]
[105.25967407 76.95750427]
[120.42962646 83.60266876]
[128.75671387 99.81890106]
[143.67251587 101.40599060]
[158.58831787 102.99308777]
[173.50411987 104.58017731]
[188.50343323 104.72473145]
[203.44705200 103.42539215]
[218.39067078 102.12606049]
[233.33428955 100.82672119]
[244.71258545 89.51682281]
[260.63208008 91.50419617]
[268.88067627 105.26428986]
[263.13076782 120.24154663]
[247.79318237 124.94668579]
[234.63362122 115.77033997]
[219.69000244 117.06967926]
[204.74638367 118.36901093]
[189.80276489 119.66835022]
[202.38433838 127.83559418]
[209.31022644 141.14093018]
[208.78317261 156.13166809]
[200.93994141 168.91775513]
[187.81584167 176.18121338]
[172.81652832 176.03720093]
[159.83428955 168.52310181]
[152.23799133 155.58880615]
[151.99885559 140.59071350]
[159.17890930 127.42079163]
[171.91703796 119.49597931]
[157.00123596 117.90888977]
[142.08543396 116.32179260]
[127.16962433 114.73470306]
[117.03281403 125.79114532]
[119.90598297 140.51341248]
[122.77915192 155.23565674]
[125.65232849 169.95791626]
[140.51153564 173.03684998]
[153.02615356 181.54725647]
[161.30670166 194.16653442]
[164.11737061 208.95463562]
[161.06044006 223.65225220]
[152.63224792 236.02604675]
[140.14283752 244.20799255]
[143.01600647 258.93023682]
[157.69799805 263.25433350]
[168.68067932 273.91452026]
[173.44029236 288.46115112]
[170.88313293 303.55154419]
[161.59681702 315.71798706]
[147.71525574 322.16479492]
[132.42835999 321.41046143]
[119.24890900 313.62838745]
[111.20546722 300.60681152]
[110.14636230 285.33798218]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[9 144]
[10 143]
[11 142]
[12 141]
[14 107]
[15 106]
[16 105]
[17 104]
[18 103]
[19 102]
[20 101]
[21 100]
[23 98]
[24 97]
[25 96]
[31 69]
[32 68]
[33 67]
[34 66]
[36 62]
[37 61]
[39 59]
[40 58]
[41 57]
[43 55]
[44 54]
[45 53]
[46 52]
[70 92]
[71 91]
[72 90]
[73 89]
[74 88]
[75 84]
[76 83]
[110 140]
[111 139]
[112 138]
[113 137]
[114 126]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
