%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUCCCAGCCUCCUUUGCGGGUAAACAGACAUGGCCGGCGAAGGAGAUCAGCAGGACGCUGCGCACAACAUGGGCAACCACCUGCCGCUCCUGCCUGCAGAGAGUGAGGAAGAAGAUGAAAUGGAAGUUG\
) } def
/len { sequence length } bind def

/coor [
[112.61573792 204.17434692]
[106.53503418 190.12857056]
[107.68978882 174.86669922]
[115.81466675 161.89576721]
[129.04260254 154.19641113]
[128.32344055 139.21365356]
[127.60426331 124.23091125]
[107.00403595 133.40321350]
[86.65601349 128.56567383]
[74.47724915 113.61640930]
[59.86485291 117.00430298]
[45.25245667 120.39219666]
[30.64005661 123.78009796]
[16.02766037 127.16799164]
[1.41526198 130.55589294]
[-13.19713593 133.94378662]
[-27.80953407 137.33168030]
[-42.42193222 140.71957397]
[-54.11796188 151.37384033]
[-68.26390076 146.71104431]
[-82.87629700 150.09893799]
[-97.48870087 153.48684692]
[-101.29505157 168.31149292]
[-111.56336975 179.66139221]
[-125.93407440 184.92842102]
[-141.10487366 182.90223694]
[-153.58963013 174.04846191]
[-160.51945496 160.40162659]
[-160.30189514 145.09765625]
[-152.98696899 131.65332031]
[-140.25558472 123.15799713]
[-125.03332520 121.56387329]
[-110.81814575 127.23725128]
[-100.87659454 138.87443542]
[-86.26419830 135.48654175]
[-71.65179443 132.09864807]
[-61.00094604 121.68670654]
[-45.80982590 126.10717010]
[-31.19742775 122.71927643]
[-16.58503151 119.33138275]
[-1.97263312 115.94348907]
[12.63976479 112.55559540]
[27.25216293 109.16769409]
[41.86455917 105.77980042]
[56.47695923 102.39190674]
[71.08935547 99.00401306]
[73.76209259 84.47224426]
[83.61916351 72.45368195]
[98.77178955 66.41300964]
[115.72020721 68.53886414]
[130.15911865 79.03430939]
[131.95343018 64.14201355]
[133.74774170 49.24972153]
[135.54205322 34.35742950]
[137.33638000 19.46513367]
[125.16204071 10.20592594]
[119.29563141 -3.81127691]
[121.22025299 -18.78332329]
[130.31971741 -30.70203972]
[144.07063293 -36.42724228]
[145.86494446 -51.31953812]
[147.65925598 -66.21183014]
[141.62831116 -80.83845520]
[150.83250427 -92.54879761]
[152.62681580 -107.44109344]
[143.89202881 -120.89780426]
[149.10334778 -136.07086182]
[164.26309204 -141.32080078]
[177.74200439 -132.62030029]
[179.20021057 -116.64366150]
[167.51910400 -105.64678192]
[165.72479248 -90.75448608]
[171.88409424 -77.19305420]
[162.55155945 -64.41751862]
[160.75723267 -49.52522278]
[158.96292114 -34.63293076]
[170.96043396 -25.80539703]
[176.96850586 -12.06643391]
[175.28182983 2.93428254]
[166.25387573 15.15692139]
[152.22866821 21.25944710]
[150.43435669 36.15174103]
[148.64004517 51.04403687]
[146.84571838 65.93633270]
[145.05140686 80.82862854]
[155.59422302 91.49862671]
[170.50697327 89.88301086]
[185.41970825 88.26738739]
[200.33244324 86.65177155]
[215.24517822 85.03614807]
[230.13748169 83.24183655]
[245.00718689 81.26908112]
[259.87689209 79.29633331]
[272.54034424 68.87667084]
[287.79867554 74.88626862]
[289.95544434 91.14297485]
[276.79193115 100.92327118]
[261.84963989 94.16603851]
[246.97993469 96.13879395]
[232.11022949 98.11154175]
[225.83096313 102.14992523]
[216.86080933 99.94889069]
[201.94805908 101.56450653]
[187.03532410 103.18013000]
[172.12258911 104.79574585]
[157.20985413 106.41136932]
[171.07157898 112.14307404]
[184.93330383 117.87478638]
[199.92042542 117.25326538]
[213.84860229 122.82155609]
[224.27670288 133.60369873]
[229.37701416 147.70997620]
[228.25563049 162.66799927]
[221.10908508 175.85614014]
[209.18994141 184.96295166]
[194.58721924 188.39230347]
[179.86029053 185.54316711]
[167.59030151 176.91488647]
[159.92776489 164.01971436]
[158.21549988 149.11935425]
[150.40126038 136.31555176]
[142.58700562 123.51173401]
[143.30618286 138.49449158]
[144.02536011 153.47723389]
[157.92993164 159.87422180]
[167.25979614 172.00732422]
[169.87101746 187.08843994]
[165.16357422 201.65205383]
[154.21917725 212.35151672]
[139.55278015 216.72821045]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 124]
[6 123]
[7 122]
[10 46]
[11 45]
[12 44]
[13 43]
[14 42]
[15 41]
[16 40]
[17 39]
[18 38]
[20 36]
[21 35]
[22 34]
[51 85]
[52 84]
[53 83]
[54 82]
[55 81]
[60 76]
[61 75]
[62 74]
[64 72]
[65 71]
[86 106]
[87 105]
[88 104]
[89 103]
[90 102]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
