%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACACCCUGACCCGCAUCGCCCUGGGUCUCUCGAGCCUGCUGCCUGCUCCCCCGCCCCACCAGCCAUGGUGGUUUCUGGAGCGCCCCCAGCCCUGGGUGGGGGCUGUCUCGGCACCUUCACCUCCCUGCUGCUGCUGGCGUCGACAGCCAUCCUCAAUGCGGCCA\
) } def
/len { sequence length } bind def

/coor [
[78.02515411 594.45574951]
[68.34953308 606.12445068]
[55.26492310 613.77746582]
[40.35137177 616.49072266]
[25.40975189 613.93652344]
[12.24434090 606.42333984]
[2.44492602 594.85845947]
[-2.80516577 580.63830566]
[-2.87196064 565.48010254]
[2.25260735 551.21423340]
[11.94972134 539.56341553]
[25.04840851 531.93450928]
[39.96693802 529.24871826]
[42.49443436 514.46319580]
[45.02192688 499.67770386]
[47.54942322 484.89215088]
[50.07691956 470.10662842]
[52.60441208 455.32110596]
[39.59230804 447.97467041]
[29.86053848 436.59829712]
[24.59833527 422.55252075]
[24.45888329 407.52581787]
[29.47831726 393.33160400]
[39.06901932 381.68948364]
[52.08834839 374.01687622]
[66.97476196 371.25640869]
[69.50225067 356.47088623]
[67.52120209 349.31713867]
[72.21886444 341.43212891]
[75.02404022 326.69674683]
[69.80339813 312.74703979]
[79.98498535 300.63729858]
[82.79016113 285.90194702]
[85.59533691 271.16659546]
[88.40051270 256.43121338]
[91.06697083 241.67012024]
[93.59446716 226.88459778]
[96.12195587 212.09907532]
[90.63983154 198.25004578]
[100.59182739 185.95092773]
[103.11931610 171.16539001]
[97.63719177 157.31637573]
[107.58918762 145.01724243]
[110.11668396 130.23171997]
[86.98095703 127.27895355]
[73.23121643 109.99333954]
[75.32072449 89.24678802]
[65.70294952 77.73599243]
[56.08517838 66.22519684]
[46.46740341 54.71440506]
[36.84962845 43.20360947]
[23.26565361 47.18629837]
[9.23307991 45.68730164]
[-3.12688661 38.96649933]
[-11.95858765 28.07060623]
[-15.95049667 14.67025280]
[-14.52990913 0.80389833]
[-7.94485521 -11.43226719]
[-17.34440041 -23.12194443]
[-26.74394608 -34.81161880]
[-36.14349365 -46.50129700]
[-45.54303741 -58.19097519]
[-54.94258499 -69.88065338]
[-70.41947174 -75.30264282]
[-73.19603729 -91.46502686]
[-60.41598892 -101.74133301]
[-45.22634506 -95.56017303]
[-43.25290680 -79.28019714]
[-33.85336304 -67.59052277]
[-24.45381546 -55.90084457]
[-15.05426979 -44.21116638]
[-5.65472412 -32.52148819]
[3.74482155 -20.83181381]
[19.21670341 -24.74865150]
[34.90693665 -21.52448273]
[47.67289352 -11.75341797]
[54.93518829 2.65400529]
[55.19877243 18.84423256]
[48.36042023 33.58583450]
[57.97819901 45.09663010]
[67.59597015 56.60742569]
[77.21374512 68.11821747]
[86.83152008 79.62901306]
[101.68247223 77.51968384]
[107.71470642 63.78607178]
[113.74693298 50.05245590]
[119.77916718 36.31884003]
[125.81139374 22.58522606]
[131.84362793 8.85161018]
[137.87585449 -4.88200474]
[138.46908569 -14.04113293]
[144.15289307 -18.81554794]
[150.44239807 -32.43326187]
[151.59460449 -49.34801102]
[168.16728210 -52.92331314]
[176.19062805 -37.98804474]
[164.06011963 -26.14375687]
[157.77061462 -12.52604389]
[151.60948181 1.15022600]
[145.57723999 14.88384151]
[139.54501343 28.61745644]
[133.51278687 42.35107040]
[127.48055267 56.08468628]
[121.44831848 69.81830597]
[115.41609192 83.55191803]
[119.94908142 89.52703094]
[131.82710266 80.36665344]
[143.84873962 71.39556122]
[152.91484070 83.34569550]
[141.03674316 92.50621796]
[129.01507568 101.47724915]
[133.54806519 107.45236206]
[148.39901733 105.34303284]
[163.24996948 103.23371124]
[178.10092163 101.12438202]
[182.67463684 86.56265259]
[193.11976624 75.43332672]
[207.36242676 69.94612885]
[222.57473755 71.19055939]
[235.73626709 78.91952515]
[244.23377991 91.59844208]
[246.38011169 106.70989227]
[241.74908447 121.25349426]
[231.26020813 132.34159851]
[216.99604797 137.77267456]
[201.78877258 136.46835327]
[188.65777588 128.68760681]
[180.21025085 115.97533417]
[165.35929871 118.08465576]
[150.50834656 120.19398499]
[135.65739441 122.30331421]
[124.90220642 132.75921631]
[122.37471008 147.54473877]
[127.67605591 162.45132446]
[117.90484619 173.69288635]
[115.37734985 188.47840881]
[120.67869568 203.38500977]
[110.90748596 214.62655640]
[108.37998962 229.41209412]
[105.85249329 244.19761658]
[107.49457550 253.22784424]
[103.13587952 259.23638916]
[100.33070374 273.97177124]
[97.52552795 288.70712280]
[94.72035217 303.44247437]
[99.74035645 318.44616699]
[89.75940704 329.50192261]
[86.95423126 344.23730469]
[84.28778076 358.99838257]
[81.76028442 373.78390503]
[94.88440704 381.33261108]
[104.61575317 392.89431763]
[109.79456329 407.06118774]
[109.81393433 422.11672974]
[104.69081116 436.24383545]
[95.06168365 447.74401855]
[82.10351562 455.24169922]
[67.38993835 457.84860229]
[64.86244202 472.63412476]
[62.33494949 487.41964722]
[59.80745316 502.20520020]
[57.27995682 516.99072266]
[54.75246429 531.77624512]
[67.93169403 539.26513672]
[77.75241089 550.81195068]
[83.02869415 565.02239990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 163]
[14 162]
[15 161]
[16 160]
[17 159]
[18 158]
[26 150]
[27 149]
[29 148]
[30 147]
[32 145]
[33 144]
[34 143]
[35 142]
[36 140]
[37 139]
[38 138]
[40 136]
[41 135]
[43 133]
[44 132]
[47 83]
[48 82]
[49 81]
[50 80]
[51 79]
[58 73]
[59 72]
[60 71]
[61 70]
[62 69]
[63 68]
[84 105]
[85 104]
[86 103]
[87 102]
[88 101]
[89 100]
[90 99]
[92 98]
[93 97]
[112 131]
[113 130]
[114 129]
[115 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
