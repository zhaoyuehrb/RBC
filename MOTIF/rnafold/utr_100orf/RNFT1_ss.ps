%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:54:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCGCGCGCGCCGCCGCCGUUGCCGCCGGGCUGAGAGAAGAGCUUGCGGGGUUUGCGGUUGAUGGCCCCGACUGAAGGGCUGGAGGCGGUGUAUGCCGCUGUUCUUGCUGUCGCUCCCGACACCUCCGUCCGCUUCUGGUCAUGAGAGGAGACAGAGGCCUGAAGCAAAGACAUCUGGGUCAGAGAAAAAGU\
) } def
/len { sequence length } bind def

/coor [
[310.62371826 144.45658875]
[298.37527466 127.38093567]
[283.44604492 125.92578888]
[268.51678467 124.47064209]
[253.58753967 123.01549530]
[246.61531067 125.49919128]
[238.42900085 121.41399384]
[223.52526855 119.71728516]
[208.59600830 118.26213837]
[193.64515686 117.04893494]
[178.69430542 115.83572388]
[163.74343872 114.62252045]
[148.79258728 113.40930939]
[133.84173584 112.19610596]
[118.89086914 110.98290253]
[103.94001770 109.76969147]
[89.05050659 111.58701324]
[74.83037567 116.36066437]
[60.61023331 121.13430786]
[46.39009857 125.90795135]
[32.16996002 130.68159485]
[20.31454849 144.76309204]
[3.26540661 140.63017273]
[-10.87556648 145.63345337]
[-25.01654053 150.63674927]
[-32.07511520 156.45748901]
[-39.42720032 155.60453796]
[-53.64733887 160.37817383]
[-67.86747742 165.15182495]
[-82.00845337 170.15510559]
[-96.06655121 175.38671875]
[-110.12464905 180.61834717]
[-124.18275452 185.84996033]
[-128.22250366 200.83195496]
[-140.31803894 210.55191040]
[-155.81838989 211.27230835]
[-168.76333618 202.71614075]
[-174.17529297 188.17344666]
[-169.97325134 173.23616028]
[-157.77297974 163.64797974]
[-142.26573181 163.09577942]
[-129.41436768 171.79185486]
[-115.35626984 166.56024170]
[-101.29816437 161.32862854]
[-87.24006653 156.09701538]
[-84.46898651 152.19136047]
[-79.20888519 149.99305725]
[-72.64112091 150.93168640]
[-58.42098618 146.15803528]
[-44.20084763 141.38439941]
[-30.01982689 136.49577332]
[-15.87885284 131.49247742]
[-1.73787999 126.48919678]
[3.76028299 115.70435333]
[15.51190567 111.42517853]
[27.39631462 116.46145630]
[41.61645126 111.68781281]
[55.83658981 106.91416931]
[70.05672455 102.14052582]
[84.27686310 97.36688232]
[86.08080292 90.08705902]
[71.52121735 86.47894287]
[75.12957764 71.91941833]
[89.68867493 75.52741241]
[91.49261475 68.24758911]
[81.14675903 57.38650131]
[70.80090332 46.52541351]
[60.45504379 35.66432571]
[50.10918808 24.80323601]
[34.74712372 26.99108505]
[21.04875374 19.70175934]
[14.28137684 5.73815584]
[17.04718781 -9.53043652]
[28.28267670 -20.23293304]
[43.66756821 -22.25400352]
[57.28606033 -14.81650639]
[63.90155792 -0.78031158]
[60.97027588 14.45737839]
[71.31613159 25.31846809]
[81.66198730 36.17955780]
[92.00784302 47.04064560]
[102.35370636 57.90173340]
[107.87189484 67.48956299]
[110.06984711 77.40670776]
[109.05950928 86.78565979]
[105.15322113 94.81883240]
[120.10408020 96.03204346]
[135.05493164 97.24524689]
[150.00579834 98.45845795]
[164.95664978 99.67166138]
[179.90750122 100.88486481]
[194.85836792 102.09807587]
[209.80921936 103.31127930]
[215.95840454 100.82050323]
[221.59283447 101.68907928]
[225.22196960 104.81355286]
[240.12570190 106.51026154]
[255.04267883 108.08624268]
[269.97192383 109.54138947]
[284.90118408 110.99653625]
[299.83044434 112.45168304]
[305.23825073 104.35794830]
[313.17959595 98.82957458]
[322.53454590 96.59465790]
[332.00241089 97.92045593]
[340.28262329 102.58211517]
[346.25341797 109.89955139]
[349.12365723 118.83629608]
[363.92739868 121.25476074]
[378.73114014 123.67322540]
[388.49371338 111.89868927]
[402.74502563 106.62642670]
[417.62298584 109.17843628]
[429.14883423 118.77065277]
[434.29119873 132.74998474]
[449.09497070 135.16844177]
[463.89871216 137.58691406]
[474.81561279 130.70037842]
[487.10342407 133.02883911]
[494.26852417 142.78611755]
[509.03115845 145.44398499]
[523.79382324 148.10185242]
[532.80877686 146.54153442]
[538.77313232 150.92413330]
[553.49084473 153.82069397]
[565.72351074 142.14906311]
[582.33709717 140.08377075]
[596.76599121 148.24157715]
[603.42651367 163.23826599]
[618.18920898 165.89613342]
[632.95184326 168.55400085]
[651.57775879 160.86880493]
[665.80718994 173.94903564]
[680.64813232 176.12745667]
[695.48913574 178.30589294]
[710.33007812 180.48431396]
[725.17108154 182.66275024]
[739.94860840 177.01165771]
[751.41723633 186.51528931]
[766.25823975 188.69371033]
[781.09918213 190.87214661]
[795.94018555 193.05056763]
[812.88464355 185.85867310]
[826.21771240 197.25968933]
[841.09204102 199.19750977]
[851.65985107 187.83528137]
[866.89440918 184.88771057]
[880.93768311 191.48820496]
[888.38970947 205.09872437]
[886.38513184 220.48577881]
[875.69464111 231.73269653]
[860.42901611 234.51483154]
[846.45819092 227.76239014]
[839.15423584 214.07182312]
[824.27990723 212.13398743]
[814.49633789 219.26310730]
[802.08038330 217.76084900]
[793.76171875 207.89154053]
[778.92077637 205.71311951]
[764.07977295 203.53468323]
[749.23883057 201.35626221]
[735.52282715 207.16316223]
[722.99261475 197.50370789]
[708.15167236 195.32528687]
[693.31066895 193.14685059]
[678.46972656 190.96842957]
[663.62872314 188.79000854]
[655.99786377 195.61195374]
[645.65350342 197.13186646]
[635.98461914 192.60726929]
[630.29394531 183.31663513]
[615.53131104 180.65878296]
[600.76867676 178.00091553]
[592.02416992 188.09974670]
[579.32849121 192.59159851]
[565.96545410 190.20109558]
[555.44787598 181.44789124]
[550.59423828 168.53837585]
[535.87658691 165.64179993]
[521.13592529 162.86450195]
[506.37329102 160.20663452]
[491.61065674 157.54876709]
[475.45092773 164.37644958]
[461.48025513 152.39065552]
[446.67648315 149.97219849]
[431.87274170 147.55372620]
[422.54888916 159.16973877]
[408.56964111 164.59523010]
[393.65304565 162.27975464]
[381.82052612 152.74621582]
[376.31268311 138.47697449]
[361.50894165 136.05851746]
[346.70516968 133.64004517]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 101]
[3 100]
[4 99]
[5 98]
[7 97]
[8 96]
[9 93]
[10 92]
[11 91]
[12 90]
[13 89]
[14 88]
[15 87]
[16 86]
[17 60]
[18 59]
[19 58]
[20 57]
[21 56]
[23 53]
[24 52]
[25 51]
[27 50]
[28 49]
[29 48]
[30 45]
[31 44]
[32 43]
[33 42]
[65 82]
[66 81]
[67 80]
[68 79]
[69 78]
[108 193]
[109 192]
[110 191]
[115 186]
[116 185]
[117 184]
[120 182]
[121 181]
[122 180]
[124 179]
[125 178]
[129 173]
[130 172]
[131 171]
[133 167]
[134 166]
[135 165]
[136 164]
[137 163]
[139 161]
[140 160]
[141 159]
[142 158]
[144 155]
[145 154]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
