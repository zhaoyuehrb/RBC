%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:37:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCAAAUCUCACAAUCGUGACUGAAUUUAUCCUUAUGGGGUUUUCUACCAAUAAAAAUAUGUGCAUUUUGCAUUCGAUUCUCUUCUUGUUGAUUUAUU\
) } def
/len { sequence length } bind def

/coor [
[101.19575500 226.48461914]
[107.44976807 212.51515198]
[119.48651886 203.06130981]
[116.70330811 188.32177734]
[113.92008972 173.58224487]
[111.13687134 158.84272766]
[108.35365295 144.10319519]
[85.30088806 145.08538818]
[63.56052780 134.17076111]
[49.15532684 113.03280640]
[46.70793915 86.31097412]
[33.87586594 94.07872009]
[21.04378891 101.84646606]
[8.21171474 109.61421204]
[0.78679073 124.23619843]
[-15.60098839 124.84671021]
[-24.09328079 110.81770325]
[-15.95394421 96.58101654]
[0.44397017 96.78213501]
[13.27604485 89.01438904]
[26.10811996 81.24665070]
[38.94019318 73.47890472]
[39.52282333 66.00156403]
[24.53756332 66.66638184]
[9.55230331 67.33119202]
[-4.93426609 71.22211456]
[-16.47352982 61.63851547]
[-15.30842304 46.68383408]
[-2.42410731 39.00305176]
[11.28524876 45.09093857]
[25.98666573 48.06892014]
[40.68807983 51.04689789]
[41.27070999 43.56956100]
[29.79672241 33.90790558]
[13.56557178 31.56658745]
[7.72970963 16.24096298]
[18.29257011 3.69672108]
[34.38798904 6.83830261]
[39.45837784 22.43391800]
[50.93236542 32.09557343]
[63.51665878 23.93251038]
[59.37213135 9.51644611]
[55.22760773 -4.89961767]
[41.94337845 -13.89455223]
[40.83702087 -29.89941216]
[52.75723648 -40.63663864]
[68.55985260 -37.86954880]
[76.12245941 -23.72081947]
[69.64366913 -9.04414368]
[73.78820038 5.37192059]
[77.93272400 19.78798485]
[84.73276520 22.95174789]
[88.00703430 8.31346893]
[91.28129578 -6.32480907]
[91.95726013 -21.30957031]
[103.02152252 -31.43784904]
[118.00753021 -30.79012108]
[128.15664673 -19.74495697]
[127.53714752 -4.75775576]
[116.50946808 5.41275358]
[107.42116547 17.34601402]
[98.33285522 29.27927208]
[105.13290405 32.44303513]
[118.82975006 26.32778168]
[132.52659607 20.21252632]
[146.22344971 14.09727287]
[159.92030334 7.98201847]
[171.91838074 -3.99638939]
[186.75007629 4.21685362]
[182.96362305 20.74256516]
[166.03555298 21.67886734]
[152.33869934 27.79412079]
[138.64184570 33.90937424]
[124.94500732 40.02463150]
[111.24815369 46.13988495]
[137.08346558 64.05692291]
[147.53135681 91.61313629]
[140.97735596 118.32298279]
[154.67419434 124.43824005]
[169.34320068 118.55641937]
[183.84178162 124.84663391]
[189.56819153 139.57701111]
[183.12503052 154.00827026]
[168.33494568 159.57861328]
[153.97261047 152.98324585]
[148.55894470 138.13508606]
[134.86209106 132.01983643]
[123.09318542 141.31997681]
[125.87640381 156.05950928]
[128.65962219 170.79904175]
[131.44284058 185.53855896]
[134.22604370 200.27809143]
[148.88136292 204.69175720]
[159.79873657 215.41880798]
[164.46943665 229.99423218]
[161.82017517 245.06872559]
[152.45973206 257.17825317]
[138.53907776 263.54016113]
[123.25705719 262.69250488]
[110.12538147 254.83007812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 92]
[4 91]
[5 90]
[6 89]
[7 88]
[11 22]
[12 21]
[13 20]
[14 19]
[33 40]
[34 39]
[41 51]
[42 50]
[43 49]
[63 75]
[64 74]
[65 73]
[66 72]
[67 71]
[78 87]
[79 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
