%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:20:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGUUUGCGUUUUCACCUGGUCGCCCGGCGGCCAUGGCGGCCGUUCUGAAGCCGGUGCUGCUGGGCCUUCGAGAUGCGCCGGUGCACGGCAGCCCCACAGGGCCGGGUGCCUGGACUGCUAGCAAGCUGGGCG\
) } def
/len { sequence length } bind def

/coor [
[127.06180573 505.95602417]
[125.65718079 491.02194214]
[124.25255585 476.08786011]
[122.84793854 461.15374756]
[121.44331360 446.21966553]
[120.03868866 431.28558350]
[118.63407135 416.35150146]
[117.22944641 401.41738892]
[102.75453186 397.70767212]
[90.39904785 389.25360107]
[81.66513824 377.05963135]
[77.62261200 362.58621216]
[78.77796173 347.57504272]
[85.01100159 333.83935547]
[95.58700562 323.04489136]
[109.24331665 316.50802612]
[107.83869171 301.57394409]
[98.94358826 289.62713623]
[105.35462189 275.16305542]
[103.95000458 260.22897339]
[100.15624237 253.80412292]
[102.69171143 244.92895508]
[101.63756561 229.96604919]
[100.58342743 215.00312805]
[99.52928162 200.04022217]
[98.47513580 185.07730103]
[97.42099762 170.11439514]
[96.36685181 155.15147400]
[95.31271362 140.18856812]
[80.30833435 135.34585571]
[68.29402924 125.13608551]
[61.09409332 111.10954285]
[59.80179977 95.39607239]
[64.61337280 80.38169098]
[74.79821014 68.34622955]
[88.80979156 61.11721802]
[87.40516663 46.18312836]
[86.00054169 31.24904060]
[77.00497437 18.23403931]
[83.51647186 4.83815813]
[82.11185455 -10.09593105]
[80.70722961 -25.03002167]
[79.30260468 -39.96411133]
[77.89798737 -54.89820099]
[68.76157379 -58.74280548]
[61.73272705 -65.64913940]
[57.77522278 -74.60985565]
[57.40930557 -84.34037781]
[60.64368057 -93.46306610]
[66.98036194 -100.70222473]
[75.49083710 -105.06250000]
[75.49083710 -120.06250000]
[75.49083710 -135.06250000]
[75.49083710 -150.06250000]
[75.49083710 -165.06250000]
[75.49083710 -180.06250000]
[75.49083710 -195.06250000]
[75.49083710 -210.06250000]
[64.59629059 -221.19561768]
[64.80996704 -236.40776062]
[75.49083710 -246.72543335]
[75.49083710 -261.72543335]
[67.75354004 -275.52560425]
[75.49083710 -288.25286865]
[75.49083710 -303.25286865]
[69.44450378 -319.09201050]
[82.99083710 -329.28677368]
[96.53717804 -319.09201050]
[90.49083710 -303.25286865]
[90.49083710 -288.25286865]
[98.22814178 -275.52560425]
[90.49083710 -261.72543335]
[90.49083710 -246.72543335]
[101.17171478 -236.40776062]
[101.38539124 -221.19561768]
[90.49083710 -210.06250000]
[90.49083710 -195.06250000]
[90.49083710 -180.06250000]
[90.49083710 -165.06250000]
[90.49083710 -150.06250000]
[90.49083710 -135.06250000]
[90.49083710 -120.06250000]
[90.49083710 -105.06250000]
[106.14089966 -92.04090118]
[107.30938721 -71.42649841]
[92.83207703 -56.30282211]
[94.23669434 -41.36873245]
[95.64131927 -26.43464279]
[97.04594421 -11.50055408]
[98.45056152 3.43353581]
[107.34566498 15.38035202]
[100.93463135 29.84441757]
[102.33925629 44.77850723]
[103.74388123 59.71259689]
[117.29549408 63.42189789]
[128.76156616 71.54189301]
[136.75949097 83.09344482]
[140.32484436 96.68363953]
[139.02772522 110.67372894]
[133.02452087 123.37674713]
[123.03913879 133.26092529]
[110.27562714 139.13441467]
[111.32976532 154.09733582]
[112.38391113 169.06024170]
[113.43804932 184.02316284]
[114.49219513 198.98606873]
[115.54634094 213.94898987]
[116.60047913 228.91191101]
[117.65462494 243.87481689]
[118.88409424 258.82434082]
[120.28871155 273.75842285]
[129.28428650 286.77343750]
[122.77278137 300.16931152]
[124.17740631 315.10339355]
[138.81307983 318.97927856]
[151.21633911 327.61242676]
[159.90122986 339.94500732]
[163.83529663 354.47750854]
[162.56237793 369.45083618]
[156.25532532 383.05950928]
[145.69288635 393.66912842]
[132.16352844 400.01278687]
[133.56816101 414.94686890]
[134.97277832 429.88095093]
[136.37739563 444.81503296]
[137.78202820 459.74914551]
[139.18664551 474.68322754]
[140.59126282 489.61730957]
[141.99589539 504.55139160]
[153.38569641 515.84973145]
[151.51057434 531.78283691]
[137.80895996 540.12817383]
[122.79154968 534.48394775]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 129]
[2 128]
[3 127]
[4 126]
[5 125]
[6 124]
[7 123]
[8 122]
[16 114]
[17 113]
[19 111]
[20 110]
[22 109]
[23 108]
[24 107]
[25 106]
[26 105]
[27 104]
[28 103]
[29 102]
[36 94]
[37 93]
[38 92]
[40 90]
[41 89]
[42 88]
[43 87]
[44 86]
[51 83]
[52 82]
[53 81]
[54 80]
[55 79]
[56 78]
[57 77]
[58 76]
[61 73]
[62 72]
[64 70]
[65 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
