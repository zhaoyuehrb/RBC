%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:58:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAGACAGCCAGACCCCCGGGGACCCAGCCUCUCACAGUCAGUCCUCCCACCCGAGUGACCCCGAUGGCGGCCUCCCAGCUGGCGGCGCUGGAAGGAGUGGACUCCGGUCCCAGGGUGCCCGGGGCCAGCCCCGGCUUUCUAUAUUCCGAGGGCCAGCGGCUGG\
) } def
/len { sequence length } bind def

/coor [
[188.34239197 318.54187012]
[181.46081543 331.87017822]
[170.49528503 342.10528564]
[156.72494507 348.05322266]
[141.75614929 349.02017212]
[127.33501434 344.89331055]
[115.14379883 336.15408325]
[106.60462189 323.82189941]
[102.71360016 309.33535767]
[103.92462921 294.38433838]
[110.09643555 280.71286011]
[120.50907135 269.91577148]
[133.94787598 263.25256348]
[148.84519958 261.50051880]
[163.46324158 264.86398315]
[176.09803772 272.95178223]
[169.51681519 259.47262573]
[162.93557739 245.99348450]
[156.35433960 232.51434326]
[149.77310181 219.03518677]
[143.19186401 205.55604553]
[136.61062622 192.07690430]
[124.07373047 184.03479004]
[124.97173309 168.23908997]
[118.39049530 154.75994873]
[111.80925751 141.28079224]
[105.22801971 127.80165863]
[81.56681061 121.45883942]
[71.72786713 99.02494812]
[57.41030502 94.55197906]
[43.09274292 90.07901001]
[31.29765320 95.36888885]
[19.44568253 91.31665039]
[13.73723507 80.62042999]
[-0.49311525 75.87731171]
[-13.10000992 84.73013306]
[-28.32443810 84.46520996]
[-40.33158112 75.39369202]
[-44.64304733 61.16170883]
[-58.87339783 56.41859436]
[-73.10375214 51.67547989]
[-87.33409882 46.93236542]
[-102.87277985 49.90894318]
[-112.50041962 38.54418182]
[-126.73076630 33.80106735]
[-138.68257141 43.55597305]
[-154.01351929 45.27798462]
[-167.83158875 38.41761780]
[-175.72746277 25.16399193]
[-175.18161011 9.74628830]
[-166.36820984 -2.91575956]
[-152.09957886 -8.78173733]
[-136.92878723 -5.97983360]
[-125.69678497 4.59587479]
[-121.98765564 19.57071686]
[-107.75730133 24.31383324]
[-93.23647308 20.99799347]
[-82.59098053 32.70201492]
[-68.36063385 37.44512939]
[-54.13028336 42.18824387]
[-39.89993286 46.93135834]
[-27.91194534 38.13214874]
[-12.86331940 38.07857895]
[-0.52444530 47.00077438]
[4.24999952 61.64696503]
[18.48035049 66.39007568]
[35.43495560 61.93482971]
[47.56571198 75.76145172]
[61.88327408 80.23442078]
[76.20083618 84.70738983]
[77.50285339 76.80922699]
[81.29687500 68.85304260]
[87.63928223 61.58781433]
[88.77371216 46.63077164]
[89.90814209 31.67373085]
[83.23669434 17.32792091]
[91.91438293 5.22226095]
[93.04881287 -9.73478031]
[94.18324280 -24.69182014]
[95.31767273 -39.64886093]
[96.45210266 -54.60590363]
[85.14182281 -65.40457916]
[83.47029114 -80.95257568]
[92.22675323 -93.90858459]
[107.27668762 -98.15518951]
[121.51396179 -91.68727112]
[128.21617126 -77.55877686]
[124.21875000 -62.44075394]
[111.40914917 -53.47146988]
[110.27471161 -38.51443100]
[109.14028168 -23.55739021]
[108.00585175 -8.60034847]
[106.87142181 6.35669184]
[113.62401581 19.63267517]
[104.86518097 32.80816269]
[103.73075104 47.76520538]
[102.59632111 62.72224426]
[109.23977661 66.20283508]
[121.91177368 58.17659378]
[122.52668762 73.16400909]
[129.17015076 76.64459991]
[140.82138062 67.19744110]
[152.47261047 57.75028610]
[164.12384033 48.30312729]
[169.48265076 32.80424881]
[185.63357544 29.96176910]
[195.96192932 42.69978714]
[189.84278870 57.91452026]
[173.57099915 59.95435715]
[161.91976929 69.40151978]
[150.26853943 78.84867096]
[138.61729431 88.29582977]
[136.19493103 103.14110565]
[128.84428406 114.55817413]
[118.70716858 121.22042084]
[125.28840637 134.69956970]
[131.86964417 148.17871094]
[138.45088196 161.65785217]
[151.45849609 170.66407776]
[150.08976746 185.49566650]
[156.67100525 198.97480774]
[163.25224304 212.45394897]
[169.83348083 225.93310547]
[176.41471863 239.41224670]
[182.99595642 252.89138794]
[189.57719421 266.37054443]
[198.11611938 278.70288086]
[208.41738892 289.60626221]
[218.71865845 300.50964355]
[229.01992798 311.41302490]
[239.32119751 322.31640625]
[249.62246704 333.21981812]
[267.09402466 333.38345337]
[278.82690430 345.87152100]
[277.93725586 362.64584351]
[288.44302368 373.35235596]
[298.94879150 384.05883789]
[309.45455933 394.76531982]
[319.96029663 405.47183228]
[330.46606445 416.17831421]
[340.97183228 426.88479614]
[356.29977417 424.46942139]
[370.10470581 431.55484009]
[377.07839966 445.41656494]
[374.53927612 460.72448730]
[363.46371460 471.59240723]
[348.11047363 473.84136963]
[334.38320923 466.60659790]
[327.56030273 452.67004395]
[330.26535034 437.39056396]
[319.75958252 426.68408203]
[309.25381470 415.97760010]
[298.74804688 405.27108765]
[288.24227905 394.56460571]
[277.73654175 383.85812378]
[267.23077393 373.15161133]
[254.42962646 374.83093262]
[242.83195496 368.72741699]
[236.79074097 356.87802124]
[238.71908569 343.52108765]
[228.41781616 332.61767578]
[218.11654663 321.71429443]
[207.81527710 310.81091309]
[197.51400757 299.90753174]
[187.21273804 289.00415039]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 126]
[17 125]
[18 124]
[19 123]
[20 122]
[21 121]
[22 120]
[24 118]
[25 117]
[26 116]
[27 115]
[29 70]
[30 69]
[31 68]
[34 66]
[35 65]
[39 61]
[40 60]
[41 59]
[42 58]
[44 56]
[45 55]
[73 97]
[74 96]
[75 95]
[77 93]
[78 92]
[79 91]
[80 90]
[81 89]
[101 112]
[102 111]
[103 110]
[104 109]
[127 165]
[128 164]
[129 163]
[130 162]
[131 161]
[132 160]
[135 156]
[136 155]
[137 154]
[138 153]
[139 152]
[140 151]
[141 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
