%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:55:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGAAAGAGAAAACAGGCCGCGCGGGCGGCAGAGGAGCCGGGCGCCGCAAUGGACGUGCGGGCGCUGCCGUGGCUGCCGUGGCUGCUGUGGCUGCUGUGCCGGGGCGGCGGCGAUGCGGACUCCCGCGCCCCCUUCACCCCGACCUGGC\
) } def
/len { sequence length } bind def

/coor [
[119.03113556 209.88832092]
[113.07103729 223.82579041]
[102.70121765 234.88212585]
[89.17388153 241.72222900]
[74.12252045 243.52012634]
[59.36466599 240.05870056]
[46.68239212 231.75593567]
[37.60715103 219.61445618]
[33.23481750 205.10037231]
[34.09337616 189.96635437]
[40.07915115 176.03988647]
[50.46932602 165.00267029]
[64.00924683 158.18751526]
[79.06388855 156.41735840]
[82.48915100 141.81367493]
[85.91441345 127.20999908]
[89.33968353 112.60631561]
[82.26658630 100.72792816]
[86.59271240 86.55528259]
[100.88589478 79.79325104]
[92.06911469 67.65798950]
[83.25233459 55.52273941]
[74.43556213 43.38748169]
[65.61878204 31.25222778]
[56.80200195 19.11697388]
[49.17379761 13.97003365]
[47.93080139 6.63398123]
[39.37009811 -5.68325663]
[30.80939293 -18.00049400]
[22.12017632 -30.22741127]
[13.30339622 -42.36266708]
[-1.06774855 -48.97937012]
[-2.28904390 -63.82381821]
[-11.10582256 -75.95907593]
[-25.47696877 -82.57577515]
[-26.69826317 -97.42022705]
[-35.51504135 -109.55548096]
[-44.33182144 -121.69073486]
[-53.14859772 -133.82598877]
[-61.96537781 -145.96124268]
[-70.90875244 -158.00350952]
[-79.97773743 -169.95146179]
[-89.04672241 -181.89941406]
[-98.24033356 -193.75173950]
[-107.55754852 -205.50714111]
[-116.87476349 -217.26254272]
[-126.19197845 -229.01794434]
[-135.50920105 -240.77334595]
[-150.90538025 -240.25962830]
[-163.50460815 -248.81022644]
[-168.59286499 -262.97262573]
[-164.41604614 -277.24468994]
[-173.73326111 -289.00009155]
[-181.57029724 -293.82308960]
[-183.11941528 -301.10064697]
[-192.18840027 -313.04861450]
[-201.25738525 -324.99655151]
[-216.57659912 -330.84921265]
[-218.90013123 -347.08291626]
[-205.83770752 -356.99783325]
[-190.82685852 -350.39434814]
[-189.30943298 -334.06555176]
[-180.24044800 -322.11758423]
[-171.17146301 -310.16964722]
[-161.97785950 -298.31732178]
[-152.66064453 -286.56192017]
[-137.81185913 -287.36935425]
[-125.18556213 -279.18151855]
[-119.73792267 -264.96264648]
[-123.75379944 -250.09056091]
[-114.43657684 -238.33515930]
[-105.11936188 -226.57975769]
[-95.80214691 -214.82435608]
[-86.48493195 -203.06895447]
[-79.82125092 -199.75865173]
[-77.09877777 -190.96839905]
[-68.02979279 -179.02044678]
[-58.96080399 -167.07249451]
[-52.36790848 -163.62336731]
[-49.83012390 -154.77803040]
[-41.01334381 -142.64277649]
[-32.19656754 -130.50752258]
[-23.37978745 -118.37226105]
[-14.56300831 -106.23700714]
[-0.82249808 -100.48829651]
[1.02943230 -84.77585602]
[9.84621143 -72.64060211]
[23.58672142 -66.89189148]
[25.43865204 -51.17944717]
[34.25543213 -39.04418945]
[40.77464294 -35.45774841]
[43.12663269 -26.56119919]
[51.68733597 -14.24396038]
[60.24803925 -1.92672217]
[68.93725586 10.30019474]
[77.75403595 22.43544960]
[86.57081604 34.57070541]
[95.38758850 46.70595932]
[104.20436859 58.84121323]
[113.02114868 70.97647095]
[124.87347412 80.17007446]
[138.82012939 85.69194031]
[152.76676941 91.21381378]
[166.71340942 96.73567963]
[180.66006470 102.25754547]
[196.33943176 100.14376831]
[205.32466125 112.02294922]
[219.27130127 117.54482269]
[234.95066833 115.43104553]
[243.93589783 127.31022644]
[257.88253784 132.83209229]
[270.95916748 124.68910980]
[286.14572144 125.79453278]
[297.63348389 135.51539612]
[301.15228271 149.96379089]
[315.09893799 155.48565674]
[329.04559326 161.00753784]
[342.99221802 166.52940369]
[356.93887329 172.05126953]
[373.07421875 169.12165833]
[383.47119141 181.80374146]
[377.43426514 197.05128479]
[361.17370605 199.17890930]
[351.41702271 185.99790955]
[337.47036743 180.47604370]
[323.52371216 174.95417786]
[309.57705688 169.43231201]
[295.63043213 163.91044617]
[283.17471313 172.03407288]
[268.14611816 171.25637817]
[256.31887817 161.66627502]
[252.36067200 146.77873230]
[238.41403198 141.25686646]
[223.73222351 143.76560974]
[213.74943542 131.49147034]
[199.80279541 125.96959686]
[185.12098694 128.47833252]
[175.13819885 116.20419312]
[161.19154358 110.68232727]
[147.24490356 105.16046143]
[133.29824829 99.63858795]
[119.35160828 94.11672211]
[115.96511078 109.08247375]
[103.94336700 116.03157806]
[100.51810455 130.63525391]
[97.09283447 145.23893738]
[93.66757202 159.84262085]
[106.36512756 168.12199402]
[115.46273041 180.24673462]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 147]
[15 146]
[16 145]
[17 144]
[20 100]
[21 99]
[22 98]
[23 97]
[24 96]
[25 95]
[27 94]
[28 93]
[29 92]
[30 90]
[31 89]
[33 87]
[34 86]
[36 84]
[37 83]
[38 82]
[39 81]
[40 80]
[41 78]
[42 77]
[43 76]
[44 74]
[45 73]
[46 72]
[47 71]
[48 70]
[52 66]
[53 65]
[55 64]
[56 63]
[57 62]
[101 142]
[102 141]
[103 140]
[104 139]
[105 138]
[107 136]
[108 135]
[110 133]
[111 132]
[115 128]
[116 127]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
