%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGACAUCACCAUCCUCCUCCCCAGUACCAGCCCAGCCACACGCCACCAUGUGCCACACCAGCUGCUCCCCAGCCUGCCAGCCAACCUGCUGCAUACACAGCCCCUGCCAGGCAUCCUGCUAUGUGCCCGUGAGCUGCCAGUCCUCCG\
) } def
/len { sequence length } bind def

/coor [
[37.74519348 486.00756836]
[27.34560966 496.84881592]
[15.59378338 506.20712280]
[2.69943881 513.91552734]
[-11.10731030 519.83642578]
[-25.58006477 523.86419678]
[-40.46054077 525.92687988]
[-55.48318481 525.98779297]
[-70.37989044 524.04571533]
[-84.88481140 520.13537598]
[-98.73909760 514.32659912]
[-111.69549561 506.72296143]
[-123.52278900 497.46020508]
[-134.00990295 486.70364380]
[-142.96966553 474.64520264]
[-150.24221802 461.50009155]
[-155.69773865 447.50292969]
[-159.23887634 432.90350342]
[-160.80244446 417.96231079]
[-160.36053467 402.94604492]
[-157.92103577 388.12268066]
[-153.52746582 373.75674438]
[-147.25825500 360.10461426]
[-139.22528076 347.40994263]
[-129.57188416 335.89929199]
[-118.47036743 325.77804565]
[-106.11882782 317.22683716]
[-92.73770905 310.39828491]
[-78.56580353 305.41427612]
[-63.85602570 302.36370850]
[-48.87089539 301.30105591]
[-33.87783432 302.24526978]
[-19.14441109 305.17947388]
[-4.93356228 310.05136108]
[1.77748191 296.63638306]
[8.48852634 283.22140503]
[15.19957066 269.80639648]
[21.76881981 256.32141113]
[28.19554520 242.76791382]
[34.62226868 229.21443176]
[29.39198685 215.31552124]
[35.71652603 201.47879028]
[50.33044434 196.08703613]
[56.75717163 182.53353882]
[63.04065704 168.91304016]
[69.18020630 155.22706604]
[65.74727631 136.23825073]
[82.12738037 124.56526947]
[87.68452454 110.63263702]
[84.82471466 94.13188171]
[98.04187775 83.84791565]
[103.30403900 69.80122375]
[108.56620026 55.75452805]
[113.82836151 41.70783234]
[119.09052277 27.66113472]
[110.63763428 16.72516632]
[108.72489929 3.14571595]
[113.74797821 -9.49807453]
[124.28865814 -17.92726326]
[137.51322937 -20.01331902]
[143.07037354 -33.94594955]
[148.62751770 -47.87858200]
[142.63275146 -62.25566483]
[148.46694946 -76.30617523]
[162.21025085 -81.93266296]
[167.76737976 -95.86529541]
[173.32452393 -109.79792786]
[163.98629761 -118.16542816]
[157.70100403 -128.98658752]
[155.07002258 -141.19584656]
[156.33572388 -153.59638977]
[161.35929871 -164.97741699]
[169.63574219 -174.23237610]
[180.34457397 -180.46655273]
[192.43124390 -183.08358765]
[204.71087646 -181.84245300]
[211.13760376 -195.39595032]
[217.56431580 -208.94944763]
[218.42706299 -218.11268616]
[224.27207947 -222.71875000]
[230.98312378 -236.13374329]
[237.69416809 -249.54872131]
[232.46243286 -264.46194458]
[239.38348389 -278.67022705]
[254.35119629 -283.74398804]
[268.48547363 -276.67309570]
[273.40072632 -261.65258789]
[266.18078613 -247.59384155]
[251.10916138 -242.83767700]
[244.39811707 -229.42269897]
[237.68707275 -216.00770569]
[231.11781311 -202.52272034]
[224.69108582 -188.96922302]
[218.26437378 -175.41572571]
[229.85755920 -162.15129089]
[234.54335022 -145.11471558]
[231.34530640 -127.68389130]
[220.85482788 -113.33549500]
[205.12243652 -104.95159912]
[187.25715637 -104.24079132]
[181.70001221 -90.30815887]
[176.14286804 -76.37552643]
[182.24127197 -62.83502197]
[176.80401611 -48.62619019]
[162.56013489 -42.32144547]
[157.00300598 -28.38881302]
[151.44586182 -14.45618057]
[160.64158630 -0.89528084]
[159.95996094 15.64117050]
[149.47138977 28.65744019]
[133.13722229 32.92329788]
[127.87506104 46.96999359]
[122.61289978 61.01668930]
[117.35073853 75.06338501]
[112.08857727 89.11007690]
[116.27032471 100.02536774]
[112.05456543 110.92755890]
[101.61714935 116.18977356]
[96.06001282 130.12240601]
[100.95676422 139.93013000]
[99.63597107 150.59036255]
[92.78070068 158.57182312]
[82.86618042 161.36662292]
[76.72663116 175.05259705]
[76.05727386 184.23199463]
[70.31066132 188.96026611]
[63.88393784 202.51374817]
[68.95792389 217.24102783]
[62.24723434 230.89463806]
[48.17576218 235.64115906]
[41.74903870 249.19464111]
[35.32231522 262.74813843]
[34.45957565 271.91137695]
[28.61455727 276.51745605]
[21.90351295 289.93243408]
[15.19246960 303.34741211]
[8.48142529 316.76242065]
[20.90186310 325.21322632]
[32.08505249 335.24417114]
[41.83141708 346.67620850]
[49.96702576 359.30535889]
[56.34667969 372.90621948]
[60.85653687 387.23605347]
[63.41610718 402.03918457]
[63.97970963 417.05136108]
[62.53729630 432.00473022]
[59.11459732 446.63238525]
[53.77270126 460.67330933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[34 137]
[35 136]
[36 135]
[37 134]
[38 132]
[39 131]
[40 130]
[43 127]
[44 126]
[45 124]
[46 123]
[48 119]
[49 118]
[51 115]
[52 114]
[53 113]
[54 112]
[55 111]
[60 107]
[61 106]
[62 105]
[65 102]
[66 101]
[67 100]
[76 94]
[77 93]
[78 92]
[80 91]
[81 90]
[82 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
