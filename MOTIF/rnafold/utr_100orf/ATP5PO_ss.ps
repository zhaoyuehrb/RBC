%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGAACCUAGCGGUUACGCCAACGCGCGCGUGCGCCCUUGCGCGUUUCUCUCUUCCCACUCGGGUUUGACCUACAGCCGCCCGGGAGAAGAUGGCUGCCCCAGCAGUGUCCGGGCUCUCCCGGCAGGUGCGAUGCUUCAGUACCUCUGUGGUCAGACCAUUUGCCAAGCUUGUGAGGCCUCCUGUUCAGG\
) } def
/len { sequence length } bind def

/coor [
[5.28074646 615.00488281]
[-3.76465392 627.76086426]
[-18.90621185 631.66821289]
[-32.99454498 624.88195801]
[-39.37757492 610.60644531]
[-35.04142761 595.58203125]
[-22.03350258 586.90289307]
[-20.56324577 571.97509766]
[-19.09298897 557.04736328]
[-17.74490738 542.10803223]
[-16.51909065 527.15820312]
[-15.29327488 512.20837402]
[-14.06745911 497.25857544]
[-12.84164333 482.30874634]
[-23.73533440 474.57522583]
[-29.42714119 462.36914062]
[-28.33160591 448.83718872]
[-20.62850189 437.52667236]
[-8.24371433 431.45550537]
[-6.77345753 416.52774048]
[-5.30320024 401.59997559]
[-13.40018940 386.03829956]
[-2.57091761 371.15426636]
[-1.34510148 356.20443726]
[-0.11928536 341.25460815]
[-6.79061985 327.93759155]
[2.04856586 314.81588745]
[3.27438188 299.86605835]
[-8.62591839 290.73461914]
[-22.74907875 295.78799438]
[-36.87224197 300.84133911]
[-50.99539948 305.89468384]
[-65.11856079 310.94802856]
[-79.24172211 316.00137329]
[-85.77150726 330.39364624]
[-100.59481812 335.87496948]
[-114.91725159 329.19338989]
[-120.24155426 314.31295776]
[-113.40892029 300.06198120]
[-98.47302246 294.89529419]
[-84.29507446 301.87820435]
[-70.17191315 296.82485962]
[-56.04874802 291.77151489]
[-41.92558670 286.71817017]
[-27.80242729 281.66482544]
[-13.67926598 276.61148071]
[-28.01086617 281.03924561]
[-43.00709152 280.70285034]
[-57.12572479 275.63687134]
[-68.91479492 266.36230469]
[-77.16191101 253.83291626]
[-81.01892853 239.33728027]
[-80.08918762 224.36613464]
[-74.46830750 210.45909119]
[-64.73434448 199.04637146]
[-51.88834763 191.30168152]
[-37.25139618 188.02148438]
[-22.32877541 189.54310608]
[-8.65512943 195.71006775]
[2.36333179 205.88815308]
[9.59346390 219.03065491]
[12.29171562 233.78596497]
[10.18059635 248.63667297]
[3.47759628 262.05496216]
[10.76404667 248.94360352]
[18.05049706 235.83224487]
[25.33694839 222.72088623]
[32.62340164 209.60954285]
[39.90985107 196.49818420]
[47.19630051 183.38682556]
[54.48275375 170.27546692]
[61.76920319 157.16412354]
[62.27114105 149.77836609]
[69.28365326 143.89926147]
[76.78365326 130.90887451]
[84.28365326 117.91850281]
[91.78365326 104.92811584]
[84.34925079 99.92540741]
[81.48014069 88.65046692]
[87.26641083 75.29802704]
[90.43308258 60.63610077]
[93.59975433 45.97417068]
[92.35198975 36.90872955]
[96.94004822 31.09916687]
[100.34619141 16.49101257]
[103.75233459 1.88285756]
[107.15848541 -12.72529697]
[110.56462860 -27.33345222]
[113.97077179 -41.94160461]
[103.98950195 -53.67534256]
[102.84468842 -68.85897827]
[110.76637268 -81.65393829]
[124.53839874 -87.26368713]
[127.94454193 -101.87184143]
[131.35067749 -116.47999573]
[134.39729309 -131.16734314]
[137.08255005 -145.92503357]
[139.76780701 -160.68272400]
[142.45306396 -175.44041443]
[136.42190552 -190.69024658]
[146.82366943 -203.36839294]
[162.95790100 -200.43266296]
[168.22709656 -184.90309143]
[157.21075439 -172.75515747]
[154.52549744 -157.99746704]
[151.84024048 -143.23977661]
[149.15498352 -128.48208618]
[150.86351013 -125.38038635]
[151.14515686 -121.29326630]
[149.55158997 -116.90475464]
[145.95883179 -113.07385254]
[142.55268860 -98.46569824]
[139.14654541 -83.85754395]
[149.01718140 -72.73509979]
[150.46284485 -57.75597763]
[142.72055054 -44.64452744]
[128.57891846 -38.53546143]
[125.17278290 -23.92730713]
[121.76663971 -9.31915283]
[118.36048889 5.28900146]
[114.95434570 19.89715576]
[111.54820251 34.50531006]
[108.26168823 49.14084244]
[105.09501648 63.80277252]
[101.92833710 78.46469879]
[112.79204559 88.80780792]
[127.28092957 84.92552185]
[141.76982117 81.04323578]
[156.25871277 77.16094971]
[170.74758911 73.27867126]
[185.23648071 69.39638519]
[199.69313049 65.39569092]
[214.11654663 61.27686310]
[225.12619019 49.12285614]
[241.09745789 52.84451294]
[245.60047913 68.61330414]
[234.00292969 80.20765686]
[218.23538208 75.70028687]
[203.81195068 79.81911469]
[198.23451233 84.68671417]
[189.11877441 83.88526917]
[174.62988281 87.76755524]
[160.14099121 91.64984131]
[145.65209961 95.53212738]
[131.16322327 99.41441345]
[116.67433167 103.29669952]
[104.77403259 112.42811584]
[97.27403259 125.41850281]
[89.77403259 138.40887451]
[82.27403259 151.39926147]
[74.88056183 164.45056152]
[67.59410858 177.56192017]
[60.30765533 190.67327881]
[53.02120590 203.78463745]
[45.73475647 216.89598083]
[38.44830322 230.00733948]
[31.16185379 243.11869812]
[23.87540245 256.23004150]
[16.58895111 269.34140015]
[27.08704567 258.62741089]
[41.49812317 254.46556091]
[56.09179688 257.93322754]
[67.09041595 268.13275146]
[71.64693451 282.42395020]
[68.58186340 297.10745239]
[58.68861389 308.38235474]
[44.52811432 313.33010864]
[29.76588058 310.66995239]
[18.22421074 301.09185791]
[16.99839401 316.04168701]
[23.58205032 330.42800903]
[14.83054352 342.48040771]
[13.60472679 357.43023682]
[12.37891102 372.38006592]
[20.11765099 382.71188354]
[18.77904510 395.14770508]
[9.62457085 403.07022095]
[8.15431309 417.99798584]
[6.68405628 432.92575073]
[19.47573090 443.98059082]
[23.12727928 460.31808472]
[16.39428139 475.46340942]
[2.10818553 483.53454590]
[0.88236940 498.48437500]
[-0.34344670 513.43420410]
[-1.56926286 528.38403320]
[-2.79507899 543.33386230]
[-0.37471229 552.15887451]
[-4.16521835 558.51763916]
[-5.63547564 573.44537354]
[-7.10573244 588.37316895]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 191]
[8 190]
[9 189]
[10 187]
[11 186]
[12 185]
[13 184]
[14 183]
[19 179]
[20 178]
[21 177]
[23 174]
[24 173]
[25 172]
[27 170]
[28 169]
[29 46]
[30 45]
[31 44]
[32 43]
[33 42]
[34 41]
[64 159]
[65 158]
[66 157]
[67 156]
[68 155]
[69 154]
[70 153]
[71 152]
[72 151]
[74 150]
[75 149]
[76 148]
[77 147]
[80 125]
[81 124]
[82 123]
[84 122]
[85 121]
[86 120]
[87 119]
[88 118]
[89 117]
[93 113]
[94 112]
[95 111]
[96 107]
[97 106]
[98 105]
[99 104]
[126 146]
[127 145]
[128 144]
[129 143]
[130 142]
[131 141]
[132 139]
[133 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
