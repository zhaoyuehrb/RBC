%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACGUCCACCUGCACCAACAGCACGCGCGAGAGUAACAGCAGCCACACGUGCAUGCCCCUCUCCAAAAUGCCCAUCAGCCUGGCCCACGGCAUCAUCC\
) } def
/len { sequence length } bind def

/coor [
[83.39302063 187.09605408]
[74.75334930 174.83407593]
[73.07710266 159.92803955]
[78.77761078 146.05345154]
[90.44813538 136.63200378]
[77.38069153 143.99691772]
[64.31324768 151.36183167]
[63.73162842 165.23326111]
[56.39056778 176.88888550]
[44.32346344 183.30319214]
[30.77310562 182.87493896]
[19.32048607 175.82553101]
[6.03031635 182.78048706]
[-7.25985384 189.73544312]
[-11.73993778 204.89144897]
[-25.66445923 212.36695862]
[-40.77224731 207.72688293]
[-48.10012054 193.72410583]
[-43.30057907 178.66621399]
[-29.22110748 171.48680115]
[-14.21480656 176.44526672]
[-0.92463648 169.49032593]
[12.36553383 162.53536987]
[14.18846798 146.30328369]
[25.39253235 134.19161987]
[41.75799561 131.05010986]
[56.94833755 138.29438782]
[70.01578522 130.92947388]
[83.08322144 123.56456757]
[74.17664337 98.30417633]
[89.26360321 79.94287109]
[86.94013214 65.12390900]
[84.61666107 50.30495453]
[82.29318237 35.48599625]
[79.96971130 20.66704178]
[66.31523895 13.53531170]
[59.55735016 -0.10962455]
[62.09983444 -14.94201374]
[72.76109314 -25.30905533]
[70.43762207 -40.12801361]
[67.88396454 -54.90904236]
[65.10075378 -69.64857483]
[62.31753540 -84.38809967]
[48.23258209 -90.89914703]
[40.69412613 -104.46201324]
[42.60085297 -119.86149597]
[53.21958923 -131.17617798]
[68.46721649 -134.05534363]
[82.48070526 -127.39187622]
[89.87158966 -113.74803162]
[87.79792023 -98.37014008]
[77.05706024 -87.17131805]
[79.84027863 -72.43178558]
[82.62349701 -57.69225693]
[87.03543854 -51.59633636]
[85.25657654 -42.45148468]
[87.58004761 -27.63252831]
[100.90261841 -21.02592278]
[107.86265564 -7.68344164]
[105.60518646 7.37501860]
[94.78866577 18.34356880]
[97.11214447 33.16252518]
[99.43561554 47.98148346]
[101.75908661 62.80043793]
[104.08255768 77.61939240]
[114.13018036 80.59866333]
[122.25454712 88.06445312]
[126.48001862 98.85438538]
[125.50215912 110.95711517]
[119.03890228 121.88574982]
[132.73574829 128.00100708]
[146.43260193 134.11625671]
[160.12945557 140.23152161]
[173.82629395 146.34677124]
[184.79455566 137.51193237]
[198.44320679 134.31790161]
[212.06295776 137.33947754]
[222.97579956 145.92350769]
[229.06161499 158.32897949]
[229.16998291 172.07989502]
[242.67001343 178.61816406]
[259.56079102 180.08047485]
[262.83145142 196.71594238]
[247.75151062 204.46394348]
[236.13175964 192.11819458]
[222.63171387 185.57992554]
[209.56996155 194.95338440]
[193.47575378 196.52038574]
[178.68147278 189.76510620]
[169.21676636 176.42469788]
[167.71104431 160.04362488]
[154.01419067 153.92835999]
[140.31735229 147.81311035]
[126.62049866 141.69786072]
[112.92365265 135.58259583]
[125.42209625 143.87649536]
[132.39009094 157.15983582]
[132.10946655 172.15721130]
[124.64942169 185.17057800]
[111.84944916 192.99110413]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 29]
[6 28]
[7 27]
[12 23]
[13 22]
[14 21]
[31 65]
[32 64]
[33 63]
[34 62]
[35 61]
[39 57]
[40 56]
[41 54]
[42 53]
[43 52]
[70 95]
[71 94]
[72 93]
[73 92]
[74 91]
[80 86]
[81 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
