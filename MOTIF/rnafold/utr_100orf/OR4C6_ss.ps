%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:15:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAAAUCAAAACAAUGUGACUGAAUUCAUUCUUCUGGGUCUCACAGAGAACCUGGAGCUGUGGAAAAUAUUUUCUGCUGUGUUUCUUGUCAUGUAUG\
) } def
/len { sequence length } bind def

/coor [
[37.60232162 385.45751953]
[29.74931717 398.36126709]
[18.57807541 408.52886963]
[4.99420214 415.13607788]
[-9.90112114 417.64724731]
[-24.90039635 415.85885620]
[-38.78770065 409.91583252]
[-50.43725204 400.29995728]
[-58.90467072 387.79080200]
[-63.50354767 373.40237427]
[-63.86106491 358.30108643]
[-59.94824600 343.71112061]
[-52.08228302 330.81527710]
[-40.90083313 320.65890503]
[-27.31032753 314.06533813]
[-12.41248894 311.56912231]
[2.58498287 313.37261963]
[8.48648643 299.58230591]
[14.38799095 285.79202271]
[20.28949356 272.00170898]
[26.19099808 258.21142578]
[32.09250259 244.42112732]
[37.99400711 230.63082886]
[34.90191269 213.43373108]
[49.53288651 202.38920593]
[55.00265884 188.42204285]
[60.47243118 174.45487976]
[55.90325546 163.13496399]
[60.48575974 151.38653564]
[72.24083710 145.80308533]
[78.14234161 132.01278687]
[84.04384613 118.22248840]
[76.31762695 105.07971191]
[77.97409058 89.92440796]
[88.35696411 78.76094055]
[85.57374573 64.02140808]
[82.79052734 49.28187943]
[80.00730896 34.54235077]
[77.22409821 19.80282402]
[74.44087982 5.06329441]
[71.65766144 -9.67623425]
[68.87445068 -24.41576195]
[65.86234283 -39.11022568]
[62.62207413 -53.75606537]
[59.38180542 -68.40190887]
[50.05669022 -82.56095123]
[61.08094406 -95.44125366]
[76.50969696 -88.41345215]
[74.02764893 -71.64217377]
[77.26791382 -56.99633408]
[80.50817871 -42.35049057]
[85.10756683 -36.39472961]
[83.61397552 -27.19897842]
[86.39719391 -12.45945072]
[89.18041229 2.28007841]
[91.96362305 17.01960754]
[94.74684143 31.75913620]
[97.53005981 46.49866486]
[100.31327057 61.23819351]
[103.09648895 75.97772217]
[109.78760529 77.84461975]
[115.67363739 81.53394318]
[120.27040100 86.74221039]
[134.74917603 82.82238770]
[149.22795105 78.90255737]
[163.70672607 74.98272705]
[178.18550110 71.06289673]
[192.66427612 67.14306641]
[207.14305115 63.22323990]
[218.31901550 51.22199249]
[234.23751831 55.16321945]
[238.52297974 70.99252319]
[226.76687622 82.42607880]
[211.06288147 77.70201874]
[196.58410645 81.62184906]
[182.10533142 85.54167175]
[167.62655640 89.46150208]
[153.14778137 93.38133240]
[138.66900635 97.30116272]
[124.19023132 101.22099304]
[115.88726044 118.28258514]
[97.83413696 124.12399292]
[91.93263245 137.91429138]
[86.03113556 151.70458984]
[88.70822906 169.83964539]
[74.43959045 179.92465210]
[68.96981812 193.89181519]
[63.50004578 207.85897827]
[67.95924377 220.08486938]
[62.98213196 231.67161560]
[51.78430176 236.53233337]
[45.88279724 250.32263184]
[39.98129272 264.11291504]
[34.07978821 277.90322876]
[28.17828560 291.69351196]
[22.27678299 305.48382568]
[16.37527847 319.27410889]
[28.03448296 328.87826538]
[36.51446533 341.37890625]
[41.12779236 355.76272583]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 97]
[18 96]
[19 95]
[20 94]
[21 93]
[22 92]
[23 91]
[25 88]
[26 87]
[27 86]
[30 84]
[31 83]
[32 82]
[35 60]
[36 59]
[37 58]
[38 57]
[39 56]
[40 55]
[41 54]
[42 53]
[43 51]
[44 50]
[45 49]
[63 80]
[64 79]
[65 78]
[66 77]
[67 76]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
