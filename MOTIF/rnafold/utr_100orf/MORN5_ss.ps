%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:20:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAUAGUGAUGCCGUAUCCACUGAGACUCCGGAUCCUAACAGCUGGAAGCUAAAAACAGGCGCCAUGGAGUACACAGGGAGCAAAUAUAUCGGGGAAUAUGUAGAUGGGAGGAUGGAGGGCAAAGCCAAGUACAUCCUCCCUACCGAAACAAUAUAUGUUGGGG\
) } def
/len { sequence length } bind def

/coor [
[-6.34156609 258.20584106]
[-14.16693878 271.00286865]
[-21.99231148 283.79986572]
[-22.59078789 299.60974121]
[-35.83145523 306.43133545]
[-43.65682602 319.22836304]
[-51.48220062 332.02536011]
[-59.30757141 344.82238770]
[-67.13294220 357.61938477]
[-59.72116852 371.07156372]
[-60.04451370 386.42706299]
[-68.01600647 399.55529785]
[-81.49135590 406.92489624]
[-96.84574890 406.55340576]
[-109.94895172 398.54080200]
[-117.27624512 385.04241943]
[-116.85664368 369.68927002]
[-108.80300903 356.61123657]
[-95.28172302 349.32629395]
[-79.92995453 349.79400635]
[-72.10458374 336.99700928]
[-64.27921295 324.19998169]
[-56.45383835 311.40298462]
[-48.62846756 298.60595703]
[-48.58971405 283.71142578]
[-34.78932571 275.97448730]
[-26.96395111 263.17749023]
[-19.13857841 250.38047791]
[-23.92555046 243.07675171]
[-26.06797981 234.56600952]
[-25.30201149 225.77946472]
[-21.68364716 217.68821716]
[-15.58570671 211.19586182]
[-7.65959454 207.03761292]
[1.23421049 205.69715881]
[10.11955452 207.35046387]
[19.11904526 195.35008240]
[28.11853790 183.34970093]
[37.11803055 171.34931946]
[46.11751938 159.34893799]
[55.11701202 147.34855652]
[64.11650085 135.34817505]
[48.51435089 110.55305481]
[49.03270340 80.02368927]
[35.20182419 74.21793365]
[21.37094498 68.41217804]
[9.60776424 78.20433044]
[-5.36107588 81.39688110]
[-20.09584618 77.25621796]
[-31.21060562 66.73382568]
[-36.15126419 52.24767685]
[-33.78248978 37.12658310]
[-24.64861679 24.84525681]
[-10.84853649 18.22586250]
[4.44659090 18.78948402]
[17.72205734 26.40660858]
[25.92725754 39.32687378]
[27.17669868 54.58129883]
[41.00757599 60.38705444]
[54.83845520 66.19281006]
[65.34421539 55.48631668]
[59.27776718 41.76778412]
[46.62026596 32.27577209]
[48.54927063 17.50660706]
[42.48281479 3.78807354]
[29.82531738 -5.70393705]
[31.75431824 -20.47310257]
[25.68786621 -34.19163513]
[10.61767673 -38.36576843]
[1.79896402 -51.27949524]
[3.39565611 -66.83535004]
[14.65384293 -77.68833160]
[30.25775337 -78.71399689]
[42.83969879 -69.42805481]
[46.45886612 -54.21504593]
[39.40639877 -40.25808716]
[45.47285080 -26.53955460]
[57.69643784 -18.02878380]
[56.20135117 -2.27837849]
[62.26780319 11.44015503]
[74.49138641 19.95092392]
[72.99629974 35.70133209]
[79.06275177 49.41986465]
[89.79670715 46.77340698]
[100.73345947 46.35583878]
[111.41963196 48.13980484]
[121.42121124 52.00759506]
[130.34115601 57.75781250]
[137.83514404 65.11539459]
[143.62484741 73.74450684]
[147.50807190 83.26372528]
[162.24023438 80.44185638]
[176.97241211 77.61997986]
[191.70458984 74.79811096]
[178.03164673 68.62961578]
[167.89544678 57.57260513]
[162.93611145 43.41615677]
[163.95606995 28.45087624]
[170.79031372 15.09822845]
[182.33300781 5.51875353]
[196.71646118 1.26246560]
[211.61337280 3.01805758]
[224.61332703 10.50146484]
[233.61283875 22.50182724]
[237.15574646 37.07741547]
[234.66879272 51.86981201]
[226.55436707 64.48552704]
[214.12304688 72.88423920]
[229.12036133 73.16810608]
[244.11767578 73.45196533]
[259.11499023 73.73582458]
[274.11230469 74.01969147]
[289.10961914 74.30355072]
[304.10693359 74.58740997]
[319.10424805 74.87127686]
[334.10156250 75.15513611]
[344.56042480 60.38878250]
[361.62957764 54.87221909]
[378.45562744 60.62321091]
[388.40045166 75.17463684]
[403.39776611 74.89077759]
[418.39508057 74.60691071]
[434.11697388 68.26191711]
[444.56625366 81.61289978]
[434.62966919 95.34973907]
[418.67895508 89.60422516]
[403.68164062 89.88808441]
[388.68432617 90.17195129]
[383.26068115 101.08813477]
[373.64288330 108.69380951]
[361.62957764 111.48798370]
[349.50109863 108.87693024]
[339.58682251 101.29900360]
[333.81768799 90.15245056]
[318.82037354 89.86859131]
[303.82305908 89.58472443]
[288.82574463 89.30086517]
[273.82843018 89.01700592]
[258.83111572 88.73313904]
[243.83381653 88.44927979]
[228.83650208 88.16542053]
[213.83918762 87.88155365]
[208.90747070 91.92321014]
[201.78981018 92.83323669]
[194.52647400 89.53028870]
[179.79429626 92.35215759]
[165.06211853 95.17403412]
[150.32994080 97.99590302]
[149.63807678 108.55453491]
[146.75569153 118.73564911]
[141.80996704 128.08996582]
[135.01916504 136.20466614]
[126.68295288 142.72164917]
[117.16923523 147.35331726]
[106.89782715 149.89527893]
[96.32202148 150.23536682]
[85.90852356 148.35855103]
[76.11688232 144.34767151]
[67.11739349 156.34805298]
[58.11790085 168.34843445]
[49.11841202 180.34881592]
[40.11891937 192.34919739]
[31.11942673 204.34957886]
[22.11993599 216.34996033]
[26.89439392 237.59326172]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[5 24]
[6 23]
[7 22]
[8 21]
[9 20]
[36 164]
[37 163]
[38 162]
[39 161]
[40 160]
[41 159]
[42 158]
[44 60]
[45 59]
[46 58]
[61 83]
[62 82]
[64 80]
[65 79]
[67 77]
[68 76]
[91 148]
[92 147]
[93 146]
[94 145]
[108 142]
[109 141]
[110 140]
[111 139]
[112 138]
[113 137]
[114 136]
[115 135]
[116 134]
[120 128]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
