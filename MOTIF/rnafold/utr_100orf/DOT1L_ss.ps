%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGCCUAGCAUGGUGCGGCGGCCGCGCGCGCGGACAUGGGGGAGAAGCUGGAGCUGAGACUGAAGUCGCCCGUGGGGGCUGAGCCCGCCGUCUACCCGUGGCCGCUGCCGGUCUACGAUAAACAUCACGAUGCUG\
) } def
/len { sequence length } bind def

/coor [
[104.39989471 790.76342773]
[94.85889435 803.15307617]
[79.57513428 806.46075439]
[65.76514435 799.12463379]
[59.94956970 784.60870361]
[64.87435150 769.76684570]
[78.21416473 761.60699463]
[80.27147675 746.74871826]
[82.32878876 731.89050293]
[84.38610840 717.03222656]
[86.44342041 702.17401123]
[88.50073242 687.31573486]
[82.58215332 673.64752197]
[92.13909149 661.03900146]
[94.19640350 646.18072510]
[96.25371552 631.32250977]
[96.94141388 616.33825684]
[96.25371552 601.35406494]
[85.11104584 591.53692627]
[84.20016479 576.35058594]
[94.57284546 564.72967529]
[93.88514709 549.74542236]
[93.19744873 534.76123047]
[92.50975037 519.77697754]
[91.82205200 504.79275513]
[88.34247589 498.19726562]
[91.29437256 489.45788574]
[90.95043182 474.46182251]
[90.60649109 459.46575928]
[87.27906036 452.79223633]
[90.43056488 444.12280273]
[90.43056488 429.12280273]
[90.43056488 414.12280273]
[90.43056488 399.12280273]
[82.69326019 386.39553833]
[90.43056488 372.59536743]
[90.43056488 357.59536743]
[90.43056488 342.59536743]
[90.43056488 327.59536743]
[90.43056488 312.59536743]
[90.43056488 297.59536743]
[90.25858307 282.59634399]
[89.91464233 267.60028076]
[89.57070160 252.60423279]
[79.06507874 245.05595398]
[74.78728485 232.64099121]
[78.52256775 219.84875488]
[89.11448669 211.44375610]
[89.11448669 196.44375610]
[85.94094849 189.69567871]
[89.29040527 181.10079956]
[89.63434601 166.10473633]
[86.61637878 159.28567505]
[90.16203308 150.76985168]
[90.84973145 135.78562927]
[91.53742981 120.80139923]
[77.86983490 112.58097839]
[71.86610413 95.73219299]
[78.49539185 77.04395294]
[75.08576202 62.43661499]
[71.67612457 47.82927322]
[60.07421112 36.23929596]
[64.57128906 20.46880722]
[80.54115295 16.74113464]
[91.55537415 28.89098930]
[86.28347015 44.41963959]
[89.69309998 59.02698135]
[93.10273743 73.63432312]
[108.09879303 73.97826385]
[112.17453766 59.54260254]
[116.25028229 45.10694122]
[120.32602692 30.67127991]
[115.77159882 14.91725731]
[127.33126831 3.28514290]
[143.11343384 7.74105883]
[146.88276672 23.70114136]
[134.76168823 34.74702454]
[130.68594360 49.18268585]
[126.61019897 63.61834717]
[122.53445435 78.05400848]
[128.34211731 97.45948792]
[121.10482025 114.23417664]
[106.52165222 121.48909760]
[105.83395386 136.47332764]
[105.14625549 151.45755005]
[104.63040161 166.44868469]
[104.28646851 181.44473267]
[104.11448669 196.44375610]
[104.11448669 211.44375610]
[116.69537354 223.53791809]
[116.68144226 240.65258789]
[104.56675720 252.26029968]
[104.91069794 267.25634766]
[105.25463867 282.25241089]
[108.60410309 290.84729004]
[105.43056488 297.59536743]
[105.43056488 312.59536743]
[105.43056488 327.59536743]
[105.43056488 342.59536743]
[105.43056488 357.59536743]
[105.43056488 372.59536743]
[113.16786194 386.39553833]
[105.43056488 399.12280273]
[105.43056488 414.12280273]
[105.43056488 429.12280273]
[105.43056488 444.12280273]
[105.60254669 459.12182617]
[105.94648743 474.11788940]
[106.29042816 489.11392212]
[106.80628204 504.10507202]
[107.49398041 519.08929443]
[108.18167877 534.07348633]
[108.86937714 549.05773926]
[109.55707550 564.04199219]
[120.95058441 574.66387939]
[121.43455505 589.86981201]
[111.23794556 600.66638184]
[111.92564392 615.65057373]
[121.83129120 604.38653564]
[136.42617798 600.92401123]
[150.33602905 606.53790283]
[158.43882751 619.16107178]
[157.75086975 634.14532471]
[148.52549744 645.97290039]
[134.15975952 650.28863525]
[119.94355011 645.50335693]
[111.11196136 633.37982178]
[109.05464935 648.23809814]
[106.99732971 663.09631348]
[112.76876068 677.82727051]
[103.35897827 689.37304688]
[101.30166626 704.23132324]
[99.24435425 719.08953857]
[97.18703461 733.94781494]
[95.12972260 748.80603027]
[93.07240295 763.66430664]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 136]
[8 135]
[9 134]
[10 133]
[11 132]
[12 131]
[14 129]
[15 128]
[16 127]
[17 118]
[18 117]
[21 114]
[22 113]
[23 112]
[24 111]
[25 110]
[27 109]
[28 108]
[29 107]
[31 106]
[32 105]
[33 104]
[34 103]
[36 101]
[37 100]
[38 99]
[39 98]
[40 97]
[41 96]
[42 94]
[43 93]
[44 92]
[48 89]
[49 88]
[51 87]
[52 86]
[54 85]
[55 84]
[56 83]
[59 68]
[60 67]
[61 66]
[69 80]
[70 79]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
