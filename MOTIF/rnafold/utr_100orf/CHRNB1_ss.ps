%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:27:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGGCUCUCUGAGCGAAGUCACUGAGCGAGCCGCCAGGCUAUGACCCCAGGGGCUCUGCUGAUGCUGCUGGGGGCGCUGGGGGCGCCGCUCGCCCCAGGCGUCCGCGGCUCGGAGGCGGAGGGUCGACUCCGGGAGAAAC\
) } def
/len { sequence length } bind def

/coor [
[-37.90387726 245.72810364]
[-52.40894318 237.27630615]
[-63.36162949 247.52513123]
[-74.31431580 257.77398682]
[-85.26700592 268.02279663]
[-96.21968842 278.27163696]
[-107.17237091 288.52047729]
[-118.12506104 298.76931763]
[-122.91510010 313.84799194]
[-137.49484253 316.89434814]
[-148.44752502 327.14318848]
[-153.23757935 342.22186279]
[-167.81732178 345.26821899]
[-178.77000427 355.51705933]
[-176.71888733 370.89797974]
[-184.12977600 384.53097534]
[-198.15301514 391.17385864]
[-213.39640808 388.27233887]
[-223.99853516 376.94210815]
[-225.88267517 361.53985596]
[-218.32434082 347.98806763]
[-204.22985840 341.49768066]
[-189.01884460 344.56436157]
[-178.06614685 334.31552124]
[-174.05952454 319.96994019]
[-158.69636536 316.19049072]
[-147.74368286 305.94168091]
[-143.73704529 291.59606934]
[-128.37390137 287.81665039]
[-117.42121124 277.56781006]
[-106.46852875 267.31896973]
[-95.51583862 257.07012939]
[-84.56315613 246.82128906]
[-73.61046600 236.57244873]
[-62.65777969 226.32360840]
[-68.92453003 214.69848633]
[-72.19601440 201.89262390]
[-72.27304077 188.66522217]
[-69.14596558 175.80172729]
[-62.99554825 164.06724548]
[-54.18252563 154.16093445]
[-43.22646332 146.67448425]
[-30.77510071 142.05662537]
[-17.56608582 140.58636475]
[-4.38325548 142.35604858]
[7.98987055 147.26559448]
[18.81665802 155.02821350]
[30.42496300 145.52835083]
[42.03326416 136.02850342]
[45.24293137 129.30494690]
[54.00506973 126.45031738]
[65.82068634 117.20957947]
[77.63630676 107.96884918]
[89.45192719 98.72811890]
[100.62866211 88.72408295]
[111.11728668 78.00080109]
[121.60591125 67.27752686]
[132.09452820 56.55424500]
[142.58316040 45.83096313]
[153.07179260 35.10768509]
[163.56040955 24.38440323]
[163.55680847 8.80757046]
[174.34651184 -1.91794622]
[189.19667053 -1.82539415]
[199.68528748 -12.54867458]
[200.33648682 -25.48208809]
[209.35966492 -34.20172501]
[221.50415039 -34.39617920]
[232.22743225 -44.88480377]
[242.95071411 -55.37342834]
[253.67398071 -65.86205292]
[258.12927246 -81.04299164]
[272.63806152 -84.41114807]
[283.36135864 -94.89977264]
[294.08462524 -105.38840485]
[304.80792236 -115.87702942]
[315.53118896 -126.36565399]
[326.25445557 -136.85427856]
[336.97775269 -147.34291077]
[341.43304443 -162.52383423]
[355.94183350 -165.89199829]
[366.66510010 -176.38063049]
[377.38839722 -186.86924744]
[388.11166382 -197.35787964]
[398.83496094 -207.84649658]
[409.55822754 -218.33512878]
[411.17276001 -234.29673767]
[424.73620605 -242.86486816]
[439.84381104 -237.46678162]
[444.90637207 -222.24343872]
[436.04028320 -208.87287903]
[420.04684448 -207.61184692]
[409.32357788 -197.12321472]
[398.60028076 -186.63459778]
[387.87701416 -176.14596558]
[377.15374756 -165.65734863]
[366.43045044 -155.16871643]
[362.74215698 -140.73799133]
[347.46636963 -136.61962891]
[336.74310303 -126.13099670]
[326.01980591 -115.64237213]
[315.29653931 -105.15374756]
[304.57324219 -94.66512299]
[293.84997559 -84.17649841]
[283.12667847 -73.68787384]
[279.43838501 -59.25714874]
[264.16259766 -55.13877487]
[253.43933105 -44.65015030]
[242.71604919 -34.16152191]
[231.99276733 -23.67289734]
[228.22468567 -6.56778002]
[210.40856934 -2.06004858]
[199.91995239 8.66323090]
[200.34098816 23.50770187]
[189.85679626 34.53204727]
[174.28369141 34.87302780]
[163.79505920 45.59630966]
[153.30644226 56.31958771]
[142.81781006 67.04286957]
[132.32919312 77.76615143]
[121.84056091 88.48942566]
[111.35193634 99.21270752]
[126.28257751 100.65352631]
[135.97816467 112.09886169]
[134.94470215 127.06321716]
[123.76779938 137.06706238]
[108.78084564 136.44171143]
[98.47617340 125.54154205]
[98.69265747 110.54373932]
[86.87703705 119.78446960]
[75.06142426 129.02520752]
[63.24580002 138.26593018]
[51.53312302 147.63679504]
[39.92481995 157.13665771]
[28.31651497 166.63652039]
[34.74426651 182.29890442]
[36.06980133 199.15913391]
[32.17680359 215.59895325]
[23.44932556 230.04380798]
[10.73390388 241.11363220]
[-4.74252844 247.75469971]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 35]
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[8 29]
[10 27]
[11 26]
[13 24]
[14 23]
[47 135]
[48 134]
[49 133]
[51 132]
[52 131]
[53 130]
[54 129]
[55 122]
[56 121]
[57 120]
[58 119]
[59 118]
[60 117]
[61 116]
[64 113]
[65 112]
[68 110]
[69 109]
[70 108]
[71 107]
[73 105]
[74 104]
[75 103]
[76 102]
[77 101]
[78 100]
[79 99]
[81 97]
[82 96]
[83 95]
[84 94]
[85 93]
[86 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
