%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:30:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGUGCAGGCCCGGAGCCCCAGGCGCUGGCGGGGCAGAAACGCGGCGCCCUGCGUCUUCUGGUUCCGAGGCUGGUCCUCACCGUUUCCGCUCCGGCGG\
) } def
/len { sequence length } bind def

/coor [
[173.23744202 262.35025024]
[166.90991211 248.75016785]
[160.58238220 235.15007019]
[154.80503845 230.32847595]
[154.27693176 221.02720642]
[148.37542725 207.23690796]
[142.47392273 193.44660950]
[123.00115967 187.78118896]
[113.57044983 169.50721741]
[120.42095947 149.81715393]
[112.85371399 136.86582947]
[105.28646851 123.91449738]
[97.71923065 110.96317291]
[89.95148468 98.13109589]
[81.98511505 85.42137909]
[74.01875305 72.71165466]
[66.05238342 60.00193405]
[58.08601761 47.29221344]
[50.11964798 34.58249283]
[42.15328217 21.87277412]
[25.10738754 18.33999443]
[15.99399757 3.90307069]
[19.97716331 -12.35342884]
[11.61937904 -24.80924797]
[3.26159525 -37.26506805]
[-5.09618855 -49.72089005]
[-13.45397282 -62.17670822]
[-21.81175613 -74.63253021]
[-38.48310089 -82.25573730]
[-39.17889404 -99.71475983]
[-47.92000961 -111.90462494]
[-56.66112518 -124.09449768]
[-65.40224457 -136.28436279]
[-80.74351501 -138.98307800]
[-89.43460083 -151.46986389]
[-86.76724243 -166.07879639]
[-95.50835419 -178.26866150]
[-111.14117432 -180.59043884]
[-120.48625183 -193.33583069]
[-117.99932861 -208.94322205]
[-105.15585327 -218.15303040]
[-89.57562256 -215.50123596]
[-80.50211334 -202.56109619]
[-83.31848907 -187.00978088]
[-74.57736969 -174.81990051]
[-59.88494110 -172.65934753]
[-50.84655762 -160.42160034]
[-53.21237183 -145.02548218]
[-44.47125626 -132.83561707]
[-35.73014069 -120.64574432]
[-26.98902512 -108.45587158]
[-15.00558186 -106.12885284]
[-7.64303493 -95.89080811]
[-9.35593700 -82.99031067]
[-0.99815309 -70.53449249]
[7.35963106 -58.07867050]
[15.71741486 -45.62285233]
[24.07519913 -33.16703415]
[32.43298340 -20.71121216]
[45.40043640 -19.98518372]
[55.70095825 -11.75704575]
[59.38175201 1.10578597]
[54.86300278 13.90640640]
[62.82936859 26.61612701]
[70.79573822 39.32584763]
[78.76210022 52.03556824]
[86.72846985 64.74528503]
[94.69483948 77.45500946]
[102.66120148 90.16472626]
[109.38838196 94.88066864]
[110.67055511 103.39592743]
[118.23780060 116.34725189]
[125.80503845 129.29858398]
[133.37228394 142.24990845]
[143.46650696 141.88224792]
[152.91084290 145.29560852]
[160.35011292 151.95353699]
[164.73439026 160.85748291]
[165.46704102 170.69635010]
[162.48553467 180.03959656]
[156.26420593 187.54510498]
[162.16571045 201.33540344]
[168.06721497 215.12570190]
[174.18247986 228.82254028]
[180.50999451 242.42263794]
[186.83752441 256.02273560]
[198.76055908 261.23791504]
[203.70622253 272.83813477]
[199.49130249 284.29467773]
[205.39280701 298.08496094]
[211.29431152 311.87524414]
[217.19581604 325.66555786]
[230.63891602 335.05786133]
[228.95710754 351.37054443]
[213.88049316 357.82250977]
[200.91860962 347.77655029]
[203.40551758 331.56704712]
[197.50401306 317.77676392]
[191.60250854 303.98645020]
[185.70100403 290.19616699]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 86]
[2 85]
[3 84]
[5 83]
[6 82]
[7 81]
[10 74]
[11 73]
[12 72]
[13 71]
[14 69]
[15 68]
[16 67]
[17 66]
[18 65]
[19 64]
[20 63]
[23 59]
[24 58]
[25 57]
[26 56]
[27 55]
[28 54]
[30 51]
[31 50]
[32 49]
[33 48]
[36 45]
[37 44]
[89 100]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
