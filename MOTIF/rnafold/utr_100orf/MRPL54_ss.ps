%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:29:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAACGUGCACUUGCAAGCUGCCCGCAAUACGUCAUGGCGACCAAACGCCUUUUCGGGGCUACCCGGACGUGGGCCGGCUGGGGGGCCUGGGAGCUCCUAAACCCCGCCACUUCCGGAAGACUCCUGGCCCGGG\
) } def
/len { sequence length } bind def

/coor [
[136.45155334 171.76478577]
[122.47940063 177.22180176]
[107.71304321 174.58462524]
[96.49356079 164.62857056]
[92.11930084 150.28053284]
[95.87647247 135.75825500]
[96.40487671 120.76755524]
[88.75424194 133.66979980]
[81.10359955 146.57203674]
[81.45394897 162.96743774]
[67.29192352 171.23600769]
[53.18621063 162.87173462]
[53.64755630 146.47908020]
[68.20136261 138.92140198]
[75.85200500 126.01915741]
[83.50263977 113.11692047]
[80.89791870 98.34480286]
[69.29584503 88.83734131]
[57.69377136 79.32987213]
[46.09169769 69.82241058]
[34.48962402 60.31494522]
[22.77771378 50.94311905]
[10.95755291 41.70819473]
[-0.86260861 32.47327423]
[-12.68276978 23.23835182]
[-24.50293159 14.00342941]
[-30.05173302 17.23020363]
[-36.15048981 19.16903687]
[-42.50553131 19.73536301]
[-48.81274796 18.91049957]
[-54.77214813 16.74212837]
[-60.10211182 13.34163570]
[-64.55271912 8.87841415]
[-67.91744232 3.57143974]
[-70.04274750 -2.32146239]
[-70.83505249 -8.51614189]
[-70.26485443 -14.71581936]
[-83.74676514 -21.29138756]
[-97.22867584 -27.86695480]
[-110.71058655 -34.44252014]
[-125.57035828 -29.06081772]
[-139.84761047 -35.83839417]
[-145.07191467 -50.75423050]
[-138.14376831 -64.95903015]
[-123.17352295 -70.02533722]
[-109.04276276 -62.94739914]
[-104.13501740 -47.92443085]
[-90.65310669 -41.34886551]
[-77.17119598 -34.77329636]
[-63.68928528 -28.19773102]
[-61.99952698 -29.96323586]
[-60.16450500 -31.57723427]
[-58.19775772 -33.02781677]
[-62.99868774 -47.23876953]
[-67.79961395 -61.44971848]
[-72.60054016 -75.66066742]
[-77.40147400 -89.87162018]
[-82.20240021 -104.08256531]
[-94.86684418 -114.50100708]
[-91.90988159 -130.63136292]
[-76.37338257 -135.88011169]
[-64.23996735 -124.84777832]
[-67.99144745 -108.88349152]
[-63.19052124 -94.67254639]
[-58.38959503 -80.46159363]
[-53.58866501 -66.25064850]
[-48.78773880 -52.03969574]
[-43.98680878 -37.82874680]
[-18.62311745 -26.05476189]
[-15.26800919 2.18326807]
[-3.44784784 11.41819000]
[8.37231350 20.65311241]
[20.19247437 29.88803482]
[32.01263428 39.12295532]
[39.28677368 40.77724457]
[43.99708939 48.71287155]
[55.59916306 58.22033691]
[67.20123291 67.72779846]
[78.80331421 77.23526764]
[90.40538788 86.74272919]
[98.27200317 82.37608337]
[107.95948792 82.69042206]
[116.70462799 88.29842377]
[121.66522217 98.21237183]
[136.03506470 102.51441956]
[150.40490723 106.81646729]
[164.77474976 111.11851501]
[179.14459229 115.42056274]
[188.35749817 114.88804626]
[193.79661560 119.99351501]
[208.06246948 124.62876892]
[222.32830811 129.26402283]
[236.59416199 133.89927673]
[250.86000061 138.53453064]
[265.17883301 143.00347900]
[279.54867554 147.30554199]
[293.96759033 151.44009399]
[308.43365479 155.40660095]
[316.94479370 142.88305664]
[329.06265259 133.80363464]
[343.47280884 129.15319824]
[358.61209106 129.43620300]
[372.83837891 134.62193298]
[384.60845947 144.14788818]
[392.64562988 156.98077393]
[396.07806396 171.72854614]
[394.53341675 186.79151917]
[388.17929077 200.53573608]
[377.70489502 211.47035217]
[364.24639893 218.40924072]
[349.26373291 220.59974670]
[334.38208008 217.80424500]
[321.21566772 210.32597351]
[311.19271851 198.97612000]
[305.40045166 184.98582458]
[304.46713257 169.87266541]
[290.00106812 165.90615845]
[282.65127563 167.18286133]
[275.24661255 161.67538452]
[260.87677002 157.37332153]
[253.49923706 158.47866821]
[246.22474670 152.80038452]
[231.95890808 148.16513062]
[217.69305420 143.52987671]
[203.42720032 138.89460754]
[189.16136169 134.25935364]
[174.84254456 129.79040527]
[160.47270203 125.48835754]
[146.10285950 121.18630981]
[131.73301697 116.88426208]
[117.36317444 112.58221436]
[127.91138458 123.24688721]
[140.51599121 131.37855530]
[147.02389526 144.89324951]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 16]
[8 15]
[9 14]
[17 80]
[18 79]
[19 78]
[20 77]
[21 76]
[22 74]
[23 73]
[24 72]
[25 71]
[26 70]
[37 50]
[38 49]
[39 48]
[40 47]
[53 68]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
[84 131]
[85 130]
[86 129]
[87 128]
[88 127]
[90 126]
[91 125]
[92 124]
[93 123]
[94 122]
[95 120]
[96 119]
[97 117]
[98 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
