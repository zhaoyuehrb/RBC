%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUUGUUCUCCUGGCGAGAAGAUCCUGGAGCCCAGUGCCUGCUGCUUUCUCUUCUGCUCCUCGCAGCCUCGGAGGUGGGGAGCGGCCAGCUCCACUACU\
) } def
/len { sequence length } bind def

/coor [
[149.31973267 255.97232056]
[134.45315552 257.96859741]
[120.50378418 252.45361328]
[111.02157593 240.83088684]
[108.41963959 226.05828857]
[113.36015320 211.89524841]
[124.58580017 201.94613647]
[139.23977661 198.74288940]
[153.59353638 203.10112000]
[146.02630615 190.14979553]
[138.45906067 177.19847107]
[130.89181519 164.24714661]
[115.23323822 156.49404907]
[115.06893921 138.16319275]
[107.10257721 125.45347595]
[99.13620758 112.74375916]
[90.58572388 100.41942596]
[81.46973419 88.50730133]
[72.35374451 76.59517670]
[57.82241440 70.33808899]
[56.23214722 55.52862549]
[47.11615753 43.61650085]
[33.26079178 46.14351273]
[19.74301720 42.43441010]
[9.21790218 33.27748489]
[3.72676492 20.52510643]
[4.30139303 6.71920824]
[10.77067757 -5.41535139]
[2.02956247 -17.60522079]
[-6.71155310 -29.79508972]
[-15.45266819 -41.98495865]
[-34.12401581 -44.21771240]
[-45.19510269 -59.02671051]
[-42.15822601 -76.94658661]
[-51.64027405 -88.56944275]
[-61.12231827 -100.19229889]
[-70.60437012 -111.81515503]
[-86.11923981 -117.12747192]
[-89.01013184 -133.26980591]
[-76.30313110 -143.63629150]
[-61.07012177 -137.56280518]
[-58.98151016 -121.29720306]
[-49.49946213 -109.67434692]
[-40.01741791 -98.05148315]
[-30.53536987 -86.42862701]
[-18.99692154 -87.76041412]
[-8.16851330 -83.23484802]
[-0.85996693 -73.89808655]
[0.96993524 -62.06061172]
[-3.26279998 -50.72607422]
[5.47831583 -38.53620529]
[14.21943092 -26.34633636]
[22.96054649 -14.15646648]
[38.91258621 -16.15734863]
[53.80252075 -9.85110092]
[63.57727814 3.14730072]
[65.52532196 19.38774872]
[59.02828217 34.50051117]
[68.14427185 46.41263580]
[82.02356720 51.81768036]
[84.26586914 67.47917938]
[93.38185883 79.39130402]
[102.49784851 91.30343628]
[106.41594696 92.35646057]
[109.80592346 95.21618652]
[111.83442688 99.58244324]
[111.84593201 104.77738953]
[119.81229401 117.48711395]
[127.77866364 130.19683838]
[140.25672913 133.89205933]
[146.60372925 144.78886414]
[143.84313965 156.67990112]
[151.41038513 169.63122559]
[158.97763062 182.58256531]
[166.54486084 195.53388977]
[176.02691650 207.15673828]
[187.19487000 217.17056274]
[198.36283875 227.18438721]
[209.53079224 237.19821167]
[220.85314941 247.03713989]
[232.32713318 256.69879150]
[243.80111694 266.36044312]
[255.27510071 276.02209473]
[266.74908447 285.68374634]
[282.79199219 285.75125122]
[292.62838745 298.42504883]
[288.71261597 313.98291016]
[274.04852295 320.49014282]
[259.88516235 312.95498657]
[257.08743286 297.15774536]
[245.61344910 287.49609375]
[234.13946533 277.83444214]
[222.66548157 268.17279053]
[211.19148254 258.51113892]
[203.91940308 256.57659912]
[199.51698303 248.36616516]
[188.34901428 238.35234070]
[177.18106079 228.33853149]
[166.01309204 218.32470703]
[167.40036011 233.26042175]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 75]
[10 74]
[11 73]
[12 72]
[14 69]
[15 68]
[16 67]
[17 63]
[18 62]
[19 61]
[21 59]
[22 58]
[28 53]
[29 52]
[30 51]
[31 50]
[34 45]
[35 44]
[36 43]
[37 42]
[76 99]
[77 98]
[78 97]
[79 96]
[80 94]
[81 93]
[82 92]
[83 91]
[84 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
