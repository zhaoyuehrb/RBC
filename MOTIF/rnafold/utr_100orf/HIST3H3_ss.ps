%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:09:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCCGAACCAAGCAGACUGCGCGCAAGUCAACGGGUGGCAAGGCGCCGCGCAAGCAGCUGGCCACCAAGGUGGCUCGCAAGAGCGCACCUGCCACUG\
) } def
/len { sequence length } bind def

/coor [
[81.50469971 212.40600586]
[91.00094604 199.47538757]
[90.06840515 184.50440979]
[89.13585663 169.53341675]
[88.20331573 154.56243896]
[81.84422302 168.14779663]
[75.48513794 181.73315430]
[72.22512817 196.37461853]
[62.07057190 207.41477966]
[47.75210571 211.88482666]
[33.12007141 208.58276367]
[22.10914421 198.39653015]
[17.68024445 184.06527710]
[21.02433968 169.44279480]
[31.24217606 158.46118164]
[45.58638000 154.07347107]
[58.63668823 146.67823792]
[71.68699646 139.28300476]
[56.68880844 139.51628113]
[41.69062424 139.74955750]
[26.69243813 139.98283386]
[16.96935844 152.23010254]
[1.63838089 155.31152344]
[-12.06167698 147.77212524]
[-17.66206551 133.17179871]
[-12.51845455 118.40436554]
[0.94050258 110.44255066]
[16.35989571 113.04568481]
[26.45915985 124.98464966]
[41.45734787 124.75136566]
[56.45553207 124.51808929]
[71.45372009 124.28481293]
[65.75521851 109.59184265]
[66.77597046 94.68215179]
[73.64262390 82.33217621]
[84.45514679 74.55772400]
[96.75302124 72.29010773]
[99.07649231 57.47115326]
[101.39997101 42.65219498]
[103.72344208 27.83324051]
[106.04691315 13.01428318]
[108.37038422 -1.80467319]
[101.37546539 -12.77863884]
[103.73211670 -25.16696930]
[113.61555481 -32.33185577]
[116.39877319 -47.07138443]
[119.18199158 -61.81091309]
[112.42131042 -70.61427307]
[111.73817444 -81.47079468]
[117.11828613 -90.66909027]
[126.51645660 -95.20236969]
[130.21064758 -109.74035645]
[125.24292755 -125.36898041]
[136.49226379 -137.30146790]
[152.38630676 -133.26271057]
[156.57461548 -117.40742493]
[144.74862671 -106.04617310]
[141.05444336 -91.50818634]
[147.78799438 -73.49507904]
[133.92152405 -59.02769470]
[131.13830566 -44.28816605]
[128.35508728 -29.54863930]
[135.08905029 -13.42551422]
[123.18933868 0.51879954]
[120.86586761 15.33775616]
[118.54239655 30.15671349]
[116.21892548 44.97566986]
[113.89545441 59.79462433]
[111.57197571 74.61357880]
[132.57278442 97.24585724]
[121.05049133 131.00837708]
[134.93089294 136.69470215]
[148.81130981 142.38102722]
[162.69171143 148.06735229]
[176.57211304 153.75367737]
[190.53927612 159.22344971]
[204.58981323 164.47534180]
[218.64035034 169.72724915]
[232.69088745 174.97914124]
[248.76673889 171.73892212]
[259.40634155 184.21815491]
[253.66455078 199.57926941]
[237.44805908 202.02008057]
[227.43899536 189.02967834]
[213.38845825 183.77778625]
[199.33792114 178.52587891]
[185.28738403 173.27398682]
[177.78776550 173.89151001]
[170.88578796 167.63407898]
[157.00538635 161.94775391]
[143.12498474 156.26142883]
[129.24456787 150.57510376]
[115.36416626 144.88877869]
[103.17429352 153.62989807]
[104.10684204 168.60087585]
[105.03938293 183.57186890]
[105.97193146 198.54284668]
[116.99944305 210.19503784]
[114.62234497 226.06100464]
[100.66413879 233.96974182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 97]
[3 96]
[4 95]
[5 94]
[18 32]
[19 31]
[20 30]
[21 29]
[37 69]
[38 68]
[39 67]
[40 66]
[41 65]
[42 64]
[45 62]
[46 61]
[47 60]
[51 58]
[52 57]
[71 93]
[72 92]
[73 91]
[74 90]
[75 89]
[76 87]
[77 86]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
