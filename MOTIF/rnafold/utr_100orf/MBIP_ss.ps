%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:34:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGCCAAGCGACUAAAGCUGGAAGGGAGGGGGCGGGGUUGUGAGCAAAUCUUGGUGGUGGUGGUGGUGGGGCGGCCUGAGAAGAUAUCAUGGCUGCUGCCACGGAGCUUAAUCGCCCGAGCAGCGGUGACAGGAACCUGGAGCGAAGAUGCAGACCCAACCUCUCCCGAGAGGUGCUCUACGAAAUCU\
) } def
/len { sequence length } bind def

/coor [
[90.49554443 164.58386230]
[89.25032043 149.63563538]
[88.00508881 134.68742371]
[73.21183014 132.20555115]
[67.15637207 145.92893982]
[61.10091400 159.65232849]
[60.49633026 168.78616333]
[54.82905960 173.55218506]
[48.54633331 187.17303467]
[55.37711334 201.23982239]
[51.51771927 216.39366150]
[38.79044342 225.47938538]
[23.20471191 224.20698547]
[12.11963177 213.17726135]
[10.76924038 197.59808350]
[19.79114914 184.82550049]
[34.92549133 180.89030457]
[41.20821762 167.26945496]
[47.37752533 153.59687805]
[53.43298340 139.87348938]
[59.48844528 126.15009308]
[60.54256439 98.55258179]
[75.45647430 81.47568512]
[93.19211578 79.06394196]
[93.69068909 64.07222748]
[94.18926239 49.08051300]
[94.68783569 34.08880234]
[95.18640900 19.09709167]
[95.68498230 4.10537910]
[96.18355560 -10.88633251]
[96.68212891 -25.87804413]
[86.16364288 -37.36713409]
[86.88282776 -52.56375885]
[97.90074158 -62.52072525]
[98.39931488 -77.51243591]
[98.89788818 -92.50415039]
[88.37940216 -103.99324036]
[89.09858704 -119.18986511]
[100.11650085 -129.14683533]
[100.61507416 -144.13854980]
[101.11364746 -159.13024902]
[78.42710114 -168.16125488]
[71.54564667 -189.30139160]
[82.27384186 -206.23786926]
[77.14353943 -220.33326721]
[62.37232208 -224.70559692]
[53.11619949 -236.79598999]
[52.75842285 -251.84045410]
[61.22667694 -264.06448364]
[56.09637451 -278.15988159]
[44.74824142 -284.31634521]
[40.77133560 -296.17681885]
[45.78324127 -307.19927979]
[40.88793182 -321.37799072]
[35.99262238 -335.55670166]
[31.09731483 -349.73541260]
[26.20200729 -363.91412354]
[21.30669975 -378.09286499]
[16.17639732 -392.18823242]
[10.81251907 -406.19641113]
[5.44863987 -420.20458984]
[-8.10197258 -422.78665161]
[-18.52140045 -431.66052246]
[-23.15383148 -444.42364502]
[-20.88827896 -457.70123291]
[-12.42286396 -468.03848267]
[-17.55316734 -482.13385010]
[-22.68346786 -496.22924805]
[-27.81377029 -510.32464600]
[-33.06104279 -524.37689209]
[-38.42492294 -538.38507080]
[-43.78879929 -552.39324951]
[-49.15267944 -566.40142822]
[-54.51655579 -580.40960693]
[-59.88043594 -594.41772461]
[-65.24431610 -608.42590332]
[-70.72443390 -622.38903809]
[-76.32040405 -636.30609131]
[-81.91637421 -650.22320557]
[-96.83575439 -654.90789795]
[-105.20978546 -668.11431885]
[-103.08451843 -683.60681152]
[-91.46343231 -694.07025146]
[-75.83364868 -694.56420898]
[-63.57507706 -684.85534668]
[-60.47583771 -669.52795410]
[-67.99929810 -655.81915283]
[-62.40332413 -641.90209961]
[-56.80735016 -627.98498535]
[-51.38469315 -622.94238281]
[-51.23614502 -613.78979492]
[-45.87226868 -599.78161621]
[-40.50838852 -585.77343750]
[-35.14450836 -571.76531982]
[-29.78063011 -557.75714111]
[-24.41675186 -543.74896240]
[-19.05287361 -529.74078369]
[-13.71477699 -524.60876465]
[-13.71838188 -515.45495605]
[-8.58807945 -501.35955811]
[-3.45777726 -487.26416016]
[1.67252493 -473.16876221]
[17.58180428 -469.15780640]
[28.07585716 -456.33029175]
[28.87105751 -439.60992432]
[19.45681000 -425.56845093]
[24.82068825 -411.56030273]
[30.18456650 -397.55212402]
[34.12032700 -394.81649780]
[36.36875916 -389.57122803]
[35.48541641 -382.98815918]
[40.38072205 -368.80944824]
[45.27603149 -354.63073730]
[50.17133713 -340.45202637]
[55.06664658 -326.27328491]
[59.96195602 -312.09457397]
[73.81556702 -301.33532715]
[70.19176483 -283.29016113]
[75.32206726 -269.19479370]
[89.66657257 -265.27392578]
[99.06289673 -253.51922607]
[99.74385071 -238.30772400]
[91.23892975 -225.46356201]
[96.36923218 -211.36817932]
[114.53124237 -208.16226196]
[126.69917297 -190.67210388]
[141.26559448 -194.25253296]
[149.47644043 -207.48959351]
[164.29986572 -210.91314697]
[176.86877441 -203.00378418]
[191.43519592 -206.58421326]
[206.00161743 -210.16464233]
[217.45497131 -221.90145874]
[233.27702332 -217.58932495]
[237.19142151 -201.66419983]
[225.17135620 -190.50848389]
[209.58204651 -195.59822083]
[195.01562500 -192.01779175]
[180.44920349 -188.43737793]
[172.97921753 -175.60244751]
[158.25781250 -171.76388550]
[144.84602356 -179.68611145]
[130.27960205 -176.10569763]
[145.26280212 -175.39588928]
[155.90209961 -164.82208252]
[156.70439148 -149.84355164]
[147.25547791 -138.19375610]
[132.43383789 -135.88749695]
[119.89191437 -144.11550903]
[116.10536194 -158.63168335]
[115.60678864 -143.63996887]
[115.10821533 -128.64825439]
[125.44024658 -117.98126221]
[125.14817810 -102.77043152]
[113.88960266 -92.00557709]
[113.39102936 -77.01386261]
[112.89245605 -62.02215195]
[123.22448730 -51.35515976]
[122.93241882 -36.14432907]
[111.67384338 -25.37947083]
[111.17527008 -10.38775921]
[110.67669678 4.60395288]
[110.17812347 19.59566498]
[109.67955017 34.58737564]
[109.18097687 49.57909012]
[108.68240356 64.57080078]
[108.18383026 79.56251526]
[132.24227905 86.08517456]
[144.86631775 117.66428375]
[152.04013062 130.83760071]
[159.21394348 144.01092529]
[166.38775635 157.18424988]
[179.27290344 168.20283508]
[172.25189209 183.63467407]
[155.47952271 181.16001892]
[153.21443176 164.35806274]
[146.04061890 151.18473816]
[138.86680603 138.01141357]
[131.69299316 124.83808899]
[124.50807953 126.98912048]
[102.95330811 133.44218445]
[104.19853973 148.39041138]
[105.44377136 163.33863831]
[117.66861725 173.35505676]
[119.14706421 189.09004211]
[109.00195312 201.20831299]
[93.25222015 202.52030945]
[81.24188995 192.24765015]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 183]
[2 182]
[3 181]
[4 21]
[5 20]
[6 19]
[8 18]
[9 17]
[24 167]
[25 166]
[26 165]
[27 164]
[28 163]
[29 162]
[30 161]
[31 160]
[34 157]
[35 156]
[36 155]
[39 152]
[40 151]
[41 150]
[44 124]
[45 123]
[49 119]
[50 118]
[53 116]
[54 115]
[55 114]
[56 113]
[57 112]
[58 111]
[59 108]
[60 107]
[61 106]
[66 102]
[67 101]
[68 100]
[69 99]
[70 97]
[71 96]
[72 95]
[73 94]
[74 93]
[75 92]
[76 91]
[77 89]
[78 88]
[79 87]
[126 143]
[127 142]
[130 139]
[131 138]
[132 137]
[169 179]
[170 178]
[171 177]
[172 176]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
