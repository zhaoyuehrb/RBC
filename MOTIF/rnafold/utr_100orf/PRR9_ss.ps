%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:45:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCACAGCCUUUGUUGAGUCUUGUUGAAGAUCAGGCUCUGCAAAUCACCCUAGGAUGUCCUUCAGUGAGCAGCAGUGCAAGCAGCCAUGUGUGCCCCCUCCAUGCCUCCCAAAGACCCAGGAGCAGUGCCAAGCAAAGGCUGAGGAGGUGUGCC\
) } def
/len { sequence length } bind def

/coor [
[91.15253448 493.23519897]
[98.32193756 479.71267700]
[110.96089172 471.08044434]
[109.16429901 456.18844604]
[107.36771393 441.29641724]
[98.16172791 429.58746338]
[104.19045258 414.95993042]
[102.39385986 400.06790161]
[100.59727478 385.17590332]
[98.80068207 370.28387451]
[97.00408936 355.39184570]
[95.20750427 340.49981689]
[93.41091156 325.60781860]
[91.61432648 310.71578979]
[89.81773376 295.82376099]
[88.02114105 280.93176270]
[86.22455597 266.03973389]
[83.01516724 264.99899292]
[80.00745392 263.47027588]
[77.27507782 261.49102783]
[64.18580627 268.81704712]
[51.09653473 276.14309692]
[38.00726318 283.46914673]
[24.91798973 290.79519653]
[16.99920464 305.15573120]
[0.60013855 305.20755005]
[-7.40925407 290.89736938]
[1.21040261 276.94625854]
[17.59194565 277.70593262]
[30.68121719 270.37988281]
[43.77049255 263.05383301]
[56.85976410 255.72778320]
[69.94903564 248.40174866]
[70.85334015 236.87893677]
[77.66093445 227.26237488]
[88.63777924 222.39831543]
[91.91285706 207.76022339]
[95.18793488 193.12211609]
[90.41616821 179.01257324]
[100.97989655 167.23469543]
[104.25497437 152.59660339]
[107.53005219 137.95851135]
[110.80513000 123.32041168]
[96.48168182 126.24639130]
[82.43014526 120.84287262]
[73.23999023 108.37345123]
[72.17893982 92.48316956]
[61.41435623 82.03693390]
[50.64977264 71.59069824]
[39.88519287 61.14446640]
[24.68602562 63.65274811]
[11.08329201 56.81030273]
[4.19937134 43.42838669]
[6.48787403 28.73482513]
[-4.27670717 18.28859329]
[-15.04128838 7.84235907]
[-31.06708527 4.36301422]
[-35.80840683 -11.33577347]
[-24.38778496 -23.10443687]
[-8.55377769 -18.83638382]
[-4.59505463 -2.92222214]
[6.16952610 7.52401114]
[16.93410683 17.97024536]
[31.55237198 15.24180889]
[45.13484955 21.72102928]
[52.38243866 35.11228943]
[50.33142471 50.37988663]
[61.09600830 60.82611847]
[71.86058807 71.27235413]
[82.62516785 81.71858215]
[96.95454407 77.28359985]
[99.93607330 62.58290482]
[102.91760254 47.88220978]
[105.75190735 33.15242004]
[108.43869781 18.39500809]
[111.12548828 3.63759851]
[102.40129089 -9.26690006]
[105.33630371 -24.19473839]
[117.69253540 -32.43240356]
[120.37932587 -47.18981552]
[112.46973419 -61.14753342]
[118.58422852 -75.97967529]
[134.03228760 -80.30829620]
[146.96348572 -70.81284332]
[147.45811462 -54.77741241]
[135.13673401 -44.50302124]
[132.44993591 -29.74561310]
[141.10998535 -17.68164444]
[138.59541321 -2.67725730]
[125.88289642 6.32438946]
[123.19610596 21.08180046]
[120.50931549 35.83921051]
[122.41593170 43.02341080]
[117.61830139 50.86373901]
[114.63677216 65.56443787]
[111.65523529 80.26513672]
[116.98500061 85.54183960]
[127.53857422 74.88246918]
[138.19778442 85.43621063]
[127.64453125 96.09524536]
[132.97428894 101.37194824]
[147.64442444 98.24349213]
[162.31455994 95.11502838]
[170.10649109 90.23919678]
[177.30941772 92.07383728]
[192.03919983 89.23953247]
[200.91320801 76.43759155]
[215.89169312 73.77304077]
[228.04170227 82.31194305]
[242.77148438 79.47763824]
[252.92208862 67.05408478]
[268.96166992 67.38825226]
[278.58602905 80.22380066]
[274.41217041 95.71439362]
[259.64193726 101.97698212]
[245.60578918 94.20742798]
[230.87599182 97.04173279]
[222.76237488 109.47976685]
[207.86463928 112.56398010]
[194.87350464 103.96932220]
[180.14370728 106.80362701]
[165.44302368 109.78516388]
[150.77288818 112.91362000]
[136.10275269 116.04208374]
[125.44322968 126.59548950]
[122.16815186 141.23358154]
[118.89307404 155.87168884]
[115.61799622 170.50978088]
[120.15550995 185.66635132]
[109.82603455 196.39720154]
[106.55095673 211.03529358]
[103.27587891 225.67338562]
[113.42472839 245.95684814]
[101.11657715 264.24313354]
[102.91316223 279.13516235]
[104.70975494 294.02719116]
[106.50634766 308.91918945]
[108.30293274 323.81121826]
[110.09952545 338.70324707]
[111.89611053 353.59524536]
[113.69270325 368.48727417]
[115.48928833 383.37930298]
[117.28588104 398.27133179]
[119.08247375 413.16333008]
[128.41696167 425.93743896]
[122.25973511 439.49981689]
[124.05632019 454.39184570]
[125.85291290 469.28387451]
[140.18217468 474.66262817]
[150.36180115 486.09213257]
[154.05261230 500.94595337]
[150.40647888 515.81085205]
[140.26126099 527.27087402]
[125.94824219 532.69268799]
[110.75645447 530.83038330]
[98.17686462 522.11187744]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 148]
[4 147]
[5 146]
[7 144]
[8 143]
[9 142]
[10 141]
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[20 33]
[21 32]
[22 31]
[23 30]
[24 29]
[36 132]
[37 131]
[38 130]
[40 128]
[41 127]
[42 126]
[43 125]
[47 70]
[48 69]
[49 68]
[50 67]
[54 63]
[55 62]
[56 61]
[71 96]
[72 95]
[73 94]
[74 92]
[75 91]
[76 90]
[79 87]
[80 86]
[101 124]
[102 123]
[103 122]
[105 121]
[106 120]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
