%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:20:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAGCCGACUCCCGGCGGAAGCGCGCGGCGCGCGGGGAGGCCCGAACUGAUCCGCGGCGGCCGGAGACCGCUGGGGACAGACAGGAUGGGCAGCAGCUCGCUGUCCGAGGACUACCGCCAGUGCCUGGAGCGCGAGCUGCGACGGGGCCGCGCGGGCGUGUGCGGGGACCCCUCGCUGCGCGCGG\
) } def
/len { sequence length } bind def

/coor [
[167.78425598 220.12069702]
[159.71302795 207.47731018]
[151.64178467 194.83392334]
[143.57055664 182.19053650]
[129.01596069 179.24104309]
[120.65047455 166.53382874]
[123.84287262 151.28762817]
[115.77163696 138.64425659]
[107.70040131 126.00086975]
[90.20328522 128.48674011]
[73.04281616 119.26119995]
[61.58803177 128.94561768]
[50.13324738 138.63003540]
[38.67846680 148.31445312]
[27.22368240 157.99887085]
[21.68056679 172.81726074]
[6.96594095 175.12573242]
[-4.48884201 184.81015015]
[-15.94362450 194.49456787]
[-16.22607994 205.39294434]
[-22.34336472 214.15014648]
[-32.07031250 218.00346375]
[-42.09482193 215.90121460]
[-53.86681366 225.19746399]
[-57.15966797 240.89895630]
[-71.55287170 247.98522949]
[-86.00518799 241.02030945]
[-89.43003845 225.34707642]
[-79.20016479 212.98870850]
[-63.16305923 213.42547607]
[-51.39107132 204.12922668]
[-45.59793854 185.69335938]
[-25.62804222 183.03977966]
[-14.17325974 173.35536194]
[-2.71847677 163.67094421]
[2.00531578 149.54525757]
[17.53926468 146.54409790]
[28.99404716 136.85968018]
[40.44882965 127.17525482]
[51.90361404 117.49083710]
[63.35839462 107.80641937]
[63.23306656 92.80694580]
[51.61806107 83.31528473]
[40.00305176 73.82363129]
[28.38804245 64.33197021]
[16.77303314 54.84030914]
[1.25845301 56.23154449]
[-10.38560486 46.44019318]
[-11.61632347 31.64083862]
[-23.23133087 22.14917946]
[-34.84634018 12.65752125]
[-56.15763474 10.53811550]
[-62.71115494 -9.02156544]
[-74.78720093 -17.91926193]
[-86.86325836 -26.81695747]
[-102.56297302 -28.77387238]
[-108.21970367 -42.55250168]
[-120.29575348 -51.45019531]
[-132.37181091 -60.34789276]
[-144.44786072 -69.24559021]
[-156.52391052 -78.14328766]
[-168.59996033 -87.04097748]
[-183.75437927 -83.18381500]
[-197.82015991 -90.01665497]
[-204.15588379 -104.31325531]
[-199.77000427 -119.32318878]
[-186.73339844 -127.95922852]
[-171.20156860 -126.14369202]
[-160.50814819 -114.73383331]
[-159.70227051 -99.11703491]
[-147.62620544 -90.21933746]
[-135.55015564 -81.32164001]
[-123.47411346 -72.42394257]
[-111.39806366 -63.52624893]
[-99.32200623 -54.62855148]
[-84.48605347 -53.30805969]
[-77.96556091 -38.89300919]
[-65.88951111 -29.99531174]
[-53.81345749 -21.09761620]
[-45.33518600 -23.84849167]
[-36.40801239 -22.35553169]
[-29.06592178 -16.83014297]
[-25.04077721 -8.41674042]
[-25.35468102 1.04251313]
[-13.73967361 10.53417110]
[-2.12466478 20.02582932]
[12.62327862 18.28406143]
[24.53776169 27.74449348]
[26.26469231 43.22530365]
[37.87969971 52.71696091]
[49.49470901 62.20861816]
[61.10971832 71.70027924]
[72.72472382 81.19193268]
[93.59485626 70.56457520]
[113.90907288 76.72171021]
[124.86417389 66.47544861]
[135.81927490 56.22918701]
[146.77436829 45.98292923]
[157.72946167 35.73667145]
[168.68457031 25.49041176]
[179.63966370 15.24415207]
[190.59475708 4.99789238]
[201.54985046 -5.24836683]
[202.23892212 -20.80995178]
[213.49491882 -31.04505730]
[228.32626343 -30.29223251]
[239.28135681 -40.53849030]
[250.23646545 -50.78475189]
[254.37741089 -58.94948959]
[261.46127319 -61.10880280]
[272.58605957 -71.17057800]
[283.71084595 -81.23234558]
[294.75115967 -91.38671875]
[305.70626831 -101.63297272]
[316.66134644 -111.87923431]
[316.93890381 -127.68108368]
[328.36660767 -138.59817505]
[344.16464233 -138.15357971]
[354.96029663 -126.61107635]
[354.34872437 -110.81862640]
[342.69271851 -100.14560699]
[326.90762329 -100.92413330]
[315.95251465 -90.67787933]
[304.99740601 -80.43161774]
[302.25445557 -73.55267334]
[293.77261353 -70.10756683]
[282.64782715 -60.04579163]
[271.52304077 -49.98402405]
[260.48272705 -39.82965469]
[249.52761841 -29.58339310]
[238.57252502 -19.33713531]
[238.33303833 -4.48862457]
[227.36897278 6.05859852]
[211.79611206 5.70673132]
[200.84101868 15.95299053]
[189.88592529 26.19924927]
[178.93081665 36.44550705]
[167.97572327 46.69176865]
[157.02062988 56.93802643]
[146.06553650 67.18428802]
[135.11042786 77.43054962]
[124.15533447 87.67680359]
[127.04357147 98.00338745]
[125.70319366 108.64216614]
[120.34378052 117.92963409]
[128.41502380 130.57301331]
[136.48625183 143.21640015]
[151.65972900 146.73825073]
[159.66499329 159.67543030]
[156.21392822 174.11930847]
[164.28517151 186.76269531]
[172.35639954 199.40608215]
[180.42764282 212.04945374]
[196.95715332 220.14378357]
[197.07688904 237.68389893]
[205.35826111 250.19064331]
[219.42845154 257.42529297]
[220.00384521 272.30877686]
[228.28521729 284.81555176]
[236.56660461 297.32229614]
[244.84797668 309.82904053]
[253.12934875 322.33578491]
[260.49160767 327.77709961]
[261.44256592 335.12142944]
[269.51382446 347.76483154]
[277.58505249 360.40820312]
[285.65628052 373.05157471]
[293.72750854 385.69497681]
[301.79876709 398.33834839]
[315.41793823 408.43560791]
[309.48544312 424.31774902]
[292.58172607 423.01370239]
[289.15536499 406.40960693]
[281.08413696 393.76620483]
[273.01290894 381.12283325]
[264.94168091 368.47943115]
[256.87042236 355.83605957]
[248.79919434 343.19265747]
[240.62260437 330.61715698]
[232.34123230 318.11041260]
[224.05984497 305.60366821]
[215.77847290 293.09692383]
[207.49710083 280.59017944]
[194.01924133 274.25009155]
[192.85151672 258.47201538]
[184.57012939 245.96527100]
[172.77105713 243.24313354]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 150]
[7 147]
[8 146]
[9 145]
[11 41]
[12 40]
[13 39]
[14 38]
[15 37]
[17 35]
[18 34]
[19 33]
[23 31]
[24 30]
[42 93]
[43 92]
[44 91]
[45 90]
[46 89]
[49 86]
[50 85]
[51 84]
[53 79]
[54 78]
[55 77]
[57 75]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
[95 142]
[96 141]
[97 140]
[98 139]
[99 138]
[100 137]
[101 136]
[102 135]
[103 134]
[106 131]
[107 130]
[108 129]
[110 128]
[111 127]
[112 126]
[113 124]
[114 123]
[115 122]
[155 186]
[156 185]
[158 183]
[159 182]
[160 181]
[161 180]
[162 179]
[164 178]
[165 177]
[166 176]
[167 175]
[168 174]
[169 173]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
