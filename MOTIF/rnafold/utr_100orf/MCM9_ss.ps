%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:33:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUACCUAGAUUCAAGAUGAAUAGCGAUCAAGUUACACUGGUUGGUCAAGUGUUUGAGUCAUAUGUUUCGGAAUACCAUAAGAAUGAUAUUCUUCUAAUCUUGAAGGAAAGGGAUG\
) } def
/len { sequence length } bind def

/coor [
[90.12808990 339.34762573]
[84.99868011 324.70288086]
[89.48911285 309.84973145]
[101.87271118 300.49954224]
[101.46652222 285.50503540]
[101.06033325 270.51055908]
[87.26903534 261.72021484]
[81.33041382 246.30471802]
[85.74726105 230.21475220]
[98.98364258 219.78697205]
[98.17156219 204.80897522]
[97.35948181 189.83096313]
[96.54739380 174.85296631]
[95.73531342 159.87496948]
[94.92322540 144.89695740]
[94.11114502 129.91896057]
[93.29905701 114.94096375]
[86.81696320 101.41386414]
[75.65167999 91.39704895]
[64.48640442 81.38023376]
[53.32113266 71.36341858]
[42.15585709 61.34659958]
[24.77493858 62.64588547]
[12.03745747 51.24668121]
[11.43188858 34.50017548]
[-0.00054267 24.78937912]
[-11.56341839 15.23428154]
[-23.25461960 5.83663130]
[-34.94581985 -3.56101847]
[-46.63702011 -12.95866871]
[-52.06489944 -13.78143501]
[-56.15688705 -16.41025543]
[-58.43728256 -19.99580574]
[-58.85475159 -23.62464714]
[-69.74468231 -33.94013977]
[-80.63461304 -44.25563049]
[-91.52455139 -54.57112122]
[-102.41448212 -64.88661194]
[-117.37004852 -61.10050964]
[-131.99111938 -66.02268982]
[-141.61216736 -78.08250427]
[-143.16314697 -93.43170166]
[-136.14913940 -107.17242432]
[-122.80830383 -114.92004395]
[-107.39764404 -114.20233154]
[-94.83464813 -105.24829865]
[-89.12812042 -90.91515350]
[-92.09899139 -75.77654266]
[-81.20906067 -65.46105194]
[-70.31912231 -55.14556122]
[-59.42919159 -44.83007050]
[-48.53926086 -34.51457977]
[-37.23937225 -24.64986992]
[-25.54817009 -15.25221920]
[-13.85696888 -5.85456944]
[-2.16576862 3.54308081]
[5.11573553 5.30443859]
[9.71025181 13.35694885]
[21.14268303 23.06774330]
[33.79209900 20.23649597]
[45.92741013 25.32196236]
[52.98588943 36.65713120]
[52.17267227 50.18132401]
[63.33794785 60.19813919]
[74.50322723 70.21495819]
[85.66850281 80.23177338]
[96.83377838 90.24858856]
[103.23217773 83.02477264]
[115.47774506 81.25672150]
[129.55763245 76.08402252]
[143.63752747 70.91133118]
[157.71740723 65.73863220]
[171.79730225 60.56594086]
[185.87718201 55.39324570]
[196.16265869 43.37162018]
[210.77740479 46.24535370]
[224.85729980 41.07265854]
[238.93717957 35.89996719]
[249.01924133 22.96612930]
[265.22174072 25.49821091]
[270.87692261 40.89142227]
[260.16723633 53.31054306]
[244.10987854 49.97985458]
[230.02999878 55.15254593]
[215.95010376 60.32524109]
[206.67170715 71.97688293]
[191.04988098 69.47312927]
[176.96998596 74.64582825]
[162.89010620 79.81851959]
[148.81021118 84.99121857]
[134.73033142 90.16390991]
[120.65043640 95.33660889]
[135.19567871 99.00211334]
[140.63146973 112.98253632]
[132.38258362 125.51073456]
[117.39199829 126.04190063]
[108.27706146 114.12887573]
[109.08914185 129.10687256]
[109.90122986 144.08488464]
[110.71331024 159.06288147]
[111.52539825 174.04087830]
[112.33747864 189.01889038]
[113.14956665 203.99688721]
[113.96164703 218.97488403]
[126.11966705 225.62707520]
[133.31632996 237.34358215]
[133.74580383 250.97836304]
[127.40264893 262.93252563]
[116.05483246 270.10437012]
[116.46102142 285.09884644]
[116.86721039 300.09335327]
[129.73886108 308.75939941]
[135.02684021 323.34765625]
[130.69779968 338.24862671]
[118.41635895 347.73260498]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 111]
[5 110]
[6 109]
[10 104]
[11 103]
[12 102]
[13 101]
[14 100]
[15 99]
[16 98]
[17 97]
[18 67]
[19 66]
[20 65]
[21 64]
[22 63]
[25 59]
[26 58]
[27 56]
[28 55]
[29 54]
[30 53]
[34 52]
[35 51]
[36 50]
[37 49]
[38 48]
[69 92]
[70 91]
[71 90]
[72 89]
[73 88]
[74 87]
[76 85]
[77 84]
[78 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
