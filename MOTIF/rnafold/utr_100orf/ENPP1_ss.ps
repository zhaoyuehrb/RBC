%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:29:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGAGCGGCCGGGGCCACGAUGGAGCGCGACGGCUGCGCGGGGGGCGGGAGCCGCGGCGGCGAGGGCGGGCGCGCUCCCCGGGAGGGCCCGGCGGGGAACGGCCGCGAUCGGGGCCGCA\
) } def
/len { sequence length } bind def

/coor [
[86.65431976 114.86552429]
[73.17620087 121.44886780]
[59.69808960 128.03221130]
[54.73020554 140.02081299]
[43.27085876 145.19827271]
[31.75270844 141.26181030]
[18.10822868 147.49302673]
[4.46374893 153.72425842]
[-9.18073082 159.95547485]
[-22.82521057 166.18670654]
[-36.46969223 172.41793823]
[-50.11417007 178.64915466]
[-55.71545792 193.18405151]
[-69.64166260 199.30903625]
[-83.46395111 193.87948608]
[-97.10843658 200.11071777]
[-97.88494110 215.39651489]
[-105.68614960 228.56465149]
[-118.71939850 236.58917236]
[-133.98974609 237.62612915]
[-147.98815918 231.43721008]
[-157.49792480 219.44458008]
[-160.33377075 204.40408325]
[-155.84402466 189.77189636]
[-145.06040955 178.91040039]
[-130.46092224 174.31547546]
[-115.40039825 177.04301453]
[-103.33966064 186.46623230]
[-89.69517517 180.23501587]
[-84.74687958 166.23323059]
[-70.99820709 159.71951294]
[-56.34539795 165.00468445]
[-42.70091629 158.77345276]
[-29.05643654 152.54222107]
[-15.41195583 146.31100464]
[-1.76747632 140.07977295]
[11.87700367 133.84855652]
[25.52148438 127.61732483]
[34.84002686 112.80799103]
[53.11474228 114.55410004]
[66.59285736 107.97075653]
[80.07097626 101.38740540]
[79.77855682 91.75927734]
[84.24556732 82.30113983]
[93.16283417 75.37782288]
[85.05322266 62.75901794]
[76.94361115 50.14021683]
[62.12746811 43.11071777]
[61.07699585 26.74525070]
[74.87284088 17.87920189]
[89.32301331 25.63320351]
[89.56241608 42.03060532]
[97.67202759 54.64940643]
[105.78163910 67.26821136]
[119.58329010 73.14311218]
[134.29980469 70.24063873]
[149.01631165 67.33815765]
[163.73281860 64.43568420]
[178.44932556 61.53320312]
[187.26396179 48.69030762]
[202.22993469 45.95642471]
[214.41935730 54.43898010]
[229.13586426 51.53650284]
[243.85237122 48.63402557]
[252.66700745 35.79113007]
[267.63299561 33.05724716]
[279.82238770 41.53979874]
[294.53890991 38.63732147]
[309.25543213 35.73484421]
[323.97192383 32.83236694]
[336.01412964 22.57098389]
[349.99801636 27.69934464]
[364.71453857 24.79686737]
[373.52917480 11.95397091]
[388.49514771 9.22008801]
[400.68457031 17.70264244]
[415.40106201 14.80016422]
[430.11758423 11.89768600]
[444.83407593 8.99520874]
[459.51165771 5.90193367]
[474.14785767 2.61838412]
[488.78405762 -0.66516584]
[503.42025757 -3.94871569]
[518.05645752 -7.23226547]
[529.74603271 -18.73381042]
[545.47717285 -14.10091305]
[549.06701660 1.90049827]
[536.82263184 12.80954361]
[521.34002686 7.40393257]
[506.70382690 10.68748283]
[492.06762695 13.97103214]
[477.43142700 17.25458145]
[462.79522705 20.53813171]
[456.88610840 25.12788200]
[447.73657227 23.71171761]
[433.02005005 26.61419487]
[418.30352783 29.51667213]
[403.58703613 32.41915131]
[395.53109741 44.89461517]
[380.64779663 48.04778290]
[367.61700439 39.51337433]
[352.90048218 42.41585159]
[341.91091919 52.46963120]
[326.87438965 47.54887390]
[312.15789795 50.45135117]
[297.44137573 53.35382843]
[282.72488403 56.25630951]
[274.66891479 68.73177338]
[259.78564453 71.88494110]
[246.75485229 63.35053253]
[232.03834534 66.25301361]
[217.32183838 69.15548706]
[209.26588440 81.63095093]
[194.38259888 84.78411865]
[181.35180664 76.24971008]
[166.63528442 79.15219116]
[151.91877747 82.05466461]
[137.20227051 84.95714569]
[122.48576355 87.85962677]
[121.46410370 110.03713989]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[6 38]
[7 37]
[8 36]
[9 35]
[10 34]
[11 33]
[12 32]
[15 29]
[16 28]
[45 54]
[46 53]
[47 52]
[55 119]
[56 118]
[57 117]
[58 116]
[59 115]
[62 112]
[63 111]
[64 110]
[67 107]
[68 106]
[69 105]
[70 104]
[72 102]
[73 101]
[76 98]
[77 97]
[78 96]
[79 95]
[80 93]
[81 92]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
