%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:31:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGCCGGGCAACGCGGCCCGGGCCAUGGAGGCGUCGUACGAGUCCGAGUCCGAGUCCGAGUCUGAGGCCGGGCCUGGGACUCAGCGGCCCGGGACCGGGACCGUGAGCGCGGCCGUGCGCGAGC\
) } def
/len { sequence length } bind def

/coor [
[28.66049194 380.08428955]
[13.87862301 382.63308716]
[-0.00279208 376.94921875]
[-8.75223446 364.76531982]
[-9.70230484 349.79421997]
[-19.05465126 361.52166748]
[-28.40699959 373.24914551]
[-37.75934601 384.97662354]
[-47.11169434 396.70410156]
[-56.46403885 408.43157959]
[-54.44568634 424.10644531]
[-64.16831207 436.56622314]
[-79.86365509 438.41873169]
[-92.21994019 428.56494141]
[-93.90641785 412.85089111]
[-83.92251587 400.59945679]
[-68.19151306 399.07922363]
[-58.83916473 387.35174561]
[-49.48682022 375.62426758]
[-40.13447189 363.89682007]
[-30.78212357 352.16934204]
[-21.42977715 340.44186401]
[-13.44929600 327.74099731]
[-6.94104004 314.22647095]
[-0.60176623 300.63183594]
[5.56754017 286.95925903]
[11.73684692 273.28668213]
[17.90615273 259.61407471]
[24.07546043 245.94149780]
[18.58331108 232.14396667]
[24.64509392 218.19013977]
[39.15445328 212.52301025]
[45.32376099 198.85041809]
[51.49306870 185.17784119]
[57.66237259 171.50524902]
[53.67415619 160.01235962]
[58.79051208 148.53346252]
[70.74511719 143.50321960]
[77.25337982 129.98867798]
[83.76163483 116.47415161]
[90.26988983 102.95961761]
[90.66597748 94.81288910]
[97.11257172 89.19236755]
[103.95573425 75.84428406]
[110.79888916 62.49620819]
[117.64205170 49.14813232]
[113.02634430 34.27086639]
[120.15643311 20.83150291]
[134.36807251 16.52281761]
[141.21122742 3.17473960]
[148.05439758 -10.17333794]
[154.73062134 -23.60568619]
[161.23887634 -37.12022018]
[160.25547791 -52.91083527]
[172.74870300 -61.02062225]
[179.25695801 -74.53515625]
[185.76521301 -88.04969025]
[183.25277710 -107.97756195]
[199.48788452 -118.36092377]
[205.31440735 -132.18307495]
[211.14093018 -146.00521851]
[216.96743774 -159.82736206]
[222.79396057 -173.64950562]
[228.62048340 -187.47164917]
[226.85121155 -203.19360352]
[238.92466736 -211.91604614]
[244.75119019 -225.73818970]
[250.57771301 -239.56033325]
[256.40423584 -253.38247681]
[256.98513794 -270.32647705]
[273.42776489 -274.45883179]
[281.95040894 -259.80273438]
[270.22637939 -247.55595398]
[264.39987183 -233.73381042]
[258.57333374 -219.91166687]
[252.74681091 -206.08952332]
[254.93283081 -191.35621643]
[242.44262695 -181.64512634]
[236.61610413 -167.82298279]
[230.78958130 -154.00083923]
[224.96305847 -140.17869568]
[219.13655090 -126.35654449]
[213.31002808 -112.53440094]
[218.04185486 -103.32691956]
[216.84036255 -92.82225800]
[209.86642456 -84.58351135]
[199.27975464 -81.54142761]
[192.77149963 -68.02690125]
[186.26322937 -54.51236343]
[187.71214294 -39.68840027]
[174.75340271 -30.61196327]
[168.24514771 -17.09743118]
[168.17686462 -9.62408352]
[161.40246582 -3.33017778]
[154.55931091 10.01789951]
[147.71615601 23.36597633]
[152.51371765 37.42012024]
[145.76393127 51.05445099]
[130.99012756 55.99129105]
[124.14696503 69.33937073]
[117.30381012 82.68744659]
[110.46064758 96.03552246]
[103.78442383 109.46787262]
[97.27616882 122.98240662]
[90.76790619 136.49693298]
[84.25965118 150.01147461]
[86.10316467 168.28190613]
[71.33496094 177.67456055]
[65.16565704 191.34713745]
[58.99634933 205.01972961]
[52.82704163 218.69232178]
[58.17858124 233.32101440]
[51.72725296 247.09907532]
[37.74804688 252.11080933]
[31.57874107 265.78338623]
[25.40943527 279.45599365]
[19.24012756 293.12857056]
[13.07082176 306.80114746]
[12.37381554 316.02178955]
[6.57349300 320.73471069]
[0.06523675 334.24926758]
[13.96469212 328.60964966]
[28.73836517 331.20553589]
[39.88274384 341.24560547]
[44.00064850 355.66928101]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 22]
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[23 121]
[24 120]
[25 118]
[26 117]
[27 116]
[28 115]
[29 114]
[32 111]
[33 110]
[34 109]
[35 108]
[38 106]
[39 105]
[40 104]
[41 103]
[43 102]
[44 101]
[45 100]
[46 99]
[49 96]
[50 95]
[51 94]
[52 92]
[53 91]
[55 89]
[56 88]
[57 87]
[59 83]
[60 82]
[61 81]
[62 80]
[63 79]
[64 78]
[66 76]
[67 75]
[68 74]
[69 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
