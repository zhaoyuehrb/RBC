%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:27:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGAGCCGAGCAGAGGGGCCGCCUCCGCCCGCACCCAGCAUGCUUCGCCGAGGCUAUAAGGCCUCUGAAAGGCGAAGACACUUGAGCGAGAGGCUCAGCUGGCACCAAGACCAGGCGCUGAGUAGCAGCAUCUACCUCC\
) } def
/len { sequence length } bind def

/coor [
[90.23036194 129.04788208]
[95.01131439 114.83019257]
[83.99931335 125.01527405]
[72.98731232 135.20034790]
[71.40267181 140.34425354]
[68.28092194 143.95843506]
[64.48509979 145.71008301]
[60.88286209 145.66748047]
[49.21516418 155.09428406]
[43.34328461 169.78549194]
[28.58088303 171.76557922]
[16.91318321 181.19238281]
[11.04130554 195.88359070]
[-3.72109795 197.86367798]
[-15.38879681 207.29048157]
[-27.05649567 216.71730042]
[-38.72419357 226.14410400]
[-41.84192657 241.88130188]
[-56.15529633 249.12748718]
[-70.68430328 242.32398987]
[-74.28354645 226.68989563]
[-64.19198608 214.21832275]
[-48.15100861 214.47640991]
[-36.48330688 205.04960632]
[-24.81560898 195.62278748]
[-13.14791107 186.19596863]
[-8.11058521 172.17903137]
[7.48637009 169.52468872]
[19.15406799 160.09786987]
[24.19139481 146.08093262]
[39.78834915 143.42658997]
[51.45604706 133.99977112]
[62.80223465 124.18835449]
[73.81423950 114.00327301]
[84.82624054 103.81819153]
[90.52787018 89.94406891]
[89.85966492 74.95896149]
[89.19146729 59.97385025]
[88.52326202 44.98873901]
[87.85505676 30.00362968]
[68.87358093 25.61321640]
[57.15933609 2.10704112]
[51.30349731 -11.70270729]
[45.29417801 -25.44636345]
[39.13212585 -39.12222290]
[32.97007370 -52.79808044]
[26.80802155 -66.47393799]
[20.64596939 -80.14979553]
[14.48391724 -93.82565308]
[8.32186508 -107.50151825]
[1.40799057 -120.81310272]
[-6.23625898 -133.71913147]
[-13.88050842 -146.62515259]
[-21.52475929 -159.53117371]
[-29.16900826 -172.43719482]
[-36.81325912 -185.34321594]
[-51.36332321 -192.90811157]
[-51.81655121 -209.30099487]
[-37.70669937 -217.65827942]
[-23.54877281 -209.38270569]
[-23.90723419 -192.98747253]
[-16.26298523 -180.08145142]
[-8.61873436 -167.17543030]
[-0.97448504 -154.26939392]
[6.66976452 -141.36337280]
[14.31401443 -128.45735168]
[20.92761993 -141.92063904]
[35.52637863 -145.36683655]
[47.46261597 -136.28244019]
[48.03058243 -121.29320526]
[36.81603241 -111.33158875]
[21.99772263 -113.66356659]
[28.15977669 -99.98770905]
[34.32182693 -86.31185150]
[40.48387909 -72.63599396]
[46.64593124 -58.96013260]
[52.80798721 -45.28427505]
[58.97003937 -31.60841560]
[64.63136292 -26.76312256]
[65.11324310 -17.55854607]
[70.96908569 -3.74879813]
[78.22422791 -1.84803808]
[92.73451996 1.95348179]
[99.98966217 3.85424161]
[111.86447906 -5.31028795]
[123.73930359 -14.47481728]
[135.61412048 -23.63934708]
[147.48895264 -32.80387497]
[150.95651245 -48.46770477]
[165.42776489 -55.39319611]
[179.80160522 -48.26770782]
[183.05163574 -32.55730057]
[172.68472290 -20.31365967]
[156.65347290 -20.92905426]
[144.77865601 -11.76452446]
[132.90383911 -2.59999514]
[121.02901459 6.56453419]
[109.15419006 15.72906399]
[102.84017181 29.33542824]
[103.50836945 44.32053757]
[104.17657471 59.30564499]
[104.84477997 74.29075623]
[105.51297760 89.27586365]
[112.11082458 75.80484009]
[117.80973053 61.92959595]
[129.51293945 52.54691315]
[144.29545593 50.00183105]
[158.46263123 54.93044281]
[168.47363281 66.10093689]
[171.82637024 80.72143555]
[167.68292236 95.13780975]
[157.07884216 105.74693298]
[142.66667175 109.89717865]
[128.39660645 105.27490997]
[138.70373535 116.17276764]
[149.01084900 127.07061768]
[164.11485291 131.78015137]
[167.23895264 146.34342957]
[177.54608154 157.24128723]
[187.85319519 168.13914490]
[198.16032410 179.03700256]
[214.09257507 180.91926575]
[222.43179321 194.62463379]
[216.78085327 209.63951111]
[201.47465515 214.44575500]
[188.25482178 205.35646057]
[187.26246643 189.34411621]
[176.95535278 178.44627380]
[166.64822388 167.54841614]
[156.34109497 156.65055847]
[141.97433472 152.72052002]
[138.11299133 137.37774658]
[127.80587006 126.47988892]
[117.49874878 115.58203125]
[121.31938934 130.08729553]
[127.63394165 143.69342041]
[123.99484253 158.24528503]
[112.01897430 167.27737427]
[97.02733612 166.77662659]
[85.68085480 156.96554565]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 35]
[3 34]
[4 33]
[8 32]
[9 31]
[11 29]
[12 28]
[14 26]
[15 25]
[16 24]
[17 23]
[36 103]
[37 102]
[38 101]
[39 100]
[40 99]
[42 81]
[43 80]
[44 78]
[45 77]
[46 76]
[47 75]
[48 74]
[49 73]
[50 72]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[84 98]
[85 97]
[86 96]
[87 95]
[88 94]
[114 134]
[115 133]
[116 132]
[118 130]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
