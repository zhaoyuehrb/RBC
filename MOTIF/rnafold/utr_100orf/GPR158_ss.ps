%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:09:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCAAAUUUAAAAAGUGAUUCCCCCCCCUCCCGUUCCCUCCUCUUCUCUCUGGGAGGCAGAUGGGAGCCAUGGCUUACCCCUUACUCCUCUGCCUCCUGCUUGCUCAGCUGGGAUUGGGAGCUGUUGGCGCCAGCCGCGACCCCCAAGGACGGCCGGAUU\
) } def
/len { sequence length } bind def

/coor [
[119.05807495 352.82440186]
[106.17266083 360.50332642]
[91.84423828 364.94140625]
[76.87428284 365.89031982]
[62.10015106 363.29705811]
[48.34824753 357.30664062]
[36.38779449 348.25415039]
[26.88781166 336.64593506]
[20.37968445 323.13134766]
[17.22745323 308.46630859]
[17.60743904 293.47113037]
[21.49838638 278.98455811]
[28.68265533 265.81692505]
[38.75838470 254.70478821]
[51.16197968 246.26969910]
[65.19963837 240.98347473]
[80.08615112 239.14181519]
[94.98883057 240.84773254]
[109.07408142 246.00581360]
[121.55403900 254.32751465]
[131.72990417 265.34637451]
[128.24957275 250.75572205]
[113.65473175 247.68063354]
[101.79358673 238.53610229]
[95.05141449 225.09347534]
[94.81338501 209.99501038]
[101.18025208 196.23457336]
[112.93780518 186.56393433]
[109.45747375 171.97326660]
[105.97714233 157.38261414]
[102.49681091 142.79194641]
[99.01648712 128.20129395]
[95.53615570 113.61064148]
[86.06694794 103.32347107]
[89.87319183 89.86968994]
[86.39286041 75.27903748]
[82.91252899 60.68837738]
[79.43219757 46.09772110]
[66.25181580 37.79618835]
[62.93011856 22.94960785]
[70.92558289 10.43529320]
[67.44525146 -4.15536499]
[53.04978180 -5.04258204]
[39.50527954 -9.95212841]
[27.91049767 -18.47616196]
[19.20331573 -29.91401482]
[14.08488560 -43.32979202]
[12.96317005 -57.62894058]
[15.92044449 -71.64754486]
[22.70733643 -84.24708557]
[32.76381683 -94.40687561]
[45.26542282 -101.30677795]
[42.07044220 -115.96256256]
[38.87546158 -130.61834717]
[35.68048477 -145.27413940]
[32.48550415 -159.92993164]
[29.29052544 -174.58570862]
[26.09554672 -189.24150085]
[22.90056801 -203.89729309]
[19.70558739 -218.55307007]
[16.51060867 -233.20886230]
[12.29933548 -238.41125488]
[11.50604248 -244.10301208]
[13.48870182 -248.49844360]
[10.86796665 -263.26773071]
[8.24723148 -278.03701782]
[5.62649679 -292.80630493]
[-7.20766592 -297.91149902]
[-15.76516151 -308.61502075]
[-17.88648605 -322.04394531]
[-13.12151623 -334.66119385]
[-2.81976032 -343.19711304]
[-5.15182161 -358.01470947]
[-18.07460022 -367.11291504]
[-20.69662857 -382.69818115]
[-11.46230316 -395.52404785]
[4.14981365 -397.98114014]
[16.87733078 -388.61172485]
[19.16923714 -372.97451782]
[9.66578579 -360.34677124]
[11.99784756 -345.52917480]
[26.83247375 -338.55407715]
[34.68114471 -323.97387695]
[32.28729248 -307.42172241]
[20.39578056 -295.42703247]
[23.01651573 -280.65774536]
[25.63725090 -265.88845825]
[28.25798607 -251.11918640]
[31.16639709 -236.40383911]
[34.36137390 -221.74806213]
[37.55635452 -207.09226990]
[40.75133514 -192.43647766]
[43.94631195 -177.78070068]
[47.14129257 -163.12490845]
[50.33627319 -148.46911621]
[53.53125000 -133.81332397]
[56.72623062 -119.15754700]
[59.92120743 -104.50175476]
[75.49946594 -103.11610413]
[89.90802765 -96.98399353]
[101.73628235 -86.69275665]
[109.82223511 -73.23751831]
[113.36663818 -57.92501831]
[112.01197815 -42.24667358]
[105.87851715 -27.73332405]
[95.55369568 -15.80577755]
[82.03591156 -7.63569593]
[85.51624298 6.95496178]
[98.29956818 14.51288128]
[102.03697205 29.26030350]
[94.02285767 42.61738968]
[97.50318909 57.20804596]
[100.98351288 71.79870605]
[104.46384430 86.38935852]
[113.93305206 96.67652893]
[110.12680817 110.13031006]
[113.60713959 124.72096252]
[117.08747101 139.31161499]
[120.56780243 153.90228271]
[124.04813385 168.49293518]
[127.52846527 183.08360291]
[142.38523865 186.40588379]
[154.27780151 195.81088257]
[160.88055420 209.39115906]
[160.93203735 224.42971802]
[154.47563171 237.94357300]
[142.84022522 247.27539062]
[146.32055664 261.86605835]
[151.12107849 265.92062378]
[153.47157288 271.16690063]
[153.31044006 276.38070679]
[162.54792786 288.19885254]
[177.14256287 294.30682373]
[178.88438416 309.09924316]
[188.12187195 320.91738892]
[197.35935974 332.73553467]
[206.59684753 344.55371094]
[217.51460266 345.26000977]
[226.04862976 351.74819946]
[229.50358582 361.66366577]
[226.95814514 371.62347412]
[235.72749329 383.79306030]
[251.26890564 387.77349854]
[257.71511841 402.46450806]
[250.12112427 416.59643555]
[234.31239319 419.32843018]
[222.41604614 408.56475830]
[223.55792236 392.56240845]
[214.78857422 380.39282227]
[196.63111877 373.83099365]
[194.77868652 353.79119873]
[185.54119873 341.97302246]
[176.30371094 330.15487671]
[167.06622314 318.33670044]
[153.13232422 313.07406616]
[150.72976685 297.43634033]
[141.49229431 285.61819458]
[143.76268005 300.44537354]
[142.48744202 315.39105225]
[137.73789978 329.61926270]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 128]
[22 127]
[28 121]
[29 120]
[30 119]
[31 118]
[32 117]
[33 116]
[35 114]
[36 113]
[37 112]
[38 111]
[41 108]
[42 107]
[52 98]
[53 97]
[54 96]
[55 95]
[56 94]
[57 93]
[58 92]
[59 91]
[60 90]
[61 89]
[64 88]
[65 87]
[66 86]
[67 85]
[72 81]
[73 80]
[131 157]
[132 156]
[134 154]
[135 153]
[136 152]
[137 151]
[141 149]
[142 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
