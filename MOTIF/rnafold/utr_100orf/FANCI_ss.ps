%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUGUUGUUACGGGUAACGGAAGUGUGGCGGCGUUGGGUUGAGCGGGCUUUUUGGAAGUUUGUGGCGGAGUUCUGUGAUAUGAGCAACAAUGGACCAGAAGAUUUUAUCUCUAGCAGCAGAAAAAACAGCAGACAAACUGCAAGAAUUUCUUCAAACCCUGAGAGAAGGUGAUUUGACUAAUCUCCUUC\
) } def
/len { sequence length } bind def

/coor [
[106.49819946 157.53144836]
[93.55310059 165.10932922]
[82.34597015 155.13935852]
[88.36426544 141.40034485]
[80.90075684 140.66137695]
[72.12394714 152.82556152]
[63.34713364 164.98976135]
[54.57032394 177.15394592]
[45.79351425 189.31814575]
[37.01670456 201.48234558]
[28.23989296 213.64653015]
[19.46308136 225.81072998]
[10.68627071 237.97491455]
[17.57166290 251.64422607]
[17.30433655 266.94738770]
[9.94572163 280.36788940]
[-2.81322765 288.82174683]
[-18.04059601 290.36636353]
[-32.23724747 284.64675903]
[-42.14089584 272.97729492]
[-45.47575378 258.03952026]
[-41.47549438 243.26602173]
[-31.05934906 232.05162048]
[-16.62087440 226.97334290]
[-1.47792208 229.19810486]
[7.29888868 217.03392029]
[16.07569885 204.86972046]
[24.85251045 192.70553589]
[33.62932205 180.54133606]
[42.40613174 168.37713623]
[51.18294144 156.21295166]
[59.95975113 144.04875183]
[68.73656464 131.88456726]
[58.95015335 109.75646210]
[62.39302063 87.17974854]
[76.55383301 71.02757263]
[95.88569641 65.43423462]
[97.36363220 50.50722122]
[98.84156036 35.58020782]
[100.31948853 20.65319443]
[101.79741669 5.72618103]
[103.15254211 -9.21248150]
[104.38475800 -24.16178322]
[105.61698151 -39.11108780]
[103.20023346 -47.93808746]
[106.99438477 -54.29545975]
[108.47232056 -69.22247314]
[109.95024872 -84.14948273]
[103.61030579 -98.64485168]
[112.56395721 -110.54785156]
[114.04189301 -125.47486877]
[115.51982117 -140.40188599]
[116.99774933 -155.32888794]
[118.47567749 -170.25590515]
[119.95361328 -185.18292236]
[112.39007568 -195.64442444]
[113.93893433 -208.05641174]
[123.22680664 -215.82301331]
[124.95005035 -230.72370911]
[126.67329407 -245.62438965]
[128.39653015 -260.52508545]
[130.11976624 -275.42575073]
[131.84301758 -290.32644653]
[133.56625366 -305.22714233]
[125.85863495 -321.94192505]
[136.84309387 -335.61871338]
[138.32102966 -350.54571533]
[123.81397247 -360.43862915]
[116.34421539 -376.23141479]
[117.88372803 -393.54437256]
[127.91967010 -407.62646484]
[143.62002563 -414.65890503]
[144.60620117 -429.62646484]
[145.59237671 -444.59399414]
[146.57855225 -459.56155396]
[147.56472778 -474.52911377]
[148.55090332 -489.49664307]
[135.33909607 -497.06033325]
[126.75643158 -509.55932617]
[124.46105957 -524.48419189]
[128.85533142 -538.86651611]
[139.01641846 -549.86932373]
[152.88960266 -555.34655762]
[153.87577820 -570.31414795]
[154.86195374 -585.28167725]
[142.20462036 -593.86883545]
[135.58862305 -607.54821777]
[136.70060730 -622.60241699]
[145.14207458 -634.99584961]
[158.56318665 -641.45648193]
[159.54936218 -656.42401123]
[160.53553772 -671.39160156]
[147.72357178 -679.86206055]
[140.87771606 -693.61090088]
[141.83944702 -708.93963623]
[150.35006714 -721.72497559]
[164.12025452 -728.52770996]
[179.44592285 -727.51794434]
[192.20452881 -718.96728516]
[198.96406555 -705.17584229]
[197.90625000 -689.85339355]
[189.31565857 -677.12164307]
[175.50308228 -670.40539551]
[174.51690674 -655.43786621]
[173.53073120 -640.47027588]
[185.98814392 -632.30462646]
[192.73054504 -618.91076660]
[191.85771179 -603.84075928]
[183.50408936 -591.14770508]
[169.82949829 -584.29547119]
[168.84332275 -569.32794189]
[167.85714722 -554.36041260]
[180.89175415 -547.11022949]
[189.52137756 -534.86938477]
[191.99061584 -520.03485107]
[187.75686646 -505.54016113]
[177.60844421 -494.27532959]
[163.51846313 -488.51046753]
[162.53227234 -473.54293823]
[161.54609680 -458.57537842]
[160.55992126 -443.60781860]
[159.57374573 -428.64028931]
[158.58757019 -413.67272949]
[169.80010986 -407.81045532]
[177.98831177 -398.10342407]
[181.90579224 -385.97430420]
[180.93553162 -373.21829224]
[175.18669128 -361.73760986]
[165.48367310 -353.25762939]
[153.24804688 -349.06777954]
[151.77011108 -334.14077759]
[159.19839478 -324.58016968]
[158.07815552 -312.12216187]
[148.46693420 -303.50390625]
[146.74369812 -288.60321045]
[145.02046204 -273.70251465]
[143.29721069 -258.80184937]
[141.57397461 -243.90115356]
[139.85073853 -229.00047302]
[138.12750244 -214.09977722]
[145.95959473 -198.40356445]
[134.88063049 -183.70498657]
[133.40269470 -168.77796936]
[131.92475891 -153.85096741]
[130.44683838 -138.92395020]
[128.96890259 -123.99693298]
[127.49097443 -109.06992340]
[133.93663025 -95.64223480]
[124.87725830 -82.67155457]
[123.39933014 -67.74454498]
[121.92140198 -52.81752777]
[120.56627655 -37.87886810]
[119.33406067 -22.92956352]
[118.10184479 -7.98026228]
[120.69009399 -1.04392946]
[116.72443390 7.20411110]
[115.24649811 22.13112450]
[113.76856995 37.05813599]
[112.29064178 51.98514938]
[110.81271362 66.91216278]
[123.21454620 71.89790344]
[133.32254028 81.54573822]
[139.39083862 94.80333710]
[140.15319824 109.97203827]
[135.05741882 124.92307281]
[124.40391541 137.39620972]
[130.62493896 151.04534912]
[136.84596252 164.69447327]
[143.06698608 178.34361267]
[149.28800964 191.99275208]
[162.05191040 201.34118652]
[160.28985596 216.13119507]
[166.51087952 229.78033447]
[172.73190308 243.42945862]
[178.95292664 257.07861328]
[193.41630554 264.02053833]
[196.86605835 279.68829346]
[186.65585327 292.06292725]
[170.61807251 291.65164185]
[161.05552673 278.76998901]
[165.30378723 263.29962158]
[159.08277893 249.65048218]
[152.86175537 236.00135803]
[146.64073181 222.35221863]
[134.32179260 213.98005676]
[135.63887024 198.21377563]
[129.41784668 184.56463623]
[123.19683075 170.91549683]
[116.97580719 157.26637268]
[110.75478363 143.61723328]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 33]
[6 32]
[7 31]
[8 30]
[9 29]
[10 28]
[11 27]
[12 26]
[13 25]
[37 160]
[38 159]
[39 158]
[40 157]
[41 156]
[42 154]
[43 153]
[44 152]
[46 151]
[47 150]
[48 149]
[50 147]
[51 146]
[52 145]
[53 144]
[54 143]
[55 142]
[58 140]
[59 139]
[60 138]
[61 137]
[62 136]
[63 135]
[64 134]
[66 131]
[67 130]
[72 123]
[73 122]
[74 121]
[75 120]
[76 119]
[77 118]
[83 112]
[84 111]
[85 110]
[90 105]
[91 104]
[92 103]
[166 190]
[167 189]
[168 188]
[169 187]
[170 186]
[172 184]
[173 183]
[174 182]
[175 181]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
