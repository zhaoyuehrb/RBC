%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:24:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACCCGCCAUUGGCCCUGGGAGGUGAGCCUCCGGAUGGAAAAUGAGCACGUGUGUGGAGGGGCCCUCAUUGACCCCAGCUGGGUGGUGACUGCGGCCC\
) } def
/len { sequence length } bind def

/coor [
[97.08148193 325.07858276]
[82.58177948 319.80960083]
[73.25067139 307.52407837]
[72.06567383 292.14230347]
[79.40492249 278.57250977]
[92.92648315 271.14480591]
[93.85903168 256.17382812]
[94.79157257 241.20285034]
[95.72412109 226.23185730]
[95.95739746 211.23367310]
[95.49089813 196.24093628]
[95.02439880 181.24818420]
[94.55789948 166.25544739]
[94.09140778 151.26269531]
[85.96202850 138.78221130]
[93.26640320 124.74808502]
[92.79990387 109.75534058]
[91.86736298 94.78435516]
[90.46967316 79.84961700]
[89.07198334 64.91487885]
[87.67429352 49.98013687]
[86.27660370 35.04539490]
[73.81851196 19.34888458]
[82.20122528 2.04157448]
[79.87774658 -12.77738190]
[77.55427551 -27.59633827]
[75.23080444 -42.41529465]
[72.90733337 -57.23425293]
[70.58386230 -72.05320740]
[67.34358978 -86.69905090]
[63.19906616 -101.11511230]
[59.05453873 -115.53118134]
[54.91001511 -129.94723511]
[50.76548767 -144.36331177]
[46.62096024 -158.77937317]
[35.37185669 -169.90447998]
[39.29138184 -184.27412415]
[35.14685822 -198.69018555]
[31.00233078 -213.10624695]
[15.91437435 -215.17347717]
[2.97507977 -223.20433044]
[-5.57374048 -235.80741882]
[-8.25095177 -250.79916382]
[-4.59271193 -265.58215332]
[4.76716805 -277.59518433]
[18.20703125 -284.75686646]
[33.39834213 -285.82644653]
[47.70911026 -280.61859131]
[58.65991211 -270.03561401]
[64.35345459 -255.91102600]
[63.80329514 -240.69206238]
[57.10475540 -227.01545715]
[45.41839600 -217.25077820]
[49.56291962 -202.83471680]
[53.70744705 -188.41865540]
[64.66011047 -178.32467651]
[61.03702545 -162.92388916]
[65.18154907 -148.50782776]
[69.32608032 -134.09176636]
[73.47060394 -119.67570496]
[77.61512756 -105.25964355]
[81.75965881 -90.84357452]
[84.34565735 -89.37493134]
[86.44898987 -86.70191956]
[87.57108307 -83.02553558]
[87.30486298 -78.73703766]
[85.40281677 -74.37667847]
[87.72628784 -59.55772400]
[90.04975891 -44.73876953]
[92.37323761 -29.91981125]
[94.69670868 -15.10085487]
[97.02017975 -0.28189823]
[105.95505524 5.10737419]
[110.45467377 14.76696491]
[108.76290131 25.51260376]
[101.21134949 33.64770508]
[102.60903931 48.58244705]
[104.00672150 63.51718521]
[105.40441132 78.45192719]
[106.80210114 93.38666534]
[110.10891724 97.70442963]
[110.65774536 103.58795929]
[107.79264832 109.28884125]
[108.25914764 124.28158569]
[116.42189026 137.83445740]
[109.08415222 150.79620361]
[109.55064392 165.78894043]
[110.01714325 180.78169250]
[110.48364258 195.77442932]
[110.95014191 210.76718140]
[113.90832520 215.49966431]
[114.55896759 220.39477539]
[113.25612640 224.50053406]
[110.69510651 227.16439819]
[109.76255798 242.13539124]
[108.83001709 257.10638428]
[107.89746857 272.07736206]
[120.39273834 281.12567139]
[125.99126434 295.50134277]
[122.90657043 310.61715698]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 97]
[7 96]
[8 95]
[9 94]
[10 90]
[11 89]
[12 88]
[13 87]
[14 86]
[16 84]
[17 83]
[18 80]
[19 79]
[20 78]
[21 77]
[22 76]
[24 72]
[25 71]
[26 70]
[27 69]
[28 68]
[29 67]
[30 62]
[31 61]
[32 60]
[33 59]
[34 58]
[35 57]
[37 55]
[38 54]
[39 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
