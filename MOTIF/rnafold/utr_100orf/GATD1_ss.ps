%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACGCCGCGCACGCGCAGACCCAGCGCCGAGCCCGAGCCAUGGCGUCCGAGCGGCUCCCUAACAGGCCCGCCUGUCUGCUCGUGGCCAGCGGCGCCGCCGAAGGUGUGUCGGCCCAGUCCUUCCUCCACUGUUUCACGA\
) } def
/len { sequence length } bind def

/coor [
[245.72843933 445.38769531]
[257.41873169 435.84832764]
[251.25666809 422.17245483]
[245.09461975 408.49661255]
[238.47903442 395.03430176]
[231.41728210 381.80056763]
[224.35554504 368.56680298]
[217.29380798 355.33306885]
[211.32150269 350.87673950]
[210.22589111 341.72491455]
[203.46073914 328.33712769]
[196.69558716 314.94934082]
[189.93043518 301.56155396]
[183.16528320 288.17376709]
[176.40013123 274.78598022]
[162.33198547 277.31823730]
[148.10575867 275.77032471]
[134.88195801 270.25949097]
[123.74184418 261.22653198]
[115.59910583 249.40074158]
[111.12482452 235.74084473]
[110.69226837 221.35737610]
[114.34568787 207.42240906]
[121.79604340 195.07402039]
[132.44381714 185.32330322]
[125.97860718 171.78813171]
[119.51339722 158.25294495]
[113.04818726 144.71777344]
[106.58298492 131.18258667]
[100.11777496 117.64740753]
[84.24900818 107.95933533]
[85.86246490 89.43709564]
[78.80072784 76.20335388]
[71.73899078 62.96961975]
[64.53025818 49.81536865]
[57.17544174 36.74224472]
[49.82062149 23.66911697]
[42.46580124 10.59599113]
[35.11098099 -2.47713542]
[27.32343292 -15.29720020]
[19.11184883 -27.84988403]
[11.73393059 -33.37462616]
[10.86078262 -40.77496719]
[2.93089795 -53.50748062]
[-4.99898720 -66.23999786]
[-12.92887211 -78.97251129]
[-16.82573318 -64.48753357]
[-29.01338577 -55.74333191]
[-43.98335266 -56.69202805]
[-54.96963501 -66.90484619]
[-57.00674057 -81.76587677]
[-49.17395401 -94.55834961]
[-35.01147842 -99.50043488]
[-20.91997910 -94.35814667]
[-26.77581978 -108.16789246]
[-32.63165665 -121.97763824]
[-38.48749924 -135.78738403]
[-53.63534546 -139.15225220]
[-63.88714981 -150.80043030]
[-65.30088043 -166.25297546]
[-57.33292389 -179.56805420]
[-43.04713058 -185.62574768]
[-27.93667603 -182.09677124]
[-17.81183624 -170.33805847]
[-16.56582260 -154.87109375]
[-24.67774963 -141.64323425]
[-18.82191086 -127.83348083]
[-12.96607113 -114.02372742]
[-7.11023188 -100.21398163]
[-0.19635755 -86.90239716]
[7.73352766 -74.16988373]
[15.66341209 -61.43736649]
[23.59329796 -48.70485306]
[31.66453362 -36.06147003]
[39.87611771 -23.50878334]
[43.31759644 -22.44382477]
[46.39266586 -19.61176682]
[48.25458145 -15.21394539]
[48.18410873 -9.83195496]
[55.53892899 3.24117112]
[62.89374924 16.31429672]
[70.24856567 29.38742447]
[77.60338593 42.46054840]
[83.67350006 46.78272629]
[84.97272491 55.90787888]
[92.03446198 69.14161682]
[99.09620667 82.37535858]
[108.85800934 84.73629761]
[115.75099182 92.04066467]
[117.54273987 101.92279816]
[113.65295410 111.18219757]
[120.11816406 124.71737671]
[126.58337402 138.25256348]
[133.04858398 151.78773499]
[139.51377869 165.32292175]
[145.97898865 178.85810852]
[161.61357117 176.71400452]
[177.12867737 179.49021912]
[191.01545715 186.90458679]
[201.92712402 198.22451782]
[208.80966187 212.33930969]
[211.00350952 227.86912537]
[208.30683899 243.29989624]
[200.99407959 257.13092041]
[189.78791809 268.02084351]
[196.55307007 281.40863037]
[203.31822205 294.79641724]
[210.08337402 308.18417358]
[216.84852600 321.57196045]
[223.61367798 334.95974731]
[230.52755737 348.27133179]
[237.58929443 361.50506592]
[244.65103149 374.73883057]
[251.71276855 387.97256470]
[256.28713989 390.80911255]
[258.99215698 394.74490356]
[259.72463989 398.86071777]
[258.77047729 402.33456421]
[264.93252563 416.01040649]
[271.09457397 429.68627930]
[285.98492432 427.24899292]
[300.99859619 428.74963379]
[315.11196899 434.08584595]
[327.36273193 442.89385986]
[336.91564941 454.57308960]
[343.11935425 468.32720947]
[345.55090332 483.21850586]
[344.04446411 498.23159790]
[338.70278931 512.34289551]
[329.89004517 524.59027100]
[318.20715332 534.13867188]
[304.45062256 540.33709717]
[289.55841064 542.76287842]
[274.54589844 541.25061035]
[260.43664551 535.90350342]
[248.19267273 527.08605957]
[238.64878845 515.39947510]
[232.45568848 501.64053345]
[230.03565979 486.74737549]
[231.55368042 471.73544312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 120]
[3 119]
[4 118]
[5 114]
[6 113]
[7 112]
[8 111]
[10 110]
[11 109]
[12 108]
[13 107]
[14 106]
[15 105]
[25 96]
[26 95]
[27 94]
[28 93]
[29 92]
[30 91]
[32 87]
[33 86]
[34 85]
[35 83]
[36 82]
[37 81]
[38 80]
[39 79]
[40 75]
[41 74]
[43 73]
[44 72]
[45 71]
[46 70]
[54 69]
[55 68]
[56 67]
[57 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
