%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACCCACUUCCGUUACUUGCUGCGGAGGACCGUGGGCAGCCAGGGUCGGUGAAGGAUCCCAAAAUGGCUGGGCGAAAACUUGCUCUAAAAACCAUUGACUGGGUAGCUUUUGCAGAGAUCAUACCCCAGAACCAAAAGGCCAUUGCUAGUUCCCUGAAAUCCU\
) } def
/len { sequence length } bind def

/coor [
[160.71572876 148.29591370]
[149.82304382 137.98333740]
[142.98577881 124.63224030]
[140.98429871 109.76637268]
[144.04701233 95.08237457]
[151.82603455 82.25422668]
[138.42868042 89.00038910]
[125.03131104 95.74655151]
[111.63394928 102.49271393]
[99.84315491 111.76509857]
[90.12860870 123.19434357]
[80.41406250 134.62358093]
[70.69951630 146.05282593]
[60.98497009 157.48207092]
[64.77398682 172.52941895]
[58.96352768 186.91755676]
[45.78781891 195.11392212]
[30.31320000 193.96685791]
[18.48997307 183.91743469]
[14.86441040 168.82984924]
[20.83061409 154.50561523]
[34.09445953 146.45265198]
[49.55572510 147.76751709]
[59.27027130 136.33828735]
[68.98481750 124.90903473]
[78.69936371 113.47979736]
[88.41390991 102.05055237]
[84.91390991 95.41730499]
[74.41389465 75.51756287]
[59.49606323 77.08549500]
[44.57823563 78.65341949]
[29.66040802 80.22134399]
[16.74460220 89.35877228]
[3.27828407 82.99421692]
[-11.63954449 84.56214905]
[-26.55737305 86.13007355]
[-39.49929810 96.20175171]
[-54.58867645 89.77970886]
[-56.30285645 73.47039795]
[-42.87842941 64.05143738]
[-28.12529945 71.21224213]
[-13.20747089 69.64431763]
[1.71035707 68.07639313]
[13.55913925 59.05111313]
[28.09248161 65.30352020]
[43.01031113 63.73559189]
[57.92813873 62.16766357]
[72.84597015 60.59973526]
[104.88778687 89.09535217]
[118.28514862 82.34918976]
[131.68251038 75.60302734]
[145.07987976 68.85686493]
[148.57331848 62.20837784]
[154.31156921 58.59691620]
[160.36219788 58.40708160]
[171.50936890 48.37012100]
[182.65653992 38.33316422]
[177.65338135 24.00682259]
[178.51403809 8.89714622]
[185.07626343 -4.69515944]
[196.31204224 -14.71238136]
[210.48851013 -19.65129471]
[225.43511963 -18.78869629]
[238.87605286 -12.28711891]
[250.02322388 -22.32407761]
[261.17041016 -32.36103821]
[272.31756592 -42.39799500]
[283.46475220 -52.43495560]
[294.61190796 -62.47191620]
[305.75909424 -72.50887299]
[310.79983521 -86.63653564]
[308.52386475 -101.46286774]
[306.24789429 -116.28919220]
[303.97192383 -131.11552429]
[301.69595337 -145.94184875]
[299.41998291 -160.76817322]
[288.74392700 -173.21620178]
[294.44070435 -188.59407043]
[310.64996338 -191.08233643]
[320.69702148 -178.12129211]
[314.24630737 -163.04414368]
[316.52227783 -148.21781921]
[318.79824829 -133.39149475]
[321.07421875 -118.56516266]
[323.35018921 -103.73883820]
[325.62615967 -88.91250610]
[332.04876709 -85.03952789]
[337.15954590 -99.14201355]
[342.27032471 -113.24449158]
[340.48892212 -128.13833618]
[347.92672729 -141.16444397]
[361.65875244 -147.20027161]
[376.28488159 -143.87222290]
[386.05340576 -132.48905945]
[387.12277222 -117.52722931]
[379.07250977 -104.87049103]
[365.06936646 -99.49616241]
[354.98168945 -88.39486694]
[344.89401245 -77.29356384]
[351.31661987 -73.42058563]
[365.49163818 -78.32660675]
[379.66665649 -83.23262024]
[393.84167480 -88.13864136]
[408.01669312 -93.04466248]
[422.14434814 -98.08540344]
[436.22338867 -103.26040649]
[440.54882812 -118.04542542]
[452.60977173 -127.33986664]
[467.65304565 -127.74538422]
[479.90386963 -119.31596375]
[493.98291016 -124.49096680]
[508.06195068 -129.66596985]
[518.14190674 -142.60147095]
[534.34478760 -140.07203674]
[540.00250244 -124.67976379]
[529.29486084 -112.25888062]
[513.23693848 -115.58693695]
[499.15792847 -110.41193390]
[485.07888794 -105.23692322]
[481.20355225 -90.88004303]
[469.47872925 -81.44647217]
[454.26947021 -80.71724701]
[441.39837646 -89.18137360]
[427.31933594 -84.00636292]
[422.10241699 -78.72315979]
[412.92269897 -78.86965179]
[398.74768066 -73.96363068]
[384.57266235 -69.05760956]
[370.39767456 -64.15158844]
[356.22265625 -59.24557114]
[363.13558960 -45.93350601]
[362.43777466 -30.94974709]
[354.31750488 -18.33780289]
[340.96612549 -11.50112724]
[325.98660278 -12.28466129]
[313.42129517 -20.47696114]
[306.66113281 -33.86725616]
[307.53036499 -48.84204865]
[315.79605103 -61.36170197]
[304.64886475 -51.32474136]
[293.50170898 -41.28778458]
[282.35452271 -31.25082397]
[271.20736694 -21.21386528]
[260.06018066 -11.17690563]
[248.91300964 -1.13994646]
[253.97401428 12.90695858]
[253.26954651 27.86186218]
[246.87583923 41.44440460]
[235.73904419 51.57155228]
[221.53524780 56.67705154]
[206.41838074 55.95360184]
[192.69349670 49.48033524]
[181.54632568 59.51729584]
[170.39915466 69.55425262]
[185.17300415 66.95941925]
[199.96781921 69.43201447]
[213.09504700 76.68982697]
[223.05648804 87.90454102]
[228.71524048 101.79621124]
[229.42546082 116.77938843]
[225.10612488 131.14404297]
[216.25016785 143.25073242]
[203.86833191 151.71774292]
[189.37374878 155.57870483]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 52]
[7 51]
[8 50]
[9 49]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[29 48]
[30 47]
[31 46]
[32 45]
[34 43]
[35 42]
[36 41]
[55 154]
[56 153]
[57 152]
[64 145]
[65 144]
[66 143]
[67 142]
[68 141]
[69 140]
[70 139]
[71 86]
[72 85]
[73 84]
[74 83]
[75 82]
[76 81]
[100 130]
[101 129]
[102 128]
[103 127]
[104 126]
[105 124]
[106 123]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
