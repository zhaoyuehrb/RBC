%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:13:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGGCCCCGCCCGCCCUGCCCUCCCCUCCCGAUCCCGGAGCCAUGUGGCCCCUGGCCCUAGUGAUCGCCUCCCUGACCUUGGCCUUGUCAGGAGGUGUCUCCCAGGAGUCUUCCAAGGUUCUCAACACCAAUGGGACCAGUG\
) } def
/len { sequence length } bind def

/coor [
[10.25838375 467.70294189]
[-3.38917923 473.92742920]
[-17.51005936 468.86770630]
[-24.09873009 455.39395142]
[-30.43800354 468.98858643]
[-36.77727890 482.58319092]
[-30.00501251 496.67825317]
[-33.92734528 511.81591797]
[-46.69226837 520.84869385]
[-62.27257919 519.51153564]
[-73.31172943 508.43582153]
[-74.59736633 492.85116577]
[-65.52246094 480.11618042]
[-50.37189484 476.24392700]
[-44.03261948 462.64929199]
[-37.69334793 449.05468750]
[-32.25677490 435.07455444]
[-27.74618912 420.76879883]
[-23.23560333 406.46304321]
[-28.78897667 397.77572632]
[-28.59905052 387.24624634]
[-22.48546410 378.40185547]
[-12.29274178 374.33999634]
[-7.16243982 360.24459839]
[-2.03213763 346.14920044]
[3.09816456 332.05383301]
[-8.86572266 323.97625732]
[-18.54434776 313.25341797]
[-25.36712646 300.51062012]
[-28.93020058 286.49249268]
[-29.02034760 272.01943970]
[-25.62772560 257.93957520]
[-18.94672775 245.07911682]
[-9.36483955 234.19383240]
[2.55982542 225.92466736]
[16.13103485 220.75993347]
[30.55508995 219.00659180]
[44.98723602 220.77189636]
[50.42380524 206.79177856]
[55.86037827 192.81166077]
[61.29694748 178.83154297]
[66.73352051 164.85142517]
[72.17008972 150.87130737]
[69.57170868 136.20509338]
[81.78464508 126.14752197]
[87.22121429 112.16739655]
[83.41920471 93.96508026]
[98.03193665 82.46518707]
[102.85353088 68.26123047]
[107.67511749 54.05728149]
[104.78435516 38.50241089]
[116.20208740 28.93764496]
[121.02368164 14.73369312]
[125.84526825 0.52974164]
[130.66687012 -13.67421055]
[135.48844910 -27.87816238]
[129.04501343 -34.33753204]
[125.10743713 -42.51929474]
[124.08918762 -51.49798965]
[126.07527161 -60.26845932]
[130.81599426 -67.85838318]
[137.75793457 -73.43606567]
[146.10839844 -76.40153503]
[154.92593384 -76.45101929]
[161.26521301 -90.04563141]
[162.07046509 -99.22235107]
[167.89392090 -103.86534882]
[174.52825928 -117.31843567]
[181.16258240 -130.77153015]
[187.79692078 -144.22462463]
[194.43124390 -157.67771912]
[201.06558228 -171.13079834]
[207.69990540 -184.58389282]
[208.70515442 -193.74085999]
[214.62852478 -198.25572205]
[221.55474854 -211.56088257]
[228.48097229 -224.86604309]
[235.40721130 -238.17120361]
[227.65750122 -251.51083374]
[228.37280273 -266.92160034]
[237.32485962 -279.48599243]
[251.65710449 -285.19476318]
[266.79617310 -282.22625732]
[277.91125488 -271.52774048]
[281.45553589 -256.51303101]
[276.29809570 -241.97326660]
[264.08459473 -232.54808044]
[248.71237183 -231.24497986]
[241.78613281 -217.93981934]
[234.85990906 -204.63464355]
[227.93368530 -191.32948303]
[221.15299988 -177.94956970]
[214.51866150 -164.49647522]
[207.88433838 -151.04338074]
[201.25000000 -137.59028625]
[194.61567688 -124.13719940]
[187.98133850 -110.68411255]
[181.34701538 -97.23101807]
[174.85983276 -83.70635986]
[168.52055359 -70.11174011]
[177.73034668 -51.03250885]
[169.91728210 -31.04026985]
[149.69241333 -23.05657005]
[144.87081909 -8.85261822]
[140.04922485 5.35133362]
[135.22763062 19.55528641]
[130.40603638 33.75923920]
[133.64167786 48.29814911]
[121.87907410 58.87887192]
[117.05747986 73.08282471]
[112.23588562 87.28678131]
[117.18933868 96.01634979]
[116.58079529 106.03491974]
[110.60715485 114.10075378]
[101.20133209 117.60397339]
[95.76476288 131.58409119]
[97.97428131 147.25024414]
[86.15020752 156.30787659]
[80.71363831 170.28799438]
[75.27706909 184.26811218]
[69.84049225 198.24822998]
[64.40392303 212.22834778]
[58.96735382 226.20846558]
[71.59460449 235.39851379]
[81.41851807 247.52487183]
[87.77927399 261.76397705]
[90.25199890 277.15066528]
[88.67516327 292.64364624]
[83.16107178 307.19586182]
[74.08794403 319.82540894]
[62.07392502 329.68164062]
[47.93500900 336.10250854]
[32.62960052 338.65905762]
[17.19355392 337.18411255]
[12.06325150 351.27951050]
[6.93294954 365.37490845]
[1.80264735 379.47027588]
[6.25867128 399.07885742]
[-8.92984772 410.97363281]
[-13.44043541 425.27938843]
[-17.95102310 439.58514404]
[-3.98889899 434.10253906]
[9.83990097 439.91323853]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 16]
[5 15]
[6 14]
[17 141]
[18 140]
[19 139]
[23 137]
[24 136]
[25 135]
[26 134]
[38 123]
[39 122]
[40 121]
[41 120]
[42 119]
[43 118]
[45 116]
[46 115]
[48 111]
[49 110]
[50 109]
[52 107]
[53 106]
[54 105]
[55 104]
[56 103]
[64 100]
[65 99]
[67 98]
[68 97]
[69 96]
[70 95]
[71 94]
[72 93]
[73 92]
[75 91]
[76 90]
[77 89]
[78 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
