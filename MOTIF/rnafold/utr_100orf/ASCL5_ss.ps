%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAACAAUAACUUCUGCCGGGCUCUGGUGGACCGGAGGCCUCUGGGGCCCCCCAGCUGCAUGCAGCUGGGCGUCAUGCCCCCUCCCCGGCAGGCGCCCC\
) } def
/len { sequence length } bind def

/coor [
[66.26569366 341.70455933]
[52.09496689 346.93591309]
[37.02431488 347.96163940]
[22.27544785 344.69857788]
[9.04398823 337.41125488]
[-1.59744740 326.69042969]
[-8.78620529 313.40515137]
[-11.93952560 298.63241577]
[-10.80178165 283.56982422]
[-5.46520710 269.43838501]
[3.63758755 257.38366699]
[15.76867867 248.38293457]
[29.94465256 243.16580200]
[45.01632690 242.15521240]
[48.25659561 227.50936890]
[51.49686432 212.86352539]
[54.73712921 198.21769714]
[57.97739792 183.57185364]
[61.21766663 168.92601013]
[64.45793152 154.28016663]
[67.69819641 139.63432312]
[70.93846893 124.98848724]
[63.57355499 111.92104340]
[49.36648178 107.10865784]
[35.15940857 102.29626465]
[20.95233536 97.48387909]
[6.74526167 92.67149353]
[-7.46181154 87.85910797]
[-23.42911720 91.59771729]
[-34.45165634 79.45540619]
[-29.19038773 63.92314911]
[-13.05765247 60.97919464]
[-2.64942503 73.65203094]
[11.55764866 78.46442413]
[25.76472092 83.27680969]
[39.97179413 88.08919525]
[54.17886734 92.90158081]
[68.38594055 97.71396637]
[71.04837799 89.07993317]
[75.95240784 81.74994659]
[82.58473206 76.27020264]
[90.31063080 73.00570679]
[98.43359375 72.11738586]
[106.25764465 73.55779266]
[113.14695740 77.08498383]
[123.99809265 66.72868347]
[134.84922791 56.37237930]
[145.70034790 46.01607895]
[156.55148315 35.65977859]
[155.40806580 14.84341717]
[169.52076721 -0.11344033]
[189.80084229 -0.17795756]
[199.28288269 -11.80081463]
[208.76493835 -23.42367172]
[218.24697876 -35.04652786]
[227.72901917 -46.66938400]
[237.21107483 -58.29224014]
[246.69311523 -69.91510010]
[256.17517090 -81.53795624]
[258.26376343 -97.80355072]
[273.49679565 -103.87705231]
[286.20379639 -93.51055145]
[283.31289673 -77.36822510]
[267.79803467 -72.05590820]
[258.31597900 -60.43305206]
[248.83392334 -48.81019592]
[239.35188293 -37.18733597]
[229.86984253 -25.56448174]
[220.38778687 -13.94162464]
[210.90574646 -2.31876779]
[201.42369080 9.30408859]
[205.32904053 18.23637962]
[205.61293030 28.03969002]
[202.19029236 37.29311752]
[195.51651001 44.63904953]
[186.52725220 48.98230743]
[176.50747681 49.65330505]
[166.90779114 46.51091003]
[156.05665588 56.86721039]
[145.20552063 67.22351074]
[134.35438538 77.57981110]
[123.50325775 87.93611145]
[127.40522766 104.28417969]
[120.56806183 120.52554321]
[104.75386810 130.00280762]
[85.58430481 128.22874451]
[82.34403992 142.87458801]
[79.10377502 157.52043152]
[75.86350250 172.16627502]
[72.62323761 186.81211853]
[69.38297272 201.45796204]
[66.14270782 216.10380554]
[62.90243530 230.74963379]
[59.66217041 245.39547729]
[72.90093994 252.66950989]
[83.55314636 263.37966919]
[90.75524139 276.65771484]
[93.92340088 291.42724609]
[92.80078888 306.49099731]
[87.47841644 320.62780762]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 94]
[15 93]
[16 92]
[17 91]
[18 90]
[19 89]
[20 88]
[21 87]
[22 86]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[28 33]
[45 82]
[46 81]
[47 80]
[48 79]
[49 78]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
