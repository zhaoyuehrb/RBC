%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:04:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCUCUGCUUUGCGUUGGAGUCAAAAAAGCCAAGUUUGAUGGUGCCCAAGAGAAAUUCAACACGUACGUGACCCUGAAAGUGCAGAAUGUCAAGAGCA\
) } def
/len { sequence length } bind def

/coor [
[106.62007141 238.38619995]
[98.80844116 251.79359436]
[84.59449768 258.01800537]
[69.44378662 254.66604614]
[59.18207169 243.02659607]
[57.75518799 227.57527161]
[65.71179962 214.25340271]
[79.99243164 208.18354797]
[83.23270416 193.53770447]
[86.47296906 178.89186096]
[89.71323395 164.24603271]
[92.95350647 149.60018921]
[96.19377136 134.95434570]
[75.99665833 123.04631042]
[68.68104553 102.12630463]
[76.14929962 82.62892914]
[66.66725159 71.00607300]
[57.18520737 59.38322067]
[47.70315933 47.76036453]
[38.22111511 36.13750839]
[28.73906898 24.51465034]
[11.42993164 18.47802734]
[9.11034489 1.15980017]
[-0.72858393 -10.16254425]
[-16.48335457 -4.57834196]
[-33.14215088 -5.39637423]
[-48.20833206 -12.46644688]
[-59.43443680 -24.70344734]
[-65.15741730 -40.25380325]
[-64.54497528 -56.77621460]
[-57.71649933 -71.79415894]
[-68.24030304 -82.48291779]
[-78.76409912 -93.17167664]
[-89.28790283 -103.86043549]
[-104.86070251 -102.43843079]
[-117.67463684 -111.40152740]
[-121.67936707 -126.51761627]
[-114.98398590 -140.64933777]
[-100.74983978 -147.12414551]
[-85.69785309 -142.88481140]
[-76.93512726 -129.93302917]
[-78.59914398 -114.38423920]
[-68.07534027 -103.69548035]
[-57.55154037 -93.00672150]
[-47.02773666 -82.31796265]
[-34.90838242 -88.13287354]
[-21.55760574 -89.88430023]
[-8.30328560 -87.38357544]
[3.53177738 -80.86569977]
[12.76189137 -70.96729279]
[18.45724678 -58.66447449]
[20.03757858 -45.17658997]
[17.33124733 -31.84537506]
[10.59376049 -20.00147247]
[20.43268967 -8.67912865]
[32.58082581 -7.47883654]
[40.86531448 2.02862477]
[40.36192322 15.03260326]
[49.84397125 26.65546036]
[59.32601929 38.27831650]
[68.80806732 49.90117264]
[78.29010773 61.52402878]
[87.77215576 73.14688873]
[96.64147186 69.97429657]
[106.27968597 69.72458649]
[115.72644043 72.56051636]
[123.99778748 78.33058929]
[130.18836975 86.57131958]
[133.56965637 96.54241943]
[133.67347717 107.29262543]
[130.35159302 117.75033569]
[144.04844666 123.86559296]
[157.74528503 129.98085022]
[171.44213867 136.09609985]
[191.23320007 132.94996643]
[202.19482422 148.75045776]
[216.24536133 154.00234985]
[230.29589844 159.25425720]
[244.57086182 152.47184753]
[259.43246460 157.84851074]
[266.06356812 172.19438171]
[260.53005981 186.99830627]
[246.11488342 193.47737122]
[231.37030029 187.78765869]
[225.04400635 173.30477905]
[210.99346924 168.05288696]
[196.94293213 162.80099487]
[187.86102295 167.93862915]
[177.23666382 167.11572266]
[168.70611572 160.36587524]
[165.32688904 149.79295349]
[151.63003540 143.67768860]
[137.93318176 137.56243896]
[124.23633575 131.44718933]
[110.83961487 138.19461060]
[107.59934235 152.84045410]
[104.35907745 167.48629761]
[101.11881256 182.13214111]
[97.87854004 196.77796936]
[94.63827515 211.42381287]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 100]
[9 99]
[10 98]
[11 97]
[12 96]
[13 95]
[16 63]
[17 62]
[18 61]
[19 60]
[20 59]
[21 58]
[23 55]
[24 54]
[31 45]
[32 44]
[33 43]
[34 42]
[71 94]
[72 93]
[73 92]
[74 91]
[76 87]
[77 86]
[78 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
