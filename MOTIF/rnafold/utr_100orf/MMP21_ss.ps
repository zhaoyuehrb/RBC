%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:20:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUCGCCGCCUCCAUCUUCCGUCCGACACUGCUGCUCUGCUGGCUGGCUGCUCCCUGGCCCACCCAGCCCGAGAGUCUCUUCCACAGCCGGGACCGCU\
) } def
/len { sequence length } bind def

/coor [
[15.39126492 364.53799438]
[8.09840775 377.71481323]
[-1.85691118 389.01550293]
[-14.00906277 397.91152954]
[-27.78966904 403.98681641]
[-42.55418777 406.95718384]
[-57.61205292 406.68371582]
[-72.25897980 403.17922974]
[-85.80990601 396.60757446]
[-97.63103485 387.27618408]
[-107.16947174 375.62145996]
[-113.97907257 362.18853760]
[-117.74135590 347.60571289]
[-118.28034210 332.55499268]
[-115.57083130 317.74038696]
[-109.73954010 303.85479736]
[-101.05921936 291.54763794]
[-89.93586731 281.39456177]
[-76.88972473 273.87042236]
[-62.53099823 269.32717896]
[-47.53126907 267.97732544]
[-32.59209824 269.88397217]
[-18.41222000 274.95791626]
[-10.44585323 262.24819946]
[-2.47948599 249.53848267]
[5.48688078 236.82876587]
[0.50323939 228.45016479]
[-0.99502951 218.75787354]
[1.25280118 209.15122986]
[6.96337271 201.03387451]
[15.34415436 195.60862732]
[25.20321083 193.69938660]
[35.11865997 195.62617493]
[44.60070801 184.00331116]
[54.08275223 172.38046265]
[63.56480026 160.75759888]
[71.33254242 147.92552185]
[77.23404694 134.13523865]
[83.13555145 120.34494019]
[89.03705597 106.55464172]
[94.28895569 92.50410461]
[98.87981415 78.22390747]
[103.47067261 63.94371414]
[108.06153107 49.66351700]
[112.65238953 35.38331985]
[109.51001740 19.87731743]
[120.77130127 10.12884521]
[125.36215973 -4.15135145]
[129.95301819 -18.43154907]
[128.88815308 -25.24955368]
[131.19902039 -30.68734741]
[135.29881287 -33.44097519]
[140.76858521 -47.40813828]
[146.23835754 -61.37529755]
[143.24853516 -77.49959564]
[155.89172363 -87.94381714]
[171.16169739 -81.96384430]
[173.35000610 -65.71135712]
[160.20552063 -55.90552521]
[154.73574829 -41.93836594]
[149.26597595 -27.97120285]
[144.23321533 -13.84068966]
[139.64236450 0.43950716]
[135.05149841 14.71970367]
[138.52223206 29.20429039]
[126.93258667 39.97417831]
[122.34172821 54.25437546]
[117.75086975 68.53456879]
[113.16000366 82.81476593]
[108.56914520 97.09496307]
[109.93740082 100.91442108]
[109.52017975 105.32983398]
[107.08908081 109.48541260]
[102.82735443 112.45614624]
[96.92584991 126.24644470]
[91.02434540 140.03674316]
[85.12284088 153.82702637]
[99.00095367 148.13510132]
[113.79151154 150.63296509]
[125.03072357 160.56674194]
[129.32658386 174.93844604]
[125.38261414 189.41065979]
[114.38908386 199.61567688]
[99.66386414 202.47361755]
[85.65102386 197.12194824]
[76.57965088 185.17581177]
[75.18765259 170.23965454]
[65.70561218 181.86250305]
[56.22356415 193.48536682]
[46.74151611 205.10821533]
[50.45938492 225.62178040]
[38.31189346 242.21438599]
[18.19660187 244.79513550]
[10.23023415 257.50485229]
[2.26386738 270.21456909]
[-5.70249939 282.92428589]
[5.04487181 293.47454834]
[13.27260113 306.08877563]
[18.59586334 320.17697144]
[20.76567841 335.08016968]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 96]
[24 95]
[25 94]
[26 93]
[33 90]
[34 89]
[35 88]
[36 87]
[37 77]
[38 76]
[39 75]
[40 74]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[47 64]
[48 63]
[49 62]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
