%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:55:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCUGCCAGCCCCGCCCAGACUCCAGGCAGGUUCUCGUUGCUAUGGUGAUCGCCGGUGCAAGCUGGAUGCUUGGACGCGCCGCUGCCAGUCCAACGCAGACCCCGCCCACGACGUCGACGAUUCGUGUAGCCCGCAGGUCCC\
) } def
/len { sequence length } bind def

/coor [
[132.75125122 531.76495361]
[136.66177368 516.74871826]
[148.67311096 506.92489624]
[147.68521118 491.95745850]
[146.69731140 476.99005127]
[145.70941162 462.02261353]
[134.37220764 452.43075562]
[133.15713501 437.26574707]
[143.29479980 425.43927002]
[142.30690002 410.47183228]
[130.96969604 400.88000488]
[129.75460815 385.71496582]
[139.89228821 373.88848877]
[138.90438843 358.92105103]
[137.91648865 343.95361328]
[119.99203491 334.59359741]
[111.16760254 316.24765015]
[115.09619904 296.13305664]
[130.37765503 282.27200317]
[127.75491333 267.50308228]
[125.13215637 252.73414612]
[122.34734344 237.99491882]
[119.40078735 223.28717041]
[105.03681183 214.60726929]
[101.28446960 197.90396118]
[110.92765045 183.35290527]
[107.65872192 168.71343994]
[104.38978577 154.07397461]
[94.06481934 143.33877563]
[98.60868835 128.18412781]
[95.33975983 113.54464722]
[86.02033234 103.12159729]
[90.02076721 89.72428131]
[86.75183868 75.08481598]
[83.48290253 60.44534302]
[80.05336761 45.84266281]
[76.46363068 31.27853584]
[72.87389374 16.71440887]
[69.28415680 2.15028095]
[65.69442749 -12.41384602]
[51.47703171 -18.34444046]
[43.57032013 -31.35740662]
[44.82735062 -46.35353470]
[54.55720520 -57.59933090]
[50.96746826 -72.16345978]
[47.37773514 -86.72758484]
[43.78799820 -101.29170990]
[40.19826508 -115.85584259]
[29.54858780 -123.22151184]
[26.88933182 -135.48329163]
[33.11952209 -145.90850830]
[29.85058975 -160.54797363]
[19.29180145 -172.33027649]
[24.06949425 -186.43782043]
[20.80056190 -201.07728577]
[17.37102127 -215.67997742]
[13.78128529 -230.24409485]
[2.96621990 -241.79161072]
[7.43285275 -256.00070190]
[3.84311771 -270.56481934]
[0.25338283 -285.12896729]
[-3.33635211 -299.69308472]
[-6.92608690 -314.25720215]
[-19.85631371 -323.75399780]
[-20.34929657 -339.78945923]
[-8.02686310 -350.06259155]
[7.65827084 -346.69271851]
[14.67381382 -332.26489258]
[7.63804007 -317.84695435]
[11.22777557 -303.28280640]
[14.81750965 -288.71868896]
[18.40724564 -274.15457153]
[21.99698067 -259.59042358]
[32.55528259 -249.08465576]
[28.34541321 -233.83383179]
[31.93514824 -219.26969910]
[36.62618637 -213.48324585]
[35.44003296 -204.34622192]
[38.70896530 -189.70675659]
[49.03393555 -178.97157288]
[44.49005890 -163.81690979]
[47.75899124 -149.17742920]
[60.31538010 -136.96490479]
[54.76239014 -119.44557190]
[58.35212708 -104.88144684]
[61.94186020 -90.31732178]
[65.53159332 -75.75318909]
[69.12133026 -61.18906403]
[82.96286774 -55.75309753]
[91.04496002 -43.05885315]
[90.09134674 -27.86201286]
[80.25855255 -16.00358200]
[83.84828949 -1.43945408]
[87.43801880 13.12467289]
[91.02775574 27.68880081]
[94.61749268 42.25292587]
[99.30853271 48.03939438]
[98.12237549 57.17641068]
[101.39131165 71.81587982]
[104.66024017 86.45535278]
[113.97966766 96.87840271]
[109.97923279 110.27571869]
[113.24816132 124.91518402]
[123.80694580 136.69749451]
[119.02925873 150.80503845]
[122.29818726 165.44450378]
[125.56712341 180.08396912]
[137.73103333 185.97483826]
[144.16534424 197.63793945]
[142.70440674 210.68151855]
[134.10853577 220.34062195]
[137.05508423 235.04835510]
[141.84353638 242.92001343]
[139.90109253 250.11138916]
[142.52383423 264.88031006]
[145.14659119 279.64923096]
[155.01150513 281.84225464]
[163.71463013 286.91983032]
[170.43859863 294.38418579]
[174.55833435 303.51434326]
[175.69909668 313.43588257]
[173.77053833 323.20449829]
[168.97352600 331.89608765]
[161.77944946 338.69396973]
[152.88392639 342.96572876]
[153.87182617 357.93316650]
[154.85972595 372.90060425]
[166.46385193 383.29202271]
[167.25250244 398.48519897]
[157.27433777 409.48394775]
[158.26223755 424.45135498]
[169.86636353 434.84280396]
[170.65501404 450.03598022]
[160.67684937 461.03469849]
[161.66474915 476.00213623]
[162.65264893 490.96957397]
[163.64054871 505.93701172]
[176.83886719 514.09692383]
[182.68910217 528.46893311]
[178.94171143 543.52667236]
[167.03764343 553.48022461]
[151.55426025 554.50219727]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 137]
[4 136]
[5 135]
[6 134]
[9 131]
[10 130]
[13 127]
[14 126]
[15 125]
[19 116]
[20 115]
[21 114]
[22 112]
[23 111]
[26 107]
[27 106]
[28 105]
[30 103]
[31 102]
[33 100]
[34 99]
[35 98]
[36 96]
[37 95]
[38 94]
[39 93]
[40 92]
[44 88]
[45 87]
[46 86]
[47 85]
[48 84]
[51 82]
[52 81]
[54 79]
[55 78]
[56 76]
[57 75]
[59 73]
[60 72]
[61 71]
[62 70]
[63 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
