%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:18:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACACAGAGAGCCACGGCCAGGGCUGAAACAGUCUGUUGAGUGCAGCCAUGGGGGACGUCCUGGAACAGUUCUUCAUCCUCACAGGGCUGCUGGUGUGCCUGGCCUGCCUGGCGAAGUGCGUGAGAUUCUCCAGAUGUGUUUUACUGA\
) } def
/len { sequence length } bind def

/coor [
[97.51129150 289.37173462]
[81.73860931 288.37274170]
[71.35488892 276.45828247]
[72.52059937 260.69705200]
[84.54415131 250.43988037]
[85.49232483 235.46987915]
[86.44049072 220.49986267]
[87.23079681 205.52070618]
[87.86314392 190.53404236]
[88.49549103 175.54737854]
[89.12783813 160.56071472]
[89.76019287 145.57403564]
[86.88027954 138.71211243]
[90.56715393 130.27905273]
[91.51532745 115.30905151]
[87.60758972 100.82701111]
[79.25760651 88.36595917]
[70.90762329 75.90490723]
[62.55764389 63.44385147]
[54.20766068 50.98280334]
[45.85768127 38.52175140]
[37.50769806 26.06069946]
[23.63442421 20.35699081]
[8.93432903 23.34148407]
[-5.76576614 26.32597542]
[-13.56061840 36.65775681]
[-25.91486549 38.81192398]
[-36.07346725 32.16688919]
[-50.83321762 34.84079742]
[-65.59296417 37.51470566]
[-80.35271454 40.18861008]
[-94.86033630 48.96160126]
[-107.30657959 37.44955063]
[-99.68988800 22.30285645]
[-83.02662659 25.42886162]
[-68.26687622 22.75495338]
[-53.50712204 20.08104706]
[-38.74737549 17.40713882]
[-26.03064156 5.35562944]
[-8.75025845 11.62588120]
[5.94983673 8.64138794]
[20.64993286 5.65689564]
[28.19553566 -7.30704975]
[23.53021240 -21.56309319]
[18.86488914 -35.81913376]
[14.19956493 -50.07517624]
[9.53424168 -64.33122253]
[4.86891794 -78.58726501]
[-6.77678537 -89.29651642]
[-3.38168931 -103.79901886]
[-8.04701233 -118.05506897]
[-12.86236477 -132.26113892]
[-17.82721138 -146.41564941]
[-22.79205704 -160.57015991]
[-27.75690269 -174.72468567]
[-32.72174835 -188.87919617]
[-44.22150040 -190.22760010]
[-54.32634354 -195.77409363]
[-61.57347870 -204.67153931]
[-64.93046570 -215.59104919]
[-63.94216537 -226.92036438]
[-58.79206848 -237.00187683]
[-50.26972198 -244.37516785]
[-54.32991028 -258.81521606]
[-58.39010239 -273.25524902]
[-62.45029449 -287.69528198]
[-72.55825043 -301.30651855]
[-62.27710724 -314.78741455]
[-46.47694778 -308.63995361]
[-48.01025009 -291.75549316]
[-43.95005798 -277.31542969]
[-39.88986969 -262.87539673]
[-35.82967758 -248.43534851]
[-18.00444603 -243.04994202]
[-6.87380600 -227.93655396]
[-7.02161455 -209.01852417]
[-18.56723404 -193.84403992]
[-13.60238743 -179.68952942]
[-8.63754177 -165.53500366]
[-3.67269540 -151.38049316]
[1.29215038 -137.22598267]
[6.50931120 -131.91926575]
[6.20903015 -122.72039032]
[10.87435341 -108.46434784]
[22.18636131 -98.77478027]
[19.12495995 -83.25258636]
[23.79028511 -68.99654388]
[28.45560837 -54.74050140]
[33.12092972 -40.48445892]
[37.78625488 -26.22841644]
[42.45157623 -11.97237301]
[45.76801300 -9.80127621]
[48.63624954 -6.93392897]
[50.90938187 -3.46485686]
[52.46084976 0.48035687]
[53.19101715 4.74953365]
[53.03273010 9.16974640]
[51.95559311 13.55432129]
[49.96875000 17.71071625]
[58.31873322 30.17176819]
[66.66871643 42.63282013]
[75.01869202 55.09387207]
[83.36867523 67.55492401]
[91.71865845 80.01597595]
[100.06864166 92.47702789]
[104.89149475 85.06750488]
[113.96616364 80.60129547]
[125.75387573 80.85033417]
[138.08421326 86.87279510]
[151.83415222 92.86772156]
[165.58409119 98.86265564]
[179.33403015 104.85758209]
[195.07644653 103.28049469]
[203.65075684 115.45959473]
[217.40069580 121.45452118]
[231.15063477 127.44944763]
[243.45823669 118.26150513]
[258.71279907 116.47425842]
[272.81088257 122.56845856]
[281.96020508 134.90481567]
[283.69961548 150.16488647]
[277.56127930 164.24380493]
[265.19628906 173.35441589]
[249.93084717 175.04600525]
[235.87123108 168.86354065]
[226.79942322 156.47007751]
[225.15570068 141.19938660]
[211.40576172 135.20446777]
[197.65582275 129.20953369]
[182.89689636 131.21542358]
[173.33911133 118.60752106]
[159.58917236 112.61259460]
[145.83923340 106.61766052]
[132.08929443 100.62273407]
[125.68830109 104.53135681]
[112.88632202 112.34860229]
[106.48532867 116.25722504]
[105.53715515 131.22721863]
[104.74685669 146.20639038]
[104.11450958 161.19305420]
[103.48215485 176.17971802]
[102.84980774 191.16638184]
[102.21746063 206.15304565]
[104.99648285 214.92724609]
[101.41049957 221.44804382]
[100.46232605 236.41804504]
[99.51415253 251.38804626]
[110.14747620 263.08026123]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 147]
[6 146]
[7 145]
[8 143]
[9 142]
[10 141]
[11 140]
[12 139]
[14 138]
[15 137]
[16 105]
[17 104]
[18 103]
[19 102]
[20 101]
[21 100]
[22 99]
[23 42]
[24 41]
[25 40]
[28 38]
[29 37]
[30 36]
[31 35]
[43 91]
[44 90]
[45 89]
[46 88]
[47 87]
[48 86]
[50 84]
[51 83]
[52 81]
[53 80]
[54 79]
[55 78]
[56 77]
[63 73]
[64 72]
[65 71]
[66 70]
[109 134]
[110 133]
[111 132]
[112 131]
[114 129]
[115 128]
[116 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
