%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:28:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCGAAUGAGGACAUGGAACAGGAUAAUACAACAUUGCUGACAGAGUUUGUUCUCACAGGACUUACAUAUCAGCCAGAGUGGAAAAUGCCCCUGUUCU\
) } def
/len { sequence length } bind def

/coor [
[-35.14255524 345.68621826]
[-43.10892487 358.39593506]
[-51.07529068 371.10565186]
[-59.04165649 383.81536865]
[-67.00802612 396.52508545]
[-62.02447891 411.34732056]
[-67.78250122 425.88619995]
[-81.56332397 433.27694702]
[-96.86006165 430.02984619]
[-106.45007324 417.67810059]
[-105.80523682 402.05380249]
[-95.23003387 390.53430176]
[-79.71774292 388.55871582]
[-71.75138092 375.84899902]
[-63.78501129 363.13928223]
[-55.81864548 350.42956543]
[-47.85227585 337.71984863]
[-40.08453369 324.88775635]
[-32.51728821 311.93643188]
[-24.95004654 298.98510742]
[-17.38280296 286.03378296]
[-9.81556034 273.08245850]
[-2.24831748 260.13113403]
[5.31892538 247.17980957]
[12.88616848 234.22848511]
[2.58668637 223.37962341]
[-4.24536228 210.05467224]
[-7.04868603 195.32962036]
[-5.58769846 180.39622498]
[0.02770447 166.46556091]
[9.35036469 154.66979980]
[21.63145638 145.97019958]
[35.88063049 141.07876587]
[50.94587326 140.40000916]
[65.60665131 143.99746704]
[73.17388916 131.04614258]
[80.74113464 118.09481049]
[88.30838013 105.14348602]
[95.26332855 91.85331726]
[101.59085846 78.25322723]
[107.91838074 64.65313721]
[114.24590302 51.05305099]
[120.57343292 37.45296097]
[112.96263885 25.84129906]
[112.13619995 12.09132767]
[118.20475006 -0.15330397]
[129.46611023 -7.70163727]
[142.88114929 -8.64679241]
[149.62857056 -22.04351807]
[144.90647888 -36.88735580]
[151.94017029 -50.37742233]
[166.12060547 -54.78773880]
[172.86802673 -68.18446350]
[179.61546326 -81.58119202]
[186.36288452 -94.97791290]
[193.11030579 -108.37464142]
[194.83512878 -125.24062347]
[211.51945496 -128.25218201]
[219.03199768 -113.05356598]
[206.50703430 -101.62721252]
[199.75961304 -88.23049164]
[193.01217651 -74.83376312]
[186.26475525 -61.43703842]
[179.51733398 -48.04031372]
[184.41539001 -34.02087784]
[177.76338196 -20.33857346]
[163.02529907 -15.29609203]
[156.27787781 -1.89936674]
[164.25555420 12.35406876]
[162.20845032 28.72577286]
[150.73960876 40.81556702]
[134.17352295 43.78048706]
[127.84599304 57.38057327]
[121.51847076 70.98066711]
[115.19094086 84.58074951]
[108.86341858 98.18083954]
[109.74710846 102.14057159]
[108.78516388 106.47007751]
[105.85715485 110.29183197]
[101.25970459 112.71073151]
[93.69245911 125.66205597]
[86.12521362 138.61338806]
[78.55797577 151.56471252]
[88.89029694 162.57029724]
[95.69593048 176.02784729]
[98.43096161 190.84286499]
[96.88213348 205.81314087]
[91.18347931 219.72634888]
[81.80473328 231.45816040]
[69.51264954 240.06312561]
[55.30831528 244.85087585]
[40.34561157 245.44152832]
[25.83749390 241.79573059]
[18.27025032 254.74705505]
[10.70300770 267.69839478]
[3.13576508 280.64971924]
[-4.43147802 293.60104370]
[-11.99872112 306.55236816]
[-19.56596375 319.50369263]
[-27.13320732 332.45501709]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[5 13]
[18 100]
[19 99]
[20 98]
[21 97]
[22 96]
[23 95]
[24 94]
[25 93]
[35 83]
[36 82]
[37 81]
[38 80]
[39 76]
[40 75]
[41 74]
[42 73]
[43 72]
[48 68]
[49 67]
[52 64]
[53 63]
[54 62]
[55 61]
[56 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
