%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:56:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUAUCUCCAUGGCUGAUGAGCUGGCCGGGCACUUUCAAAAUGGCGGAGUGUGGAGCGAGCGGCAGCGGGAGCAGCGGGGACAGUCUGGACAAGAGCAUCACGCUGCCCCCCGACG\
) } def
/len { sequence length } bind def

/coor [
[107.68775940 197.52140808]
[93.70796967 202.95881653]
[78.75451660 204.13961792]
[64.09458160 200.96374512]
[50.97045517 193.70031738]
[40.49430084 182.96485901]
[33.55387497 169.66709900]
[30.73731995 154.93389893]
[32.28331375 140.01377869]
[38.06085205 126.17108917]
[47.58032990 114.57887268]
[60.03506088 106.21946716]
[74.36961365 101.80126190]
[89.37019348 101.69878387]
[77.09564972 93.07697296]
[64.82111359 84.45516205]
[52.54656982 75.83335114]
[41.31021500 80.16124725]
[29.50846481 78.48400879]
[20.11499214 71.34298706]
[15.43871212 60.64110565]
[16.55677605 49.13705063]
[4.75850248 39.87417984]
[-7.03977108 30.61131096]
[-22.67229080 28.17515182]
[-27.90497398 14.22996140]
[-39.70324707 4.96709251]
[-54.55664062 9.05155468]
[-68.80051422 3.66959238]
[-77.04650879 -8.91879654]
[-76.30761719 -23.77113724]
[-88.10588837 -33.03400803]
[-99.90415955 -42.29687500]
[-111.70243835 -51.55974579]
[-123.50070953 -60.82261276]
[-135.29898071 -70.08547974]
[-147.09725952 -79.34835052]
[-161.63801575 -74.19376373]
[-176.65202332 -77.74102020]
[-187.34837341 -88.85820007]
[-190.31388855 -103.99786377]
[-184.60227966 -118.32898712]
[-172.03611755 -127.27856445]
[-156.62519836 -127.99082184]
[-143.28710938 -120.23847961]
[-136.27796936 -106.49527740]
[-137.83438110 -91.14662933]
[-126.03610992 -81.88375854]
[-114.23783875 -72.62088776]
[-102.43956757 -63.35801697]
[-90.64129639 -54.09514999]
[-78.84301758 -44.83227921]
[-67.04474640 -35.56941223]
[-52.79209900 -39.81205368]
[-38.60636520 -34.78920364]
[-29.99771690 -22.22956467]
[-30.44037819 -6.83118105]
[-18.64210510 2.43168831]
[-3.85347533 4.20530653]
[2.22309828 18.81303787]
[14.02137184 28.07590675]
[25.81964493 37.33877563]
[43.72175217 33.99260712]
[58.71703720 44.87508011]
[61.16838074 63.55881119]
[73.44292450 72.18061829]
[85.71746063 80.80242920]
[97.99200439 89.42424011]
[112.03352356 94.70021057]
[126.94854736 96.29460907]
[141.86357117 97.88901520]
[156.40798950 91.66241455]
[168.24072266 100.70870972]
[183.15574646 102.30310822]
[198.07077026 103.89751434]
[212.98579407 105.49191284]
[227.90081787 107.08631897]
[242.81584167 108.68071747]
[253.40391541 101.16933441]
[265.86566162 102.88499451]
[273.52294922 112.35279083]
[288.39022827 114.34367371]
[299.11370850 103.28412628]
[314.11779785 100.68984985]
[327.61288452 107.34922028]
[334.51629639 120.52042389]
[349.38360596 122.51130676]
[364.25088501 124.50218964]
[377.82180786 115.94593048]
[392.92471313 121.35723114]
[397.97390747 136.58499146]
[389.09613037 149.94779968]
[373.10162354 151.19483948]
[362.26000977 139.36947632]
[347.39270020 137.37860107]
[332.52542114 135.38771057]
[322.39984131 146.27856445]
[307.62814331 149.15272522]
[293.83520508 142.70222473]
[286.39935303 129.21096802]
[271.53207397 127.22008514]
[255.76312256 134.79527283]
[241.22143555 123.59574127]
[226.30641174 122.00133514]
[211.39138794 120.40693665]
[196.47636414 118.81253052]
[181.56134033 117.21813202]
[166.64633179 115.62372589]
[153.16873169 121.96437073]
[140.26916504 112.80403137]
[125.35414124 111.20963287]
[110.43911743 109.61522675]
[121.66003418 119.56967926]
[129.53858948 132.33401489]
[133.40715027 146.82656860]
[132.93791199 161.81922913]
[128.17059326 176.04150391]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 68]
[15 67]
[16 66]
[17 65]
[22 62]
[23 61]
[24 60]
[26 58]
[27 57]
[31 53]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[69 112]
[70 111]
[71 110]
[73 108]
[74 107]
[75 106]
[76 105]
[77 104]
[78 103]
[81 101]
[82 100]
[86 96]
[87 95]
[88 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
