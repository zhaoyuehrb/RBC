%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCGCCCCGGUCCCCGCCGCAGCCGCUGCAUCCUCCGUGCCCGGCCUGAGCUGGAGUCCCCCGCGCCCCCCGCGUUCCGCCCGGCCAUGGCUGCGGUGGCGCUGAUGCCACCGCCGCUGCUGCUGCUGCUGCUGUUGGCGUCGCCGCCCGCCGCCUCCGCGCCGUCCGCCCGCGAUCCCUUCGCCC\
) } def
/len { sequence length } bind def

/coor [
[25.60741234 298.37951660]
[18.39868546 311.53378296]
[11.18995953 324.68801880]
[3.98123288 337.84228516]
[-3.11733556 351.05630493]
[-10.10525036 364.32916260]
[-5.65160704 379.25573730]
[-12.92742348 392.61676025]
[-27.18508339 396.77066040]
[-34.17299652 410.04351807]
[-41.16091156 423.31640625]
[-48.14882660 436.58926392]
[-46.96923828 452.94592285]
[-60.69467926 461.92056274]
[-75.20559692 454.28085327]
[-75.57440186 437.88586426]
[-61.42169571 429.60134888]
[-54.43378067 416.32849121]
[-47.44586563 403.05560303]
[-40.45795059 389.78274536]
[-45.10240173 375.67724609]
[-38.20473862 362.11712646]
[-23.37811852 357.34124756]
[-16.39020348 344.06838989]
[-16.05546761 336.67028809]
[-9.17301655 330.63354492]
[-1.96428978 317.47930908]
[5.24443674 304.32504272]
[12.45316315 291.17080688]
[6.03500843 280.77215576]
[2.77772737 269.29650879]
[2.77710009 257.65838623]
[5.87563992 246.74227905]
[11.68614292 237.33549500]
[19.63227081 230.07147217]
[29.00224113 225.38757324]
[39.01085663 223.50036621]
[48.86453247 224.39939880]
[53.78490448 210.22937012]
[58.70527649 196.05932617]
[51.99984360 182.80894470]
[56.78794479 168.36842346]
[70.73163605 161.42498779]
[75.65200806 147.25494385]
[80.57238007 133.08491516]
[85.49275208 118.91487885]
[77.00933838 106.29779053]
[77.87860107 91.11874390]
[66.42382050 81.43432617]
[57.83160019 78.27456665]
[54.86029816 71.49111938]
[43.56893921 61.61664200]
[32.27758026 51.74217224]
[20.98622131 41.86769867]
[9.69486237 31.99322510]
[1.15663898 28.69032860]
[-1.70089662 21.85817719]
[-12.82567787 11.79640675]
[-27.41408348 16.39267159]
[-42.24645996 13.09154510]
[-53.36114120 2.87732935]
[-57.84089279 -11.43307972]
[-54.57817459 -25.96649742]
[-65.70295715 -36.02827072]
[-76.82773590 -46.09003830]
[-87.95252228 -56.15180969]
[-103.98298645 -56.78718185]
[-113.36456299 -69.80123138]
[-108.90050507 -85.21070099]
[-94.01525879 -91.19476318]
[-80.12751007 -83.16295624]
[-77.89074707 -67.27659607]
[-66.76596832 -57.21482086]
[-55.64118576 -47.15304947]
[-44.51640320 -37.09127808]
[-30.38255882 -41.79234314]
[-15.69561672 -38.76750183]
[-4.42016649 -28.73103714]
[0.34903875 -14.30358219]
[-2.76390719 0.67162502]
[8.36087418 10.73339558]
[19.56933594 20.70186615]
[30.86069489 30.57633972]
[42.15205383 40.45081329]
[53.44341278 50.32528687]
[64.73477173 60.19975662]
[76.10823822 69.97954559]
[87.56301880 79.66396332]
[101.79084778 76.22972870]
[115.34352112 81.75693512]
[128.12001038 73.89810181]
[131.89491272 58.78559494]
[144.96405029 50.99761963]
[159.34825134 54.68955612]
[172.12474060 46.83071518]
[184.90121460 38.97187424]
[197.67770386 31.11303520]
[210.45419312 23.25419617]
[223.23068237 15.39535618]
[236.00717163 7.53651619]
[248.71754456 -0.42879936]
[261.36093140 -8.50003433]
[268.82968140 -22.44737434]
[283.72070312 -22.77398491]
[296.36410522 -30.84521866]
[309.00747681 -38.91645432]
[321.65087891 -46.98768997]
[334.29425049 -55.05892563]
[346.93762207 -63.13016129]
[359.58102417 -71.20139313]
[372.15652466 -79.37799072]
[384.66326904 -87.65936279]
[391.89791870 -101.72956085]
[406.78140259 -102.30494690]
[419.28817749 -110.58632660]
[426.52282715 -124.65651703]
[441.40631104 -125.23191071]
[453.91305542 -133.51329041]
[461.14770508 -147.58348083]
[476.03118896 -148.15887451]
[488.53793335 -156.44024658]
[495.36422729 -171.35112000]
[511.71380615 -172.62522888]
[520.76763916 -158.95190430]
[513.21191406 -144.39706421]
[496.81933594 -143.93350220]
[484.31256104 -135.65213013]
[477.97247314 -122.17427063]
[462.19442749 -121.00653839]
[449.68768311 -112.72515869]
[443.34759521 -99.24730682]
[427.56954956 -98.07957458]
[415.06280518 -89.79820251]
[408.72271729 -76.32034302]
[392.94464111 -75.15261841]
[380.43789673 -66.87123871]
[376.58895874 -60.54434967]
[367.65225220 -58.55801010]
[355.00888062 -50.48677826]
[342.36547852 -42.41554260]
[329.72210693 -34.34430695]
[317.07870483 -26.27307129]
[304.43533325 -18.20183563]
[291.79196167 -10.13059998]
[285.22753906 3.23943090]
[269.43215942 4.14334965]
[256.78878784 12.21458435]
[252.83467102 18.47627258]
[243.86601257 20.31300354]
[231.08952332 28.17184448]
[218.31303406 36.03068161]
[205.53654480 43.88952255]
[192.76005554 51.74836349]
[179.98356628 59.60720062]
[167.20709229 67.46604156]
[164.01478577 81.96931458]
[151.16957092 90.12129974]
[135.97885132 86.67458344]
[123.20235443 94.53342438]
[122.18931580 108.71017456]
[113.28798676 119.79045868]
[99.66278839 123.83525085]
[94.74241638 138.00527954]
[89.82204437 152.17532349]
[84.90167236 166.34535217]
[91.54147339 180.43615723]
[86.34966278 194.73649597]
[72.87531281 200.97970581]
[67.95494080 215.14973450]
[63.03456879 229.31977844]
[80.80532074 246.09806824]
[84.43848419 272.37039185]
[69.78328705 296.93826294]
[74.22741699 311.26480103]
[78.67155457 325.59133911]
[83.11568451 339.91787720]
[96.58452606 348.63394165]
[98.02427673 364.61227417]
[86.33046722 375.59564209]
[70.47360229 373.15856934]
[62.61770630 359.17056274]
[68.78914642 344.36199951]
[64.34501648 330.03546143]
[59.90087891 315.70892334]
[55.45674515 301.38238525]
[47.99441147 300.63168335]
[39.23182297 312.80612183]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[4 26]
[5 24]
[6 23]
[9 20]
[10 19]
[11 18]
[12 17]
[38 170]
[39 169]
[40 168]
[43 165]
[44 164]
[45 163]
[46 162]
[48 88]
[49 87]
[51 86]
[52 85]
[53 84]
[54 83]
[55 82]
[57 81]
[58 80]
[63 75]
[64 74]
[65 73]
[66 72]
[90 159]
[91 158]
[94 155]
[95 154]
[96 153]
[97 152]
[98 151]
[99 150]
[100 149]
[101 147]
[102 146]
[104 144]
[105 143]
[106 142]
[107 141]
[108 140]
[109 139]
[110 138]
[111 136]
[112 135]
[114 133]
[115 132]
[117 130]
[118 129]
[120 127]
[121 126]
[173 185]
[174 184]
[175 183]
[176 182]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
