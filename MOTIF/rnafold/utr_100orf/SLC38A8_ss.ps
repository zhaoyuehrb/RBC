%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:46:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGGGACAGACCCCAGGAAGCAGGGGCCUUCCAGAAAAGCCUCACCCUGCCACGGCUGCUGCCACUCUGUCCUCGAUGGGCGCUGUCUUCAUCCUCA\
) } def
/len { sequence length } bind def

/coor [
[114.27265930 414.10464478]
[113.94818878 398.30368042]
[124.95184326 386.95928955]
[124.48534393 371.96655273]
[124.01884460 356.97378540]
[123.08630371 342.00280762]
[121.68861389 327.06808472]
[120.29092407 312.13333130]
[118.89323425 297.19860840]
[117.49554443 282.26385498]
[116.09785461 267.32910156]
[114.70016479 252.39437866]
[103.10437012 243.11682129]
[101.47415924 227.99078369]
[111.28394318 215.89094543]
[109.88625336 200.95620728]
[108.48856354 186.02145386]
[107.09087372 171.08671570]
[104.76740265 156.26776123]
[101.52713013 141.62191772]
[98.28686523 126.97608185]
[76.24854279 112.90396118]
[76.43604279 86.75674438]
[65.91224670 76.06798553]
[55.38844299 65.37922668]
[44.86463928 54.69046402]
[34.34083557 44.00170517]
[23.81703377 33.31294632]
[10.40557289 40.28604507]
[-4.46571064 42.99461365]
[-19.47447205 41.19781113]
[-33.28614044 35.05540085]
[-44.67259598 25.11356735]
[-52.62135696 12.25632858]
[-56.42563248 -2.37305665]
[-55.74714279 -17.47375488]
[-50.64622116 -31.70302010]
[-41.57643509 -43.79559708]
[-29.34427071 -52.67622375]
[-15.03739643 -57.55523682]
[0.07202610 -57.99880219]
[14.64047909 -53.96747589]
[27.37254333 -45.81971741]
[37.13609695 -34.28002930]
[43.06296539 -20.37450218]
[44.62614059 -5.33961391]
[41.68662262 9.48774719]
[34.50579453 22.78914261]
[45.02959442 33.47790146]
[55.55339813 44.16666031]
[66.07720184 54.85541916]
[76.60100555 65.54418182]
[87.12480927 76.23294067]
[92.74944305 73.96015930]
[98.73928833 72.99899292]
[104.79264069 73.39785004]
[110.60458374 75.13664246]
[120.08662415 63.51378250]
[129.56867981 51.89092636]
[131.65728760 35.62532806]
[146.89030457 29.55183029]
[159.59729004 39.91832733]
[156.70640564 56.06065750]
[141.19152832 61.37297440]
[131.70948792 72.99582672]
[122.22743988 84.61869049]
[125.24272919 90.33312225]
[126.81572723 96.59989166]
[126.85655212 103.06092834]
[125.36288452 109.34707642]
[122.42005920 115.09916687]
[118.19622040 119.98853302]
[112.93270874 123.73581696]
[116.17297363 138.38165283]
[119.41323853 153.02749634]
[122.77433014 156.39404297]
[124.58602905 160.29016113]
[124.88179779 164.12257385]
[123.89801025 167.37852478]
[122.02561188 169.68902588]
[123.42330170 184.62377930]
[124.82099152 199.55851746]
[126.21868134 214.49325562]
[138.10321045 224.56278992]
[139.30792236 239.72865295]
[129.63490295 250.99668884]
[131.03259277 265.93142700]
[132.43028259 280.86614990]
[133.82797241 295.80090332]
[135.22566223 310.73565674]
[136.62335205 325.67037964]
[138.02104187 340.60513306]
[141.68246460 346.45431519]
[141.69737244 352.36276245]
[139.01159668 356.50729370]
[139.47808838 371.50003052]
[139.94458008 386.49279785]
[151.63223267 397.13113403]
[152.29072571 412.92169189]
[141.52940369 424.49621582]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 97]
[4 96]
[5 95]
[6 92]
[7 91]
[8 90]
[9 89]
[10 88]
[11 87]
[12 86]
[15 83]
[16 82]
[17 81]
[18 80]
[19 75]
[20 74]
[21 73]
[23 53]
[24 52]
[25 51]
[26 50]
[27 49]
[28 48]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
