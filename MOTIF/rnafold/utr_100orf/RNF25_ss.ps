%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACGACGCUAGCUGCCCACCCCUCUUAGUUUUCCGCCUCCGACUUCCCUAAGGGCAUUUCCGGUUCCGGCUGCGGGCCGGUGAAGAUAUGGCGGCGUCUGCGUCUGCAGCUGCAGGGGAGGAGGACUGGGUCCUUCCCUCUGAAGUUGAAGUAUUGGAGUCCAUCUAUCUAGAUGAACUACAGGUGA\
) } def
/len { sequence length } bind def

/coor [
[72.05582428 127.19165039]
[67.02301025 120.80339813]
[63.42486572 113.51008606]
[61.41791916 105.62902832]
[61.08948517 97.50307465]
[46.58459091 93.68103027]
[32.07969284 89.85898590]
[17.57479858 86.03694153]
[3.06990337 82.21489716]
[-12.90244389 92.37561035]
[-30.92566872 87.73372650]
[-39.69664383 71.68115997]
[-54.32056427 68.34334564]
[-68.94448090 65.00553131]
[-83.56839752 61.66771698]
[-98.19232178 58.32990265]
[-112.81623840 54.99208832]
[-122.46152496 69.44920349]
[-136.79646301 79.20477295]
[-153.70669556 82.85592651]
[-170.71150208 79.89752197]
[-185.32768250 70.79183197]
[-195.43226624 56.89656448]
[-209.87162781 60.95917130]
[-224.31098938 65.02177429]
[-238.75035095 69.08438110]
[-253.18972778 73.14698792]
[-267.62908936 77.20959473]
[-282.06845093 81.27220154]
[-284.76104736 97.30947876]
[-294.14050293 110.52242279]
[-308.29003906 118.29839325]
[-324.35598755 119.12696075]
[-339.12326050 112.89306641]
[-349.65875244 100.88991547]
[-364.02859497 105.19196320]
[-374.88265991 117.48509216]
[-390.89999390 113.96698761]
[-395.60333252 98.25677490]
[-384.15426636 86.51577759]
[-368.33062744 90.82212067]
[-353.96078491 86.52007294]
[-352.45300293 72.71905518]
[-345.77481079 60.49822998]
[-334.90679932 51.72088623]
[-321.47109985 47.73962021]
[-307.48941040 49.18798065]
[-295.07879639 55.87989807]
[-286.13104248 66.83283997]
[-271.69168091 62.77023315]
[-257.25231934 58.70762634]
[-242.81297302 54.64501953]
[-228.37359619 50.58241272]
[-213.93423462 46.51980591]
[-199.49487305 42.45719910]
[-199.33184814 31.60004997]
[-196.56510925 21.10008049]
[-191.35671997 11.57238674]
[-201.91915894 0.92180061]
[-217.13049316 -3.42854619]
[-220.59878540 -17.91372108]
[-231.16120911 -28.56430817]
[-241.72364807 -39.21489334]
[-252.28608704 -49.86547852]
[-262.84851074 -60.51606750]
[-271.13006592 -64.41581726]
[-273.49615479 -71.43255615]
[-283.88009644 -82.25723267]
[-294.26403809 -93.08190918]
[-310.15512085 -97.13239288]
[-314.33172607 -112.99076080]
[-302.49734497 -124.34329224]
[-286.82620239 -119.51146698]
[-283.43936157 -103.46585846]
[-273.05541992 -92.64118195]
[-262.67147827 -81.81650543]
[-252.19792175 -71.07849884]
[-241.63549805 -60.42791367]
[-231.07305908 -49.77732849]
[-220.51062012 -39.12674332]
[-209.94819641 -28.47615623]
[-195.49234009 -24.88760948]
[-191.26856995 -9.64063358]
[-180.70613098 1.00995278]
[-167.86308289 -5.34039068]
[-153.64547729 -7.32638741]
[-139.49806213 -4.72817945]
[-126.86414337 2.20733833]
[-117.03835297 12.78985977]
[-111.03395844 25.95433998]
[-109.47842407 40.36816788]
[-94.85450745 43.70598221]
[-80.23059082 47.04379654]
[-65.60666656 50.38161087]
[-50.98274994 53.71942520]
[-36.35882950 57.05723953]
[-28.22596741 49.02436447]
[-17.10799789 45.89084625]
[-5.74364471 48.54904556]
[3.00916648 56.44955444]
[6.89194632 67.71000671]
[21.39684105 71.53205109]
[35.90173721 75.35408783]
[50.40663147 79.17613220]
[64.91152954 82.99817657]
[83.59920502 64.62660980]
[109.69556427 62.23415756]
[131.41218567 76.90155792]
[144.98033142 70.50584412]
[158.54849243 64.11013794]
[172.11665344 57.71442413]
[185.68479919 51.31871033]
[194.86862183 38.43585587]
[209.68003845 40.00791931]
[223.24819946 33.61220551]
[236.81634521 27.21649361]
[250.38450623 20.82078171]
[263.95266724 14.42506981]
[277.52081299 8.02935791]
[283.96401978 1.52725601]
[291.36807251 1.64220035]
[305.04064941 -4.52710629]
[318.71325684 -10.69641304]
[332.38583374 -16.86571884]
[346.05841064 -23.03502655]
[359.73101807 -29.20433235]
[373.40359497 -35.37363815]
[385.35427856 -47.39934540]
[400.21829224 -39.24474716]
[396.49713135 -22.70420837]
[379.57290649 -21.70105171]
[365.90029907 -15.53174496]
[352.22772217 -9.36243820]
[338.55514526 -3.19313145]
[324.88253784 2.97617507]
[311.20996094 9.14548206]
[297.53738403 15.31478786]
[283.91653442 21.59751511]
[270.34838867 27.99322701]
[256.78021240 34.38893890]
[243.21206665 40.78464890]
[229.64390564 47.18036270]
[216.07574463 53.57607651]
[207.86241150 66.00146484]
[192.08052063 64.88687134]
[178.51235962 71.28257751]
[164.94419861 77.67829132]
[151.37605286 84.07400513]
[137.80789185 90.46971893]
[138.85215759 96.71785736]
[138.87086487 103.05264282]
[137.86351013 109.30684662]
[135.85668945 115.31537628]
[132.90336609 120.91963196]
[129.08151245 125.97168732]
[138.13858032 137.92868042]
[147.19564819 149.88566589]
[161.69590759 156.21441650]
[163.21302795 171.03155518]
[172.27009583 182.98854065]
[181.32716370 194.94552612]
[195.82742310 201.27427673]
[197.34455872 216.09141541]
[206.40161133 228.04840088]
[215.45867920 240.00538635]
[224.51574707 251.96237183]
[233.57281494 263.91937256]
[248.88618469 269.78729248]
[251.19352722 286.02331543]
[238.12123108 295.92520142]
[223.11695862 289.30673218]
[221.61582947 272.97644043]
[212.55876160 261.01943970]
[203.50169373 249.06245422]
[194.44462585 237.10546875]
[185.38755798 225.14848328]
[171.53512573 219.67497253]
[169.37017822 204.00259399]
[160.31311035 192.04560852]
[151.25604248 180.08862305]
[137.40361023 174.61511230]
[135.23866272 158.94273376]
[126.18158722 146.98573303]
[117.12452698 135.02874756]
[109.48561859 137.81912231]
[101.43405151 138.96417236]
[93.32008362 138.41407776]
[85.49673462 136.19279480]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 105]
[6 104]
[7 103]
[8 102]
[9 101]
[12 96]
[13 95]
[14 94]
[15 93]
[16 92]
[17 91]
[23 55]
[24 54]
[25 53]
[26 52]
[27 51]
[28 50]
[29 49]
[35 42]
[36 41]
[58 84]
[59 83]
[61 81]
[62 80]
[63 79]
[64 78]
[65 77]
[67 76]
[68 75]
[69 74]
[108 149]
[109 148]
[110 147]
[111 146]
[112 145]
[114 143]
[115 142]
[116 141]
[117 140]
[118 139]
[119 138]
[121 137]
[122 136]
[123 135]
[124 134]
[125 133]
[126 132]
[127 131]
[155 184]
[156 183]
[157 182]
[159 180]
[160 179]
[161 178]
[163 176]
[164 175]
[165 174]
[166 173]
[167 172]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
