%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGGCCGGGCCGCCGGGCAGCGCCAGGCCGGCGGAGCCGGGUCCUUGCCUGAGUGGUCAGCGCGGCGCGGACCACACGGCUUCCGCCUCCCUGCAGA\
) } def
/len { sequence length } bind def

/coor [
[98.16621399 220.70578003]
[103.75248718 206.39881897]
[115.75383759 196.81430054]
[113.43036652 181.99534607]
[111.10689545 167.17639160]
[108.78342438 152.35743713]
[106.45994568 137.53846741]
[104.13647461 122.71952057]
[96.24514771 135.47596741]
[81.31494141 134.03060913]
[76.01705933 119.99734497]
[86.26828766 109.04553223]
[71.35709381 110.67531586]
[56.44589233 112.30509186]
[41.53469467 113.93487549]
[26.65064812 115.79635620]
[11.79734898 117.88909149]
[-0.78838390 127.47605133]
[-14.47065449 121.59007263]
[-29.32395363 123.68280792]
[-44.17724991 125.77553558]
[-59.01791763 133.97254944]
[-71.00289154 121.98101044]
[-62.79776382 107.14482880]
[-46.26998138 110.92223358]
[-31.41668320 108.82950592]
[-16.56338501 106.73677826]
[-5.04005814 97.29949951]
[9.70461941 103.03578949]
[24.55791855 100.94306183]
[30.85298157 96.82023621]
[39.90491486 99.02368164]
[54.81611252 97.39389801]
[69.72731018 95.76411438]
[84.63850403 94.13433075]
[97.70594788 86.76942444]
[106.82193756 74.85729980]
[115.93792725 62.94517136]
[125.05392456 51.03304672]
[134.16990662 39.12092209]
[143.28590393 27.20879936]
[152.40188599 15.29667377]
[160.95237732 2.97233915]
[168.91874695 -9.73738194]
[176.88511658 -22.44710159]
[184.85147095 -35.15682220]
[192.81784058 -47.86654282]
[193.59106445 -63.66884232]
[206.90634155 -70.34363556]
[214.87269592 -83.05335999]
[222.83906555 -95.76307678]
[230.80543518 -108.47280121]
[230.98587036 -114.05085754]
[233.17306519 -118.47822571]
[236.54260254 -121.16167450]
[240.15351868 -121.94675446]
[249.26950073 -133.85888672]
[258.38549805 -145.77101135]
[257.70468140 -161.79960632]
[269.90591431 -172.21640015]
[285.62945557 -169.03050232]
[292.81353760 -154.68588257]
[285.94717407 -140.18647766]
[270.29760742 -136.65501404]
[261.18164062 -124.74288940]
[252.06564331 -112.83076477]
[243.51515198 -100.50643158]
[235.54878235 -87.79670715]
[227.58242798 -75.08699036]
[219.61605835 -62.37726974]
[219.41264343 -47.48405457]
[205.52757263 -39.90017700]
[197.56120300 -27.19045639]
[189.59483337 -14.48073483]
[181.62846375 -1.77101445]
[173.66209412 10.93870640]
[174.19097900 14.59593487]
[172.85716248 18.69173241]
[169.47583008 22.29062462]
[164.31401062 24.41266441]
[155.19802856 36.32479095]
[146.08203125 48.23691559]
[136.96604919 60.14904022]
[127.85005951 72.06116486]
[118.73406219 83.97328949]
[109.61807251 95.88541412]
[118.73648071 103.97154236]
[118.95542908 120.39604187]
[121.27890778 135.21499634]
[123.60237885 150.03395081]
[125.92584991 164.85292053]
[128.24932861 179.67187500]
[130.57279968 194.49082947]
[144.93165588 199.94232178]
[154.62860107 211.85301208]
[157.05522156 227.01899719]
[151.55874634 241.36070251]
[139.61772156 251.02026367]
[124.44419861 253.39933777]
[110.11979675 247.85794067]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 93]
[4 92]
[5 91]
[6 90]
[7 89]
[8 88]
[12 35]
[13 34]
[14 33]
[15 32]
[16 30]
[17 29]
[19 27]
[20 26]
[21 25]
[36 86]
[37 85]
[38 84]
[39 83]
[40 82]
[41 81]
[42 80]
[43 76]
[44 75]
[45 74]
[46 73]
[47 72]
[49 70]
[50 69]
[51 68]
[52 67]
[56 66]
[57 65]
[58 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
