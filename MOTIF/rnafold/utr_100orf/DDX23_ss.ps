%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGUGUUCAUCUCCGCGACCAGGAAACGGGAAAGAUGGCGACGGCUCCGCGACGUUGAGGCCGCGUUGGGCGGUUCAGACUCAGGGUGAUGGCAGGAGAGCUGGCUGACAAAAAGGACCGUGAUGCAUCACCUUCCAAGGAGGAAAGGAAGCGAUCACGGACUCCUGACAGAGAGCGGGAUAGAGACC\
) } def
/len { sequence length } bind def

/coor [
[110.00579834 331.85119629]
[95.15428925 337.91851807]
[81.22178650 329.96459961]
[78.89610291 314.09100342]
[89.96131897 302.47460938]
[90.94235992 287.50674438]
[91.92340851 272.53884888]
[85.03507996 259.33279419]
[93.65838623 246.06820679]
[94.63943481 231.10032654]
[87.75110626 217.89425659]
[96.37441254 204.62966919]
[97.35546112 189.66178894]
[98.33650970 174.69390869]
[99.31755066 159.72602844]
[100.29859924 144.75813293]
[87.49619293 136.94160461]
[74.63026428 144.65313721]
[61.82785416 152.46968079]
[49.08982086 160.39070129]
[43.44330978 167.59181213]
[36.07793427 168.33512878]
[23.21200371 176.04667664]
[10.34607506 183.75822449]
[12.61112499 198.78945923]
[8.94670105 213.54209900]
[-0.08839692 225.76647949]
[-13.11638260 233.59846497]
[-28.15058327 235.84373474]
[-42.89839172 232.15991211]
[-55.11087418 223.10873413]
[-62.92571640 210.07046509]
[-65.15121460 195.03332520]
[-61.44799042 180.29037476]
[-52.38076019 168.08979797]
[-39.33221436 160.29211426]
[-24.29216003 158.08641052]
[-9.55409336 161.80902100]
[2.63453412 170.89228821]
[15.50046349 163.18074036]
[28.36639214 155.46920776]
[41.16880035 147.65266418]
[53.90683365 139.73164368]
[57.93330383 133.51965332]
[66.91872406 131.78721619]
[79.78465271 124.07566833]
[73.61944580 104.67291260]
[80.80071259 88.96372986]
[71.09636688 77.52582550]
[61.39202499 66.08791351]
[51.68768311 54.65000916]
[41.89009094 43.29187775]
[31.99990273 32.01427841]
[11.32944584 26.40170860]
[8.10662937 6.02458906]
[-2.32500982 -4.75413513]
[-17.48212051 -9.28983688]
[-20.77332497 -23.81626892]
[-31.20496559 -34.59499359]
[-41.63660431 -45.37371826]
[-52.06824493 -56.15244293]
[-62.49988174 -66.93116760]
[-73.36358643 -77.27427673]
[-84.64118958 -87.16445923]
[-95.91878510 -97.05464935]
[-107.19638062 -106.94483948]
[-118.47397614 -116.83502197]
[-134.51229858 -117.22476959]
[-144.09211731 -130.09359741]
[-139.86460876 -145.56964111]
[-125.07277679 -151.78099060]
[-111.06362915 -143.96286011]
[-108.58379364 -128.11262512]
[-97.30619049 -118.22243500]
[-86.02859497 -108.33224487]
[-74.75099945 -98.44205475]
[-63.47340393 -88.55187225]
[-61.74236298 -103.45165253]
[-49.10361099 -111.53013611]
[-34.85411453 -106.84484863]
[-29.47570229 -92.84225464]
[-36.92469025 -79.82255554]
[-51.72116089 -77.36280823]
[-41.28952026 -66.58408356]
[-30.85787964 -55.80535889]
[-20.42624092 -45.02663422]
[-9.99460125 -34.24790955]
[4.41636801 -30.48317337]
[8.45371437 -15.18577480]
[18.88535309 -4.40705061]
[27.69602013 -5.71195459]
[36.24612808 -2.76261020]
[42.56823349 3.89654112]
[45.14622879 12.85285664]
[43.27750015 22.12409210]
[53.16768646 33.40168762]
[59.95260239 36.36247253]
[63.12559128 44.94566727]
[72.82993317 56.38357544]
[82.53427887 67.82147980]
[92.23861694 79.25939178]
[121.82052612 84.45539856]
[124.22786713 120.03269196]
[139.15563965 118.56243134]
[154.08340454 117.09217834]
[164.09507751 105.15884399]
[179.25489807 103.88044739]
[190.56980896 113.49858093]
[205.49757385 112.02832031]
[220.42535400 110.55806732]
[224.16098022 101.56480408]
[230.88192749 94.59794617]
[239.62980652 90.58998871]
[249.17922974 90.05580902]
[258.20938110 93.02690125]
[265.48678589 99.05286407]
[270.03359985 107.26911926]
[285.02557373 106.77833557]
[300.01754761 106.28755188]
[315.00952148 105.79676056]
[329.99145508 105.06074524]
[344.95932007 104.07969666]
[359.92721558 103.09865570]
[374.89511108 102.11760712]
[389.86297607 101.13655853]
[404.83087158 100.15550995]
[419.79873657 99.17446899]
[434.75811768 98.07099915]
[449.70794678 96.84518433]
[462.82965088 88.00599670]
[476.14663696 94.67733002]
[491.09646606 93.45151520]
[498.57702637 82.23921967]
[510.97039795 77.45715332]
[523.66583252 80.64400482]
[532.07727051 90.41732788]
[547.04516602 89.43627930]
[562.01300049 88.45523071]
[576.98089600 87.47418976]
[588.59729004 76.40898132]
[604.47088623 78.73465729]
[612.42480469 92.66716003]
[606.35748291 107.51866913]
[590.92327881 111.89636993]
[577.96197510 102.44207001]
[562.99407959 103.42311859]
[548.02618408 104.40416718]
[533.05828857 105.38520813]
[522.52825928 118.48912811]
[505.44326782 119.95948792]
[492.32229614 108.40134430]
[477.37246704 109.62715912]
[465.32006836 118.37866211]
[450.93374634 111.79501343]
[435.98391724 113.02082825]
[429.56402588 116.70678711]
[420.77978516 114.14234924]
[405.81192017 115.12339783]
[390.84402466 116.10444641]
[375.87615967 117.08548737]
[360.90826416 118.06653595]
[345.94036865 119.04758453]
[330.97250366 120.02863312]
[327.19686890 122.97712708]
[321.52493286 123.57441711]
[315.50030518 120.78873444]
[300.50833130 121.27951813]
[285.51635742 121.77030182]
[270.52438354 122.26109314]
[257.88333130 138.30621338]
[237.22215271 139.86029053]
[221.89559937 125.48583984]
[206.96783447 126.95609283]
[192.04006958 128.42634583]
[182.81896973 140.06710815]
[167.70103455 141.77079773]
[155.55366516 132.01994324]
[140.62590027 133.49020386]
[125.69812012 134.96046448]
[115.26648712 145.73918152]
[114.28543854 160.70707703]
[113.30438995 175.67495728]
[112.32334137 190.64283752]
[111.34229279 205.61071777]
[118.16045380 219.88739014]
[109.60731506 232.08137512]
[108.62627411 247.04925537]
[115.44442749 261.32592773]
[106.89129639 273.51989746]
[105.91024780 288.48779297]
[104.92919922 303.45565796]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 191]
[6 190]
[7 189]
[9 187]
[10 186]
[12 184]
[13 183]
[14 182]
[15 181]
[16 180]
[17 46]
[18 45]
[19 43]
[20 42]
[22 41]
[23 40]
[24 39]
[48 101]
[49 100]
[50 99]
[51 98]
[52 96]
[53 95]
[55 90]
[56 89]
[58 87]
[59 86]
[60 85]
[61 84]
[62 83]
[63 77]
[64 76]
[65 75]
[66 74]
[67 73]
[103 179]
[104 178]
[105 177]
[108 174]
[109 173]
[110 172]
[117 169]
[118 168]
[119 167]
[120 166]
[121 163]
[122 162]
[123 161]
[124 160]
[125 159]
[126 158]
[127 157]
[128 155]
[129 154]
[131 152]
[132 151]
[136 148]
[137 147]
[138 146]
[139 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
