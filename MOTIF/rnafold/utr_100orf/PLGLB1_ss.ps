%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:48:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUAAGUCAACAACAUCCUGGGAUUGGGACACACUUUCUGGGCACUGCUGGCCAGUCCCAAAAUGGAACAUAAGGAAGUGGUUCUUCUACUUCUUUUAUUUCUGAAAUCAGGUCAAGGAGAGCCCCUGGAUGACUAUGUGAAUACCCAGGGGCCUUCACUGU\
) } def
/len { sequence length } bind def

/coor [
[143.65837097 284.87622070]
[129.57757568 290.04644775]
[114.66104126 291.62667847]
[99.80950165 289.52145386]
[85.91977692 283.85794067]
[73.83057404 274.97811890]
[64.27191925 263.41818237]
[57.82099915 249.87619019]
[54.86735535 235.16986084]
[55.58934021 220.18725586]
[59.94336319 205.83306885]
[67.66650391 192.97409058]
[78.29239655 182.38682556]
[91.17940521 174.71055603]
[105.54933929 170.40882874]
[120.53448486 169.74140930]
[135.22996521 172.74858093]
[148.74450684 179.24627686]
[139.88130188 167.14488220]
[131.01809692 155.04350281]
[122.15488434 142.94210815]
[113.29167938 130.84072876]
[93.02661896 132.85104370]
[75.32576752 122.78160095]
[66.69795227 104.33506775]
[51.76670456 102.90055847]
[36.83545685 101.46604919]
[21.90420914 100.03153992]
[6.97296000 98.59703064]
[-7.95828867 97.16252136]
[-22.88953781 95.72801208]
[-12.87964439 106.89949799]
[-11.20086002 121.80525970]
[-18.47509766 134.92340088]
[-32.00758362 141.39424133]
[-46.78515244 138.82063293]
[-57.33339691 128.15599060]
[-59.74466705 113.35107422]
[-53.12570572 99.89041138]
[-39.92959595 92.76077271]
[-54.46688080 89.06383514]
[-69.00416565 85.36689758]
[-84.28559113 89.46428680]
[-94.71329498 78.82886505]
[-109.25057983 75.13192749]
[-124.88014984 80.09667969]
[-136.81050110 68.84506989]
[-132.76872253 52.95180130]
[-116.91264343 48.76649857]
[-105.55364227 60.59464264]
[-91.01635742 64.29158783]
[-76.77473450 59.92975998]
[-65.30722046 70.82961273]
[-50.76993942 74.52655029]
[-36.23265457 78.22349548]
[-21.45502853 80.79676819]
[-6.52378035 82.23127747]
[8.40746784 83.66578674]
[23.33871651 85.10028839]
[38.26996613 86.53479767]
[53.20121384 87.96930695]
[68.13246155 89.40381622]
[72.39474487 80.87490845]
[78.88219452 73.88760376]
[87.07186127 69.00512695]
[96.30362701 66.62102509]
[98.02388000 51.71999359]
[99.74413300 36.81896591]
[101.46437836 21.91793251]
[90.21170044 11.39731693]
[87.34506226 -3.55713987]
[93.75797272 -17.17105103]
[106.80149078 -24.31280327]
[108.52174377 -39.21383286]
[110.24199677 -54.11486435]
[111.96224976 -69.01589966]
[113.68250275 -83.91693115]
[115.40274811 -98.81796265]
[117.12300110 -113.71899414]
[118.84325409 -128.62002563]
[120.56350708 -143.52105713]
[122.28375244 -158.42208862]
[113.48217773 -171.83520508]
[118.61799622 -187.03398132]
[133.75144958 -192.35922241]
[147.27345276 -183.72586060]
[148.81106567 -167.75665283]
[137.18478394 -156.70182800]
[135.46453857 -141.80079651]
[133.74427795 -126.89977264]
[132.02403259 -111.99874115]
[130.30378723 -97.09770966]
[128.58352661 -82.19667816]
[126.86328125 -67.29564667]
[125.14302826 -52.39461517]
[123.42277527 -37.49358368]
[121.70252228 -22.59255219]
[132.77566528 -12.66664791]
[135.91790771 2.05035830]
[129.71925354 15.95827198]
[116.36540985 23.63818359]
[114.64516449 38.53921509]
[112.92491150 53.44024658]
[111.20465851 68.34127808]
[122.36979675 74.95182037]
[130.19558716 85.30152893]
[133.51382446 97.84540558]
[131.82916260 110.71092224]
[125.39306641 121.97751617]
[134.25627136 134.07890320]
[143.11947632 146.18029785]
[151.98268127 158.28167725]
[160.84588623 170.38307190]
[164.96176147 171.34405518]
[168.42005920 173.28424072]
[171.01368713 175.93051147]
[172.63095093 178.97431946]
[173.25843811 182.10203552]
[185.84892273 190.25555420]
[198.43940735 198.40905762]
[211.02989197 206.56257629]
[219.97950745 208.61601257]
[223.78137207 214.99479675]
[236.21336365 223.38798523]
[248.64535522 231.78115845]
[261.07736206 240.17434692]
[273.50933838 248.56753540]
[285.94134521 256.96072388]
[298.37332153 265.35391235]
[310.80532837 273.74710083]
[323.05786133 264.82238770]
[337.62481689 260.62948608]
[352.74707031 261.67474365]
[366.59860229 267.83190918]
[377.50677490 278.35751343]
[384.15432739 291.98049927]
[385.73855591 307.05584717]
[382.06817627 321.76312256]
[373.58636475 334.32635498]
[361.31738281 343.22848511]
[346.74276733 347.39453125]
[331.62243652 346.32141113]
[317.78225708 340.13870239]
[306.89352417 329.59304810]
[300.27108765 315.95782471]
[298.71463013 300.87957764]
[302.41213989 286.17907715]
[289.98013306 277.78588867]
[277.54815674 269.39273071]
[265.11614990 260.99954224]
[252.68415833 252.60633850]
[240.25216675 244.21315002]
[227.82017517 235.81997681]
[215.38818359 227.42678833]
[202.87637329 219.15306091]
[190.28588867 210.99954224]
[177.69541931 202.84602356]
[165.10493469 194.69252014]
[172.36984253 207.81581116]
[176.21502686 222.31459045]
[176.40826416 237.31335449]
[172.93789673 251.90638733]
[166.01348877 265.21249390]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 113]
[19 112]
[20 111]
[21 110]
[22 109]
[25 62]
[26 61]
[27 60]
[28 59]
[29 58]
[30 57]
[31 56]
[40 55]
[41 54]
[42 53]
[44 51]
[45 50]
[66 104]
[67 103]
[68 102]
[69 101]
[73 97]
[74 96]
[75 95]
[76 94]
[77 93]
[78 92]
[79 91]
[80 90]
[81 89]
[82 88]
[118 158]
[119 157]
[120 156]
[121 155]
[123 154]
[124 153]
[125 152]
[126 151]
[127 150]
[128 149]
[129 148]
[130 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
