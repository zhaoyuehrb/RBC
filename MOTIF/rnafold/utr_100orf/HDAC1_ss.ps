%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:14:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCGGAGCCGCGGGCGGGAGGGCGGACGGACCGACUGACGGUAGGGACGGGAGGCGAGCAAGAUGGCGCAGACGCAGGGCACCCGGAGGAAAGUCUGUUACUACUACGACGGGGAUGUUGGAAAUUACUAUUAUGGACAAGGCCACCCAAUGAAGCCUCACC\
) } def
/len { sequence length } bind def

/coor [
[-86.55277252 281.70007324]
[-90.95262146 294.40396118]
[-99.04954529 305.10787964]
[-110.03949738 312.77227783]
[-122.83830261 316.65823364]
[-136.18869019 316.39880371]
[-148.78370667 312.03347778]
[-159.39474487 304.00302124]
[-171.82673645 312.39620972]
[-184.25872803 320.78939819]
[-196.69071960 329.18255615]
[-209.04174805 337.69445801]
[-221.31068420 346.32421875]
[-233.57963562 354.95401001]
[-240.41578674 369.22207642]
[-255.27720642 370.21572876]
[-267.54614258 378.84552002]
[-279.81509399 387.47531128]
[-276.83605957 402.41000366]
[-280.19540405 417.26376343]
[-289.31109619 429.46310425]
[-302.60379028 436.89440918]
[-317.77044678 438.27017212]
[-332.18334961 433.35198975]
[-343.34536743 422.99200439]
[-349.32260132 408.98513794]
[-349.07949829 393.75814819]
[-342.65814209 379.94924927]
[-331.17111206 369.95086670]
[-316.60855103 365.49530029]
[-301.49356079 367.35449219]
[-288.44485474 375.20635986]
[-276.17593384 366.57656860]
[-263.90698242 357.94680786]
[-257.94839478 344.29598999]
[-242.20941162 342.68505859]
[-229.94047546 334.05529785]
[-217.67152405 325.42550659]
[-213.99253845 318.97506714]
[-205.08390808 316.75057983]
[-192.65191650 308.35739136]
[-180.21992493 299.96420288]
[-167.78793335 291.57101440]
[-171.50093079 275.38024902]
[-168.72380066 258.96582031]
[-159.85237122 244.83552551]
[-146.21572876 235.15911865]
[-129.87713623 231.43505859]
[-113.32193756 234.25862122]
[-99.07942200 243.22691345]
[-86.97803497 234.36370850]
[-74.96209717 225.38499451]
[-63.03270340 216.29162598]
[-51.10330963 207.19824219]
[-39.17391586 198.10485840]
[-27.24452400 189.01147461]
[-32.57750320 174.30714417]
[-33.11352539 158.65536499]
[-28.78830719 143.58334351]
[-20.01247406 130.56538391]
[-7.63261652 120.87873077]
[7.15038061 115.47824097]
[22.89781380 114.90222168]
[38.07318497 119.21887207]
[51.19210815 128.01840210]
[62.94512939 118.69818878]
[74.69815063 109.37796783]
[86.45117188 100.05774689]
[93.49042511 86.81203461]
[94.63866425 71.85604858]
[95.78690338 56.90006256]
[96.93514252 41.94407654]
[98.08338165 26.98808861]
[99.23162079 12.03210258]
[82.64900208 -0.30971155]
[76.84453583 -20.00577736]
[83.98744202 -39.10988617]
[101.05791473 -50.01795959]
[100.77059174 -65.01520538]
[91.84176636 -78.77050018]
[99.52984619 -93.25585938]
[115.92597961 -93.56998444]
[124.16324615 -79.38973236]
[115.76783752 -65.30252838]
[116.05516052 -50.30528259]
[125.20449829 -46.83657455]
[132.89691162 -40.74150467]
[138.39875793 -32.57846451]
[141.17843628 -23.10411453]
[140.95762634 -13.20324993]
[137.73913574 -3.80617619]
[131.80827332 4.19870424]
[123.70766449 10.04887867]
[114.18760681 13.18034077]
[113.03936768 28.13632774]
[111.89112854 43.09231567]
[110.74288940 58.04830170]
[109.59465790 73.00428772]
[108.44641876 87.96027374]
[114.36729431 92.56388855]
[122.54524994 79.98926544]
[125.54737854 65.29276276]
[139.61618042 60.08997726]
[151.45808411 69.29699707]
[149.88374329 84.21414948]
[136.38020325 90.74624634]
[126.20903778 101.77111053]
[132.12991333 106.37471771]
[146.34155273 101.57580566]
[160.55317688 96.77690125]
[174.76480103 91.97798920]
[188.97644043 87.17907715]
[199.39668274 74.51611328]
[215.52661133 77.47536469]
[220.77314758 93.01260376]
[209.73910522 105.14445496]
[193.77534485 101.39070892]
[179.56372070 106.18961334]
[165.35209656 110.98852539]
[151.14045715 115.78743744]
[136.92883301 120.58634949]
[151.70143127 123.18833160]
[163.65098572 132.25520325]
[172.88899231 144.07293701]
[178.80290222 157.85792542]
[181.00053406 172.69607544]
[179.33616638 187.60345459]
[173.92018127 201.59155273]
[165.11169434 213.73283386]
[153.49482727 223.22219849]
[139.83985901 229.43040466]
[125.05226135 231.94580078]
[110.11261749 230.60156250]
[96.01155853 225.48684692]
[83.68414307 216.94081116]
[73.94779205 205.53013611]
[67.44812775 192.01147461]
[64.61614227 177.28123474]
[65.63962555 162.31619263]
[70.45071411 148.10868835]
[78.73037720 135.60079956]
[89.92549896 125.62473297]
[95.77139282 111.81076813]
[84.01837158 121.13098907]
[72.26535034 130.45120239]
[60.51232910 139.77142334]
[65.79117584 153.19136047]
[67.06596375 167.53974915]
[64.24198151 181.64886475]
[57.55772018 194.37304688]
[47.56475830 204.68161011]
[35.08226776 211.74247742]
[21.12984657 214.98922729]
[6.84424925 214.16656494]
[-6.61322403 209.35040283]
[-18.15114212 200.94087219]
[-30.08053589 210.03425598]
[-42.00992966 219.12763977]
[-53.93931961 228.22100830]
[-65.86871338 237.31439209]
[-70.82640839 245.04313660]
[-78.11483002 246.46508789]
[-90.21621704 255.32830811]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 43]
[9 42]
[10 41]
[11 40]
[12 38]
[13 37]
[14 36]
[16 34]
[17 33]
[18 32]
[50 163]
[51 162]
[52 160]
[53 159]
[54 158]
[55 157]
[56 156]
[65 146]
[66 145]
[67 144]
[68 143]
[69 99]
[70 98]
[71 97]
[72 96]
[73 95]
[74 94]
[78 85]
[79 84]
[108 121]
[109 120]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
