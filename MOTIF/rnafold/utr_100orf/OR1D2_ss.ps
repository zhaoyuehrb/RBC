%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:09:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUGGAGGCAACCAGAGUGAAGGUUCAGAGUUCCUUCUCCUGGGGAUGUCAGAGAGUCCUGAGCAGCAGCGGAUCCUGUUUUGGAUGUUCCUGUCCA\
) } def
/len { sequence length } bind def

/coor [
[67.26125336 439.09295654]
[70.04994202 419.91293335]
[70.51644135 404.92016602]
[70.98294067 389.92742920]
[71.44944000 374.93469238]
[71.91593933 359.94195557]
[72.38243103 344.94918823]
[72.84893036 329.95645142]
[65.51119232 316.99472046]
[73.67393494 303.44183350]
[74.14042664 288.44909668]
[74.60692596 273.45635986]
[75.07342529 258.46362305]
[67.73568726 245.50186157]
[75.89842224 231.94900513]
[76.36492157 216.95625305]
[76.83142090 201.96351624]
[77.29792023 186.97076416]
[77.76441956 171.97802734]
[78.23091888 156.98527527]
[66.98665619 166.91336060]
[52.07881546 168.57351685]
[38.92590332 161.36235046]
[32.30858612 147.90087891]
[34.63204956 133.08192444]
[45.05178452 122.29169464]
[59.78055573 119.45209503]
[73.46492004 125.59522247]
[81.13106537 138.48829651]
[85.27559662 124.07222748]
[89.42012024 109.65616608]
[86.23367310 96.04226685]
[96.16381836 86.19931030]
[100.30834198 71.78324127]
[104.45286560 57.36717987]
[108.59739685 42.95111465]
[112.51721954 28.47233963]
[116.21140289 13.93435574]
[112.11111450 -1.34629154]
[122.74455261 -11.77601719]
[126.43874359 -26.31400108]
[122.33844757 -41.59465027]
[132.97189331 -52.02437592]
[136.66607666 -66.56236267]
[132.56578064 -81.84300995]
[143.19921875 -92.27272797]
[146.89340210 -106.81071472]
[150.58758545 -121.34870148]
[154.28176880 -135.88668823]
[157.97595215 -150.42466736]
[147.95210266 -162.26959229]
[146.83848572 -177.74664307]
[155.06330872 -190.90461731]
[169.46395874 -196.68397522]
[184.50308228 -192.86244202]
[194.39785767 -180.90948486]
[195.34350586 -165.42124939]
[186.97644043 -152.35328674]
[172.51394653 -146.73048401]
[168.81976318 -132.19250488]
[165.12557983 -117.65451813]
[161.43139648 -103.11653137]
[157.73721313 -88.57854462]
[162.10173035 -74.33775330]
[151.20405579 -62.86817551]
[147.50987244 -48.33019257]
[151.87440491 -34.08939743]
[140.97673035 -22.61981773]
[137.28254700 -8.08183289]
[141.64706421 6.15895987]
[130.74938965 17.62854004]
[127.05520630 32.16652298]
[128.48391724 39.55464172]
[123.01345825 47.09564209]
[118.86893463 61.51170731]
[114.72440338 75.92777252]
[110.57987976 90.34383392]
[113.76632690 103.95773315]
[103.83618164 113.80068970]
[99.69165802 128.21675110]
[95.54713440 142.63281250]
[93.22365570 157.45178223]
[92.75716400 172.44451904]
[92.29066467 187.43727112]
[91.82416534 202.43000793]
[91.35766602 217.42276001]
[90.89116669 232.41549683]
[98.19554138 246.44963074]
[90.06616974 258.93011475]
[89.59967041 273.92285156]
[89.13317108 288.91558838]
[88.66667938 303.90835571]
[95.97104645 317.94247437]
[87.84167480 330.42294312]
[87.37517548 345.41571045]
[86.90868378 360.40844727]
[86.44218445 375.40118408]
[85.97568512 390.39392090]
[85.50918579 405.38668823]
[85.04268646 420.37942505]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 100]
[3 99]
[4 98]
[5 97]
[6 96]
[7 95]
[8 94]
[10 92]
[11 91]
[12 90]
[13 89]
[15 87]
[16 86]
[17 85]
[18 84]
[19 83]
[20 82]
[29 81]
[30 80]
[31 79]
[33 77]
[34 76]
[35 75]
[36 74]
[37 72]
[38 71]
[40 69]
[41 68]
[43 66]
[44 65]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
