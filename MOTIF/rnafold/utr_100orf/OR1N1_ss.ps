%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:50:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAAACCAAUCCAGCAUUUCUGAAUUUUUCCUCCGAGGAAUAUCAGCGCCUCCAGAGCAACAGCAGUCCCUCUUCGGAAUUUUCCUGUGUAUGUAUC\
) } def
/len { sequence length } bind def

/coor [
[105.06789398 223.25054932]
[112.63870239 210.09579468]
[124.45276642 200.56730652]
[119.86190796 186.28710938]
[115.27104950 172.00691223]
[110.68019104 157.72671509]
[106.08933258 143.44651794]
[101.49846649 129.16632080]
[95.23228455 128.81298828]
[89.18627930 127.12900543]
[83.63968658 124.19213867]
[78.84864807 120.13801575]
[75.03443146 115.15387726]
[72.37318420 109.46988678]
[70.98781586 103.34855652]
[70.94230652 97.07257843]
[72.23874664 90.93180084]
[59.65445328 82.76873779]
[50.47689056 86.04473877]
[40.97469330 84.64068604]
[33.36102676 79.01598358]
[29.34680176 70.59741974]
[29.75694275 61.41930389]
[17.98802948 52.11915970]
[6.21911526 42.81901932]
[-5.54979849 33.51887512]
[-17.46192360 24.40288353]
[-29.51437759 15.47325134]
[-41.56683350 6.54361820]
[-53.61928558 -2.38601470]
[-65.67173767 -11.31564713]
[-77.72419739 -20.24528122]
[-89.77664948 -29.17491341]
[-106.12196350 -30.50261879]
[-112.89932251 -45.43578339]
[-103.13676453 -58.61244965]
[-86.87717438 -56.47758865]
[-80.84701538 -41.22736740]
[-68.79456329 -32.29773331]
[-56.74210739 -23.36810112]
[-44.68965149 -14.43846893]
[-32.63719940 -5.50883579]
[-20.58474541 3.42079711]
[-8.53229046 12.35042953]
[-1.15401077 13.82910728]
[3.75034475 21.74995995]
[15.51925850 31.05010414]
[27.28817177 40.35024643]
[39.05708694 49.65039062]
[59.57617569 50.53445816]
[67.81751251 70.18444824]
[80.40180969 78.34751129]
[100.90826416 70.80934143]
[120.90641022 79.60780334]
[133.97384644 72.24289703]
[147.04129028 64.87798309]
[159.87336731 57.11024094]
[172.45765686 48.94717789]
[185.04196167 40.78411484]
[197.62625122 32.62105179]
[201.03755188 17.42234230]
[213.91610718 9.32310390]
[228.38471985 12.66892624]
[240.96900940 4.50586319]
[247.93560791 -10.33996582]
[264.29647827 -11.45984173]
[273.22094727 2.29826927]
[265.52832031 16.78120041]
[249.13208008 17.09015465]
[236.54779053 25.25321770]
[233.70431519 39.82889175]
[221.05833435 48.28666687]
[205.78930664 45.20534134]
[193.20501709 53.36840439]
[180.62072754 61.53146744]
[168.03643799 69.69453430]
[166.16215515 74.26375580]
[161.29916382 77.61950684]
[154.40620422 77.94542694]
[141.33876038 85.31034088]
[128.27131653 92.67524719]
[127.19386292 110.64956665]
[115.77866364 124.57546234]
[120.36952209 138.85565186]
[124.96038055 153.13584900]
[129.55123901 167.41604614]
[134.14210510 181.69624329]
[138.73295593 195.97644043]
[153.88639832 196.83531189]
[167.70468140 203.11380005]
[178.31901550 213.96278381]
[184.29386902 227.91505432]
[184.82121277 243.08364868]
[179.82971191 257.41714478]
[169.99444580 268.97708130]
[156.64555359 276.20004272]
[141.58833313 278.10919189]
[126.85918427 274.44635010]
[114.45008850 265.70684814]
[106.03926849 253.07267761]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 88]
[4 87]
[5 86]
[6 85]
[7 84]
[8 83]
[17 52]
[18 51]
[23 49]
[24 48]
[25 47]
[26 46]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
[33 38]
[54 81]
[55 80]
[56 79]
[57 76]
[58 75]
[59 74]
[60 73]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
