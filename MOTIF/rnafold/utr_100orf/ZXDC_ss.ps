%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGCGGGCAGCUCUGCGUCCGAAGCUGCUCCGACGCCGUCGCUGGGACCAAGAUGGACCUCCCGGCGCUGCUCCCCGCCCCGACUGCGCGCGGAGGGCAACAUGGCGGCGGCCCCGGCCCGCUCCGCCGAGCCCCAGCGCCGCUCGGCGCGA\
) } def
/len { sequence length } bind def

/coor [
[87.62539673 129.64889526]
[72.32487488 118.96244812]
[61.24576569 129.07449341]
[50.16665649 139.18652344]
[39.08754730 149.29856873]
[28.11148643 159.52236938]
[17.23959351 169.85687256]
[6.36770201 180.19137573]
[-4.39890194 190.63552856]
[-15.05911160 201.18824768]
[-25.71932220 211.74096680]
[-36.37953186 222.29368591]
[-47.03974152 232.84640503]
[-57.69995117 243.39912415]
[-62.06416321 258.60650635]
[-76.55249023 262.06158447]
[-87.21269989 272.61428833]
[-91.01303864 288.56701660]
[-106.80383301 292.99227905]
[-118.34088135 281.33770752]
[-113.75584412 265.59255981]
[-97.76542664 261.95410156]
[-87.10521698 251.40136719]
[-83.50349426 236.94879150]
[-68.25267029 232.73892212]
[-57.59246063 222.18620300]
[-46.93225098 211.63348389]
[-36.27204132 201.08074951]
[-25.61183357 190.52803040]
[-14.95162296 179.97531128]
[-12.39549446 172.99349976]
[-3.96680188 169.31948853]
[6.90508986 158.98498535]
[17.77698135 148.65048218]
[20.47408485 141.72189331]
[28.97550774 138.21946716]
[40.05461502 128.10742188]
[51.13372421 117.99538422]
[62.21282959 107.88333893]
[62.06082153 92.88410950]
[50.77904892 82.99868774]
[39.29924774 73.34394073]
[27.62612915 63.92383575]
[15.95301247 54.50373459]
[4.27989531 45.08362961]
[-7.39322138 35.66352844]
[-19.06633759 26.24342346]
[-30.73945427 16.82332039]
[-42.41257095 7.40321732]
[-54.36664581 -1.65769506]
[-66.59062958 -10.35104275]
[-78.81460571 -19.04438972]
[-95.22661591 -23.29670525]
[-95.68378448 -40.24448776]
[-79.52487946 -45.37540054]
[-70.12126160 -31.26837158]
[-57.89727783 -22.57502365]
[-45.67329788 -13.88167572]
[-42.10064316 -14.13395023]
[-38.23037338 -12.63082504]
[-34.90628815 -9.25286865]
[-32.99246979 -4.26989937]
[-21.31935120 5.15020370]
[-9.64623547 14.57030678]
[2.02688169 23.99040985]
[13.69999886 33.41051102]
[25.37311554 42.83061600]
[37.04623413 52.25072098]
[48.71934891 61.67082214]
[53.53366470 62.05287552]
[58.14319229 65.50220490]
[60.66447449 71.71691132]
[71.94624329 81.60234070]
[83.37191010 72.17858124]
[97.28067780 68.84312439]
[110.74650574 71.84219360]
[121.13038635 80.13436127]
[126.59721375 91.68766022]
[141.59028625 91.23169708]
[156.58335876 90.77572632]
[170.14195251 82.62250519]
[183.09854126 89.96935272]
[198.09159851 89.51338196]
[213.08467102 89.05741119]
[228.07774353 88.60144806]
[241.63633728 80.44822693]
[254.59292603 87.79507446]
[269.58599854 87.33910370]
[278.12673950 83.93371582]
[284.88687134 87.02893829]
[299.88610840 86.87693024]
[314.88534546 86.72491455]
[329.88455200 86.57290649]
[338.16845703 75.90801239]
[350.90203857 72.03615570]
[363.35040283 76.16199493]
[371.01925659 86.55899811]
[386.01849365 86.71100616]
[401.01773071 86.86302185]
[416.01693726 87.01502991]
[421.87884521 79.49647522]
[430.43206787 75.60830688]
[439.67523193 76.11973572]
[447.50979614 80.78647614]
[452.21636963 88.43541718]
[467.17864990 89.49861908]
[482.14093018 90.56181335]
[497.10321045 91.62500763]
[512.06549072 92.68820190]
[527.02777100 93.75139618]
[535.86920166 91.22753906]
[542.28149414 94.99079132]
[557.21911621 96.35700226]
[572.15679932 97.72322083]
[582.28131104 85.96424103]
[597.39166260 82.43484497]
[611.67761230 88.49215698]
[619.64593506 101.80702209]
[618.23266602 117.25960541]
[607.98114014 128.90806580]
[592.83337402 132.27333069]
[578.61401367 126.06139374]
[570.79058838 112.66087341]
[555.85290527 111.29465485]
[540.91528320 109.92843628]
[525.96453857 108.71366882]
[511.00228882 107.65047455]
[496.04000854 106.58728027]
[481.07772827 105.52408600]
[466.11544800 104.46089172]
[451.15316772 103.39768982]
[433.52954102 114.07778931]
[415.86492920 102.01425934]
[400.86572266 101.86225128]
[385.86648560 101.71023560]
[370.86724854 101.55822754]
[359.40020752 113.82419586]
[342.27322388 114.03409576]
[330.03656006 101.57213593]
[315.03735352 101.72414398]
[300.03811646 101.87615967]
[285.03887939 102.02816772]
[270.04196167 102.33216858]
[255.04888916 102.78813934]
[242.56269836 110.90874481]
[228.53370667 103.59451294]
[213.54063416 104.05048370]
[198.54757690 104.50644684]
[183.55450439 104.96241760]
[171.06831360 113.08302307]
[157.03932190 105.76879120]
[142.04624939 106.22476196]
[127.05318451 106.68073273]
[120.04830170 121.34860992]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 39]
[3 38]
[4 37]
[5 36]
[6 34]
[7 33]
[8 32]
[9 30]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[16 23]
[17 22]
[40 73]
[41 72]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 58]
[51 57]
[52 56]
[78 153]
[79 152]
[80 151]
[82 149]
[83 148]
[84 147]
[85 146]
[87 144]
[88 143]
[90 142]
[91 141]
[92 140]
[93 139]
[97 136]
[98 135]
[99 134]
[100 133]
[105 131]
[106 130]
[107 129]
[108 128]
[109 127]
[110 126]
[112 125]
[113 124]
[114 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
