%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:23:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGGAGGCGGAUGGGCGCGGCUCCCUCCCCCACUCAGGCCUCUUCACGGGGCGGGGGGCCGGGUCCCCCAGCCCCCACCCGCGCCGUGUCCAGCUCCUCGCGUGCUCGCG\
) } def
/len { sequence length } bind def

/coor [
[142.05622864 386.83486938]
[138.94654846 377.95657349]
[140.37799072 368.51837158]
[146.14582825 360.73794556]
[141.99330139 346.32418823]
[137.84075928 331.91043091]
[133.68823242 317.49667358]
[120.56848907 310.53909302]
[116.15190125 295.98062134]
[123.53862762 282.26663208]
[119.38609314 267.85287476]
[115.23355865 253.43910217]
[111.08102417 239.02534485]
[97.80706024 227.64074707]
[102.19678497 209.82635498]
[97.64163208 195.53471375]
[93.08648682 181.24308777]
[88.53133392 166.95146179]
[83.97618103 152.65983582]
[79.42102814 138.36820984]
[74.86588287 124.07658386]
[75.32836914 139.06945801]
[71.02126312 153.43777466]
[62.38750076 165.70391846]
[50.31498718 174.60641479]
[36.04526138 179.22972107]
[21.04583740 179.09837341]
[6.85926151 174.22589111]
[-5.05550814 165.11335754]
[-13.47315025 152.69792175]
[-17.52798843 138.25636292]
[-16.80302048 123.27390289]
[-11.37280178 109.29131317]
[-1.79578197 97.74658966]
[10.94313431 89.82698822]
[25.53386879 86.34697723]
[40.47589874 87.66443634]
[54.23258209 93.64388275]
[65.38875580 103.66986847]
[57.40827560 90.96900177]
[49.42779541 78.26814270]
[41.44731522 65.56727600]
[33.46683121 52.86641693]
[18.20891571 47.90904617]
[12.70671272 32.83903503]
[21.18104362 19.21679878]
[37.13112640 17.49215698]
[48.32142258 28.98810387]
[46.16769791 44.88593674]
[54.14817810 57.58679962]
[62.12865829 70.28765869]
[70.10913849 82.98852539]
[78.08962250 95.68938446]
[88.23503876 83.58790588]
[102.38818359 82.10233307]
[110.36866760 69.40146637]
[118.34914398 56.70060730]
[126.32962799 43.99974442]
[134.31010437 31.29887962]
[142.29058838 18.59801674]
[143.08135986 2.79658508]
[156.40403748 -3.86341214]
[164.38452148 -16.56427574]
[172.36500549 -29.26513863]
[175.67234802 -45.89336014]
[192.56629944 -47.31842041]
[198.61238098 -31.47918701]
[185.06587219 -21.28465652]
[177.08538818 -8.58379364]
[169.10490417 4.11706924]
[168.88494873 19.01004982]
[154.99145508 26.57849884]
[147.01097107 39.27936172]
[139.03048706 51.98022461]
[131.05000305 64.68108368]
[123.06952667 77.38195038]
[115.08905029 90.08280945]
[118.58210754 105.84930420]
[107.74311829 119.41885376]
[89.15750885 119.52143860]
[93.71265411 133.81306458]
[98.26780701 148.10469055]
[102.82295990 162.39631653]
[107.37811279 176.68794250]
[111.93326569 190.97956848]
[116.48841095 205.27119446]
[127.63912201 211.93855286]
[131.08854675 224.04598999]
[125.49478912 234.87280273]
[129.64732361 249.28656006]
[133.79985046 263.70031738]
[137.95239258 278.11407471]
[151.50318909 285.79611206]
[155.50912476 300.47286987]
[148.10198975 313.34414673]
[152.25451660 327.75790405]
[156.40705872 342.17166138]
[160.55958557 356.58541870]
[176.94862366 370.24057007]
[171.69822693 390.11712646]
[177.04754639 404.13085938]
[182.39686584 418.14462280]
[187.74618530 432.15835571]
[200.80577087 442.07696533]
[198.47761536 458.31002808]
[183.15673828 464.15832520]
[170.60392761 453.60562134]
[173.73245239 437.50765991]
[168.38313293 423.49392700]
[163.03381348 409.48019409]
[157.68447876 395.46646118]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 98]
[5 97]
[6 96]
[7 95]
[10 92]
[11 91]
[12 90]
[13 89]
[15 86]
[16 85]
[17 84]
[18 83]
[19 82]
[20 81]
[21 80]
[39 53]
[40 52]
[41 51]
[42 50]
[43 49]
[55 77]
[56 76]
[57 75]
[58 74]
[59 73]
[60 72]
[62 70]
[63 69]
[64 68]
[100 111]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
