%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:50:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGGAGAUGGCGGCAGGGUCGGGUGGGAGUGGGGGCUCUGGGGGAGGCCCUGGACCGGGGCCGGGCGGGGGUGGGGGCCCCAGCGGGAGCGGCUCAGGACCGGGGU\
) } def
/len { sequence length } bind def

/coor [
[113.66127014 133.22706604]
[92.97064209 135.23146057]
[87.02944946 149.00469971]
[94.20879364 162.89682007]
[90.72840118 178.14218140]
[78.23159027 187.54237366]
[62.61898422 186.65893555]
[51.26237106 175.90899658]
[49.52399826 160.36833191]
[58.22467422 147.37478638]
[73.25620270 143.06350708]
[79.19740295 129.29026794]
[72.20575714 122.76286316]
[67.18433380 114.62188721]
[64.48907471 105.44443512]
[49.51445007 104.57226562]
[34.53982925 103.70008850]
[19.56520653 102.82791901]
[4.59058380 101.95574188]
[-10.38403797 101.08357239]
[-25.35866165 100.21140289]
[-32.31375122 113.75933838]
[-44.18205643 123.30204010]
[-58.90731812 127.18618774]
[-73.93829346 124.73881531]
[-86.67078400 116.38395691]
[-94.89879608 103.56913757]
[-97.19678497 88.51459503]
[-93.16661072 73.82862854]
[-83.50651550 62.05567169]
[-69.89018250 55.23545456]
[-54.67671967 54.54962158]
[-40.50194931 60.11700439]
[-29.82173347 70.97300720]
[-24.48648834 85.23677826]
[-9.51186562 86.10894775]
[5.46275663 86.98112488]
[20.43737793 87.85329437]
[35.41200256 88.72546387]
[50.38662338 89.59764099]
[65.36124420 90.46981049]
[70.75650024 79.13170624]
[79.72399139 70.34277344]
[91.16829681 65.17660522]
[103.69143677 64.26428986]
[115.76364899 67.71726227]
[125.91025543 75.11373138]
[132.89179993 85.55017853]
[147.58190918 82.51691437]
[162.27201843 79.48365021]
[176.96212769 76.45038605]
[191.65223694 73.41712189]
[206.34234619 70.38385773]
[221.03245544 67.35059357]
[232.98291016 56.98250580]
[247.01185608 61.98627853]
[261.70196533 58.95301437]
[273.65240479 48.58492661]
[287.68136597 53.58869934]
[302.37149048 50.55543518]
[317.06158447 47.52217484]
[331.75170898 44.48891068]
[346.44180298 41.45564651]
[361.13192749 38.42238235]
[376.41094971 22.14613342]
[396.90090942 28.92734718]
[411.13955688 24.20917511]
[421.80554199 12.52382755]
[436.32052612 15.86510658]
[450.55917358 11.14693546]
[464.79782104 6.42876387]
[479.03643799 1.71059239]
[493.27508545 -3.00757885]
[503.76702881 -15.61119461]
[519.87994385 -12.56043911]
[525.03820801 3.00633097]
[513.93542480 15.07535744]
[497.99325562 11.23106098]
[483.75460815 15.94923210]
[469.51599121 20.66740417]
[455.27734375 25.38557434]
[441.03869629 30.10374641]
[431.39117432 41.45161819]
[415.85772705 38.44781494]
[401.61907959 43.16598511]
[399.57278442 51.12562561]
[394.41470337 57.64563370]
[386.97109985 61.55722427]
[378.48577881 62.11965179]
[370.41232300 59.15924835]
[364.16519165 53.11249161]
[349.47506714 56.14575577]
[334.78497314 59.17901993]
[320.09484863 62.21228409]
[305.40475464 65.24554443]
[290.71463013 68.27880859]
[279.81491089 78.42993927]
[264.73522949 73.64312744]
[250.04512024 76.67639160]
[239.14540100 86.82752228]
[224.06571960 82.04070282]
[209.37561035 85.07396698]
[194.68550110 88.10723114]
[179.99539185 91.14049530]
[165.30528259 94.17375946]
[150.61517334 97.20702362]
[135.92506409 100.24028778]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 12]
[3 11]
[15 41]
[16 40]
[17 39]
[18 38]
[19 37]
[20 36]
[21 35]
[48 107]
[49 106]
[50 105]
[51 104]
[52 103]
[53 102]
[54 101]
[56 99]
[57 98]
[59 96]
[60 95]
[61 94]
[62 93]
[63 92]
[64 91]
[66 85]
[67 84]
[69 82]
[70 81]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
