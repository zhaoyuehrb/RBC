%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCCGUACUAAGCAGACUGCCCGCAAGUCGACCGGCGGCAAGGCCCCGAGGAAGCAGCUGGCUACCAAAGCGGCCCGCAAGAGCGCGCCGGCCACGG\
) } def
/len { sequence length } bind def

/coor [
[80.02334595 233.76786804]
[89.51959229 220.83724976]
[88.58705139 205.86625671]
[87.65450287 190.89527893]
[86.72196198 175.92430115]
[85.78941345 160.95330811]
[79.43032837 174.53866577]
[79.43321991 189.53866577]
[72.04768372 202.59446716]
[59.18965912 210.31918335]
[44.19472504 210.70889282]
[30.95280647 203.66250610]
[22.89907646 191.00796509]
[22.12280464 176.02806091]
[28.82536507 162.60884094]
[41.26800919 154.23144531]
[56.22279358 153.06910706]
[69.27310181 145.67387390]
[54.27491379 145.90715027]
[39.27672958 146.14042664]
[24.27854156 146.37370300]
[14.55546284 158.62097168]
[-0.77551514 161.70239258]
[-14.47557259 154.16300964]
[-20.07596207 139.56266785]
[-14.93235016 124.79523468]
[-1.47339344 116.83341980]
[13.94600010 119.43655396]
[24.04526520 131.37551880]
[39.04344940 131.14224243]
[54.04163742 130.90896606]
[69.03982544 130.67568970]
[61.14923859 114.43305969]
[60.78801346 97.27490234]
[67.28390503 82.36138153]
[78.76593781 72.13995361]
[72.43840790 58.53986359]
[66.11088562 44.93977737]
[59.53836441 38.33715439]
[59.80542374 30.81690598]
[53.90391922 17.02660942]
[48.00241852 3.23631406]
[36.21205139 -8.94660759]
[44.65496063 -23.64877129]
[61.11978531 -19.60577774]
[61.79271317 -2.66518998]
[67.69421387 11.12510586]
[73.59571838 24.91540146]
[79.71097565 38.61225128]
[86.03849792 52.21233749]
[92.36602783 65.81243134]
[103.80603027 65.17785645]
[114.83885956 68.26869202]
[123.95484924 56.35656738]
[126.19715118 40.69506454]
[140.07644653 35.29001617]
[149.19242859 23.37789345]
[158.30842590 11.46576881]
[157.62760925 -4.56283236]
[169.82884216 -14.97962189]
[185.55238342 -11.79373074]
[192.73646545 2.55089784]
[185.87010193 17.05029297]
[170.22055054 20.58175850]
[161.10455322 32.49388504]
[151.98857117 44.40600967]
[150.39830017 59.21547699]
[135.86697388 65.47255707]
[126.75098419 77.38468170]
[133.52330017 85.67622375]
[137.66915894 96.00046539]
[138.58248901 107.50985718]
[135.93440247 119.17899323]
[129.72413635 129.89591980]
[120.29964447 138.56753540]
[133.58981323 145.52249146]
[146.87998962 152.47744751]
[162.69459534 152.02073669]
[170.38360596 164.77725220]
[183.67376709 171.73220825]
[196.96394348 178.68714905]
[213.31764221 177.46697998]
[222.32630920 191.17010498]
[214.72262573 205.69993591]
[198.32859802 206.10942078]
[190.00898743 191.97732544]
[176.71882629 185.02236938]
[163.42864990 178.06741333]
[148.56463623 179.02157593]
[139.92503357 165.76760864]
[126.63486481 158.81265259]
[113.34469604 151.85771179]
[100.76039886 160.02076721]
[101.69294739 174.99174500]
[102.62548828 189.96273804]
[103.55803680 204.93371582]
[104.49057770 219.90470886]
[115.51808929 231.55688477]
[113.14099121 247.42286682]
[99.18278503 255.33158875]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 97]
[3 96]
[4 95]
[5 94]
[6 93]
[18 32]
[19 31]
[20 30]
[21 29]
[36 51]
[37 50]
[38 49]
[40 48]
[41 47]
[42 46]
[53 69]
[54 68]
[56 66]
[57 65]
[58 64]
[75 92]
[76 91]
[77 90]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
