%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:23:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCACAGACUCCCUUUUCUUUGGCAAGAUGGCGGAGUACGACUUGACUACUCGCAUCGCGCACUUUUUGGAUCGGCAUCUAGUCUUUCCGCUUCUUGAAUUUCUCUCUGUAAAGGAGAUAUAUAAUG\
) } def
/len { sequence length } bind def

/coor [
[100.42030334 122.80710602]
[95.75032043 137.06163025]
[91.08033752 151.31614685]
[98.44371033 165.30027771]
[93.68238831 180.37030029]
[79.62117767 187.58541870]
[64.60234833 182.66502380]
[57.53629684 168.52832031]
[62.61519241 153.56234741]
[76.82582092 146.64616394]
[81.49580383 132.39164734]
[86.16578674 118.13712311]
[73.86106873 109.55843353]
[62.10113144 118.86991882]
[62.87789154 134.36753845]
[54.36885834 147.34352112]
[39.84592819 152.80831909]
[24.89346123 148.66062927]
[15.26098919 136.49530029]
[14.65239239 120.99016571]
[23.30168915 108.10726166]
[37.88304901 102.80032349]
[52.78963852 107.10998535]
[64.54957581 97.79849243]
[70.07823944 83.85453796]
[67.89421844 69.01438904]
[65.71020508 54.17423630]
[63.52618790 39.33408356]
[61.34217072 24.49393463]
[56.95584488 16.36094093]
[59.29022980 9.26626968]
[57.46823502 -5.62266350]
[55.64623642 -20.51159668]
[53.82423782 -35.40052795]
[52.00224304 -50.28946304]
[50.18024445 -65.17839813]
[48.35824966 -80.06732941]
[39.31604767 -86.34387970]
[35.35724258 -96.37734985]
[37.58476639 -106.70520782]
[45.01042175 -113.90712738]
[43.91548920 -128.86711121]
[42.82056046 -143.82710266]
[41.72563171 -158.78707886]
[33.00162506 -171.98565674]
[39.78925323 -185.24375916]
[38.69432068 -200.20375061]
[28.25545883 -206.14579773]
[22.08614731 -216.31124878]
[21.64340210 -228.07344055]
[26.92187881 -238.45898438]
[36.48472214 -244.89949036]
[36.11945724 -259.89505005]
[35.75419235 -274.89059448]
[32.38822937 -283.49615479]
[35.56709671 -290.25476074]
[35.56709671 -305.25476074]
[35.56709671 -320.25476074]
[21.79322815 -326.83071899]
[12.24330139 -338.73709106]
[8.81346226 -353.60983276]
[12.18470669 -368.49600220]
[21.68767166 -380.43988037]
[35.43553925 -387.07003784]
[50.69865417 -387.07003784]
[64.44651794 -380.43988037]
[73.94948578 -368.49600220]
[77.32073212 -353.60983276]
[73.89089203 -338.73709106]
[64.34096527 -326.83071899]
[50.56709671 -320.25476074]
[50.56709671 -305.25476074]
[50.56709671 -290.25476074]
[50.74974442 -275.25585938]
[51.11500931 -260.26031494]
[51.48027420 -245.26475525]
[65.45913696 -233.56237793]
[66.56871033 -215.04846191]
[53.65430832 -201.29867554]
[54.74923706 -186.33868408]
[63.39492798 -174.21015930]
[56.68561554 -159.88201904]
[57.78054428 -144.92202759]
[58.87547302 -129.96205139]
[59.97040558 -115.00205994]
[72.02413940 -99.96054840]
[63.24718094 -81.88932800]
[65.06917572 -67.00038910]
[66.89117432 -52.11145782]
[68.71317291 -37.22252655]
[70.53517151 -22.33359337]
[72.35717010 -7.44466019]
[74.17916107 7.44427252]
[76.18231964 22.30991745]
[78.36634064 37.15006638]
[80.55035400 51.99021912]
[82.73437500 66.83036804]
[84.91838837 81.67051697]
[94.12157440 73.87164307]
[107.26053619 71.07083893]
[121.50357819 75.13808441]
[133.21221924 86.32820892]
[138.84652710 102.98487091]
[150.37623596 112.57996368]
[161.90594482 122.17506409]
[173.43565369 131.77015686]
[182.12976074 134.90031433]
[185.12557983 141.74200439]
[196.41821289 151.61500549]
[212.60310364 154.25726318]
[218.15342712 169.68859863]
[207.35949707 182.03456116]
[191.32518005 178.59471130]
[186.54521179 162.90765381]
[175.25256348 153.03463745]
[163.84054565 143.29986572]
[152.31083679 133.70477295]
[140.78114319 124.10967255]
[129.25143433 114.51457977]
[122.04364777 116.58770752]
[127.56178284 130.53582764]
[133.07992554 144.48396301]
[142.25024414 156.35430908]
[137.58215332 170.60945129]
[123.16674042 174.75624084]
[111.63759613 165.16047668]
[113.09944916 150.23081970]
[110.36376953 135.48240662]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[13 24]
[14 23]
[25 98]
[26 97]
[27 96]
[28 95]
[29 94]
[31 93]
[32 92]
[33 91]
[34 90]
[35 89]
[36 88]
[37 87]
[41 85]
[42 84]
[43 83]
[44 82]
[46 80]
[47 79]
[52 76]
[53 75]
[54 74]
[56 73]
[57 72]
[58 71]
[103 119]
[104 118]
[105 117]
[106 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
