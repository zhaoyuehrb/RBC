%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUGCCCCAGAAGAAAAGGCGGAGGAAGAAGGACAUCGACUUCCUGGCCCUGUACGAAGCGGAGCUGCUGAACUACGCCUCGGAGGACGACGAGGGGG\
) } def
/len { sequence length } bind def

/coor [
[100.42145538 180.57125854]
[92.60982513 193.97863770]
[78.39588165 200.20306396]
[63.24517441 196.85108948]
[52.98345947 185.21163940]
[51.55657578 169.76031494]
[59.51318741 156.43846130]
[73.79381561 150.36859131]
[77.03408813 135.72274780]
[80.27435303 121.07691193]
[75.40518951 135.26463318]
[63.88449860 144.87054443]
[49.05254364 147.10954285]
[35.20965958 141.33247375]
[26.36940384 129.21430969]
[25.09489441 114.26856232]
[31.75565529 100.82853699]
[44.42049026 92.79100037]
[59.41739655 92.48632812]
[72.39650726 100.00110626]
[60.34405518 91.07147217]
[48.29159927 82.14183807]
[35.32525253 83.25119781]
[25.44174385 75.41915131]
[23.67616463 63.34021759]
[11.90725040 54.04007721]
[0.13833675 44.73993301]
[-11.63057709 35.43978882]
[-23.39949036 26.13964653]
[-35.16840363 16.83950233]
[-50.65811920 18.48466301]
[-62.46098709 8.88534260]
[-63.93393707 -5.89187002]
[-75.70285034 -15.19201279]
[-91.87892914 -20.26850319]
[-91.47882080 -37.21772766]
[-75.08121490 -41.52526474]
[-66.40270996 -26.96092796]
[-54.63379288 -17.66078377]
[-39.91635895 -19.64387321]
[-27.84852028 -10.37985897]
[-25.86826134 5.07058859]
[-14.09934807 14.37073231]
[-2.33043408 23.67087555]
[9.43848038 32.97101974]
[21.20739365 42.27116013]
[32.97630692 51.57130432]
[50.38387299 53.08063889]
[57.22123337 70.08938599]
[69.27368927 79.01902008]
[81.32614136 87.94865417]
[95.98764038 78.34960175]
[112.87222290 82.38977814]
[125.19655609 73.83929443]
[137.52088928 65.28881073]
[149.84523010 56.73832321]
[149.94659424 39.90930939]
[159.90740967 26.54968262]
[175.69160461 21.74527931]
[191.09512329 27.17994690]
[203.14758301 18.25031471]
[215.20002747 9.32068157]
[227.25248718 0.39104888]
[233.28263855 -14.85917282]
[249.54223633 -16.99403191]
[259.30477905 -3.81736612]
[252.52743530 11.11579895]
[236.18211365 12.44350338]
[224.12966919 21.37313652]
[212.07720947 30.30276871]
[200.02474976 39.23240280]
[201.37722778 52.61251450]
[195.85624695 64.99453735]
[184.82350159 73.05907440]
[171.13356018 74.58554077]
[158.39570618 69.06266022]
[146.07138062 77.61314392]
[133.74703979 86.16362762]
[121.42270660 94.71411133]
[120.02501678 109.64884949]
[130.54882812 120.33760834]
[141.07261658 131.02636719]
[151.59642029 141.71513367]
[162.12022400 152.40388489]
[177.44406128 149.96266174]
[191.26094055 157.02478027]
[198.25799561 170.87472534]
[195.74468994 186.18690491]
[184.68746948 197.07348633]
[169.33805847 199.34834290]
[155.59860229 192.13674927]
[148.75221252 178.21171570]
[151.43147278 162.92768860]
[140.90766907 152.23893738]
[130.38386536 141.55017090]
[119.86006165 130.86141968]
[109.33625793 120.17265320]
[94.92019653 124.31717682]
[91.67992401 138.96302795]
[88.43965912 153.60885620]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 100]
[9 99]
[10 98]
[20 51]
[21 50]
[22 49]
[25 47]
[26 46]
[27 45]
[28 44]
[29 43]
[30 42]
[33 39]
[34 38]
[53 79]
[54 78]
[55 77]
[56 76]
[60 71]
[61 70]
[62 69]
[63 68]
[80 97]
[81 96]
[82 95]
[83 94]
[84 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
