%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:51:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUUACUCUUGCAUUUGGCAAUUAAAGAUGAUGUUUCCAUGGAAACAGUUGAUCCUGCUUUCAUUCAUUGGCUGCUUAGGAGGUGAGCUUCUCUUACAAGGCCCUGUAUUUAUCAAAGAACCCAGCA\
) } def
/len { sequence length } bind def

/coor [
[109.93099213 162.56814575]
[106.46746826 177.16279602]
[94.42213440 186.10203552]
[79.44994354 185.18911743]
[68.57992554 174.85263062]
[66.91526794 159.94529724]
[75.23693848 147.46606445]
[79.37232208 133.04737854]
[83.50770569 118.62868500]
[76.02159882 118.17234039]
[65.47977448 128.84332275]
[54.93794632 139.51431274]
[44.39611816 150.18528748]
[43.05555344 166.17222595]
[29.64105797 174.97171021]
[14.44308090 169.83351135]
[9.12021065 154.69923401]
[17.75569725 141.17858887]
[33.72513580 139.64346313]
[44.26696396 128.97247314]
[54.80879211 118.30149841]
[65.35062408 107.63051605]
[52.13956451 114.73459625]
[37.98412704 109.77239227]
[32.10026550 95.97455597]
[38.31869888 82.32424164]
[52.59088516 77.70854950]
[65.62458801 85.13217926]
[55.34573746 74.20765686]
[45.06688309 63.28313828]
[34.78802872 52.35861588]
[24.50917625 41.43409729]
[23.36809158 56.39062881]
[13.02730083 67.25654602]
[-1.85442698 69.13648224]
[-14.57252598 61.18350220]
[-19.39719391 46.98059464]
[-14.15480804 32.92650604]
[-1.20718288 25.35293198]
[13.61224079 27.67181969]
[5.33572483 15.16185284]
[-2.94079137 2.65188527]
[-11.21730709 -9.85808182]
[-19.49382401 -22.36804962]
[-27.77033997 -34.87801743]
[-41.83772278 -42.11813736]
[-42.40732574 -57.00184631]
[-50.68384552 -69.51181793]
[-58.96036148 -82.02178192]
[-74.49480438 -84.92980194]
[-83.35396576 -98.01761627]
[-80.28186798 -113.52044678]
[-67.10112762 -122.24074554]
[-51.63164139 -119.00490570]
[-43.05118561 -105.73270416]
[-46.45039368 -90.29829407]
[-38.17387772 -77.78833008]
[-29.89735985 -65.27836609]
[-16.42197037 -58.93304062]
[-15.26037216 -43.15453339]
[-6.98385620 -30.64456558]
[1.29265988 -18.13459778]
[9.56917572 -5.62463093]
[17.84569168 6.88533640]
[26.12220764 19.39530373]
[35.43369675 31.15524292]
[45.71255112 42.07976532]
[55.99140549 53.00428391]
[66.27025604 63.92880630]
[76.54911041 74.85332489]
[114.74620056 82.72658539]
[128.24938965 76.19483185]
[141.75257874 69.66307831]
[155.25576782 63.13132095]
[158.10931396 47.99317169]
[169.19987488 37.55992508]
[184.13072205 35.68000412]
[197.14967346 42.86642456]
[210.65287781 36.33466721]
[224.15606689 29.80291367]
[237.65925598 23.27115822]
[251.16244507 16.73940277]
[264.66564941 10.20764828]
[278.16882324 3.67589259]
[283.12533569 -11.33105946]
[297.27899170 -18.36307716]
[312.23269653 -13.24818802]
[319.11468506 0.97903454]
[313.84197998 15.87783146]
[299.54281616 22.60901070]
[284.70059204 17.17908478]
[271.19738770 23.71083832]
[257.69421387 30.24259377]
[244.19100952 36.77434921]
[230.68782043 43.30610275]
[217.18463135 49.83786011]
[203.68144226 56.36961365]
[201.23382568 71.03751373]
[190.49142456 81.57624054]
[175.42715454 83.79459381]
[161.78752136 76.63451385]
[148.28433228 83.16626740]
[134.78114319 89.69802094]
[121.27795410 96.22977448]
[117.83846283 110.83011627]
[127.00607300 122.70256042]
[136.17367554 134.57501221]
[151.60095215 136.72837830]
[160.72908020 148.89932251]
[158.58110046 163.59359741]
[167.74870300 175.46604919]
[176.91630554 187.33848572]
[192.62158203 189.10481262]
[202.41246033 201.51103210]
[200.48019409 217.19676208]
[187.97116089 226.85592651]
[172.30674744 224.75791931]
[162.78036499 212.14746094]
[165.04386902 196.50610352]
[155.87626648 184.63365173]
[146.70864868 172.76119995]
[131.94888306 171.12266541]
[122.48249817 159.21290588]
[124.30123138 143.74261475]
[115.13362122 131.87016296]
[105.96601868 119.99771881]
[98.47991180 119.54137421]
[100.83329010 134.35562134]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 22]
[11 21]
[12 20]
[13 19]
[28 70]
[29 69]
[30 68]
[31 67]
[32 66]
[40 65]
[41 64]
[42 63]
[43 62]
[44 61]
[45 60]
[47 58]
[48 57]
[49 56]
[71 104]
[72 103]
[73 102]
[74 101]
[78 97]
[79 96]
[80 95]
[81 94]
[82 93]
[83 92]
[84 91]
[105 126]
[106 125]
[107 124]
[110 121]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
