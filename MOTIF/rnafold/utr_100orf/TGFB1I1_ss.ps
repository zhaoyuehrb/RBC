%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUUCGCCCCGCGCCACCGGCCCGCGCCCCGCCAUGGAGGACCUGGAUGCCCUGCUCUCUGACCUGGAGACUACCACCUCGCACAUGCCAAGGUCAGGGGCUCCCAAAGAGCGCCCUGCGGAGCCUCUCACCC\
) } def
/len { sequence length } bind def

/coor [
[79.26831818 282.76605225]
[70.79959106 270.19400024]
[67.14450073 255.48289490]
[68.74441528 240.40921021]
[75.40613556 226.79313660]
[86.32522583 216.27890015]
[100.18315125 210.13613892]
[99.13681030 195.17266846]
[90.53054810 183.01612854]
[97.28634644 168.70985413]
[96.23999786 153.74638367]
[95.19364929 138.78292847]
[94.14730835 123.81946564]
[80.23954773 118.20037079]
[69.09237671 128.23731995]
[57.94520187 138.27429199]
[50.22022247 153.36604309]
[33.57977295 150.12077332]
[32.09168243 133.23225403]
[47.90824509 127.12711334]
[59.05541611 117.09015656]
[70.20259094 107.05319214]
[63.78433228 93.49568939]
[48.95560455 95.75597382]
[34.21479797 98.53239441]
[19.57986259 101.82157898]
[4.94492769 105.11075592]
[-9.18288326 114.48312378]
[-22.09994316 103.50196838]
[-15.12372875 88.04981995]
[1.65574849 90.47582245]
[16.29068184 87.18664551]
[30.92561722 83.89746094]
[33.13208389 81.03670502]
[36.87560272 79.14436340]
[41.66543579 78.95019531]
[46.69532013 80.92724609]
[61.52404785 78.66696167]
[78.76848602 73.45715332]
[93.26071930 76.98114777]
[101.46598053 86.09654999]
[102.16386414 71.11279297]
[102.86174011 56.12903595]
[103.55962372 41.14527893]
[104.25749969 26.16152382]
[104.78099060 11.17066097]
[105.13002777 -3.82527733]
[105.30455780 -18.82426262]
[105.30455780 -33.82426071]
[105.30455780 -48.82426071]
[102.59214783 -53.49880219]
[102.06233978 -58.26320267]
[103.36897278 -62.24912262]
[105.86458588 -64.86147308]
[106.91093445 -79.82493591]
[107.95728302 -94.78839111]
[107.25940704 -109.77214813]
[104.82673645 -124.57357025]
[102.39406586 -139.37500000]
[99.96139526 -154.17642212]
[97.52872467 -168.97784424]
[85.38581848 -179.46255493]
[86.15606689 -195.48710632]
[99.24861145 -204.75883484]
[114.61996460 -200.16525269]
[120.47854614 -185.23017883]
[112.33015442 -171.41050720]
[114.76281738 -156.60908508]
[117.19548798 -141.80766296]
[119.62815857 -127.00624084]
[122.06082916 -112.20481873]
[129.62161255 -125.15991211]
[142.57008362 -132.73204041]
[157.56822205 -132.96914673]
[170.74957275 -125.81012726]
[178.71611023 -113.10050964]
[179.41410828 -98.11676025]
[172.66362000 -84.72158051]
[160.20486450 -76.36815643]
[145.24964905 -75.20994568]
[131.65332031 -81.54553223]
[122.92074585 -93.74204254]
[121.87439728 -78.77858734]
[120.82804871 -63.81512451]
[120.30455780 -48.82426071]
[120.30455780 -33.82426071]
[120.30455780 -18.82426262]
[123.47937012 -12.07368088]
[120.12596893 -3.47624302]
[119.77693176 11.51969528]
[122.79380035 18.34232330]
[119.24125671 26.85940361]
[118.54338074 41.84315872]
[117.84549713 56.82691574]
[117.14762115 71.81067657]
[116.44973755 86.79443359]
[125.12472534 99.03144836]
[139.49456787 103.33349609]
[153.86441040 107.63554382]
[168.23425293 111.93759155]
[182.65318298 116.07215118]
[197.11923218 120.03866577]
[211.58529663 124.00518036]
[226.05134583 127.97169495]
[240.64704895 121.31248474]
[254.88792419 128.70010376]
[257.84957886 144.46742249]
[247.26011658 156.51908875]
[231.24282837 155.61009216]
[222.08483887 142.43774414]
[207.61877441 138.47123718]
[193.15272522 134.50473022]
[178.68666077 130.53820801]
[171.33685303 131.81492615]
[163.93220520 126.30743408]
[149.56236267 122.00538635]
[135.19252014 117.70333862]
[120.82267761 113.40129089]
[109.11076355 122.77311707]
[110.15711212 137.73658752]
[111.20346069 152.70004272]
[112.24980927 167.66349792]
[120.93090820 180.89033508]
[114.10026550 194.12632751]
[115.14661407 209.08978271]
[129.72459412 213.24412537]
[142.00071716 222.13639832]
[150.49259949 234.69282532]
[154.17478943 249.39714050]
[152.60266113 264.47375488]
[145.96604919 278.10208130]
[135.06634521 288.63641357]
[121.21975708 294.80471802]
[106.09832764 295.86212158]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 125]
[8 124]
[10 122]
[11 121]
[12 120]
[13 119]
[14 22]
[15 21]
[16 20]
[23 38]
[24 37]
[25 33]
[26 32]
[27 31]
[41 96]
[42 95]
[43 94]
[44 93]
[45 92]
[46 90]
[47 89]
[48 87]
[49 86]
[50 85]
[54 84]
[55 83]
[56 82]
[57 71]
[58 70]
[59 69]
[60 68]
[61 67]
[97 118]
[98 117]
[99 116]
[100 115]
[101 113]
[102 112]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
