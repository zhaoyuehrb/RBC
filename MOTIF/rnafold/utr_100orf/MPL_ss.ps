%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:50:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGAAGGGAGGAUGGGCUAAGGCAGGCACACAGUGGCGGAGAAGAUGCCCUCCUGGGCCCUCUUCAUGGUCACCUCCUGCCUCCUCCUGGCCCCUCAAAACCUGGCCCAAGUCAGCAGCCAAGAUGUCUCCUUGCUGGCAUCAG\
) } def
/len { sequence length } bind def

/coor [
[67.64500427 183.64184570]
[70.24968719 164.43597412]
[70.57242584 149.43945312]
[70.89517212 134.44291687]
[71.21791077 119.44638824]
[65.70204926 105.49736786]
[55.21017075 94.77726746]
[44.71829605 84.05716705]
[28.05630875 86.75981903]
[13.20154190 79.09859467]
[5.88959646 64.25334930]
[8.81137753 48.13345337]
[-1.90872324 37.64157867]
[-17.18325806 33.51857376]
[-20.86718178 19.08673668]
[-31.58728218 8.59486103]
[-42.30738449 -1.89701366]
[-53.02748489 -12.38888836]
[-63.74758530 -22.88076401]
[-74.46768188 -33.37263870]
[-85.41104889 -43.63143158]
[-96.57260895 -53.65238953]
[-107.73416901 -63.67334747]
[-116.27643585 -67.11259460]
[-119.02510071 -74.03200531]
[-129.96846008 -84.29079437]
[-140.91183472 -94.54958344]
[-151.85519409 -104.80838013]
[-162.79855347 -115.06716919]
[-177.46670532 -110.73210144]
[-192.23777771 -114.29752350]
[-203.16831970 -124.70854950]
[-207.39184570 -139.09666443]
[-203.87016296 -153.56951904]
[-214.81353760 -163.82830811]
[-225.75689697 -174.08709717]
[-236.70025635 -184.34588623]
[-247.64361572 -194.60467529]
[-262.79721069 -191.83430481]
[-276.51608276 -198.44084167]
[-283.63003540 -211.70188904]
[-281.59561157 -226.43276978]
[-292.53897095 -236.69155884]
[-303.48233032 -246.95036316]
[-314.42572021 -257.20913696]
[-325.36907959 -267.46792603]
[-343.36618042 -271.20294189]
[-347.86529541 -288.13342285]
[-359.02685547 -298.15438843]
[-370.18841553 -308.17535400]
[-381.34997559 -318.19628906]
[-397.49865723 -321.05160522]
[-402.84515381 -336.55471802]
[-391.88946533 -348.75738525]
[-375.90188599 -345.10653687]
[-371.32901001 -329.35784912]
[-360.16744995 -319.33691406]
[-349.00588989 -309.31594849]
[-337.84432983 -299.29498291]
[-325.70681763 -299.62057495]
[-316.31991577 -291.30014038]
[-315.11029053 -278.41131592]
[-304.16693115 -268.15249634]
[-293.22354126 -257.89370728]
[-282.28018188 -247.63493347]
[-271.33682251 -237.37614441]
[-256.76785278 -240.35659790]
[-243.07551575 -234.11288452]
[-235.59776306 -220.84878540]
[-237.38482666 -205.54803467]
[-226.44146729 -195.28924561]
[-215.49810791 -185.03045654]
[-204.55474854 -174.77166748]
[-193.61137390 -164.51287842]
[-179.39585876 -168.96084595]
[-164.76525879 -165.67425537]
[-153.67079163 -155.43807983]
[-149.15994263 -140.92776489]
[-152.53976440 -126.01052856]
[-141.59640503 -115.75173950]
[-130.65303040 -105.49295044]
[-119.70967102 -95.23416138]
[-108.76631165 -84.97536469]
[-97.71321106 -74.83490753]
[-86.55165100 -64.81394958]
[-75.39009094 -54.79298782]
[-70.58967590 -54.16009521]
[-66.15805054 -50.45793533]
[-63.97581100 -44.09273911]
[-53.25571060 -33.60086441]
[-42.53561020 -23.10898972]
[-31.81550789 -12.61711407]
[-21.09540749 -2.12523961]
[-10.37530708 8.36663532]
[4.13245487 11.73918915]
[8.58315182 26.92147636]
[19.30325317 37.41335297]
[32.24339676 33.96900558]
[45.29564667 37.41382217]
[55.00559235 46.94721603]
[58.74854279 60.14279175]
[55.43839645 73.56529236]
[65.93027496 84.28539276]
[76.42214966 95.00549316]
[80.74202728 86.35924530]
[87.98667908 80.27178955]
[96.85963440 77.62265778]
[105.85333252 78.69426727]
[113.50490570 83.15053558]
[118.63414764 90.11820221]
[120.52478790 98.35335541]
[119.02159882 106.46199036]
[130.39619446 116.24047089]
[141.77078247 126.01895905]
[153.14535522 135.79743958]
[164.51994324 145.57592773]
[175.89453125 155.35441589]
[187.26911926 165.13290405]
[198.64370728 174.91137695]
[211.91273499 172.35865784]
[224.04264832 177.85552979]
[230.67367554 189.17910767]
[229.56582642 202.05877686]
[240.72738647 212.07972717]
[256.87603760 214.93502808]
[262.22256470 230.43815613]
[251.26687622 242.64082336]
[235.27926636 238.98997498]
[230.70642090 223.24128723]
[219.54486084 213.22033691]
[202.84001160 214.85964966]
[189.83955383 203.71748352]
[188.86521912 186.28596497]
[177.49064636 176.50747681]
[166.11605835 166.72900391]
[154.74147034 156.95051575]
[143.36688232 147.17202759]
[131.99229431 137.39353943]
[120.61770630 127.61505890]
[109.24311829 117.83657074]
[98.55578613 122.04790497]
[86.21443939 119.76913452]
[85.89170074 134.76565552]
[85.56895447 149.76219177]
[85.24621582 164.75871277]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 145]
[3 144]
[4 143]
[5 142]
[6 104]
[7 103]
[8 102]
[12 97]
[13 96]
[15 94]
[16 93]
[17 92]
[18 91]
[19 90]
[20 89]
[21 86]
[22 85]
[23 84]
[25 83]
[26 82]
[27 81]
[28 80]
[29 79]
[34 74]
[35 73]
[36 72]
[37 71]
[38 70]
[42 66]
[43 65]
[44 64]
[45 63]
[46 62]
[48 59]
[49 58]
[50 57]
[51 56]
[112 140]
[113 139]
[114 138]
[115 137]
[116 136]
[117 135]
[118 134]
[119 133]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
