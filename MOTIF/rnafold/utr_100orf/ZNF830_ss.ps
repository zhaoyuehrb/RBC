%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:28:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGGAAACCAGAAUCGUUUUGGGUCUGGUCGCCAAGAUGGCGUCCUCCGCCUCCGCCCGGACUCCGGCAGGGAAGCGAGUGAUAAAUCAGGAAGAAUUGCGGCGGUUAAUGAAGGAGAAGCAGCGUCUGAGCACCA\
) } def
/len { sequence length } bind def

/coor [
[124.05412292 175.12432861]
[121.00228119 160.43806458]
[117.95043945 145.75181580]
[114.89860535 131.06555176]
[107.80351257 128.63455200]
[96.49802399 138.49284363]
[93.61334229 123.77256012]
[86.51825714 121.34156799]
[75.10108185 131.07029724]
[63.68391418 140.79902649]
[52.26674271 150.52775574]
[40.84957123 160.25648499]
[29.43240166 169.98521423]
[24.87881088 178.00527954]
[17.64282227 179.80186462]
[6.00715256 189.26818848]
[4.64046240 205.01327515]
[-7.51296759 215.11622620]
[-23.24272346 213.58314514]
[-33.21661758 201.32357788]
[-31.51732063 185.61091614]
[-19.15299034 175.76718140]
[-3.45916677 177.63252258]
[8.17650223 168.16619873]
[19.70366859 158.56805420]
[31.12084007 148.83932495]
[42.53800964 139.11058044]
[53.95518112 129.38185120]
[65.37235260 119.65312195]
[76.78952026 109.92439270]
[72.41483307 95.57649994]
[57.51190186 93.87279510]
[42.60897064 92.16909027]
[27.70603561 90.46539307]
[12.80310345 88.76168823]
[-3.62027526 92.96988678]
[-12.21046257 78.35328674]
[-0.54308373 66.05252838]
[14.50680637 73.85875702]
[29.40973854 75.56245422]
[44.31267166 77.26615906]
[59.21560287 78.96986389]
[74.11853790 80.67356873]
[87.51450348 73.92462921]
[95.01450348 60.93424988]
[102.51450348 47.94386673]
[110.01450348 34.95348740]
[116.45675659 21.40736580]
[121.80037689 7.39145899]
[127.14400482 -6.62444878]
[132.48762512 -20.64035606]
[137.83125305 -34.65626526]
[138.51397705 -49.64072037]
[134.46702576 -64.08448029]
[130.42007446 -78.52823639]
[116.92583466 -86.30920410]
[113.02741241 -101.01487732]
[120.52852631 -113.83161926]
[116.48157501 -128.27537537]
[112.43462372 -142.71913147]
[108.38767242 -157.16288757]
[98.29220581 -170.78338623]
[108.58569336 -184.25485229]
[124.38021088 -178.09289551]
[122.83143616 -161.20983887]
[126.87838745 -146.76608276]
[130.92533875 -132.32232666]
[134.97229004 -117.87857056]
[148.04075623 -110.82515717]
[152.35070801 -96.23477936]
[144.86383057 -82.57518768]
[148.91078186 -68.13143158]
[152.95773315 -53.68767166]
[160.10632324 -51.41881180]
[174.40348816 -46.88109207]
[181.55207825 -44.61223221]
[193.18774414 -54.07855225]
[204.82341003 -63.54487228]
[216.45909119 -73.01119232]
[210.98855591 -87.11539459]
[210.14624023 -102.21988678]
[214.01464844 -116.84488678]
[222.21479797 -129.55758667]
[233.94332886 -139.11251831]
[248.05119324 -144.57359314]
[263.15625000 -145.40579224]
[277.77865601 -141.52758789]
[290.48583984 -133.31890869]
[300.03292847 -121.58398438]
[305.48455811 -107.47245789]
[306.30661011 -92.36685181]
[302.41860962 -77.74705505]
[294.20144653 -65.04535675]
[282.46011353 -55.50614929]
[268.34494019 -50.06398392]
[253.23878479 -49.25202560]
[238.62159729 -53.14982986]
[225.92539978 -61.37552261]
[214.28973389 -51.90920258]
[202.65406799 -42.44288254]
[191.01840210 -32.97656631]
[151.84716797 -29.31263733]
[146.50354004 -15.29673004]
[141.15991211 -1.28082299]
[135.81628418 12.73508453]
[130.47265625 26.75099182]
[144.37969971 21.13010216]
[158.70413208 25.58099174]
[166.97674561 38.09354401]
[165.46142578 53.01680756]
[154.84254456 63.61110687]
[139.91580200 65.09181976]
[127.42246246 56.79022598]
[123.00488281 42.45348740]
[115.50488281 55.44386673]
[108.00488281 68.43424988]
[100.50488281 81.42462921]
[106.61313629 79.69751740]
[113.67255402 80.12643433]
[120.90313721 83.08029938]
[127.40435791 88.64717865]
[132.25430298 96.59985352]
[134.61734009 106.39554596]
[133.84878540 117.21143341]
[129.58486938 128.01370239]
[132.63670349 142.69996643]
[135.68853760 157.38623047]
[138.74038696 172.07249451]
[153.35073853 176.80885315]
[163.62358093 188.22656250]
[166.79556274 203.25434875]
[162.01342773 217.84977722]
[150.56356812 228.08677673]
[135.52592468 231.21163940]
[120.94554138 226.38378906]
[110.74448395 214.90188599]
[107.66677856 199.85452271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 128]
[2 127]
[3 126]
[4 125]
[8 30]
[9 29]
[10 28]
[11 27]
[12 26]
[13 25]
[15 24]
[16 23]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[44 117]
[45 116]
[46 115]
[47 114]
[48 106]
[49 105]
[50 104]
[51 103]
[52 102]
[53 73]
[54 72]
[55 71]
[58 68]
[59 67]
[60 66]
[61 65]
[76 101]
[77 100]
[78 99]
[79 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
