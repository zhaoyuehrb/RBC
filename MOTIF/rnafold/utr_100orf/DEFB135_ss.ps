%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCACAAGGAGCGUCCUCUUGGCCCUCGUGGUCCUUAACUUACUCUUCUAUGUUCCACCAGGUAGAAGUGGACCCAAUGUCUACAUACAAAAAAUCU\
) } def
/len { sequence length } bind def

/coor [
[65.44150543 137.09381104]
[60.25285339 131.11228943]
[56.07995224 124.42352295]
[42.02941513 129.67541504]
[27.97887993 134.92730713]
[13.92834282 140.17921448]
[-0.12219431 145.43110657]
[-14.17273140 150.68299866]
[-24.39035225 162.76235962]
[-39.02105331 159.97096252]
[-53.07159042 165.22285461]
[-67.12212372 170.47476196]
[-74.21537018 176.51449585]
[-81.69215393 175.66404724]
[-95.89922333 180.47642517]
[-99.53535461 195.46916199]
[-110.71569824 206.09947205]
[-125.87265778 208.97525024]
[-140.16970825 203.17884827]
[-149.04469299 190.55989075]
[-149.66564941 175.14503479]
[-141.83442688 161.85310364]
[-128.04995728 154.92549133]
[-112.71078491 156.57279968]
[-100.71160889 166.26936340]
[-86.50453949 161.45697021]
[-72.37402344 156.42422485]
[-58.32348633 151.17231750]
[-44.27294922 145.92042542]
[-35.06031799 134.21672058]
[-19.42462730 136.63246155]
[-5.37409115 131.38056946]
[8.67644596 126.12866974]
[22.72698212 120.87677765]
[36.77751923 115.62487793]
[50.82805634 110.37298584]
[49.45860672 100.51853943]
[50.05590820 90.53005219]
[52.61908722 80.79843903]
[57.06988907 71.70895386]
[63.25490570 63.62596512]
[70.95075226 56.87834930]
[79.87211609 51.74613953]
[89.68227386 48.44895554]
[100.00581360 47.13665771]
[110.44297791 47.88270569]
[120.58516693 50.68040085]
[130.03089905 55.44230270]
[138.40173340 62.00276947]
[146.36810303 49.29304886]
[154.33447266 36.58332825]
[162.30084229 23.87360764]
[170.26721191 11.16388702]
[178.23358154 -1.54583311]
[170.97096252 -15.07912922]
[171.46405029 -30.43010330]
[179.58018494 -43.46942520]
[193.13618469 -50.68957520]
[208.48553467 -50.14837646]
[221.49935913 -41.99140549]
[228.67697144 -28.41284561]
[228.08766174 -13.06526375]
[219.88993835 -0.07708007]
[206.28895569 7.05794811]
[190.94329834 6.42053413]
[182.97692871 19.13025475]
[175.01055908 31.83997536]
[167.04418945 44.54969406]
[159.07781982 57.25941467]
[151.11146545 69.96913910]
[157.01296997 83.75942993]
[171.70742798 86.77153778]
[186.40188599 89.78364563]
[201.09634399 92.79575348]
[215.79081726 95.80785370]
[230.48527527 98.81996155]
[244.61430359 91.22061157]
[259.30776978 97.66123199]
[263.29409790 113.20114136]
[253.51533508 125.91944122]
[237.47288513 126.05974579]
[227.47317505 113.51442719]
[212.77870178 110.50231934]
[198.08424377 107.49021149]
[183.38978577 104.47810364]
[168.69532776 101.46600342]
[154.00085449 98.45389557]
[153.36109924 106.86812592]
[151.42375183 115.04561615]
[148.24682617 122.78835297]
[143.91821289 129.91062927]
[138.55329895 136.24345398]
[132.29185486 141.63853455]
[125.29448700 145.97180176]
[117.73842621 149.14620972]
[109.81314087 151.09388733]
[101.71552277 151.77760315]
[93.64502716 151.19137573]
[85.79875946 149.36035156]
[78.36665344 146.33996582]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 36]
[4 35]
[5 34]
[6 33]
[7 32]
[8 31]
[10 29]
[11 28]
[12 27]
[14 26]
[15 25]
[49 70]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[71 87]
[72 86]
[73 85]
[74 84]
[75 83]
[76 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
