%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:19:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCUGGAGUUUCCGUGCAAAAGUCCAGCUCGGGGGGCUACUUCUCUCCCUCCUUGGCUGGGUCUGCUCCUGUGUUACCACCAUCCUGCCCCAGUGGA\
) } def
/len { sequence length } bind def

/coor [
[102.90536499 115.17978668]
[95.73620605 116.63745117]
[87.96008301 114.56221771]
[74.46003723 121.10048676]
[65.41241455 134.07936096]
[50.58526993 132.66337585]
[37.08522797 139.20164490]
[23.58518982 145.73991394]
[10.08514977 152.27818298]
[-3.41488981 158.81645203]
[-12.46251297 171.79531860]
[-27.28965950 170.37934875]
[-40.78969955 176.91761780]
[-54.28973770 183.45588684]
[-57.93906021 198.66168213]
[-70.53939056 207.92266846]
[-86.14123535 206.86607361]
[-97.37788391 195.99078369]
[-98.94373322 180.43179321]
[-90.09944153 167.53558350]
[-75.02100372 163.39132690]
[-60.82800674 169.95584106]
[-47.32796478 163.41757202]
[-33.82792664 156.87930298]
[-25.74591637 144.36810303]
[-9.95315647 145.31640625]
[3.54688358 138.77813721]
[17.04692268 132.23986816]
[30.54696274 125.70160675]
[44.04700470 119.16334534]
[52.12901306 106.65213013]
[67.92177582 107.60044098]
[81.42181396 101.06217957]
[86.89158630 87.09501648]
[81.42181396 73.12785339]
[75.95204163 59.16069412]
[70.48226929 45.19353485]
[65.01249695 31.22637177]
[59.54272079 17.25921249]
[44.34526443 15.03820419]
[32.30434036 5.50344133]
[26.65889549 -8.78027439]
[28.92752838 -23.97069550]
[38.49998856 -35.98167419]
[52.80133057 -41.58231735]
[67.98456573 -39.26607895]
[79.96547699 -29.65602112]
[85.52127075 -15.33719444]
[83.15744781 -0.16129398]
[73.50988007 11.78943920]
[78.97965240 25.75659943]
[84.44942474 39.72376251]
[89.91920471 53.69092178]
[95.38897705 67.65808105]
[100.85874939 81.62524414]
[112.62766266 90.92538452]
[127.48095703 93.01811981]
[142.22563171 87.28182220]
[153.74896240 96.71910095]
[168.60226440 98.81182861]
[183.45556641 100.90456390]
[198.30885315 102.99729156]
[213.16215515 105.09001923]
[228.01545715 107.18275452]
[233.18247986 105.07342529]
[238.11689758 105.26564026]
[241.94091797 107.24844360]
[244.12989807 110.22558594]
[258.72357178 113.69323730]
[270.33798218 100.70915985]
[286.81179810 95.32009888]
[303.68267822 98.89325714]
[316.42681885 110.38060760]
[321.67224121 126.62417603]
[336.45327759 129.17782593]
[351.23428345 131.73147583]
[366.42977905 125.56468964]
[379.20010376 135.85307312]
[376.40826416 152.01283264]
[360.92623901 157.42018127]
[348.68063354 146.51251221]
[333.89962769 143.95886230]
[319.11859131 141.40521240]
[311.99600220 152.07180786]
[301.29461670 159.22720337]
[288.62338257 161.75216675]
[275.90411377 159.22692871]
[265.08001709 152.00050354]
[257.81884766 141.14292908]
[255.25593567 128.28691101]
[240.66226196 124.81926727]
[225.92272949 122.03604889]
[211.06942749 119.94332123]
[196.21612549 117.85059357]
[181.36282349 115.75785828]
[166.50953674 113.66513062]
[151.65623474 111.57240295]
[137.97396851 117.45838165]
[125.38822937 107.87141418]
[110.53492737 105.77868652]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 33]
[4 32]
[6 30]
[7 29]
[8 28]
[9 27]
[10 26]
[12 24]
[13 23]
[14 22]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[56 100]
[57 99]
[59 97]
[60 96]
[61 95]
[62 94]
[63 93]
[64 92]
[68 91]
[69 90]
[74 83]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
