%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:00:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCUUUUUUAACCAGUCAUCAAGCGAGGCUCGCGCGCAGGCCCCGCGUUGGAAAAUGGCGGGGAAGCUGAAACCUCUGAAUGUGGAGGCGCCAGAAGCUACUGAGGAGGCUGAAGGGCAAGCCAAGUCUUUGAAGACUGAAGACUUGCUGGCAA\
) } def
/len { sequence length } bind def

/coor [
[110.63504028 279.27813721]
[100.82080078 290.83047485]
[87.64576721 298.32675171]
[72.70088196 300.86178589]
[57.79082108 298.12939453]
[44.71604156 290.45959473]
[35.05538559 278.77850342]
[29.97542953 264.49670410]
[30.08959961 249.33879089]
[35.38410950 235.13513184]
[45.21961975 223.60089111]
[58.40844727 216.12890625]
[73.35797882 213.62142944]
[76.06180573 198.86714172]
[78.76562500 184.11283875]
[81.46945190 169.35853577]
[75.61244965 164.67393494]
[66.24324036 176.38793945]
[60.95225143 190.42381287]
[45.96835327 189.72891235]
[41.99914551 175.26359558]
[54.52923584 167.01873779]
[63.89844131 155.30473328]
[58.04143906 150.62013245]
[44.24174881 156.49963379]
[30.44205666 162.37911987]
[16.64236450 168.25862122]
[4.44065142 180.02954102]
[-10.24802589 171.56318665]
[-6.17877436 155.10484314]
[10.76286507 154.45893860]
[24.56255722 148.57943726]
[38.36224747 142.69993591]
[52.16194153 136.82043457]
[46.65598679 121.28513336]
[45.79052734 105.62163544]
[49.20311737 91.12378693]
[56.19418716 78.87621307]
[43.84943008 70.35523987]
[31.50467110 61.83426666]
[11.39461231 61.17954254]
[3.75448084 43.45317841]
[-8.92337036 35.43619156]
[-21.60122108 27.41920471]
[-34.27907181 19.40221786]
[-46.95692444 11.38523006]
[-59.63477707 3.36824226]
[-72.85772705 11.07616615]
[-88.14863586 11.74459648]
[-101.99375153 5.21993113]
[-111.21157837 -6.99850845]
[-113.68392181 -22.10301399]
[-108.84265900 -36.62268066]
[-97.80027771 -47.22099686]
[-83.09422302 -51.46254730]
[-68.10385895 -48.37265015]
[-56.27384567 -38.66134644]
[-50.32264328 -24.56022072]
[-51.61778641 -9.30960941]
[-38.93993759 -1.29262161]
[-26.26208496 6.72436571]
[-13.58423424 14.74135303]
[-0.90638292 22.75834084]
[11.77146816 30.77532768]
[21.56733131 27.63050652]
[31.68043900 30.48625374]
[38.67189026 38.62434006]
[40.02564240 49.48950958]
[52.37039948 58.01048279]
[64.71515656 66.53145599]
[72.04721832 60.20294189]
[80.48797607 55.45289612]
[89.70262909 52.46971893]
[99.32570648 51.37172699]
[101.43324280 36.52052307]
[103.54077911 21.66931725]
[105.64831543 6.81811190]
[107.75585175 -8.03309345]
[98.06237793 -20.51556206]
[100.11735535 -36.18568039]
[112.70161438 -45.74664307]
[128.34913635 -43.52610016]
[137.77650452 -30.84146309]
[135.39065552 -15.21829987]
[122.60705566 -5.92555618]
[120.49951935 8.92564869]
[118.39198303 23.77685356]
[116.28444672 38.62805939]
[114.17691040 53.47926331]
[128.02827454 60.25607300]
[139.06176758 71.02859497]
[152.34359741 64.05774689]
[165.62544250 57.08689880]
[167.82621765 40.34394455]
[179.44230652 28.31633759]
[195.77140808 25.58893013]
[210.37031555 33.03787231]
[223.50909424 25.80098152]
[236.64787292 18.56408882]
[249.78665161 11.32719803]
[251.58535767 -4.08527231]
[262.12451172 -15.47412586]
[277.35156250 -18.46011734]
[291.41143799 -11.89506912]
[298.89779663 1.69662178]
[296.93197632 17.08867264]
[286.26992798 28.36252785]
[271.01135254 31.18315697]
[257.02352905 24.46597290]
[243.88476562 31.70286369]
[230.74598694 38.93975449]
[217.60720825 46.17664719]
[217.17337036 59.55200577]
[210.11816406 71.05098724]
[198.20053101 77.60153198]
[184.49443054 77.39153290]
[172.59629822 70.36873627]
[159.31445312 77.33958435]
[146.03260803 84.31043243]
[150.97035217 99.01609802]
[151.10176086 115.24304962]
[145.97857666 131.39303589]
[135.68955994 145.74533081]
[120.88977051 156.63781738]
[131.70780945 167.02867126]
[142.52584839 177.41954041]
[153.34388733 187.81040955]
[164.16191101 198.20127869]
[174.97994995 208.59213257]
[185.79798889 218.98300171]
[196.61602783 229.37387085]
[207.43406677 239.76473999]
[218.25210571 250.15559387]
[234.25630188 251.27142334]
[243.24337769 264.56097412]
[238.31921387 279.82962036]
[223.26121521 285.36459351]
[209.62057495 276.91992188]
[207.86123657 260.97363281]
[197.04319763 250.58277893]
[186.22515869 240.19190979]
[175.40711975 229.80104065]
[164.58909607 219.41017151]
[153.77105713 209.01931763]
[142.95301819 198.62844849]
[132.13497925 188.23757935]
[121.31694031 177.84671021]
[110.49890900 167.45585632]
[96.22375488 172.06236267]
[93.51992798 186.81666565]
[90.81610107 201.57096863]
[88.11227417 216.32525635]
[101.20116425 223.97096252]
[110.88333130 235.63421631]
[115.98960114 249.90663147]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 152]
[14 151]
[15 150]
[16 149]
[24 34]
[25 33]
[26 32]
[27 31]
[38 70]
[39 69]
[40 68]
[42 64]
[43 63]
[44 62]
[45 61]
[46 60]
[47 59]
[74 89]
[75 88]
[76 87]
[77 86]
[78 85]
[91 119]
[92 118]
[93 117]
[97 112]
[98 111]
[99 110]
[100 109]
[124 148]
[125 147]
[126 146]
[127 145]
[128 144]
[129 143]
[130 142]
[131 141]
[132 140]
[133 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
