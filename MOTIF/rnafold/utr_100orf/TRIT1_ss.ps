%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGCGCAGACUGCCAUAAGAUGGCGUCCGUGGCGGCUGCACGAGCAGUUCCCGUGGGCAGUGGGCUCAGGGGCCUGCAACGGACCCUACCUCUUGUAGUGAUUCUCGGGGCCACGGGCA\
) } def
/len { sequence length } bind def

/coor [
[73.57702637 223.39833069]
[83.58608246 234.57055664]
[88.68287659 248.67810059]
[88.12561798 263.66775513]
[81.99541473 277.35791016]
[71.18445587 287.75613403]
[57.26615143 293.34906006]
[42.26617432 293.32272339]
[28.36761284 287.68090820]
[17.59325027 277.24478149]
[11.51118755 263.53314209]
[11.00660229 248.54164124]
[16.15353203 234.45109558]
[3.64106750 242.72384644]
[-8.87139797 250.99658203]
[-21.38386345 259.26931763]
[-33.89632797 267.54205322]
[-43.77411652 281.32122803]
[-59.74923706 275.64392090]
[-58.71615982 258.72149658]
[-42.16906738 255.02958679]
[-29.65660286 246.75685120]
[-17.14413643 238.48411560]
[-4.63167143 230.21138000]
[7.88079405 221.93862915]
[18.69190979 211.54057312]
[27.44555664 199.35969543]
[36.19919968 187.17881775]
[44.95284653 174.99794006]
[53.70649338 162.81707764]
[62.46013641 150.63619995]
[71.21378326 138.45532227]
[79.96743011 126.27445221]
[88.72106934 114.09357452]
[86.39379120 99.27521515]
[74.32757568 90.36418152]
[62.26136398 81.45315552]
[50.19515228 72.54212189]
[38.12894058 63.63108826]
[26.06272507 54.72005463]
[9.71538544 53.41756058]
[2.91499901 38.49486923]
[12.65722179 25.30316162]
[28.92008972 27.41293716]
[34.97375870 42.65384293]
[47.03997040 51.56487274]
[59.10618591 60.47590637]
[71.17239380 69.38694000]
[83.23860931 78.29797363]
[95.30482483 87.20900726]
[110.28460693 87.98756409]
[123.20959473 80.37541962]
[136.13458252 72.76327515]
[149.05957031 65.15113068]
[157.02420044 51.48090744]
[171.91735840 51.68908691]
[184.84234619 44.07694244]
[197.13581848 35.48215866]
[208.72325134 25.95685577]
[220.31068420 16.43155098]
[231.89811707 6.90624714]
[237.64535522 -7.83417130]
[252.39045715 -9.93921757]
[263.97787476 -19.46452141]
[275.56530762 -28.98982620]
[276.01391602 -40.00992966]
[282.37979126 -48.74440002]
[292.31826782 -52.39287949]
[302.39358521 -49.95554352]
[314.45980835 -58.86657715]
[326.52600098 -67.77761078]
[338.59222412 -76.68864441]
[345.09680176 -91.11088562]
[359.93127441 -92.44776917]
[371.99749756 -101.35880280]
[374.10003662 -117.02261353]
[386.71325684 -126.54533386]
[402.35394287 -124.27730560]
[411.74279785 -111.56411743]
[409.30950928 -95.94826508]
[396.49777222 -86.69436646]
[380.90850830 -89.29258728]
[368.84231567 -80.38155365]
[363.20080566 -66.59668732]
[347.50326538 -64.62242889]
[335.43704224 -55.71139526]
[323.37081909 -46.80036163]
[311.30462646 -37.88933182]
[305.03997803 -19.67158890]
[285.09060669 -17.40239334]
[273.50317383 -7.87708950]
[261.91574097 1.64821470]
[256.99734497 15.70731926]
[241.42343140 18.49367905]
[229.83599854 28.01898384]
[218.24856567 37.54428864]
[206.66113281 47.06959152]
[221.28915405 50.38933563]
[229.48696899 62.95101929]
[226.63604736 77.67760468]
[214.34255981 86.27238464]
[199.53245544 83.89320374]
[190.54946899 71.88045502]
[192.45448303 57.00192642]
[179.52949524 64.61407471]
[172.48933411 77.73982239]
[156.67170715 78.07611847]
[143.74671936 85.68826294]
[130.82173157 93.30040741]
[117.89675140 100.91255188]
[100.90194702 122.84722137]
[92.14830017 135.02809143]
[83.39465332 147.20896912]
[74.64101410 159.38984680]
[65.88736725 171.57072449]
[57.13372040 183.75158691]
[48.38007355 195.93246460]
[39.62643051 208.11334229]
[30.87278557 220.29421997]
[45.15188599 215.69995117]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 25]
[14 24]
[15 23]
[16 22]
[17 21]
[26 119]
[27 118]
[28 117]
[29 116]
[30 115]
[31 114]
[32 113]
[33 112]
[34 111]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[51 110]
[52 109]
[53 108]
[54 107]
[56 105]
[57 104]
[58 97]
[59 96]
[60 95]
[61 94]
[63 92]
[64 91]
[65 90]
[69 88]
[70 87]
[71 86]
[72 85]
[74 83]
[75 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
