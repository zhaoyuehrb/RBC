%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:11:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGGGUCAGCAAGAGAAACUCUACGGCUAUGGGAGAGCCUGCGUUCACCUCUUUUCCGAGCCCACCUGUUCUGGGGAAGCUCAAAAGAAACAUGAUGCCCUGGGCUUUACAGAAGAAACGAGAAAUCC\
) } def
/len { sequence length } bind def

/coor [
[225.94790649 113.60085297]
[210.96542358 112.87615204]
[195.98294067 112.15145111]
[181.00045776 111.42675018]
[166.01797485 110.70204926]
[152.93174744 117.81541443]
[139.52149963 109.42041779]
[124.53901672 108.69571686]
[114.63538361 121.53101349]
[99.05648804 126.01708984]
[83.84346771 120.41434479]
[74.89556885 106.89539337]
[59.89994812 106.53294373]
[44.90432739 106.17048645]
[29.90870667 105.80802917]
[14.91308689 105.44557190]
[-2.21909738 115.94070435]
[-18.36187935 105.40517426]
[-33.35749817 105.76763153]
[-48.35311890 106.13008881]
[-57.85698318 114.94773102]
[-70.41898346 114.88519287]
[-79.24969482 106.52555847]
[-94.24969482 106.52555847]
[-102.93262482 109.68045044]
[-109.61105347 106.33993530]
[-124.60667419 105.97747803]
[-139.60229492 105.61502075]
[-154.59791565 105.25256348]
[-164.79963684 117.10409546]
[-180.24089050 119.57431793]
[-193.63076782 111.49687195]
[-198.64698792 96.68567657]
[-192.92105103 82.13412476]
[-179.15655518 74.71302032]
[-163.85269165 77.92637634]
[-154.23545837 90.25695038]
[-139.23983765 90.61940002]
[-124.24421692 90.98185730]
[-109.24860382 91.34431458]
[-94.24969482 91.52555847]
[-79.24969482 91.52555847]
[-64.60910034 81.92864227]
[-48.71557617 91.13446808]
[-33.71995544 90.77201080]
[-18.72433472 90.40955353]
[-12.27908993 82.32158661]
[-2.21909738 79.10137177]
[8.14956760 82.06423187]
[15.27554321 90.44995117]
[30.27116394 90.81240845]
[45.26678467 91.17486572]
[60.26240540 91.53732300]
[75.25802612 91.89977264]
[82.48117065 80.74201965]
[94.27076721 74.60404205]
[107.55373383 75.08574677]
[118.86775208 82.06158447]
[125.26371765 93.71323395]
[140.24620056 94.43793488]
[154.40408325 87.37640381]
[166.74267578 95.71956635]
[181.72515869 96.44426727]
[196.70764160 97.16896820]
[211.69012451 97.89366913]
[226.67260742 98.61837006]
[239.34831238 78.11275482]
[261.45333862 68.76885223]
[284.78204346 73.91909027]
[300.75302124 91.54054260]
[315.31713867 87.95081329]
[329.88128662 84.36107635]
[344.44540405 80.77133942]
[359.00952148 77.18160248]
[366.38677979 66.52091217]
[378.66632080 63.87129593]
[389.09286499 70.12846375]
[403.73950195 66.89170074]
[418.38610840 63.65493393]
[433.03271484 60.41817093]
[447.67935181 57.18140793]
[462.32595825 53.94464493]
[476.97256470 50.70788193]
[491.61920166 47.47111893]
[493.30853271 32.42369843]
[499.79446411 18.74118042]
[510.37347412 7.90774298]
[523.89801025 1.09851575]
[538.90106201 -0.94788665]
[553.75512695 1.99051416]
[566.84906006 9.59498215]
[576.76245117 21.04064178]
[582.42004395 35.08595276]
[583.20806885 50.20738602]
[579.04101562 64.76467896]
[570.37103271 77.17877197]
[558.13848877 86.10307312]
[543.67022705 90.56953430]
[528.53576660 90.09367371]
[514.37670898 84.72711182]
[502.72897339 75.05197144]
[494.85595703 62.11773682]
[480.20935059 65.35449982]
[465.56271362 68.59126282]
[450.91610718 71.82802582]
[436.26950073 75.06478882]
[421.62286377 78.30155182]
[406.97625732 81.53831482]
[392.32965088 84.77507782]
[380.10482788 97.30510712]
[362.59927368 91.74573517]
[348.03512573 95.33546448]
[333.47100830 98.92520142]
[318.90689087 102.51493835]
[304.34274292 106.10467529]
[304.03912354 113.53458405]
[302.33181763 120.78076172]
[299.27954102 127.58016968]
[294.98980713 133.68534851]
[289.61532593 138.87345886]
[283.34838867 142.95436096]
[276.41409302 145.77764893]
[269.06225586 147.23814392]
[261.55838013 147.27983093]
[254.17410278 145.89797974]
[247.17730713 143.13943481]
[240.82244873 139.10110474]
[235.34129333 133.92642212]
[230.93447876 127.80040741]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 66]
[2 65]
[3 64]
[4 63]
[5 62]
[7 60]
[8 59]
[12 54]
[13 53]
[14 52]
[15 51]
[16 50]
[18 46]
[19 45]
[20 44]
[23 42]
[24 41]
[26 40]
[27 39]
[28 38]
[29 37]
[70 115]
[71 114]
[72 113]
[73 112]
[74 111]
[77 109]
[78 108]
[79 107]
[80 106]
[81 105]
[82 104]
[83 103]
[84 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
