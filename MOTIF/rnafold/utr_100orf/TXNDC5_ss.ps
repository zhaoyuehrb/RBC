%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:34:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGAGGCCGCGGCGAGAGCGCGCCCAGCCCCGCCGCGAUGCCCGCGCGCCCAGGACGCCUCCUCCCGCUGCUGGCCCGGCCGGCGGCCCUGACUGCGCUGCUGCUGCUGCUGCUGGGCCAUGGCGGCGGCGGGCGCU\
) } def
/len { sequence length } bind def

/coor [
[7.41931534 182.26387024]
[-0.93081474 188.92524719]
[-10.99967384 192.37432861]
[-21.60346413 192.23297119]
[-31.50468063 188.54357910]
[-39.55653381 181.76112366]
[-52.97508240 188.46505737]
[-66.39363098 195.16897583]
[-79.65724945 202.17443848]
[-92.75915527 209.47785950]
[-105.86106110 216.78128052]
[-118.96297455 224.08470154]
[-132.06488037 231.38812256]
[-145.16679382 238.69154358]
[-158.26870728 245.99496460]
[-160.45222473 259.33688354]
[-169.80444336 268.82757568]
[-182.72871399 271.13812256]
[-194.43667603 265.64138794]
[-207.70030212 272.64685059]
[-210.81668091 287.97076416]
[-223.08610535 297.66589355]
[-238.71533203 297.15447998]
[-250.32469177 286.67800903]
[-252.43263245 271.18313599]
[-244.04383850 257.98608398]
[-229.11923218 253.31809998]
[-214.70576477 259.38323975]
[-201.44213867 252.37779236]
[-197.20576477 236.14164734]
[-182.26341248 227.79318237]
[-165.57212830 232.89305115]
[-152.47021484 225.58963013]
[-139.36830139 218.28620911]
[-126.26639557 210.98278809]
[-113.16448975 203.67936707]
[-100.06257629 196.37594604]
[-86.96067047 189.07252502]
[-84.80139923 184.72656250]
[-79.84571838 181.73316956]
[-73.09754944 181.75042725]
[-59.67900085 175.04650879]
[-46.26045227 168.34257507]
[-44.45827103 148.96138000]
[-31.32147217 134.40620422]
[-11.94714165 130.57817078]
[5.99434757 139.16606140]
[18.75285149 131.27806091]
[31.51135445 123.39005280]
[44.26985931 115.50205231]
[57.02836227 107.61404419]
[69.78686523 99.72604370]
[73.64185333 85.22986603]
[66.48695374 72.04626465]
[59.33205795 58.86265945]
[52.17715836 45.67905426]
[37.92100906 37.57385635]
[38.08283234 21.17550659]
[52.49615860 13.35322475]
[66.33379364 22.15390205]
[65.36076355 38.52415848]
[72.51566315 51.70776367]
[79.67056274 64.89136505]
[86.82546234 78.07497406]
[103.57182312 78.31948090]
[114.01020813 88.12349701]
[128.41555786 83.94187927]
[142.82090759 79.76026917]
[157.22625732 75.57865906]
[171.63160706 71.39704895]
[186.03695679 67.21543884]
[200.44232178 63.03382874]
[214.84767151 58.85221863]
[229.15483093 54.34612274]
[243.35652161 49.51784134]
[257.55819702 44.68956375]
[271.75988770 39.86128235]
[285.96154785 35.03300095]
[300.16323853 30.20472336]
[314.36492920 25.37644386]
[328.56658936 20.54816437]
[342.65551758 15.40016747]
[356.62454224 9.93508339]
[370.59353638 4.46999884]
[384.56253052 -0.99508554]
[398.53152466 -6.46016979]
[412.50051880 -11.92525387]
[426.46951294 -17.39033890]
[426.38973999 -32.56789017]
[431.80175781 -46.74796295]
[441.97366333 -58.01281357]
[455.52975464 -64.83897400]
[470.63671875 -66.30324554]
[485.25143433 -62.20761490]
[497.39739990 -53.10597229]
[505.43197632 -40.22924423]
[508.26852417 -25.31889915]
[505.52346802 -10.39144039]
[497.56802368 2.53431511]
[485.47808838 11.71026611]
[470.88873291 15.89543915]
[455.77307129 14.52382565]
[442.17538452 7.78092480]
[431.93460083 -3.42134237]
[417.96560669 2.04374194]
[403.99661255 7.50882626]
[390.02761841 12.97391033]
[376.05859375 18.43899536]
[362.08959961 23.90407944]
[348.12060547 29.36916351]
[345.39361572 33.38331223]
[340.07876587 35.67925262]
[333.39486694 34.74984360]
[319.19320679 39.57812500]
[304.99151611 44.40640259]
[290.78982544 49.23468399]
[276.58816528 54.06296158]
[262.38647461 58.89124298]
[248.18479919 63.71952057]
[233.98310852 68.54779816]
[231.07751465 72.43462372]
[225.66432190 74.48805237]
[219.02928162 73.25756836]
[204.62393188 77.43917847]
[190.21856689 81.62078857]
[175.81321716 85.80239868]
[161.40786743 89.98400879]
[147.00251770 94.16561890]
[132.59716797 98.34723663]
[118.19181824 102.52884674]
[104.06088257 121.59426117]
[77.67486572 112.48454285]
[64.91636658 120.37255096]
[52.15785980 128.26055908]
[39.39935684 136.14855957]
[26.64085388 144.03656006]
[13.88235092 151.92456055]
[15.31015301 162.62687683]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 43]
[7 42]
[8 41]
[9 38]
[10 37]
[11 36]
[12 35]
[13 34]
[14 33]
[15 32]
[19 29]
[20 28]
[47 137]
[48 136]
[49 135]
[50 134]
[51 133]
[52 132]
[53 64]
[54 63]
[55 62]
[56 61]
[66 130]
[67 129]
[68 128]
[69 127]
[70 126]
[71 125]
[72 124]
[73 123]
[74 120]
[75 119]
[76 118]
[77 117]
[78 116]
[79 115]
[80 114]
[81 113]
[82 110]
[83 109]
[84 108]
[85 107]
[86 106]
[87 105]
[88 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
