%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:43:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGCUUUUCGCUGGUUAUUACAUCUUGCGUUUCUCUGUUGUUAUGUCUGAAACCGUGCCUGCAGCUUCUGCCAGUGCUGGUGUAGCCGCUAUGGAGAAACUUCCAACCAAGAAGCGAGGGAGGAAGCCGGCUGGCUUGAUAA\
) } def
/len { sequence length } bind def

/coor [
[95.78154755 467.45440674]
[94.47421265 452.51147461]
[85.65709686 440.50698853]
[92.16219330 426.08499146]
[90.85485840 411.14205933]
[89.54752350 396.19912720]
[81.79843903 391.60134888]
[76.99905396 383.81253052]
[76.35693359 374.54763794]
[80.14709473 365.91784668]
[87.61988068 359.94931030]
[87.29265594 344.95288086]
[86.96543121 329.95645142]
[86.63820648 314.96002197]
[86.31098938 299.96359253]
[85.98376465 284.96716309]
[85.65653992 269.97073364]
[82.34090424 263.30163574]
[85.48934937 254.64439392]
[85.48934937 239.64439392]
[73.35092926 231.05387878]
[68.54161835 216.79434204]
[73.10437012 202.26730347]
[85.48934937 193.10659790]
[85.48934937 178.10659790]
[85.48934937 163.10659790]
[85.48934937 148.10659790]
[85.48934937 133.10659790]
[85.48934937 118.10660553]
[84.69600677 87.69636536]
[80.49856567 73.29561615]
[76.30113220 58.89487076]
[72.10369873 44.49412155]
[67.90626526 30.09337616]
[63.70882797 15.69262791]
[59.51139450 1.29187977]
[55.31395721 -13.10886765]
[51.11652374 -27.50961685]
[46.91908646 -41.91036224]
[35.62920380 -52.99409485]
[39.49593735 -67.37803650]
[35.29850388 -81.77877808]
[24.83443260 -84.45447540]
[16.51420021 -91.21338654]
[11.82292843 -100.76153564]
[11.56116962 -111.31549835]
[15.70907497 -120.93537903]
[23.44249725 -127.88139343]
[20.19590378 -142.52583313]
[16.94931030 -157.17027283]
[6.47635889 -164.78327942]
[4.10520124 -177.10292053]
[10.57671356 -187.37884521]
[7.65035820 -202.09062195]
[4.72400379 -216.80241394]
[1.79764879 -231.51419067]
[-2.97924447 -239.39085388]
[-1.02839160 -246.57864380]
[-3.63311434 -261.35076904]
[-6.39881754 -276.09359741]
[-9.32517242 -290.80535889]
[-12.25152683 -305.51715088]
[-15.33818531 -320.19613647]
[-18.58477974 -334.84057617]
[-21.83137321 -349.48501587]
[-31.16260719 -363.64001465]
[-20.14391899 -376.52508545]
[-4.71213198 -369.50393677]
[-7.18693352 -352.73159790]
[-3.94033957 -338.08715820]
[-0.69374532 -323.44271851]
[3.85925746 -317.54861450]
[2.46025205 -308.44351196]
[5.38660669 -293.73171997]
[8.31296158 -279.01992798]
[12.73630142 -273.02792358]
[11.13900185 -263.95547485]
[13.74372482 -249.18336487]
[16.50942802 -234.44053650]
[19.43578339 -219.72875977]
[22.36213684 -205.01698303]
[25.28849220 -190.30520630]
[37.55635834 -177.80186462]
[31.59375000 -160.41687012]
[34.84034348 -145.77243042]
[38.08693695 -131.12799072]
[55.22377014 -121.99967194]
[60.31592560 -102.95001984]
[49.69924927 -85.97621918]
[53.89668655 -71.57546997]
[64.88633728 -61.52177429]
[61.31983566 -46.10779953]
[65.51727295 -31.70705032]
[69.71470642 -17.30630302]
[73.91213989 -2.90555549]
[78.10957336 11.49519253]
[82.30701447 25.89594078]
[86.50444794 40.29668808]
[90.70188141 54.69743729]
[94.89931488 69.09818268]
[99.09674835 83.49893188]
[111.09594727 92.50000000]
[126.09594727 92.50000000]
[141.09594727 92.50000000]
[151.00831604 80.40541840]
[166.38536072 77.56279755]
[179.96652222 85.31433868]
[185.33917236 100.00000000]
[179.96652222 114.68566132]
[166.38536072 122.43720245]
[151.00831604 119.59458160]
[141.09594727 107.50000000]
[126.09594727 107.50000000]
[111.09594727 107.50000000]
[100.48934937 118.10660553]
[100.48934937 133.10659790]
[100.48934937 148.10659790]
[100.48934937 163.10659790]
[100.48934937 178.10659790]
[100.48934937 193.10659790]
[112.87432861 202.26730347]
[117.43707275 216.79434204]
[112.62776947 231.05387878]
[100.48934937 239.64439392]
[100.48934937 254.64439392]
[100.65296936 269.64349365]
[100.98019409 284.63992310]
[101.30741882 299.63635254]
[101.63463593 314.63278198]
[101.96186066 329.62921143]
[102.28908539 344.62564087]
[102.61631012 359.62207031]
[114.90188599 377.11907959]
[104.49044037 394.89181519]
[105.79777527 409.83471680]
[107.10511017 424.77764893]
[116.01573181 437.85095215]
[109.41712952 451.20413208]
[110.72447205 466.14706421]
[122.04045105 477.51931763]
[120.06160736 493.43984985]
[106.30593109 501.69583130]
[91.32559967 495.95391846]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 139]
[2 138]
[4 136]
[5 135]
[6 134]
[11 132]
[12 131]
[13 130]
[14 129]
[15 128]
[16 127]
[17 126]
[19 125]
[20 124]
[24 120]
[25 119]
[26 118]
[27 117]
[28 116]
[29 115]
[30 101]
[31 100]
[32 99]
[33 98]
[34 97]
[35 96]
[36 95]
[37 94]
[38 93]
[39 92]
[41 90]
[42 89]
[48 86]
[49 85]
[50 84]
[53 82]
[54 81]
[55 80]
[56 79]
[58 78]
[59 77]
[60 75]
[61 74]
[62 73]
[63 71]
[64 70]
[65 69]
[102 114]
[103 113]
[104 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
