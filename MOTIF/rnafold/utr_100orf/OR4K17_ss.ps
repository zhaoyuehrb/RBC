%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:19:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUCUUUAUUUUUCACUCAUACUCCAUGGUAUGAGUGAUCUUUUCUUUCUCUCUACAGGUCAUCCAAGAGCGAGCUGUAGGAUGGAGGCCAUGAAAC\
) } def
/len { sequence length } bind def

/coor [
[117.75073242 279.61065674]
[115.42726135 264.79168701]
[113.10379028 249.97274780]
[110.78031921 235.15379333]
[108.45684052 220.33482361]
[104.23661804 214.10464478]
[106.29901886 205.01954651]
[104.43753815 190.13549805]
[102.57605743 175.25144958]
[100.71457672 160.36740112]
[98.85309601 145.48335266]
[96.99161530 130.59930420]
[95.13013458 115.71524811]
[90.75057983 112.62485504]
[87.80145264 108.46607971]
[86.48088074 103.81303406]
[71.78642273 100.80092621]
[57.09195709 97.78881836]
[42.39749527 94.77671051]
[27.70303345 91.76461029]
[13.00857162 88.75250244]
[-1.68589067 85.74039459]
[-16.38035202 82.72828674]
[-31.07481575 79.71618652]
[-45.76927567 76.70407867]
[-60.46373749 73.69197083]
[-75.84365845 79.38320160]
[-88.28784180 68.70264435]
[-84.99477386 52.63753128]
[-69.35208893 47.71428299]
[-57.45163345 58.99750900]
[-42.75717163 62.00961685]
[-28.06270790 65.02172089]
[-13.36824703 68.03382874]
[1.32621539 71.04593658]
[16.02067757 74.05803680]
[30.71513939 77.07014465]
[45.40960312 80.08225250]
[60.10406494 83.09436035]
[74.79852295 86.10646057]
[89.49298859 89.11856842]
[75.58860779 83.49111176]
[64.76890564 73.10198212]
[58.58176422 59.43745422]
[57.91231537 44.45240021]
[62.85633469 30.29059982]
[72.70652771 18.97805023]
[86.05371094 12.13314533]
[100.98841858 10.73512173]
[115.37407684 14.98398399]
[127.15265656 24.27188492]
[134.63909912 37.27008438]
[136.76237488 52.11904526]
[133.21875000 66.69445801]
[124.51515198 78.91114807]
[111.89509583 87.02203369]
[125.77550507 81.33570862]
[139.65591431 75.64938354]
[153.53631592 69.96305847]
[167.41673279 64.27673340]
[181.29713440 58.59040833]
[191.13414001 46.19913101]
[205.84457397 48.53416061]
[219.72499084 42.84783554]
[230.54064941 28.04686928]
[247.78375244 30.87114143]
[261.48062134 24.75588608]
[273.47869873 12.77747822]
[288.31039429 20.99072075]
[284.52392578 37.51643372]
[267.59585571 38.45273590]
[253.89901733 44.56798935]
[249.21302795 55.84005737]
[237.70507812 60.99676514]
[225.41131592 56.72824097]
[211.53091431 62.41456604]
[202.68670654 74.39911652]
[186.98345947 72.47080994]
[173.10305786 78.15714264]
[159.22264099 83.84346771]
[145.34223938 89.52979279]
[131.46183777 95.21611786]
[117.58142090 100.90244293]
[110.01418304 113.85376740]
[111.87566376 128.73782349]
[113.73714447 143.62187195]
[115.59862518 158.50592041]
[117.46010590 173.38996887]
[119.32158661 188.27401733]
[121.18306732 203.15805054]
[123.27580261 218.01135254]
[125.59927368 232.83030701]
[127.92274475 247.64927673]
[130.24621582 262.46823120]
[132.56968689 277.28717041]
[145.48719788 286.39288330]
[148.10018921 301.97967529]
[138.85842896 314.80017090]
[123.24489594 317.24822998]
[110.52281189 307.87142944]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 95]
[2 94]
[3 93]
[4 92]
[5 91]
[7 90]
[8 89]
[9 88]
[10 87]
[11 86]
[12 85]
[13 84]
[16 41]
[17 40]
[18 39]
[19 38]
[20 37]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[56 83]
[57 82]
[58 81]
[59 80]
[60 79]
[61 78]
[63 76]
[64 75]
[66 72]
[67 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
