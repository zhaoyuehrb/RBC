%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCGCGUUUGGCCGGCCGUGGGGAAGGAAGAAAGGAGCCAAGGAGGCGAGGCAUGGAUCCGCAGCCUCCUCCACCCGCCCAGGGCAGCCCACCUCACCGUGGCCGAGGCCGGGGCCGUGGCCGAGGCCGUGGUCGGGGCCGUGGCCGUGGCA\
) } def
/len { sequence length } bind def

/coor [
[318.47003174 341.64428711]
[317.14837646 336.46963501]
[306.65051270 325.75540161]
[296.15264893 315.04116821]
[285.65478516 304.32693481]
[270.80471802 304.43228149]
[260.00576782 293.71606445]
[259.99594116 278.13925171]
[249.49807739 267.42501831]
[239.00021362 256.71078491]
[228.50234985 245.99653625]
[218.00448608 235.28230286]
[207.50662231 224.56806946]
[197.00875854 213.85383606]
[190.03910828 211.26155090]
[186.40881348 202.81233215]
[176.13168335 191.88618469]
[161.77577209 187.91667175]
[157.95661926 172.56333923]
[147.67948914 161.63719177]
[137.40237427 150.71104431]
[127.12524414 139.78489685]
[116.84812164 128.85874939]
[106.57099152 117.93260193]
[92.09184265 117.38439941]
[82.16446686 106.83009338]
[82.50286102 92.34452057]
[72.22573090 81.41837311]
[57.25576782 87.20655060]
[41.24887085 86.82026672]
[26.64585304 80.34787750]
[15.66216564 68.80355072]
[9.95179844 53.96844101]
[10.35825825 38.11592102]
[16.79009819 23.66321373]
[6.29223347 12.94897747]
[-2.00187206 8.97705936]
[-4.30771399 1.90748465]
[-14.58483982 -9.01866245]
[-31.30331230 -6.64876127]
[-46.00490952 -14.61208630]
[-53.01299286 -29.60945511]
[-49.75547791 -45.67060852]
[-60.25334167 -56.38484192]
[-70.75120544 -67.09907532]
[-81.24906921 -77.81331635]
[-91.74693298 -88.52754974]
[-98.09452057 -90.69986725]
[-101.79544067 -95.11232758]
[-102.44333649 -99.89945221]
[-112.49544525 -111.03295898]
[-122.54756165 -122.16647339]
[-132.59967041 -133.29998779]
[-140.72486877 -137.60690308]
[-142.74043274 -144.76464844]
[-152.56333923 -156.10089111]
[-168.34326172 -156.97822571]
[-178.81857300 -168.81221008]
[-177.77445984 -184.58197021]
[-165.83036804 -194.93157959]
[-150.07252502 -193.72079468]
[-139.84977722 -181.66795349]
[-141.22709656 -165.92379761]
[-131.40419006 -154.58755493]
[-121.46615601 -143.35209656]
[-111.41404724 -132.21858215]
[-101.36193848 -121.08507538]
[-91.30982971 -109.95156097]
[-81.03269958 -99.02541351]
[-70.53483582 -88.31118011]
[-60.03697205 -77.59694672]
[-49.53910828 -66.88270569]
[-39.04124069 -56.16847229]
[-26.03862572 -59.34063721]
[-13.06670094 -55.62925339]
[-3.55792975 -45.90472031]
[-0.08349669 -32.64299774]
[-3.65869284 -19.29578781]
[6.61843300 -8.36964130]
[17.00646782 2.45111275]
[27.50433350 13.16534805]
[40.34469604 7.42726469]
[54.40305328 6.42441940]
[67.98545074 10.29816532]
[79.44826508 18.60101891]
[87.39710236 30.34824562]
[90.85639954 44.13462830]
[89.38912964 58.30253601]
[83.15187836 71.14125061]
[93.42900848 82.06739807]
[107.90815735 82.61560059]
[117.83553314 93.16990662]
[117.49713898 107.65547943]
[127.77426910 118.58162689]
[138.05139160 129.50776672]
[148.32852173 140.43391418]
[158.60563660 151.36006165]
[168.88276672 162.28620911]
[183.97377014 167.03724670]
[187.05783081 181.60906982]
[197.33494568 192.53521729]
[207.72299194 203.35597229]
[218.22085571 214.07020569]
[228.71871948 224.78443909]
[239.21658325 235.49867249]
[249.71444702 246.21290588]
[260.21231079 256.92715454]
[270.71017456 267.64138794]
[286.28356934 267.96893311]
[296.77725220 278.98425293]
[296.36901855 293.82907104]
[306.86688232 304.54330444]
[317.36474609 315.25753784]
[327.86260986 325.97177124]
[338.68334961 336.35980225]
[349.81686401 346.41192627]
[360.95037842 356.46401978]
[372.08389282 366.51614380]
[383.21740723 376.56823730]
[394.35092163 386.62036133]
[405.48443604 396.67245483]
[416.61795044 406.72457886]
[427.75146484 416.77667236]
[438.88497925 426.82879639]
[454.31301880 430.33395386]
[458.57455444 444.60592651]
[469.70806885 454.65802002]
[480.84158325 464.71014404]
[491.97506714 474.76223755]
[507.12905884 471.42507935]
[521.33691406 477.66336060]
[529.13543701 491.07836914]
[527.52600098 506.51174927]
[517.12738037 518.02905273]
[501.93807983 521.20166016]
[487.79870605 514.80957031]
[480.14614868 501.31076050]
[481.92297363 485.89575195]
[470.78945923 475.84365845]
[459.65594482 465.79153442]
[448.52243042 455.73944092]
[433.89074707 452.95324707]
[428.83285522 437.96231079]
[417.69934082 427.91018677]
[406.56582642 417.85809326]
[395.43231201 407.80596924]
[384.29882812 397.75387573]
[373.16531372 387.70175171]
[362.03179932 377.64965820]
[350.89828491 367.59753418]
[339.76477051 357.54544067]
[328.63125610 347.49331665]
[325.05206299 347.33020020]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 114]
[3 113]
[4 112]
[5 111]
[8 108]
[9 107]
[10 106]
[11 105]
[12 104]
[13 103]
[14 102]
[16 101]
[17 100]
[19 98]
[20 97]
[21 96]
[22 95]
[23 94]
[24 93]
[27 90]
[28 89]
[35 81]
[36 80]
[38 79]
[39 78]
[43 73]
[44 72]
[45 71]
[46 70]
[47 69]
[50 68]
[51 67]
[52 66]
[53 65]
[55 64]
[56 63]
[115 152]
[116 151]
[117 150]
[118 149]
[119 148]
[120 147]
[121 146]
[122 145]
[123 144]
[124 143]
[126 141]
[127 140]
[128 139]
[129 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
