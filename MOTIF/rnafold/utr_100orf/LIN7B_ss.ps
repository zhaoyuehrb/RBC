%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGGCGCCAGGGCAGGCGGGCGGCUGGCAGCUGUGGCGCCGACAUGGCUGCGCUGGUGGAGCCGCUGGGGCUGGAGCGGGACGUGUCCCGGGCGGUUGAGCUCCUCGAGCGGCUCCAGCGCAGCGGGGAGCUGCCGCCGCAGA\
) } def
/len { sequence length } bind def

/coor [
[-276.44546509 379.08767700]
[-293.67697144 379.76321411]
[-308.82006836 371.69955444]
[-321.23538208 380.11734009]
[-333.65072632 388.53515625]
[-346.06607056 396.95297241]
[-358.48138428 405.37075806]
[-370.89672852 413.78857422]
[-383.31207275 422.20639038]
[-395.72741699 430.62417603]
[-402.80758667 444.77273560]
[-417.68386841 445.51104736]
[-430.09921265 453.92886353]
[-442.51455688 462.34664917]
[-445.72882080 474.88784790]
[-456.30459595 481.63485718]
[-468.24200439 479.41021729]
[-480.83679199 487.55706787]
[-488.22180176 501.54891968]
[-503.11062622 501.96475220]
[-515.70538330 510.11163330]
[-525.72088623 523.79107666]
[-541.63824463 517.95385742]
[-540.43554688 501.04263306]
[-523.85223389 497.51684570]
[-511.25747681 489.36996460]
[-504.77331543 475.96084595]
[-488.98364258 474.96228027]
[-476.38885498 466.81542969]
[-469.29165649 450.80017090]
[-450.93234253 449.93133545]
[-438.51702881 441.51351929]
[-426.10168457 433.09570312]
[-419.90954590 419.54925537]
[-404.14520264 418.20886230]
[-391.72988892 409.79104614]
[-379.31454468 401.37322998]
[-366.89920044 392.95544434]
[-354.48385620 384.53762817]
[-342.06854248 376.11981201]
[-329.65319824 367.70202637]
[-317.23785400 359.28421021]
[-319.50485229 346.77340698]
[-316.83688354 334.29400635]
[-309.59954834 323.72637939]
[-298.84967041 316.67678833]
[-286.18109131 314.23306274]
[-273.48843384 316.79696655]
[-262.68371582 324.01867676]
[-249.91540527 316.14657593]
[-237.14706421 308.27447510]
[-224.37873840 300.40240479]
[-211.61041260 292.53030396]
[-204.83726501 279.26480103]
[-189.02966309 278.60855103]
[-176.26133728 270.73648071]
[-163.49301147 262.86437988]
[-150.72468567 254.99229431]
[-137.95634460 247.12020874]
[-125.18801880 239.24812317]
[-122.10116577 221.25877380]
[-106.62222290 211.00044250]
[-88.23390961 215.31187439]
[-75.81857300 206.89407349]
[-63.40323639 198.47625732]
[-50.98790359 190.05845642]
[-38.57256699 181.64065552]
[-26.15723228 173.22283936]
[-23.54785156 161.36361694]
[-13.20917511 154.25857544]
[-0.40787730 156.19236755]
[12.18691063 148.04551697]
[24.78170013 139.89865112]
[37.37648773 131.75180054]
[49.97127533 123.60493469]
[62.56606293 115.45807648]
[75.16085052 107.31121826]
[87.75563812 99.16436005]
[98.07113647 88.27442932]
[105.52417755 75.25704956]
[112.97721863 62.23966980]
[120.43025970 49.22229004]
[119.82999420 32.83412933]
[133.86430359 24.35061073]
[148.09590149 32.49884796]
[147.88453674 48.89663315]
[133.44764709 56.67533112]
[125.99459839 69.69271088]
[118.54155731 82.71009064]
[111.08850861 95.72747040]
[115.62731934 101.69816589]
[130.50767517 99.80738831]
[124.70493317 113.63956451]
[129.24374390 119.61026001]
[143.78053284 115.91139984]
[155.24661255 105.01003265]
[169.48880005 109.36997986]
[184.02560425 105.67111206]
[198.56239319 101.97225189]
[213.09918213 98.27339172]
[227.63598633 94.57453156]
[241.49502563 84.80912018]
[254.71536255 95.42321014]
[248.17582703 111.06517029]
[231.33483887 109.11132812]
[216.79804993 112.81018829]
[202.26126099 116.50904846]
[187.72445679 120.20790863]
[173.18766785 123.90676880]
[162.76136780 134.54356384]
[147.47940063 130.44819641]
[132.94259644 134.14704895]
[95.90249634 111.75914764]
[83.30770874 119.90600586]
[70.71292114 128.05287170]
[58.11813354 136.19972229]
[45.52334595 144.34658813]
[32.92855835 152.49343872]
[20.33376884 160.64030457]
[7.73898125 168.78715515]
[-0.22437683 185.35229492]
[-17.73942757 185.63818359]
[-30.15476227 194.05598450]
[-42.57009506 202.47378540]
[-54.98543167 210.89160156]
[-67.40076447 219.30940247]
[-79.81610107 227.72720337]
[-79.74935150 239.70370483]
[-85.44505310 250.10234070]
[-95.36959076 256.36627197]
[-106.96681976 257.02023315]
[-117.31593323 252.01644897]
[-130.08425903 259.88854980]
[-142.85260010 267.76062012]
[-155.62092590 275.63272095]
[-168.38925171 283.50479126]
[-181.15757751 291.37689209]
[-188.84400940 305.20544434]
[-203.73832703 305.29864502]
[-216.50665283 313.17074585]
[-229.27497864 321.04281616]
[-242.04331970 328.91491699]
[-254.81164551 336.78698730]
[-253.86894226 354.27194214]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 42]
[4 41]
[5 40]
[6 39]
[7 38]
[8 37]
[9 36]
[10 35]
[12 33]
[13 32]
[14 31]
[17 29]
[18 28]
[20 26]
[21 25]
[49 143]
[50 142]
[51 141]
[52 140]
[53 139]
[55 137]
[56 136]
[57 135]
[58 134]
[59 133]
[60 132]
[63 127]
[64 126]
[65 125]
[66 124]
[67 123]
[68 122]
[71 120]
[72 119]
[73 118]
[74 117]
[75 116]
[76 115]
[77 114]
[78 113]
[79 90]
[80 89]
[81 88]
[82 87]
[94 112]
[95 111]
[97 109]
[98 108]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
