%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUACACCUGCUGGCUGCCAUGGCUGAGGUGGGCCGUACCGGGAUCAGCUACCCAGGCGCGCUUCUCCCACAGGGCUUCUGGGCUGCGGUCGAAGUGUGGCUGGAGAGGCCGCAGGUGG\
) } def
/len { sequence length } bind def

/coor [
[86.68987274 311.95645142]
[72.65786743 304.17941284]
[70.13158417 288.33648682]
[81.04896545 276.58105469]
[81.84059143 261.60195923]
[82.63222504 246.62286377]
[83.42385101 231.64376831]
[84.21548462 216.66467285]
[85.00711060 201.68557739]
[85.79874420 186.70648193]
[82.97412872 179.77400208]
[86.81414032 171.34402466]
[88.00089264 156.39103699]
[89.18765259 141.43806458]
[90.37440491 126.48507690]
[84.21433258 123.34361267]
[79.00474548 118.79656219]
[75.05934143 113.11773682]
[72.61566925 106.64905548]
[71.82087708 99.78002167]
[57.39348984 95.67507172]
[42.96610641 91.57012939]
[28.53872108 87.46518707]
[14.11133766 83.36023712]
[-0.31604740 79.25529480]
[-14.74343204 75.15035248]
[-29.79771042 83.94118500]
[-46.24612808 79.27700043]
[-54.12871552 64.48541260]
[-68.65943146 60.76273727]
[-83.19014740 57.04006195]
[-96.65990448 65.30693054]
[-112.01036072 61.54673004]
[-120.13435364 47.99032211]
[-116.21207428 32.68048096]
[-102.57052612 24.70026398]
[-87.30301666 28.78419495]
[-79.46746826 42.50934601]
[-64.93675232 46.23202133]
[-50.40604019 49.95470047]
[-40.27845383 41.87113571]
[-27.14620399 41.12470627]
[-15.83677292 48.21607208]
[-10.63848686 60.72296524]
[3.78889751 64.82791138]
[18.21628189 68.93285370]
[32.64366531 73.03779602]
[47.07105255 77.14274597]
[61.49843597 81.24768829]
[75.92581940 85.35263062]
[95.18802643 72.23390198]
[117.74138641 78.10582733]
[129.94609070 69.38543701]
[142.15078735 60.66504669]
[154.35548401 51.94465256]
[161.08580017 37.62636185]
[175.93946838 36.52267075]
[188.14416504 27.80227852]
[200.34886169 19.08188629]
[212.55357361 10.36149406]
[224.75827026 1.64110219]
[236.96296692 -7.07928991]
[249.16767883 -15.79968262]
[261.37237549 -24.52007484]
[264.09716797 -39.85673904]
[276.59869385 -48.52659988]
[291.20306396 -45.83442307]
[303.40777588 -54.55481339]
[310.13809204 -68.87310791]
[324.99172974 -69.97679901]
[337.19644165 -78.69718933]
[349.40115356 -87.41757965]
[347.83688354 -102.69660950]
[354.13635254 -116.70418549]
[366.60501099 -125.67235565]
[381.88885498 -127.18871307]
[395.87661743 -120.84536743]
[404.80566406 -108.34865570]
[406.27410889 -93.06011963]
[399.88696289 -79.09230804]
[387.36230469 -70.20248413]
[372.06924438 -68.78197479]
[358.12152100 -75.21287537]
[345.91683960 -66.49248505]
[333.71212769 -57.77209473]
[327.85476685 -44.07754517]
[312.12814331 -42.35011292]
[299.92346191 -33.62971878]
[297.73794556 -18.94097900]
[285.48486328 -9.92340183]
[270.09277344 -12.31537247]
[257.88806152 -3.59498000]
[245.68336487 5.12541246]
[233.47866821 13.84580421]
[221.27395630 22.56619644]
[209.06925964 31.28658867]
[196.86456299 40.00698090]
[184.65985107 48.72737503]
[178.80250549 62.42192459]
[163.07588196 64.14935303]
[150.87118530 72.86975098]
[138.66647339 81.59014130]
[126.46177673 90.31053162]
[128.08554077 102.30526733]
[124.52762604 113.87468719]
[116.44447327 122.88429260]
[105.32738495 127.67183685]
[104.14063263 142.62481689]
[102.95387268 157.57778931]
[101.76712036 172.53077698]
[100.77783966 187.49812317]
[99.98620605 202.47721863]
[99.19458008 217.45631409]
[98.40294647 232.43540955]
[97.61132050 247.41450500]
[96.81968689 262.39358521]
[96.02806091 277.37268066]
[105.64556122 290.21337891]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 117]
[5 116]
[6 115]
[7 114]
[8 113]
[9 112]
[10 111]
[12 110]
[13 109]
[14 108]
[15 107]
[20 50]
[21 49]
[22 48]
[23 47]
[24 46]
[25 45]
[26 44]
[29 40]
[30 39]
[31 38]
[52 103]
[53 102]
[54 101]
[55 100]
[57 98]
[58 97]
[59 96]
[60 95]
[61 94]
[62 93]
[63 92]
[64 91]
[67 88]
[68 87]
[70 85]
[71 84]
[72 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
