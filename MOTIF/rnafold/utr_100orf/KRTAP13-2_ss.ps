%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:37:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCUGAACUCACAUCUCCCGUCAACAUGUCCUACAACUGCUGCUCUGGAAACUUCUCCUCCCGCUCCUGUGGUGACUACCUGCGCUACCCAGCAUCCUCACGUGGCUUUUCCUACCCCAGCAAUC\
) } def
/len { sequence length } bind def

/coor [
[85.18090820 254.41192627]
[87.25959778 238.91311646]
[98.84918213 228.41474915]
[98.10737610 213.43310547]
[97.36557007 198.45146179]
[96.62376404 183.46981812]
[87.61822510 182.61537170]
[78.75788116 180.79220581]
[70.14660645 178.02168274]
[61.88539505 174.33630371]
[54.07110596 169.77926636]
[46.79536819 164.40400696]
[40.14349747 158.27355957]
[34.19349289 151.45980835]
[29.01512146 144.04266357]
[24.66910362 136.10906982]
[21.20640182 127.75206757]
[18.66761589 119.06965637]
[17.08251572 110.16363525]
[16.46969032 101.13844299]
[16.83632469 92.09989166]
[18.17811775 83.15398407]
[20.47933769 74.40560913]
[23.71300125 65.95734406]
[27.84119034 57.90825653]
[32.81549835 50.35272980]
[38.57759857 43.37935638]
[45.05992508 37.06990814]
[52.18646622 31.49836159]
[44.74008560 18.47716904]
[37.29370880 5.45597744]
[29.68684959 -7.47212076]
[21.92067719 -20.30514717]
[14.15450382 -33.13817215]
[6.38833094 -45.97119904]
[-1.37784195 -58.80422592]
[-16.71653175 -60.22927094]
[-28.14142227 -70.29531860]
[-31.40969276 -84.98484802]
[-25.47254181 -98.61893463]
[-33.23871613 -111.45195770]
[-46.18573761 -109.95922089]
[-58.68008423 -113.49794006]
[-68.84760284 -121.50010681]
[-75.17737579 -132.73103333]
[-76.74616241 -145.47972107]
[-73.35295105 -157.81956482]
[-65.54388428 -167.89941406]
[-72.66591644 -181.10081482]
[-79.78794861 -194.30220032]
[-94.99925232 -198.59075928]
[-102.64979553 -212.41989136]
[-98.20064545 -227.58500671]
[-84.29140472 -235.08891296]
[-69.17417908 -230.47967529]
[-61.81775284 -216.49188232]
[-66.58655548 -201.42422485]
[-59.46452713 -188.22283936]
[-52.34249496 -175.02145386]
[-35.21511841 -175.18930054]
[-20.25308990 -166.67195129]
[-11.56519222 -151.70611572]
[-11.58855629 -134.31304932]
[-20.40568924 -119.21813202]
[-12.63951588 -106.38510895]
[2.19301677 -105.32022858]
[13.69035435 -95.61068726]
[17.30805779 -80.81996155]
[11.45518398 -66.57039642]
[19.22135735 -53.73737335]
[26.98752975 -40.90434647]
[34.75370407 -28.07131958]
[42.51987457 -15.23829365]
[48.74143219 -11.10024166]
[50.31489944 -1.99040210]
[57.76128006 11.03078938]
[65.20765686 24.05198097]
[90.47478485 17.00675392]
[116.68106079 18.14432907]
[141.24264526 27.35254669]
[161.73788452 43.72351456]
[176.14599609 65.64311981]
[190.31733704 60.72647476]
[204.48866272 55.80982971]
[208.86169434 40.92170715]
[221.17109680 31.47404861]
[236.68365479 31.09967613]
[249.43447876 39.94253922]
[254.52059937 54.60238266]
[249.98631287 69.44219208]
[237.57514954 78.75576019]
[222.05944824 78.96183014]
[209.40530396 69.98116302]
[195.23397827 74.89780426]
[181.06263733 79.81444550]
[182.75926208 88.61964417]
[183.50230408 97.55597687]
[183.28320312 106.52046204]
[182.10447693 115.40982056]
[179.97972107 124.12162018]
[176.93341064 132.55548096]
[173.00064087 140.61422729]
[168.22673035 148.20500183]
[179.65087891 157.92553711]
[191.07501221 167.64608765]
[202.49916077 177.36662292]
[218.23028564 175.84774780]
[230.37460327 185.96166992]
[231.72708130 201.70797729]
[221.48532104 213.74467468]
[205.72560120 214.93060303]
[193.79785156 204.56216431]
[192.77861023 188.79077148]
[181.35447693 179.07022095]
[169.93032837 169.34968567]
[158.50617981 159.62915039]
[144.63725281 170.61248779]
[128.76640320 178.42897034]
[111.60540771 182.72801208]
[112.34721375 197.70965576]
[113.08901978 212.69129944]
[113.83082581 227.67294312]
[126.40081024 236.97506714]
[130.00041199 252.19271851]
[122.92998505 266.14059448]
[108.52799225 272.23294067]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 122]
[4 121]
[5 120]
[6 119]
[29 77]
[30 76]
[31 75]
[32 73]
[33 72]
[34 71]
[35 70]
[36 69]
[40 65]
[41 64]
[48 59]
[49 58]
[50 57]
[82 95]
[83 94]
[84 93]
[103 116]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
