%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:34:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGGGGCGGGGCCUCCGCCACCACCUCAGCUGCGGACCGAGGCGAGAUGGCGGCCACCGAGGGGGUCGGGGAGGCUGCGCAAGGGGGCGAGCCCGGGCAGCCGGCGCAACCCCCGCCCCAGCCGCACCCACCGCCGCCCCAGCAGC\
) } def
/len { sequence length } bind def

/coor [
[80.11770630 252.75329590]
[74.11849213 238.67253113]
[75.36166382 223.41758728]
[83.56155396 210.49395752]
[96.83388519 202.87138367]
[96.20153809 187.88470459]
[95.56919098 172.89804077]
[94.93684387 157.91137695]
[94.30449677 142.92471313]
[93.67214966 127.93804932]
[93.03979492 112.95138550]
[82.94812012 101.85372925]
[68.08876801 99.80441284]
[53.22941589 97.75510406]
[38.37006378 95.70579529]
[23.51071358 93.65648651]
[8.65136242 91.60717010]
[-6.20798874 89.55786133]
[-21.16716385 88.45192719]
[-36.16632843 88.29380035]
[-51.16549683 88.13566589]
[-65.04647064 95.72705841]
[-77.69146729 87.85601044]
[-92.69063568 87.69788361]
[-107.68979645 87.53974915]
[-121.57077026 95.13114166]
[-134.21577454 87.26010132]
[-149.21493530 87.10196686]
[-164.21409607 86.94383240]
[-172.89602661 89.99891663]
[-179.52696228 86.62092590]
[-194.51945496 86.14659882]
[-209.51196289 85.67227936]
[-223.54989624 92.96932983]
[-236.02613831 84.83344269]
[-251.01863098 84.35911560]
[-267.04104614 89.90158081]
[-276.80233765 76.03964233]
[-266.18432617 62.82244873]
[-250.54431152 69.36662292]
[-235.55181885 69.84094238]
[-222.58624268 62.50996780]
[-209.03762817 70.67977905]
[-194.04513550 71.15410614]
[-179.05264282 71.62842560]
[-164.05596924 71.94467163]
[-149.05680847 72.10279846]
[-134.05763245 72.26093292]
[-121.24950409 64.65823364]
[-107.53166962 72.54058838]
[-92.53250122 72.69871521]
[-77.53333282 72.85684967]
[-64.72520447 65.25415039]
[-51.00736618 73.13649750]
[-36.00819778 73.29463196]
[-21.00903320 73.45276642]
[-30.35450935 61.71981430]
[-28.86005402 46.79444885]
[-17.37382507 37.14734650]
[-2.41467404 38.25359344]
[7.52753973 49.48535156]
[6.81024885 64.46819305]
[-4.15867805 74.69850922]
[10.70067310 76.74781799]
[25.56002426 78.79713440]
[40.41937637 80.84644318]
[55.27872849 82.89575195]
[70.13807678 84.94506836]
[84.99742889 86.99437714]
[112.49277496 79.52962494]
[125.83626556 72.67753601]
[139.17976379 65.82543945]
[144.19949341 49.10154724]
[159.44595337 41.30536270]
[175.30632019 46.80632019]
[188.50238037 39.67443085]
[201.69844055 32.54254150]
[214.89451599 25.41065025]
[228.09057617 18.27875900]
[237.33493042 2.38946533]
[254.82054138 3.48826623]
[267.86331177 -3.92025065]
[271.59350586 -9.51129723]
[276.81646729 -11.96015167]
[281.61581421 -11.35286331]
[294.95928955 -18.20495605]
[308.30279541 -25.05704880]
[321.64627075 -31.90914154]
[334.98977661 -38.76123428]
[337.62347412 -52.01153946]
[347.28201294 -61.17606354]
[360.26626587 -63.05510330]
[371.77917480 -57.18184662]
[385.26416016 -63.75109863]
[398.67916870 -70.46214294]
[412.02264404 -77.31423187]
[425.36614990 -84.16632843]
[438.70962524 -91.01841736]
[447.13815308 -105.08583832]
[463.52853394 -104.54972839]
[471.01977539 -89.96160126]
[461.90551758 -76.32846832]
[445.56173706 -77.67492676]
[432.21823120 -70.82283020]
[418.87472534 -63.97074127]
[405.53125000 -57.11864853]
[400.98706055 -51.22539902]
[391.83340454 -50.26610565]
[378.34841919 -43.69685745]
[373.57803345 -27.60167885]
[358.35845947 -19.75308609]
[341.84185791 -25.41774178]
[328.49838257 -18.56564903]
[315.15487671 -11.71355534]
[301.81140137 -4.86146259]
[288.46789551 1.99063039]
[275.27182007 9.12252045]
[262.22906494 16.53103828]
[258.69125366 28.14299583]
[247.82797241 34.40853119]
[235.22245789 31.47482491]
[222.02639771 38.60671616]
[208.83033752 45.73860550]
[195.63426208 52.87049484]
[182.43820190 60.00238419]
[180.50343323 72.78124237]
[171.41096497 82.23893738]
[158.33515930 84.74884796]
[146.03186035 79.16893768]
[132.68835449 86.02102661]
[119.34486389 92.87312317]
[134.07008362 95.73107147]
[140.26844788 109.39051056]
[132.72288513 122.35446930]
[117.78437805 123.71137238]
[108.02646637 112.31903839]
[108.65881348 127.30570221]
[109.29116058 142.29237366]
[109.92350769 157.27903748]
[110.55585480 172.26570129]
[111.18820190 187.25236511]
[111.82054901 202.23902893]
[125.68782043 208.71647644]
[134.94723511 220.90344238]
[137.47102356 235.99943542]
[132.67927551 250.53550720]
[121.67306519 261.17138672]
[106.98155212 265.46304321]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 142]
[6 141]
[7 140]
[8 139]
[9 138]
[10 137]
[11 136]
[12 69]
[13 68]
[14 67]
[15 66]
[16 65]
[17 64]
[18 63]
[19 56]
[20 55]
[21 54]
[23 52]
[24 51]
[25 50]
[27 48]
[28 47]
[29 46]
[31 45]
[32 44]
[33 43]
[35 41]
[36 40]
[70 131]
[71 130]
[72 129]
[75 125]
[76 124]
[77 123]
[78 122]
[79 121]
[81 118]
[82 117]
[85 116]
[86 115]
[87 114]
[88 113]
[89 112]
[93 109]
[94 108]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
