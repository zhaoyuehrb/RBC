%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:32:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCCCUCCUGCUUCCGUUGCUAGGGACGCUUCGGCCGAGGAUACCGCAAUGGAUCAGGAAGAGGGGCUGAAGGCCUUGGACAAUAUUGUCACUCAAUUCAACGCCUAUGAAGAUUUCCUGGACUCGCAGAUCACUACUGUGGACUUGU\
) } def
/len { sequence length } bind def

/coor [
[61.29090118 126.54189301]
[71.46929932 115.52371216]
[85.88346100 111.38111877]
[70.93607330 112.63628387]
[55.98867798 113.89144897]
[41.04128647 115.14662170]
[26.15956497 117.02661896]
[11.36962414 119.52815247]
[-3.42031598 122.02967834]
[-18.21025658 124.53121185]
[-33.00019836 127.03274536]
[-41.12839508 137.10308838]
[-53.54546738 138.85224915]
[-63.48106384 131.87985229]
[-78.32015228 134.07110596]
[-93.15923309 136.26234436]
[-107.99832153 138.45359802]
[-122.83740234 140.64483643]
[-137.67648315 142.83609009]
[-152.51557922 145.02732849]
[-167.35466003 147.21858215]
[-172.85206604 151.08111572]
[-178.60505676 151.47665405]
[-182.85969543 149.17732239]
[-197.77752686 150.74523926]
[-203.78430176 163.19279480]
[-215.07752991 170.97093201]
[-228.63250732 172.12683105]
[-240.88273621 166.46415710]
[-248.65832520 155.56651306]
[-263.60571289 156.82167053]
[-278.55310059 158.07684326]
[-293.50048828 159.33201599]
[-306.65051270 169.13044739]
[-321.60208130 162.39379883]
[-322.97433472 146.05216980]
[-309.35559082 136.91641235]
[-294.75567627 144.38461304]
[-279.80828857 143.12945557]
[-264.86087036 141.87428284]
[-249.91349792 140.61911011]
[-241.89106750 126.33194733]
[-226.79217529 119.55210876]
[-210.46029663 123.11962891]
[-199.34545898 135.82742310]
[-184.42762756 134.25949097]
[-169.54589844 132.37948608]
[-154.70681763 130.18824768]
[-139.86773682 127.99700165]
[-125.02864838 125.80575562]
[-110.18956757 123.61450958]
[-95.35047913 121.42326355]
[-80.51139832 119.23201752]
[-65.67230988 117.04077148]
[-52.56842804 105.41040039]
[-35.50172806 112.24280548]
[-20.71178818 109.74127197]
[-5.92184734 107.23973846]
[8.86809349 104.73821259]
[23.65803337 102.23667908]
[25.39840889 99.95922852]
[28.17553139 98.25799561]
[31.76555443 97.54275513]
[35.79655838 98.13125610]
[39.78611755 100.19922638]
[54.73350906 98.94406128]
[69.68090057 97.68888855]
[84.62829590 96.43372345]
[86.22817230 90.00365448]
[90.56719971 84.37126923]
[97.21959686 80.70722198]
[105.26436615 79.95012665]
[113.82506561 67.63288879]
[122.38577271 55.31565094]
[130.94647217 42.99841309]
[132.46894836 27.25062943]
[146.08604431 21.21542168]
[154.64674377 8.89818382]
[163.20745850 -3.41905403]
[170.70745850 -16.40943527]
[177.09414673 -29.98184013]
[183.48083496 -43.55424500]
[189.86752319 -57.12665176]
[187.95683289 -73.41410828]
[201.26672363 -82.99423981]
[216.10511780 -76.01182556]
[217.20755005 -59.64977264]
[203.43992615 -50.73996353]
[197.05323792 -37.16755676]
[190.66654968 -23.59515190]
[184.27986145 -10.02274609]
[198.23313904 -15.52782631]
[212.79695129 -11.93677139]
[222.59156799 -0.57607460]
[223.99897766 14.35775185]
[216.49931335 27.34832382]
[202.86283875 33.59707260]
[188.12673950 30.79577827]
[177.73434448 19.97921181]
[175.52468872 5.14164972]
[166.96398926 17.45888710]
[158.40328979 29.77612495]
[157.49313354 44.64289856]
[143.26371765 51.55911636]
[134.70300293 63.87635422]
[126.14230347 76.19358826]
[117.58160400 88.51083374]
[130.99952698 81.80565643]
[144.41744995 75.10048676]
[154.72654724 64.20449829]
[168.22575378 57.66452026]
[183.16609192 56.32790375]
[197.61181641 60.36781311]
[209.69131470 69.26083374]
[217.83952332 81.85475159]
[221.00071716 96.51786041]
[218.76535034 111.35035706]
[211.42303467 124.43051147]
[199.92506409 134.06359863]
[185.76113892 139.00154114]
[170.76638794 138.60455322]
[156.88359070 132.92407227]
[145.91328430 122.69857788]
[132.10081482 116.84915161]
[118.28834534 110.99972534]
[127.60556030 122.75512695]
[136.92277527 134.51052856]
[146.23999023 146.26593018]
[155.55720520 158.02133179]
[164.87443542 169.77673340]
[180.50991821 170.03247070]
[192.28907776 180.31767273]
[194.65014648 195.77598572]
[186.47830200 209.10845947]
[171.63203430 214.01991272]
[157.12130737 208.19131470]
[149.79762268 194.37474060]
[153.11903381 179.09394836]
[143.80180359 167.33854675]
[134.48458862 155.58314514]
[125.16737366 143.82774353]
[115.85015869 132.07234192]
[106.53294373 120.31694794]
[113.38078308 133.66262817]
[112.31516266 148.62472534]
[103.64503479 160.86518860]
[89.88419342 166.83505249]
[75.02240753 164.80342102]
[63.36866760 155.35937500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 68]
[4 67]
[5 66]
[6 65]
[7 60]
[8 59]
[9 58]
[10 57]
[11 56]
[14 54]
[15 53]
[16 52]
[17 51]
[18 50]
[19 49]
[20 48]
[21 47]
[24 46]
[25 45]
[30 41]
[31 40]
[32 39]
[33 38]
[72 107]
[73 106]
[74 105]
[75 104]
[77 102]
[78 101]
[79 100]
[80 91]
[81 90]
[82 89]
[83 88]
[125 143]
[126 142]
[127 141]
[128 140]
[129 139]
[130 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
