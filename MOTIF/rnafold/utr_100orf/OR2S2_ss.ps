%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:59:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCAAAAAGCCUGAUGCGCUGCUCAGUACUUUGCUGAUGGCAGAGGGGAUAUCACAUGGAAAAAGCCAAUGAGACCUCCCCUGUGAUGGGGUUCGUUCUCCUGAGGCUCUCUGCCCACCCAGAGCUGGAAAAGACAUUCUUCGUGCUCAUCCUGC\
) } def
/len { sequence length } bind def

/coor [
[105.32480621 263.76229858]
[92.85604095 255.42385864]
[85.14042664 242.56036377]
[83.65483093 227.63410950]
[88.68362427 213.50219727]
[99.26422882 202.86965942]
[113.37135315 197.77172852]
[128.30470276 199.18420410]
[141.20602417 206.83695984]
[135.08670044 193.14192200]
[128.96737671 179.44688416]
[122.71134949 165.81376648]
[116.31922913 152.24392700]
[109.92710876 138.67407227]
[98.57794952 140.65626526]
[86.91939545 139.31552124]
[75.92155457 134.64151001]
[66.53362274 126.90604401]
[59.60221863 116.64981079]
[55.79577637 104.64555359]
[41.42274857 108.93695068]
[27.04972076 113.22834778]
[12.67669392 117.51974487]
[-1.60758984 122.09786987]
[-15.79741096 126.96089172]
[-29.98723221 131.82391357]
[-44.17705536 136.68693542]
[-58.36687469 141.54995728]
[-72.55669403 146.41297913]
[-85.58009338 157.26780701]
[-99.61595154 147.75828552]
[-94.36357880 131.63845825]
[-77.41971588 132.22315979]
[-63.22989655 127.36013794]
[-49.04007339 122.49711609]
[-34.85025406 117.63409424]
[-20.66043091 112.77107239]
[-6.47061062 107.90805054]
[-3.58423090 104.03926849]
[1.78641129 101.97512054]
[8.38529682 103.14672089]
[22.75832367 98.85532379]
[37.13135147 94.56392670]
[51.50437927 90.27252960]
[56.65034485 76.18285370]
[48.42629623 63.63832855]
[40.20224762 51.09380722]
[31.97819710 38.54928970]
[23.75414658 26.00476646]
[15.53009701 13.46024609]
[0.31500894 10.12275505]
[-7.84664583 -2.71632814]
[-4.57109213 -17.20102119]
[-12.79514217 -29.74554253]
[-26.83207703 -37.04451752]
[-27.33934402 -51.93048096]
[-35.56339264 -64.47499847]
[-43.78744507 -77.01952362]
[-52.13658905 -89.48113251]
[-60.60999298 -101.85858917]
[-76.18849945 -104.52047729]
[-85.25362396 -117.46648407]
[-82.42718506 -133.01597595]
[-69.38605499 -141.94372559]
[-53.86731339 -138.95303345]
[-45.07794952 -125.81825256]
[-48.23253632 -110.33199310]
[-39.75913239 -97.95453644]
[-33.34970856 -94.19061279]
[-31.24292183 -85.24357605]
[-23.01887321 -72.69905090]
[-14.79482269 -60.15452957]
[-1.34612644 -53.75282669]
[-0.25062120 -37.96959305]
[7.97342873 -25.42507172]
[22.56273270 -22.65238190]
[31.08178902 -10.04760838]
[28.07461739 5.23619604]
[36.29866791 17.78071785]
[44.52271652 30.32523727]
[52.74676895 42.86975861]
[60.97081757 55.41427994]
[69.19487000 67.95880127]
[76.36894226 62.14670181]
[84.61997986 57.92244720]
[93.60009003 55.48107147]
[102.92712402 54.94207382]
[112.20094299 56.34367371]
[121.02056885 59.64050674]
[130.45648193 47.98017120]
[139.89239502 36.31983566]
[149.32832336 24.65949631]
[147.42204285 8.97059536]
[157.23345947 -3.41938496]
[172.94163513 -5.15968847]
[185.22718811 4.78217602]
[186.80131531 20.50787735]
[176.73011780 32.68763351]
[160.98866272 34.09541321]
[151.55273438 45.75575256]
[142.11682129 57.41608810]
[132.68090820 69.07642365]
[141.03004456 81.53804016]
[155.40307617 77.24664307]
[162.78021240 71.76341248]
[170.10676575 73.01627350]
[184.56277466 69.01332092]
[199.01879883 65.01036835]
[208.14356995 51.81499100]
[224.15850830 50.86564255]
[234.77832031 62.89058304]
[231.85639954 78.66530609]
[217.63418579 86.08879089]
[203.02174377 79.46638489]
[188.56573486 83.46933746]
[174.10971069 87.47228241]
[159.69447327 91.61966705]
[145.32144165 95.91106415]
[142.24716187 110.96250916]
[134.54138184 123.51704407]
[123.49695587 132.28195190]
[129.88906860 145.85180664]
[136.28118896 159.42164612]
[142.80577087 165.89605713]
[142.66241455 173.32756042]
[148.78173828 187.02259827]
[154.90106201 200.71763611]
[162.61662292 213.58114624]
[171.81735229 225.42794800]
[181.01806641 237.27474976]
[196.45129395 239.38504028]
[205.61337280 251.53044128]
[203.50642395 266.23065186]
[212.70713806 278.07748413]
[220.48791504 282.97109985]
[221.97059631 290.25460815]
[230.93243408 302.28314209]
[239.89427185 314.31167603]
[255.49703979 318.04437256]
[262.17614746 332.63098145]
[254.80792236 346.88189697]
[239.04466248 349.86505127]
[226.97857666 339.29202271]
[227.86575317 323.27349854]
[218.90391541 311.24496460]
[209.94207764 299.21646118]
[200.86033630 287.27819824]
[191.65962219 275.43139648]
[176.89533997 273.83407593]
[167.39573669 261.95077515]
[169.17126465 246.47547913]
[159.97053528 234.62866211]
[150.76982117 222.78186035]
[151.44671631 237.76658630]
[145.66166687 251.60614014]
[134.52200317 261.65142822]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 127]
[10 126]
[11 125]
[12 123]
[13 122]
[14 121]
[20 44]
[21 43]
[22 42]
[23 41]
[24 38]
[25 37]
[26 36]
[27 35]
[28 34]
[29 33]
[45 83]
[46 82]
[47 81]
[48 80]
[49 79]
[50 78]
[53 75]
[54 74]
[56 72]
[57 71]
[58 70]
[59 68]
[60 67]
[89 102]
[90 101]
[91 100]
[92 99]
[103 118]
[104 117]
[106 116]
[107 115]
[108 114]
[128 153]
[129 152]
[130 151]
[133 148]
[134 147]
[136 146]
[137 145]
[138 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
