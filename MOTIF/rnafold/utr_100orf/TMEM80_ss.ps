%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:09:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAUGUCCCCGAGGCCGAAUGCUCCCGAACGUCGGUUCUCCACCUCUUCCCUUCCGAAAGUGCCCGAGCGGUGCCGGACGGACUAAUCGGGCCUCGGCCGUGGCUCGGACGUCCGCUC\
) } def
/len { sequence length } bind def

/coor [
[125.00967407 470.38165283]
[129.97935486 455.77667236]
[142.07038879 446.19488525]
[140.48933411 431.27844238]
[138.90827942 416.36199951]
[137.32722473 401.44555664]
[135.74617004 386.52911377]
[134.16511536 371.61267090]
[131.99476624 356.77050781]
[129.23852539 342.02590942]
[126.48228455 327.28134155]
[116.53809357 316.19247437]
[121.60787964 301.20556641]
[118.85163116 286.46096802]
[116.09539032 271.71636963]
[113.33914948 256.97177124]
[110.58290863 242.22717285]
[107.82666016 227.48257446]
[97.90983582 224.09132385]
[90.28273010 216.78479004]
[86.40975189 206.87088013]
[87.07425690 196.16645813]
[92.22122955 186.66441345]
[100.95475006 180.16264343]
[99.37369537 165.24620056]
[97.79264069 150.32975769]
[96.21158600 135.41331482]
[94.63053131 120.49687958]
[81.58484650 110.48023224]
[79.63546753 94.14857483]
[89.95703125 81.34277344]
[87.98278046 66.47326660]
[86.00852966 51.60375595]
[76.52220917 38.94199371]
[82.51707458 25.30708313]
[80.54282379 10.43757248]
[78.56857300 -4.43193769]
[76.59432220 -19.30144691]
[64.32923889 -28.90381622]
[62.53889084 -44.01173782]
[71.76886749 -55.64544296]
[69.79461670 -70.51495361]
[67.82036591 -85.38446808]
[65.84611511 -100.25397491]
[56.35979462 -112.91574097]
[62.35466385 -126.55065155]
[60.38041306 -141.42016602]
[58.40616226 -156.28967285]
[43.55795288 -159.25773621]
[30.47925186 -166.88835144]
[20.58873558 -178.35380554]
[14.95925522 -192.41038513]
[14.20145226 -207.53337097]
[18.39752769 -222.08230591]
[27.09232521 -234.47904968]
[39.34269714 -243.37889099]
[53.81981277 -247.81643677]
[68.95330811 -247.31034851]
[83.10160828 -241.91549683]
[94.73001099 -232.21710205]
[102.57716370 -219.26716614]
[105.79185486 -204.47039795]
[104.02538300 -189.43182373]
[97.46936798 -175.78274536]
[86.83495331 -165.00370789]
[73.27567291 -158.26391602]
[75.24992371 -143.39440918]
[77.22417450 -128.52490234]
[86.56928253 -116.92670441]
[80.71562958 -102.22822571]
[82.68988037 -87.35871887]
[84.66413116 -72.48920441]
[86.63838196 -57.61969376]
[98.58431244 -48.79755020]
[100.79830933 -33.74587631]
[91.46383667 -21.27569771]
[93.43808746 -6.40618801]
[95.41233826 8.46332264]
[97.38658905 23.33283234]
[106.73169708 34.93102646]
[100.87803650 49.62950516]
[102.85228729 64.49901581]
[104.82653809 79.36853027]
[115.79063416 85.87169647]
[121.03916931 97.48872375]
[118.67239380 110.01473999]
[109.54697418 118.91582489]
[111.12802887 133.83226013]
[112.70908356 148.74870300]
[114.29013824 163.66514587]
[115.87119293 178.58158875]
[132.12695312 190.18473816]
[134.77110291 209.67831421]
[122.57125854 224.72633362]
[125.32749939 239.47093201]
[128.08374023 254.21553040]
[130.83998108 268.96011353]
[133.59623718 283.70471191]
[136.35247803 298.44931030]
[146.49380493 310.59280396]
[141.22688293 324.52508545]
[143.98312378 339.26968384]
[146.73936462 354.01428223]
[150.31314087 358.16137695]
[151.70809937 362.80758667]
[151.11407471 367.00518799]
[149.08155823 370.03161621]
[150.66261292 384.94805908]
[152.24366760 399.86450195]
[153.82472229 414.78094482]
[155.40577698 429.69738770]
[156.98683167 444.61383057]
[170.81785583 451.44802856]
[178.73880005 464.68670654]
[178.22212219 480.10540771]
[169.43270874 492.78411865]
[155.17520142 498.67709351]
[139.99913025 495.90390015]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 112]
[4 111]
[5 110]
[6 109]
[7 108]
[8 107]
[9 103]
[10 102]
[11 101]
[13 99]
[14 98]
[15 97]
[16 96]
[17 95]
[18 94]
[24 91]
[25 90]
[26 89]
[27 88]
[28 87]
[31 83]
[32 82]
[33 81]
[35 79]
[36 78]
[37 77]
[38 76]
[41 73]
[42 72]
[43 71]
[44 70]
[46 68]
[47 67]
[48 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
