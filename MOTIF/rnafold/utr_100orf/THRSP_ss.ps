%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGUGUCAGAGGAAGCAACCAUGCAGGUGCUAACCAAGCGUUACCCCAAGAACUGCCUGCUGACCGUCAUGGACCGGUAUGCAGCCGAGGUGCACAACAUGGAGCAGGUGGUGAUGAUCC\
) } def
/len { sequence length } bind def

/coor [
[23.88059807 209.71353149]
[19.06242371 215.34999084]
[13.30650139 220.01301575]
[6.80596972 223.54960632]
[-0.22167669 225.84448242]
[-7.54186487 226.82392883]
[-14.91077137 226.45800781]
[-22.08344460 224.76161194]
[-28.82194901 221.79376221]
[-34.90325165 217.65568542]
[-40.12661362 212.48719788]
[-44.32020950 206.46214294]
[-58.48754883 211.39027405]
[-70.12368774 225.59078979]
[-87.19942474 221.76898193]
[-101.23517609 227.06027222]
[-115.27092743 232.35154724]
[-129.30668640 237.64282227]
[-136.33323669 243.66801453]
[-143.77253723 242.88455200]
[-157.93988037 247.81268311]
[-166.19348145 261.56976318]
[-182.11367798 263.55136108]
[-193.48786926 252.23731995]
[-191.59074402 236.30683899]
[-177.87760925 227.98039246]
[-162.86801147 233.64533997]
[-148.70066833 228.71720886]
[-134.59796143 223.60707092]
[-120.56221008 218.31579590]
[-106.52645874 213.02450562]
[-92.49070740 207.73323059]
[-87.16905212 196.78753662]
[-75.42260742 192.30351257]
[-63.41568375 197.22294617]
[-49.24834442 192.29479980]
[-45.62981796 168.39967346]
[-28.92499924 150.79141235]
[-5.04994202 145.87861633]
[17.44073868 155.54284668]
[29.20253563 146.23370361]
[40.96433258 136.92456055]
[52.72612762 127.61541748]
[64.48792267 118.30627441]
[76.24972534 108.99713135]
[88.01152039 99.68798828]
[73.05084991 98.60243988]
[60.94320297 89.74779510]
[55.37460327 75.81974030]
[58.04034805 61.05851364]
[68.12888336 49.95799637]
[82.56887054 45.89761353]
[96.96422577 50.11349487]
[106.93245697 61.32217407]
[109.43884277 76.11128998]
[103.72118378 89.97743225]
[117.30671692 83.61871338]
[130.89224243 77.26000214]
[144.47778320 70.90128326]
[158.06332397 64.54257202]
[171.64884949 58.18385315]
[185.23439026 51.82513809]
[189.44444275 46.47949219]
[194.91668701 44.45875549]
[199.68693542 45.50900269]
[213.58180237 39.85808563]
[227.47665405 34.20716476]
[241.37152100 28.55624771]
[247.95713806 10.89248943]
[265.02328491 3.66013598]
[281.71609497 10.96022797]
[295.30160522 4.60151196]
[304.52050781 -8.25627041]
[319.32757568 -6.64385366]
[332.91311646 -13.00256920]
[346.49865723 -19.36128616]
[359.91595459 -26.06769180]
[373.15612793 -33.11734390]
[386.39633179 -40.16699600]
[392.43450928 -55.03036499]
[407.86013794 -59.43830490]
[420.83996582 -50.00942612]
[421.41696167 -33.97675323]
[409.14855957 -23.63918304]
[393.44598389 -26.92681313]
[380.20578003 -19.87716103]
[366.96560669 -12.82750988]
[364.71627808 -8.49174881]
[359.65911865 -5.58418608]
[352.85736084 -5.77575111]
[339.27182007 0.58296460]
[325.68630981 6.94168043]
[317.43911743 19.34464455]
[301.66033936 18.18704605]
[288.07479858 24.54576111]
[286.56860352 35.99428940]
[279.60745239 45.35805893]
[268.85833740 50.19790649]
[256.99264526 49.18226242]
[247.02243042 42.45110703]
[233.12757874 48.10202408]
[219.23271179 53.75294495]
[205.33786011 59.40386200]
[191.59309387 65.41067505]
[178.00756836 71.76938629]
[164.42202759 78.12810516]
[150.83650208 84.48681641]
[137.25096130 90.84553528]
[123.66542816 97.20425415]
[110.07989502 103.56296539]
[97.32066345 111.44979095]
[85.55886841 120.75892639]
[73.79706573 130.06806946]
[62.03527069 139.37721252]
[50.27347565 148.68635559]
[38.51167679 157.99549866]
[26.74987984 167.30464172]
[29.57540321 174.20860291]
[31.09857941 181.50361633]
[31.27139282 188.94650269]
[30.09079742 196.28967285]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 36]
[13 35]
[15 32]
[16 31]
[17 30]
[18 29]
[20 28]
[21 27]
[40 117]
[41 116]
[42 115]
[43 114]
[44 113]
[45 112]
[46 111]
[56 110]
[57 109]
[58 108]
[59 107]
[60 106]
[61 105]
[62 104]
[65 103]
[66 102]
[67 101]
[68 100]
[71 95]
[72 94]
[74 92]
[75 91]
[76 90]
[77 87]
[78 86]
[79 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
