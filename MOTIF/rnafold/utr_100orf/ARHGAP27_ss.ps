%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAACGCCGCGGCUGCGAUGGCGGCGGACGUGGUGGGGGACGUGUACGUGCUGGUGGAGCACCCCUUCGAGUACACCGGCAAGGACGGGCGCCGCGUGGCCAUCCGGCCGAAUGAGC\
) } def
/len { sequence length } bind def

/coor [
[86.79832458 180.93898010]
[76.16941833 170.35473633]
[70.48937988 156.47175598]
[70.65119171 141.47262573]
[76.62940216 127.71540833]
[87.48431396 117.36283112]
[74.05686951 124.04890442]
[60.62941742 130.73498535]
[47.20196915 137.42105103]
[33.77452087 144.10713196]
[20.34707069 150.79321289]
[6.91962099 157.47927856]
[-6.23260260 164.69171143]
[-19.08897972 172.41915894]
[-31.94535446 180.14662170]
[-44.80173111 187.87406921]
[-57.65810776 195.60153198]
[-65.12886047 210.20016479]
[-81.51847076 210.75926208]
[-89.96672058 196.70368958]
[-81.78276825 182.49259949]
[-65.38556671 182.74514771]
[-52.52919006 175.01770020]
[-39.67281342 167.29023743]
[-26.81643486 159.56278992]
[-13.96005917 151.83532715]
[-12.76979160 148.38951111]
[-9.77798843 145.38583374]
[-5.22959900 143.69909668]
[0.23354578 144.05183411]
[13.66099548 137.36575317]
[27.08844376 130.67968750]
[40.51589203 123.99360657]
[53.94334412 117.30753326]
[67.37079620 110.62145996]
[80.79824066 103.93537903]
[65.83146667 104.93324280]
[54.05925369 95.63727570]
[51.55961990 80.84701538]
[59.62313080 68.19869995]
[74.08657837 64.22268677]
[87.48245239 70.97180176]
[92.89443970 84.96350861]
[93.29039001 69.96873474]
[93.68634796 54.97396088]
[94.08229828 39.97919083]
[94.47825623 24.98441696]
[94.87420654 9.98964310]
[87.50388336 -4.00996065]
[95.57444763 -16.52855682]
[95.97039795 -31.52333069]
[85.37351990 -42.94015884]
[85.98868561 -58.14134979]
[96.93818665 -68.17349243]
[97.33413696 -83.16826630]
[94.40406799 -91.95604706]
[97.94365692 -98.55218506]
[98.73529053 -113.53128052]
[90.81849670 -127.89291382]
[99.52808380 -141.78805542]
[115.90437317 -140.92259216]
[123.10085297 -126.18682098]
[113.71438599 -112.73965454]
[112.92276001 -97.76055145]
[112.32891083 -82.77231598]
[111.93296051 -67.77754211]
[122.33775330 -57.18151474]
[122.14981079 -41.96903992]
[110.96517181 -31.12737656]
[110.56922150 -16.13260460]
[117.96786499 -3.20552659]
[109.86898041 10.38559628]
[109.47302246 25.38036919]
[109.07707214 40.37514114]
[108.68112183 55.36991501]
[108.28516388 70.36469269]
[107.88921356 85.35945892]
[116.76994324 97.44799805]
[131.19732666 101.55294037]
[145.62471008 105.65788269]
[160.05209351 109.76283264]
[171.76071167 104.15968323]
[183.74879456 107.96560669]
[189.68768311 118.59413910]
[204.00169373 123.07849121]
[218.31568909 127.56284332]
[233.79785156 124.30505371]
[243.62994385 135.49340820]
[257.94393921 139.97775269]
[273.42611694 136.71997070]
[283.25820923 147.90830994]
[297.57220459 152.39266968]
[311.88619995 156.87701416]
[328.80853271 155.84242249]
[334.48727417 171.81703186]
[320.70901489 181.69606018]
[307.40185547 171.19102478]
[293.08782959 166.70666504]
[278.77383423 162.22232056]
[264.31552124 165.80085754]
[253.45959473 154.29176331]
[239.14558411 149.80740356]
[224.68725586 153.38594055]
[213.83132935 141.87684631]
[199.51733398 137.39248657]
[185.20333862 132.90814209]
[168.37649536 137.69738770]
[155.94715881 124.19021606]
[141.51976013 120.08526611]
[127.09238434 115.98032379]
[112.66500092 111.87538147]
[126.84306335 116.77257538]
[138.00343323 126.79485321]
[144.39155579 140.36659241]
[145.00314331 155.35411072]
[139.74201965 169.40119934]
[129.43533325 180.29946899]
[115.70341492 186.33555603]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 36]
[7 35]
[8 34]
[9 33]
[10 32]
[11 31]
[12 30]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[43 77]
[44 76]
[45 75]
[46 74]
[47 73]
[48 72]
[50 70]
[51 69]
[54 66]
[55 65]
[57 64]
[58 63]
[78 111]
[79 110]
[80 109]
[81 108]
[84 106]
[85 105]
[86 104]
[88 102]
[89 101]
[91 99]
[92 98]
[93 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
