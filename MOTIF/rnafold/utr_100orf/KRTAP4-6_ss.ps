%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUCAGCUCCUGUUGUGGUUCCGUCUGCUCUGACCAGGGCUGUGGCCUGGAGACCUGCUGCCGCCCCAGCUGCUGUCAGACCACCUGCUGCAGGACCA\
) } def
/len { sequence length } bind def

/coor [
[38.43572617 373.79479980]
[41.22441483 354.61477661]
[41.69091415 339.62203979]
[42.15741348 324.62930298]
[40.35697556 322.88726807]
[39.10040283 320.35736084]
[38.67344284 317.22937012]
[39.29349899 313.78643799]
[41.08119202 310.38082886]
[44.04040909 307.40136719]
[46.82362747 292.66183472]
[49.60684204 277.92230225]
[52.39006042 263.18280029]
[55.17327499 248.44325256]
[57.95649338 233.70373535]
[52.71506500 219.76182556]
[62.87860107 207.63693237]
[65.66181946 192.89739990]
[68.44503021 178.15786743]
[71.22824860 163.41833496]
[65.81210327 158.96771240]
[62.09695816 152.96125793]
[60.51012039 146.02552795]
[61.25479889 138.89700317]
[64.28475189 132.34388733]
[69.30566406 127.08333588]
[75.80341339 123.70299530]
[83.09661865 122.59548950]
[88.56639862 108.62832642]
[86.66234589 94.77674866]
[97.46644592 85.90190125]
[102.93621826 71.93473816]
[108.40599060 57.96757507]
[113.87576294 44.00041580]
[119.34553528 30.03325462]
[124.81530762 16.06609344]
[116.62357330 3.01995540]
[117.67230225 -12.17061901]
[127.35022736 -23.69458389]
[141.78538513 -27.26729202]
[147.25515747 -41.23445129]
[152.72492981 -55.20161438]
[158.19470215 -69.16877747]
[163.66447449 -83.13593292]
[161.49218750 -98.80730438]
[173.33775330 -107.83680725]
[178.80752563 -121.80397034]
[184.27729797 -135.77113342]
[183.63835144 -142.64215088]
[186.28282166 -147.92575073]
[190.54586792 -150.41917419]
[196.87339783 -164.01927185]
[202.98864746 -177.71611023]
[208.89015198 -191.50640869]
[204.28280640 -206.87364197]
[213.54278564 -219.97448730]
[229.56663513 -220.75910950]
[240.06224060 -208.62559509]
[236.97824097 -192.88175964]
[222.68045044 -185.60490417]
[216.77894592 -171.81460571]
[217.04600525 -164.29435730]
[210.47348022 -157.69174194]
[204.14596558 -144.09165955]
[198.24446106 -130.30136108]
[192.77468872 -116.33419800]
[187.30491638 -102.36703491]
[189.86843872 -87.69469452]
[177.63163757 -77.66616058]
[172.16186523 -63.69900131]
[166.69209290 -49.73184204]
[161.22232056 -35.76467896]
[155.75254822 -21.79751968]
[163.92262268 -9.37222672]
[163.20101929 5.65918350]
[153.65513611 17.52212906]
[138.78247070 21.53586578]
[133.31269836 35.50302505]
[127.84292603 49.47018814]
[122.37315369 63.43734741]
[116.90338135 77.40451050]
[111.43360138 91.37167358]
[113.33765411 105.22325134]
[102.53355408 114.09809875]
[97.06378174 128.06526184]
[103.47926331 151.03625488]
[85.96777344 166.20155334]
[83.18456268 180.94108582]
[80.40134430 195.68061829]
[77.61812592 210.42015076]
[82.66048431 225.41632080]
[72.69602203 236.48693848]
[69.91280365 251.22647095]
[67.12958527 265.96600342]
[64.34637451 280.70553589]
[61.56315613 295.44506836]
[58.77993774 310.18460083]
[57.15015793 325.09579468]
[56.68365860 340.08853149]
[56.21715927 355.08126831]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 100]
[3 99]
[4 98]
[10 97]
[11 96]
[12 95]
[13 94]
[14 93]
[15 92]
[17 90]
[18 89]
[19 88]
[20 87]
[28 85]
[29 84]
[31 82]
[32 81]
[33 80]
[34 79]
[35 78]
[36 77]
[40 73]
[41 72]
[42 71]
[43 70]
[44 69]
[46 67]
[47 66]
[48 65]
[51 64]
[52 63]
[53 61]
[54 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
