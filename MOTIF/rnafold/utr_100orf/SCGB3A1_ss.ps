%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:34:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGCGCGCCCCGAGCCCCCGCGCCAUGAAGCUCGCCGCCCUCCUGGGGCUCUGCGUGGCCCUGUCCUGCAGCUCCGCUGCUGCUUUCUUAGUGGGCUCGGCCAAGCCUGUGGCCCAGCCUGUCG\
) } def
/len { sequence length } bind def

/coor [
[72.81977844 117.29740906]
[69.08046722 109.05246735]
[54.09911346 109.80015564]
[39.11775970 110.54784393]
[24.13640594 111.29553223]
[9.15505314 112.04322052]
[-5.82630110 112.79090881]
[-20.80765533 113.53859711]
[-24.56466866 116.18540192]
[-28.56940460 117.31198883]
[-32.29090881 117.03656006]
[-35.29719925 115.64445496]
[-37.30303192 113.53859711]
[-52.28438568 112.79090881]
[-67.26573944 112.04322052]
[-82.24709320 111.29553223]
[-97.22844696 110.54784393]
[-112.20980072 109.80015564]
[-127.19115448 109.05246735]
[-142.14921570 110.17341614]
[-156.85179138 113.14560699]
[-168.84523010 123.46395111]
[-182.85327148 118.40191650]
[-197.55586243 121.37410736]
[-206.08532715 134.67913818]
[-221.54228210 137.97430420]
[-234.75637817 129.30464172]
[-237.88793945 113.81371307]
[-229.07905579 100.69200897]
[-213.55589294 97.72440338]
[-200.52804565 106.67152405]
[-185.82545471 103.69933319]
[-174.88365173 93.59358215]
[-159.82398987 98.44302368]
[-145.12139893 95.47082520]
[-158.25898743 88.23178101]
[-166.15725708 75.47962952]
[-166.78565979 60.49280167]
[-159.98263550 47.12422562]
[-147.49716187 38.81080627]
[-132.53910828 37.68982697]
[-118.95400238 44.04947281]
[-110.23442841 56.25476074]
[-108.62207794 71.16785431]
[-114.53146362 84.95477295]
[-126.44346619 94.07111359]
[-111.46211243 94.81880188]
[-96.48075867 95.56649017]
[-81.49940491 96.31417847]
[-66.51805115 97.06186676]
[-51.53669739 97.80955505]
[-36.55534363 98.55724335]
[-21.55534363 98.55724335]
[-6.57398939 97.80955505]
[8.40736485 97.06186676]
[23.38871765 96.31417847]
[38.37007141 95.56649017]
[53.35142517 94.81880188]
[68.33277893 94.07111359]
[77.58582306 76.85762787]
[95.08624268 68.15946960]
[114.39469910 71.17713928]
[124.03651428 59.68647385]
[133.67832947 48.19580460]
[127.86526489 32.77251053]
[130.57603455 16.60935402]
[140.98342896 4.07038641]
[156.19511414 -1.50682867]
[172.05691528 1.30068231]
[181.40927124 -10.42679024]
[190.76161194 -22.15426254]
[200.11396790 -33.88173294]
[209.46630859 -45.60920715]
[207.44795227 -61.28408432]
[217.17057800 -73.74386597]
[232.86592102 -75.59638214]
[245.22221375 -65.74256897]
[246.90869141 -50.02851868]
[236.92478943 -37.77709961]
[221.19378662 -36.25685883]
[211.84143066 -24.52938652]
[202.48908997 -12.80191517]
[193.13673401 -1.07444286]
[183.78439331 10.65302944]
[189.61624146 23.06698799]
[189.50643921 36.84849930]
[183.41918945 49.28722000]
[172.49989319 57.91207123]
[158.86001587 60.98209000]
[145.16899109 57.83761978]
[135.52717590 69.32828522]
[125.88536072 80.81895447]
[132.01487732 96.39279175]
[129.50454712 112.94010162]
[141.46153259 121.99716949]
[153.41851807 131.05422974]
[165.37550354 140.11129761]
[177.33250427 149.16836548]
[193.00488281 151.33331299]
[198.47839355 165.18576050]
[210.43537903 174.24281311]
[222.39236450 183.29988098]
[234.34934998 192.35694885]
[246.30633545 201.41401672]
[261.92602539 199.00550842]
[274.62432861 208.41447449]
[276.86755371 224.05876160]
[267.32485962 236.65687561]
[251.65774536 238.73457336]
[239.16122437 229.05921936]
[237.24926758 213.37100220]
[225.29228210 204.31393433]
[213.33529663 195.25688171]
[201.37831116 186.19981384]
[189.42132568 177.14274597]
[174.60418701 175.62561035]
[168.27543640 161.12535095]
[156.31845093 152.06828308]
[144.36145020 143.01121521]
[132.40446472 133.95416260]
[120.44747925 124.89708710]
[112.71337891 129.60295105]
[103.97537231 131.97125244]
[94.92346191 131.81498718]
[86.27241516 129.14648438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 59]
[3 58]
[4 57]
[5 56]
[6 55]
[7 54]
[8 53]
[13 52]
[14 51]
[15 50]
[16 49]
[17 48]
[18 47]
[19 46]
[20 35]
[21 34]
[23 32]
[24 31]
[62 92]
[63 91]
[64 90]
[69 84]
[70 83]
[71 82]
[72 81]
[73 80]
[94 121]
[95 120]
[96 119]
[97 118]
[98 117]
[100 115]
[101 114]
[102 113]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
