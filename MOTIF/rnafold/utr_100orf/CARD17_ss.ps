%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:08:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGGAGAGAAAAGCCAUGGCCGACAAGGUCCUGAAGGAGAAGAGAAAGCAGUUUAUCCGUUCAGUGGGCGAAGGUACAAUAAAUGGCUUACUGGGUGAAUUAUUGGAGACAAGGG\
) } def
/len { sequence length } bind def

/coor [
[124.18332672 262.53976440]
[110.99890137 269.69314575]
[96.10073090 271.43801880]
[81.62017059 267.52478027]
[69.62883759 258.51324463]
[61.84220886 245.69261169]
[59.37425613 230.89703369]
[62.57804871 216.24316406]
[70.99524689 203.82742310]
[83.42168427 195.42601013]
[98.07960510 192.24082947]
[112.87203979 194.72758484]
[125.68407440 202.53169250]
[120.22166443 188.56164551]
[114.75925446 174.59159851]
[109.29684448 160.62156677]
[103.83443451 146.65151978]
[98.37203217 132.68147278]
[92.90962219 118.71143341]
[79.78817749 111.44316864]
[65.04791260 114.22250366]
[50.30765152 117.00183105]
[35.56739044 119.78116608]
[25.37050819 132.16676331]
[9.33229351 131.77276611]
[-0.24410841 118.90139771]
[3.98749733 103.42648315]
[18.78098488 97.21904755]
[32.78805923 105.04090118]
[47.52832031 102.26157379]
[62.26858139 99.48223877]
[77.00884247 96.70291138]
[83.38830566 83.12710571]
[76.12004089 70.00566101]
[68.85177612 56.88421249]
[61.58351517 43.76276779]
[54.31525421 30.64132118]
[46.87296677 17.61778831]
[39.25798035 4.69447660]
[31.64299393 -8.22883511]
[19.29913521 -12.24847126]
[13.24453545 -23.27481651]
[16.27789116 -35.06769562]
[9.00962734 -48.18914032]
[1.74136460 -61.31058502]
[-13.67535973 -63.07247162]
[-25.08936310 -73.58437347]
[-28.11172676 -88.80426025]
[-21.58028984 -102.87977600]
[-8.00652599 -110.39858246]
[7.39017820 -108.46956635]
[18.68947601 -97.83445740]
[21.54655457 -82.58267975]
[14.86281109 -68.57884979]
[22.13107300 -55.45740509]
[29.39933777 -42.33595657]
[44.88410568 -34.19564056]
[44.56630707 -15.84382153]
[52.18129349 -2.92051053]
[59.79627991 10.00280094]
[65.98202515 14.22205257]
[67.43669891 23.37305641]
[74.70496368 36.49450302]
[81.97322845 49.61595154]
[89.24148560 62.73739624]
[96.50975037 75.85884094]
[111.37704468 77.84972382]
[121.84151459 67.10287476]
[125.92551422 51.81786346]
[140.34790039 48.09710693]
[150.81237793 37.35025787]
[154.31889343 21.33038139]
[170.02569580 16.61569023]
[181.77497864 28.05625343]
[177.48007202 43.88299942]
[161.55921936 47.81472778]
[151.09474182 58.56158066]
[147.75924683 73.07790375]
[132.58836365 77.56734467]
[122.12389374 88.31420135]
[122.66903687 96.09963989]
[120.76304626 103.03560638]
[116.98780823 108.43217468]
[112.09192657 111.87384796]
[106.87966156 113.24902344]
[112.34207153 127.21907043]
[117.80448151 141.18911743]
[123.26689148 155.15914917]
[128.72929382 169.12919617]
[134.19171143 183.09924316]
[139.65411377 197.06927490]
[147.31758118 203.23843384]
[148.65214539 211.88522339]
[158.52981567 223.17378235]
[174.06002808 224.37805176]
[183.91658020 235.96697998]
[182.67277527 250.76524353]
[192.55044556 262.05380249]
[207.24661255 257.93243408]
[222.27407837 260.60406494]
[234.64915466 269.53829956]
[241.91476440 282.96118164]
[242.62829590 298.20761108]
[236.64808655 312.25039673]
[225.16149902 322.30133057]
[210.44923401 326.36480713]
[195.43238831 323.63400269]
[183.09259033 314.65112305]
[175.87991333 301.19970703]
[175.22642517 285.95059204]
[181.26188660 271.93145752]
[171.38421631 260.64291382]
[156.55178833 259.91159058]
[146.37362671 248.60411072]
[147.24125671 233.05145264]
[137.36358643 221.76289368]
[138.38125610 236.72833252]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 91]
[14 90]
[15 89]
[16 88]
[17 87]
[18 86]
[19 85]
[20 32]
[21 31]
[22 30]
[23 29]
[33 66]
[34 65]
[35 64]
[36 63]
[37 62]
[38 60]
[39 59]
[40 58]
[43 56]
[44 55]
[45 54]
[67 80]
[68 79]
[70 77]
[71 76]
[93 116]
[94 115]
[97 112]
[98 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
