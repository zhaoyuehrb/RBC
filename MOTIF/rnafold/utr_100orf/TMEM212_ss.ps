%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:33:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUUUGAGACCAAGGCCUCAAGCCACCAAGGAAAAUGAAGGGCCUCUACCAGGCUGCUGGCCGGAUUCUUGUUACUCUGGGGAUCCUCAGUGUAUGCUCUGGAGUUAUUGCUUUCUUUCCUGUCUUUUCUUACA\
) } def
/len { sequence length } bind def

/coor [
[78.92864990 246.61976624]
[69.23991394 234.93675232]
[64.42952728 220.54145813]
[65.14807129 205.38072205]
[71.29836273 191.50489807]
[82.04862213 180.79058838]
[95.94496918 174.68681335]
[95.25222015 159.70281982]
[94.55946350 144.71882629]
[93.86671448 129.73483276]
[93.17395782 114.75083923]
[86.38481140 111.56376648]
[74.07550812 120.13587189]
[72.80651093 105.18962097]
[66.01735687 102.00254822]
[54.04710007 111.04206848]
[42.07684326 120.08158875]
[38.44522858 135.70820618]
[23.90216064 142.48158264]
[9.60383224 135.20578003]
[6.51869869 119.46215820]
[17.01341057 107.32788086]
[33.03732300 108.11132812]
[45.00757980 99.07180786]
[56.97784042 90.03229523]
[66.09219360 85.85776520]
[75.20273590 84.36291504]
[83.68715668 85.39882660]
[90.97760773 88.68721008]
[96.58580780 93.83513641]
[102.00443268 79.84805298]
[107.42305756 65.86096954]
[112.84168243 51.87388992]
[118.26030731 37.88680649]
[123.67893219 23.89972115]
[123.02928925 17.17394638]
[125.55202484 11.95520496]
[129.68435669 9.40133858]
[135.74317932 -4.32056952]
[141.80198669 -18.04247856]
[147.86080933 -31.76438522]
[153.91961670 -45.48629379]
[143.23770142 -59.34400940]
[141.00242615 -76.60832977]
[147.73413086 -92.56661224]
[161.51763916 -102.90789795]
[178.54612732 -104.88743591]
[183.96475220 -118.87451935]
[184.15805054 -128.09886169]
[189.67344666 -133.11970520]
[195.41371155 -146.97790527]
[201.15396118 -160.83609009]
[206.89421082 -174.69429016]
[212.47401428 -188.61785889]
[217.89263916 -202.60493469]
[222.82345581 -216.77134705]
[227.26055908 -231.10006714]
[231.69764709 -245.42878723]
[236.13473511 -259.75750732]
[240.57182312 -274.08621216]
[245.00892639 -288.41494751]
[243.89511108 -295.07958984]
[246.05043030 -300.46047974]
[249.99600220 -303.29437256]
[255.09010315 -317.40289307]
[260.18420410 -331.51138306]
[265.27832031 -345.61990356]
[270.37243652 -359.72842407]
[275.46652222 -373.83691406]
[280.56063843 -387.94543457]
[285.65475464 -402.05395508]
[276.83358765 -414.81979370]
[277.23437500 -430.33169556]
[286.70297241 -442.62500000]
[301.59851074 -446.97268677]
[316.19335938 -441.70297241]
[324.87551880 -428.84219360]
[324.30648804 -413.33554077]
[314.70510864 -401.14569092]
[299.76327515 -396.95983887]
[294.66915894 -382.85131836]
[289.57504272 -368.74282837]
[284.48092651 -354.63430786]
[279.38684082 -340.52578735]
[274.29272461 -326.41729736]
[269.19860840 -312.30877686]
[264.10452271 -298.20025635]
[259.33764648 -283.97784424]
[254.90054321 -269.64913940]
[250.46345520 -255.32041931]
[246.02636719 -240.99169922]
[241.58927917 -226.66297913]
[237.15217590 -212.33425903]
[238.53240967 -208.99740601]
[238.30909729 -204.81118774]
[236.09451294 -200.56312561]
[231.87973022 -197.18630981]
[226.46110535 -183.19923401]
[226.98278809 -175.75903320]
[220.75239563 -168.95404053]
[215.01214600 -155.09584045]
[209.27189636 -141.23765564]
[203.53164673 -127.37945557]
[197.95184326 -113.45589447]
[192.53321838 -99.46881104]
[201.52735901 -90.45788574]
[206.43476868 -78.65932465]
[206.48434448 -65.83403015]
[201.63291931 -53.91092300]
[192.57708740 -44.69682312]
[180.65350342 -39.60265732]
[167.64152527 -39.42747879]
[161.58271790 -25.70557022]
[155.52389526 -11.98366261]
[149.46508789 1.73824549]
[143.40626526 15.46015358]
[137.66601562 29.31834602]
[132.24739075 43.30543137]
[126.82876587 57.29251480]
[121.41014099 71.27959442]
[115.99151611 85.26667786]
[110.57289124 99.25376129]
[108.15795898 114.05809021]
[108.85070801 129.04208374]
[109.54345703 144.02607727]
[110.23621368 159.01007080]
[110.92896271 173.99406433]
[125.32921600 178.78961182]
[137.02220154 188.46629333]
[144.42655945 201.71545410]
[146.54089355 216.74522400]
[143.07926941 231.52296448]
[134.50982666 244.05009460]
[121.99153137 252.63244629]
[107.21736908 256.10931396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 127]
[8 126]
[9 125]
[10 124]
[11 123]
[15 25]
[16 24]
[17 23]
[30 122]
[31 121]
[32 120]
[33 119]
[34 118]
[35 117]
[38 116]
[39 115]
[40 114]
[41 113]
[42 112]
[47 105]
[48 104]
[50 103]
[51 102]
[52 101]
[53 100]
[54 98]
[55 97]
[56 93]
[57 92]
[58 91]
[59 90]
[60 89]
[61 88]
[64 87]
[65 86]
[66 85]
[67 84]
[68 83]
[69 82]
[70 81]
[71 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
