%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:43:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUACCCCUCAUCAACCAGCCCAGCAGCAUCUUCGGGAUUCCCAAUGGCAUUGCCCUUUGCUUUAAUGAUGGCCCUGGUGGUGCUCAGCUGCAAGUCAAGCUGCUCUCUGGGCUGUAAUCUGUCUCAAACCCACAGCCUGAAUA\
) } def
/len { sequence length } bind def

/coor [
[92.08575439 389.31082153]
[78.92146301 382.12045288]
[67.69023132 372.17764282]
[58.95673370 359.98233032]
[53.16007233 346.14764404]
[50.59169388 331.36914062]
[51.38073349 316.38992310]
[55.48751450 301.96307373]
[62.70556259 288.81393433]
[72.67196655 277.60363770]
[84.88563538 268.89578247]
[98.73249054 263.12823486]
[113.51633453 260.59094238]
[128.49388123 261.41149902]
[142.91206360 265.54861450]
[156.04598999 272.79428101]
[167.23248291 282.78109741]
[163.06321716 268.37216187]
[158.89395142 253.96322632]
[154.72470093 239.55429077]
[150.55543518 225.14537048]
[146.38618469 210.73643494]
[142.21691895 196.32749939]
[138.04765320 181.91857910]
[124.75900269 170.50497437]
[129.22079468 152.67489624]
[124.74034882 138.35966492]
[120.25990295 124.04444885]
[111.96559906 128.36965942]
[102.95137787 129.99279785]
[94.05659485 128.88026428]
[86.07523346 125.24798584]
[79.68504333 119.53148651]
[75.39019775 112.33699799]
[73.48226929 104.37857056]
[58.58864212 102.59533691]
[43.69501495 100.81211090]
[27.24940681 104.93257904]
[18.73736572 90.27033234]
[30.47023964 78.03203583]
[45.47824478 85.91847992]
[60.37187195 87.70171356]
[75.26549530 89.48493958]
[77.12996674 85.88179779]
[79.51552582 82.60033417]
[82.36782074 79.71531677]
[85.62186432 77.29248047]
[81.45260620 62.88355255]
[77.28334808 48.47462082]
[73.11408997 34.06569290]
[68.94482422 19.65676117]
[64.77556610 5.24783182]
[60.60630798 -9.16109848]
[56.43704605 -23.57002831]
[52.26778793 -37.97895813]
[38.95320892 -41.70292282]
[29.30759811 -51.45586777]
[25.78735733 -64.60125732]
[29.21306419 -77.65946198]
[38.58122635 -87.22880554]
[34.72510529 -101.72467804]
[30.86898613 -116.22055054]
[16.34466934 -121.68167877]
[7.83234930 -134.65550232]
[8.60518456 -150.15332031]
[18.36600494 -162.21589661]
[33.36157608 -166.20495605]
[47.82579422 -160.58657837]
[56.19687271 -147.52117920]
[55.25596237 -132.03266907]
[45.36486053 -120.07667542]
[49.22097778 -105.58079529]
[53.07709885 -91.08492279]
[68.54653168 -85.69417572]
[77.87004852 -72.02330780]
[77.22857666 -55.32236862]
[66.67671967 -42.14822006]
[70.84597778 -27.73928833]
[75.01523590 -13.33035851]
[79.18449402 1.07857192]
[83.35375977 15.48750210]
[87.52301788 29.89643288]
[91.69227600 44.30536270]
[95.86153412 58.71429443]
[100.03079987 73.12322235]
[118.23657990 77.24703217]
[130.67985535 93.11915588]
[142.90991211 84.43434906]
[155.13995361 75.74954987]
[167.37001038 67.06475067]
[167.40344238 51.54771042]
[176.57835388 39.03368759]
[191.36679077 34.33457947]
[206.08230591 39.25728989]
[215.06649780 51.90893555]
[214.86473083 67.42469788]
[205.55461121 79.83845520]
[190.71606445 84.37686157]
[176.05480957 79.29479980]
[163.82476807 87.97960663]
[151.59471130 96.66440582]
[139.36465454 105.34920502]
[134.57513428 119.56400299]
[139.05557251 133.87922668]
[143.53601074 148.19445801]
[154.61775208 154.88832092]
[158.02877808 166.96038818]
[152.45658875 177.74931335]
[156.62585449 192.15824890]
[160.79510498 206.56716919]
[164.96437073 220.97610474]
[169.13363647 235.38504028]
[173.30288696 249.79396057]
[177.47215271 264.20288086]
[181.64140320 278.61181641]
[191.60224915 267.39657593]
[206.51399231 269.02145386]
[213.82560730 282.11877441]
[207.38302612 295.66473389]
[192.60879517 298.25784302]
[202.68594360 309.36871338]
[212.76309204 320.47955322]
[222.84022522 331.59042358]
[238.03964233 328.94821167]
[252.24580383 334.96392822]
[260.92556763 347.71795654]
[261.30923462 363.14056396]
[253.27441406 376.31039429]
[239.38496399 383.02508545]
[224.07296753 381.14193726]
[212.22442627 371.26187134]
[207.62016296 356.53759766]
[211.72937012 341.66757202]
[201.65223694 330.55670166]
[191.57508850 319.44586182]
[181.49794006 308.33499146]
[184.12844849 323.10253906]
[183.40243530 338.08496094]
[179.35636902 352.52896118]
[172.19369507 365.70834351]
[162.27452087 376.96047974]
[150.09759521 385.71960449]
[136.27513123 391.54534912]
[121.50208282 394.14480591]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 115]
[18 114]
[19 113]
[20 112]
[21 111]
[22 110]
[23 109]
[24 108]
[26 105]
[27 104]
[28 103]
[35 43]
[36 42]
[37 41]
[47 85]
[48 84]
[49 83]
[50 82]
[51 81]
[52 80]
[53 79]
[54 78]
[55 77]
[60 73]
[61 72]
[62 71]
[87 102]
[88 101]
[89 100]
[90 99]
[120 136]
[121 135]
[122 134]
[123 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
