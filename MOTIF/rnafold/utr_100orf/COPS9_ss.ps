%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:44:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGGCGCGCGCCGGAAGCGGCUCUGAGGCCGGAAGUGAGCCUAGAGCGCCGCGGCCCCGAGAUGAAGCCGGCGGUGGACGAGAUGUUCCCCGAGGGCG\
) } def
/len { sequence length } bind def

/coor [
[211.81172180 163.01042175]
[197.27410889 146.39759827]
[192.43611145 124.79500580]
[177.74165344 121.78289795]
[163.04719543 118.77079010]
[148.35273743 115.75868225]
[133.65826416 112.74658203]
[118.96380615 109.73447418]
[104.26934814 106.72236633]
[103.76515198 114.11458588]
[99.05553436 121.23178101]
[90.44466400 126.20994568]
[77.15449524 133.16490173]
[63.86432648 140.11985779]
[50.57415390 147.07479858]
[42.25455093 161.20690918]
[25.86051559 160.79740906]
[18.25683022 146.26757812]
[27.26551056 132.56445312]
[43.61920166 133.78463745]
[56.90937042 126.82968140]
[70.19953918 119.87472534]
[83.48971558 112.91977692]
[84.65496826 97.96510315]
[72.60251617 89.03546906]
[60.55006027 80.10584259]
[51.62282944 77.44179535]
[48.26742554 70.70630646]
[36.49851227 61.40616608]
[24.72959900 52.10602188]
[12.96068478 42.80587769]
[1.04856038 33.68988800]
[-11.00389385 24.76025581]
[-27.34920692 23.43255043]
[-34.12656784 8.49938583]
[-24.36400986 -4.67727947]
[-8.10441494 -2.54242134]
[-2.07426095 12.70780087]
[9.97819328 21.63743401]
[17.35647202 23.11610985]
[22.26082802 31.03696442]
[34.02974319 40.33710861]
[45.79865646 49.63725281]
[57.56756973 58.93739319]
[69.47969818 68.05338287]
[81.53215027 76.98301697]
[93.58460236 85.91265106]
[107.28145599 92.02790833]
[121.97591400 95.04000854]
[136.67037964 98.05211639]
[151.36483765 101.06422424]
[166.05929565 104.07633209]
[180.75376892 107.08843231]
[195.44822693 110.10054016]
[199.73211670 101.83584595]
[205.62237549 94.63865662]
[212.86315918 88.81594086]
[221.14106750 84.61508179]
[230.09880066 82.21337891]
[239.35057068 81.71055603]
[248.49862671 83.12462616]
[257.15045166 86.39129639]
[264.93557739 91.36682892]
[271.52145386 97.83441925]
[276.62759399 105.51361847]
[280.03759766 114.07247162]
[281.60827637 123.14189911]
[281.27566528 132.33160400]
[279.05770874 141.24685669]
[292.12515259 148.61177063]
[305.19259644 155.97668457]
[320.24050903 151.95205688]
[333.38784790 159.60726929]
[337.13198853 173.97796631]
[350.19943237 181.34288025]
[363.26687622 188.70779419]
[379.08804321 188.74314880]
[386.37658691 201.73260498]
[399.44403076 209.09751892]
[412.51147461 216.46243286]
[425.57891846 223.82734680]
[441.35577393 220.91694641]
[453.37295532 231.54554749]
[452.41189575 247.55979919]
[439.20983887 256.67492676]
[423.89428711 251.89859009]
[418.21401978 236.89479065]
[405.14657593 229.52987671]
[392.07913208 222.16496277]
[379.01168823 214.80004883]
[364.12518311 215.29148865]
[355.90197754 201.77523804]
[342.83453369 194.41032410]
[329.76708984 187.04541016]
[315.53445435 191.28427124]
[302.17727661 184.00135803]
[297.82769775 169.04412842]
[284.76025391 161.67921448]
[271.69281006 154.31430054]
[254.18504333 167.45211792]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 54]
[4 53]
[5 52]
[6 51]
[7 50]
[8 49]
[9 48]
[12 23]
[13 22]
[14 21]
[15 20]
[24 47]
[25 46]
[26 45]
[28 44]
[29 43]
[30 42]
[31 41]
[32 39]
[33 38]
[69 99]
[70 98]
[71 97]
[74 94]
[75 93]
[76 92]
[78 90]
[79 89]
[80 88]
[81 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
