%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:11:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAACCACAGAACACCACACAGGUAUCAAUGUUUGUCCUCUUAGGGUUUUCACAGACCCAAGAGCUCCAGAAAUUCCUGUUCCUUCUGUUCCUGUUAG\
) } def
/len { sequence length } bind def

/coor [
[78.61164856 368.68392944]
[83.30561066 353.98800659]
[95.21417999 344.18035889]
[93.35269928 329.29632568]
[91.49121857 314.41226196]
[88.76953888 311.91278076]
[87.21395874 307.89596558]
[87.55902100 302.96987915]
[90.21726227 298.06262207]
[89.75077057 283.06988525]
[89.28427124 268.07711792]
[88.81777191 253.08438110]
[88.35127258 238.09164429]
[87.88477325 223.09889221]
[77.37918854 218.54002380]
[69.35851288 210.29309082]
[65.05488586 199.56837463]
[65.15087891 187.96084595]
[69.67155457 177.21301270]
[77.97480011 168.95333862]
[88.84221649 164.44947815]
[89.77475739 149.47850037]
[90.70730591 134.50750732]
[91.63984680 119.53652954]
[92.57239532 104.56554413]
[90.57808685 102.00210571]
[89.54627228 98.60801697]
[89.80444336 94.76785278]
[91.52151489 90.98797607]
[94.66532898 87.83082581]
[97.44854736 73.09129333]
[100.23175812 58.35176468]
[95.18940735 43.35559082]
[105.15386963 32.28496170]
[107.93708801 17.54543495]
[110.72029877 2.80590582]
[113.50351715 -11.93362331]
[103.38989258 -26.10251999]
[106.50405121 -42.88884735]
[120.46749115 -52.11715317]
[122.79096222 -66.93611145]
[125.11443329 -81.75506592]
[127.43791199 -96.57402802]
[129.76138306 -111.39298248]
[127.98252106 -120.53783417]
[132.39445496 -126.63375854]
[135.17767334 -141.37329102]
[137.96089172 -156.11280823]
[140.74411011 -170.85234070]
[143.52732849 -185.59187317]
[146.31054688 -200.33140564]
[140.38081360 -215.62095642]
[150.86656189 -228.22972107]
[166.98094177 -225.18690491]
[172.14686584 -209.62266541]
[161.05007935 -197.54818726]
[158.26686096 -182.80865479]
[155.48364258 -168.06912231]
[152.70042419 -153.32958984]
[149.91720581 -138.59007263]
[147.13398743 -123.85054016]
[144.58033752 -109.06951141]
[142.25686646 -94.25054932]
[139.93339539 -79.43159485]
[137.60992432 -64.61264038]
[135.28645325 -49.79368210]
[144.31228638 -40.45471573]
[146.28584290 -27.41983795]
[140.25279236 -15.47819042]
[128.24304199 -9.15040684]
[125.45983124 5.58912182]
[122.67661285 20.32865143]
[119.89339447 35.06818008]
[125.13482666 49.01008606]
[114.97129059 61.13498306]
[112.18807220 75.87451172]
[109.40485382 90.61403656]
[107.54337311 105.49808502]
[106.61083221 120.46907043]
[105.67828369 135.44004822]
[104.74574280 150.41104126]
[103.81319427 165.38201904]
[119.00127411 176.70790100]
[124.45644379 194.69845581]
[118.21444702 212.27586365]
[102.87751770 222.63240051]
[103.34401703 237.62513733]
[103.81051636 252.61788940]
[104.27701569 267.61062622]
[104.74351501 282.60336304]
[105.21000671 297.59613037]
[106.37526703 312.55078125]
[108.23674774 327.43484497]
[110.09822845 342.31887817]
[124.05541229 348.89160156]
[132.22409058 361.97885132]
[131.99766541 377.40454102]
[123.44840240 390.24642944]
[109.30432129 396.40664673]
[94.07875061 393.91955566]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 94]
[4 93]
[5 92]
[9 91]
[10 90]
[11 89]
[12 88]
[13 87]
[14 86]
[21 82]
[22 81]
[23 80]
[24 79]
[25 78]
[30 77]
[31 76]
[32 75]
[34 73]
[35 72]
[36 71]
[37 70]
[40 66]
[41 65]
[42 64]
[43 63]
[44 62]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
