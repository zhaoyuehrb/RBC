%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:52:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAAGAGCAAACCAUUCAGUGGUAUCGGAAUUUAUUUUGUUGGGACUUUCCAAAUCUCAAAAUCUUCAGAUUUUAUUCUUCUUGGGAUUCUCUGUGG\
) } def
/len { sequence length } bind def

/coor [
[79.55331421 122.56693268]
[69.58100128 101.42058563]
[54.88654327 98.40847778]
[40.19208145 95.39637756]
[25.49761772 92.38426971]
[10.80315590 89.37216187]
[-3.89130664 86.36005402]
[-18.58576965 83.34795380]
[-33.43906784 81.25521851]
[-48.39373779 80.08996582]
[-63.34840775 78.92470551]
[-78.30307770 77.75944519]
[-93.25775146 76.59419250]
[-108.14179993 78.45567322]
[-122.34886932 83.26805878]
[-136.55593872 88.08044434]
[-150.76301575 92.89282990]
[-164.97009277 97.70521545]
[-178.03211975 108.51353455]
[-192.03398132 98.95402527]
[-186.72415161 82.85302734]
[-169.78248596 83.49814606]
[-155.57540894 78.68575287]
[-141.36833191 73.87336731]
[-127.16125488 69.06098175]
[-112.95418549 64.24859619]
[-126.95462036 58.86456299]
[-137.67274475 48.37067413]
[-143.35154724 34.48718643]
[-143.06010437 19.49001884]
[-136.84619141 5.83764935]
[-125.72843933 -4.23189449]
[-111.52939606 -9.06791496]
[-96.57669067 -7.87764502]
[-83.32152557 -0.85620564]
[-73.93681335 10.84538174]
[-69.96098328 25.30887985]
[-72.04579163 40.16329193]
[-79.84947968 52.97354126]
[-92.09249115 61.63951874]
[-77.13782501 62.80477524]
[-62.18315125 63.97003555]
[-47.22848129 65.13529205]
[-32.27381134 66.30055237]
[-29.99269676 64.39244843]
[-26.75245094 63.35814667]
[-22.91589928 63.59427261]
[-18.99206543 65.34516144]
[-15.57366276 68.65348816]
[-0.87920052 71.66559601]
[13.81526184 74.67770386]
[28.50972366 77.68980408]
[43.20418549 80.70191193]
[57.89864731 83.71401978]
[72.59310913 86.72612762]
[76.60494232 80.50629425]
[81.99880981 75.43802643]
[88.45607758 71.82073212]
[95.59528351 69.86809540]
[102.99469757 69.69545746]
[110.21720123 71.31303406]
[116.83614349 74.62525177]
[122.46050262 79.43645477]
[126.75803375 85.46242523]
[129.47486877 92.34719086]
[130.45051575 99.68402863]
[129.62731934 107.03953552]
[142.91749573 113.99449158]
[158.73210144 113.53778839]
[166.42111206 126.29429626]
[179.71128845 133.24925232]
[193.00144958 140.20420837]
[206.29162598 147.15916443]
[216.92477417 141.38647461]
[228.90177917 141.54696655]
[239.16688538 147.48141479]
[245.15892029 157.57254028]
[245.44995117 169.18394470]
[258.28201294 176.95169067]
[271.11410522 184.71943665]
[283.94616699 192.48718262]
[296.77825928 200.25492859]
[313.17614746 200.05380249]
[321.31549072 214.29049683]
[312.82321167 228.31950378]
[296.43542480 227.70898438]
[289.01049805 213.08699036]
[276.17843628 205.31925964]
[263.34634399 197.55151367]
[250.51428223 189.78376770]
[237.68220520 182.01602173]
[220.36128235 187.52328491]
[204.15252686 178.62655640]
[199.33666992 160.44932556]
[186.04649353 153.49436951]
[172.75633240 146.53942871]
[159.46615601 139.58447266]
[144.60214233 140.53863525]
[135.96253967 127.28466034]
[122.67237091 120.32970428]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 55]
[3 54]
[4 53]
[5 52]
[6 51]
[7 50]
[8 49]
[9 44]
[10 43]
[11 42]
[12 41]
[13 40]
[14 26]
[15 25]
[16 24]
[17 23]
[18 22]
[67 100]
[68 99]
[70 97]
[71 96]
[72 95]
[73 94]
[78 91]
[79 90]
[80 89]
[81 88]
[82 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
