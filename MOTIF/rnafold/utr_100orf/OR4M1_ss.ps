%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:03:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAACUGCAAAUUACACCAAGGUGACAGAAUUUGUUCUCACUGGCCUAUCCCAGACUCGGGAGGUCCAACUAGUCCUAUUUGUUAUAUUUCUAUCCU\
) } def
/len { sequence length } bind def

/coor [
[132.15289307 398.18945312]
[130.75520325 383.25473022]
[129.35751343 368.31997681]
[127.95983124 353.38522339]
[126.56214142 338.45050049]
[125.16445160 323.51574707]
[123.76676178 308.58102417]
[109.03038788 297.94223022]
[106.52967072 279.62225342]
[118.26810455 264.93164062]
[115.94462585 250.11270142]
[113.62115479 235.29374695]
[111.29768372 220.47477722]
[108.97421265 205.65582275]
[106.65073395 190.83686829]
[93.32817078 184.23027039]
[86.36813354 170.88778687]
[88.62560272 155.82933044]
[99.44211578 144.86077881]
[97.11864471 130.04180908]
[80.97781372 125.14151001]
[69.36248016 111.91792297]
[66.33866882 93.83605957]
[73.57169342 76.19583893]
[60.98740387 68.03277588]
[48.40311050 59.86970901]
[35.81881714 51.70664597]
[23.23452759 43.54358292]
[16.37516212 42.78976059]
[11.73020172 39.13817596]
[10.14362144 34.46126175]
[-1.90883255 25.53162956]
[-13.96128654 16.60199738]
[-30.30659866 15.27429199]
[-37.08396149 0.34112740]
[-27.32140350 -12.83553791]
[-11.06180859 -10.70067978]
[-5.03165388 4.54954243]
[7.02080059 13.47917557]
[19.07325554 22.40880775]
[31.39758873 30.95929146]
[43.98188019 39.12235641]
[56.56617355 47.28541946]
[69.15046692 55.44847870]
[81.73475647 63.61154175]
[96.15082550 59.46701813]
[102.47834778 45.86692810]
[108.80587006 32.26683807]
[115.13339996 18.66674995]
[114.92285919 11.76930046]
[117.89069366 6.66031694]
[122.30051422 4.43675232]
[129.46130371 -8.74364853]
[136.62210083 -21.92404938]
[143.78291321 -35.10445023]
[139.05841064 -50.18605042]
[146.45591736 -64.15216827]
[161.58662415 -68.71694946]
[175.47375488 -61.17219543]
[179.87831116 -45.99407196]
[172.18714905 -32.18749237]
[156.96330261 -27.94365311]
[149.80250549 -14.76325130]
[142.64170837 -1.58285058]
[135.48091125 11.59755039]
[128.73348999 24.99427605]
[122.40596008 38.59436417]
[116.07843781 52.19445419]
[109.75090790 65.79454041]
[120.46568298 71.85604095]
[128.25622559 81.03870392]
[132.30555725 92.09434509]
[132.28895569 103.59996033]
[128.39295959 114.14036560]
[121.27008057 122.48227692]
[111.93759918 127.71834564]
[114.26107788 142.53730774]
[127.91555023 149.66903687]
[134.67344666 163.31396484]
[132.13095093 178.14636230]
[121.46969604 188.51339722]
[123.79316711 203.33235168]
[126.11663818 218.15130615]
[128.44010925 232.97026062]
[130.76358032 247.78923035]
[133.08705139 262.60818481]
[144.05540466 267.71536255]
[151.05645752 277.43438721]
[152.39906311 289.21520996]
[147.85798645 300.03710938]
[138.70150757 307.18331909]
[140.09919739 322.11807251]
[141.49688721 337.05279541]
[142.89457703 351.98754883]
[144.29226685 366.92230225]
[145.68995667 381.85702515]
[147.08764648 396.79177856]
[157.01106262 409.84771729]
[150.41734314 424.86288452]
[134.08953857 426.39093018]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 97]
[2 96]
[3 95]
[4 94]
[5 93]
[6 92]
[7 91]
[10 86]
[11 85]
[12 84]
[13 83]
[14 82]
[15 81]
[19 77]
[20 76]
[24 45]
[25 44]
[26 43]
[27 42]
[28 41]
[31 40]
[32 39]
[33 38]
[46 69]
[47 68]
[48 67]
[49 66]
[52 65]
[53 64]
[54 63]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
