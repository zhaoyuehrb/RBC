%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:40:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGGAUCUACCACCUCCUGCUUCCCAAGGACCAUGAAACUCCUGCUGCUGGCUCUUCCUAUGCUUGUGCUCCUACCCCAAGUGAUCCCAGCCUAUAGUGGUGAAAAAAAAUGCUGGAACAGAUCAGGGCACU\
) } def
/len { sequence length } bind def

/coor [
[120.48251343 329.84246826]
[118.72817993 314.94540405]
[116.97385406 300.04833984]
[115.21952057 285.15130615]
[111.27619171 278.81713867]
[113.60290527 269.88497925]
[112.19828796 254.95089722]
[110.79366302 240.01679993]
[109.38903809 225.08271790]
[97.03054810 210.28283691]
[105.45819092 192.03872681]
[103.35511780 177.18688965]
[101.25204468 162.33505249]
[80.75975800 159.30462646]
[62.39143753 149.72747803]
[48.17478180 134.66082764]
[34.79375839 141.43933105]
[21.41273117 148.21783447]
[8.03170395 154.99633789]
[5.70142412 170.33744812]
[-5.22501612 181.35527039]
[-20.54617691 183.81324768]
[-34.37076187 176.76622009]
[-41.38293076 162.92393494]
[-38.88636780 147.60900879]
[-27.84104919 136.71035767]
[-12.49412441 134.41873169]
[1.25319910 141.61531067]
[14.63422585 134.83680725]
[28.01525307 128.05830383]
[41.39627838 121.27980042]
[38.28581619 108.86486053]
[37.77595901 96.07636261]
[39.88819122 83.45320129]
[44.53350449 71.52731323]
[51.51614761 60.80124664]
[60.54187775 51.72700119]
[71.23034668 44.68695068]
[83.13116455 39.97776794]
[95.74281311 37.79788971]
[108.53386688 38.23917770]
[112.35951233 23.73523140]
[116.01486969 9.18743610]
[119.49945068 -5.40220737]
[122.98403168 -19.99184990]
[126.46861267 -34.58149338]
[129.95318604 -49.17113876]
[133.43777466 -63.76078033]
[125.42755127 -77.12020111]
[129.16925049 -91.86653137]
[141.95477295 -99.42073059]
[145.43934631 -114.01037598]
[148.92393494 -128.60002136]
[152.40850830 -143.18966675]
[141.02441406 -150.51809692]
[132.48727417 -160.99670410]
[127.62715149 -173.58419800]
[126.90962219 -187.03535461]
[130.39118958 -200.02423096]
[137.71516418 -211.27485657]
[148.14808655 -219.68656921]
[160.65322876 -224.44171143]
[173.99354553 -225.08508301]
[178.15814209 -239.49536133]
[182.32273865 -253.90563965]
[186.48733521 -268.31591797]
[190.65193176 -282.72619629]
[179.56314087 -293.27593994]
[174.65818787 -307.77420044]
[177.06420898 -322.88943481]
[186.22830200 -335.14822388]
[200.04464722 -341.73358154]
[215.33834839 -341.13229370]
[228.59500122 -333.48248291]
[236.76835632 -320.54202271]
[237.98020935 -305.28457642]
[231.95208740 -291.21615601]
[220.06922913 -281.56958008]
[205.06221008 -278.56158447]
[200.89761353 -264.15130615]
[196.73301697 -249.74104309]
[192.56842041 -235.33076477]
[188.40380859 -220.92048645]
[201.60508728 -210.90496826]
[209.99952698 -196.57565308]
[212.29063416 -180.09048462]
[208.10350037 -163.94445801]
[198.04582214 -150.59197998]
[183.61987305 -142.07379150]
[166.99815369 -139.70507812]
[163.51358032 -125.11543274]
[160.02899170 -110.52579498]
[156.54441833 -95.93614960]
[164.53623962 -83.41950226]
[161.21020508 -68.57389069]
[148.02742004 -60.27619934]
[144.54283142 -45.68655777]
[141.05825806 -31.09691429]
[137.57366943 -16.50727081]
[134.08909607 -1.91762686]
[130.60452271 12.67201710]
[132.12460327 19.97684669]
[126.86345673 27.56087303]
[123.03781128 42.06481934]
[135.50808716 48.75156784]
[146.14942932 58.07798004]
[154.41375732 69.56368256]
[159.87536621 82.61707306]
[162.25297546 96.56581116]
[161.42408752 110.69143677]
[157.43142700 124.26637268]
[150.48063660 136.59141541]
[140.92971802 147.03173828]
[129.27062988 155.04959106]
[116.10388184 160.23197937]
[118.20695496 175.08381653]
[120.31002808 189.93565369]
[129.45942688 196.03239441]
[133.60852051 205.97528076]
[131.59068298 216.33369446]
[124.32312775 223.67810059]
[125.72775269 238.61218262]
[127.13237762 253.54627991]
[128.53700256 268.48037720]
[130.11657715 283.39697266]
[131.87091064 298.29400635]
[133.62524414 313.19107056]
[135.37957764 328.08813477]
[147.93893433 337.68179321]
[149.95317078 353.35717773]
[140.22727966 365.81442261]
[124.53144836 367.66281128]
[112.17774200 357.80575562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 128]
[2 127]
[3 126]
[4 125]
[6 124]
[7 123]
[8 122]
[9 121]
[11 117]
[12 116]
[13 115]
[16 31]
[17 30]
[18 29]
[19 28]
[41 104]
[42 103]
[43 101]
[44 100]
[45 99]
[46 98]
[47 97]
[48 96]
[51 93]
[52 92]
[53 91]
[54 90]
[63 83]
[64 82]
[65 81]
[66 80]
[67 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
