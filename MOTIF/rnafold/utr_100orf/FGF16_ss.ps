%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAUCCUGGAGUUUAUCAGCCUGGCUGUGGGGCUGAUCAGCAUCCGGGGAGUGGACUCUGGCCUGUACCUAGGAAUGAAUGAGCGAGGAGAACUCUAUG\
) } def
/len { sequence length } bind def

/coor [
[94.56348419 163.15072632]
[81.35975647 156.03302002]
[73.31069183 143.37551880]
[72.46469116 128.39939880]
[79.03704071 114.91591644]
[91.35595703 106.35618591]
[76.50266266 104.26345825]
[61.64936066 102.17073059]
[46.79606247 100.07799530]
[31.94276237 97.98526764]
[17.08946419 95.89253998]
[2.20541620 94.03105927]
[-12.70578098 92.40127563]
[-27.61697960 90.77149200]
[-42.17612457 96.96356964]
[-53.98737717 87.88922882]
[-68.89857483 86.25944519]
[-83.80976868 84.62966156]
[-98.72097015 82.99987793]
[-113.63216400 81.37010193]
[-128.54336548 79.74031830]
[-143.45455933 78.11053467]
[-158.36575317 76.48075104]
[-169.53355408 87.42673492]
[-185.12841797 88.58177185]
[-197.78694153 79.40050507]
[-201.53215027 64.21803284]
[-194.59568787 50.20306396]
[-180.25271606 43.97303391]
[-165.27555847 48.46957397]
[-156.73597717 61.56955338]
[-141.82478333 63.19933701]
[-126.91358185 64.82911682]
[-112.00238037 66.45890045]
[-97.09118652 68.08868408]
[-82.17998505 69.71846771]
[-67.26879120 71.34825134]
[-52.35759354 72.97802734]
[-38.86499405 66.66938019]
[-25.98719597 75.86029053]
[-11.07599926 77.49007416]
[3.83519840 79.11985779]
[10.95173264 76.67436218]
[19.18219376 81.03923798]
[34.03549194 83.13196564]
[48.88879013 85.22470093]
[63.74209213 87.31742859]
[78.59539032 89.41015625]
[93.44868469 91.50289154]
[108.44687653 91.26961517]
[123.22790527 88.71595764]
[138.00894165 86.16230774]
[152.78996277 83.60865021]
[158.66900635 74.19361877]
[168.59915161 69.75256348]
[179.09893799 71.57156372]
[186.63581848 78.78763580]
[201.54701233 77.15785217]
[216.45820618 75.52806854]
[231.36941528 73.89828491]
[243.77671814 52.22553635]
[267.61929321 45.56719208]
[289.07888794 57.46413803]
[302.57891846 50.92587280]
[316.07894897 44.38760757]
[329.57901001 37.84933853]
[338.33407593 23.98281479]
[354.70745850 24.90196037]
[361.85559082 39.66123581]
[352.42510986 53.07756424]
[336.11724854 51.34938049]
[322.61721802 57.88764572]
[309.11718750 64.42591095]
[295.61715698 70.96417999]
[296.42547607 77.85225677]
[295.73947144 84.76691437]
[293.58529663 91.38710785]
[290.05737305 97.40425110]
[285.31433105 102.53659821]
[279.57180786 106.54241943]
[273.09277344 109.23139954]
[266.17526245 110.47367096]
[259.13894653 110.20606232]
[252.31011963 108.43531799]
[246.00672913 105.23800659]
[240.52346802 100.75725555]
[236.11808777 95.19634247]
[232.99919128 88.80948639]
[218.08799744 90.43927002]
[203.17680359 92.06904602]
[188.26559448 93.69882965]
[173.75027466 106.31303406]
[155.34361267 98.38967896]
[140.56259155 100.94333649]
[125.78155518 103.49698639]
[111.00052643 106.05064392]
[123.57911682 114.22248840]
[130.56800842 127.49484253]
[130.18859863 142.49003601]
[122.53743744 155.39196777]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 49]
[7 48]
[8 47]
[9 46]
[10 45]
[11 44]
[12 42]
[13 41]
[14 40]
[16 38]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[50 96]
[51 95]
[52 94]
[53 93]
[57 91]
[58 90]
[59 89]
[60 88]
[63 74]
[64 73]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
