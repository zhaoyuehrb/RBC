%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAACAGGAAAUCAAACACAUGCCCAAGAAUUUCUCCUCCUGGGAUUUUCAGCAACGUCAGAGAUUCAGUUCAUUCUCUUUGGGCUGUUCCUCUCCA\
) } def
/len { sequence length } bind def

/coor [
[31.23365974 382.90191650]
[34.02235031 363.72189331]
[34.48884964 348.72915649]
[34.95534515 333.73641968]
[35.42184448 318.74368286]
[27.64208984 311.79013062]
[25.01292038 301.46337891]
[28.66914177 291.21826172]
[37.59901810 284.62557983]
[38.99670792 269.69085693]
[40.39439392 254.75610352]
[41.79208374 239.82136536]
[29.95235443 249.03118896]
[14.97013569 249.76132202]
[2.29098248 241.74639893]
[-3.47663784 227.89956665]
[-0.23638059 213.25372314]
[10.83402443 203.13215637]
[25.71084023 201.21372986]
[38.98682022 208.19573975]
[45.83657837 221.54046631]
[50.86932755 207.40994263]
[55.90207672 193.27943420]
[55.16800308 185.79032898]
[61.31732941 178.79187012]
[66.78710175 164.82472229]
[72.25687408 150.85755920]
[77.72664642 136.89039612]
[83.19641876 122.92323303]
[88.66619110 108.95606995]
[77.59864044 88.46408844]
[70.03139496 75.51276398]
[62.46414948 62.56143570]
[47.44108582 58.44496918]
[39.95132446 45.20268631]
[43.96832657 30.90585899]
[36.40108490 17.95453453]
[29.24192810 11.99306297]
[28.80709648 4.48064518]
[21.64629936 -8.69975567]
[7.38652420 -16.79857445]
[7.54100800 -33.19699478]
[21.95083046 -41.02572632]
[35.79240036 -32.23124313]
[34.82669830 -15.86055374]
[41.98749924 -2.68015289]
[49.35240936 10.38729095]
[56.91965103 23.33861732]
[71.34683990 26.85881042]
[79.20559692 39.88549805]
[75.41547394 54.99419403]
[82.98271942 67.94551849]
[90.54996490 80.89684296]
[83.85616302 67.47324371]
[85.09391022 52.52439880]
[93.90433502 40.38452911]
[107.73297119 34.57342911]
[122.57038116 36.77594757]
[134.11466980 46.35349655]
[139.01870728 60.52919388]
[135.86065674 75.19297791]
[125.55612183 86.09328461]
[111.09523773 90.06972504]
[125.78969574 87.05761719]
[140.48416138 84.04551697]
[155.17861938 81.03340912]
[169.87307739 78.02130127]
[174.64894104 63.42380905]
[186.09440613 53.18188858]
[201.13070679 50.05056763]
[215.71315002 54.87215424]
[225.91914368 66.34967041]
[229.00332642 81.39571381]
[224.13604736 95.96297455]
[212.62660217 106.13294220]
[197.57096863 109.16994476]
[183.01902771 104.25703430]
[172.88519287 92.71576691]
[158.19073486 95.72786713]
[143.49626160 98.73997498]
[128.80180359 101.75208282]
[114.10733795 104.76419067]
[102.63335419 114.42584229]
[97.16358185 128.39300537]
[91.69380951 142.36016846]
[86.22403717 156.32733154]
[80.75426483 170.29449463]
[75.28449249 184.26164246]
[70.03259277 198.31217957]
[64.99983978 212.44270325]
[59.96709061 226.57321167]
[56.72682571 241.21905518]
[55.32913589 256.15380859]
[53.93144608 271.08853149]
[52.53375626 286.02328491]
[61.86306763 303.75878906]
[50.41458893 319.21017456]
[49.94808960 334.20291138]
[49.48159409 349.19564819]
[49.01509476 364.18841553]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 100]
[3 99]
[4 98]
[5 97]
[9 95]
[10 94]
[11 93]
[12 92]
[21 91]
[22 90]
[23 89]
[25 88]
[26 87]
[27 86]
[28 85]
[29 84]
[30 83]
[31 53]
[32 52]
[33 51]
[36 48]
[37 47]
[39 46]
[40 45]
[63 82]
[64 81]
[65 80]
[66 79]
[67 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
