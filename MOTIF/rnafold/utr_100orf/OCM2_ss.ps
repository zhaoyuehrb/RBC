%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:46:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGCAUCACGGACGUGCUCAGUGCUGAUGACAUUGCAGCAGCGCUCCAGGAAUGCCAAGACCCAGACACUUUUGAACCCCAAAAAUUCUUCCAGACGU\
) } def
/len { sequence length } bind def

/coor [
[161.51733398 142.49708557]
[162.04112244 130.44212341]
[147.83404541 125.62973022]
[140.35726929 126.48018646]
[133.26402283 120.44044495]
[119.21348572 115.18854523]
[105.16294861 109.93665314]
[91.03243256 104.90390015]
[76.82536316 100.09151459]
[62.78549957 106.83837128]
[48.44606018 101.75553894]
[42.10049057 88.32909393]
[27.89341545 83.51670837]
[13.68634224 78.70432281]
[-0.59385443 74.11346436]
[-14.94371986 69.74524689]
[-29.35978508 65.60071564]
[-43.83855820 61.68088913]
[-58.31733704 57.76106262]
[-72.79611206 53.84123230]
[-87.33409882 50.14704895]
[-101.92777252 46.67940521]
[-116.52145386 43.21175766]
[-131.11512756 39.74411392]
[-145.70880127 36.27647018]
[-158.14865112 45.75192642]
[-173.76631165 44.96273804]
[-185.18759155 34.28152847]
[-187.01972961 18.75164604]
[-178.39764404 5.70582199]
[-163.39241028 1.30389607]
[-149.08905029 7.62432337]
[-142.24116516 21.68279076]
[-127.64748383 25.15043640]
[-113.05381012 28.61808205]
[-98.46012878 32.08572769]
[-83.86644745 35.55337143]
[-76.50144958 34.00993347]
[-68.87628174 39.36245728]
[-54.39750671 43.28228760]
[-39.91873169 47.20211411]
[-25.43995476 51.12194443]
[-18.03051186 49.80830383]
[-10.57549953 55.39537811]
[3.77436638 59.76359940]
[11.22107887 58.68103027]
[18.49872780 64.49725342]
[32.70580292 69.30963898]
[46.91287613 74.12202454]
[60.11184692 67.31594086]
[74.58839417 71.99399567]
[81.63774872 85.88443756]
[95.84481812 90.69682312]
[104.03854370 90.09851074]
[110.41484833 95.88611603]
[124.46537781 101.13800812]
[138.51591492 106.38990784]
[152.64643860 111.42266083]
[166.85350037 116.23504639]
[178.41499329 101.84562683]
[194.48051453 92.82019806]
[212.72145081 90.43994904]
[230.50392151 95.02485657]
[245.26907349 105.89085388]
[254.90130615 121.45182037]
[258.03140259 139.45104980]
[272.81243896 142.00469971]
[287.59347534 144.55836487]
[297.72564697 135.52432251]
[311.02374268 134.05422974]
[322.54254150 140.46673584]
[328.13021851 152.19107056]
[342.82467651 155.20318604]
[357.51913452 158.21528625]
[372.21359253 161.22738647]
[386.90805054 164.23950195]
[401.03707886 156.64013672]
[415.73052979 163.08076477]
[419.71688843 178.62068176]
[409.93811035 191.33897400]
[393.89566040 191.47927856]
[383.89593506 178.93395996]
[369.20147705 175.92185974]
[354.50701904 172.90974426]
[339.81256104 169.89764404]
[325.11810303 166.88552856]
[311.58496094 176.73405457]
[294.77081299 173.77374268]
[285.03982544 159.33938599]
[270.25878906 156.78573608]
[255.47775269 154.23208618]
[250.30699158 164.98774719]
[242.63916016 174.14813232]
[232.94195557 181.14529419]
[221.80912781 185.54347229]
[209.92414856 187.06631470]
[198.01820374 185.61413574]
[186.82527161 181.27049255]
[177.03681946 174.29739380]
[169.25914001 165.11943054]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 59]
[3 58]
[5 57]
[6 56]
[7 55]
[8 53]
[9 52]
[12 49]
[13 48]
[14 47]
[15 45]
[16 44]
[17 42]
[18 41]
[19 40]
[20 39]
[21 37]
[22 36]
[23 35]
[24 34]
[25 33]
[66 91]
[67 90]
[68 89]
[72 86]
[73 85]
[74 84]
[75 83]
[76 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
