%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCGCCGCUGCCGCCGCCACCGCCGCCGCCGCCGCCGCCGCCGCGGCUUCAGCACCAGCGCCCGGACAGCGGUGCCGCCCACGGGCAUGGACGGUGACAGCAGCAGCAGCAGCGGCGGCAGCGGUCCGGCUCCCGGCCCGGGUCCGGAAGGGGAGCAACGGCCCGAGGGGGAGCCCUUGGCCCCAG\
) } def
/len { sequence length } bind def

/coor [
[457.68374634 303.45538330]
[445.31710815 294.96615601]
[433.35815430 296.86669922]
[422.98193359 289.87841797]
[420.06539917 277.30096436]
[407.84237671 268.60629272]
[395.61932373 259.91162109]
[383.39627075 251.21696472]
[371.17324829 242.52229309]
[358.95019531 233.82763672]
[346.72714233 225.13296509]
[334.50408936 216.43830872]
[322.28106689 207.74363708]
[310.05801392 199.04898071]
[297.83496094 190.35430908]
[285.61193848 181.65963745]
[273.38888550 172.96498108]
[261.16583252 164.27030945]
[216.40005493 151.79893494]
[202.40235901 146.40782166]
[188.40464783 141.01670837]
[174.40693665 135.62559509]
[160.40922546 130.23448181]
[146.36695862 124.96050262]
[132.28112793 119.80403900]
[118.19528198 114.64756775]
[110.42385864 129.67260742]
[91.47325134 138.61178589]
[66.75440216 134.11326599]
[52.35560226 138.31738281]
[37.95680618 142.52149963]
[23.55800819 146.72561646]
[9.15921021 150.92973328]
[-1.91928029 162.22476196]
[-16.30500984 158.36470032]
[-30.70380783 162.56883240]
[-41.64132690 174.78778076]
[-57.63433838 171.16070557]
[-62.23060226 155.41883850]
[-50.70187759 143.75605774]
[-34.90792847 148.17002869]
[-20.50913048 143.96591187]
[-10.46053791 132.97158813]
[4.95509100 136.53094482]
[19.35388947 132.32682800]
[33.75268555 128.12269592]
[48.15148544 123.91857910]
[62.55028152 119.71446228]
[62.67560577 112.21550751]
[47.67770386 111.96463013]
[47.92881393 96.96673584]
[62.92625427 97.21760559]
[63.05157852 89.71865082]
[48.80130005 85.03574371]
[32.86867523 88.91949463]
[21.73610115 76.87799072]
[26.85581398 61.29850006]
[42.96109390 58.20786667]
[53.48420715 70.78546906]
[67.73448181 75.46837616]
[76.32672119 63.17311096]
[67.03047180 51.40112305]
[57.73422241 39.62913132]
[48.43797684 27.85713959]
[39.14172745 16.08514977]
[25.43698311 17.66034508]
[12.84543133 12.29587460]
[4.61869860 1.49344647]
[2.82348919 -11.85642910]
[7.82325840 -24.24747849]
[-1.27498400 -36.17316437]
[-10.37322617 -48.09885025]
[-25.70674133 -53.91394806]
[-28.07004547 -70.14191437]
[-15.03197384 -80.08880615]
[-0.00497683 -73.52211761]
[1.55245924 -57.19709396]
[10.65070152 -45.27140808]
[19.74894524 -33.34572220]
[36.13016891 -34.25896072]
[49.97043228 -25.14289474]
[55.71368790 -9.42021179]
[50.91371918 6.78890085]
[60.20996475 18.56089211]
[69.50621033 30.33288193]
[78.80245972 42.10487366]
[88.09870911 53.87686539]
[122.07492065 72.20293427]
[123.35174561 100.56172943]
[137.43759155 105.71819305]
[151.52342224 110.87466431]
[160.67822266 110.88815308]
[165.80033875 116.23676300]
[179.79804993 121.62788391]
[193.79576111 127.01899719]
[207.79347229 132.41011047]
[221.79118347 137.80123901]
[228.62049866 134.70117188]
[230.08033752 119.77237701]
[242.27914429 128.50105286]
[249.10845947 125.40100098]
[254.26493835 111.31515503]
[250.91574097 95.26165771]
[263.32250977 84.53766632]
[278.72222900 90.17510223]
[281.27297974 106.37466431]
[268.35076904 116.47162628]
[263.19430542 130.55746460]
[275.25967407 121.64529419]
[289.51275635 126.31964111]
[293.95693970 140.64616394]
[284.85159302 152.56643677]
[269.86050415 152.04727173]
[282.08355713 160.74192810]
[294.30657959 169.43659973]
[306.52963257 178.13127136]
[318.75268555 186.82592773]
[330.97573853 195.52059937]
[343.19876099 204.21525574]
[355.42181396 212.90992737]
[367.64486694 221.60458374]
[379.86788940 230.29925537]
[392.09094238 238.99392700]
[404.31399536 247.68858337]
[416.53701782 256.38323975]
[428.76007080 265.07791138]
[447.11865234 266.38397217]
[453.80633545 282.59954834]
[466.17294312 291.08874512]
[480.30136108 296.12734985]
[495.24905396 297.37918091]
[510.19671631 298.63101196]
[525.14440918 299.88284302]
[540.09204102 301.13467407]
[555.03973389 302.38653564]
[565.20208740 290.80926514]
[580.05920410 287.47479248]
[593.86767578 293.45736694]
[601.41516113 306.27038574]
[616.36285400 307.52221680]
[631.31054688 308.77404785]
[645.90881348 301.30258179]
[659.52954102 310.43530273]
[658.16094971 326.77725220]
[643.21087646 333.51721191]
[630.05865479 323.72171021]
[615.11102295 322.46987915]
[600.16333008 321.21804810]
[590.58978271 332.59719849]
[575.97863770 336.19967651]
[561.88305664 330.44049072]
[553.78790283 317.33419800]
[538.84020996 316.08236694]
[523.89257812 314.83053589]
[508.94488525 313.57867432]
[493.99722290 312.32684326]
[479.04953003 311.07501221]
[475.06689453 317.43020630]
[482.09201050 330.68341064]
[467.10156250 330.14059448]
[463.11889648 336.49575806]
[470.76315308 349.40179443]
[478.40740967 362.30783081]
[486.05166626 375.21383667]
[493.13198853 381.01724243]
[493.71374512 388.39999390]
[501.14126587 401.43197632]
[508.56878662 414.46392822]
[515.99633789 427.49588013]
[523.42382812 440.52783203]
[537.84545898 448.33480835]
[538.02471924 464.73297119]
[523.77716064 472.85330200]
[509.75952148 464.34231567]
[510.39187622 447.95535278]
[502.96435547 434.92340088]
[495.53683472 421.89144897]
[488.10931396 408.85949707]
[480.68179321 395.82754517]
[473.14562988 382.85809326]
[465.50137329 369.95205688]
[457.85714722 357.04605103]
[450.21289062 344.14001465]
[446.77700806 335.44128418]
[445.59182739 326.90823364]
[446.44836426 319.05590820]
[449.02890015 312.32232666]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 129]
[2 128]
[5 126]
[6 125]
[7 124]
[8 123]
[9 122]
[10 121]
[11 120]
[12 119]
[13 118]
[14 117]
[15 116]
[16 115]
[17 114]
[18 113]
[19 97]
[20 96]
[21 95]
[22 94]
[23 93]
[24 91]
[25 90]
[26 89]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[35 42]
[36 41]
[53 60]
[54 59]
[61 87]
[62 86]
[63 85]
[64 84]
[65 83]
[70 79]
[71 78]
[72 77]
[101 108]
[102 107]
[130 157]
[131 156]
[132 155]
[133 154]
[134 153]
[135 152]
[139 148]
[140 147]
[141 146]
[161 183]
[162 182]
[163 181]
[164 180]
[166 179]
[167 178]
[168 177]
[169 176]
[170 175]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
