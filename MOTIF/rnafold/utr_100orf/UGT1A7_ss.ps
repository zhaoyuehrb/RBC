%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUCGUGCAGGGUGGACUGGCCUCCUUCCCCUAUAUGUGUGUCUACUGCUGACCUGUGGCUUUGCCAAGGCAGGGAAGCUGCUGGUAGUGCCCAUGG\
) } def
/len { sequence length } bind def

/coor [
[109.83179474 140.59529114]
[88.91045380 140.26988220]
[70.77197266 129.83895874]
[59.96810913 111.92012024]
[45.05691147 113.54990387]
[32.17911148 122.74081421]
[18.68651390 116.43216705]
[3.77531719 118.06195068]
[-11.13588047 119.69173431]
[-26.04707718 121.32151031]
[-38.92487717 130.51242065]
[-52.41747665 124.20377350]
[-67.32867432 125.83355713]
[-82.23986816 127.46334076]
[-97.15106964 129.09312439]
[-112.65193176 141.79382324]
[-130.08752441 133.68128967]
[-144.86854553 136.23493958]
[-159.64958191 138.78858948]
[-168.55328369 151.84614563]
[-184.09753418 154.70121765]
[-197.06022644 145.65995789]
[-199.75080872 130.08638000]
[-190.57299805 117.22001648]
[-174.97184753 114.69424438]
[-162.20323181 124.00756073]
[-147.42219543 121.45390320]
[-132.64117432 118.90025330]
[-127.39150238 109.88264465]
[-117.80305481 105.23334503]
[-107.03240967 106.75779724]
[-98.78085327 114.18192291]
[-83.86965179 112.55214691]
[-68.95845795 110.92236328]
[-54.04725647 109.29257965]
[-42.23600769 100.21823883]
[-27.67686081 106.41031647]
[-12.76566219 104.78053284]
[2.14553499 103.15074921]
[17.05673218 101.52096558]
[28.86798286 92.44663239]
[43.42712784 98.63870239]
[58.33832550 97.00892639]
[60.15507889 87.46908569]
[64.12570953 78.60662079]
[70.03556824 70.90061188]
[77.56520081 64.76760864]
[86.30757904 60.53914261]
[95.79012299 58.44379044]
[105.50023651 58.59481812]
[114.91302490 60.98406601]
[123.51966858 65.48236847]
[130.85491943 71.84658051]
[136.52227783 79.73265839]
[140.21536255 88.71431732]
[141.73454285 98.30604553]
[156.58784485 100.39877319]
[171.47189331 102.26025391]
[186.38308716 103.89003754]
[195.43501282 101.68659210]
[201.73008728 105.80941772]
[216.58337402 107.90214539]
[231.43667603 109.99487305]
[246.18135071 104.25858307]
[257.70468140 113.69586182]
[272.55798340 115.78858948]
[287.41128540 117.88132477]
[302.26458740 119.97405243]
[317.11788940 122.06678009]
[331.97119141 124.15950775]
[338.50836182 121.94946289]
[344.26019287 123.30084991]
[347.67156982 126.87200165]
[362.36605835 129.88410950]
[377.06051636 132.89620972]
[391.75497437 135.90832520]
[405.88400269 128.30895996]
[420.57745361 134.74958801]
[424.56378174 150.28948975]
[414.78503418 163.00779724]
[398.74258423 163.14810181]
[388.74285889 150.60278320]
[374.04840088 147.59068298]
[359.35394287 144.57856750]
[344.65948486 141.56646729]
[329.87844849 139.01281738]
[315.02514648 136.92007446]
[300.17184448 134.82734680]
[285.31854248 132.73461914]
[270.46524048 130.64189148]
[255.61195374 128.54916382]
[241.92968750 134.43513489]
[229.34394836 124.84817505]
[214.49064636 122.75544739]
[199.63735962 120.66271210]
[184.75331116 118.80123138]
[169.84210205 117.17144775]
[162.72557068 119.61694336]
[154.49511719 115.25206757]
[139.64181519 113.15933990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 43]
[5 42]
[7 40]
[8 39]
[9 38]
[10 37]
[12 35]
[13 34]
[14 33]
[15 32]
[17 28]
[18 27]
[19 26]
[56 100]
[57 99]
[58 97]
[59 96]
[61 95]
[62 94]
[63 93]
[65 91]
[66 90]
[67 89]
[68 88]
[69 87]
[70 86]
[73 85]
[74 84]
[75 83]
[76 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
