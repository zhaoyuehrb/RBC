%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGGCAGAAGAAUCAGACCUCUCUGGCAGACUUCAUCCUUGAGGGGCUCUUCGAUGACUCCCUUACCCACCUUUUCCUUUUCUCCUUGACCAUGGUGG\
) } def
/len { sequence length } bind def

/coor [
[103.44091034 127.25803375]
[94.90219116 126.99727631]
[86.85633850 124.12642670]
[80.08119965 118.92304993]
[75.23180389 111.89019775]
[60.45077133 114.44385529]
[51.33489609 127.07470703]
[36.30845261 129.45391846]
[24.32303810 120.68547821]
[9.54200745 123.23913574]
[-5.23902225 125.79278564]
[-20.02005196 128.34643555]
[-30.16808701 144.17747498]
[-48.32193756 147.68647766]
[-63.12614441 137.14228821]
[-77.71982574 140.60992432]
[-92.31349945 144.07757568]
[-106.90718079 147.54522705]
[-121.50085449 151.01286316]
[-133.04464722 162.66073608]
[-148.83288574 158.22634888]
[-152.62397766 142.27143860]
[-140.51797485 131.20903015]
[-124.96850586 136.41918945]
[-110.37482452 132.95153809]
[-95.78114319 129.48390198]
[-81.18746948 126.01625061]
[-66.59378815 122.54860687]
[-62.76296616 111.58347321]
[-53.97001648 103.81049347]
[-42.38122177 101.30253601]
[-30.92983818 104.81539154]
[-22.57370567 113.56541443]
[-7.79267550 111.01175690]
[6.98835468 108.45810699]
[21.76938438 105.90444946]
[30.11809921 93.62297821]
[45.07178879 90.82264709]
[57.89711761 99.66281891]
[72.67814636 97.10916901]
[81.34254456 79.83221436]
[99.24037170 72.53614044]
[102.93455505 57.99815750]
[106.62873840 43.46017456]
[110.32292175 28.92218971]
[114.01710510 14.38420391]
[117.71128845 -0.15378095]
[121.40547180 -14.69176579]
[117.30518341 -29.97241211]
[127.93862152 -40.40213776]
[131.63281250 -54.94012451]
[123.33954620 -68.39365387]
[127.06964874 -83.75144958]
[140.61010742 -91.90200043]
[155.92759705 -88.00974274]
[163.93455505 -74.38386536]
[159.88055420 -59.10837555]
[146.17079163 -51.24594116]
[142.47660828 -36.70795441]
[146.84112549 -22.46716118]
[135.94345093 -10.99758244]
[132.24926758 3.54040265]
[128.55508423 18.07838821]
[124.86090851 32.61637115]
[121.16672516 47.15435791]
[117.47254181 61.69234085]
[113.77835846 76.23032379]
[125.42368317 89.58478546]
[126.49472809 107.27117157]
[139.32679749 115.03891754]
[152.15887451 122.80666351]
[164.99095154 130.57440186]
[177.82302856 138.34214783]
[188.70373535 127.88879395]
[201.91967773 120.60861206]
[216.56979370 116.99797821]
[231.65519714 117.30307770]
[246.14733887 121.50309753]
[259.05813599 129.31167603]
[269.50729370 140.19642639]
[276.78234863 153.41517639]
[280.38732910 168.06668091]
[280.07641602 183.15196228]
[275.87078857 197.64248657]
[268.05722046 210.55026245]
[257.16845703 220.99520874]
[243.94688416 228.26518250]
[229.29399109 231.86450195]
[214.20883179 231.54776001]
[199.71994019 227.33654785]
[186.81518555 219.51800537]
[176.37443542 208.62519836]
[169.10957336 195.40081787]
[165.51589966 180.74653625]
[165.83847046 165.66149902]
[170.05528259 151.17422485]
[157.22320557 143.40647888]
[144.39112854 135.63873291]
[131.55905151 127.87099457]
[118.72698212 120.10324860]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 40]
[6 39]
[9 36]
[10 35]
[11 34]
[12 33]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[42 67]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[50 59]
[51 58]
[69 100]
[70 99]
[71 98]
[72 97]
[73 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
