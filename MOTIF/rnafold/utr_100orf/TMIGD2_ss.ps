%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:44:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGUCUGUCAACUGGGAGGGGGAGAGGGGGGUGAUGGGCCAGGAAUGGGGUCCCCGGGCAUGGUGCUGGGCCUCCUGGUGCAGAUCUGGGCCCUGCAAGAAGCCUCAAGCCUGAGCGUGCAGCAGGGGCCCAACUUGCUGCAGG\
) } def
/len { sequence length } bind def

/coor [
[114.50773621 159.45388794]
[99.52914429 158.65270996]
[91.77555084 145.81207275]
[98.04053497 132.18336487]
[101.72249603 117.64227295]
[94.23319244 117.24174500]
[84.03060150 128.23753357]
[73.82801056 139.23330688]
[70.11335754 154.61224365]
[55.78476715 158.67929077]
[45.58217621 169.67507935]
[45.99600220 185.24641418]
[35.49248505 196.25234985]
[20.64504433 196.55091858]
[10.44245434 207.54669189]
[7.32280636 223.64637756]
[-8.26588535 228.73800659]
[-20.28731155 217.58375549]
[-16.37485886 201.65815735]
[-0.55332404 197.34410095]
[9.64926720 186.34832764]
[8.83743954 171.52008057]
[19.02767754 160.22346497]
[34.58639908 159.47248840]
[44.78899002 148.47669983]
[47.77389145 133.88426208]
[62.83223343 129.03071594]
[73.03482819 118.03493500]
[83.23741913 107.03915405]
[69.70941162 113.51937103]
[54.73217010 112.69340515]
[41.99877167 104.76494598]
[34.64901352 91.68897247]
[34.49519730 76.68975830]
[41.57524872 63.46580887]
[54.14337158 55.27787399]
[69.10052490 54.14493561]
[82.75858307 60.34635162]
[91.74973297 72.35298157]
[93.85709381 87.20301819]
[97.35098267 72.61560059]
[100.68879700 57.99168015]
[103.87015533 43.33293152]
[107.05151367 28.67418098]
[110.23287201 14.01543140]
[101.94740295 0.82495213]
[105.38257599 -13.99578476]
[118.00874329 -21.81342697]
[121.19010162 -36.47217560]
[124.37145996 -51.13092804]
[127.55281830 -65.78967285]
[130.73417664 -80.44842529]
[133.91554260 -95.10717773]
[119.17079163 -107.30525208]
[112.60945892 -125.19561005]
[115.94300842 -143.87532043]
[128.18296814 -158.26870728]
[145.93206787 -164.50645447]
[147.85023499 -179.38330078]
[149.76838684 -194.26014709]
[151.68653870 -209.13699341]
[142.30509949 -221.57188416]
[144.46231079 -236.63180542]
[156.37489319 -245.49893188]
[158.29306030 -260.37579346]
[148.91162109 -272.81066895]
[151.06883240 -287.87060547]
[162.98139954 -296.73773193]
[164.89956665 -311.61456299]
[166.81771851 -326.49142456]
[160.90867615 -341.16772461]
[170.20997620 -352.80108643]
[172.12812805 -367.67791748]
[174.04629517 -382.55477905]
[167.23425293 -397.47216797]
[176.96617126 -410.67147827]
[193.23068237 -408.57440186]
[199.29624939 -393.33822632]
[188.92314148 -380.63662720]
[187.00498962 -365.75976562]
[185.08682251 -350.88293457]
[191.13307190 -337.27072144]
[181.69456482 -324.57327271]
[179.77641296 -309.69641113]
[177.85826111 -294.81958008]
[187.13204956 -283.22076416]
[185.39868164 -268.10620117]
[173.16990662 -258.45764160]
[171.25173950 -243.58078003]
[180.52552795 -231.98196411]
[178.79217529 -216.86740112]
[166.56340027 -207.21884155]
[164.64523315 -192.34199524]
[162.72708130 -177.46514893]
[160.80891418 -162.58828735]
[170.70947266 -157.34657288]
[178.53849792 -149.29655457]
[183.52635193 -139.20600891]
[185.17549133 -128.04441833]
[183.30999756 -116.88983917]
[178.09423828 -106.82472992]
[170.01852417 -98.83096313]
[159.85301208 -93.69401550]
[148.57429504 -91.92581940]
[145.39292908 -77.26706696]
[142.21156311 -62.60831451]
[139.03021240 -47.94956589]
[135.84884644 -33.29081726]
[132.66749573 -18.63206673]
[140.91708374 -6.28379917]
[137.89955139 8.62757778]
[124.89162445 17.19679070]
[121.71026611 31.85554123]
[118.52890778 46.51428986]
[115.34754181 61.17304230]
[117.01441956 68.42816925]
[111.93840027 76.10948944]
[108.44451141 90.69690704]
[124.04673004 92.98646545]
[136.21159363 109.87218475]
[145.18324280 121.89338684]
[154.15490723 133.91459656]
[163.12655640 145.93579102]
[172.09822083 157.95700073]
[181.06988525 169.97821045]
[190.04153442 181.99940491]
[199.01319885 194.02061462]
[207.98484802 206.04180908]
[223.60630798 206.75183105]
[235.08160400 217.37500000]
[236.99243164 232.89540100]
[228.43658447 245.98475647]
[213.45385742 250.46269226]
[199.11863708 244.21485901]
[192.19958496 230.19128418]
[195.96365356 215.01347351]
[186.99198914 202.99226379]
[178.02033997 190.97106934]
[169.04867554 178.94985962]
[160.07701111 166.92864990]
[151.10536194 154.90745544]
[142.13369751 142.88624573]
[133.16204834 130.86505127]
[124.19038391 118.84384155]
[116.70108795 118.44331360]
[118.81118774 133.29415894]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 29]
[7 28]
[8 27]
[10 25]
[11 24]
[14 21]
[15 20]
[40 118]
[41 117]
[42 115]
[43 114]
[44 113]
[45 112]
[48 109]
[49 108]
[50 107]
[51 106]
[52 105]
[53 104]
[58 95]
[59 94]
[60 93]
[61 92]
[64 89]
[65 88]
[68 85]
[69 84]
[70 83]
[72 81]
[73 80]
[74 79]
[120 144]
[121 143]
[122 142]
[123 141]
[124 140]
[125 139]
[126 138]
[127 137]
[128 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
