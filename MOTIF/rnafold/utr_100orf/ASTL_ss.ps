%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGGGUGUAGGGGGUCUCUGGCCUUGGGUGCUGGGUCUGCUCUCCUUGCCAGGUGUGAUCCUAGGAGCGCCCCUGGCCUCCAGCUGCGCAGGAGCCU\
) } def
/len { sequence length } bind def

/coor [
[109.60641479 130.58737183]
[107.79306793 126.69200134]
[107.38280487 121.95257568]
[98.26681519 110.04045105]
[91.12947845 105.97186279]
[89.05944061 97.61312103]
[80.31832123 85.42324829]
[71.57720947 73.23338318]
[62.83609390 61.04351425]
[54.09497833 48.85364532]
[45.35386276 36.66377640]
[26.68251610 34.43102264]
[15.61142826 19.62202263]
[18.64830399 1.70215058]
[9.16625690 -9.92070580]
[-0.31578919 -21.54356194]
[-9.79783535 -33.16641998]
[-19.27988243 -44.78927612]
[-28.76192856 -56.41213226]
[-38.77574921 -67.58009338]
[-49.29955292 -78.26885223]
[-59.82335663 -88.95761108]
[-70.34716034 -99.64636993]
[-80.87096405 -110.33512878]
[-91.39476013 -121.02388763]
[-106.64713287 -118.86252594]
[-120.09044647 -126.01309204]
[-126.66771698 -139.54835510]
[-124.04505920 -154.18597412]
[-134.56886292 -164.87472534]
[-145.09266663 -175.56349182]
[-160.28816223 -179.96888733]
[-163.70397949 -194.46652222]
[-174.22778320 -205.15528870]
[-189.80056763 -203.73327637]
[-202.61450195 -212.69636536]
[-206.61924744 -227.81245422]
[-199.92385864 -241.94418335]
[-185.68971252 -248.41899109]
[-170.63772583 -244.17965698]
[-161.87500000 -231.22787476]
[-163.53901672 -215.67909241]
[-153.01521301 -204.99032593]
[-138.57244873 -201.34945679]
[-134.40391541 -186.08729553]
[-123.88010406 -175.39852905]
[-113.35630035 -164.70977783]
[-98.67967224 -167.10447693]
[-85.24832916 -160.31750488]
[-78.30770111 -146.76460266]
[-80.70600128 -131.54769897]
[-70.18220520 -120.85893250]
[-59.65839767 -110.17017365]
[-49.13459778 -99.48141479]
[-38.61079407 -88.79265594]
[-28.08699036 -78.10389709]
[-24.40656471 -77.77299500]
[-20.73006248 -75.52844238]
[-18.01034164 -71.40673065]
[-17.13907242 -65.89418030]
[-7.65702534 -54.27132416]
[1.82502103 -42.64846420]
[11.30706787 -31.02560997]
[20.78911400 -19.40275192]
[30.27116013 -7.77989578]
[41.80960846 -9.11167812]
[52.63801575 -4.58611727]
[59.94656372 4.75064898]
[61.77646637 16.58812141]
[57.54373169 27.92266083]
[66.28484344 40.11252975]
[75.02596283 52.30239868]
[83.76707458 64.49226379]
[92.50819397 76.68213654]
[101.24930573 88.87200165]
[110.17893982 100.92446136]
[119.29492950 112.83658600]
[129.13386536 124.15892792]
[139.65766907 134.84768677]
[150.18147278 145.53645325]
[158.58830261 149.55114746]
[160.85987854 156.72508240]
[171.04617310 167.73596191]
[181.23246765 178.74684143]
[196.28361511 183.62268066]
[199.24688721 198.21954346]
[209.43318176 209.23042297]
[224.62768555 216.75128174]
[221.60699463 233.43395996]
[204.74008179 235.14955139]
[198.42230225 219.41671753]
[188.23600769 208.40583801]
[173.91346741 204.31756592]
[170.22158813 188.93313599]
[160.03529358 177.92225647]
[149.84901428 166.91137695]
[139.49270630 156.06025696]
[128.96890259 145.37149048]
[118.44509888 134.68272400]
[115.47168732 134.62677002]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 77]
[4 76]
[6 75]
[7 74]
[8 73]
[9 72]
[10 71]
[11 70]
[14 65]
[15 64]
[16 63]
[17 62]
[18 61]
[19 60]
[20 56]
[21 55]
[22 54]
[23 53]
[24 52]
[25 51]
[29 47]
[30 46]
[31 45]
[33 43]
[34 42]
[78 99]
[79 98]
[80 97]
[82 96]
[83 95]
[84 94]
[86 92]
[87 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
