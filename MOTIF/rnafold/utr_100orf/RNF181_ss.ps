%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:57:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCGCUAUCGAGCAGGGUCCGAGGGCUGUGUCAGAAGGCUGGGCAGCCAUGGCGUCCUAUUUCGAUGAACACGACUGCGAGCCGUCGGACCCUGAGCAGGAGACGCGAACCAACAUGCUGCUGGAGCUCGCAAGGUCACUUUUCAAUA\
) } def
/len { sequence length } bind def

/coor [
[112.05345917 281.41113281]
[124.41102600 272.51110840]
[121.31269836 257.83459473]
[118.21437836 243.15806580]
[115.11605835 228.48153687]
[103.35351562 225.19776917]
[94.06514740 217.15780640]
[89.07064819 205.85494995]
[89.38329315 193.42929077]
[95.00501251 182.26254272]
[104.91422272 174.52146912]
[102.42910767 159.72875977]
[99.94398499 144.93606567]
[97.45886993 130.14335632]
[94.97375488 115.35064697]
[87.79124451 102.18206024]
[76.69992828 92.08341217]
[65.60861206 81.98476410]
[54.51729584 71.88611603]
[43.42597961 61.78746414]
[32.33466721 51.68881607]
[21.24334908 41.59016418]
[10.15203476 31.49151611]
[-0.93928081 21.39286613]
[-16.35250473 17.82311440]
[-20.55423164 3.53344202]
[-31.64554596 -6.56520748]
[-42.73686218 -16.66385651]
[-53.82817841 -26.76250648]
[-65.62481689 -36.02745438]
[-78.06425476 -44.40959930]
[-90.50370026 -52.79174042]
[-102.94313812 -61.17388535]
[-115.46910095 -69.42617798]
[-128.08023071 -77.54771423]
[-140.85758972 -85.40514374]
[-153.79563904 -92.99504852]
[-166.73370361 -100.58496094]
[-179.67175293 -108.17486572]
[-192.26690674 -103.29431915]
[-205.17987061 -106.53214264]
[-213.72798157 -116.48222351]
[-214.94577026 -129.34744263]
[-227.72312927 -137.20486450]
[-240.50048828 -145.06228638]
[-253.27784729 -152.91970825]
[-262.29067993 -154.76927185]
[-266.23690796 -161.07585144]
[-278.84802246 -169.19740295]
[-295.24517822 -169.45231628]
[-302.98553467 -183.90980530]
[-294.10641479 -197.69726562]
[-277.74197388 -196.63131714]
[-270.72647095 -181.80853271]
[-258.11535645 -173.68698120]
[-245.42042542 -165.69706726]
[-232.64306641 -157.83964539]
[-219.86570740 -149.98222351]
[-207.08834839 -142.12478638]
[-190.94406128 -146.73129272]
[-176.15658569 -138.09332275]
[-172.08184814 -121.11292267]
[-159.14378357 -113.52301788]
[-146.20573425 -105.93310547]
[-133.26766968 -98.34320068]
[-128.44454956 -98.67929840]
[-123.37007141 -95.94416809]
[-119.95868683 -90.15884399]
[-107.34755707 -82.03730011]
[-99.97341919 -81.05358887]
[-94.56099701 -73.61332703]
[-82.12155151 -65.23118591]
[-69.68211365 -56.84904099]
[-57.24267197 -48.46689606]
[-59.72201538 -63.26057434]
[-52.26350784 -76.27481842]
[-38.24592972 -81.61405945]
[-24.01937866 -76.85956573]
[-16.02862358 -64.16516113]
[-17.89355278 -49.28154373]
[-28.76933670 -38.95113754]
[-43.72952652 -37.85382080]
[-32.63821030 -27.75517273]
[-21.54689598 -17.65652275]
[-10.45558167 -7.55787325]
[4.16431665 -4.71044540]
[9.15936852 10.30155087]
[20.25068474 20.40019989]
[31.34199905 30.49884987]
[42.43331528 40.59749985]
[53.52463150 50.69614792]
[64.61594391 60.79479980]
[75.70726013 70.89344788]
[86.79857635 80.99209595]
[97.88989258 91.09074402]
[106.29306793 77.88014984]
[126.08882904 73.98995972]
[140.99073792 72.27726746]
[155.89263916 70.56458282]
[170.79454041 68.85189056]
[185.69644165 67.13919830]
[188.68002319 52.30837250]
[196.10231018 39.12638855]
[207.23616028 28.88468552]
[220.99079895 22.58663750]
[236.01866150 20.84926796]
[250.84748840 23.84278297]
[264.02450562 31.27391052]
[274.25872803 42.41462326]
[280.54754639 56.17346954]
[282.27487183 71.20249939]
[279.27142334 86.02931213]
[271.83145142 99.20133972]
[260.68389893 109.42810822]
[246.92083740 115.70771790]
[231.89065552 117.42494965]
[217.06585693 114.41156006]
[203.89881897 106.96278381]
[193.67950439 95.80836487]
[187.40913391 82.04109955]
[172.50723267 83.75379181]
[157.60531616 85.46648407]
[142.70341492 87.17916870]
[127.80152130 88.89186096]
[123.29275513 94.88527679]
[129.16491699 108.68809509]
[114.27522278 106.87210846]
[109.76645660 112.86552429]
[112.25157928 127.65823364]
[114.73669434 142.45094299]
[117.22181702 157.24365234]
[119.70693207 172.03636169]
[136.13644409 179.57852173]
[144.71879578 195.31147766]
[142.21044922 212.89865112]
[129.79258728 225.38322449]
[132.89089966 240.05973816]
[135.98922729 254.73626709]
[139.08755493 269.41278076]
[153.98803711 272.55844116]
[166.31706238 281.49798584]
[173.93852234 294.68255615]
[175.53198242 309.82788086]
[170.82133484 324.30993652]
[160.62274170 335.61959839]
[146.70317078 341.79742432]
[131.47427368 341.77304077]
[117.57454681 335.55072021]
[107.41220093 324.20846558]
[102.74792480 309.71139526]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 139]
[3 138]
[4 137]
[5 136]
[11 132]
[12 131]
[13 130]
[14 129]
[15 128]
[16 95]
[17 94]
[18 93]
[19 92]
[20 91]
[21 90]
[22 89]
[23 88]
[24 87]
[26 85]
[27 84]
[28 83]
[29 82]
[30 74]
[31 73]
[32 72]
[33 71]
[34 69]
[35 68]
[36 65]
[37 64]
[38 63]
[39 62]
[43 59]
[44 58]
[45 57]
[46 56]
[48 55]
[49 54]
[97 124]
[98 123]
[99 122]
[100 121]
[101 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
