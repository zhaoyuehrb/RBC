%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:05:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCGCUCGGCGAACAUGGCGGCGGCGACGGUCGGGCGGGACACUUUACCUGAGCAUUGGUCCUACGGGGUGUGCCGGGAUGGCCGCGUCUUCUUCAUCAAUGACCAGCUCCGCU\
) } def
/len { sequence length } bind def

/coor [
[100.53713226 352.52789307]
[92.96411133 337.98205566]
[102.00168610 324.29794312]
[102.40788269 309.30346680]
[102.20476532 294.30484009]
[101.39268494 279.32681274]
[100.58059692 264.34881592]
[97.02916718 257.75262451]
[99.95491028 248.95530701]
[99.54871368 233.96081543]
[98.93952179 218.97319031]
[98.12744141 203.99517822]
[85.54174042 196.07443237]
[79.96749115 182.09617615]
[83.73706818 167.34342957]
[95.60793304 157.52565002]
[94.79585266 142.54765320]
[93.98376465 127.56964111]
[93.17168427 112.59164429]
[85.69705963 100.77548218]
[91.85031891 88.22044373]
[91.03823090 73.24243927]
[82.56515503 59.88139343]
[89.60206604 46.75389862]
[88.78997803 31.77589798]
[87.97789764 16.79789734]
[87.16581726 1.81989563]
[83.53575134 -6.71093845]
[86.54012299 -13.57362175]
[86.13393402 -28.56812096]
[85.72773743 -43.56262207]
[85.32154846 -58.55712128]
[84.91535950 -73.55162048]
[84.50917053 -88.54611969]
[71.61304474 -100.27106476]
[71.12925720 -117.35765076]
[82.87069702 -129.31385803]
[82.05861664 -144.29185486]
[81.24652863 -159.26985168]
[72.77345276 -172.63090515]
[79.81036377 -185.75839233]
[78.99827576 -200.73638916]
[78.18619537 -215.71440125]
[77.37411499 -230.69239807]
[76.56202698 -245.67039490]
[75.74994659 -260.64840698]
[74.93785858 -275.62640381]
[73.11430359 -290.51513672]
[70.28762054 -305.24639893]
[67.46093750 -319.97766113]
[53.35684586 -326.44714355]
[45.77841568 -339.98770142]
[47.63971329 -355.39273071]
[58.22502899 -366.73867798]
[73.46409607 -369.66281128]
[87.49717712 -363.04071045]
[94.92827606 -349.41873169]
[92.89997101 -334.03479004]
[82.19219971 -322.80432129]
[85.01887512 -308.07308960]
[87.84555817 -293.34182739]
[98.83223724 -303.55419922]
[113.70521545 -301.60623169]
[121.69130707 -288.90890503]
[117.00582123 -274.65945435]
[103.04267120 -269.17944336]
[89.91586304 -276.43847656]
[90.72794342 -261.46047974]
[91.54003143 -246.48248291]
[92.35211182 -231.50448608]
[93.16419983 -216.52647400]
[93.97628021 -201.54847717]
[94.78836060 -186.57048035]
[103.20335388 -174.28076172]
[96.22453308 -160.08193970]
[97.03661346 -145.10394287]
[97.84870148 -130.12593079]
[108.60316467 -122.88956451]
[113.25659180 -110.58210754]
[109.88142395 -97.66249084]
[99.50366974 -88.95230865]
[99.90985870 -73.95780945]
[100.31604767 -58.96331024]
[100.72224426 -43.96881104]
[101.12843323 -28.97431183]
[101.53462219 -13.97981262]
[102.14381409 1.00781202]
[102.95590210 15.98581314]
[103.76798248 30.96381378]
[104.58006287 45.94181442]
[112.99505615 58.23153305]
[106.01623535 72.43035889]
[106.82831573 87.40835571]
[114.30294037 99.22451782]
[108.14968109 111.77955627]
[108.96176910 126.75756073]
[109.77384949 141.73556519]
[110.58593750 156.71356201]
[123.44869995 165.19032288]
[128.79122925 179.44903564]
[124.76097870 193.94802856]
[113.10543823 203.18310547]
[113.91752625 218.16110229]
[117.54759216 226.69194031]
[114.54321289 233.55461121]
[114.94940948 248.54911804]
[115.55860138 263.53674316]
[116.37068176 278.51473999]
[117.18276978 293.49273682]
[120.19500732 298.08242798]
[120.97082520 302.88378906]
[119.82472992 306.97561646]
[117.40238190 309.70965576]
[116.99618530 324.70413208]
[125.27966309 338.85745239]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 114]
[4 113]
[5 109]
[6 108]
[7 107]
[9 106]
[10 105]
[11 103]
[12 102]
[16 98]
[17 97]
[18 96]
[19 95]
[21 93]
[22 92]
[24 90]
[25 89]
[26 88]
[27 87]
[29 86]
[30 85]
[31 84]
[32 83]
[33 82]
[34 81]
[37 77]
[38 76]
[39 75]
[41 73]
[42 72]
[43 71]
[44 70]
[45 69]
[46 68]
[47 67]
[48 61]
[49 60]
[50 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
