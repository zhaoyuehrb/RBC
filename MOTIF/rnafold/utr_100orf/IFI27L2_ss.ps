%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACCCCAAGAACGCUGUCAUUUCCUGGGCCAAGUUGGGACCCGGACGGCCUCACCAUGAUGAAACGGGCAGCUGCUGCUGCAGUGGGAGGAGCCCUGGCAGUGGGGGCUGUGCCCGUGGUGCUCAGUGCCAUGGGCUUCACUGGGGCAGGAAUCG\
) } def
/len { sequence length } bind def

/coor [
[84.46623993 275.25146484]
[87.43228149 260.31417847]
[96.22274017 247.87843323]
[109.31461334 240.09880066]
[107.51802826 225.20677185]
[105.72143555 210.31475830]
[103.92484283 195.42272949]
[102.12825775 180.53071594]
[90.85066986 167.11630249]
[98.14731598 150.23770142]
[96.05310822 135.38461304]
[93.95890808 120.53151703]
[85.30415344 125.65805054]
[74.16410065 127.50397491]
[59.79106903 131.79537964]
[45.41804123 136.08677673]
[31.04501534 140.37817383]
[16.67198944 144.66957092]
[2.29896188 148.96096802]
[14.74385262 157.33500671]
[17.80372429 172.01960754]
[9.73919010 184.66726685]
[-4.86545706 188.08840942]
[-17.70818901 180.33830261]
[-21.48853874 165.82247925]
[-14.05802250 152.79286194]
[-28.84157562 155.33186340]
[-43.62512970 157.87088013]
[-58.40867996 160.40988159]
[-73.16609192 163.09667969]
[-87.89588165 165.93098450]
[-96.54963684 179.15550232]
[-112.03678894 182.30569458]
[-125.16908264 173.51260376]
[-128.15536499 157.99301147]
[-119.22391510 144.95442200]
[-103.67361450 142.13240051]
[-90.73018646 151.20118713]
[-76.00039673 148.36688232]
[-69.99265289 143.99026489]
[-60.94768906 145.62632751]
[-46.16413879 143.08732605]
[-31.38058472 140.54830933]
[-16.59703255 138.00930786]
[-1.99243569 134.58793640]
[12.38059139 130.29653931]
[26.75361824 126.00514221]
[41.12664413 121.71374512]
[55.49967194 117.42234802]
[69.87269592 113.13095093]
[72.09019470 105.96626282]
[57.76089096 101.53104401]
[62.19635010 87.20182037]
[76.52517700 91.63689423]
[78.74266815 84.47220612]
[69.30674744 72.81186676]
[54.14888382 75.28868866]
[39.78905869 69.83974457]
[30.09000015 57.93075943]
[27.66070175 42.76520538]
[33.15463638 28.42253113]
[45.09395981 18.76084900]
[60.26705551 16.37910080]
[74.59243774 21.91796303]
[84.21665192 33.88751221]
[86.55082703 49.06800079]
[80.96708679 63.37594986]
[90.40299988 75.03628540]
[105.32798767 73.53803253]
[112.25791931 60.23479080]
[119.18784332 46.93155670]
[126.11776733 33.62831879]
[133.04769897 20.32508087]
[139.97763062 7.02184391]
[139.49116516 -8.79188156]
[152.23316956 -16.50488091]
[159.16310120 -29.80811882]
[166.09303284 -43.11135483]
[173.02294922 -56.41459274]
[179.95288086 -69.71782684]
[186.88281250 -83.02106476]
[193.81272888 -96.32430267]
[188.30639648 -108.65303802]
[190.88630676 -121.70812988]
[200.38595581 -130.74679565]
[213.16740417 -132.61802673]
[220.36212158 -145.77993774]
[227.55683899 -158.94184875]
[224.44197083 -174.67961121]
[234.91372681 -186.83369446]
[250.93908691 -186.08053589]
[260.22476196 -172.99787903]
[255.64758301 -157.62162781]
[240.71875000 -151.74713135]
[233.52403259 -138.58522034]
[226.32931519 -125.42330933]
[231.75300598 -109.53073883]
[223.87338257 -94.32106018]
[207.11596680 -89.39437866]
[200.18605042 -76.09114075]
[193.25611877 -62.78790283]
[186.32618713 -49.48466492]
[179.39627075 -36.18142700]
[172.46633911 -22.87819099]
[165.53640747 -9.57495403]
[166.51855469 5.28723478]
[153.28085327 13.95177078]
[146.35093689 27.25500870]
[139.42100525 40.55824661]
[132.49107361 53.86148071]
[125.56115723 67.16471863]
[118.63122559 80.46795654]
[124.47530365 94.28268433]
[138.84832764 98.57408142]
[153.22135925 102.86547852]
[167.59439087 107.15687561]
[181.96740723 111.44827271]
[196.34043884 115.73966980]
[210.71347046 120.03107452]
[225.08650208 124.32247162]
[239.45951843 128.61386108]
[253.83255005 132.90525818]
[268.20556641 137.19665527]
[285.11248779 135.93450928]
[291.00558472 151.83129883]
[277.36145020 161.89477539]
[263.91418457 151.56968689]
[249.54115295 147.27828979]
[235.16812134 142.98689270]
[220.79508972 138.69549561]
[206.42207336 134.40409851]
[192.04904175 130.11270142]
[177.67601013 125.82130432]
[163.30299377 121.52990723]
[148.92996216 117.23851013]
[134.55693054 112.94711304]
[120.18390656 108.65571594]
[108.81200409 118.43731689]
[110.90620422 133.29040527]
[113.00040436 148.14349365]
[122.83943939 156.53996277]
[124.25157928 168.99330139]
[117.02027893 178.73413086]
[118.81686401 193.62614441]
[120.61345673 208.51815796]
[122.41004181 223.41018677]
[124.20663452 238.30220032]
[138.77305603 242.74511719]
[150.26878357 252.73350525]
[156.70213318 266.53683472]
[156.95846558 281.76361084]
[150.99339294 295.77566528]
[139.84037781 306.14532471]
[125.43177032 311.07601929]
[110.26393127 309.71347046]
[96.96478271 302.29373169]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[10 140]
[11 139]
[12 138]
[14 50]
[15 49]
[16 48]
[17 47]
[18 46]
[19 45]
[26 44]
[27 43]
[28 42]
[29 41]
[30 39]
[31 38]
[55 68]
[56 67]
[69 112]
[70 111]
[71 110]
[72 109]
[73 108]
[74 107]
[76 105]
[77 104]
[78 103]
[79 102]
[80 101]
[81 100]
[82 99]
[86 96]
[87 95]
[88 94]
[113 137]
[114 136]
[115 135]
[116 134]
[117 133]
[118 132]
[119 131]
[120 130]
[121 129]
[122 128]
[123 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
