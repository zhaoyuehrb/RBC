%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGUUGUUGUUGGUUGGGGGCCUUUUGGCCGGUGACGGAGACUGCCCAGGUGUGGUCACCAUGUUCCUCUCCGCGGUCUUCUUUGCCAAGAGCAAGUCAAAAAACAUUCUGGUGAGAAUGGUGAGCGAAGCUGGGACAGGUUUCUGCUUCAACACCAAGA\
) } def
/len { sequence length } bind def

/coor [
[76.74718475 326.85052490]
[62.28089142 320.91247559]
[55.06179428 307.04098511]
[58.49852753 291.78570557]
[70.96836853 282.34976196]
[71.55000305 267.36105347]
[72.13162994 252.37232971]
[64.89365387 239.35461426]
[73.16024017 225.86483765]
[73.74187469 210.87611389]
[74.32350159 195.88740540]
[74.90513611 180.89868164]
[75.48676300 165.90995789]
[68.95552063 162.22311401]
[61.58182907 175.28561401]
[54.20792007 188.34797668]
[41.14567184 180.97384644]
[48.51933670 167.91191101]
[55.89302826 154.84942627]
[49.36178207 151.16258240]
[36.82946396 159.40521240]
[24.29714775 167.64784241]
[11.76483059 175.89048767]
[4.89244509 190.78015137]
[-11.46099567 192.00367737]
[-20.47247505 178.30238342]
[-12.87175465 163.77099609]
[3.52219605 163.35816956]
[16.05451393 155.11552429]
[28.58683014 146.87289429]
[41.11914825 138.63026428]
[42.42648315 123.68733978]
[31.51587868 113.39371490]
[20.60527420 103.10009003]
[9.69466972 92.80646515]
[-1.21593487 82.51284027]
[-16.56347466 78.67050171]
[-20.51129913 64.30860901]
[-31.42190361 54.01498413]
[-42.33250809 43.72135925]
[-53.24311066 33.42773438]
[-64.15371704 23.13410950]
[-75.06432343 12.84048462]
[-85.97492981 2.54685950]
[-96.88552856 -7.74676514]
[-107.79613495 -18.04039001]
[-126.65778351 -16.73770332]
[-140.28407288 -29.38118744]
[-140.39042664 -47.65134811]
[-151.69195557 -57.51417160]
[-162.99349976 -67.37699127]
[-182.90454102 -70.31141663]
[-188.47238159 -88.79870605]
[-200.14785767 -98.21588898]
[-211.82331848 -107.63307190]
[-223.49879456 -117.05024719]
[-239.62338257 -122.28799438]
[-239.05407715 -139.23237610]
[-222.61427307 -143.37597656]
[-214.08161926 -128.72572327]
[-202.40614319 -119.30854034]
[-190.73066711 -109.89135742]
[-179.05519104 -100.47418213]
[-168.97348022 -102.47499084]
[-159.26136780 -98.48825836]
[-153.24562073 -89.61685181]
[-153.13067627 -78.67852783]
[-141.82914734 -68.81571198]
[-130.52760315 -58.95288849]
[-119.52590179 -62.18409348]
[-108.21868134 -59.65518951]
[-99.46184540 -51.88563538]
[-95.52468872 -40.73326874]
[-97.50251007 -28.95099449]
[-86.59190369 -18.65736961]
[-75.68130493 -8.36374474]
[-64.77069855 1.92987955]
[-53.86009216 12.22350407]
[-42.94948959 22.51712799]
[-32.03888321 32.81075287]
[-21.12827873 43.10437775]
[-10.21767426 53.39800262]
[4.34946585 56.50407791]
[9.07769012 71.60224152]
[19.98829460 81.89586639]
[30.89889908 92.18949127]
[41.80950546 102.48311615]
[52.72010803 112.77674103]
[56.32357407 80.68833923]
[78.74906158 58.60091400]
[109.26863861 55.64376831]
[117.01913452 42.80126572]
[114.57949066 26.94479370]
[125.56097412 15.24921227]
[141.53952026 16.68637276]
[150.25776672 30.15380478]
[145.02781677 45.32044983]
[129.86163330 50.55175400]
[122.11114502 63.39426041]
[126.76290894 69.27737427]
[138.52914429 59.97384262]
[150.29551697 50.67049408]
[159.59869385 62.43701553]
[147.83267212 71.74008179]
[136.06643677 81.04360962]
[140.71821594 86.92672729]
[155.00192261 82.34683990]
[169.28564453 77.76695251]
[183.56936646 73.18705750]
[197.85308838 68.60717010]
[212.13679504 64.02728271]
[222.75045776 51.52598953]
[238.83300781 54.73283005]
[243.84008789 70.34888458]
[232.62084961 82.30969238]
[216.71669006 78.31099701]
[202.43296814 82.89088440]
[188.14926147 87.47077942]
[173.86553955 92.05066681]
[159.58181763 96.63055420]
[145.29809570 101.21044922]
[141.77299500 120.50618744]
[130.20744324 136.98757935]
[112.36407471 147.38948059]
[124.73419952 155.87358093]
[137.10432434 164.35768127]
[149.47445679 172.84178162]
[161.92625427 181.20555115]
[174.45857239 189.44818115]
[186.99089050 197.69082642]
[199.52320862 205.93345642]
[212.05552673 214.17608643]
[224.58784485 222.41873169]
[240.01300049 218.97776794]
[253.30836487 227.52227783]
[256.58605957 242.98294067]
[247.90145874 256.18722534]
[232.40699768 259.30126953]
[219.29525757 250.47755432]
[216.34521484 234.95103455]
[203.81289673 226.70840454]
[191.28057861 218.46577454]
[178.74826050 210.22314453]
[166.21594238 201.98049927]
[153.68362427 193.73786926]
[146.33090210 192.68449402]
[140.99035645 185.21191406]
[128.62022400 176.72781372]
[116.25009918 168.24371338]
[103.87997437 159.75959778]
[90.47548676 166.49159241]
[89.89385223 181.48031616]
[89.31222534 196.46902466]
[88.73059082 211.45774841]
[88.14896393 226.44647217]
[95.34533691 240.53628540]
[87.12035370 252.95396423]
[86.53871918 267.94268799]
[85.95709229 282.93139648]
[97.65821838 293.30529785]
[99.90245056 308.78100586]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 159]
[6 158]
[7 157]
[9 155]
[10 154]
[11 153]
[12 152]
[13 151]
[20 31]
[21 30]
[22 29]
[23 28]
[32 88]
[33 87]
[34 86]
[35 85]
[36 84]
[38 82]
[39 81]
[40 80]
[41 79]
[42 78]
[43 77]
[44 76]
[45 75]
[46 74]
[49 69]
[50 68]
[51 67]
[53 63]
[54 62]
[55 61]
[56 60]
[91 99]
[92 98]
[106 121]
[107 120]
[108 119]
[109 118]
[110 117]
[111 116]
[124 150]
[125 149]
[126 148]
[127 147]
[128 145]
[129 144]
[130 143]
[131 142]
[132 141]
[133 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
