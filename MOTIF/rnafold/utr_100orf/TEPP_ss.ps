%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUGCUAAGGAGUGGGUGCCUCAGAAUCAGGCUGCAAUGGGCAUUGUCUGUGCACAAUGUUCCUUUAUUCUGCUGCUGUCCAUAAUAAGGGCUCGUCCACCUCCCUUCCUCUUCUGCCCAUUGAGCAGUCAAAGAA\
) } def
/len { sequence length } bind def

/coor [
[175.77470398 289.45349121]
[165.66197205 285.61199951]
[156.77185059 279.42581177]
[149.63847351 271.25894165]
[144.69226074 261.59469604]
[142.23397827 251.00697327]
[142.41642761 240.12626648]
[145.23495483 229.60202026]
[150.52740479 220.06394958]
[157.98338318 212.08430481]
[150.48338318 199.09393311]
[142.98338318 186.10354614]
[135.48338318 173.11317444]
[127.83601379 160.20899963]
[120.04225159 147.39270020]
[112.24848938 134.57641602]
[104.45473480 121.76012421]
[83.76708984 115.16047668]
[78.59460449 94.07068634]
[66.34005737 85.42048645]
[50.96195602 87.90074921]
[38.65732956 78.95364380]
[36.38754272 64.27768707]
[24.13299370 55.62748337]
[11.87844467 46.97727966]
[-0.37610382 38.32707214]
[-12.63065243 29.67686844]
[-24.88520050 21.02666473]
[-43.21963882 19.81759071]
[-50.02439499 3.68149710]
[-62.47267532 -4.68751335]
[-74.92095184 -13.05652428]
[-87.76251984 -11.35072041]
[-97.97593689 -18.64786530]
[-100.36499786 -30.56109047]
[-112.61954498 -39.21129608]
[-124.87409210 -47.86149979]
[-140.61036682 -49.49864578]
[-146.54621887 -63.15935516]
[-158.80076599 -71.80956268]
[-174.53703308 -73.44670868]
[-180.47288513 -87.10741425]
[-192.72743225 -95.75762177]
[-204.98197937 -104.40782928]
[-217.23652649 -113.05802917]
[-233.22698975 -111.76008606]
[-244.10620117 -123.55085754]
[-241.52856445 -139.38548279]
[-227.47140503 -147.11698914]
[-212.71820068 -140.81442261]
[-208.58631897 -125.31257629]
[-196.33177185 -116.66237640]
[-184.07722473 -108.01216888]
[-171.82267761 -99.36196136]
[-156.96293640 -98.34353638]
[-150.15055847 -84.06410980]
[-137.89601135 -75.41390228]
[-123.03626251 -74.39547729]
[-116.22388458 -60.11605072]
[-103.96933746 -51.46584320]
[-91.71479034 -42.81563950]
[-74.21318817 -42.20566940]
[-66.55194092 -25.50480461]
[-54.10366440 -17.13579369]
[-41.65538406 -8.76678181]
[-29.67265892 -10.77845097]
[-19.21580505 -3.83464479]
[-16.23499489 8.77211571]
[-3.98044729 17.42232132]
[8.27410126 26.07252502]
[20.52865028 34.72272873]
[32.78319931 43.37293625]
[45.03774643 52.02313995]
[59.62643051 49.24719238]
[72.17751312 57.84516144]
[74.99026489 73.16593933]
[87.24481201 81.81613922]
[97.98020935 77.88059998]
[109.25084686 79.80670166]
[119.73603058 69.08005524]
[130.22122192 58.35341263]
[140.70640564 47.62677002]
[138.98632812 32.08407593]
[147.70228577 19.10078049]
[162.73887634 14.80719471]
[176.99629211 21.23062134]
[183.74259949 35.33811569]
[179.79240417 50.46854782]
[167.01086426 59.47779083]
[151.43304443 58.11195755]
[140.94786072 68.83860016]
[130.46267700 79.56524658]
[119.97748566 90.29188538]
[121.89402008 96.25840759]
[122.06769562 102.52278137]
[120.48469543 108.58632660]
[117.27102661 113.96636200]
[125.06478119 126.78265381]
[132.85853577 139.59893799]
[140.65229797 152.41523743]
[147.84817505 158.18377686]
[148.47377014 165.61317444]
[155.97377014 178.60354614]
[163.47377014 191.59393311]
[170.97377014 204.58430481]
[190.49984741 202.07583618]
[209.16429138 208.18893433]
[223.35560608 221.69869995]
[230.34593201 239.95307922]
[228.81535339 259.39346313]
[219.10087585 276.24838257]
[228.29988098 288.09652710]
[237.49888611 299.94467163]
[246.69787598 311.79278564]
[256.29602051 323.31997681]
[266.28213501 334.51272583]
[276.26821899 345.70547485]
[286.25433350 356.89822388]
[301.87817383 356.24282837]
[314.23641968 365.82449341]
[317.49386597 381.11901855]
[310.11242676 394.90484619]
[295.57745361 400.67269897]
[280.75186157 395.69918823]
[272.63586426 382.33264160]
[275.06158447 366.88433838]
[265.07546997 355.69158936]
[255.08937073 344.49880981]
[245.10327148 333.30606079]
[241.53639221 332.76602173]
[238.06910706 330.41818237]
[235.57310486 326.33630371]
[234.84974670 320.99179077]
[225.65074158 309.14364624]
[216.45173645 297.29553223]
[207.25274658 285.44738770]
[197.20968628 289.36224365]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 105]
[11 104]
[12 103]
[13 102]
[14 100]
[15 99]
[16 98]
[17 97]
[19 77]
[20 76]
[23 73]
[24 72]
[25 71]
[26 70]
[27 69]
[28 68]
[30 65]
[31 64]
[32 63]
[35 61]
[36 60]
[37 59]
[39 57]
[40 56]
[42 54]
[43 53]
[44 52]
[45 51]
[79 93]
[80 92]
[81 91]
[82 90]
[111 136]
[112 135]
[113 134]
[114 133]
[115 129]
[116 128]
[117 127]
[118 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
