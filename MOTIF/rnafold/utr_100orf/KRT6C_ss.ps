%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCUCCAGCCUCCAACGCUCGCCACAGCCCUCUCAUCUCCUGGAACCAUGGCCAGCACAUCCACCACCAUCAGGAGCCACAGCAGCAGCCGCCGGGGUUUCAGUGCCAACUCAGCCAGGCUCCCUGGGGUCAGCCGCUCUGGCUUCA\
) } def
/len { sequence length } bind def

/coor [
[-12.38085461 153.60276794]
[-19.91210938 165.57308960]
[-29.16926003 176.26179504]
[-39.93785858 185.42233276]
[-51.96859741 192.84353638]
[-64.98309326 198.35452271]
[-78.68032074 201.82856750]
[-92.74358368 203.18608093]
[-106.84781647 202.39634705]
[-120.66712952 199.47836304]
[-133.88230896 194.50019836]
[-146.18821716 187.57757568]
[-157.30081177 178.87106323]
[-166.96372986 168.58241272]
[-174.95417786 156.94985962]
[-181.08807373 144.24263000]
[-185.22428894 130.75466919]
[-187.26791382 116.79786682]
[-202.26708984 116.63973999]
[-217.26625061 116.48160553]
[-231.14723206 124.07299042]
[-243.79222107 116.20195007]
[-258.79138184 116.04382324]
[-273.79055786 115.88568878]
[-288.78973389 115.72756195]
[-297.03491211 130.02256775]
[-311.27261353 138.17953491]
[-327.58734131 138.06384277]
[-341.54672241 129.80119324]
[-349.40576172 115.71780396]
[-364.40493774 115.87593079]
[-371.31765747 129.53144836]
[-383.79129028 138.40084839]
[-398.95956421 140.44602966]
[-413.33685303 135.19702148]
[-423.61938477 123.85998535]
[-427.44430542 109.04011536]
[-423.93267822 94.14289856]
[-413.89144897 82.59160614]
[-399.62802124 77.04064178]
[-384.42001343 78.76557922]
[-371.76214600 87.37003326]
[-364.56304932 100.87677002]
[-349.56390381 100.71863556]
[-343.63775635 88.37420654]
[-332.91052246 79.75733948]
[-319.44955444 76.60213470]
[-305.88101196 79.58295441]
[-294.87750244 88.17127991]
[-288.63159180 100.72839355]
[-273.63241577 100.88652039]
[-258.63327026 101.04465485]
[-243.63409424 101.20278931]
[-230.82595825 93.60009003]
[-217.10812378 101.48243713]
[-202.10896301 101.64057159]
[-187.10978699 101.79869843]
[-184.32348633 86.14364624]
[-178.90422058 71.19129944]
[-171.01013184 57.38109970]
[-160.87214661 45.11910248]
[-148.78717041 34.76605988]
[-135.10939026 26.62677765]
[-120.23993683 20.94117355]
[-104.61509705 17.87717819]
[-88.69349670 17.52578735]
[-72.94265747 19.89836502]
[-57.82526779 24.92626762]
[-43.78558731 32.46283722]
[-31.23639107 42.28767395]
[-20.54683876 54.11308670]
[-12.03160477 67.59251404]
[-5.94162560 82.33068848]
[-2.45669866 97.89520264]
[12.52246761 97.10489655]
[27.50163460 96.31459045]
[42.48080063 95.52429199]
[57.45996475 94.73398590]
[72.43913269 93.94368744]
[87.41829681 93.15338135]
[99.24531555 85.69595337]
[111.79139709 91.86745453]
[126.77056122 91.07714844]
[141.74972534 90.28684998]
[155.12307739 81.83320618]
[168.24032593 88.88919830]
[183.21949768 88.09889221]
[198.38012695 77.70259094]
[213.70875549 86.18711090]
[228.66793823 85.08118439]
[243.62710571 83.97525024]
[252.02082825 80.19967651]
[258.91275024 83.00708771]
[273.89190674 82.21678162]
[288.87106323 81.42648315]
[303.85025024 80.63617706]
[318.82940674 79.84587097]
[333.80856323 79.05557251]
[337.02697754 72.78585815]
[342.01626587 67.88217163]
[348.24761963 64.81850433]
[355.07482910 63.87627792]
[361.80108643 65.11875153]
[367.75021362 68.38787079]
[372.33462524 73.32356262]
[375.11331177 79.40309906]
[390.07247925 80.50903320]
[405.03164673 81.61496735]
[413.60443115 68.87121582]
[427.40759277 62.13560104]
[442.72814941 63.21997833]
[455.44497681 71.83264923]
[462.13726807 85.65685272]
[461.00488281 100.97393799]
[452.35238647 113.66370392]
[438.50729370 120.31264496]
[423.19381714 119.13224792]
[410.53125000 110.44002533]
[403.92572021 96.57414246]
[388.96655273 95.46820831]
[374.00738525 94.36227417]
[354.62014771 107.00504303]
[334.59887695 94.03473663]
[319.61972046 94.82504272]
[304.64053345 95.61534119]
[289.66137695 96.40564728]
[274.68222046 97.19594574]
[259.70303345 97.98625183]
[244.73303223 98.93442535]
[229.77386475 100.04035950]
[214.81468201 101.14628601]
[206.64292908 110.12269592]
[194.14276123 111.12966919]
[184.00979614 103.07806396]
[169.03063965 103.86836243]
[156.72869873 112.26548004]
[142.54003906 105.26601410]
[127.56086731 106.05631256]
[112.58170319 106.84661865]
[100.75468445 114.30404663]
[88.20860291 108.13254547]
[73.22943878 108.92285156]
[58.25027084 109.71315002]
[43.27110291 110.50345612]
[28.29193687 111.29376221]
[13.31277084 112.08406067]
[-1.66639543 112.87436676]
[-3.15069079 126.94562531]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 57]
[19 56]
[20 55]
[22 53]
[23 52]
[24 51]
[25 50]
[30 44]
[31 43]
[74 147]
[75 146]
[76 145]
[77 144]
[78 143]
[79 142]
[80 141]
[82 139]
[83 138]
[84 137]
[86 135]
[87 134]
[89 131]
[90 130]
[91 129]
[93 128]
[94 127]
[95 126]
[96 125]
[97 124]
[98 123]
[106 121]
[107 120]
[108 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
