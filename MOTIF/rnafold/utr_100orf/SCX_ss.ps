%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:16:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGAGGCGGCAUGAGCAGCGCGCGACAGAGCUGACGCCGCGCCCCCGCCGGCCCCAUGUCCUUCGCCACGCUGCGCCCGGCGCCGCCGGGCCGCUACCUGUACCCCGAGGUGAGCCCGCUGUCGGAGGACGAGGACCGCGGCAGCGACAGCUCGG\
) } def
/len { sequence length } bind def

/coor [
[259.21728516 171.38301086]
[245.84538269 164.58651733]
[232.47348022 157.79003906]
[219.10157776 150.99356079]
[204.24995422 152.12434387]
[195.45341492 138.97399902]
[182.08151245 132.17752075]
[168.70960999 125.38104248]
[155.33770752 118.58455658]
[141.96580505 111.78807831]
[128.59388733 104.99159241]
[120.42041016 119.11231232]
[106.37040710 126.14715576]
[91.36523438 124.37034607]
[80.27080536 115.02278900]
[76.31977844 101.69113922]
[61.78656387 97.97823334]
[47.25334930 94.26533508]
[32.72013474 90.55242920]
[18.18691826 86.83953094]
[3.65370226 83.12662506]
[-13.92420483 88.52528381]
[-26.01879501 75.84257507]
[-40.62339401 72.42120361]
[-55.22798920 68.99983978]
[-69.83258820 65.57846832]
[-83.15718842 73.64647675]
[-97.91958618 69.96867371]
[-105.52908325 57.21598053]
[-120.13368225 53.79461288]
[-133.45828247 61.86261749]
[-148.22068787 58.18481827]
[-155.83016968 45.43212509]
[-170.43476868 42.01075745]
[-183.75938416 50.07876205]
[-198.52177429 46.40095901]
[-206.13127136 33.64826584]
[-220.73587036 30.22690010]
[-235.34046936 26.80553246]
[-249.94506836 23.38416672]
[-259.07186890 24.47465134]
[-264.80624390 19.74547195]
[-279.33944702 16.03256989]
[-294.97445679 20.98015213]
[-306.89245605 9.71545506]
[-302.83322144 -6.17336845]
[-286.97256470 -10.34125710]
[-275.62655640 1.49935448]
[-261.09332275 5.21225691]
[-246.52369690 8.77956963]
[-231.91909790 12.20093632]
[-217.31449890 15.62230301]
[-202.70989990 19.04366875]
[-190.22798157 10.99771881]
[-175.36810303 14.25942326]
[-167.01341248 27.40616035]
[-152.40881348 30.82752609]
[-139.92689514 22.78157616]
[-125.06701660 26.04327965]
[-116.71231079 39.19001770]
[-102.10771942 42.61138535]
[-89.62580109 34.56543350]
[-74.76592255 37.82713699]
[-66.41121674 50.97387314]
[-51.80662155 54.39524078]
[-37.20202637 57.81660843]
[-22.59742928 61.23797607]
[-12.12129402 55.12029266]
[0.10159873 57.89168930]
[7.36660433 68.59340668]
[21.89982033 72.30631256]
[36.43303680 76.01921082]
[50.96625137 79.73211670]
[65.49946594 83.44502258]
[80.03268433 87.15792084]
[87.91565704 77.54239655]
[100.32532501 72.73755646]
[114.36016083 74.77476501]
[117.63523865 60.13666534]
[120.91031647 45.49856949]
[124.18539429 30.86047363]
[127.46047211 16.22237778]
[125.01830292 -0.55475473]
[140.46371460 -7.54585361]
[151.45732117 5.36062050]
[142.09857178 19.49745560]
[138.82348633 34.13555145]
[135.54841614 48.77364731]
[132.27333069 63.41174316]
[128.99826050 78.04984283]
[135.39038086 91.61968994]
[148.76228333 98.41616821]
[162.13418579 105.21265411]
[175.50608826 112.00913239]
[188.87799072 118.80561829]
[202.24989319 125.60209656]
[218.05796814 124.95744324]
[225.89805603 137.62165833]
[239.26997375 144.41813660]
[252.64187622 151.21461487]
[266.01376343 158.01109314]
[274.60006714 153.87945557]
[283.98535156 154.19165039]
[292.03759766 158.74879456]
[296.98675537 166.40220642]
[297.81359863 175.34011841]
[310.75366211 182.92660522]
[323.69372559 190.51307678]
[336.63378906 198.09956360]
[349.57385254 205.68603516]
[365.39212036 205.99093628]
[372.45831299 219.10269165]
[385.39837646 226.68917847]
[394.21707153 223.08010864]
[403.56674194 223.95480347]
[411.33105469 228.98681641]
[415.81216431 236.92337036]
[416.10125732 245.89479065]
[428.56286621 254.24394226]
[441.02447510 262.59307861]
[453.48611450 270.94223022]
[465.94772339 279.29138184]
[478.40933228 287.64050293]
[490.87094116 295.98965454]
[503.33255005 304.33880615]
[516.15136719 302.61111450]
[526.37030029 309.86734009]
[528.80218506 321.75268555]
[541.09423828 330.34951782]
[556.14880371 326.11932373]
[570.37902832 332.60281372]
[577.06579590 346.73861694]
[573.05187988 361.85226440]
[560.23248291 370.80755615]
[544.66052246 369.37606812]
[533.68865967 358.23370361]
[532.49743652 342.64157104]
[520.20538330 334.04473877]
[502.68881226 333.49636841]
[494.98339844 316.80041504]
[482.52178955 308.45126343]
[470.06018066 300.10214233]
[457.59857178 291.75299072]
[445.13696289 283.40383911]
[432.67535400 275.05468750]
[420.21374512 266.70553589]
[407.75210571 258.35641479]
[387.14990234 258.87628174]
[377.81188965 239.62924194]
[364.87182617 232.04277039]
[349.97912598 232.28050232]
[341.98736572 218.62609863]
[329.04730225 211.03962708]
[316.10723877 203.45314026]
[303.16717529 195.86666870]
[290.22711182 188.28018188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 101]
[2 100]
[3 99]
[4 98]
[6 96]
[7 95]
[8 94]
[9 93]
[10 92]
[11 91]
[16 75]
[17 74]
[18 73]
[19 72]
[20 71]
[21 70]
[23 67]
[24 66]
[25 65]
[26 64]
[29 61]
[30 60]
[33 57]
[34 56]
[37 53]
[38 52]
[39 51]
[40 50]
[42 49]
[43 48]
[78 90]
[79 89]
[80 88]
[81 87]
[82 86]
[106 156]
[107 155]
[108 154]
[109 153]
[110 152]
[112 150]
[113 149]
[118 147]
[119 146]
[120 145]
[121 144]
[122 143]
[123 142]
[124 141]
[125 140]
[128 138]
[129 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
