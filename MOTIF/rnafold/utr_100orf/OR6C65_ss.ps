%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:30:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCAAAUAUGACAUCAAUUAGAGAAUUCAUUCUUCUGGGAUUUACAGAUAACCCAGAGUUACAAGUUGUGAUAUUCUUCUUUAUGUUGAUCACAUACU\
) } def
/len { sequence length } bind def

/coor [
[65.55812836 446.55334473]
[52.42645645 454.41577148]
[37.14443588 455.26342773]
[23.22377396 448.90151978]
[13.86333370 436.79199219]
[11.21407604 421.71749878]
[15.88477993 407.14208984]
[26.80215454 396.41503906]
[41.45746231 392.00137329]
[44.24068069 377.26184082]
[47.02389526 362.52230835]
[49.80711365 347.78277588]
[41.22613525 335.66244507]
[43.83874130 320.67483521]
[56.60984039 311.75650024]
[59.39305496 297.01696777]
[62.17626953 282.27743530]
[64.95948792 267.53790283]
[67.74270630 252.79837036]
[70.52591705 238.05883789]
[73.07957458 223.27781677]
[75.40304565 208.45886230]
[77.72651672 193.63989258]
[80.04999542 178.82093811]
[82.37346649 164.00198364]
[84.69693756 149.18302917]
[87.02040863 134.36407471]
[77.08525848 129.41876221]
[68.94529724 121.63247681]
[63.40219498 111.63562775]
[61.04161072 100.28117371]
[62.17272568 88.57198334]
[66.79176331 77.57229614]
[74.57360077 68.31100464]
[84.89287567 61.68558884]
[96.87363434 58.37561798]
[94.09042358 43.63608551]
[91.30720520 28.89655876]
[88.52398682 14.15703011]
[85.74076843 -0.58249879]
[82.95755768 -15.32202721]
[68.20271301 -19.22809029]
[56.60941696 -29.15574265]
[50.47952652 -43.13384247]
[51.03013992 -58.38702393]
[58.15192795 -71.88675690]
[70.43085480 -80.95266724]
[85.42893219 -83.78470612]
[100.16828156 -79.82057190]
[111.72238922 -69.84734344]
[117.79718781 -55.84521103]
[117.18650818 -40.59431458]
[110.01161957 -27.12272835]
[97.69708252 -18.10524368]
[100.48030090 -3.36571503]
[103.26351929 11.37381363]
[106.04673004 26.11334229]
[108.82994843 40.85287094]
[111.61316681 55.59239960]
[125.31001282 61.70765305]
[138.14208984 53.93991089]
[150.97416687 46.17216492]
[163.80624390 38.40442276]
[176.63832092 30.63667679]
[189.47038269 22.86893272]
[199.88922119 9.49417114]
[215.62551880 15.80333138]
[213.91915894 32.67119217]
[197.23812866 35.70100784]
[184.40605164 43.46875000]
[171.57398987 51.23649597]
[158.74191284 59.00424194]
[145.90983582 66.77198792]
[133.07775879 74.53972626]
[139.75224304 91.08321381]
[138.82618713 108.46578217]
[130.83721924 123.44370270]
[117.60695648 133.37577820]
[101.83936310 136.68754578]
[99.51589203 151.50650024]
[97.19242096 166.32545471]
[94.86894989 181.14440918]
[92.54547882 195.96337891]
[90.22200012 210.78233337]
[87.89852905 225.60128784]
[89.67739105 234.74613953]
[85.26544952 240.84205627]
[82.48223114 255.58158875]
[79.69901276 270.32110596]
[76.91580200 285.06063843]
[74.13258362 299.80017090]
[71.34936523 314.53970337]
[79.98901367 327.50097656]
[76.95646667 342.40930176]
[64.54663849 350.56600952]
[61.76342392 365.30554199]
[58.98020935 380.04504395]
[56.19699097 394.78457642]
[68.23374939 404.23843384]
[74.48776245 418.20788574]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 98]
[10 97]
[11 96]
[12 95]
[15 92]
[16 91]
[17 90]
[18 89]
[19 88]
[20 87]
[21 85]
[22 84]
[23 83]
[24 82]
[25 81]
[26 80]
[27 79]
[36 59]
[37 58]
[38 57]
[39 56]
[40 55]
[41 54]
[60 74]
[61 73]
[62 72]
[63 71]
[64 70]
[65 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
