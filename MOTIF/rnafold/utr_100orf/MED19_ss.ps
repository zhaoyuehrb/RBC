%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:45:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGUUGAAAAAAGGUAGGCGGUGCCUGAGGCAUCCAAUGACAAGCGGCUCCUUGAGAAAGGGCGGGGGGGUACUCCUUGAAAGCAUUGUCCAAUGAAAAUUACCAACGGCAGACACGGAGACAGCGCCGGGGCGGAGGGUACGAUGGAGAAUUUCACGGCACUGUUUGGGGCUCAGGCUGACCCACCACCGC\
) } def
/len { sequence length } bind def

/coor [
[58.28689194 574.48492432]
[53.06285477 588.71466064]
[43.28464127 600.29748535]
[30.13301277 607.83477783]
[15.19609833 610.41632080]
[0.27759901 607.73034668]
[-12.82100201 600.10131836]
[-22.51798630 588.45037842]
[-27.64239502 574.18444824]
[-27.57542992 559.02624512]
[-22.32518005 544.80615234]
[-12.52563477 533.24139404]
[0.63985932 525.72833252]
[15.58150673 523.17431641]
[18.23937225 508.41168213]
[20.89723587 493.64904785]
[18.98558998 486.49877930]
[23.71951866 478.66970825]
[26.61608887 463.95202637]
[21.48211288 449.97018433]
[31.73865891 437.92385864]
[34.63522720 423.20620728]
[26.26599312 404.34857178]
[40.57136536 388.40567017]
[42.74979401 373.56469727]
[44.92822266 358.72372437]
[47.10665131 343.88275146]
[49.28507996 329.04177856]
[51.46350861 314.20080566]
[49.32132339 307.11621094]
[53.79925156 299.13793945]
[56.21771240 284.33416748]
[54.19053268 277.21582031]
[58.79706573 269.31109619]
[61.45492935 254.54844666]
[64.11279297 239.78579712]
[66.77066040 225.02314758]
[64.82091522 220.64920044]
[65.60818481 215.00283813]
[69.76103973 209.82882690]
[72.89555359 195.15998840]
[76.03006744 180.49114990]
[79.16458130 165.82231140]
[72.86374664 149.44996643]
[85.29566193 135.87474060]
[88.19223022 121.15707397]
[72.49738312 113.66448212]
[63.17013550 94.82798767]
[48.61048889 91.22011566]
[39.51340866 92.19361115]
[33.84524155 87.43413544]
[19.34593010 83.59097290]
[4.84661722 79.74780273]
[-9.65269566 75.90464020]
[-25.33147049 80.71172333]
[-37.14790344 69.34053040]
[-32.94625854 53.48877335]
[-17.04883003 49.46337891]
[-5.80952930 61.40532684]
[8.68978405 65.24848938]
[23.18909645 69.09165955]
[37.68840790 72.93482971]
[52.21836472 76.66046906]
[66.77800751 80.26834106]
[73.88909149 67.06105804]
[62.86189651 56.89242935]
[51.83470154 46.72380447]
[40.80750656 36.55517578]
[29.78030968 26.38655090]
[13.67107964 23.31657791]
[8.53138638 7.74366665]
[19.64850616 -4.31210756]
[35.58609772 -0.44879681]
[39.94893646 15.35935593]
[50.97613144 25.52798080]
[62.00332642 35.69660568]
[73.03052521 45.86523438]
[84.05771637 56.03385925]
[99.01790619 54.94174576]
[108.45142365 43.27946472]
[117.88493347 31.61717987]
[127.31844330 19.95489693]
[128.13345337 14.77023888]
[130.61462402 10.81875896]
[134.00946045 8.52976322]
[137.50430298 7.96996117]
[147.49302673 -3.22045040]
[157.48176575 -14.41086197]
[160.89926147 -29.85855484]
[175.14678955 -34.20106125]
[185.13551331 -45.39147186]
[195.12425232 -56.58188629]
[205.11297607 -67.77229309]
[208.53048706 -83.21998596]
[222.77799988 -87.56250000]
[232.76673889 -98.75290680]
[217.88136292 -100.60385895]
[209.90623474 -113.30807495]
[214.70906067 -127.51837921]
[228.75614929 -132.77949524]
[241.71229553 -125.22052002]
[244.04473877 -110.40223694]
[254.90583801 -120.74809265]
[265.76690674 -131.09394836]
[276.62802124 -141.43980408]
[273.12918091 -156.32957458]
[277.52401733 -170.87544250]
[288.53637695 -181.19989014]
[303.14025879 -184.60321045]
[317.39083862 -180.26890564]
[328.25192261 -190.61476135]
[325.83883667 -201.03262329]
[327.95919800 -211.43148804]
[334.16336060 -219.94218445]
[343.27374268 -225.06349182]
[353.60806274 -225.92680359]
[363.28976440 -222.44279480]
[374.64047241 -232.24900818]
[385.99114990 -242.05522156]
[384.55191040 -257.50540161]
[392.49786377 -270.83361816]
[406.77362061 -276.91491699]
[421.88989258 -273.41088867]
[432.03411865 -261.66891479]
[433.30569458 -246.20402527]
[425.21563721 -232.96278381]
[410.87472534 -227.03672791]
[395.79736328 -230.70452881]
[384.44668579 -220.89831543]
[373.09597778 -211.09210205]
[373.12322998 -191.62297058]
[358.61514282 -178.18716431]
[338.59777832 -179.75367737]
[327.73669434 -169.40782166]
[331.37384033 -154.96356201]
[327.26535034 -140.54217529]
[316.41830444 -130.04418945]
[301.67614746 -126.36092377]
[286.97387695 -130.57872009]
[276.11279297 -120.23285675]
[265.25167847 -109.88700104]
[254.39059448 -99.54114532]
[243.95713806 -88.76418304]
[233.96841431 -77.57376862]
[231.26536560 -62.92649078]
[216.30339050 -57.78356934]
[206.31465149 -46.59315491]
[196.32592773 -35.40274429]
[186.33720398 -24.21233368]
[183.63415527 -9.56505394]
[168.67216492 -4.42213345]
[158.68344116 6.76827812]
[148.69471741 17.95868874]
[138.98072815 29.38840866]
[129.54721069 41.05069351]
[120.11370850 52.71297455]
[110.68019104 64.37525940]
[130.65142822 88.12735748]
[124.48107910 114.68895721]
[102.90990448 124.05364227]
[100.01332855 138.77131653]
[106.54273224 149.90550232]
[103.81758881 162.11146545]
[93.83341980 168.95683289]
[90.69890594 183.62567139]
[87.56439209 198.29450989]
[84.42987823 212.96334839]
[81.53330994 227.68101501]
[78.87544250 242.44366455]
[76.21757507 257.20629883]
[73.55971527 271.96896362]
[71.02146149 286.75265503]
[68.60300446 301.55639648]
[66.30448151 316.37924194]
[64.12605286 331.22021484]
[61.94762039 346.06118774]
[59.76919174 360.90216064]
[57.59076691 375.74313354]
[55.41233826 390.58410645]
[62.01494217 397.35104370]
[64.71533203 406.26782227]
[63.02696228 415.29019165]
[57.45463943 422.41015625]
[49.35290146 426.10278320]
[46.45633316 440.82043457]
[51.38312531 455.85498047]
[41.33375931 466.84860229]
[38.43719101 481.56625366]
[35.65988541 496.30691528]
[33.00201797 511.06954956]
[30.34415436 525.83221436]
[43.45679092 533.43707275]
[53.17523193 545.07012939]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 191]
[15 190]
[16 189]
[18 188]
[19 187]
[21 185]
[22 184]
[24 179]
[25 178]
[26 177]
[27 176]
[28 175]
[29 174]
[31 173]
[32 172]
[34 171]
[35 170]
[36 169]
[37 168]
[40 167]
[41 166]
[42 165]
[43 164]
[45 161]
[46 160]
[48 64]
[49 63]
[51 62]
[52 61]
[53 60]
[54 59]
[65 78]
[66 77]
[67 76]
[68 75]
[69 74]
[79 157]
[80 156]
[81 155]
[82 154]
[86 153]
[87 152]
[88 151]
[90 149]
[91 148]
[92 147]
[93 146]
[95 144]
[96 143]
[102 142]
[103 141]
[104 140]
[105 139]
[110 134]
[111 133]
[117 130]
[118 129]
[119 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
