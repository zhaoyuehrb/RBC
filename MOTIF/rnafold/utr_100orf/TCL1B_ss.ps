%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGAAAGCUACACGUGUGAGCCUAGAGGCGGGUCCCGGUUGCAGACUUGCCAUGGCCUCCGAAGCUUCUGUGCGUCUAGGGGUGCCCCCUGGCCGUCUGUGGAUCCAGAGGCCUGGCAUCUACGAAGAUGAGGAGGGGAGAACCUGGGUGA\
) } def
/len { sequence length } bind def

/coor [
[-53.36151123 403.68801880]
[-54.70430374 418.71664429]
[-59.89194870 432.88528442]
[-68.57073975 445.22793579]
[-80.14894104 454.90304565]
[-93.83713531 461.25094604]
[-108.70204163 463.83880615]
[-123.73013306 462.49020386]
[-137.89678955 457.29708862]
[-150.23608398 448.61352539]
[-159.90672302 437.03158569]
[-166.24932861 423.34094238]
[-168.83145142 408.47506714]
[-167.47705078 393.44747925]
[-162.27847290 379.28283691]
[-153.59014893 366.94689941]
[-142.00448608 357.28073120]
[-128.31138611 350.94342041]
[-113.44448853 348.36700439]
[-98.41744232 349.72723389]
[-93.25478363 335.64364624]
[-88.09212494 321.56008911]
[-82.92946625 307.47650146]
[-77.76680756 293.39294434]
[-72.60414886 279.30935669]
[-85.99140930 266.64776611]
[-92.56613159 249.43414307]
[-107.55331421 248.81427002]
[-122.54050446 248.19439697]
[-137.52769470 247.57452393]
[-152.51487732 246.95465088]
[-167.50205994 246.33477783]
[-182.48924255 245.71490479]
[-197.47644043 245.09503174]
[-206.26197815 257.77642822]
[-220.51766968 263.67376709]
[-235.69458008 260.90524292]
[-246.94981384 250.35426331]
[-250.69187927 235.38760376]
[-245.72666931 220.78109741]
[-233.63858032 211.19560242]
[-218.28488159 209.68981934]
[-204.56486511 216.74424744]
[-196.85656738 230.10783386]
[-181.86936951 230.72770691]
[-166.88218689 231.34759521]
[-151.89500427 231.96746826]
[-136.90782166 232.58734131]
[-121.92063141 233.20721436]
[-106.93344116 233.82708740]
[-91.94625854 234.44696045]
[-85.31501007 219.38868713]
[-73.31509399 208.05349731]
[-57.80376434 202.25283813]
[-41.20402145 202.93708801]
[-26.12614822 210.04014587]
[-15.09029007 199.88093567]
[-4.05443144 189.72171021]
[6.98142719 179.56248474]
[18.01728630 169.40325928]
[14.62687397 154.89909363]
[18.98059273 140.54985046]
[30.00501251 130.23826599]
[44.80778122 126.80682373]
[59.43604660 131.27459717]
[70.47190094 121.11537933]
[81.50776672 110.95615387]
[92.54362488 100.79693604]
[84.21518707 96.84040833]
[78.34514618 88.12525940]
[76.93692017 75.98492432]
[81.35762024 62.48110962]
[86.22811127 48.29385376]
[91.09860229 34.10659409]
[88.26143646 18.54185486]
[99.71205139 9.01647949]
[104.58254242 -5.17077875]
[109.45303345 -19.35803795]
[114.32352448 -33.54529572]
[119.19401550 -47.73255539]
[124.06450653 -61.91981506]
[128.93499756 -76.10707092]
[128.35922241 -93.05123901]
[144.48182678 -98.29512787]
[153.98394775 -84.25426483]
[143.12225342 -71.23657990]
[138.25177002 -57.04932022]
[133.38127136 -42.86206436]
[128.51078796 -28.67480469]
[123.64028931 -14.48754501]
[118.76979828 -0.30028674]
[113.89930725 13.88697147]
[117.08483887 28.43694305]
[105.28585815 38.97708511]
[100.41536713 53.16434479]
[95.54487610 67.35160065]
[100.27280426 73.17369080]
[109.72866821 84.81786346]
[114.45659637 90.63994598]
[129.34140015 88.78455353]
[144.22621155 86.92916870]
[159.11102295 85.07377625]
[173.99583435 83.21839142]
[188.88064575 81.36299896]
[203.74548340 79.35388947]
[218.58876038 77.19126892]
[233.43205261 75.02865601]
[248.27532959 72.86604309]
[260.80456543 62.28539658]
[276.13845825 68.09951782]
[278.50280762 84.32733154]
[265.46536255 94.27505493]
[250.43794250 87.70932770]
[235.59466553 89.87194061]
[220.75137329 92.03455353]
[205.90809631 94.19717407]
[199.70338440 98.29965973]
[190.73602295 96.24781036]
[175.85122681 98.10319519]
[160.96641541 99.95858765]
[146.08160400 101.81397247]
[131.19679260 103.66936493]
[116.31198120 105.52475739]
[102.70284271 111.83279419]
[91.66698456 121.99201202]
[80.63112640 132.15124512]
[69.59526825 142.31045532]
[72.83979797 157.25770569]
[68.19766998 171.72656250]
[57.01092529 181.86180115]
[42.35115433 185.01570129]
[28.17650986 180.43911743]
[17.14064980 190.59834290]
[6.10479212 200.75756836]
[-4.93106651 210.91679382]
[-15.96692562 221.07601929]
[-11.10643196 232.13633728]
[-9.59262753 244.09796143]
[-11.53672028 255.97274780]
[-16.76483917 266.78366089]
[-24.83348465 275.64517212]
[-35.06712723 281.83572388]
[-46.61473846 284.85662842]
[-58.52057648 284.47201538]
[-63.68323517 298.55560303]
[-68.84589386 312.63916016]
[-74.00855255 326.72274780]
[-79.17121124 340.80630493]
[-84.33386993 354.88989258]
[-71.98786926 363.56390381]
[-62.30829620 375.13836670]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 149]
[21 148]
[22 147]
[23 146]
[24 145]
[25 144]
[27 51]
[28 50]
[29 49]
[30 48]
[31 47]
[32 46]
[33 45]
[34 44]
[56 136]
[57 135]
[58 134]
[59 133]
[60 132]
[65 127]
[66 126]
[67 125]
[68 124]
[72 96]
[73 95]
[74 94]
[76 92]
[77 91]
[78 90]
[79 89]
[80 88]
[81 87]
[82 86]
[99 123]
[100 122]
[101 121]
[102 120]
[103 119]
[104 118]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
