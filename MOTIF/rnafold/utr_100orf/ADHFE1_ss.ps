%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:18:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGACCCGAGGAGGGAAGAGGACUCCAAGCGCCAUGGCCGCUGCCGCCCGAGCCCGGGUCGCGUACUUGCUGAGGCAACUGCAACGCGCAGCGUGCCAGUGCCCAACUCAUUCUCAUACUUACUCCCAAGCCC\
) } def
/len { sequence length } bind def

/coor [
[92.84741974 664.11895752]
[101.18478394 649.99731445]
[100.83574677 635.00140381]
[88.40635681 629.22540283]
[79.65131378 618.59411621]
[76.33426666 605.15893555]
[79.16229248 591.54455566]
[87.63615417 580.43646240]
[100.13729095 574.05072021]
[100.13729095 559.05072021]
[100.13729095 544.05072021]
[89.45642090 533.73303223]
[89.24273682 518.52093506]
[100.13729095 507.38778687]
[100.13729095 492.38778687]
[87.99887085 483.79727173]
[83.18956757 469.53775024]
[87.75231171 455.01071167]
[100.13729095 445.85000610]
[100.13729095 430.85000610]
[100.13729095 415.85000610]
[100.13729095 400.85000610]
[100.13729095 385.85000610]
[84.67294312 379.89239502]
[72.62983704 368.45501709]
[65.85310364 353.25170898]
[65.39569855 336.57620239]
[71.35484314 320.95602417]
[82.85310364 308.76940918]
[98.16741943 301.88317871]
[97.46954346 286.89941406]
[96.77166748 271.91564941]
[96.07378387 256.93188477]
[93.14031219 253.05763245]
[92.67171478 247.27772522]
[95.70850372 241.23808289]
[95.70850372 226.23808289]
[95.70850372 211.23808289]
[95.70850372 196.23808289]
[95.53397369 181.23908997]
[95.18494415 166.24314880]
[94.83590698 151.24722290]
[94.48687744 136.25128174]
[94.13784027 121.25534058]
[93.78880310 106.25939941]
[75.36031342 110.13082123]
[55.53776169 99.59597778]
[46.44099426 87.66916656]
[37.34422684 75.74235535]
[28.24746132 63.81554413]
[19.15069580 51.88873291]
[3.81789947 46.07173920]
[1.45660412 29.84348106]
[14.49590683 19.89820099]
[29.52209091 26.46674728]
[31.07750702 42.79196548]
[40.17427444 54.71877670]
[49.27103806 66.64559174]
[58.36780548 78.57240295]
[67.46456909 90.49921417]
[82.29395294 88.23882294]
[97.12202454 85.97864532]
[102.25232697 71.88325500]
[107.38262939 57.78786469]
[112.51293182 43.69247437]
[111.56288147 38.37214279]
[112.69454956 33.71387100]
[115.28565216 30.41522408]
[118.52423859 28.81396866]
[124.62528992 15.11078644]
[130.72633362 1.40760458]
[130.40863037 -5.34505463]
[133.18762207 -10.43467999]
[137.44328308 -12.78083992]
[144.17527771 -26.18532944]
[142.68209839 -42.51635742]
[156.23283386 -51.75267410]
[170.88764954 -44.39274979]
[171.57092285 -28.00784492]
[157.57975769 -19.45334244]
[150.84777832 -6.04885244]
[144.42951965 7.50865412]
[138.32846069 21.21183586]
[132.22741699 34.91501617]
[126.60832214 48.82277679]
[121.47801971 62.91816330]
[116.34771729 77.01355743]
[111.21741486 91.10894012]
[108.78474426 105.91036987]
[109.13378143 120.90630341]
[109.48281097 135.90223694]
[109.83184814 150.89817810]
[110.18088531 165.89411926]
[110.52991486 180.89006042]
[113.88331604 189.48750305]
[110.70850372 196.23808289]
[110.70850372 211.23808289]
[110.70850372 226.23808289]
[110.70850372 241.23808289]
[111.05754089 256.23400879]
[111.75541687 271.21777344]
[112.45330048 286.20153809]
[113.15117645 301.18527222]
[126.11918640 305.06866455]
[137.22608948 312.76718140]
[145.38600159 323.51092529]
[149.80654907 336.23312378]
[150.06568909 349.67602539]
[146.15213013 362.51535034]
[138.46487427 373.49063110]
[127.77272034 381.52896118]
[115.13729095 385.85000610]
[115.13729095 400.85000610]
[115.13729095 415.85000610]
[115.13729095 430.85000610]
[115.13729095 445.85000610]
[127.52227020 455.01071167]
[132.08502197 469.53775024]
[127.27571106 483.79727173]
[115.13729095 492.38778687]
[115.13729095 507.38778687]
[126.03184509 518.52093506]
[125.81816101 533.73303223]
[115.13729095 544.05072021]
[115.13729095 559.05072021]
[115.13729095 574.05072021]
[129.51039124 582.13586426]
[137.82058716 596.27160645]
[137.89454651 612.57531738]
[129.80630493 626.62365723]
[115.83168793 634.65234375]
[116.18072510 649.64831543]
[125.16606903 663.36676025]
[117.53766632 677.88360596]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 132]
[3 131]
[9 126]
[10 125]
[11 124]
[14 121]
[15 120]
[19 116]
[20 115]
[21 114]
[22 113]
[23 112]
[30 103]
[31 102]
[32 101]
[33 100]
[36 99]
[37 98]
[38 97]
[39 96]
[40 94]
[41 93]
[42 92]
[43 91]
[44 90]
[45 89]
[47 60]
[48 59]
[49 58]
[50 57]
[51 56]
[62 88]
[63 87]
[64 86]
[65 85]
[69 84]
[70 83]
[71 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
