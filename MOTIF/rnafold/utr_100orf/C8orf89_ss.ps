%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:30:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGCAGCAUCUCCCUCUCAUCAGCACUGUUGAAAGAAGAAAAAAUGUCAGUGCUAUCUCCUGAAAUCAAAUGUGAGACUUCUAAAUUCACCAGAAGUUCCUUUGGCAGUUGUUUGAUUUUUGAGAGUAGUUGGAAGAAAGCAG\
) } def
/len { sequence length } bind def

/coor [
[111.49163818 356.62515259]
[96.37079620 359.68518066]
[82.00427246 354.06320190]
[72.97636414 341.55319214]
[72.16784668 326.14703369]
[79.83671570 312.76077271]
[93.53585815 305.66592407]
[94.83419800 290.72222900]
[86.54629517 275.28948975]
[97.12860870 260.26171875]
[98.10289764 245.29339600]
[99.07718658 230.32507324]
[99.88927460 215.34706116]
[100.53905487 200.36114502]
[100.37656403 185.36203003]
[99.40226746 170.39370728]
[98.42797852 155.42538452]
[97.45368958 140.45704651]
[96.47940063 125.48872375]
[95.50510406 110.52040100]
[91.42720795 110.62861633]
[87.05731201 109.18332672]
[82.96387482 106.06734467]
[68.07024384 104.28411102]
[53.17662048 102.50088501]
[38.28299713 100.71765137]
[23.38936996 98.93442535]
[8.49574375 97.15119171]
[-6.39788198 95.36795807]
[-12.52450752 109.18663788]
[-22.45332527 120.58444214]
[-35.30147552 128.54789734]
[-49.92650223 132.36888123]
[-65.02796936 131.70764160]
[-79.26305389 126.62297821]
[-91.36598206 117.56701660]
[-100.26057434 105.34500122]
[-105.15593719 91.04371643]
[-105.61676025 75.93480682]
[-101.60208130 61.36175919]
[-93.46887207 48.62039185]
[-81.94034576 38.84366226]
[-68.04160309 32.90090942]
[-53.00850677 31.32056046]
[-38.17779922 34.24313736]
[-24.86820793 41.40876389]
[-14.26321888 52.18028259]
[-7.30581713 65.59989166]
[-4.61465120 80.47433472]
[10.27897453 82.25756836]
[25.17259979 84.04079437]
[40.06622696 85.82402802]
[54.95985031 87.60725403]
[69.85347748 89.39048767]
[84.74710083 91.17372131]
[71.82486725 83.55690765]
[66.26898193 69.62377167]
[70.40447998 55.20512009]
[82.50074005 46.33491135]
[97.49565887 46.72518921]
[109.11412048 56.21263123]
[112.49397278 70.82688904]
[106.21994019 84.45305634]
[117.43930817 74.49686432]
[128.65867615 64.54067230]
[139.87805176 54.58447647]
[151.09741211 44.62828445]
[162.31678772 34.67209244]
[173.53614807 24.71589851]
[184.75552368 14.75970650]
[195.97488403 4.80351400]
[207.19425964 -5.15267849]
[208.45266724 -9.48565483]
[210.81877136 -12.82088375]
[213.82759094 -14.92817974]
[216.98738098 -15.75785351]
[219.84284973 -15.43317986]
[231.88188171 -24.38090134]
[243.92091370 -33.32862091]
[255.95994568 -42.27634430]
[262.42059326 -56.71832275]
[277.25094604 -58.10035324]
[289.28997803 -67.04807281]
[301.32901001 -75.99579620]
[313.36804199 -84.94351959]
[325.40707397 -93.89123535]
[336.94403076 -103.47761536]
[347.94506836 -113.67453766]
[358.94610596 -123.87145233]
[363.26831055 -139.69076538]
[379.19592285 -143.59500122]
[390.34396362 -131.56781006]
[385.24429321 -115.98175049]
[369.14300537 -112.87041473]
[358.14196777 -102.67349243]
[347.14093018 -92.47657776]
[361.70635986 -88.89218140]
[368.18634033 -75.36406708]
[361.85043335 -61.76789093]
[347.32388306 -58.02899933]
[335.21121216 -66.87681580]
[334.35476685 -81.85220337]
[322.31573486 -72.90448761]
[310.27670288 -63.95676422]
[298.23767090 -55.00904465]
[286.19863892 -46.06132126]
[280.59912109 -32.25934219]
[264.90768433 -30.23731041]
[252.86863708 -21.28959084]
[240.82960510 -12.34186935]
[228.79057312 -3.39414787]
[217.15045166 6.06668997]
[205.93107605 16.02288246]
[194.71171570 25.97907448]
[183.49234009 35.93526840]
[172.27297974 45.89146042]
[161.05360413 55.84765244]
[149.83424377 65.80384827]
[138.61486816 75.76004028]
[127.39550018 85.71623230]
[116.17613220 95.67242432]
[110.47343445 109.54611206]
[111.44772339 124.51443481]
[112.42201233 139.48275757]
[113.39630127 154.45108032]
[114.37059784 169.41941833]
[115.34488678 184.38774109]
[127.31316376 175.34559631]
[141.89816284 178.84956360]
[148.45269775 192.34170532]
[142.19187927 205.97264099]
[127.68618011 209.79164124]
[115.52497101 201.01092529]
[114.87519073 215.99684143]
[117.64531708 224.78068542]
[114.04551697 231.29936218]
[113.07122040 246.26768494]
[112.09693146 261.23602295]
[120.02529144 271.47094727]
[118.86095428 283.96151733]
[109.77790833 292.02056885]
[108.47956085 306.96426392]
[120.74984741 316.31539917]
[125.99517059 330.82366943]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 142]
[8 141]
[10 138]
[11 137]
[12 136]
[13 134]
[14 133]
[15 127]
[16 126]
[17 125]
[18 124]
[19 123]
[20 122]
[23 55]
[24 54]
[25 53]
[26 52]
[27 51]
[28 50]
[29 49]
[63 121]
[64 120]
[65 119]
[66 118]
[67 117]
[68 116]
[69 115]
[70 114]
[71 113]
[72 112]
[77 111]
[78 110]
[79 109]
[80 108]
[82 106]
[83 105]
[84 104]
[85 103]
[86 102]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
