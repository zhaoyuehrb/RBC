%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:03:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGAGCACUGCUGCACUUCUAAAGAAAGAAGAAAAGGAGAUUUGUAAUUUAUGCGGCAUGCAUGAUGAAUGUACUCCACAGCAGACAAUGUCCUCCAUUCAAGAUACCAAAGCAGCAGACAUUGCUGCAAGAGGGGAACUAAAUGUCAUAGAAACAG\
) } def
/len { sequence length } bind def

/coor [
[310.09265137 186.81840515]
[296.08364868 181.45672607]
[282.07464600 176.09503174]
[268.06564331 170.73335266]
[253.41354370 173.41017151]
[243.29075623 161.25123596]
[229.28173828 155.88955688]
[215.27273560 150.52787781]
[200.62063599 153.20469666]
[190.49784851 141.04576111]
[176.48884583 135.68408203]
[162.42753601 130.46105957]
[148.31533813 125.37719727]
[134.20312500 120.29334259]
[120.09091949 115.20948029]
[101.87787628 130.98028564]
[73.50271606 125.64576721]
[61.14501953 134.14796448]
[48.78732300 142.65016174]
[36.42963028 151.15235901]
[24.07193565 159.65455627]
[21.44632912 175.23922729]
[8.52146149 184.33445740]
[-7.03457165 181.54423523]
[-15.99265194 168.52392578]
[-13.03810978 152.99826050]
[0.07617788 144.17834473]
[15.56973648 147.29687500]
[27.92743111 138.79466248]
[40.28512573 130.29246521]
[52.64281845 121.79026794]
[65.00051117 113.28807068]
[65.37083435 105.79721832]
[50.38914490 105.05632782]
[51.13027954 90.07465363]
[66.11147308 90.81551361]
[66.48179626 83.32466125]
[55.02294159 73.64506531]
[43.56409073 63.96546173]
[32.10523605 54.28586197]
[19.99005127 62.11386108]
[6.17297697 66.19847870]
[-8.21924877 66.21601868]
[-22.01563644 62.17405701]
[-34.09621811 54.41008759]
[-43.48295975 43.56337738]
[-49.41894531 30.52232933]
[-51.42940521 16.35171700]
[-49.35967636 2.20575142]
[-43.38706589 -10.76592636]
[-54.65243912 -20.67003250]
[-65.91781616 -30.57413864]
[-77.18318939 -40.47824478]
[-88.44856262 -50.38235092]
[-99.71394348 -60.28645706]
[-115.75176239 -60.69601440]
[-125.31568146 -73.57666016]
[-121.06907654 -89.04746246]
[-106.26957703 -95.24055481]
[-92.27009583 -87.40512085]
[-89.80983734 -71.55183411]
[-78.54445648 -61.64772797]
[-67.27908325 -51.74362183]
[-56.01371002 -41.83951569]
[-44.74833298 -31.93540764]
[-33.48295975 -22.03130150]
[-20.12033653 -30.15558434]
[-4.88422489 -33.76552963]
[10.74172211 -32.49731064]
[25.23209572 -26.46271896]
[37.16863632 -16.23943520]
[45.37905121 -2.81573391]
[49.05213165 12.50503540]
[47.81790161 28.23099518]
[41.78483582 42.82700729]
[53.24369049 52.50660706]
[64.70254517 62.18621063]
[76.16139984 71.86581421]
[95.81324768 66.30271149]
[113.65945435 72.13022614]
[124.17800140 85.64585876]
[125.17478180 101.09727478]
[139.28698730 106.18112946]
[153.39920044 111.26499176]
[167.51139832 116.34884644]
[176.70027161 116.31858826]
[181.85052490 121.67507172]
[195.85952759 127.03675079]
[211.51364136 124.74343109]
[220.63441467 136.51885986]
[234.64341736 141.88055420]
[248.65243530 147.24223328]
[264.30654907 144.94891357]
[273.42730713 156.72434998]
[287.43634033 162.08602905]
[301.44534302 167.44770813]
[315.45434570 172.80938721]
[326.50265503 155.93162537]
[341.29495239 142.22726440]
[358.95278931 132.50517273]
[378.42877197 127.33789825]
[398.56869507 127.02790070]
[418.17984009 131.58990479]
[436.10174561 140.75024414]
[451.27478027 153.96321106]
[462.80282593 170.44366455]
[470.00622559 189.21357727]
[472.46179199 209.16017151]
[487.40252686 210.49211121]
[498.32116699 197.60720825]
[514.60223389 193.78781128]
[529.80718994 200.34162903]
[538.04302979 214.51371765]
[553.00720215 215.55021667]
[567.97131348 216.58670044]
[582.93548584 217.62319946]
[597.89965820 218.65968323]
[612.86376953 219.69618225]
[625.86004639 210.28996277]
[641.27795410 214.72480774]
[647.29016113 229.59869385]
[639.28472900 243.50163269]
[623.40258789 245.76849365]
[611.82727051 234.66032410]
[596.86315918 233.62384033]
[581.89898682 232.58734131]
[566.93487549 231.55084229]
[551.97070312 230.51435852]
[537.00653076 229.47785950]
[529.39642334 240.48300171]
[517.23883057 246.32540894]
[503.67504883 245.37646484]
[492.26892090 237.77795410]
[486.07058716 225.43286133]
[471.12985229 224.10092163]
[468.55572510 234.46992493]
[464.66381836 244.42146301]
[459.51882935 253.78878784]
[453.20648193 262.41488647]
[445.83206177 270.15509033]
[437.51870728 276.87954712]
[428.40524292 282.47537231]
[418.64401245 286.84844971]
[408.39819336 289.92523193]
[397.83917236 291.65371704]
[387.14358521 292.00457764]
[376.49044800 290.97149658]
[366.05816650 288.57125854]
[356.02142334 284.84362793]
[346.54837036 279.85058594]
[337.79779053 273.67526245]
[329.91641235 266.42071533]
[323.03649902 258.20797729]
[317.27349854 249.17427063]
[312.72430420 239.47052002]
[309.46545410 229.25900269]
[307.55194092 218.71046448]
[307.01623535 208.00140381]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 97]
[2 96]
[3 95]
[4 94]
[6 92]
[7 91]
[8 90]
[10 88]
[11 87]
[12 85]
[13 84]
[14 83]
[15 82]
[17 32]
[18 31]
[19 30]
[20 29]
[21 28]
[37 78]
[38 77]
[39 76]
[40 75]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
[108 135]
[109 134]
[113 129]
[114 128]
[115 127]
[116 126]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
