%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:17:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUCUCCAGUUGGUGACCAAGAGUACAUCUCUUUUCAAAUAGCUGGAUUAGGUCCUCAUGCUGCUGUGGUCAUUGCUGGUCAUCUUUGAUGCAGUCACUGAACAGGCAGAUUCGCUGACCCUUGUGGCGCCCUCUUCUGUCUUCGAAGGAGACAGCA\
) } def
/len { sequence length } bind def

/coor [
[129.83193970 182.62478638]
[123.55204010 169.00263977]
[117.27214813 155.38049316]
[110.99224854 141.75834656]
[94.11421967 142.77787781]
[78.13867950 137.23803711]
[65.51525879 125.98829651]
[52.15016174 132.79815674]
[38.78506470 139.60801697]
[25.41996574 146.41787720]
[12.05486870 153.22772217]
[-1.31022954 160.03758240]
[-14.67532730 166.84744263]
[-28.04042435 173.65730286]
[-37.67691422 189.32052612]
[-55.13593292 187.77963257]
[-68.36475372 194.85058594]
[-81.59357452 201.92153931]
[-86.09601593 214.04447937]
[-97.30226898 219.65107727]
[-108.93353271 216.21203613]
[-122.29862976 223.02188110]
[-135.66372681 229.83174133]
[-149.02882385 236.64160156]
[-162.39392090 243.45146179]
[-168.69905090 258.20358276]
[-184.20159912 262.33276367]
[-197.00936890 252.67146301]
[-197.29731750 236.63099670]
[-184.84455872 226.51623535]
[-169.20378113 230.08636475]
[-155.83868408 223.27650452]
[-142.47358704 216.46664429]
[-129.10848999 209.65678406]
[-115.74338531 202.84693909]
[-107.02468109 187.64247131]
[-88.66452026 188.69271851]
[-75.43570709 181.62176514]
[-62.20688629 174.55081177]
[-58.37766647 163.04211426]
[-47.37041092 157.05426025]
[-34.85028458 160.29220581]
[-21.48518562 153.48234558]
[-8.12008667 146.67248535]
[5.24501085 139.86262512]
[18.61010933 133.05278015]
[31.97520638 126.24291992]
[45.34030533 119.43305969]
[58.70540237 112.62319946]
[57.68146515 91.41333771]
[66.89126587 72.27996063]
[84.10762024 59.85001373]
[105.16717529 57.12939072]
[109.52144623 42.77528381]
[113.87571716 28.42117882]
[118.22998810 14.06707382]
[105.75125885 3.96707463]
[98.11269379 -10.10941124]
[96.45412445 -26.00008583]
[100.99935913 -41.27678680]
[111.02647400 -53.61650848]
[124.98235321 -61.15465164]
[140.72314453 -62.76674271]
[144.79475403 -77.20356750]
[148.86634827 -91.64039612]
[152.93795776 -106.07722473]
[157.00956726 -120.51405334]
[156.32855225 -129.67631531]
[161.30543518 -135.19288635]
[165.65969849 -149.54698181]
[162.26155090 -164.99894714]
[173.36021423 -174.93217468]
[177.71447754 -189.28627014]
[182.06875610 -203.64038086]
[178.67059326 -219.09233093]
[189.76925659 -229.02555847]
[194.12353516 -243.37966919]
[198.33666992 -257.77581787]
[202.40827942 -272.21264648]
[206.47988892 -286.64947510]
[210.40956116 -301.12557983]
[214.19694519 -315.63958740]
[217.98431396 -330.15356445]
[221.77168274 -344.66754150]
[216.90434265 -360.32772827]
[228.22999573 -372.18780518]
[244.09780884 -368.04714966]
[248.18431091 -352.16531372]
[236.28567505 -340.88015747]
[232.49830627 -326.36618042]
[228.71092224 -311.85220337]
[224.92355347 -297.33822632]
[226.28465271 -290.03414917]
[220.91671753 -282.57788086]
[216.84510803 -268.14105225]
[212.77349854 -253.70422363]
[213.99092102 -246.37484741]
[208.47764587 -239.02539062]
[204.12336731 -224.67129517]
[207.83297729 -210.24603271]
[196.42285156 -199.28610229]
[192.06858826 -184.93200684]
[187.71432495 -170.57789612]
[191.42391968 -156.15263367]
[180.01380920 -145.19271851]
[175.65953064 -130.83860779]
[171.44639587 -116.44245148]
[167.37478638 -102.00562286]
[163.30317688 -87.56879425]
[159.23158264 -73.13196564]
[155.15997314 -58.69513702]
[166.52252197 -50.41423416]
[174.38571167 -38.72263718]
[177.78479004 -25.01814079]
[176.29022217 -10.94764614]
[170.06178284 1.79074860]
[159.83184814 11.65268040]
[146.81924438 17.43474960]
[132.58409119 18.42134476]
[128.22982788 32.77544785]
[123.87555695 47.12955475]
[119.52128601 61.48365784]
[125.83106232 65.39732361]
[131.37709045 70.33407593]
[135.99540710 76.14796448]
[139.54945374 82.66707611]
[141.93412781 89.69866943]
[143.07896423 97.03484344]
[142.95007324 104.45868683]
[141.55130005 111.75070190]
[138.92396545 118.69528198]
[135.14578247 125.08710480]
[130.32844543 130.73718262]
[124.61439514 135.47845459]
[130.89430237 149.10060120]
[137.17419434 162.72274780]
[143.45408630 176.34489441]
[160.42396545 187.16215515]
[157.95123291 206.30912781]
[164.76109314 219.67422485]
[171.57095337 233.03932190]
[178.38081360 246.40441895]
[185.19067383 259.76950073]
[192.00051880 273.13461304]
[198.81037903 286.49972534]
[205.62023926 299.86480713]
[218.19837952 311.23260498]
[210.75683594 326.46609497]
[194.05862427 323.53240967]
[192.25514221 306.67465210]
[185.44528198 293.30957031]
[178.63542175 279.94445801]
[171.82557678 266.57937622]
[165.01571655 253.21427917]
[158.20585632 239.84918213]
[151.39599609 226.48408508]
[144.58613586 213.11898804]
[134.56359863 210.82560730]
[127.32656860 203.21554565]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 137]
[2 136]
[3 135]
[4 134]
[7 49]
[8 48]
[9 47]
[10 46]
[11 45]
[12 44]
[13 43]
[14 42]
[16 39]
[17 38]
[18 37]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[53 122]
[54 121]
[55 120]
[56 119]
[63 111]
[64 110]
[65 109]
[66 108]
[67 107]
[69 106]
[70 105]
[72 103]
[73 102]
[74 101]
[76 99]
[77 98]
[78 96]
[79 95]
[80 94]
[81 92]
[82 91]
[83 90]
[84 89]
[139 157]
[140 156]
[141 155]
[142 154]
[143 153]
[144 152]
[145 151]
[146 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
