%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:29:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGAGGGCUCGGCCUUGGCUCCACACUGCGCUGCCCAGAGGCCCCGCUGACUCCUGCCAGCCUCCAGGUCCCCGUGGUACCAAAGCUGAACAUGGACGUGACCAUCCAGCACCCCUGGUUCAAGCGCACCCUGGGGCCCUUCUACCCCAGCCGGCUGUUCGACCAGUUUUUCGGCGAGGGCCUUUUUGAGU\
) } def
/len { sequence length } bind def

/coor [
[20.72656822 380.87765503]
[5.77886963 382.12918091]
[-8.26504040 376.85958862]
[-18.69987869 366.08398438]
[-23.51557922 351.87802124]
[-21.78434372 336.97781372]
[-31.44692421 348.45101929]
[-41.10950470 359.92425537]
[-50.77208710 371.39746094]
[-47.20012665 386.38235474]
[-53.06807709 400.43298340]
[-65.93222046 408.24182129]
[-80.75042725 406.99331665]
[-90.41300964 418.46652222]
[-89.25162506 434.00000000]
[-99.21429443 445.49780273]
[-114.03025055 446.50927734]
[-123.69283295 457.98248291]
[-122.09432220 473.70574951]
[-132.14663696 485.90109253]
[-147.88589478 487.33328247]
[-159.97428894 477.15258789]
[-161.23999023 461.39907837]
[-150.93206787 449.41897583]
[-135.16604614 448.31991577]
[-125.50345612 436.84671021]
[-127.02668762 422.07458496]
[-117.39089966 410.30148315]
[-101.88621521 408.80392456]
[-92.22364044 397.33071899]
[-95.97431183 382.94079590]
[-90.46726227 368.93591309]
[-77.61939240 360.76367188]
[-62.24529648 361.73486328]
[-52.58271408 350.26165771]
[-42.92013168 338.78845215]
[-33.25755310 327.31524658]
[-24.75978279 314.95449829]
[-17.50781441 301.82403564]
[-10.25584793 288.69357300]
[-3.00388122 275.56311035]
[4.24808598 262.43267822]
[11.50005245 249.30220032]
[18.75201988 236.17173767]
[26.00398636 223.04129028]
[33.14884949 209.85223389]
[40.18613052 196.60548401]
[47.22341156 183.35871887]
[54.26069260 170.11195374]
[61.29797745 156.86518860]
[68.33525848 143.61843872]
[57.20932770 132.77471924]
[49.63854218 119.20800781]
[46.25189972 104.04544830]
[47.33077240 88.54678345]
[52.78552246 73.99967957]
[40.78072739 65.00607300]
[28.77593613 56.01246643]
[16.77114487 47.01885986]
[4.76635218 38.02525330]
[-7.59438801 29.52748108]
[-20.29060936 21.53961754]
[-32.98683167 13.55175495]
[-49.38577652 13.47007751]
[-57.27840805 -0.90484464]
[-48.54546356 -14.78532505]
[-32.17065048 -13.89231491]
[-24.99896812 0.85553312]
[-12.30274582 8.84339619]
[0.39347517 16.83126068]
[-0.25219801 1.84516287]
[10.95149994 -8.12866020]
[25.76210976 -5.75255728]
[33.28359604 7.22539425]
[27.98247147 21.25743103]
[13.75995922 26.02046013]
[25.76475143 35.01406479]
[37.76954269 44.00767136]
[49.77433395 53.00127792]
[61.77912903 61.99488831]
[66.55953979 57.72755432]
[71.81260681 54.05770493]
[77.46407318 51.03720093]
[83.43405914 48.70874023]
[89.63819122 47.10523224]
[95.98876953 46.24933624]
[96.96474457 31.28112030]
[97.94071198 16.31290627]
[98.91668701 1.34468985]
[91.26940918 -6.41699743]
[89.20714569 -16.89224434]
[93.17519379 -26.56664658]
[101.63602448 -32.32913589]
[103.09869385 -47.25765228]
[104.56135559 -62.18616867]
[106.02401733 -77.11468506]
[95.79927063 -89.16583252]
[97.17398071 -104.91021729]
[109.33255005 -115.00698090]
[125.06152344 -113.46588898]
[135.02917480 -101.20124817]
[133.32186890 -85.48944855]
[120.95253754 -75.65202332]
[119.48986816 -60.72350311]
[118.02720642 -45.79498672]
[116.56454468 -30.86647034]
[125.83031464 -13.90494347]
[113.88490295 2.32066083]
[112.90892792 17.28887749]
[111.93296051 32.25709152]
[110.95698547 47.22530746]
[122.41285706 50.98074341]
[132.74746704 57.18847275]
[141.44381714 65.53794098]
[148.06684875 75.61145020]
[152.28523254 86.90505219]
[167.20135498 85.32093811]
[182.11747742 83.73682404]
[197.03358459 82.15270996]
[211.94970703 80.56859589]
[226.86582947 78.98448181]
[239.77171326 69.83304596]
[253.24493408 76.18297577]
[268.16104126 74.59886169]
[278.08135986 62.58948898]
[293.23098755 61.19545746]
[304.61895752 70.72697449]
[319.53506470 69.14286041]
[327.33660889 55.85970306]
[341.30053711 49.78830338]
[355.98825073 53.06480026]
[365.81262207 64.22811890]
[380.72872925 62.64400101]
[395.64486694 61.05988693]
[410.56097412 59.47577286]
[425.47708130 57.89165878]
[440.39321899 56.30754471]
[448.02017212 42.79425049]
[462.14739990 36.37541962]
[477.34265137 39.51922226]
[487.76309204 51.01679993]
[489.40179443 66.44709778]
[481.62869263 79.87686157]
[467.43267822 86.14205933]
[452.27243042 82.83360291]
[441.97732544 71.22366333]
[427.06121826 72.80777740]
[412.14508057 74.39189148]
[397.22897339 75.97600555]
[382.31286621 77.56011963]
[367.39672852 79.14423370]
[360.13616943 92.12199402]
[346.46426392 98.41033173]
[331.53662109 95.40725708]
[321.11920166 84.05898285]
[306.20306396 85.64309692]
[297.07107544 97.35386658]
[281.96658325 99.17286682]
[269.74514771 89.51498413]
[254.82904053 91.09909821]
[242.99006653 100.13722229]
[228.44993591 93.90059662]
[213.53382874 95.48471069]
[198.61770630 97.06882477]
[183.70158386 98.65293884]
[168.78547668 100.23705292]
[153.86935425 101.82116699]
[149.41268921 121.53160095]
[138.01049805 138.21551514]
[121.26550293 149.52778625]
[101.53138733 153.87837219]
[81.58201599 150.65571594]
[74.54473877 163.90248108]
[67.50745392 177.14923096]
[60.47017288 190.39599609]
[53.43289185 203.64276123]
[46.39560699 216.88952637]
[45.12941742 225.95144653]
[39.13444519 230.29324341]
[31.88247871 243.42370605]
[24.63051224 256.55416870]
[17.37854576 269.68463135]
[10.12657833 282.81509399]
[2.87461162 295.94555664]
[-4.37735510 309.07601929]
[-11.62932205 322.20648193]
[1.66224658 315.25418091]
[16.65058899 314.66293335]
[30.44849777 320.54663086]
[40.39807129 331.77188110]
[44.58272552 346.17633057]
[42.19636154 360.98529053]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 37]
[7 36]
[8 35]
[9 34]
[13 30]
[14 29]
[17 26]
[18 25]
[38 186]
[39 185]
[40 184]
[41 183]
[42 182]
[43 181]
[44 180]
[45 179]
[46 177]
[47 176]
[48 175]
[49 174]
[50 173]
[51 172]
[56 80]
[57 79]
[58 78]
[59 77]
[60 76]
[61 70]
[62 69]
[63 68]
[86 111]
[87 110]
[88 109]
[89 108]
[93 106]
[94 105]
[95 104]
[96 103]
[116 167]
[117 166]
[118 165]
[119 164]
[120 163]
[121 162]
[123 160]
[124 159]
[127 156]
[128 155]
[132 151]
[133 150]
[134 149]
[135 148]
[136 147]
[137 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
