%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:26:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUUGAAGAAGGCUCUUACAGCAUGGCCGCCGGUACUGCAGCUGCCUUAGCGUUUUUGAGUCAGGAGAGCCGAACGCGGGCCGGGGGUGUCGGGGGCCUACGGGUCCCGGCCCCGGUCACUA\
) } def
/len { sequence length } bind def

/coor [
[234.24261475 239.14823914]
[223.36476135 238.33535767]
[212.81259155 235.55123901]
[202.94044495 230.88743591]
[194.08013916 224.49868774]
[186.52986145 216.59770203]
[180.54412842 207.44813538]
[176.32521057 197.35578918]
[174.01629639 186.65837097]
[173.69662476 175.71420288]
[175.37873840 164.89022827]
[179.00810242 154.54965210]
[166.27842712 146.61518860]
[153.54876709 138.68072510]
[140.81910706 130.74627686]
[128.08944702 122.81181335]
[115.35977936 114.87734985]
[102.63011169 106.94288635]
[101.14550781 115.83292389]
[94.74708557 123.75028992]
[84.07019043 128.64244080]
[70.50083923 128.79634094]
[55.50083923 128.79634094]
[40.50083923 128.79634094]
[29.36771393 139.69090271]
[14.15558052 139.47721863]
[3.83789921 128.79634094]
[-11.16210079 128.79634094]
[-26.16209984 128.79634094]
[-42.00123215 134.84268188]
[-52.19598770 121.29634857]
[-42.00123215 107.75000763]
[-26.16209984 113.79634857]
[-11.16210079 113.79634857]
[3.83789921 113.79634857]
[14.15558052 103.11547089]
[29.36771393 102.90179443]
[40.50083923 113.79634857]
[55.50083923 113.79634857]
[70.50083923 113.79634857]
[74.62803650 107.53405762]
[82.88242340 95.00948334]
[87.00962067 88.74719238]
[81.09428406 74.96282196]
[75.17894745 61.17845535]
[62.62651443 51.54793167]
[64.71768951 36.80085373]
[58.80235291 23.01648712]
[52.88701630 9.23212051]
[46.97167969 -4.55224657]
[41.05633926 -18.33661461]
[26.75124741 -25.59910965]
[23.65146255 -41.33985138]
[34.13487625 -53.48388672]
[50.15951157 -52.71535110]
[59.43264008 -39.62379837]
[54.84070587 -24.25195122]
[60.75604630 -10.46758461]
[66.67138672 3.31678271]
[72.58672333 17.10115051]
[78.50205994 30.88551712]
[90.63138580 39.53009415]
[88.96331024 55.26311874]
[94.87864685 69.04748535]
[100.79399109 82.83185577]
[110.56457520 94.21322632]
[123.29423523 102.14768219]
[136.02389526 110.08214569]
[148.75357056 118.01660919]
[161.48323059 125.95106506]
[174.21289062 133.88552856]
[186.94255066 141.81999207]
[201.85667419 128.77810669]
[220.19407654 121.32904816]
[239.93922424 120.27781677]
[258.92636108 125.72694397]
[275.07702637 137.06666565]
[286.62759399 153.04312134]
[292.32186890 171.89700317]
[291.54766846 191.55725098]
[305.74142456 196.40881348]
[319.93515015 201.26039124]
[334.12890625 206.11195374]
[348.32263184 210.96353149]
[362.51638794 215.81509399]
[376.71011353 220.66667175]
[390.90386963 225.51823425]
[398.19552612 218.73510742]
[407.42684937 215.15707397]
[417.26843262 215.25300598]
[426.32015991 218.96597290]
[433.31024170 225.72753906]
[437.27398682 234.54432678]
[437.68679810 244.14385986]
[451.31689453 250.40649414]
[464.94696045 256.66912842]
[478.57705688 262.93176270]
[492.20715332 269.19439697]
[505.83724976 275.45703125]
[522.10662842 273.39785767]
[531.80773926 286.61984253]
[524.96093750 301.52130127]
[508.60961914 302.77291870]
[499.57461548 289.08712769]
[485.94451904 282.82449341]
[472.31442261 276.56185913]
[458.68432617 270.29922485]
[445.05422974 264.03659058]
[431.42416382 257.77395630]
[413.08889771 266.57937622]
[393.85940552 259.11502075]
[386.05230713 239.71197510]
[371.85855103 234.86041260]
[357.66482544 230.00883484]
[343.47106934 225.15727234]
[329.27734375 220.30569458]
[315.08358765 215.45413208]
[300.88986206 210.60255432]
[286.69610596 205.75099182]
[281.05569458 215.05206299]
[273.81039429 223.17245483]
[265.20181274 229.83862305]
[255.51747131 234.82559204]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 72]
[13 71]
[14 70]
[15 69]
[16 68]
[17 67]
[18 66]
[22 40]
[23 39]
[24 38]
[27 35]
[28 34]
[29 33]
[43 65]
[44 64]
[45 63]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
[80 119]
[81 118]
[82 117]
[83 116]
[84 115]
[85 114]
[86 113]
[87 112]
[94 109]
[95 108]
[96 107]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
