%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:33:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCGCUGGCGCAGCUGGCGGACCCGUGGCAGAAGAUGGCUGUGGAGAGCCCGUCCGACAGCGCUGAGAAUGGACAGCAAAUUAUGGAUGAACCUAUGG\
) } def
/len { sequence length } bind def

/coor [
[41.70432281 194.49574280]
[33.29359055 202.85334778]
[21.98727417 206.00013733]
[10.70328999 203.24674988]
[-0.14784083 213.60304260]
[-10.99897194 223.95935059]
[-21.85010338 234.31564331]
[-32.70123291 244.67195129]
[-43.55236435 255.02824402]
[-54.40349579 265.38455200]
[-65.25462341 275.74084473]
[-72.53827667 291.05047607]
[-89.26591492 288.28961182]
[-91.24360657 271.45138550]
[-75.61092377 264.88970947]
[-64.75979614 254.53341675]
[-53.90866470 244.17710876]
[-43.05753326 233.82081604]
[-32.20640182 223.46450806]
[-21.35527229 213.10821533]
[-10.50414085 202.75190735]
[0.34698987 192.39561462]
[-0.44257641 174.23739624]
[12.38070965 160.91677856]
[31.18480492 161.01837158]
[41.37109756 150.00749207]
[51.55739212 138.99661255]
[61.74368286 127.98574066]
[71.92997742 116.97486115]
[82.11627197 105.96398163]
[69.72049713 114.41056061]
[54.72050858 114.43265533]
[42.29990005 106.02263641]
[36.75088501 92.08676910]
[39.99105072 77.44090271]
[50.90068817 67.14625549]
[65.70972443 64.76036072]
[79.30056000 71.10772705]
[86.97666931 83.99521637]
[82.38581085 69.71501923]
[77.79495239 55.43482590]
[73.20409393 41.15462875]
[59.03204727 34.15973282]
[54.03622437 19.16582489]
[61.18056488 5.06852150]
[76.22645569 0.23150438]
[90.24743652 7.52448988]
[94.92510986 22.62067795]
[87.48429108 36.56377029]
[92.07514954 50.84396744]
[96.66600800 65.12416077]
[101.25686646 79.40435791]
[114.32431030 86.76927185]
[128.91798401 83.30162811]
[143.51167297 79.83398438]
[158.10534668 76.36634064]
[172.69902039 72.89868927]
[187.29270935 69.43104553]
[190.60447693 53.58661652]
[200.42520142 40.79212952]
[214.77163696 33.54896927]
[230.78216553 33.24573517]
[245.28746033 39.89229202]
[255.43794250 52.12775421]
[269.91671753 48.20792389]
[284.39547729 44.28809738]
[298.87426758 40.36826706]
[304.27145386 25.82007599]
[317.20773315 17.25078392]
[332.70880127 17.95545959]
[344.81417847 27.66313934]
[348.86914062 42.64102173]
[343.31445312 57.12980652]
[330.28598022 65.55825806]
[314.79345703 64.68547058]
[302.79409790 54.84704208]
[288.31530762 58.76687241]
[273.83654785 62.68669891]
[259.35775757 66.60652924]
[257.46029663 80.44209290]
[250.38211060 92.53096008]
[239.17584229 101.00932312]
[225.53341675 104.55523682]
[211.53076172 102.59464264]
[199.31182861 95.39402008]
[190.76034546 84.02472687]
[176.16667175 87.49237061]
[161.57299805 90.96001434]
[146.97930908 94.42765808]
[132.38563538 97.89530182]
[117.79195404 101.36295319]
[115.14441681 109.29817200]
[109.19007111 115.12483978]
[101.26489258 117.57946014]
[93.12715149 116.15027618]
[82.94085693 127.16115570]
[72.75456238 138.17202759]
[62.56826782 149.18290710]
[52.38197708 160.19378662]
[42.19568253 171.20466614]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 22]
[5 21]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[11 15]
[25 100]
[26 99]
[27 98]
[28 97]
[29 96]
[30 95]
[39 52]
[40 51]
[41 50]
[42 49]
[53 91]
[54 90]
[55 89]
[56 88]
[57 87]
[58 86]
[64 79]
[65 78]
[66 77]
[67 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
