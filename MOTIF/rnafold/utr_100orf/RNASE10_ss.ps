%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:44:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGCUGAAUCUGGUGCAGAUCUUUUUCAUGUUGCUGAUGCUGCUGCUGGGCCUGGGGAUGGGCCUGGGGUUGGGACUUCAUAUGGCUACAGCAGUCU\
) } def
/len { sequence length } bind def

/coor [
[208.43211365 269.28485107]
[201.27131653 256.10446167]
[194.11051941 242.92405701]
[186.94972229 229.74365234]
[179.78892517 216.56324768]
[172.62812805 203.38284302]
[165.26321411 190.31539917]
[157.69596863 177.36407471]
[144.59472656 170.27841187]
[144.31333923 154.45970154]
[136.74609375 141.50837708]
[129.17884827 128.55705261]
[121.61160278 115.60572815]
[110.67079926 123.37560272]
[97.80368042 124.63722229]
[86.45755768 119.53965759]
[79.43437195 109.87306213]
[78.20117188 98.48101044]
[64.50432587 92.36575317]
[50.80747604 86.25050354]
[37.11062622 80.13524628]
[23.32032967 74.23374176]
[9.43992329 68.54741669]
[-4.44048357 62.86109161]
[-15.12242603 73.67610931]
[-29.13192177 79.57546997]
[-44.33262634 79.65956116]
[-58.40653992 73.91557312]
[-69.20748901 63.21941376]
[-75.08841705 49.20217133]
[-75.15251923 34.00136948]
[-69.39002228 19.93502426]
[-58.67966080 9.14815140]
[-44.65469360 3.28566885]
[-29.45382309 3.24156332]
[-15.39507008 9.02256012]
[-4.62229538 19.74710083]
[1.22173309 33.77976990]
[1.24584258 48.98068619]
[15.12624931 54.66701126]
[29.00665665 60.35333633]
[36.52184296 59.96935272]
[43.22587967 66.43840027]
[56.92272949 72.55364990]
[70.61957550 78.66890717]
[84.31642914 84.78416443]
[95.15239716 77.05295563]
[109.39006805 76.77083588]
[122.08648682 85.07393646]
[130.05285645 72.36421204]
[138.01922607 59.65449524]
[145.98558044 46.94477463]
[153.95195007 34.23505402]
[161.91831970 21.52533340]
[169.88468933 8.81561184]
[177.85105896 -3.89410853]
[185.81742859 -16.60382843]
[185.87135315 -33.00288773]
[200.23289490 -40.91983414]
[214.12812805 -32.21039200]
[213.26283264 -15.83408928]
[198.52714539 -8.63746262]
[190.56077576 4.07225847]
[182.59440613 16.78197861]
[174.62803650 29.49169922]
[166.66166687 42.20141983]
[158.69531250 54.91114044]
[150.72894287 67.62086487]
[142.76257324 80.33058167]
[134.79620361 93.04030609]
[134.56292725 108.03849030]
[142.13017273 120.98981476]
[149.69741821 133.94114685]
[157.26466370 146.89247131]
[170.90716553 154.90449524]
[170.64729309 169.79682922]
[178.21453857 182.74816895]
[185.37370300 188.70964050]
[185.80853271 196.22204590]
[192.96932983 209.40245056]
[200.13012695 222.58285522]
[207.29092407 235.76325989]
[214.45172119 248.94364929]
[221.61251831 262.12405396]
[236.50028992 266.70574951]
[243.57460022 280.17456055]
[239.11491394 294.33953857]
[246.27571106 307.51992798]
[253.43650818 320.70034790]
[260.59732056 333.88073730]
[275.51095581 339.79367065]
[280.04852295 355.18164062]
[270.72918701 368.24035645]
[254.70193481 368.95223999]
[244.26150513 356.77120972]
[247.41690063 341.04153442]
[240.25610352 327.86114502]
[233.09530640 314.68072510]
[225.93450928 301.50033569]
[211.62377930 297.53317261]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 84]
[2 83]
[3 82]
[4 81]
[5 80]
[6 79]
[7 77]
[8 76]
[10 74]
[11 73]
[12 72]
[13 71]
[18 46]
[19 45]
[20 44]
[21 43]
[22 41]
[23 40]
[24 39]
[49 70]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
[87 99]
[88 98]
[89 97]
[90 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
