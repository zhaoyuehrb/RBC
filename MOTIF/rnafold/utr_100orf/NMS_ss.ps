%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCACAAUGAAACAUCUUCGUCCCCAGUUCCCUCUCAUCUUGGCCAUCUACUGCUUCUGCAUGCUACAGAUUCCCUCCUCAGGAUUUCCUCAACCUUUAGCUGAUC\
) } def
/len { sequence length } bind def

/coor [
[30.72001076 253.06491089]
[25.43448448 260.19165039]
[18.58316231 265.80447388]
[10.58452129 269.57061768]
[1.92467177 271.26974487]
[-6.87217903 270.80700684]
[-15.27546310 268.21804810]
[-22.78025055 263.66659546]
[-34.27091599 273.30841064]
[-45.76158142 282.95022583]
[-57.25225067 292.59204102]
[-68.74291992 302.23385620]
[-71.56793213 318.02624512]
[-85.74430084 325.53689575]
[-100.39711761 319.00433350]
[-104.28600311 303.43975830]
[-94.42773438 290.78298950]
[-78.38472748 290.74319458]
[-66.89406586 281.10137939]
[-55.40339661 271.45956421]
[-43.91273117 261.81774902]
[-32.42206573 252.17594910]
[-36.42540359 230.62104797]
[-27.05783463 210.66770935]
[-7.70834637 199.86212158]
[14.43044567 202.38038635]
[23.38782501 190.34852600]
[32.34520340 178.31668091]
[41.30258179 166.28483582]
[50.25996017 154.25299072]
[40.41493607 143.20970154]
[32.97729492 130.42063904]
[28.24753571 116.40251160]
[26.41675377 101.72167206]
[27.55891609 86.97128296]
[31.62787437 72.74727631]
[38.45923615 59.62435150]
[47.77699661 48.13270569]
[59.20469666 38.73662186]
[72.28062439 31.81573105]
[86.47648621 27.64965248]
[101.21872711 26.40670586]
[115.91173553 28.13710976]
[120.62990570 13.89846992]
[113.79019928 -0.09639186]
[118.77793121 -14.46918488]
[132.16203308 -20.90355682]
[136.88021851 -35.14219666]
[141.59838867 -49.38083649]
[146.31655884 -63.61947632]
[137.44165039 -76.21083832]
[137.67990112 -91.43570709]
[146.73036194 -103.45872498]
[160.95477295 -107.79512787]
[165.67294312 -122.03376770]
[156.51635742 -134.56120300]
[156.50563049 -150.07827759]
[165.64488220 -162.61834717]
[180.41990662 -167.35952759]
[195.14936829 -162.47871399]
[204.16950989 -149.85267639]
[204.01191711 -134.33641052]
[194.73715210 -121.89620972]
[179.91157532 -117.31559753]
[175.19340515 -103.07695770]
[184.01361084 -91.10440826]
[184.09355164 -76.05589294]
[175.19299316 -63.70140839]
[160.55519104 -58.90130234]
[155.83702087 -44.66266251]
[151.11885071 -30.42402458]
[146.40068054 -16.18538475]
[153.29405212 -3.03178906]
[148.71199036 11.47542858]
[134.86854553 18.61664009]
[130.15037537 32.85528183]
[144.53358459 41.39779663]
[156.61630249 52.96754456]
[165.77438354 66.96685791]
[171.53474426 82.67258453]
[173.59979248 99.27339172]
[171.86288452 115.91173553]
[186.10153198 120.62990570]
[200.34016418 125.34807587]
[216.28236389 121.50377655]
[227.38508606 133.57279968]
[222.22682190 149.13957214]
[206.11393738 152.19033813]
[195.62199402 139.58671570]
[181.38336182 134.86854553]
[167.14471436 130.15037537]
[160.35186768 142.13206482]
[151.44566345 152.63839722]
[140.73799133 161.30149841]
[128.60379028 167.81800842]
[115.46795654 171.95971680]
[101.79048920 173.58160400]
[88.05032349 172.62687683]
[74.72859955 169.12896729]
[62.29180908 163.21037292]
[53.33443069 175.24221802]
[44.37705231 187.27406311]
[35.41967392 199.30590820]
[26.46229362 211.33775330]
[31.46836472 218.75993347]
[34.50823975 227.16369629]
[35.40574646 236.03913879]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 22]
[9 21]
[10 20]
[11 19]
[12 18]
[26 104]
[27 103]
[28 102]
[29 101]
[30 100]
[43 76]
[44 75]
[47 72]
[48 71]
[49 70]
[50 69]
[54 65]
[55 64]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
