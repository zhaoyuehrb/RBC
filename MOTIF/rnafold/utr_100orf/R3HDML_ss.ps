%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:17:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCCCUGCUGCCCAGCACCGUGGGCCUGGCAGGCCUGCUCUUCUGGGCUGGCCAGGCAGUGAACGCCUUGAUAAUGCCUAAUGCUACCCCAGCCCCGG\
) } def
/len { sequence length } bind def

/coor [
[80.05464172 131.96583557]
[71.75592804 124.93801880]
[65.81002045 115.83279419]
[51.21633911 119.30043793]
[37.41143799 133.82659912]
[19.10387993 127.94050598]
[4.75401306 132.30873108]
[-9.59585285 136.67694092]
[-23.94571877 141.04516602]
[-38.29558563 145.41339111]
[-52.64545059 149.78160095]
[-66.85252380 154.59399414]
[-80.90306091 159.84588623]
[-94.95359802 165.09779358]
[-109.00413513 170.34968567]
[-123.05467224 175.60157776]
[-129.38096619 190.08445740]
[-144.12554932 195.77415466]
[-158.54072571 189.29510498]
[-164.07421875 174.49118042]
[-157.44311523 160.14530945]
[-142.58152771 154.76863098]
[-128.30656433 161.55104065]
[-114.25602722 156.29914856]
[-100.20549011 151.04725647]
[-86.15495300 145.79534912]
[-72.10442352 140.54345703]
[-69.28736115 136.48698425]
[-63.81428909 134.26097107]
[-57.01367188 135.43174744]
[-42.66380310 131.06352234]
[-28.31393814 126.69530487]
[-13.96407318 122.32707977]
[0.38579255 117.95886230]
[14.73565865 113.59063721]
[18.82567024 103.99126434]
[27.76302338 98.18798828]
[38.63959885 98.36402893]
[47.74869537 104.70676422]
[62.34237289 101.23912048]
[66.65252686 82.46209717]
[79.68115997 68.27024841]
[98.02203369 62.37394714]
[116.88003540 66.31474304]
[131.32485962 79.06233215]
[145.20526123 73.37600708]
[159.08566284 67.68968201]
[172.96607971 62.00335693]
[186.84648132 56.31702805]
[196.68348694 43.92575455]
[211.39392090 46.26078415]
[225.27433777 40.57445908]
[239.15473938 34.88813019]
[253.03514099 29.20180511]
[264.42337036 12.71261978]
[283.42169189 15.69186020]
[296.92172241 9.15359402]
[310.42178345 2.61532736]
[323.92181396 -3.92293882]
[337.42184448 -10.46120548]
[335.85437012 -25.53829956]
[339.54107666 -40.24149323]
[348.03683472 -52.79530334]
[360.31567383 -61.68379974]
[374.89492798 -65.83364868]
[390.01406860 -64.74373627]
[403.84735107 -58.54567719]
[414.72436523 -47.98791504]
[421.33166504 -34.34535599]
[422.87136841 -19.26539612]
[419.15756226 -4.56902218]
[410.63870239 7.96911097]
[398.34347534 16.83496094]
[383.75659180 20.95793533]
[368.63949585 19.84016418]
[354.81765747 13.61662292]
[343.96011353 3.03883457]
[330.46008301 9.57710075]
[316.96005249 16.11536789]
[303.45999146 22.65363312]
[289.95996094 29.19190025]
[287.40625000 39.30895233]
[279.47567749 46.42656326]
[268.70309448 47.93740463]
[258.72146606 43.08221054]
[244.84106445 48.76853943]
[230.96066284 54.45486450]
[217.08026123 60.14118958]
[208.23605347 72.12574005]
[192.53280640 70.19743347]
[178.65240479 75.88376617]
[164.77198792 81.57009125]
[150.89158630 87.25641632]
[137.01118469 92.94274139]
[137.48516846 103.80709839]
[134.83656311 114.35430908]
[129.28598022 123.70577240]
[121.29579926 131.08248901]
[111.53162384 135.86994934]
[100.80684662 137.66937256]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 40]
[4 39]
[6 35]
[7 34]
[8 33]
[9 32]
[10 31]
[11 30]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[45 94]
[46 93]
[47 92]
[48 91]
[49 90]
[51 88]
[52 87]
[53 86]
[54 85]
[56 81]
[57 80]
[58 79]
[59 78]
[60 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
