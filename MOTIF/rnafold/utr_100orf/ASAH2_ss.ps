%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:26:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCAAACGCACCUUCUCUAACUUGGAGACAUUCCUGAUUUUCCUCCUUGUAAUGAUGAGUGCCAUCACAGUGGCCCUUCUCAGCCUCUUGUUUAUCA\
) } def
/len { sequence length } bind def

/coor [
[87.63401794 169.02122498]
[95.20482635 155.86648560]
[107.01889038 146.33798218]
[102.42803192 132.05778503]
[97.83717346 117.77758789]
[99.93624878 132.62998962]
[97.22602844 147.38311768]
[89.98524475 160.51974487]
[78.95852661 170.68888855]
[65.27989197 176.84477234]
[50.35603714 178.35427856]
[35.72175217 175.06221008]
[22.88203621 167.30709839]
[13.15733242 155.88650513]
[7.54773474 141.97491455]
[6.63013792 127.00300598]
[10.49890804 112.51049805]
[18.75617981 99.98782349]
[30.55276680 90.72280884]
[44.67550659 85.66827393]
[59.67200089 85.34403992]
[74.00000763 89.78343964]
[86.18555450 98.52947235]
[75.66175079 87.84071350]
[60.08761597 87.55090332]
[49.56724930 76.56106567]
[49.93951797 61.71529388]
[39.41571426 51.02653503]
[28.89191246 40.33777237]
[18.36810875 29.64901543]
[4.44799995 35.69839478]
[-10.71756077 36.30683899]
[-25.07755470 31.39206505]
[-36.68991089 21.61875343]
[-43.98415375 8.30866432]
[-45.97379684 -6.73812103]
[-42.38975525 -21.48664856]
[-33.71674347 -33.94230270]
[-21.12771606 -42.42055893]
[-6.32523298 -45.77479935]
[8.68879032 -43.55139160]
[21.88383102 -36.05103683]
[31.47536659 -24.28808975]
[36.16622162 -9.85339928]
[35.32199860 5.30086470]
[29.05686951 19.12521172]
[39.58067322 29.81397247]
[50.10447311 40.50273132]
[60.62827682 51.19149017]
[75.47804260 51.05014420]
[86.30294037 61.74015045]
[86.35050964 77.31690979]
[96.87431335 88.00567627]
[101.30973816 85.08324432]
[107.31883240 84.04519653]
[114.05240631 85.58293152]
[128.25947571 80.77054596]
[142.46655273 75.95816040]
[153.05490112 64.20241547]
[167.59170532 67.44747162]
[181.79878235 62.63508224]
[196.00585938 57.82269669]
[206.59420776 46.06695175]
[221.13101196 49.31200790]
[235.33808899 44.49962234]
[249.54516602 39.68723679]
[263.75222778 34.87484741]
[277.95932007 30.06246185]
[288.36752319 17.38962364]
[304.50027466 20.33357811]
[309.76153564 35.86583710]
[298.73901367 48.00814438]
[282.77169800 44.26953506]
[268.56463623 49.08192062]
[254.35754395 53.89431000]
[240.15048218 58.70669556]
[225.94340515 63.51908112]
[216.37124634 74.93061066]
[200.81823730 72.02976990]
[186.61117554 76.84215546]
[172.40409851 81.65454102]
[162.83193970 93.06607056]
[147.27894592 90.16522980]
[133.07186890 94.97761536]
[118.86479187 99.79000092]
[112.11737061 113.18672943]
[116.70822906 127.46692657]
[121.29908752 141.74711609]
[136.45252991 142.60598755]
[150.27081299 148.88447571]
[160.88513184 159.73347473]
[166.85998535 173.68572998]
[167.38732910 188.85432434]
[162.39584351 203.18783569]
[152.56057739 214.74775696]
[139.21166992 221.97073364]
[124.15446472 223.87988281]
[109.42530823 220.21702576]
[97.01621246 211.47753906]
[88.60540009 198.84335327]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 88]
[4 87]
[5 86]
[23 53]
[24 52]
[27 49]
[28 48]
[29 47]
[30 46]
[56 85]
[57 84]
[58 83]
[60 81]
[61 80]
[62 79]
[64 77]
[65 76]
[66 75]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
