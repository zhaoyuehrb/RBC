%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:36:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAAACGCCUGCUGCUCUUGCCCUUGCCCACGGGCCCCCAGCCCCAGCCCCUCUCCUGUGGCCCACCACCCCUGCUUUGGUGCCAUGCAGCUGCCACCCUUCGACAUGUGGAAGGACUACUUCAACCUGAGCCAGGUGGUGUGGGCGCUGAUCGCAAGUCGGGGUCAAAGGCUGGAGACCCAAG\
) } def
/len { sequence length } bind def

/coor [
[104.84252930 164.94996643]
[104.08279419 149.96922302]
[103.32305908 134.98847961]
[96.26816559 132.44317627]
[91.17734528 146.55287170]
[77.06773376 141.46182251]
[82.15839386 127.35256958]
[75.10350800 124.80726624]
[64.95409393 135.85215759]
[54.80468750 146.89703369]
[44.65527725 157.94192505]
[34.50587082 168.98680115]
[35.56974792 186.43736267]
[23.92104149 199.01808167]
[7.11522865 199.28677368]
[-2.84619045 210.50149536]
[2.07462215 225.05076599]
[-0.95419705 240.10804749]
[-11.11791039 251.62301636]
[-25.68253136 256.49819946]
[-40.73024750 253.42219543]
[-52.21330261 243.22244263]
[-57.04280853 228.64260864]
[-53.91965485 213.60461426]
[-43.68395233 202.15357971]
[-29.08905602 197.36979675]
[-14.06091881 200.54008484]
[-4.09949970 189.32534790]
[-6.65251446 176.68261719]
[-1.37260056 164.70178223]
[10.01473618 157.85466003]
[23.46098518 158.83740234]
[33.61039352 147.79251099]
[43.75980377 136.74763489]
[53.90921021 125.70274353]
[64.05862427 114.65785980]
[67.33740234 88.77140808]
[84.92859650 73.75787354]
[105.08686829 74.51727295]
[112.14385223 61.28099442]
[119.20082855 48.04471970]
[126.25781250 34.80844116]
[133.31478882 21.57216644]
[140.37178040 8.33588982]
[132.76855469 -6.76160431]
[135.62591553 -23.25378990]
[147.62455750 -34.68436813]
[163.90623474 -36.69830322]
[170.73866272 -50.05187988]
[177.57107544 -63.40545654]
[184.40350342 -76.75903320]
[191.23593140 -90.11260986]
[189.86813354 -108.46577454]
[204.94210815 -117.43327332]
[211.54801941 -130.90034485]
[211.48291016 -137.54682922]
[214.36434937 -142.47712708]
[218.61122131 -144.70498657]
[225.66821289 -157.94126892]
[232.72518921 -171.17753601]
[239.78218079 -184.41381836]
[246.15969849 -197.99053955]
[251.84136963 -211.87284851]
[257.52307129 -225.75515747]
[263.20474243 -239.63745117]
[268.88641357 -253.51976013]
[274.56811523 -267.40206909]
[274.92559814 -276.55191040]
[280.46478271 -281.46957397]
[286.38009644 -295.25393677]
[292.29544067 -309.03829956]
[298.09414673 -322.87213135]
[303.77584839 -336.75442505]
[309.45751953 -350.63674927]
[315.13922119 -364.51904297]
[320.70346069 -378.44885254]
[326.14987183 -392.42514038]
[331.59628296 -406.40142822]
[329.39776611 -422.06912231]
[341.22821045 -431.11843872]
[346.67462158 -445.09472656]
[352.12103271 -459.07101440]
[353.51248169 -474.00634766]
[350.74157715 -488.74819946]
[337.55444336 -497.45877075]
[334.47091675 -512.95935059]
[343.32043457 -526.05364990]
[358.85272217 -528.97314453]
[371.85278320 -519.98565674]
[374.60784912 -504.42337036]
[365.48342896 -491.51907349]
[368.25433350 -476.77722168]
[375.66784668 -475.64151001]
[377.93927002 -490.46853638]
[380.21090698 -505.29553223]
[395.03787231 -503.02365112]
[392.76629639 -488.19711304]
[390.49487305 -473.37008667]
[397.90838623 -472.23440552]
[404.96536255 -485.47067261]
[412.02233887 -498.70693970]
[419.07931519 -511.94320679]
[426.13632202 -525.17950439]
[419.22894287 -539.07440186]
[421.84115601 -554.36999512]
[432.96850586 -565.18487549]
[448.33230591 -567.36047363]
[462.02487183 -560.06024170]
[468.78109741 -546.09124756]
[466.00311279 -530.82482910]
[454.75909424 -520.13128662]
[439.37258911 -518.12249756]
[432.31561279 -504.88623047]
[425.25863647 -491.64996338]
[418.20162964 -478.41369629]
[411.14465332 -465.17739868]
[421.75625610 -454.57580566]
[426.44555664 -440.32763672]
[424.20440674 -425.49600220]
[415.51461792 -413.26950073]
[402.24435425 -406.27658081]
[387.24655151 -406.02066040]
[373.74545288 -412.55676270]
[364.64358521 -424.47967529]
[361.89773560 -439.22619629]
[366.09732056 -453.62460327]
[360.65090942 -439.64831543]
[355.20449829 -425.67202759]
[357.79257202 -411.00399780]
[345.57257080 -400.95501709]
[340.12615967 -386.97872925]
[334.67974854 -373.00244141]
[335.18164062 -365.61230469]
[329.02151489 -358.83737183]
[323.33984375 -344.95504761]
[317.65814209 -331.07275391]
[311.97647095 -317.19042969]
[312.35348511 -309.79290771]
[306.07980347 -303.12295532]
[300.16445923 -289.33859253]
[294.24914551 -275.55422974]
[288.45040894 -261.72039795]
[282.76873779 -247.83808899]
[277.08703613 -233.95578003]
[271.40536499 -220.07347107]
[265.72369385 -206.19116211]
[260.04199219 -192.30885315]
[274.30407715 -196.95568848]
[287.74487305 -190.29647827]
[292.68814087 -176.13441467]
[286.31072998 -162.55766296]
[272.25482178 -157.32009888]
[258.54803467 -163.41297913]
[253.01844788 -177.35682678]
[245.96147156 -164.12055969]
[238.90447998 -150.88427734]
[231.84750366 -137.64801025]
[225.01507568 -124.29442596]
[218.40916443 -110.82736206]
[222.02406311 -99.26921082]
[216.61294556 -87.98854065]
[204.58950806 -83.28018951]
[197.75708008 -69.92661285]
[190.92465210 -56.57303238]
[184.09223938 -43.21945572]
[177.25981140 -29.86588097]
[184.38383484 -18.56043434]
[184.99063110 -5.10297728]
[178.81446838 6.99067593]
[167.37573242 14.50799084]
[153.60804749 15.39287281]
[146.55107117 28.62914848]
[139.49409485 41.86542511]
[132.43710327 55.10169983]
[125.38012695 68.33797455]
[118.32314301 81.57424927]
[127.69988251 90.78338623]
[132.05680847 104.70641327]
[129.12965393 120.47895813]
[118.30380249 134.22872925]
[119.06354523 149.20948792]
[119.82328033 164.19023132]
[129.18109131 177.65734863]
[121.95326233 192.37776184]
[105.57516479 193.20837402]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 182]
[2 181]
[3 180]
[8 36]
[9 35]
[10 34]
[11 33]
[12 32]
[15 28]
[16 27]
[39 176]
[40 175]
[41 174]
[42 173]
[43 172]
[44 171]
[48 166]
[49 165]
[50 164]
[51 163]
[52 162]
[54 159]
[55 158]
[58 157]
[59 156]
[60 155]
[61 154]
[62 147]
[63 146]
[64 145]
[65 144]
[66 143]
[67 142]
[69 141]
[70 140]
[71 139]
[72 137]
[73 136]
[74 135]
[75 134]
[76 132]
[77 131]
[78 130]
[80 128]
[81 127]
[82 126]
[83 92]
[84 91]
[99 116]
[100 115]
[101 114]
[102 113]
[103 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
