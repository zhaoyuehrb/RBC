%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCAGCGACCAUGGCGGAGCCCACAGUGUGCUCCUUCCUCACCAAGGUGCUGUGCGCCCACGGCGGCCGCAUGUUCCUGAAGGACCUGCGCGGCCACGUGGAGCUGUCGG\
) } def
/len { sequence length } bind def

/coor [
[152.32635498 112.64344788]
[137.39730835 111.18615723]
[122.46826172 109.72886658]
[107.53922272 108.27158356]
[92.59136200 107.02195740]
[77.62757874 105.98023224]
[62.66379929 104.93850708]
[47.70001602 103.89678192]
[38.77855301 106.44822693]
[32.33659363 102.61241150]
[17.40755272 101.15512848]
[2.47850943 99.69783783]
[-12.00807953 106.05781555]
[-23.92344666 97.12063599]
[-38.85248947 95.66334534]
[-53.78153229 94.20605469]
[-74.21235657 106.51853180]
[-93.39627838 93.54106903]
[-108.36006165 94.58279419]
[-123.32384491 95.62451935]
[-138.28762817 96.66624451]
[-153.25140381 97.70796967]
[-166.48092651 106.38498688]
[-179.71479797 99.55025482]
[-194.67858887 100.59197998]
[-210.05957031 107.72372437]
[-221.17048645 94.91809845]
[-211.94111633 80.69645691]
[-195.72030640 85.62819672]
[-180.75653076 84.58647156]
[-168.59733582 75.98397064]
[-154.29313660 82.74418640]
[-139.32934570 81.70246124]
[-124.36557007 80.66073608]
[-109.40178680 79.61901093]
[-94.43800354 78.57728577]
[-91.54738617 72.30970001]
[-86.76596069 67.25997162]
[-80.57305908 63.98297119]
[-73.60533905 62.85339355]
[-66.59132385 64.02320099]
[-60.27524567 67.40216827]
[-55.33810425 72.66386414]
[-52.32424545 79.27701569]
[-37.39520264 80.73430634]
[-22.46615982 82.19158936]
[-9.04739571 75.72737885]
[3.93579674 84.76879883]
[18.86483955 86.22608185]
[33.79388046 87.68337250]
[48.74173737 88.93299866]
[63.70552063 89.97472382]
[78.66930389 91.01644897]
[93.63308716 92.05817413]
[101.37433624 89.40333557]
[108.99650574 93.34253693]
[123.92555237 94.79982758]
[138.85459900 96.25711823]
[153.78363037 97.71440125]
[168.77059937 97.08904266]
[183.52633667 94.39310455]
[198.28207397 91.69717407]
[213.03782654 89.00123596]
[227.79356384 86.30529785]
[235.82673645 76.09676361]
[248.27320862 74.21784210]
[258.29858398 81.14321899]
[273.12356567 78.85850525]
[287.94854736 76.57379150]
[302.77352905 74.28907776]
[317.59851074 72.00436401]
[332.42349243 69.71965790]
[338.20938110 54.30213547]
[350.88208008 43.93337250]
[366.95556641 41.34448242]
[382.06860352 47.14290237]
[392.16827393 59.67317581]
[406.92401123 56.97723770]
[421.67977905 54.28130341]
[433.81970215 43.25616455]
[449.35308838 48.51411438]
[452.30050659 64.64621735]
[439.62988281 75.05715942]
[424.37570190 69.03704834]
[409.61996460 71.73297882]
[394.86422729 74.42891693]
[391.09655762 87.63415527]
[381.94033813 97.95723724]
[369.15676880 103.32579803]
[355.24267578 102.62889099]
[342.94274902 95.94641876]
[334.70819092 84.54463959]
[319.88320923 86.82934570]
[305.05822754 89.11405945]
[290.23324585 91.39877319]
[275.40826416 93.68348694]
[260.58328247 95.96820068]
[247.60047913 107.68548584]
[230.48950195 101.06104279]
[215.73376465 103.75697327]
[200.97801208 106.45291138]
[186.22227478 109.14884949]
[171.46653748 111.84478760]
[184.30967712 119.59420013]
[191.71714783 132.63757324]
[191.79351807 147.63737488]
[184.51925659 160.75549316]
[171.75567627 168.63528442]
[156.76872253 169.26048279]
[143.39320374 162.47111511]
[135.05163574 150.00442505]
[133.87844849 135.05036926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 59]
[2 58]
[3 57]
[4 56]
[5 54]
[6 53]
[7 52]
[8 51]
[10 50]
[11 49]
[12 48]
[14 46]
[15 45]
[16 44]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[24 30]
[25 29]
[60 103]
[61 102]
[62 101]
[63 100]
[64 99]
[67 97]
[68 96]
[69 95]
[70 94]
[71 93]
[72 92]
[77 86]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
