%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:48:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUACUCUGAUCUACGUUGAUAAGGAAAUUGGAGAACCAGGCACCCGUGUGGCUGCCAAGGAUGUGCUGAAGCUGGAGUCUAGACCUUCAAUCAAAG\
) } def
/len { sequence length } bind def

/coor [
[73.54107666 118.31905365]
[86.59809113 110.93498993]
[71.90362549 113.94709778]
[57.20916367 116.95920563]
[51.06892014 129.06590271]
[39.22254181 135.28395081]
[26.15854645 133.51333618]
[16.68034172 124.63382721]
[1.89931226 127.18747711]
[-12.88171768 129.74113464]
[-27.66274834 132.29478455]
[-42.44377899 134.84843445]
[-57.22480774 137.40209961]
[-71.91927338 140.41419983]
[-86.51294708 143.88185120]
[-101.10662842 147.34948730]
[-105.42619324 162.08845520]
[-116.54759979 172.68136597]
[-131.47924805 176.27879333]
[-146.20458984 171.91305542]
[-156.76258850 160.75849915]
[-160.31320190 145.81565857]
[-155.90133667 131.10406494]
[-144.71372986 120.58107758]
[-129.75982666 117.07731628]
[-115.06214142 121.53528595]
[-104.57427216 132.75581360]
[-89.98059082 129.28816223]
[-75.38691711 125.82051849]
[-72.08823395 122.14500427]
[-66.38121796 120.61538696]
[-59.77846146 122.62106323]
[-44.99743271 120.06741333]
[-30.21640205 117.51375580]
[-15.43537140 114.96010590]
[-0.65434110 112.40644836]
[14.12668896 109.85279846]
[23.13672638 95.74752808]
[39.87258911 92.37269592]
[54.19705963 102.26473999]
[68.89151764 99.25263214]
[83.58598328 96.24052429]
[93.42491150 84.91818237]
[94.35746002 69.94719696]
[95.29000092 54.97621536]
[96.22254944 40.00522995]
[89.35816193 25.75072861]
[97.87174988 13.52910233]
[98.80429077 -1.44188178]
[91.02298737 -15.87736988]
[99.86293793 -29.68994713]
[116.23036194 -28.67041779]
[123.28785706 -13.86758709]
[113.77527618 -0.50933725]
[112.84272766 14.46164703]
[119.77381134 27.64532471]
[111.19352722 40.93777466]
[110.26098633 55.90876007]
[109.32843781 70.87974548]
[108.39589691 85.85073090]
[109.48456573 70.89028931]
[117.63527679 58.29798889]
[130.83821106 51.17883682]
[145.83781433 51.28826904]
[158.93548584 58.59930038]
[166.90159607 71.30918121]
[167.77186584 86.28391266]
[161.33171082 99.83103180]
[149.16914368 108.61009979]
[134.28320312 110.45636749]
[120.34544373 104.91530609]
[134.22586060 110.60163879]
[148.10626221 116.28796387]
[161.98666382 121.97428894]
[175.86708069 127.66061401]
[189.91761780 132.91250610]
[204.12467957 137.72489929]
[218.33175659 142.53727722]
[232.53883362 147.34967041]
[249.48049927 146.70455933]
[254.79032898 162.80554199]
[240.78846741 172.36506653]
[227.72644043 161.55674744]
[213.51937866 156.74435425]
[199.31230164 151.93197632]
[185.10522461 147.11958313]
[180.35816956 148.48200989]
[174.71015930 146.74713135]
[170.18075562 141.54101562]
[156.30033875 135.85469055]
[142.41993713 130.16836548]
[128.53952026 124.48204041]
[114.65911865 118.79571533]
[121.97994232 131.88790894]
[121.78192139 146.88659668]
[114.11799622 159.78096008]
[101.03761292 167.12284851]
[86.03862000 166.94897461]
[73.13194275 159.30581665]
[65.76899719 146.23727417]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 42]
[3 41]
[4 40]
[8 37]
[9 36]
[10 35]
[11 34]
[12 33]
[13 32]
[14 29]
[15 28]
[16 27]
[43 60]
[44 59]
[45 58]
[46 57]
[48 55]
[49 54]
[71 93]
[72 92]
[73 91]
[74 90]
[75 89]
[76 86]
[77 85]
[78 84]
[79 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
