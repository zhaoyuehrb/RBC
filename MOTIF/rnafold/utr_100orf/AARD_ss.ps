%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGACCAGGCGUCUCCGCGAUGGGCCCCGGGGACUUCCGCCGCUGCAGAGAGAGAAUUUCCCAGGGGCUCCAGGGACUCCCAGGUAGAGCGGAGCUUUGGUUCCCACCUCGUCCCGCGU\
) } def
/len { sequence length } bind def

/coor [
[162.10079956 198.16014099]
[156.85499573 187.84846497]
[155.89169312 176.26737976]
[159.39282227 165.13200378]
[148.51220703 154.80668640]
[137.63159180 144.48135376]
[120.41309357 141.37664795]
[115.19766235 123.77628326]
[104.05049133 113.73931885]
[90.41541290 110.64476776]
[85.91255188 97.40785217]
[74.76538086 87.37089539]
[63.61820984 77.33393097]
[52.47103500 67.29697418]
[41.32386398 57.26001358]
[38.78696442 72.04393005]
[25.77803993 79.51171875]
[11.73226070 74.24711609]
[6.83681059 60.06844711]
[14.64228249 47.25928879]
[29.48787689 45.11003494]
[19.74615479 33.70394516]
[10.00443459 22.29785538]
[0.11424755 11.02025795]
[-9.92271137 -0.12691440]
[-19.95967102 -11.27408695]
[-29.99662971 -22.42125893]
[-40.03358841 -33.56843185]
[-50.21559906 -44.58327103]
[-60.54092026 -55.46388626]
[-70.86623383 -66.34449768]
[-81.19155884 -77.22511292]
[-91.51687622 -88.10572815]
[-106.62872314 -92.79001617]
[-109.77716064 -107.34806061]
[-120.10247803 -118.22867584]
[-130.42779541 -129.10928345]
[-142.63789368 -125.83606720]
[-155.00065613 -128.10116577]
[-165.13920593 -135.40579224]
[-171.13150024 -146.28834534]
[-171.87452698 -158.61659241]
[-167.28695679 -170.00529480]
[-177.02868652 -181.41137695]
[-192.65939331 -186.37249756]
[-195.91354370 -202.44554138]
[-183.44354248 -213.09593201]
[-168.07743835 -207.36746216]
[-165.62258911 -191.15310669]
[-155.88087463 -179.74700928]
[-138.46392822 -181.99662781]
[-123.00186920 -173.34642029]
[-115.67791748 -157.04304504]
[-119.54718018 -139.43461609]
[-109.22186279 -128.55400085]
[-98.89654541 -117.67337799]
[-84.52323151 -113.76734924]
[-80.63626099 -98.43105316]
[-70.31094360 -87.55043793]
[-59.98562241 -76.66982269]
[-49.66030121 -65.78919983]
[-39.33498383 -54.90858841]
[-32.36252975 -52.18917084]
[-28.88641739 -43.60539246]
[-18.84945679 -32.45821762]
[-8.81249809 -21.31104660]
[1.22446084 -10.16387367]
[11.26142025 0.98329890]
[18.16030121 3.88429999]
[21.41052437 12.55613422]
[31.15224457 23.96222305]
[40.89396667 35.36831284]
[51.36082077 46.11284256]
[62.50799561 56.14980316]
[73.65516663 66.18675995]
[84.80233765 76.22371674]
[95.94950867 86.26068115]
[109.58458710 89.35523224]
[114.08744812 102.59214783]
[125.23461914 112.62910461]
[138.21272278 112.75205994]
[147.30110168 121.44470215]
[147.95690918 133.60073853]
[158.83752441 143.92607117]
[169.71813965 154.25138855]
[188.22035217 149.90289307]
[205.52932739 157.38941956]
[214.88333130 173.59443665]
[212.74299622 192.03390503]
[224.40019226 201.47370911]
[236.05737305 210.91351318]
[247.71456909 220.35331726]
[263.30856323 223.02503967]
[268.33026123 237.04759216]
[279.98745728 246.48739624]
[293.20663452 243.54479980]
[305.51211548 248.71473694]
[312.45675659 259.88378906]
[311.67318726 272.81677246]
[323.07928467 282.55850220]
[334.48535156 292.30023193]
[350.69973755 294.75506592]
[356.42819214 310.12118530]
[345.77780151 322.59118652]
[329.70477295 319.33703613]
[324.74365234 303.70632935]
[313.33755493 293.96459961]
[301.93145752 284.22286987]
[285.29711914 286.28717041]
[272.01782227 275.51666260]
[270.54763794 258.14459229]
[258.89044189 248.70477295]
[244.13026428 246.70825195]
[238.27476501 232.01051331]
[226.61756897 222.57070923]
[214.96038818 213.13090515]
[203.30319214 203.69110107]
[193.07336426 208.63615417]
[181.68168640 209.35087585]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 85]
[5 84]
[6 83]
[8 80]
[9 79]
[11 77]
[12 76]
[13 75]
[14 74]
[15 73]
[21 72]
[22 71]
[23 70]
[24 68]
[25 67]
[26 66]
[27 65]
[28 64]
[29 62]
[30 61]
[31 60]
[32 59]
[33 58]
[35 56]
[36 55]
[37 54]
[43 50]
[44 49]
[89 117]
[90 116]
[91 115]
[92 114]
[94 112]
[95 111]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
