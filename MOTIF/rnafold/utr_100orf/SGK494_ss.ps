%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:18:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUUAGCAGAGAGAGGAGGCAGAGGCUGGGAAUGGGAGCAGUAAGCUGUCGGCAGGGGCAGCACACCCAGCAGGGGGAACACACCCGGGUGGCUGUCCCUCACAAGCAGGGUGGCAACAUCCGGGGUCCCU\
) } def
/len { sequence length } bind def

/coor [
[104.21629333 162.77742004]
[117.46741486 169.80650330]
[128.26432800 180.21931458]
[135.76858521 193.20722961]
[139.39743042 207.76167297]
[138.86904907 222.75236511]
[134.22448730 237.01518250]
[125.82442474 249.44252014]
[114.32118225 259.06933594]
[100.60806274 265.14801025]
[85.74997711 267.20651245]
[70.90076447 265.08496094]
[57.21356964 258.94812012]
[45.75128937 249.27259827]
[37.40404892 236.80970764]
[32.82006836 222.52729797]
[32.35532761 207.53450012]
[36.04591370 192.99560547]
[43.60567474 180.03907776]
[30.16894913 186.70649719]
[16.73222160 193.37390137]
[8.11049843 207.32374573]
[-8.27093124 206.56163025]
[-15.56025600 191.87158203]
[-6.25884342 178.36544800]
[10.06481075 179.93717957]
[23.50153732 173.26976013]
[36.93826294 166.60235596]
[48.44157410 156.97563171]
[57.37261581 144.92422485]
[66.30365753 132.87280273]
[75.23470306 120.82139587]
[70.08073425 112.31616974]
[67.75341797 102.64736176]
[68.47262573 92.72843933]
[55.03590393 86.06102753]
[39.23477554 86.85786438]
[31.27310181 74.26973724]
[17.83637619 67.60232544]
[4.39964867 60.93490982]
[-11.20229149 64.67108917]
[-23.76185989 54.68926239]
[-23.64442825 38.64664078]
[-10.94008255 28.84974480]
[4.60549212 32.81391907]
[11.06706047 47.49818420]
[24.50378799 54.16559601]
[37.94051361 60.83300781]
[52.78055573 59.55927277]
[61.70331573 72.62429810]
[75.14003754 79.29170990]
[92.80031586 68.45613861]
[113.41306305 70.55614471]
[122.62625122 58.71903992]
[131.12477112 46.35881805]
[138.87901306 33.51857758]
[146.63325500 20.67833328]
[154.38748169 7.83809042]
[162.14172363 -5.00215244]
[169.89595032 -17.84239578]
[177.65019226 -30.68263817]
[185.40441895 -43.52288055]
[193.15866089 -56.36312485]
[194.94485474 -65.42089081]
[201.25073242 -69.41200256]
[209.30607605 -82.06551361]
[217.36141968 -94.71903229]
[225.41676331 -107.37254333]
[233.47210693 -120.02606201]
[233.48876953 -124.58798981]
[234.87088013 -128.48155212]
[237.22286987 -131.34838867]
[240.07162476 -133.00299072]
[242.93241882 -133.44290161]
[252.14561462 -145.27999878]
[261.35879517 -157.11711121]
[256.92510986 -171.98727417]
[262.11038208 -186.61235046]
[274.92077637 -195.36868286]
[290.43045044 -194.88928223]
[302.67559814 -185.35848999]
[306.94772339 -170.44110107]
[301.60409546 -155.87315369]
[288.69946289 -147.25630188]
[273.19592285 -147.90391541]
[263.98272705 -136.06681824]
[254.76953125 -124.22970581]
[246.12561035 -111.97071838]
[238.07026672 -99.31719971]
[230.01492310 -86.66368866]
[221.95957947 -74.01016998]
[213.90425110 -61.35665512]
[205.99890137 -48.60888672]
[198.24467468 -35.76864624]
[190.49043274 -22.92840195]
[182.73619080 -10.08815956]
[174.98196411 2.75208282]
[167.22772217 15.59232521]
[159.47349548 28.43256760]
[151.71925354 41.27281189]
[143.96502686 54.11305237]
[158.95803833 53.65524292]
[168.84704590 64.93387604]
[166.43307495 79.73835754]
[153.47343445 87.29136658]
[139.40246582 82.09447479]
[134.46336365 67.93222809]
[125.25016785 79.76934052]
[132.29867554 98.09046173]
[127.45806122 117.11448669]
[138.00184631 127.78353882]
[148.54562378 138.45259094]
[159.08940125 149.12164307]
[169.63319397 159.79069519]
[185.58271790 163.60440063]
[189.99472046 179.39889526]
[178.33050537 190.92616272]
[162.58920288 186.32794189]
[158.96414185 170.33447266]
[148.42034912 159.66542053]
[137.87657166 148.99636841]
[127.33279419 138.32731628]
[116.78900909 127.65827179]
[111.26701355 130.32994080]
[105.34001923 131.91136169]
[99.22106934 132.34568787]
[93.13011932 131.61732483]
[87.28610992 129.75244141]
[78.35506439 141.80384827]
[69.42402649 153.85525513]
[60.49298477 165.90667725]
[74.57828522 160.74873352]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 28]
[20 27]
[21 26]
[29 131]
[30 130]
[31 129]
[32 128]
[35 51]
[36 50]
[38 48]
[39 47]
[40 46]
[53 108]
[54 107]
[55 101]
[56 100]
[57 99]
[58 98]
[59 97]
[60 96]
[61 95]
[62 94]
[63 93]
[65 92]
[66 91]
[67 90]
[68 89]
[69 88]
[74 87]
[75 86]
[76 85]
[110 123]
[111 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
