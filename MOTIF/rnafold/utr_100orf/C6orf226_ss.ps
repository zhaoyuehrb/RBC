%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACGCCGGUCAGGAUUCGCGACCCGACAUGGAGCGUCCCCGCAGUCCCCAAUGCUCGGCCCCGGCCUCUGCCUCAGCUUCGGUUACCCUGGCGCAGCUCCUGCAGCUGGUCCAGCAGGGCCAGGAAC\
) } def
/len { sequence length } bind def

/coor [
[-62.98276138 182.54484558]
[-75.92089844 174.95507812]
[-82.09844971 161.28620911]
[-79.24588776 146.55995178]
[-68.40917969 136.18547058]
[-83.40806580 136.00282288]
[-98.40695190 135.82017517]
[-113.40584564 135.63752747]
[-128.40472412 135.45487976]
[-142.29809570 143.02357483]
[-154.93020630 135.13188171]
[-169.92909241 134.94923401]
[-184.91908264 135.49705505]
[-199.86462402 136.77406311]
[-214.81018066 138.05107117]
[-229.75572205 139.32807922]
[-244.70126343 140.60508728]
[-253.08607483 144.48843384]
[-260.02557373 141.72668457]
[-274.99777222 142.63937378]
[-289.96997070 143.55206299]
[-296.03869629 153.91780090]
[-306.27853394 159.96287537]
[-318.04522705 160.26235962]
[-328.36572266 154.85781860]
[-334.68930054 145.21726990]
[-349.68820190 145.39991760]
[-364.68710327 145.58256531]
[-374.45144653 157.79693604]
[-389.79275513 160.82658386]
[-403.46728516 153.24099731]
[-409.01834106 138.62184143]
[-403.82492065 123.87184906]
[-390.33917236 115.95551300]
[-374.92864990 118.61067963]
[-364.86975098 130.58366394]
[-349.87084961 130.40101624]
[-334.87194824 130.21838379]
[-323.00024414 116.38304138]
[-304.47418213 115.49898529]
[-290.88265991 128.57984924]
[-275.91046143 127.66716766]
[-260.93826294 126.75447845]
[-245.97827148 125.65954590]
[-231.03273010 124.38253784]
[-216.08718872 123.10552979]
[-201.14163208 121.82852173]
[-186.19609070 120.55151367]
[-184.26715088 118.38320160]
[-181.31890869 116.89012909]
[-177.62010193 116.48168182]
[-173.58868408 117.45617676]
[-169.74644470 119.95034027]
[-154.74755859 120.13298798]
[-141.92701721 112.55123138]
[-128.22207642 120.45599365]
[-113.22319794 120.63864136]
[-98.22430420 120.82128906]
[-83.22541809 121.00393677]
[-68.22653198 121.18658447]
[-53.28099060 119.90957642]
[-38.53050232 117.18502045]
[-27.42032051 107.26468658]
[-12.44432545 112.36666107]
[2.30615950 109.64210510]
[17.05664444 106.91755676]
[31.80712891 104.19300079]
[37.87589264 99.83940125]
[46.94969559 101.58628845]
[61.76214981 99.22173309]
[76.57460785 96.85717773]
[91.38706207 94.49262238]
[77.25428009 89.46623993]
[63.77388000 82.88758850]
[55.54082108 70.34897614]
[54.86240387 55.36432648]
[61.92875290 42.13304901]
[74.75954437 34.36317444]
[89.75897217 34.23220062]
[102.72348785 41.77682114]
[110.01990509 54.88305283]
[102.52970886 67.87908936]
[115.33360291 60.06498337]
[122.70559692 45.41623688]
[139.09106445 44.74645615]
[147.63403320 58.74465561]
[139.54624939 73.01068878]
[123.14771271 72.86888123]
[110.34381104 80.68298340]
[112.52783203 95.52313232]
[127.04008484 99.31713867]
[141.55233765 103.11113739]
[155.07905579 95.38677216]
[169.74249268 99.44116211]
[177.02313232 112.38441467]
[191.53540039 116.17842102]
[206.04765320 119.97241974]
[220.55990601 123.76641846]
[235.07215881 127.56042480]
[249.58753967 120.72790527]
[263.91537476 127.94546509]
[267.06454468 143.67639160]
[256.61929321 155.85328674]
[240.59233093 155.13505554]
[231.27815247 142.07267761]
[216.76589966 138.27867126]
[202.25364685 134.48468018]
[187.74139404 130.69067383]
[173.22914124 126.89667511]
[160.54539490 134.62055969]
[145.77386475 130.97962952]
[137.75834656 117.62339020]
[123.24608612 113.82939148]
[108.73383331 110.03539276]
[93.75161743 109.30507660]
[78.93916321 111.66963196]
[64.12670898 114.03418732]
[49.31425095 116.39874268]
[34.53168106 118.94348907]
[19.78119659 121.66803741]
[5.03071213 124.39259338]
[-9.71977329 127.11714172]
[-21.88500977 137.23236084]
[-35.80595016 131.93550110]
[-50.55643463 134.66006470]
[-38.11817551 143.04396057]
[-32.80738449 157.07234192]
[-36.57515717 171.59143066]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 60]
[6 59]
[7 58]
[8 57]
[9 56]
[11 54]
[12 53]
[13 48]
[14 47]
[15 46]
[16 45]
[17 44]
[19 43]
[20 42]
[21 41]
[26 38]
[27 37]
[28 36]
[61 125]
[62 124]
[64 122]
[65 121]
[66 120]
[67 119]
[69 118]
[70 117]
[71 116]
[72 115]
[82 89]
[83 88]
[90 114]
[91 113]
[92 112]
[95 109]
[96 108]
[97 107]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
