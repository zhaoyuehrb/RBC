%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:27:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUAUCCUGGUCUCCGCGUGUGUGAGUACCGCGGCGCGAGGUUAGUGGUAGCUGGGUGCAGACGCCGUGGCGCUGGAGACCCAAACAUGGCAAACCUGGAAGAAAGCUUCCCCCGAGGAGGUACAAGAAAGAUCCACAAACCAGAGAAAGCUUUCCAGCAGUCAGUUGAACAAGACAACUUAUUUG\
) } def
/len { sequence length } bind def

/coor [
[-126.55425262 215.98585510]
[-141.34530640 218.48080444]
[-156.13636780 220.97573853]
[-170.92741394 223.47068787]
[-183.24841309 233.39558411]
[-197.08534241 227.88298035]
[-211.87638855 230.37791443]
[-226.66744995 232.87284851]
[-234.62779236 237.39428711]
[-241.72633362 235.28375244]
[-256.55700684 237.53118896]
[-271.38769531 239.77862549]
[-279.66329956 249.68885803]
[-292.07608032 251.24623108]
[-301.89248657 244.15637207]
[-316.75866699 246.15568542]
[-331.62481689 248.15498352]
[-346.49099731 250.15428162]
[-361.35714722 252.15359497]
[-369.46411133 256.40652466]
[-376.48818970 254.05995178]
[-391.38568115 255.81056213]
[-406.28317261 257.56118774]
[-421.18066406 259.31179810]
[-430.96624756 271.43121338]
[-446.09936523 272.99435425]
[-457.59307861 263.59063721]
[-472.49057007 265.34124756]
[-487.38806152 267.09185791]
[-502.28555298 268.84246826]
[-517.18304443 270.59307861]
[-525.35998535 274.70996094]
[-532.34381104 272.24633789]
[-547.26849365 273.74777222]
[-562.19317627 275.24920654]
[-577.11785889 276.75064087]
[-592.02941895 278.37673950]
[-606.92694092 280.12734985]
[-612.92773438 294.26544189]
[-625.20330811 303.49612427]
[-640.45159912 305.33645630]
[-654.57080078 299.29132080]
[-663.76293945 286.98687744]
[-665.55548096 271.73294067]
[-659.46612549 257.63275146]
[-647.13293457 248.47918701]
[-631.87341309 246.73449707]
[-617.79241943 252.86802673]
[-608.67755127 265.22985840]
[-593.78002930 263.47924805]
[-587.49133301 259.56826782]
[-578.61926270 261.82598877]
[-563.69458008 260.32455444]
[-548.76995850 258.82312012]
[-533.84527588 257.32168579]
[-518.93365479 255.69560242]
[-504.03616333 253.94497681]
[-489.13867188 252.19436646]
[-474.24118042 250.44375610]
[-459.34368896 248.69314575]
[-450.34304810 236.88110352]
[-435.25979614 234.89350891]
[-422.93127441 244.41429138]
[-408.03378296 242.66368103]
[-393.13629150 240.91307068]
[-378.23880005 239.16246033]
[-363.35644531 237.28742981]
[-348.49029541 235.28813171]
[-333.62411499 233.28881836]
[-318.75796509 231.28952026]
[-303.89181519 229.29020691]
[-290.60952759 217.83370972]
[-273.63513184 224.94795227]
[-258.80444336 222.70051575]
[-243.97377014 220.45307922]
[-229.16238403 218.08180237]
[-214.37133789 215.58686829]
[-199.58027649 213.09191895]
[-188.31723022 203.34547424]
[-173.42236328 208.67962646]
[-158.63130188 206.18469238]
[-143.84025574 203.68974304]
[-129.04919434 201.19480896]
[-122.34455872 195.20118713]
[-112.22618866 195.51028442]
[-98.95332336 188.52236938]
[-85.68045044 181.53445435]
[-81.21755219 175.62460327]
[-72.12689972 174.54277039]
[-58.73911667 167.77761841]
[-45.35133362 161.01246643]
[-31.96355057 154.24731445]
[-30.83018875 142.87138367]
[-24.27078056 133.36198425]
[-13.82446861 128.15472412]
[-2.04268265 128.65098572]
[8.13378048 134.84297180]
[21.74014473 128.52894592]
[35.34650803 122.21492767]
[48.95287323 115.90090942]
[62.55923462 109.58688354]
[76.16559601 103.27286530]
[89.77196503 96.95883942]
[82.46453094 89.79330444]
[78.42932129 79.28201294]
[78.75465393 66.66719055]
[84.10539246 53.49444580]
[93.78981018 42.03966522]
[103.47422791 30.58488083]
[113.15864563 19.13009834]
[122.84306335 7.67531586]
[132.52748108 -3.77946711]
[132.62683105 -19.82221222]
[145.32012939 -29.63341331]
[160.87016296 -25.68675613]
[167.34828186 -11.00977898]
[159.78500366 3.13859820]
[143.98226929 5.90495062]
[134.29785156 17.35973358]
[124.61342621 28.81451607]
[114.92900848 40.26929855]
[105.24459076 51.72408295]
[95.56017303 63.17886734]
[99.75296783 69.39742279]
[112.19022369 61.01204681]
[120.57539368 73.44944763]
[108.13854980 81.83454895]
[112.33134460 88.05310822]
[126.58161926 83.37020111]
[137.10473633 70.79259491]
[153.21000671 73.88323212]
[158.32972717 89.46272278]
[147.19714355 101.50422668]
[131.26452637 97.62047577]
[117.01425171 102.30338287]
[132.00839233 102.72254181]
[146.09884644 107.86637878]
[157.83654785 117.20587921]
[166.01438904 129.78057861]
[169.79133606 144.29728699]
[168.77897644 159.26307678]
[163.08143616 173.13888550]
[153.28462219 184.49769592]
[140.39607239 192.17137146]
[125.74124908 195.37074280]
[110.82724762 193.76678467]
[97.18785095 187.52444458]
[86.22573090 177.28569031]
[79.06824493 164.10348511]
[76.45147705 149.33351135]
[78.64453125 134.49468994]
[85.42186737 121.11306763]
[96.08598328 110.56520844]
[82.47962189 116.87922668]
[68.87325287 123.19325256]
[55.26689148 129.50727844]
[41.66053009 135.82128906]
[28.05416489 142.13531494]
[14.44780159 148.44934082]
[8.63586807 166.46456909]
[-8.20108986 174.39385986]
[-25.19840050 167.63508606]
[-38.58618164 174.40023804]
[-51.97396469 181.16539001]
[-65.36174774 187.93054199]
[-78.69253540 194.80732727]
[-91.96540833 201.79524231]
[-105.23827362 208.78315735]
[-90.24259186 209.14288330]
[-75.92663574 213.62100220]
[-63.39899826 221.87074280]
[-53.62976456 233.25328064]
[-47.37543106 246.88717651]
[-45.12031174 261.71667480]
[-47.03902817 276.59347534]
[-52.98301315 290.36550903]
[-62.49197769 301.96633911]
[-74.82958221 310.49768066]
[-89.04045105 315.29882812]
[-104.02414703 315.99804688]
[-118.62038422 312.54119873]
[-131.69888306 305.19592285]
[-142.24688721 294.53106689]
[-149.44760132 281.37243652]
[-152.74343872 266.73898315]
[-151.87916565 251.76390076]
[-146.92172241 237.60679626]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 83]
[2 82]
[3 81]
[4 80]
[6 78]
[7 77]
[8 76]
[10 75]
[11 74]
[12 73]
[15 71]
[16 70]
[17 69]
[18 68]
[19 67]
[21 66]
[22 65]
[23 64]
[24 63]
[27 60]
[28 59]
[29 58]
[30 57]
[31 56]
[33 55]
[34 54]
[35 53]
[36 52]
[37 50]
[38 49]
[85 168]
[86 167]
[87 166]
[89 165]
[90 164]
[91 163]
[92 162]
[97 159]
[98 158]
[99 157]
[100 156]
[101 155]
[102 154]
[103 153]
[107 123]
[108 122]
[109 121]
[110 120]
[111 119]
[112 118]
[128 135]
[129 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
