%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:22:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGAAGCCCACGUGUGCUAUUCCAUCCCACAUGGCGGCGCUCCUGAGGAGACUGCUGCAGCGCGAGAGGCCUUCGGCGGCCUCUGGCCGCCCCGUAGGACGGCGCGAGGCCAACCUGGGCACUGAUGCCG\
) } def
/len { sequence length } bind def

/coor [
[98.01698303 133.62475586]
[93.82190704 148.02618408]
[89.62683868 162.42762756]
[96.05410004 177.12693787]
[88.44190979 191.24905396]
[72.62967682 193.96067810]
[60.74720383 183.18170166]
[61.90970230 167.18083191]
[75.22540283 158.23254395]
[79.42047119 143.83111572]
[83.61554718 129.42967224]
[72.97255707 124.48270416]
[63.98978424 115.62001038]
[50.39933014 121.96820068]
[36.80887604 128.31639099]
[23.21842003 134.66459656]
[9.62796593 141.01278687]
[-3.96248841 147.36097717]
[-4.60767317 162.65287781]
[-12.29548740 175.88752747]
[-25.25932884 184.02371216]
[-40.52019882 185.19178772]
[-54.57126617 179.12332153]
[-64.18369293 167.21282959]
[-67.14862061 152.19725037]
[-62.78472137 137.52703857]
[-52.09479523 126.57331848]
[-37.53530502 121.85316467]
[-22.45191574 124.45124054]
[-10.31068039 133.77052307]
[3.27977371 127.42232513]
[16.87022781 121.07413483]
[30.46068192 114.72594452]
[44.05113602 108.37774658]
[57.64159012 102.02955627]
[59.58484650 87.15596771]
[48.08153534 77.52923584]
[36.57822800 67.90251160]
[25.07491875 58.27578354]
[13.57160854 48.64905548]
[2.06829906 39.02233124]
[-9.65917301 29.66998291]
[-21.60426521 20.59723282]
[-33.54935837 11.52448463]
[-45.49444962 2.45173526]
[-61.76490402 -2.31362438]
[-61.68988419 -19.26740646]
[-45.37789917 -23.88859367]
[-36.42169952 -9.49335670]
[-24.47660828 -0.42060754]
[-12.53151608 8.65214157]
[-0.58642393 17.72489166]
[4.27106905 17.95746231]
[9.00980473 21.30827141]
[11.69502640 27.51902008]
[23.19833565 37.14574814]
[34.70164490 46.77247238]
[46.20495605 56.39920044]
[57.70826340 66.02592468]
[69.21157074 75.65265656]
[86.23218536 64.73228455]
[105.71348572 63.98276138]
[122.24087524 72.87757111]
[131.58921814 88.30908203]
[146.46281433 86.36582947]
[161.33641052 84.42257690]
[170.96430969 72.17752838]
[186.07594299 70.41867065]
[197.69038391 79.67287445]
[212.56396484 77.72962189]
[227.41357422 75.61083984]
[242.23712158 73.31683350]
[257.06066895 71.02282715]
[271.88421631 68.72881317]
[280.16799927 58.76123047]
[292.62890625 57.19985199]
[302.46456909 64.34368896]
[317.33816528 62.40043259]
[331.63430786 50.86468124]
[347.57385254 58.10816956]
[362.39739990 55.81415939]
[377.22094727 53.52014923]
[392.04449463 51.22613907]
[406.86804199 48.93212891]
[421.69158936 46.63812256]
[431.02758789 34.16909409]
[446.09347534 32.05381012]
[457.92324829 41.03111267]
[472.74679565 38.73710251]
[487.57034302 36.44309235]
[502.39389038 34.14908600]
[517.18927002 31.68016624]
[531.95452881 29.03668213]
[542.26501465 16.74549675]
[558.29895020 17.28716469]
[567.75640869 30.24616623]
[563.38250732 45.68146133]
[548.53247070 51.75241470]
[534.59802246 43.80191040]
[519.83276367 46.44539642]
[513.74505615 50.76193237]
[504.68789673 48.97262955]
[489.86434937 51.26663971]
[475.04080200 53.56064987]
[460.21725464 55.85466003]
[451.65441895 67.98780823]
[436.65390015 70.52542877]
[423.98559570 61.46166611]
[409.16204834 63.75567627]
[394.33850098 66.04968262]
[379.51495361 68.34369659]
[364.69140625 70.63770294]
[349.86785889 72.93171692]
[342.42260742 82.54123688]
[330.02227783 84.52712250]
[319.28140259 77.27402496]
[304.40780640 79.21727753]
[291.13012695 90.62956238]
[274.17822266 83.55236053]
[259.35467529 85.84636688]
[244.53112793 88.14038086]
[229.70758057 90.43438721]
[223.51959229 94.60593414]
[214.50723267 92.60321808]
[199.63363647 94.54647064]
[190.78660583 106.47399139]
[175.73036194 108.65660858]
[163.27966309 99.29616547]
[148.40606689 101.23942566]
[133.53247070 103.18267822]
[129.90168762 115.50630951]
[121.92081451 125.57408905]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[13 35]
[14 34]
[15 33]
[16 32]
[17 31]
[18 30]
[36 60]
[37 59]
[38 58]
[39 57]
[40 56]
[41 55]
[42 52]
[43 51]
[44 50]
[45 49]
[64 130]
[65 129]
[66 128]
[69 125]
[70 124]
[71 122]
[72 121]
[73 120]
[74 119]
[77 117]
[78 116]
[80 113]
[81 112]
[82 111]
[83 110]
[84 109]
[85 108]
[88 105]
[89 104]
[90 103]
[91 102]
[92 100]
[93 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
