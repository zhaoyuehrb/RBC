%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:12:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCAAGGGAGAAUUCGACCUUCAACUCCGACUUCAUCCUCCUGGGAAUCUUCAAUCACAGCCCCACCCACACCUUCCUCUUCUUUCUGGUCCUGGCCA\
) } def
/len { sequence length } bind def

/coor [
[87.10552216 202.81050110]
[89.89421844 183.63047791]
[90.36071014 168.63774109]
[90.82720947 153.64498901]
[91.29370880 138.65225220]
[72.64511108 128.66192627]
[61.79587936 110.49957275]
[46.84120941 111.66483307]
[31.88653755 112.83008575]
[16.93186760 113.99534607]
[3.77446151 122.78131104]
[-9.51541233 116.05609894]
[-24.47008324 117.22135925]
[-39.42475510 118.38661194]
[-52.58216095 127.17258453]
[-65.87203217 120.44737244]
[-80.82670593 121.61262512]
[-95.78137207 122.77788544]
[-101.76124573 136.86688232]
[-113.61098480 146.55410767]
[-128.60760498 149.61351013]
[-143.30499268 145.34205627]
[-154.32580566 134.72129822]
[-159.13752747 120.19181824]
[-156.63447571 105.09236908]
[-147.39181519 92.89270782]
[-133.53344727 86.39620972]
[-118.24393463 87.09574127]
[-105.03668976 94.83053589]
[-96.94663239 107.82321167]
[-81.99195862 106.65795898]
[-67.03729248 105.49269867]
[-54.94954300 96.79007721]
[-40.59001160 103.43194580]
[-25.63534164 102.26668549]
[-10.68066978 101.10142517]
[1.40707719 92.39880371]
[15.76660919 99.04067230]
[30.72127914 97.87541962]
[45.67594910 96.71015930]
[60.63062286 95.54489899]
[68.19494629 76.37300873]
[84.36559296 63.59448624]
[104.76685333 60.66715240]
[109.35771179 46.38695526]
[113.94857025 32.10675812]
[118.53942871 17.82656097]
[106.55029297 8.55097103]
[98.45926666 -4.26741362]
[95.24335480 -19.08070946]
[97.29091644 -34.10013962]
[104.35468292 -47.51203918]
[115.58168030 -57.69684601]
[129.61619568 -63.42470551]
[144.76347351 -64.00394440]
[159.19442749 -59.36462021]
[171.16644287 -50.06695175]
[179.23384094 -37.23367691]
[182.42245483 -22.41447830]
[180.34721375 -7.39884663]
[173.25874329 6.00000954]
[162.01298523 16.16411209]
[147.96795654 21.86609650]
[132.81962585 22.41741943]
[128.22875977 36.69761658]
[123.63790894 50.97781372]
[119.04705048 65.25801086]
[126.06430054 70.15962219]
[131.86503601 76.45397949]
[136.17854309 83.84731293]
[138.80346680 91.99453735]
[139.61729431 100.51541138]
[138.58206177 109.01222992]
[152.27891541 115.12747955]
[165.97575378 121.24273682]
[176.98887634 110.76515961]
[191.17506409 105.30434418]
[206.37103271 105.69303131]
[220.25950623 111.87194061]
[230.72257996 122.89883423]
[236.16473389 137.09219360]
[235.75605774 152.28762817]
[229.55888367 166.16795349]
[218.51823425 176.61653137]
[204.31773376 182.03999329]
[189.12284851 181.61134338]
[175.25067139 175.39590454]
[164.81665039 164.34152222]
[159.41186523 150.13389587]
[159.86050415 134.93959045]
[146.16365051 128.82432556]
[132.46681213 122.70907593]
[128.42810059 127.59780884]
[123.66119385 131.77961731]
[118.28819275 135.14736938]
[112.44673920 137.61482239]
[106.28645325 139.11874390]
[105.81995392 154.11149597]
[105.35345459 169.10423279]
[104.88696289 184.09698486]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 100]
[3 99]
[4 98]
[5 97]
[7 41]
[8 40]
[9 39]
[10 38]
[12 36]
[13 35]
[14 34]
[16 32]
[17 31]
[18 30]
[44 67]
[45 66]
[46 65]
[47 64]
[73 92]
[74 91]
[75 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
