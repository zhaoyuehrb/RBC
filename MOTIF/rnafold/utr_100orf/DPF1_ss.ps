%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCUCCCGCCCCCCGGGAAUGAAUGGAUGGGCGGCCUCAGCGCCCGCCCGACCGCUGGGAGGACCGACCCGGCGGGGACCUGCUGGGGGCAGGACCCGGGGAGCAAGAUGGCCACUGUCAUCCCUG\
) } def
/len { sequence length } bind def

/coor [
[255.65769958 335.81478882]
[259.54180908 329.06411743]
[252.47085571 315.83529663]
[245.39990234 302.60647583]
[238.32896423 289.37765503]
[231.25801086 276.14883423]
[224.18705750 262.92001343]
[217.11610413 249.69119263]
[208.78254700 237.21914673]
[199.26664734 225.62399292]
[189.75074768 214.02883911]
[180.23484802 202.43367004]
[170.71894836 190.83851624]
[161.20304871 179.24336243]
[151.40545654 167.88523865]
[141.33207703 156.77096558]
[131.25869751 145.65669250]
[121.18531036 134.54243469]
[110.86642456 139.03738403]
[99.70917511 140.52052307]
[88.57436371 138.87739563]
[78.32106018 134.23478699]
[69.74034119 126.95088196]
[63.49423218 117.58765411]
[60.06462479 106.86750031]
[59.71612549 95.61750031]
[45.36202240 91.26322937]
[29.91005898 94.66138458]
[19.97683907 83.56272125]
[5.62273407 79.20845032]
[-8.73137093 74.85417938]
[-23.08547592 70.49990845]
[-37.43957901 66.14563751]
[-51.79368591 61.79136658]
[-64.79010773 70.48775482]
[-80.33019257 68.74424744]
[-91.07638550 57.38408661]
[-91.95466614 41.77118683]
[-82.55033875 29.27748489]
[-67.30384064 25.80212212]
[-53.41408920 32.98606110]
[-47.43941498 47.43726349]
[-33.08531189 51.79153442]
[-18.73120499 56.14580154]
[-4.37710047 60.50007248]
[9.97700405 64.85434723]
[24.33111000 69.20861053]
[38.75637054 65.49900818]
[49.71628952 76.90912628]
[64.07039642 81.26339722]
[71.48435211 71.21015930]
[81.60807037 63.89274597]
[93.47952271 60.00649643]
[93.84764099 45.01101685]
[94.21575928 30.01553345]
[94.58387756 15.02005100]
[94.95199585 0.02456827]
[95.32012177 -14.97091389]
[95.68824005 -29.96639633]
[96.05635834 -44.96187973]
[83.64904785 -54.28059387]
[79.12092590 -69.12228394]
[84.21313477 -83.78001404]
[96.96762085 -92.61758423]
[112.48002625 -92.23677826]
[124.78550720 -82.78401184]
[129.15235901 -67.89408112]
[123.90144348 -53.29245377]
[111.05183411 -44.59376144]
[110.68371582 -29.59827805]
[110.31559753 -14.60279560]
[109.94747925 0.39268669]
[109.57936096 15.38816929]
[109.21124268 30.38365173]
[108.84312439 45.37913513]
[108.47500610 60.37461472]
[126.49951172 69.34429169]
[137.98243713 85.88153076]
[140.08914185 105.90401459]
[132.29957581 124.46904755]
[142.37295532 135.58331299]
[152.44635010 146.69758606]
[162.51972961 157.81184387]
[168.84704590 160.25564575]
[172.38478088 164.87269592]
[172.79821777 169.72746277]
[182.31411743 181.32261658]
[191.83001709 192.91778564]
[201.34591675 204.51293945]
[210.86180115 216.10809326]
[220.37770081 227.70324707]
[221.72100830 212.76351929]
[231.44599915 201.34315491]
[245.98083496 197.63662720]
[259.98718262 203.00529480]
[268.32073975 215.47734070]
[267.92074585 230.47200012]
[258.93414307 242.48204041]
[244.66152954 247.09637451]
[230.34492493 242.62023926]
[237.41587830 255.84906006]
[244.48683167 269.07788086]
[251.55776978 282.30670166]
[258.62872314 295.53552246]
[265.69967651 308.76434326]
[272.77062988 321.99316406]
[293.54614258 332.24377441]
[292.80541992 354.67474365]
[301.44253540 366.93850708]
[310.07965088 379.20227051]
[318.71676636 391.46606445]
[327.35391235 403.72982788]
[335.99102783 415.99359131]
[351.09176636 422.38885498]
[352.83489990 438.69509888]
[339.42718506 448.13787842]
[324.66137695 441.00323486]
[323.72726440 424.63073730]
[315.09011841 412.36694336]
[306.45300293 400.10317993]
[297.81588745 387.83941650]
[289.17877197 375.57562256]
[280.54162598 363.31185913]
[273.18994141 363.90948486]
[266.03775024 361.84326172]
[260.02737427 357.33474731]
[255.96855164 350.93048096]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 106]
[3 105]
[4 104]
[5 103]
[6 102]
[7 101]
[8 100]
[9 91]
[10 90]
[11 89]
[12 88]
[13 87]
[14 86]
[15 83]
[16 82]
[17 81]
[18 80]
[26 50]
[27 49]
[29 47]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[53 76]
[54 75]
[55 74]
[56 73]
[57 72]
[58 71]
[59 70]
[60 69]
[108 123]
[109 122]
[110 121]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
