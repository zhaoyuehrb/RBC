%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:11:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGCCGCCACCUGCGACAGGUGGAGCGCACGGGGCGGGCGCACGGCCAUGUCCGCCGAGGGCGCGGAGCCGGGGCCGGGGUCCGGGUCCGGGCCCGGGCCGGGGCCACUCUGCCCCGAACACGGCCAGGCUCUGAGCUGGUUCUGCG\
) } def
/len { sequence length } bind def

/coor [
[-21.00147247 222.40165710]
[-32.20490265 232.37577820]
[-43.40832901 242.34989929]
[-54.61175919 252.32403564]
[-65.81518555 262.29815674]
[-77.01861572 272.27227783]
[-81.04882812 283.19873047]
[-90.76448059 286.76248169]
[-100.13447571 298.47586060]
[-109.50447845 310.18923950]
[-118.87447357 321.90261841]
[-128.24447632 333.61599731]
[-137.61447144 345.32937622]
[-146.98446655 357.04272461]
[-152.15710449 373.18832397]
[-169.10365295 372.68737793]
[-173.31355286 356.26443481]
[-158.69784546 347.67272949]
[-149.32785034 335.95938110]
[-139.95783997 324.24600220]
[-130.58784485 312.53262329]
[-121.21784973 300.81924438]
[-111.84785461 289.10586548]
[-102.47785187 277.39248657]
[-117.36370087 279.23950195]
[-131.04939270 273.09933472]
[-139.56694031 260.75219727]
[-140.44679260 245.77803040]
[-133.43383789 232.51835632]
[-120.56140900 224.81767273]
[-105.56168365 224.90867615]
[-92.78363800 232.76498413]
[-85.93209076 246.10876465]
[-86.99274445 261.06884766]
[-75.78931427 251.09472656]
[-64.58588409 241.12060547]
[-53.38245773 231.14646912]
[-42.17902756 221.17234802]
[-30.97559738 211.19822693]
[-19.87793922 201.10655212]
[-8.88728428 190.89843750]
[2.10337043 180.69032288]
[13.09402561 170.48222351]
[17.15388107 156.15159607]
[32.53095627 152.42921448]
[43.52161407 142.22109985]
[54.51226807 132.01300049]
[65.50292206 121.80488586]
[76.49357605 111.59677124]
[73.81191254 98.89501953]
[77.55401611 86.46430969]
[67.46234131 75.36664581]
[57.37065887 64.26898956]
[47.27898407 53.17133331]
[31.38665771 50.97734070]
[23.31749725 37.11125946]
[29.26146889 22.20995903]
[44.65886688 17.70444298]
[57.69812393 27.05095482]
[58.37664032 43.07965469]
[68.46832275 54.17731094]
[78.55999756 65.27497101]
[88.65167236 76.37262726]
[104.40029907 74.16060638]
[118.52908325 81.46057892]
[131.72514343 74.32868958]
[144.92121887 67.19680023]
[158.11727905 60.06491089]
[171.31335449 52.93302155]
[184.50941467 45.80112839]
[197.70547485 38.66923904]
[202.15751648 26.51667976]
[213.35075378 20.86164474]
[225.00312805 24.26398468]
[238.34661865 17.41189194]
[251.69010925 10.55979919]
[265.03359985 3.70770621]
[278.37710571 -3.14438677]
[284.70132446 -29.15050697]
[313.77807617 -37.40914917]
[323.14807129 -49.12252426]
[332.51806641 -60.83589935]
[341.88806152 -72.54927063]
[351.25805664 -84.26264954]
[360.62805176 -95.97602081]
[369.99804688 -107.68939209]
[379.36807251 -119.40277100]
[388.73806763 -131.11613464]
[390.67037964 -147.40104675]
[405.84436035 -153.62054443]
[418.65032959 -143.37654114]
[415.91458130 -127.20719910]
[400.45141602 -121.74613953]
[391.08142090 -110.03276825]
[381.71142578 -98.31939697]
[372.34143066 -86.60601807]
[362.97143555 -74.89264679]
[353.60144043 -63.17927170]
[344.23144531 -51.46590042]
[334.86145020 -39.75252533]
[325.49145508 -28.03915215]
[332.62332153 -14.84308624]
[347.55587769 -16.26415634]
[362.48840332 -17.68522644]
[377.42092896 -19.10629654]
[392.35345459 -20.52736664]
[402.22531128 -32.86925507]
[417.94180298 -34.53277969]
[430.17864990 -24.53100014]
[431.67590332 -8.79779625]
[421.54531860 3.33260298]
[405.79714966 4.66344547]
[393.77453613 -5.59483385]
[378.84201050 -4.17376328]
[363.90948486 -2.75269318]
[348.97692871 -1.33162284]
[334.04440308 0.08944752]
[328.56283569 9.76474857]
[320.34866333 16.63947868]
[310.62908936 20.05663109]
[300.73693848 19.84825325]
[291.92959595 16.32437325]
[285.22918701 10.19910717]
[271.88571167 17.05119896]
[258.54220581 23.90329361]
[245.19871521 30.75538635]
[231.85522461 37.60747910]
[223.19447327 52.83723450]
[204.83737183 51.86530685]
[191.64129639 58.99719620]
[178.44523621 66.12908173]
[165.24917603 73.26097870]
[152.05310059 80.39286804]
[138.85704041 87.52475739]
[125.66097260 94.65664673]
[124.42093658 109.52129364]
[115.27223206 121.30249023]
[101.17765045 126.18492126]
[86.70169067 122.58743286]
[75.71102905 132.79553223]
[64.72037506 143.00364685]
[53.72972107 153.21176147]
[42.73906708 163.41987610]
[37.89308548 178.48065186]
[23.30213547 181.47286987]
[12.31148052 191.68098450]
[1.32082546 201.88909912]
[-9.66982937 212.09719849]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 39]
[2 38]
[3 37]
[4 36]
[5 35]
[6 34]
[8 24]
[9 23]
[10 22]
[11 21]
[12 20]
[13 19]
[14 18]
[40 148]
[41 147]
[42 146]
[43 145]
[45 143]
[46 142]
[47 141]
[48 140]
[49 139]
[51 63]
[52 62]
[53 61]
[54 60]
[65 135]
[66 134]
[67 133]
[68 132]
[69 131]
[70 130]
[71 129]
[74 127]
[75 126]
[76 125]
[77 124]
[78 123]
[80 101]
[81 100]
[82 99]
[83 98]
[84 97]
[85 96]
[86 95]
[87 94]
[88 93]
[102 117]
[103 116]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
