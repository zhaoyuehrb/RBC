%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:20:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAACGCCUCAGGGUCUUGCCUGCUGUGAGUGCCUUGAAGAGGGAGCAGCGGGCACGAUCAAAGAGACACCUGGCUCAAGGACCAAUAAGGAGUAUGGCUGCCCCUCCCAAAGCUCCCAUCCGUGUCAGGAAUUUGACCAUCAGAGCAGGAGCCCUCACUGGGAAGGAGAACAACAUGCUGCAGCCCGAGACCC\
) } def
/len { sequence length } bind def

/coor [
[58.67784119 243.39106750]
[59.43201447 258.63552856]
[53.48926544 272.69421387]
[42.02952576 282.77572632]
[27.32813644 286.87841797]
[12.30407143 284.18765259]
[-0.05963258 275.23770142]
[-7.30815220 261.80557251]
[-8.00228882 246.55825806]
[-2.00422096 232.52308655]
[9.49513054 222.48677063]
[24.21256065 218.44203186]
[26.85693932 203.67695618]
[29.50131798 188.91189575]
[32.14569473 174.14682007]
[34.79007339 159.38174438]
[37.43445206 144.61668396]
[40.07883072 129.85160828]
[28.38371468 120.45883179]
[14.53710938 126.22698212]
[0.69050479 131.99513245]
[-13.15610027 137.76327515]
[-27.00270462 143.53143311]
[-40.84931183 149.29957581]
[-54.69591522 155.06771851]
[-68.54251862 160.83587646]
[-82.38912201 166.60401917]
[-83.86812592 177.19332886]
[-89.57185364 186.14131165]
[-98.41127014 191.86448669]
[-108.74990082 193.38333130]
[-118.70663452 190.48937988]
[-126.49797821 183.77101135]
[-140.60708618 188.86344910]
[-154.71620178 193.95588684]
[-168.82531738 199.04830933]
[-181.67102051 210.11286926]
[-195.85920715 200.83215332]
[-190.86886597 184.62928772]
[-173.91775513 184.93920898]
[-159.80863953 179.84677124]
[-145.69952393 174.75433350]
[-131.59040833 169.66189575]
[-124.64431763 151.47319031]
[-106.28597260 144.12416077]
[-88.15727234 152.75741577]
[-74.31066895 146.98925781]
[-60.46406174 141.22111511]
[-46.61745834 135.45297241]
[-32.77085495 129.68481445]
[-18.92424774 123.91667175]
[-5.07764339 118.14852142]
[8.76896191 112.38037872]
[22.61556625 106.61222839]
[24.35171700 99.31594086]
[9.43478012 97.73955536]
[-5.48215628 96.16316223]
[-20.39909363 94.58677673]
[-35.31602859 93.01038361]
[-50.23703384 94.54779053]
[-62.08533096 85.34899139]
[-64.29392242 70.51247406]
[-55.63869095 58.26147842]
[-40.91684723 55.38618851]
[-28.28901863 63.47890854]
[-14.26075935 68.79002380]
[-0.23250081 74.10114288]
[13.79575825 79.41225433]
[27.82401657 84.72337341]
[29.56016731 77.42708588]
[19.79549599 66.04064178]
[10.03082561 54.65419006]
[-5.74438906 53.69598389]
[-16.15889931 41.80844498]
[-15.03396034 26.04424477]
[-3.03697896 15.75599957]
[12.71444798 17.04754448]
[22.87527847 29.15262794]
[21.41727257 44.88951874]
[31.18194389 56.27596664]
[40.94661713 67.66241455]
[47.44180679 63.91241455]
[66.92737579 52.66241455]
[61.94876099 38.51273727]
[48.16232681 30.30824089]
[46.12399673 14.39520359]
[57.39740372 2.98074627]
[73.33455658 4.82106447]
[81.70983124 18.50442314]
[76.09843445 33.53412247]
[81.07705688 47.68379974]
[95.30394745 48.26208496]
[107.97698212 52.39580536]
[118.28469849 59.33659744]
[125.69108582 68.17256927]
[129.96163940 77.91793823]
[131.16226196 87.60425568]
[145.98692322 85.31742859]
[160.81156921 83.03060150]
[175.63623047 80.74377441]
[190.46089172 78.45694733]
[205.28553772 76.17012024]
[219.78994751 72.34622192]
[233.81520081 67.02714539]
[243.97489929 54.89903641]
[258.61877441 57.62038803]
[272.64404297 52.30131149]
[286.66928101 46.98223877]
[300.69451904 41.66316605]
[314.71975708 36.34409332]
[322.06350708 16.65380478]
[341.26794434 8.86971855]
[359.71917725 17.63832664]
[373.37277222 11.42709255]
[387.02636719 5.21585751]
[400.67996216 -0.99537688]
[414.33355713 -7.20661163]
[420.16421509 -23.69296265]
[435.80371094 -30.72921181]
[451.38275146 -24.41022110]
[464.93450928 -30.84061050]
[475.03228760 -46.23183060]
[492.45211792 -44.15409470]
[505.89852905 -50.80196762]
[519.34490967 -57.44984055]
[532.73736572 -64.20581055]
[546.07489014 -71.06944275]
[559.41247559 -77.93307495]
[572.75000000 -84.79670715]
[581.16638184 -98.87141418]
[597.55718994 -98.34948730]
[605.06103516 -83.76784515]
[595.95861816 -70.12682343]
[579.61364746 -71.45914459]
[566.27612305 -64.59551239]
[552.93853760 -57.73188400]
[539.60095215 -50.86824799]
[535.08593750 -45.00434875]
[525.99279785 -44.00343704]
[512.54638672 -37.35556030]
[499.09997559 -30.70768929]
[494.92239380 -19.34649277]
[483.76315308 -13.70125103]
[471.36489868 -17.28885269]
[457.81314087 -10.85846424]
[455.22488403 1.77205980]
[445.68933105 10.73643398]
[432.53768921 12.59517860]
[420.54479980 6.44698000]
[406.89120483 12.65821457]
[393.23760986 18.86944962]
[379.58401489 25.08068466]
[365.93041992 31.29191780]
[365.50115967 40.66643524]
[361.65661621 49.29061890]
[354.88854980 55.95756531]
[346.10092163 59.71746063]
[336.48928833 60.01275635]
[327.37826538 56.76044464]
[320.03881836 50.36933517]
[306.01358032 55.68841171]
[291.98834229 61.00748444]
[277.96310425 66.32655334]
[263.93786621 71.64562988]
[254.78134155 83.39328766]
[239.13426208 81.05239105]
[225.10902405 86.37146759]
[239.81227112 89.34040070]
[252.08763123 97.96105194]
[259.87084961 110.78373718]
[261.85311890 125.65218353]
[257.70104980 140.06608582]
[248.11288452 151.60156250]
[234.70100403 158.31878662]
[219.72074890 159.08819580]
[205.69123840 153.78038025]
[194.97169495 143.28793335]
[189.36474609 129.37527466]
[189.81326294 114.38198090]
[196.24182129 100.82935333]
[207.57237244 90.99477386]
[192.74771118 93.28160095]
[177.92306519 95.56842804]
[163.09840393 97.85525513]
[148.27374268 100.14208221]
[133.44909668 102.42890930]
[112.13478088 142.90208435]
[54.84389877 132.49598694]
[52.19952011 147.26106262]
[49.55514145 162.02612305]
[46.91076279 176.79119873]
[44.26638794 191.55625916]
[41.62200928 206.32133484]
[38.97763062 221.08641052]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 194]
[13 193]
[14 192]
[15 191]
[16 190]
[17 189]
[18 188]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[27 46]
[33 43]
[34 42]
[35 41]
[36 40]
[70 81]
[71 80]
[72 79]
[83 91]
[84 90]
[97 186]
[98 185]
[99 184]
[100 183]
[101 182]
[102 181]
[103 167]
[104 166]
[106 164]
[107 163]
[108 162]
[109 161]
[110 160]
[113 153]
[114 152]
[115 151]
[116 150]
[117 149]
[120 145]
[121 144]
[123 141]
[124 140]
[125 139]
[126 137]
[127 136]
[128 135]
[129 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
