%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:58:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGAACAGAAGCCCACCCUCUACCCCUGACACCAUGACCCACUGUUGCUCCCCUUGCUGUCAGCCUACAUGCUGCAGGACCACCUGCUGCAGGACCACCUGCUGGAAGCCCACCACUGUGACCACCUGCAGCA\
) } def
/len { sequence length } bind def

/coor [
[148.70092773 147.12022400]
[142.42626953 152.84039307]
[135.48556519 157.73101807]
[127.98777008 161.71531677]
[120.05059052 164.73074341]
[111.79863739 166.72996521]
[103.36145782 167.68157959]
[94.87150574 167.57066345]
[86.46206665 166.39895630]
[78.26515198 164.18482971]
[70.40946198 160.96307373]
[63.01831818 156.78425598]
[56.20774841 151.71397400]
[50.08467484 145.83183289]
[44.74522781 139.23016357]
[40.27322769 132.01263428]
[36.73888016 124.29253387]
[34.19767380 116.19105530]
[32.68950272 107.83539581]
[32.23804474 99.35672760]
[32.85038376 90.88816071]
[34.51691055 82.56264496]
[37.21146011 74.51087189]
[40.89173126 66.85925293]
[45.49994659 59.72791672]
[50.96376038 53.22881699]
[41.32194901 41.73814774]
[31.68013382 30.24748230]
[22.03831863 18.75681496]
[14.04842472 14.13915348]
[12.30961132 6.88475513]
[2.93778324 -4.82715511]
[-11.72564411 -10.76807117]
[-13.63625908 -25.53962517]
[-23.00808716 -37.25153732]
[-32.37991333 -48.96344757]
[-41.75174332 -60.67535782]
[-55.50226974 -57.85071182]
[-69.05885315 -61.22951508]
[-79.77304077 -70.09258270]
[-85.57726288 -82.65515137]
[-85.38368988 -96.42605591]
[-79.28767395 -108.70166779]
[-88.38443756 -120.62847900]
[-97.48120117 -132.55528259]
[-114.81739044 -134.54067993]
[-125.18675232 -148.15425110]
[-122.59841919 -164.72978210]
[-131.97024536 -176.44169617]
[-147.60675049 -176.62466431]
[-159.43365479 -186.85493469]
[-161.86665344 -202.30207825]
[-153.75694275 -215.67245483]
[-138.93370056 -220.65295410]
[-124.39598846 -214.89193726]
[-117.00809479 -201.10960388]
[-120.25833130 -185.81352234]
[-110.88650513 -174.10160828]
[-97.95357513 -174.47491455]
[-87.01979828 -167.19888306]
[-82.22963715 -154.76077271]
[-85.55438995 -141.65205383]
[-76.45762634 -129.72525024]
[-67.36086273 -117.79843140]
[-51.43331528 -120.26085663]
[-36.34083176 -114.34543610]
[-26.21218300 -101.56935883]
[-23.86890221 -85.34015656]
[-30.03983116 -70.04718781]
[-20.66800499 -58.33527374]
[-11.29617691 -46.62336349]
[-1.92434871 -34.91145325]
[12.06874275 -29.80825043]
[14.64969349 -14.19898319]
[24.02152061 -2.48707247]
[33.52898407 9.11500168]
[43.17079926 20.60566902]
[52.81261444 32.09633636]
[62.45442963 43.58700180]
[84.11567688 34.12295914]
[107.70976257 32.67499924]
[130.36570740 39.41931152]
[149.32667542 53.53522873]
[162.28546143 73.30509949]
[167.66519165 96.32327271]
[164.81124878 119.78883362]
[178.58448792 125.73002625]
[192.35774231 131.67121887]
[206.13098145 137.61242676]
[219.90422058 143.55361938]
[233.67745972 149.49481201]
[247.45069885 155.43601990]
[261.22393799 161.37721252]
[274.99719238 167.31840515]
[292.23394775 159.63154602]
[309.36047363 166.77403259]
[315.80407715 183.83726501]
[329.83880615 189.13122559]
[343.87353516 194.42517090]
[361.92071533 190.98735046]
[372.56472778 204.89057922]
[386.71884155 209.85653687]
[402.30233765 207.12428284]
[411.75036621 218.63880920]
[425.90451050 223.60475159]
[440.05862427 228.57070923]
[456.06549072 225.00521851]
[466.95590210 237.26617432]
[461.52673340 252.74055481]
[445.36306763 255.50964355]
[435.09268188 242.72483826]
[420.93853760 237.75888062]
[406.78442383 232.79292297]
[392.21331787 235.88037109]
[381.75289917 224.01066589]
[367.59878540 219.04470825]
[356.50476074 224.00849915]
[344.63442993 219.91627502]
[338.57958984 208.45991516]
[324.54486084 203.16595459]
[310.51010132 197.87200928]
[301.28649902 204.76666260]
[289.75546265 206.32717896]
[278.80667114 202.04440308]
[271.24142456 192.88844299]
[269.05599976 181.09164429]
[255.28274536 175.15045166]
[241.50950623 169.20925903]
[227.73626709 163.26805115]
[213.96302795 157.32685852]
[200.18977356 151.38566589]
[186.41653442 145.44447327]
[172.64329529 139.50326538]
[158.87005615 133.56207275]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[26 79]
[27 78]
[28 77]
[29 76]
[31 75]
[32 74]
[34 72]
[35 71]
[36 70]
[37 69]
[43 64]
[44 63]
[45 62]
[48 58]
[49 57]
[86 134]
[87 133]
[88 132]
[89 131]
[90 130]
[91 129]
[92 128]
[93 127]
[94 126]
[97 121]
[98 120]
[99 119]
[101 116]
[102 115]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
