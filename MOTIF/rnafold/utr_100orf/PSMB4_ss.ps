%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:00:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUUCUGCUACCGUGACUAAGAUGGAAGCGUUUUUGGGGUCGCGGUCCGGACUUUGGGCGGGGGGUCCGGCCCCAGGACAGUUUUACCGCAUUCCGUCCACUCCCGAUUCCUUCAUGGAUC\
) } def
/len { sequence length } bind def

/coor [
[86.29476929 191.54133606]
[74.44763947 200.74163818]
[59.93042374 204.51661682]
[45.10223007 202.25283813]
[32.37269974 194.31816101]
[23.81042671 182.00201416]
[20.80681229 167.30581665]
[23.84996033 152.61775208]
[32.44534302 140.32469177]
[45.19617844 132.42430115]
[60.02917480 130.20036316]
[72.81178284 122.35147858]
[57.83103180 123.11121368]
[42.85028458 123.87094879]
[27.86953926 124.63068390]
[12.88879108 125.39042664]
[-2.09195685 126.15016174]
[-17.07270432 126.90989685]
[-32.05345154 127.66963959]
[-47.03419876 128.42938232]
[-61.97526550 129.75773621]
[-76.85507202 131.65281677]
[-91.73487854 133.54789734]
[-106.61468506 135.44297791]
[-121.49449921 137.33805847]
[-136.37429810 139.23313904]
[-149.09197998 149.58653259]
[-164.31872559 143.49734497]
[-166.39056396 127.22959137]
[-153.17617798 117.51815796]
[-138.26937866 124.35333252]
[-123.38957214 122.45825195]
[-108.50976562 120.56317139]
[-93.62995911 118.66809082]
[-78.75015259 116.77301025]
[-63.87034225 114.87793732]
[-61.39678192 112.21513367]
[-57.46326447 110.67533875]
[-52.63972855 110.95310974]
[-47.79393768 113.44862366]
[-32.81319046 112.68888855]
[-17.83244133 111.92915344]
[-2.85169435 111.16941833]
[12.12905312 110.40967560]
[27.10980034 109.64994049]
[42.09054947 108.89020538]
[57.07129669 108.13046265]
[72.05204010 107.37072754]
[84.57411194 80.36338806]
[110.02912140 81.50570679]
[121.41049194 71.73512268]
[132.79187012 61.96453094]
[130.65785217 48.28179550]
[135.55253601 35.44369888]
[146.08631897 26.79262543]
[159.41687012 24.52349281]
[172.01559448 29.12765694]
[183.64082336 19.64852715]
[195.26606750 10.16939640]
[206.89129639 0.69026595]
[218.51654053 -8.78886509]
[230.14176941 -18.26799583]
[241.76699829 -27.74712563]
[250.79760742 -39.72411728]
[256.71295166 -53.50848389]
[262.62826538 -67.29285431]
[268.54360962 -81.07721710]
[274.45895386 -94.86158752]
[275.14886475 -111.80149078]
[291.61773682 -115.82795715]
[300.04589844 -101.11733246]
[288.24331665 -88.94625092]
[282.32797241 -75.16188049]
[276.41265869 -61.37751389]
[270.49731445 -47.59314728]
[264.58197021 -33.80878067]
[275.45434570 -23.47382164]
[286.32574463 -13.13977146]
[299.79281616 -19.74568367]
[301.46334839 -35.08233643]
[311.17803955 -47.06682205]
[325.83703613 -51.87493515]
[340.76263428 -47.97242355]
[351.19219971 -36.60456467]
[353.79763794 -21.39880180]
[347.74758911 -7.20723820]
[334.97259521 1.44165015]
[319.54913330 1.78803444]
[306.39874268 -6.27861547]
[292.93167114 0.32729676]
[282.72805786 2.60990739]
[273.15634155 2.25658298]
[264.82833862 -0.34872577]
[258.22021484 -4.69133377]
[253.64668274 -10.16602993]
[251.24613953 -16.12189102]
[239.62089539 -6.64276028]
[227.99566650 2.83637023]
[216.37042236 12.31550026]
[204.74519348 21.79463196]
[193.11996460 31.27376175]
[181.49472046 40.75289154]
[182.95353699 57.05105591]
[174.35957336 71.17000580]
[158.90605164 77.48560333]
[142.56245422 73.34590149]
[131.18107605 83.11649323]
[119.79971313 92.88707733]
[123.04998016 105.33905029]
[118.30857849 118.85562134]
[105.69064331 128.33782959]
[111.60597992 142.12219238]
[117.52131653 155.90655518]
[131.82641602 163.16905212]
[134.92619324 178.90980530]
[124.44277954 191.05383301]
[108.41815186 190.28529358]
[99.14501953 177.19374084]
[103.73695374 161.82189941]
[97.82161713 148.03753662]
[91.90628052 134.25315857]
[90.48889923 149.18605042]
[95.02472687 163.48382568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 48]
[13 47]
[14 46]
[15 45]
[16 44]
[17 43]
[18 42]
[19 41]
[20 40]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[50 108]
[51 107]
[52 106]
[57 102]
[58 101]
[59 100]
[60 99]
[61 98]
[62 97]
[63 96]
[64 76]
[65 75]
[66 74]
[67 73]
[68 72]
[78 90]
[79 89]
[111 121]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
