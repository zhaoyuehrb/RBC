%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:22:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUUCAGGGGACAUUCAGAGGCAUCAGCCCCUUCCUCCUCACCAGCUCCCAGAGUUCCCAUCUCCAUCCCCAAUCCUAAAGAAGGAAAUCGAUGCCACGGUCCUCAAGGAGCCCUGGGGACCCAGGCGCCCUACUCGAAGAUGUGGCCCACAAUCCCAGACCCCGGAGGAUUGCCCAGCGAGGCCGGAACA\
) } def
/len { sequence length } bind def

/coor [
[98.66798401 213.38943481]
[83.91649628 216.10852051]
[70.45948792 209.48214722]
[63.62076950 196.13179016]
[66.10585022 181.33908081]
[76.93195343 170.95606995]
[81.73413086 156.74554443]
[86.53630829 142.53500366]
[79.10724640 141.50592041]
[68.08004761 151.67454529]
[57.05285263 161.84317017]
[46.02565384 172.01179504]
[34.99845886 182.18041992]
[38.07908249 194.31239319]
[35.71731949 206.53099060]
[28.42263794 216.52433777]
[17.63188362 222.42829895]
[5.42658663 223.17408752]
[-5.86847258 218.68122864]
[-17.21916389 228.48744202]
[-22.60369110 243.36418152]
[-37.29281998 245.82969666]
[-48.64351273 255.63589478]
[-59.99420547 265.44210815]
[-64.86665344 281.10070801]
[-80.92098999 284.44589233]
[-91.64189148 272.03643799]
[-86.00061035 256.63812256]
[-69.80041504 254.09141541]
[-58.44972610 244.28521729]
[-47.09903336 234.47900391]
[-42.52638245 220.30366516]
[-27.02537537 217.13674927]
[-15.67468357 207.33053589]
[-17.98201180 189.83334351]
[-9.25684452 174.31187439]
[7.17788219 167.06184387]
[24.82983398 171.15322876]
[35.85702896 160.98458862]
[46.88422394 150.81596375]
[57.91142273 140.64733887]
[68.93861389 130.47871399]
[62.58181000 118.41562653]
[60.49211121 105.51825714]
[62.53541946 93.19033813]
[68.14589691 82.66510773]
[76.41916656 74.88195801]
[68.77936554 61.97329712]
[61.13956070 49.06464005]
[53.49975967 36.15598297]
[45.85995483 23.24732780]
[30.81402779 19.21523094]
[23.25007057 6.01518536]
[27.18678093 -8.30395889]
[19.54697800 -21.21261597]
[11.90717602 -34.12127304]
[-3.13875175 -38.15336990]
[-10.70270920 -51.35341644]
[-6.76599789 -65.67256165]
[-14.40580082 -78.58121490]
[-27.26353455 -77.21556091]
[-39.63641739 -80.80599976]
[-49.69259644 -88.78411102]
[-55.95720291 -99.93460846]
[-57.52859497 -112.58039093]
[-54.20800018 -124.83475494]
[-46.52385330 -134.88287354]
[-53.74164200 -148.03215027]
[-60.95943069 -161.18144226]
[-68.17722321 -174.33071899]
[-82.16652679 -173.90760803]
[-94.91128540 -179.52919006]
[-103.94493103 -190.04512024]
[-107.54606628 -203.36398315]
[-105.06630707 -216.86914062]
[-97.04619598 -227.93272400]
[-104.05010986 -241.19714355]
[-111.05403137 -254.46157837]
[-118.05794525 -267.72601318]
[-132.90039062 -273.81546021]
[-137.25506592 -289.25619507]
[-127.78144836 -302.20339966]
[-111.74687958 -302.72509766]
[-101.45170593 -290.42108154]
[-104.79351044 -274.72991943]
[-97.78959656 -261.46548462]
[-90.78568268 -248.20106506]
[-83.78176117 -234.93663025]
[-67.63074493 -234.72358704]
[-53.70873260 -226.34988403]
[-45.86075974 -212.01779175]
[-46.30978775 -195.58995056]
[-55.02794266 -181.54850769]
[-47.81015396 -168.39923096]
[-40.59236526 -155.24993896]
[-33.37457657 -142.10066223]
[-16.17083931 -142.35931396]
[-1.12418997 -133.83270264]
[7.58340359 -118.78718567]
[7.47957850 -101.31492615]
[-1.49714375 -86.22101593]
[6.14265871 -73.31236267]
[20.58937645 -69.87318420]
[28.52111053 -56.89080429]
[24.81583214 -41.76107407]
[32.45563507 -28.85241890]
[40.09543610 -15.94376087]
[54.54215622 -12.50458431]
[62.47389221 0.47779751]
[58.76861191 15.60752583]
[66.40841675 28.51618195]
[74.04821777 41.42483902]
[81.68801880 54.33349609]
[89.32781982 67.24214935]
[113.56999207 68.33255005]
[131.07991028 85.13356781]
[145.69607544 81.76193237]
[160.31222534 78.39029694]
[174.92839050 75.01865387]
[189.54454041 71.64701843]
[204.16070557 68.27538300]
[207.55624390 54.69783020]
[216.43055725 43.96108246]
[229.00611877 38.12614822]
[242.80236816 38.28108597]
[255.12492371 44.33856964]
[263.59179688 55.06410217]
[278.26062012 51.92958832]
[286.01202393 47.06950378]
[293.19232178 48.86511230]
[307.90997314 45.96854401]
[322.62765503 43.07197571]
[327.86822510 39.00345230]
[333.52661133 38.30771637]
[337.86840820 40.32803345]
[352.67214966 37.90956879]
[359.52896118 23.98966217]
[373.27380371 16.78835678]
[388.62152100 19.07470131]
[399.67059326 29.96954918]
[402.17242432 45.28361130]
[395.16500854 59.12831497]
[381.34286499 66.18009186]
[366.02084351 63.72738647]
[355.09063721 52.71331787]
[340.28686523 55.13178253]
[325.52423096 57.78964996]
[310.80654907 60.68621826]
[296.08889771 63.58278656]
[281.39514160 66.59842682]
[266.72631836 69.73294067]
[262.13095093 85.21788788]
[250.28813171 96.33943939]
[234.36239624 99.99600983]
[218.67521667 95.09831238]
[207.53233337 82.89154053]
[192.91618347 86.26317596]
[178.30001831 89.63481140]
[163.68386841 93.00645447]
[149.06770325 96.37808990]
[134.45155334 99.74972534]
[135.50938416 109.34587097]
[133.79344177 119.43778229]
[129.13381958 129.20407104]
[121.60674286 137.77447510]
[129.45457458 150.55772400]
[137.30239868 163.34097290]
[145.15023804 176.12422180]
[157.04666138 176.58911133]
[167.13482666 182.68235779]
[172.96298218 192.78771973]
[173.18041992 204.33129883]
[167.84886169 214.43676758]
[175.27862549 227.46743774]
[182.70838928 240.49812317]
[190.13816833 253.52879333]
[203.23609924 264.29357910]
[196.51788330 279.85961914]
[179.70036316 277.71307373]
[177.10748291 260.95855713]
[169.67771912 247.92788696]
[162.24795532 234.89721680]
[154.81817627 221.86653137]
[136.91078186 218.11630249]
[127.25348663 202.20242310]
[132.36698914 183.97206116]
[124.51914978 171.18881226]
[116.67131805 158.40554810]
[108.82349396 145.62229919]
[101.39443207 144.59320068]
[102.15293121 159.57402039]
[102.91143036 174.55482483]
[110.50738525 187.48933411]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 42]
[10 41]
[11 40]
[12 39]
[13 38]
[19 34]
[20 33]
[22 31]
[23 30]
[24 29]
[47 114]
[48 113]
[49 112]
[50 111]
[51 110]
[54 107]
[55 106]
[56 105]
[59 102]
[60 101]
[67 96]
[68 95]
[69 94]
[70 93]
[76 88]
[77 87]
[78 86]
[79 85]
[116 161]
[117 160]
[118 159]
[119 158]
[120 157]
[121 156]
[127 151]
[128 150]
[130 149]
[131 148]
[132 147]
[135 146]
[136 145]
[165 189]
[166 188]
[167 187]
[168 186]
[173 183]
[174 182]
[175 181]
[176 180]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
