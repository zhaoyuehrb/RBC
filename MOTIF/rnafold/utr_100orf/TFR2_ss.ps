%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUGGGGGACAGCCUGCAGGCUUCAGGAGGGGACACAAGCAUGGAGCGGCUUUGGGGUCUAUUCCAGAGAGCGCAACAACUGUCCCCAAGAUCCUCUCAGACCGUCUACCAGCGUGUGGAAGGCCCCCGGAAAGGGCACC\
) } def
/len { sequence length } bind def

/coor [
[183.08581543 264.64819336]
[174.92550659 252.06213379]
[166.76519775 239.47604370]
[158.60488892 226.88996887]
[150.44458008 214.30389404]
[142.28428650 201.71780396]
[128.86822510 195.24795532]
[127.85280609 179.45936584]
[119.69250488 166.87329102]
[111.53219604 154.28721619]
[103.37188721 141.70112610]
[88.44616699 140.21023560]
[77.95754242 150.93351746]
[67.46891785 161.65679932]
[56.98028946 172.38008118]
[53.43774033 188.39201355]
[37.72036743 193.07136536]
[25.99685860 181.60440063]
[30.32735252 165.78735352]
[46.25701141 161.89144897]
[56.74563599 151.16816711]
[67.23426056 140.44488525]
[77.72288513 129.72160339]
[66.45518494 111.17919922]
[67.77340698 90.58544922]
[79.99530029 75.29516602]
[73.57260132 61.73976135]
[67.14990234 48.18436050]
[60.72720337 34.62895966]
[53.71118927 21.37092209]
[46.11559296 8.43620300]
[38.52000046 -4.49851608]
[30.92440414 -17.43323517]
[23.32880974 -30.36795235]
[15.73321533 -43.30267334]
[8.13762093 -56.23738861]
[-1.73477089 -55.85285568]
[-10.99899101 -59.11452103]
[-18.36503029 -65.52270508]
[-22.82403183 -74.14282227]
[-23.78635406 -83.74155426]
[-21.15923309 -92.96324158]
[-15.35382462 -100.52132416]
[-21.77652550 -114.07672119]
[-36.38884354 -119.47282410]
[-42.70927048 -133.31143188]
[-37.47486115 -147.20878601]
[-43.89756012 -160.76419067]
[-50.32026291 -174.31959534]
[-65.69567871 -184.38586426]
[-63.68531418 -201.78535461]
[-70.40631866 -215.19535828]
[-77.12731934 -228.60536194]
[-83.84832001 -242.01535034]
[-90.56932068 -255.42535400]
[-97.29032135 -268.83535767]
[-104.01132202 -282.24536133]
[-119.08649445 -286.99032593]
[-126.31685638 -301.04370117]
[-121.41276550 -316.06787109]
[-107.28372955 -323.14926147]
[-92.31225586 -318.08657837]
[-85.38065338 -303.88348389]
[-90.60132599 -288.96636963]
[-83.88032532 -275.55636597]
[-77.15931702 -262.14636230]
[-70.43831635 -248.73635864]
[-63.71731567 -235.32635498]
[-56.99631500 -221.91635132]
[-50.27531433 -208.50634766]
[-38.85681152 -204.36582947]
[-33.16680908 -193.18218994]
[-36.76485825 -180.74229431]
[-30.34215927 -167.18688965]
[-23.91946030 -153.63148499]
[-9.84939957 -148.88079834]
[-3.14276719 -135.22518921]
[-8.22112274 -120.49942017]
[-1.79842281 -106.94402313]
[17.92689705 -101.85214996]
[27.76781654 -83.68498993]
[21.07234001 -63.83298492]
[28.66793442 -50.89826584]
[36.26352692 -37.96354675]
[43.85912323 -25.02882957]
[51.45471573 -12.09411049]
[59.05031204 0.84060818]
[66.64590454 13.77532673]
[69.40731049 14.58859348]
[71.99871826 16.58841515]
[73.94979095 19.71039581]
[74.82444000 23.71515274]
[74.28260040 28.20625877]
[80.70530701 41.76166153]
[87.12800598 55.31706238]
[93.55070496 68.87246704]
[103.81640625 67.84204865]
[114.06323242 70.17024231]
[123.20176697 75.73346710]
[130.22169495 84.05815887]
[134.30291748 94.35931396]
[134.91007996 105.61386108]
[131.85957336 116.66213226]
[125.35090637 126.32734680]
[115.95796967 133.54083252]
[124.11827850 146.12690735]
[132.27857971 158.71298218]
[140.43888855 171.29907227]
[154.43861389 178.66915894]
[154.87036133 193.55749512]
[163.03067017 206.14358521]
[171.19096375 218.72966003]
[179.35127258 231.31573486]
[187.51158142 243.90182495]
[195.67189026 256.48791504]
[206.86477661 254.14979553]
[218.20747375 255.36607361]
[228.60127258 260.00231934]
[237.04452515 267.59375000]
[242.72903442 277.39154053]
[245.11758423 288.43688965]
[243.99452209 299.65472412]
[239.48518372 309.95831299]
[232.04214478 318.35464478]
[239.05816650 331.61267090]
[246.07417297 344.87072754]
[253.09019470 358.12875366]
[268.41656494 361.23294067]
[278.12145996 373.49465942]
[277.62246704 389.12426758]
[267.15524292 400.74197388]
[251.66206360 402.86224365]
[238.45835876 394.48394775]
[233.77848816 379.56304932]
[239.83215332 365.14477539]
[232.81614685 351.88674927]
[225.80012512 338.62869263]
[218.78411865 325.37066650]
[199.98583984 325.76403809]
[183.47482300 316.60128784]
[173.78016663 300.30297852]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 115]
[2 114]
[3 113]
[4 112]
[5 111]
[6 110]
[8 108]
[9 107]
[10 106]
[11 105]
[12 23]
[13 22]
[14 21]
[15 20]
[26 96]
[27 95]
[28 94]
[29 93]
[30 88]
[31 87]
[32 86]
[33 85]
[34 84]
[35 83]
[36 82]
[43 79]
[44 78]
[47 75]
[48 74]
[49 73]
[51 70]
[52 69]
[53 68]
[54 67]
[55 66]
[56 65]
[57 64]
[124 138]
[125 137]
[126 136]
[127 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
