%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:27:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCACAGACACCAAGGACAGAGACGCUGGCUAGGCCGCCCUCCCCACUGUUACCAACAUGAAGCUGCUCGCAGCAACUGUGCUACUCCUCACCAUCUGCAGCCUUGAAGGAGCUUUGGUUCGGAGACAGGCAAAGGAGCCAUGUGUGGAGAGCCUGG\
) } def
/len { sequence length } bind def

/coor [
[38.53831482 550.26367188]
[38.68036270 565.52612305]
[32.17844391 579.33508301]
[20.32351685 588.94879150]
[5.46938753 592.45843506]
[-9.43464756 589.16717529]
[-21.42938042 579.72845459]
[-28.13324928 566.01641846]
[-28.21519470 550.75354004]
[-21.65894699 536.97027588]
[-9.76625443 527.40332031]
[5.10158205 523.95214844]
[8.33611870 509.30505371]
[11.57065582 494.65795898]
[9.93344593 487.40975952]
[15.01649857 479.75476074]
[18.53978920 465.17440796]
[6.42555141 456.44662476]
[-1.44556069 443.71121216]
[-3.84762239 428.89245605]
[-0.38385791 414.24356079]
[8.44821358 402.00396729]
[21.32797813 394.05697632]
[36.30911255 391.64007568]
[39.83240128 377.05975342]
[43.35569382 362.47940063]
[46.87898254 347.89904785]
[50.25806427 333.28460693]
[53.49259949 318.63751221]
[56.72713470 303.99038696]
[59.96167374 289.34329224]
[63.19620895 274.69619751]
[51.51822662 259.15979004]
[55.00205612 239.73069763]
[71.86031342 228.89181519]
[74.22146606 214.07881165]
[76.58261871 199.26580811]
[65.94775391 188.87168884]
[63.44300079 174.03288269]
[70.23557281 160.40518188]
[83.90813446 153.30819702]
[86.26928711 138.49519348]
[88.63043976 123.68219757]
[90.99159241 108.86920166]
[92.91275024 93.99273682]
[94.39222717 79.06587982]
[95.87169647 64.13901520]
[86.12834167 51.98563004]
[87.84137726 36.86874771]
[99.48782349 27.65484619]
[100.96729279 12.72798538]
[102.44676971 -2.19887495]
[100.17095947 -11.10150909]
[104.10578156 -17.40501404]
[105.87987518 -32.29973221]
[96.37854004 -44.64324570]
[98.38990784 -59.72333527]
[110.21611786 -68.70533752]
[111.99021912 -83.60005188]
[102.91535950 -91.37787628]
[98.78767395 -102.46618652]
[100.53189087 -114.04703522]
[107.59597778 -123.23702240]
[118.11817169 -127.80519867]
[120.47932434 -142.61819458]
[122.84047699 -157.43119812]
[125.20162964 -172.24420166]
[127.56278229 -187.05718994]
[123.98631287 -196.75399780]
[127.74130249 -205.12692261]
[125.67327118 -219.98367310]
[123.60523987 -234.84043884]
[121.53721619 -249.69718933]
[119.46918488 -264.55395508]
[111.29686737 -279.40823364]
[123.30831146 -291.37322998]
[138.13082886 -283.14346313]
[134.32594299 -266.62197876]
[136.39396667 -251.76522827]
[138.46200562 -236.90846252]
[140.53002930 -222.05171204]
[142.59805298 -207.19494629]
[148.92974854 -220.79310608]
[159.42797852 -231.50697327]
[172.89460754 -238.11378479]
[187.79267883 -239.85951233]
[202.42187500 -236.54490662]
[215.11256409 -228.54826355]
[224.41638184 -216.78225708]
[229.27146912 -202.58972168]
[229.12370300 -187.59043884]
[223.98997498 -173.49630737]
[214.45617676 -161.91586304]
[201.61039734 -154.17079163]
[186.91874695 -151.14501953]
[172.05795288 -153.18391418]
[158.72410583 -160.05473328]
[148.43896484 -170.97334290]
[142.37577820 -184.69604492]
[140.01463318 -169.88304138]
[137.65347290 -155.07003784]
[135.29232788 -140.25704956]
[132.93116760 -125.44404602]
[144.55255127 -111.34982300]
[142.19451904 -92.91452789]
[126.88493347 -81.82595825]
[125.11083221 -66.93123627]
[134.49642944 -55.42271423]
[132.90942383 -40.29208374]
[120.77458954 -30.52563286]
[119.00049591 -15.63091660]
[117.37362671 -0.71940094]
[115.89415741 14.20745945]
[114.41468048 29.13431931]
[124.02582550 40.45516205]
[122.73806763 55.61419678]
[110.79856110 65.61849213]
[109.31908417 80.54534912]
[107.83960724 95.47221375]
[109.87952423 98.81498718]
[110.40991211 103.04982758]
[109.06268311 107.47019958]
[105.80459595 111.23035431]
[103.44344330 126.04335022]
[101.08229065 140.85635376]
[98.72113800 155.66935730]
[109.50972748 166.66537476]
[111.72888947 181.72952271]
[104.73493958 195.05426025]
[91.39561462 201.62696838]
[89.03446198 216.43997192]
[86.67330933 231.25296021]
[94.96043396 238.11845398]
[99.58879852 247.74401855]
[99.77382660 258.34185791]
[95.54938507 267.97467041]
[87.74921417 274.90975952]
[77.84331512 277.93072510]
[74.60877991 292.57781982]
[71.37424469 307.22494507]
[68.13970947 321.87203979]
[64.90517426 336.51916504]
[66.11206055 345.62847900]
[61.45932770 351.42233276]
[57.93603897 366.00268555]
[54.41274643 380.58303833]
[50.88945770 395.16339111]
[63.11391068 404.15438843]
[70.94365692 417.10577393]
[73.21220398 432.02780151]
[69.60465240 446.64196777]
[60.70097733 458.72869873]
[47.88301849 466.46469116]
[33.12013245 468.69772339]
[29.59684181 483.27804565]
[26.21776390 497.89248657]
[22.98322678 512.53961182]
[19.74868965 527.18670654]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 158]
[13 157]
[14 156]
[16 155]
[17 154]
[24 147]
[25 146]
[26 145]
[27 144]
[28 142]
[29 141]
[30 140]
[31 139]
[32 138]
[35 132]
[36 131]
[37 130]
[41 126]
[42 125]
[43 124]
[44 123]
[45 119]
[46 118]
[47 117]
[50 114]
[51 113]
[52 112]
[54 111]
[55 110]
[58 107]
[59 106]
[64 103]
[65 102]
[66 101]
[67 100]
[68 99]
[70 82]
[71 81]
[72 80]
[73 79]
[74 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
