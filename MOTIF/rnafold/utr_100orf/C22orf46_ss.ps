%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUAUCCUACUGCAGCUGGCUGCAUCAGAUGUGCCAGGCCUGCCCUCUAGCUCCCAACACCAUCUGCCUGAUCUAAGCUUUGCCAUGUUGUUGUCACUGCUGGGUGCCUGUGCUGUGGUGGGGCCAUUCCAUGGCCCUGAGUGGGAGCCAGUGCAGGGCCUGCUCUCCCAGAAUCACAGCUGCA\
) } def
/len { sequence length } bind def

/coor [
[134.82284546 257.38830566]
[135.44627380 272.63870239]
[129.38319397 286.64590454]
[117.83741760 296.62878418]
[103.10139465 300.60525513]
[88.10095215 297.78573608]
[75.81444550 288.73010254]
[68.68137360 275.23632812]
[68.11801147 259.98361206]
[74.23620605 246.00039673]
[85.82119751 236.06304932]
[100.57276917 232.14465332]
[103.34365845 217.40280151]
[106.11455536 202.66094971]
[108.88544464 187.91909790]
[111.65633392 173.17724609]
[114.42722321 158.43540955]
[117.19811249 143.69355774]
[119.96900940 128.95170593]
[113.70671844 124.82450867]
[100.29592896 131.54394531]
[101.18214417 116.57011414]
[94.91985321 112.44291687]
[82.46543121 120.80278778]
[70.01100922 129.16265869]
[57.55658722 137.52252197]
[53.06159973 152.92298889]
[38.16436768 158.87715149]
[24.29277229 150.81747437]
[22.08791351 134.92666626]
[33.24116898 123.39477539]
[49.19672012 125.06809998]
[61.65114212 116.70822906]
[74.10556030 108.34836578]
[86.55998230 99.98849487]
[95.02473450 87.60511780]
[98.29193878 72.96526337]
[101.55913544 58.32540512]
[104.82633972 43.68555069]
[108.09354401 29.04569435]
[111.36074829 14.40583897]
[114.50420380 -0.26108649]
[117.52368164 -14.95403576]
[120.54315948 -29.64698410]
[114.02807617 -38.39124680]
[113.42579651 -49.05891418]
[118.69415283 -58.10085297]
[127.87770081 -62.64198303]
[131.39169312 -77.22457123]
[127.10262299 -92.45330811]
[137.60618591 -103.01381683]
[141.12017822 -117.59640503]
[144.63418579 -132.17898560]
[148.14817810 -146.76158142]
[151.66217041 -161.34416199]
[155.17617798 -175.92675781]
[158.69017029 -190.50933838]
[145.88995361 -214.75144958]
[166.42048645 -237.78172302]
[164.90295410 -252.70475769]
[163.38542175 -267.62780762]
[161.86790466 -282.55084229]
[160.35037231 -297.47387695]
[158.83285522 -312.39691162]
[149.33955383 -321.14956665]
[148.39367676 -333.62512207]
[155.95855713 -343.08190918]
[154.69328308 -358.02844238]
[137.92111206 -367.20135498]
[130.10380554 -384.48242188]
[134.22303772 -402.84326172]
[148.44538879 -414.93460083]
[146.42471313 -429.79788208]
[144.40403748 -444.66116333]
[142.38337708 -459.52441406]
[140.36270142 -474.38769531]
[136.09738159 -482.49041748]
[138.43560791 -489.51882935]
[136.66625977 -504.41409302]
[124.53453827 -514.18444824]
[122.95235443 -529.31555176]
[132.34161377 -540.82110596]
[130.57226562 -555.71636963]
[121.26116180 -568.50750732]
[127.44317627 -582.05859375]
[125.67382812 -596.95391846]
[113.10480499 -606.53485107]
[111.07476044 -622.20825195]
[120.78808594 -634.67529297]
[136.48204041 -636.53948975]
[148.84567261 -626.69488525]
[150.54386902 -610.98211670]
[140.56910706 -598.72326660]
[142.33845520 -583.82800293]
[151.52301025 -572.10223389]
[145.46754456 -557.48571777]
[147.23690796 -542.59045410]
[159.06024170 -533.60467529]
[161.06680298 -518.52392578]
[151.56153870 -506.18347168]
[153.33088684 -491.28817749]
[155.22596741 -476.40835571]
[157.24664307 -461.54510498]
[159.26731873 -446.68182373]
[161.28799438 -431.81854248]
[163.30865479 -416.95529175]
[173.98976135 -413.61090088]
[182.68449402 -406.48171997]
[188.10638428 -396.57290649]
[189.43464661 -385.30432129]
[186.43833923 -374.30722046]
[179.51528931 -365.18801880]
[169.63983154 -359.29370117]
[170.90509033 -344.34716797]
[181.69425964 -330.51840210]
[173.75588989 -313.91442871]
[175.27342224 -298.99139404]
[176.79093933 -284.06835938]
[178.30847168 -269.14532471]
[179.82598877 -254.22227478]
[181.34352112 -239.29924011]
[193.93736267 -231.15090942]
[208.17156982 -235.88244629]
[222.40577698 -240.61396790]
[236.63996887 -245.34550476]
[250.87417603 -250.07704163]
[265.10839844 -254.80856323]
[279.34259033 -259.54010010]
[292.46585083 -270.27398682]
[306.41314697 -260.63500977]
[301.01184082 -244.56445312]
[284.07412720 -245.30589294]
[269.83990479 -240.57435608]
[255.60571289 -235.84283447]
[241.37150574 -231.11129761]
[227.13729858 -226.37977600]
[212.90309143 -221.64823914]
[198.66888428 -216.91670227]
[198.33937073 -207.17419434]
[194.82899475 -198.52844238]
[188.83056641 -191.93373108]
[181.29135132 -188.01141357]
[173.27275085 -186.99534607]
[169.75875854 -172.41275024]
[166.24476624 -157.83016968]
[162.73075867 -143.24758911]
[159.21676636 -128.66499329]
[155.70277405 -114.08241272]
[152.18876648 -99.49982452]
[156.72918701 -85.31413269]
[145.97428894 -73.71057129]
[142.46028137 -59.12798691]
[149.29557800 -41.05379105]
[135.23609924 -26.62750626]
[132.21662903 -11.93455791]
[129.19714355 2.75839138]
[130.93420410 9.95897484]
[126.00060272 17.67304230]
[122.73339844 32.31289673]
[119.46619415 46.95275497]
[116.19899750 61.59260941]
[112.93179321 76.23246765]
[109.66458893 90.87232208]
[119.55055237 79.59101868]
[130.22111511 69.04877472]
[143.81817627 62.71473312]
[158.75398254 61.32852173]
[173.28450012 65.05200195]
[185.71296692 73.45039368]
[194.58815002 85.54300690]
[198.87365723 99.91778564]
[198.06909180 114.89619446]
[192.26840210 128.72920227]
[182.14892578 139.80151367]
[168.89231873 146.82022095]
[154.04655457 148.96575928]
[139.34678650 145.98822021]
[134.71086121 131.72259521]
[131.93997192 146.46444702]
[129.16908264 161.20629883]
[126.39818573 175.94815063]
[123.62729645 190.68998718]
[120.85639954 205.43183899]
[118.08551025 220.17369080]
[115.31462097 234.91554260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 185]
[13 184]
[14 183]
[15 182]
[16 181]
[17 180]
[18 179]
[19 178]
[23 35]
[24 34]
[25 33]
[26 32]
[36 163]
[37 162]
[38 161]
[39 160]
[40 159]
[41 158]
[42 156]
[43 155]
[44 154]
[48 152]
[49 151]
[51 149]
[52 148]
[53 147]
[54 146]
[55 145]
[56 144]
[57 143]
[59 121]
[60 120]
[61 119]
[62 118]
[63 117]
[64 116]
[67 114]
[68 113]
[72 106]
[73 105]
[74 104]
[75 103]
[76 102]
[78 101]
[79 100]
[82 97]
[83 96]
[85 94]
[86 93]
[122 138]
[123 137]
[124 136]
[125 135]
[126 134]
[127 133]
[128 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
