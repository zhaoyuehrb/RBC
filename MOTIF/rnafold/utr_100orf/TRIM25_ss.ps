%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:37:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUCCUCGGCGGCCUCGGAGCGCGGGUGCAGCAGUUGUGUCCCGACCCCUGGGAGCGCCAUGGCAGAGCUGUGCCCCCUGGCCGAGGAGCUGUCGUGCUCCAUCUGCCUGGAGCCCUUCAAGGAGCCGGUCACCACUCCGUGCGGCCACAACUUCUGCG\
) } def
/len { sequence length } bind def

/coor [
[79.60743713 384.73348999]
[69.96956635 373.11392212]
[63.82505798 359.32452393]
[61.62988281 344.38854980]
[63.54693604 329.41430664]
[69.43395996 315.51303101]
[78.85409546 303.71627808]
[91.10831451 294.89941406]
[105.28726196 289.71676636]
[104.11766815 274.76242065]
[102.94808197 259.80810547]
[94.24195099 247.72286987]
[100.87966156 233.36141968]
[99.71006775 218.40708923]
[90.70491028 210.28303528]
[89.63542938 197.79908752]
[97.62274933 187.62962341]
[96.74516296 172.65531921]
[95.86758423 157.68101501]
[94.98999786 142.70671082]
[94.11241150 127.73239899]
[80.23635864 121.99001312]
[70.73962402 109.55831146]
[68.68664551 93.41749573]
[75.25303650 77.84770966]
[61.55382919 71.73774719]
[47.85461807 65.62778473]
[34.15540695 59.51782608]
[20.45619583 53.40786362]
[6.75698566 47.29790115]
[-6.94222498 41.18793869]
[-20.64143562 35.07798004]
[-34.34064484 28.96801758]
[-54.23465347 32.01005554]
[-64.98730469 15.97474384]
[-78.91447449 10.40392399]
[-92.84163666 4.83310461]
[-106.76880646 -0.73771477]
[-120.69597626 -6.30853415]
[-134.62313843 -11.87935352]
[-148.75704956 -16.90254784]
[-163.07618713 -21.37046814]
[-177.39532471 -25.83838654]
[-191.71446228 -30.30630684]
[-206.03359985 -34.77422714]
[-220.85237122 -28.62738419]
[-234.82731628 -36.50650024]
[-237.23805237 -52.36739349]
[-226.23527527 -64.04293823]
[-210.25936890 -62.57666397]
[-201.56568909 -49.09336472]
[-187.24655151 -44.62544250]
[-172.92741394 -40.15752411]
[-158.60827637 -35.68960571]
[-144.28913879 -31.22168541]
[-141.71556091 -32.44920731]
[-138.48887634 -32.70476913]
[-134.98670959 -31.72985840]
[-131.67469788 -29.41100883]
[-129.05232239 -25.80652046]
[-115.12515259 -20.23570061]
[-101.19799042 -14.66488171]
[-87.27082062 -9.09406185]
[-73.34365082 -3.52324247]
[-59.41648865 2.04757714]
[-50.36619949 -2.82782984]
[-39.90984726 -1.86974418]
[-31.55273056 4.84477949]
[-28.23068428 15.26880646]
[-14.53147411 21.37876892]
[-0.83226359 27.48872948]
[12.86694717 33.59869003]
[26.56615829 39.70865250]
[40.26536942 45.81861496]
[53.96458054 51.92857361]
[67.66378784 58.03853607]
[81.36299896 64.14849854]
[95.72504425 59.82049179]
[103.76738739 47.15871048]
[104.63523865 31.36132622]
[117.99024963 24.76639938]
[126.03259277 12.10461807]
[134.07493591 -0.55716342]
[134.94277954 -16.35454941]
[148.29779053 -22.94947624]
[156.34013367 -35.61125946]
[164.25856018 -48.35089874]
[172.05232239 -61.16719055]
[179.84608459 -73.98348236]
[187.63984680 -86.79977417]
[195.43359375 -99.61606598]
[191.44866943 -114.90972137]
[199.51710510 -128.49926758]
[214.85203552 -132.32228088]
[228.35551453 -124.11063385]
[232.01618958 -108.73613739]
[223.66223145 -95.32022095]
[208.24989319 -91.82230377]
[200.45613098 -79.00601196]
[192.66236877 -66.18972015]
[184.86860657 -53.37343216]
[177.07485962 -40.55714035]
[176.28237915 -33.17074585]
[169.00190735 -27.56891441]
[160.95956421 -14.90713215]
[160.66696167 -0.01540166]
[146.73670959 7.48518038]
[138.69436646 20.14696121]
[130.65202332 32.80874252]
[130.35942078 47.70047379]
[116.42916870 55.20105743]
[108.38682556 67.86283875]
[121.46102142 69.72653198]
[134.00976562 77.09449005]
[149.00904846 76.94814301]
[164.00619507 76.65546417]
[178.99977112 76.21648407]
[193.99334717 75.77751160]
[209.64874268 69.27021790]
[220.23556519 82.51240540]
[210.44161987 96.35129547]
[194.43232727 90.77108002]
[179.43875122 91.21006012]
[164.44517517 91.64904022]
[157.81771851 95.00518036]
[149.15539551 91.94743347]
[134.15611267 92.09377289]
[132.55860901 99.42166901]
[127.76614380 121.40534973]
[141.34353638 127.78144073]
[158.25061035 129.04133606]
[161.72029114 145.63644409]
[146.73423767 153.56451416]
[134.96743774 141.35882568]
[121.39005280 134.98274231]
[114.69293976 131.41062927]
[109.08672333 126.85482025]
[109.96430206 141.82911682]
[110.84188843 156.80343628]
[111.71947479 171.77774048]
[112.59705353 186.75204468]
[123.08004761 201.86256409]
[114.66439819 217.23748779]
[115.83399200 232.19183350]
[124.62377167 245.34667969]
[117.90241241 258.63851929]
[119.07199860 273.59283447]
[120.24159241 288.54718018]
[135.05387878 291.46240234]
[148.52986145 298.26687622]
[159.66950989 308.45562744]
[167.64617920 321.27261353]
[171.86798096 335.76672363]
[172.02160645 350.86239624]
[168.09567261 365.43939209]
[160.38148499 378.41607666]
[149.45150757 388.82943726]
[136.11680603 395.90673828]
[121.36691284 399.12283325]
[106.29636383 398.23904419]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 148]
[10 147]
[11 146]
[13 144]
[14 143]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[25 77]
[26 76]
[27 75]
[28 74]
[29 73]
[30 72]
[31 71]
[32 70]
[33 69]
[35 65]
[36 64]
[37 63]
[38 62]
[39 61]
[40 60]
[41 55]
[42 54]
[43 53]
[44 52]
[45 51]
[78 112]
[79 111]
[81 109]
[82 108]
[83 107]
[85 105]
[86 104]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
[114 127]
[115 126]
[116 124]
[117 123]
[118 122]
[129 135]
[130 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
