%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:17:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACACUGGCUAGGCAGGCAGCACAGUCCCGCGGACGGCUGAGCGUGUGGCUGCAGGAGCUUCUGUGGGAGUACGGUCAUGAGCCUUUUGCUGUACUAUGCCCUCCCUGCCCUGGGCAGCUAUGCCAUGCUCUCCAUCUUCUUCCUGCGCCGGCCUCAUCUGCUGCACACGCCCAGGG\
) } def
/len { sequence length } bind def

/coor [
[102.12235260 174.36265564]
[102.12235260 159.36265564]
[102.12235260 144.36265564]
[94.95006561 142.16986084]
[80.60549164 137.78428650]
[73.43321228 135.59150696]
[65.04531860 148.02706909]
[56.65742111 160.46263123]
[48.26952744 172.89819336]
[39.99047470 185.40647888]
[31.82088852 197.98654175]
[23.65130234 210.56660461]
[29.33763695 225.00422668]
[25.41916466 240.01840210]
[13.40262032 249.83584595]
[-2.09139061 250.68156433]
[-15.10510540 242.23036194]
[-20.63448334 227.73188782]
[-16.55336761 212.76112366]
[-4.43102980 203.07460022]
[11.07124424 202.39701843]
[19.24082947 189.81695557]
[27.41041565 177.23689270]
[28.41929436 169.89410400]
[35.83396530 164.51029968]
[44.22185898 152.07473755]
[52.60975266 139.63917542]
[60.99764633 127.20361328]
[55.00376511 101.42355347]
[63.68701172 77.94643402]
[82.70870972 63.98407364]
[104.84354401 62.89667892]
[109.72706604 48.71390152]
[114.61058807 34.53112411]
[119.49411011 20.34834480]
[119.33154297 11.18667603]
[124.58860016 5.96194267]
[129.71890259 -8.13344669]
[134.84921265 -22.22883606]
[132.29846191 -37.84306717]
[143.92211914 -47.15647888]
[149.05242920 -61.25186920]
[154.18272400 -75.34725952]
[159.31303406 -89.44264984]
[159.31037903 -98.60575867]
[164.65782166 -103.73794556]
[170.03334045 -117.74165344]
[170.19061279 -126.90341187]
[175.62681580 -131.94149780]
[181.24591064 -145.84925842]
[186.86500549 -159.75701904]
[192.48411560 -173.66476440]
[192.80125427 -182.82238770]
[198.32453918 -187.76483154]
[204.18551636 -201.57240295]
[210.04647827 -215.37997437]
[215.90744019 -229.18754578]
[221.76841736 -242.99511719]
[227.62937927 -256.80270386]
[233.49034119 -270.61026001]
[224.49591064 -281.34289551]
[221.02568054 -294.84091187]
[223.70286560 -308.45080566]
[231.94796753 -319.52255249]
[244.10301208 -325.92532349]
[257.76470947 -326.45773315]
[263.86575317 -340.16091919]
[269.96679688 -353.86410522]
[276.06787109 -367.56729126]
[282.04910278 -381.32318115]
[287.91006470 -395.13076782]
[293.77102661 -408.93832397]
[299.63198853 -422.74591064]
[305.49295044 -436.55346680]
[303.76290894 -452.27981567]
[315.85806274 -460.97210693]
[321.71902466 -474.77969360]
[322.19595337 -483.93038940]
[327.80465698 -488.77566528]
[333.90570068 -502.47885132]
[340.00674438 -516.18200684]
[340.64328003 -525.32299805]
[346.33572388 -530.06970215]
[352.67498779 -543.66430664]
[359.01425171 -557.25891113]
[346.44778442 -549.06842041]
[331.72033691 -546.22204590]
[317.00692749 -549.14013672]
[304.48049927 -557.39172363]
[295.99105835 -569.75817871]
[292.79232788 -584.41314697]
[295.35678101 -599.19232178]
[303.30563354 -611.91302490]
[315.46496582 -620.69653320]
[330.03903198 -624.24572754]
[344.87542725 -622.03643799]
[357.78305054 -614.39489746]
[366.85565186 -602.44970703]
[370.75326538 -587.96490479]
[368.90048218 -573.08013916]
[378.34030151 -584.73736572]
[387.78009033 -596.39453125]
[397.21990967 -608.05175781]
[406.65969849 -619.70892334]
[401.08074951 -634.01873779]
[403.41998291 -649.19842529]
[413.04818726 -661.16479492]
[427.37539673 -666.69885254]
[442.54769897 -664.31207275]
[454.48379517 -654.64642334]
[459.97296143 -640.30187988]
[457.53860474 -625.13714600]
[447.83557129 -613.23138428]
[433.47393799 -607.78723145]
[418.31689453 -610.26910400]
[408.87707520 -598.61193848]
[399.43728638 -586.95471191]
[389.99746704 -575.29754639]
[380.55767822 -563.64038086]
[372.60888672 -550.91961670]
[366.26962280 -537.32501221]
[359.93032837 -523.73040771]
[353.70993042 -510.08099365]
[347.60888672 -496.37780762]
[341.50784302 -482.67462158]
[335.52661133 -468.91873169]
[329.66561890 -455.11114502]
[331.81491089 -440.37243652]
[319.30053711 -430.69250488]
[313.43957520 -416.88494873]
[307.57861328 -403.07736206]
[301.71762085 -389.26977539]
[295.85665894 -375.46221924]
[296.13818359 -368.05578613]
[289.77102661 -361.46624756]
[283.66998291 -347.76306152]
[277.56893921 -334.05987549]
[271.46789551 -320.35668945]
[281.27853394 -307.53295898]
[283.30310059 -291.41976929]
[276.89624023 -276.39505005]
[263.71646118 -266.58914185]
[247.29791260 -264.74929810]
[241.43695068 -250.94172668]
[235.57598877 -237.13415527]
[229.71501160 -223.32658386]
[223.85404968 -209.51901245]
[217.99308777 -195.71144104]
[212.13212585 -181.90386963]
[206.39186096 -168.04566956]
[200.77276611 -154.13790894]
[195.15367126 -140.23014832]
[189.53457642 -126.32239532]
[184.03704834 -112.36613464]
[178.66152954 -98.36242676]
[173.40841675 -84.31234741]
[168.27812195 -70.21695709]
[163.14781189 -56.12156677]
[158.01751709 -42.02617645]
[160.93521118 -27.42014122]
[148.94459534 -17.09853363]
[143.81428528 -3.00314450]
[138.68399048 11.09224510]
[133.67689514 25.23186684]
[128.79336548 39.41464615]
[123.90984344 53.59742355]
[119.02632141 67.78020477]
[126.40379333 72.07469177]
[132.78929138 78.07358551]
[137.78691101 85.54212952]
[141.05760193 94.15344238]
[142.34059143 103.50253296]
[141.47116089 113.12529755]
[138.39404297 122.52153778]
[133.17100525 131.18093872]
[125.98246002 138.61059570]
[117.12235260 144.36265564]
[117.12235260 159.36265564]
[117.12235260 174.36265564]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 179]
[2 178]
[3 177]
[6 28]
[7 27]
[8 26]
[9 25]
[10 23]
[11 22]
[12 21]
[32 167]
[33 166]
[34 165]
[35 164]
[37 163]
[38 162]
[39 161]
[41 159]
[42 158]
[43 157]
[44 156]
[46 155]
[47 154]
[49 153]
[50 152]
[51 151]
[52 150]
[54 149]
[55 148]
[56 147]
[57 146]
[58 145]
[59 144]
[60 143]
[66 138]
[67 137]
[68 136]
[69 135]
[70 133]
[71 132]
[72 131]
[73 130]
[74 129]
[76 127]
[77 126]
[79 125]
[80 124]
[81 123]
[83 122]
[84 121]
[85 120]
[100 119]
[101 118]
[102 117]
[103 116]
[104 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
