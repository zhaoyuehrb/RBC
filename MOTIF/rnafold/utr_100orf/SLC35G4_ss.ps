%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:16:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCUGAGCCAGGAGGAGAGGAGAAAGUCCAAGGAAAGAUGGCUGGCAGUCACCCCUACUUCAACCUGCCUGACUCCACACACCCAUCGCCGCCCUCCACUCCACCCAGCCUCCACUGGCACCAGCGCUGCCAGCCCU\
) } def
/len { sequence length } bind def

/coor [
[167.69334412 298.61804199]
[165.51455688 291.43463135]
[165.21865845 283.91177368]
[166.83596802 276.53619385]
[170.27265930 269.78799438]
[175.31610107 264.10925293]
[168.76425171 250.61579895]
[162.06033325 237.19725037]
[155.20520020 223.85531616]
[140.98970032 219.55937195]
[133.84756470 206.12641907]
[138.44992065 191.24501038]
[131.59478760 177.90307617]
[118.89628601 170.11866760]
[119.47151947 154.30792236]
[112.61639404 140.96598816]
[105.76126862 127.62405396]
[98.90613556 114.28211975]
[87.25939178 106.54616547]
[87.75193024 92.57301331]
[80.89679718 79.23107910]
[74.04167175 65.88914490]
[67.18654633 52.54721069]
[63.52596283 67.09368896]
[52.69271469 77.46869659]
[38.00169754 80.49755096]
[23.94824982 75.25344849]
[14.83262634 63.34104156]
[13.44414139 48.40544510]
[20.20766068 35.01683807]
[33.05359650 27.27203560]
[48.05118561 27.54089546]
[60.61170578 35.74164200]
[56.59315109 21.28995705]
[40.69901276 15.62331390]
[31.38066101 1.75466013]
[32.12632751 -14.77128506]
[42.44704437 -27.48710823]
[38.10291672 -41.84428406]
[33.75878525 -56.20146179]
[29.41465378 -70.55863953]
[25.07052231 -84.91581726]
[7.55623007 -98.82434845]
[12.84786701 -119.77963257]
[7.22527552 -133.68598938]
[1.60268414 -147.59233093]
[-4.56649494 -154.44535828]
[-3.98591590 -161.87702942]
[-9.29279518 -175.90690613]
[-14.59967518 -189.93676758]
[-19.90655327 -203.96662903]
[-25.21343422 -217.99649048]
[-40.32348251 -217.26051331]
[-54.92088699 -221.23178101]
[-67.57554626 -229.52122498]
[-77.04767609 -241.31672668]
[-82.40930939 -255.46267700]
[-83.13515472 -270.57321167]
[-79.15411377 -285.16796875]
[-70.85619354 -297.81704712]
[-59.05434799 -307.28128052]
[-44.90480042 -312.63342285]
[-29.79378128 -313.34915161]
[-15.20171165 -309.35833740]
[-2.55817437 -301.05194092]
[6.89814520 -289.24374390]
[12.24081421 -275.09063721]
[12.94641018 -259.97912598]
[8.94580841 -245.38973999]
[0.63094616 -232.75177002]
[-11.18357182 -223.30335999]
[-5.87669182 -209.27349854]
[-0.56981260 -195.24363708]
[4.73706675 -181.21377563]
[10.04394627 -167.18391418]
[15.50903034 -153.21492004]
[21.13162231 -139.30857849]
[26.75421333 -125.40222931]
[34.67623901 -123.90384674]
[41.41122437 -119.30189514]
[45.78663635 -112.30574799]
[47.00428009 -104.04875183]
[44.78492737 -95.90485382]
[39.42770004 -89.25994873]
[43.77183151 -74.90277100]
[48.11596298 -60.54559326]
[52.46009064 -46.18841553]
[56.80422211 -31.83123779]
[69.81010437 -28.61680222]
[79.59298706 -19.30550003]
[83.50798798 -6.26628637]
[80.42333221 7.10532379]
[71.04483795 17.27139854]
[75.06339264 31.72308350]
[80.52848053 45.69208145]
[87.38360596 59.03401566]
[94.23873138 72.37594604]
[101.09386444 85.71788025]
[112.74060822 93.45383453]
[112.24806976 107.42698669]
[119.10320282 120.76892090]
[125.95832825 134.11085510]
[132.81346130 147.45278931]
[146.00228882 156.19151306]
[144.93672180 171.04795837]
[151.79185486 184.38989258]
[166.57008362 189.31347656]
[173.33209229 202.94174194]
[168.54713440 217.00018311]
[175.40226746 230.34211731]
[182.16496277 236.61018372]
[182.25770569 244.06394958]
[188.80955505 257.55740356]
[211.80067444 262.73510742]
[223.67059326 282.80157471]
[217.27627563 304.95904541]
[226.14782715 317.05432129]
[235.01936340 329.14959717]
[243.89091492 341.24487305]
[252.76245117 353.34014893]
[261.63400269 365.43542480]
[277.24902344 366.27511597]
[288.63571167 376.99319458]
[290.41763306 392.52893066]
[281.75338745 405.54681396]
[266.73400879 409.90017700]
[252.45115662 403.53353882]
[245.64877319 389.45300293]
[249.53872681 374.30697632]
[240.66717529 362.21170044]
[231.79563904 350.11642456]
[222.92408752 338.02114868]
[214.05255127 325.92587280]
[205.18099976 313.83059692]
[198.04513550 315.68887329]
[190.64916992 315.68576050]
[183.47207642 313.81027222]
[176.98149109 310.17309570]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 113]
[7 112]
[8 110]
[9 109]
[12 106]
[13 105]
[15 103]
[16 102]
[17 101]
[18 100]
[20 98]
[21 97]
[22 96]
[23 95]
[33 94]
[34 93]
[38 88]
[39 87]
[40 86]
[41 85]
[42 84]
[44 78]
[45 77]
[46 76]
[48 75]
[49 74]
[50 73]
[51 72]
[52 71]
[116 134]
[117 133]
[118 132]
[119 131]
[120 130]
[121 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
