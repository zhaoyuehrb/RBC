%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:52:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUCGAGCCCGGGCCCCCGGCACGUCUAGGCCGCGGCCCAUGGGCUCCGCCGCCUGCCCCCGGGGAGCCUUGCCGGAGCUCGCGCCCUGCUGCCAGCCUCGCGAGCAGUCGCAGCCCCACACGCGAUGGGACGCGGGCU\
) } def
/len { sequence length } bind def

/coor [
[-49.35824585 204.81666565]
[-58.16115952 211.98789978]
[-68.71852875 216.09307861]
[-80.00012970 216.74931335]
[-90.91047668 213.90934753]
[-100.39519501 207.86465454]
[-107.54295349 199.21557617]
[-121.72453308 204.10258484]
[-135.90611267 208.98959351]
[-150.08769226 213.87660217]
[-164.26927185 218.76361084]
[-178.45083618 223.65061951]
[-192.52084351 228.85015869]
[-206.47236633 234.35968018]
[-220.42388916 239.86920166]
[-234.37542725 245.37873840]
[-248.32695007 250.88825989]
[-254.19937134 262.42999268]
[-265.99539185 266.70834351]
[-277.16195679 261.92990112]
[-291.23196411 267.12942505]
[-305.30197144 272.32897949]
[-319.37194824 277.52850342]
[-323.44586182 292.50125122]
[-335.56353760 302.19360352]
[-351.06549072 302.87863159]
[-363.99090576 294.29296875]
[-369.36965942 279.73797607]
[-365.13357544 264.81030273]
[-352.91146851 255.24998474]
[-337.40298462 254.73313904]
[-324.57150269 263.45852661]
[-310.50149536 258.25897217]
[-296.43148804 253.05944824]
[-282.36151123 247.85990906]
[-271.94113159 233.78157043]
[-253.83647156 236.93672180]
[-239.88494873 231.42720032]
[-225.93342590 225.91767883]
[-211.98188782 220.40815735]
[-198.03036499 214.89863586]
[-195.31773376 210.88053894]
[-190.01708984 208.56846619]
[-183.33784485 209.46903992]
[-169.15628052 204.58203125]
[-154.97470093 199.69502258]
[-140.79312134 194.80801392]
[-126.61154175 189.92100525]
[-112.42996216 185.03399658]
[-109.91901398 166.40002441]
[-98.31912231 151.49995422]
[-80.72047424 144.43531799]
[-61.87824631 147.20246887]
[-46.92781067 159.12930298]
[-33.23364258 153.00805664]
[-19.53947258 146.88679504]
[-5.84530401 140.76554871]
[7.84886456 134.64428711]
[21.54303360 128.52304077]
[31.00674629 113.78459167]
[49.28079605 115.73204803]
[62.83619690 109.30934906]
[76.39160156 102.88665009]
[89.94699860 96.46395111]
[102.88172150 88.86835480]
[115.09452057 80.15930939]
[127.30732727 71.45026398]
[132.53018188 63.85778809]
[139.88803101 62.68717575]
[152.29049683 54.25043869]
[155.56636047 48.36044312]
[160.59094238 45.49757767]
[165.43344116 45.72908401]
[178.19696045 37.84920883]
[190.96047974 29.96932793]
[196.67539978 22.73996162]
[204.09468079 22.05992317]
[217.02940369 14.46432877]
[225.69740295 -1.74058056]
[243.20648193 -1.27585268]
[255.97000122 -9.15573120]
[268.73352051 -17.03561020]
[281.49703979 -24.91548920]
[294.26055908 -32.79536819]
[307.02407837 -40.67524719]
[319.78762817 -48.55512238]
[323.47280884 -65.61721802]
[338.05010986 -74.59252930]
[354.29238892 -70.37036133]
[366.87847900 -78.53066254]
[379.46453857 -86.69097137]
[386.43438721 -101.53527832]
[402.79550171 -102.65156555]
[411.71697998 -88.89150238]
[404.02114868 -74.41025543]
[387.62484741 -74.10488892]
[375.03878784 -65.94458771]
[362.45269775 -57.78427887]
[361.53988647 -44.88547134]
[353.22137451 -34.73174667]
[340.37820435 -31.19510841]
[327.66748047 -35.79160309]
[314.90396118 -27.91172218]
[302.14044189 -20.03184509]
[289.37692261 -12.15196609]
[276.61340332 -4.27208710]
[263.84988403 3.60779142]
[251.08634949 11.48766994]
[247.97120667 23.22742844]
[237.33421326 29.88357735]
[224.62498474 27.39904785]
[211.69027710 34.99464035]
[198.84036255 42.73285294]
[186.07684326 50.61273193]
[173.31332397 58.49260712]
[160.72723389 66.65291595]
[148.32476807 75.08965302]
[136.01637268 83.66307068]
[123.80356598 92.37211609]
[111.59076691 101.08115387]
[126.43801117 103.21639252]
[137.31289673 113.54774475]
[140.20591736 128.26611328]
[134.05044556 141.94493103]
[121.11595917 149.54090881]
[106.17131042 148.25346375]
[94.72650146 138.55726624]
[91.00115204 124.02723694]
[96.36970520 110.01934814]
[82.81430054 116.44204712]
[69.25889587 122.86474609]
[55.70349503 129.28744507]
[50.60948944 141.19326782]
[39.12320709 146.24452209]
[27.66428757 142.21720886]
[13.97011852 148.33845520]
[0.27595022 154.45971680]
[-13.41821861 160.58096313]
[-27.11238670 166.70222473]
[-40.80655670 172.82347107]
[-40.22292709 184.24305725]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 49]
[8 48]
[9 47]
[10 46]
[11 45]
[12 44]
[13 41]
[14 40]
[15 39]
[16 38]
[17 37]
[20 35]
[21 34]
[22 33]
[23 32]
[54 140]
[55 139]
[56 138]
[57 137]
[58 136]
[59 135]
[61 132]
[62 131]
[63 130]
[64 129]
[65 120]
[66 119]
[67 118]
[69 117]
[70 116]
[73 115]
[74 114]
[75 113]
[77 112]
[78 111]
[80 108]
[81 107]
[82 106]
[83 105]
[84 104]
[85 103]
[86 102]
[89 98]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
