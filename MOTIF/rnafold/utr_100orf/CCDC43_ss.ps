%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:34:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGCGGUAGGCGCCCUAGGGGCUUGCAGGACCCUGACCCCAAGAUGGCGGCGCCCAGCGAAGUGGCCGCGAUAGCCCCUGGCGAAGGCGAUGGCGGAGGCGGCGGCUUUGGCUCCUGGCUGGACGGACGGUUGGAGGCACUGG\
) } def
/len { sequence length } bind def

/coor [
[119.46453857 216.22830200]
[103.69362640 215.20176697]
[93.33070374 203.26924133]
[94.52391815 187.51005554]
[106.56535339 177.27388000]
[107.53964233 162.30554199]
[108.51393127 147.33721924]
[109.48822021 132.36889648]
[88.30159760 126.95495605]
[77.64054108 111.26576996]
[62.83814240 113.69249725]
[48.03574753 116.11922455]
[33.23334885 118.54595947]
[18.43095016 120.97268677]
[3.62855244 123.39941406]
[-11.14668846 125.98635864]
[-25.89303780 128.73320007]
[-40.63938904 131.48005676]
[-55.25290680 134.86311340]
[-69.70615387 138.87603760]
[-84.15940857 142.88896179]
[-98.61265564 146.90188599]
[-102.17051697 155.77609253]
[-109.33712769 161.89358521]
[-118.39007568 163.95286560]
[-127.23028564 161.60809326]
[-133.86859131 155.51963806]
[-148.55197144 158.58531189]
[-163.23535156 161.65098572]
[-175.09457397 172.97753906]
[-190.75511169 168.11137390]
[-194.10675049 152.05838013]
[-181.70159912 141.33250427]
[-166.30102539 146.96760559]
[-151.61764526 143.90193176]
[-136.93426514 140.83625793]
[-122.92478943 125.73523712]
[-102.62557983 132.44863892]
[-88.17233276 128.43571472]
[-73.71907806 124.42278290]
[-59.26583099 120.40985870]
[-57.76957703 117.95622253]
[-55.17519379 115.97081757]
[-51.66480637 114.88876343]
[-47.57944489 115.06778717]
[-43.38623428 116.73369598]
[-28.63988495 113.98685455]
[-13.89353466 111.24000549]
[-7.84904480 106.89077759]
[1.20182240 108.59701538]
[16.00422096 106.17028809]
[30.80661774 103.74356079]
[45.60901642 101.31682587]
[60.41141510 98.89009857]
[75.21381378 96.46337128]
[81.95842743 79.63039398]
[99.39295197 70.62221527]
[119.92993164 75.53223419]
[133.16734314 93.85999298]
[140.90065002 81.00713348]
[148.63395691 68.15428162]
[156.36726379 55.30142212]
[164.10057068 42.44856262]
[171.83387756 29.59570694]
[172.31884766 13.78193474]
[185.51020813 6.86547565]
[193.24351501 -5.98738194]
[200.97682190 -18.84024048]
[208.71012878 -31.69309807]
[216.44343567 -44.54595566]
[209.12615967 -57.97743988]
[209.51177979 -73.16783142]
[217.39663696 -86.04011536]
[230.57772827 -93.18955994]
[245.46736145 -92.78410339]
[253.20066833 -105.63696289]
[260.93399048 -118.48982239]
[254.61396790 -130.78630066]
[255.20977783 -144.49041748]
[262.45758057 -156.00833130]
[274.36328125 -162.37280273]
[287.74990845 -162.00735474]
[295.75985718 -174.68966675]
[295.87005615 -191.08843994]
[310.25869751 -198.95603943]
[324.12396240 -190.19895935]
[323.20245361 -173.82572937]
[308.44213867 -166.67971802]
[300.43218994 -153.99742126]
[306.99465942 -138.98748779]
[303.30648804 -122.85621643]
[290.62188721 -111.97347260]
[273.78683472 -110.75651550]
[266.05352783 -97.90365601]
[258.32022095 -85.05079651]
[265.65286255 -72.08554840]
[265.51040649 -57.09102249]
[257.83090210 -44.09518051]
[244.59063721 -36.63917160]
[229.29629517 -36.81264877]
[221.56298828 -23.95978928]
[213.82968140 -11.10693169]
[206.09637451 1.74592590]
[198.36305237 14.59878349]
[198.43122864 29.49323273]
[184.68673706 37.32901382]
[176.95343018 50.18187332]
[169.22012329 63.03472900]
[161.48681641 75.88758850]
[153.75350952 88.74044800]
[146.02018738 101.59329987]
[148.28642273 116.42111969]
[159.50579834 126.37731171]
[170.72517395 136.33351135]
[186.18272400 139.70614624]
[190.56657410 153.94099426]
[201.78594971 163.89718628]
[213.00531006 173.85337830]
[224.22468567 183.80957031]
[235.44404602 193.76576233]
[246.66342163 203.72195435]
[257.88278198 213.67814636]
[273.64212036 212.48698425]
[285.57330322 222.85145569]
[286.59777832 238.62251282]
[276.10775757 250.44345093]
[260.32675171 251.30113220]
[248.61738586 240.68670654]
[247.92658997 224.89752197]
[236.70722961 214.94132996]
[225.48785400 204.98513794]
[214.26849365 195.02894592]
[203.04911804 185.07275391]
[191.82975769 175.11656189]
[180.61038208 165.16036987]
[165.95532227 162.49986267]
[160.76896667 147.55287170]
[149.54960632 137.59667969]
[138.33023071 127.64048767]
[124.45655060 133.34318542]
[123.48225403 148.31150818]
[122.50796509 163.27983093]
[121.53367615 178.24816895]
[132.14657593 189.95892334]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 143]
[6 142]
[7 141]
[8 140]
[10 55]
[11 54]
[12 53]
[13 52]
[14 51]
[15 50]
[16 48]
[17 47]
[18 46]
[19 41]
[20 40]
[21 39]
[22 38]
[27 36]
[28 35]
[29 34]
[59 111]
[60 110]
[61 109]
[62 108]
[63 107]
[64 106]
[66 104]
[67 103]
[68 102]
[69 101]
[70 100]
[75 95]
[76 94]
[77 93]
[82 89]
[83 88]
[112 139]
[113 138]
[114 137]
[116 135]
[117 134]
[118 133]
[119 132]
[120 131]
[121 130]
[122 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
