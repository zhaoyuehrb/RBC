%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:27:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCUGUUCUCAAUAACUCCGAAGUCAAGCUUUUCCUUCUGAUUGGGAUCCCAGGACUGGAACAUGCCCACAUUUGGUUCUCCAUCCCCAUUUGCCUCA\
) } def
/len { sequence length } bind def

/coor [
[64.23007202 118.77882385]
[76.16868591 109.69755554]
[90.28715515 104.62854004]
[76.08008575 99.81615448]
[61.87301254 95.00376892]
[47.66593933 90.19138336]
[30.39258766 100.11502075]
[11.59096336 94.49627686]
[2.86400294 77.25350189]
[-11.72967529 73.78585815]
[-26.32335281 70.31821442]
[-40.91703033 66.85057068]
[-55.51070786 63.38292313]
[-70.10438538 59.91527939]
[-84.69806671 56.44763565]
[-93.64237976 68.70629883]
[-106.56379700 76.58539581]
[-121.47707367 78.91085052]
[-136.10487366 75.35907745]
[-148.22549438 66.50157166]
[-156.01031494 53.71321487]
[-158.29965210 38.95895386]
[-172.89332581 35.49131012]
[-187.48699951 32.02366638]
[-202.08068848 28.55602074]
[-214.52052307 38.03147888]
[-230.13818359 37.24228668]
[-241.55947876 26.56108093]
[-243.39161682 11.03119850]
[-234.76951599 -2.01462626]
[-219.76428223 -6.41655254]
[-205.46092224 -0.09612505]
[-198.61303711 13.96234322]
[-184.01936340 17.42998886]
[-169.42568970 20.89763260]
[-154.83200073 24.36527824]
[-146.15048218 12.21783352]
[-133.44517517 4.29819679]
[-118.63571167 1.83962297]
[-103.97371674 5.24748039]
[-91.70050049 14.03279686]
[-83.70442963 26.88215065]
[-81.23042297 41.85395813]
[-66.63674164 45.32160187]
[-52.04306412 48.78924561]
[-37.44938660 52.25689316]
[-22.85570908 55.72453690]
[-8.26203060 59.19218063]
[6.33164787 62.65982437]
[13.52228737 54.91442871]
[23.39110947 50.90976715]
[34.10899353 51.46272659]
[43.65766525 56.53844833]
[50.20973969 65.24391174]
[52.47832489 75.98430634]
[66.68539429 80.79669952]
[80.89247131 85.60908508]
[95.09954071 90.42147064]
[110.08322144 91.12107849]
[124.67689514 87.65342712]
[139.27058411 84.18578339]
[153.86425781 80.71813965]
[158.10394287 69.38619995]
[167.24972534 61.65128708]
[178.89064026 59.39756775]
[190.03260803 63.08423233]
[197.86854553 71.65789032]
[212.64958191 69.10424042]
[227.43060303 66.55058289]
[235.13925171 52.94504166]
[249.80789185 47.52607346]
[264.51043701 52.85235596]
[272.30477905 66.40897369]
[269.51071167 81.79491425]
[257.44744873 91.74540710]
[241.81095886 91.56212616]
[229.98425293 81.33161163]
[215.20323181 83.88526917]
[200.42219543 86.43891907]
[190.96034241 101.95722198]
[172.88998413 105.87355042]
[157.33189392 95.31182098]
[142.73822021 98.77946472]
[128.14454651 102.24710846]
[113.55086517 105.71475220]
[127.13484955 112.07677460]
[138.17552185 122.23076630]
[145.64988708 135.23591614]
[148.86541748 149.88720703]
[147.52416992 164.82711792]
[141.75041199 178.67138672]
[132.07911682 190.13725281]
[119.40639496 198.16235352]
[104.90644073 202.00308228]
[89.92276001 201.30361938]
[75.84367371 196.12873840]
[63.97369385 186.95794678]
[55.41263962 174.64094543]
[50.95374680 160.31900024]
[51.01015091 145.31910706]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 58]
[4 57]
[5 56]
[6 55]
[9 49]
[10 48]
[11 47]
[12 46]
[13 45]
[14 44]
[15 43]
[22 36]
[23 35]
[24 34]
[25 33]
[59 85]
[60 84]
[61 83]
[62 82]
[67 79]
[68 78]
[69 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
