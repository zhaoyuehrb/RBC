%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:12:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACCCUCUCCGGCGGCGGCAGCGCCAGCGACAUGUCCGGCCAGACGGUGCUGACGGCCGAGGACGUGGACAUCGAUGUGGUGGGCGAGGGCGACGACG\
) } def
/len { sequence length } bind def

/coor [
[98.13105774 285.40417480]
[94.69409943 270.56817627]
[97.59500885 255.61808777]
[106.33118439 243.14414978]
[119.38902283 235.30752563]
[117.52754211 220.42347717]
[115.66606140 205.53942871]
[113.80458069 190.65538025]
[111.94309998 175.77133179]
[102.68617249 164.10263062]
[108.65107727 149.44895935]
[106.78959656 134.56491089]
[85.70476532 128.97517395]
[73.66400909 113.05435944]
[58.96954727 116.06646729]
[44.32370758 119.30673218]
[29.73002815 122.77437592]
[15.13634968 126.24201965]
[0.54267204 129.70967102]
[-11.00111866 141.35754395]
[-26.78935051 136.92315674]
[-30.58044624 120.96823120]
[-18.47444916 109.90582275]
[-2.92497277 115.11598969]
[11.66870499 111.64834595]
[26.26238251 108.18070221]
[40.85606003 104.71305847]
[46.73957443 100.02159882]
[55.95744324 101.37200165]
[70.65190125 98.35990143]
[73.99845886 86.29159546]
[82.06510925 76.71179199]
[93.38751221 71.35954285]
[93.85401154 56.36679840]
[94.32051086 41.37405396]
[94.78701019 26.38131142]
[95.25350952 11.38856697]
[95.72000885 -3.60417771]
[96.18650055 -18.59692192]
[96.18650055 -33.59692383]
[95.72000885 -48.58966446]
[95.25350952 -63.58240891]
[94.78701019 -78.57515717]
[80.67288971 -84.29455566]
[70.10997009 -95.26472473]
[64.92833710 -109.58500671]
[66.02573395 -124.77433014]
[73.21203613 -138.20106506]
[85.24217987 -147.53892517]
[100.03185272 -151.17007446]
[115.01866913 -148.46540833]
[127.60607147 -139.89352417]
[135.61320496 -126.93954468]
[137.65280151 -111.84782410]
[133.37147522 -97.23310089]
[123.51099396 -85.62746429]
[109.77975464 -79.04164886]
[110.24625397 -64.04891205]
[110.71275330 -49.05616379]
[111.17924500 -34.06341934]
[114.11750031 -30.09385872]
[114.46994781 -24.19593430]
[111.17924500 -18.13042450]
[110.71275330 -3.13767982]
[110.24625397 11.85506439]
[109.77975464 26.84780884]
[109.31325531 41.84055328]
[108.84675598 56.83329773]
[108.38025665 71.82604218]
[122.17641449 77.85816956]
[131.91506958 90.56114960]
[134.45513916 107.32632446]
[149.30842590 109.41905212]
[164.16172791 111.51177979]
[179.01502991 113.60451508]
[192.64427185 105.14146423]
[207.70973206 110.65614319]
[212.65446472 125.91815948]
[203.68530273 139.21980286]
[187.68261719 140.35719299]
[176.92230225 128.45780945]
[162.06900024 126.36508179]
[147.21569824 124.27235413]
[132.36241150 122.17961884]
[121.67364502 132.70343018]
[123.53512573 147.58747864]
[132.92520142 160.32077026]
[126.82714844 173.90985107]
[128.68862915 188.79389954]
[130.55010986 203.67794800]
[132.41159058 218.56199646]
[134.27307129 233.44604492]
[148.85871887 237.82542419]
[160.39787292 247.76362610]
[166.89132690 261.53878784]
[167.21401978 276.76428223]
[161.31007385 290.80218506]
[150.20237732 301.22039795]
[135.81538391 306.21383667]
[120.64175415 304.91741943]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 92]
[6 91]
[7 90]
[8 89]
[9 88]
[11 86]
[12 85]
[14 30]
[15 29]
[16 27]
[17 26]
[18 25]
[19 24]
[33 69]
[34 68]
[35 67]
[36 66]
[37 65]
[38 64]
[39 63]
[40 60]
[41 59]
[42 58]
[43 57]
[72 84]
[73 83]
[74 82]
[75 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
