%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCCAUGGACCCCGCGCCCGGCGUCCUAGAUCCCCGCGCCGCGCCGCCCGCGCUCCUGGGCACCCCGCAAGCCGAGGUGCUGGAGGACGUGUUGCGGGAGCAGU\
) } def
/len { sequence length } bind def

/coor [
[94.67516327 173.48147583]
[94.23065948 158.48806763]
[93.78616333 143.49465942]
[93.34165955 128.50123596]
[89.50692749 127.32305908]
[85.86932373 125.63158417]
[82.49717712 123.45858765]
[79.45384216 120.84489441]
[66.53818512 128.47285461]
[53.62253189 136.10083008]
[40.70687866 143.72879028]
[32.75898743 157.40876770]
[17.86559296 157.21882629]
[4.94993830 164.84678650]
[-7.96571589 172.47476196]
[-15.54895496 187.01527405]
[-31.94239616 187.44781494]
[-40.28187180 173.32743835]
[-31.98844719 159.17996216]
[-15.59368229 159.55909729]
[-2.67802835 151.93113708]
[10.23762608 144.30316162]
[17.26170349 131.16880798]
[33.07891083 130.81314087]
[45.99456787 123.18517303]
[58.91022110 115.55720520]
[71.82587433 107.92923737]
[70.79612732 98.05368042]
[73.12727356 88.40211487]
[78.55103302 80.08528137]
[86.44322205 74.06030273]
[95.89557648 71.02056122]
[105.82027435 71.31588745]
[115.07516479 74.91228485]
[125.83776855 64.46401978]
[136.60038757 54.01575089]
[147.36299133 43.56748581]
[158.12559509 33.11922073]
[168.88821411 22.67095375]
[173.40051270 7.50686121]
[187.92184448 4.19323587]
[198.68444824 -6.25502968]
[209.44705200 -16.70329475]
[220.20967102 -27.15155983]
[230.81626892 -37.75816345]
[241.26454163 -48.52077103]
[241.88081360 -61.50944519]
[250.94021606 -70.26698303]
[263.13641357 -70.43099213]
[273.89901733 -80.87925720]
[284.66162109 -91.32752228]
[288.72668457 -99.69178009]
[295.90139771 -101.92004395]
[306.96890259 -112.04479218]
[311.92858887 -127.06851196]
[326.54171753 -129.95036316]
[337.60922241 -140.07511902]
[348.67672729 -150.19985962]
[353.63641357 -165.22357178]
[368.24957275 -168.10542297]
[379.31704712 -178.23017883]
[390.38455200 -188.35491943]
[387.67712402 -203.54286194]
[393.63180542 -217.77470398]
[406.34848022 -226.50912476]
[421.76928711 -226.95899963]
[434.97351074 -218.98077393]
[441.74771118 -205.12028503]
[439.93032837 -189.80033875]
[430.10119629 -177.90950012]
[415.39682007 -173.24206543]
[400.50930786 -177.28741455]
[389.44180298 -167.16267395]
[378.37429810 -157.03793335]
[374.20623779 -142.73840332]
[358.80148315 -139.13235474]
[347.73397827 -129.00761414]
[336.66647339 -118.88286591]
[332.49841309 -104.58333588]
[317.09362793 -100.97729492]
[306.02615356 -90.85254669]
[295.10989380 -80.56491089]
[284.34729004 -70.11664581]
[273.58468628 -59.66838074]
[269.79766846 -42.60370636]
[252.02714539 -38.07250595]
[241.57887268 -27.30989647]
[239.13897705 -20.20436859]
[230.65792847 -16.38895226]
[219.89532471 -5.94068623]
[209.13272095 4.50757933]
[198.37010193 14.95584488]
[194.62762451 29.37260818]
[179.33647156 33.43356323]
[168.57386780 43.88182831]
[157.81124878 54.33009338]
[147.04864502 64.77835846]
[136.28604126 75.22662354]
[125.52342987 85.67488861]
[127.12295532 110.99996948]
[108.33507538 128.05674744]
[108.77957153 143.05015564]
[109.22407532 158.04356384]
[109.66857147 173.03697205]
[112.42912292 192.22106934]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 104]
[2 103]
[3 102]
[4 101]
[8 27]
[9 26]
[10 25]
[11 24]
[13 22]
[14 21]
[15 20]
[34 99]
[35 98]
[36 97]
[37 96]
[38 95]
[39 94]
[41 92]
[42 91]
[43 90]
[44 89]
[45 87]
[46 86]
[49 84]
[50 83]
[51 82]
[53 81]
[54 80]
[56 78]
[57 77]
[58 76]
[60 74]
[61 73]
[62 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
