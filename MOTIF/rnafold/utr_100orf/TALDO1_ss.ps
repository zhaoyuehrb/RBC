%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:26:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCCCGUCCCGUCGCCGCCGCCGCCGCCGCAGACCCCUCGGUCUUGCUAUGUCGAGCUCACCCGUGAAGCGUCAGAGGAUGGAGUCCGCGCUGGACCAGCUCAAGCAGUUCACCACCGUGGUGGCCGACACGGGCGACUUCCACGCCA\
) } def
/len { sequence length } bind def

/coor [
[116.68741608 437.33804321]
[125.57059479 425.03140259]
[138.30171204 416.76806641]
[135.20339966 402.09152222]
[132.10507202 387.41500854]
[129.00675964 372.73849487]
[125.90843201 358.06195068]
[122.81011200 343.38543701]
[119.71178436 328.70889282]
[116.90757751 326.47195435]
[115.07720184 322.73681641]
[114.92596436 317.99029541]
[116.90824127 313.02136230]
[114.73140717 298.18017578]
[112.55457306 283.33895874]
[110.37773132 268.49774170]
[107.09721375 264.94616699]
[106.05488586 259.27651978]
[108.43241119 252.99520874]
[106.87483215 238.07630920]
[105.31725311 223.15739441]
[103.75966644 208.23847961]
[102.20208740 193.31956482]
[100.64450836 178.40065002]
[99.08692932 163.48173523]
[97.52935028 148.56283569]
[83.66586304 145.80009460]
[71.18284607 139.16662598]
[61.13526917 129.22302246]
[54.37229919 116.80968475]
[51.46549988 102.97569275]
[36.53119278 101.57338715]
[21.59688377 100.17108154]
[6.64879704 98.92420959]
[-8.31145191 97.83290100]
[-23.27169991 96.74159241]
[-38.23194885 95.65027618]
[-52.74917221 103.27800751]
[-66.46719360 94.29202271]
[-65.27409363 77.93633270]
[-50.39722443 71.03627014]
[-37.14064026 80.69003296]
[-22.18038940 81.78134155]
[-7.22014141 82.87265015]
[7.74010754 83.96395874]
[14.68494129 81.29657745]
[22.99918747 85.23677826]
[37.93349457 86.63908386]
[52.86780167 88.04138184]
[63.02876282 68.41550446]
[80.82679749 55.31397247]
[102.58540344 51.44314575]
[105.68372345 36.76662064]
[108.78205109 22.09009361]
[102.64665222 4.75986481]
[114.79975128 -7.86163521]
[117.59207153 -22.59944153]
[120.38439941 -37.33724594]
[123.17671967 -52.07505417]
[125.96904755 -66.81285858]
[115.50586700 -78.11896515]
[113.72714996 -93.24144745]
[121.10688019 -106.35646057]
[134.63229370 -112.53718567]
[137.42460632 -127.27499390]
[135.78132629 -131.45364380]
[135.61183167 -135.52085876]
[136.69200134 -139.01586914]
[138.66822815 -141.60209656]
[141.11070251 -143.09930420]
[145.11845398 -157.55398560]
[149.12619019 -172.00868225]
[153.13392639 -186.46336365]
[157.14166260 -200.91804504]
[155.85142517 -205.21884155]
[156.02059937 -209.28607178]
[157.38755798 -212.67919922]
[159.57191467 -215.09220886]
[162.13040161 -216.38119507]
[167.32582092 -230.45271301]
[172.52124023 -244.52423096]
[177.71664429 -258.59573364]
[177.53062439 -275.54867554]
[193.76953125 -280.42047119]
[202.94630432 -266.16482544]
[191.78816223 -253.40032959]
[186.59275818 -239.32881165]
[181.39733887 -225.25729370]
[176.20191956 -211.18577576]
[171.59635925 -196.91030884]
[167.58862305 -182.45562744]
[163.58087158 -168.00093079]
[159.57313538 -153.54624939]
[155.56539917 -139.09155273]
[152.16241455 -124.48266602]
[149.37008667 -109.74485779]
[159.69717407 -99.04488373]
[161.76792908 -84.13932037]
[154.58065796 -70.71559143]
[140.70684814 -64.02053070]
[137.91453552 -49.28273010]
[135.12220764 -34.54492188]
[132.32987976 -19.80711746]
[129.53755188 -5.06931067]
[136.10023499 5.14041758]
[133.84909058 17.47538185]
[123.45857239 25.18841553]
[120.36025238 39.86494064]
[117.26193237 54.54146576]
[127.13347626 59.64870453]
[135.58741760 66.86410522]
[142.18209839 75.81069183]
[146.57296753 86.02105713]
[148.53062439 96.96175385]
[147.95278931 108.06118011]
[144.86964417 118.73945618]
[139.44229126 128.43867493]
[131.95425415 136.65213013]
[122.79676819 142.95066833]
[112.44825745 147.00524902]
[114.00583649 161.92416382]
[115.56342316 176.84307861]
[117.12100220 191.76197815]
[118.67858124 206.68089294]
[120.23616028 221.59980774]
[121.79374695 236.51872253]
[123.35132599 251.43763733]
[125.21894073 266.32092285]
[127.39577484 281.16210938]
[129.57261658 296.00332642]
[131.74945068 310.84454346]
[134.38832092 325.61059570]
[137.48663330 340.28710938]
[140.58496094 354.96362305]
[143.68327332 369.64016724]
[146.78160095 384.31668091]
[149.87992859 398.99322510]
[152.97824097 413.66973877]
[167.96307373 416.08206177]
[181.06262207 423.74798584]
[190.50524902 435.63076782]
[195.01396179 450.12341309]
[193.97895813 465.26583862]
[187.54022217 479.01019287]
[176.56855774 489.49765015]
[162.54777527 495.30987549]
[147.37406921 495.66082764]
[133.09956360 490.50299072]
[121.65476990 480.53399658]
[114.58750153 467.10202026]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 138]
[4 137]
[5 136]
[6 135]
[7 134]
[8 133]
[9 132]
[13 131]
[14 130]
[15 129]
[16 128]
[19 127]
[20 126]
[21 125]
[22 124]
[23 123]
[24 122]
[25 121]
[26 120]
[31 49]
[32 48]
[33 47]
[34 45]
[35 44]
[36 43]
[37 42]
[52 109]
[53 108]
[54 107]
[56 104]
[57 103]
[58 102]
[59 101]
[60 100]
[64 96]
[65 95]
[70 94]
[71 93]
[72 92]
[73 91]
[74 90]
[79 89]
[80 88]
[81 87]
[82 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
