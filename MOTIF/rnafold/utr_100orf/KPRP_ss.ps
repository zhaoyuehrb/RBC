%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:58:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUGAAGGACUGCUUGCCUGUGAGGAGGGUCACUCUUGACUGGCUGCAUCAGGACCAUGUGUGACCAGCAGCAGAUCCAGUGCCGCCUGCCGCUCCAACAGUGCUGCGUCAAGGGUCCCUCCUUCUGCUCCUCUCAAUCCCCCUUUGCCCAGAGCC\
) } def
/len { sequence length } bind def

/coor [
[144.89321899 220.12564087]
[140.28675842 215.12733459]
[137.45626831 208.89053345]
[136.71614075 202.02949524]
[138.17309570 195.23123169]
[141.71223450 189.18667603]
[134.34092712 176.12283325]
[126.96962738 163.05900574]
[119.59832764 149.99516296]
[112.22702789 136.93132019]
[104.85572052 123.86747742]
[91.29391479 122.74727631]
[80.44969940 114.52653503]
[66.23979950 119.33058929]
[52.02990723 124.13463593]
[45.59837341 135.35498047]
[33.62289429 139.04598999]
[22.71352577 133.74322510]
[8.41148853 138.26559448]
[-5.89054728 142.78794861]
[-16.71585846 154.32585144]
[-31.18364525 150.78573608]
[-45.48567963 155.30810547]
[-56.31099319 166.84599304]
[-70.77877808 163.30587769]
[-85.08081055 167.82824707]
[-99.38285065 172.35060120]
[-113.68488312 176.87297058]
[-127.98692322 181.39532471]
[-136.62924194 194.91160583]
[-152.59945679 196.43865967]
[-163.64657593 184.80505371]
[-161.29620361 168.93510437]
[-147.35133362 161.00286865]
[-132.50927734 167.09329224]
[-118.20725250 162.57093811]
[-103.90521240 158.04856873]
[-89.60317993 153.52619934]
[-75.30113983 149.00384521]
[-65.49880981 137.78941345]
[-50.00804520 141.00605774]
[-35.70600891 136.48370361]
[-25.90367317 125.26926422]
[-10.41291046 128.48591614]
[3.88912606 123.96355438]
[18.19116211 119.44119263]
[29.28774071 105.87515259]
[47.22585678 109.92473602]
[61.43575287 105.12068939]
[75.64565277 100.31664276]
[77.37014008 90.99310303]
[82.52410126 83.03451538]
[90.32646179 77.64698792]
[99.59480286 75.64696503]
[103.97565460 61.30094528]
[108.35650635 46.95493317]
[112.73735809 32.60891724]
[117.11820984 18.26290321]
[109.85675812 10.32044601]
[106.59965515 0.14868888]
[107.87750244 -10.37346077]
[113.38966370 -19.33185768]
[122.07148743 -25.12532997]
[132.29927063 -26.75172615]
[137.52230835 -40.81302261]
[142.74533081 -54.87431717]
[147.96835327 -68.93560791]
[147.23171997 -75.59259796]
[149.63987732 -80.81420898]
[153.68548584 -83.44240570]
[159.45994568 -97.28637695]
[165.23440552 -111.13035583]
[171.00886536 -124.97432709]
[176.78332520 -138.81829834]
[182.55780029 -152.66227722]
[170.92765808 -165.23403931]
[165.95303345 -181.56430054]
[168.58198547 -198.37600708]
[178.24172974 -212.31735229]
[192.96261597 -220.62998962]
[209.77957153 -221.69477844]
[215.00260925 -235.75607300]
[220.22563171 -249.81736755]
[225.44865417 -263.87866211]
[216.74472046 -276.72470093]
[217.28744507 -292.23229980]
[226.86816406 -304.43841553]
[241.80287170 -308.64959717]
[256.34887695 -303.24652100]
[264.91296387 -290.30679321]
[264.20202637 -274.80599976]
[254.48947144 -262.70452881]
[239.50994873 -258.65563965]
[234.28692627 -244.59432983]
[229.06390381 -230.53303528]
[223.84086609 -216.47174072]
[233.62115479 -207.83691406]
[239.88598633 -196.35636902]
[241.86515808 -183.39595032]
[239.29983521 -170.50604248]
[232.47610474 -159.23617554]
[222.19332886 -150.94866943]
[209.67050171 -146.65405273]
[196.40176392 -146.88781738]
[190.62730408 -133.04383850]
[184.85284424 -119.19986725]
[179.07838440 -105.35588837]
[173.30392456 -91.51191711]
[167.52946472 -77.66794586]
[162.02964783 -63.71258545]
[156.80662537 -49.65129089]
[151.58360291 -35.58999634]
[146.36056519 -21.52870178]
[155.78504944 -4.53064108]
[149.65583801 14.23260307]
[131.46421814 22.64375496]
[127.08337402 36.98976898]
[122.70252228 51.33578491]
[118.32167053 65.68180084]
[113.94081879 80.02781677]
[124.21273041 97.35836029]
[117.91956329 116.49617767]
[125.29086304 129.56001282]
[132.66217041 142.62385559]
[140.03346252 155.68769836]
[147.40476990 168.75154114]
[154.77606201 181.81538391]
[176.44001770 191.80117798]
[176.04913330 214.93896484]
[184.91380310 227.03929138]
[193.77845764 239.13960266]
[202.64312744 251.23992920]
[217.85902405 249.68313599]
[231.71968079 255.91041565]
[240.54368591 268.15802002]
[242.04248047 283.07812500]
[235.91316223 296.65371704]
[244.77783203 308.75402832]
[253.64250183 320.85437012]
[269.25704956 321.70291138]
[280.63763428 332.42745972]
[282.41070557 347.96420288]
[273.73907471 360.97717285]
[258.71722412 365.32202148]
[244.43798828 358.94723511]
[237.64361572 344.86285400]
[241.54217529 329.71902466]
[232.67750549 317.61871338]
[223.81285095 305.51837158]
[209.02099609 307.26956177]
[195.24700928 301.34225464]
[186.22966003 289.23629761]
[184.47100830 274.14312744]
[190.54281616 260.10458374]
[181.67814636 248.00427246]
[172.81347656 235.90396118]
[163.94882202 223.80363464]
[157.36265564 224.66197205]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 127]
[7 126]
[8 125]
[9 124]
[10 123]
[11 122]
[13 50]
[14 49]
[15 48]
[18 46]
[19 45]
[20 44]
[22 42]
[23 41]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[54 120]
[55 119]
[56 118]
[57 117]
[58 116]
[64 113]
[65 112]
[66 111]
[67 110]
[70 109]
[71 108]
[72 107]
[73 106]
[74 105]
[75 104]
[81 96]
[82 95]
[83 94]
[84 93]
[129 157]
[130 156]
[131 155]
[132 154]
[137 149]
[138 148]
[139 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
