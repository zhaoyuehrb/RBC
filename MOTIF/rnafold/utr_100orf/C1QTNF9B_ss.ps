%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:11:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAGUCUGUCAUCUGAACCAUGAGGAUCUGGUGGCUUCUGCUUGCCAUUGAAAUCUGCACAGGGAACAUAAACUCACAGGACACCUGCAGGCAAGGGCACCCUGGAAUCCCUGGGAACC\
) } def
/len { sequence length } bind def

/coor [
[27.50199509 316.84698486]
[20.39886475 330.05853271]
[13.29573441 343.27011108]
[6.19260359 356.48168945]
[-0.91052634 369.69323730]
[5.94831896 383.61215210]
[3.28274322 398.89855957]
[-7.88228559 409.67453003]
[-23.25358582 411.79650879]
[-36.92058182 404.44851685]
[-43.62802887 390.45602417]
[-40.79677963 375.19943237]
[-29.51551056 364.54522705]
[-14.12209511 362.59011841]
[-7.01896477 349.37854004]
[0.08416544 336.16699219]
[7.18729544 322.95541382]
[14.29042530 309.74383545]
[20.34400177 296.01962280]
[25.31131363 281.86596680]
[30.27862549 267.71231079]
[24.98533440 258.79977417]
[25.54883766 248.22776794]
[32.02423096 239.57417297]
[42.42478943 235.90371704]
[48.12003708 222.02696228]
[53.81528091 208.15020752]
[59.51052475 194.27346802]
[65.02515411 180.32394409]
[70.35823059 166.30401611]
[75.32553864 152.15037537]
[79.92374420 137.87254333]
[84.52194214 123.59470367]
[89.12014008 109.31687164]
[86.36566925 95.60903931]
[96.60202789 86.08493042]
[101.20022583 71.80709839]
[105.79842377 57.52926254]
[105.45848083 48.27701187]
[110.70577240 42.94321060]
[115.67308044 28.78955841]
[120.64039612 14.63590908]
[125.60770416 0.48225915]
[130.57501221 -13.67139053]
[135.54232788 -27.82504082]
[140.50964355 -41.97869110]
[131.85707092 -54.72385406]
[132.36245728 -69.94219971]
[141.62251282 -81.80455017]
[155.92082214 -85.89066315]
[160.88813782 -100.04431152]
[155.55644226 -109.69921112]
[156.46945190 -120.46869659]
[163.07473755 -128.74246216]
[172.95323181 -131.88377380]
[178.64846802 -145.76051331]
[184.34371948 -159.63726807]
[190.03897095 -173.51402283]
[185.17118835 -181.83998108]
[184.76147461 -191.33688354]
[188.77523804 -199.80027771]
[196.16607666 -205.32603455]
[205.14501953 -206.73835754]
[211.90278625 -220.12988281]
[218.66053772 -233.52139282]
[211.44265747 -247.25755310]
[213.71049500 -262.60800171]
[224.59201050 -273.67019653]
[239.90303040 -276.19052124]
[253.75617981 -269.19979858]
[260.82461548 -255.38615417]
[258.39041138 -240.06120300]
[247.38952637 -229.11770630]
[232.05204773 -226.76364136]
[225.29429626 -213.37213135]
[218.53654480 -199.98060608]
[221.68487549 -179.65116882]
[203.91571045 -167.81877136]
[198.22047424 -153.94201660]
[192.52522278 -140.06527710]
[186.82998657 -126.18852234]
[190.92175293 -107.36329651]
[175.04179382 -95.07699585]
[170.07447815 -80.92334747]
[178.68322754 -68.79785919]
[178.49906921 -53.75026703]
[169.38307190 -41.55387115]
[154.66329956 -37.01137924]
[149.69598389 -22.85772896]
[144.72866821 -8.70407867]
[139.76135254 5.44957161]
[134.79403687 19.60322189]
[129.82673645 33.75687027]
[124.85942078 47.91052246]
[120.07625580 62.12746048]
[115.47805786 76.40529633]
[110.87985992 90.68312836]
[113.63433075 104.39096069]
[103.39797211 113.91506958]
[98.79977417 128.19290161]
[94.20157623 142.47073364]
[89.60337830 156.74856567]
[90.65012360 163.47587585]
[88.39961243 168.86093140]
[84.37815094 171.63710022]
[79.04507446 185.65702820]
[78.90433502 194.91444397]
[73.38727570 199.96870422]
[67.69203186 213.84545898]
[61.99678421 227.72219849]
[56.30154037 241.59895325]
[60.00113678 261.33316040]
[44.43227386 272.67962646]
[39.46496201 286.83328247]
[34.49765015 300.98693848]
[48.72637939 296.23895264]
[62.25028229 302.72772217]
[67.45021820 316.79757690]
[61.39663696 330.52178955]
[47.50002289 336.16839600]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[4 15]
[5 14]
[19 115]
[20 114]
[21 113]
[25 111]
[26 110]
[27 109]
[28 108]
[29 106]
[30 105]
[31 102]
[32 101]
[33 100]
[34 99]
[36 97]
[37 96]
[38 95]
[40 94]
[41 93]
[42 92]
[43 91]
[44 90]
[45 89]
[46 88]
[50 84]
[51 83]
[55 81]
[56 80]
[57 79]
[58 78]
[63 76]
[64 75]
[65 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
